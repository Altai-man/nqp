.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1346233478.067") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P557 = 'cuid_373_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_374_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_32_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_223_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_243_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_400_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_401_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_402_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_403_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_404_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_405_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_406_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_360_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_371_1346233478.067' 
    capture_lex $P557 
    .const 'Sub' $P557 = 'cuid_372_1346233478.067' 
    capture_lex $P557 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$ops", $P103 
    .lex "&MAIN", $P104 
    .lex "&hll-config", $P105 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P501
    .const 'Sub' $P502 = 'cuid_373_1346233478.067' 
    capture_lex $P502
    set $P104, $P502
    .const 'Sub' $P503 = 'cuid_374_1346233478.067' 
    capture_lex $P503
    set $P105, $P503
    find_dynamic_lex $P504, "$*CTXSAVE"
    set ctxsave, $P504
    isnull $I501, ctxsave
    box $P509, $I501
    set $P508, $P509
    if $I501 goto unless12_end16 
    can $I502, ctxsave, "ctxsave"
    box $P507, $I502
    set $P506, $P507
    unless $I502 goto if13_end18 
    $P505 = ctxsave."ctxsave"()
    set $P506, $P505
  if13_end18:
    set $P508, $P506
  unless12_end16:
.annotate 'line', 1
    .const 'Sub' $P510 = 'cuid_32_1346233478.067' 
    capture_lex $P510
    $P511 = $P510()
    .const 'Sub' $P512 = 'cuid_223_1346233478.067' 
    capture_lex $P512
    $P513 = $P512()
    .const 'Sub' $P514 = 'cuid_243_1346233478.067' 
    capture_lex $P514
    $P515 = $P514()
.annotate 'line', 1380
    get_hll_global $P519, "GLOBAL"
    nqp_get_package_through_who $P518, $P519, "QAST"
    get_who $P517, $P518
    set $P516, $P517["Compiler"]
    unless_null $P516, fallback3554
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P520
  fallback3554:
    $P521 = $P516."operations"()
    set $P103, $P521
.annotate 'line', 1382
    $P522 = $P103."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1384
    .const 'Sub' $P524 = 'cuid_400_1346233478.067' 
    capture_lex $P524
    newclosure $P523, $P524
    $P525 = $P103."add_hll_op"("nqp", "preinc", $P523)
.annotate 'line', 1399
    .const 'Sub' $P527 = 'cuid_401_1346233478.067' 
    capture_lex $P527
    newclosure $P526, $P527
    $P528 = $P103."add_hll_op"("nqp", "predec", $P526)
.annotate 'line', 1414
    .const 'Sub' $P530 = 'cuid_402_1346233478.067' 
    capture_lex $P530
    newclosure $P529, $P530
    $P531 = $P103."add_hll_op"("nqp", "postinc", $P529)
.annotate 'line', 1438
    .const 'Sub' $P533 = 'cuid_403_1346233478.067' 
    capture_lex $P533
    newclosure $P532, $P533
    $P534 = $P103."add_hll_op"("nqp", "postdec", $P532)
.annotate 'line', 1462
    .const 'Sub' $P536 = 'cuid_404_1346233478.067' 
    capture_lex $P536
    newclosure $P535, $P536
    $P537 = $P103."add_hll_op"("nqp", "numify", $P535)
.annotate 'line', 1466
    .const 'Sub' $P539 = 'cuid_405_1346233478.067' 
    capture_lex $P539
    newclosure $P538, $P539
    $P540 = $P103."add_hll_op"("nqp", "stringify", $P538)
.annotate 'line', 1470
    .const 'Sub' $P542 = 'cuid_406_1346233478.067' 
    capture_lex $P542
    newclosure $P541, $P542
    $P543 = $P103."add_hll_op"("nqp", "eqaddr", $P541)
    .const 'Sub' $P544 = 'cuid_360_1346233478.067' 
    capture_lex $P544
    $P545 = $P544()
    .const 'Sub' $P546 = 'cuid_371_1346233478.067' 
    capture_lex $P546
    $P547 = $P546()
    .const 'Sub' $P548 = 'cuid_372_1346233478.067' 
    capture_lex $P548
    $P549 = $P548()
    set $P556, _lex_param_0
    unless _lex_param_0 goto if1627_end5229 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P550, "ModuleLoader"
    getinterp $P552
    set $P551, $P552["context"]
    $P553 = $P550."set_mainline_module"($P551)
    .const 'Sub' $P554 = "cuid_373_1346233478.067" 
    $P555 = $P554(_lex_param_0 :flat)
    set $P556, $P555
  if1627_end5229:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_373_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3132
    .param pmc _lex_param_0 
    .lex "$nqpcomp", $P101 
    .lex "@clo", $P102 
    .lex "@ARGS", _lex_param_0 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    new $P502, 'ResizablePMCArray'
    set $P102, $P502
.annotate 'line', 3134
    get_hll_global $P506, "GLOBAL"
    nqp_get_package_through_who $P505, $P506, "NQP"
    get_who $P504, $P505
    set $P503, $P504["Compiler"]
    unless_null $P503, fallback10
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P507
  fallback10:
    $P508 = $P503."new"()
    set $P101, $P508
.annotate 'line', 3135
    $P509 = $P101."language"("nqp")
.annotate 'line', 3136
    get_hll_global $P513, "GLOBAL"
    nqp_get_package_through_who $P512, $P513, "NQP"
    get_who $P511, $P512
    set $P510, $P511["Grammar"]
    unless_null $P510, fallback11
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P514
  fallback11:
    $P515 = $P101."parsegrammar"($P510)
.annotate 'line', 3137
    get_hll_global $P519, "GLOBAL"
    nqp_get_package_through_who $P518, $P519, "NQP"
    get_who $P517, $P518
    set $P516, $P517["Actions"]
    unless_null $P516, fallback12
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P520
  fallback12:
    $P521 = $P101."parseactions"($P516)
.annotate 'line', 3138
    $P522 = $P101."config"()
    $P523 = "&hll-config"($P522)
.annotate 'line', 3141
    $P524 = $P101."commandline_options"()
    set $P102, $P524
.annotate 'line', 3142
    $P525 = $P102."push"("parsetrace")
.annotate 'line', 3143
    $P526 = $P102."push"("setting=s")
.annotate 'line', 3144
    $P527 = $P102."push"("setting-path=s")
.annotate 'line', 3145
    $P528 = $P102."push"("module-path=s")
.annotate 'line', 3146
    $P529 = $P102."push"("vmlibs=s")
.annotate 'line', 3147
    $P530 = $P102."push"("no-regex-lib")
.annotate 'line', 3148
    $P531 = $P102."push"("old-regex-lib")
    new $P535, 'ExceptionHandler'
    set_label $P535, catch_handler_1114
    $P535.'handle_types_except'(.CONTROL_ALL)
    push_eh $P535
.annotate 'line', 3152
.annotate 'line', 3153
    get_hll_global $P532, "ModuleLoader"
    find_lex $P533, "GLOBALish"
    $P534 = $P532."load_module"("PASTRegex", $P533)
    set $P536, $P534
    pop_eh 
    goto skip_handler_1013
  catch_handler_1114:
    .get_results ($P535) 
    set $I10001, 1
    set $P535["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P535
    pop_upto_eh $P535
    pop_eh 
    set $P536, $P10001
    goto skip_handler_1013
  skip_handler_1013:
.annotate 'line', 3157
    $P537 = $P101."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3159
    $P538 = $P101."nqpevent"()
    .return ($P538) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_374_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3163
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P501, "2012.08-147-g884d509"
    set _lex_param_0["version"], $P501
    box $P502, "2012-08-29T09:44:37Z"
    set _lex_param_0["build-date"], $P502
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_32_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P530 = 'cuid_2_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_3_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_4_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_5_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_6_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_7_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_8_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_9_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_10_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_11_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_15_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_16_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_17_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_18_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_19_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_20_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_21_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_22_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_23_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_24_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_25_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_26_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_27_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_28_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_29_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_30_1346233478.067' 
    capture_lex $P530 
    .const 'Sub' $P530 = 'cuid_31_1346233478.067' 
    capture_lex $P530 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    .const 'Sub' $P502 = 'cuid_2_1346233478.067' 
    capture_lex $P502
    .const 'Sub' $P503 = 'cuid_3_1346233478.067' 
    capture_lex $P503
    .const 'Sub' $P504 = 'cuid_4_1346233478.067' 
    capture_lex $P504
    .const 'Sub' $P505 = 'cuid_5_1346233478.067' 
    capture_lex $P505
    .const 'Sub' $P506 = 'cuid_6_1346233478.067' 
    capture_lex $P506
    get_hll_global $P507, "ModuleLoader"
    set $P101, $P507
    .const 'Sub' $P508 = 'cuid_7_1346233478.067' 
    capture_lex $P508
    .const 'Sub' $P509 = 'cuid_8_1346233478.067' 
    capture_lex $P509
    .const 'Sub' $P510 = 'cuid_9_1346233478.067' 
    capture_lex $P510
    .const 'Sub' $P511 = 'cuid_10_1346233478.067' 
    capture_lex $P511
    .const 'Sub' $P512 = 'cuid_11_1346233478.067' 
    capture_lex $P512
    .const 'Sub' $P513 = 'cuid_15_1346233478.067' 
    capture_lex $P513
    .const 'Sub' $P514 = 'cuid_16_1346233478.067' 
    capture_lex $P514
    .const 'Sub' $P515 = 'cuid_17_1346233478.067' 
    capture_lex $P515
    .const 'Sub' $P516 = 'cuid_18_1346233478.067' 
    capture_lex $P516
    .const 'Sub' $P517 = 'cuid_19_1346233478.067' 
    capture_lex $P517
    .const 'Sub' $P518 = 'cuid_20_1346233478.067' 
    capture_lex $P518
    .const 'Sub' $P519 = 'cuid_21_1346233478.067' 
    capture_lex $P519
    .const 'Sub' $P520 = 'cuid_22_1346233478.067' 
    capture_lex $P520
    .const 'Sub' $P521 = 'cuid_23_1346233478.067' 
    capture_lex $P521
    .const 'Sub' $P522 = 'cuid_24_1346233478.067' 
    capture_lex $P522
    .const 'Sub' $P523 = 'cuid_25_1346233478.067' 
    capture_lex $P523
    .const 'Sub' $P524 = 'cuid_26_1346233478.067' 
    capture_lex $P524
    .const 'Sub' $P525 = 'cuid_27_1346233478.067' 
    capture_lex $P525
    .const 'Sub' $P526 = 'cuid_28_1346233478.067' 
    capture_lex $P526
    .const 'Sub' $P527 = 'cuid_29_1346233478.067' 
    capture_lex $P527
    .const 'Sub' $P528 = 'cuid_30_1346233478.067' 
    capture_lex $P528
    .const 'Sub' $P529 = 'cuid_31_1346233478.067' 
    capture_lex $P529
    .return ($P529) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P501, _lex_param_0
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    new $P503, 'ResizablePMCArray'
    repr_bind_attr_obj $P501, $P502, "@!BLOCKS", $P503
    nqp_decontainerize $P504, _lex_param_0
    nqp_get_sc_object $P505, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    new $P506, 'Hash'
    repr_bind_attr_obj $P504, $P505, "%!code_objects_to_fix_up", $P506
    nqp_decontainerize $P507, _lex_param_0
    nqp_get_sc_object $P508, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    new $P509, 'Hash'
    repr_bind_attr_obj $P507, $P508, "%!code_object_fixup_list", $P509
    nqp_decontainerize $P510, _lex_param_0
    nqp_get_sc_object $P511, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    new $P512, 'Hash'
    repr_bind_attr_obj $P510, $P511, "%!code_stub_sc_idx", $P512
    .return ($P512) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 35
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 37
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["Block"]
    unless_null $P502, fallback19
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback19:
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["Stmts"]
    unless_null $P507, fallback20
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback20:
    $P512 = $P507."new"()
    $P513 = $P502."new"($P512, _lex_param_1 :named("node"))
    set $P101, $P513
    nqp_decontainerize $P514, _lex_param_0
    nqp_get_sc_object $P515, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P516, $P514, $P515, "@!BLOCKS"
    set $N501, $P516
    box $P526, $N501
    set $P525, $P526
    unless $N501 goto if14_end22 
.annotate 'line', 38
    nqp_decontainerize $P518, _lex_param_0
    nqp_get_sc_object $P519, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P520, $P518, $P519, "@!BLOCKS"
    nqp_decontainerize $P521, _lex_param_0
    nqp_get_sc_object $P522, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P523, $P521, $P522, "@!BLOCKS"
    set $N503, $P523
    set $N504, 1
    sub $N502, $N503, $N504
    set $I501, $N502
    set $P517, $P520[$I501]
    unless_null $P517, fallback23
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P524
  fallback23:
    set $P101["outer"], $P517
    set $P525, $P517
  if14_end22:
    nqp_decontainerize $P527, _lex_param_0
    nqp_get_sc_object $P528, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P529, $P527, $P528, "@!BLOCKS"
    nqp_decontainerize $P530, _lex_param_0
    nqp_get_sc_object $P531, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P532, $P530, $P531, "@!BLOCKS"
    set $N505, $P532
    set $I502, $N505
    set $P529[$I502], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 47
    nqp_decontainerize $P501, _lex_param_0
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P503, $P501, $P502, "@!BLOCKS"
    $P504 = $P503."pop"()
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 51
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P502, _lex_param_0
    nqp_get_sc_object $P503, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P504, $P502, $P503, "@!BLOCKS"
    nqp_decontainerize $P505, _lex_param_0
    nqp_get_sc_object $P506, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P507, $P505, $P506, "@!BLOCKS"
    set $N502, $P507
    set $N503, 1
    sub $N501, $N502, $N503
    set $I501, $N501
    set $P501, $P504[$I501]
    unless_null $P501, fallback24
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P508
  fallback24:
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 56
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
    nqp_decontainerize $P503, _lex_param_0
    nqp_get_sc_object $P504, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P505, $P503, $P504, "@!BLOCKS"
    clone $P502, $P505
    set $P101, $P502
.annotate 'line', 58
    $P506 = $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 69
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P505 = 'cuid_375_1346233478.067' 
    capture_lex $P505 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_25
    .lex "RETURN", $P101
    set $S501, _lex_param_1
    isne $I501, $S501, "NULL"
    box $P504, $I501
    set $P503, $P504
    unless $I501 goto if15_end28 
    .const 'Sub' $P501 = 'cuid_375_1346233478.067' 
    capture_lex $P501
    $P502 = $P501()
    set $P503, $P502
  if15_end28:
    goto lexotic_26
  lexotic_25:
    .get_results ($P503)
  lexotic_26:
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1346233478.067") :anon :lex :outer("cuid_7_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 71
    .lex "$setting", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    find_dynamic_lex $P503, "%*COMPILING"
    unless_null $P503, fallback29
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["%COMPILING"]
    unless_null $P504, fallback30
    get_hll_global $P508, "GLOBAL"
    get_who $P507, $P508
    new $P509, 'Hash'
    set $P507["%COMPILING"], $P509
    set $P504, $P509
  fallback30:
    unless_null $P504, vivi_1631
    die "Contextual %*COMPILING not found"
    box $P510, "Contextual %*COMPILING not found"
    set $P504, $P510
  vivi_1631:
    set $P503, $P504
  fallback29:
    set $P502, $P503["%?OPTIONS"]
    unless_null $P502, fallback32
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P511
  fallback32:
.annotate 'line', 76
    find_lex $P512, "$loader"
    find_lex $P513, "$setting_name"
    $P514 = $P512."load_setting"($P513)
    set $P502["outer_ctx"], $P514
    set $P101, $P514
.annotate 'line', 79
    find_lex $P516, "self"
    nqp_decontainerize $P515, $P516
    $P517 = $P515."is_precompilation_mode"()
    unless $P517 goto if17_else33 
.annotate 'line', 80
    find_lex $P519, "self"
    nqp_decontainerize $P518, $P519
    get_hll_global $P523, "GLOBAL"
    nqp_get_package_through_who $P522, $P523, "QAST"
    get_who $P521, $P522
    set $P520, $P521["Stmts"]
    unless_null $P520, fallback35
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P524
  fallback35:
.annotate 'line', 81
    get_hll_global $P528, "GLOBAL"
    nqp_get_package_through_who $P527, $P528, "QAST"
    get_who $P526, $P527
    set $P525, $P526["VM"]
    unless_null $P525, fallback36
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P529
  fallback36:
.annotate 'line', 83
    get_hll_global $P533, "GLOBAL"
    nqp_get_package_through_who $P532, $P533, "QAST"
    get_who $P531, $P532
    set $P530, $P531["SVal"]
    unless_null $P530, fallback37
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P534
  fallback37:
    $P535 = $P530."new"("ModuleLoader.pbc" :named("value"))
    $P536 = $P525."new"($P535, "load_bytecode vs" :named("pirop"))
.annotate 'line', 85
    get_hll_global $P540, "GLOBAL"
    nqp_get_package_through_who $P539, $P540, "QAST"
    get_who $P538, $P539
    set $P537, $P538["Op"]
    unless_null $P537, fallback38
    nqp_get_sc_object $P541, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P537, $P541
  fallback38:
.annotate 'line', 87
    get_hll_global $P545, "GLOBAL"
    nqp_get_package_through_who $P544, $P545, "QAST"
    get_who $P543, $P544
    set $P542, $P543["BVal"]
    unless_null $P542, fallback39
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P542, $P546
  fallback39:
    find_dynamic_lex $P547, "$*UNIT"
    unless_null $P547, fallback40
    get_hll_global $P550, "GLOBAL"
    get_who $P549, $P550
    set $P548, $P549["$UNIT"]
    unless_null $P548, fallback41
    nqp_get_sc_object $P551, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P548, $P551
  fallback41:
    unless_null $P548, vivi_1842
    die "Contextual $*UNIT not found"
    box $P552, "Contextual $*UNIT not found"
    set $P548, $P552
  vivi_1842:
    set $P547, $P548
  fallback40:
    $P553 = $P542."new"($P547 :named("value"))
.annotate 'line', 88
    get_hll_global $P557, "GLOBAL"
    nqp_get_package_through_who $P556, $P557, "QAST"
    get_who $P555, $P556
    set $P554, $P555["Op"]
    unless_null $P554, fallback43
    nqp_get_sc_object $P558, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P554, $P558
  fallback43:
.annotate 'line', 90
    get_hll_global $P562, "GLOBAL"
    nqp_get_package_through_who $P561, $P562, "QAST"
    get_who $P560, $P561
    set $P559, $P560["VM"]
    unless_null $P559, fallback44
    nqp_get_sc_object $P563, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P559, $P563
  fallback44:
.annotate 'line', 92
    get_hll_global $P567, "GLOBAL"
    nqp_get_package_through_who $P566, $P567, "QAST"
    get_who $P565, $P566
    set $P564, $P565["SVal"]
    unless_null $P564, fallback45
    nqp_get_sc_object $P568, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P564, $P568
  fallback45:
    $P569 = $P564."new"("ModuleLoader" :named("value"))
    $P570 = $P559."new"($P569, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 94
    get_hll_global $P574, "GLOBAL"
    nqp_get_package_through_who $P573, $P574, "QAST"
    get_who $P572, $P573
    set $P571, $P572["SVal"]
    unless_null $P571, fallback46
    nqp_get_sc_object $P575, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P571, $P575
  fallback46:
    find_lex $P576, "$setting_name"
    $P577 = $P571."new"($P576 :named("value"))
    $P578 = $P554."new"($P570, $P577, "callmethod" :named("op"), "load_setting" :named("name"))
    $P579 = $P537."new"($P553, $P578, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P580 = $P520."new"($P536, $P579)
    $P581 = $P518."add_load_dependency_task"($P580 :named("deserialize_past"))
    set $P628, $P581
    goto if17_end34
  if17_else33:
.annotate 'line', 99
.annotate 'line', 101
    find_lex $P583, "self"
    nqp_decontainerize $P582, $P583
    get_hll_global $P587, "GLOBAL"
    nqp_get_package_through_who $P586, $P587, "QAST"
    get_who $P585, $P586
    set $P584, $P585["Op"]
    unless_null $P584, fallback47
    nqp_get_sc_object $P588, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P584, $P588
  fallback47:
.annotate 'line', 103
    get_hll_global $P592, "GLOBAL"
    nqp_get_package_through_who $P591, $P592, "QAST"
    get_who $P590, $P591
    set $P589, $P590["BVal"]
    unless_null $P589, fallback48
    nqp_get_sc_object $P593, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P589, $P593
  fallback48:
    find_dynamic_lex $P594, "$*UNIT"
    unless_null $P594, fallback49
    get_hll_global $P597, "GLOBAL"
    get_who $P596, $P597
    set $P595, $P596["$UNIT"]
    unless_null $P595, fallback50
    nqp_get_sc_object $P598, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P595, $P598
  fallback50:
    unless_null $P595, vivi_1951
    die "Contextual $*UNIT not found"
    box $P599, "Contextual $*UNIT not found"
    set $P595, $P599
  vivi_1951:
    set $P594, $P595
  fallback49:
    $P600 = $P589."new"($P594 :named("value"))
.annotate 'line', 104
    get_hll_global $P604, "GLOBAL"
    nqp_get_package_through_who $P603, $P604, "QAST"
    get_who $P602, $P603
    set $P601, $P602["Op"]
    unless_null $P601, fallback52
    nqp_get_sc_object $P605, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P601, $P605
  fallback52:
.annotate 'line', 106
    get_hll_global $P609, "GLOBAL"
    nqp_get_package_through_who $P608, $P609, "QAST"
    get_who $P607, $P608
    set $P606, $P607["VM"]
    unless_null $P606, fallback53
    nqp_get_sc_object $P610, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P606, $P610
  fallback53:
.annotate 'line', 108
    get_hll_global $P614, "GLOBAL"
    nqp_get_package_through_who $P613, $P614, "QAST"
    get_who $P612, $P613
    set $P611, $P612["SVal"]
    unless_null $P611, fallback54
    nqp_get_sc_object $P615, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P611, $P615
  fallback54:
    $P616 = $P611."new"("ModuleLoader" :named("value"))
    $P617 = $P606."new"($P616, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 110
    get_hll_global $P621, "GLOBAL"
    nqp_get_package_through_who $P620, $P621, "QAST"
    get_who $P619, $P620
    set $P618, $P619["SVal"]
    unless_null $P618, fallback55
    nqp_get_sc_object $P622, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P618, $P622
  fallback55:
    find_lex $P623, "$setting_name"
    $P624 = $P618."new"($P623 :named("value"))
    $P625 = $P601."new"($P617, $P624, "callmethod" :named("op"), "load_setting" :named("name"))
    $P626 = $P584."new"($P600, $P625, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P627 = $P582."add_fixup_task"($P626 :named("fixup_past"))
    set $P628, $P627
  if17_end34:
    getattribute $P630, $P101, "lex_pad"
    find_lex $P629, "RETURN"
    $P631 = $P629($P630)
    .return ($P631) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_56
    .lex "RETURN", $P102
.annotate 'line', 123
    find_lex $P502, "$loader"
    $P503 = $P502."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P503
.annotate 'line', 126
    nqp_decontainerize $P504, _lex_param_0
    $P505 = $P504."is_precompilation_mode"()
    set $P550, $P505
    unless $P505 goto if20_end59 
.annotate 'line', 127
    nqp_decontainerize $P506, _lex_param_0
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["Stmts"]
    unless_null $P507, fallback60
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback60:
.annotate 'line', 128
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["VM"]
    unless_null $P512, fallback61
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback61:
.annotate 'line', 130
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["SVal"]
    unless_null $P517, fallback62
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback62:
    $P522 = $P517."new"("ModuleLoader.pbc" :named("value"))
    $P523 = $P512."new"($P522, "load_bytecode vs" :named("pirop"))
.annotate 'line', 132
    get_hll_global $P527, "GLOBAL"
    nqp_get_package_through_who $P526, $P527, "QAST"
    get_who $P525, $P526
    set $P524, $P525["Op"]
    unless_null $P524, fallback63
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P528
  fallback63:
.annotate 'line', 134
    get_hll_global $P532, "GLOBAL"
    nqp_get_package_through_who $P531, $P532, "QAST"
    get_who $P530, $P531
    set $P529, $P530["VM"]
    unless_null $P529, fallback64
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P533
  fallback64:
.annotate 'line', 136
    get_hll_global $P537, "GLOBAL"
    nqp_get_package_through_who $P536, $P537, "QAST"
    get_who $P535, $P536
    set $P534, $P535["SVal"]
    unless_null $P534, fallback65
    nqp_get_sc_object $P538, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P534, $P538
  fallback65:
    $P539 = $P534."new"("ModuleLoader" :named("value"))
    $P540 = $P529."new"($P539, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 138
    get_hll_global $P544, "GLOBAL"
    nqp_get_package_through_who $P543, $P544, "QAST"
    get_who $P542, $P543
    set $P541, $P542["SVal"]
    unless_null $P541, fallback66
    nqp_get_sc_object $P545, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P545
  fallback66:
    $P546 = $P541."new"(_lex_param_1 :named("value"))
    $P547 = $P524."new"($P540, $P546, "callmethod" :named("op"), "load_module" :named("name"))
    $P548 = $P507."new"($P523, $P547)
    $P549 = $P506."add_load_dependency_task"($P548 :named("deserialize_past"))
    set $P550, $P549
  if20_end59:
    getattribute $P552, $P101, "lex_pad"
    find_lex $P551, "RETURN"
    $P553 = $P551($P552)
    goto lexotic_57
  lexotic_56:
    .get_results ($P553)
  lexotic_57:
    .return ($P553) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 147
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P513 = 'cuid_376_1346233478.067' 
    capture_lex $P513 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    clone $P503, _lex_param_2
    set _lex_param_2, $P503
.annotate 'line', 149
    $P504 = _lex_param_2."pop"()
    set $S501, $P504
    box $P505, $S501
    set $P101, $P505
    set $P102, _lex_param_1
    set $P506, _lex_param_2
    iter $P508, _lex_param_2
    new $P510, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P510, for_handlers67
    push_eh $P510
  for_next68:
    unless $P508, for_done70
    shift $P511, $P508
  for_redo69:
    .const 'Sub' $P509 = 'cuid_376_1346233478.067' 
    capture_lex $P509
    $P506 = $P509($P511)
    goto for_next68
  for_handlers67:
    .get_results ($P510)
    pop_upto_eh $P510
    getattribute $P510, $P510, 'type'
    eq $P510, .CONTROL_LOOP_NEXT, for_next68
    eq $P510, .CONTROL_LOOP_REDO, for_redo69
  for_done70:
    pop_eh 
    get_who $P512, $P102
    set $S502, $P101
    set $P512[$S502], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1346233478.067") :anon :lex :outer("cuid_9_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 153
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P502, "$target"
    set $S501, _lex_param_0
    nqp_get_package_through_who $P501, $P502, $S501
    store_lex "$target", $P501
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 163
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 165
    $P502 = _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 166
    set $P503, _lex_param_1[0]
    unless_null $P503, fallback71
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback71:
    get_hll_global $P508, "GLOBAL"
    nqp_get_package_through_who $P507, $P508, "QAST"
    get_who $P506, $P507
    set $P505, $P506["Var"]
    unless_null $P505, fallback72
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P509
  fallback72:
    $P510 = $P505."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P511 = $P503."push"($P510)
.annotate 'line', 169
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Stmts"]
    unless_null $P512, fallback73
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback73:
.annotate 'line', 170
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["Op"]
    unless_null $P517, fallback74
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback74:
.annotate 'line', 172
    get_hll_global $P525, "GLOBAL"
    nqp_get_package_through_who $P524, $P525, "QAST"
    get_who $P523, $P524
    set $P522, $P523["VM"]
    unless_null $P522, fallback75
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P526
  fallback75:
.annotate 'line', 173
    $P527 = _lex_param_1."cuid"()
    set $S503, $P527
    concat $S502, "    .const \"LexInfo\" %r = \"", $S503
    concat $S501, $S502, "\""
    $P528 = $P522."new"($S501 :named("pir"))
.annotate 'line', 175
    get_hll_global $P532, "GLOBAL"
    nqp_get_package_through_who $P531, $P532, "QAST"
    get_who $P530, $P531
    set $P529, $P530["SVal"]
    unless_null $P529, fallback76
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P533
  fallback76:
    $P534 = $P529."new"(_lex_param_2 :named("value"))
.annotate 'line', 176
    get_hll_global $P538, "GLOBAL"
    nqp_get_package_through_who $P537, $P538, "QAST"
    get_who $P536, $P537
    set $P535, $P536["WVal"]
    unless_null $P535, fallback77
    nqp_get_sc_object $P539, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P535, $P539
  fallback77:
    $P540 = $P535."new"(_lex_param_3 :named("value"))
    $P541 = $P517."new"($P528, $P534, $P540, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 180
    get_hll_global $P545, "GLOBAL"
    nqp_get_package_through_who $P544, $P545, "QAST"
    get_who $P543, $P544
    set $P542, $P543["Op"]
    unless_null $P542, fallback78
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P542, $P546
  fallback78:
.annotate 'line', 182
    get_hll_global $P550, "GLOBAL"
    nqp_get_package_through_who $P549, $P550, "QAST"
    get_who $P548, $P549
    set $P547, $P548["VM"]
    unless_null $P547, fallback79
    nqp_get_sc_object $P551, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P547, $P551
  fallback79:
.annotate 'line', 183
    $P552 = _lex_param_1."cuid"()
    set $S506, $P552
    concat $S505, "    .const \"LexInfo\" %r = \"", $S506
    concat $S504, $S505, "\""
    $P553 = $P547."new"($S504 :named("pir"))
    $P554 = $P542."new"($P553, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P555 = $P512."new"($P541, $P554)
    set $P101, $P555
.annotate 'line', 187
    nqp_decontainerize $P556, _lex_param_0
    $P557 = $P556."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P557) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 193
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["Op"]
    unless_null $P502, fallback80
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback80:
.annotate 'line', 195
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["Op"]
    unless_null $P507, fallback81
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback81:
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["WVal"]
    unless_null $P512, fallback82
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback82:
    $P517 = $P512."new"(_lex_param_1 :named("value"))
    $P518 = $P507."new"($P517, "who" :named("op"))
.annotate 'line', 196
    get_hll_global $P522, "GLOBAL"
    nqp_get_package_through_who $P521, $P522, "QAST"
    get_who $P520, $P521
    set $P519, $P520["SVal"]
    unless_null $P519, fallback83
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P523
  fallback83:
    set $S501, _lex_param_2
    $P524 = $P519."new"($S501 :named("value"))
.annotate 'line', 197
    get_hll_global $P528, "GLOBAL"
    nqp_get_package_through_who $P527, $P528, "QAST"
    get_who $P526, $P527
    set $P525, $P526["BVal"]
    unless_null $P525, fallback84
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P529
  fallback84:
    $P530 = $P525."new"(_lex_param_3 :named("value"))
    $P531 = $P502."new"($P518, $P524, $P530, "bindkey" :named("op"))
    set $P101, $P531
.annotate 'line', 199
    nqp_decontainerize $P532, _lex_param_0
    $P533 = $P532."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P533) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P601 = 'cuid_12_1346233478.067' 
    capture_lex $P601 
    .const 'Sub' $P601 = 'cuid_13_1346233478.067' 
    capture_lex $P601 
    .const 'Sub' $P601 = 'cuid_14_1346233478.067' 
    capture_lex $P601 
    .const 'Sub' $P601 = 'cuid_380_1346233478.067' 
    capture_lex $P601 
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P105, $P505
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P106, $P506
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_85
    .lex "RETURN", $P107
    box $P507, 0
    set $P102, $P507
    new $P527, 'ExceptionHandler'
    set_label $P527, catch_handler_2494
    $P527.'handle_types_except'(.CONTROL_ALL)
    push_eh $P527
.annotate 'line', 208
.annotate 'line', 209
    nqp_decontainerize $P508, _lex_param_0
    new $P509, 'ResizablePMCArray'
    box $P510, "NQPRoutine"
    push $P509, $P510
    $P511 = $P508."find_sym"($P509)
    set $P101, $P511
.annotate 'line', 210
    find_dynamic_lex $P513, "$*PACKAGE"
    unless_null $P513, fallback87
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    set $P514, $P515["$PACKAGE"]
    unless_null $P514, fallback88
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P517
  fallback88:
    unless_null $P514, vivi_2189
    die "Contextual $*PACKAGE not found"
    box $P518, "Contextual $*PACKAGE not found"
    set $P514, $P518
  vivi_2189:
    set $P513, $P514
  fallback87:
    get_how $P512, $P513
    find_dynamic_lex $P519, "$*PACKAGE"
    unless_null $P519, fallback90
    get_hll_global $P522, "GLOBAL"
    get_who $P521, $P522
    set $P520, $P521["$PACKAGE"]
    unless_null $P520, fallback91
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P523
  fallback91:
    unless_null $P520, vivi_2292
    die "Contextual $*PACKAGE not found"
    box $P524, "Contextual $*PACKAGE not found"
    set $P520, $P524
  vivi_2292:
    set $P519, $P520
  fallback90:
    $P525 = $P512."name"($P519)
    set $S501, $P525
    isne $I501, $S501, "NQPRoutine"
    box $P526, $I501
    set $P102, $P526
    set $P528, $P102
    pop_eh 
    goto skip_handler_2393
  catch_handler_2494:
    .get_results ($P527) 
    set $I10001, 1
    set $P527["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P527
    pop_upto_eh $P527
    pop_eh 
    set $P528, $P10001
    goto skip_handler_2393
  skip_handler_2393:
    .const 'Sub' $P530 = 'cuid_12_1346233478.067' 
    capture_lex $P530
    newclosure $P529, $P530
    set $P103, $P529
.annotate 'line', 252
    get_hll_global $P534, "GLOBAL"
    nqp_get_package_through_who $P533, $P534, "QAST"
    get_who $P532, $P533
    set $P531, $P532["Stmts"]
    unless_null $P531, fallback122
    nqp_get_sc_object $P535, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P531, $P535
  fallback122:
    $P536 = $P531."new"()
    set $P104, $P536
    set $P537, _lex_param_1["compile_time_dummy"]
    unless_null $P537, fallback125
    nqp_get_sc_object $P538, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P537, $P538
  fallback125:
    defined $I502, $P537
    unless $I502 goto if28_else123 
.annotate 'line', 255
    set $P539, _lex_param_1["compile_time_dummy"]
    unless_null $P539, fallback126
    nqp_get_sc_object $P540, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P539, $P540
  fallback126:
    set $P105, $P539
    set $P560, $P105
    goto if28_end124
  if28_else123:
.annotate 'line', 258
    nqp_fresh_stub $P541, $P103
    set $P105, $P541
    set $S502, _lex_param_2
    assign $P105, $S502
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 265
    nqp_decontainerize $P542, _lex_param_0
    $P543 = $P542."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P543
    nqp_decontainerize $P544, _lex_param_0
    nqp_get_sc_object $P545, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P546, $P544, $P545, "%!code_stub_sc_idx"
.annotate 'line', 266
    $P547 = _lex_param_1."cuid"()
    set $S503, $P547
    set $P546[$S503], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    setprop $P105, "PAST", _lex_param_1
    set $P559, $P102
    unless $P102 goto if29_end128 
.annotate 'line', 275
    nqp_decontainerize $P548, _lex_param_0
    nqp_get_sc_object $P549, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P550, $P548, $P549, "%!code_object_fixup_list"
.annotate 'line', 276
    $P551 = _lex_param_1."cuid"()
    set $S504, $P551
    set $P550[$S504], $P104
.annotate 'line', 277
    nqp_decontainerize $P552, _lex_param_0
    $P553 = $P552."is_precompilation_mode"()
    unless $P553 goto if30_else129 
    .const 'Sub' $P555 = 'cuid_13_1346233478.067' 
    capture_lex $P555
    newclosure $P554, $P555
    setprop $P105, "CLONE_CALLBACK", $P554
    set $P558, $P105
    goto if30_end130
  if30_else129:
.annotate 'line', 282
    .const 'Sub' $P557 = 'cuid_14_1346233478.067' 
    capture_lex $P557
    newclosure $P556, $P557
    setprop $P105, "CLONE_CALLBACK", $P556
    set $P558, $P105
  if30_end130:
    set $P559, $P558
  if29_end128:
    set $P560, $P559
  if28_end124:
.annotate 'line', 306
    nqp_decontainerize $P561, _lex_param_0
    $P562 = $P561."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if31_else141 
    .const 'Sub' $P563 = 'cuid_380_1346233478.067' 
    capture_lex $P563
    $P564 = $P563()
    set $P600, $P564
    goto if31_end142
  if31_else141:
.annotate 'line', 345
.annotate 'line', 348
    get_hll_global $P568, "GLOBAL"
    nqp_get_package_through_who $P567, $P568, "QAST"
    get_who $P566, $P567
    set $P565, $P566["VM"]
    unless_null $P565, fallback156
    nqp_get_sc_object $P569, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P565, $P569
  fallback156:
.annotate 'line', 350
    get_hll_global $P573, "GLOBAL"
    nqp_get_package_through_who $P572, $P573, "QAST"
    get_who $P571, $P572
    set $P570, $P571["VM"]
    unless_null $P570, fallback157
    nqp_get_sc_object $P574, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P570, $P574
  fallback157:
.annotate 'line', 352
    get_hll_global $P578, "GLOBAL"
    nqp_get_package_through_who $P577, $P578, "QAST"
    get_who $P576, $P577
    set $P575, $P576["SVal"]
    unless_null $P575, fallback158
    nqp_get_sc_object $P579, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P575, $P579
  fallback158:
    nqp_decontainerize $P580, _lex_param_0
    $P581 = $P580."handle"()
    $P582 = $P575."new"($P581 :named("value"))
.annotate 'line', 353
    get_hll_global $P586, "GLOBAL"
    nqp_get_package_through_who $P585, $P586, "QAST"
    get_who $P584, $P585
    set $P583, $P584["IVal"]
    unless_null $P583, fallback159
    nqp_get_sc_object $P587, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P583, $P587
  fallback159:
    $P588 = $P583."new"($P106 :named("value"))
    $P589 = $P570."new"($P582, $P588, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 355
    get_hll_global $P593, "GLOBAL"
    nqp_get_package_through_who $P592, $P593, "QAST"
    get_who $P591, $P592
    set $P590, $P591["BVal"]
    unless_null $P590, fallback160
    nqp_get_sc_object $P594, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P590, $P594
  fallback160:
    $P595 = $P590."new"(_lex_param_1 :named("value"))
    $P596 = $P565."new"($P589, $P595, "assign vPP" :named("pirop"))
    $P597 = $P104."push"($P596)
    find_lex $P598, "RETURN"
    $P599 = $P598($P105)
    set $P600, $P599
  if31_end142:
    goto lexotic_86
  lexotic_85:
    .get_results ($P600)
  lexotic_86:
    .return ($P600) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1346233478.067") :anon :lex :outer("cuid_15_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 217
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P526 = 'cuid_379_1346233478.067' 
    capture_lex $P526 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P105, $P505
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P106, $P506
    compreg $P507, "nqp"
    set $P101, $P507
.annotate 'line', 220
    get_hll_global $P511, "GLOBAL"
    nqp_get_package_through_who $P510, $P511, "QAST"
    get_who $P509, $P510
    set $P508, $P509["CompUnit"]
    unless_null $P508, fallback95
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P512
  fallback95:
    find_lex $P513, "$past"
    $P514 = $P508."new"($P513, "nqp" :named("hll"))
    $P515 = $P101."post"($P514)
    set $P102, $P515
.annotate 'line', 221
    $P516 = $P101."pir"($P102)
    set $P103, $P516
.annotate 'line', 222
    $P517 = $P101."evalpmc"($P103)
    set $P104, $P517
    elements $I501, $P104
    box $P518, $I501
    set $P105, $P518
    box $P519, 0
    set $P106, $P519
    new $P523, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P523, while25_handlers99
    push_eh $P523
  while25_test96:
    set $N501, $P106
    set $N502, $P105
    islt $I502, $N501, $N502
    box $P524, $I502
    set $P522, $P524
    unless $I502 goto while25_done100 
  while25_redo98:
    .const 'Sub' $P520 = 'cuid_379_1346233478.067' 
    capture_lex $P520
    $P521 = $P520()
    set $P522, $P521
    goto while25_test96 
  while25_handlers99:
    .get_results ($P523)
    pop_upto_eh $P523
    getattribute $P523, $P523, 'type'
    eq $P523, .CONTROL_LOOP_NEXT, while25_test96
    eq $P523, .CONTROL_LOOP_REDO, while25_redo98
  while25_done100:
    pop_eh 
.annotate 'line', 248
    $P525 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P525) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1346233478.067") :anon :lex :outer("cuid_12_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 227
    .const 'Sub' $P517 = 'cuid_378_1346233478.067' 
    capture_lex $P517 
    .lex "$subid", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 228
    find_lex $P503, "$compiled"
    find_lex $P504, "$i"
    set $I501, $P504
    set $P502, $P503[$I501]
    unless_null $P502, fallback101
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback101:
    $P506 = $P502."get_subid"()
    set $P101, $P506
    find_lex $P508, "self"
    nqp_decontainerize $P507, $P508
    nqp_get_sc_object $P509, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P510, $P507, $P509, "%!code_objects_to_fix_up"
    set $S501, $P101
    exists $I502, $P510[$S501]
    box $P514, $I502
    set $P513, $P514
    unless $I502 goto if26_end103 
    .const 'Sub' $P511 = 'cuid_378_1346233478.067' 
    capture_lex $P511
    $P512 = $P511()
    set $P513, $P512
  if26_end103:
    find_lex $P515, "$i"
    set $N502, $P515
    set $N503, 1
    add $N501, $N502, $N503
    box $P516, $N501
    store_lex "$i", $P516
    .return ($P516) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1346233478.067") :anon :lex :outer("cuid_379_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 229
    .const 'Sub' $P563 = 'cuid_377_1346233478.067' 
    capture_lex $P563 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 233
    find_lex $P505, "self"
    nqp_decontainerize $P504, $P505
    nqp_get_sc_object $P506, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P507, $P504, $P506, "%!code_objects_to_fix_up"
    find_lex $P508, "$subid"
    set $S501, $P508
    set $P503, $P507[$S501]
    unless_null $P503, fallback104
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P509
  fallback104:
    $P510 = $P503."shift"()
    set $P101, $P510
    find_lex $P511, "$code_type"
    find_lex $P513, "$compiled"
    find_lex $P514, "$i"
    set $I501, $P514
    set $P512, $P513[$I501]
    unless_null $P512, fallback105
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P515
  fallback105:
    setattribute $P101, $P511, "$!do", $P512
    find_lex $P521, "self"
    nqp_decontainerize $P520, $P521
    nqp_get_sc_object $P522, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P523, $P520, $P522, "%!code_objects_to_fix_up"
    find_lex $P524, "$subid"
    set $S502, $P524
    set $P519, $P523[$S502]
    unless_null $P519, fallback106
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P525
  fallback106:
    set $P516, $P519
    iter $P518, $P519
    new $P527, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P527, for_handlers108
    push_eh $P527
  for_next109:
    unless $P518, for_done111
    shift $P528, $P518
  for_redo110:
    .const 'Sub' $P526 = 'cuid_377_1346233478.067' 
    capture_lex $P526
    $P516 = $P526($P528)
    goto for_next109
  for_handlers108:
    .get_results ($P527)
    pop_upto_eh $P527
    getattribute $P527, $P527, 'type'
    eq $P527, .CONTROL_LOOP_NEXT, for_next109
    eq $P527, .CONTROL_LOOP_REDO, for_redo110
  for_done111:
    pop_eh 
    find_lex $P530, "$compiled"
    find_lex $P531, "$i"
    set $I502, $P531
    set $P529, $P530[$I502]
    unless_null $P529, fallback112
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P532
  fallback112:
    find_lex $P534, "$compiled"
    find_lex $P535, "$i"
    set $I503, $P535
    set $P533, $P534[$I503]
    unless_null $P533, fallback113
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P536
  fallback113:
    setprop $P529, "STATIC_CODE_REF", $P533
.annotate 'line', 239
    find_lex $P538, "self"
    nqp_decontainerize $P537, $P538
    find_lex $P541, "self"
    nqp_decontainerize $P540, $P541
    nqp_get_sc_object $P542, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P543, $P540, $P542, "%!code_stub_sc_idx"
    find_lex $P544, "$subid"
    set $S503, $P544
    set $P539, $P543[$S503]
    unless_null $P539, fallback114
    nqp_get_sc_object $P545, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P539, $P545
  fallback114:
    find_lex $P547, "$compiled"
    find_lex $P548, "$i"
    set $I504, $P548
    set $P546, $P547[$I504]
    unless_null $P546, fallback115
    nqp_get_sc_object $P549, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P546, $P549
  fallback115:
    $P550 = $P537."update_root_code_ref"($P539, $P546)
    find_lex $P553, "self"
    nqp_decontainerize $P552, $P553
    nqp_get_sc_object $P554, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P555, $P552, $P554, "%!code_object_fixup_list"
    find_lex $P556, "$subid"
    set $S504, $P556
    set $P551, $P555[$S504]
    unless_null $P551, fallback116
    nqp_get_sc_object $P557, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P551, $P557
  fallback116:
    set $P102, $P551
    new $P561, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P561, while27_handlers120
    push_eh $P561
  while27_test117:
    $P558 = $P102."list"()
    set $N501, $P558
    box $P562, $N501
    set $P560, $P562
    unless $N501 goto while27_done121 
  while27_redo119:
.annotate 'line', 243
    $P559 = $P102."shift"()
    set $P560, $P559
    goto while27_test117 
  while27_handlers120:
    .get_results ($P561)
    pop_upto_eh $P561
    getattribute $P561, $P561, 'type'
    eq $P561, .CONTROL_LOOP_NEXT, while27_test117
    eq $P561, .CONTROL_LOOP_REDO, while27_redo119
  while27_done121:
    pop_eh 
    .return ($P560) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1346233478.067") :anon :lex :outer("cuid_378_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 235
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P501, "$code_type"
    find_lex $P504, "$compiled"
    find_lex $P505, "$i"
    set $I501, $P505
    set $P503, $P504[$I501]
    unless_null $P503, fallback107
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback107:
    clone $P502, $P503
    setattribute _lex_param_0, $P501, "$!do", $P502
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1346233478.067") :anon :lex :outer("cuid_15_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 278
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 279
    find_lex $P503, "self"
    nqp_decontainerize $P502, $P503
    nqp_get_sc_object $P504, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P505, $P502, $P504, "%!code_objects_to_fix_up"
    find_lex $P506, "$past"
    $P507 = $P506."cuid"()
    set $S501, $P507
    set $P501, $P505[$S501]
    unless_null $P501, fallback131
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P508
  fallback131:
    $P509 = $P501."push"(_lex_param_2)
    .return ($P509) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1346233478.067") :anon :lex :outer("cuid_15_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 283
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 285
    find_lex $P502, "self"
    nqp_decontainerize $P501, $P502
    $P503 = $P501."add_object"(_lex_param_2)
.annotate 'line', 286
    find_lex $P504, "$fixups"
    get_hll_global $P508, "GLOBAL"
    nqp_get_package_through_who $P507, $P508, "QAST"
    get_who $P506, $P507
    set $P505, $P506["Op"]
    unless_null $P505, fallback132
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P509
  fallback132:
.annotate 'line', 288
    get_hll_global $P513, "GLOBAL"
    nqp_get_package_through_who $P512, $P513, "QAST"
    get_who $P511, $P512
    set $P510, $P511["WVal"]
    unless_null $P510, fallback133
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P514
  fallback133:
    $P515 = $P510."new"(_lex_param_2 :named("value"))
.annotate 'line', 289
    get_hll_global $P519, "GLOBAL"
    nqp_get_package_through_who $P518, $P519, "QAST"
    get_who $P517, $P518
    set $P516, $P517["WVal"]
    unless_null $P516, fallback134
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P520
  fallback134:
    find_lex $P521, "$code_type"
    $P522 = $P516."new"($P521 :named("value"))
.annotate 'line', 290
    get_hll_global $P526, "GLOBAL"
    nqp_get_package_through_who $P525, $P526, "QAST"
    get_who $P524, $P525
    set $P523, $P524["SVal"]
    unless_null $P523, fallback135
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P527
  fallback135:
    $P528 = $P523."new"("$!do" :named("value"))
.annotate 'line', 291
    get_hll_global $P532, "GLOBAL"
    nqp_get_package_through_who $P531, $P532, "QAST"
    get_who $P530, $P531
    set $P529, $P530["VM"]
    unless_null $P529, fallback136
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P533
  fallback136:
.annotate 'line', 293
    get_hll_global $P537, "GLOBAL"
    nqp_get_package_through_who $P536, $P537, "QAST"
    get_who $P535, $P536
    set $P534, $P535["Op"]
    unless_null $P534, fallback137
    nqp_get_sc_object $P538, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P534, $P538
  fallback137:
    get_hll_global $P542, "GLOBAL"
    nqp_get_package_through_who $P541, $P542, "QAST"
    get_who $P540, $P541
    set $P539, $P540["BVal"]
    unless_null $P539, fallback138
    nqp_get_sc_object $P543, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P539, $P543
  fallback138:
    find_lex $P544, "$past"
    $P545 = $P539."new"($P544 :named("value"))
    $P546 = $P534."new"($P545, "clone" :named("op"))
.annotate 'line', 294
    get_hll_global $P550, "GLOBAL"
    nqp_get_package_through_who $P549, $P550, "QAST"
    get_who $P548, $P549
    set $P547, $P548["WVal"]
    unless_null $P547, fallback139
    nqp_get_sc_object $P551, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P547, $P551
  fallback139:
    $P552 = $P547."new"(_lex_param_2 :named("value"))
    $P553 = $P529."new"($P546, $P552, "set_sub_code_object 0PP" :named("pirop"))
    $P554 = $P505."new"($P515, $P522, $P528, $P553, "bindattr" :named("op"))
    $P555 = $P504."push"($P554)
.annotate 'line', 299
    find_lex $P558, "self"
    nqp_decontainerize $P557, $P558
    nqp_get_sc_object $P559, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P560, $P557, $P559, "%!code_objects_to_fix_up"
    find_lex $P561, "$past"
    $P562 = $P561."cuid"()
    set $S501, $P562
    set $P556, $P560[$S501]
    unless_null $P556, fallback140
    nqp_get_sc_object $P563, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P556, $P563
  fallback140:
    $P564 = $P556."push"(_lex_param_2)
    .return ($P564) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1346233478.067") :anon :lex :outer("cuid_15_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 310
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    find_lex $P504, "$code_type"
    repr_instance_of $P503, $P504
    set $P101, $P503
    find_lex $P505, "$code_type"
    find_lex $P506, "$dummy"
    setattribute $P101, $P505, "$!do", $P506
    find_lex $P507, "$is_dispatcher"
    set $P510, $P507
    unless $P507 goto if32_end144 
    find_lex $P508, "$code_type"
    new $P509, 'ResizablePMCArray'
    setattribute $P101, $P508, "$!dispatchees", $P509
    set $P510, $P509
  if32_end144:
.annotate 'line', 316
    find_lex $P512, "self"
    nqp_decontainerize $P511, $P512
    $P513 = $P511."add_object"($P101)
    set $P102, $P513
.annotate 'line', 319
    find_lex $P515, "self"
    nqp_decontainerize $P514, $P515
.annotate 'line', 320
    get_hll_global $P519, "GLOBAL"
    nqp_get_package_through_who $P518, $P519, "QAST"
    get_who $P517, $P518
    set $P516, $P517["VM"]
    unless_null $P516, fallback145
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P520
  fallback145:
.annotate 'line', 322
    get_hll_global $P524, "GLOBAL"
    nqp_get_package_through_who $P523, $P524, "QAST"
    get_who $P522, $P523
    set $P521, $P522["BVal"]
    unless_null $P521, fallback146
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P525
  fallback146:
    find_lex $P526, "$past"
    $P527 = $P521."new"($P526 :named("value"))
.annotate 'line', 323
    get_hll_global $P531, "GLOBAL"
    nqp_get_package_through_who $P530, $P531, "QAST"
    get_who $P529, $P530
    set $P528, $P529["WVal"]
    unless_null $P528, fallback147
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P528, $P532
  fallback147:
    $P533 = $P528."new"($P101 :named("value"))
    $P534 = $P516."new"($P527, $P533, "set_sub_code_object vPP" :named("pirop"))
    $P535 = $P514."add_fixup_task"($P534 :named("deserialize_past"))
.annotate 'line', 327
    find_lex $P536, "$fixups"
    get_hll_global $P540, "GLOBAL"
    nqp_get_package_through_who $P539, $P540, "QAST"
    get_who $P538, $P539
    set $P537, $P538["Op"]
    unless_null $P537, fallback148
    nqp_get_sc_object $P541, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P537, $P541
  fallback148:
.annotate 'line', 329
    get_hll_global $P545, "GLOBAL"
    nqp_get_package_through_who $P544, $P545, "QAST"
    get_who $P543, $P544
    set $P542, $P543["WVal"]
    unless_null $P542, fallback149
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P542, $P546
  fallback149:
    $P547 = $P542."new"($P101 :named("value"))
.annotate 'line', 330
    get_hll_global $P551, "GLOBAL"
    nqp_get_package_through_who $P550, $P551, "QAST"
    get_who $P549, $P550
    set $P548, $P549["WVal"]
    unless_null $P548, fallback150
    nqp_get_sc_object $P552, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P548, $P552
  fallback150:
    find_lex $P553, "$code_type"
    $P554 = $P548."new"($P553 :named("value"))
.annotate 'line', 331
    get_hll_global $P558, "GLOBAL"
    nqp_get_package_through_who $P557, $P558, "QAST"
    get_who $P556, $P557
    set $P555, $P556["SVal"]
    unless_null $P555, fallback151
    nqp_get_sc_object $P559, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P555, $P559
  fallback151:
    $P560 = $P555."new"("$!do" :named("value"))
.annotate 'line', 332
    get_hll_global $P564, "GLOBAL"
    nqp_get_package_through_who $P563, $P564, "QAST"
    get_who $P562, $P563
    set $P561, $P562["BVal"]
    unless_null $P561, fallback152
    nqp_get_sc_object $P565, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P561, $P565
  fallback152:
    find_lex $P566, "$past"
    $P567 = $P561."new"($P566 :named("value"))
    $P568 = $P537."new"($P547, $P554, $P560, $P567, "bindattr" :named("op"))
    $P569 = $P536."push"($P568)
.annotate 'line', 334
    find_lex $P570, "$fixups"
    get_hll_global $P574, "GLOBAL"
    nqp_get_package_through_who $P573, $P574, "QAST"
    get_who $P572, $P573
    set $P571, $P572["VM"]
    unless_null $P571, fallback153
    nqp_get_sc_object $P575, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P571, $P575
  fallback153:
.annotate 'line', 336
    get_hll_global $P579, "GLOBAL"
    nqp_get_package_through_who $P578, $P579, "QAST"
    get_who $P577, $P578
    set $P576, $P577["BVal"]
    unless_null $P576, fallback154
    nqp_get_sc_object $P580, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P576, $P580
  fallback154:
    find_lex $P581, "$past"
    $P582 = $P576."new"($P581 :named("value"))
.annotate 'line', 337
    get_hll_global $P586, "GLOBAL"
    nqp_get_package_through_who $P585, $P586, "QAST"
    get_who $P584, $P585
    set $P583, $P584["WVal"]
    unless_null $P583, fallback155
    nqp_get_sc_object $P587, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P583, $P587
  fallback155:
    $P588 = $P583."new"($P101 :named("value"))
    $P589 = $P571."new"($P582, $P588, "set_sub_code_object vPP" :named("pirop"))
    $P590 = $P570."push"($P589)
    find_lex $P592, "self"
    nqp_decontainerize $P591, $P592
    nqp_get_sc_object $P593, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P594, $P591, $P593, "%!code_objects_to_fix_up"
.annotate 'line', 341
    find_lex $P595, "$past"
    $P596 = $P595."cuid"()
    set $S501, $P596
    new $P597, 'ResizablePMCArray'
    push $P597, $P101
    set $P594[$S501], $P597
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 363
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_1 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_2 :opt_flag 
    if haz_param_1, default167
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set _lex_param_2, $P512
  default167:
    if haz_param_2, default168
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set _lex_param_3, $P513
  default168:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P501, 'Hash'
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_161
    .lex "RETURN", $P103
    defined $I501, _lex_param_2
    box $P504, $I501
    set $P503, $P504
    unless $I501 goto if33_end164 
.annotate 'line', 366
    set $P101["name"], _lex_param_2
    set $P503, _lex_param_2
  if33_end164:
    defined $I502, _lex_param_3
    box $P506, $I502
    set $P505, $P506
    unless $I502 goto if34_end166 
.annotate 'line', 367
    set $P101["repr"], _lex_param_3
    set $P505, _lex_param_3
  if34_end166:
.annotate 'line', 368
    $P507 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P507
.annotate 'line', 369
    nqp_decontainerize $P508, _lex_param_0
    $P509 = $P508."add_object"($P102)
    find_lex $P510, "RETURN"
    $P511 = $P510($P102)
    goto lexotic_162
  lexotic_161:
    .get_results ($P511)
  lexotic_162:
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 380
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 381
    $P502 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P502
.annotate 'line', 382
    get_how $P503, _lex_param_1
    $P504 = $P503."add_attribute"(_lex_param_1, $P101)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 386
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 387
    get_how $P501, _lex_param_1
    set $S501, _lex_param_2
    $P502 = $P501.$S501(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 391
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
.annotate 'line', 392
    nqp_decontainerize $P504, _lex_param_0
    new $P505, 'ResizablePMCArray'
    box $P506, "NQPSignature"
    push $P505, $P506
    $P507 = $P504."find_sym"($P505)
    set $P101, $P507
.annotate 'line', 393
    nqp_decontainerize $P508, _lex_param_0
    new $P509, 'ResizablePMCArray'
    box $P510, "NQPRoutine"
    push $P509, $P510
    $P511 = $P508."find_sym"($P509)
    set $P102, $P511
    repr_instance_of $P512, $P101
    set $P103, $P512
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 401
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 403
    nqp_decontainerize $P502, _lex_param_0
    $P503 = _lex_param_2."name"()
    $P504 = $P502."create_code"(_lex_param_2, $P503, 0)
    set $P101, $P504
.annotate 'line', 406
    get_how $P505, _lex_param_1
    $P506 = $P505."set_body_block"(_lex_param_1, $P101)
    .return ($P506) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 410
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 411
    get_how $P501, _lex_param_1
    set $S501, _lex_param_2
    $P502 = $P501.$S501(_lex_param_1, _lex_param_3)
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 414
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 415
    get_how $P501, _lex_param_1
    $P502 = $P501."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 419
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 420
    get_how $P501, _lex_param_1
    $P502 = $P501."compose"(_lex_param_1)
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 424
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P543 = 'cuid_382_1346233478.067' 
    capture_lex $P543 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    new $P502, 'Hash'
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P105, $P505
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_169
    .lex "RETURN", $P106
.annotate 'line', 426
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Block"]
    unless_null $P506, fallback171
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback171:
.annotate 'line', 427
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["Stmts"]
    unless_null $P511, fallback172
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback172:
    $P516 = $P511."new"()
    $P517 = $P506."new"($P516, _lex_param_1)
    set $P101, $P517
    nqp_decontainerize $P518, _lex_param_0
    nqp_get_sc_object $P519, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P520, $P518, $P519, "@!BLOCKS"
    set $N501, $P520
    box $P521, $N501
    set $P103, $P521
    new $P525, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P525, while35_handlers176
    push_eh $P525
  while35_test173:
    set $N502, $P103
    set $N503, 0
    isgt $I501, $N502, $N503
    box $P526, $I501
    set $P524, $P526
    unless $I501 goto while35_done177 
  while35_redo175:
    .const 'Sub' $P522 = 'cuid_382_1346233478.067' 
    capture_lex $P522
    $P523 = $P522()
    set $P524, $P523
    goto while35_test173 
  while35_handlers176:
    .get_results ($P525)
    pop_upto_eh $P525
    getattribute $P525, $P525, 'type'
    eq $P525, .CONTROL_LOOP_NEXT, while35_test173
    eq $P525, .CONTROL_LOOP_REDO, while35_redo175
  while35_done177:
    pop_eh 
.annotate 'line', 450
    nqp_decontainerize $P527, _lex_param_0
    $P528 = $P527."create_code"($P101, "BEGIN block", 0)
    set $P104, $P528
    new $P530, 'ResizablePMCArray'
    get_hll_global $P529, $P530, "GLOBAL"
    set $P105, $P529
    new $P531, 'ResizablePMCArray'
    find_dynamic_lex $P532, "$*GLOBALish"
    unless_null $P532, fallback195
    get_hll_global $P535, "GLOBAL"
    get_who $P534, $P535
    set $P533, $P534["$GLOBALish"]
    unless_null $P533, fallback196
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P536
  fallback196:
    unless_null $P533, vivi_40197
    die "Contextual $*GLOBALish not found"
    box $P537, "Contextual $*GLOBALish not found"
    set $P533, $P537
  vivi_40197:
    set $P532, $P533
  fallback195:
    set_hll_global $P531, "GLOBAL", $P532
.annotate 'line', 453
    $P538 = $P104()
    new $P539, 'ResizablePMCArray'
    set_hll_global $P539, "GLOBAL", $P105
.annotate 'line', 458
    $P540 = $P101."shift"()
    find_lex $P541, "RETURN"
    $P542 = $P541($P101)
    goto lexotic_170
  lexotic_169:
    .get_results ($P542)
  lexotic_170:
    .return ($P542) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1346233478.067") :anon :lex :outer("cuid_24_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 432
    .const 'Sub' $P518 = 'cuid_381_1346233478.067' 
    capture_lex $P518 
    .lex "%symbols", $P101 
    new $P501, 'Hash'
    set $P101, $P501
    find_lex $P502, "$i"
    set $N502, $P502
    set $N503, 1
    sub $N501, $N502, $N503
    box $P503, $N501
    store_lex "$i", $P503
.annotate 'line', 434
    find_lex $P506, "self"
    nqp_decontainerize $P505, $P506
    nqp_get_sc_object $P507, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P508, $P505, $P507, "@!BLOCKS"
    find_lex $P509, "$i"
    set $I501, $P509
    set $P504, $P508[$I501]
    unless_null $P504, fallback178
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P510
  fallback178:
    $P511 = $P504."symtable"()
    set $P101, $P511
    set $P512, $P101
    iter $P514, $P101
    new $P516, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P516, for_handlers191
    push_eh $P516
  for_next192:
    unless $P514, for_done194
    shift $P517, $P514
  for_redo193:
    .const 'Sub' $P515 = 'cuid_381_1346233478.067' 
    capture_lex $P515
    $P512 = $P515($P517)
    goto for_next192
  for_handlers191:
    .get_results ($P516)
    pop_upto_eh $P516
    getattribute $P516, $P516, 'type'
    eq $P516, .CONTROL_LOOP_NEXT, for_next192
    eq $P516, .CONTROL_LOOP_REDO, for_redo193
  for_done194:
    pop_eh 
    .return ($P512) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1346233478.067") :anon :lex :outer("cuid_382_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 435
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P502, "%seen"
.annotate 'line', 436
    $P503 = _lex_param_0."key"()
    set $S501, $P503
    set $P501, $P502[$S501]
    unless_null $P501, fallback183
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P504
  fallback183:
    isfalse $I501, $P501
    set $I503, $I501
    unless $I501 goto if37_end182 
    $P505 = _lex_param_0."value"()
    exists $I502, $P505["value"]
    set $I503, $I502
  if37_end182:
    box $P538, $I503
    set $P537, $P538
    unless $I503 goto if36_end180 
    new $P532, 'ExceptionHandler'
    set_label $P532, catch_handler_39190
    $P532.'handle_types_except'(.CONTROL_ALL)
    push_eh $P532
.annotate 'line', 437
.annotate 'line', 438
    find_lex $P507, "$wrapper"
    set $P506, $P507[0]
    unless_null $P506, fallback184
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P508
  fallback184:
    get_hll_global $P512, "GLOBAL"
    nqp_get_package_through_who $P511, $P512, "QAST"
    get_who $P510, $P511
    set $P509, $P510["Op"]
    unless_null $P509, fallback185
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P513
  fallback185:
.annotate 'line', 440
    get_hll_global $P517, "GLOBAL"
    nqp_get_package_through_who $P516, $P517, "QAST"
    get_who $P515, $P516
    set $P514, $P515["Var"]
    unless_null $P514, fallback186
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P518
  fallback186:
    $P519 = _lex_param_0."key"()
    $P520 = $P514."new"($P519 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 441
    get_hll_global $P524, "GLOBAL"
    nqp_get_package_through_who $P523, $P524, "QAST"
    get_who $P522, $P523
    set $P521, $P522["WVal"]
    unless_null $P521, fallback187
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P525
  fallback187:
    $P527 = _lex_param_0."value"()
    set $P526, $P527["value"]
    unless_null $P526, fallback188
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P528
  fallback188:
    $P529 = $P521."new"($P526 :named("value"))
    $P530 = $P509."new"($P520, $P529, "bind" :named("op"))
    $P531 = $P506."push"($P530)
    set $P533, $P531
    pop_eh 
    goto skip_handler_38189
  catch_handler_39190:
    .get_results ($P532) 
    set $I10001, 1
    set $P532["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P532
    pop_upto_eh $P532
    pop_eh 
    set $P533, $P10001
    goto skip_handler_38189
  skip_handler_38189:
    find_lex $P534, "%seen"
.annotate 'line', 444
    $P535 = _lex_param_0."key"()
    set $S502, $P535
    box $P536, 1
    set $P534[$S502], $P536
    set $P537, $P536
  if36_end180:
    .return ($P537) 
.end
.HLL "nqp"
.namespace []
.sub "add_libs" :subid("cuid_25_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 463
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P547 = 'cuid_383_1346233478.067' 
    capture_lex $P547 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
    new $P502, 'ResizablePMCArray'
    box $P503, "nqp_group"
    push $P502, $P503
    box $P504, "nqp_ops"
    push $P502, $P504
    box $P505, "nqp_bigint_ops"
    push $P502, $P505
    box $P506, "trans_ops"
    push $P502, $P506
    box $P507, "io_ops"
    push $P502, $P507
    set $P101, $P502
    find_dynamic_lex $P510, "%*COMPILING"
    unless_null $P510, fallback200
    get_hll_global $P513, "GLOBAL"
    get_who $P512, $P513
    set $P511, $P512["%COMPILING"]
    unless_null $P511, fallback201
    get_hll_global $P515, "GLOBAL"
    get_who $P514, $P515
    new $P516, 'Hash'
    set $P514["%COMPILING"], $P516
    set $P511, $P516
  fallback201:
    unless_null $P511, vivi_42202
    die "Contextual %*COMPILING not found"
    box $P517, "Contextual %*COMPILING not found"
    set $P511, $P517
  vivi_42202:
    set $P510, $P511
  fallback200:
    set $P509, $P510["%?OPTIONS"]
    unless_null $P509, fallback203
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P518
  fallback203:
    set $P508, $P509["vmlibs"]
    unless_null $P508, fallback204
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P519
  fallback204:
    set $P539, $P508
    unless $P508 goto if41_end199 
.annotate 'line', 466
    find_dynamic_lex $P526, "%*COMPILING"
    unless_null $P526, fallback205
    get_hll_global $P529, "GLOBAL"
    get_who $P528, $P529
    set $P527, $P528["%COMPILING"]
    unless_null $P527, fallback206
    get_hll_global $P531, "GLOBAL"
    get_who $P530, $P531
    new $P532, 'Hash'
    set $P530["%COMPILING"], $P532
    set $P527, $P532
  fallback206:
    unless_null $P527, vivi_43207
    die "Contextual %*COMPILING not found"
    box $P533, "Contextual %*COMPILING not found"
    set $P527, $P533
  vivi_43207:
    set $P526, $P527
  fallback205:
    set $P525, $P526["%?OPTIONS"]
    unless_null $P525, fallback208
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P534
  fallback208:
    set $P524, $P525["vmlibs"]
    unless_null $P524, fallback209
    nqp_get_sc_object $P535, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P535
  fallback209:
    set $S501, $P524
    split $P523, ",", $S501
    set $P520, $P523
    iter $P522, $P523
    new $P537, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P537, for_handlers210
    push_eh $P537
  for_next211:
    unless $P522, for_done213
    shift $P538, $P522
  for_redo212:
    .const 'Sub' $P536 = 'cuid_383_1346233478.067' 
    capture_lex $P536
    $P520 = $P536($P538)
    goto for_next211
  for_handlers210:
    .get_results ($P537)
    pop_upto_eh $P537
    getattribute $P537, $P537, 'type'
    eq $P537, .CONTROL_LOOP_NEXT, for_next211
    eq $P537, .CONTROL_LOOP_REDO, for_redo212
  for_done213:
    pop_eh 
    set $P539, $P520
  if41_end199:
.annotate 'line', 471
    get_hll_global $P543, "GLOBAL"
    nqp_get_package_through_who $P542, $P543, "QAST"
    get_who $P541, $P542
    set $P540, $P541["VM"]
    unless_null $P540, fallback214
    nqp_get_sc_object $P544, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P540, $P544
  fallback214:
    $P545 = $P540."new"($P101 :named("loadlibs"))
    $P546 = _lex_param_1."push"($P545)
    .return ($P546) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1346233478.067") :anon :lex :outer("cuid_25_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 467
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 468
    find_lex $P501, "@loadlibs"
    $P502 = $P501."push"(_lex_param_0)
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 475
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 476
    nqp_decontainerize $P501, _lex_param_0
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["Stmts"]
    unless_null $P502, fallback215
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback215:
.annotate 'line', 477
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["VM"]
    unless_null $P507, fallback216
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback216:
    $P512 = $P507."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 478
    get_hll_global $P516, "GLOBAL"
    nqp_get_package_through_who $P515, $P516, "QAST"
    get_who $P514, $P515
    set $P513, $P514["VM"]
    unless_null $P513, fallback217
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P517
  fallback217:
    $P518 = $P513."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 479
    get_hll_global $P522, "GLOBAL"
    nqp_get_package_through_who $P521, $P522, "QAST"
    get_who $P520, $P521
    set $P519, $P520["Op"]
    unless_null $P519, fallback218
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P523
  fallback218:
.annotate 'line', 481
    get_hll_global $P527, "GLOBAL"
    nqp_get_package_through_who $P526, $P527, "QAST"
    get_who $P525, $P526
    set $P524, $P525["VM"]
    unless_null $P524, fallback219
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P528
  fallback219:
    $P529 = $P524."new"("getinterp P" :named("pirop"))
.annotate 'line', 482
    get_hll_global $P533, "GLOBAL"
    nqp_get_package_through_who $P532, $P533, "QAST"
    get_who $P531, $P532
    set $P530, $P531["VM"]
    unless_null $P530, fallback220
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P534
  fallback220:
    get_hll_global $P538, "GLOBAL"
    nqp_get_package_through_who $P537, $P538, "QAST"
    get_who $P536, $P537
    set $P535, $P536["SVal"]
    unless_null $P535, fallback221
    nqp_get_sc_object $P539, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P535, $P539
  fallback221:
    $P540 = $P535."new"("LexPad" :named("value"))
    $P541 = $P530."new"($P540, "get_class Ps" :named("pirop"))
.annotate 'line', 483
    get_hll_global $P545, "GLOBAL"
    nqp_get_package_through_who $P544, $P545, "QAST"
    get_who $P543, $P544
    set $P542, $P543["VM"]
    unless_null $P542, fallback222
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P542, $P546
  fallback222:
    get_hll_global $P550, "GLOBAL"
    nqp_get_package_through_who $P549, $P550, "QAST"
    get_who $P548, $P549
    set $P547, $P548["SVal"]
    unless_null $P547, fallback223
    nqp_get_sc_object $P551, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P547, $P551
  fallback223:
    $P552 = $P547."new"("NQPLexPad" :named("value"))
    $P553 = $P542."new"($P552, "get_class Ps" :named("pirop"))
    $P554 = $P519."new"($P529, $P541, $P553, "callmethod" :named("op"), "hll_map" :named("name"))
    $P555 = $P502."new"($P512, $P518, $P554)
    $P556 = $P501."add_load_dependency_task"($P555 :named("deserialize_past"))
    .return ($P556) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 489
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 490
    nqp_decontainerize $P501, _lex_param_0
    $P502 = $P501."is_scope"(_lex_param_1, "lexical")
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 495
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 496
    nqp_decontainerize $P501, _lex_param_0
    $P502 = $P501."is_scope"(_lex_param_1, "package")
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 501
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P512 = 'cuid_384_1346233478.067' 
    capture_lex $P512 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_224
    .lex "RETURN", $P102
    nqp_decontainerize $P502, _lex_param_0
    nqp_get_sc_object $P503, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P504, $P502, $P503, "@!BLOCKS"
    set $N501, $P504
    box $P505, $N501
    set $P101, $P505
    new $P509, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P509, while44_handlers229
    push_eh $P509
  while44_test226:
    set $N502, $P101
    set $N503, 0
    isgt $I501, $N502, $N503
    box $P510, $I501
    set $P508, $P510
    unless $I501 goto while44_done230 
  while44_redo228:
    .const 'Sub' $P506 = 'cuid_384_1346233478.067' 
    capture_lex $P506
    $P507 = $P506()
    set $P508, $P507
    goto while44_test226 
  while44_handlers229:
    .get_results ($P509)
    pop_upto_eh $P509
    getattribute $P509, $P509, 'type'
    eq $P509, .CONTROL_LOOP_NEXT, while44_test226
    eq $P509, .CONTROL_LOOP_REDO, while44_redo228
  while44_done230:
    pop_eh 
    box $P511, 0
    goto lexotic_225
  lexotic_224:
    .get_results ($P511)
  lexotic_225:
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1346233478.067") :anon :lex :outer("cuid_29_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 503
    .lex "%sym", $P101 
    new $P501, 'Hash'
    set $P101, $P501
    find_lex $P502, "$i"
    set $N502, $P502
    set $N503, 1
    sub $N501, $N502, $N503
    box $P503, $N501
    store_lex "$i", $P503
.annotate 'line', 505
    find_lex $P506, "self"
    nqp_decontainerize $P505, $P506
    nqp_get_sc_object $P507, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P508, $P505, $P507, "@!BLOCKS"
    find_lex $P509, "$i"
    set $I501, $P509
    set $P504, $P508[$I501]
    unless_null $P504, fallback231
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P510
  fallback231:
    find_lex $P511, "$name"
    $P512 = $P504."symbol"($P511)
    set $P101, $P512
    set $N504, $P101
    box $P519, $N504
    set $P518, $P519
    unless $N504 goto if45_end233 
.annotate 'line', 506
    set $P514, $P101["scope"]
    unless_null $P514, fallback234
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P515
  fallback234:
    set $S501, $P514
    find_lex $P516, "$wanted_scope"
    set $S502, $P516
    iseq $I502, $S501, $S502
    find_lex $P513, "RETURN"
    $P517 = $P513($I502)
    set $P518, $P517
  if45_end233:
    .return ($P518) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 514
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    box $P502, 0
    set $P101, $P502
    new $P506, 'ExceptionHandler'
    set_label $P506, catch_handler_47236
    $P506.'handle_types_except'(.CONTROL_ALL)
    push_eh $P506
.annotate 'line', 516
.annotate 'line', 517
    nqp_decontainerize $P503, _lex_param_0
    $P504 = $P503."find_sym"(_lex_param_2)
    box $P505, 1
    set $P101, $P505
    set $P507, $P101
    pop_eh 
    goto skip_handler_46235
  catch_handler_47236:
    .get_results ($P506) 
    set $I10001, 1
    set $P506["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P506
    pop_upto_eh $P506
    pop_eh 
    set $P507, $P10001
    goto skip_handler_46235
  skip_handler_46235:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1346233478.067") :anon :lex :outer("cuid_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 526
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P525 = 'cuid_386_1346233478.067' 
    capture_lex $P525 
    .const 'Sub' $P525 = 'cuid_388_1346233478.067' 
    capture_lex $P525 
    .const 'Sub' $P525 = 'cuid_389_1346233478.067' 
    capture_lex $P525 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_237
    .lex "RETURN", $P102
    set $N501, _lex_param_1
    box $P504, $N501
    set $P503, $P504
    if $N501 goto unless48_end240 
.annotate 'line', 528
    box $P502, "Cannot look up empty name"
    die $P502
    set $P503, $P502
  unless48_end240:
    set $N502, _lex_param_1
    set $N503, 1
    iseq $I501, $N502, $N503
    box $P508, $I501
    set $P507, $P508
    unless $I501 goto if49_end242 
    .const 'Sub' $P505 = 'cuid_386_1346233478.067' 
    capture_lex $P505
    $P506 = $P505()
    set $P507, $P506
  if49_end242:
    find_dynamic_lex $P509, "$*GLOBALish"
    unless_null $P509, fallback255
    get_hll_global $P512, "GLOBAL"
    get_who $P511, $P512
    set $P510, $P511["$GLOBALish"]
    unless_null $P510, fallback256
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P513
  fallback256:
    unless_null $P510, vivi_53257
    die "Contextual $*GLOBALish not found"
    box $P514, "Contextual $*GLOBALish not found"
    set $P510, $P514
  vivi_53257:
    set $P509, $P510
  fallback255:
    set $P101, $P509
    set $N504, _lex_param_1
    set $N505, 2
    isge $I502, $N504, $N505
    box $P518, $I502
    set $P517, $P518
    unless $I502 goto if54_end259 
    .const 'Sub' $P515 = 'cuid_388_1346233478.067' 
    capture_lex $P515
    $P516 = $P515()
    set $P517, $P516
  if54_end259:
    set $P519, _lex_param_1
    iter $P521, _lex_param_1
    new $P523, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P523, for_handlers275
    push_eh $P523
  for_next276:
    unless $P521, for_done278
    shift $P524, $P521
  for_redo277:
    .const 'Sub' $P522 = 'cuid_389_1346233478.067' 
    capture_lex $P522
    $P519 = $P522($P524)
    goto for_next276
  for_handlers275:
    .get_results ($P523)
    pop_upto_eh $P523
    getattribute $P523, $P523, 'type'
    eq $P523, .CONTROL_LOOP_NEXT, for_next276
    eq $P523, .CONTROL_LOOP_REDO, for_redo277
  for_done278:
    pop_eh 
    goto lexotic_238
  lexotic_237:
    .get_results ($P101)
  lexotic_238:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1346233478.067") :anon :lex :outer("cuid_31_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 532
    .const 'Sub' $P516 = 'cuid_385_1346233478.067' 
    capture_lex $P516 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    find_lex $P504, "@name"
    set $P503, $P504[0]
    unless_null $P503, fallback243
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P505
  fallback243:
    set $P101, $P503
    find_lex $P507, "self"
    nqp_decontainerize $P506, $P507
    nqp_get_sc_object $P508, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P509, $P506, $P508, "@!BLOCKS"
    set $N501, $P509
    box $P510, $N501
    set $P102, $P510
    new $P514, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P514, while50_handlers247
    push_eh $P514
  while50_test244:
    set $N502, $P102
    set $N503, 0
    isgt $I501, $N502, $N503
    box $P515, $I501
    set $P513, $P515
    unless $I501 goto while50_done248 
  while50_redo246:
    .const 'Sub' $P511 = 'cuid_385_1346233478.067' 
    capture_lex $P511
    $P512 = $P511()
    set $P513, $P512
    goto while50_test244 
  while50_handlers247:
    .get_results ($P514)
    pop_upto_eh $P514
    getattribute $P514, $P514, 'type'
    eq $P514, .CONTROL_LOOP_NEXT, while50_test244
    eq $P514, .CONTROL_LOOP_REDO, while50_redo246
  while50_done248:
    pop_eh 
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1346233478.067") :anon :lex :outer("cuid_386_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 535
    .lex "%sym", $P101 
    new $P501, 'Hash'
    set $P101, $P501
    find_lex $P502, "$i"
    set $N502, $P502
    set $N503, 1
    sub $N501, $N502, $N503
    box $P503, $N501
    store_lex "$i", $P503
.annotate 'line', 537
    find_lex $P506, "self"
    nqp_decontainerize $P505, $P506
    nqp_get_sc_object $P507, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P508, $P505, $P507, "@!BLOCKS"
    find_lex $P509, "$i"
    set $I501, $P509
    set $P504, $P508[$I501]
    unless_null $P504, fallback249
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P510
  fallback249:
    find_lex $P511, "$final_name"
    $P512 = $P504."symbol"($P511)
    set $P101, $P512
    set $N504, $P101
    box $P521, $N504
    set $P520, $P521
    unless $N504 goto if51_end251 
.annotate 'line', 538
    exists $I502, $P101["value"]
    unless $I502 goto if52_else252 
.annotate 'line', 539
    set $P514, $P101["value"]
    unless_null $P514, fallback254
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P515
  fallback254:
    find_lex $P513, "RETURN"
    $P516 = $P513($P514)
    set $P519, $P516
    goto if52_end253
  if52_else252:
.annotate 'line', 542
    find_lex $P517, "$final_name"
    set $S502, $P517
    concat $S501, "No compile-time value for ", $S502
    box $P518, $S501
    die $P518
    set $P519, $P518
  if52_end253:
    set $P520, $P519
  if51_end251:
    .return ($P520) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1346233478.067") :anon :lex :outer("cuid_31_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 553
    .const 'Sub' $P516 = 'cuid_387_1346233478.067' 
    capture_lex $P516 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    find_lex $P504, "@name"
    set $P503, $P504[0]
    unless_null $P503, fallback260
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P505
  fallback260:
    set $P101, $P503
    find_lex $P507, "self"
    nqp_decontainerize $P506, $P507
    nqp_get_sc_object $P508, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P509, $P506, $P508, "@!BLOCKS"
    set $N501, $P509
    box $P510, $N501
    set $P102, $P510
    new $P514, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P514, while55_handlers264
    push_eh $P514
  while55_test261:
    set $N502, $P102
    set $N503, 0
    isgt $I501, $N502, $N503
    box $P515, $I501
    set $P513, $P515
    unless $I501 goto while55_done265 
  while55_redo263:
    .const 'Sub' $P511 = 'cuid_387_1346233478.067' 
    capture_lex $P511
    $P512 = $P511()
    set $P513, $P512
    goto while55_test261 
  while55_handlers264:
    .get_results ($P514)
    pop_upto_eh $P514
    getattribute $P514, $P514, 'type'
    eq $P514, .CONTROL_LOOP_NEXT, while55_test261
    eq $P514, .CONTROL_LOOP_REDO, while55_redo263
  while55_done265:
    pop_eh 
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1346233478.067") :anon :lex :outer("cuid_388_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 556
    .lex "%sym", $P101 
    new $P501, 'Hash'
    set $P101, $P501
    find_lex $P502, "$i"
    set $N502, $P502
    set $N503, 1
    sub $N501, $N502, $N503
    box $P503, $N501
    store_lex "$i", $P503
.annotate 'line', 558
    find_lex $P506, "self"
    nqp_decontainerize $P505, $P506
    nqp_get_sc_object $P507, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    repr_get_attr_obj $P508, $P505, $P507, "@!BLOCKS"
    find_lex $P509, "$i"
    set $I501, $P509
    set $P504, $P508[$I501]
    unless_null $P504, fallback266
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P510
  fallback266:
    find_lex $P511, "$first"
    $P512 = $P504."symbol"($P511)
    set $P101, $P512
    set $N504, $P101
    box $P522, $N504
    set $P521, $P522
    unless $N504 goto if56_end268 
.annotate 'line', 559
    exists $I502, $P101["value"]
    unless $I502 goto if57_else269 
.annotate 'line', 560
    set $P513, $P101["value"]
    unless_null $P513, fallback271
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P514
  fallback271:
    store_lex "$result", $P513
.annotate 'line', 562
    find_lex $P515, "@name"
    $P516 = $P515."shift"()
    box $P517, 0
    store_lex "$i", $P517
    set $P520, $P517
    goto if57_end270
  if57_else269:
.annotate 'line', 565
    find_lex $P518, "$first"
    set $S502, $P518
    concat $S501, "No compile-time value for ", $S502
    box $P519, $S501
    die $P519
    set $P520, $P519
  if57_end270:
    set $P521, $P520
  if56_end268:
    .return ($P521) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1346233478.067") :anon :lex :outer("cuid_31_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 573
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P502, "$result"
    get_who $P501, $P502
    set $S501, _lex_param_0
    exists $I501, $P501[$S501]
    unless $I501 goto if58_else272 
.annotate 'line', 574
    find_lex $P505, "$result"
    get_who $P504, $P505
    set $S502, _lex_param_0
    set $P503, $P504[$S502]
    unless_null $P503, fallback274
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback274:
    store_lex "$result", $P503
    set $P509, $P503
    goto if58_end273
  if58_else272:
.annotate 'line', 577
    find_lex $P507, "@name"
    join $S504, "::", $P507
    concat $S503, "Could not locate compile-time value for symbol ", $S504
    box $P508, $S503
    die $P508
    set $P509, $P508
  if58_end273:
    .return ($P509) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 588
    .const 'Sub' $P774 = 'cuid_33_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_34_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_35_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_36_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_37_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_38_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_40_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_42_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_43_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_44_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_46_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_47_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_48_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_49_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_50_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_51_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_52_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_53_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_54_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_55_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_56_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_57_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_58_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_59_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_60_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_61_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_62_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_63_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_65_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_66_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_67_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_68_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_69_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_70_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_71_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_72_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_73_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_74_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_75_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_76_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_77_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_78_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_79_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_80_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_81_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_82_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_83_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_84_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_85_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_86_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_87_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_88_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_91_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_92_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_93_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_94_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_95_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_96_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_97_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_98_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_99_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_100_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_101_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_102_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_103_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_104_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_105_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_106_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_107_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_108_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_109_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_110_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_111_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_112_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_113_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_114_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_115_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_116_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_117_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_118_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_119_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_120_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_121_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_122_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_123_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_124_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_125_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_126_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_128_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_129_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_130_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_131_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_132_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_133_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_134_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_135_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_136_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_137_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_138_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_139_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_140_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_141_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_142_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_143_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_144_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_145_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_146_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_147_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_148_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_149_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_150_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_151_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_152_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_153_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_154_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_155_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_156_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_157_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_158_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_159_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_160_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_161_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_162_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_163_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_164_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_165_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_166_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_167_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_168_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_169_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_170_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_171_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_172_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_173_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_174_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_175_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_176_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_177_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_178_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_179_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_180_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_181_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_182_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_183_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_184_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_185_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_186_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_187_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_188_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_189_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_190_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_191_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_192_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_193_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_194_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_195_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_196_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_197_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_198_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_199_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_200_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_201_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_202_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_203_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_204_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_205_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_206_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_207_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_208_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_209_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_210_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_211_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_212_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_213_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_214_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_215_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_216_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_217_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_218_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_219_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_220_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_221_1346233478.067' 
    capture_lex $P774 
    .const 'Sub' $P774 = 'cuid_222_1346233478.067' 
    capture_lex $P774 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1211
.annotate 'line', 1212
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "NQP"
    get_who $P502, $P503
    set $P501, $P502["Grammar"]
    unless_null $P501, fallback279
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback279:
    $P506 = $P501."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1213
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "NQP"
    get_who $P508, $P509
    set $P507, $P508["Grammar"]
    unless_null $P507, fallback280
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback280:
    $P512 = $P507."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1214
    get_hll_global $P516, "GLOBAL"
    nqp_get_package_through_who $P515, $P516, "NQP"
    get_who $P514, $P515
    set $P513, $P514["Grammar"]
    unless_null $P513, fallback281
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P517
  fallback281:
    $P518 = $P513."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1215
    get_hll_global $P522, "GLOBAL"
    nqp_get_package_through_who $P521, $P522, "NQP"
    get_who $P520, $P521
    set $P519, $P520["Grammar"]
    unless_null $P519, fallback282
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P523
  fallback282:
    $P524 = $P519."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1216
    get_hll_global $P528, "GLOBAL"
    nqp_get_package_through_who $P527, $P528, "NQP"
    get_who $P526, $P527
    set $P525, $P526["Grammar"]
    unless_null $P525, fallback283
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P529
  fallback283:
    $P530 = $P525."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1217
    get_hll_global $P534, "GLOBAL"
    nqp_get_package_through_who $P533, $P534, "NQP"
    get_who $P532, $P533
    set $P531, $P532["Grammar"]
    unless_null $P531, fallback284
    nqp_get_sc_object $P535, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P531, $P535
  fallback284:
    $P536 = $P531."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1218
    get_hll_global $P540, "GLOBAL"
    nqp_get_package_through_who $P539, $P540, "NQP"
    get_who $P538, $P539
    set $P537, $P538["Grammar"]
    unless_null $P537, fallback285
    nqp_get_sc_object $P541, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P537, $P541
  fallback285:
    $P542 = $P537."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1219
    get_hll_global $P546, "GLOBAL"
    nqp_get_package_through_who $P545, $P546, "NQP"
    get_who $P544, $P545
    set $P543, $P544["Grammar"]
    unless_null $P543, fallback286
    nqp_get_sc_object $P547, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P543, $P547
  fallback286:
    $P548 = $P543."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1220
    get_hll_global $P552, "GLOBAL"
    nqp_get_package_through_who $P551, $P552, "NQP"
    get_who $P550, $P551
    set $P549, $P550["Grammar"]
    unless_null $P549, fallback287
    nqp_get_sc_object $P553, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P553
  fallback287:
    $P554 = $P549."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1221
    get_hll_global $P558, "GLOBAL"
    nqp_get_package_through_who $P557, $P558, "NQP"
    get_who $P556, $P557
    set $P555, $P556["Grammar"]
    unless_null $P555, fallback288
    nqp_get_sc_object $P559, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P555, $P559
  fallback288:
    $P560 = $P555."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1222
    get_hll_global $P564, "GLOBAL"
    nqp_get_package_through_who $P563, $P564, "NQP"
    get_who $P562, $P563
    set $P561, $P562["Grammar"]
    unless_null $P561, fallback289
    nqp_get_sc_object $P565, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P561, $P565
  fallback289:
    $P566 = $P561."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1223
    get_hll_global $P570, "GLOBAL"
    nqp_get_package_through_who $P569, $P570, "NQP"
    get_who $P568, $P569
    set $P567, $P568["Grammar"]
    unless_null $P567, fallback290
    nqp_get_sc_object $P571, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P567, $P571
  fallback290:
    $P572 = $P567."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1224
    get_hll_global $P576, "GLOBAL"
    nqp_get_package_through_who $P575, $P576, "NQP"
    get_who $P574, $P575
    set $P573, $P574["Grammar"]
    unless_null $P573, fallback291
    nqp_get_sc_object $P577, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P573, $P577
  fallback291:
    $P578 = $P573."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1225
    get_hll_global $P582, "GLOBAL"
    nqp_get_package_through_who $P581, $P582, "NQP"
    get_who $P580, $P581
    set $P579, $P580["Grammar"]
    unless_null $P579, fallback292
    nqp_get_sc_object $P583, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P579, $P583
  fallback292:
    $P584 = $P579."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1226
    get_hll_global $P588, "GLOBAL"
    nqp_get_package_through_who $P587, $P588, "NQP"
    get_who $P586, $P587
    set $P585, $P586["Grammar"]
    unless_null $P585, fallback293
    nqp_get_sc_object $P589, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P585, $P589
  fallback293:
    $P590 = $P585."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 588
    .const 'Sub' $P591 = 'cuid_33_1346233478.067' 
    capture_lex $P591
    .const 'Sub' $P592 = 'cuid_34_1346233478.067' 
    capture_lex $P592
    .const 'Sub' $P593 = 'cuid_35_1346233478.067' 
    capture_lex $P593
    .const 'Sub' $P594 = 'cuid_36_1346233478.067' 
    capture_lex $P594
    .const 'Sub' $P595 = 'cuid_37_1346233478.067' 
    capture_lex $P595
    .const 'Sub' $P596 = 'cuid_38_1346233478.067' 
    capture_lex $P596
    .const 'Sub' $P597 = 'cuid_40_1346233478.067' 
    capture_lex $P597
    .const 'Sub' $P598 = 'cuid_42_1346233478.067' 
    capture_lex $P598
    .const 'Sub' $P599 = 'cuid_43_1346233478.067' 
    capture_lex $P599
    .const 'Sub' $P600 = 'cuid_44_1346233478.067' 
    capture_lex $P600
    .const 'Sub' $P601 = 'cuid_46_1346233478.067' 
    capture_lex $P601
    .const 'Sub' $P602 = 'cuid_47_1346233478.067' 
    capture_lex $P602
    .const 'Sub' $P603 = 'cuid_48_1346233478.067' 
    capture_lex $P603
    .const 'Sub' $P604 = 'cuid_49_1346233478.067' 
    capture_lex $P604
    .const 'Sub' $P605 = 'cuid_50_1346233478.067' 
    capture_lex $P605
    .const 'Sub' $P606 = 'cuid_51_1346233478.067' 
    capture_lex $P606
    .const 'Sub' $P607 = 'cuid_52_1346233478.067' 
    capture_lex $P607
    .const 'Sub' $P608 = 'cuid_53_1346233478.067' 
    capture_lex $P608
    .const 'Sub' $P609 = 'cuid_54_1346233478.067' 
    capture_lex $P609
    .const 'Sub' $P610 = 'cuid_55_1346233478.067' 
    capture_lex $P610
    .const 'Sub' $P611 = 'cuid_56_1346233478.067' 
    capture_lex $P611
    .const 'Sub' $P612 = 'cuid_57_1346233478.067' 
    capture_lex $P612
    .const 'Sub' $P613 = 'cuid_58_1346233478.067' 
    capture_lex $P613
    .const 'Sub' $P614 = 'cuid_59_1346233478.067' 
    capture_lex $P614
    .const 'Sub' $P615 = 'cuid_60_1346233478.067' 
    capture_lex $P615
    .const 'Sub' $P616 = 'cuid_61_1346233478.067' 
    capture_lex $P616
    .const 'Sub' $P617 = 'cuid_62_1346233478.067' 
    capture_lex $P617
    .const 'Sub' $P618 = 'cuid_63_1346233478.067' 
    capture_lex $P618
    .const 'Sub' $P619 = 'cuid_65_1346233478.067' 
    capture_lex $P619
    .const 'Sub' $P620 = 'cuid_66_1346233478.067' 
    capture_lex $P620
    .const 'Sub' $P621 = 'cuid_67_1346233478.067' 
    capture_lex $P621
    .const 'Sub' $P622 = 'cuid_68_1346233478.067' 
    capture_lex $P622
    .const 'Sub' $P623 = 'cuid_69_1346233478.067' 
    capture_lex $P623
    .const 'Sub' $P624 = 'cuid_70_1346233478.067' 
    capture_lex $P624
    .const 'Sub' $P625 = 'cuid_71_1346233478.067' 
    capture_lex $P625
    .const 'Sub' $P626 = 'cuid_72_1346233478.067' 
    capture_lex $P626
    .const 'Sub' $P627 = 'cuid_73_1346233478.067' 
    capture_lex $P627
    .const 'Sub' $P628 = 'cuid_74_1346233478.067' 
    capture_lex $P628
    .const 'Sub' $P629 = 'cuid_75_1346233478.067' 
    capture_lex $P629
    .const 'Sub' $P630 = 'cuid_76_1346233478.067' 
    capture_lex $P630
    .const 'Sub' $P631 = 'cuid_77_1346233478.067' 
    capture_lex $P631
    .const 'Sub' $P632 = 'cuid_78_1346233478.067' 
    capture_lex $P632
    .const 'Sub' $P633 = 'cuid_79_1346233478.067' 
    capture_lex $P633
    .const 'Sub' $P634 = 'cuid_80_1346233478.067' 
    capture_lex $P634
    .const 'Sub' $P635 = 'cuid_81_1346233478.067' 
    capture_lex $P635
    .const 'Sub' $P636 = 'cuid_82_1346233478.067' 
    capture_lex $P636
    .const 'Sub' $P637 = 'cuid_83_1346233478.067' 
    capture_lex $P637
    .const 'Sub' $P638 = 'cuid_84_1346233478.067' 
    capture_lex $P638
    .const 'Sub' $P639 = 'cuid_85_1346233478.067' 
    capture_lex $P639
    .const 'Sub' $P640 = 'cuid_86_1346233478.067' 
    capture_lex $P640
    .const 'Sub' $P641 = 'cuid_87_1346233478.067' 
    capture_lex $P641
    .const 'Sub' $P642 = 'cuid_88_1346233478.067' 
    capture_lex $P642
    .const 'Sub' $P643 = 'cuid_91_1346233478.067' 
    capture_lex $P643
    .const 'Sub' $P644 = 'cuid_92_1346233478.067' 
    capture_lex $P644
    .const 'Sub' $P645 = 'cuid_93_1346233478.067' 
    capture_lex $P645
    .const 'Sub' $P646 = 'cuid_94_1346233478.067' 
    capture_lex $P646
    .const 'Sub' $P647 = 'cuid_95_1346233478.067' 
    capture_lex $P647
    .const 'Sub' $P648 = 'cuid_96_1346233478.067' 
    capture_lex $P648
    .const 'Sub' $P649 = 'cuid_97_1346233478.067' 
    capture_lex $P649
    .const 'Sub' $P650 = 'cuid_98_1346233478.067' 
    capture_lex $P650
    .const 'Sub' $P651 = 'cuid_99_1346233478.067' 
    capture_lex $P651
    .const 'Sub' $P652 = 'cuid_100_1346233478.067' 
    capture_lex $P652
    .const 'Sub' $P653 = 'cuid_101_1346233478.067' 
    capture_lex $P653
    .const 'Sub' $P654 = 'cuid_102_1346233478.067' 
    capture_lex $P654
    .const 'Sub' $P655 = 'cuid_103_1346233478.067' 
    capture_lex $P655
    .const 'Sub' $P656 = 'cuid_104_1346233478.067' 
    capture_lex $P656
    .const 'Sub' $P657 = 'cuid_105_1346233478.067' 
    capture_lex $P657
    .const 'Sub' $P658 = 'cuid_106_1346233478.067' 
    capture_lex $P658
    .const 'Sub' $P659 = 'cuid_107_1346233478.067' 
    capture_lex $P659
    .const 'Sub' $P660 = 'cuid_108_1346233478.067' 
    capture_lex $P660
    .const 'Sub' $P661 = 'cuid_109_1346233478.067' 
    capture_lex $P661
    .const 'Sub' $P662 = 'cuid_110_1346233478.067' 
    capture_lex $P662
    .const 'Sub' $P663 = 'cuid_111_1346233478.067' 
    capture_lex $P663
    .const 'Sub' $P664 = 'cuid_112_1346233478.067' 
    capture_lex $P664
    .const 'Sub' $P665 = 'cuid_113_1346233478.067' 
    capture_lex $P665
    .const 'Sub' $P666 = 'cuid_114_1346233478.067' 
    capture_lex $P666
    .const 'Sub' $P667 = 'cuid_115_1346233478.067' 
    capture_lex $P667
    .const 'Sub' $P668 = 'cuid_116_1346233478.067' 
    capture_lex $P668
    .const 'Sub' $P669 = 'cuid_117_1346233478.067' 
    capture_lex $P669
    .const 'Sub' $P670 = 'cuid_118_1346233478.067' 
    capture_lex $P670
    .const 'Sub' $P671 = 'cuid_119_1346233478.067' 
    capture_lex $P671
    .const 'Sub' $P672 = 'cuid_120_1346233478.067' 
    capture_lex $P672
    .const 'Sub' $P673 = 'cuid_121_1346233478.067' 
    capture_lex $P673
    .const 'Sub' $P674 = 'cuid_122_1346233478.067' 
    capture_lex $P674
    .const 'Sub' $P675 = 'cuid_123_1346233478.067' 
    capture_lex $P675
    .const 'Sub' $P676 = 'cuid_124_1346233478.067' 
    capture_lex $P676
    .const 'Sub' $P677 = 'cuid_125_1346233478.067' 
    capture_lex $P677
    .const 'Sub' $P678 = 'cuid_126_1346233478.067' 
    capture_lex $P678
    .const 'Sub' $P679 = 'cuid_128_1346233478.067' 
    capture_lex $P679
    .const 'Sub' $P680 = 'cuid_129_1346233478.067' 
    capture_lex $P680
    .const 'Sub' $P681 = 'cuid_130_1346233478.067' 
    capture_lex $P681
    .const 'Sub' $P682 = 'cuid_131_1346233478.067' 
    capture_lex $P682
    .const 'Sub' $P683 = 'cuid_132_1346233478.067' 
    capture_lex $P683
    .const 'Sub' $P684 = 'cuid_133_1346233478.067' 
    capture_lex $P684
    .const 'Sub' $P685 = 'cuid_134_1346233478.067' 
    capture_lex $P685
    .const 'Sub' $P686 = 'cuid_135_1346233478.067' 
    capture_lex $P686
    .const 'Sub' $P687 = 'cuid_136_1346233478.067' 
    capture_lex $P687
    .const 'Sub' $P688 = 'cuid_137_1346233478.067' 
    capture_lex $P688
    .const 'Sub' $P689 = 'cuid_138_1346233478.067' 
    capture_lex $P689
    .const 'Sub' $P690 = 'cuid_139_1346233478.067' 
    capture_lex $P690
    .const 'Sub' $P691 = 'cuid_140_1346233478.067' 
    capture_lex $P691
    .const 'Sub' $P692 = 'cuid_141_1346233478.067' 
    capture_lex $P692
    .const 'Sub' $P693 = 'cuid_142_1346233478.067' 
    capture_lex $P693
    .const 'Sub' $P694 = 'cuid_143_1346233478.067' 
    capture_lex $P694
    .const 'Sub' $P695 = 'cuid_144_1346233478.067' 
    capture_lex $P695
    .const 'Sub' $P696 = 'cuid_145_1346233478.067' 
    capture_lex $P696
    .const 'Sub' $P697 = 'cuid_146_1346233478.067' 
    capture_lex $P697
    .const 'Sub' $P698 = 'cuid_147_1346233478.067' 
    capture_lex $P698
    .const 'Sub' $P699 = 'cuid_148_1346233478.067' 
    capture_lex $P699
    .const 'Sub' $P700 = 'cuid_149_1346233478.067' 
    capture_lex $P700
    .const 'Sub' $P701 = 'cuid_150_1346233478.067' 
    capture_lex $P701
    .const 'Sub' $P702 = 'cuid_151_1346233478.067' 
    capture_lex $P702
    .const 'Sub' $P703 = 'cuid_152_1346233478.067' 
    capture_lex $P703
    .const 'Sub' $P704 = 'cuid_153_1346233478.067' 
    capture_lex $P704
    .const 'Sub' $P705 = 'cuid_154_1346233478.067' 
    capture_lex $P705
    .const 'Sub' $P706 = 'cuid_155_1346233478.067' 
    capture_lex $P706
    .const 'Sub' $P707 = 'cuid_156_1346233478.067' 
    capture_lex $P707
    .const 'Sub' $P708 = 'cuid_157_1346233478.067' 
    capture_lex $P708
    .const 'Sub' $P709 = 'cuid_158_1346233478.067' 
    capture_lex $P709
    .const 'Sub' $P710 = 'cuid_159_1346233478.067' 
    capture_lex $P710
    .const 'Sub' $P711 = 'cuid_160_1346233478.067' 
    capture_lex $P711
    .const 'Sub' $P712 = 'cuid_161_1346233478.067' 
    capture_lex $P712
    .const 'Sub' $P713 = 'cuid_162_1346233478.067' 
    capture_lex $P713
    .const 'Sub' $P714 = 'cuid_163_1346233478.067' 
    capture_lex $P714
    .const 'Sub' $P715 = 'cuid_164_1346233478.067' 
    capture_lex $P715
    .const 'Sub' $P716 = 'cuid_165_1346233478.067' 
    capture_lex $P716
    .const 'Sub' $P717 = 'cuid_166_1346233478.067' 
    capture_lex $P717
    .const 'Sub' $P718 = 'cuid_167_1346233478.067' 
    capture_lex $P718
    .const 'Sub' $P719 = 'cuid_168_1346233478.067' 
    capture_lex $P719
    .const 'Sub' $P720 = 'cuid_169_1346233478.067' 
    capture_lex $P720
    .const 'Sub' $P721 = 'cuid_170_1346233478.067' 
    capture_lex $P721
    .const 'Sub' $P722 = 'cuid_171_1346233478.067' 
    capture_lex $P722
    .const 'Sub' $P723 = 'cuid_172_1346233478.067' 
    capture_lex $P723
    .const 'Sub' $P724 = 'cuid_173_1346233478.067' 
    capture_lex $P724
    .const 'Sub' $P725 = 'cuid_174_1346233478.067' 
    capture_lex $P725
    .const 'Sub' $P726 = 'cuid_175_1346233478.067' 
    capture_lex $P726
    .const 'Sub' $P727 = 'cuid_176_1346233478.067' 
    capture_lex $P727
    .const 'Sub' $P728 = 'cuid_177_1346233478.067' 
    capture_lex $P728
    .const 'Sub' $P729 = 'cuid_178_1346233478.067' 
    capture_lex $P729
    .const 'Sub' $P730 = 'cuid_179_1346233478.067' 
    capture_lex $P730
    .const 'Sub' $P731 = 'cuid_180_1346233478.067' 
    capture_lex $P731
    .const 'Sub' $P732 = 'cuid_181_1346233478.067' 
    capture_lex $P732
    .const 'Sub' $P733 = 'cuid_182_1346233478.067' 
    capture_lex $P733
    .const 'Sub' $P734 = 'cuid_183_1346233478.067' 
    capture_lex $P734
    .const 'Sub' $P735 = 'cuid_184_1346233478.067' 
    capture_lex $P735
    .const 'Sub' $P736 = 'cuid_185_1346233478.067' 
    capture_lex $P736
    .const 'Sub' $P737 = 'cuid_186_1346233478.067' 
    capture_lex $P737
    .const 'Sub' $P738 = 'cuid_187_1346233478.067' 
    capture_lex $P738
    .const 'Sub' $P739 = 'cuid_188_1346233478.067' 
    capture_lex $P739
    .const 'Sub' $P740 = 'cuid_189_1346233478.067' 
    capture_lex $P740
    .const 'Sub' $P741 = 'cuid_190_1346233478.067' 
    capture_lex $P741
    .const 'Sub' $P742 = 'cuid_191_1346233478.067' 
    capture_lex $P742
    .const 'Sub' $P743 = 'cuid_192_1346233478.067' 
    capture_lex $P743
    .const 'Sub' $P744 = 'cuid_193_1346233478.067' 
    capture_lex $P744
    .const 'Sub' $P745 = 'cuid_194_1346233478.067' 
    capture_lex $P745
    .const 'Sub' $P746 = 'cuid_195_1346233478.067' 
    capture_lex $P746
    .const 'Sub' $P747 = 'cuid_196_1346233478.067' 
    capture_lex $P747
    .const 'Sub' $P748 = 'cuid_197_1346233478.067' 
    capture_lex $P748
    .const 'Sub' $P749 = 'cuid_198_1346233478.067' 
    capture_lex $P749
    .const 'Sub' $P750 = 'cuid_199_1346233478.067' 
    capture_lex $P750
    .const 'Sub' $P751 = 'cuid_200_1346233478.067' 
    capture_lex $P751
    .const 'Sub' $P752 = 'cuid_201_1346233478.067' 
    capture_lex $P752
    .const 'Sub' $P753 = 'cuid_202_1346233478.067' 
    capture_lex $P753
    .const 'Sub' $P754 = 'cuid_203_1346233478.067' 
    capture_lex $P754
    .const 'Sub' $P755 = 'cuid_204_1346233478.067' 
    capture_lex $P755
    .const 'Sub' $P756 = 'cuid_205_1346233478.067' 
    capture_lex $P756
    .const 'Sub' $P757 = 'cuid_206_1346233478.067' 
    capture_lex $P757
    .const 'Sub' $P758 = 'cuid_207_1346233478.067' 
    capture_lex $P758
    .const 'Sub' $P759 = 'cuid_208_1346233478.067' 
    capture_lex $P759
    .const 'Sub' $P760 = 'cuid_209_1346233478.067' 
    capture_lex $P760
    .const 'Sub' $P761 = 'cuid_210_1346233478.067' 
    capture_lex $P761
    .const 'Sub' $P762 = 'cuid_211_1346233478.067' 
    capture_lex $P762
    .const 'Sub' $P763 = 'cuid_212_1346233478.067' 
    capture_lex $P763
    .const 'Sub' $P764 = 'cuid_213_1346233478.067' 
    capture_lex $P764
    .const 'Sub' $P765 = 'cuid_214_1346233478.067' 
    capture_lex $P765
    .const 'Sub' $P766 = 'cuid_215_1346233478.067' 
    capture_lex $P766
    .const 'Sub' $P767 = 'cuid_216_1346233478.067' 
    capture_lex $P767
    .const 'Sub' $P768 = 'cuid_217_1346233478.067' 
    capture_lex $P768
    .const 'Sub' $P769 = 'cuid_218_1346233478.067' 
    capture_lex $P769
    .const 'Sub' $P770 = 'cuid_219_1346233478.067' 
    capture_lex $P770
    .const 'Sub' $P771 = 'cuid_220_1346233478.067' 
    capture_lex $P771
    .const 'Sub' $P772 = 'cuid_221_1346233478.067' 
    capture_lex $P772
    .const 'Sub' $P773 = 'cuid_222_1346233478.067' 
    capture_lex $P773
    .return ($P773) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_33_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 589
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "%*HANDLERS", $P111 
    .lex "self", _lex_param_0 
    new $P501, 'Hash'
    set $P101, $P501
    new $P502, 'Hash'
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P105, $P505
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P106, $P506
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P107, $P507
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P108, $P508
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P109, $P509
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P110, $P510
    new $P511, 'Hash'
    set $P111, $P511
    unless_null $P101, fallback294
    get_hll_global $P514, "GLOBAL"
    get_who $P513, $P514
    set $P512, $P513["%LANG"]
    unless_null $P512, fallback295
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    new $P517, 'Hash'
    set $P515["%LANG"], $P517
    set $P512, $P517
  fallback295:
    unless_null $P512, vivi_59296
    die "Contextual %*LANG not found"
    box $P518, "Contextual %*LANG not found"
    set $P512, $P518
  vivi_59296:
    set $P101, $P512
  fallback294:
    unless_null $P101, fallback297
    get_hll_global $P521, "GLOBAL"
    get_who $P520, $P521
    set $P519, $P520["%LANG"]
    unless_null $P519, fallback298
    get_hll_global $P523, "GLOBAL"
    get_who $P522, $P523
    new $P524, 'Hash'
    set $P522["%LANG"], $P524
    set $P519, $P524
  fallback298:
    unless_null $P519, vivi_60299
    die "Contextual %*LANG not found"
    box $P525, "Contextual %*LANG not found"
    set $P519, $P525
  vivi_60299:
    set $P101, $P519
  fallback297:
    get_hll_global $P529, "GLOBAL"
    nqp_get_package_through_who $P528, $P529, "NQP"
    get_who $P527, $P528
    set $P526, $P527["Regex"]
    unless_null $P526, fallback300
    nqp_get_sc_object $P530, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P530
  fallback300:
    set $P101["Regex"], $P526
    unless_null $P101, fallback301
    get_hll_global $P533, "GLOBAL"
    get_who $P532, $P533
    set $P531, $P532["%LANG"]
    unless_null $P531, fallback302
    get_hll_global $P535, "GLOBAL"
    get_who $P534, $P535
    new $P536, 'Hash'
    set $P534["%LANG"], $P536
    set $P531, $P536
  fallback302:
    unless_null $P531, vivi_61303
    die "Contextual %*LANG not found"
    box $P537, "Contextual %*LANG not found"
    set $P531, $P537
  vivi_61303:
    set $P101, $P531
  fallback301:
    get_hll_global $P541, "GLOBAL"
    nqp_get_package_through_who $P540, $P541, "NQP"
    get_who $P539, $P540
    set $P538, $P539["RegexActions"]
    unless_null $P538, fallback304
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P538, $P542
  fallback304:
    set $P101["Regex-actions"], $P538
    unless_null $P101, fallback305
    get_hll_global $P545, "GLOBAL"
    get_who $P544, $P545
    set $P543, $P544["%LANG"]
    unless_null $P543, fallback306
    get_hll_global $P547, "GLOBAL"
    get_who $P546, $P547
    new $P548, 'Hash'
    set $P546["%LANG"], $P548
    set $P543, $P548
  fallback306:
    unless_null $P543, vivi_62307
    die "Contextual %*LANG not found"
    box $P549, "Contextual %*LANG not found"
    set $P543, $P549
  vivi_62307:
    set $P101, $P543
  fallback305:
    get_hll_global $P553, "GLOBAL"
    nqp_get_package_through_who $P552, $P553, "NQP"
    get_who $P551, $P552
    set $P550, $P551["Grammar"]
    unless_null $P550, fallback308
    nqp_get_sc_object $P554, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P550, $P554
  fallback308:
    set $P101["MAIN"], $P550
    unless_null $P101, fallback309
    get_hll_global $P557, "GLOBAL"
    get_who $P556, $P557
    set $P555, $P556["%LANG"]
    unless_null $P555, fallback310
    get_hll_global $P559, "GLOBAL"
    get_who $P558, $P559
    new $P560, 'Hash'
    set $P558["%LANG"], $P560
    set $P555, $P560
  fallback310:
    unless_null $P555, vivi_63311
    die "Contextual %*LANG not found"
    box $P561, "Contextual %*LANG not found"
    set $P555, $P561
  vivi_63311:
    set $P101, $P555
  fallback309:
    get_hll_global $P565, "GLOBAL"
    nqp_get_package_through_who $P564, $P565, "NQP"
    get_who $P563, $P564
    set $P562, $P563["Actions"]
    unless_null $P562, fallback312
    nqp_get_sc_object $P566, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P562, $P566
  fallback312:
    set $P101["MAIN-actions"], $P562
    unless_null $P102, fallback313
    get_hll_global $P569, "GLOBAL"
    get_who $P568, $P569
    set $P567, $P568["%HOW"]
    unless_null $P567, fallback314
    get_hll_global $P571, "GLOBAL"
    get_who $P570, $P571
    new $P572, 'Hash'
    set $P570["%HOW"], $P572
    set $P567, $P572
  fallback314:
    unless_null $P567, vivi_64315
    die "Contextual %*HOW not found"
    box $P573, "Contextual %*HOW not found"
    set $P567, $P573
  vivi_64315:
    set $P102, $P567
  fallback313:
    unless_null $P102, fallback316
    get_hll_global $P576, "GLOBAL"
    get_who $P575, $P576
    set $P574, $P575["%HOW"]
    unless_null $P574, fallback317
    get_hll_global $P578, "GLOBAL"
    get_who $P577, $P578
    new $P579, 'Hash'
    set $P577["%HOW"], $P579
    set $P574, $P579
  fallback317:
    unless_null $P574, vivi_65318
    die "Contextual %*HOW not found"
    box $P580, "Contextual %*HOW not found"
    set $P574, $P580
  vivi_65318:
    set $P102, $P574
  fallback316:
    get_knowhow $P581
    set $P102["knowhow"], $P581
    unless_null $P102, fallback319
    get_hll_global $P584, "GLOBAL"
    get_who $P583, $P584
    set $P582, $P583["%HOW"]
    unless_null $P582, fallback320
    get_hll_global $P586, "GLOBAL"
    get_who $P585, $P586
    new $P587, 'Hash'
    set $P585["%HOW"], $P587
    set $P582, $P587
  fallback320:
    unless_null $P582, vivi_66321
    die "Contextual %*HOW not found"
    box $P588, "Contextual %*HOW not found"
    set $P582, $P588
  vivi_66321:
    set $P102, $P582
  fallback319:
    get_knowhow_attribute $P589
    set $P102["knowhow-attr"], $P589
    find_caller_lex $P590, "$?FILES"
    set $P103, $P590
    nqp_decontainerize $P591, _lex_param_0
    find_lex $P594, "$?PACKAGE"
    get_who $P593, $P594
    set $P592, $P593["NQPCursor"]
    unless_null $P592, fallback322
    get_hll_global $P597, "GLOBAL"
    get_who $P596, $P597
    set $P595, $P596["NQPCursor"]
    unless_null $P595, vivi_67323
    nqp_get_sc_object $P598, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P595, $P598
  vivi_67323:
    set $P592, $P595
  fallback322:
    repr_get_attr_str $S504, $P591, $P592, "$!target"
    nqp_sha1 $S503, $S504
    concat $S502, $S503, "-"
    time $N501
    set $S505, $N501
    concat $S501, $S502, $S505
    box $P599, $S501
    set $P104, $P599
    isnull $I501, $P103
    unless $I501 goto if68_else324 
.annotate 'line', 611
    get_hll_global $P603, "GLOBAL"
    nqp_get_package_through_who $P602, $P603, "NQP"
    get_who $P601, $P602
    set $P600, $P601["World"]
    unless_null $P600, fallback326
    nqp_get_sc_object $P604, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P600, $P604
  fallback326:
    $P605 = $P600."new"($P104 :named("handle"))
    set $P612, $P605
    goto if68_end325
  if68_else324:
.annotate 'line', 612
    get_hll_global $P609, "GLOBAL"
    nqp_get_package_through_who $P608, $P609, "NQP"
    get_who $P607, $P608
    set $P606, $P607["World"]
    unless_null $P606, fallback327
    nqp_get_sc_object $P610, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P606, $P610
  fallback327:
    $P611 = $P606."new"($P104 :named("handle"), $P103 :named("description"))
    set $P612, $P611
  if68_end325:
    set $P105, $P612
    box $P613, ""
    set $P106, $P613
    box $P614, ""
    set $P107, $P614
    box $P615, ""
    set $P108, $P615
    box $P616, 0
    set $P109, $P616
    box $P617, 0
    set $P110, $P617
    unless_null $P111, fallback328
    get_hll_global $P620, "GLOBAL"
    get_who $P619, $P620
    set $P618, $P619["%HANDLERS"]
    unless_null $P618, fallback329
    get_hll_global $P622, "GLOBAL"
    get_who $P621, $P622
    new $P623, 'Hash'
    set $P621["%HANDLERS"], $P623
    set $P618, $P623
  fallback329:
    unless_null $P618, vivi_69330
    die "Contextual %*HANDLERS not found"
    box $P624, "Contextual %*HANDLERS not found"
    set $P618, $P624
  vivi_69330:
    set $P111, $P618
  fallback328:
.annotate 'line', 620
    nqp_decontainerize $P625, _lex_param_0
    $P626 = $P625."comp_unit"()
    .return ($P626) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_34_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 625
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx70_tgt
    .local int rx70_pos
    .local int rx70_off
    .local int rx70_eos
    .local int rx70_rep
    .local pmc rx70_cur
    .local pmc rx70_curclass
    .local pmc rx70_bstack
    .local pmc rx70_cstack
    (rx70_cur, rx70_tgt, rx70_pos, rx70_curclass, rx70_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx70_cur
    length rx70_eos, rx70_tgt
    eq $I19, 1, rx70_restart333
    gt rx70_pos, rx70_eos, rx70_fail334
    repr_get_attr_int $I11, self, rx70_curclass, "$!from"
    ne $I11, -1, rxscan71_done340
    goto rxscan71_scan339
  rxscan71_loop338:
    inc rx70_pos
    gt rx70_pos, rx70_eos, rx70_fail334
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!from", rx70_pos
  rxscan71_scan339:
    nqp_rxmark rx70_bstack, rxscan71_loop338, rx70_pos, 0
  rxscan71_done340:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail334
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxmark rx70_bstack, rxquantr73_done343, rx70_pos, 0
  rxquantr73_loop342:
  alt74_0345:
    nqp_rxmark rx70_bstack, alt74_1346, rx70_pos, 0
    add $I11, rx70_pos, 1
    gt $I11, rx70_eos, rx70_fail334
    substr $S10, rx70_tgt, rx70_pos, 1
    ne $S10, ucs4:"-", rx70_fail334
    add rx70_pos, 1
    goto alt74_end344
  alt74_1346:
    ge rx70_pos, rx70_eos, rx70_fail334
    substr $S11, rx70_tgt, rx70_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx70_fail334
    inc rx70_pos
  alt74_end344:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail334
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxpeek $I19, rx70_bstack, rxquantr73_done343
    inc $I19
    inc $I19
    set rx70_rep, rx70_bstack[$I19]
    nqp_rxcommit rx70_bstack, rxquantr73_done343
    inc rx70_rep
    nqp_rxmark rx70_bstack, rxquantr73_done343, rx70_pos, rx70_rep
    goto rxquantr73_loop342
  rxquantr73_done343:
    rx70_cur."!cursor_pass"(rx70_pos, "identifier", 'backtrack'=>1)
    .return (rx70_cur)
  rx70_restart333:
    repr_get_attr_obj rx70_cstack, rx70_cur, rx70_curclass, "$!cstack"
  rx70_fail334:
    unless rx70_bstack, rx70_done332
    pop $I19, rx70_bstack
    if_null rx70_cstack, rx70_cstack_done337
    unless rx70_cstack, rx70_cstack_done337
    dec $I19
    set $P11, rx70_cstack[$I19]
  rx70_cstack_done337:
    pop rx70_rep, rx70_bstack
    pop rx70_pos, rx70_bstack
    pop $I19, rx70_bstack
    lt rx70_pos, -1, rx70_done332
    lt rx70_pos, 0, rx70_fail334
    eq $I19, 0, rx70_fail334
    nqp_islist $I20, rx70_cstack
    unless $I20, rx70_jump335
    elements $I18, rx70_bstack
    le $I18, 0, rx70_cut336
    dec $I18
    set $I18, rx70_bstack[$I18]
  rx70_cut336:
    assign rx70_cstack, $I18
  rx70_jump335:
    jump $I19
  rx70_done332:
    rx70_cur."!cursor_fail"()
    .return (rx70_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1346233478.067_caps" :subid("cuid_memo_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1346233478.067_nfa" :subid("cuid_memo_2_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "ident"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    box $P511, 1
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 0
    push $P507, $P513
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_35_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 627
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    (rx76_cur, rx76_tgt, rx76_pos, rx76_curclass, rx76_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart350
    gt rx76_pos, rx76_eos, rx76_fail351
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done357
    goto rxscan77_scan356
  rxscan77_loop355:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail351
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan356:
    nqp_rxmark rx76_bstack, rxscan77_loop355, rx76_pos, 0
  rxscan77_done357:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail351
    nqp_rxmark rx76_bstack, rxsubrule78_pass358, -1, 0
  rxsubrule78_pass358:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxmark rx76_bstack, rxquantr79_done360, rx76_pos, 0
  rxquantr79_loop359:
    add $I11, rx76_pos, 2
    gt $I11, rx76_eos, rx76_fail351
    substr $S10, rx76_tgt, rx76_pos, 2
    ne $S10, ucs4:"::", rx76_fail351
    add rx76_pos, 2
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail351
    nqp_rxmark rx76_bstack, rxsubrule80_pass361, -1, 0
  rxsubrule80_pass361:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxpeek $I19, rx76_bstack, rxquantr79_done360
    inc $I19
    inc $I19
    set rx76_rep, rx76_bstack[$I19]
    nqp_rxcommit rx76_bstack, rxquantr79_done360
    inc rx76_rep
    nqp_rxmark rx76_bstack, rxquantr79_done360, rx76_pos, rx76_rep
    goto rxquantr79_loop359
  rxquantr79_done360:
    rx76_cur."!cursor_pass"(rx76_pos, "name", 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart350:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail351:
    unless rx76_bstack, rx76_done349
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done354
    unless rx76_cstack, rx76_cstack_done354
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done354:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done349
    lt rx76_pos, 0, rx76_fail351
    eq $I19, 0, rx76_fail351
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump352
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut353
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut353:
    assign rx76_cstack, $I18
  rx76_jump352:
    jump $I19
  rx76_done349:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1346233478.067_caps" :subid("cuid_memo_3_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 2
    set $P501["identifier"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1346233478.067_nfa" :subid("cuid_memo_4_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "identifier"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 58
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    box $P511, 1
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 0
    push $P507, $P513
    push $P501, $P507
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 58
    push $P514, $P516
    box $P517, 4
    push $P514, $P517
    push $P501, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 8
    push $P518, $P519
    box $P520, "identifier"
    push $P518, $P520
    box $P521, 2
    push $P518, $P521
    push $P501, $P518
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_36_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 629
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    (rx81_cur, rx81_tgt, rx81_pos, rx81_curclass, rx81_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart364
    gt rx81_pos, rx81_eos, rx81_fail365
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done371
    goto rxscan82_scan370
  rxscan82_loop369:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail365
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan370:
    nqp_rxmark rx81_bstack, rxscan82_loop369, rx81_pos, 0
  rxscan82_done371:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail365
    nqp_rxmark rx81_bstack, rxsubrule83_pass372, -1, 0
  rxsubrule83_pass372:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxmark rx81_bstack, rxquantr84_done374, rx81_pos, 0
  rxquantr84_loop373:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail365
    goto rxsubrule85_pass375
  rxsubrule85_back376:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail365
  rxsubrule85_pass375:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule85_back376
    push rx81_bstack, $I11
    push rx81_bstack, 0
    push rx81_bstack, rx81_pos
    elements $I11, rx81_cstack
    push rx81_bstack, $I11
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxpeek $I19, rx81_bstack, rxquantr84_done374
    inc $I19
    inc $I19
    set rx81_rep, rx81_bstack[$I19]
    nqp_rxcommit rx81_bstack, rxquantr84_done374
    inc rx81_rep
  rxquantr84_done374:
    rx81_cur."!cursor_pass"(rx81_pos, "deflongname", 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart364:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail365:
    unless rx81_bstack, rx81_done363
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done368
    unless rx81_cstack, rx81_cstack_done368
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done368:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done363
    lt rx81_pos, 0, rx81_fail365
    eq $I19, 0, rx81_fail365
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump366
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut367
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut367:
    assign rx81_cstack, $I18
  rx81_jump366:
    jump $I19
  rx81_done363:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1346233478.067_caps" :subid("cuid_memo_5_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["identifier"], $P502
    box $P503, 2
    set $P501["colonpair"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1346233478.067_nfa" :subid("cuid_memo_6_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "identifier"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "colonpair"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    box $P511, 1
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 0
    push $P507, $P513
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_37_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 633
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx86_tgt
    .local int rx86_pos
    .local int rx86_off
    .local int rx86_eos
    .local int rx86_rep
    .local pmc rx86_cur
    .local pmc rx86_curclass
    .local pmc rx86_bstack
    .local pmc rx86_cstack
    (rx86_cur, rx86_tgt, rx86_pos, rx86_curclass, rx86_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx86_cur
    length rx86_eos, rx86_tgt
    eq $I19, 1, rx86_restart379
    gt rx86_pos, rx86_eos, rx86_fail380
    repr_get_attr_int $I11, self, rx86_curclass, "$!from"
    ne $I11, -1, rxscan87_done386
    goto rxscan87_scan385
  rxscan87_loop384:
    inc rx86_pos
    gt rx86_pos, rx86_eos, rx86_fail380
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!from", rx86_pos
  rxscan87_scan385:
    nqp_rxmark rx86_bstack, rxscan87_loop384, rx86_pos, 0
  rxscan87_done386:
    nqp_rxmark rx86_bstack, rxquantr88_done388, rx86_pos, 0
  rxquantr88_loop387:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt89_0390
    nqp_push_label $P11, alt89_1395
    nqp_rxmark rx86_bstack, alt89_end389, -1, 0
    rx86_cur."!alt"(rx86_pos, "alt_nfa__1_1346233480.398", $P11)
    goto rx86_fail380
  alt89_0390:
    nqp_rxmark rx86_bstack, rxquantr90_done392, rx86_pos, 0
  rxquantr90_loop391:
    ge rx86_pos, rx86_eos, rx86_fail380
    substr $S11, rx86_tgt, rx86_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx86_fail380
    inc rx86_pos
    nqp_rxpeek $I19, rx86_bstack, rxquantr90_done392
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr90_done392
    inc rx86_rep
    nqp_rxmark rx86_bstack, rxquantr90_done392, rx86_pos, rx86_rep
    goto rxquantr90_loop391
  rxquantr90_done392:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor91_done393
    ne rx86_pos, rx86_eos, rx86_fail380
    eq rx86_pos, 0, rxanchor91_done393
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail380
  rxanchor91_done393:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    goto alt89_end389
  alt89_1395:
    nqp_rxmark rx86_bstack, rxquantr93_done397, rx86_pos, 0
  rxquantr93_loop396:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."unv"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    goto rxsubrule94_pass398
  rxsubrule94_back399:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
  rxsubrule94_pass398:
    rx86_cstack = rx86_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule94_back399
    push rx86_bstack, $I11
    push rx86_bstack, 0
    push rx86_bstack, rx86_pos
    elements $I11, rx86_cstack
    push rx86_bstack, $I11
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    nqp_rxpeek $I19, rx86_bstack, rxquantr93_done397
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr93_done397
    inc rx86_rep
  rxquantr93_done397:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor95_done400
    ne rx86_pos, rx86_eos, rx86_fail380
    eq rx86_pos, 0, rxanchor95_done400
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail380
  rxanchor95_done400:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    goto alt89_end389
  alt89_end389:
    nqp_rxpeek $I19, rx86_bstack, rxquantr88_done388
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr88_done388
    inc rx86_rep
  rxquantr88_done388:
    rx86_cur."!cursor_pass"(rx86_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx86_cur)
  rx86_restart379:
    repr_get_attr_obj rx86_cstack, rx86_cur, rx86_curclass, "$!cstack"
  rx86_fail380:
    unless rx86_bstack, rx86_done378
    pop $I19, rx86_bstack
    if_null rx86_cstack, rx86_cstack_done383
    unless rx86_cstack, rx86_cstack_done383
    dec $I19
    set $P11, rx86_cstack[$I19]
  rx86_cstack_done383:
    pop rx86_rep, rx86_bstack
    pop rx86_pos, rx86_bstack
    pop $I19, rx86_bstack
    lt rx86_pos, -1, rx86_done378
    lt rx86_pos, 0, rx86_fail380
    eq $I19, 0, rx86_fail380
    nqp_islist $I20, rx86_cstack
    unless $I20, rx86_jump381
    elements $I18, rx86_bstack
    le $I18, 0, rx86_cut382
    dec $I18
    set $I18, rx86_bstack[$I18]
  rx86_cut382:
    assign rx86_cstack, $I18
  rx86_jump381:
    jump $I19
  rx86_done378:
    rx86_cur."!cursor_fail"()
    .return (rx86_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346233478.067_caps" :subid("cuid_memo_7_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346233478.067_nfa" :subid("cuid_memo_8_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P503, $P505
    box $P506, 1
    push $P503, $P506
    box $P507, 1
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 2
    push $P503, $P509
    box $P510, 8
    push $P503, $P510
    box $P511, "unv"
    push $P503, $P511
    box $P512, 6
    push $P503, $P512
    box $P513, 1
    push $P503, $P513
    box $P514, 0
    push $P503, $P514
    box $P515, 6
    push $P503, $P515
    box $P516, 1
    push $P503, $P516
    box $P517, 0
    push $P503, $P517
    box $P518, 0
    push $P503, $P518
    push $P501, $P503
    new $P519, 'ResizablePMCArray'
    box $P520, 1
    push $P519, $P520
    box $P521, 0
    push $P519, $P521
    box $P522, 3
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 8
    push $P523, $P524
    box $P525, "ws"
    push $P523, $P525
    box $P526, 4
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "MARKER"
    push $P527, $P529
    box $P530, 5
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 0
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 0
    push $P531, $P534
    push $P501, $P531
    new $P535, 'ResizablePMCArray'
    box $P536, 1
    push $P535, $P536
    box $P537, 0
    push $P535, $P537
    box $P538, 7
    push $P535, $P538
    push $P501, $P535
    new $P539, 'ResizablePMCArray'
    box $P540, 8
    push $P539, $P540
    box $P541, "ws"
    push $P539, $P541
    box $P542, 8
    push $P539, $P542
    push $P501, $P539
    new $P543, 'ResizablePMCArray'
    box $P544, 8
    push $P543, $P544
    box $P545, "MARKER"
    push $P543, $P545
    box $P546, 9
    push $P543, $P546
    push $P501, $P543
    new $P547, 'ResizablePMCArray'
    box $P548, 0
    push $P547, $P548
    box $P549, 0
    push $P547, $P549
    box $P550, 0
    push $P547, $P550
    push $P501, $P547
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346233478.067_alt_nfa__1_1346233480.398" :subid("cuid_memo_9_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 6
    push $P504, $P505
    box $P506, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P504, $P506
    box $P507, 1
    push $P504, $P507
    box $P508, 1
    push $P504, $P508
    box $P509, 0
    push $P504, $P509
    box $P510, 2
    push $P504, $P510
    push $P502, $P504
    new $P511, 'ResizablePMCArray'
    box $P512, 1
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 3
    push $P511, $P514
    push $P502, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "ws"
    push $P515, $P517
    box $P518, 4
    push $P515, $P518
    push $P502, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 8
    push $P519, $P520
    box $P521, "MARKER"
    push $P519, $P521
    box $P522, 5
    push $P519, $P522
    push $P502, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 0
    push $P523, $P524
    box $P525, 0
    push $P523, $P525
    box $P526, 0
    push $P523, $P526
    push $P502, $P523
    push $P501, $P502
    new $P527, 'ResizablePMCArray'
    new $P528, 'ResizablePMCArray'
    push $P527, $P528
    new $P529, 'ResizablePMCArray'
    box $P530, 8
    push $P529, $P530
    box $P531, "unv"
    push $P529, $P531
    box $P532, 2
    push $P529, $P532
    box $P533, 1
    push $P529, $P533
    box $P534, 0
    push $P529, $P534
    box $P535, 2
    push $P529, $P535
    push $P527, $P529
    new $P536, 'ResizablePMCArray'
    box $P537, 1
    push $P536, $P537
    box $P538, 0
    push $P536, $P538
    box $P539, 3
    push $P536, $P539
    push $P527, $P536
    new $P540, 'ResizablePMCArray'
    box $P541, 8
    push $P540, $P541
    box $P542, "ws"
    push $P540, $P542
    box $P543, 4
    push $P540, $P543
    push $P527, $P540
    new $P544, 'ResizablePMCArray'
    box $P545, 8
    push $P544, $P545
    box $P546, "MARKER"
    push $P544, $P546
    box $P547, 5
    push $P544, $P547
    push $P527, $P544
    new $P548, 'ResizablePMCArray'
    box $P549, 0
    push $P548, $P549
    box $P550, 0
    push $P548, $P550
    box $P551, 0
    push $P548, $P551
    push $P527, $P548
    push $P501, $P527
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_38_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 640
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart404
    gt rx97_pos, rx97_eos, rx97_fail405
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done411
    goto rxscan98_scan410
  rxscan98_loop409:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail405
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan410:
    nqp_rxmark rx97_bstack, rxscan98_loop409, rx97_pos, 0
  rxscan98_done411:
  alt99_0413:
    nqp_rxmark rx97_bstack, alt99_1414, rx97_pos, 0
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail405
    goto alt99_end412
  alt99_1414:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."ww"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    ge $I11, 0, rx97_fail405
    nqp_rxmark rx97_bstack, rxquantr100_done416, rx97_pos, 0
  rxquantr100_loop415:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt101_0418
    nqp_push_label $P11, alt101_1421
    nqp_push_label $P11, alt101_2424
    nqp_push_label $P11, alt101_3427
    nqp_rxmark rx97_bstack, alt101_end417, -1, 0
    rx97_cur."!alt"(rx97_pos, "alt_nfa__2_1346233480.432", $P11)
    goto rx97_fail405
  alt101_0418:
    nqp_rxmark rx97_bstack, rxquantr102_done420, -1, 0
  rxquantr102_loop419:
    ge rx97_pos, rx97_eos, rx97_fail405
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx97_fail405
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr102_done420
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr102_done420
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr102_done420, rx97_pos, rx97_rep
    goto rxquantr102_loop419
  rxquantr102_done420:
    goto alt101_end417
  alt101_1421:
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail405
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:"#", rx97_fail405
    add rx97_pos, 1
    nqp_rxmark rx97_bstack, rxquantr103_done423, rx97_pos, 0
  rxquantr103_loop422:
    ge rx97_pos, rx97_eos, rx97_fail405
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, rx97_pos
    if $I11, rx97_fail405
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr103_done423
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr103_done423
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr103_done423, rx97_pos, rx97_rep
    goto rxquantr103_loop422
  rxquantr103_done423:
    goto alt101_end417
  alt101_2424:
    eq rx97_pos, 0, rxanchor104_done425
    ge rx97_pos, rx97_eos, rx97_fail405
    sub $I11, rx97_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, $I11
    unless $I11, rx97_fail405
  rxanchor104_done425:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail405
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    goto alt101_end417
  alt101_3427:
    nqp_rxmark rx97_bstack, rxquantr106_done429, -1, 0
  rxquantr106_loop428:
    ge rx97_pos, rx97_eos, rx97_fail405
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx97_fail405
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr106_done429
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr106_done429
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr106_done429, rx97_pos, rx97_rep
    goto rxquantr106_loop428
  rxquantr106_done429:
    goto alt101_end417
  alt101_end417:
    nqp_rxpeek $I19, rx97_bstack, rxquantr100_done416
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr100_done416
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr100_done416, rx97_pos, rx97_rep
    goto rxquantr100_loop415
  rxquantr100_done416:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail405
  alt99_end412:
    rx97_cur."!cursor_pass"(rx97_pos, "ws", 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart404:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail405:
    unless rx97_bstack, rx97_done403
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done408
    unless rx97_cstack, rx97_cstack_done408
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done408:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done403
    lt rx97_pos, 0, rx97_fail405
    eq $I19, 0, rx97_fail405
    nqp_islist $I20, rx97_cstack
    unless $I20, rx97_jump406
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut407
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut407:
    assign rx97_cstack, $I18
  rx97_jump406:
    jump $I19
  rx97_done403:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1346233478.067_caps" :subid("cuid_memo_10_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1346233478.067_alt_nfa__2_1346233480.432" :subid("cuid_memo_11_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 1
    push $P504, $P505
    box $P506, 0
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 6
    push $P508, $P509
    box $P510, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 1
    push $P512, $P513
    box $P514, 0
    push $P512, $P514
    box $P515, 2
    push $P512, $P515
    box $P516, 1
    push $P512, $P516
    box $P517, 0
    push $P512, $P517
    box $P518, 0
    push $P512, $P518
    push $P502, $P512
    push $P501, $P502
    new $P519, 'ResizablePMCArray'
    new $P520, 'ResizablePMCArray'
    push $P519, $P520
    new $P521, 'ResizablePMCArray'
    box $P522, 2
    push $P521, $P522
    box $P523, 35
    push $P521, $P523
    box $P524, 2
    push $P521, $P524
    push $P519, $P521
    new $P525, 'ResizablePMCArray'
    box $P526, 5
    push $P525, $P526
    box $P527, 4096
    push $P525, $P527
    box $P528, 2
    push $P525, $P528
    box $P529, 1
    push $P525, $P529
    box $P530, 0
    push $P525, $P530
    box $P531, 0
    push $P525, $P531
    push $P519, $P525
    push $P501, $P519
    new $P532, 'ResizablePMCArray'
    new $P533, 'ResizablePMCArray'
    push $P532, $P533
    new $P534, 'ResizablePMCArray'
    box $P535, 1
    push $P534, $P535
    box $P536, 0
    push $P534, $P536
    box $P537, 2
    push $P534, $P537
    push $P532, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 8
    push $P538, $P539
    box $P540, "pod_comment"
    push $P538, $P540
    box $P541, 0
    push $P538, $P541
    push $P532, $P538
    push $P501, $P532
    new $P542, 'ResizablePMCArray'
    new $P543, 'ResizablePMCArray'
    push $P542, $P543
    new $P544, 'ResizablePMCArray'
    box $P545, 1
    push $P544, $P545
    box $P546, 0
    push $P544, $P546
    box $P547, 2
    push $P544, $P547
    push $P542, $P544
    new $P548, 'ResizablePMCArray'
    box $P549, 6
    push $P548, $P549
    box $P550, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P548, $P550
    box $P551, 3
    push $P548, $P551
    push $P542, $P548
    new $P552, 'ResizablePMCArray'
    box $P553, 1
    push $P552, $P553
    box $P554, 0
    push $P552, $P554
    box $P555, 2
    push $P552, $P555
    box $P556, 1
    push $P552, $P556
    box $P557, 0
    push $P552, $P557
    box $P558, 0
    push $P552, $P558
    push $P542, $P552
    push $P501, $P542
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_40_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 651
    .param pmc _lex_param_0 
    .const 'Sub' $P502 = 'cuid_39_1346233478.067' 
    capture_lex $P502 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx107_tgt
    .local int rx107_pos
    .local int rx107_off
    .local int rx107_eos
    .local int rx107_rep
    .local pmc rx107_cur
    .local pmc rx107_curclass
    .local pmc rx107_bstack
    .local pmc rx107_cstack
    (rx107_cur, rx107_tgt, rx107_pos, rx107_curclass, rx107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx107_cur
    length rx107_eos, rx107_tgt
    eq $I19, 1, rx107_restart432
    gt rx107_pos, rx107_eos, rx107_fail433
    repr_get_attr_int $I11, self, rx107_curclass, "$!from"
    ne $I11, -1, rxscan108_done439
    goto rxscan108_scan438
  rxscan108_loop437:
    inc rx107_pos
    gt rx107_pos, rx107_eos, rx107_fail433
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!from", rx107_pos
  rxscan108_scan438:
    nqp_rxmark rx107_bstack, rxscan108_loop437, rx107_pos, 0
  rxscan108_done439:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt109_0441
    nqp_push_label $P11, alt109_1459
    nqp_push_label $P11, alt109_2464
    nqp_rxmark rx107_bstack, alt109_end440, -1, 0
    rx107_cur."!alt"(rx107_pos, "alt_nfa__4_1346233480.472", $P11)
    goto rx107_fail433
  alt109_0441:
    eq rx107_pos, 0, rxanchor110_done442
    ge rx107_pos, rx107_eos, rx107_fail433
    sub $I11, rx107_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, $I11
    unless $I11, rx107_fail433
  rxanchor110_done442:
    .const 'Sub' $P501 = 'cuid_39_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail433
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail433
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    goto alt109_end440
  alt109_1459:
    nqp_rxmark rx107_bstack, rxquantr116_done461, rx107_pos, 0
  rxquantr116_loop460:
    ge rx107_pos, rx107_eos, rx107_fail433
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail433
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr116_done461
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr116_done461
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr116_done461, rx107_pos, rx107_rep
    goto rxquantr116_loop460
  rxquantr116_done461:
    add $I11, rx107_pos, 1
    gt $I11, rx107_eos, rx107_fail433
    substr $S10, rx107_tgt, rx107_pos, 1
    ne $S10, ucs4:"#", rx107_fail433
    add rx107_pos, 1
    nqp_rxmark rx107_bstack, rxquantr117_done463, rx107_pos, 0
  rxquantr117_loop462:
    ge rx107_pos, rx107_eos, rx107_fail433
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, rx107_pos
    if $I11, rx107_fail433
    add rx107_pos, 1
    nqp_rxpeek $I19, rx107_bstack, rxquantr117_done463
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr117_done463
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr117_done463, rx107_pos, rx107_rep
    goto rxquantr117_loop462
  rxquantr117_done463:
    goto alt109_end440
  alt109_2464:
    nqp_rxmark rx107_bstack, rxquantr118_done466, -1, 0
  rxquantr118_loop465:
    ge rx107_pos, rx107_eos, rx107_fail433
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail433
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr118_done466
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr118_done466
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr118_done466, rx107_pos, rx107_rep
    goto rxquantr118_loop465
  rxquantr118_done466:
    goto alt109_end440
  alt109_end440:
    nqp_rxcommit rx107_bstack, alt109_end440
    rx107_cur."!cursor_pass"(rx107_pos, "unv", 'backtrack'=>1)
    .return (rx107_cur)
  rx107_restart432:
    repr_get_attr_obj rx107_cstack, rx107_cur, rx107_curclass, "$!cstack"
  rx107_fail433:
    unless rx107_bstack, rx107_done431
    pop $I19, rx107_bstack
    if_null rx107_cstack, rx107_cstack_done436
    unless rx107_cstack, rx107_cstack_done436
    dec $I19
    set $P11, rx107_cstack[$I19]
  rx107_cstack_done436:
    pop rx107_rep, rx107_bstack
    pop rx107_pos, rx107_bstack
    pop $I19, rx107_bstack
    lt rx107_pos, -1, rx107_done431
    lt rx107_pos, 0, rx107_fail433
    eq $I19, 0, rx107_fail433
    nqp_islist $I20, rx107_cstack
    unless $I20, rx107_jump434
    elements $I18, rx107_bstack
    le $I18, 0, rx107_cut435
    dec $I18
    set $I18, rx107_bstack[$I18]
  rx107_cut435:
    assign rx107_cstack, $I18
  rx107_jump434:
    jump $I19
  rx107_done431:
    rx107_cur."!cursor_fail"()
    .return (rx107_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346233478.067_caps" :subid("cuid_memo_12_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346233478.067_nfa" :subid("cuid_memo_13_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 6
    push $P503, $P507
    box $P508, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P503, $P508
    box $P509, 1
    push $P503, $P509
    box $P510, 1
    push $P503, $P510
    box $P511, 0
    push $P503, $P511
    box $P512, 6
    push $P503, $P512
    box $P513, 1
    push $P503, $P513
    box $P514, 0
    push $P503, $P514
    box $P515, 8
    push $P503, $P515
    push $P501, $P503
    new $P516, 'ResizablePMCArray'
    box $P517, 6
    push $P516, $P517
    box $P518, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P516, $P518
    box $P519, 2
    push $P516, $P519
    box $P520, 1
    push $P516, $P520
    box $P521, 0
    push $P516, $P521
    box $P522, 4
    push $P516, $P522
    push $P501, $P516
    new $P523, 'ResizablePMCArray'
    box $P524, 0
    push $P523, $P524
    box $P525, 0
    push $P523, $P525
    box $P526, 0
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 61
    push $P527, $P529
    box $P530, 5
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 4
    push $P531, $P532
    box $P533, 8192
    push $P531, $P533
    box $P534, 3
    push $P531, $P534
    box $P535, 2
    push $P531, $P535
    box $P536, 92
    push $P531, $P536
    box $P537, 3
    push $P531, $P537
    push $P501, $P531
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 35
    push $P538, $P540
    box $P541, 7
    push $P538, $P541
    push $P501, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 5
    push $P542, $P543
    box $P544, 4096
    push $P542, $P544
    box $P545, 7
    push $P542, $P545
    box $P546, 1
    push $P542, $P546
    box $P547, 0
    push $P542, $P547
    box $P548, 0
    push $P542, $P548
    push $P501, $P542
    new $P549, 'ResizablePMCArray'
    box $P550, 6
    push $P549, $P550
    box $P551, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P549, $P551
    box $P552, 9
    push $P549, $P552
    push $P501, $P549
    new $P553, 'ResizablePMCArray'
    box $P554, 1
    push $P553, $P554
    box $P555, 0
    push $P553, $P555
    box $P556, 8
    push $P553, $P556
    box $P557, 1
    push $P553, $P557
    box $P558, 0
    push $P553, $P558
    box $P559, 0
    push $P553, $P559
    push $P501, $P553
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346233478.067_alt_nfa__4_1346233480.472" :subid("cuid_memo_14_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 1
    push $P504, $P505
    box $P506, 0
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 6
    push $P508, $P509
    box $P510, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P508, $P510
    box $P511, 2
    push $P508, $P511
    box $P512, 1
    push $P508, $P512
    box $P513, 0
    push $P508, $P513
    box $P514, 4
    push $P508, $P514
    push $P502, $P508
    new $P515, 'ResizablePMCArray'
    box $P516, 0
    push $P515, $P516
    box $P517, 0
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P502, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 61
    push $P519, $P521
    box $P522, 5
    push $P519, $P522
    push $P502, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 4
    push $P523, $P524
    box $P525, 8192
    push $P523, $P525
    box $P526, 3
    push $P523, $P526
    box $P527, 2
    push $P523, $P527
    box $P528, 92
    push $P523, $P528
    box $P529, 3
    push $P523, $P529
    push $P502, $P523
    push $P501, $P502
    new $P530, 'ResizablePMCArray'
    new $P531, 'ResizablePMCArray'
    push $P530, $P531
    new $P532, 'ResizablePMCArray'
    box $P533, 6
    push $P532, $P533
    box $P534, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P532, $P534
    box $P535, 1
    push $P532, $P535
    box $P536, 1
    push $P532, $P536
    box $P537, 0
    push $P532, $P537
    box $P538, 2
    push $P532, $P538
    push $P530, $P532
    new $P539, 'ResizablePMCArray'
    box $P540, 2
    push $P539, $P540
    box $P541, 35
    push $P539, $P541
    box $P542, 3
    push $P539, $P542
    push $P530, $P539
    new $P543, 'ResizablePMCArray'
    box $P544, 5
    push $P543, $P544
    box $P545, 4096
    push $P543, $P545
    box $P546, 3
    push $P543, $P546
    box $P547, 1
    push $P543, $P547
    box $P548, 0
    push $P543, $P548
    box $P549, 0
    push $P543, $P549
    push $P530, $P543
    push $P501, $P530
    new $P550, 'ResizablePMCArray'
    new $P551, 'ResizablePMCArray'
    push $P550, $P551
    new $P552, 'ResizablePMCArray'
    box $P553, 1
    push $P552, $P553
    box $P554, 0
    push $P552, $P554
    box $P555, 2
    push $P552, $P555
    push $P550, $P552
    new $P556, 'ResizablePMCArray'
    box $P557, 6
    push $P556, $P557
    box $P558, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P556, $P558
    box $P559, 3
    push $P556, $P559
    push $P550, $P556
    new $P560, 'ResizablePMCArray'
    box $P561, 1
    push $P560, $P561
    box $P562, 0
    push $P560, $P562
    box $P563, 2
    push $P560, $P563
    box $P564, 1
    push $P560, $P564
    box $P565, 0
    push $P560, $P565
    box $P566, 0
    push $P560, $P566
    push $P550, $P560
    push $P501, $P550
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1346233478.067") :anon :lex :outer("cuid_40_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx111_tgt
    .local int rx111_pos
    .local int rx111_off
    .local int rx111_eos
    .local int rx111_rep
    .local pmc rx111_cur
    .local pmc rx111_curclass
    .local pmc rx111_bstack
    .local pmc rx111_cstack
    (rx111_cur, rx111_tgt, rx111_pos, rx111_curclass, rx111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx111_cur
    length rx111_eos, rx111_tgt
    eq $I19, 1, rx111_restart445
    gt rx111_pos, rx111_eos, rx111_fail446
    repr_get_attr_int $I11, self, rx111_curclass, "$!from"
    ne $I11, -1, rxscan112_done452
    goto rxscan112_scan451
  rxscan112_loop450:
    inc rx111_pos
    gt rx111_pos, rx111_eos, rx111_fail446
    repr_bind_attr_int rx111_cur, rx111_curclass, "$!from", rx111_pos
  rxscan112_scan451:
    nqp_rxmark rx111_bstack, rxscan112_loop450, rx111_pos, 0
  rxscan112_done452:
    nqp_rxmark rx111_bstack, rxquantr113_done454, rx111_pos, 0
  rxquantr113_loop453:
    ge rx111_pos, rx111_eos, rx111_fail446
    substr $S11, rx111_tgt, rx111_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx111_fail446
    inc rx111_pos
    nqp_rxpeek $I19, rx111_bstack, rxquantr113_done454
    inc $I19
    inc $I19
    set rx111_rep, rx111_bstack[$I19]
    nqp_rxcommit rx111_bstack, rxquantr113_done454
    inc rx111_rep
    nqp_rxmark rx111_bstack, rxquantr113_done454, rx111_pos, rx111_rep
    goto rxquantr113_loop453
  rxquantr113_done454:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail446
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"=", rx111_fail446
    add rx111_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt114_0456
    nqp_push_label $P11, alt114_1457
    nqp_rxmark rx111_bstack, alt114_end455, -1, 0
    rx111_cur."!alt"(rx111_pos, "alt_nfa__3_1346233480.453", $P11)
    goto rx111_fail446
  alt114_0456:
    ge rx111_pos, rx111_eos, rx111_fail446
    is_cclass $I11, .CCLASS_WORD, rx111_tgt, rx111_pos
    unless $I11, rx111_fail446
    add rx111_pos, 1
    goto alt114_end455
  alt114_1457:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail446
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"\\", rx111_fail446
    add rx111_pos, 1
    goto alt114_end455
  alt114_end455:
    nqp_rxcommit rx111_bstack, alt114_end455
    rx111_cur."!cursor_pass"(rx111_pos, 'backtrack'=>1)
    .return (rx111_cur)
  rx111_restart445:
    repr_get_attr_obj rx111_cstack, rx111_cur, rx111_curclass, "$!cstack"
  rx111_fail446:
    unless rx111_bstack, rx111_done444
    pop $I19, rx111_bstack
    if_null rx111_cstack, rx111_cstack_done449
    unless rx111_cstack, rx111_cstack_done449
    dec $I19
    set $P11, rx111_cstack[$I19]
  rx111_cstack_done449:
    pop rx111_rep, rx111_bstack
    pop rx111_pos, rx111_bstack
    pop $I19, rx111_bstack
    lt rx111_pos, -1, rx111_done444
    lt rx111_pos, 0, rx111_fail446
    eq $I19, 0, rx111_fail446
    nqp_islist $I20, rx111_cstack
    unless $I20, rx111_jump447
    elements $I18, rx111_bstack
    le $I18, 0, rx111_cut448
    dec $I18
    set $I18, rx111_bstack[$I18]
  rx111_cut448:
    assign rx111_cstack, $I18
  rx111_jump447:
    jump $I19
  rx111_done444:
    rx111_cur."!cursor_fail"()
    .return (rx111_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346233478.067_caps" :subid("cuid_memo_15_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346233478.067_nfa" :subid("cuid_memo_16_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P503, $P505
    box $P506, 1
    push $P503, $P506
    box $P507, 1
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 2
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 61
    push $P510, $P512
    box $P513, 3
    push $P510, $P513
    push $P501, $P510
    new $P514, 'ResizablePMCArray'
    box $P515, 4
    push $P514, $P515
    box $P516, 8192
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    box $P518, 2
    push $P514, $P518
    box $P519, 92
    push $P514, $P519
    box $P520, 0
    push $P514, $P520
    push $P501, $P514
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346233478.067_alt_nfa__3_1346233480.453" :subid("cuid_memo_17_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 4
    push $P504, $P505
    box $P506, 8192
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 92
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_42_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 660
    .param pmc _lex_param_0 
    .const 'Sub' $P502 = 'cuid_41_1346233478.067' 
    capture_lex $P502 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_curclass
    .local pmc rx119_bstack
    .local pmc rx119_cstack
    (rx119_cur, rx119_tgt, rx119_pos, rx119_curclass, rx119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx119_cur
    length rx119_eos, rx119_tgt
    eq $I19, 1, rx119_restart469
    gt rx119_pos, rx119_eos, rx119_fail470
    repr_get_attr_int $I11, self, rx119_curclass, "$!from"
    ne $I11, -1, rxscan120_done476
    goto rxscan120_scan475
  rxscan120_loop474:
    inc rx119_pos
    gt rx119_pos, rx119_eos, rx119_fail470
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!from", rx119_pos
  rxscan120_scan475:
    nqp_rxmark rx119_bstack, rxscan120_loop474, rx119_pos, 0
  rxscan120_done476:
    eq rx119_pos, 0, rxanchor121_done477
    ge rx119_pos, rx119_eos, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail470
  rxanchor121_done477:
    nqp_rxmark rx119_bstack, rxquantr122_done479, rx119_pos, 0
  rxquantr122_loop478:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr122_done479
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr122_done479
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr122_done479, rx119_pos, rx119_rep
    goto rxquantr122_loop478
  rxquantr122_done479:
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"=", rx119_fail470
    add rx119_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt123_0481
    nqp_push_label $P11, alt123_1500
    nqp_push_label $P11, alt123_2519
    nqp_push_label $P11, alt123_3541
    nqp_push_label $P11, alt123_4566
    nqp_rxmark rx119_bstack, alt123_end480, -1, 0
    rx119_cur."!alt"(rx119_pos, "alt_nfa__6_1346233480.641", $P11)
    goto rx119_fail470
  alt123_0481:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail470
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr124_done483, -1, 0
  rxquantr124_loop482:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr124_done483
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr124_done483
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr124_done483, rx119_pos, rx119_rep
    goto rxquantr124_loop482
  rxquantr124_done483:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail470
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
  alt126_0486:
    nqp_rxmark rx119_bstack, alt126_1497, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf127_loop487, rx119_pos, rx119_rep
    goto rxquantf127_done488
  rxquantf127_loop487:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf127_loop487, rx119_pos, rx119_rep
  rxquantf127_done488:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr128_done491, rx119_pos, 0
  rxquantr128_loop490:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr128_done491
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr128_done491
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr128_done491, rx119_pos, rx119_rep
    goto rxquantr128_loop490
  rxquantr128_done491:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail470
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr129_done493, -1, 0
  rxquantr129_loop492:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr129_done493
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr129_done493
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr129_done493, rx119_pos, rx119_rep
    goto rxquantr129_loop492
  rxquantr129_done493:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail470
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
    nqp_rxmark rx119_bstack, rxquantr131_done496, rx119_pos, 0
  rxquantr131_loop495:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr131_done496
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr131_done496
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr131_done496, rx119_pos, rx119_rep
    goto rxquantr131_loop495
  rxquantr131_done496:
    goto alt126_end485
  alt126_1497:
    nqp_rxmark rx119_bstack, rxquantr132_done499, rx119_pos, 0
  rxquantr132_loop498:
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr132_done499
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr132_done499
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr132_done499, rx119_pos, rx119_rep
    goto rxquantr132_loop498
  rxquantr132_done499:
  alt126_end485:
    goto alt123_end480
  alt123_1500:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail470
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr133_done502, -1, 0
  rxquantr133_loop501:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr133_done502
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr133_done502
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr133_done502, rx119_pos, rx119_rep
    goto rxquantr133_loop501
  rxquantr133_done502:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    nqp_rxmark rx119_bstack, rxsubrule134_pass503, -1, 0
  rxsubrule134_pass503:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_0505:
    nqp_rxmark rx119_bstack, alt135_1517, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf136_loop506, rx119_pos, rx119_rep
    goto rxquantf136_done507
  rxquantf136_loop506:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf136_loop506, rx119_pos, rx119_rep
  rxquantf136_done507:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr137_done510, rx119_pos, 0
  rxquantr137_loop509:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr137_done510
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr137_done510
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr137_done510, rx119_pos, rx119_rep
    goto rxquantr137_loop509
  rxquantr137_done510:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail470
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr138_done512, -1, 0
  rxquantr138_loop511:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr138_done512
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr138_done512
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr138_done512, rx119_pos, rx119_rep
    goto rxquantr138_loop511
  rxquantr138_done512:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
    nqp_rxmark rx119_bstack, rxquantr141_done516, rx119_pos, 0
  rxquantr141_loop515:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr141_done516
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr141_done516
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr141_done516, rx119_pos, rx119_rep
    goto rxquantr141_loop515
  rxquantr141_done516:
    goto alt135_end504
  alt135_1517:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_end504:
    goto alt123_end480
  alt123_2519:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail470
    add rx119_pos, 5
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
    nqp_rxmark rx119_bstack, rxquantr144_done522, rx119_pos, 0
  rxquantr144_loop521:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr144_done522
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr144_done522
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr144_done522, rx119_pos, rx119_rep
    goto rxquantr144_loop521
  rxquantr144_done522:
  alt145_0524:
    nqp_rxmark rx119_bstack, alt145_1526, rx119_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rxanchor146_done525
    ne rx119_pos, rx119_eos, rx119_fail470
    eq rx119_pos, 0, rxanchor146_done525
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    if $I11, rx119_fail470
  rxanchor146_done525:
    goto alt145_end523
  alt145_1526:
    nqp_rxmark rx119_bstack, alt145_2527, rx119_pos, 0
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"#", rx119_fail470
    add rx119_pos, 1
    goto alt145_end523
  alt145_2527:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt145_end523:
  alt148_0530:
    nqp_rxmark rx119_bstack, alt148_1539, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf149_loop531, rx119_pos, rx119_rep
    goto rxquantf149_done532
  rxquantf149_loop531:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf149_loop531, rx119_pos, rx119_rep
  rxquantf149_done532:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr150_done535, rx119_pos, 0
  rxquantr150_loop534:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr150_done535
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr150_done535
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr150_done535, rx119_pos, rx119_rep
    goto rxquantr150_loop534
  rxquantr150_done535:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail470
    add rx119_pos, 4
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
    nqp_rxmark rx119_bstack, rxquantr152_done538, rx119_pos, 0
  rxquantr152_loop537:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr152_done538
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr152_done538
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr152_done538, rx119_pos, rx119_rep
    goto rxquantr152_loop537
  rxquantr152_done538:
    goto alt148_end529
  alt148_1539:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt148_end529:
    goto alt123_end480
  alt123_3541:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    nqp_rxmark rx119_bstack, rxsubrule154_pass542, -1, 0
  rxsubrule154_pass542:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf155_loop543, rx119_pos, rx119_rep
    goto rxquantf155_done544
  rxquantf155_loop543:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf155_loop543, rx119_pos, rx119_rep
  rxquantf155_done544:
    eq rx119_pos, 0, rxanchor156_done546
    ge rx119_pos, rx119_eos, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail470
  rxanchor156_done546:
    .const 'Sub' $P501 = 'cuid_41_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    goto alt123_end480
  alt123_4566:
  alt164_0568:
    nqp_rxmark rx119_bstack, alt164_1569, rx119_pos, 0
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_WHITESPACE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail470
    add rx119_pos, 1
    goto alt164_end567
  alt164_1569:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt164_end567:
    nqp_rxmark rx119_bstack, rxquantr166_done572, rx119_pos, 0
  rxquantr166_loop571:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr166_done572
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr166_done572
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr166_done572, rx119_pos, rx119_rep
    goto rxquantr166_loop571
  rxquantr166_done572:
    goto alt123_end480
  alt123_end480:
    nqp_rxcommit rx119_bstack, alt123_end480
    rx119_cur."!cursor_pass"(rx119_pos, "pod_comment", 'backtrack'=>1)
    .return (rx119_cur)
  rx119_restart469:
    repr_get_attr_obj rx119_cstack, rx119_cur, rx119_curclass, "$!cstack"
  rx119_fail470:
    unless rx119_bstack, rx119_done468
    pop $I19, rx119_bstack
    if_null rx119_cstack, rx119_cstack_done473
    unless rx119_cstack, rx119_cstack_done473
    dec $I19
    set $P11, rx119_cstack[$I19]
  rx119_cstack_done473:
    pop rx119_rep, rx119_bstack
    pop rx119_pos, rx119_bstack
    pop $I19, rx119_bstack
    lt rx119_pos, -1, rx119_done468
    lt rx119_pos, 0, rx119_fail470
    eq $I19, 0, rx119_fail470
    nqp_islist $I20, rx119_cstack
    unless $I20, rx119_jump471
    elements $I18, rx119_bstack
    le $I18, 0, rx119_cut472
    dec $I18
    set $I18, rx119_bstack[$I18]
  rx119_cut472:
    assign rx119_cstack, $I18
  rx119_jump471:
    jump $I19
  rx119_done468:
    rx119_cur."!cursor_fail"()
    .return (rx119_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346233478.067_caps" :subid("cuid_memo_18_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["identifier"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346233478.067_nfa" :subid("cuid_memo_19_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 6
    push $P507, $P508
    box $P509, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P507, $P509
    box $P510, 2
    push $P507, $P510
    box $P511, 1
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 3
    push $P507, $P513
    push $P501, $P507
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 61
    push $P514, $P516
    box $P517, 4
    push $P514, $P517
    push $P501, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 2
    push $P518, $P519
    box $P520, 98
    push $P518, $P520
    box $P521, 5
    push $P518, $P521
    box $P522, 2
    push $P518, $P522
    box $P523, 98
    push $P518, $P523
    box $P524, 17
    push $P518, $P524
    box $P525, 2
    push $P518, $P525
    box $P526, 98
    push $P518, $P526
    box $P527, 26
    push $P518, $P527
    box $P528, 8
    push $P518, $P528
    box $P529, "identifier"
    push $P518, $P529
    box $P530, 33
    push $P518, $P530
    box $P531, 0
    push $P518, $P531
    box $P532, 0
    push $P518, $P532
    box $P533, 0
    push $P518, $P533
    push $P501, $P518
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 101
    push $P534, $P536
    box $P537, 6
    push $P534, $P537
    push $P501, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 103
    push $P538, $P540
    box $P541, 7
    push $P538, $P541
    push $P501, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 105
    push $P542, $P544
    box $P545, 8
    push $P542, $P545
    push $P501, $P542
    new $P546, 'ResizablePMCArray'
    box $P547, 2
    push $P546, $P547
    box $P548, 110
    push $P546, $P548
    box $P549, 9
    push $P546, $P549
    push $P501, $P546
    new $P550, 'ResizablePMCArray'
    box $P551, 1
    push $P550, $P551
    box $P552, 0
    push $P550, $P552
    box $P553, 10
    push $P550, $P553
    push $P501, $P550
    new $P554, 'ResizablePMCArray'
    box $P555, 6
    push $P554, $P555
    box $P556, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P554, $P556
    box $P557, 11
    push $P554, $P557
    push $P501, $P554
    new $P558, 'ResizablePMCArray'
    box $P559, 1
    push $P558, $P559
    box $P560, 0
    push $P558, $P560
    box $P561, 10
    push $P558, $P561
    box $P562, 1
    push $P558, $P562
    box $P563, 0
    push $P558, $P563
    box $P564, 12
    push $P558, $P564
    box $P565, 2
    push $P558, $P565
    box $P566, 69
    push $P558, $P566
    box $P567, 13
    push $P558, $P567
    push $P501, $P558
    new $P568, 'ResizablePMCArray'
    push $P501, $P568
    new $P569, 'ResizablePMCArray'
    box $P570, 2
    push $P569, $P570
    box $P571, 78
    push $P569, $P571
    box $P572, 14
    push $P569, $P572
    push $P501, $P569
    new $P573, 'ResizablePMCArray'
    box $P574, 2
    push $P573, $P574
    box $P575, 68
    push $P573, $P575
    box $P576, 15
    push $P573, $P576
    push $P501, $P573
    new $P577, 'ResizablePMCArray'
    box $P578, 1
    push $P577, $P578
    box $P579, 0
    push $P577, $P579
    box $P580, 16
    push $P577, $P580
    push $P501, $P577
    new $P581, 'ResizablePMCArray'
    box $P582, 0
    push $P581, $P582
    box $P583, 0
    push $P581, $P583
    box $P584, 0
    push $P581, $P584
    push $P501, $P581
    new $P585, 'ResizablePMCArray'
    box $P586, 2
    push $P585, $P586
    box $P587, 101
    push $P585, $P587
    box $P588, 18
    push $P585, $P588
    push $P501, $P585
    new $P589, 'ResizablePMCArray'
    box $P590, 2
    push $P589, $P590
    box $P591, 103
    push $P589, $P591
    box $P592, 19
    push $P589, $P592
    push $P501, $P589
    new $P593, 'ResizablePMCArray'
    box $P594, 2
    push $P593, $P594
    box $P595, 105
    push $P593, $P595
    box $P596, 20
    push $P593, $P596
    push $P501, $P593
    new $P597, 'ResizablePMCArray'
    box $P598, 2
    push $P597, $P598
    box $P599, 110
    push $P597, $P599
    box $P600, 21
    push $P597, $P600
    push $P501, $P597
    new $P601, 'ResizablePMCArray'
    box $P602, 1
    push $P601, $P602
    box $P603, 0
    push $P601, $P603
    box $P604, 22
    push $P601, $P604
    push $P501, $P601
    new $P605, 'ResizablePMCArray'
    box $P606, 6
    push $P605, $P606
    box $P607, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P605, $P607
    box $P608, 23
    push $P605, $P608
    push $P501, $P605
    new $P609, 'ResizablePMCArray'
    box $P610, 1
    push $P609, $P610
    box $P611, 0
    push $P609, $P611
    box $P612, 22
    push $P609, $P612
    box $P613, 1
    push $P609, $P613
    box $P614, 0
    push $P609, $P614
    box $P615, 24
    push $P609, $P615
    box $P616, 8
    push $P609, $P616
    box $P617, "identifier"
    push $P609, $P617
    box $P618, 25
    push $P609, $P618
    push $P501, $P609
    new $P619, 'ResizablePMCArray'
    push $P501, $P619
    new $P620, 'ResizablePMCArray'
    box $P621, 0
    push $P620, $P621
    box $P622, 0
    push $P620, $P622
    box $P623, 0
    push $P620, $P623
    push $P501, $P620
    new $P624, 'ResizablePMCArray'
    box $P625, 2
    push $P624, $P625
    box $P626, 101
    push $P624, $P626
    box $P627, 27
    push $P624, $P627
    push $P501, $P624
    new $P628, 'ResizablePMCArray'
    box $P629, 2
    push $P628, $P629
    box $P630, 103
    push $P628, $P630
    box $P631, 28
    push $P628, $P631
    push $P501, $P628
    new $P632, 'ResizablePMCArray'
    box $P633, 2
    push $P632, $P633
    box $P634, 105
    push $P632, $P634
    box $P635, 29
    push $P632, $P635
    push $P501, $P632
    new $P636, 'ResizablePMCArray'
    box $P637, 2
    push $P636, $P637
    box $P638, 110
    push $P636, $P638
    box $P639, 30
    push $P636, $P639
    push $P501, $P636
    new $P640, 'ResizablePMCArray'
    box $P641, 1
    push $P640, $P641
    box $P642, 0
    push $P640, $P642
    box $P643, 31
    push $P640, $P643
    push $P501, $P640
    new $P644, 'ResizablePMCArray'
    box $P645, 6
    push $P644, $P645
    box $P646, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P644, $P646
    box $P647, 31
    push $P644, $P647
    box $P648, 1
    push $P644, $P648
    box $P649, 0
    push $P644, $P649
    box $P650, 32
    push $P644, $P650
    push $P501, $P644
    new $P651, 'ResizablePMCArray'
    box $P652, 0
    push $P651, $P652
    box $P653, 0
    push $P651, $P653
    box $P654, 0
    push $P651, $P654
    push $P501, $P651
    new $P655, 'ResizablePMCArray'
    box $P656, 4
    push $P655, $P656
    box $P657, 65535
    push $P655, $P657
    box $P658, 33
    push $P655, $P658
    box $P659, 1
    push $P655, $P659
    box $P660, 0
    push $P655, $P660
    box $P661, 34
    push $P655, $P661
    push $P501, $P655
    new $P662, 'ResizablePMCArray'
    box $P663, 1
    push $P662, $P663
    box $P664, 0
    push $P662, $P664
    box $P665, 35
    push $P662, $P665
    push $P501, $P662
    new $P666, 'ResizablePMCArray'
    box $P667, 6
    push $P666, $P667
    box $P668, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P666, $P668
    box $P669, 35
    push $P666, $P669
    box $P670, 1
    push $P666, $P670
    box $P671, 0
    push $P666, $P671
    box $P672, 37
    push $P666, $P672
    push $P501, $P666
    new $P673, 'ResizablePMCArray'
    box $P674, 0
    push $P673, $P674
    box $P675, 0
    push $P673, $P675
    box $P676, 0
    push $P673, $P676
    push $P501, $P673
    new $P677, 'ResizablePMCArray'
    box $P678, 2
    push $P677, $P678
    box $P679, 61
    push $P677, $P679
    box $P680, 38
    push $P677, $P680
    box $P681, 4
    push $P677, $P681
    box $P682, 4096
    push $P677, $P682
    box $P683, 36
    push $P677, $P683
    push $P501, $P677
    new $P684, 'ResizablePMCArray'
    box $P685, 2
    push $P684, $P685
    box $P686, 99
    push $P684, $P686
    box $P687, 39
    push $P684, $P687
    box $P688, 1
    push $P684, $P688
    box $P689, 0
    push $P684, $P689
    box $P690, 36
    push $P684, $P690
    push $P501, $P684
    new $P691, 'ResizablePMCArray'
    box $P692, 2
    push $P691, $P692
    box $P693, 117
    push $P691, $P693
    box $P694, 40
    push $P691, $P694
    push $P501, $P691
    new $P695, 'ResizablePMCArray'
    box $P696, 2
    push $P695, $P696
    box $P697, 116
    push $P695, $P697
    box $P698, 41
    push $P695, $P698
    push $P501, $P695
    new $P699, 'ResizablePMCArray'
    box $P700, 1
    push $P699, $P700
    box $P701, 0
    push $P699, $P701
    box $P702, 42
    push $P699, $P702
    push $P501, $P699
    new $P703, 'ResizablePMCArray'
    box $P704, 8
    push $P703, $P704
    box $P705, "panic"
    push $P703, $P705
    box $P706, 36
    push $P703, $P706
    push $P501, $P703
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346233478.067_alt_nfa__6_1346233480.641" :subid("cuid_memo_20_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 98
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 101
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 103
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 105
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 110
    push $P520, $P522
    box $P523, 6
    push $P520, $P523
    push $P502, $P520
    new $P524, 'ResizablePMCArray'
    box $P525, 1
    push $P524, $P525
    box $P526, 0
    push $P524, $P526
    box $P527, 7
    push $P524, $P527
    push $P502, $P524
    new $P528, 'ResizablePMCArray'
    box $P529, 6
    push $P528, $P529
    box $P530, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P528, $P530
    box $P531, 8
    push $P528, $P531
    push $P502, $P528
    new $P532, 'ResizablePMCArray'
    box $P533, 1
    push $P532, $P533
    box $P534, 0
    push $P532, $P534
    box $P535, 7
    push $P532, $P535
    box $P536, 1
    push $P532, $P536
    box $P537, 0
    push $P532, $P537
    box $P538, 9
    push $P532, $P538
    box $P539, 2
    push $P532, $P539
    box $P540, 69
    push $P532, $P540
    box $P541, 10
    push $P532, $P541
    push $P502, $P532
    new $P542, 'ResizablePMCArray'
    push $P502, $P542
    new $P543, 'ResizablePMCArray'
    box $P544, 2
    push $P543, $P544
    box $P545, 78
    push $P543, $P545
    box $P546, 11
    push $P543, $P546
    push $P502, $P543
    new $P547, 'ResizablePMCArray'
    box $P548, 2
    push $P547, $P548
    box $P549, 68
    push $P547, $P549
    box $P550, 12
    push $P547, $P550
    push $P502, $P547
    new $P551, 'ResizablePMCArray'
    box $P552, 1
    push $P551, $P552
    box $P553, 0
    push $P551, $P553
    box $P554, 13
    push $P551, $P554
    push $P502, $P551
    new $P555, 'ResizablePMCArray'
    box $P556, 0
    push $P555, $P556
    box $P557, 0
    push $P555, $P557
    box $P558, 0
    push $P555, $P558
    push $P502, $P555
    push $P501, $P502
    new $P559, 'ResizablePMCArray'
    new $P560, 'ResizablePMCArray'
    push $P559, $P560
    new $P561, 'ResizablePMCArray'
    box $P562, 2
    push $P561, $P562
    box $P563, 98
    push $P561, $P563
    box $P564, 2
    push $P561, $P564
    push $P559, $P561
    new $P565, 'ResizablePMCArray'
    box $P566, 2
    push $P565, $P566
    box $P567, 101
    push $P565, $P567
    box $P568, 3
    push $P565, $P568
    push $P559, $P565
    new $P569, 'ResizablePMCArray'
    box $P570, 2
    push $P569, $P570
    box $P571, 103
    push $P569, $P571
    box $P572, 4
    push $P569, $P572
    push $P559, $P569
    new $P573, 'ResizablePMCArray'
    box $P574, 2
    push $P573, $P574
    box $P575, 105
    push $P573, $P575
    box $P576, 5
    push $P573, $P576
    push $P559, $P573
    new $P577, 'ResizablePMCArray'
    box $P578, 2
    push $P577, $P578
    box $P579, 110
    push $P577, $P579
    box $P580, 6
    push $P577, $P580
    push $P559, $P577
    new $P581, 'ResizablePMCArray'
    box $P582, 1
    push $P581, $P582
    box $P583, 0
    push $P581, $P583
    box $P584, 7
    push $P581, $P584
    push $P559, $P581
    new $P585, 'ResizablePMCArray'
    box $P586, 6
    push $P585, $P586
    box $P587, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P585, $P587
    box $P588, 8
    push $P585, $P588
    push $P559, $P585
    new $P589, 'ResizablePMCArray'
    box $P590, 1
    push $P589, $P590
    box $P591, 0
    push $P589, $P591
    box $P592, 7
    push $P589, $P592
    box $P593, 1
    push $P589, $P593
    box $P594, 0
    push $P589, $P594
    box $P595, 9
    push $P589, $P595
    box $P596, 8
    push $P589, $P596
    box $P597, "identifier"
    push $P589, $P597
    box $P598, 10
    push $P589, $P598
    push $P559, $P589
    new $P599, 'ResizablePMCArray'
    push $P559, $P599
    new $P600, 'ResizablePMCArray'
    box $P601, 0
    push $P600, $P601
    box $P602, 0
    push $P600, $P602
    box $P603, 0
    push $P600, $P603
    push $P559, $P600
    push $P501, $P559
    new $P604, 'ResizablePMCArray'
    new $P605, 'ResizablePMCArray'
    push $P604, $P605
    new $P606, 'ResizablePMCArray'
    box $P607, 2
    push $P606, $P607
    box $P608, 98
    push $P606, $P608
    box $P609, 2
    push $P606, $P609
    push $P604, $P606
    new $P610, 'ResizablePMCArray'
    box $P611, 2
    push $P610, $P611
    box $P612, 101
    push $P610, $P612
    box $P613, 3
    push $P610, $P613
    push $P604, $P610
    new $P614, 'ResizablePMCArray'
    box $P615, 2
    push $P614, $P615
    box $P616, 103
    push $P614, $P616
    box $P617, 4
    push $P614, $P617
    push $P604, $P614
    new $P618, 'ResizablePMCArray'
    box $P619, 2
    push $P618, $P619
    box $P620, 105
    push $P618, $P620
    box $P621, 5
    push $P618, $P621
    push $P604, $P618
    new $P622, 'ResizablePMCArray'
    box $P623, 2
    push $P622, $P623
    box $P624, 110
    push $P622, $P624
    box $P625, 6
    push $P622, $P625
    push $P604, $P622
    new $P626, 'ResizablePMCArray'
    box $P627, 1
    push $P626, $P627
    box $P628, 0
    push $P626, $P628
    box $P629, 7
    push $P626, $P629
    push $P604, $P626
    new $P630, 'ResizablePMCArray'
    box $P631, 6
    push $P630, $P631
    box $P632, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P630, $P632
    box $P633, 7
    push $P630, $P633
    box $P634, 1
    push $P630, $P634
    box $P635, 0
    push $P630, $P635
    box $P636, 8
    push $P630, $P636
    push $P604, $P630
    new $P637, 'ResizablePMCArray'
    box $P638, 0
    push $P637, $P638
    box $P639, 0
    push $P637, $P639
    box $P640, 0
    push $P637, $P640
    push $P604, $P637
    push $P501, $P604
    new $P641, 'ResizablePMCArray'
    new $P642, 'ResizablePMCArray'
    push $P641, $P642
    new $P643, 'ResizablePMCArray'
    box $P644, 8
    push $P643, $P644
    box $P645, "identifier"
    push $P643, $P645
    box $P646, 2
    push $P643, $P646
    push $P641, $P643
    new $P647, 'ResizablePMCArray'
    box $P648, 4
    push $P647, $P648
    box $P649, 65535
    push $P647, $P649
    box $P650, 2
    push $P647, $P650
    box $P651, 1
    push $P647, $P651
    box $P652, 0
    push $P647, $P652
    box $P653, 3
    push $P647, $P653
    push $P641, $P647
    new $P654, 'ResizablePMCArray'
    box $P655, 1
    push $P654, $P655
    box $P656, 0
    push $P654, $P656
    box $P657, 4
    push $P654, $P657
    push $P641, $P654
    new $P658, 'ResizablePMCArray'
    box $P659, 6
    push $P658, $P659
    box $P660, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P658, $P660
    box $P661, 4
    push $P658, $P661
    box $P662, 1
    push $P658, $P662
    box $P663, 0
    push $P658, $P663
    box $P664, 6
    push $P658, $P664
    push $P641, $P658
    new $P665, 'ResizablePMCArray'
    box $P666, 0
    push $P665, $P666
    box $P667, 0
    push $P665, $P667
    box $P668, 0
    push $P665, $P668
    push $P641, $P665
    new $P669, 'ResizablePMCArray'
    box $P670, 2
    push $P669, $P670
    box $P671, 61
    push $P669, $P671
    box $P672, 7
    push $P669, $P672
    box $P673, 4
    push $P669, $P673
    box $P674, 4096
    push $P669, $P674
    box $P675, 5
    push $P669, $P675
    push $P641, $P669
    new $P676, 'ResizablePMCArray'
    box $P677, 2
    push $P676, $P677
    box $P678, 99
    push $P676, $P678
    box $P679, 8
    push $P676, $P679
    box $P680, 1
    push $P676, $P680
    box $P681, 0
    push $P676, $P681
    box $P682, 5
    push $P676, $P682
    push $P641, $P676
    new $P683, 'ResizablePMCArray'
    box $P684, 2
    push $P683, $P684
    box $P685, 117
    push $P683, $P685
    box $P686, 9
    push $P683, $P686
    push $P641, $P683
    new $P687, 'ResizablePMCArray'
    box $P688, 2
    push $P687, $P688
    box $P689, 116
    push $P687, $P689
    box $P690, 10
    push $P687, $P690
    push $P641, $P687
    new $P691, 'ResizablePMCArray'
    box $P692, 1
    push $P691, $P692
    box $P693, 0
    push $P691, $P693
    box $P694, 11
    push $P691, $P694
    push $P641, $P691
    new $P695, 'ResizablePMCArray'
    box $P696, 8
    push $P695, $P696
    box $P697, "panic"
    push $P695, $P697
    box $P698, 5
    push $P695, $P698
    push $P641, $P695
    push $P501, $P641
    new $P699, 'ResizablePMCArray'
    new $P700, 'ResizablePMCArray'
    push $P699, $P700
    new $P701, 'ResizablePMCArray'
    box $P702, 0
    push $P701, $P702
    box $P703, 0
    push $P701, $P703
    box $P704, 0
    push $P701, $P704
    box $P705, 0
    push $P701, $P705
    box $P706, 0
    push $P701, $P706
    box $P707, 0
    push $P701, $P707
    push $P699, $P701
    push $P501, $P699
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1346233478.067") :anon :lex :outer("cuid_42_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx157_tgt
    .local int rx157_pos
    .local int rx157_off
    .local int rx157_eos
    .local int rx157_rep
    .local pmc rx157_cur
    .local pmc rx157_curclass
    .local pmc rx157_bstack
    .local pmc rx157_cstack
    (rx157_cur, rx157_tgt, rx157_pos, rx157_curclass, rx157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx157_cur
    length rx157_eos, rx157_tgt
    eq $I19, 1, rx157_restart549
    gt rx157_pos, rx157_eos, rx157_fail550
    repr_get_attr_int $I11, self, rx157_curclass, "$!from"
    ne $I11, -1, rxscan158_done556
    goto rxscan158_scan555
  rxscan158_loop554:
    inc rx157_pos
    gt rx157_pos, rx157_eos, rx157_fail550
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!from", rx157_pos
  rxscan158_scan555:
    nqp_rxmark rx157_bstack, rxscan158_loop554, rx157_pos, 0
  rxscan158_done556:
    nqp_rxmark rx157_bstack, rxquantr159_done558, rx157_pos, 0
  rxquantr159_loop557:
    ge rx157_pos, rx157_eos, rx157_fail550
    substr $S11, rx157_tgt, rx157_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx157_fail550
    inc rx157_pos
    nqp_rxpeek $I19, rx157_bstack, rxquantr159_done558
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr159_done558
    inc rx157_rep
    nqp_rxmark rx157_bstack, rxquantr159_done558, rx157_pos, rx157_rep
    goto rxquantr159_loop557
  rxquantr159_done558:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt160_0560
    nqp_push_label $P11, alt160_1565
    nqp_rxmark rx157_bstack, alt160_end559, -1, 0
    rx157_cur."!alt"(rx157_pos, "alt_nfa__5_1346233480.612", $P11)
    goto rx157_fail550
  alt160_0560:
    add $I11, rx157_pos, 1
    gt $I11, rx157_eos, rx157_fail550
    substr $S10, rx157_tgt, rx157_pos, 1
    ne $S10, ucs4:"=", rx157_fail550
    add rx157_pos, 1
    nqp_rxmark rx157_bstack, rxquantr161_done562, rx157_pos, 0
  rxquantr161_loop561:
    add $I11, rx157_pos, 3
    gt $I11, rx157_eos, rx157_fail550
    substr $S10, rx157_tgt, rx157_pos, 3
    ne $S10, ucs4:"cut", rx157_fail550
    add rx157_pos, 3
    le rx157_pos, 0, rx157_fail550
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, rx157_pos
    if $I11, rx157_fail550
    sub $I11, rx157_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, $I11
    unless $I11, rx157_fail550
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx157_curclass, "$!pos"
    lt $I11, 0, rx157_fail550
    repr_get_attr_int rx157_pos, $P11, rx157_curclass, "$!pos"
    nqp_rxpeek $I19, rx157_bstack, rxquantr161_done562
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr161_done562
    inc rx157_rep
  rxquantr161_done562:
    goto alt160_end559
  alt160_1565:
    ge rx157_pos, rx157_eos, rx157_fail550
    is_cclass $I11, .CCLASS_NEWLINE, rx157_tgt, rx157_pos
    unless $I11, rx157_fail550
    substr $S10, rx157_tgt, rx157_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx157_pos, $I11
    add rx157_pos, 1
    goto alt160_end559
  alt160_end559:
    nqp_rxcommit rx157_bstack, alt160_end559
    rx157_cur."!cursor_pass"(rx157_pos, 'backtrack'=>1)
    .return (rx157_cur)
  rx157_restart549:
    repr_get_attr_obj rx157_cstack, rx157_cur, rx157_curclass, "$!cstack"
  rx157_fail550:
    unless rx157_bstack, rx157_done548
    pop $I19, rx157_bstack
    if_null rx157_cstack, rx157_cstack_done553
    unless rx157_cstack, rx157_cstack_done553
    dec $I19
    set $P11, rx157_cstack[$I19]
  rx157_cstack_done553:
    pop rx157_rep, rx157_bstack
    pop rx157_pos, rx157_bstack
    pop $I19, rx157_bstack
    lt rx157_pos, -1, rx157_done548
    lt rx157_pos, 0, rx157_fail550
    eq $I19, 0, rx157_fail550
    nqp_islist $I20, rx157_cstack
    unless $I20, rx157_jump551
    elements $I18, rx157_bstack
    le $I18, 0, rx157_cut552
    dec $I18
    set $I18, rx157_bstack[$I18]
  rx157_cut552:
    assign rx157_cstack, $I18
  rx157_jump551:
    jump $I19
  rx157_done548:
    rx157_cur."!cursor_fail"()
    .return (rx157_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346233478.067_caps" :subid("cuid_memo_21_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346233478.067_nfa" :subid("cuid_memo_22_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P503, $P505
    box $P506, 1
    push $P503, $P506
    box $P507, 1
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 2
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 61
    push $P510, $P512
    box $P513, 3
    push $P510, $P513
    box $P514, 4
    push $P510, $P514
    box $P515, 4096
    push $P510, $P515
    box $P516, 0
    push $P510, $P516
    push $P501, $P510
    new $P517, 'ResizablePMCArray'
    box $P518, 2
    push $P517, $P518
    box $P519, 99
    push $P517, $P519
    box $P520, 4
    push $P517, $P520
    box $P521, 1
    push $P517, $P521
    box $P522, 0
    push $P517, $P522
    box $P523, 0
    push $P517, $P523
    push $P501, $P517
    new $P524, 'ResizablePMCArray'
    box $P525, 2
    push $P524, $P525
    box $P526, 117
    push $P524, $P526
    box $P527, 5
    push $P524, $P527
    push $P501, $P524
    new $P528, 'ResizablePMCArray'
    box $P529, 2
    push $P528, $P529
    box $P530, 116
    push $P528, $P530
    box $P531, 6
    push $P528, $P531
    push $P501, $P528
    new $P532, 'ResizablePMCArray'
    box $P533, 1
    push $P532, $P533
    box $P534, 0
    push $P532, $P534
    box $P535, 7
    push $P532, $P535
    push $P501, $P532
    new $P536, 'ResizablePMCArray'
    box $P537, 8
    push $P536, $P537
    box $P538, "panic"
    push $P536, $P538
    box $P539, 0
    push $P536, $P539
    push $P501, $P536
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346233478.067_alt_nfa__5_1346233480.612" :subid("cuid_memo_23_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 61
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 99
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    box $P512, 1
    push $P508, $P512
    box $P513, 0
    push $P508, $P513
    box $P514, 0
    push $P508, $P514
    push $P502, $P508
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 117
    push $P515, $P517
    box $P518, 4
    push $P515, $P518
    push $P502, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 116
    push $P519, $P521
    box $P522, 5
    push $P519, $P522
    push $P502, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 1
    push $P523, $P524
    box $P525, 0
    push $P523, $P525
    box $P526, 6
    push $P523, $P526
    push $P502, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "panic"
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P502, $P527
    push $P501, $P502
    new $P531, 'ResizablePMCArray'
    new $P532, 'ResizablePMCArray'
    push $P531, $P532
    new $P533, 'ResizablePMCArray'
    box $P534, 4
    push $P533, $P534
    box $P535, 4096
    push $P533, $P535
    box $P536, 0
    push $P533, $P536
    push $P531, $P533
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_43_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 691
    .param pmc _lex_param_0 
    .const 'Sub' $P534 = 'cuid_390_1346233478.067' 
    capture_lex $P534 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*PACKAGE", $P105 
    .lex "$*GLOBALish", $P106 
    .lex utf8:"$\x{a2}", $P107 
    .lex "$/", $P108 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P105, $P505
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P106, $P506
    set self, _lex_param_0
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart575
    gt rx167_pos, rx167_eos, rx167_fail576
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done582
    goto rxscan168_scan581
  rxscan168_loop580:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail576
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan581:
    nqp_rxmark rx167_bstack, rxscan168_loop580, rx167_pos, 0
  rxscan168_done582:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P507, ""
    set $P101, $P507
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P508, 0
    set $P102, $P508
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P103, fallback583
    get_hll_global $P511, "GLOBAL"
    get_who $P510, $P511
    set $P509, $P510["$MAIN_SUB"]
    unless_null $P509, fallback584
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P512
  fallback584:
    unless_null $P509, vivi_169585
    die "Contextual $*MAIN_SUB not found"
    box $P513, "Contextual $*MAIN_SUB not found"
    set $P509, $P513
  vivi_169585:
    set $P103, $P509
  fallback583:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 696
    find_dynamic_lex $P514, "$*W"
    unless_null $P514, fallback586
    get_hll_global $P517, "GLOBAL"
    get_who $P516, $P517
    set $P515, $P516["$W"]
    unless_null $P515, fallback587
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P518
  fallback587:
    unless_null $P515, vivi_170588
    die "Contextual $*W not found"
    box $P519, "Contextual $*W not found"
    set $P515, $P519
  vivi_170588:
    set $P514, $P515
  fallback586:
    $P520 = $P514."push_lexpad"($P108)
    set $P104, $P520
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P105, fallback589
    get_hll_global $P523, "GLOBAL"
    get_who $P522, $P523
    set $P521, $P522["$PACKAGE"]
    unless_null $P521, fallback590
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P524
  fallback590:
    unless_null $P521, vivi_171591
    die "Contextual $*PACKAGE not found"
    box $P525, "Contextual $*PACKAGE not found"
    set $P521, $P525
  vivi_171591:
    set $P105, $P521
  fallback589:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P106, fallback592
    get_hll_global $P528, "GLOBAL"
    get_who $P527, $P528
    set $P526, $P527["$GLOBALish"]
    unless_null $P526, fallback593
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P529
  fallback593:
    unless_null $P526, vivi_172594
    die "Contextual $*GLOBALish not found"
    box $P530, "Contextual $*GLOBALish not found"
    set $P526, $P530
  vivi_172594:
    set $P106, $P526
  fallback592:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."GLOBALish"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail576
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P531 = $P107."MATCH"()
    set $P108, $P531
    .const 'Sub' $P532 = 'cuid_390_1346233478.067' 
    capture_lex $P532
    $P533 = $P532()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail576
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail576
    nqp_rxmark rx167_bstack, rxsubrule176_pass600, -1, 0
  rxsubrule176_pass600:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt177_0602:
    nqp_rxmark rx167_bstack, alt177_1604, rx167_pos, 0
    lt rx167_pos, rx167_eos, rx167_fail576
    goto alt177_end601
  alt177_1604:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail576
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt177_end601:
    rx167_cur."!cursor_pass"(rx167_pos, "comp_unit", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart575:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail576:
    unless rx167_bstack, rx167_done574
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done579
    unless rx167_cstack, rx167_cstack_done579
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done579:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done574
    lt rx167_pos, 0, rx167_fail576
    eq $I19, 0, rx167_fail576
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump577
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut578
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut578:
    assign rx167_cstack, $I18
  rx167_jump577:
    jump $I19
  rx167_done574:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1346233478.067_caps" :subid("cuid_memo_24_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["statementlist"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1346233478.067_nfa" :subid("cuid_memo_25_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 1
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 1
    push $P515, $P516
    box $P517, 0
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 1
    push $P519, $P520
    box $P521, 0
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 1
    push $P523, $P524
    box $P525, 0
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "GLOBALish"
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 0
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 0
    push $P531, $P534
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1346233478.067") :anon :lex :outer("cuid_43_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 702

    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback596
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback597
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback597:
    unless_null $P502, vivi_174598
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_174598:
    set $P501, $P502
  fallback596:
    $P507 = $P501."add_initializations"()
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_44_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 710
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx180_tgt
    .local int rx180_pos
    .local int rx180_off
    .local int rx180_eos
    .local int rx180_rep
    .local pmc rx180_cur
    .local pmc rx180_curclass
    .local pmc rx180_bstack
    .local pmc rx180_cstack
    (rx180_cur, rx180_tgt, rx180_pos, rx180_curclass, rx180_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx180_cur
    length rx180_eos, rx180_tgt
    eq $I19, 1, rx180_restart608
    gt rx180_pos, rx180_eos, rx180_fail609
    repr_get_attr_int $I11, self, rx180_curclass, "$!from"
    ne $I11, -1, rxscan181_done615
    goto rxscan181_scan614
  rxscan181_loop613:
    inc rx180_pos
    gt rx180_pos, rx180_eos, rx180_fail609
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!from", rx180_pos
  rxscan181_scan614:
    nqp_rxmark rx180_bstack, rxscan181_loop613, rx180_pos, 0
  rxscan181_done615:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt182_0617
    nqp_push_label $P11, alt182_1621
    nqp_rxmark rx180_bstack, alt182_end616, -1, 0
    rx180_cur."!alt"(rx180_pos, "alt_nfa__7_1346233480.72", $P11)
    goto rx180_fail609
  alt182_0617:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    lt rx180_pos, rx180_eos, rx180_fail609
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    goto alt182_end616
  alt182_1621:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxmark rx180_bstack, rxquantr187_done624, rx180_pos, 0
  rxquantr187_loop623:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."statement"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    nqp_rxmark rx180_bstack, rxsubrule188_pass625, -1, 0
  rxsubrule188_pass625:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxpeek $I19, rx180_bstack, rxquantr187_done624
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr187_done624
    inc rx180_rep
    nqp_rxmark rx180_bstack, rxquantr187_done624, rx180_pos, rx180_rep
    goto rxquantr187_loop623
  rxquantr187_done624:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    goto alt182_end616
  alt182_end616:
    rx180_cur."!cursor_pass"(rx180_pos, "statementlist", 'backtrack'=>1)
    .return (rx180_cur)
  rx180_restart608:
    repr_get_attr_obj rx180_cstack, rx180_cur, rx180_curclass, "$!cstack"
  rx180_fail609:
    unless rx180_bstack, rx180_done607
    pop $I19, rx180_bstack
    if_null rx180_cstack, rx180_cstack_done612
    unless rx180_cstack, rx180_cstack_done612
    dec $I19
    set $P11, rx180_cstack[$I19]
  rx180_cstack_done612:
    pop rx180_rep, rx180_bstack
    pop rx180_pos, rx180_bstack
    pop $I19, rx180_bstack
    lt rx180_pos, -1, rx180_done607
    lt rx180_pos, 0, rx180_fail609
    eq $I19, 0, rx180_fail609
    nqp_islist $I20, rx180_cstack
    unless $I20, rx180_jump610
    elements $I18, rx180_bstack
    le $I18, 0, rx180_cut611
    dec $I18
    set $I18, rx180_bstack[$I18]
  rx180_cut611:
    assign rx180_cstack, $I18
  rx180_jump610:
    jump $I19
  rx180_done607:
    rx180_cur."!cursor_fail"()
    .return (rx180_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1346233478.067_caps" :subid("cuid_memo_26_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 2
    set $P501["statement"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1346233478.067_alt_nfa__7_1346233480.72" :subid("cuid_memo_27_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 0
    push $P504, $P505
    box $P506, 0
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    box $P508, 0
    push $P504, $P508
    box $P509, 0
    push $P504, $P509
    box $P510, 0
    push $P504, $P510
    push $P502, $P504
    push $P501, $P502
    new $P511, 'ResizablePMCArray'
    new $P512, 'ResizablePMCArray'
    push $P511, $P512
    new $P513, 'ResizablePMCArray'
    box $P514, 0
    push $P513, $P514
    box $P515, 0
    push $P513, $P515
    box $P516, 0
    push $P513, $P516
    box $P517, 0
    push $P513, $P517
    box $P518, 0
    push $P513, $P518
    box $P519, 0
    push $P513, $P519
    push $P511, $P513
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_46_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 715
    .param pmc _lex_param_0 
    .const 'Sub' $P502 = 'cuid_45_1346233478.067' 
    capture_lex $P502 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx192_tgt
    .local int rx192_pos
    .local int rx192_off
    .local int rx192_eos
    .local int rx192_rep
    .local pmc rx192_cur
    .local pmc rx192_curclass
    .local pmc rx192_bstack
    .local pmc rx192_cstack
    (rx192_cur, rx192_tgt, rx192_pos, rx192_curclass, rx192_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx192_cur
    length rx192_eos, rx192_tgt
    eq $I19, 1, rx192_restart631
    gt rx192_pos, rx192_eos, rx192_fail632
    repr_get_attr_int $I11, self, rx192_curclass, "$!from"
    ne $I11, -1, rxscan193_done638
    goto rxscan193_scan637
  rxscan193_loop636:
    inc rx192_pos
    gt rx192_pos, rx192_eos, rx192_fail632
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!from", rx192_pos
  rxscan193_scan637:
    nqp_rxmark rx192_bstack, rxscan193_loop636, rx192_pos, 0
  rxscan193_done638:
    .const 'Sub' $P501 = 'cuid_45_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    ge $I11, 0, rx192_fail632
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt199_0657
    nqp_push_label $P11, alt199_1659
    nqp_rxmark rx192_bstack, alt199_end656, -1, 0
    rx192_cur."!alt"(rx192_pos, "alt_nfa__9_1346233480.822", $P11)
    goto rx192_fail632
  alt199_0657:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    nqp_rxmark rx192_bstack, rxsubrule200_pass658, -1, 0
  rxsubrule200_pass658:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    goto alt199_end656
  alt199_1659:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    nqp_rxmark rx192_bstack, rxsubrule201_pass660, -1, 0
  rxsubrule201_pass660:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."ws"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxmark rx192_bstack, rxquantr203_done663, rx192_pos, 0
  rxquantr203_loop662:
  alt204_0665:
    nqp_rxmark rx192_bstack, alt204_1666, rx192_pos, 0
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    goto alt204_end664
  alt204_1666:
    nqp_rxmark rx192_bstack, alt204_2672, rx192_pos, 0
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    nqp_rxmark rx192_bstack, rxsubrule205_pass667, -1, 0
  rxsubrule205_pass667:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxmark rx192_bstack, rxquantr206_done669, rx192_pos, 0
  rxquantr206_loop668:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    goto rxsubrule207_pass670
  rxsubrule207_back671:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
  rxsubrule207_pass670:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule207_back671
    push rx192_bstack, $I11
    push rx192_bstack, 0
    push rx192_bstack, rx192_pos
    elements $I11, rx192_cstack
    push rx192_bstack, $I11
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxpeek $I19, rx192_bstack, rxquantr206_done669
    inc $I19
    inc $I19
    set rx192_rep, rx192_bstack[$I19]
    nqp_rxcommit rx192_bstack, rxquantr206_done669
    inc rx192_rep
  rxquantr206_done669:
    goto alt204_end664
  alt204_2672:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    nqp_rxmark rx192_bstack, rxsubrule208_pass673, -1, 0
  rxsubrule208_pass673:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
  alt204_end664:
    nqp_rxpeek $I19, rx192_bstack, rxquantr203_done663
    inc $I19
    inc $I19
    set rx192_rep, rx192_bstack[$I19]
    nqp_rxcommit rx192_bstack, rxquantr203_done663
    inc rx192_rep
  rxquantr203_done663:
    goto alt199_end656
  alt199_end656:
    nqp_rxcommit rx192_bstack, alt199_end656
    rx192_cur."!cursor_pass"(rx192_pos, "statement", 'backtrack'=>1)
    .return (rx192_cur)
  rx192_restart631:
    repr_get_attr_obj rx192_cstack, rx192_cur, rx192_curclass, "$!cstack"
  rx192_fail632:
    unless rx192_bstack, rx192_done630
    pop $I19, rx192_bstack
    if_null rx192_cstack, rx192_cstack_done635
    unless rx192_cstack, rx192_cstack_done635
    dec $I19
    set $P11, rx192_cstack[$I19]
  rx192_cstack_done635:
    pop rx192_rep, rx192_bstack
    pop rx192_pos, rx192_bstack
    pop $I19, rx192_bstack
    lt rx192_pos, -1, rx192_done630
    lt rx192_pos, 0, rx192_fail632
    eq $I19, 0, rx192_fail632
    nqp_islist $I20, rx192_cstack
    unless $I20, rx192_jump633
    elements $I18, rx192_bstack
    le $I18, 0, rx192_cut634
    dec $I18
    set $I18, rx192_bstack[$I18]
  rx192_cut634:
    assign rx192_cstack, $I18
  rx192_jump633:
    jump $I19
  rx192_done630:
    rx192_cur."!cursor_fail"()
    .return (rx192_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1346233478.067_caps" :subid("cuid_memo_28_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["statement_control"], $P502
    box $P503, 0
    set $P501["EXPR"], $P503
    box $P504, 2
    set $P501["statement_mod_cond"], $P504
    box $P505, 2
    set $P501["statement_mod_loop"], $P505
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1346233478.067_alt_nfa__9_1346233480.822" :subid("cuid_memo_29_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "statement_control"
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 8
    push $P510, $P511
    box $P512, "EXPR"
    push $P510, $P512
    box $P513, 2
    push $P510, $P513
    push $P508, $P510
    new $P514, 'ResizablePMCArray'
    box $P515, 8
    push $P514, $P515
    box $P516, "ws"
    push $P514, $P516
    box $P517, 3
    push $P514, $P517
    push $P508, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 0
    push $P518, $P519
    box $P520, 0
    push $P518, $P520
    box $P521, 0
    push $P518, $P521
    box $P522, 1
    push $P518, $P522
    box $P523, 0
    push $P518, $P523
    box $P524, 0
    push $P518, $P524
    push $P508, $P518
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1346233478.067") :anon :lex :outer("cuid_46_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx194_tgt
    .local int rx194_pos
    .local int rx194_off
    .local int rx194_eos
    .local int rx194_rep
    .local pmc rx194_cur
    .local pmc rx194_curclass
    .local pmc rx194_bstack
    .local pmc rx194_cstack
    (rx194_cur, rx194_tgt, rx194_pos, rx194_curclass, rx194_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx194_cur
    length rx194_eos, rx194_tgt
    eq $I19, 1, rx194_restart641
    gt rx194_pos, rx194_eos, rx194_fail642
    repr_get_attr_int $I11, self, rx194_curclass, "$!from"
    ne $I11, -1, rxscan195_done648
    goto rxscan195_scan647
  rxscan195_loop646:
    inc rx194_pos
    gt rx194_pos, rx194_eos, rx194_fail642
    repr_bind_attr_int rx194_cur, rx194_curclass, "$!from", rx194_pos
  rxscan195_scan647:
    nqp_rxmark rx194_bstack, rxscan195_loop646, rx194_pos, 0
  rxscan195_done648:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt196_0650
    nqp_push_label $P11, alt196_1654
    nqp_rxmark rx194_bstack, alt196_end649, -1, 0
    rx194_cur."!alt"(rx194_pos, "alt_nfa__8_1346233480.731", $P11)
    goto rx194_fail642
  alt196_0650:
  alt197_0652:
    nqp_rxmark rx194_bstack, alt197_1653, rx194_pos, 0
    add $I11, rx194_pos, 1
    gt $I11, rx194_eos, rx194_fail642
    substr $S10, rx194_tgt, rx194_pos, 1
    ne $S10, ucs4:"]", rx194_fail642
    add rx194_pos, 1
    goto alt197_end651
  alt197_1653:
    ge rx194_pos, rx194_eos, rx194_fail642
    substr $S11, rx194_tgt, rx194_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx194_fail642
    inc rx194_pos
  alt197_end651:
    goto alt196_end649
  alt196_1654:
    lt rx194_pos, rx194_eos, rx194_fail642
    goto alt196_end649
  alt196_end649:
    rx194_cur."!cursor_pass"(rx194_pos, 'backtrack'=>1)
    .return (rx194_cur)
  rx194_restart641:
    repr_get_attr_obj rx194_cstack, rx194_cur, rx194_curclass, "$!cstack"
  rx194_fail642:
    unless rx194_bstack, rx194_done640
    pop $I19, rx194_bstack
    if_null rx194_cstack, rx194_cstack_done645
    unless rx194_cstack, rx194_cstack_done645
    dec $I19
    set $P11, rx194_cstack[$I19]
  rx194_cstack_done645:
    pop rx194_rep, rx194_bstack
    pop rx194_pos, rx194_bstack
    pop $I19, rx194_bstack
    lt rx194_pos, -1, rx194_done640
    lt rx194_pos, 0, rx194_fail642
    eq $I19, 0, rx194_fail642
    nqp_islist $I20, rx194_cstack
    unless $I20, rx194_jump643
    elements $I18, rx194_bstack
    le $I18, 0, rx194_cut644
    dec $I18
    set $I18, rx194_bstack[$I18]
  rx194_cut644:
    assign rx194_cstack, $I18
  rx194_jump643:
    jump $I19
  rx194_done640:
    rx194_cur."!cursor_fail"()
    .return (rx194_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346233478.067_caps" :subid("cuid_memo_30_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346233478.067_nfa" :subid("cuid_memo_31_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 0
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    box $P507, 1
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 0
    push $P503, $P509
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346233478.067_alt_nfa__8_1346233480.731" :subid("cuid_memo_32_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 0
    push $P504, $P505
    box $P506, 0
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    box $P508, 0
    push $P504, $P508
    box $P509, 0
    push $P504, $P509
    box $P510, 0
    push $P504, $P510
    push $P502, $P504
    push $P501, $P502
    new $P511, 'ResizablePMCArray'
    new $P512, 'ResizablePMCArray'
    push $P511, $P512
    new $P513, 'ResizablePMCArray'
    box $P514, 1
    push $P513, $P514
    box $P515, 0
    push $P513, $P515
    box $P516, 0
    push $P513, $P516
    push $P511, $P513
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_47_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 728
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx209_tgt
    .local int rx209_pos
    .local int rx209_off
    .local int rx209_eos
    .local int rx209_rep
    .local pmc rx209_cur
    .local pmc rx209_curclass
    .local pmc rx209_bstack
    .local pmc rx209_cstack
    (rx209_cur, rx209_tgt, rx209_pos, rx209_curclass, rx209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx209_cur
    length rx209_eos, rx209_tgt
    eq $I19, 1, rx209_restart676
    gt rx209_pos, rx209_eos, rx209_fail677
    repr_get_attr_int $I11, self, rx209_curclass, "$!from"
    ne $I11, -1, rxscan210_done683
    goto rxscan210_scan682
  rxscan210_loop681:
    inc rx209_pos
    gt rx209_pos, rx209_eos, rx209_fail677
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!from", rx209_pos
  rxscan210_scan682:
    nqp_rxmark rx209_bstack, rxscan210_loop681, rx209_pos, 0
  rxscan210_done683:
  alt211_0685:
    nqp_rxmark rx209_bstack, alt211_1686, rx209_pos, 0
    add $I11, rx209_pos, 1
    gt $I11, rx209_eos, rx209_fail677
    substr $S10, rx209_tgt, rx209_pos, 1
    ne $S10, ucs4:";", rx209_fail677
    add rx209_pos, 1
    goto alt211_end684
  alt211_1686:
    nqp_rxmark rx209_bstack, alt211_2687, rx209_pos, 0
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!pos", rx209_pos
    $P11 = rx209_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx209_curclass, "$!pos"
    lt $I11, 0, rx209_fail677
    goto alt211_end684
  alt211_2687:
    nqp_rxmark rx209_bstack, alt211_3688, rx209_pos, 0
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!pos", rx209_pos
    $P11 = rx209_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx209_curclass, "$!pos"
    lt $I11, 0, rx209_fail677
    goto alt211_end684
  alt211_3688:
    lt rx209_pos, rx209_eos, rx209_fail677
  alt211_end684:
    rx209_cur."!cursor_pass"(rx209_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx209_cur)
  rx209_restart676:
    repr_get_attr_obj rx209_cstack, rx209_cur, rx209_curclass, "$!cstack"
  rx209_fail677:
    unless rx209_bstack, rx209_done675
    pop $I19, rx209_bstack
    if_null rx209_cstack, rx209_cstack_done680
    unless rx209_cstack, rx209_cstack_done680
    dec $I19
    set $P11, rx209_cstack[$I19]
  rx209_cstack_done680:
    pop rx209_rep, rx209_bstack
    pop rx209_pos, rx209_bstack
    pop $I19, rx209_bstack
    lt rx209_pos, -1, rx209_done675
    lt rx209_pos, 0, rx209_fail677
    eq $I19, 0, rx209_fail677
    nqp_islist $I20, rx209_cstack
    unless $I20, rx209_jump678
    elements $I18, rx209_bstack
    le $I18, 0, rx209_cut679
    dec $I18
    set $I18, rx209_bstack[$I18]
  rx209_cut679:
    assign rx209_cstack, $I18
  rx209_jump678:
    jump $I19
  rx209_done675:
    rx209_cur."!cursor_fail"()
    .return (rx209_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_47_1346233478.067_caps" :subid("cuid_memo_33_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_48_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 735
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart692
    gt rx213_pos, rx213_eos, rx213_fail693
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done699
    goto rxscan214_scan698
  rxscan214_loop697:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail693
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan698:
    nqp_rxmark rx213_bstack, rxscan214_loop697, rx213_pos, 0
  rxscan214_done699:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail693
    nqp_rxmark rx213_bstack, rxsubrule215_pass700, -1, 0
  rxsubrule215_pass700:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."ws"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail693
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail693
    nqp_rxmark rx213_bstack, rxsubrule217_pass702, -1, 0
  rxsubrule217_pass702:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    rx213_cur."!cursor_pass"(rx213_pos, "xblock", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart692:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail693:
    unless rx213_bstack, rx213_done691
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done696
    unless rx213_cstack, rx213_cstack_done696
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done696:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done691
    lt rx213_pos, 0, rx213_fail693
    eq $I19, 0, rx213_fail693
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump694
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut695
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut695:
    assign rx213_cstack, $I18
  rx213_jump694:
    jump $I19
  rx213_done691:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1346233478.067_caps" :subid("cuid_memo_34_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["EXPR"], $P502
    box $P503, 0
    set $P501["pblock"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1346233478.067_nfa" :subid("cuid_memo_35_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "EXPR"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "ws"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "pblock"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_49_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 739
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx218_tgt
    .local int rx218_pos
    .local int rx218_off
    .local int rx218_eos
    .local int rx218_rep
    .local pmc rx218_cur
    .local pmc rx218_curclass
    .local pmc rx218_bstack
    .local pmc rx218_cstack
    (rx218_cur, rx218_tgt, rx218_pos, rx218_curclass, rx218_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx218_cur
    length rx218_eos, rx218_tgt
    eq $I19, 1, rx218_restart705
    gt rx218_pos, rx218_eos, rx218_fail706
    repr_get_attr_int $I11, self, rx218_curclass, "$!from"
    ne $I11, -1, rxscan219_done712
    goto rxscan219_scan711
  rxscan219_loop710:
    inc rx218_pos
    gt rx218_pos, rx218_eos, rx218_fail706
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!from", rx218_pos
  rxscan219_scan711:
    nqp_rxmark rx218_bstack, rxscan219_loop710, rx218_pos, 0
  rxscan219_done712:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt220_0714
    nqp_push_label $P11, alt220_1719
    nqp_push_label $P11, alt220_2722
    nqp_rxmark rx218_bstack, alt220_end713, -1, 0
    rx218_cur."!alt"(rx218_pos, "alt_nfa__10_1346233480.875", $P11)
    goto rx218_fail706
  alt220_0714:
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."signature"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    nqp_rxmark rx218_bstack, rxsubrule223_pass717, -1, 0
  rxsubrule223_pass717:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    nqp_rxmark rx218_bstack, rxsubrule224_pass718, -1, 0
  rxsubrule224_pass718:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end713
  alt220_1719:
    ge rx218_pos, rx218_eos, rx218_fail706
    substr $S11, rx218_tgt, rx218_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx218_fail706
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    nqp_rxmark rx218_bstack, rxsubrule226_pass721, -1, 0
  rxsubrule226_pass721:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end713
  alt220_2722:
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end713
  alt220_end713:
    rx218_cur."!cursor_pass"(rx218_pos, "pblock", 'backtrack'=>1)
    .return (rx218_cur)
  rx218_restart705:
    repr_get_attr_obj rx218_cstack, rx218_cur, rx218_curclass, "$!cstack"
  rx218_fail706:
    unless rx218_bstack, rx218_done704
    pop $I19, rx218_bstack
    if_null rx218_cstack, rx218_cstack_done709
    unless rx218_cstack, rx218_cstack_done709
    dec $I19
    set $P11, rx218_cstack[$I19]
  rx218_cstack_done709:
    pop rx218_rep, rx218_bstack
    pop rx218_pos, rx218_bstack
    pop $I19, rx218_bstack
    lt rx218_pos, -1, rx218_done704
    lt rx218_pos, 0, rx218_fail706
    eq $I19, 0, rx218_fail706
    nqp_islist $I20, rx218_cstack
    unless $I20, rx218_jump707
    elements $I18, rx218_bstack
    le $I18, 0, rx218_cut708
    dec $I18
    set $I18, rx218_bstack[$I18]
  rx218_cut708:
    assign rx218_cstack, $I18
  rx218_jump707:
    jump $I19
  rx218_done704:
    rx218_cur."!cursor_fail"()
    .return (rx218_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346233478.067_caps" :subid("cuid_memo_36_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["signature"], $P502
    box $P503, 0
    set $P501["blockoid"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346233478.067_nfa" :subid("cuid_memo_37_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "lambda"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 6
    push $P503, $P507
    box $P508, "{"
    push $P503, $P508
    box $P509, 5
    push $P503, $P509
    box $P510, 8
    push $P503, $P510
    box $P511, "panic"
    push $P503, $P511
    box $P512, 0
    push $P503, $P512
    push $P501, $P503
    new $P513, 'ResizablePMCArray'
    box $P514, 8
    push $P513, $P514
    box $P515, "newpad"
    push $P513, $P515
    box $P516, 3
    push $P513, $P516
    push $P501, $P513
    new $P517, 'ResizablePMCArray'
    box $P518, 8
    push $P517, $P518
    box $P519, "signature"
    push $P517, $P519
    box $P520, 4
    push $P517, $P520
    push $P501, $P517
    new $P521, 'ResizablePMCArray'
    box $P522, 8
    push $P521, $P522
    box $P523, "blockoid"
    push $P521, $P523
    box $P524, 0
    push $P521, $P524
    push $P501, $P521
    new $P525, 'ResizablePMCArray'
    box $P526, 0
    push $P525, $P526
    box $P527, 0
    push $P525, $P527
    box $P528, 0
    push $P525, $P528
    push $P501, $P525
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346233478.067_alt_nfa__10_1346233480.875" :subid("cuid_memo_38_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "lambda"
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 8
    push $P508, $P509
    box $P510, "newpad"
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 8
    push $P512, $P513
    box $P514, "signature"
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 8
    push $P516, $P517
    box $P518, "blockoid"
    push $P516, $P518
    box $P519, 0
    push $P516, $P519
    push $P502, $P516
    push $P501, $P502
    new $P520, 'ResizablePMCArray'
    new $P521, 'ResizablePMCArray'
    push $P520, $P521
    new $P522, 'ResizablePMCArray'
    box $P523, 6
    push $P522, $P523
    box $P524, "{"
    push $P522, $P524
    box $P525, 2
    push $P522, $P525
    push $P520, $P522
    new $P526, 'ResizablePMCArray'
    box $P527, 0
    push $P526, $P527
    box $P528, 0
    push $P526, $P528
    box $P529, 0
    push $P526, $P529
    push $P520, $P526
    push $P501, $P520
    new $P530, 'ResizablePMCArray'
    new $P531, 'ResizablePMCArray'
    push $P530, $P531
    new $P532, 'ResizablePMCArray'
    box $P533, 8
    push $P532, $P533
    box $P534, "panic"
    push $P532, $P534
    box $P535, 0
    push $P532, $P535
    push $P530, $P532
    push $P501, $P530
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_50_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 750
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    (rx228_cur, rx228_tgt, rx228_pos, rx228_curclass, rx228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart726
    gt rx228_pos, rx228_eos, rx228_fail727
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done733
    goto rxscan229_scan732
  rxscan229_loop731:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail727
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan732:
    nqp_rxmark rx228_bstack, rxscan229_loop731, rx228_pos, 0
  rxscan229_done733:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt230_0735
    nqp_push_label $P11, alt230_1736
    nqp_rxmark rx228_bstack, alt230_end734, -1, 0
    rx228_cur."!alt"(rx228_pos, "alt_nfa__11_1346233480.887", $P11)
    goto rx228_fail727
  alt230_0735:
    add $I11, rx228_pos, 2
    gt $I11, rx228_eos, rx228_fail727
    substr $S10, rx228_tgt, rx228_pos, 2
    ne $S10, ucs4:"->", rx228_fail727
    add rx228_pos, 2
    goto alt230_end734
  alt230_1736:
    add $I11, rx228_pos, 3
    gt $I11, rx228_eos, rx228_fail727
    substr $S10, rx228_tgt, rx228_pos, 3
    ne $S10, ucs4:"<->", rx228_fail727
    add rx228_pos, 3
    goto alt230_end734
  alt230_end734:
    rx228_cur."!cursor_pass"(rx228_pos, "lambda", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart726:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail727:
    unless rx228_bstack, rx228_done725
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done730
    unless rx228_cstack, rx228_cstack_done730
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done730:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done725
    lt rx228_pos, 0, rx228_fail727
    eq $I19, 0, rx228_fail727
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump728
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut729
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut729:
    assign rx228_cstack, $I18
  rx228_jump728:
    jump $I19
  rx228_done725:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346233478.067_caps" :subid("cuid_memo_39_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346233478.067_nfa" :subid("cuid_memo_40_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 45
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 2
    push $P503, $P507
    box $P508, 60
    push $P503, $P508
    box $P509, 3
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 62
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P501, $P510
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 45
    push $P514, $P516
    box $P517, 4
    push $P514, $P517
    push $P501, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 2
    push $P518, $P519
    box $P520, 62
    push $P518, $P520
    box $P521, 0
    push $P518, $P521
    push $P501, $P518
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346233478.067_alt_nfa__11_1346233480.887" :subid("cuid_memo_41_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 45
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 62
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 60
    push $P514, $P516
    box $P517, 2
    push $P514, $P517
    push $P512, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 2
    push $P518, $P519
    box $P520, 45
    push $P518, $P520
    box $P521, 3
    push $P518, $P521
    push $P512, $P518
    new $P522, 'ResizablePMCArray'
    box $P523, 2
    push $P522, $P523
    box $P524, 62
    push $P522, $P524
    box $P525, 0
    push $P522, $P525
    push $P512, $P522
    push $P501, $P512
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_51_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 752
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_curclass
    .local pmc rx231_bstack
    .local pmc rx231_cstack
    (rx231_cur, rx231_tgt, rx231_pos, rx231_curclass, rx231_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx231_cur
    length rx231_eos, rx231_tgt
    eq $I19, 1, rx231_restart739
    gt rx231_pos, rx231_eos, rx231_fail740
    repr_get_attr_int $I11, self, rx231_curclass, "$!from"
    ne $I11, -1, rxscan232_done746
    goto rxscan232_scan745
  rxscan232_loop744:
    inc rx231_pos
    gt rx231_pos, rx231_eos, rx231_fail740
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!from", rx231_pos
  rxscan232_scan745:
    nqp_rxmark rx231_bstack, rxscan232_loop744, rx231_pos, 0
  rxscan232_done746:
  alt233_0748:
    nqp_rxmark rx231_bstack, alt233_1749, rx231_pos, 0
    ge rx231_pos, rx231_eos, rx231_fail740
    substr $S11, rx231_tgt, rx231_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx231_fail740
    goto alt233_end747
  alt233_1749:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail740
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
  alt233_end747:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail740
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail740
    nqp_rxmark rx231_bstack, rxsubrule236_pass752, -1, 0
  rxsubrule236_pass752:
    rx231_cstack = rx231_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    rx231_cur."!cursor_pass"(rx231_pos, "block", 'backtrack'=>1)
    .return (rx231_cur)
  rx231_restart739:
    repr_get_attr_obj rx231_cstack, rx231_cur, rx231_curclass, "$!cstack"
  rx231_fail740:
    unless rx231_bstack, rx231_done738
    pop $I19, rx231_bstack
    if_null rx231_cstack, rx231_cstack_done743
    unless rx231_cstack, rx231_cstack_done743
    dec $I19
    set $P11, rx231_cstack[$I19]
  rx231_cstack_done743:
    pop rx231_rep, rx231_bstack
    pop rx231_pos, rx231_bstack
    pop $I19, rx231_bstack
    lt rx231_pos, -1, rx231_done738
    lt rx231_pos, 0, rx231_fail740
    eq $I19, 0, rx231_fail740
    nqp_islist $I20, rx231_cstack
    unless $I20, rx231_jump741
    elements $I18, rx231_bstack
    le $I18, 0, rx231_cut742
    dec $I18
    set $I18, rx231_bstack[$I18]
  rx231_cut742:
    assign rx231_cstack, $I18
  rx231_jump741:
    jump $I19
  rx231_done738:
    rx231_cur."!cursor_fail"()
    .return (rx231_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_51_1346233478.067_caps" :subid("cuid_memo_42_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["blockoid"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_52_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 758
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P501, 'Hash'
    set $P101, $P501
    set self, _lex_param_0
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    (rx237_cur, rx237_tgt, rx237_pos, rx237_curclass, rx237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart755
    gt rx237_pos, rx237_eos, rx237_fail756
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done762
    goto rxscan238_scan761
  rxscan238_loop760:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail756
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan761:
    nqp_rxmark rx237_bstack, rxscan238_loop760, rx237_pos, 0
  rxscan238_done762:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    store_lex unicode:"$\x{a2}", rx237_cur
    unless_null $P101, fallback763
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["%HANDLERS"]
    unless_null $P502, fallback764
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    new $P507, 'Hash'
    set $P505["%HANDLERS"], $P507
    set $P502, $P507
  fallback764:
    unless_null $P502, vivi_239765
    die "Contextual %*HANDLERS not found"
    box $P508, "Contextual %*HANDLERS not found"
    set $P502, $P508
  vivi_239765:
    set $P101, $P502
  fallback763:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt241_0768:
    nqp_rxmark rx237_bstack, alt241_1770, rx237_pos, 0
    add $I11, rx237_pos, 14
    gt $I11, rx237_eos, rx237_fail756
    substr $S10, rx237_tgt, rx237_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx237_fail756
    add rx237_pos, 14
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    nqp_rxmark rx237_bstack, rxsubrule242_pass769, -1, 0
  rxsubrule242_pass769:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt241_end767
  alt241_1770:
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail756
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:"{", rx237_fail756
    add rx237_pos, 1
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    nqp_rxmark rx237_bstack, rxsubrule243_pass771, -1, 0
  rxsubrule243_pass771:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt244_0773:
    nqp_rxmark rx237_bstack, alt244_1774, rx237_pos, 0
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail756
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:"}", rx237_fail756
    add rx237_pos, 1
    goto alt244_end772
  alt244_1774:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    goto rxsubrule245_pass775
  rxsubrule245_back776:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
  rxsubrule245_pass775:
    rx237_cstack = rx237_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule245_back776
    push rx237_bstack, $I11
    push rx237_bstack, 0
    push rx237_bstack, rx237_pos
    elements $I11, rx237_cstack
    push rx237_bstack, $I11
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt244_end772:
  alt241_end767:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    rx237_cur."!cursor_pass"(rx237_pos, "blockoid", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart755:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail756:
    unless rx237_bstack, rx237_done754
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done759
    unless rx237_cstack, rx237_cstack_done759
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done759:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done754
    lt rx237_pos, 0, rx237_fail756
    eq $I19, 0, rx237_fail756
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump757
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut758
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut758:
    assign rx237_cstack, $I18
  rx237_jump757:
    jump $I19
  rx237_done754:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1346233478.067_caps" :subid("cuid_memo_43_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["you_are_here"], $P502
    box $P503, 0
    set $P501["statementlist"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1346233478.067_nfa" :subid("cuid_memo_44_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "finishpad"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 0
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_53_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 768
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx246_tgt
    .local int rx246_pos
    .local int rx246_off
    .local int rx246_eos
    .local int rx246_rep
    .local pmc rx246_cur
    .local pmc rx246_curclass
    .local pmc rx246_bstack
    .local pmc rx246_cstack
    (rx246_cur, rx246_tgt, rx246_pos, rx246_curclass, rx246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx246_cur
    length rx246_eos, rx246_tgt
    eq $I19, 1, rx246_restart779
    gt rx246_pos, rx246_eos, rx246_fail780
    repr_get_attr_int $I11, self, rx246_curclass, "$!from"
    ne $I11, -1, rxscan247_done786
    goto rxscan247_scan785
  rxscan247_loop784:
    inc rx246_pos
    gt rx246_pos, rx246_eos, rx246_fail780
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!from", rx246_pos
  rxscan247_scan785:
    nqp_rxmark rx246_bstack, rxscan247_loop784, rx246_pos, 0
  rxscan247_done786:
    rx246_cur."!cursor_pass"(rx246_pos, "newpad", 'backtrack'=>1)
    .return (rx246_cur)
  rx246_restart779:
    repr_get_attr_obj rx246_cstack, rx246_cur, rx246_curclass, "$!cstack"
  rx246_fail780:
    unless rx246_bstack, rx246_done778
    pop $I19, rx246_bstack
    if_null rx246_cstack, rx246_cstack_done783
    unless rx246_cstack, rx246_cstack_done783
    dec $I19
    set $P11, rx246_cstack[$I19]
  rx246_cstack_done783:
    pop rx246_rep, rx246_bstack
    pop rx246_pos, rx246_bstack
    pop $I19, rx246_bstack
    lt rx246_pos, -1, rx246_done778
    lt rx246_pos, 0, rx246_fail780
    eq $I19, 0, rx246_fail780
    nqp_islist $I20, rx246_cstack
    unless $I20, rx246_jump781
    elements $I18, rx246_bstack
    le $I18, 0, rx246_cut782
    dec $I18
    set $I18, rx246_bstack[$I18]
  rx246_cut782:
    assign rx246_cstack, $I18
  rx246_jump781:
    jump $I19
  rx246_done778:
    rx246_cur."!cursor_fail"()
    .return (rx246_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1346233478.067_caps" :subid("cuid_memo_45_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1346233478.067_nfa" :subid("cuid_memo_46_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_54_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 769
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx249_tgt
    .local int rx249_pos
    .local int rx249_off
    .local int rx249_eos
    .local int rx249_rep
    .local pmc rx249_cur
    .local pmc rx249_curclass
    .local pmc rx249_bstack
    .local pmc rx249_cstack
    (rx249_cur, rx249_tgt, rx249_pos, rx249_curclass, rx249_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx249_cur
    length rx249_eos, rx249_tgt
    eq $I19, 1, rx249_restart790
    gt rx249_pos, rx249_eos, rx249_fail791
    repr_get_attr_int $I11, self, rx249_curclass, "$!from"
    ne $I11, -1, rxscan250_done797
    goto rxscan250_scan796
  rxscan250_loop795:
    inc rx249_pos
    gt rx249_pos, rx249_eos, rx249_fail791
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!from", rx249_pos
  rxscan250_scan796:
    nqp_rxmark rx249_bstack, rxscan250_loop795, rx249_pos, 0
  rxscan250_done797:
    rx249_cur."!cursor_pass"(rx249_pos, "outerctx", 'backtrack'=>1)
    .return (rx249_cur)
  rx249_restart790:
    repr_get_attr_obj rx249_cstack, rx249_cur, rx249_curclass, "$!cstack"
  rx249_fail791:
    unless rx249_bstack, rx249_done789
    pop $I19, rx249_bstack
    if_null rx249_cstack, rx249_cstack_done794
    unless rx249_cstack, rx249_cstack_done794
    dec $I19
    set $P11, rx249_cstack[$I19]
  rx249_cstack_done794:
    pop rx249_rep, rx249_bstack
    pop rx249_pos, rx249_bstack
    pop $I19, rx249_bstack
    lt rx249_pos, -1, rx249_done789
    lt rx249_pos, 0, rx249_fail791
    eq $I19, 0, rx249_fail791
    nqp_islist $I20, rx249_cstack
    unless $I20, rx249_jump792
    elements $I18, rx249_bstack
    le $I18, 0, rx249_cut793
    dec $I18
    set $I18, rx249_bstack[$I18]
  rx249_cut793:
    assign rx249_cstack, $I18
  rx249_jump792:
    jump $I19
  rx249_done789:
    rx249_cur."!cursor_fail"()
    .return (rx249_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1346233478.067_caps" :subid("cuid_memo_47_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1346233478.067_nfa" :subid("cuid_memo_48_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "GLOBALish" :subid("cuid_55_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 770
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx252_tgt
    .local int rx252_pos
    .local int rx252_off
    .local int rx252_eos
    .local int rx252_rep
    .local pmc rx252_cur
    .local pmc rx252_curclass
    .local pmc rx252_bstack
    .local pmc rx252_cstack
    (rx252_cur, rx252_tgt, rx252_pos, rx252_curclass, rx252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx252_cur
    length rx252_eos, rx252_tgt
    eq $I19, 1, rx252_restart801
    gt rx252_pos, rx252_eos, rx252_fail802
    repr_get_attr_int $I11, self, rx252_curclass, "$!from"
    ne $I11, -1, rxscan253_done808
    goto rxscan253_scan807
  rxscan253_loop806:
    inc rx252_pos
    gt rx252_pos, rx252_eos, rx252_fail802
    repr_bind_attr_int rx252_cur, rx252_curclass, "$!from", rx252_pos
  rxscan253_scan807:
    nqp_rxmark rx252_bstack, rxscan253_loop806, rx252_pos, 0
  rxscan253_done808:
    rx252_cur."!cursor_pass"(rx252_pos, "GLOBALish", 'backtrack'=>1)
    .return (rx252_cur)
  rx252_restart801:
    repr_get_attr_obj rx252_cstack, rx252_cur, rx252_curclass, "$!cstack"
  rx252_fail802:
    unless rx252_bstack, rx252_done800
    pop $I19, rx252_bstack
    if_null rx252_cstack, rx252_cstack_done805
    unless rx252_cstack, rx252_cstack_done805
    dec $I19
    set $P11, rx252_cstack[$I19]
  rx252_cstack_done805:
    pop rx252_rep, rx252_bstack
    pop rx252_pos, rx252_bstack
    pop $I19, rx252_bstack
    lt rx252_pos, -1, rx252_done800
    lt rx252_pos, 0, rx252_fail802
    eq $I19, 0, rx252_fail802
    nqp_islist $I20, rx252_cstack
    unless $I20, rx252_jump803
    elements $I18, rx252_bstack
    le $I18, 0, rx252_cut804
    dec $I18
    set $I18, rx252_bstack[$I18]
  rx252_cut804:
    assign rx252_cstack, $I18
  rx252_jump803:
    jump $I19
  rx252_done800:
    rx252_cur."!cursor_fail"()
    .return (rx252_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1346233478.067_caps" :subid("cuid_memo_49_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1346233478.067_nfa" :subid("cuid_memo_50_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_56_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 771
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx255_tgt
    .local int rx255_pos
    .local int rx255_off
    .local int rx255_eos
    .local int rx255_rep
    .local pmc rx255_cur
    .local pmc rx255_curclass
    .local pmc rx255_bstack
    .local pmc rx255_cstack
    (rx255_cur, rx255_tgt, rx255_pos, rx255_curclass, rx255_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx255_cur
    length rx255_eos, rx255_tgt
    eq $I19, 1, rx255_restart812
    gt rx255_pos, rx255_eos, rx255_fail813
    repr_get_attr_int $I11, self, rx255_curclass, "$!from"
    ne $I11, -1, rxscan256_done819
    goto rxscan256_scan818
  rxscan256_loop817:
    inc rx255_pos
    gt rx255_pos, rx255_eos, rx255_fail813
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!from", rx255_pos
  rxscan256_scan818:
    nqp_rxmark rx255_bstack, rxscan256_loop817, rx255_pos, 0
  rxscan256_done819:
    rx255_cur."!cursor_pass"(rx255_pos, "finishpad", 'backtrack'=>1)
    .return (rx255_cur)
  rx255_restart812:
    repr_get_attr_obj rx255_cstack, rx255_cur, rx255_curclass, "$!cstack"
  rx255_fail813:
    unless rx255_bstack, rx255_done811
    pop $I19, rx255_bstack
    if_null rx255_cstack, rx255_cstack_done816
    unless rx255_cstack, rx255_cstack_done816
    dec $I19
    set $P11, rx255_cstack[$I19]
  rx255_cstack_done816:
    pop rx255_rep, rx255_bstack
    pop rx255_pos, rx255_bstack
    pop $I19, rx255_bstack
    lt rx255_pos, -1, rx255_done811
    lt rx255_pos, 0, rx255_fail813
    eq $I19, 0, rx255_fail813
    nqp_islist $I20, rx255_cstack
    unless $I20, rx255_jump814
    elements $I18, rx255_bstack
    le $I18, 0, rx255_cut815
    dec $I18
    set $I18, rx255_bstack[$I18]
  rx255_cut815:
    assign rx255_cstack, $I18
  rx255_jump814:
    jump $I19
  rx255_done811:
    rx255_cur."!cursor_fail"()
    .return (rx255_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1346233478.067_caps" :subid("cuid_memo_51_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1346233478.067_nfa" :subid("cuid_memo_52_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_57_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx258_tgt
    .local int rx258_pos
    .local int rx258_off
    .local int rx258_eos
    .local int rx258_rep
    .local pmc rx258_cur
    .local pmc rx258_curclass
    .local pmc rx258_bstack
    .local pmc rx258_cstack
    (rx258_cur, rx258_tgt, rx258_pos, rx258_curclass, rx258_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx258_cur
    length rx258_eos, rx258_tgt
    eq $I19, 1, rx258_restart823
    gt rx258_pos, rx258_eos, rx258_fail824
    repr_get_attr_int $I11, self, rx258_curclass, "$!from"
    ne $I11, -1, rxscan259_done830
    goto rxscan259_scan829
  rxscan259_loop828:
    inc rx258_pos
    gt rx258_pos, rx258_eos, rx258_fail824
    repr_bind_attr_int rx258_cur, rx258_curclass, "$!from", rx258_pos
  rxscan259_scan829:
    nqp_rxmark rx258_bstack, rxscan259_loop828, rx258_pos, 0
  rxscan259_done830:
    rx258_cur."!cursor_pass"(rx258_pos, "you_are_here", 'backtrack'=>1)
    .return (rx258_cur)
  rx258_restart823:
    repr_get_attr_obj rx258_cstack, rx258_cur, rx258_curclass, "$!cstack"
  rx258_fail824:
    unless rx258_bstack, rx258_done822
    pop $I19, rx258_bstack
    if_null rx258_cstack, rx258_cstack_done827
    unless rx258_cstack, rx258_cstack_done827
    dec $I19
    set $P11, rx258_cstack[$I19]
  rx258_cstack_done827:
    pop rx258_rep, rx258_bstack
    pop rx258_pos, rx258_bstack
    pop $I19, rx258_bstack
    lt rx258_pos, -1, rx258_done822
    lt rx258_pos, 0, rx258_fail824
    eq $I19, 0, rx258_fail824
    nqp_islist $I20, rx258_cstack
    unless $I20, rx258_jump825
    elements $I18, rx258_bstack
    le $I18, 0, rx258_cut826
    dec $I18
    set $I18, rx258_bstack[$I18]
  rx258_cut826:
    assign rx258_cstack, $I18
  rx258_jump825:
    jump $I19
  rx258_done822:
    rx258_cur."!cursor_fail"()
    .return (rx258_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1346233478.067_caps" :subid("cuid_memo_53_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1346233478.067_nfa" :subid("cuid_memo_54_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_58_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 774
    .param pmc self 
    $P501 = self."!protoregex"("terminator")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_59_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart834
    gt rx261_pos, rx261_eos, rx261_fail835
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done841
    goto rxscan262_scan840
  rxscan262_loop839:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail835
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan840:
    nqp_rxmark rx261_bstack, rxscan262_loop839, rx261_pos, 0
  rxscan262_done841:
    ge rx261_pos, rx261_eos, rx261_fail835
    substr $S11, rx261_tgt, rx261_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx261_fail835
    rx261_cur."!cursor_pass"(rx261_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart834:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail835:
    unless rx261_bstack, rx261_done833
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done838
    unless rx261_cstack, rx261_cstack_done838
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done838:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done833
    lt rx261_pos, 0, rx261_fail835
    eq $I19, 0, rx261_fail835
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump836
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut837
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut837:
    assign rx261_cstack, $I18
  rx261_jump836:
    jump $I19
  rx261_done833:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1346233478.067_caps" :subid("cuid_memo_55_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1346233478.067_nfa" :subid("cuid_memo_56_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, ";"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_60_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 777
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx263_tgt
    .local int rx263_pos
    .local int rx263_off
    .local int rx263_eos
    .local int rx263_rep
    .local pmc rx263_cur
    .local pmc rx263_curclass
    .local pmc rx263_bstack
    .local pmc rx263_cstack
    (rx263_cur, rx263_tgt, rx263_pos, rx263_curclass, rx263_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx263_cur
    length rx263_eos, rx263_tgt
    eq $I19, 1, rx263_restart844
    gt rx263_pos, rx263_eos, rx263_fail845
    repr_get_attr_int $I11, self, rx263_curclass, "$!from"
    ne $I11, -1, rxscan264_done851
    goto rxscan264_scan850
  rxscan264_loop849:
    inc rx263_pos
    gt rx263_pos, rx263_eos, rx263_fail845
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!from", rx263_pos
  rxscan264_scan850:
    nqp_rxmark rx263_bstack, rxscan264_loop849, rx263_pos, 0
  rxscan264_done851:
    ge rx263_pos, rx263_eos, rx263_fail845
    substr $S11, rx263_tgt, rx263_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx263_fail845
    rx263_cur."!cursor_pass"(rx263_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx263_cur)
  rx263_restart844:
    repr_get_attr_obj rx263_cstack, rx263_cur, rx263_curclass, "$!cstack"
  rx263_fail845:
    unless rx263_bstack, rx263_done843
    pop $I19, rx263_bstack
    if_null rx263_cstack, rx263_cstack_done848
    unless rx263_cstack, rx263_cstack_done848
    dec $I19
    set $P11, rx263_cstack[$I19]
  rx263_cstack_done848:
    pop rx263_rep, rx263_bstack
    pop rx263_pos, rx263_bstack
    pop $I19, rx263_bstack
    lt rx263_pos, -1, rx263_done843
    lt rx263_pos, 0, rx263_fail845
    eq $I19, 0, rx263_fail845
    nqp_islist $I20, rx263_cstack
    unless $I20, rx263_jump846
    elements $I18, rx263_bstack
    le $I18, 0, rx263_cut847
    dec $I18
    set $I18, rx263_bstack[$I18]
  rx263_cut847:
    assign rx263_cstack, $I18
  rx263_jump846:
    jump $I19
  rx263_done843:
    rx263_cur."!cursor_fail"()
    .return (rx263_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1346233478.067_caps" :subid("cuid_memo_57_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1346233478.067_nfa" :subid("cuid_memo_58_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "}"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_61_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 781
    .param pmc self 
    $P501 = self."!protoregex"("statement_control")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_62_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 783
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx265_tgt
    .local int rx265_pos
    .local int rx265_off
    .local int rx265_eos
    .local int rx265_rep
    .local pmc rx265_cur
    .local pmc rx265_curclass
    .local pmc rx265_bstack
    .local pmc rx265_cstack
    (rx265_cur, rx265_tgt, rx265_pos, rx265_curclass, rx265_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx265_cur
    length rx265_eos, rx265_tgt
    eq $I19, 1, rx265_restart854
    gt rx265_pos, rx265_eos, rx265_fail855
    repr_get_attr_int $I11, self, rx265_curclass, "$!from"
    ne $I11, -1, rxscan266_done861
    goto rxscan266_scan860
  rxscan266_loop859:
    inc rx265_pos
    gt rx265_pos, rx265_eos, rx265_fail855
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!from", rx265_pos
  rxscan266_scan860:
    nqp_rxmark rx265_bstack, rxscan266_loop859, rx265_pos, 0
  rxscan266_done861:
    nqp_rxmark rx265_bstack, rxcap267_fail863, rx265_pos, 0
    add $I11, rx265_pos, 3
    gt $I11, rx265_eos, rx265_fail855
    substr $S10, rx265_tgt, rx265_pos, 3
    ne $S10, ucs4:"use", rx265_fail855
    add rx265_pos, 3
    nqp_rxpeek $I19, rx265_bstack, rxcap267_fail863
    inc $I19
    set $I11, rx265_bstack[$I19]
    $P11 = rx265_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx265_pos)
    rx265_cstack = rx265_cur."!cursor_capture"($P11, "sym")
    goto rxcap267_done862
  rxcap267_fail863:
    goto rx265_fail855
  rxcap267_done862:
    ge rx265_pos, rx265_eos, rx265_fail855
    is_cclass $I11, .CCLASS_WHITESPACE, rx265_tgt, rx265_pos
    unless $I11, rx265_fail855
    add rx265_pos, 1
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."ws"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail855
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."name"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail855
    nqp_rxmark rx265_bstack, rxsubrule269_pass865, -1, 0
  rxsubrule269_pass865:
    rx265_cstack = rx265_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."ws"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail855
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    rx265_cur."!cursor_pass"(rx265_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx265_cur)
  rx265_restart854:
    repr_get_attr_obj rx265_cstack, rx265_cur, rx265_curclass, "$!cstack"
  rx265_fail855:
    unless rx265_bstack, rx265_done853
    pop $I19, rx265_bstack
    if_null rx265_cstack, rx265_cstack_done858
    unless rx265_cstack, rx265_cstack_done858
    dec $I19
    set $P11, rx265_cstack[$I19]
  rx265_cstack_done858:
    pop rx265_rep, rx265_bstack
    pop rx265_pos, rx265_bstack
    pop $I19, rx265_bstack
    lt rx265_pos, -1, rx265_done853
    lt rx265_pos, 0, rx265_fail855
    eq $I19, 0, rx265_fail855
    nqp_islist $I20, rx265_cstack
    unless $I20, rx265_jump856
    elements $I18, rx265_bstack
    le $I18, 0, rx265_cut857
    dec $I18
    set $I18, rx265_bstack[$I18]
  rx265_cut857:
    assign rx265_cstack, $I18
  rx265_jump856:
    jump $I19
  rx265_done853:
    rx265_cur."!cursor_fail"()
    .return (rx265_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1346233478.067_caps" :subid("cuid_memo_59_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["name"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1346233478.067_nfa" :subid("cuid_memo_60_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 117
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 115
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 101
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 4
    push $P515, $P516
    box $P517, 32
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 0
    push $P519, $P520
    box $P521, 0
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_63_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 787
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx271_tgt
    .local int rx271_pos
    .local int rx271_off
    .local int rx271_eos
    .local int rx271_rep
    .local pmc rx271_cur
    .local pmc rx271_curclass
    .local pmc rx271_bstack
    .local pmc rx271_cstack
    (rx271_cur, rx271_tgt, rx271_pos, rx271_curclass, rx271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx271_cur
    length rx271_eos, rx271_tgt
    eq $I19, 1, rx271_restart869
    gt rx271_pos, rx271_eos, rx271_fail870
    repr_get_attr_int $I11, self, rx271_curclass, "$!from"
    ne $I11, -1, rxscan272_done876
    goto rxscan272_scan875
  rxscan272_loop874:
    inc rx271_pos
    gt rx271_pos, rx271_eos, rx271_fail870
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!from", rx271_pos
  rxscan272_scan875:
    nqp_rxmark rx271_bstack, rxscan272_loop874, rx271_pos, 0
  rxscan272_done876:
    nqp_rxmark rx271_bstack, rxcap273_fail878, rx271_pos, 0
    add $I11, rx271_pos, 2
    gt $I11, rx271_eos, rx271_fail870
    substr $S10, rx271_tgt, rx271_pos, 2
    ne $S10, ucs4:"if", rx271_fail870
    add rx271_pos, 2
    nqp_rxpeek $I19, rx271_bstack, rxcap273_fail878
    inc $I19
    set $I11, rx271_bstack[$I19]
    $P11 = rx271_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx271_pos)
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "sym")
    goto rxcap273_done877
  rxcap273_fail878:
    goto rx271_fail870
  rxcap273_done877:
    ge rx271_pos, rx271_eos, rx271_fail870
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail870
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    nqp_rxmark rx271_bstack, rxsubrule275_pass880, -1, 0
  rxsubrule275_pass880:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxmark rx271_bstack, rxquantr277_done883, rx271_pos, 0
  rxquantr277_loop882:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    add $I11, rx271_pos, 5
    gt $I11, rx271_eos, rx271_fail870
    substr $S10, rx271_tgt, rx271_pos, 5
    ne $S10, ucs4:"elsif", rx271_fail870
    add rx271_pos, 5
    ge rx271_pos, rx271_eos, rx271_fail870
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail870
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    nqp_rxmark rx271_bstack, rxsubrule280_pass886, -1, 0
  rxsubrule280_pass886:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxpeek $I19, rx271_bstack, rxquantr277_done883
    inc $I19
    inc $I19
    set rx271_rep, rx271_bstack[$I19]
    nqp_rxcommit rx271_bstack, rxquantr277_done883
    inc rx271_rep
    nqp_rxmark rx271_bstack, rxquantr277_done883, rx271_pos, rx271_rep
    goto rxquantr277_loop882
  rxquantr277_done883:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxmark rx271_bstack, rxquantr283_done890, rx271_pos, 0
  rxquantr283_loop889:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    add $I11, rx271_pos, 4
    gt $I11, rx271_eos, rx271_fail870
    substr $S10, rx271_tgt, rx271_pos, 4
    ne $S10, ucs4:"else", rx271_fail870
    add rx271_pos, 4
    ge rx271_pos, rx271_eos, rx271_fail870
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail870
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    nqp_rxmark rx271_bstack, rxsubrule286_pass893, -1, 0
  rxsubrule286_pass893:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxpeek $I19, rx271_bstack, rxquantr283_done890
    inc $I19
    inc $I19
    set rx271_rep, rx271_bstack[$I19]
    nqp_rxcommit rx271_bstack, rxquantr283_done890
    inc rx271_rep
  rxquantr283_done890:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    rx271_cur."!cursor_pass"(rx271_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx271_cur)
  rx271_restart869:
    repr_get_attr_obj rx271_cstack, rx271_cur, rx271_curclass, "$!cstack"
  rx271_fail870:
    unless rx271_bstack, rx271_done868
    pop $I19, rx271_bstack
    if_null rx271_cstack, rx271_cstack_done873
    unless rx271_cstack, rx271_cstack_done873
    dec $I19
    set $P11, rx271_cstack[$I19]
  rx271_cstack_done873:
    pop rx271_rep, rx271_bstack
    pop rx271_pos, rx271_bstack
    pop $I19, rx271_bstack
    lt rx271_pos, -1, rx271_done868
    lt rx271_pos, 0, rx271_fail870
    eq $I19, 0, rx271_fail870
    nqp_islist $I20, rx271_cstack
    unless $I20, rx271_jump871
    elements $I18, rx271_bstack
    le $I18, 0, rx271_cut872
    dec $I18
    set $I18, rx271_bstack[$I18]
  rx271_cut872:
    assign rx271_cstack, $I18
  rx271_jump871:
    jump $I19
  rx271_done868:
    rx271_cur."!cursor_fail"()
    .return (rx271_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1346233478.067_caps" :subid("cuid_memo_61_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 2
    set $P501["xblock"], $P503
    box $P504, 2
    set $P501["else"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1346233478.067_nfa" :subid("cuid_memo_62_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 105
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 102
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 4
    push $P511, $P512
    box $P513, 32
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 0
    push $P515, $P516
    box $P517, 0
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_65_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 794
    .param pmc _lex_param_0 
    .const 'Sub' $P502 = 'cuid_64_1346233478.067' 
    capture_lex $P502 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx289_tgt
    .local int rx289_pos
    .local int rx289_off
    .local int rx289_eos
    .local int rx289_rep
    .local pmc rx289_cur
    .local pmc rx289_curclass
    .local pmc rx289_bstack
    .local pmc rx289_cstack
    (rx289_cur, rx289_tgt, rx289_pos, rx289_curclass, rx289_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx289_cur
    length rx289_eos, rx289_tgt
    eq $I19, 1, rx289_restart898
    gt rx289_pos, rx289_eos, rx289_fail899
    repr_get_attr_int $I11, self, rx289_curclass, "$!from"
    ne $I11, -1, rxscan290_done905
    goto rxscan290_scan904
  rxscan290_loop903:
    inc rx289_pos
    gt rx289_pos, rx289_eos, rx289_fail899
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!from", rx289_pos
  rxscan290_scan904:
    nqp_rxmark rx289_bstack, rxscan290_loop903, rx289_pos, 0
  rxscan290_done905:
    nqp_rxmark rx289_bstack, rxcap291_fail907, rx289_pos, 0
    add $I11, rx289_pos, 6
    gt $I11, rx289_eos, rx289_fail899
    substr $S10, rx289_tgt, rx289_pos, 6
    ne $S10, ucs4:"unless", rx289_fail899
    add rx289_pos, 6
    nqp_rxpeek $I19, rx289_bstack, rxcap291_fail907
    inc $I19
    set $I11, rx289_bstack[$I19]
    $P11 = rx289_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx289_pos)
    rx289_cstack = rx289_cur."!cursor_capture"($P11, "sym")
    goto rxcap291_done906
  rxcap291_fail907:
    goto rx289_fail899
  rxcap291_done906:
    ge rx289_pos, rx289_eos, rx289_fail899
    is_cclass $I11, .CCLASS_WHITESPACE, rx289_tgt, rx289_pos
    unless $I11, rx289_fail899
    add rx289_pos, 1
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    nqp_rxmark rx289_bstack, rxsubrule293_pass909, -1, 0
  rxsubrule293_pass909:
    rx289_cstack = rx289_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
  alt295_0912:
    nqp_rxmark rx289_bstack, alt295_1925, rx289_pos, 0
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    .const 'Sub' $P501 = 'cuid_64_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    ge $I11, 0, rx289_fail899
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    goto alt295_end911
  alt295_1925:
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
  alt295_end911:
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    rx289_cur."!cursor_pass"(rx289_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx289_cur)
  rx289_restart898:
    repr_get_attr_obj rx289_cstack, rx289_cur, rx289_curclass, "$!cstack"
  rx289_fail899:
    unless rx289_bstack, rx289_done897
    pop $I19, rx289_bstack
    if_null rx289_cstack, rx289_cstack_done902
    unless rx289_cstack, rx289_cstack_done902
    dec $I19
    set $P11, rx289_cstack[$I19]
  rx289_cstack_done902:
    pop rx289_rep, rx289_bstack
    pop rx289_pos, rx289_bstack
    pop $I19, rx289_bstack
    lt rx289_pos, -1, rx289_done897
    lt rx289_pos, 0, rx289_fail899
    eq $I19, 0, rx289_fail899
    nqp_islist $I20, rx289_cstack
    unless $I20, rx289_jump900
    elements $I18, rx289_bstack
    le $I18, 0, rx289_cut901
    dec $I18
    set $I18, rx289_bstack[$I18]
  rx289_cut901:
    assign rx289_cstack, $I18
  rx289_jump900:
    jump $I19
  rx289_done897:
    rx289_cur."!cursor_fail"()
    .return (rx289_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1346233478.067_caps" :subid("cuid_memo_63_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["xblock"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1346233478.067_nfa" :subid("cuid_memo_64_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 117
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 110
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 108
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 101
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 115
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 115
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 4
    push $P527, $P528
    box $P529, 32
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 0
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 0
    push $P531, $P534
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_64_1346233478.067") :anon :lex :outer("cuid_65_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx297_tgt
    .local int rx297_pos
    .local int rx297_off
    .local int rx297_eos
    .local int rx297_rep
    .local pmc rx297_cur
    .local pmc rx297_curclass
    .local pmc rx297_bstack
    .local pmc rx297_cstack
    (rx297_cur, rx297_tgt, rx297_pos, rx297_curclass, rx297_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx297_cur
    length rx297_eos, rx297_tgt
    eq $I19, 1, rx297_restart916
    gt rx297_pos, rx297_eos, rx297_fail917
    repr_get_attr_int $I11, self, rx297_curclass, "$!from"
    ne $I11, -1, rxscan298_done923
    goto rxscan298_scan922
  rxscan298_loop921:
    inc rx297_pos
    gt rx297_pos, rx297_eos, rx297_fail917
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!from", rx297_pos
  rxscan298_scan922:
    nqp_rxmark rx297_bstack, rxscan298_loop921, rx297_pos, 0
  rxscan298_done923:
    add $I11, rx297_pos, 4
    gt $I11, rx297_eos, rx297_fail917
    substr $S10, rx297_tgt, rx297_pos, 4
    ne $S10, ucs4:"else", rx297_fail917
    add rx297_pos, 4
    rx297_cur."!cursor_pass"(rx297_pos, 'backtrack'=>1)
    .return (rx297_cur)
  rx297_restart916:
    repr_get_attr_obj rx297_cstack, rx297_cur, rx297_curclass, "$!cstack"
  rx297_fail917:
    unless rx297_bstack, rx297_done915
    pop $I19, rx297_bstack
    if_null rx297_cstack, rx297_cstack_done920
    unless rx297_cstack, rx297_cstack_done920
    dec $I19
    set $P11, rx297_cstack[$I19]
  rx297_cstack_done920:
    pop rx297_rep, rx297_bstack
    pop rx297_pos, rx297_bstack
    pop $I19, rx297_bstack
    lt rx297_pos, -1, rx297_done915
    lt rx297_pos, 0, rx297_fail917
    eq $I19, 0, rx297_fail917
    nqp_islist $I20, rx297_cstack
    unless $I20, rx297_jump918
    elements $I18, rx297_bstack
    le $I18, 0, rx297_cut919
    dec $I18
    set $I18, rx297_bstack[$I18]
  rx297_cut919:
    assign rx297_cstack, $I18
  rx297_jump918:
    jump $I19
  rx297_done915:
    rx297_cur."!cursor_fail"()
    .return (rx297_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1346233478.067_caps" :subid("cuid_memo_65_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1346233478.067_nfa" :subid("cuid_memo_66_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 101
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 108
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 115
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 101
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_66_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 800
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx304_tgt
    .local int rx304_pos
    .local int rx304_off
    .local int rx304_eos
    .local int rx304_rep
    .local pmc rx304_cur
    .local pmc rx304_curclass
    .local pmc rx304_bstack
    .local pmc rx304_cstack
    (rx304_cur, rx304_tgt, rx304_pos, rx304_curclass, rx304_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx304_cur
    length rx304_eos, rx304_tgt
    eq $I19, 1, rx304_restart932
    gt rx304_pos, rx304_eos, rx304_fail933
    repr_get_attr_int $I11, self, rx304_curclass, "$!from"
    ne $I11, -1, rxscan305_done939
    goto rxscan305_scan938
  rxscan305_loop937:
    inc rx304_pos
    gt rx304_pos, rx304_eos, rx304_fail933
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!from", rx304_pos
  rxscan305_scan938:
    nqp_rxmark rx304_bstack, rxscan305_loop937, rx304_pos, 0
  rxscan305_done939:
    nqp_rxmark rx304_bstack, rxcap306_fail941, rx304_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt307_0943
    nqp_push_label $P11, alt307_1944
    nqp_rxmark rx304_bstack, alt307_end942, -1, 0
    rx304_cur."!alt"(rx304_pos, "alt_nfa__12_1346233481.085", $P11)
    goto rx304_fail933
  alt307_0943:
    add $I11, rx304_pos, 5
    gt $I11, rx304_eos, rx304_fail933
    substr $S10, rx304_tgt, rx304_pos, 5
    ne $S10, ucs4:"while", rx304_fail933
    add rx304_pos, 5
    goto alt307_end942
  alt307_1944:
    add $I11, rx304_pos, 5
    gt $I11, rx304_eos, rx304_fail933
    substr $S10, rx304_tgt, rx304_pos, 5
    ne $S10, ucs4:"until", rx304_fail933
    add rx304_pos, 5
    goto alt307_end942
  alt307_end942:
    nqp_rxcommit rx304_bstack, alt307_end942
    nqp_rxpeek $I19, rx304_bstack, rxcap306_fail941
    inc $I19
    set $I11, rx304_bstack[$I19]
    $P11 = rx304_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx304_pos)
    rx304_cstack = rx304_cur."!cursor_capture"($P11, "sym")
    goto rxcap306_done940
  rxcap306_fail941:
    goto rx304_fail933
  rxcap306_done940:
    ge rx304_pos, rx304_eos, rx304_fail933
    is_cclass $I11, .CCLASS_WHITESPACE, rx304_tgt, rx304_pos
    unless $I11, rx304_fail933
    add rx304_pos, 1
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."ws"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail933
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail933
    nqp_rxmark rx304_bstack, rxsubrule309_pass946, -1, 0
  rxsubrule309_pass946:
    rx304_cstack = rx304_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."ws"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail933
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    rx304_cur."!cursor_pass"(rx304_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx304_cur)
  rx304_restart932:
    repr_get_attr_obj rx304_cstack, rx304_cur, rx304_curclass, "$!cstack"
  rx304_fail933:
    unless rx304_bstack, rx304_done931
    pop $I19, rx304_bstack
    if_null rx304_cstack, rx304_cstack_done936
    unless rx304_cstack, rx304_cstack_done936
    dec $I19
    set $P11, rx304_cstack[$I19]
  rx304_cstack_done936:
    pop rx304_rep, rx304_bstack
    pop rx304_pos, rx304_bstack
    pop $I19, rx304_bstack
    lt rx304_pos, -1, rx304_done931
    lt rx304_pos, 0, rx304_fail933
    eq $I19, 0, rx304_fail933
    nqp_islist $I20, rx304_cstack
    unless $I20, rx304_jump934
    elements $I18, rx304_bstack
    le $I18, 0, rx304_cut935
    dec $I18
    set $I18, rx304_bstack[$I18]
  rx304_cut935:
    assign rx304_cstack, $I18
  rx304_jump934:
    jump $I19
  rx304_done931:
    rx304_cur."!cursor_fail"()
    .return (rx304_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346233478.067_caps" :subid("cuid_memo_67_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["xblock"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346233478.067_nfa" :subid("cuid_memo_68_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 119
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 2
    push $P503, $P507
    box $P508, 117
    push $P503, $P508
    box $P509, 7
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 104
    push $P510, $P512
    box $P513, 3
    push $P510, $P513
    push $P501, $P510
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 105
    push $P514, $P516
    box $P517, 4
    push $P514, $P517
    push $P501, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 2
    push $P518, $P519
    box $P520, 108
    push $P518, $P520
    box $P521, 5
    push $P518, $P521
    push $P501, $P518
    new $P522, 'ResizablePMCArray'
    box $P523, 2
    push $P522, $P523
    box $P524, 101
    push $P522, $P524
    box $P525, 6
    push $P522, $P525
    push $P501, $P522
    new $P526, 'ResizablePMCArray'
    box $P527, 4
    push $P526, $P527
    box $P528, 32
    push $P526, $P528
    box $P529, 11
    push $P526, $P529
    push $P501, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 2
    push $P530, $P531
    box $P532, 110
    push $P530, $P532
    box $P533, 8
    push $P530, $P533
    push $P501, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 116
    push $P534, $P536
    box $P537, 9
    push $P534, $P537
    push $P501, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 105
    push $P538, $P540
    box $P541, 10
    push $P538, $P541
    push $P501, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 108
    push $P542, $P544
    box $P545, 6
    push $P542, $P545
    push $P501, $P542
    new $P546, 'ResizablePMCArray'
    box $P547, 0
    push $P546, $P547
    box $P548, 0
    push $P546, $P548
    box $P549, 0
    push $P546, $P549
    push $P501, $P546
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346233478.067_alt_nfa__12_1346233481.085" :subid("cuid_memo_69_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 119
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 104
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 105
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 108
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 101
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P502, $P520
    push $P501, $P502
    new $P524, 'ResizablePMCArray'
    new $P525, 'ResizablePMCArray'
    push $P524, $P525
    new $P526, 'ResizablePMCArray'
    box $P527, 2
    push $P526, $P527
    box $P528, 117
    push $P526, $P528
    box $P529, 2
    push $P526, $P529
    push $P524, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 2
    push $P530, $P531
    box $P532, 110
    push $P530, $P532
    box $P533, 3
    push $P530, $P533
    push $P524, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 116
    push $P534, $P536
    box $P537, 4
    push $P534, $P537
    push $P524, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 105
    push $P538, $P540
    box $P541, 5
    push $P538, $P541
    push $P524, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 108
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P524, $P542
    push $P501, $P524
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_67_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 805
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx311_tgt
    .local int rx311_pos
    .local int rx311_off
    .local int rx311_eos
    .local int rx311_rep
    .local pmc rx311_cur
    .local pmc rx311_curclass
    .local pmc rx311_bstack
    .local pmc rx311_cstack
    (rx311_cur, rx311_tgt, rx311_pos, rx311_curclass, rx311_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx311_cur
    length rx311_eos, rx311_tgt
    eq $I19, 1, rx311_restart950
    gt rx311_pos, rx311_eos, rx311_fail951
    repr_get_attr_int $I11, self, rx311_curclass, "$!from"
    ne $I11, -1, rxscan312_done957
    goto rxscan312_scan956
  rxscan312_loop955:
    inc rx311_pos
    gt rx311_pos, rx311_eos, rx311_fail951
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!from", rx311_pos
  rxscan312_scan956:
    nqp_rxmark rx311_bstack, rxscan312_loop955, rx311_pos, 0
  rxscan312_done957:
    nqp_rxmark rx311_bstack, rxcap313_fail959, rx311_pos, 0
    add $I11, rx311_pos, 6
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 6
    ne $S10, ucs4:"repeat", rx311_fail951
    add rx311_pos, 6
    nqp_rxpeek $I19, rx311_bstack, rxcap313_fail959
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "sym")
    goto rxcap313_done958
  rxcap313_fail959:
    goto rx311_fail951
  rxcap313_done958:
    ge rx311_pos, rx311_eos, rx311_fail951
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail951
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt315_0962
    nqp_push_label $P11, alt315_1972
    nqp_rxmark rx311_bstack, alt315_end961, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__13_1346233481.12", $P11)
    goto rx311_fail951
  alt315_0962:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    nqp_rxmark rx311_bstack, rxcap317_fail965, rx311_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt318_0967
    nqp_push_label $P11, alt318_1968
    nqp_rxmark rx311_bstack, alt318_end966, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__14_1346233481.12", $P11)
    goto rx311_fail951
  alt318_0967:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"while", rx311_fail951
    add rx311_pos, 5
    goto alt318_end966
  alt318_1968:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"until", rx311_fail951
    add rx311_pos, 5
    goto alt318_end966
  alt318_end966:
    nqp_rxcommit rx311_bstack, alt318_end966
    nqp_rxpeek $I19, rx311_bstack, rxcap317_fail965
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "wu")
    goto rxcap317_done964
  rxcap317_fail965:
    goto rx311_fail951
  rxcap317_done964:
    ge rx311_pos, rx311_eos, rx311_fail951
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail951
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    nqp_rxmark rx311_bstack, rxsubrule320_pass970, -1, 0
  rxsubrule320_pass970:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    goto alt315_end961
  alt315_1972:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    nqp_rxmark rx311_bstack, rxsubrule323_pass974, -1, 0
  rxsubrule323_pass974:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    nqp_rxmark rx311_bstack, rxcap325_fail977, rx311_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt326_0979
    nqp_push_label $P11, alt326_1980
    nqp_rxmark rx311_bstack, alt326_end978, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__15_1346233481.123", $P11)
    goto rx311_fail951
  alt326_0979:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"while", rx311_fail951
    add rx311_pos, 5
    goto alt326_end978
  alt326_1980:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"until", rx311_fail951
    add rx311_pos, 5
    goto alt326_end978
  alt326_end978:
    nqp_rxcommit rx311_bstack, alt326_end978
    nqp_rxpeek $I19, rx311_bstack, rxcap325_fail977
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "wu")
    goto rxcap325_done976
  rxcap325_fail977:
    goto rx311_fail951
  rxcap325_done976:
    ge rx311_pos, rx311_eos, rx311_fail951
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail951
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    nqp_rxmark rx311_bstack, rxsubrule328_pass982, -1, 0
  rxsubrule328_pass982:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    goto alt315_end961
  alt315_end961:
    nqp_rxcommit rx311_bstack, alt315_end961
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    rx311_cur."!cursor_pass"(rx311_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx311_cur)
  rx311_restart950:
    repr_get_attr_obj rx311_cstack, rx311_cur, rx311_curclass, "$!cstack"
  rx311_fail951:
    unless rx311_bstack, rx311_done949
    pop $I19, rx311_bstack
    if_null rx311_cstack, rx311_cstack_done954
    unless rx311_cstack, rx311_cstack_done954
    dec $I19
    set $P11, rx311_cstack[$I19]
  rx311_cstack_done954:
    pop rx311_rep, rx311_bstack
    pop rx311_pos, rx311_bstack
    pop $I19, rx311_bstack
    lt rx311_pos, -1, rx311_done949
    lt rx311_pos, 0, rx311_fail951
    eq $I19, 0, rx311_fail951
    nqp_islist $I20, rx311_cstack
    unless $I20, rx311_jump952
    elements $I18, rx311_bstack
    le $I18, 0, rx311_cut953
    dec $I18
    set $I18, rx311_bstack[$I18]
  rx311_cut953:
    assign rx311_cstack, $I18
  rx311_jump952:
    jump $I19
  rx311_done949:
    rx311_cur."!cursor_fail"()
    .return (rx311_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346233478.067_caps" :subid("cuid_memo_70_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["wu"], $P503
    box $P504, 0
    set $P501["xblock"], $P504
    box $P505, 0
    set $P501["pblock"], $P505
    box $P506, 0
    set $P501["EXPR"], $P506
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346233478.067_nfa" :subid("cuid_memo_71_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 114
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 112
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 101
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 97
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 116
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 4
    push $P527, $P528
    box $P529, 32
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 0
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 0
    push $P531, $P534
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346233478.067_alt_nfa__14_1346233481.12" :subid("cuid_memo_72_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 119
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 104
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 105
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 108
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 101
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P502, $P520
    push $P501, $P502
    new $P524, 'ResizablePMCArray'
    new $P525, 'ResizablePMCArray'
    push $P524, $P525
    new $P526, 'ResizablePMCArray'
    box $P527, 2
    push $P526, $P527
    box $P528, 117
    push $P526, $P528
    box $P529, 2
    push $P526, $P529
    push $P524, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 2
    push $P530, $P531
    box $P532, 110
    push $P530, $P532
    box $P533, 3
    push $P530, $P533
    push $P524, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 116
    push $P534, $P536
    box $P537, 4
    push $P534, $P537
    push $P524, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 105
    push $P538, $P540
    box $P541, 5
    push $P538, $P541
    push $P524, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 108
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P524, $P542
    push $P501, $P524
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346233478.067_alt_nfa__15_1346233481.123" :subid("cuid_memo_73_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 119
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 104
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 105
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 108
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 101
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P502, $P520
    push $P501, $P502
    new $P524, 'ResizablePMCArray'
    new $P525, 'ResizablePMCArray'
    push $P524, $P525
    new $P526, 'ResizablePMCArray'
    box $P527, 2
    push $P526, $P527
    box $P528, 117
    push $P526, $P528
    box $P529, 2
    push $P526, $P529
    push $P524, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 2
    push $P530, $P531
    box $P532, 110
    push $P530, $P532
    box $P533, 3
    push $P530, $P533
    push $P524, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 116
    push $P534, $P536
    box $P537, 4
    push $P534, $P537
    push $P524, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 105
    push $P538, $P540
    box $P541, 5
    push $P538, $P541
    push $P524, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 108
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P524, $P542
    push $P501, $P524
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346233478.067_alt_nfa__13_1346233481.12" :subid("cuid_memo_74_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 0
    push $P504, $P505
    box $P506, 0
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    box $P508, 0
    push $P504, $P508
    box $P509, 0
    push $P504, $P509
    box $P510, 0
    push $P504, $P510
    push $P502, $P504
    push $P501, $P502
    new $P511, 'ResizablePMCArray'
    new $P512, 'ResizablePMCArray'
    push $P511, $P512
    new $P513, 'ResizablePMCArray'
    box $P514, 0
    push $P513, $P514
    box $P515, 0
    push $P513, $P515
    box $P516, 0
    push $P513, $P516
    box $P517, 0
    push $P513, $P517
    box $P518, 0
    push $P513, $P518
    box $P519, 0
    push $P513, $P519
    push $P511, $P513
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_68_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx331_tgt
    .local int rx331_pos
    .local int rx331_off
    .local int rx331_eos
    .local int rx331_rep
    .local pmc rx331_cur
    .local pmc rx331_curclass
    .local pmc rx331_bstack
    .local pmc rx331_cstack
    (rx331_cur, rx331_tgt, rx331_pos, rx331_curclass, rx331_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx331_cur
    length rx331_eos, rx331_tgt
    eq $I19, 1, rx331_restart987
    gt rx331_pos, rx331_eos, rx331_fail988
    repr_get_attr_int $I11, self, rx331_curclass, "$!from"
    ne $I11, -1, rxscan332_done994
    goto rxscan332_scan993
  rxscan332_loop992:
    inc rx331_pos
    gt rx331_pos, rx331_eos, rx331_fail988
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!from", rx331_pos
  rxscan332_scan993:
    nqp_rxmark rx331_bstack, rxscan332_loop992, rx331_pos, 0
  rxscan332_done994:
    nqp_rxmark rx331_bstack, rxcap333_fail996, rx331_pos, 0
    add $I11, rx331_pos, 3
    gt $I11, rx331_eos, rx331_fail988
    substr $S10, rx331_tgt, rx331_pos, 3
    ne $S10, ucs4:"for", rx331_fail988
    add rx331_pos, 3
    nqp_rxpeek $I19, rx331_bstack, rxcap333_fail996
    inc $I19
    set $I11, rx331_bstack[$I19]
    $P11 = rx331_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx331_pos)
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "sym")
    goto rxcap333_done995
  rxcap333_fail996:
    goto rx331_fail988
  rxcap333_done995:
    ge rx331_pos, rx331_eos, rx331_fail988
    is_cclass $I11, .CCLASS_WHITESPACE, rx331_tgt, rx331_pos
    unless $I11, rx331_fail988
    add rx331_pos, 1
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."ws"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail988
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail988
    nqp_rxmark rx331_bstack, rxsubrule335_pass998, -1, 0
  rxsubrule335_pass998:
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."ws"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail988
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    rx331_cur."!cursor_pass"(rx331_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx331_cur)
  rx331_restart987:
    repr_get_attr_obj rx331_cstack, rx331_cur, rx331_curclass, "$!cstack"
  rx331_fail988:
    unless rx331_bstack, rx331_done986
    pop $I19, rx331_bstack
    if_null rx331_cstack, rx331_cstack_done991
    unless rx331_cstack, rx331_cstack_done991
    dec $I19
    set $P11, rx331_cstack[$I19]
  rx331_cstack_done991:
    pop rx331_rep, rx331_bstack
    pop rx331_pos, rx331_bstack
    pop $I19, rx331_bstack
    lt rx331_pos, -1, rx331_done986
    lt rx331_pos, 0, rx331_fail988
    eq $I19, 0, rx331_fail988
    nqp_islist $I20, rx331_cstack
    unless $I20, rx331_jump989
    elements $I18, rx331_bstack
    le $I18, 0, rx331_cut990
    dec $I18
    set $I18, rx331_bstack[$I18]
  rx331_cut990:
    assign rx331_cstack, $I18
  rx331_jump989:
    jump $I19
  rx331_done986:
    rx331_cur."!cursor_fail"()
    .return (rx331_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1346233478.067_caps" :subid("cuid_memo_75_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["xblock"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1346233478.067_nfa" :subid("cuid_memo_76_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 102
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 111
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 114
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 4
    push $P515, $P516
    box $P517, 32
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 0
    push $P519, $P520
    box $P521, 0
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_69_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 818
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx337_tgt
    .local int rx337_pos
    .local int rx337_off
    .local int rx337_eos
    .local int rx337_rep
    .local pmc rx337_cur
    .local pmc rx337_curclass
    .local pmc rx337_bstack
    .local pmc rx337_cstack
    (rx337_cur, rx337_tgt, rx337_pos, rx337_curclass, rx337_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx337_cur
    length rx337_eos, rx337_tgt
    eq $I19, 1, rx337_restart1002
    gt rx337_pos, rx337_eos, rx337_fail1003
    repr_get_attr_int $I11, self, rx337_curclass, "$!from"
    ne $I11, -1, rxscan338_done1009
    goto rxscan338_scan1008
  rxscan338_loop1007:
    inc rx337_pos
    gt rx337_pos, rx337_eos, rx337_fail1003
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!from", rx337_pos
  rxscan338_scan1008:
    nqp_rxmark rx337_bstack, rxscan338_loop1007, rx337_pos, 0
  rxscan338_done1009:
    nqp_rxmark rx337_bstack, rxcap339_fail1011, rx337_pos, 0
    add $I11, rx337_pos, 5
    gt $I11, rx337_eos, rx337_fail1003
    substr $S10, rx337_tgt, rx337_pos, 5
    ne $S10, ucs4:"CATCH", rx337_fail1003
    add rx337_pos, 5
    nqp_rxpeek $I19, rx337_bstack, rxcap339_fail1011
    inc $I19
    set $I11, rx337_bstack[$I19]
    $P11 = rx337_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx337_pos)
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "sym")
    goto rxcap339_done1010
  rxcap339_fail1011:
    goto rx337_fail1003
  rxcap339_done1010:
    ge rx337_pos, rx337_eos, rx337_fail1003
    is_cclass $I11, .CCLASS_WHITESPACE, rx337_tgt, rx337_pos
    unless $I11, rx337_fail1003
    add rx337_pos, 1
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."ws"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1003
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."block"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1003
    nqp_rxmark rx337_bstack, rxsubrule341_pass1013, -1, 0
  rxsubrule341_pass1013:
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."ws"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1003
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    rx337_cur."!cursor_pass"(rx337_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx337_cur)
  rx337_restart1002:
    repr_get_attr_obj rx337_cstack, rx337_cur, rx337_curclass, "$!cstack"
  rx337_fail1003:
    unless rx337_bstack, rx337_done1001
    pop $I19, rx337_bstack
    if_null rx337_cstack, rx337_cstack_done1006
    unless rx337_cstack, rx337_cstack_done1006
    dec $I19
    set $P11, rx337_cstack[$I19]
  rx337_cstack_done1006:
    pop rx337_rep, rx337_bstack
    pop rx337_pos, rx337_bstack
    pop $I19, rx337_bstack
    lt rx337_pos, -1, rx337_done1001
    lt rx337_pos, 0, rx337_fail1003
    eq $I19, 0, rx337_fail1003
    nqp_islist $I20, rx337_cstack
    unless $I20, rx337_jump1004
    elements $I18, rx337_bstack
    le $I18, 0, rx337_cut1005
    dec $I18
    set $I18, rx337_bstack[$I18]
  rx337_cut1005:
    assign rx337_cstack, $I18
  rx337_jump1004:
    jump $I19
  rx337_done1001:
    rx337_cur."!cursor_fail"()
    .return (rx337_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1346233478.067_caps" :subid("cuid_memo_77_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["block"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1346233478.067_nfa" :subid("cuid_memo_78_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 67
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 65
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 84
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 67
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 72
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 4
    push $P523, $P524
    box $P525, 32
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 0
    push $P527, $P528
    box $P529, 0
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P501, $P527
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_70_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 823
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx343_tgt
    .local int rx343_pos
    .local int rx343_off
    .local int rx343_eos
    .local int rx343_rep
    .local pmc rx343_cur
    .local pmc rx343_curclass
    .local pmc rx343_bstack
    .local pmc rx343_cstack
    (rx343_cur, rx343_tgt, rx343_pos, rx343_curclass, rx343_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx343_cur
    length rx343_eos, rx343_tgt
    eq $I19, 1, rx343_restart1017
    gt rx343_pos, rx343_eos, rx343_fail1018
    repr_get_attr_int $I11, self, rx343_curclass, "$!from"
    ne $I11, -1, rxscan344_done1024
    goto rxscan344_scan1023
  rxscan344_loop1022:
    inc rx343_pos
    gt rx343_pos, rx343_eos, rx343_fail1018
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!from", rx343_pos
  rxscan344_scan1023:
    nqp_rxmark rx343_bstack, rxscan344_loop1022, rx343_pos, 0
  rxscan344_done1024:
    nqp_rxmark rx343_bstack, rxcap345_fail1026, rx343_pos, 0
    add $I11, rx343_pos, 7
    gt $I11, rx343_eos, rx343_fail1018
    substr $S10, rx343_tgt, rx343_pos, 7
    ne $S10, ucs4:"CONTROL", rx343_fail1018
    add rx343_pos, 7
    nqp_rxpeek $I19, rx343_bstack, rxcap345_fail1026
    inc $I19
    set $I11, rx343_bstack[$I19]
    $P11 = rx343_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx343_pos)
    rx343_cstack = rx343_cur."!cursor_capture"($P11, "sym")
    goto rxcap345_done1025
  rxcap345_fail1026:
    goto rx343_fail1018
  rxcap345_done1025:
    ge rx343_pos, rx343_eos, rx343_fail1018
    is_cclass $I11, .CCLASS_WHITESPACE, rx343_tgt, rx343_pos
    unless $I11, rx343_fail1018
    add rx343_pos, 1
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."ws"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1018
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."block"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1018
    nqp_rxmark rx343_bstack, rxsubrule347_pass1028, -1, 0
  rxsubrule347_pass1028:
    rx343_cstack = rx343_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."ws"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1018
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    rx343_cur."!cursor_pass"(rx343_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx343_cur)
  rx343_restart1017:
    repr_get_attr_obj rx343_cstack, rx343_cur, rx343_curclass, "$!cstack"
  rx343_fail1018:
    unless rx343_bstack, rx343_done1016
    pop $I19, rx343_bstack
    if_null rx343_cstack, rx343_cstack_done1021
    unless rx343_cstack, rx343_cstack_done1021
    dec $I19
    set $P11, rx343_cstack[$I19]
  rx343_cstack_done1021:
    pop rx343_rep, rx343_bstack
    pop rx343_pos, rx343_bstack
    pop $I19, rx343_bstack
    lt rx343_pos, -1, rx343_done1016
    lt rx343_pos, 0, rx343_fail1018
    eq $I19, 0, rx343_fail1018
    nqp_islist $I20, rx343_cstack
    unless $I20, rx343_jump1019
    elements $I18, rx343_bstack
    le $I18, 0, rx343_cut1020
    dec $I18
    set $I18, rx343_bstack[$I18]
  rx343_cut1020:
    assign rx343_cstack, $I18
  rx343_jump1019:
    jump $I19
  rx343_done1016:
    rx343_cur."!cursor_fail"()
    .return (rx343_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1346233478.067_caps" :subid("cuid_memo_79_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["block"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1346233478.067_nfa" :subid("cuid_memo_80_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 67
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 79
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 78
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 84
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 82
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 79
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 76
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 4
    push $P531, $P532
    box $P533, 32
    push $P531, $P533
    box $P534, 9
    push $P531, $P534
    push $P501, $P531
    new $P535, 'ResizablePMCArray'
    box $P536, 0
    push $P535, $P536
    box $P537, 0
    push $P535, $P537
    box $P538, 0
    push $P535, $P538
    push $P501, $P535
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_71_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 828
    .param pmc self 
    $P501 = self."!protoregex"("statement_prefix")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_72_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 829
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx349_tgt
    .local int rx349_pos
    .local int rx349_off
    .local int rx349_eos
    .local int rx349_rep
    .local pmc rx349_cur
    .local pmc rx349_curclass
    .local pmc rx349_bstack
    .local pmc rx349_cstack
    (rx349_cur, rx349_tgt, rx349_pos, rx349_curclass, rx349_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx349_cur
    length rx349_eos, rx349_tgt
    eq $I19, 1, rx349_restart1032
    gt rx349_pos, rx349_eos, rx349_fail1033
    repr_get_attr_int $I11, self, rx349_curclass, "$!from"
    ne $I11, -1, rxscan350_done1039
    goto rxscan350_scan1038
  rxscan350_loop1037:
    inc rx349_pos
    gt rx349_pos, rx349_eos, rx349_fail1033
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!from", rx349_pos
  rxscan350_scan1038:
    nqp_rxmark rx349_bstack, rxscan350_loop1037, rx349_pos, 0
  rxscan350_done1039:
    nqp_rxmark rx349_bstack, rxcap351_fail1041, rx349_pos, 0
    add $I11, rx349_pos, 5
    gt $I11, rx349_eos, rx349_fail1033
    substr $S10, rx349_tgt, rx349_pos, 5
    ne $S10, ucs4:"BEGIN", rx349_fail1033
    add rx349_pos, 5
    nqp_rxpeek $I19, rx349_bstack, rxcap351_fail1041
    inc $I19
    set $I11, rx349_bstack[$I19]
    $P11 = rx349_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx349_pos)
    rx349_cstack = rx349_cur."!cursor_capture"($P11, "sym")
    goto rxcap351_done1040
  rxcap351_fail1041:
    goto rx349_fail1033
  rxcap351_done1040:
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!pos", rx349_pos
    $P11 = rx349_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx349_curclass, "$!pos"
    lt $I11, 0, rx349_fail1033
    nqp_rxmark rx349_bstack, rxsubrule352_pass1042, -1, 0
  rxsubrule352_pass1042:
    rx349_cstack = rx349_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx349_pos, $P11, rx349_curclass, "$!pos"
    rx349_cur."!cursor_pass"(rx349_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx349_cur)
  rx349_restart1032:
    repr_get_attr_obj rx349_cstack, rx349_cur, rx349_curclass, "$!cstack"
  rx349_fail1033:
    unless rx349_bstack, rx349_done1031
    pop $I19, rx349_bstack
    if_null rx349_cstack, rx349_cstack_done1036
    unless rx349_cstack, rx349_cstack_done1036
    dec $I19
    set $P11, rx349_cstack[$I19]
  rx349_cstack_done1036:
    pop rx349_rep, rx349_bstack
    pop rx349_pos, rx349_bstack
    pop $I19, rx349_bstack
    lt rx349_pos, -1, rx349_done1031
    lt rx349_pos, 0, rx349_fail1033
    eq $I19, 0, rx349_fail1033
    nqp_islist $I20, rx349_cstack
    unless $I20, rx349_jump1034
    elements $I18, rx349_bstack
    le $I18, 0, rx349_cut1035
    dec $I18
    set $I18, rx349_bstack[$I18]
  rx349_cut1035:
    assign rx349_cstack, $I18
  rx349_jump1034:
    jump $I19
  rx349_done1031:
    rx349_cur."!cursor_fail"()
    .return (rx349_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1346233478.067_caps" :subid("cuid_memo_81_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["blorst"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1346233478.067_nfa" :subid("cuid_memo_82_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 66
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 69
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 71
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 73
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 78
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 8
    push $P523, $P524
    box $P525, "blorst"
    push $P523, $P525
    box $P526, 0
    push $P523, $P526
    push $P501, $P523
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_73_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx353_tgt
    .local int rx353_pos
    .local int rx353_off
    .local int rx353_eos
    .local int rx353_rep
    .local pmc rx353_cur
    .local pmc rx353_curclass
    .local pmc rx353_bstack
    .local pmc rx353_cstack
    (rx353_cur, rx353_tgt, rx353_pos, rx353_curclass, rx353_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx353_cur
    length rx353_eos, rx353_tgt
    eq $I19, 1, rx353_restart1045
    gt rx353_pos, rx353_eos, rx353_fail1046
    repr_get_attr_int $I11, self, rx353_curclass, "$!from"
    ne $I11, -1, rxscan354_done1052
    goto rxscan354_scan1051
  rxscan354_loop1050:
    inc rx353_pos
    gt rx353_pos, rx353_eos, rx353_fail1046
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!from", rx353_pos
  rxscan354_scan1051:
    nqp_rxmark rx353_bstack, rxscan354_loop1050, rx353_pos, 0
  rxscan354_done1052:
    nqp_rxmark rx353_bstack, rxcap355_fail1054, rx353_pos, 0
    add $I11, rx353_pos, 4
    gt $I11, rx353_eos, rx353_fail1046
    substr $S10, rx353_tgt, rx353_pos, 4
    ne $S10, ucs4:"INIT", rx353_fail1046
    add rx353_pos, 4
    nqp_rxpeek $I19, rx353_bstack, rxcap355_fail1054
    inc $I19
    set $I11, rx353_bstack[$I19]
    $P11 = rx353_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx353_pos)
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "sym")
    goto rxcap355_done1053
  rxcap355_fail1054:
    goto rx353_fail1046
  rxcap355_done1053:
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx353_curclass, "$!pos"
    lt $I11, 0, rx353_fail1046
    nqp_rxmark rx353_bstack, rxsubrule356_pass1055, -1, 0
  rxsubrule356_pass1055:
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx353_pos, $P11, rx353_curclass, "$!pos"
    rx353_cur."!cursor_pass"(rx353_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx353_cur)
  rx353_restart1045:
    repr_get_attr_obj rx353_cstack, rx353_cur, rx353_curclass, "$!cstack"
  rx353_fail1046:
    unless rx353_bstack, rx353_done1044
    pop $I19, rx353_bstack
    if_null rx353_cstack, rx353_cstack_done1049
    unless rx353_cstack, rx353_cstack_done1049
    dec $I19
    set $P11, rx353_cstack[$I19]
  rx353_cstack_done1049:
    pop rx353_rep, rx353_bstack
    pop rx353_pos, rx353_bstack
    pop $I19, rx353_bstack
    lt rx353_pos, -1, rx353_done1044
    lt rx353_pos, 0, rx353_fail1046
    eq $I19, 0, rx353_fail1046
    nqp_islist $I20, rx353_cstack
    unless $I20, rx353_jump1047
    elements $I18, rx353_bstack
    le $I18, 0, rx353_cut1048
    dec $I18
    set $I18, rx353_bstack[$I18]
  rx353_cut1048:
    assign rx353_cstack, $I18
  rx353_jump1047:
    jump $I19
  rx353_done1044:
    rx353_cur."!cursor_fail"()
    .return (rx353_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1346233478.067_caps" :subid("cuid_memo_83_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["blorst"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1346233478.067_nfa" :subid("cuid_memo_84_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 73
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 78
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 73
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 84
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 8
    push $P519, $P520
    box $P521, "blorst"
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_74_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 832
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx357_tgt
    .local int rx357_pos
    .local int rx357_off
    .local int rx357_eos
    .local int rx357_rep
    .local pmc rx357_cur
    .local pmc rx357_curclass
    .local pmc rx357_bstack
    .local pmc rx357_cstack
    (rx357_cur, rx357_tgt, rx357_pos, rx357_curclass, rx357_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx357_cur
    length rx357_eos, rx357_tgt
    eq $I19, 1, rx357_restart1058
    gt rx357_pos, rx357_eos, rx357_fail1059
    repr_get_attr_int $I11, self, rx357_curclass, "$!from"
    ne $I11, -1, rxscan358_done1065
    goto rxscan358_scan1064
  rxscan358_loop1063:
    inc rx357_pos
    gt rx357_pos, rx357_eos, rx357_fail1059
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!from", rx357_pos
  rxscan358_scan1064:
    nqp_rxmark rx357_bstack, rxscan358_loop1063, rx357_pos, 0
  rxscan358_done1065:
    nqp_rxmark rx357_bstack, rxcap359_fail1067, rx357_pos, 0
    add $I11, rx357_pos, 3
    gt $I11, rx357_eos, rx357_fail1059
    substr $S10, rx357_tgt, rx357_pos, 3
    ne $S10, ucs4:"try", rx357_fail1059
    add rx357_pos, 3
    nqp_rxpeek $I19, rx357_bstack, rxcap359_fail1067
    inc $I19
    set $I11, rx357_bstack[$I19]
    $P11 = rx357_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx357_pos)
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "sym")
    goto rxcap359_done1066
  rxcap359_fail1067:
    goto rx357_fail1059
  rxcap359_done1066:
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail1059
    nqp_rxmark rx357_bstack, rxsubrule360_pass1068, -1, 0
  rxsubrule360_pass1068:
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx357_pos, $P11, rx357_curclass, "$!pos"
    rx357_cur."!cursor_pass"(rx357_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx357_cur)
  rx357_restart1058:
    repr_get_attr_obj rx357_cstack, rx357_cur, rx357_curclass, "$!cstack"
  rx357_fail1059:
    unless rx357_bstack, rx357_done1057
    pop $I19, rx357_bstack
    if_null rx357_cstack, rx357_cstack_done1062
    unless rx357_cstack, rx357_cstack_done1062
    dec $I19
    set $P11, rx357_cstack[$I19]
  rx357_cstack_done1062:
    pop rx357_rep, rx357_bstack
    pop rx357_pos, rx357_bstack
    pop $I19, rx357_bstack
    lt rx357_pos, -1, rx357_done1057
    lt rx357_pos, 0, rx357_fail1059
    eq $I19, 0, rx357_fail1059
    nqp_islist $I20, rx357_cstack
    unless $I20, rx357_jump1060
    elements $I18, rx357_bstack
    le $I18, 0, rx357_cut1061
    dec $I18
    set $I18, rx357_bstack[$I18]
  rx357_cut1061:
    assign rx357_cstack, $I18
  rx357_jump1060:
    jump $I19
  rx357_done1057:
    rx357_cur."!cursor_fail"()
    .return (rx357_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1346233478.067_caps" :subid("cuid_memo_85_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["blorst"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1346233478.067_nfa" :subid("cuid_memo_86_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 116
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 114
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 121
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "blorst"
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_75_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx361_tgt
    .local int rx361_pos
    .local int rx361_off
    .local int rx361_eos
    .local int rx361_rep
    .local pmc rx361_cur
    .local pmc rx361_curclass
    .local pmc rx361_bstack
    .local pmc rx361_cstack
    (rx361_cur, rx361_tgt, rx361_pos, rx361_curclass, rx361_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx361_cur
    length rx361_eos, rx361_tgt
    eq $I19, 1, rx361_restart1071
    gt rx361_pos, rx361_eos, rx361_fail1072
    repr_get_attr_int $I11, self, rx361_curclass, "$!from"
    ne $I11, -1, rxscan362_done1078
    goto rxscan362_scan1077
  rxscan362_loop1076:
    inc rx361_pos
    gt rx361_pos, rx361_eos, rx361_fail1072
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!from", rx361_pos
  rxscan362_scan1077:
    nqp_rxmark rx361_bstack, rxscan362_loop1076, rx361_pos, 0
  rxscan362_done1078:
    ge rx361_pos, rx361_eos, rx361_fail1072
    is_cclass $I11, .CCLASS_WHITESPACE, rx361_tgt, rx361_pos
    unless $I11, rx361_fail1072
    add rx361_pos, 1
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."ws"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1072
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt364_01081
    nqp_push_label $P11, alt364_11083
    nqp_rxmark rx361_bstack, alt364_end1080, -1, 0
    rx361_cur."!alt"(rx361_pos, "alt_nfa__16_1346233481.218", $P11)
    goto rx361_fail1072
  alt364_01081:
    ge rx361_pos, rx361_eos, rx361_fail1072
    substr $S11, rx361_tgt, rx361_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx361_fail1072
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."block"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1072
    nqp_rxmark rx361_bstack, rxsubrule365_pass1082, -1, 0
  rxsubrule365_pass1082:
    rx361_cstack = rx361_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    goto alt364_end1080
  alt364_11083:
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."statement"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1072
    nqp_rxmark rx361_bstack, rxsubrule366_pass1084, -1, 0
  rxsubrule366_pass1084:
    rx361_cstack = rx361_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    goto alt364_end1080
  alt364_end1080:
    nqp_rxcommit rx361_bstack, alt364_end1080
    rx361_cur."!cursor_pass"(rx361_pos, "blorst", 'backtrack'=>1)
    .return (rx361_cur)
  rx361_restart1071:
    repr_get_attr_obj rx361_cstack, rx361_cur, rx361_curclass, "$!cstack"
  rx361_fail1072:
    unless rx361_bstack, rx361_done1070
    pop $I19, rx361_bstack
    if_null rx361_cstack, rx361_cstack_done1075
    unless rx361_cstack, rx361_cstack_done1075
    dec $I19
    set $P11, rx361_cstack[$I19]
  rx361_cstack_done1075:
    pop rx361_rep, rx361_bstack
    pop rx361_pos, rx361_bstack
    pop $I19, rx361_bstack
    lt rx361_pos, -1, rx361_done1070
    lt rx361_pos, 0, rx361_fail1072
    eq $I19, 0, rx361_fail1072
    nqp_islist $I20, rx361_cstack
    unless $I20, rx361_jump1073
    elements $I18, rx361_bstack
    le $I18, 0, rx361_cut1074
    dec $I18
    set $I18, rx361_bstack[$I18]
  rx361_cut1074:
    assign rx361_cstack, $I18
  rx361_jump1073:
    jump $I19
  rx361_done1070:
    rx361_cur."!cursor_fail"()
    .return (rx361_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346233478.067_caps" :subid("cuid_memo_87_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["block"], $P502
    box $P503, 0
    set $P501["statement"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346233478.067_nfa" :subid("cuid_memo_88_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 4
    push $P503, $P504
    box $P505, 32
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "ws"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 6
    push $P511, $P512
    box $P513, "{"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    box $P515, 8
    push $P511, $P515
    box $P516, "statement"
    push $P511, $P516
    box $P517, 0
    push $P511, $P517
    push $P501, $P511
    new $P518, 'ResizablePMCArray'
    box $P519, 0
    push $P518, $P519
    box $P520, 0
    push $P518, $P520
    box $P521, 0
    push $P518, $P521
    push $P501, $P518
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346233478.067_alt_nfa__16_1346233481.218" :subid("cuid_memo_89_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 6
    push $P504, $P505
    box $P506, "{"
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 0
    push $P508, $P509
    box $P510, 0
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 8
    push $P514, $P515
    box $P516, "statement"
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    push $P512, $P514
    push $P501, $P512
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_76_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 843
    .param pmc self 
    $P501 = self."!protoregex"("statement_mod_cond")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_77_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 845
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx367_tgt
    .local int rx367_pos
    .local int rx367_off
    .local int rx367_eos
    .local int rx367_rep
    .local pmc rx367_cur
    .local pmc rx367_curclass
    .local pmc rx367_bstack
    .local pmc rx367_cstack
    (rx367_cur, rx367_tgt, rx367_pos, rx367_curclass, rx367_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx367_cur
    length rx367_eos, rx367_tgt
    eq $I19, 1, rx367_restart1087
    gt rx367_pos, rx367_eos, rx367_fail1088
    repr_get_attr_int $I11, self, rx367_curclass, "$!from"
    ne $I11, -1, rxscan368_done1094
    goto rxscan368_scan1093
  rxscan368_loop1092:
    inc rx367_pos
    gt rx367_pos, rx367_eos, rx367_fail1088
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!from", rx367_pos
  rxscan368_scan1093:
    nqp_rxmark rx367_bstack, rxscan368_loop1092, rx367_pos, 0
  rxscan368_done1094:
    nqp_rxmark rx367_bstack, rxcap369_fail1096, rx367_pos, 0
    add $I11, rx367_pos, 2
    gt $I11, rx367_eos, rx367_fail1088
    substr $S10, rx367_tgt, rx367_pos, 2
    ne $S10, ucs4:"if", rx367_fail1088
    add rx367_pos, 2
    nqp_rxpeek $I19, rx367_bstack, rxcap369_fail1096
    inc $I19
    set $I11, rx367_bstack[$I19]
    $P11 = rx367_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx367_pos)
    rx367_cstack = rx367_cur."!cursor_capture"($P11, "sym")
    goto rxcap369_done1095
  rxcap369_fail1096:
    goto rx367_fail1088
  rxcap369_done1095:
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."ws"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1088
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1088
    nqp_rxmark rx367_bstack, rxsubrule371_pass1098, -1, 0
  rxsubrule371_pass1098:
    rx367_cstack = rx367_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."ws"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1088
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    rx367_cur."!cursor_pass"(rx367_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx367_cur)
  rx367_restart1087:
    repr_get_attr_obj rx367_cstack, rx367_cur, rx367_curclass, "$!cstack"
  rx367_fail1088:
    unless rx367_bstack, rx367_done1086
    pop $I19, rx367_bstack
    if_null rx367_cstack, rx367_cstack_done1091
    unless rx367_cstack, rx367_cstack_done1091
    dec $I19
    set $P11, rx367_cstack[$I19]
  rx367_cstack_done1091:
    pop rx367_rep, rx367_bstack
    pop rx367_pos, rx367_bstack
    pop $I19, rx367_bstack
    lt rx367_pos, -1, rx367_done1086
    lt rx367_pos, 0, rx367_fail1088
    eq $I19, 0, rx367_fail1088
    nqp_islist $I20, rx367_cstack
    unless $I20, rx367_jump1089
    elements $I18, rx367_bstack
    le $I18, 0, rx367_cut1090
    dec $I18
    set $I18, rx367_bstack[$I18]
  rx367_cut1090:
    assign rx367_cstack, $I18
  rx367_jump1089:
    jump $I19
  rx367_done1086:
    rx367_cur."!cursor_fail"()
    .return (rx367_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1346233478.067_caps" :subid("cuid_memo_90_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["cond"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1346233478.067_nfa" :subid("cuid_memo_91_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 105
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 102
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 0
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_78_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 846
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx373_tgt
    .local int rx373_pos
    .local int rx373_off
    .local int rx373_eos
    .local int rx373_rep
    .local pmc rx373_cur
    .local pmc rx373_curclass
    .local pmc rx373_bstack
    .local pmc rx373_cstack
    (rx373_cur, rx373_tgt, rx373_pos, rx373_curclass, rx373_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx373_cur
    length rx373_eos, rx373_tgt
    eq $I19, 1, rx373_restart1102
    gt rx373_pos, rx373_eos, rx373_fail1103
    repr_get_attr_int $I11, self, rx373_curclass, "$!from"
    ne $I11, -1, rxscan374_done1109
    goto rxscan374_scan1108
  rxscan374_loop1107:
    inc rx373_pos
    gt rx373_pos, rx373_eos, rx373_fail1103
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!from", rx373_pos
  rxscan374_scan1108:
    nqp_rxmark rx373_bstack, rxscan374_loop1107, rx373_pos, 0
  rxscan374_done1109:
    nqp_rxmark rx373_bstack, rxcap375_fail1111, rx373_pos, 0
    add $I11, rx373_pos, 6
    gt $I11, rx373_eos, rx373_fail1103
    substr $S10, rx373_tgt, rx373_pos, 6
    ne $S10, ucs4:"unless", rx373_fail1103
    add rx373_pos, 6
    nqp_rxpeek $I19, rx373_bstack, rxcap375_fail1111
    inc $I19
    set $I11, rx373_bstack[$I19]
    $P11 = rx373_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx373_pos)
    rx373_cstack = rx373_cur."!cursor_capture"($P11, "sym")
    goto rxcap375_done1110
  rxcap375_fail1111:
    goto rx373_fail1103
  rxcap375_done1110:
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."ws"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1103
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1103
    nqp_rxmark rx373_bstack, rxsubrule377_pass1113, -1, 0
  rxsubrule377_pass1113:
    rx373_cstack = rx373_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."ws"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1103
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    rx373_cur."!cursor_pass"(rx373_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx373_cur)
  rx373_restart1102:
    repr_get_attr_obj rx373_cstack, rx373_cur, rx373_curclass, "$!cstack"
  rx373_fail1103:
    unless rx373_bstack, rx373_done1101
    pop $I19, rx373_bstack
    if_null rx373_cstack, rx373_cstack_done1106
    unless rx373_cstack, rx373_cstack_done1106
    dec $I19
    set $P11, rx373_cstack[$I19]
  rx373_cstack_done1106:
    pop rx373_rep, rx373_bstack
    pop rx373_pos, rx373_bstack
    pop $I19, rx373_bstack
    lt rx373_pos, -1, rx373_done1101
    lt rx373_pos, 0, rx373_fail1103
    eq $I19, 0, rx373_fail1103
    nqp_islist $I20, rx373_cstack
    unless $I20, rx373_jump1104
    elements $I18, rx373_bstack
    le $I18, 0, rx373_cut1105
    dec $I18
    set $I18, rx373_bstack[$I18]
  rx373_cut1105:
    assign rx373_cstack, $I18
  rx373_jump1104:
    jump $I19
  rx373_done1101:
    rx373_cur."!cursor_fail"()
    .return (rx373_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1346233478.067_caps" :subid("cuid_memo_92_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["cond"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1346233478.067_nfa" :subid("cuid_memo_93_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 117
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 110
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 108
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 101
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 115
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 115
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 0
    push $P527, $P528
    box $P529, 0
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P501, $P527
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_79_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    .param pmc self 
    $P501 = self."!protoregex"("statement_mod_loop")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_80_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 850
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_curclass
    .local pmc rx379_bstack
    .local pmc rx379_cstack
    (rx379_cur, rx379_tgt, rx379_pos, rx379_curclass, rx379_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx379_cur
    length rx379_eos, rx379_tgt
    eq $I19, 1, rx379_restart1117
    gt rx379_pos, rx379_eos, rx379_fail1118
    repr_get_attr_int $I11, self, rx379_curclass, "$!from"
    ne $I11, -1, rxscan380_done1124
    goto rxscan380_scan1123
  rxscan380_loop1122:
    inc rx379_pos
    gt rx379_pos, rx379_eos, rx379_fail1118
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!from", rx379_pos
  rxscan380_scan1123:
    nqp_rxmark rx379_bstack, rxscan380_loop1122, rx379_pos, 0
  rxscan380_done1124:
    nqp_rxmark rx379_bstack, rxcap381_fail1126, rx379_pos, 0
    add $I11, rx379_pos, 5
    gt $I11, rx379_eos, rx379_fail1118
    substr $S10, rx379_tgt, rx379_pos, 5
    ne $S10, ucs4:"while", rx379_fail1118
    add rx379_pos, 5
    nqp_rxpeek $I19, rx379_bstack, rxcap381_fail1126
    inc $I19
    set $I11, rx379_bstack[$I19]
    $P11 = rx379_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx379_pos)
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "sym")
    goto rxcap381_done1125
  rxcap381_fail1126:
    goto rx379_fail1118
  rxcap381_done1125:
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."ws"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1118
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1118
    nqp_rxmark rx379_bstack, rxsubrule383_pass1128, -1, 0
  rxsubrule383_pass1128:
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."ws"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1118
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    rx379_cur."!cursor_pass"(rx379_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx379_cur)
  rx379_restart1117:
    repr_get_attr_obj rx379_cstack, rx379_cur, rx379_curclass, "$!cstack"
  rx379_fail1118:
    unless rx379_bstack, rx379_done1116
    pop $I19, rx379_bstack
    if_null rx379_cstack, rx379_cstack_done1121
    unless rx379_cstack, rx379_cstack_done1121
    dec $I19
    set $P11, rx379_cstack[$I19]
  rx379_cstack_done1121:
    pop rx379_rep, rx379_bstack
    pop rx379_pos, rx379_bstack
    pop $I19, rx379_bstack
    lt rx379_pos, -1, rx379_done1116
    lt rx379_pos, 0, rx379_fail1118
    eq $I19, 0, rx379_fail1118
    nqp_islist $I20, rx379_cstack
    unless $I20, rx379_jump1119
    elements $I18, rx379_bstack
    le $I18, 0, rx379_cut1120
    dec $I18
    set $I18, rx379_bstack[$I18]
  rx379_cut1120:
    assign rx379_cstack, $I18
  rx379_jump1119:
    jump $I19
  rx379_done1116:
    rx379_cur."!cursor_fail"()
    .return (rx379_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1346233478.067_caps" :subid("cuid_memo_94_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["cond"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1346233478.067_nfa" :subid("cuid_memo_95_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 119
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 104
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 105
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 108
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 101
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 0
    push $P523, $P524
    box $P525, 0
    push $P523, $P525
    box $P526, 0
    push $P523, $P526
    push $P501, $P523
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_81_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx385_tgt
    .local int rx385_pos
    .local int rx385_off
    .local int rx385_eos
    .local int rx385_rep
    .local pmc rx385_cur
    .local pmc rx385_curclass
    .local pmc rx385_bstack
    .local pmc rx385_cstack
    (rx385_cur, rx385_tgt, rx385_pos, rx385_curclass, rx385_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx385_cur
    length rx385_eos, rx385_tgt
    eq $I19, 1, rx385_restart1132
    gt rx385_pos, rx385_eos, rx385_fail1133
    repr_get_attr_int $I11, self, rx385_curclass, "$!from"
    ne $I11, -1, rxscan386_done1139
    goto rxscan386_scan1138
  rxscan386_loop1137:
    inc rx385_pos
    gt rx385_pos, rx385_eos, rx385_fail1133
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!from", rx385_pos
  rxscan386_scan1138:
    nqp_rxmark rx385_bstack, rxscan386_loop1137, rx385_pos, 0
  rxscan386_done1139:
    nqp_rxmark rx385_bstack, rxcap387_fail1141, rx385_pos, 0
    add $I11, rx385_pos, 5
    gt $I11, rx385_eos, rx385_fail1133
    substr $S10, rx385_tgt, rx385_pos, 5
    ne $S10, ucs4:"until", rx385_fail1133
    add rx385_pos, 5
    nqp_rxpeek $I19, rx385_bstack, rxcap387_fail1141
    inc $I19
    set $I11, rx385_bstack[$I19]
    $P11 = rx385_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx385_pos)
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "sym")
    goto rxcap387_done1140
  rxcap387_fail1141:
    goto rx385_fail1133
  rxcap387_done1140:
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."ws"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1133
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1133
    nqp_rxmark rx385_bstack, rxsubrule389_pass1143, -1, 0
  rxsubrule389_pass1143:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."ws"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1133
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    rx385_cur."!cursor_pass"(rx385_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx385_cur)
  rx385_restart1132:
    repr_get_attr_obj rx385_cstack, rx385_cur, rx385_curclass, "$!cstack"
  rx385_fail1133:
    unless rx385_bstack, rx385_done1131
    pop $I19, rx385_bstack
    if_null rx385_cstack, rx385_cstack_done1136
    unless rx385_cstack, rx385_cstack_done1136
    dec $I19
    set $P11, rx385_cstack[$I19]
  rx385_cstack_done1136:
    pop rx385_rep, rx385_bstack
    pop rx385_pos, rx385_bstack
    pop $I19, rx385_bstack
    lt rx385_pos, -1, rx385_done1131
    lt rx385_pos, 0, rx385_fail1133
    eq $I19, 0, rx385_fail1133
    nqp_islist $I20, rx385_cstack
    unless $I20, rx385_jump1134
    elements $I18, rx385_bstack
    le $I18, 0, rx385_cut1135
    dec $I18
    set $I18, rx385_bstack[$I18]
  rx385_cut1135:
    assign rx385_cstack, $I18
  rx385_jump1134:
    jump $I19
  rx385_done1131:
    rx385_cur."!cursor_fail"()
    .return (rx385_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1346233478.067_caps" :subid("cuid_memo_96_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["cond"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1346233478.067_nfa" :subid("cuid_memo_97_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 117
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 110
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 116
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 105
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 108
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 0
    push $P523, $P524
    box $P525, 0
    push $P523, $P525
    box $P526, 0
    push $P523, $P526
    push $P501, $P523
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_82_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    (rx391_cur, rx391_tgt, rx391_pos, rx391_curclass, rx391_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart1147
    gt rx391_pos, rx391_eos, rx391_fail1148
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done1154
    goto rxscan392_scan1153
  rxscan392_loop1152:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail1148
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan1153:
    nqp_rxmark rx391_bstack, rxscan392_loop1152, rx391_pos, 0
  rxscan392_done1154:
    nqp_rxmark rx391_bstack, rxcap393_fail1156, rx391_pos, 0
    add $I11, rx391_pos, 3
    gt $I11, rx391_eos, rx391_fail1148
    substr $S10, rx391_tgt, rx391_pos, 3
    ne $S10, ucs4:"for", rx391_fail1148
    add rx391_pos, 3
    nqp_rxpeek $I19, rx391_bstack, rxcap393_fail1156
    inc $I19
    set $I11, rx391_bstack[$I19]
    $P11 = rx391_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx391_pos)
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "sym")
    goto rxcap393_done1155
  rxcap393_fail1156:
    goto rx391_fail1148
  rxcap393_done1155:
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."ws"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1148
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1148
    nqp_rxmark rx391_bstack, rxsubrule395_pass1158, -1, 0
  rxsubrule395_pass1158:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."ws"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1148
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    rx391_cur."!cursor_pass"(rx391_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart1147:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail1148:
    unless rx391_bstack, rx391_done1146
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done1151
    unless rx391_cstack, rx391_cstack_done1151
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done1151:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done1146
    lt rx391_pos, 0, rx391_fail1148
    eq $I19, 0, rx391_fail1148
    nqp_islist $I20, rx391_cstack
    unless $I20, rx391_jump1149
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut1150
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut1150:
    assign rx391_cstack, $I18
  rx391_jump1149:
    jump $I19
  rx391_done1146:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1346233478.067_caps" :subid("cuid_memo_98_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["cond"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1346233478.067_nfa" :subid("cuid_memo_99_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 102
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 111
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 114
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 0
    push $P515, $P516
    box $P517, 0
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_83_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 856
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx397_tgt
    .local int rx397_pos
    .local int rx397_off
    .local int rx397_eos
    .local int rx397_rep
    .local pmc rx397_cur
    .local pmc rx397_curclass
    .local pmc rx397_bstack
    .local pmc rx397_cstack
    (rx397_cur, rx397_tgt, rx397_pos, rx397_curclass, rx397_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx397_cur
    length rx397_eos, rx397_tgt
    eq $I19, 1, rx397_restart1162
    gt rx397_pos, rx397_eos, rx397_fail1163
    repr_get_attr_int $I11, self, rx397_curclass, "$!from"
    ne $I11, -1, rxscan398_done1169
    goto rxscan398_scan1168
  rxscan398_loop1167:
    inc rx397_pos
    gt rx397_pos, rx397_eos, rx397_fail1163
    repr_bind_attr_int rx397_cur, rx397_curclass, "$!from", rx397_pos
  rxscan398_scan1168:
    nqp_rxmark rx397_bstack, rxscan398_loop1167, rx397_pos, 0
  rxscan398_done1169:
    repr_bind_attr_int rx397_cur, rx397_curclass, "$!pos", rx397_pos
    $P11 = rx397_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx397_curclass, "$!pos"
    lt $I11, 0, rx397_fail1163
    nqp_rxmark rx397_bstack, rxsubrule399_pass1170, -1, 0
  rxsubrule399_pass1170:
    rx397_cstack = rx397_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx397_pos, $P11, rx397_curclass, "$!pos"
    rx397_cur."!cursor_pass"(rx397_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx397_cur)
  rx397_restart1162:
    repr_get_attr_obj rx397_cstack, rx397_cur, rx397_curclass, "$!cstack"
  rx397_fail1163:
    unless rx397_bstack, rx397_done1161
    pop $I19, rx397_bstack
    if_null rx397_cstack, rx397_cstack_done1166
    unless rx397_cstack, rx397_cstack_done1166
    dec $I19
    set $P11, rx397_cstack[$I19]
  rx397_cstack_done1166:
    pop rx397_rep, rx397_bstack
    pop rx397_pos, rx397_bstack
    pop $I19, rx397_bstack
    lt rx397_pos, -1, rx397_done1161
    lt rx397_pos, 0, rx397_fail1163
    eq $I19, 0, rx397_fail1163
    nqp_islist $I20, rx397_cstack
    unless $I20, rx397_jump1164
    elements $I18, rx397_bstack
    le $I18, 0, rx397_cut1165
    dec $I18
    set $I18, rx397_bstack[$I18]
  rx397_cut1165:
    assign rx397_cstack, $I18
  rx397_jump1164:
    jump $I19
  rx397_done1161:
    rx397_cur."!cursor_fail"()
    .return (rx397_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1346233478.067_caps" :subid("cuid_memo_100_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["fatarrow"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1346233478.067_nfa" :subid("cuid_memo_101_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "fatarrow"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_84_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    (rx400_cur, rx400_tgt, rx400_pos, rx400_curclass, rx400_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1173
    gt rx400_pos, rx400_eos, rx400_fail1174
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1180
    goto rxscan401_scan1179
  rxscan401_loop1178:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1174
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1179:
    nqp_rxmark rx400_bstack, rxscan401_loop1178, rx400_pos, 0
  rxscan401_done1180:
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1174
    nqp_rxmark rx400_bstack, rxsubrule402_pass1181, -1, 0
  rxsubrule402_pass1181:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    rx400_cur."!cursor_pass"(rx400_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1173:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1174:
    unless rx400_bstack, rx400_done1172
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1177
    unless rx400_cstack, rx400_cstack_done1177
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1177:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1172
    lt rx400_pos, 0, rx400_fail1174
    eq $I19, 0, rx400_fail1174
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1175
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1176
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1176:
    assign rx400_cstack, $I18
  rx400_jump1175:
    jump $I19
  rx400_done1172:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1346233478.067_caps" :subid("cuid_memo_102_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["colonpair"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1346233478.067_nfa" :subid("cuid_memo_103_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "colonpair"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_85_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 858
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx403_tgt
    .local int rx403_pos
    .local int rx403_off
    .local int rx403_eos
    .local int rx403_rep
    .local pmc rx403_cur
    .local pmc rx403_curclass
    .local pmc rx403_bstack
    .local pmc rx403_cstack
    (rx403_cur, rx403_tgt, rx403_pos, rx403_curclass, rx403_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx403_cur
    length rx403_eos, rx403_tgt
    eq $I19, 1, rx403_restart1184
    gt rx403_pos, rx403_eos, rx403_fail1185
    repr_get_attr_int $I11, self, rx403_curclass, "$!from"
    ne $I11, -1, rxscan404_done1191
    goto rxscan404_scan1190
  rxscan404_loop1189:
    inc rx403_pos
    gt rx403_pos, rx403_eos, rx403_fail1185
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!from", rx403_pos
  rxscan404_scan1190:
    nqp_rxmark rx403_bstack, rxscan404_loop1189, rx403_pos, 0
  rxscan404_done1191:
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    $P11 = rx403_cur."variable"()
    repr_get_attr_int $I11, $P11, rx403_curclass, "$!pos"
    lt $I11, 0, rx403_fail1185
    nqp_rxmark rx403_bstack, rxsubrule405_pass1192, -1, 0
  rxsubrule405_pass1192:
    rx403_cstack = rx403_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx403_pos, $P11, rx403_curclass, "$!pos"
    rx403_cur."!cursor_pass"(rx403_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx403_cur)
  rx403_restart1184:
    repr_get_attr_obj rx403_cstack, rx403_cur, rx403_curclass, "$!cstack"
  rx403_fail1185:
    unless rx403_bstack, rx403_done1183
    pop $I19, rx403_bstack
    if_null rx403_cstack, rx403_cstack_done1188
    unless rx403_cstack, rx403_cstack_done1188
    dec $I19
    set $P11, rx403_cstack[$I19]
  rx403_cstack_done1188:
    pop rx403_rep, rx403_bstack
    pop rx403_pos, rx403_bstack
    pop $I19, rx403_bstack
    lt rx403_pos, -1, rx403_done1183
    lt rx403_pos, 0, rx403_fail1185
    eq $I19, 0, rx403_fail1185
    nqp_islist $I20, rx403_cstack
    unless $I20, rx403_jump1186
    elements $I18, rx403_bstack
    le $I18, 0, rx403_cut1187
    dec $I18
    set $I18, rx403_bstack[$I18]
  rx403_cut1187:
    assign rx403_cstack, $I18
  rx403_jump1186:
    jump $I19
  rx403_done1183:
    rx403_cur."!cursor_fail"()
    .return (rx403_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1346233478.067_caps" :subid("cuid_memo_104_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["variable"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1346233478.067_nfa" :subid("cuid_memo_105_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "variable"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_86_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    (rx406_cur, rx406_tgt, rx406_pos, rx406_curclass, rx406_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1195
    gt rx406_pos, rx406_eos, rx406_fail1196
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1202
    goto rxscan407_scan1201
  rxscan407_loop1200:
    inc rx406_pos
    gt rx406_pos, rx406_eos, rx406_fail1196
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1201:
    nqp_rxmark rx406_bstack, rxscan407_loop1200, rx406_pos, 0
  rxscan407_done1202:
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1196
    nqp_rxmark rx406_bstack, rxsubrule408_pass1203, -1, 0
  rxsubrule408_pass1203:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    rx406_cur."!cursor_pass"(rx406_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1195:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1196:
    unless rx406_bstack, rx406_done1194
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1199
    unless rx406_cstack, rx406_cstack_done1199
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1199:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1194
    lt rx406_pos, 0, rx406_fail1196
    eq $I19, 0, rx406_fail1196
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1197
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1198
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1198:
    assign rx406_cstack, $I18
  rx406_jump1197:
    jump $I19
  rx406_done1194:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1346233478.067_caps" :subid("cuid_memo_106_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["package_declarator"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1346233478.067_nfa" :subid("cuid_memo_107_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "package_declarator"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_87_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 860
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx409_tgt
    .local int rx409_pos
    .local int rx409_off
    .local int rx409_eos
    .local int rx409_rep
    .local pmc rx409_cur
    .local pmc rx409_curclass
    .local pmc rx409_bstack
    .local pmc rx409_cstack
    (rx409_cur, rx409_tgt, rx409_pos, rx409_curclass, rx409_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx409_cur
    length rx409_eos, rx409_tgt
    eq $I19, 1, rx409_restart1206
    gt rx409_pos, rx409_eos, rx409_fail1207
    repr_get_attr_int $I11, self, rx409_curclass, "$!from"
    ne $I11, -1, rxscan410_done1213
    goto rxscan410_scan1212
  rxscan410_loop1211:
    inc rx409_pos
    gt rx409_pos, rx409_eos, rx409_fail1207
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!from", rx409_pos
  rxscan410_scan1212:
    nqp_rxmark rx409_bstack, rxscan410_loop1211, rx409_pos, 0
  rxscan410_done1213:
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!pos", rx409_pos
    $P11 = rx409_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx409_curclass, "$!pos"
    lt $I11, 0, rx409_fail1207
    nqp_rxmark rx409_bstack, rxsubrule411_pass1214, -1, 0
  rxsubrule411_pass1214:
    rx409_cstack = rx409_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx409_pos, $P11, rx409_curclass, "$!pos"
    rx409_cur."!cursor_pass"(rx409_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx409_cur)
  rx409_restart1206:
    repr_get_attr_obj rx409_cstack, rx409_cur, rx409_curclass, "$!cstack"
  rx409_fail1207:
    unless rx409_bstack, rx409_done1205
    pop $I19, rx409_bstack
    if_null rx409_cstack, rx409_cstack_done1210
    unless rx409_cstack, rx409_cstack_done1210
    dec $I19
    set $P11, rx409_cstack[$I19]
  rx409_cstack_done1210:
    pop rx409_rep, rx409_bstack
    pop rx409_pos, rx409_bstack
    pop $I19, rx409_bstack
    lt rx409_pos, -1, rx409_done1205
    lt rx409_pos, 0, rx409_fail1207
    eq $I19, 0, rx409_fail1207
    nqp_islist $I20, rx409_cstack
    unless $I20, rx409_jump1208
    elements $I18, rx409_bstack
    le $I18, 0, rx409_cut1209
    dec $I18
    set $I18, rx409_bstack[$I18]
  rx409_cut1209:
    assign rx409_cstack, $I18
  rx409_jump1208:
    jump $I19
  rx409_done1205:
    rx409_cur."!cursor_fail"()
    .return (rx409_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1346233478.067_caps" :subid("cuid_memo_108_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["scope_declarator"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1346233478.067_nfa" :subid("cuid_memo_109_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "scope_declarator"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_88_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx412_tgt
    .local int rx412_pos
    .local int rx412_off
    .local int rx412_eos
    .local int rx412_rep
    .local pmc rx412_cur
    .local pmc rx412_curclass
    .local pmc rx412_bstack
    .local pmc rx412_cstack
    (rx412_cur, rx412_tgt, rx412_pos, rx412_curclass, rx412_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx412_cur
    length rx412_eos, rx412_tgt
    eq $I19, 1, rx412_restart1217
    gt rx412_pos, rx412_eos, rx412_fail1218
    repr_get_attr_int $I11, self, rx412_curclass, "$!from"
    ne $I11, -1, rxscan413_done1224
    goto rxscan413_scan1223
  rxscan413_loop1222:
    inc rx412_pos
    gt rx412_pos, rx412_eos, rx412_fail1218
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!from", rx412_pos
  rxscan413_scan1223:
    nqp_rxmark rx412_bstack, rxscan413_loop1222, rx412_pos, 0
  rxscan413_done1224:
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1218
    nqp_rxmark rx412_bstack, rxsubrule414_pass1225, -1, 0
  rxsubrule414_pass1225:
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    rx412_cur."!cursor_pass"(rx412_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx412_cur)
  rx412_restart1217:
    repr_get_attr_obj rx412_cstack, rx412_cur, rx412_curclass, "$!cstack"
  rx412_fail1218:
    unless rx412_bstack, rx412_done1216
    pop $I19, rx412_bstack
    if_null rx412_cstack, rx412_cstack_done1221
    unless rx412_cstack, rx412_cstack_done1221
    dec $I19
    set $P11, rx412_cstack[$I19]
  rx412_cstack_done1221:
    pop rx412_rep, rx412_bstack
    pop rx412_pos, rx412_bstack
    pop $I19, rx412_bstack
    lt rx412_pos, -1, rx412_done1216
    lt rx412_pos, 0, rx412_fail1218
    eq $I19, 0, rx412_fail1218
    nqp_islist $I20, rx412_cstack
    unless $I20, rx412_jump1219
    elements $I18, rx412_bstack
    le $I18, 0, rx412_cut1220
    dec $I18
    set $I18, rx412_bstack[$I18]
  rx412_cut1220:
    assign rx412_cstack, $I18
  rx412_jump1219:
    jump $I19
  rx412_done1216:
    rx412_cur."!cursor_fail"()
    .return (rx412_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1346233478.067_caps" :subid("cuid_memo_110_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["routine_declarator"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1346233478.067_nfa" :subid("cuid_memo_111_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "routine_declarator"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_91_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 862
    .param pmc _lex_param_0 
    .const 'Sub' $P503 = 'cuid_89_1346233478.067' 
    capture_lex $P503 
    .const 'Sub' $P503 = 'cuid_90_1346233478.067' 
    capture_lex $P503 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx415_tgt
    .local int rx415_pos
    .local int rx415_off
    .local int rx415_eos
    .local int rx415_rep
    .local pmc rx415_cur
    .local pmc rx415_curclass
    .local pmc rx415_bstack
    .local pmc rx415_cstack
    (rx415_cur, rx415_tgt, rx415_pos, rx415_curclass, rx415_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx415_cur
    length rx415_eos, rx415_tgt
    eq $I19, 1, rx415_restart1228
    gt rx415_pos, rx415_eos, rx415_fail1229
    repr_get_attr_int $I11, self, rx415_curclass, "$!from"
    ne $I11, -1, rxscan416_done1235
    goto rxscan416_scan1234
  rxscan416_loop1233:
    inc rx415_pos
    gt rx415_pos, rx415_eos, rx415_fail1229
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!from", rx415_pos
  rxscan416_scan1234:
    nqp_rxmark rx415_bstack, rxscan416_loop1233, rx415_pos, 0
  rxscan416_done1235:
    .const 'Sub' $P501 = 'cuid_89_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    lt $I11, 0, rx415_fail1229
    .const 'Sub' $P502 = 'cuid_90_1346233478.067' 
    capture_lex $P502
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."before"($P502)
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    ge $I11, 0, rx415_fail1229
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    lt $I11, 0, rx415_fail1229
    nqp_rxmark rx415_bstack, rxsubrule424_pass1265, -1, 0
  rxsubrule424_pass1265:
    rx415_cstack = rx415_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx415_pos, $P11, rx415_curclass, "$!pos"
    rx415_cur."!cursor_pass"(rx415_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx415_cur)
  rx415_restart1228:
    repr_get_attr_obj rx415_cstack, rx415_cur, rx415_curclass, "$!cstack"
  rx415_fail1229:
    unless rx415_bstack, rx415_done1227
    pop $I19, rx415_bstack
    if_null rx415_cstack, rx415_cstack_done1232
    unless rx415_cstack, rx415_cstack_done1232
    dec $I19
    set $P11, rx415_cstack[$I19]
  rx415_cstack_done1232:
    pop rx415_rep, rx415_bstack
    pop rx415_pos, rx415_bstack
    pop $I19, rx415_bstack
    lt rx415_pos, -1, rx415_done1227
    lt rx415_pos, 0, rx415_fail1229
    eq $I19, 0, rx415_fail1229
    nqp_islist $I20, rx415_cstack
    unless $I20, rx415_jump1230
    elements $I18, rx415_bstack
    le $I18, 0, rx415_cut1231
    dec $I18
    set $I18, rx415_bstack[$I18]
  rx415_cut1231:
    assign rx415_cstack, $I18
  rx415_jump1230:
    jump $I19
  rx415_done1227:
    rx415_cur."!cursor_fail"()
    .return (rx415_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1346233478.067_caps" :subid("cuid_memo_112_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["multi_declarator"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1346233478.067_nfa" :subid("cuid_memo_113_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 109
    push $P503, $P505
    box $P506, 3
    push $P503, $P506
    box $P507, 2
    push $P503, $P507
    box $P508, 112
    push $P503, $P508
    box $P509, 7
    push $P503, $P509
    box $P510, 2
    push $P503, $P510
    box $P511, 111
    push $P503, $P511
    box $P512, 11
    push $P503, $P512
    push $P501, $P503
    new $P513, 'ResizablePMCArray'
    box $P514, 0
    push $P513, $P514
    box $P515, 0
    push $P513, $P515
    box $P516, 0
    push $P513, $P516
    push $P501, $P513
    new $P517, 'ResizablePMCArray'
    box $P518, 2
    push $P517, $P518
    box $P519, 117
    push $P517, $P519
    box $P520, 4
    push $P517, $P520
    push $P501, $P517
    new $P521, 'ResizablePMCArray'
    box $P522, 2
    push $P521, $P522
    box $P523, 108
    push $P521, $P523
    box $P524, 5
    push $P521, $P524
    push $P501, $P521
    new $P525, 'ResizablePMCArray'
    box $P526, 2
    push $P525, $P526
    box $P527, 116
    push $P525, $P527
    box $P528, 6
    push $P525, $P528
    push $P501, $P525
    new $P529, 'ResizablePMCArray'
    box $P530, 2
    push $P529, $P530
    box $P531, 105
    push $P529, $P531
    box $P532, 2
    push $P529, $P532
    push $P501, $P529
    new $P533, 'ResizablePMCArray'
    box $P534, 2
    push $P533, $P534
    box $P535, 114
    push $P533, $P535
    box $P536, 8
    push $P533, $P536
    push $P501, $P533
    new $P537, 'ResizablePMCArray'
    box $P538, 2
    push $P537, $P538
    box $P539, 111
    push $P537, $P539
    box $P540, 9
    push $P537, $P540
    push $P501, $P537
    new $P541, 'ResizablePMCArray'
    box $P542, 2
    push $P541, $P542
    box $P543, 116
    push $P541, $P543
    box $P544, 10
    push $P541, $P544
    push $P501, $P541
    new $P545, 'ResizablePMCArray'
    box $P546, 2
    push $P545, $P546
    box $P547, 111
    push $P545, $P547
    box $P548, 2
    push $P545, $P548
    push $P501, $P545
    new $P549, 'ResizablePMCArray'
    box $P550, 2
    push $P549, $P550
    box $P551, 110
    push $P549, $P551
    box $P552, 12
    push $P549, $P552
    push $P501, $P549
    new $P553, 'ResizablePMCArray'
    box $P554, 2
    push $P553, $P554
    box $P555, 108
    push $P553, $P555
    box $P556, 13
    push $P553, $P556
    push $P501, $P553
    new $P557, 'ResizablePMCArray'
    box $P558, 2
    push $P557, $P558
    box $P559, 121
    push $P557, $P559
    box $P560, 2
    push $P557, $P560
    push $P501, $P557
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1346233478.067") :anon :lex :outer("cuid_91_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx417_tgt
    .local int rx417_pos
    .local int rx417_off
    .local int rx417_eos
    .local int rx417_rep
    .local pmc rx417_cur
    .local pmc rx417_curclass
    .local pmc rx417_bstack
    .local pmc rx417_cstack
    (rx417_cur, rx417_tgt, rx417_pos, rx417_curclass, rx417_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx417_cur
    length rx417_eos, rx417_tgt
    eq $I19, 1, rx417_restart1238
    gt rx417_pos, rx417_eos, rx417_fail1239
    repr_get_attr_int $I11, self, rx417_curclass, "$!from"
    ne $I11, -1, rxscan418_done1245
    goto rxscan418_scan1244
  rxscan418_loop1243:
    inc rx417_pos
    gt rx417_pos, rx417_eos, rx417_fail1239
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!from", rx417_pos
  rxscan418_scan1244:
    nqp_rxmark rx417_bstack, rxscan418_loop1243, rx417_pos, 0
  rxscan418_done1245:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt419_01247
    nqp_push_label $P11, alt419_11248
    nqp_push_label $P11, alt419_21249
    nqp_rxmark rx417_bstack, alt419_end1246, -1, 0
    rx417_cur."!alt"(rx417_pos, "alt_nfa__17_1346233481.359", $P11)
    goto rx417_fail1239
  alt419_01247:
    add $I11, rx417_pos, 5
    gt $I11, rx417_eos, rx417_fail1239
    substr $S10, rx417_tgt, rx417_pos, 5
    ne $S10, ucs4:"multi", rx417_fail1239
    add rx417_pos, 5
    goto alt419_end1246
  alt419_11248:
    add $I11, rx417_pos, 5
    gt $I11, rx417_eos, rx417_fail1239
    substr $S10, rx417_tgt, rx417_pos, 5
    ne $S10, ucs4:"proto", rx417_fail1239
    add rx417_pos, 5
    goto alt419_end1246
  alt419_21249:
    add $I11, rx417_pos, 4
    gt $I11, rx417_eos, rx417_fail1239
    substr $S10, rx417_tgt, rx417_pos, 4
    ne $S10, ucs4:"only", rx417_fail1239
    add rx417_pos, 4
    goto alt419_end1246
  alt419_end1246:
    rx417_cur."!cursor_pass"(rx417_pos, 'backtrack'=>1)
    .return (rx417_cur)
  rx417_restart1238:
    repr_get_attr_obj rx417_cstack, rx417_cur, rx417_curclass, "$!cstack"
  rx417_fail1239:
    unless rx417_bstack, rx417_done1237
    pop $I19, rx417_bstack
    if_null rx417_cstack, rx417_cstack_done1242
    unless rx417_cstack, rx417_cstack_done1242
    dec $I19
    set $P11, rx417_cstack[$I19]
  rx417_cstack_done1242:
    pop rx417_rep, rx417_bstack
    pop rx417_pos, rx417_bstack
    pop $I19, rx417_bstack
    lt rx417_pos, -1, rx417_done1237
    lt rx417_pos, 0, rx417_fail1239
    eq $I19, 0, rx417_fail1239
    nqp_islist $I20, rx417_cstack
    unless $I20, rx417_jump1240
    elements $I18, rx417_bstack
    le $I18, 0, rx417_cut1241
    dec $I18
    set $I18, rx417_bstack[$I18]
  rx417_cut1241:
    assign rx417_cstack, $I18
  rx417_jump1240:
    jump $I19
  rx417_done1237:
    rx417_cur."!cursor_fail"()
    .return (rx417_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346233478.067_caps" :subid("cuid_memo_114_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346233478.067_nfa" :subid("cuid_memo_115_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 109
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 2
    push $P503, $P507
    box $P508, 112
    push $P503, $P508
    box $P509, 6
    push $P503, $P509
    box $P510, 2
    push $P503, $P510
    box $P511, 111
    push $P503, $P511
    box $P512, 10
    push $P503, $P512
    push $P501, $P503
    new $P513, 'ResizablePMCArray'
    box $P514, 2
    push $P513, $P514
    box $P515, 117
    push $P513, $P515
    box $P516, 3
    push $P513, $P516
    push $P501, $P513
    new $P517, 'ResizablePMCArray'
    box $P518, 2
    push $P517, $P518
    box $P519, 108
    push $P517, $P519
    box $P520, 4
    push $P517, $P520
    push $P501, $P517
    new $P521, 'ResizablePMCArray'
    box $P522, 2
    push $P521, $P522
    box $P523, 116
    push $P521, $P523
    box $P524, 5
    push $P521, $P524
    push $P501, $P521
    new $P525, 'ResizablePMCArray'
    box $P526, 2
    push $P525, $P526
    box $P527, 105
    push $P525, $P527
    box $P528, 0
    push $P525, $P528
    push $P501, $P525
    new $P529, 'ResizablePMCArray'
    box $P530, 2
    push $P529, $P530
    box $P531, 114
    push $P529, $P531
    box $P532, 7
    push $P529, $P532
    push $P501, $P529
    new $P533, 'ResizablePMCArray'
    box $P534, 2
    push $P533, $P534
    box $P535, 111
    push $P533, $P535
    box $P536, 8
    push $P533, $P536
    push $P501, $P533
    new $P537, 'ResizablePMCArray'
    box $P538, 2
    push $P537, $P538
    box $P539, 116
    push $P537, $P539
    box $P540, 9
    push $P537, $P540
    push $P501, $P537
    new $P541, 'ResizablePMCArray'
    box $P542, 2
    push $P541, $P542
    box $P543, 111
    push $P541, $P543
    box $P544, 0
    push $P541, $P544
    push $P501, $P541
    new $P545, 'ResizablePMCArray'
    box $P546, 2
    push $P545, $P546
    box $P547, 110
    push $P545, $P547
    box $P548, 11
    push $P545, $P548
    push $P501, $P545
    new $P549, 'ResizablePMCArray'
    box $P550, 2
    push $P549, $P550
    box $P551, 108
    push $P549, $P551
    box $P552, 12
    push $P549, $P552
    push $P501, $P549
    new $P553, 'ResizablePMCArray'
    box $P554, 2
    push $P553, $P554
    box $P555, 121
    push $P553, $P555
    box $P556, 0
    push $P553, $P556
    push $P501, $P553
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346233478.067_alt_nfa__17_1346233481.359" :subid("cuid_memo_116_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 109
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 117
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 108
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 116
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 105
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P502, $P520
    push $P501, $P502
    new $P524, 'ResizablePMCArray'
    new $P525, 'ResizablePMCArray'
    push $P524, $P525
    new $P526, 'ResizablePMCArray'
    box $P527, 2
    push $P526, $P527
    box $P528, 112
    push $P526, $P528
    box $P529, 2
    push $P526, $P529
    push $P524, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 2
    push $P530, $P531
    box $P532, 114
    push $P530, $P532
    box $P533, 3
    push $P530, $P533
    push $P524, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 111
    push $P534, $P536
    box $P537, 4
    push $P534, $P537
    push $P524, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 116
    push $P538, $P540
    box $P541, 5
    push $P538, $P541
    push $P524, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 111
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P524, $P542
    push $P501, $P524
    new $P546, 'ResizablePMCArray'
    new $P547, 'ResizablePMCArray'
    push $P546, $P547
    new $P548, 'ResizablePMCArray'
    box $P549, 2
    push $P548, $P549
    box $P550, 111
    push $P548, $P550
    box $P551, 2
    push $P548, $P551
    push $P546, $P548
    new $P552, 'ResizablePMCArray'
    box $P553, 2
    push $P552, $P553
    box $P554, 110
    push $P552, $P554
    box $P555, 3
    push $P552, $P555
    push $P546, $P552
    new $P556, 'ResizablePMCArray'
    box $P557, 2
    push $P556, $P557
    box $P558, 108
    push $P556, $P558
    box $P559, 4
    push $P556, $P559
    push $P546, $P556
    new $P560, 'ResizablePMCArray'
    box $P561, 2
    push $P560, $P561
    box $P562, 121
    push $P560, $P562
    box $P563, 0
    push $P560, $P563
    push $P546, $P560
    push $P501, $P546
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1346233478.067") :anon :lex :outer("cuid_91_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    (rx420_cur, rx420_tgt, rx420_pos, rx420_curclass, rx420_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart1252
    gt rx420_pos, rx420_eos, rx420_fail1253
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done1259
    goto rxscan421_scan1258
  rxscan421_loop1257:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail1253
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan1258:
    nqp_rxmark rx420_bstack, rxscan421_loop1257, rx420_pos, 0
  rxscan421_done1259:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1253
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"proto", rx420_fail1253
    add rx420_pos, 5
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    $P11 = rx420_cur."ws"()
    repr_get_attr_int $I11, $P11, rx420_curclass, "$!pos"
    lt $I11, 0, rx420_fail1253
    repr_get_attr_int rx420_pos, $P11, rx420_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt423_01262
    nqp_push_label $P11, alt423_11263
    nqp_push_label $P11, alt423_21264
    nqp_rxmark rx420_bstack, alt423_end1261, -1, 0
    rx420_cur."!alt"(rx420_pos, "alt_nfa__18_1346233481.379", $P11)
    goto rx420_fail1253
  alt423_01262:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1253
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"regex", rx420_fail1253
    add rx420_pos, 5
    goto alt423_end1261
  alt423_11263:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1253
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"token", rx420_fail1253
    add rx420_pos, 5
    goto alt423_end1261
  alt423_21264:
    add $I11, rx420_pos, 4
    gt $I11, rx420_eos, rx420_fail1253
    substr $S10, rx420_tgt, rx420_pos, 4
    ne $S10, ucs4:"rule", rx420_fail1253
    add rx420_pos, 4
    goto alt423_end1261
  alt423_end1261:
    nqp_rxcommit rx420_bstack, alt423_end1261
    rx420_cur."!cursor_pass"(rx420_pos, 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart1252:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail1253:
    unless rx420_bstack, rx420_done1251
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done1256
    unless rx420_cstack, rx420_cstack_done1256
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done1256:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done1251
    lt rx420_pos, 0, rx420_fail1253
    eq $I19, 0, rx420_fail1253
    nqp_islist $I20, rx420_cstack
    unless $I20, rx420_jump1254
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut1255
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut1255:
    assign rx420_cstack, $I18
  rx420_jump1254:
    jump $I19
  rx420_done1251:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346233478.067_caps" :subid("cuid_memo_117_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346233478.067_nfa" :subid("cuid_memo_118_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 112
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 114
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 111
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 116
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 111
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 8
    push $P523, $P524
    box $P525, "ws"
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 114
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    box $P531, 2
    push $P527, $P531
    box $P532, 116
    push $P527, $P532
    box $P533, 12
    push $P527, $P533
    box $P534, 2
    push $P527, $P534
    box $P535, 114
    push $P527, $P535
    box $P536, 16
    push $P527, $P536
    push $P501, $P527
    new $P537, 'ResizablePMCArray'
    box $P538, 2
    push $P537, $P538
    box $P539, 101
    push $P537, $P539
    box $P540, 9
    push $P537, $P540
    push $P501, $P537
    new $P541, 'ResizablePMCArray'
    box $P542, 2
    push $P541, $P542
    box $P543, 103
    push $P541, $P543
    box $P544, 10
    push $P541, $P544
    push $P501, $P541
    new $P545, 'ResizablePMCArray'
    box $P546, 2
    push $P545, $P546
    box $P547, 101
    push $P545, $P547
    box $P548, 11
    push $P545, $P548
    push $P501, $P545
    new $P549, 'ResizablePMCArray'
    box $P550, 2
    push $P549, $P550
    box $P551, 120
    push $P549, $P551
    box $P552, 0
    push $P549, $P552
    push $P501, $P549
    new $P553, 'ResizablePMCArray'
    box $P554, 2
    push $P553, $P554
    box $P555, 111
    push $P553, $P555
    box $P556, 13
    push $P553, $P556
    push $P501, $P553
    new $P557, 'ResizablePMCArray'
    box $P558, 2
    push $P557, $P558
    box $P559, 107
    push $P557, $P559
    box $P560, 14
    push $P557, $P560
    push $P501, $P557
    new $P561, 'ResizablePMCArray'
    box $P562, 2
    push $P561, $P562
    box $P563, 101
    push $P561, $P563
    box $P564, 15
    push $P561, $P564
    push $P501, $P561
    new $P565, 'ResizablePMCArray'
    box $P566, 2
    push $P565, $P566
    box $P567, 110
    push $P565, $P567
    box $P568, 0
    push $P565, $P568
    push $P501, $P565
    new $P569, 'ResizablePMCArray'
    box $P570, 2
    push $P569, $P570
    box $P571, 117
    push $P569, $P571
    box $P572, 17
    push $P569, $P572
    push $P501, $P569
    new $P573, 'ResizablePMCArray'
    box $P574, 2
    push $P573, $P574
    box $P575, 108
    push $P573, $P575
    box $P576, 18
    push $P573, $P576
    push $P501, $P573
    new $P577, 'ResizablePMCArray'
    box $P578, 2
    push $P577, $P578
    box $P579, 101
    push $P577, $P579
    box $P580, 0
    push $P577, $P580
    push $P501, $P577
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346233478.067_alt_nfa__18_1346233481.379" :subid("cuid_memo_119_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 114
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 101
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 103
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 101
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 120
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P502, $P520
    push $P501, $P502
    new $P524, 'ResizablePMCArray'
    new $P525, 'ResizablePMCArray'
    push $P524, $P525
    new $P526, 'ResizablePMCArray'
    box $P527, 2
    push $P526, $P527
    box $P528, 116
    push $P526, $P528
    box $P529, 2
    push $P526, $P529
    push $P524, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 2
    push $P530, $P531
    box $P532, 111
    push $P530, $P532
    box $P533, 3
    push $P530, $P533
    push $P524, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 107
    push $P534, $P536
    box $P537, 4
    push $P534, $P537
    push $P524, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 101
    push $P538, $P540
    box $P541, 5
    push $P538, $P541
    push $P524, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 110
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P524, $P542
    push $P501, $P524
    new $P546, 'ResizablePMCArray'
    new $P547, 'ResizablePMCArray'
    push $P546, $P547
    new $P548, 'ResizablePMCArray'
    box $P549, 2
    push $P548, $P549
    box $P550, 114
    push $P548, $P550
    box $P551, 2
    push $P548, $P551
    push $P546, $P548
    new $P552, 'ResizablePMCArray'
    box $P553, 2
    push $P552, $P553
    box $P554, 117
    push $P552, $P554
    box $P555, 3
    push $P552, $P555
    push $P546, $P552
    new $P556, 'ResizablePMCArray'
    box $P557, 2
    push $P556, $P557
    box $P558, 108
    push $P556, $P558
    box $P559, 4
    push $P556, $P559
    push $P546, $P556
    new $P560, 'ResizablePMCArray'
    box $P561, 2
    push $P560, $P561
    box $P562, 101
    push $P560, $P562
    box $P563, 0
    push $P560, $P563
    push $P546, $P560
    push $P501, $P546
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_92_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 867
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    (rx425_cur, rx425_tgt, rx425_pos, rx425_curclass, rx425_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1268
    gt rx425_pos, rx425_eos, rx425_fail1269
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1275
    goto rxscan426_scan1274
  rxscan426_loop1273:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1269
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1274:
    nqp_rxmark rx425_bstack, rxscan426_loop1273, rx425_pos, 0
  rxscan426_done1275:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1269
    nqp_rxmark rx425_bstack, rxsubrule427_pass1276, -1, 0
  rxsubrule427_pass1276:
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    rx425_cur."!cursor_pass"(rx425_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1268:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1269:
    unless rx425_bstack, rx425_done1267
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1272
    unless rx425_cstack, rx425_cstack_done1272
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1272:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1267
    lt rx425_pos, 0, rx425_fail1269
    eq $I19, 0, rx425_fail1269
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1270
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1271
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1271:
    assign rx425_cstack, $I18
  rx425_jump1270:
    jump $I19
  rx425_done1267:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1346233478.067_caps" :subid("cuid_memo_120_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["regex_declarator"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1346233478.067_nfa" :subid("cuid_memo_121_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "regex_declarator"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_93_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    (rx428_cur, rx428_tgt, rx428_pos, rx428_curclass, rx428_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1279
    gt rx428_pos, rx428_eos, rx428_fail1280
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1286
    goto rxscan429_scan1285
  rxscan429_loop1284:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1280
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1285:
    nqp_rxmark rx428_bstack, rxscan429_loop1284, rx428_pos, 0
  rxscan429_done1286:
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1280
    nqp_rxmark rx428_bstack, rxsubrule430_pass1287, -1, 0
  rxsubrule430_pass1287:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    rx428_cur."!cursor_pass"(rx428_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1279:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1280:
    unless rx428_bstack, rx428_done1278
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1283
    unless rx428_cstack, rx428_cstack_done1283
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1283:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1278
    lt rx428_pos, 0, rx428_fail1280
    eq $I19, 0, rx428_fail1280
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1281
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1282
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1282:
    assign rx428_cstack, $I18
  rx428_jump1281:
    jump $I19
  rx428_done1278:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1346233478.067_caps" :subid("cuid_memo_122_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["statement_prefix"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1346233478.067_nfa" :subid("cuid_memo_123_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "statement_prefix"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_94_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    (rx431_cur, rx431_tgt, rx431_pos, rx431_curclass, rx431_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1290
    gt rx431_pos, rx431_eos, rx431_fail1291
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1297
    goto rxscan432_scan1296
  rxscan432_loop1295:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1291
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1296:
    nqp_rxmark rx431_bstack, rxscan432_loop1295, rx431_pos, 0
  rxscan432_done1297:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1291
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1291
    nqp_rxmark rx431_bstack, rxsubrule433_pass1298, -1, 0
  rxsubrule433_pass1298:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1290:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1291:
    unless rx431_bstack, rx431_done1289
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1294
    unless rx431_cstack, rx431_cstack_done1294
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1294:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1289
    lt rx431_pos, 0, rx431_fail1291
    eq $I19, 0, rx431_fail1291
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1292
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1293
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1293:
    assign rx431_cstack, $I18
  rx431_jump1292:
    jump $I19
  rx431_done1289:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1346233478.067_caps" :subid("cuid_memo_124_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["pblock"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1346233478.067_nfa" :subid("cuid_memo_125_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "lambda"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_95_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1301
    gt rx434_pos, rx434_eos, rx434_fail1302
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1308
    goto rxscan435_scan1307
  rxscan435_loop1306:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1302
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1307:
    nqp_rxmark rx434_bstack, rxscan435_loop1306, rx434_pos, 0
  rxscan435_done1308:
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1302
    nqp_rxmark rx434_bstack, rxsubrule436_pass1309, -1, 0
  rxsubrule436_pass1309:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    nqp_rxmark rx434_bstack, rxquantr437_done1311, rx434_pos, 0
  rxquantr437_loop1310:
    ge rx434_pos, rx434_eos, rx434_fail1302
    substr $S11, rx434_tgt, rx434_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx434_fail1302
    inc rx434_pos
    nqp_rxpeek $I19, rx434_bstack, rxquantr437_done1311
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr437_done1311
    inc rx434_rep
    nqp_rxmark rx434_bstack, rxquantr437_done1311, rx434_pos, rx434_rep
    goto rxquantr437_loop1310
  rxquantr437_done1311:
    add $I11, rx434_pos, 2
    gt $I11, rx434_eos, rx434_fail1302
    substr $S10, rx434_tgt, rx434_pos, 2
    ne $S10, ucs4:"=>", rx434_fail1302
    add rx434_pos, 2
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."ws"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1302
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1302
    nqp_rxmark rx434_bstack, rxsubrule439_pass1313, -1, 0
  rxsubrule439_pass1313:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    rx434_cur."!cursor_pass"(rx434_pos, "fatarrow", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1301:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1302:
    unless rx434_bstack, rx434_done1300
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1305
    unless rx434_cstack, rx434_cstack_done1305
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1305:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1300
    lt rx434_pos, 0, rx434_fail1302
    eq $I19, 0, rx434_fail1302
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1303
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1304
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1304:
    assign rx434_cstack, $I18
  rx434_jump1303:
    jump $I19
  rx434_done1300:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1346233478.067_caps" :subid("cuid_memo_126_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["key"], $P502
    box $P503, 0
    set $P501["val"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1346233478.067_nfa" :subid("cuid_memo_127_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "identifier"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 6
    push $P507, $P508
    box $P509, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P507, $P509
    box $P510, 2
    push $P507, $P510
    box $P511, 1
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 3
    push $P507, $P513
    push $P501, $P507
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 61
    push $P514, $P516
    box $P517, 4
    push $P514, $P517
    push $P501, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 2
    push $P518, $P519
    box $P520, 62
    push $P518, $P520
    box $P521, 5
    push $P518, $P521
    push $P501, $P518
    new $P522, 'ResizablePMCArray'
    box $P523, 8
    push $P522, $P523
    box $P524, "ws"
    push $P522, $P524
    box $P525, 6
    push $P522, $P525
    push $P501, $P522
    new $P526, 'ResizablePMCArray'
    box $P527, 8
    push $P526, $P527
    box $P528, "EXPR"
    push $P526, $P528
    box $P529, 0
    push $P526, $P529
    push $P501, $P526
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_96_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx440_tgt
    .local int rx440_pos
    .local int rx440_off
    .local int rx440_eos
    .local int rx440_rep
    .local pmc rx440_cur
    .local pmc rx440_curclass
    .local pmc rx440_bstack
    .local pmc rx440_cstack
    (rx440_cur, rx440_tgt, rx440_pos, rx440_curclass, rx440_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx440_cur
    length rx440_eos, rx440_tgt
    eq $I19, 1, rx440_restart1316
    gt rx440_pos, rx440_eos, rx440_fail1317
    repr_get_attr_int $I11, self, rx440_curclass, "$!from"
    ne $I11, -1, rxscan441_done1323
    goto rxscan441_scan1322
  rxscan441_loop1321:
    inc rx440_pos
    gt rx440_pos, rx440_eos, rx440_fail1317
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!from", rx440_pos
  rxscan441_scan1322:
    nqp_rxmark rx440_bstack, rxscan441_loop1321, rx440_pos, 0
  rxscan441_done1323:
    add $I11, rx440_pos, 1
    gt $I11, rx440_eos, rx440_fail1317
    substr $S10, rx440_tgt, rx440_pos, 1
    ne $S10, ucs4:":", rx440_fail1317
    add rx440_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt442_01325
    nqp_push_label $P11, alt442_11329
    nqp_push_label $P11, alt442_21335
    nqp_push_label $P11, alt442_31337
    nqp_rxmark rx440_bstack, alt442_end1324, -1, 0
    rx440_cur."!alt"(rx440_pos, "alt_nfa__19_1346233481.524", $P11)
    goto rx440_fail1317
  alt442_01325:
    nqp_rxmark rx440_bstack, rxcap443_fail1327, rx440_pos, 0
    add $I11, rx440_pos, 1
    gt $I11, rx440_eos, rx440_fail1317
    substr $S10, rx440_tgt, rx440_pos, 1
    ne $S10, ucs4:"!", rx440_fail1317
    add rx440_pos, 1
    nqp_rxpeek $I19, rx440_bstack, rxcap443_fail1327
    inc $I19
    set $I11, rx440_bstack[$I19]
    $P11 = rx440_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx440_pos)
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "not")
    goto rxcap443_done1326
  rxcap443_fail1327:
    goto rx440_fail1317
  rxcap443_done1326:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    nqp_rxmark rx440_bstack, rxsubrule444_pass1328, -1, 0
  rxsubrule444_pass1328:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1324
  alt442_11329:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    nqp_rxmark rx440_bstack, rxsubrule445_pass1330, -1, 0
  rxsubrule445_pass1330:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    nqp_rxmark rx440_bstack, rxquantr446_done1332, rx440_pos, 0
  rxquantr446_loop1331:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    goto rxsubrule447_pass1333
  rxsubrule447_back1334:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
  rxsubrule447_pass1333:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule447_back1334
    push rx440_bstack, $I11
    push rx440_bstack, 0
    push rx440_bstack, rx440_pos
    elements $I11, rx440_cstack
    push rx440_bstack, $I11
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    nqp_rxpeek $I19, rx440_bstack, rxquantr446_done1332
    inc $I19
    inc $I19
    set rx440_rep, rx440_bstack[$I19]
    nqp_rxcommit rx440_bstack, rxquantr446_done1332
    inc rx440_rep
  rxquantr446_done1332:
    goto alt442_end1324
  alt442_21335:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    nqp_rxmark rx440_bstack, rxsubrule448_pass1336, -1, 0
  rxsubrule448_pass1336:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1324
  alt442_31337:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."variable"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    nqp_rxmark rx440_bstack, rxsubrule449_pass1338, -1, 0
  rxsubrule449_pass1338:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1324
  alt442_end1324:
    nqp_rxcommit rx440_bstack, alt442_end1324
    rx440_cur."!cursor_pass"(rx440_pos, "colonpair", 'backtrack'=>1)
    .return (rx440_cur)
  rx440_restart1316:
    repr_get_attr_obj rx440_cstack, rx440_cur, rx440_curclass, "$!cstack"
  rx440_fail1317:
    unless rx440_bstack, rx440_done1315
    pop $I19, rx440_bstack
    if_null rx440_cstack, rx440_cstack_done1320
    unless rx440_cstack, rx440_cstack_done1320
    dec $I19
    set $P11, rx440_cstack[$I19]
  rx440_cstack_done1320:
    pop rx440_rep, rx440_bstack
    pop rx440_pos, rx440_bstack
    pop $I19, rx440_bstack
    lt rx440_pos, -1, rx440_done1315
    lt rx440_pos, 0, rx440_fail1317
    eq $I19, 0, rx440_fail1317
    nqp_islist $I20, rx440_cstack
    unless $I20, rx440_jump1318
    elements $I18, rx440_bstack
    le $I18, 0, rx440_cut1319
    dec $I18
    set $I18, rx440_bstack[$I18]
  rx440_cut1319:
    assign rx440_cstack, $I18
  rx440_jump1318:
    jump $I19
  rx440_done1315:
    rx440_cur."!cursor_fail"()
    .return (rx440_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346233478.067_caps" :subid("cuid_memo_128_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["not"], $P502
    box $P503, 0
    set $P501["identifier"], $P503
    box $P504, 2
    set $P501["circumfix"], $P504
    box $P505, 0
    set $P501["variable"], $P505
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346233478.067_nfa" :subid("cuid_memo_129_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 58
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 33
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    box $P511, 8
    push $P507, $P511
    box $P512, "identifier"
    push $P507, $P512
    box $P513, 4
    push $P507, $P513
    box $P514, 8
    push $P507, $P514
    box $P515, "circumfix"
    push $P507, $P515
    box $P516, 0
    push $P507, $P516
    box $P517, 8
    push $P507, $P517
    box $P518, "variable"
    push $P507, $P518
    box $P519, 0
    push $P507, $P519
    push $P501, $P507
    new $P520, 'ResizablePMCArray'
    box $P521, 8
    push $P520, $P521
    box $P522, "identifier"
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P501, $P520
    new $P524, 'ResizablePMCArray'
    box $P525, 8
    push $P524, $P525
    box $P526, "circumfix"
    push $P524, $P526
    box $P527, 0
    push $P524, $P527
    box $P528, 1
    push $P524, $P528
    box $P529, 0
    push $P524, $P529
    box $P530, 0
    push $P524, $P530
    push $P501, $P524
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346233478.067_alt_nfa__19_1346233481.524" :subid("cuid_memo_130_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 33
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 8
    push $P508, $P509
    box $P510, "identifier"
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 8
    push $P514, $P515
    box $P516, "identifier"
    push $P514, $P516
    box $P517, 2
    push $P514, $P517
    push $P512, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 8
    push $P518, $P519
    box $P520, "circumfix"
    push $P518, $P520
    box $P521, 0
    push $P518, $P521
    box $P522, 1
    push $P518, $P522
    box $P523, 0
    push $P518, $P523
    box $P524, 0
    push $P518, $P524
    push $P512, $P518
    push $P501, $P512
    new $P525, 'ResizablePMCArray'
    new $P526, 'ResizablePMCArray'
    push $P525, $P526
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "circumfix"
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P525, $P527
    push $P501, $P525
    new $P531, 'ResizablePMCArray'
    new $P532, 'ResizablePMCArray'
    push $P531, $P532
    new $P533, 'ResizablePMCArray'
    box $P534, 8
    push $P533, $P534
    box $P535, "variable"
    push $P533, $P535
    box $P536, 0
    push $P533, $P536
    push $P531, $P533
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_97_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx450_tgt
    .local int rx450_pos
    .local int rx450_off
    .local int rx450_eos
    .local int rx450_rep
    .local pmc rx450_cur
    .local pmc rx450_curclass
    .local pmc rx450_bstack
    .local pmc rx450_cstack
    (rx450_cur, rx450_tgt, rx450_pos, rx450_curclass, rx450_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx450_cur
    length rx450_eos, rx450_tgt
    eq $I19, 1, rx450_restart1341
    gt rx450_pos, rx450_eos, rx450_fail1342
    repr_get_attr_int $I11, self, rx450_curclass, "$!from"
    ne $I11, -1, rxscan451_done1348
    goto rxscan451_scan1347
  rxscan451_loop1346:
    inc rx450_pos
    gt rx450_pos, rx450_eos, rx450_fail1342
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!from", rx450_pos
  rxscan451_scan1347:
    nqp_rxmark rx450_bstack, rxscan451_loop1346, rx450_pos, 0
  rxscan451_done1348:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt452_01350
    nqp_push_label $P11, alt452_11357
    nqp_push_label $P11, alt452_21360
    nqp_rxmark rx450_bstack, alt452_end1349, -1, 0
    rx450_cur."!alt"(rx450_pos, "alt_nfa__20_1346233481.553", $P11)
    goto rx450_fail1342
  alt452_01350:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    nqp_rxmark rx450_bstack, rxsubrule453_pass1351, -1, 0
  rxsubrule453_pass1351:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    nqp_rxmark rx450_bstack, rxquantr454_done1353, rx450_pos, 0
  rxquantr454_loop1352:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    goto rxsubrule455_pass1354
  rxsubrule455_back1355:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
  rxsubrule455_pass1354:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule455_back1355
    push rx450_bstack, $I11
    push rx450_bstack, 0
    push rx450_bstack, rx450_pos
    elements $I11, rx450_cstack
    push rx450_bstack, $I11
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    nqp_rxpeek $I19, rx450_bstack, rxquantr454_done1353
    inc $I19
    inc $I19
    set rx450_rep, rx450_bstack[$I19]
    nqp_rxcommit rx450_bstack, rxquantr454_done1353
    inc rx450_rep
  rxquantr454_done1353:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."name"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    nqp_rxmark rx450_bstack, rxsubrule456_pass1356, -1, 0
  rxsubrule456_pass1356:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    goto alt452_end1349
  alt452_11357:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    nqp_rxmark rx450_bstack, rxsubrule457_pass1358, -1, 0
  rxsubrule457_pass1358:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    ge rx450_pos, rx450_eos, rx450_fail1342
    substr $S11, rx450_tgt, rx450_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx450_fail1342
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    nqp_rxmark rx450_bstack, rxsubrule458_pass1359, -1, 0
  rxsubrule458_pass1359:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    goto alt452_end1349
  alt452_21360:
    nqp_rxmark rx450_bstack, rxcap459_fail1362, rx450_pos, 0
    add $I11, rx450_pos, 1
    gt $I11, rx450_eos, rx450_fail1342
    substr $S10, rx450_tgt, rx450_pos, 1
    ne $S10, ucs4:"$", rx450_fail1342
    add rx450_pos, 1
    nqp_rxpeek $I19, rx450_bstack, rxcap459_fail1362
    inc $I19
    set $I11, rx450_bstack[$I19]
    $P11 = rx450_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx450_pos)
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    goto rxcap459_done1361
  rxcap459_fail1362:
    goto rx450_fail1342
  rxcap459_done1361:
    nqp_rxmark rx450_bstack, rxcap460_fail1364, rx450_pos, 0
    ge rx450_pos, rx450_eos, rx450_fail1342
    substr $S11, rx450_tgt, rx450_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx450_fail1342
    inc rx450_pos
    nqp_rxpeek $I19, rx450_bstack, rxcap460_fail1364
    inc $I19
    set $I11, rx450_bstack[$I19]
    $P11 = rx450_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx450_pos)
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap460_done1363
  rxcap460_fail1364:
    goto rx450_fail1342
  rxcap460_done1363:
    goto alt452_end1349
  alt452_end1349:
    rx450_cur."!cursor_pass"(rx450_pos, "variable", 'backtrack'=>1)
    .return (rx450_cur)
  rx450_restart1341:
    repr_get_attr_obj rx450_cstack, rx450_cur, rx450_curclass, "$!cstack"
  rx450_fail1342:
    unless rx450_bstack, rx450_done1340
    pop $I19, rx450_bstack
    if_null rx450_cstack, rx450_cstack_done1345
    unless rx450_cstack, rx450_cstack_done1345
    dec $I19
    set $P11, rx450_cstack[$I19]
  rx450_cstack_done1345:
    pop rx450_rep, rx450_bstack
    pop rx450_pos, rx450_bstack
    pop $I19, rx450_bstack
    lt rx450_pos, -1, rx450_done1340
    lt rx450_pos, 0, rx450_fail1342
    eq $I19, 0, rx450_fail1342
    nqp_islist $I20, rx450_cstack
    unless $I20, rx450_jump1343
    elements $I18, rx450_bstack
    le $I18, 0, rx450_cut1344
    dec $I18
    set $I18, rx450_bstack[$I18]
  rx450_cut1344:
    assign rx450_cstack, $I18
  rx450_jump1343:
    jump $I19
  rx450_done1340:
    rx450_cur."!cursor_fail"()
    .return (rx450_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346233478.067_caps" :subid("cuid_memo_131_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sigil"], $P502
    box $P503, 2
    set $P501["twigil"], $P503
    box $P504, 0
    set $P501["desigilname"], $P504
    box $P505, 0
    set $P501["postcircumfix"], $P505
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346233478.067_nfa" :subid("cuid_memo_132_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "sigil"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 8
    push $P503, $P507
    box $P508, "sigil"
    push $P503, $P508
    box $P509, 4
    push $P503, $P509
    box $P510, 2
    push $P503, $P510
    box $P511, 36
    push $P503, $P511
    box $P512, 6
    push $P503, $P512
    push $P501, $P503
    new $P513, 'ResizablePMCArray'
    box $P514, 8
    push $P513, $P514
    box $P515, "twigil"
    push $P513, $P515
    box $P516, 3
    push $P513, $P516
    box $P517, 1
    push $P513, $P517
    box $P518, 0
    push $P513, $P518
    box $P519, 3
    push $P513, $P519
    push $P501, $P513
    new $P520, 'ResizablePMCArray'
    box $P521, 8
    push $P520, $P521
    box $P522, "name"
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P501, $P520
    new $P524, 'ResizablePMCArray'
    box $P525, 6
    push $P524, $P525
    box $P526, "<["
    push $P524, $P526
    box $P527, 5
    push $P524, $P527
    push $P501, $P524
    new $P528, 'ResizablePMCArray'
    box $P529, 0
    push $P528, $P529
    box $P530, 0
    push $P528, $P530
    box $P531, 0
    push $P528, $P531
    push $P501, $P528
    new $P532, 'ResizablePMCArray'
    box $P533, 6
    push $P532, $P533
    box $P534, "/_!"
    push $P532, $P534
    box $P535, 0
    push $P532, $P535
    push $P501, $P532
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346233478.067_alt_nfa__20_1346233481.553" :subid("cuid_memo_133_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "sigil"
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 8
    push $P508, $P509
    box $P510, "twigil"
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    box $P512, 1
    push $P508, $P512
    box $P513, 0
    push $P508, $P513
    box $P514, 3
    push $P508, $P514
    push $P502, $P508
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "name"
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P502, $P515
    push $P501, $P502
    new $P519, 'ResizablePMCArray'
    new $P520, 'ResizablePMCArray'
    push $P519, $P520
    new $P521, 'ResizablePMCArray'
    box $P522, 8
    push $P521, $P522
    box $P523, "sigil"
    push $P521, $P523
    box $P524, 2
    push $P521, $P524
    push $P519, $P521
    new $P525, 'ResizablePMCArray'
    box $P526, 6
    push $P525, $P526
    box $P527, "<["
    push $P525, $P527
    box $P528, 3
    push $P525, $P528
    push $P519, $P525
    new $P529, 'ResizablePMCArray'
    box $P530, 0
    push $P529, $P530
    box $P531, 0
    push $P529, $P531
    box $P532, 0
    push $P529, $P532
    push $P519, $P529
    push $P501, $P519
    new $P533, 'ResizablePMCArray'
    new $P534, 'ResizablePMCArray'
    push $P533, $P534
    new $P535, 'ResizablePMCArray'
    box $P536, 2
    push $P535, $P536
    box $P537, 36
    push $P535, $P537
    box $P538, 2
    push $P535, $P538
    push $P533, $P535
    new $P539, 'ResizablePMCArray'
    box $P540, 6
    push $P539, $P540
    box $P541, "/_!"
    push $P539, $P541
    box $P542, 0
    push $P539, $P542
    push $P533, $P539
    push $P501, $P533
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_98_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    (rx461_cur, rx461_tgt, rx461_pos, rx461_curclass, rx461_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1367
    gt rx461_pos, rx461_eos, rx461_fail1368
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1374
    goto rxscan462_scan1373
  rxscan462_loop1372:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1368
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1373:
    nqp_rxmark rx461_bstack, rxscan462_loop1372, rx461_pos, 0
  rxscan462_done1374:
    ge rx461_pos, rx461_eos, rx461_fail1368
    substr $S11, rx461_tgt, rx461_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx461_fail1368
    inc rx461_pos
    rx461_cur."!cursor_pass"(rx461_pos, "sigil", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1367:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1368:
    unless rx461_bstack, rx461_done1366
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1371
    unless rx461_cstack, rx461_cstack_done1371
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1371:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1366
    lt rx461_pos, 0, rx461_fail1368
    eq $I19, 0, rx461_fail1368
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1369
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1370
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1370:
    assign rx461_cstack, $I18
  rx461_jump1369:
    jump $I19
  rx461_done1366:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1346233478.067_caps" :subid("cuid_memo_134_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1346233478.067_nfa" :subid("cuid_memo_135_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "$@%&"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_99_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx463_tgt
    .local int rx463_pos
    .local int rx463_off
    .local int rx463_eos
    .local int rx463_rep
    .local pmc rx463_cur
    .local pmc rx463_curclass
    .local pmc rx463_bstack
    .local pmc rx463_cstack
    (rx463_cur, rx463_tgt, rx463_pos, rx463_curclass, rx463_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx463_cur
    length rx463_eos, rx463_tgt
    eq $I19, 1, rx463_restart1377
    gt rx463_pos, rx463_eos, rx463_fail1378
    repr_get_attr_int $I11, self, rx463_curclass, "$!from"
    ne $I11, -1, rxscan464_done1384
    goto rxscan464_scan1383
  rxscan464_loop1382:
    inc rx463_pos
    gt rx463_pos, rx463_eos, rx463_fail1378
    repr_bind_attr_int rx463_cur, rx463_curclass, "$!from", rx463_pos
  rxscan464_scan1383:
    nqp_rxmark rx463_bstack, rxscan464_loop1382, rx463_pos, 0
  rxscan464_done1384:
    ge rx463_pos, rx463_eos, rx463_fail1378
    substr $S11, rx463_tgt, rx463_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx463_fail1378
    inc rx463_pos
    rx463_cur."!cursor_pass"(rx463_pos, "twigil", 'backtrack'=>1)
    .return (rx463_cur)
  rx463_restart1377:
    repr_get_attr_obj rx463_cstack, rx463_cur, rx463_curclass, "$!cstack"
  rx463_fail1378:
    unless rx463_bstack, rx463_done1376
    pop $I19, rx463_bstack
    if_null rx463_cstack, rx463_cstack_done1381
    unless rx463_cstack, rx463_cstack_done1381
    dec $I19
    set $P11, rx463_cstack[$I19]
  rx463_cstack_done1381:
    pop rx463_rep, rx463_bstack
    pop rx463_pos, rx463_bstack
    pop $I19, rx463_bstack
    lt rx463_pos, -1, rx463_done1376
    lt rx463_pos, 0, rx463_fail1378
    eq $I19, 0, rx463_fail1378
    nqp_islist $I20, rx463_cstack
    unless $I20, rx463_jump1379
    elements $I18, rx463_bstack
    le $I18, 0, rx463_cut1380
    dec $I18
    set $I18, rx463_bstack[$I18]
  rx463_cut1380:
    assign rx463_cstack, $I18
  rx463_jump1379:
    jump $I19
  rx463_done1376:
    rx463_cur."!cursor_fail"()
    .return (rx463_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1346233478.067_caps" :subid("cuid_memo_136_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1346233478.067_nfa" :subid("cuid_memo_137_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "*!?"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_100_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .param pmc self 
    $P501 = self."!protoregex"("package_declarator")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_101_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set self, _lex_param_0
    .local string rx465_tgt
    .local int rx465_pos
    .local int rx465_off
    .local int rx465_eos
    .local int rx465_rep
    .local pmc rx465_cur
    .local pmc rx465_curclass
    .local pmc rx465_bstack
    .local pmc rx465_cstack
    (rx465_cur, rx465_tgt, rx465_pos, rx465_curclass, rx465_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx465_cur
    length rx465_eos, rx465_tgt
    eq $I19, 1, rx465_restart1387
    gt rx465_pos, rx465_eos, rx465_fail1388
    repr_get_attr_int $I11, self, rx465_curclass, "$!from"
    ne $I11, -1, rxscan466_done1394
    goto rxscan466_scan1393
  rxscan466_loop1392:
    inc rx465_pos
    gt rx465_pos, rx465_eos, rx465_fail1388
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!from", rx465_pos
  rxscan466_scan1393:
    nqp_rxmark rx465_bstack, rxscan466_loop1392, rx465_pos, 0
  rxscan466_done1394:
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    store_lex unicode:"$\x{a2}", rx465_cur
    find_dynamic_lex $P503, "$*PACKAGE"
    unless_null $P503, fallback1395
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$PACKAGE"]
    unless_null $P504, fallback1396
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback1396:
    unless_null $P504, vivi_4671397
    die "Contextual $*PACKAGE not found"
    box $P508, "Contextual $*PACKAGE not found"
    set $P504, $P508
  vivi_4671397:
    set $P503, $P504
  fallback1395:
    set $P101, $P503
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    store_lex unicode:"$\x{a2}", rx465_cur
    box $P509, "module"
    set $P102, $P509
    nqp_rxmark rx465_bstack, rxcap468_fail1399, rx465_pos, 0
    add $I11, rx465_pos, 6
    gt $I11, rx465_eos, rx465_fail1388
    substr $S10, rx465_tgt, rx465_pos, 6
    ne $S10, ucs4:"module", rx465_fail1388
    add rx465_pos, 6
    nqp_rxpeek $I19, rx465_bstack, rxcap468_fail1399
    inc $I19
    set $I11, rx465_bstack[$I19]
    $P11 = rx465_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx465_pos)
    rx465_cstack = rx465_cur."!cursor_capture"($P11, "sym")
    goto rxcap468_done1398
  rxcap468_fail1399:
    goto rx465_fail1388
  rxcap468_done1398:
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    $P11 = rx465_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx465_curclass, "$!pos"
    lt $I11, 0, rx465_fail1388
    nqp_rxmark rx465_bstack, rxsubrule469_pass1400, -1, 0
  rxsubrule469_pass1400:
    rx465_cstack = rx465_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx465_pos, $P11, rx465_curclass, "$!pos"
    rx465_cur."!cursor_pass"(rx465_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx465_cur)
  rx465_restart1387:
    repr_get_attr_obj rx465_cstack, rx465_cur, rx465_curclass, "$!cstack"
  rx465_fail1388:
    unless rx465_bstack, rx465_done1386
    pop $I19, rx465_bstack
    if_null rx465_cstack, rx465_cstack_done1391
    unless rx465_cstack, rx465_cstack_done1391
    dec $I19
    set $P11, rx465_cstack[$I19]
  rx465_cstack_done1391:
    pop rx465_rep, rx465_bstack
    pop rx465_pos, rx465_bstack
    pop $I19, rx465_bstack
    lt rx465_pos, -1, rx465_done1386
    lt rx465_pos, 0, rx465_fail1388
    eq $I19, 0, rx465_fail1388
    nqp_islist $I20, rx465_cstack
    unless $I20, rx465_jump1389
    elements $I18, rx465_bstack
    le $I18, 0, rx465_cut1390
    dec $I18
    set $I18, rx465_bstack[$I18]
  rx465_cut1390:
    assign rx465_cstack, $I18
  rx465_jump1389:
    jump $I19
  rx465_done1386:
    rx465_cur."!cursor_fail"()
    .return (rx465_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1346233478.067_caps" :subid("cuid_memo_138_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["package_def"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1346233478.067_nfa" :subid("cuid_memo_139_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 109
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 111
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 100
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 117
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 108
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 2
    push $P531, $P532
    box $P533, 101
    push $P531, $P533
    box $P534, 9
    push $P531, $P534
    push $P501, $P531
    new $P535, 'ResizablePMCArray'
    box $P536, 8
    push $P535, $P536
    box $P537, "package_def"
    push $P535, $P537
    box $P538, 0
    push $P535, $P538
    push $P501, $P535
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_102_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set self, _lex_param_0
    .local string rx470_tgt
    .local int rx470_pos
    .local int rx470_off
    .local int rx470_eos
    .local int rx470_rep
    .local pmc rx470_cur
    .local pmc rx470_curclass
    .local pmc rx470_bstack
    .local pmc rx470_cstack
    (rx470_cur, rx470_tgt, rx470_pos, rx470_curclass, rx470_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx470_cur
    length rx470_eos, rx470_tgt
    eq $I19, 1, rx470_restart1403
    gt rx470_pos, rx470_eos, rx470_fail1404
    repr_get_attr_int $I11, self, rx470_curclass, "$!from"
    ne $I11, -1, rxscan471_done1410
    goto rxscan471_scan1409
  rxscan471_loop1408:
    inc rx470_pos
    gt rx470_pos, rx470_eos, rx470_fail1404
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!from", rx470_pos
  rxscan471_scan1409:
    nqp_rxmark rx470_bstack, rxscan471_loop1408, rx470_pos, 0
  rxscan471_done1410:
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    store_lex unicode:"$\x{a2}", rx470_cur
    find_dynamic_lex $P503, "$*PACKAGE"
    unless_null $P503, fallback1411
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$PACKAGE"]
    unless_null $P504, fallback1412
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback1412:
    unless_null $P504, vivi_4721413
    die "Contextual $*PACKAGE not found"
    box $P508, "Contextual $*PACKAGE not found"
    set $P504, $P508
  vivi_4721413:
    set $P503, $P504
  fallback1411:
    set $P101, $P503
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    store_lex unicode:"$\x{a2}", rx470_cur
    box $P509, "knowhow"
    set $P102, $P509
    nqp_rxmark rx470_bstack, rxcap473_fail1415, rx470_pos, 0
    add $I11, rx470_pos, 7
    gt $I11, rx470_eos, rx470_fail1404
    substr $S10, rx470_tgt, rx470_pos, 7
    ne $S10, ucs4:"knowhow", rx470_fail1404
    add rx470_pos, 7
    nqp_rxpeek $I19, rx470_bstack, rxcap473_fail1415
    inc $I19
    set $I11, rx470_bstack[$I19]
    $P11 = rx470_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx470_pos)
    rx470_cstack = rx470_cur."!cursor_capture"($P11, "sym")
    goto rxcap473_done1414
  rxcap473_fail1415:
    goto rx470_fail1404
  rxcap473_done1414:
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    $P11 = rx470_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx470_curclass, "$!pos"
    lt $I11, 0, rx470_fail1404
    nqp_rxmark rx470_bstack, rxsubrule474_pass1416, -1, 0
  rxsubrule474_pass1416:
    rx470_cstack = rx470_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx470_pos, $P11, rx470_curclass, "$!pos"
    rx470_cur."!cursor_pass"(rx470_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx470_cur)
  rx470_restart1403:
    repr_get_attr_obj rx470_cstack, rx470_cur, rx470_curclass, "$!cstack"
  rx470_fail1404:
    unless rx470_bstack, rx470_done1402
    pop $I19, rx470_bstack
    if_null rx470_cstack, rx470_cstack_done1407
    unless rx470_cstack, rx470_cstack_done1407
    dec $I19
    set $P11, rx470_cstack[$I19]
  rx470_cstack_done1407:
    pop rx470_rep, rx470_bstack
    pop rx470_pos, rx470_bstack
    pop $I19, rx470_bstack
    lt rx470_pos, -1, rx470_done1402
    lt rx470_pos, 0, rx470_fail1404
    eq $I19, 0, rx470_fail1404
    nqp_islist $I20, rx470_cstack
    unless $I20, rx470_jump1405
    elements $I18, rx470_bstack
    le $I18, 0, rx470_cut1406
    dec $I18
    set $I18, rx470_bstack[$I18]
  rx470_cut1406:
    assign rx470_cstack, $I18
  rx470_jump1405:
    jump $I19
  rx470_done1402:
    rx470_cur."!cursor_fail"()
    .return (rx470_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1346233478.067_caps" :subid("cuid_memo_140_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["package_def"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1346233478.067_nfa" :subid("cuid_memo_141_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 107
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 110
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 111
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 119
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 104
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 2
    push $P531, $P532
    box $P533, 111
    push $P531, $P533
    box $P534, 9
    push $P531, $P534
    push $P501, $P531
    new $P535, 'ResizablePMCArray'
    box $P536, 2
    push $P535, $P536
    box $P537, 119
    push $P535, $P537
    box $P538, 10
    push $P535, $P538
    push $P501, $P535
    new $P539, 'ResizablePMCArray'
    box $P540, 8
    push $P539, $P540
    box $P541, "package_def"
    push $P539, $P541
    box $P542, 0
    push $P539, $P542
    push $P501, $P539
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_103_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 906
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set self, _lex_param_0
    .local string rx475_tgt
    .local int rx475_pos
    .local int rx475_off
    .local int rx475_eos
    .local int rx475_rep
    .local pmc rx475_cur
    .local pmc rx475_curclass
    .local pmc rx475_bstack
    .local pmc rx475_cstack
    (rx475_cur, rx475_tgt, rx475_pos, rx475_curclass, rx475_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx475_cur
    length rx475_eos, rx475_tgt
    eq $I19, 1, rx475_restart1419
    gt rx475_pos, rx475_eos, rx475_fail1420
    repr_get_attr_int $I11, self, rx475_curclass, "$!from"
    ne $I11, -1, rxscan476_done1426
    goto rxscan476_scan1425
  rxscan476_loop1424:
    inc rx475_pos
    gt rx475_pos, rx475_eos, rx475_fail1420
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!from", rx475_pos
  rxscan476_scan1425:
    nqp_rxmark rx475_bstack, rxscan476_loop1424, rx475_pos, 0
  rxscan476_done1426:
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    store_lex unicode:"$\x{a2}", rx475_cur
    find_dynamic_lex $P503, "$*PACKAGE"
    unless_null $P503, fallback1427
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$PACKAGE"]
    unless_null $P504, fallback1428
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback1428:
    unless_null $P504, vivi_4771429
    die "Contextual $*PACKAGE not found"
    box $P508, "Contextual $*PACKAGE not found"
    set $P504, $P508
  vivi_4771429:
    set $P503, $P504
  fallback1427:
    set $P101, $P503
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    store_lex unicode:"$\x{a2}", rx475_cur
    box $P509, "class"
    set $P102, $P509
    nqp_rxmark rx475_bstack, rxcap478_fail1431, rx475_pos, 0
    add $I11, rx475_pos, 5
    gt $I11, rx475_eos, rx475_fail1420
    substr $S10, rx475_tgt, rx475_pos, 5
    ne $S10, ucs4:"class", rx475_fail1420
    add rx475_pos, 5
    nqp_rxpeek $I19, rx475_bstack, rxcap478_fail1431
    inc $I19
    set $I11, rx475_bstack[$I19]
    $P11 = rx475_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx475_pos)
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "sym")
    goto rxcap478_done1430
  rxcap478_fail1431:
    goto rx475_fail1420
  rxcap478_done1430:
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1420
    nqp_rxmark rx475_bstack, rxsubrule479_pass1432, -1, 0
  rxsubrule479_pass1432:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    rx475_cur."!cursor_pass"(rx475_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx475_cur)
  rx475_restart1419:
    repr_get_attr_obj rx475_cstack, rx475_cur, rx475_curclass, "$!cstack"
  rx475_fail1420:
    unless rx475_bstack, rx475_done1418
    pop $I19, rx475_bstack
    if_null rx475_cstack, rx475_cstack_done1423
    unless rx475_cstack, rx475_cstack_done1423
    dec $I19
    set $P11, rx475_cstack[$I19]
  rx475_cstack_done1423:
    pop rx475_rep, rx475_bstack
    pop rx475_pos, rx475_bstack
    pop $I19, rx475_bstack
    lt rx475_pos, -1, rx475_done1418
    lt rx475_pos, 0, rx475_fail1420
    eq $I19, 0, rx475_fail1420
    nqp_islist $I20, rx475_cstack
    unless $I20, rx475_jump1421
    elements $I18, rx475_bstack
    le $I18, 0, rx475_cut1422
    dec $I18
    set $I18, rx475_bstack[$I18]
  rx475_cut1422:
    assign rx475_cstack, $I18
  rx475_jump1421:
    jump $I19
  rx475_done1418:
    rx475_cur."!cursor_fail"()
    .return (rx475_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1346233478.067_caps" :subid("cuid_memo_142_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["package_def"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1346233478.067_nfa" :subid("cuid_memo_143_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 99
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 108
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 97
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 115
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 115
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 8
    push $P531, $P532
    box $P533, "package_def"
    push $P531, $P533
    box $P534, 0
    push $P531, $P534
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_104_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1435
    gt rx480_pos, rx480_eos, rx480_fail1436
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1442
    goto rxscan481_scan1441
  rxscan481_loop1440:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1436
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1441:
    nqp_rxmark rx480_bstack, rxscan481_loop1440, rx480_pos, 0
  rxscan481_done1442:
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    store_lex unicode:"$\x{a2}", rx480_cur
    find_dynamic_lex $P503, "$*PACKAGE"
    unless_null $P503, fallback1443
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$PACKAGE"]
    unless_null $P504, fallback1444
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback1444:
    unless_null $P504, vivi_4821445
    die "Contextual $*PACKAGE not found"
    box $P508, "Contextual $*PACKAGE not found"
    set $P504, $P508
  vivi_4821445:
    set $P503, $P504
  fallback1443:
    set $P101, $P503
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    store_lex unicode:"$\x{a2}", rx480_cur
    box $P509, "grammar"
    set $P102, $P509
    nqp_rxmark rx480_bstack, rxcap483_fail1447, rx480_pos, 0
    add $I11, rx480_pos, 7
    gt $I11, rx480_eos, rx480_fail1436
    substr $S10, rx480_tgt, rx480_pos, 7
    ne $S10, ucs4:"grammar", rx480_fail1436
    add rx480_pos, 7
    nqp_rxpeek $I19, rx480_bstack, rxcap483_fail1447
    inc $I19
    set $I11, rx480_bstack[$I19]
    $P11 = rx480_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx480_pos)
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "sym")
    goto rxcap483_done1446
  rxcap483_fail1447:
    goto rx480_fail1436
  rxcap483_done1446:
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    $P11 = rx480_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx480_curclass, "$!pos"
    lt $I11, 0, rx480_fail1436
    nqp_rxmark rx480_bstack, rxsubrule484_pass1448, -1, 0
  rxsubrule484_pass1448:
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx480_pos, $P11, rx480_curclass, "$!pos"
    rx480_cur."!cursor_pass"(rx480_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1435:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1436:
    unless rx480_bstack, rx480_done1434
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1439
    unless rx480_cstack, rx480_cstack_done1439
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1439:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1434
    lt rx480_pos, 0, rx480_fail1436
    eq $I19, 0, rx480_fail1436
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1437
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1438
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1438:
    assign rx480_cstack, $I18
  rx480_jump1437:
    jump $I19
  rx480_done1434:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1346233478.067_caps" :subid("cuid_memo_144_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["package_def"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1346233478.067_nfa" :subid("cuid_memo_145_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 103
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 114
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 97
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 109
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 109
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 2
    push $P531, $P532
    box $P533, 97
    push $P531, $P533
    box $P534, 9
    push $P531, $P534
    push $P501, $P531
    new $P535, 'ResizablePMCArray'
    box $P536, 2
    push $P535, $P536
    box $P537, 114
    push $P535, $P537
    box $P538, 10
    push $P535, $P538
    push $P501, $P535
    new $P539, 'ResizablePMCArray'
    box $P540, 8
    push $P539, $P540
    box $P541, "package_def"
    push $P539, $P541
    box $P542, 0
    push $P539, $P542
    push $P501, $P539
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_105_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 916
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set self, _lex_param_0
    .local string rx485_tgt
    .local int rx485_pos
    .local int rx485_off
    .local int rx485_eos
    .local int rx485_rep
    .local pmc rx485_cur
    .local pmc rx485_curclass
    .local pmc rx485_bstack
    .local pmc rx485_cstack
    (rx485_cur, rx485_tgt, rx485_pos, rx485_curclass, rx485_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx485_cur
    length rx485_eos, rx485_tgt
    eq $I19, 1, rx485_restart1451
    gt rx485_pos, rx485_eos, rx485_fail1452
    repr_get_attr_int $I11, self, rx485_curclass, "$!from"
    ne $I11, -1, rxscan486_done1458
    goto rxscan486_scan1457
  rxscan486_loop1456:
    inc rx485_pos
    gt rx485_pos, rx485_eos, rx485_fail1452
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!from", rx485_pos
  rxscan486_scan1457:
    nqp_rxmark rx485_bstack, rxscan486_loop1456, rx485_pos, 0
  rxscan486_done1458:
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    store_lex unicode:"$\x{a2}", rx485_cur
    find_dynamic_lex $P503, "$*PACKAGE"
    unless_null $P503, fallback1459
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$PACKAGE"]
    unless_null $P504, fallback1460
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback1460:
    unless_null $P504, vivi_4871461
    die "Contextual $*PACKAGE not found"
    box $P508, "Contextual $*PACKAGE not found"
    set $P504, $P508
  vivi_4871461:
    set $P503, $P504
  fallback1459:
    set $P101, $P503
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    store_lex unicode:"$\x{a2}", rx485_cur
    box $P509, "role"
    set $P102, $P509
    nqp_rxmark rx485_bstack, rxcap488_fail1463, rx485_pos, 0
    add $I11, rx485_pos, 4
    gt $I11, rx485_eos, rx485_fail1452
    substr $S10, rx485_tgt, rx485_pos, 4
    ne $S10, ucs4:"role", rx485_fail1452
    add rx485_pos, 4
    nqp_rxpeek $I19, rx485_bstack, rxcap488_fail1463
    inc $I19
    set $I11, rx485_bstack[$I19]
    $P11 = rx485_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx485_pos)
    rx485_cstack = rx485_cur."!cursor_capture"($P11, "sym")
    goto rxcap488_done1462
  rxcap488_fail1463:
    goto rx485_fail1452
  rxcap488_done1462:
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    $P11 = rx485_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx485_curclass, "$!pos"
    lt $I11, 0, rx485_fail1452
    nqp_rxmark rx485_bstack, rxsubrule489_pass1464, -1, 0
  rxsubrule489_pass1464:
    rx485_cstack = rx485_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx485_pos, $P11, rx485_curclass, "$!pos"
    rx485_cur."!cursor_pass"(rx485_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx485_cur)
  rx485_restart1451:
    repr_get_attr_obj rx485_cstack, rx485_cur, rx485_curclass, "$!cstack"
  rx485_fail1452:
    unless rx485_bstack, rx485_done1450
    pop $I19, rx485_bstack
    if_null rx485_cstack, rx485_cstack_done1455
    unless rx485_cstack, rx485_cstack_done1455
    dec $I19
    set $P11, rx485_cstack[$I19]
  rx485_cstack_done1455:
    pop rx485_rep, rx485_bstack
    pop rx485_pos, rx485_bstack
    pop $I19, rx485_bstack
    lt rx485_pos, -1, rx485_done1450
    lt rx485_pos, 0, rx485_fail1452
    eq $I19, 0, rx485_fail1452
    nqp_islist $I20, rx485_cstack
    unless $I20, rx485_jump1453
    elements $I18, rx485_bstack
    le $I18, 0, rx485_cut1454
    dec $I18
    set $I18, rx485_bstack[$I18]
  rx485_cut1454:
    assign rx485_cstack, $I18
  rx485_jump1453:
    jump $I19
  rx485_done1450:
    rx485_cur."!cursor_fail"()
    .return (rx485_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1346233478.067_caps" :subid("cuid_memo_146_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["package_def"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1346233478.067_nfa" :subid("cuid_memo_147_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 114
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 111
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 108
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 101
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "package_def"
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P501, $P527
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_106_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 921
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set self, _lex_param_0
    .local string rx490_tgt
    .local int rx490_pos
    .local int rx490_off
    .local int rx490_eos
    .local int rx490_rep
    .local pmc rx490_cur
    .local pmc rx490_curclass
    .local pmc rx490_bstack
    .local pmc rx490_cstack
    (rx490_cur, rx490_tgt, rx490_pos, rx490_curclass, rx490_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx490_cur
    length rx490_eos, rx490_tgt
    eq $I19, 1, rx490_restart1467
    gt rx490_pos, rx490_eos, rx490_fail1468
    repr_get_attr_int $I11, self, rx490_curclass, "$!from"
    ne $I11, -1, rxscan491_done1474
    goto rxscan491_scan1473
  rxscan491_loop1472:
    inc rx490_pos
    gt rx490_pos, rx490_eos, rx490_fail1468
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!from", rx490_pos
  rxscan491_scan1473:
    nqp_rxmark rx490_bstack, rxscan491_loop1472, rx490_pos, 0
  rxscan491_done1474:
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    store_lex unicode:"$\x{a2}", rx490_cur
    find_dynamic_lex $P503, "$*PACKAGE"
    unless_null $P503, fallback1475
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$PACKAGE"]
    unless_null $P504, fallback1476
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback1476:
    unless_null $P504, vivi_4921477
    die "Contextual $*PACKAGE not found"
    box $P508, "Contextual $*PACKAGE not found"
    set $P504, $P508
  vivi_4921477:
    set $P503, $P504
  fallback1475:
    set $P101, $P503
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    store_lex unicode:"$\x{a2}", rx490_cur
    box $P509, "native"
    set $P102, $P509
    nqp_rxmark rx490_bstack, rxcap493_fail1479, rx490_pos, 0
    add $I11, rx490_pos, 6
    gt $I11, rx490_eos, rx490_fail1468
    substr $S10, rx490_tgt, rx490_pos, 6
    ne $S10, ucs4:"native", rx490_fail1468
    add rx490_pos, 6
    nqp_rxpeek $I19, rx490_bstack, rxcap493_fail1479
    inc $I19
    set $I11, rx490_bstack[$I19]
    $P11 = rx490_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx490_pos)
    rx490_cstack = rx490_cur."!cursor_capture"($P11, "sym")
    goto rxcap493_done1478
  rxcap493_fail1479:
    goto rx490_fail1468
  rxcap493_done1478:
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    $P11 = rx490_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx490_curclass, "$!pos"
    lt $I11, 0, rx490_fail1468
    nqp_rxmark rx490_bstack, rxsubrule494_pass1480, -1, 0
  rxsubrule494_pass1480:
    rx490_cstack = rx490_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx490_pos, $P11, rx490_curclass, "$!pos"
    rx490_cur."!cursor_pass"(rx490_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx490_cur)
  rx490_restart1467:
    repr_get_attr_obj rx490_cstack, rx490_cur, rx490_curclass, "$!cstack"
  rx490_fail1468:
    unless rx490_bstack, rx490_done1466
    pop $I19, rx490_bstack
    if_null rx490_cstack, rx490_cstack_done1471
    unless rx490_cstack, rx490_cstack_done1471
    dec $I19
    set $P11, rx490_cstack[$I19]
  rx490_cstack_done1471:
    pop rx490_rep, rx490_bstack
    pop rx490_pos, rx490_bstack
    pop $I19, rx490_bstack
    lt rx490_pos, -1, rx490_done1466
    lt rx490_pos, 0, rx490_fail1468
    eq $I19, 0, rx490_fail1468
    nqp_islist $I20, rx490_cstack
    unless $I20, rx490_jump1469
    elements $I18, rx490_bstack
    le $I18, 0, rx490_cut1470
    dec $I18
    set $I18, rx490_bstack[$I18]
  rx490_cut1470:
    assign rx490_cstack, $I18
  rx490_jump1469:
    jump $I19
  rx490_done1466:
    rx490_cur."!cursor_fail"()
    .return (rx490_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1346233478.067_caps" :subid("cuid_memo_148_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["package_def"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1346233478.067_nfa" :subid("cuid_memo_149_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 110
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 97
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 116
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 105
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 118
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 2
    push $P531, $P532
    box $P533, 101
    push $P531, $P533
    box $P534, 9
    push $P531, $P534
    push $P501, $P531
    new $P535, 'ResizablePMCArray'
    box $P536, 8
    push $P535, $P536
    box $P537, "package_def"
    push $P535, $P537
    box $P538, 0
    push $P535, $P538
    push $P501, $P535
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_107_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 926
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set self, _lex_param_0
    .local string rx495_tgt
    .local int rx495_pos
    .local int rx495_off
    .local int rx495_eos
    .local int rx495_rep
    .local pmc rx495_cur
    .local pmc rx495_curclass
    .local pmc rx495_bstack
    .local pmc rx495_cstack
    (rx495_cur, rx495_tgt, rx495_pos, rx495_curclass, rx495_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx495_cur
    length rx495_eos, rx495_tgt
    eq $I19, 1, rx495_restart1483
    gt rx495_pos, rx495_eos, rx495_fail1484
    repr_get_attr_int $I11, self, rx495_curclass, "$!from"
    ne $I11, -1, rxscan496_done1490
    goto rxscan496_scan1489
  rxscan496_loop1488:
    inc rx495_pos
    gt rx495_pos, rx495_eos, rx495_fail1484
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!from", rx495_pos
  rxscan496_scan1489:
    nqp_rxmark rx495_bstack, rxscan496_loop1488, rx495_pos, 0
  rxscan496_done1490:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    find_dynamic_lex $P503, "$*PACKAGE"
    unless_null $P503, fallback1491
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$PACKAGE"]
    unless_null $P504, fallback1492
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback1492:
    unless_null $P504, vivi_4971493
    die "Contextual $*PACKAGE not found"
    box $P508, "Contextual $*PACKAGE not found"
    set $P504, $P508
  vivi_4971493:
    set $P503, $P504
  fallback1491:
    set $P101, $P503
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    box $P509, "stub"
    set $P102, $P509
    nqp_rxmark rx495_bstack, rxcap498_fail1495, rx495_pos, 0
    add $I11, rx495_pos, 4
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 4
    ne $S10, ucs4:"stub", rx495_fail1484
    add rx495_pos, 4
    nqp_rxpeek $I19, rx495_bstack, rxcap498_fail1495
    inc $I19
    set $I11, rx495_bstack[$I19]
    $P11 = rx495_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx495_pos)
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "sym")
    goto rxcap498_done1494
  rxcap498_fail1495:
    goto rx495_fail1484
  rxcap498_done1494:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."name"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    nqp_rxmark rx495_bstack, rxsubrule500_pass1497, -1, 0
  rxsubrule500_pass1497:
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 9
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 9
    ne $S10, ucs4:"metaclass", rx495_fail1484
    add rx495_pos, 9
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."name"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    nqp_rxmark rx495_bstack, rxsubrule503_pass1500, -1, 0
  rxsubrule503_pass1500:
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 1
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 1
    ne $S10, ucs4:"{", rx495_fail1484
    add rx495_pos, 1
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 3
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 3
    ne $S10, ucs4:"...", rx495_fail1484
    add rx495_pos, 3
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 1
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 1
    ne $S10, ucs4:"}", rx495_fail1484
    add rx495_pos, 1
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    rx495_cur."!cursor_pass"(rx495_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx495_cur)
  rx495_restart1483:
    repr_get_attr_obj rx495_cstack, rx495_cur, rx495_curclass, "$!cstack"
  rx495_fail1484:
    unless rx495_bstack, rx495_done1482
    pop $I19, rx495_bstack
    if_null rx495_cstack, rx495_cstack_done1487
    unless rx495_cstack, rx495_cstack_done1487
    dec $I19
    set $P11, rx495_cstack[$I19]
  rx495_cstack_done1487:
    pop rx495_rep, rx495_bstack
    pop rx495_pos, rx495_bstack
    pop $I19, rx495_bstack
    lt rx495_pos, -1, rx495_done1482
    lt rx495_pos, 0, rx495_fail1484
    eq $I19, 0, rx495_fail1484
    nqp_islist $I20, rx495_cstack
    unless $I20, rx495_jump1485
    elements $I18, rx495_bstack
    le $I18, 0, rx495_cut1486
    dec $I18
    set $I18, rx495_bstack[$I18]
  rx495_cut1486:
    assign rx495_cstack, $I18
  rx495_jump1485:
    jump $I19
  rx495_done1482:
    rx495_cur."!cursor_fail"()
    .return (rx495_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1346233478.067_caps" :subid("cuid_memo_150_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["name"], $P503
    box $P504, 0
    set $P501["metaclass"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1346233478.067_nfa" :subid("cuid_memo_151_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 115
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 116
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 117
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 98
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 0
    push $P527, $P528
    box $P529, 0
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P501, $P527
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_108_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    .param pmc _lex_param_0 
    .const 'Sub' $P510 = 'cuid_391_1346233478.067' 
    capture_lex $P510 
    .lex "$*PACKAGE", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set self, _lex_param_0
    .local string rx508_tgt
    .local int rx508_pos
    .local int rx508_off
    .local int rx508_eos
    .local int rx508_rep
    .local pmc rx508_cur
    .local pmc rx508_curclass
    .local pmc rx508_bstack
    .local pmc rx508_cstack
    (rx508_cur, rx508_tgt, rx508_pos, rx508_curclass, rx508_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx508_cur
    length rx508_eos, rx508_tgt
    eq $I19, 1, rx508_restart1507
    gt rx508_pos, rx508_eos, rx508_fail1508
    repr_get_attr_int $I11, self, rx508_curclass, "$!from"
    ne $I11, -1, rxscan509_done1514
    goto rxscan509_scan1513
  rxscan509_loop1512:
    inc rx508_pos
    gt rx508_pos, rx508_eos, rx508_fail1508
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!from", rx508_pos
  rxscan509_scan1513:
    nqp_rxmark rx508_bstack, rxscan509_loop1512, rx508_pos, 0
  rxscan509_done1514:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    store_lex unicode:"$\x{a2}", rx508_cur
    unless_null $P101, fallback1516
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$PACKAGE"]
    unless_null $P502, fallback1517
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback1517:
    unless_null $P502, vivi_5111518
    die "Contextual $*PACKAGE not found"
    box $P506, "Contextual $*PACKAGE not found"
    set $P502, $P506
  vivi_5111518:
    set $P101, $P502
  fallback1516:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule513_pass1520, -1, 0
  rxsubrule513_pass1520:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr515_done1523, rx508_pos, 0
  rxquantr515_loop1522:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 2
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 2
    ne $S10, ucs4:"is", rx508_fail1508
    add rx508_pos, 2
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 5
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 5
    ne $S10, ucs4:"repr(", rx508_fail1508
    add rx508_pos, 5
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule519_pass1527, -1, 0
  rxsubrule519_pass1527:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 1
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 1
    ne $S10, ucs4:")", rx508_fail1508
    add rx508_pos, 1
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr515_done1523
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr515_done1523
    inc rx508_rep
  rxquantr515_done1523:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    store_lex unicode:"$\x{a2}", rx508_cur
    $P507 = $P102."MATCH"()
    set $P103, $P507
    .const 'Sub' $P508 = 'cuid_391_1346233478.067' 
    capture_lex $P508
    $P509 = $P508()
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr546_done1614, rx508_pos, 0
  rxquantr546_loop1613:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 2
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 2
    ne $S10, ucs4:"is", rx508_fail1508
    add rx508_pos, 2
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule549_pass1617, -1, 0
  rxsubrule549_pass1617:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr546_done1614
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr546_done1614
    inc rx508_rep
  rxquantr546_done1614:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr552_done1621, rx508_pos, 0
  rxquantr552_loop1620:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 4
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 4
    ne $S10, ucs4:"does", rx508_fail1508
    add rx508_pos, 4
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule555_pass1624, -1, 0
  rxsubrule555_pass1624:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr552_done1621
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr552_done1621
    inc rx508_rep
    nqp_rxmark rx508_bstack, rxquantr552_done1621, rx508_pos, rx508_rep
    goto rxquantr552_loop1620
  rxquantr552_done1621:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
  alt558_01628:
    nqp_rxmark rx508_bstack, alt558_11633, rx508_pos, 0
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 1
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 1
    ne $S10, ucs4:";", rx508_fail1508
    add rx508_pos, 1
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."comp_unit"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule561_pass1631, -1, 0
  rxsubrule561_pass1631:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "comp_unit")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    goto alt558_end1627
  alt558_11633:
    nqp_rxmark rx508_bstack, alt558_21638, rx508_pos, 0
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    ge rx508_pos, rx508_eos, rx508_fail1508
    substr $S11, rx508_tgt, rx508_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx508_fail1508
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."block"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule565_pass1636, -1, 0
  rxsubrule565_pass1636:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    goto alt558_end1627
  alt558_21638:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
  alt558_end1627:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    rx508_cur."!cursor_pass"(rx508_pos, "package_def", 'backtrack'=>1)
    .return (rx508_cur)
  rx508_restart1507:
    repr_get_attr_obj rx508_cstack, rx508_cur, rx508_curclass, "$!cstack"
  rx508_fail1508:
    unless rx508_bstack, rx508_done1506
    pop $I19, rx508_bstack
    if_null rx508_cstack, rx508_cstack_done1511
    unless rx508_cstack, rx508_cstack_done1511
    dec $I19
    set $P11, rx508_cstack[$I19]
  rx508_cstack_done1511:
    pop rx508_rep, rx508_bstack
    pop rx508_pos, rx508_bstack
    pop $I19, rx508_bstack
    lt rx508_pos, -1, rx508_done1506
    lt rx508_pos, 0, rx508_fail1508
    eq $I19, 0, rx508_fail1508
    nqp_islist $I20, rx508_cstack
    unless $I20, rx508_jump1509
    elements $I18, rx508_bstack
    le $I18, 0, rx508_cut1510
    dec $I18
    set $I18, rx508_bstack[$I18]
  rx508_cut1510:
    assign rx508_cstack, $I18
  rx508_jump1509:
    jump $I19
  rx508_done1506:
    rx508_cur."!cursor_fail"()
    .return (rx508_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_108_1346233478.067_caps" :subid("cuid_memo_152_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["name"], $P502
    box $P503, 2
    set $P501["repr"], $P503
    box $P504, 2
    set $P501["parent"], $P504
    box $P505, 2
    set $P501["role"], $P505
    box $P506, 0
    set $P501["comp_unit"], $P506
    box $P507, 0
    set $P501["block"], $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1346233478.067") :anon :lex :outer("cuid_108_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 940
    .lex "%args", $P101 
    new $P501, 'Hash'
    set $P101, $P501
    find_lex $P503, "$/"
    set $P502, $P503["name"]
    unless_null $P502, fallback1531
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P504
  fallback1531:
    set $S501, $P502
    box $P505, $S501
    set $P101["name"], $P505
    find_lex $P507, "$/"
    set $P506, $P507["repr"]
    unless_null $P506, fallback1534
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P508
  fallback1534:
    set $P521, $P506
    unless $P506 goto if523_end1533 
.annotate 'line', 945
    find_lex $P514, "$/"
    set $P513, $P514["repr"]
    unless_null $P513, fallback1535
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P515
  fallback1535:
    set $P512, $P513[0]
    unless_null $P512, fallback1536
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback1536:
    set $P511, $P512["quote_delimited"]
    unless_null $P511, fallback1537
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P517
  fallback1537:
    set $P510, $P511["quote_atom"]
    unless_null $P510, fallback1538
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P518
  fallback1538:
    set $P509, $P510[0]
    unless_null $P509, fallback1539
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P519
  fallback1539:
    set $S502, $P509
    box $P520, $S502
    set $P101["repr"], $P520
    set $P521, $P520
  if523_end1533:
.annotate 'line', 948
    find_dynamic_lex $P522, "$*W"
    unless_null $P522, fallback1540
    get_hll_global $P525, "GLOBAL"
    get_who $P524, $P525
    set $P523, $P524["$W"]
    unless_null $P523, fallback1541
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P526
  fallback1541:
    unless_null $P523, vivi_5241542
    die "Contextual $*W not found"
    box $P527, "Contextual $*W not found"
    set $P523, $P527
  vivi_5241542:
    set $P522, $P523
  fallback1540:
    find_dynamic_lex $P529, "%*HOW"
    unless_null $P529, fallback1543
    get_hll_global $P532, "GLOBAL"
    get_who $P531, $P532
    set $P530, $P531["%HOW"]
    unless_null $P530, fallback1544
    get_hll_global $P534, "GLOBAL"
    get_who $P533, $P534
    new $P535, 'Hash'
    set $P533["%HOW"], $P535
    set $P530, $P535
  fallback1544:
    unless_null $P530, vivi_5251545
    die "Contextual %*HOW not found"
    box $P536, "Contextual %*HOW not found"
    set $P530, $P536
  vivi_5251545:
    set $P529, $P530
  fallback1543:
    find_dynamic_lex $P537, "$*PKGDECL"
    unless_null $P537, fallback1546
    get_hll_global $P540, "GLOBAL"
    get_who $P539, $P540
    set $P538, $P539["$PKGDECL"]
    unless_null $P538, fallback1547
    nqp_get_sc_object $P541, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P538, $P541
  fallback1547:
    unless_null $P538, vivi_5261548
    die "Contextual $*PKGDECL not found"
    box $P542, "Contextual $*PKGDECL not found"
    set $P538, $P542
  vivi_5261548:
    set $P537, $P538
  fallback1546:
    set $S503, $P537
    set $P528, $P529[$S503]
    unless_null $P528, fallback1549
    nqp_get_sc_object $P543, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P528, $P543
  fallback1549:
    $P544 = $P522."pkg_create_mo"($P528, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P544
    find_dynamic_lex $P545, "$*SCOPE"
    unless_null $P545, fallback1554
    get_hll_global $P548, "GLOBAL"
    get_who $P547, $P548
    set $P546, $P547["$SCOPE"]
    unless_null $P546, fallback1555
    nqp_get_sc_object $P549, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P546, $P549
  fallback1555:
    unless_null $P546, vivi_5291556
    die "Contextual $*SCOPE not found"
    box $P550, "Contextual $*SCOPE not found"
    set $P546, $P550
  vivi_5291556:
    set $P545, $P546
  fallback1554:
    set $S504, $P545
    iseq $I501, $S504, "our"
    set $I503, $I501
    if $I501 goto unless528_end1553 
    find_dynamic_lex $P551, "$*SCOPE"
    unless_null $P551, fallback1557
    get_hll_global $P554, "GLOBAL"
    get_who $P553, $P554
    set $P552, $P553["$SCOPE"]
    unless_null $P552, fallback1558
    nqp_get_sc_object $P555, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P552, $P555
  fallback1558:
    unless_null $P552, vivi_5301559
    die "Contextual $*SCOPE not found"
    box $P556, "Contextual $*SCOPE not found"
    set $P552, $P556
  vivi_5301559:
    set $P551, $P552
  fallback1557:
    set $S505, $P551
    iseq $I502, $S505, ""
    set $I503, $I502
  unless528_end1553:
    unless $I503 goto if527_else1550 
.annotate 'line', 951
.annotate 'line', 952
    find_dynamic_lex $P557, "$*W"
    unless_null $P557, fallback1560
    get_hll_global $P560, "GLOBAL"
    get_who $P559, $P560
    set $P558, $P559["$W"]
    unless_null $P558, fallback1561
    nqp_get_sc_object $P561, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P558, $P561
  fallback1561:
    unless_null $P558, vivi_5311562
    die "Contextual $*W not found"
    box $P562, "Contextual $*W not found"
    set $P558, $P562
  vivi_5311562:
    set $P557, $P558
  fallback1560:
    find_dynamic_lex $P563, "$*OUTERPACKAGE"
    unless_null $P563, fallback1563
    get_hll_global $P566, "GLOBAL"
    get_who $P565, $P566
    set $P564, $P565["$OUTERPACKAGE"]
    unless_null $P564, fallback1564
    nqp_get_sc_object $P567, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P564, $P567
  fallback1564:
    unless_null $P564, vivi_5321565
    die "Contextual $*OUTERPACKAGE not found"
    box $P568, "Contextual $*OUTERPACKAGE not found"
    set $P564, $P568
  vivi_5321565:
    set $P563, $P564
  fallback1563:
    find_lex $P571, "$/"
    set $P570, $P571["name"]
    unless_null $P570, fallback1566
    nqp_get_sc_object $P572, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P570, $P572
  fallback1566:
    set $P569, $P570["identifier"]
    unless_null $P569, fallback1567
    nqp_get_sc_object $P573, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P573
  fallback1567:
    find_dynamic_lex $P574, "$*PACKAGE"
    unless_null $P574, fallback1568
    get_hll_global $P577, "GLOBAL"
    get_who $P576, $P577
    set $P575, $P576["$PACKAGE"]
    unless_null $P575, fallback1569
    nqp_get_sc_object $P578, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P575, $P578
  fallback1569:
    unless_null $P575, vivi_5331570
    die "Contextual $*PACKAGE not found"
    box $P579, "Contextual $*PACKAGE not found"
    set $P575, $P579
  vivi_5331570:
    set $P574, $P575
  fallback1568:
    $P580 = $P557."install_package_symbol"($P563, $P569, $P574)
    find_lex $P583, "$/"
    set $P582, $P583["name"]
    unless_null $P582, fallback1573
    nqp_get_sc_object $P584, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P582, $P584
  fallback1573:
    set $P581, $P582["identifier"]
    unless_null $P581, fallback1574
    nqp_get_sc_object $P585, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P581, $P585
  fallback1574:
    set $N501, $P581
    set $N502, 1
    iseq $I504, $N501, $N502
    box $P614, $I504
    set $P613, $P614
    unless $I504 goto if534_end1572 
.annotate 'line', 953
.annotate 'line', 954
    find_dynamic_lex $P586, "$*W"
    unless_null $P586, fallback1575
    get_hll_global $P589, "GLOBAL"
    get_who $P588, $P589
    set $P587, $P588["$W"]
    unless_null $P587, fallback1576
    nqp_get_sc_object $P590, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P587, $P590
  fallback1576:
    unless_null $P587, vivi_5351577
    die "Contextual $*W not found"
    box $P591, "Contextual $*W not found"
    set $P587, $P591
  vivi_5351577:
    set $P586, $P587
  fallback1575:
    find_dynamic_lex $P592, "$*W"
    unless_null $P592, fallback1578
    get_hll_global $P595, "GLOBAL"
    get_who $P594, $P595
    set $P593, $P594["$W"]
    unless_null $P593, fallback1579
    nqp_get_sc_object $P596, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P593, $P596
  fallback1579:
    unless_null $P593, vivi_5361580
    die "Contextual $*W not found"
    box $P597, "Contextual $*W not found"
    set $P593, $P597
  vivi_5361580:
    set $P592, $P593
  fallback1578:
    $P598 = $P592."cur_lexpad"()
    find_lex $P602, "$/"
    set $P601, $P602["name"]
    unless_null $P601, fallback1581
    nqp_get_sc_object $P603, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P601, $P603
  fallback1581:
    set $P600, $P601["identifier"]
    unless_null $P600, fallback1582
    nqp_get_sc_object $P604, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P600, $P604
  fallback1582:
    set $P599, $P600[0]
    unless_null $P599, fallback1583
    nqp_get_sc_object $P605, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P599, $P605
  fallback1583:
    find_dynamic_lex $P606, "$*PACKAGE"
    unless_null $P606, fallback1584
    get_hll_global $P609, "GLOBAL"
    get_who $P608, $P609
    set $P607, $P608["$PACKAGE"]
    unless_null $P607, fallback1585
    nqp_get_sc_object $P610, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P607, $P610
  fallback1585:
    unless_null $P607, vivi_5371586
    die "Contextual $*PACKAGE not found"
    box $P611, "Contextual $*PACKAGE not found"
    set $P607, $P611
  vivi_5371586:
    set $P606, $P607
  fallback1584:
    $P612 = $P586."install_lexical_symbol"($P598, $P599, $P606)
    set $P613, $P612
  if534_end1572:
    set $P670, $P613
    goto if527_end1551
  if527_else1550:
    find_dynamic_lex $P615, "$*SCOPE"
    unless_null $P615, fallback1589
    get_hll_global $P618, "GLOBAL"
    get_who $P617, $P618
    set $P616, $P617["$SCOPE"]
    unless_null $P616, fallback1590
    nqp_get_sc_object $P619, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P616, $P619
  fallback1590:
    unless_null $P616, vivi_5391591
    die "Contextual $*SCOPE not found"
    box $P620, "Contextual $*SCOPE not found"
    set $P616, $P620
  vivi_5391591:
    set $P615, $P616
  fallback1589:
    set $S506, $P615
    iseq $I505, $S506, "my"
    unless $I505 goto if538_else1587 
.annotate 'line', 957
    find_lex $P623, "$/"
    set $P622, $P623["name"]
    unless_null $P622, fallback1594
    nqp_get_sc_object $P624, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P622, $P624
  fallback1594:
    set $P621, $P622["identifier"]
    unless_null $P621, fallback1595
    nqp_get_sc_object $P625, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P621, $P625
  fallback1595:
    set $N503, $P621
    set $N504, 1
    isne $I506, $N503, $N504
    box $P632, $I506
    set $P631, $P632
    unless $I506 goto if540_end1593 
.annotate 'line', 958
.annotate 'line', 959
    find_lex $P627, "$/"
    set $P626, $P627["name"]
    unless_null $P626, fallback1596
    nqp_get_sc_object $P628, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P626, $P628
  fallback1596:
    $P629 = $P626."CURSOR"()
    $P630 = $P629."panic"("A my scoped package cannot have a multi-part name yet")
    set $P631, $P630
  if540_end1593:
.annotate 'line', 961
    find_dynamic_lex $P633, "$*W"
    unless_null $P633, fallback1597
    get_hll_global $P636, "GLOBAL"
    get_who $P635, $P636
    set $P634, $P635["$W"]
    unless_null $P634, fallback1598
    nqp_get_sc_object $P637, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P634, $P637
  fallback1598:
    unless_null $P634, vivi_5411599
    die "Contextual $*W not found"
    box $P638, "Contextual $*W not found"
    set $P634, $P638
  vivi_5411599:
    set $P633, $P634
  fallback1597:
    find_dynamic_lex $P639, "$*W"
    unless_null $P639, fallback1600
    get_hll_global $P642, "GLOBAL"
    get_who $P641, $P642
    set $P640, $P641["$W"]
    unless_null $P640, fallback1601
    nqp_get_sc_object $P643, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P640, $P643
  fallback1601:
    unless_null $P640, vivi_5421602
    die "Contextual $*W not found"
    box $P644, "Contextual $*W not found"
    set $P640, $P644
  vivi_5421602:
    set $P639, $P640
  fallback1600:
    $P645 = $P639."cur_lexpad"()
    find_lex $P649, "$/"
    set $P648, $P649["name"]
    unless_null $P648, fallback1603
    nqp_get_sc_object $P650, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P648, $P650
  fallback1603:
    set $P647, $P648["identifier"]
    unless_null $P647, fallback1604
    nqp_get_sc_object $P651, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P647, $P651
  fallback1604:
    set $P646, $P647[0]
    unless_null $P646, fallback1605
    nqp_get_sc_object $P652, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P646, $P652
  fallback1605:
    find_dynamic_lex $P653, "$*PACKAGE"
    unless_null $P653, fallback1606
    get_hll_global $P656, "GLOBAL"
    get_who $P655, $P656
    set $P654, $P655["$PACKAGE"]
    unless_null $P654, fallback1607
    nqp_get_sc_object $P657, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P654, $P657
  fallback1607:
    unless_null $P654, vivi_5431608
    die "Contextual $*PACKAGE not found"
    box $P658, "Contextual $*PACKAGE not found"
    set $P654, $P658
  vivi_5431608:
    set $P653, $P654
  fallback1606:
    $P659 = $P633."install_lexical_symbol"($P645, $P646, $P653)
    set $P669, $P659
    goto if538_end1588
  if538_else1587:
.annotate 'line', 963
.annotate 'line', 964
    find_lex $P660, "$/"
    $P661 = $P660."CURSOR"()
    find_dynamic_lex $P662, "$*SCOPE"
    unless_null $P662, fallback1609
    get_hll_global $P665, "GLOBAL"
    get_who $P664, $P665
    set $P663, $P664["$SCOPE"]
    unless_null $P663, fallback1610
    nqp_get_sc_object $P666, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P663, $P666
  fallback1610:
    unless_null $P663, vivi_5441611
    die "Contextual $*SCOPE not found"
    box $P667, "Contextual $*SCOPE not found"
    set $P663, $P667
  vivi_5441611:
    set $P662, $P663
  fallback1609:
    set $S508, $P662
    concat $S507, $S508, " scoped packages are not supported"
    $P668 = $P661."panic"($S507)
    set $P669, $P668
  if538_end1588:
    set $P670, $P669
  if527_end1551:
    .return ($P670) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_109_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 977
    .param pmc self 
    $P501 = self."!protoregex"("scope_declarator")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_110_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 978
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx571_tgt
    .local int rx571_pos
    .local int rx571_off
    .local int rx571_eos
    .local int rx571_rep
    .local pmc rx571_cur
    .local pmc rx571_curclass
    .local pmc rx571_bstack
    .local pmc rx571_cstack
    (rx571_cur, rx571_tgt, rx571_pos, rx571_curclass, rx571_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx571_cur
    length rx571_eos, rx571_tgt
    eq $I19, 1, rx571_restart1645
    gt rx571_pos, rx571_eos, rx571_fail1646
    repr_get_attr_int $I11, self, rx571_curclass, "$!from"
    ne $I11, -1, rxscan572_done1652
    goto rxscan572_scan1651
  rxscan572_loop1650:
    inc rx571_pos
    gt rx571_pos, rx571_eos, rx571_fail1646
    repr_bind_attr_int rx571_cur, rx571_curclass, "$!from", rx571_pos
  rxscan572_scan1651:
    nqp_rxmark rx571_bstack, rxscan572_loop1650, rx571_pos, 0
  rxscan572_done1652:
    nqp_rxmark rx571_bstack, rxcap573_fail1654, rx571_pos, 0
    add $I11, rx571_pos, 2
    gt $I11, rx571_eos, rx571_fail1646
    substr $S10, rx571_tgt, rx571_pos, 2
    ne $S10, ucs4:"my", rx571_fail1646
    add rx571_pos, 2
    nqp_rxpeek $I19, rx571_bstack, rxcap573_fail1654
    inc $I19
    set $I11, rx571_bstack[$I19]
    $P11 = rx571_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx571_pos)
    rx571_cstack = rx571_cur."!cursor_capture"($P11, "sym")
    goto rxcap573_done1653
  rxcap573_fail1654:
    goto rx571_fail1646
  rxcap573_done1653:
    repr_bind_attr_int rx571_cur, rx571_curclass, "$!pos", rx571_pos
    $P11 = rx571_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx571_curclass, "$!pos"
    lt $I11, 0, rx571_fail1646
    nqp_rxmark rx571_bstack, rxsubrule574_pass1655, -1, 0
  rxsubrule574_pass1655:
    rx571_cstack = rx571_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx571_pos, $P11, rx571_curclass, "$!pos"
    rx571_cur."!cursor_pass"(rx571_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx571_cur)
  rx571_restart1645:
    repr_get_attr_obj rx571_cstack, rx571_cur, rx571_curclass, "$!cstack"
  rx571_fail1646:
    unless rx571_bstack, rx571_done1644
    pop $I19, rx571_bstack
    if_null rx571_cstack, rx571_cstack_done1649
    unless rx571_cstack, rx571_cstack_done1649
    dec $I19
    set $P11, rx571_cstack[$I19]
  rx571_cstack_done1649:
    pop rx571_rep, rx571_bstack
    pop rx571_pos, rx571_bstack
    pop $I19, rx571_bstack
    lt rx571_pos, -1, rx571_done1644
    lt rx571_pos, 0, rx571_fail1646
    eq $I19, 0, rx571_fail1646
    nqp_islist $I20, rx571_cstack
    unless $I20, rx571_jump1647
    elements $I18, rx571_bstack
    le $I18, 0, rx571_cut1648
    dec $I18
    set $I18, rx571_bstack[$I18]
  rx571_cut1648:
    assign rx571_cstack, $I18
  rx571_jump1647:
    jump $I19
  rx571_done1644:
    rx571_cur."!cursor_fail"()
    .return (rx571_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1346233478.067_caps" :subid("cuid_memo_153_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["scoped"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1346233478.067_nfa" :subid("cuid_memo_154_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 109
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 121
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "scoped"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_111_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 979
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx575_tgt
    .local int rx575_pos
    .local int rx575_off
    .local int rx575_eos
    .local int rx575_rep
    .local pmc rx575_cur
    .local pmc rx575_curclass
    .local pmc rx575_bstack
    .local pmc rx575_cstack
    (rx575_cur, rx575_tgt, rx575_pos, rx575_curclass, rx575_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx575_cur
    length rx575_eos, rx575_tgt
    eq $I19, 1, rx575_restart1658
    gt rx575_pos, rx575_eos, rx575_fail1659
    repr_get_attr_int $I11, self, rx575_curclass, "$!from"
    ne $I11, -1, rxscan576_done1665
    goto rxscan576_scan1664
  rxscan576_loop1663:
    inc rx575_pos
    gt rx575_pos, rx575_eos, rx575_fail1659
    repr_bind_attr_int rx575_cur, rx575_curclass, "$!from", rx575_pos
  rxscan576_scan1664:
    nqp_rxmark rx575_bstack, rxscan576_loop1663, rx575_pos, 0
  rxscan576_done1665:
    nqp_rxmark rx575_bstack, rxcap577_fail1667, rx575_pos, 0
    add $I11, rx575_pos, 3
    gt $I11, rx575_eos, rx575_fail1659
    substr $S10, rx575_tgt, rx575_pos, 3
    ne $S10, ucs4:"our", rx575_fail1659
    add rx575_pos, 3
    nqp_rxpeek $I19, rx575_bstack, rxcap577_fail1667
    inc $I19
    set $I11, rx575_bstack[$I19]
    $P11 = rx575_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx575_pos)
    rx575_cstack = rx575_cur."!cursor_capture"($P11, "sym")
    goto rxcap577_done1666
  rxcap577_fail1667:
    goto rx575_fail1659
  rxcap577_done1666:
    repr_bind_attr_int rx575_cur, rx575_curclass, "$!pos", rx575_pos
    $P11 = rx575_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx575_curclass, "$!pos"
    lt $I11, 0, rx575_fail1659
    nqp_rxmark rx575_bstack, rxsubrule578_pass1668, -1, 0
  rxsubrule578_pass1668:
    rx575_cstack = rx575_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx575_pos, $P11, rx575_curclass, "$!pos"
    rx575_cur."!cursor_pass"(rx575_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx575_cur)
  rx575_restart1658:
    repr_get_attr_obj rx575_cstack, rx575_cur, rx575_curclass, "$!cstack"
  rx575_fail1659:
    unless rx575_bstack, rx575_done1657
    pop $I19, rx575_bstack
    if_null rx575_cstack, rx575_cstack_done1662
    unless rx575_cstack, rx575_cstack_done1662
    dec $I19
    set $P11, rx575_cstack[$I19]
  rx575_cstack_done1662:
    pop rx575_rep, rx575_bstack
    pop rx575_pos, rx575_bstack
    pop $I19, rx575_bstack
    lt rx575_pos, -1, rx575_done1657
    lt rx575_pos, 0, rx575_fail1659
    eq $I19, 0, rx575_fail1659
    nqp_islist $I20, rx575_cstack
    unless $I20, rx575_jump1660
    elements $I18, rx575_bstack
    le $I18, 0, rx575_cut1661
    dec $I18
    set $I18, rx575_bstack[$I18]
  rx575_cut1661:
    assign rx575_cstack, $I18
  rx575_jump1660:
    jump $I19
  rx575_done1657:
    rx575_cur."!cursor_fail"()
    .return (rx575_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1346233478.067_caps" :subid("cuid_memo_155_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["scoped"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1346233478.067_nfa" :subid("cuid_memo_156_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 111
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 117
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 114
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "scoped"
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_112_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 980
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx579_tgt
    .local int rx579_pos
    .local int rx579_off
    .local int rx579_eos
    .local int rx579_rep
    .local pmc rx579_cur
    .local pmc rx579_curclass
    .local pmc rx579_bstack
    .local pmc rx579_cstack
    (rx579_cur, rx579_tgt, rx579_pos, rx579_curclass, rx579_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx579_cur
    length rx579_eos, rx579_tgt
    eq $I19, 1, rx579_restart1671
    gt rx579_pos, rx579_eos, rx579_fail1672
    repr_get_attr_int $I11, self, rx579_curclass, "$!from"
    ne $I11, -1, rxscan580_done1678
    goto rxscan580_scan1677
  rxscan580_loop1676:
    inc rx579_pos
    gt rx579_pos, rx579_eos, rx579_fail1672
    repr_bind_attr_int rx579_cur, rx579_curclass, "$!from", rx579_pos
  rxscan580_scan1677:
    nqp_rxmark rx579_bstack, rxscan580_loop1676, rx579_pos, 0
  rxscan580_done1678:
    nqp_rxmark rx579_bstack, rxcap581_fail1680, rx579_pos, 0
    add $I11, rx579_pos, 3
    gt $I11, rx579_eos, rx579_fail1672
    substr $S10, rx579_tgt, rx579_pos, 3
    ne $S10, ucs4:"has", rx579_fail1672
    add rx579_pos, 3
    nqp_rxpeek $I19, rx579_bstack, rxcap581_fail1680
    inc $I19
    set $I11, rx579_bstack[$I19]
    $P11 = rx579_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx579_pos)
    rx579_cstack = rx579_cur."!cursor_capture"($P11, "sym")
    goto rxcap581_done1679
  rxcap581_fail1680:
    goto rx579_fail1672
  rxcap581_done1679:
    repr_bind_attr_int rx579_cur, rx579_curclass, "$!pos", rx579_pos
    $P11 = rx579_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx579_curclass, "$!pos"
    lt $I11, 0, rx579_fail1672
    nqp_rxmark rx579_bstack, rxsubrule582_pass1681, -1, 0
  rxsubrule582_pass1681:
    rx579_cstack = rx579_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx579_pos, $P11, rx579_curclass, "$!pos"
    rx579_cur."!cursor_pass"(rx579_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx579_cur)
  rx579_restart1671:
    repr_get_attr_obj rx579_cstack, rx579_cur, rx579_curclass, "$!cstack"
  rx579_fail1672:
    unless rx579_bstack, rx579_done1670
    pop $I19, rx579_bstack
    if_null rx579_cstack, rx579_cstack_done1675
    unless rx579_cstack, rx579_cstack_done1675
    dec $I19
    set $P11, rx579_cstack[$I19]
  rx579_cstack_done1675:
    pop rx579_rep, rx579_bstack
    pop rx579_pos, rx579_bstack
    pop $I19, rx579_bstack
    lt rx579_pos, -1, rx579_done1670
    lt rx579_pos, 0, rx579_fail1672
    eq $I19, 0, rx579_fail1672
    nqp_islist $I20, rx579_cstack
    unless $I20, rx579_jump1673
    elements $I18, rx579_bstack
    le $I18, 0, rx579_cut1674
    dec $I18
    set $I18, rx579_bstack[$I18]
  rx579_cut1674:
    assign rx579_cstack, $I18
  rx579_jump1673:
    jump $I19
  rx579_done1670:
    rx579_cur."!cursor_fail"()
    .return (rx579_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1346233478.067_caps" :subid("cuid_memo_157_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["scoped"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1346233478.067_nfa" :subid("cuid_memo_158_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 104
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 97
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 115
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "scoped"
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_113_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx583_tgt
    .local int rx583_pos
    .local int rx583_off
    .local int rx583_eos
    .local int rx583_rep
    .local pmc rx583_cur
    .local pmc rx583_curclass
    .local pmc rx583_bstack
    .local pmc rx583_cstack
    (rx583_cur, rx583_tgt, rx583_pos, rx583_curclass, rx583_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx583_cur
    length rx583_eos, rx583_tgt
    eq $I19, 1, rx583_restart1684
    gt rx583_pos, rx583_eos, rx583_fail1685
    repr_get_attr_int $I11, self, rx583_curclass, "$!from"
    ne $I11, -1, rxscan584_done1691
    goto rxscan584_scan1690
  rxscan584_loop1689:
    inc rx583_pos
    gt rx583_pos, rx583_eos, rx583_fail1685
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!from", rx583_pos
  rxscan584_scan1690:
    nqp_rxmark rx583_bstack, rxscan584_loop1689, rx583_pos, 0
  rxscan584_done1691:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt585_01693
    nqp_push_label $P11, alt585_11697
    nqp_push_label $P11, alt585_21701
    nqp_rxmark rx583_bstack, alt585_end1692, -1, 0
    rx583_cur."!alt"(rx583_pos, "alt_nfa__21_1346233481.98", $P11)
    goto rx583_fail1685
  alt585_01693:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    nqp_rxmark rx583_bstack, rxsubrule587_pass1695, -1, 0
  rxsubrule587_pass1695:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1692
  alt585_11697:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    nqp_rxmark rx583_bstack, rxsubrule590_pass1699, -1, 0
  rxsubrule590_pass1699:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1692
  alt585_21701:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    nqp_rxmark rx583_bstack, rxsubrule593_pass1703, -1, 0
  rxsubrule593_pass1703:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1692
  alt585_end1692:
    rx583_cur."!cursor_pass"(rx583_pos, "scoped", 'backtrack'=>1)
    .return (rx583_cur)
  rx583_restart1684:
    repr_get_attr_obj rx583_cstack, rx583_cur, rx583_curclass, "$!cstack"
  rx583_fail1685:
    unless rx583_bstack, rx583_done1683
    pop $I19, rx583_bstack
    if_null rx583_cstack, rx583_cstack_done1688
    unless rx583_cstack, rx583_cstack_done1688
    dec $I19
    set $P11, rx583_cstack[$I19]
  rx583_cstack_done1688:
    pop rx583_rep, rx583_bstack
    pop rx583_pos, rx583_bstack
    pop $I19, rx583_bstack
    lt rx583_pos, -1, rx583_done1683
    lt rx583_pos, 0, rx583_fail1685
    eq $I19, 0, rx583_fail1685
    nqp_islist $I20, rx583_cstack
    unless $I20, rx583_jump1686
    elements $I18, rx583_bstack
    le $I18, 0, rx583_cut1687
    dec $I18
    set $I18, rx583_bstack[$I18]
  rx583_cut1687:
    assign rx583_cstack, $I18
  rx583_jump1686:
    jump $I19
  rx583_done1683:
    rx583_cur."!cursor_fail"()
    .return (rx583_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1346233478.067_caps" :subid("cuid_memo_159_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["declarator"], $P502
    box $P503, 0
    set $P501["multi_declarator"], $P503
    box $P504, 0
    set $P501["package_declarator"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1346233478.067_alt_nfa__21_1346233481.98" :subid("cuid_memo_160_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 0
    push $P504, $P505
    box $P506, 0
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    box $P508, 0
    push $P504, $P508
    box $P509, 0
    push $P504, $P509
    box $P510, 0
    push $P504, $P510
    push $P502, $P504
    push $P501, $P502
    new $P511, 'ResizablePMCArray'
    new $P512, 'ResizablePMCArray'
    push $P511, $P512
    new $P513, 'ResizablePMCArray'
    box $P514, 0
    push $P513, $P514
    box $P515, 0
    push $P513, $P515
    box $P516, 0
    push $P513, $P516
    box $P517, 0
    push $P513, $P517
    box $P518, 0
    push $P513, $P518
    box $P519, 0
    push $P513, $P519
    push $P511, $P513
    push $P501, $P511
    new $P520, 'ResizablePMCArray'
    new $P521, 'ResizablePMCArray'
    push $P520, $P521
    new $P522, 'ResizablePMCArray'
    box $P523, 0
    push $P522, $P523
    box $P524, 0
    push $P522, $P524
    box $P525, 0
    push $P522, $P525
    box $P526, 0
    push $P522, $P526
    box $P527, 0
    push $P522, $P527
    box $P528, 0
    push $P522, $P528
    push $P520, $P522
    push $P501, $P520
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_114_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 988
    .param pmc _lex_param_0 
    .const 'Sub' $P504 = 'cuid_392_1346233478.067' 
    capture_lex $P504 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx595_tgt
    .local int rx595_pos
    .local int rx595_off
    .local int rx595_eos
    .local int rx595_rep
    .local pmc rx595_cur
    .local pmc rx595_curclass
    .local pmc rx595_bstack
    .local pmc rx595_cstack
    (rx595_cur, rx595_tgt, rx595_pos, rx595_curclass, rx595_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx595_cur
    length rx595_eos, rx595_tgt
    eq $I19, 1, rx595_restart1707
    gt rx595_pos, rx595_eos, rx595_fail1708
    repr_get_attr_int $I11, self, rx595_curclass, "$!from"
    ne $I11, -1, rxscan596_done1714
    goto rxscan596_scan1713
  rxscan596_loop1712:
    inc rx595_pos
    gt rx595_pos, rx595_eos, rx595_fail1708
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!from", rx595_pos
  rxscan596_scan1713:
    nqp_rxmark rx595_bstack, rxscan596_loop1712, rx595_pos, 0
  rxscan596_done1714:
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!pos", rx595_pos
    $P11 = rx595_cur."name"()
    repr_get_attr_int $I11, $P11, rx595_curclass, "$!pos"
    lt $I11, 0, rx595_fail1708
    nqp_rxmark rx595_bstack, rxsubrule597_pass1715, -1, 0
  rxsubrule597_pass1715:
    rx595_cstack = rx595_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx595_pos, $P11, rx595_curclass, "$!pos"
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!pos", rx595_pos
    store_lex unicode:"$\x{a2}", rx595_cur
    $P501 = $P101."MATCH"()
    set $P102, $P501
    .const 'Sub' $P502 = 'cuid_392_1346233478.067' 
    capture_lex $P502
    $P503 = $P502()
    unless $P503, rx595_fail1708
    rx595_cur."!cursor_pass"(rx595_pos, "typename", 'backtrack'=>1)
    .return (rx595_cur)
  rx595_restart1707:
    repr_get_attr_obj rx595_cstack, rx595_cur, rx595_curclass, "$!cstack"
  rx595_fail1708:
    unless rx595_bstack, rx595_done1706
    pop $I19, rx595_bstack
    if_null rx595_cstack, rx595_cstack_done1711
    unless rx595_cstack, rx595_cstack_done1711
    dec $I19
    set $P11, rx595_cstack[$I19]
  rx595_cstack_done1711:
    pop rx595_rep, rx595_bstack
    pop rx595_pos, rx595_bstack
    pop $I19, rx595_bstack
    lt rx595_pos, -1, rx595_done1706
    lt rx595_pos, 0, rx595_fail1708
    eq $I19, 0, rx595_fail1708
    nqp_islist $I20, rx595_cstack
    unless $I20, rx595_jump1709
    elements $I18, rx595_bstack
    le $I18, 0, rx595_cut1710
    dec $I18
    set $I18, rx595_bstack[$I18]
  rx595_cut1710:
    assign rx595_cstack, $I18
  rx595_jump1709:
    jump $I19
  rx595_done1706:
    rx595_cur."!cursor_fail"()
    .return (rx595_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1346233478.067_caps" :subid("cuid_memo_161_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["name"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1346233478.067_nfa" :subid("cuid_memo_162_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "name"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1346233478.067") :anon :lex :outer("cuid_114_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 990

    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback1716
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback1717
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback1717:
    unless_null $P502, vivi_5981718
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_5981718:
    set $P501, $P502
  fallback1716:
    find_lex $P507, "$/"
    find_lex $P510, "$/"
    set $P509, $P510["name"]
    unless_null $P509, fallback1719
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P511
  fallback1719:
    set $P508, $P509["identifier"]
    unless_null $P508, fallback1720
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P512
  fallback1720:
    $P513 = $P501."known_sym"($P507, $P508)
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_115_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 993
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx599_tgt
    .local int rx599_pos
    .local int rx599_off
    .local int rx599_eos
    .local int rx599_rep
    .local pmc rx599_cur
    .local pmc rx599_curclass
    .local pmc rx599_bstack
    .local pmc rx599_cstack
    (rx599_cur, rx599_tgt, rx599_pos, rx599_curclass, rx599_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx599_cur
    length rx599_eos, rx599_tgt
    eq $I19, 1, rx599_restart1723
    gt rx599_pos, rx599_eos, rx599_fail1724
    repr_get_attr_int $I11, self, rx599_curclass, "$!from"
    ne $I11, -1, rxscan600_done1730
    goto rxscan600_scan1729
  rxscan600_loop1728:
    inc rx599_pos
    gt rx599_pos, rx599_eos, rx599_fail1724
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!from", rx599_pos
  rxscan600_scan1729:
    nqp_rxmark rx599_bstack, rxscan600_loop1728, rx599_pos, 0
  rxscan600_done1730:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt601_01732
    nqp_push_label $P11, alt601_11734
    nqp_rxmark rx599_bstack, alt601_end1731, -1, 0
    rx599_cur."!alt"(rx599_pos, "alt_nfa__22_1346233482.008", $P11)
    goto rx599_fail1724
  alt601_01732:
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!pos", rx599_pos
    $P11 = rx599_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx599_curclass, "$!pos"
    lt $I11, 0, rx599_fail1724
    nqp_rxmark rx599_bstack, rxsubrule602_pass1733, -1, 0
  rxsubrule602_pass1733:
    rx599_cstack = rx599_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx599_pos, $P11, rx599_curclass, "$!pos"
    goto alt601_end1731
  alt601_11734:
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!pos", rx599_pos
    $P11 = rx599_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx599_curclass, "$!pos"
    lt $I11, 0, rx599_fail1724
    nqp_rxmark rx599_bstack, rxsubrule603_pass1735, -1, 0
  rxsubrule603_pass1735:
    rx599_cstack = rx599_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx599_pos, $P11, rx599_curclass, "$!pos"
    goto alt601_end1731
  alt601_end1731:
    rx599_cur."!cursor_pass"(rx599_pos, "declarator", 'backtrack'=>1)
    .return (rx599_cur)
  rx599_restart1723:
    repr_get_attr_obj rx599_cstack, rx599_cur, rx599_curclass, "$!cstack"
  rx599_fail1724:
    unless rx599_bstack, rx599_done1722
    pop $I19, rx599_bstack
    if_null rx599_cstack, rx599_cstack_done1727
    unless rx599_cstack, rx599_cstack_done1727
    dec $I19
    set $P11, rx599_cstack[$I19]
  rx599_cstack_done1727:
    pop rx599_rep, rx599_bstack
    pop rx599_pos, rx599_bstack
    pop $I19, rx599_bstack
    lt rx599_pos, -1, rx599_done1722
    lt rx599_pos, 0, rx599_fail1724
    eq $I19, 0, rx599_fail1724
    nqp_islist $I20, rx599_cstack
    unless $I20, rx599_jump1725
    elements $I18, rx599_bstack
    le $I18, 0, rx599_cut1726
    dec $I18
    set $I18, rx599_bstack[$I18]
  rx599_cut1726:
    assign rx599_cstack, $I18
  rx599_jump1725:
    jump $I19
  rx599_done1722:
    rx599_cur."!cursor_fail"()
    .return (rx599_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346233478.067_caps" :subid("cuid_memo_163_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["variable_declarator"], $P502
    box $P503, 0
    set $P501["routine_declarator"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346233478.067_nfa" :subid("cuid_memo_164_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "variable_declarator"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    box $P507, 8
    push $P503, $P507
    box $P508, "routine_declarator"
    push $P503, $P508
    box $P509, 0
    push $P503, $P509
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346233478.067_alt_nfa__22_1346233482.008" :subid("cuid_memo_165_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "variable_declarator"
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 8
    push $P510, $P511
    box $P512, "routine_declarator"
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_116_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 998
    .param pmc _lex_param_0 
    .const 'Sub' $P506 = 'cuid_393_1346233478.067' 
    capture_lex $P506 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set self, _lex_param_0
    .local string rx604_tgt
    .local int rx604_pos
    .local int rx604_off
    .local int rx604_eos
    .local int rx604_rep
    .local pmc rx604_cur
    .local pmc rx604_curclass
    .local pmc rx604_bstack
    .local pmc rx604_cstack
    (rx604_cur, rx604_tgt, rx604_pos, rx604_curclass, rx604_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx604_cur
    length rx604_eos, rx604_tgt
    eq $I19, 1, rx604_restart1738
    gt rx604_pos, rx604_eos, rx604_fail1739
    repr_get_attr_int $I11, self, rx604_curclass, "$!from"
    ne $I11, -1, rxscan605_done1745
    goto rxscan605_scan1744
  rxscan605_loop1743:
    inc rx604_pos
    gt rx604_pos, rx604_eos, rx604_fail1739
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!from", rx604_pos
  rxscan605_scan1744:
    nqp_rxmark rx604_bstack, rxscan605_loop1743, rx604_pos, 0
  rxscan605_done1745:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxmark rx604_bstack, rxquantr607_done1748, rx604_pos, 0
  rxquantr607_loop1747:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."typename"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    goto rxsubrule608_pass1749
  rxsubrule608_back1750:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
  rxsubrule608_pass1749:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule608_back1750
    push rx604_bstack, $I11
    push rx604_bstack, 0
    push rx604_bstack, rx604_pos
    elements $I11, rx604_cstack
    push rx604_bstack, $I11
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxpeek $I19, rx604_bstack, rxquantr607_done1748
    inc $I19
    inc $I19
    set rx604_rep, rx604_bstack[$I19]
    nqp_rxcommit rx604_bstack, rxquantr607_done1748
    inc rx604_rep
  rxquantr607_done1748:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    store_lex unicode:"$\x{a2}", rx604_cur
    box $P502, "variable"
    set $P101, $P502
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."variable"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    nqp_rxmark rx604_bstack, rxsubrule611_pass1753, -1, 0
  rxsubrule611_pass1753:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    store_lex unicode:"$\x{a2}", rx604_cur
    $P503 = $P102."MATCH"()
    set $P103, $P503
    .const 'Sub' $P504 = 'cuid_393_1346233478.067' 
    capture_lex $P504
    $P505 = $P504()
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxmark rx604_bstack, rxquantr614_done1757, rx604_pos, 0
  rxquantr614_loop1756:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."trait"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    goto rxsubrule615_pass1758
  rxsubrule615_back1759:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
  rxsubrule615_pass1758:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule615_back1759
    push rx604_bstack, $I11
    push rx604_bstack, 0
    push rx604_bstack, rx604_pos
    elements $I11, rx604_cstack
    push rx604_bstack, $I11
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxpeek $I19, rx604_bstack, rxquantr614_done1757
    inc $I19
    inc $I19
    set rx604_rep, rx604_bstack[$I19]
    nqp_rxcommit rx604_bstack, rxquantr614_done1757
    inc rx604_rep
    nqp_rxmark rx604_bstack, rxquantr614_done1757, rx604_pos, rx604_rep
    goto rxquantr614_loop1756
  rxquantr614_done1757:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    rx604_cur."!cursor_pass"(rx604_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx604_cur)
  rx604_restart1738:
    repr_get_attr_obj rx604_cstack, rx604_cur, rx604_curclass, "$!cstack"
  rx604_fail1739:
    unless rx604_bstack, rx604_done1737
    pop $I19, rx604_bstack
    if_null rx604_cstack, rx604_cstack_done1742
    unless rx604_cstack, rx604_cstack_done1742
    dec $I19
    set $P11, rx604_cstack[$I19]
  rx604_cstack_done1742:
    pop rx604_rep, rx604_bstack
    pop rx604_pos, rx604_bstack
    pop $I19, rx604_bstack
    lt rx604_pos, -1, rx604_done1737
    lt rx604_pos, 0, rx604_fail1739
    eq $I19, 0, rx604_fail1739
    nqp_islist $I20, rx604_cstack
    unless $I20, rx604_jump1740
    elements $I18, rx604_bstack
    le $I18, 0, rx604_cut1741
    dec $I18
    set $I18, rx604_bstack[$I18]
  rx604_cut1741:
    assign rx604_cstack, $I18
  rx604_jump1740:
    jump $I19
  rx604_done1737:
    rx604_cur."!cursor_fail"()
    .return (rx604_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_116_1346233478.067_caps" :subid("cuid_memo_166_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 2
    set $P501["typename"], $P502
    box $P503, 0
    set $P501["variable"], $P503
    box $P504, 2
    set $P501["trait"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1346233478.067") :anon :lex :outer("cuid_116_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1002

    box $P501, 0
    store_dynamic_lex "$*IN_DECL", $P501
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_117_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1006
    .param pmc self 
    $P501 = self."!protoregex"("routine_declarator")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_118_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1007
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx617_tgt
    .local int rx617_pos
    .local int rx617_off
    .local int rx617_eos
    .local int rx617_rep
    .local pmc rx617_cur
    .local pmc rx617_curclass
    .local pmc rx617_bstack
    .local pmc rx617_cstack
    (rx617_cur, rx617_tgt, rx617_pos, rx617_curclass, rx617_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx617_cur
    length rx617_eos, rx617_tgt
    eq $I19, 1, rx617_restart1763
    gt rx617_pos, rx617_eos, rx617_fail1764
    repr_get_attr_int $I11, self, rx617_curclass, "$!from"
    ne $I11, -1, rxscan618_done1770
    goto rxscan618_scan1769
  rxscan618_loop1768:
    inc rx617_pos
    gt rx617_pos, rx617_eos, rx617_fail1764
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!from", rx617_pos
  rxscan618_scan1769:
    nqp_rxmark rx617_bstack, rxscan618_loop1768, rx617_pos, 0
  rxscan618_done1770:
    nqp_rxmark rx617_bstack, rxcap619_fail1772, rx617_pos, 0
    add $I11, rx617_pos, 3
    gt $I11, rx617_eos, rx617_fail1764
    substr $S10, rx617_tgt, rx617_pos, 3
    ne $S10, ucs4:"sub", rx617_fail1764
    add rx617_pos, 3
    nqp_rxpeek $I19, rx617_bstack, rxcap619_fail1772
    inc $I19
    set $I11, rx617_bstack[$I19]
    $P11 = rx617_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx617_pos)
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "sym")
    goto rxcap619_done1771
  rxcap619_fail1772:
    goto rx617_fail1764
  rxcap619_done1771:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1764
    nqp_rxmark rx617_bstack, rxsubrule620_pass1773, -1, 0
  rxsubrule620_pass1773:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    rx617_cur."!cursor_pass"(rx617_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx617_cur)
  rx617_restart1763:
    repr_get_attr_obj rx617_cstack, rx617_cur, rx617_curclass, "$!cstack"
  rx617_fail1764:
    unless rx617_bstack, rx617_done1762
    pop $I19, rx617_bstack
    if_null rx617_cstack, rx617_cstack_done1767
    unless rx617_cstack, rx617_cstack_done1767
    dec $I19
    set $P11, rx617_cstack[$I19]
  rx617_cstack_done1767:
    pop rx617_rep, rx617_bstack
    pop rx617_pos, rx617_bstack
    pop $I19, rx617_bstack
    lt rx617_pos, -1, rx617_done1762
    lt rx617_pos, 0, rx617_fail1764
    eq $I19, 0, rx617_fail1764
    nqp_islist $I20, rx617_cstack
    unless $I20, rx617_jump1765
    elements $I18, rx617_bstack
    le $I18, 0, rx617_cut1766
    dec $I18
    set $I18, rx617_bstack[$I18]
  rx617_cut1766:
    assign rx617_cstack, $I18
  rx617_jump1765:
    jump $I19
  rx617_done1762:
    rx617_cur."!cursor_fail"()
    .return (rx617_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1346233478.067_caps" :subid("cuid_memo_167_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["routine_def"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1346233478.067_nfa" :subid("cuid_memo_168_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 115
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 117
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 98
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "routine_def"
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_119_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1008
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx621_tgt
    .local int rx621_pos
    .local int rx621_off
    .local int rx621_eos
    .local int rx621_rep
    .local pmc rx621_cur
    .local pmc rx621_curclass
    .local pmc rx621_bstack
    .local pmc rx621_cstack
    (rx621_cur, rx621_tgt, rx621_pos, rx621_curclass, rx621_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx621_cur
    length rx621_eos, rx621_tgt
    eq $I19, 1, rx621_restart1776
    gt rx621_pos, rx621_eos, rx621_fail1777
    repr_get_attr_int $I11, self, rx621_curclass, "$!from"
    ne $I11, -1, rxscan622_done1783
    goto rxscan622_scan1782
  rxscan622_loop1781:
    inc rx621_pos
    gt rx621_pos, rx621_eos, rx621_fail1777
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!from", rx621_pos
  rxscan622_scan1782:
    nqp_rxmark rx621_bstack, rxscan622_loop1781, rx621_pos, 0
  rxscan622_done1783:
    nqp_rxmark rx621_bstack, rxcap623_fail1785, rx621_pos, 0
    add $I11, rx621_pos, 6
    gt $I11, rx621_eos, rx621_fail1777
    substr $S10, rx621_tgt, rx621_pos, 6
    ne $S10, ucs4:"method", rx621_fail1777
    add rx621_pos, 6
    nqp_rxpeek $I19, rx621_bstack, rxcap623_fail1785
    inc $I19
    set $I11, rx621_bstack[$I19]
    $P11 = rx621_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx621_pos)
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "sym")
    goto rxcap623_done1784
  rxcap623_fail1785:
    goto rx621_fail1777
  rxcap623_done1784:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1777
    nqp_rxmark rx621_bstack, rxsubrule624_pass1786, -1, 0
  rxsubrule624_pass1786:
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    rx621_cur."!cursor_pass"(rx621_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx621_cur)
  rx621_restart1776:
    repr_get_attr_obj rx621_cstack, rx621_cur, rx621_curclass, "$!cstack"
  rx621_fail1777:
    unless rx621_bstack, rx621_done1775
    pop $I19, rx621_bstack
    if_null rx621_cstack, rx621_cstack_done1780
    unless rx621_cstack, rx621_cstack_done1780
    dec $I19
    set $P11, rx621_cstack[$I19]
  rx621_cstack_done1780:
    pop rx621_rep, rx621_bstack
    pop rx621_pos, rx621_bstack
    pop $I19, rx621_bstack
    lt rx621_pos, -1, rx621_done1775
    lt rx621_pos, 0, rx621_fail1777
    eq $I19, 0, rx621_fail1777
    nqp_islist $I20, rx621_cstack
    unless $I20, rx621_jump1778
    elements $I18, rx621_bstack
    le $I18, 0, rx621_cut1779
    dec $I18
    set $I18, rx621_bstack[$I18]
  rx621_cut1779:
    assign rx621_cstack, $I18
  rx621_jump1778:
    jump $I19
  rx621_done1775:
    rx621_cur."!cursor_fail"()
    .return (rx621_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1346233478.067_caps" :subid("cuid_memo_169_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["method_def"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1346233478.067_nfa" :subid("cuid_memo_170_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 109
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 116
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 104
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 111
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 100
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "method_def"
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P501, $P527
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_120_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1010
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set self, _lex_param_0
    .local string rx625_tgt
    .local int rx625_pos
    .local int rx625_off
    .local int rx625_eos
    .local int rx625_rep
    .local pmc rx625_cur
    .local pmc rx625_curclass
    .local pmc rx625_bstack
    .local pmc rx625_cstack
    (rx625_cur, rx625_tgt, rx625_pos, rx625_curclass, rx625_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx625_cur
    length rx625_eos, rx625_tgt
    eq $I19, 1, rx625_restart1789
    gt rx625_pos, rx625_eos, rx625_fail1790
    repr_get_attr_int $I11, self, rx625_curclass, "$!from"
    ne $I11, -1, rxscan626_done1796
    goto rxscan626_scan1795
  rxscan626_loop1794:
    inc rx625_pos
    gt rx625_pos, rx625_eos, rx625_fail1790
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!from", rx625_pos
  rxscan626_scan1795:
    nqp_rxmark rx625_bstack, rxscan626_loop1794, rx625_pos, 0
  rxscan626_done1796:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    store_lex unicode:"$\x{a2}", rx625_cur
    box $P502, 0
    set $P101, $P502
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxquantr629_done1800, rx625_pos, 0
  rxquantr629_loop1799:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxcap631_fail1803, rx625_pos, 0
    nqp_rxmark rx625_bstack, rxquantr632_done1805, rx625_pos, 0
  rxquantr632_loop1804:
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1790
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:"&", rx625_fail1790
    add rx625_pos, 1
    nqp_rxpeek $I19, rx625_bstack, rxquantr632_done1805
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr632_done1805
    inc rx625_rep
  rxquantr632_done1805:
    nqp_rxpeek $I19, rx625_bstack, rxcap631_fail1803
    inc $I19
    set $I11, rx625_bstack[$I19]
    $P11 = rx625_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx625_pos)
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "sigil")
    goto rxcap631_done1802
  rxcap631_fail1803:
    goto rx625_fail1790
  rxcap631_done1802:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    nqp_rxmark rx625_bstack, rxsubrule633_pass1806, -1, 0
  rxsubrule633_pass1806:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxpeek $I19, rx625_bstack, rxquantr629_done1800
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr629_done1800
    inc rx625_rep
  rxquantr629_done1800:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
  alt638_01812:
    nqp_rxmark rx625_bstack, alt638_11818, rx625_pos, 0
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1790
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:"(", rx625_fail1790
    add rx625_pos, 1
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."signature"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    nqp_rxmark rx625_bstack, rxsubrule641_pass1815, -1, 0
  rxsubrule641_pass1815:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1790
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:")", rx625_fail1790
    add rx625_pos, 1
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt638_end1811
  alt638_11818:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
  alt638_end1811:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxquantr648_done1824, rx625_pos, 0
  rxquantr648_loop1823:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."trait"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    goto rxsubrule649_pass1825
  rxsubrule649_back1826:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
  rxsubrule649_pass1825:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule649_back1826
    push rx625_bstack, $I11
    push rx625_bstack, 0
    push rx625_bstack, rx625_pos
    elements $I11, rx625_cstack
    push rx625_bstack, $I11
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxpeek $I19, rx625_bstack, rxquantr648_done1824
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr648_done1824
    inc rx625_rep
    nqp_rxmark rx625_bstack, rxquantr648_done1824, rx625_pos, rx625_rep
    goto rxquantr648_loop1823
  rxquantr648_done1824:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt651_01829
    nqp_push_label $P11, alt651_11833
    nqp_rxmark rx625_bstack, alt651_end1828, -1, 0
    rx625_cur."!alt"(rx625_pos, "alt_nfa__23_1346233482.176", $P11)
    goto rx625_fail1790
  alt651_01829:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    nqp_rxmark rx625_bstack, rxsubrule653_pass1831, -1, 0
  rxsubrule653_pass1831:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt651_end1828
  alt651_11833:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    nqp_rxmark rx625_bstack, rxsubrule656_pass1835, -1, 0
  rxsubrule656_pass1835:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt651_end1828
  alt651_end1828:
    nqp_rxcommit rx625_bstack, alt651_end1828
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    rx625_cur."!cursor_pass"(rx625_pos, "routine_def", 'backtrack'=>1)
    .return (rx625_cur)
  rx625_restart1789:
    repr_get_attr_obj rx625_cstack, rx625_cur, rx625_curclass, "$!cstack"
  rx625_fail1790:
    unless rx625_bstack, rx625_done1788
    pop $I19, rx625_bstack
    if_null rx625_cstack, rx625_cstack_done1793
    unless rx625_cstack, rx625_cstack_done1793
    dec $I19
    set $P11, rx625_cstack[$I19]
  rx625_cstack_done1793:
    pop rx625_rep, rx625_bstack
    pop rx625_pos, rx625_bstack
    pop $I19, rx625_bstack
    lt rx625_pos, -1, rx625_done1788
    lt rx625_pos, 0, rx625_fail1790
    eq $I19, 0, rx625_fail1790
    nqp_islist $I20, rx625_cstack
    unless $I20, rx625_jump1791
    elements $I18, rx625_bstack
    le $I18, 0, rx625_cut1792
    dec $I18
    set $I18, rx625_bstack[$I18]
  rx625_cut1792:
    assign rx625_cstack, $I18
  rx625_jump1791:
    jump $I19
  rx625_done1788:
    rx625_cur."!cursor_fail"()
    .return (rx625_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1346233478.067_caps" :subid("cuid_memo_171_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 2
    set $P501["sigil"], $P502
    box $P503, 2
    set $P501["deflongname"], $P503
    box $P504, 0
    set $P501["signature"], $P504
    box $P505, 2
    set $P501["trait"], $P505
    box $P506, 0
    set $P501["onlystar"], $P506
    box $P507, 0
    set $P501["blockoid"], $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1346233478.067_alt_nfa__23_1346233482.176" :subid("cuid_memo_172_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 0
    push $P504, $P505
    box $P506, 0
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    box $P508, 0
    push $P504, $P508
    box $P509, 0
    push $P504, $P509
    box $P510, 0
    push $P504, $P510
    push $P502, $P504
    push $P501, $P502
    new $P511, 'ResizablePMCArray'
    new $P512, 'ResizablePMCArray'
    push $P511, $P512
    new $P513, 'ResizablePMCArray'
    box $P514, 0
    push $P513, $P514
    box $P515, 0
    push $P513, $P515
    box $P516, 0
    push $P513, $P516
    box $P517, 0
    push $P513, $P517
    box $P518, 0
    push $P513, $P518
    box $P519, 0
    push $P513, $P519
    push $P511, $P513
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_121_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    .param pmc _lex_param_0 
    .const 'Sub' $P508 = 'cuid_394_1346233478.067' 
    capture_lex $P508 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set self, _lex_param_0
    .local string rx659_tgt
    .local int rx659_pos
    .local int rx659_off
    .local int rx659_eos
    .local int rx659_rep
    .local pmc rx659_cur
    .local pmc rx659_curclass
    .local pmc rx659_bstack
    .local pmc rx659_cstack
    (rx659_cur, rx659_tgt, rx659_pos, rx659_curclass, rx659_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx659_cur
    length rx659_eos, rx659_tgt
    eq $I19, 1, rx659_restart1840
    gt rx659_pos, rx659_eos, rx659_fail1841
    repr_get_attr_int $I11, self, rx659_curclass, "$!from"
    ne $I11, -1, rxscan660_done1847
    goto rxscan660_scan1846
  rxscan660_loop1845:
    inc rx659_pos
    gt rx659_pos, rx659_eos, rx659_fail1841
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!from", rx659_pos
  rxscan660_scan1846:
    nqp_rxmark rx659_bstack, rxscan660_loop1845, rx659_pos, 0
  rxscan660_done1847:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    box $P503, 0
    set $P101, $P503
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    box $P504, 1
    set $P102, $P504
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxcap664_fail1852, rx659_pos, 0
    nqp_rxmark rx659_bstack, rxquantr665_done1854, rx659_pos, 0
  rxquantr665_loop1853:
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1841
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:"!", rx659_fail1841
    add rx659_pos, 1
    nqp_rxpeek $I19, rx659_bstack, rxquantr665_done1854
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr665_done1854
    inc rx659_rep
  rxquantr665_done1854:
    nqp_rxpeek $I19, rx659_bstack, rxcap664_fail1852
    inc $I19
    set $I11, rx659_bstack[$I19]
    $P11 = rx659_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx659_pos)
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "private")
    goto rxcap664_done1851
  rxcap664_fail1852:
    goto rx659_fail1841
  rxcap664_done1851:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxquantr667_done1857, rx659_pos, 0
  rxquantr667_loop1856:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    goto rxsubrule668_pass1858
  rxsubrule668_back1859:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
  rxsubrule668_pass1858:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule668_back1859
    push rx659_bstack, $I11
    push rx659_bstack, 0
    push rx659_bstack, rx659_pos
    elements $I11, rx659_cstack
    push rx659_bstack, $I11
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxpeek $I19, rx659_bstack, rxquantr667_done1857
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr667_done1857
    inc rx659_rep
  rxquantr667_done1857:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
  alt672_01864:
    nqp_rxmark rx659_bstack, alt672_11870, rx659_pos, 0
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1841
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:"(", rx659_fail1841
    add rx659_pos, 1
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."signature"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    nqp_rxmark rx659_bstack, rxsubrule675_pass1867, -1, 0
  rxsubrule675_pass1867:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1841
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:")", rx659_fail1841
    add rx659_pos, 1
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt672_end1863
  alt672_11870:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
  alt672_end1863:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    $P505 = $P103."MATCH"()
    set $P104, $P505
    .const 'Sub' $P506 = 'cuid_394_1346233478.067' 
    capture_lex $P506
    $P507 = $P506()
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxquantr683_done1877, rx659_pos, 0
  rxquantr683_loop1876:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."trait"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    goto rxsubrule684_pass1878
  rxsubrule684_back1879:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
  rxsubrule684_pass1878:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule684_back1879
    push rx659_bstack, $I11
    push rx659_bstack, 0
    push rx659_bstack, rx659_pos
    elements $I11, rx659_cstack
    push rx659_bstack, $I11
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxpeek $I19, rx659_bstack, rxquantr683_done1877
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr683_done1877
    inc rx659_rep
    nqp_rxmark rx659_bstack, rxquantr683_done1877, rx659_pos, rx659_rep
    goto rxquantr683_loop1876
  rxquantr683_done1877:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt686_01882
    nqp_push_label $P11, alt686_11886
    nqp_rxmark rx659_bstack, alt686_end1881, -1, 0
    rx659_cur."!alt"(rx659_pos, "alt_nfa__24_1346233482.233", $P11)
    goto rx659_fail1841
  alt686_01882:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    nqp_rxmark rx659_bstack, rxsubrule688_pass1884, -1, 0
  rxsubrule688_pass1884:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt686_end1881
  alt686_11886:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    nqp_rxmark rx659_bstack, rxsubrule691_pass1888, -1, 0
  rxsubrule691_pass1888:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt686_end1881
  alt686_end1881:
    nqp_rxcommit rx659_bstack, alt686_end1881
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    rx659_cur."!cursor_pass"(rx659_pos, "method_def", 'backtrack'=>1)
    .return (rx659_cur)
  rx659_restart1840:
    repr_get_attr_obj rx659_cstack, rx659_cur, rx659_curclass, "$!cstack"
  rx659_fail1841:
    unless rx659_bstack, rx659_done1839
    pop $I19, rx659_bstack
    if_null rx659_cstack, rx659_cstack_done1844
    unless rx659_cstack, rx659_cstack_done1844
    dec $I19
    set $P11, rx659_cstack[$I19]
  rx659_cstack_done1844:
    pop rx659_rep, rx659_bstack
    pop rx659_pos, rx659_bstack
    pop $I19, rx659_bstack
    lt rx659_pos, -1, rx659_done1839
    lt rx659_pos, 0, rx659_fail1841
    eq $I19, 0, rx659_fail1841
    nqp_islist $I20, rx659_cstack
    unless $I20, rx659_jump1842
    elements $I18, rx659_bstack
    le $I18, 0, rx659_cut1843
    dec $I18
    set $I18, rx659_bstack[$I18]
  rx659_cut1843:
    assign rx659_cstack, $I18
  rx659_jump1842:
    jump $I19
  rx659_done1839:
    rx659_cur."!cursor_fail"()
    .return (rx659_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1346233478.067_caps" :subid("cuid_memo_173_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["private"], $P502
    box $P503, 2
    set $P501["deflongname"], $P503
    box $P504, 0
    set $P501["signature"], $P504
    box $P505, 2
    set $P501["trait"], $P505
    box $P506, 0
    set $P501["onlystar"], $P506
    box $P507, 0
    set $P501["blockoid"], $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1346233478.067_alt_nfa__24_1346233482.233" :subid("cuid_memo_174_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 0
    push $P504, $P505
    box $P506, 0
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    box $P508, 0
    push $P504, $P508
    box $P509, 0
    push $P504, $P509
    box $P510, 0
    push $P504, $P510
    push $P502, $P504
    push $P501, $P502
    new $P511, 'ResizablePMCArray'
    new $P512, 'ResizablePMCArray'
    push $P511, $P512
    new $P513, 'ResizablePMCArray'
    box $P514, 0
    push $P513, $P514
    box $P515, 0
    push $P513, $P515
    box $P516, 0
    push $P513, $P516
    box $P517, 0
    push $P513, $P517
    box $P518, 0
    push $P513, $P518
    box $P519, 0
    push $P513, $P519
    push $P511, $P513
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1346233478.067") :anon :lex :outer("cuid_121_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031

    box $P501, 0
    store_dynamic_lex "$*INVOCANT_OK", $P501
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_122_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1039
    .param pmc _lex_param_0 
    .const 'Sub' $P504 = 'cuid_395_1346233478.067' 
    capture_lex $P504 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx694_tgt
    .local int rx694_pos
    .local int rx694_off
    .local int rx694_eos
    .local int rx694_rep
    .local pmc rx694_cur
    .local pmc rx694_curclass
    .local pmc rx694_bstack
    .local pmc rx694_cstack
    (rx694_cur, rx694_tgt, rx694_pos, rx694_curclass, rx694_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx694_cur
    length rx694_eos, rx694_tgt
    eq $I19, 1, rx694_restart1893
    gt rx694_pos, rx694_eos, rx694_fail1894
    repr_get_attr_int $I11, self, rx694_curclass, "$!from"
    ne $I11, -1, rxscan695_done1900
    goto rxscan695_scan1899
  rxscan695_loop1898:
    inc rx694_pos
    gt rx694_pos, rx694_eos, rx694_fail1894
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!from", rx694_pos
  rxscan695_scan1899:
    nqp_rxmark rx694_bstack, rxscan695_loop1898, rx694_pos, 0
  rxscan695_done1900:
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    store_lex unicode:"$\x{a2}", rx694_cur
    $P501 = $P101."MATCH"()
    set $P102, $P501
    .const 'Sub' $P502 = 'cuid_395_1346233478.067' 
    capture_lex $P502
    $P503 = $P502()
    unless $P503, rx694_fail1894
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1894
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"{", rx694_fail1894
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ws"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1894
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1894
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"*", rx694_fail1894
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ws"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1894
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1894
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"}", rx694_fail1894
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1894
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1894
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    rx694_cur."!cursor_pass"(rx694_pos, "onlystar", 'backtrack'=>1)
    .return (rx694_cur)
  rx694_restart1893:
    repr_get_attr_obj rx694_cstack, rx694_cur, rx694_curclass, "$!cstack"
  rx694_fail1894:
    unless rx694_bstack, rx694_done1892
    pop $I19, rx694_bstack
    if_null rx694_cstack, rx694_cstack_done1897
    unless rx694_cstack, rx694_cstack_done1897
    dec $I19
    set $P11, rx694_cstack[$I19]
  rx694_cstack_done1897:
    pop rx694_rep, rx694_bstack
    pop rx694_pos, rx694_bstack
    pop $I19, rx694_bstack
    lt rx694_pos, -1, rx694_done1892
    lt rx694_pos, 0, rx694_fail1894
    eq $I19, 0, rx694_fail1894
    nqp_islist $I20, rx694_cstack
    unless $I20, rx694_jump1895
    elements $I18, rx694_bstack
    le $I18, 0, rx694_cut1896
    dec $I18
    set $I18, rx694_bstack[$I18]
  rx694_cut1896:
    assign rx694_cstack, $I18
  rx694_jump1895:
    jump $I19
  rx694_done1892:
    rx694_cur."!cursor_fail"()
    .return (rx694_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1346233478.067_caps" :subid("cuid_memo_175_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1346233478.067_nfa" :subid("cuid_memo_176_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 123
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "ws"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 42
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 8
    push $P519, $P520
    box $P521, "ws"
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 125
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "ENDSTMT"
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 0
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 0
    push $P531, $P534
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1346233478.067") :anon :lex :outer("cuid_122_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1040

    find_dynamic_lex $P501, "$*MULTINESS"
    unless_null $P501, fallback1901
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$MULTINESS"]
    unless_null $P502, fallback1902
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback1902:
    unless_null $P502, vivi_6961903
    die "Contextual $*MULTINESS not found"
    box $P506, "Contextual $*MULTINESS not found"
    set $P502, $P506
  vivi_6961903:
    set $P501, $P502
  fallback1901:
    set $S501, $P501
    iseq $I501, $S501, "proto"
    .return ($I501) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_123_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1046
    .param pmc self 
    $P501 = self."!protoregex"("multi_declarator")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_124_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1047
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set self, _lex_param_0
    .local string rx700_tgt
    .local int rx700_pos
    .local int rx700_off
    .local int rx700_eos
    .local int rx700_rep
    .local pmc rx700_cur
    .local pmc rx700_curclass
    .local pmc rx700_bstack
    .local pmc rx700_cstack
    (rx700_cur, rx700_tgt, rx700_pos, rx700_curclass, rx700_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx700_cur
    length rx700_eos, rx700_tgt
    eq $I19, 1, rx700_restart1909
    gt rx700_pos, rx700_eos, rx700_fail1910
    repr_get_attr_int $I11, self, rx700_curclass, "$!from"
    ne $I11, -1, rxscan701_done1916
    goto rxscan701_scan1915
  rxscan701_loop1914:
    inc rx700_pos
    gt rx700_pos, rx700_eos, rx700_fail1910
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!from", rx700_pos
  rxscan701_scan1915:
    nqp_rxmark rx700_bstack, rxscan701_loop1914, rx700_pos, 0
  rxscan701_done1916:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    store_lex unicode:"$\x{a2}", rx700_cur
    box $P502, "multi"
    set $P101, $P502
    nqp_rxmark rx700_bstack, rxcap702_fail1918, rx700_pos, 0
    add $I11, rx700_pos, 5
    gt $I11, rx700_eos, rx700_fail1910
    substr $S10, rx700_tgt, rx700_pos, 5
    ne $S10, ucs4:"multi", rx700_fail1910
    add rx700_pos, 5
    nqp_rxpeek $I19, rx700_bstack, rxcap702_fail1918
    inc $I19
    set $I11, rx700_bstack[$I19]
    $P11 = rx700_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx700_pos)
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "sym")
    goto rxcap702_done1917
  rxcap702_fail1918:
    goto rx700_fail1910
  rxcap702_done1917:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."ws"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1910
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
  alt704_01921:
    nqp_rxmark rx700_bstack, alt704_11923, rx700_pos, 0
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1910
    nqp_rxmark rx700_bstack, rxsubrule705_pass1922, -1, 0
  rxsubrule705_pass1922:
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
    goto alt704_end1920
  alt704_11923:
    nqp_rxmark rx700_bstack, alt704_21925, rx700_pos, 0
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1910
    nqp_rxmark rx700_bstack, rxsubrule706_pass1924, -1, 0
  rxsubrule706_pass1924:
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
    goto alt704_end1920
  alt704_21925:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1910
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
  alt704_end1920:
    rx700_cur."!cursor_pass"(rx700_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx700_cur)
  rx700_restart1909:
    repr_get_attr_obj rx700_cstack, rx700_cur, rx700_curclass, "$!cstack"
  rx700_fail1910:
    unless rx700_bstack, rx700_done1908
    pop $I19, rx700_bstack
    if_null rx700_cstack, rx700_cstack_done1913
    unless rx700_cstack, rx700_cstack_done1913
    dec $I19
    set $P11, rx700_cstack[$I19]
  rx700_cstack_done1913:
    pop rx700_rep, rx700_bstack
    pop rx700_pos, rx700_bstack
    pop $I19, rx700_bstack
    lt rx700_pos, -1, rx700_done1908
    lt rx700_pos, 0, rx700_fail1910
    eq $I19, 0, rx700_fail1910
    nqp_islist $I20, rx700_cstack
    unless $I20, rx700_jump1911
    elements $I18, rx700_bstack
    le $I18, 0, rx700_cut1912
    dec $I18
    set $I18, rx700_bstack[$I18]
  rx700_cut1912:
    assign rx700_cstack, $I18
  rx700_jump1911:
    jump $I19
  rx700_done1908:
    rx700_cur."!cursor_fail"()
    .return (rx700_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1346233478.067_caps" :subid("cuid_memo_177_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["declarator"], $P503
    box $P504, 0
    set $P501["routine_def"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1346233478.067_nfa" :subid("cuid_memo_178_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 109
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 117
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 108
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 116
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 105
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "ws"
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 0
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 0
    push $P531, $P534
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_125_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1052
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set self, _lex_param_0
    .local string rx708_tgt
    .local int rx708_pos
    .local int rx708_off
    .local int rx708_eos
    .local int rx708_rep
    .local pmc rx708_cur
    .local pmc rx708_curclass
    .local pmc rx708_bstack
    .local pmc rx708_cstack
    (rx708_cur, rx708_tgt, rx708_pos, rx708_curclass, rx708_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx708_cur
    length rx708_eos, rx708_tgt
    eq $I19, 1, rx708_restart1929
    gt rx708_pos, rx708_eos, rx708_fail1930
    repr_get_attr_int $I11, self, rx708_curclass, "$!from"
    ne $I11, -1, rxscan709_done1936
    goto rxscan709_scan1935
  rxscan709_loop1934:
    inc rx708_pos
    gt rx708_pos, rx708_eos, rx708_fail1930
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!from", rx708_pos
  rxscan709_scan1935:
    nqp_rxmark rx708_bstack, rxscan709_loop1934, rx708_pos, 0
  rxscan709_done1936:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    store_lex unicode:"$\x{a2}", rx708_cur
    box $P502, "proto"
    set $P101, $P502
    nqp_rxmark rx708_bstack, rxcap710_fail1938, rx708_pos, 0
    add $I11, rx708_pos, 5
    gt $I11, rx708_eos, rx708_fail1930
    substr $S10, rx708_tgt, rx708_pos, 5
    ne $S10, ucs4:"proto", rx708_fail1930
    add rx708_pos, 5
    nqp_rxpeek $I19, rx708_bstack, rxcap710_fail1938
    inc $I19
    set $I11, rx708_bstack[$I19]
    $P11 = rx708_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx708_pos)
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "sym")
    goto rxcap710_done1937
  rxcap710_fail1938:
    goto rx708_fail1930
  rxcap710_done1937:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."ws"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1930
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
  alt712_01941:
    nqp_rxmark rx708_bstack, alt712_11943, rx708_pos, 0
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1930
    nqp_rxmark rx708_bstack, rxsubrule713_pass1942, -1, 0
  rxsubrule713_pass1942:
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
    goto alt712_end1940
  alt712_11943:
    nqp_rxmark rx708_bstack, alt712_21945, rx708_pos, 0
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1930
    nqp_rxmark rx708_bstack, rxsubrule714_pass1944, -1, 0
  rxsubrule714_pass1944:
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
    goto alt712_end1940
  alt712_21945:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1930
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
  alt712_end1940:
    rx708_cur."!cursor_pass"(rx708_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx708_cur)
  rx708_restart1929:
    repr_get_attr_obj rx708_cstack, rx708_cur, rx708_curclass, "$!cstack"
  rx708_fail1930:
    unless rx708_bstack, rx708_done1928
    pop $I19, rx708_bstack
    if_null rx708_cstack, rx708_cstack_done1933
    unless rx708_cstack, rx708_cstack_done1933
    dec $I19
    set $P11, rx708_cstack[$I19]
  rx708_cstack_done1933:
    pop rx708_rep, rx708_bstack
    pop rx708_pos, rx708_bstack
    pop $I19, rx708_bstack
    lt rx708_pos, -1, rx708_done1928
    lt rx708_pos, 0, rx708_fail1930
    eq $I19, 0, rx708_fail1930
    nqp_islist $I20, rx708_cstack
    unless $I20, rx708_jump1931
    elements $I18, rx708_bstack
    le $I18, 0, rx708_cut1932
    dec $I18
    set $I18, rx708_bstack[$I18]
  rx708_cut1932:
    assign rx708_cstack, $I18
  rx708_jump1931:
    jump $I19
  rx708_done1928:
    rx708_cur."!cursor_fail"()
    .return (rx708_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1346233478.067_caps" :subid("cuid_memo_179_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["declarator"], $P503
    box $P504, 0
    set $P501["routine_def"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1346233478.067_nfa" :subid("cuid_memo_180_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 112
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 114
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 111
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 116
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 111
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "ws"
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 0
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 0
    push $P531, $P534
    push $P501, $P531
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_126_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1057
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set self, _lex_param_0
    .local string rx716_tgt
    .local int rx716_pos
    .local int rx716_off
    .local int rx716_eos
    .local int rx716_rep
    .local pmc rx716_cur
    .local pmc rx716_curclass
    .local pmc rx716_bstack
    .local pmc rx716_cstack
    (rx716_cur, rx716_tgt, rx716_pos, rx716_curclass, rx716_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx716_cur
    length rx716_eos, rx716_tgt
    eq $I19, 1, rx716_restart1949
    gt rx716_pos, rx716_eos, rx716_fail1950
    repr_get_attr_int $I11, self, rx716_curclass, "$!from"
    ne $I11, -1, rxscan717_done1956
    goto rxscan717_scan1955
  rxscan717_loop1954:
    inc rx716_pos
    gt rx716_pos, rx716_eos, rx716_fail1950
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!from", rx716_pos
  rxscan717_scan1955:
    nqp_rxmark rx716_bstack, rxscan717_loop1954, rx716_pos, 0
  rxscan717_done1956:
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    store_lex unicode:"$\x{a2}", rx716_cur
    box $P502, ""
    set $P101, $P502
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1950
    nqp_rxmark rx716_bstack, rxsubrule718_pass1957, -1, 0
  rxsubrule718_pass1957:
    rx716_cstack = rx716_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    rx716_cur."!cursor_pass"(rx716_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx716_cur)
  rx716_restart1949:
    repr_get_attr_obj rx716_cstack, rx716_cur, rx716_curclass, "$!cstack"
  rx716_fail1950:
    unless rx716_bstack, rx716_done1948
    pop $I19, rx716_bstack
    if_null rx716_cstack, rx716_cstack_done1953
    unless rx716_cstack, rx716_cstack_done1953
    dec $I19
    set $P11, rx716_cstack[$I19]
  rx716_cstack_done1953:
    pop rx716_rep, rx716_bstack
    pop rx716_pos, rx716_bstack
    pop $I19, rx716_bstack
    lt rx716_pos, -1, rx716_done1948
    lt rx716_pos, 0, rx716_fail1950
    eq $I19, 0, rx716_fail1950
    nqp_islist $I20, rx716_cstack
    unless $I20, rx716_jump1951
    elements $I18, rx716_bstack
    le $I18, 0, rx716_cut1952
    dec $I18
    set $I18, rx716_bstack[$I18]
  rx716_cut1952:
    assign rx716_cstack, $I18
  rx716_jump1951:
    jump $I19
  rx716_done1948:
    rx716_cur."!cursor_fail"()
    .return (rx716_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1346233478.067_caps" :subid("cuid_memo_181_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["declarator"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1346233478.067_nfa" :subid("cuid_memo_182_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "declarator"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_128_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1062
    .param pmc _lex_param_0 
    .const 'Sub' $P505 = 'cuid_396_1346233478.067' 
    capture_lex $P505 
    .const 'Sub' $P505 = 'cuid_127_1346233478.067' 
    capture_lex $P505 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx719_tgt
    .local int rx719_pos
    .local int rx719_off
    .local int rx719_eos
    .local int rx719_rep
    .local pmc rx719_cur
    .local pmc rx719_curclass
    .local pmc rx719_bstack
    .local pmc rx719_cstack
    (rx719_cur, rx719_tgt, rx719_pos, rx719_curclass, rx719_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx719_cur
    length rx719_eos, rx719_tgt
    eq $I19, 1, rx719_restart1960
    gt rx719_pos, rx719_eos, rx719_fail1961
    repr_get_attr_int $I11, self, rx719_curclass, "$!from"
    ne $I11, -1, rxscan720_done1967
    goto rxscan720_scan1966
  rxscan720_loop1965:
    inc rx719_pos
    gt rx719_pos, rx719_eos, rx719_fail1961
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!from", rx719_pos
  rxscan720_scan1966:
    nqp_rxmark rx719_bstack, rxscan720_loop1965, rx719_pos, 0
  rxscan720_done1967:
    nqp_rxmark rx719_bstack, rxquantr721_done1969, rx719_pos, 0
  rxquantr721_loop1968:
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    store_lex unicode:"$\x{a2}", rx719_cur
    $P501 = $P101."MATCH"()
    set $P102, $P501
    .const 'Sub' $P502 = 'cuid_396_1346233478.067' 
    capture_lex $P502
    $P503 = $P502()
    unless $P503, rx719_fail1961
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    nqp_rxmark rx719_bstack, rxsubrule724_pass1974, -1, 0
  rxsubrule724_pass1974:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    add $I11, rx719_pos, 1
    gt $I11, rx719_eos, rx719_fail1961
    substr $S10, rx719_tgt, rx719_pos, 1
    ne $S10, ucs4:":", rx719_fail1961
    add rx719_pos, 1
    nqp_rxpeek $I19, rx719_bstack, rxquantr721_done1969
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr721_done1969
    inc rx719_rep
  rxquantr721_done1969:
    nqp_rxmark rx719_bstack, rxquantr726_done1977, rx719_pos, 0
  rxquantr726_loop1976:
    nqp_rxmark rx719_bstack, rxquantr727_done1979, rx719_pos, 0
  rxquantr727_loop1978:
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    nqp_rxmark rx719_bstack, rxsubrule729_pass1981, -1, 0
  rxsubrule729_pass1981:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt731_01984
    nqp_push_label $P11, alt731_11985
    nqp_rxmark rx719_bstack, alt731_end1983, -1, 0
    rx719_cur."!alt"(rx719_pos, "alt_nfa__26_1346233482.385", $P11)
    goto rx719_fail1961
  alt731_01984:
    add $I11, rx719_pos, 1
    gt $I11, rx719_eos, rx719_fail1961
    substr $S10, rx719_tgt, rx719_pos, 1
    ne $S10, ucs4:",", rx719_fail1961
    add rx719_pos, 1
    goto alt731_end1983
  alt731_11985:
    .const 'Sub' $P504 = 'cuid_127_1346233478.067' 
    capture_lex $P504
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."before"($P504)
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    nqp_rxmark rx719_bstack, rxsubrule736_pass2001, -1, 0
  rxsubrule736_pass2001:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    goto alt731_end1983
  alt731_end1983:
    nqp_rxcommit rx719_bstack, alt731_end1983
    nqp_rxpeek $I19, rx719_bstack, rxquantr727_done1979
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr727_done1979
    inc rx719_rep
    nqp_rxmark rx719_bstack, rxquantr727_done1979, rx719_pos, rx719_rep
    goto rxquantr727_loop1978
  rxquantr727_done1979:
    nqp_rxpeek $I19, rx719_bstack, rxquantr726_done1977
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr726_done1977
    inc rx719_rep
  rxquantr726_done1977:
    rx719_cur."!cursor_pass"(rx719_pos, "signature", 'backtrack'=>1)
    .return (rx719_cur)
  rx719_restart1960:
    repr_get_attr_obj rx719_cstack, rx719_cur, rx719_curclass, "$!cstack"
  rx719_fail1961:
    unless rx719_bstack, rx719_done1959
    pop $I19, rx719_bstack
    if_null rx719_cstack, rx719_cstack_done1964
    unless rx719_cstack, rx719_cstack_done1964
    dec $I19
    set $P11, rx719_cstack[$I19]
  rx719_cstack_done1964:
    pop rx719_rep, rx719_bstack
    pop rx719_pos, rx719_bstack
    pop $I19, rx719_bstack
    lt rx719_pos, -1, rx719_done1959
    lt rx719_pos, 0, rx719_fail1961
    eq $I19, 0, rx719_fail1961
    nqp_islist $I20, rx719_cstack
    unless $I20, rx719_jump1962
    elements $I18, rx719_bstack
    le $I18, 0, rx719_cut1963
    dec $I18
    set $I18, rx719_bstack[$I18]
  rx719_cut1963:
    assign rx719_cstack, $I18
  rx719_jump1962:
    jump $I19
  rx719_done1959:
    rx719_cur."!cursor_fail"()
    .return (rx719_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346233478.067_caps" :subid("cuid_memo_183_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 2
    set $P501["invocant"], $P502
    box $P503, 2
    set $P501["parameter"], $P503
    box $P504, 2
    set $P501["before"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346233478.067_nfa" :subid("cuid_memo_184_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 1
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 1
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 6
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 8
    push $P510, $P511
    box $P512, "ws"
    push $P510, $P512
    box $P513, 3
    push $P510, $P513
    push $P501, $P510
    new $P514, 'ResizablePMCArray'
    box $P515, 8
    push $P514, $P515
    box $P516, "parameter"
    push $P514, $P516
    box $P517, 4
    push $P514, $P517
    push $P501, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 8
    push $P518, $P519
    box $P520, "ws"
    push $P518, $P520
    box $P521, 5
    push $P518, $P521
    push $P501, $P518
    new $P522, 'ResizablePMCArray'
    box $P523, 2
    push $P522, $P523
    box $P524, 58
    push $P522, $P524
    box $P525, 6
    push $P522, $P525
    push $P501, $P522
    new $P526, 'ResizablePMCArray'
    box $P527, 8
    push $P526, $P527
    box $P528, "ws"
    push $P526, $P528
    box $P529, 7
    push $P526, $P529
    box $P530, 1
    push $P526, $P530
    box $P531, 0
    push $P526, $P531
    box $P532, 0
    push $P526, $P532
    box $P533, 1
    push $P526, $P533
    box $P534, 0
    push $P526, $P534
    box $P535, 0
    push $P526, $P535
    push $P501, $P526
    new $P536, 'ResizablePMCArray'
    box $P537, 8
    push $P536, $P537
    box $P538, "parameter"
    push $P536, $P538
    box $P539, 8
    push $P536, $P539
    push $P501, $P536
    new $P540, 'ResizablePMCArray'
    box $P541, 8
    push $P540, $P541
    box $P542, "ws"
    push $P540, $P542
    box $P543, 9
    push $P540, $P543
    push $P501, $P540
    new $P544, 'ResizablePMCArray'
    box $P545, 2
    push $P544, $P545
    box $P546, 44
    push $P544, $P546
    box $P547, 6
    push $P544, $P547
    box $P548, 4
    push $P544, $P548
    box $P549, 32
    push $P544, $P549
    box $P550, 9
    push $P544, $P550
    box $P551, 1
    push $P544, $P551
    box $P552, 0
    push $P544, $P552
    box $P553, 11
    push $P544, $P553
    push $P501, $P544
    new $P554, 'ResizablePMCArray'
    box $P555, 0
    push $P554, $P555
    box $P556, 0
    push $P554, $P556
    box $P557, 0
    push $P554, $P557
    push $P501, $P554
    new $P558, 'ResizablePMCArray'
    box $P559, 2
    push $P558, $P559
    box $P560, 41
    push $P558, $P560
    box $P561, 10
    push $P558, $P561
    box $P562, 2
    push $P558, $P562
    box $P563, 123
    push $P558, $P563
    box $P564, 10
    push $P558, $P564
    push $P501, $P558
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346233478.067_alt_nfa__26_1346233482.385" :subid("cuid_memo_185_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 44
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 4
    push $P510, $P511
    box $P512, 32
    push $P510, $P512
    box $P513, 1
    push $P510, $P513
    box $P514, 1
    push $P510, $P514
    box $P515, 0
    push $P510, $P515
    box $P516, 3
    push $P510, $P516
    push $P508, $P510
    new $P517, 'ResizablePMCArray'
    box $P518, 0
    push $P517, $P518
    box $P519, 0
    push $P517, $P519
    box $P520, 0
    push $P517, $P520
    push $P508, $P517
    new $P521, 'ResizablePMCArray'
    box $P522, 2
    push $P521, $P522
    box $P523, 41
    push $P521, $P523
    box $P524, 2
    push $P521, $P524
    box $P525, 2
    push $P521, $P525
    box $P526, 123
    push $P521, $P526
    box $P527, 2
    push $P521, $P527
    push $P508, $P521
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1346233478.067") :anon :lex :outer("cuid_128_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1063

    find_dynamic_lex $P501, "$*INVOCANT_OK"
    unless_null $P501, fallback1970
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$INVOCANT_OK"]
    unless_null $P502, fallback1971
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback1971:
    unless_null $P502, vivi_7221972
    die "Contextual $*INVOCANT_OK not found"
    box $P506, "Contextual $*INVOCANT_OK not found"
    set $P502, $P506
  vivi_7221972:
    set $P501, $P502
  fallback1970:
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_127_1346233478.067") :anon :lex :outer("cuid_128_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx732_tgt
    .local int rx732_pos
    .local int rx732_off
    .local int rx732_eos
    .local int rx732_rep
    .local pmc rx732_cur
    .local pmc rx732_curclass
    .local pmc rx732_bstack
    .local pmc rx732_cstack
    (rx732_cur, rx732_tgt, rx732_pos, rx732_curclass, rx732_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx732_cur
    length rx732_eos, rx732_tgt
    eq $I19, 1, rx732_restart1988
    gt rx732_pos, rx732_eos, rx732_fail1989
    repr_get_attr_int $I11, self, rx732_curclass, "$!from"
    ne $I11, -1, rxscan733_done1995
    goto rxscan733_scan1994
  rxscan733_loop1993:
    inc rx732_pos
    gt rx732_pos, rx732_eos, rx732_fail1989
    repr_bind_attr_int rx732_cur, rx732_curclass, "$!from", rx732_pos
  rxscan733_scan1994:
    nqp_rxmark rx732_bstack, rxscan733_loop1993, rx732_pos, 0
  rxscan733_done1995:
    nqp_rxmark rx732_bstack, rxquantr734_done1997, rx732_pos, 0
  rxquantr734_loop1996:
    ge rx732_pos, rx732_eos, rx732_fail1989
    is_cclass $I11, .CCLASS_WHITESPACE, rx732_tgt, rx732_pos
    unless $I11, rx732_fail1989
    add rx732_pos, 1
    nqp_rxpeek $I19, rx732_bstack, rxquantr734_done1997
    inc $I19
    inc $I19
    set rx732_rep, rx732_bstack[$I19]
    nqp_rxcommit rx732_bstack, rxquantr734_done1997
    inc rx732_rep
    nqp_rxmark rx732_bstack, rxquantr734_done1997, rx732_pos, rx732_rep
    goto rxquantr734_loop1996
  rxquantr734_done1997:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt735_01999
    nqp_push_label $P11, alt735_12000
    nqp_rxmark rx732_bstack, alt735_end1998, -1, 0
    rx732_cur."!alt"(rx732_pos, "alt_nfa__25_1346233482.372", $P11)
    goto rx732_fail1989
  alt735_01999:
    add $I11, rx732_pos, 1
    gt $I11, rx732_eos, rx732_fail1989
    substr $S10, rx732_tgt, rx732_pos, 1
    ne $S10, ucs4:")", rx732_fail1989
    add rx732_pos, 1
    goto alt735_end1998
  alt735_12000:
    add $I11, rx732_pos, 1
    gt $I11, rx732_eos, rx732_fail1989
    substr $S10, rx732_tgt, rx732_pos, 1
    ne $S10, ucs4:"{", rx732_fail1989
    add rx732_pos, 1
    goto alt735_end1998
  alt735_end1998:
    nqp_rxcommit rx732_bstack, alt735_end1998
    rx732_cur."!cursor_pass"(rx732_pos, 'backtrack'=>1)
    .return (rx732_cur)
  rx732_restart1988:
    repr_get_attr_obj rx732_cstack, rx732_cur, rx732_curclass, "$!cstack"
  rx732_fail1989:
    unless rx732_bstack, rx732_done1987
    pop $I19, rx732_bstack
    if_null rx732_cstack, rx732_cstack_done1992
    unless rx732_cstack, rx732_cstack_done1992
    dec $I19
    set $P11, rx732_cstack[$I19]
  rx732_cstack_done1992:
    pop rx732_rep, rx732_bstack
    pop rx732_pos, rx732_bstack
    pop $I19, rx732_bstack
    lt rx732_pos, -1, rx732_done1987
    lt rx732_pos, 0, rx732_fail1989
    eq $I19, 0, rx732_fail1989
    nqp_islist $I20, rx732_cstack
    unless $I20, rx732_jump1990
    elements $I18, rx732_bstack
    le $I18, 0, rx732_cut1991
    dec $I18
    set $I18, rx732_bstack[$I18]
  rx732_cut1991:
    assign rx732_cstack, $I18
  rx732_jump1990:
    jump $I19
  rx732_done1987:
    rx732_cur."!cursor_fail"()
    .return (rx732_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346233478.067_caps" :subid("cuid_memo_186_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346233478.067_nfa" :subid("cuid_memo_187_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 4
    push $P503, $P504
    box $P505, 32
    push $P503, $P505
    box $P506, 1
    push $P503, $P506
    box $P507, 1
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 2
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 41
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    box $P514, 2
    push $P510, $P514
    box $P515, 123
    push $P510, $P515
    box $P516, 0
    push $P510, $P516
    push $P501, $P510
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346233478.067_alt_nfa__25_1346233482.372" :subid("cuid_memo_188_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 41
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 123
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_129_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1067
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx737_tgt
    .local int rx737_pos
    .local int rx737_off
    .local int rx737_eos
    .local int rx737_rep
    .local pmc rx737_cur
    .local pmc rx737_curclass
    .local pmc rx737_bstack
    .local pmc rx737_cstack
    (rx737_cur, rx737_tgt, rx737_pos, rx737_curclass, rx737_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx737_cur
    length rx737_eos, rx737_tgt
    eq $I19, 1, rx737_restart2004
    gt rx737_pos, rx737_eos, rx737_fail2005
    repr_get_attr_int $I11, self, rx737_curclass, "$!from"
    ne $I11, -1, rxscan738_done2011
    goto rxscan738_scan2010
  rxscan738_loop2009:
    inc rx737_pos
    gt rx737_pos, rx737_eos, rx737_fail2005
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!from", rx737_pos
  rxscan738_scan2010:
    nqp_rxmark rx737_bstack, rxscan738_loop2009, rx737_pos, 0
  rxscan738_done2011:
    nqp_rxmark rx737_bstack, rxquantr739_done2013, rx737_pos, 0
  rxquantr739_loop2012:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."typename"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    nqp_rxmark rx737_bstack, rxsubrule740_pass2014, -1, 0
  rxsubrule740_pass2014:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxmark rx737_bstack, rxquantr741_done2016, rx737_pos, 0
  rxquantr741_loop2015:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2005
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:":", rx737_fail2005
    add rx737_pos, 1
    nqp_rxmark rx737_bstack, rxcap742_fail2018, rx737_pos, 0
    ge rx737_pos, rx737_eos, rx737_fail2005
    substr $S11, rx737_tgt, rx737_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx737_fail2005
    inc rx737_pos
    nqp_rxpeek $I19, rx737_bstack, rxcap742_fail2018
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "definedness")
    goto rxcap742_done2017
  rxcap742_fail2018:
    goto rx737_fail2005
  rxcap742_done2017:
    nqp_rxpeek $I19, rx737_bstack, rxquantr741_done2016
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr741_done2016
    inc rx737_rep
  rxquantr741_done2016:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."ws"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxpeek $I19, rx737_bstack, rxquantr739_done2013
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr739_done2013
    inc rx737_rep
    nqp_rxmark rx737_bstack, rxquantr739_done2013, rx737_pos, rx737_rep
    goto rxquantr739_loop2012
  rxquantr739_done2013:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt744_02021
    nqp_push_label $P11, alt744_12025
    nqp_rxmark rx737_bstack, alt744_end2020, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__27_1346233482.433", $P11)
    goto rx737_fail2005
  alt744_02021:
    nqp_rxmark rx737_bstack, rxcap745_fail2023, rx737_pos, 0
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2005
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"*", rx737_fail2005
    add rx737_pos, 1
    nqp_rxpeek $I19, rx737_bstack, rxcap745_fail2023
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "quant")
    goto rxcap745_done2022
  rxcap745_fail2023:
    goto rx737_fail2005
  rxcap745_done2022:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    nqp_rxmark rx737_bstack, rxsubrule746_pass2024, -1, 0
  rxsubrule746_pass2024:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt744_end2020
  alt744_12025:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt747_02027
    nqp_push_label $P11, alt747_12029
    nqp_rxmark rx737_bstack, alt747_end2026, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__28_1346233482.434", $P11)
    goto rx737_fail2005
  alt747_02027:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    nqp_rxmark rx737_bstack, rxsubrule748_pass2028, -1, 0
  rxsubrule748_pass2028:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt747_end2026
  alt747_12029:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    nqp_rxmark rx737_bstack, rxsubrule749_pass2030, -1, 0
  rxsubrule749_pass2030:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt747_end2026
  alt747_end2026:
    nqp_rxcommit rx737_bstack, alt747_end2026
    nqp_rxmark rx737_bstack, rxcap750_fail2032, rx737_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt751_02034
    nqp_push_label $P11, alt751_12035
    nqp_push_label $P11, alt751_22036
    nqp_rxmark rx737_bstack, alt751_end2033, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__29_1346233482.435", $P11)
    goto rx737_fail2005
  alt751_02034:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2005
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"?", rx737_fail2005
    add rx737_pos, 1
    goto alt751_end2033
  alt751_12035:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2005
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"!", rx737_fail2005
    add rx737_pos, 1
    goto alt751_end2033
  alt751_22036:
    goto alt751_end2033
  alt751_end2033:
    nqp_rxcommit rx737_bstack, alt751_end2033
    nqp_rxpeek $I19, rx737_bstack, rxcap750_fail2032
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "quant")
    goto rxcap750_done2031
  rxcap750_fail2032:
    goto rx737_fail2005
  rxcap750_done2031:
    goto alt744_end2020
  alt744_end2020:
    nqp_rxcommit rx737_bstack, alt744_end2020
    nqp_rxmark rx737_bstack, rxquantr753_done2039, rx737_pos, 0
  rxquantr753_loop2038:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    goto rxsubrule754_pass2040
  rxsubrule754_back2041:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
  rxsubrule754_pass2040:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule754_back2041
    push rx737_bstack, $I11
    push rx737_bstack, 0
    push rx737_bstack, rx737_pos
    elements $I11, rx737_cstack
    push rx737_bstack, $I11
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxpeek $I19, rx737_bstack, rxquantr753_done2039
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr753_done2039
    inc rx737_rep
  rxquantr753_done2039:
    rx737_cur."!cursor_pass"(rx737_pos, "parameter", 'backtrack'=>1)
    .return (rx737_cur)
  rx737_restart2004:
    repr_get_attr_obj rx737_cstack, rx737_cur, rx737_curclass, "$!cstack"
  rx737_fail2005:
    unless rx737_bstack, rx737_done2003
    pop $I19, rx737_bstack
    if_null rx737_cstack, rx737_cstack_done2008
    unless rx737_cstack, rx737_cstack_done2008
    dec $I19
    set $P11, rx737_cstack[$I19]
  rx737_cstack_done2008:
    pop rx737_rep, rx737_bstack
    pop rx737_pos, rx737_bstack
    pop $I19, rx737_bstack
    lt rx737_pos, -1, rx737_done2003
    lt rx737_pos, 0, rx737_fail2005
    eq $I19, 0, rx737_fail2005
    nqp_islist $I20, rx737_cstack
    unless $I20, rx737_jump2006
    elements $I18, rx737_bstack
    le $I18, 0, rx737_cut2007
    dec $I18
    set $I18, rx737_bstack[$I18]
  rx737_cut2007:
    assign rx737_cstack, $I18
  rx737_jump2006:
    jump $I19
  rx737_done2003:
    rx737_cur."!cursor_fail"()
    .return (rx737_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346233478.067_caps" :subid("cuid_memo_189_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 2
    set $P501["typename"], $P502
    box $P503, 2
    set $P501["definedness"], $P503
    box $P504, 0
    set $P501["quant"], $P504
    box $P505, 0
    set $P501["param_var"], $P505
    box $P506, 0
    set $P501["named_param"], $P506
    box $P507, 2
    set $P501["default_value"], $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346233478.067_nfa" :subid("cuid_memo_190_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "typename"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 1
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 5
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 58
    push $P510, $P512
    box $P513, 3
    push $P510, $P513
    box $P514, 1
    push $P510, $P514
    box $P515, 0
    push $P510, $P515
    box $P516, 4
    push $P510, $P516
    push $P501, $P510
    new $P517, 'ResizablePMCArray'
    box $P518, 6
    push $P517, $P518
    box $P519, "_DU"
    push $P517, $P519
    box $P520, 4
    push $P517, $P520
    push $P501, $P517
    new $P521, 'ResizablePMCArray'
    box $P522, 8
    push $P521, $P522
    box $P523, "ws"
    push $P521, $P523
    box $P524, 1
    push $P521, $P524
    push $P501, $P521
    new $P525, 'ResizablePMCArray'
    box $P526, 2
    push $P525, $P526
    box $P527, 42
    push $P525, $P527
    box $P528, 6
    push $P525, $P528
    box $P529, 8
    push $P525, $P529
    box $P530, "param_var"
    push $P525, $P530
    box $P531, 8
    push $P525, $P531
    box $P532, 8
    push $P525, $P532
    box $P533, "named_param"
    push $P525, $P533
    box $P534, 8
    push $P525, $P534
    push $P501, $P525
    new $P535, 'ResizablePMCArray'
    box $P536, 8
    push $P535, $P536
    box $P537, "param_var"
    push $P535, $P537
    box $P538, 7
    push $P535, $P538
    push $P501, $P535
    new $P539, 'ResizablePMCArray'
    box $P540, 8
    push $P539, $P540
    box $P541, "default_value"
    push $P539, $P541
    box $P542, 0
    push $P539, $P542
    box $P543, 1
    push $P539, $P543
    box $P544, 0
    push $P539, $P544
    box $P545, 0
    push $P539, $P545
    push $P501, $P539
    new $P546, 'ResizablePMCArray'
    box $P547, 2
    push $P546, $P547
    box $P548, 63
    push $P546, $P548
    box $P549, 7
    push $P546, $P549
    box $P550, 2
    push $P546, $P550
    box $P551, 33
    push $P546, $P551
    box $P552, 7
    push $P546, $P552
    box $P553, 1
    push $P546, $P553
    box $P554, 0
    push $P546, $P554
    box $P555, 7
    push $P546, $P555
    push $P501, $P546
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346233478.067_alt_nfa__28_1346233482.434" :subid("cuid_memo_191_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "param_var"
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 8
    push $P510, $P511
    box $P512, "named_param"
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346233478.067_alt_nfa__29_1346233482.435" :subid("cuid_memo_192_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 63
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 33
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    new $P514, 'ResizablePMCArray'
    new $P515, 'ResizablePMCArray'
    push $P514, $P515
    new $P516, 'ResizablePMCArray'
    box $P517, 1
    push $P516, $P517
    box $P518, 0
    push $P516, $P518
    box $P519, 0
    push $P516, $P519
    push $P514, $P516
    push $P501, $P514
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346233478.067_alt_nfa__27_1346233482.433" :subid("cuid_memo_193_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 42
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 8
    push $P508, $P509
    box $P510, "param_var"
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 8
    push $P514, $P515
    box $P516, "param_var"
    push $P514, $P516
    box $P517, 2
    push $P514, $P517
    box $P518, 8
    push $P514, $P518
    box $P519, "named_param"
    push $P514, $P519
    box $P520, 2
    push $P514, $P520
    push $P512, $P514
    new $P521, 'ResizablePMCArray'
    box $P522, 2
    push $P521, $P522
    box $P523, 63
    push $P521, $P523
    box $P524, 0
    push $P521, $P524
    box $P525, 2
    push $P521, $P525
    box $P526, 33
    push $P521, $P526
    box $P527, 0
    push $P521, $P527
    box $P528, 1
    push $P521, $P528
    box $P529, 0
    push $P521, $P529
    box $P530, 0
    push $P521, $P530
    push $P512, $P521
    push $P501, $P512
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_130_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1076
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx755_tgt
    .local int rx755_pos
    .local int rx755_off
    .local int rx755_eos
    .local int rx755_rep
    .local pmc rx755_cur
    .local pmc rx755_curclass
    .local pmc rx755_bstack
    .local pmc rx755_cstack
    (rx755_cur, rx755_tgt, rx755_pos, rx755_curclass, rx755_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx755_cur
    length rx755_eos, rx755_tgt
    eq $I19, 1, rx755_restart2044
    gt rx755_pos, rx755_eos, rx755_fail2045
    repr_get_attr_int $I11, self, rx755_curclass, "$!from"
    ne $I11, -1, rxscan756_done2051
    goto rxscan756_scan2050
  rxscan756_loop2049:
    inc rx755_pos
    gt rx755_pos, rx755_eos, rx755_fail2045
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!from", rx755_pos
  rxscan756_scan2050:
    nqp_rxmark rx755_bstack, rxscan756_loop2049, rx755_pos, 0
  rxscan756_done2051:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2045
    nqp_rxmark rx755_bstack, rxsubrule757_pass2052, -1, 0
  rxsubrule757_pass2052:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    nqp_rxmark rx755_bstack, rxquantr758_done2054, rx755_pos, 0
  rxquantr758_loop2053:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2045
    goto rxsubrule759_pass2055
  rxsubrule759_back2056:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2045
  rxsubrule759_pass2055:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule759_back2056
    push rx755_bstack, $I11
    push rx755_bstack, 0
    push rx755_bstack, rx755_pos
    elements $I11, rx755_cstack
    push rx755_bstack, $I11
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    nqp_rxpeek $I19, rx755_bstack, rxquantr758_done2054
    inc $I19
    inc $I19
    set rx755_rep, rx755_bstack[$I19]
    nqp_rxcommit rx755_bstack, rxquantr758_done2054
    inc rx755_rep
  rxquantr758_done2054:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt760_02058
    nqp_push_label $P11, alt760_12060
    nqp_rxmark rx755_bstack, alt760_end2057, -1, 0
    rx755_cur."!alt"(rx755_pos, "alt_nfa__30_1346233482.457", $P11)
    goto rx755_fail2045
  alt760_02058:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."ident"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2045
    nqp_rxmark rx755_bstack, rxsubrule761_pass2059, -1, 0
  rxsubrule761_pass2059:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    goto alt760_end2057
  alt760_12060:
    nqp_rxmark rx755_bstack, rxcap762_fail2062, rx755_pos, 0
    ge rx755_pos, rx755_eos, rx755_fail2045
    substr $S11, rx755_tgt, rx755_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx755_fail2045
    inc rx755_pos
    nqp_rxpeek $I19, rx755_bstack, rxcap762_fail2062
    inc $I19
    set $I11, rx755_bstack[$I19]
    $P11 = rx755_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx755_pos)
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "name")
    goto rxcap762_done2061
  rxcap762_fail2062:
    goto rx755_fail2045
  rxcap762_done2061:
    goto alt760_end2057
  alt760_end2057:
    nqp_rxcommit rx755_bstack, alt760_end2057
    rx755_cur."!cursor_pass"(rx755_pos, "param_var", 'backtrack'=>1)
    .return (rx755_cur)
  rx755_restart2044:
    repr_get_attr_obj rx755_cstack, rx755_cur, rx755_curclass, "$!cstack"
  rx755_fail2045:
    unless rx755_bstack, rx755_done2043
    pop $I19, rx755_bstack
    if_null rx755_cstack, rx755_cstack_done2048
    unless rx755_cstack, rx755_cstack_done2048
    dec $I19
    set $P11, rx755_cstack[$I19]
  rx755_cstack_done2048:
    pop rx755_rep, rx755_bstack
    pop rx755_pos, rx755_bstack
    pop $I19, rx755_bstack
    lt rx755_pos, -1, rx755_done2043
    lt rx755_pos, 0, rx755_fail2045
    eq $I19, 0, rx755_fail2045
    nqp_islist $I20, rx755_cstack
    unless $I20, rx755_jump2046
    elements $I18, rx755_bstack
    le $I18, 0, rx755_cut2047
    dec $I18
    set $I18, rx755_bstack[$I18]
  rx755_cut2047:
    assign rx755_cstack, $I18
  rx755_jump2046:
    jump $I19
  rx755_done2043:
    rx755_cur."!cursor_fail"()
    .return (rx755_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346233478.067_caps" :subid("cuid_memo_194_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sigil"], $P502
    box $P503, 2
    set $P501["twigil"], $P503
    box $P504, 0
    set $P501["name"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346233478.067_nfa" :subid("cuid_memo_195_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "sigil"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "twigil"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    box $P511, 1
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 3
    push $P507, $P513
    push $P501, $P507
    new $P514, 'ResizablePMCArray'
    box $P515, 8
    push $P514, $P515
    box $P516, "ident"
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    box $P518, 6
    push $P514, $P518
    box $P519, "/!"
    push $P514, $P519
    box $P520, 0
    push $P514, $P520
    push $P501, $P514
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346233478.067_alt_nfa__30_1346233482.457" :subid("cuid_memo_196_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "ident"
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 6
    push $P510, $P511
    box $P512, "/!"
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_131_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1081
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx763_tgt
    .local int rx763_pos
    .local int rx763_off
    .local int rx763_eos
    .local int rx763_rep
    .local pmc rx763_cur
    .local pmc rx763_curclass
    .local pmc rx763_bstack
    .local pmc rx763_cstack
    (rx763_cur, rx763_tgt, rx763_pos, rx763_curclass, rx763_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx763_cur
    length rx763_eos, rx763_tgt
    eq $I19, 1, rx763_restart2065
    gt rx763_pos, rx763_eos, rx763_fail2066
    repr_get_attr_int $I11, self, rx763_curclass, "$!from"
    ne $I11, -1, rxscan764_done2072
    goto rxscan764_scan2071
  rxscan764_loop2070:
    inc rx763_pos
    gt rx763_pos, rx763_eos, rx763_fail2066
    repr_bind_attr_int rx763_cur, rx763_curclass, "$!from", rx763_pos
  rxscan764_scan2071:
    nqp_rxmark rx763_bstack, rxscan764_loop2070, rx763_pos, 0
  rxscan764_done2072:
    add $I11, rx763_pos, 1
    gt $I11, rx763_eos, rx763_fail2066
    substr $S10, rx763_tgt, rx763_pos, 1
    ne $S10, ucs4:":", rx763_fail2066
    add rx763_pos, 1
    repr_bind_attr_int rx763_cur, rx763_curclass, "$!pos", rx763_pos
    $P11 = rx763_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx763_curclass, "$!pos"
    lt $I11, 0, rx763_fail2066
    nqp_rxmark rx763_bstack, rxsubrule765_pass2073, -1, 0
  rxsubrule765_pass2073:
    rx763_cstack = rx763_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx763_pos, $P11, rx763_curclass, "$!pos"
    rx763_cur."!cursor_pass"(rx763_pos, "named_param", 'backtrack'=>1)
    .return (rx763_cur)
  rx763_restart2065:
    repr_get_attr_obj rx763_cstack, rx763_cur, rx763_curclass, "$!cstack"
  rx763_fail2066:
    unless rx763_bstack, rx763_done2064
    pop $I19, rx763_bstack
    if_null rx763_cstack, rx763_cstack_done2069
    unless rx763_cstack, rx763_cstack_done2069
    dec $I19
    set $P11, rx763_cstack[$I19]
  rx763_cstack_done2069:
    pop rx763_rep, rx763_bstack
    pop rx763_pos, rx763_bstack
    pop $I19, rx763_bstack
    lt rx763_pos, -1, rx763_done2064
    lt rx763_pos, 0, rx763_fail2066
    eq $I19, 0, rx763_fail2066
    nqp_islist $I20, rx763_cstack
    unless $I20, rx763_jump2067
    elements $I18, rx763_bstack
    le $I18, 0, rx763_cut2068
    dec $I18
    set $I18, rx763_bstack[$I18]
  rx763_cut2068:
    assign rx763_cstack, $I18
  rx763_jump2067:
    jump $I19
  rx763_done2064:
    rx763_cur."!cursor_fail"()
    .return (rx763_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1346233478.067_caps" :subid("cuid_memo_197_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["param_var"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1346233478.067_nfa" :subid("cuid_memo_198_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 58
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "param_var"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_132_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1085
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx766_tgt
    .local int rx766_pos
    .local int rx766_off
    .local int rx766_eos
    .local int rx766_rep
    .local pmc rx766_cur
    .local pmc rx766_curclass
    .local pmc rx766_bstack
    .local pmc rx766_cstack
    (rx766_cur, rx766_tgt, rx766_pos, rx766_curclass, rx766_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx766_cur
    length rx766_eos, rx766_tgt
    eq $I19, 1, rx766_restart2076
    gt rx766_pos, rx766_eos, rx766_fail2077
    repr_get_attr_int $I11, self, rx766_curclass, "$!from"
    ne $I11, -1, rxscan767_done2083
    goto rxscan767_scan2082
  rxscan767_loop2081:
    inc rx766_pos
    gt rx766_pos, rx766_eos, rx766_fail2077
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!from", rx766_pos
  rxscan767_scan2082:
    nqp_rxmark rx766_bstack, rxscan767_loop2081, rx766_pos, 0
  rxscan767_done2083:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2077
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    add $I11, rx766_pos, 1
    gt $I11, rx766_eos, rx766_fail2077
    substr $S10, rx766_tgt, rx766_pos, 1
    ne $S10, ucs4:"=", rx766_fail2077
    add rx766_pos, 1
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2077
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2077
    nqp_rxmark rx766_bstack, rxsubrule770_pass2086, -1, 0
  rxsubrule770_pass2086:
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2077
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    rx766_cur."!cursor_pass"(rx766_pos, "default_value", 'backtrack'=>1)
    .return (rx766_cur)
  rx766_restart2076:
    repr_get_attr_obj rx766_cstack, rx766_cur, rx766_curclass, "$!cstack"
  rx766_fail2077:
    unless rx766_bstack, rx766_done2075
    pop $I19, rx766_bstack
    if_null rx766_cstack, rx766_cstack_done2080
    unless rx766_cstack, rx766_cstack_done2080
    dec $I19
    set $P11, rx766_cstack[$I19]
  rx766_cstack_done2080:
    pop rx766_rep, rx766_bstack
    pop rx766_pos, rx766_bstack
    pop $I19, rx766_bstack
    lt rx766_pos, -1, rx766_done2075
    lt rx766_pos, 0, rx766_fail2077
    eq $I19, 0, rx766_fail2077
    nqp_islist $I20, rx766_cstack
    unless $I20, rx766_jump2078
    elements $I18, rx766_bstack
    le $I18, 0, rx766_cut2079
    dec $I18
    set $I18, rx766_bstack[$I18]
  rx766_cut2079:
    assign rx766_cstack, $I18
  rx766_jump2078:
    jump $I19
  rx766_done2075:
    rx766_cur."!cursor_fail"()
    .return (rx766_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_132_1346233478.067_caps" :subid("cuid_memo_199_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_133_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1087
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx772_tgt
    .local int rx772_pos
    .local int rx772_off
    .local int rx772_eos
    .local int rx772_rep
    .local pmc rx772_cur
    .local pmc rx772_curclass
    .local pmc rx772_bstack
    .local pmc rx772_cstack
    (rx772_cur, rx772_tgt, rx772_pos, rx772_curclass, rx772_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx772_cur
    length rx772_eos, rx772_tgt
    eq $I19, 1, rx772_restart2090
    gt rx772_pos, rx772_eos, rx772_fail2091
    repr_get_attr_int $I11, self, rx772_curclass, "$!from"
    ne $I11, -1, rxscan773_done2097
    goto rxscan773_scan2096
  rxscan773_loop2095:
    inc rx772_pos
    gt rx772_pos, rx772_eos, rx772_fail2091
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!from", rx772_pos
  rxscan773_scan2096:
    nqp_rxmark rx772_bstack, rxscan773_loop2095, rx772_pos, 0
  rxscan773_done2097:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2091
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2091
    nqp_rxmark rx772_bstack, rxsubrule775_pass2099, -1, 0
  rxsubrule775_pass2099:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2091
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    rx772_cur."!cursor_pass"(rx772_pos, "trait", 'backtrack'=>1)
    .return (rx772_cur)
  rx772_restart2090:
    repr_get_attr_obj rx772_cstack, rx772_cur, rx772_curclass, "$!cstack"
  rx772_fail2091:
    unless rx772_bstack, rx772_done2089
    pop $I19, rx772_bstack
    if_null rx772_cstack, rx772_cstack_done2094
    unless rx772_cstack, rx772_cstack_done2094
    dec $I19
    set $P11, rx772_cstack[$I19]
  rx772_cstack_done2094:
    pop rx772_rep, rx772_bstack
    pop rx772_pos, rx772_bstack
    pop $I19, rx772_bstack
    lt rx772_pos, -1, rx772_done2089
    lt rx772_pos, 0, rx772_fail2091
    eq $I19, 0, rx772_fail2091
    nqp_islist $I20, rx772_cstack
    unless $I20, rx772_jump2092
    elements $I18, rx772_bstack
    le $I18, 0, rx772_cut2093
    dec $I18
    set $I18, rx772_bstack[$I18]
  rx772_cut2093:
    assign rx772_cstack, $I18
  rx772_jump2092:
    jump $I19
  rx772_done2089:
    rx772_cur."!cursor_fail"()
    .return (rx772_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_133_1346233478.067_caps" :subid("cuid_memo_200_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["trait_mod"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_134_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1089
    .param pmc self 
    $P501 = self."!protoregex"("trait_mod")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_135_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx777_tgt
    .local int rx777_pos
    .local int rx777_off
    .local int rx777_eos
    .local int rx777_rep
    .local pmc rx777_cur
    .local pmc rx777_curclass
    .local pmc rx777_bstack
    .local pmc rx777_cstack
    (rx777_cur, rx777_tgt, rx777_pos, rx777_curclass, rx777_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx777_cur
    length rx777_eos, rx777_tgt
    eq $I19, 1, rx777_restart2103
    gt rx777_pos, rx777_eos, rx777_fail2104
    repr_get_attr_int $I11, self, rx777_curclass, "$!from"
    ne $I11, -1, rxscan778_done2110
    goto rxscan778_scan2109
  rxscan778_loop2108:
    inc rx777_pos
    gt rx777_pos, rx777_eos, rx777_fail2104
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!from", rx777_pos
  rxscan778_scan2109:
    nqp_rxmark rx777_bstack, rxscan778_loop2108, rx777_pos, 0
  rxscan778_done2110:
    nqp_rxmark rx777_bstack, rxcap779_fail2112, rx777_pos, 0
    add $I11, rx777_pos, 2
    gt $I11, rx777_eos, rx777_fail2104
    substr $S10, rx777_tgt, rx777_pos, 2
    ne $S10, ucs4:"is", rx777_fail2104
    add rx777_pos, 2
    nqp_rxpeek $I19, rx777_bstack, rxcap779_fail2112
    inc $I19
    set $I11, rx777_bstack[$I19]
    $P11 = rx777_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx777_pos)
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "sym")
    goto rxcap779_done2111
  rxcap779_fail2112:
    goto rx777_fail2104
  rxcap779_done2111:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."ws"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
    nqp_rxmark rx777_bstack, rxsubrule781_pass2114, -1, 0
  rxsubrule781_pass2114:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxmark rx777_bstack, rxquantr782_done2116, rx777_pos, 0
  rxquantr782_loop2115:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
    goto rxsubrule783_pass2117
  rxsubrule783_back2118:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
  rxsubrule783_pass2117:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule783_back2118
    push rx777_bstack, $I11
    push rx777_bstack, 0
    push rx777_bstack, rx777_pos
    elements $I11, rx777_cstack
    push rx777_bstack, $I11
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxpeek $I19, rx777_bstack, rxquantr782_done2116
    inc $I19
    inc $I19
    set rx777_rep, rx777_bstack[$I19]
    nqp_rxcommit rx777_bstack, rxquantr782_done2116
    inc rx777_rep
  rxquantr782_done2116:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."ws"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    rx777_cur."!cursor_pass"(rx777_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx777_cur)
  rx777_restart2103:
    repr_get_attr_obj rx777_cstack, rx777_cur, rx777_curclass, "$!cstack"
  rx777_fail2104:
    unless rx777_bstack, rx777_done2102
    pop $I19, rx777_bstack
    if_null rx777_cstack, rx777_cstack_done2107
    unless rx777_cstack, rx777_cstack_done2107
    dec $I19
    set $P11, rx777_cstack[$I19]
  rx777_cstack_done2107:
    pop rx777_rep, rx777_bstack
    pop rx777_pos, rx777_bstack
    pop $I19, rx777_bstack
    lt rx777_pos, -1, rx777_done2102
    lt rx777_pos, 0, rx777_fail2104
    eq $I19, 0, rx777_fail2104
    nqp_islist $I20, rx777_cstack
    unless $I20, rx777_jump2105
    elements $I18, rx777_bstack
    le $I18, 0, rx777_cut2106
    dec $I18
    set $I18, rx777_bstack[$I18]
  rx777_cut2106:
    assign rx777_cstack, $I18
  rx777_jump2105:
    jump $I19
  rx777_done2102:
    rx777_cur."!cursor_fail"()
    .return (rx777_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1346233478.067_caps" :subid("cuid_memo_201_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["longname"], $P503
    box $P504, 2
    set $P501["circumfix"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1346233478.067_nfa" :subid("cuid_memo_202_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 105
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 115
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 0
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_136_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1092
    .param pmc _lex_param_0 
    .const 'Sub' $P512 = 'cuid_397_1346233478.067' 
    capture_lex $P512 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P501, 'Hash'
    set $P101, $P501
    set self, _lex_param_0
    .local string rx785_tgt
    .local int rx785_pos
    .local int rx785_off
    .local int rx785_eos
    .local int rx785_rep
    .local pmc rx785_cur
    .local pmc rx785_curclass
    .local pmc rx785_bstack
    .local pmc rx785_cstack
    (rx785_cur, rx785_tgt, rx785_pos, rx785_curclass, rx785_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx785_cur
    length rx785_eos, rx785_tgt
    eq $I19, 1, rx785_restart2122
    gt rx785_pos, rx785_eos, rx785_fail2123
    repr_get_attr_int $I11, self, rx785_curclass, "$!from"
    ne $I11, -1, rxscan786_done2129
    goto rxscan786_scan2128
  rxscan786_loop2127:
    inc rx785_pos
    gt rx785_pos, rx785_eos, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!from", rx785_pos
  rxscan786_scan2128:
    nqp_rxmark rx785_bstack, rxscan786_loop2127, rx785_pos, 0
  rxscan786_done2129:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt787_02131
    nqp_push_label $P11, alt787_12161
    nqp_rxmark rx785_bstack, alt787_end2130, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__31_1346233482.621", $P11)
    goto rx785_fail2123
  alt787_02131:
    nqp_rxmark rx785_bstack, rxcap788_fail2133, rx785_pos, 0
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"proto", rx785_fail2123
    add rx785_pos, 5
    nqp_rxpeek $I19, rx785_bstack, rxcap788_fail2133
    inc $I19
    set $I11, rx785_bstack[$I19]
    $P11 = rx785_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx785_pos)
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "proto")
    goto rxcap788_done2132
  rxcap788_fail2133:
    goto rx785_fail2123
  rxcap788_done2132:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt790_02136
    nqp_push_label $P11, alt790_12137
    nqp_push_label $P11, alt790_22138
    nqp_rxmark rx785_bstack, alt790_end2135, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__32_1346233482.621", $P11)
    goto rx785_fail2123
  alt790_02136:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"regex", rx785_fail2123
    add rx785_pos, 5
    goto alt790_end2135
  alt790_12137:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"token", rx785_fail2123
    add rx785_pos, 5
    goto alt790_end2135
  alt790_22138:
    add $I11, rx785_pos, 4
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 4
    ne $S10, ucs4:"rule", rx785_fail2123
    add rx785_pos, 4
    goto alt790_end2135
  alt790_end2135:
    nqp_rxcommit rx785_bstack, alt790_end2135
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    nqp_rxmark rx785_bstack, rxsubrule792_pass2140, -1, 0
  rxsubrule792_pass2140:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
  alt794_02143:
    nqp_rxmark rx785_bstack, alt794_12146, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 3
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 3
    ne $S10, ucs4:"{*}", rx785_fail2123
    add rx785_pos, 3
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2142
  alt794_12146:
    nqp_rxmark rx785_bstack, alt794_22151, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"<...>", rx785_fail2123
    add rx785_pos, 5
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2142
  alt794_22151:
    nqp_rxmark rx785_bstack, alt794_32156, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 3
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 3
    ne $S10, ucs4:"<*>", rx785_fail2123
    add rx785_pos, 3
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2142
  alt794_32156:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
  alt794_end2142:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt787_end2130
  alt787_12161:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxmark rx785_bstack, rxcap810_fail2164, rx785_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt811_02166
    nqp_push_label $P11, alt811_12167
    nqp_push_label $P11, alt811_22168
    nqp_rxmark rx785_bstack, alt811_end2165, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__33_1346233482.625", $P11)
    goto rx785_fail2123
  alt811_02166:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"regex", rx785_fail2123
    add rx785_pos, 5
    goto alt811_end2165
  alt811_12167:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"token", rx785_fail2123
    add rx785_pos, 5
    goto alt811_end2165
  alt811_22168:
    add $I11, rx785_pos, 4
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 4
    ne $S10, ucs4:"rule", rx785_fail2123
    add rx785_pos, 4
    goto alt811_end2165
  alt811_end2165:
    nqp_rxcommit rx785_bstack, alt811_end2165
    nqp_rxpeek $I19, rx785_bstack, rxcap810_fail2164
    inc $I19
    set $I11, rx785_bstack[$I19]
    $P11 = rx785_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx785_pos)
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "sym")
    goto rxcap810_done2163
  rxcap810_fail2164:
    goto rx785_fail2123
  rxcap810_done2163:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    nqp_rxmark rx785_bstack, rxsubrule814_pass2171, -1, 0
  rxsubrule814_pass2171:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxmark rx785_bstack, rxquantr818_done2176, rx785_pos, 0
  rxquantr818_loop2175:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"(", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."signature"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    nqp_rxmark rx785_bstack, rxsubrule821_pass2179, -1, 0
  rxsubrule821_pass2179:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:")", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxpeek $I19, rx785_bstack, rxquantr818_done2176
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr818_done2176
    inc rx785_rep
  rxquantr818_done2176:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    store_lex unicode:"$\x{a2}", rx785_cur
    unless_null $P101, fallback2183
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["%RX"]
    unless_null $P502, fallback2184
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    new $P507, 'Hash'
    set $P505["%RX"], $P507
    set $P502, $P507
  fallback2184:
    unless_null $P502, vivi_8252185
    die "Contextual %*RX not found"
    box $P508, "Contextual %*RX not found"
    set $P502, $P508
  vivi_8252185:
    set $P101, $P502
  fallback2183:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    store_lex unicode:"$\x{a2}", rx785_cur
    $P509 = $P102."MATCH"()
    set $P103, $P509
    .const 'Sub' $P510 = 'cuid_397_1346233478.067' 
    capture_lex $P510
    $P511 = $P510()
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    nqp_rxmark rx785_bstack, rxsubrule832_pass2203, -1, 0
  rxsubrule832_pass2203:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt787_end2130
  alt787_end2130:
    nqp_rxcommit rx785_bstack, alt787_end2130
    rx785_cur."!cursor_pass"(rx785_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx785_cur)
  rx785_restart2122:
    repr_get_attr_obj rx785_cstack, rx785_cur, rx785_curclass, "$!cstack"
  rx785_fail2123:
    unless rx785_bstack, rx785_done2121
    pop $I19, rx785_bstack
    if_null rx785_cstack, rx785_cstack_done2126
    unless rx785_cstack, rx785_cstack_done2126
    dec $I19
    set $P11, rx785_cstack[$I19]
  rx785_cstack_done2126:
    pop rx785_rep, rx785_bstack
    pop rx785_pos, rx785_bstack
    pop $I19, rx785_bstack
    lt rx785_pos, -1, rx785_done2121
    lt rx785_pos, 0, rx785_fail2123
    eq $I19, 0, rx785_fail2123
    nqp_islist $I20, rx785_cstack
    unless $I20, rx785_jump2124
    elements $I18, rx785_bstack
    le $I18, 0, rx785_cut2125
    dec $I18
    set $I18, rx785_bstack[$I18]
  rx785_cut2125:
    assign rx785_cstack, $I18
  rx785_jump2124:
    jump $I19
  rx785_done2121:
    rx785_cur."!cursor_fail"()
    .return (rx785_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346233478.067_caps" :subid("cuid_memo_203_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["proto"], $P502
    box $P503, 0
    set $P501["deflongname"], $P503
    box $P504, 0
    set $P501["sym"], $P504
    box $P505, 2
    set $P501["signature"], $P505
    box $P506, 0
    set $P501["p6regex"], $P506
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346233478.067_nfa" :subid("cuid_memo_204_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 112
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    box $P507, 0
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 0
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 2
    push $P510, $P511
    box $P512, 114
    push $P510, $P512
    box $P513, 3
    push $P510, $P513
    push $P501, $P510
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 111
    push $P514, $P516
    box $P517, 4
    push $P514, $P517
    push $P501, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 2
    push $P518, $P519
    box $P520, 116
    push $P518, $P520
    box $P521, 5
    push $P518, $P521
    push $P501, $P518
    new $P522, 'ResizablePMCArray'
    box $P523, 2
    push $P522, $P523
    box $P524, 111
    push $P522, $P524
    box $P525, 6
    push $P522, $P525
    push $P501, $P522
    new $P526, 'ResizablePMCArray'
    box $P527, 0
    push $P526, $P527
    box $P528, 0
    push $P526, $P528
    box $P529, 0
    push $P526, $P529
    push $P501, $P526
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346233478.067_alt_nfa__32_1346233482.621" :subid("cuid_memo_205_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 114
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 101
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 103
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 101
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 120
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P502, $P520
    push $P501, $P502
    new $P524, 'ResizablePMCArray'
    new $P525, 'ResizablePMCArray'
    push $P524, $P525
    new $P526, 'ResizablePMCArray'
    box $P527, 2
    push $P526, $P527
    box $P528, 116
    push $P526, $P528
    box $P529, 2
    push $P526, $P529
    push $P524, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 2
    push $P530, $P531
    box $P532, 111
    push $P530, $P532
    box $P533, 3
    push $P530, $P533
    push $P524, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 107
    push $P534, $P536
    box $P537, 4
    push $P534, $P537
    push $P524, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 101
    push $P538, $P540
    box $P541, 5
    push $P538, $P541
    push $P524, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 110
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P524, $P542
    push $P501, $P524
    new $P546, 'ResizablePMCArray'
    new $P547, 'ResizablePMCArray'
    push $P546, $P547
    new $P548, 'ResizablePMCArray'
    box $P549, 2
    push $P548, $P549
    box $P550, 114
    push $P548, $P550
    box $P551, 2
    push $P548, $P551
    push $P546, $P548
    new $P552, 'ResizablePMCArray'
    box $P553, 2
    push $P552, $P553
    box $P554, 117
    push $P552, $P554
    box $P555, 3
    push $P552, $P555
    push $P546, $P552
    new $P556, 'ResizablePMCArray'
    box $P557, 2
    push $P556, $P557
    box $P558, 108
    push $P556, $P558
    box $P559, 4
    push $P556, $P559
    push $P546, $P556
    new $P560, 'ResizablePMCArray'
    box $P561, 2
    push $P560, $P561
    box $P562, 101
    push $P560, $P562
    box $P563, 0
    push $P560, $P563
    push $P546, $P560
    push $P501, $P546
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346233478.067_alt_nfa__33_1346233482.625" :subid("cuid_memo_206_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 114
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 101
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 103
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 101
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 120
    push $P520, $P522
    box $P523, 0
    push $P520, $P523
    push $P502, $P520
    push $P501, $P502
    new $P524, 'ResizablePMCArray'
    new $P525, 'ResizablePMCArray'
    push $P524, $P525
    new $P526, 'ResizablePMCArray'
    box $P527, 2
    push $P526, $P527
    box $P528, 116
    push $P526, $P528
    box $P529, 2
    push $P526, $P529
    push $P524, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 2
    push $P530, $P531
    box $P532, 111
    push $P530, $P532
    box $P533, 3
    push $P530, $P533
    push $P524, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 107
    push $P534, $P536
    box $P537, 4
    push $P534, $P537
    push $P524, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 2
    push $P538, $P539
    box $P540, 101
    push $P538, $P540
    box $P541, 5
    push $P538, $P541
    push $P524, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 110
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P524, $P542
    push $P501, $P524
    new $P546, 'ResizablePMCArray'
    new $P547, 'ResizablePMCArray'
    push $P546, $P547
    new $P548, 'ResizablePMCArray'
    box $P549, 2
    push $P548, $P549
    box $P550, 114
    push $P548, $P550
    box $P551, 2
    push $P548, $P551
    push $P546, $P548
    new $P552, 'ResizablePMCArray'
    box $P553, 2
    push $P552, $P553
    box $P554, 117
    push $P552, $P554
    box $P555, 3
    push $P552, $P555
    push $P546, $P552
    new $P556, 'ResizablePMCArray'
    box $P557, 2
    push $P556, $P557
    box $P558, 108
    push $P556, $P558
    box $P559, 4
    push $P556, $P559
    push $P546, $P556
    new $P560, 'ResizablePMCArray'
    box $P561, 2
    push $P560, $P561
    box $P562, 101
    push $P560, $P562
    box $P563, 0
    push $P560, $P563
    push $P546, $P560
    push $P501, $P546
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346233478.067_alt_nfa__31_1346233482.621" :subid("cuid_memo_207_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 112
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 2
    push $P508, $P509
    box $P510, 114
    push $P508, $P510
    box $P511, 3
    push $P508, $P511
    push $P502, $P508
    new $P512, 'ResizablePMCArray'
    box $P513, 2
    push $P512, $P513
    box $P514, 111
    push $P512, $P514
    box $P515, 4
    push $P512, $P515
    push $P502, $P512
    new $P516, 'ResizablePMCArray'
    box $P517, 2
    push $P516, $P517
    box $P518, 116
    push $P516, $P518
    box $P519, 5
    push $P516, $P519
    push $P502, $P516
    new $P520, 'ResizablePMCArray'
    box $P521, 2
    push $P520, $P521
    box $P522, 111
    push $P520, $P522
    box $P523, 6
    push $P520, $P523
    push $P502, $P520
    new $P524, 'ResizablePMCArray'
    box $P525, 0
    push $P524, $P525
    box $P526, 0
    push $P524, $P526
    box $P527, 0
    push $P524, $P527
    push $P502, $P524
    push $P501, $P502
    new $P528, 'ResizablePMCArray'
    new $P529, 'ResizablePMCArray'
    push $P528, $P529
    new $P530, 'ResizablePMCArray'
    box $P531, 0
    push $P530, $P531
    box $P532, 0
    push $P530, $P532
    box $P533, 0
    push $P530, $P533
    box $P534, 0
    push $P530, $P534
    box $P535, 0
    push $P530, $P535
    box $P536, 0
    push $P530, $P536
    push $P528, $P530
    push $P501, $P528
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1346233478.067") :anon :lex :outer("cuid_136_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1107

    find_dynamic_lex $P501, "%*RX"
    unless_null $P501, fallback2187
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["%RX"]
    unless_null $P502, fallback2188
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    new $P507, 'Hash'
    set $P505["%RX"], $P507
    set $P502, $P507
  fallback2188:
    unless_null $P502, vivi_8272189
    die "Contextual %*RX not found"
    box $P508, "Contextual %*RX not found"
    set $P502, $P508
  vivi_8272189:
    set $P501, $P502
  fallback2187:
    find_lex $P510, "$/"
    set $P509, $P510["sym"]
    unless_null $P509, fallback2190
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P511
  fallback2190:
    set $S501, $P509
    iseq $I501, $S501, "rule"
    box $P512, $I501
    set $P501["s"], $P512
    find_dynamic_lex $P513, "%*RX"
    unless_null $P513, fallback2191
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    set $P514, $P515["%RX"]
    unless_null $P514, fallback2192
    get_hll_global $P518, "GLOBAL"
    get_who $P517, $P518
    new $P519, 'Hash'
    set $P517["%RX"], $P519
    set $P514, $P519
  fallback2192:
    unless_null $P514, vivi_8282193
    die "Contextual %*RX not found"
    box $P520, "Contextual %*RX not found"
    set $P514, $P520
  vivi_8282193:
    set $P513, $P514
  fallback2191:
    find_lex $P522, "$/"
    set $P521, $P522["sym"]
    unless_null $P521, fallback2196
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P523
  fallback2196:
    set $S502, $P521
    iseq $I502, $S502, "token"
    set $I504, $I502
    if $I502 goto unless829_end2195 
    find_lex $P525, "$/"
    set $P524, $P525["sym"]
    unless_null $P524, fallback2197
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P526
  fallback2197:
    set $S503, $P524
    iseq $I503, $S503, "rule"
    set $I504, $I503
  unless829_end2195:
    box $P527, $I504
    set $P513["r"], $P527
    find_dynamic_lex $P528, "%*RX"
    unless_null $P528, fallback2198
    get_hll_global $P531, "GLOBAL"
    get_who $P530, $P531
    set $P529, $P530["%RX"]
    unless_null $P529, fallback2199
    get_hll_global $P533, "GLOBAL"
    get_who $P532, $P533
    new $P534, 'Hash'
    set $P532["%RX"], $P534
    set $P529, $P534
  fallback2199:
    unless_null $P529, vivi_8302200
    die "Contextual %*RX not found"
    box $P535, "Contextual %*RX not found"
    set $P529, $P535
  vivi_8302200:
    set $P528, $P529
  fallback2198:
.annotate 'line', 1110
    find_lex $P537, "$/"
    set $P536, $P537["deflongname"]
    unless_null $P536, fallback2201
    nqp_get_sc_object $P538, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P536, $P538
  fallback2201:
    $P539 = $P536."ast"()
    set $P528["name"], $P539
    .return ($P539) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_137_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1116
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx834_tgt
    .local int rx834_pos
    .local int rx834_off
    .local int rx834_eos
    .local int rx834_rep
    .local pmc rx834_cur
    .local pmc rx834_curclass
    .local pmc rx834_bstack
    .local pmc rx834_cstack
    (rx834_cur, rx834_tgt, rx834_pos, rx834_curclass, rx834_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx834_cur
    length rx834_eos, rx834_tgt
    eq $I19, 1, rx834_restart2207
    gt rx834_pos, rx834_eos, rx834_fail2208
    repr_get_attr_int $I11, self, rx834_curclass, "$!from"
    ne $I11, -1, rxscan835_done2214
    goto rxscan835_scan2213
  rxscan835_loop2212:
    inc rx834_pos
    gt rx834_pos, rx834_eos, rx834_fail2208
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!from", rx834_pos
  rxscan835_scan2213:
    nqp_rxmark rx834_bstack, rxscan835_loop2212, rx834_pos, 0
  rxscan835_done2214:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail2208
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:".", rx834_fail2208
    add rx834_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt836_02216
    nqp_push_label $P11, alt836_12218
    nqp_rxmark rx834_bstack, alt836_end2215, -1, 0
    rx834_cur."!alt"(rx834_pos, "alt_nfa__34_1346233482.672", $P11)
    goto rx834_fail2208
  alt836_02216:
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    nqp_rxmark rx834_bstack, rxsubrule837_pass2217, -1, 0
  rxsubrule837_pass2217:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt836_end2215
  alt836_12218:
    ge rx834_pos, rx834_eos, rx834_fail2208
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx834_fail2208
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."quote"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    nqp_rxmark rx834_bstack, rxsubrule838_pass2219, -1, 0
  rxsubrule838_pass2219:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
  alt839_02221:
    nqp_rxmark rx834_bstack, alt839_12222, rx834_pos, 0
    ge rx834_pos, rx834_eos, rx834_fail2208
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx834_fail2208
    goto alt839_end2220
  alt839_12222:
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
  alt839_end2220:
    goto alt836_end2215
  alt836_end2215:
    nqp_rxcommit rx834_bstack, alt836_end2215
    nqp_rxmark rx834_bstack, rxquantr841_done2225, rx834_pos, 0
  rxquantr841_loop2224:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt842_02227
    nqp_push_label $P11, alt842_12229
    nqp_rxmark rx834_bstack, alt842_end2226, -1, 0
    rx834_cur."!alt"(rx834_pos, "alt_nfa__35_1346233482.673", $P11)
    goto rx834_fail2208
  alt842_02227:
    ge rx834_pos, rx834_eos, rx834_fail2208
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx834_fail2208
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."args"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    nqp_rxmark rx834_bstack, rxsubrule843_pass2228, -1, 0
  rxsubrule843_pass2228:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt842_end2226
  alt842_12229:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail2208
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:":", rx834_fail2208
    add rx834_pos, 1
    ge rx834_pos, rx834_eos, rx834_fail2208
    is_cclass $I11, .CCLASS_WHITESPACE, rx834_tgt, rx834_pos
    unless $I11, rx834_fail2208
    add rx834_pos, 1
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    nqp_rxmark rx834_bstack, rxsubrule844_pass2230, -1, 0
  rxsubrule844_pass2230:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt842_end2226
  alt842_end2226:
    nqp_rxpeek $I19, rx834_bstack, rxquantr841_done2225
    inc $I19
    inc $I19
    set rx834_rep, rx834_bstack[$I19]
    nqp_rxcommit rx834_bstack, rxquantr841_done2225
    inc rx834_rep
  rxquantr841_done2225:
    rx834_cur."!cursor_pass"(rx834_pos, "dotty", 'backtrack'=>1)
    .return (rx834_cur)
  rx834_restart2207:
    repr_get_attr_obj rx834_cstack, rx834_cur, rx834_curclass, "$!cstack"
  rx834_fail2208:
    unless rx834_bstack, rx834_done2206
    pop $I19, rx834_bstack
    if_null rx834_cstack, rx834_cstack_done2211
    unless rx834_cstack, rx834_cstack_done2211
    dec $I19
    set $P11, rx834_cstack[$I19]
  rx834_cstack_done2211:
    pop rx834_rep, rx834_bstack
    pop rx834_pos, rx834_bstack
    pop $I19, rx834_bstack
    lt rx834_pos, -1, rx834_done2206
    lt rx834_pos, 0, rx834_fail2208
    eq $I19, 0, rx834_fail2208
    nqp_islist $I20, rx834_cstack
    unless $I20, rx834_jump2209
    elements $I18, rx834_bstack
    le $I18, 0, rx834_cut2210
    dec $I18
    set $I18, rx834_bstack[$I18]
  rx834_cut2210:
    assign rx834_cstack, $I18
  rx834_jump2209:
    jump $I19
  rx834_done2206:
    rx834_cur."!cursor_fail"()
    .return (rx834_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346233478.067_caps" :subid("cuid_memo_208_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["longname"], $P502
    box $P503, 0
    set $P501["deflongname"], $P503
    box $P504, 0
    set $P501["quote"], $P504
    box $P505, 2
    set $P501["args"], $P505
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346233478.067_nfa" :subid("cuid_memo_209_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 46
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "deflongname"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    box $P511, 6
    push $P507, $P511
    box $P512, "'\""
    push $P507, $P512
    box $P513, 4
    push $P507, $P513
    push $P501, $P507
    new $P514, 'ResizablePMCArray'
    box $P515, 6
    push $P514, $P515
    box $P516, "("
    push $P514, $P516
    box $P517, 5
    push $P514, $P517
    box $P518, 2
    push $P514, $P518
    box $P519, 58
    push $P514, $P519
    box $P520, 6
    push $P514, $P520
    box $P521, 1
    push $P514, $P521
    box $P522, 0
    push $P514, $P522
    box $P523, 0
    push $P514, $P523
    push $P501, $P514
    new $P524, 'ResizablePMCArray'
    box $P525, 0
    push $P524, $P525
    box $P526, 0
    push $P524, $P526
    box $P527, 0
    push $P524, $P527
    push $P501, $P524
    new $P528, 'ResizablePMCArray'
    box $P529, 0
    push $P528, $P529
    box $P530, 0
    push $P528, $P530
    box $P531, 0
    push $P528, $P531
    push $P501, $P528
    new $P532, 'ResizablePMCArray'
    box $P533, 4
    push $P532, $P533
    box $P534, 32
    push $P532, $P534
    box $P535, 7
    push $P532, $P535
    push $P501, $P532
    new $P536, 'ResizablePMCArray'
    box $P537, 8
    push $P536, $P537
    box $P538, "arglist"
    push $P536, $P538
    box $P539, 0
    push $P536, $P539
    push $P501, $P536
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346233478.067_alt_nfa__34_1346233482.672" :subid("cuid_memo_210_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "deflongname"
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 6
    push $P510, $P511
    box $P512, "'\""
    push $P510, $P512
    box $P513, 2
    push $P510, $P513
    push $P508, $P510
    new $P514, 'ResizablePMCArray'
    box $P515, 0
    push $P514, $P515
    box $P516, 0
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    push $P508, $P514
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346233478.067_alt_nfa__35_1346233482.673" :subid("cuid_memo_211_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 6
    push $P504, $P505
    box $P506, "("
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 0
    push $P508, $P509
    box $P510, 0
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 58
    push $P514, $P516
    box $P517, 2
    push $P514, $P517
    push $P512, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 4
    push $P518, $P519
    box $P520, 32
    push $P518, $P520
    box $P521, 3
    push $P518, $P521
    push $P512, $P518
    new $P522, 'ResizablePMCArray'
    box $P523, 8
    push $P522, $P523
    box $P524, "arglist"
    push $P522, $P524
    box $P525, 0
    push $P522, $P525
    push $P512, $P522
    push $P501, $P512
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_138_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1129
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx845_tgt
    .local int rx845_pos
    .local int rx845_off
    .local int rx845_eos
    .local int rx845_rep
    .local pmc rx845_cur
    .local pmc rx845_curclass
    .local pmc rx845_bstack
    .local pmc rx845_cstack
    (rx845_cur, rx845_tgt, rx845_pos, rx845_curclass, rx845_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx845_cur
    length rx845_eos, rx845_tgt
    eq $I19, 1, rx845_restart2233
    gt rx845_pos, rx845_eos, rx845_fail2234
    repr_get_attr_int $I11, self, rx845_curclass, "$!from"
    ne $I11, -1, rxscan846_done2240
    goto rxscan846_scan2239
  rxscan846_loop2238:
    inc rx845_pos
    gt rx845_pos, rx845_eos, rx845_fail2234
    repr_bind_attr_int rx845_cur, rx845_curclass, "$!from", rx845_pos
  rxscan846_scan2239:
    nqp_rxmark rx845_bstack, rxscan846_loop2238, rx845_pos, 0
  rxscan846_done2240:
    nqp_rxmark rx845_bstack, rxcap847_fail2242, rx845_pos, 0
    add $I11, rx845_pos, 4
    gt $I11, rx845_eos, rx845_fail2234
    substr $S10, rx845_tgt, rx845_pos, 4
    ne $S10, ucs4:"self", rx845_fail2234
    add rx845_pos, 4
    nqp_rxpeek $I19, rx845_bstack, rxcap847_fail2242
    inc $I19
    set $I11, rx845_bstack[$I19]
    $P11 = rx845_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx845_pos)
    rx845_cstack = rx845_cur."!cursor_capture"($P11, "sym")
    goto rxcap847_done2241
  rxcap847_fail2242:
    goto rx845_fail2234
  rxcap847_done2241:
    le rx845_pos, 0, rx845_fail2234
    is_cclass $I11, .CCLASS_WORD, rx845_tgt, rx845_pos
    if $I11, rx845_fail2234
    sub $I11, rx845_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx845_tgt, $I11
    unless $I11, rx845_fail2234
    rx845_cur."!cursor_pass"(rx845_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx845_cur)
  rx845_restart2233:
    repr_get_attr_obj rx845_cstack, rx845_cur, rx845_curclass, "$!cstack"
  rx845_fail2234:
    unless rx845_bstack, rx845_done2232
    pop $I19, rx845_bstack
    if_null rx845_cstack, rx845_cstack_done2237
    unless rx845_cstack, rx845_cstack_done2237
    dec $I19
    set $P11, rx845_cstack[$I19]
  rx845_cstack_done2237:
    pop rx845_rep, rx845_bstack
    pop rx845_pos, rx845_bstack
    pop $I19, rx845_bstack
    lt rx845_pos, -1, rx845_done2232
    lt rx845_pos, 0, rx845_fail2234
    eq $I19, 0, rx845_fail2234
    nqp_islist $I20, rx845_cstack
    unless $I20, rx845_jump2235
    elements $I18, rx845_bstack
    le $I18, 0, rx845_cut2236
    dec $I18
    set $I18, rx845_bstack[$I18]
  rx845_cut2236:
    assign rx845_cstack, $I18
  rx845_jump2235:
    jump $I19
  rx845_done2232:
    rx845_cur."!cursor_fail"()
    .return (rx845_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1346233478.067_caps" :subid("cuid_memo_212_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1346233478.067_nfa" :subid("cuid_memo_213_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 115
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 108
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 102
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 1
    push $P519, $P520
    box $P521, 0
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_139_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1131
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx849_tgt
    .local int rx849_pos
    .local int rx849_off
    .local int rx849_eos
    .local int rx849_rep
    .local pmc rx849_cur
    .local pmc rx849_curclass
    .local pmc rx849_bstack
    .local pmc rx849_cstack
    (rx849_cur, rx849_tgt, rx849_pos, rx849_curclass, rx849_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx849_cur
    length rx849_eos, rx849_tgt
    eq $I19, 1, rx849_restart2246
    gt rx849_pos, rx849_eos, rx849_fail2247
    repr_get_attr_int $I11, self, rx849_curclass, "$!from"
    ne $I11, -1, rxscan850_done2253
    goto rxscan850_scan2252
  rxscan850_loop2251:
    inc rx849_pos
    gt rx849_pos, rx849_eos, rx849_fail2247
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!from", rx849_pos
  rxscan850_scan2252:
    nqp_rxmark rx849_bstack, rxscan850_loop2251, rx849_pos, 0
  rxscan850_done2253:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2247
    nqp_rxmark rx849_bstack, rxsubrule851_pass2254, -1, 0
  rxsubrule851_pass2254:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    ge rx849_pos, rx849_eos, rx849_fail2247
    substr $S11, rx849_tgt, rx849_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx849_fail2247
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."args"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2247
    nqp_rxmark rx849_bstack, rxsubrule852_pass2255, -1, 0
  rxsubrule852_pass2255:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    rx849_cur."!cursor_pass"(rx849_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx849_cur)
  rx849_restart2246:
    repr_get_attr_obj rx849_cstack, rx849_cur, rx849_curclass, "$!cstack"
  rx849_fail2247:
    unless rx849_bstack, rx849_done2245
    pop $I19, rx849_bstack
    if_null rx849_cstack, rx849_cstack_done2250
    unless rx849_cstack, rx849_cstack_done2250
    dec $I19
    set $P11, rx849_cstack[$I19]
  rx849_cstack_done2250:
    pop rx849_rep, rx849_bstack
    pop rx849_pos, rx849_bstack
    pop $I19, rx849_bstack
    lt rx849_pos, -1, rx849_done2245
    lt rx849_pos, 0, rx849_fail2247
    eq $I19, 0, rx849_fail2247
    nqp_islist $I20, rx849_cstack
    unless $I20, rx849_jump2248
    elements $I18, rx849_bstack
    le $I18, 0, rx849_cut2249
    dec $I18
    set $I18, rx849_bstack[$I18]
  rx849_cut2249:
    assign rx849_cstack, $I18
  rx849_jump2248:
    jump $I19
  rx849_done2245:
    rx849_cur."!cursor_fail"()
    .return (rx849_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1346233478.067_caps" :subid("cuid_memo_214_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["deflongname"], $P502
    box $P503, 0
    set $P501["args"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1346233478.067_nfa" :subid("cuid_memo_215_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "deflongname"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 6
    push $P507, $P508
    box $P509, "("
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 0
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_140_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx853_tgt
    .local int rx853_pos
    .local int rx853_off
    .local int rx853_eos
    .local int rx853_rep
    .local pmc rx853_cur
    .local pmc rx853_curclass
    .local pmc rx853_bstack
    .local pmc rx853_cstack
    (rx853_cur, rx853_tgt, rx853_pos, rx853_curclass, rx853_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx853_cur
    length rx853_eos, rx853_tgt
    eq $I19, 1, rx853_restart2258
    gt rx853_pos, rx853_eos, rx853_fail2259
    repr_get_attr_int $I11, self, rx853_curclass, "$!from"
    ne $I11, -1, rxscan854_done2265
    goto rxscan854_scan2264
  rxscan854_loop2263:
    inc rx853_pos
    gt rx853_pos, rx853_eos, rx853_fail2259
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!from", rx853_pos
  rxscan854_scan2264:
    nqp_rxmark rx853_bstack, rxscan854_loop2263, rx853_pos, 0
  rxscan854_done2265:
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."name"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2259
    nqp_rxmark rx853_bstack, rxsubrule855_pass2266, -1, 0
  rxsubrule855_pass2266:
    rx853_cstack = rx853_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
    nqp_rxmark rx853_bstack, rxquantr856_done2268, rx853_pos, 0
  rxquantr856_loop2267:
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."args"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2259
    goto rxsubrule857_pass2269
  rxsubrule857_back2270:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2259
  rxsubrule857_pass2269:
    rx853_cstack = rx853_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule857_back2270
    push rx853_bstack, $I11
    push rx853_bstack, 0
    push rx853_bstack, rx853_pos
    elements $I11, rx853_cstack
    push rx853_bstack, $I11
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
    nqp_rxpeek $I19, rx853_bstack, rxquantr856_done2268
    inc $I19
    inc $I19
    set rx853_rep, rx853_bstack[$I19]
    nqp_rxcommit rx853_bstack, rxquantr856_done2268
    inc rx853_rep
  rxquantr856_done2268:
    rx853_cur."!cursor_pass"(rx853_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx853_cur)
  rx853_restart2258:
    repr_get_attr_obj rx853_cstack, rx853_cur, rx853_curclass, "$!cstack"
  rx853_fail2259:
    unless rx853_bstack, rx853_done2257
    pop $I19, rx853_bstack
    if_null rx853_cstack, rx853_cstack_done2262
    unless rx853_cstack, rx853_cstack_done2262
    dec $I19
    set $P11, rx853_cstack[$I19]
  rx853_cstack_done2262:
    pop rx853_rep, rx853_bstack
    pop rx853_pos, rx853_bstack
    pop $I19, rx853_bstack
    lt rx853_pos, -1, rx853_done2257
    lt rx853_pos, 0, rx853_fail2259
    eq $I19, 0, rx853_fail2259
    nqp_islist $I20, rx853_cstack
    unless $I20, rx853_jump2260
    elements $I18, rx853_bstack
    le $I18, 0, rx853_cut2261
    dec $I18
    set $I18, rx853_bstack[$I18]
  rx853_cut2261:
    assign rx853_cstack, $I18
  rx853_jump2260:
    jump $I19
  rx853_done2257:
    rx853_cur."!cursor_fail"()
    .return (rx853_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1346233478.067_caps" :subid("cuid_memo_216_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["name"], $P502
    box $P503, 2
    set $P501["args"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1346233478.067_nfa" :subid("cuid_memo_217_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "name"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "args"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    box $P511, 1
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 0
    push $P507, $P513
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_141_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1139
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx858_tgt
    .local int rx858_pos
    .local int rx858_off
    .local int rx858_eos
    .local int rx858_rep
    .local pmc rx858_cur
    .local pmc rx858_curclass
    .local pmc rx858_bstack
    .local pmc rx858_cstack
    (rx858_cur, rx858_tgt, rx858_pos, rx858_curclass, rx858_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx858_cur
    length rx858_eos, rx858_tgt
    eq $I19, 1, rx858_restart2273
    gt rx858_pos, rx858_eos, rx858_fail2274
    repr_get_attr_int $I11, self, rx858_curclass, "$!from"
    ne $I11, -1, rxscan859_done2280
    goto rxscan859_scan2279
  rxscan859_loop2278:
    inc rx858_pos
    gt rx858_pos, rx858_eos, rx858_fail2274
    repr_bind_attr_int rx858_cur, rx858_curclass, "$!from", rx858_pos
  rxscan859_scan2279:
    nqp_rxmark rx858_bstack, rxscan859_loop2278, rx858_pos, 0
  rxscan859_done2280:
    add $I11, rx858_pos, 5
    gt $I11, rx858_eos, rx858_fail2274
    substr $S10, rx858_tgt, rx858_pos, 5
    ne $S10, ucs4:"pir::", rx858_fail2274
    add rx858_pos, 5
    nqp_rxmark rx858_bstack, rxcap860_fail2282, rx858_pos, 0
    nqp_rxmark rx858_bstack, rxquantr861_done2284, -1, 0
  rxquantr861_loop2283:
    ge rx858_pos, rx858_eos, rx858_fail2274
    is_cclass $I11, .CCLASS_WORD, rx858_tgt, rx858_pos
    unless $I11, rx858_fail2274
    add rx858_pos, 1
    nqp_rxpeek $I19, rx858_bstack, rxquantr861_done2284
    inc $I19
    inc $I19
    set rx858_rep, rx858_bstack[$I19]
    nqp_rxcommit rx858_bstack, rxquantr861_done2284
    inc rx858_rep
    nqp_rxmark rx858_bstack, rxquantr861_done2284, rx858_pos, rx858_rep
    goto rxquantr861_loop2283
  rxquantr861_done2284:
    nqp_rxpeek $I19, rx858_bstack, rxcap860_fail2282
    inc $I19
    set $I11, rx858_bstack[$I19]
    $P11 = rx858_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx858_pos)
    rx858_cstack = rx858_cur."!cursor_capture"($P11, "op")
    goto rxcap860_done2281
  rxcap860_fail2282:
    goto rx858_fail2274
  rxcap860_done2281:
    nqp_rxmark rx858_bstack, rxquantr862_done2286, rx858_pos, 0
  rxquantr862_loop2285:
    repr_bind_attr_int rx858_cur, rx858_curclass, "$!pos", rx858_pos
    $P11 = rx858_cur."args"()
    repr_get_attr_int $I11, $P11, rx858_curclass, "$!pos"
    lt $I11, 0, rx858_fail2274
    goto rxsubrule863_pass2287
  rxsubrule863_back2288:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx858_curclass, "$!pos"
    lt $I11, 0, rx858_fail2274
  rxsubrule863_pass2287:
    rx858_cstack = rx858_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule863_back2288
    push rx858_bstack, $I11
    push rx858_bstack, 0
    push rx858_bstack, rx858_pos
    elements $I11, rx858_cstack
    push rx858_bstack, $I11
    repr_get_attr_int rx858_pos, $P11, rx858_curclass, "$!pos"
    nqp_rxpeek $I19, rx858_bstack, rxquantr862_done2286
    inc $I19
    inc $I19
    set rx858_rep, rx858_bstack[$I19]
    nqp_rxcommit rx858_bstack, rxquantr862_done2286
    inc rx858_rep
  rxquantr862_done2286:
    rx858_cur."!cursor_pass"(rx858_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx858_cur)
  rx858_restart2273:
    repr_get_attr_obj rx858_cstack, rx858_cur, rx858_curclass, "$!cstack"
  rx858_fail2274:
    unless rx858_bstack, rx858_done2272
    pop $I19, rx858_bstack
    if_null rx858_cstack, rx858_cstack_done2277
    unless rx858_cstack, rx858_cstack_done2277
    dec $I19
    set $P11, rx858_cstack[$I19]
  rx858_cstack_done2277:
    pop rx858_rep, rx858_bstack
    pop rx858_pos, rx858_bstack
    pop $I19, rx858_bstack
    lt rx858_pos, -1, rx858_done2272
    lt rx858_pos, 0, rx858_fail2274
    eq $I19, 0, rx858_fail2274
    nqp_islist $I20, rx858_cstack
    unless $I20, rx858_jump2275
    elements $I18, rx858_bstack
    le $I18, 0, rx858_cut2276
    dec $I18
    set $I18, rx858_bstack[$I18]
  rx858_cut2276:
    assign rx858_cstack, $I18
  rx858_jump2275:
    jump $I19
  rx858_done2272:
    rx858_cur."!cursor_fail"()
    .return (rx858_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1346233478.067_caps" :subid("cuid_memo_218_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["op"], $P502
    box $P503, 2
    set $P501["args"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1346233478.067_nfa" :subid("cuid_memo_219_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 112
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 105
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 114
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 58
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 58
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 1
    push $P523, $P524
    box $P525, 0
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 4
    push $P527, $P528
    box $P529, 8192
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 1
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 7
    push $P531, $P534
    box $P535, 1
    push $P531, $P535
    box $P536, 0
    push $P531, $P536
    box $P537, 9
    push $P531, $P537
    box $P538, 8
    push $P531, $P538
    box $P539, "args"
    push $P531, $P539
    box $P540, 0
    push $P531, $P540
    box $P541, 1
    push $P531, $P541
    box $P542, 0
    push $P531, $P542
    box $P543, 0
    push $P531, $P543
    push $P501, $P531
    new $P544, 'ResizablePMCArray'
    push $P501, $P544
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_142_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1143
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx864_tgt
    .local int rx864_pos
    .local int rx864_off
    .local int rx864_eos
    .local int rx864_rep
    .local pmc rx864_cur
    .local pmc rx864_curclass
    .local pmc rx864_bstack
    .local pmc rx864_cstack
    (rx864_cur, rx864_tgt, rx864_pos, rx864_curclass, rx864_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx864_cur
    length rx864_eos, rx864_tgt
    eq $I19, 1, rx864_restart2291
    gt rx864_pos, rx864_eos, rx864_fail2292
    repr_get_attr_int $I11, self, rx864_curclass, "$!from"
    ne $I11, -1, rxscan865_done2298
    goto rxscan865_scan2297
  rxscan865_loop2296:
    inc rx864_pos
    gt rx864_pos, rx864_eos, rx864_fail2292
    repr_bind_attr_int rx864_cur, rx864_curclass, "$!from", rx864_pos
  rxscan865_scan2297:
    nqp_rxmark rx864_bstack, rxscan865_loop2296, rx864_pos, 0
  rxscan865_done2298:
    add $I11, rx864_pos, 12
    gt $I11, rx864_eos, rx864_fail2292
    substr $S10, rx864_tgt, rx864_pos, 12
    ne $S10, ucs4:"pir::const::", rx864_fail2292
    add rx864_pos, 12
    nqp_rxmark rx864_bstack, rxcap866_fail2300, rx864_pos, 0
    nqp_rxmark rx864_bstack, rxquantr867_done2302, -1, 0
  rxquantr867_loop2301:
    ge rx864_pos, rx864_eos, rx864_fail2292
    is_cclass $I11, .CCLASS_WORD, rx864_tgt, rx864_pos
    unless $I11, rx864_fail2292
    add rx864_pos, 1
    nqp_rxpeek $I19, rx864_bstack, rxquantr867_done2302
    inc $I19
    inc $I19
    set rx864_rep, rx864_bstack[$I19]
    nqp_rxcommit rx864_bstack, rxquantr867_done2302
    inc rx864_rep
    nqp_rxmark rx864_bstack, rxquantr867_done2302, rx864_pos, rx864_rep
    goto rxquantr867_loop2301
  rxquantr867_done2302:
    nqp_rxpeek $I19, rx864_bstack, rxcap866_fail2300
    inc $I19
    set $I11, rx864_bstack[$I19]
    $P11 = rx864_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx864_pos)
    rx864_cstack = rx864_cur."!cursor_capture"($P11, "const")
    goto rxcap866_done2299
  rxcap866_fail2300:
    goto rx864_fail2292
  rxcap866_done2299:
    rx864_cur."!cursor_pass"(rx864_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx864_cur)
  rx864_restart2291:
    repr_get_attr_obj rx864_cstack, rx864_cur, rx864_curclass, "$!cstack"
  rx864_fail2292:
    unless rx864_bstack, rx864_done2290
    pop $I19, rx864_bstack
    if_null rx864_cstack, rx864_cstack_done2295
    unless rx864_cstack, rx864_cstack_done2295
    dec $I19
    set $P11, rx864_cstack[$I19]
  rx864_cstack_done2295:
    pop rx864_rep, rx864_bstack
    pop rx864_pos, rx864_bstack
    pop $I19, rx864_bstack
    lt rx864_pos, -1, rx864_done2290
    lt rx864_pos, 0, rx864_fail2292
    eq $I19, 0, rx864_fail2292
    nqp_islist $I20, rx864_cstack
    unless $I20, rx864_jump2293
    elements $I18, rx864_bstack
    le $I18, 0, rx864_cut2294
    dec $I18
    set $I18, rx864_bstack[$I18]
  rx864_cut2294:
    assign rx864_cstack, $I18
  rx864_jump2293:
    jump $I19
  rx864_done2290:
    rx864_cur."!cursor_fail"()
    .return (rx864_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1346233478.067_caps" :subid("cuid_memo_220_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["const"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1346233478.067_nfa" :subid("cuid_memo_221_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 112
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 105
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 114
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 58
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 58
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 99
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 2
    push $P527, $P528
    box $P529, 111
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 2
    push $P531, $P532
    box $P533, 110
    push $P531, $P533
    box $P534, 9
    push $P531, $P534
    push $P501, $P531
    new $P535, 'ResizablePMCArray'
    box $P536, 2
    push $P535, $P536
    box $P537, 115
    push $P535, $P537
    box $P538, 10
    push $P535, $P538
    push $P501, $P535
    new $P539, 'ResizablePMCArray'
    box $P540, 2
    push $P539, $P540
    box $P541, 116
    push $P539, $P541
    box $P542, 11
    push $P539, $P542
    push $P501, $P539
    new $P543, 'ResizablePMCArray'
    box $P544, 2
    push $P543, $P544
    box $P545, 58
    push $P543, $P545
    box $P546, 12
    push $P543, $P546
    push $P501, $P543
    new $P547, 'ResizablePMCArray'
    box $P548, 2
    push $P547, $P548
    box $P549, 58
    push $P547, $P549
    box $P550, 13
    push $P547, $P550
    push $P501, $P547
    new $P551, 'ResizablePMCArray'
    box $P552, 1
    push $P551, $P552
    box $P553, 0
    push $P551, $P553
    box $P554, 14
    push $P551, $P554
    push $P501, $P551
    new $P555, 'ResizablePMCArray'
    box $P556, 4
    push $P555, $P556
    box $P557, 8192
    push $P555, $P557
    box $P558, 15
    push $P555, $P558
    push $P501, $P555
    new $P559, 'ResizablePMCArray'
    box $P560, 1
    push $P559, $P560
    box $P561, 0
    push $P559, $P561
    box $P562, 14
    push $P559, $P562
    box $P563, 1
    push $P559, $P563
    box $P564, 0
    push $P559, $P564
    box $P565, 0
    push $P559, $P565
    push $P501, $P559
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_143_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1147
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx868_tgt
    .local int rx868_pos
    .local int rx868_off
    .local int rx868_eos
    .local int rx868_rep
    .local pmc rx868_cur
    .local pmc rx868_curclass
    .local pmc rx868_bstack
    .local pmc rx868_cstack
    (rx868_cur, rx868_tgt, rx868_pos, rx868_curclass, rx868_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx868_cur
    length rx868_eos, rx868_tgt
    eq $I19, 1, rx868_restart2305
    gt rx868_pos, rx868_eos, rx868_fail2306
    repr_get_attr_int $I11, self, rx868_curclass, "$!from"
    ne $I11, -1, rxscan869_done2312
    goto rxscan869_scan2311
  rxscan869_loop2310:
    inc rx868_pos
    gt rx868_pos, rx868_eos, rx868_fail2306
    repr_bind_attr_int rx868_cur, rx868_curclass, "$!from", rx868_pos
  rxscan869_scan2311:
    nqp_rxmark rx868_bstack, rxscan869_loop2310, rx868_pos, 0
  rxscan869_done2312:
    add $I11, rx868_pos, 5
    gt $I11, rx868_eos, rx868_fail2306
    substr $S10, rx868_tgt, rx868_pos, 5
    ne $S10, ucs4:"nqp::", rx868_fail2306
    add rx868_pos, 5
    nqp_rxmark rx868_bstack, rxcap870_fail2314, rx868_pos, 0
    nqp_rxmark rx868_bstack, rxquantr871_done2316, -1, 0
  rxquantr871_loop2315:
    ge rx868_pos, rx868_eos, rx868_fail2306
    is_cclass $I11, .CCLASS_WORD, rx868_tgt, rx868_pos
    unless $I11, rx868_fail2306
    add rx868_pos, 1
    nqp_rxpeek $I19, rx868_bstack, rxquantr871_done2316
    inc $I19
    inc $I19
    set rx868_rep, rx868_bstack[$I19]
    nqp_rxcommit rx868_bstack, rxquantr871_done2316
    inc rx868_rep
    nqp_rxmark rx868_bstack, rxquantr871_done2316, rx868_pos, rx868_rep
    goto rxquantr871_loop2315
  rxquantr871_done2316:
    nqp_rxpeek $I19, rx868_bstack, rxcap870_fail2314
    inc $I19
    set $I11, rx868_bstack[$I19]
    $P11 = rx868_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx868_pos)
    rx868_cstack = rx868_cur."!cursor_capture"($P11, "op")
    goto rxcap870_done2313
  rxcap870_fail2314:
    goto rx868_fail2306
  rxcap870_done2313:
    nqp_rxmark rx868_bstack, rxquantr872_done2318, rx868_pos, 0
  rxquantr872_loop2317:
    repr_bind_attr_int rx868_cur, rx868_curclass, "$!pos", rx868_pos
    $P11 = rx868_cur."args"()
    repr_get_attr_int $I11, $P11, rx868_curclass, "$!pos"
    lt $I11, 0, rx868_fail2306
    goto rxsubrule873_pass2319
  rxsubrule873_back2320:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx868_curclass, "$!pos"
    lt $I11, 0, rx868_fail2306
  rxsubrule873_pass2319:
    rx868_cstack = rx868_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule873_back2320
    push rx868_bstack, $I11
    push rx868_bstack, 0
    push rx868_bstack, rx868_pos
    elements $I11, rx868_cstack
    push rx868_bstack, $I11
    repr_get_attr_int rx868_pos, $P11, rx868_curclass, "$!pos"
    nqp_rxpeek $I19, rx868_bstack, rxquantr872_done2318
    inc $I19
    inc $I19
    set rx868_rep, rx868_bstack[$I19]
    nqp_rxcommit rx868_bstack, rxquantr872_done2318
    inc rx868_rep
  rxquantr872_done2318:
    rx868_cur."!cursor_pass"(rx868_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx868_cur)
  rx868_restart2305:
    repr_get_attr_obj rx868_cstack, rx868_cur, rx868_curclass, "$!cstack"
  rx868_fail2306:
    unless rx868_bstack, rx868_done2304
    pop $I19, rx868_bstack
    if_null rx868_cstack, rx868_cstack_done2309
    unless rx868_cstack, rx868_cstack_done2309
    dec $I19
    set $P11, rx868_cstack[$I19]
  rx868_cstack_done2309:
    pop rx868_rep, rx868_bstack
    pop rx868_pos, rx868_bstack
    pop $I19, rx868_bstack
    lt rx868_pos, -1, rx868_done2304
    lt rx868_pos, 0, rx868_fail2306
    eq $I19, 0, rx868_fail2306
    nqp_islist $I20, rx868_cstack
    unless $I20, rx868_jump2307
    elements $I18, rx868_bstack
    le $I18, 0, rx868_cut2308
    dec $I18
    set $I18, rx868_bstack[$I18]
  rx868_cut2308:
    assign rx868_cstack, $I18
  rx868_jump2307:
    jump $I19
  rx868_done2304:
    rx868_cur."!cursor_fail"()
    .return (rx868_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1346233478.067_caps" :subid("cuid_memo_222_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["op"], $P502
    box $P503, 2
    set $P501["args"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1346233478.067_nfa" :subid("cuid_memo_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 110
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 113
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 112
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 58
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 58
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 1
    push $P523, $P524
    box $P525, 0
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 4
    push $P527, $P528
    box $P529, 8192
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 1
    push $P531, $P532
    box $P533, 0
    push $P531, $P533
    box $P534, 7
    push $P531, $P534
    box $P535, 1
    push $P531, $P535
    box $P536, 0
    push $P531, $P536
    box $P537, 9
    push $P531, $P537
    box $P538, 8
    push $P531, $P538
    box $P539, "args"
    push $P531, $P539
    box $P540, 0
    push $P531, $P540
    box $P541, 1
    push $P531, $P541
    box $P542, 0
    push $P531, $P542
    box $P543, 0
    push $P531, $P543
    push $P501, $P531
    new $P544, 'ResizablePMCArray'
    push $P501, $P544
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_144_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1151
    .param pmc _lex_param_0 
    .const 'Sub' $P504 = 'cuid_398_1346233478.067' 
    capture_lex $P504 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx874_tgt
    .local int rx874_pos
    .local int rx874_off
    .local int rx874_eos
    .local int rx874_rep
    .local pmc rx874_cur
    .local pmc rx874_curclass
    .local pmc rx874_bstack
    .local pmc rx874_cstack
    (rx874_cur, rx874_tgt, rx874_pos, rx874_curclass, rx874_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx874_cur
    length rx874_eos, rx874_tgt
    eq $I19, 1, rx874_restart2323
    gt rx874_pos, rx874_eos, rx874_fail2324
    repr_get_attr_int $I11, self, rx874_curclass, "$!from"
    ne $I11, -1, rxscan875_done2330
    goto rxscan875_scan2329
  rxscan875_loop2328:
    inc rx874_pos
    gt rx874_pos, rx874_eos, rx874_fail2324
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!from", rx874_pos
  rxscan875_scan2329:
    nqp_rxmark rx874_bstack, rxscan875_loop2328, rx874_pos, 0
  rxscan875_done2330:
    add $I11, rx874_pos, 3
    gt $I11, rx874_eos, rx874_fail2324
    substr $S10, rx874_tgt, rx874_pos, 3
    ne $S10, ucs4:"{*}", rx874_fail2324
    add rx874_pos, 3
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail2324
  alt876_02332:
    nqp_rxmark rx874_bstack, alt876_12336, rx874_pos, 0
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    store_lex unicode:"$\x{a2}", rx874_cur
    $P501 = $P101."MATCH"()
    set $P102, $P501
    .const 'Sub' $P502 = 'cuid_398_1346233478.067' 
    capture_lex $P502
    $P503 = $P502()
    unless $P503, rx874_fail2324
    goto alt876_end2331
  alt876_12336:
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail2324
    repr_get_attr_int rx874_pos, $P11, rx874_curclass, "$!pos"
  alt876_end2331:
    rx874_cur."!cursor_pass"(rx874_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx874_cur)
  rx874_restart2323:
    repr_get_attr_obj rx874_cstack, rx874_cur, rx874_curclass, "$!cstack"
  rx874_fail2324:
    unless rx874_bstack, rx874_done2322
    pop $I19, rx874_bstack
    if_null rx874_cstack, rx874_cstack_done2327
    unless rx874_cstack, rx874_cstack_done2327
    dec $I19
    set $P11, rx874_cstack[$I19]
  rx874_cstack_done2327:
    pop rx874_rep, rx874_bstack
    pop rx874_pos, rx874_bstack
    pop $I19, rx874_bstack
    lt rx874_pos, -1, rx874_done2322
    lt rx874_pos, 0, rx874_fail2324
    eq $I19, 0, rx874_fail2324
    nqp_islist $I20, rx874_cstack
    unless $I20, rx874_jump2325
    elements $I18, rx874_bstack
    le $I18, 0, rx874_cut2326
    dec $I18
    set $I18, rx874_bstack[$I18]
  rx874_cut2326:
    assign rx874_cstack, $I18
  rx874_jump2325:
    jump $I19
  rx874_done2322:
    rx874_cur."!cursor_fail"()
    .return (rx874_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1346233478.067_caps" :subid("cuid_memo_224_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1346233478.067_nfa" :subid("cuid_memo_225_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 123
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 42
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 125
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "ENDSTMT"
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 0
    push $P519, $P520
    box $P521, 0
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1346233478.067") :anon :lex :outer("cuid_144_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1153

    find_dynamic_lex $P501, "$*MULTINESS"
    unless_null $P501, fallback2333
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$MULTINESS"]
    unless_null $P502, fallback2334
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback2334:
    unless_null $P502, vivi_8772335
    die "Contextual $*MULTINESS not found"
    box $P506, "Contextual $*MULTINESS not found"
    set $P502, $P506
  vivi_8772335:
    set $P501, $P502
  fallback2333:
    set $S501, $P501
    iseq $I501, $S501, "proto"
    .return ($I501) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_145_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1156
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx879_tgt
    .local int rx879_pos
    .local int rx879_off
    .local int rx879_eos
    .local int rx879_rep
    .local pmc rx879_cur
    .local pmc rx879_curclass
    .local pmc rx879_bstack
    .local pmc rx879_cstack
    (rx879_cur, rx879_tgt, rx879_pos, rx879_curclass, rx879_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx879_cur
    length rx879_eos, rx879_tgt
    eq $I19, 1, rx879_restart2340
    gt rx879_pos, rx879_eos, rx879_fail2341
    repr_get_attr_int $I11, self, rx879_curclass, "$!from"
    ne $I11, -1, rxscan880_done2347
    goto rxscan880_scan2346
  rxscan880_loop2345:
    inc rx879_pos
    gt rx879_pos, rx879_eos, rx879_fail2341
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!from", rx879_pos
  rxscan880_scan2346:
    nqp_rxmark rx879_bstack, rxscan880_loop2345, rx879_pos, 0
  rxscan880_done2347:
    add $I11, rx879_pos, 1
    gt $I11, rx879_eos, rx879_fail2341
    substr $S10, rx879_tgt, rx879_pos, 1
    ne $S10, ucs4:"(", rx879_fail2341
    add rx879_pos, 1
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!pos", rx879_pos
    $P11 = rx879_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx879_curclass, "$!pos"
    lt $I11, 0, rx879_fail2341
    nqp_rxmark rx879_bstack, rxsubrule881_pass2348, -1, 0
  rxsubrule881_pass2348:
    rx879_cstack = rx879_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx879_pos, $P11, rx879_curclass, "$!pos"
    add $I11, rx879_pos, 1
    gt $I11, rx879_eos, rx879_fail2341
    substr $S10, rx879_tgt, rx879_pos, 1
    ne $S10, ucs4:")", rx879_fail2341
    add rx879_pos, 1
    rx879_cur."!cursor_pass"(rx879_pos, "args", 'backtrack'=>1)
    .return (rx879_cur)
  rx879_restart2340:
    repr_get_attr_obj rx879_cstack, rx879_cur, rx879_curclass, "$!cstack"
  rx879_fail2341:
    unless rx879_bstack, rx879_done2339
    pop $I19, rx879_bstack
    if_null rx879_cstack, rx879_cstack_done2344
    unless rx879_cstack, rx879_cstack_done2344
    dec $I19
    set $P11, rx879_cstack[$I19]
  rx879_cstack_done2344:
    pop rx879_rep, rx879_bstack
    pop rx879_pos, rx879_bstack
    pop $I19, rx879_bstack
    lt rx879_pos, -1, rx879_done2339
    lt rx879_pos, 0, rx879_fail2341
    eq $I19, 0, rx879_fail2341
    nqp_islist $I20, rx879_cstack
    unless $I20, rx879_jump2342
    elements $I18, rx879_bstack
    le $I18, 0, rx879_cut2343
    dec $I18
    set $I18, rx879_bstack[$I18]
  rx879_cut2343:
    assign rx879_cstack, $I18
  rx879_jump2342:
    jump $I19
  rx879_done2339:
    rx879_cur."!cursor_fail"()
    .return (rx879_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1346233478.067_caps" :subid("cuid_memo_226_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["arglist"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1346233478.067_nfa" :subid("cuid_memo_227_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 40
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "arglist"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 41
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_146_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1160
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx882_tgt
    .local int rx882_pos
    .local int rx882_off
    .local int rx882_eos
    .local int rx882_rep
    .local pmc rx882_cur
    .local pmc rx882_curclass
    .local pmc rx882_bstack
    .local pmc rx882_cstack
    (rx882_cur, rx882_tgt, rx882_pos, rx882_curclass, rx882_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx882_cur
    length rx882_eos, rx882_tgt
    eq $I19, 1, rx882_restart2351
    gt rx882_pos, rx882_eos, rx882_fail2352
    repr_get_attr_int $I11, self, rx882_curclass, "$!from"
    ne $I11, -1, rxscan883_done2358
    goto rxscan883_scan2357
  rxscan883_loop2356:
    inc rx882_pos
    gt rx882_pos, rx882_eos, rx882_fail2352
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!from", rx882_pos
  rxscan883_scan2357:
    nqp_rxmark rx882_bstack, rxscan883_loop2356, rx882_pos, 0
  rxscan883_done2358:
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!pos", rx882_pos
    $P11 = rx882_cur."ws"()
    repr_get_attr_int $I11, $P11, rx882_curclass, "$!pos"
    lt $I11, 0, rx882_fail2352
    repr_get_attr_int rx882_pos, $P11, rx882_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt885_02361
    nqp_push_label $P11, alt885_12363
    nqp_rxmark rx882_bstack, alt885_end2360, -1, 0
    rx882_cur."!alt"(rx882_pos, "alt_nfa__36_1346233482.873", $P11)
    goto rx882_fail2352
  alt885_02361:
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!pos", rx882_pos
    $P11 = rx882_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx882_curclass, "$!pos"
    lt $I11, 0, rx882_fail2352
    nqp_rxmark rx882_bstack, rxsubrule886_pass2362, -1, 0
  rxsubrule886_pass2362:
    rx882_cstack = rx882_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx882_pos, $P11, rx882_curclass, "$!pos"
    goto alt885_end2360
  alt885_12363:
    goto alt885_end2360
  alt885_end2360:
    nqp_rxcommit rx882_bstack, alt885_end2360
    rx882_cur."!cursor_pass"(rx882_pos, "arglist", 'backtrack'=>1)
    .return (rx882_cur)
  rx882_restart2351:
    repr_get_attr_obj rx882_cstack, rx882_cur, rx882_curclass, "$!cstack"
  rx882_fail2352:
    unless rx882_bstack, rx882_done2350
    pop $I19, rx882_bstack
    if_null rx882_cstack, rx882_cstack_done2355
    unless rx882_cstack, rx882_cstack_done2355
    dec $I19
    set $P11, rx882_cstack[$I19]
  rx882_cstack_done2355:
    pop rx882_rep, rx882_bstack
    pop rx882_pos, rx882_bstack
    pop $I19, rx882_bstack
    lt rx882_pos, -1, rx882_done2350
    lt rx882_pos, 0, rx882_fail2352
    eq $I19, 0, rx882_fail2352
    nqp_islist $I20, rx882_cstack
    unless $I20, rx882_jump2353
    elements $I18, rx882_bstack
    le $I18, 0, rx882_cut2354
    dec $I18
    set $I18, rx882_bstack[$I18]
  rx882_cut2354:
    assign rx882_cstack, $I18
  rx882_jump2353:
    jump $I19
  rx882_done2350:
    rx882_cur."!cursor_fail"()
    .return (rx882_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346233478.067_caps" :subid("cuid_memo_228_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346233478.067_nfa" :subid("cuid_memo_229_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "ws"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "EXPR"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    box $P511, 1
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 0
    push $P507, $P513
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346233478.067_alt_nfa__36_1346233482.873" :subid("cuid_memo_230_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "EXPR"
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 1
    push $P510, $P511
    box $P512, 0
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_147_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1169
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx888_tgt
    .local int rx888_pos
    .local int rx888_off
    .local int rx888_eos
    .local int rx888_rep
    .local pmc rx888_cur
    .local pmc rx888_curclass
    .local pmc rx888_bstack
    .local pmc rx888_cstack
    (rx888_cur, rx888_tgt, rx888_pos, rx888_curclass, rx888_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx888_cur
    length rx888_eos, rx888_tgt
    eq $I19, 1, rx888_restart2367
    gt rx888_pos, rx888_eos, rx888_fail2368
    repr_get_attr_int $I11, self, rx888_curclass, "$!from"
    ne $I11, -1, rxscan889_done2374
    goto rxscan889_scan2373
  rxscan889_loop2372:
    inc rx888_pos
    gt rx888_pos, rx888_eos, rx888_fail2368
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!from", rx888_pos
  rxscan889_scan2373:
    nqp_rxmark rx888_bstack, rxscan889_loop2372, rx888_pos, 0
  rxscan889_done2374:
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!pos", rx888_pos
    $P11 = rx888_cur."value"()
    repr_get_attr_int $I11, $P11, rx888_curclass, "$!pos"
    lt $I11, 0, rx888_fail2368
    nqp_rxmark rx888_bstack, rxsubrule890_pass2375, -1, 0
  rxsubrule890_pass2375:
    rx888_cstack = rx888_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx888_pos, $P11, rx888_curclass, "$!pos"
    rx888_cur."!cursor_pass"(rx888_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx888_cur)
  rx888_restart2367:
    repr_get_attr_obj rx888_cstack, rx888_cur, rx888_curclass, "$!cstack"
  rx888_fail2368:
    unless rx888_bstack, rx888_done2366
    pop $I19, rx888_bstack
    if_null rx888_cstack, rx888_cstack_done2371
    unless rx888_cstack, rx888_cstack_done2371
    dec $I19
    set $P11, rx888_cstack[$I19]
  rx888_cstack_done2371:
    pop rx888_rep, rx888_bstack
    pop rx888_pos, rx888_bstack
    pop $I19, rx888_bstack
    lt rx888_pos, -1, rx888_done2366
    lt rx888_pos, 0, rx888_fail2368
    eq $I19, 0, rx888_fail2368
    nqp_islist $I20, rx888_cstack
    unless $I20, rx888_jump2369
    elements $I18, rx888_bstack
    le $I18, 0, rx888_cut2370
    dec $I18
    set $I18, rx888_bstack[$I18]
  rx888_cut2370:
    assign rx888_cstack, $I18
  rx888_jump2369:
    jump $I19
  rx888_done2366:
    rx888_cur."!cursor_fail"()
    .return (rx888_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1346233478.067_caps" :subid("cuid_memo_231_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["value"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1346233478.067_nfa" :subid("cuid_memo_232_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "value"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_148_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1171
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx891_tgt
    .local int rx891_pos
    .local int rx891_off
    .local int rx891_eos
    .local int rx891_rep
    .local pmc rx891_cur
    .local pmc rx891_curclass
    .local pmc rx891_bstack
    .local pmc rx891_cstack
    (rx891_cur, rx891_tgt, rx891_pos, rx891_curclass, rx891_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx891_cur
    length rx891_eos, rx891_tgt
    eq $I19, 1, rx891_restart2378
    gt rx891_pos, rx891_eos, rx891_fail2379
    repr_get_attr_int $I11, self, rx891_curclass, "$!from"
    ne $I11, -1, rxscan892_done2385
    goto rxscan892_scan2384
  rxscan892_loop2383:
    inc rx891_pos
    gt rx891_pos, rx891_eos, rx891_fail2379
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!from", rx891_pos
  rxscan892_scan2384:
    nqp_rxmark rx891_bstack, rxscan892_loop2383, rx891_pos, 0
  rxscan892_done2385:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt893_02387
    nqp_push_label $P11, alt893_12389
    nqp_rxmark rx891_bstack, alt893_end2386, -1, 0
    rx891_cur."!alt"(rx891_pos, "alt_nfa__37_1346233482.892", $P11)
    goto rx891_fail2379
  alt893_02387:
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!pos", rx891_pos
    $P11 = rx891_cur."quote"()
    repr_get_attr_int $I11, $P11, rx891_curclass, "$!pos"
    lt $I11, 0, rx891_fail2379
    nqp_rxmark rx891_bstack, rxsubrule894_pass2388, -1, 0
  rxsubrule894_pass2388:
    rx891_cstack = rx891_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx891_pos, $P11, rx891_curclass, "$!pos"
    goto alt893_end2386
  alt893_12389:
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!pos", rx891_pos
    $P11 = rx891_cur."number"()
    repr_get_attr_int $I11, $P11, rx891_curclass, "$!pos"
    lt $I11, 0, rx891_fail2379
    nqp_rxmark rx891_bstack, rxsubrule895_pass2390, -1, 0
  rxsubrule895_pass2390:
    rx891_cstack = rx891_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx891_pos, $P11, rx891_curclass, "$!pos"
    goto alt893_end2386
  alt893_end2386:
    rx891_cur."!cursor_pass"(rx891_pos, "value", 'backtrack'=>1)
    .return (rx891_cur)
  rx891_restart2378:
    repr_get_attr_obj rx891_cstack, rx891_cur, rx891_curclass, "$!cstack"
  rx891_fail2379:
    unless rx891_bstack, rx891_done2377
    pop $I19, rx891_bstack
    if_null rx891_cstack, rx891_cstack_done2382
    unless rx891_cstack, rx891_cstack_done2382
    dec $I19
    set $P11, rx891_cstack[$I19]
  rx891_cstack_done2382:
    pop rx891_rep, rx891_bstack
    pop rx891_pos, rx891_bstack
    pop $I19, rx891_bstack
    lt rx891_pos, -1, rx891_done2377
    lt rx891_pos, 0, rx891_fail2379
    eq $I19, 0, rx891_fail2379
    nqp_islist $I20, rx891_cstack
    unless $I20, rx891_jump2380
    elements $I18, rx891_bstack
    le $I18, 0, rx891_cut2381
    dec $I18
    set $I18, rx891_bstack[$I18]
  rx891_cut2381:
    assign rx891_cstack, $I18
  rx891_jump2380:
    jump $I19
  rx891_done2377:
    rx891_cur."!cursor_fail"()
    .return (rx891_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346233478.067_caps" :subid("cuid_memo_233_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["quote"], $P502
    box $P503, 0
    set $P501["number"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346233478.067_nfa" :subid("cuid_memo_234_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "quote"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    box $P507, 8
    push $P503, $P507
    box $P508, "number"
    push $P503, $P508
    box $P509, 0
    push $P503, $P509
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346233478.067_alt_nfa__37_1346233482.892" :subid("cuid_memo_235_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "quote"
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 8
    push $P510, $P511
    box $P512, "number"
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_149_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1176
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx896_tgt
    .local int rx896_pos
    .local int rx896_off
    .local int rx896_eos
    .local int rx896_rep
    .local pmc rx896_cur
    .local pmc rx896_curclass
    .local pmc rx896_bstack
    .local pmc rx896_cstack
    (rx896_cur, rx896_tgt, rx896_pos, rx896_curclass, rx896_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx896_cur
    length rx896_eos, rx896_tgt
    eq $I19, 1, rx896_restart2393
    gt rx896_pos, rx896_eos, rx896_fail2394
    repr_get_attr_int $I11, self, rx896_curclass, "$!from"
    ne $I11, -1, rxscan897_done2400
    goto rxscan897_scan2399
  rxscan897_loop2398:
    inc rx896_pos
    gt rx896_pos, rx896_eos, rx896_fail2394
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!from", rx896_pos
  rxscan897_scan2399:
    nqp_rxmark rx896_bstack, rxscan897_loop2398, rx896_pos, 0
  rxscan897_done2400:
    nqp_rxmark rx896_bstack, rxcap898_fail2402, rx896_pos, 0
    nqp_rxmark rx896_bstack, rxquantr899_done2404, rx896_pos, 0
  rxquantr899_loop2403:
  alt900_02406:
    nqp_rxmark rx896_bstack, alt900_12407, rx896_pos, 0
    add $I11, rx896_pos, 1
    gt $I11, rx896_eos, rx896_fail2394
    substr $S10, rx896_tgt, rx896_pos, 1
    ne $S10, ucs4:"-", rx896_fail2394
    add rx896_pos, 1
    goto alt900_end2405
  alt900_12407:
    ge rx896_pos, rx896_eos, rx896_fail2394
    substr $S11, rx896_tgt, rx896_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx896_fail2394
    inc rx896_pos
  alt900_end2405:
    nqp_rxpeek $I19, rx896_bstack, rxquantr899_done2404
    inc $I19
    inc $I19
    set rx896_rep, rx896_bstack[$I19]
    nqp_rxcommit rx896_bstack, rxquantr899_done2404
    inc rx896_rep
  rxquantr899_done2404:
    nqp_rxpeek $I19, rx896_bstack, rxcap898_fail2402
    inc $I19
    set $I11, rx896_bstack[$I19]
    $P11 = rx896_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx896_pos)
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "sign")
    goto rxcap898_done2401
  rxcap898_fail2402:
    goto rx896_fail2394
  rxcap898_done2401:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt901_02409
    nqp_push_label $P11, alt901_12411
    nqp_rxmark rx896_bstack, alt901_end2408, -1, 0
    rx896_cur."!alt"(rx896_pos, "alt_nfa__38_1346233482.911", $P11)
    goto rx896_fail2394
  alt901_02409:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2394
    nqp_rxmark rx896_bstack, rxsubrule902_pass2410, -1, 0
  rxsubrule902_pass2410:
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
    goto alt901_end2408
  alt901_12411:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."integer"()
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2394
    nqp_rxmark rx896_bstack, rxsubrule903_pass2412, -1, 0
  rxsubrule903_pass2412:
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
    goto alt901_end2408
  alt901_end2408:
    nqp_rxcommit rx896_bstack, alt901_end2408
    rx896_cur."!cursor_pass"(rx896_pos, "number", 'backtrack'=>1)
    .return (rx896_cur)
  rx896_restart2393:
    repr_get_attr_obj rx896_cstack, rx896_cur, rx896_curclass, "$!cstack"
  rx896_fail2394:
    unless rx896_bstack, rx896_done2392
    pop $I19, rx896_bstack
    if_null rx896_cstack, rx896_cstack_done2397
    unless rx896_cstack, rx896_cstack_done2397
    dec $I19
    set $P11, rx896_cstack[$I19]
  rx896_cstack_done2397:
    pop rx896_rep, rx896_bstack
    pop rx896_pos, rx896_bstack
    pop $I19, rx896_bstack
    lt rx896_pos, -1, rx896_done2392
    lt rx896_pos, 0, rx896_fail2394
    eq $I19, 0, rx896_fail2394
    nqp_islist $I20, rx896_cstack
    unless $I20, rx896_jump2395
    elements $I18, rx896_bstack
    le $I18, 0, rx896_cut2396
    dec $I18
    set $I18, rx896_bstack[$I18]
  rx896_cut2396:
    assign rx896_cstack, $I18
  rx896_jump2395:
    jump $I19
  rx896_done2392:
    rx896_cur."!cursor_fail"()
    .return (rx896_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346233478.067_caps" :subid("cuid_memo_236_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sign"], $P502
    box $P503, 0
    set $P501["dec_number"], $P503
    box $P504, 0
    set $P501["integer"], $P504
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346233478.067_nfa" :subid("cuid_memo_237_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 0
    push $P503, $P504
    box $P505, 0
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    box $P507, 1
    push $P503, $P507
    box $P508, 0
    push $P503, $P508
    box $P509, 2
    push $P503, $P509
    push $P501, $P503
    new $P510, 'ResizablePMCArray'
    box $P511, 8
    push $P510, $P511
    box $P512, "dec_number"
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    box $P514, 8
    push $P510, $P514
    box $P515, "integer"
    push $P510, $P515
    box $P516, 0
    push $P510, $P516
    push $P501, $P510
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346233478.067_alt_nfa__38_1346233482.911" :subid("cuid_memo_238_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 8
    push $P504, $P505
    box $P506, "dec_number"
    push $P504, $P506
    box $P507, 0
    push $P504, $P507
    push $P502, $P504
    push $P501, $P502
    new $P508, 'ResizablePMCArray'
    new $P509, 'ResizablePMCArray'
    push $P508, $P509
    new $P510, 'ResizablePMCArray'
    box $P511, 8
    push $P510, $P511
    box $P512, "integer"
    push $P510, $P512
    box $P513, 0
    push $P510, $P513
    push $P508, $P510
    push $P501, $P508
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_150_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1181
    .param pmc self 
    $P501 = self."!protoregex"("quote")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_151_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx904_tgt
    .local int rx904_pos
    .local int rx904_off
    .local int rx904_eos
    .local int rx904_rep
    .local pmc rx904_cur
    .local pmc rx904_curclass
    .local pmc rx904_bstack
    .local pmc rx904_cstack
    (rx904_cur, rx904_tgt, rx904_pos, rx904_curclass, rx904_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx904_cur
    length rx904_eos, rx904_tgt
    eq $I19, 1, rx904_restart2415
    gt rx904_pos, rx904_eos, rx904_fail2416
    repr_get_attr_int $I11, self, rx904_curclass, "$!from"
    ne $I11, -1, rxscan905_done2422
    goto rxscan905_scan2421
  rxscan905_loop2420:
    inc rx904_pos
    gt rx904_pos, rx904_eos, rx904_fail2416
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!from", rx904_pos
  rxscan905_scan2421:
    nqp_rxmark rx904_bstack, rxscan905_loop2420, rx904_pos, 0
  rxscan905_done2422:
    ge rx904_pos, rx904_eos, rx904_fail2416
    substr $S11, rx904_tgt, rx904_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx904_fail2416
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!pos", rx904_pos
    $P11 = rx904_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx904_curclass, "$!pos"
    lt $I11, 0, rx904_fail2416
    nqp_rxmark rx904_bstack, rxsubrule906_pass2423, -1, 0
  rxsubrule906_pass2423:
    rx904_cstack = rx904_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx904_pos, $P11, rx904_curclass, "$!pos"
    rx904_cur."!cursor_pass"(rx904_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx904_cur)
  rx904_restart2415:
    repr_get_attr_obj rx904_cstack, rx904_cur, rx904_curclass, "$!cstack"
  rx904_fail2416:
    unless rx904_bstack, rx904_done2414
    pop $I19, rx904_bstack
    if_null rx904_cstack, rx904_cstack_done2419
    unless rx904_cstack, rx904_cstack_done2419
    dec $I19
    set $P11, rx904_cstack[$I19]
  rx904_cstack_done2419:
    pop rx904_rep, rx904_bstack
    pop rx904_pos, rx904_bstack
    pop $I19, rx904_bstack
    lt rx904_pos, -1, rx904_done2414
    lt rx904_pos, 0, rx904_fail2416
    eq $I19, 0, rx904_fail2416
    nqp_islist $I20, rx904_cstack
    unless $I20, rx904_jump2417
    elements $I18, rx904_bstack
    le $I18, 0, rx904_cut2418
    dec $I18
    set $I18, rx904_bstack[$I18]
  rx904_cut2418:
    assign rx904_cstack, $I18
  rx904_jump2417:
    jump $I19
  rx904_done2414:
    rx904_cur."!cursor_fail"()
    .return (rx904_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1346233478.067_caps" :subid("cuid_memo_239_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["quote_EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1346233478.067_nfa" :subid("cuid_memo_240_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "'"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_152_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1183
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx907_tgt
    .local int rx907_pos
    .local int rx907_off
    .local int rx907_eos
    .local int rx907_rep
    .local pmc rx907_cur
    .local pmc rx907_curclass
    .local pmc rx907_bstack
    .local pmc rx907_cstack
    (rx907_cur, rx907_tgt, rx907_pos, rx907_curclass, rx907_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx907_cur
    length rx907_eos, rx907_tgt
    eq $I19, 1, rx907_restart2426
    gt rx907_pos, rx907_eos, rx907_fail2427
    repr_get_attr_int $I11, self, rx907_curclass, "$!from"
    ne $I11, -1, rxscan908_done2433
    goto rxscan908_scan2432
  rxscan908_loop2431:
    inc rx907_pos
    gt rx907_pos, rx907_eos, rx907_fail2427
    repr_bind_attr_int rx907_cur, rx907_curclass, "$!from", rx907_pos
  rxscan908_scan2432:
    nqp_rxmark rx907_bstack, rxscan908_loop2431, rx907_pos, 0
  rxscan908_done2433:
    ge rx907_pos, rx907_eos, rx907_fail2427
    substr $S11, rx907_tgt, rx907_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx907_fail2427
    repr_bind_attr_int rx907_cur, rx907_curclass, "$!pos", rx907_pos
    $P11 = rx907_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx907_curclass, "$!pos"
    lt $I11, 0, rx907_fail2427
    nqp_rxmark rx907_bstack, rxsubrule909_pass2434, -1, 0
  rxsubrule909_pass2434:
    rx907_cstack = rx907_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx907_pos, $P11, rx907_curclass, "$!pos"
    rx907_cur."!cursor_pass"(rx907_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx907_cur)
  rx907_restart2426:
    repr_get_attr_obj rx907_cstack, rx907_cur, rx907_curclass, "$!cstack"
  rx907_fail2427:
    unless rx907_bstack, rx907_done2425
    pop $I19, rx907_bstack
    if_null rx907_cstack, rx907_cstack_done2430
    unless rx907_cstack, rx907_cstack_done2430
    dec $I19
    set $P11, rx907_cstack[$I19]
  rx907_cstack_done2430:
    pop rx907_rep, rx907_bstack
    pop rx907_pos, rx907_bstack
    pop $I19, rx907_bstack
    lt rx907_pos, -1, rx907_done2425
    lt rx907_pos, 0, rx907_fail2427
    eq $I19, 0, rx907_fail2427
    nqp_islist $I20, rx907_cstack
    unless $I20, rx907_jump2428
    elements $I18, rx907_bstack
    le $I18, 0, rx907_cut2429
    dec $I18
    set $I18, rx907_bstack[$I18]
  rx907_cut2429:
    assign rx907_cstack, $I18
  rx907_jump2428:
    jump $I19
  rx907_done2425:
    rx907_cur."!cursor_fail"()
    .return (rx907_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1346233478.067_caps" :subid("cuid_memo_241_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["quote_EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1346233478.067_nfa" :subid("cuid_memo_242_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "\""
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_153_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1184
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx910_tgt
    .local int rx910_pos
    .local int rx910_off
    .local int rx910_eos
    .local int rx910_rep
    .local pmc rx910_cur
    .local pmc rx910_curclass
    .local pmc rx910_bstack
    .local pmc rx910_cstack
    (rx910_cur, rx910_tgt, rx910_pos, rx910_curclass, rx910_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx910_cur
    length rx910_eos, rx910_tgt
    eq $I19, 1, rx910_restart2437
    gt rx910_pos, rx910_eos, rx910_fail2438
    repr_get_attr_int $I11, self, rx910_curclass, "$!from"
    ne $I11, -1, rxscan911_done2444
    goto rxscan911_scan2443
  rxscan911_loop2442:
    inc rx910_pos
    gt rx910_pos, rx910_eos, rx910_fail2438
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!from", rx910_pos
  rxscan911_scan2443:
    nqp_rxmark rx910_bstack, rxscan911_loop2442, rx910_pos, 0
  rxscan911_done2444:
    nqp_rxmark rx910_bstack, rxcap912_fail2446, rx910_pos, 0
    add $I11, rx910_pos, 1
    gt $I11, rx910_eos, rx910_fail2438
    substr $S10, rx910_tgt, rx910_pos, 1
    ne $S10, ucs4:"q", rx910_fail2438
    add rx910_pos, 1
    nqp_rxpeek $I19, rx910_bstack, rxcap912_fail2446
    inc $I19
    set $I11, rx910_bstack[$I19]
    $P11 = rx910_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx910_pos)
    rx910_cstack = rx910_cur."!cursor_capture"($P11, "sym")
    goto rxcap912_done2445
  rxcap912_fail2446:
    goto rx910_fail2438
  rxcap912_done2445:
    le rx910_pos, 0, rx910_fail2438
    is_cclass $I11, .CCLASS_WORD, rx910_tgt, rx910_pos
    if $I11, rx910_fail2438
    sub $I11, rx910_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx910_tgt, $I11
    unless $I11, rx910_fail2438
    ge rx910_pos, rx910_eos, rx910_fail2438
    substr $S11, rx910_tgt, rx910_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx910_fail2438
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!pos", rx910_pos
    $P11 = rx910_cur."ws"()
    repr_get_attr_int $I11, $P11, rx910_curclass, "$!pos"
    lt $I11, 0, rx910_fail2438
    repr_get_attr_int rx910_pos, $P11, rx910_curclass, "$!pos"
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!pos", rx910_pos
    $P11 = rx910_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx910_curclass, "$!pos"
    lt $I11, 0, rx910_fail2438
    nqp_rxmark rx910_bstack, rxsubrule915_pass2449, -1, 0
  rxsubrule915_pass2449:
    rx910_cstack = rx910_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx910_pos, $P11, rx910_curclass, "$!pos"
    rx910_cur."!cursor_pass"(rx910_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx910_cur)
  rx910_restart2437:
    repr_get_attr_obj rx910_cstack, rx910_cur, rx910_curclass, "$!cstack"
  rx910_fail2438:
    unless rx910_bstack, rx910_done2436
    pop $I19, rx910_bstack
    if_null rx910_cstack, rx910_cstack_done2441
    unless rx910_cstack, rx910_cstack_done2441
    dec $I19
    set $P11, rx910_cstack[$I19]
  rx910_cstack_done2441:
    pop rx910_rep, rx910_bstack
    pop rx910_pos, rx910_bstack
    pop $I19, rx910_bstack
    lt rx910_pos, -1, rx910_done2436
    lt rx910_pos, 0, rx910_fail2438
    eq $I19, 0, rx910_fail2438
    nqp_islist $I20, rx910_cstack
    unless $I20, rx910_jump2439
    elements $I18, rx910_bstack
    le $I18, 0, rx910_cut2440
    dec $I18
    set $I18, rx910_bstack[$I18]
  rx910_cut2440:
    assign rx910_cstack, $I18
  rx910_jump2439:
    jump $I19
  rx910_done2436:
    rx910_cur."!cursor_fail"()
    .return (rx910_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1346233478.067_caps" :subid("cuid_memo_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["quote_EXPR"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1346233478.067_nfa" :subid("cuid_memo_244_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 113
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 7
    push $P511, $P512
    box $P513, "("
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 0
    push $P515, $P516
    box $P517, 0
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_154_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1185
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx916_tgt
    .local int rx916_pos
    .local int rx916_off
    .local int rx916_eos
    .local int rx916_rep
    .local pmc rx916_cur
    .local pmc rx916_curclass
    .local pmc rx916_bstack
    .local pmc rx916_cstack
    (rx916_cur, rx916_tgt, rx916_pos, rx916_curclass, rx916_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx916_cur
    length rx916_eos, rx916_tgt
    eq $I19, 1, rx916_restart2452
    gt rx916_pos, rx916_eos, rx916_fail2453
    repr_get_attr_int $I11, self, rx916_curclass, "$!from"
    ne $I11, -1, rxscan917_done2459
    goto rxscan917_scan2458
  rxscan917_loop2457:
    inc rx916_pos
    gt rx916_pos, rx916_eos, rx916_fail2453
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!from", rx916_pos
  rxscan917_scan2458:
    nqp_rxmark rx916_bstack, rxscan917_loop2457, rx916_pos, 0
  rxscan917_done2459:
    nqp_rxmark rx916_bstack, rxcap918_fail2461, rx916_pos, 0
    add $I11, rx916_pos, 2
    gt $I11, rx916_eos, rx916_fail2453
    substr $S10, rx916_tgt, rx916_pos, 2
    ne $S10, ucs4:"qq", rx916_fail2453
    add rx916_pos, 2
    nqp_rxpeek $I19, rx916_bstack, rxcap918_fail2461
    inc $I19
    set $I11, rx916_bstack[$I19]
    $P11 = rx916_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx916_pos)
    rx916_cstack = rx916_cur."!cursor_capture"($P11, "sym")
    goto rxcap918_done2460
  rxcap918_fail2461:
    goto rx916_fail2453
  rxcap918_done2460:
    le rx916_pos, 0, rx916_fail2453
    is_cclass $I11, .CCLASS_WORD, rx916_tgt, rx916_pos
    if $I11, rx916_fail2453
    sub $I11, rx916_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx916_tgt, $I11
    unless $I11, rx916_fail2453
    ge rx916_pos, rx916_eos, rx916_fail2453
    substr $S11, rx916_tgt, rx916_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx916_fail2453
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!pos", rx916_pos
    $P11 = rx916_cur."ws"()
    repr_get_attr_int $I11, $P11, rx916_curclass, "$!pos"
    lt $I11, 0, rx916_fail2453
    repr_get_attr_int rx916_pos, $P11, rx916_curclass, "$!pos"
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!pos", rx916_pos
    $P11 = rx916_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx916_curclass, "$!pos"
    lt $I11, 0, rx916_fail2453
    nqp_rxmark rx916_bstack, rxsubrule921_pass2464, -1, 0
  rxsubrule921_pass2464:
    rx916_cstack = rx916_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx916_pos, $P11, rx916_curclass, "$!pos"
    rx916_cur."!cursor_pass"(rx916_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx916_cur)
  rx916_restart2452:
    repr_get_attr_obj rx916_cstack, rx916_cur, rx916_curclass, "$!cstack"
  rx916_fail2453:
    unless rx916_bstack, rx916_done2451
    pop $I19, rx916_bstack
    if_null rx916_cstack, rx916_cstack_done2456
    unless rx916_cstack, rx916_cstack_done2456
    dec $I19
    set $P11, rx916_cstack[$I19]
  rx916_cstack_done2456:
    pop rx916_rep, rx916_bstack
    pop rx916_pos, rx916_bstack
    pop $I19, rx916_bstack
    lt rx916_pos, -1, rx916_done2451
    lt rx916_pos, 0, rx916_fail2453
    eq $I19, 0, rx916_fail2453
    nqp_islist $I20, rx916_cstack
    unless $I20, rx916_jump2454
    elements $I18, rx916_bstack
    le $I18, 0, rx916_cut2455
    dec $I18
    set $I18, rx916_bstack[$I18]
  rx916_cut2455:
    assign rx916_cstack, $I18
  rx916_jump2454:
    jump $I19
  rx916_done2451:
    rx916_cur."!cursor_fail"()
    .return (rx916_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1346233478.067_caps" :subid("cuid_memo_245_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["quote_EXPR"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1346233478.067_nfa" :subid("cuid_memo_246_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 113
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 113
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 1
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 7
    push $P515, $P516
    box $P517, "("
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 0
    push $P519, $P520
    box $P521, 0
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_155_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx922_tgt
    .local int rx922_pos
    .local int rx922_off
    .local int rx922_eos
    .local int rx922_rep
    .local pmc rx922_cur
    .local pmc rx922_curclass
    .local pmc rx922_bstack
    .local pmc rx922_cstack
    (rx922_cur, rx922_tgt, rx922_pos, rx922_curclass, rx922_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx922_cur
    length rx922_eos, rx922_tgt
    eq $I19, 1, rx922_restart2467
    gt rx922_pos, rx922_eos, rx922_fail2468
    repr_get_attr_int $I11, self, rx922_curclass, "$!from"
    ne $I11, -1, rxscan923_done2474
    goto rxscan923_scan2473
  rxscan923_loop2472:
    inc rx922_pos
    gt rx922_pos, rx922_eos, rx922_fail2468
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!from", rx922_pos
  rxscan923_scan2473:
    nqp_rxmark rx922_bstack, rxscan923_loop2472, rx922_pos, 0
  rxscan923_done2474:
    nqp_rxmark rx922_bstack, rxcap924_fail2476, rx922_pos, 0
    add $I11, rx922_pos, 1
    gt $I11, rx922_eos, rx922_fail2468
    substr $S10, rx922_tgt, rx922_pos, 1
    ne $S10, ucs4:"Q", rx922_fail2468
    add rx922_pos, 1
    nqp_rxpeek $I19, rx922_bstack, rxcap924_fail2476
    inc $I19
    set $I11, rx922_bstack[$I19]
    $P11 = rx922_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx922_pos)
    rx922_cstack = rx922_cur."!cursor_capture"($P11, "sym")
    goto rxcap924_done2475
  rxcap924_fail2476:
    goto rx922_fail2468
  rxcap924_done2475:
    le rx922_pos, 0, rx922_fail2468
    is_cclass $I11, .CCLASS_WORD, rx922_tgt, rx922_pos
    if $I11, rx922_fail2468
    sub $I11, rx922_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx922_tgt, $I11
    unless $I11, rx922_fail2468
    ge rx922_pos, rx922_eos, rx922_fail2468
    substr $S11, rx922_tgt, rx922_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx922_fail2468
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!pos", rx922_pos
    $P11 = rx922_cur."ws"()
    repr_get_attr_int $I11, $P11, rx922_curclass, "$!pos"
    lt $I11, 0, rx922_fail2468
    repr_get_attr_int rx922_pos, $P11, rx922_curclass, "$!pos"
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!pos", rx922_pos
    $P11 = rx922_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx922_curclass, "$!pos"
    lt $I11, 0, rx922_fail2468
    nqp_rxmark rx922_bstack, rxsubrule927_pass2479, -1, 0
  rxsubrule927_pass2479:
    rx922_cstack = rx922_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx922_pos, $P11, rx922_curclass, "$!pos"
    rx922_cur."!cursor_pass"(rx922_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx922_cur)
  rx922_restart2467:
    repr_get_attr_obj rx922_cstack, rx922_cur, rx922_curclass, "$!cstack"
  rx922_fail2468:
    unless rx922_bstack, rx922_done2466
    pop $I19, rx922_bstack
    if_null rx922_cstack, rx922_cstack_done2471
    unless rx922_cstack, rx922_cstack_done2471
    dec $I19
    set $P11, rx922_cstack[$I19]
  rx922_cstack_done2471:
    pop rx922_rep, rx922_bstack
    pop rx922_pos, rx922_bstack
    pop $I19, rx922_bstack
    lt rx922_pos, -1, rx922_done2466
    lt rx922_pos, 0, rx922_fail2468
    eq $I19, 0, rx922_fail2468
    nqp_islist $I20, rx922_cstack
    unless $I20, rx922_jump2469
    elements $I18, rx922_bstack
    le $I18, 0, rx922_cut2470
    dec $I18
    set $I18, rx922_bstack[$I18]
  rx922_cut2470:
    assign rx922_cstack, $I18
  rx922_jump2469:
    jump $I19
  rx922_done2466:
    rx922_cur."!cursor_fail"()
    .return (rx922_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1346233478.067_caps" :subid("cuid_memo_247_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["quote_EXPR"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1346233478.067_nfa" :subid("cuid_memo_248_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 81
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 1
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 7
    push $P511, $P512
    box $P513, "("
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 0
    push $P515, $P516
    box $P517, 0
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_156_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx928_tgt
    .local int rx928_pos
    .local int rx928_off
    .local int rx928_eos
    .local int rx928_rep
    .local pmc rx928_cur
    .local pmc rx928_curclass
    .local pmc rx928_bstack
    .local pmc rx928_cstack
    (rx928_cur, rx928_tgt, rx928_pos, rx928_curclass, rx928_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx928_cur
    length rx928_eos, rx928_tgt
    eq $I19, 1, rx928_restart2482
    gt rx928_pos, rx928_eos, rx928_fail2483
    repr_get_attr_int $I11, self, rx928_curclass, "$!from"
    ne $I11, -1, rxscan929_done2489
    goto rxscan929_scan2488
  rxscan929_loop2487:
    inc rx928_pos
    gt rx928_pos, rx928_eos, rx928_fail2483
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!from", rx928_pos
  rxscan929_scan2488:
    nqp_rxmark rx928_bstack, rxscan929_loop2487, rx928_pos, 0
  rxscan929_done2489:
    nqp_rxmark rx928_bstack, rxcap930_fail2491, rx928_pos, 0
    add $I11, rx928_pos, 5
    gt $I11, rx928_eos, rx928_fail2483
    substr $S10, rx928_tgt, rx928_pos, 5
    ne $S10, ucs4:"Q:PIR", rx928_fail2483
    add rx928_pos, 5
    nqp_rxpeek $I19, rx928_bstack, rxcap930_fail2491
    inc $I19
    set $I11, rx928_bstack[$I19]
    $P11 = rx928_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx928_pos)
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "sym")
    goto rxcap930_done2490
  rxcap930_fail2491:
    goto rx928_fail2483
  rxcap930_done2490:
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!pos", rx928_pos
    $P11 = rx928_cur."ws"()
    repr_get_attr_int $I11, $P11, rx928_curclass, "$!pos"
    lt $I11, 0, rx928_fail2483
    repr_get_attr_int rx928_pos, $P11, rx928_curclass, "$!pos"
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!pos", rx928_pos
    $P11 = rx928_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx928_curclass, "$!pos"
    lt $I11, 0, rx928_fail2483
    nqp_rxmark rx928_bstack, rxsubrule932_pass2493, -1, 0
  rxsubrule932_pass2493:
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx928_pos, $P11, rx928_curclass, "$!pos"
    rx928_cur."!cursor_pass"(rx928_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx928_cur)
  rx928_restart2482:
    repr_get_attr_obj rx928_cstack, rx928_cur, rx928_curclass, "$!cstack"
  rx928_fail2483:
    unless rx928_bstack, rx928_done2481
    pop $I19, rx928_bstack
    if_null rx928_cstack, rx928_cstack_done2486
    unless rx928_cstack, rx928_cstack_done2486
    dec $I19
    set $P11, rx928_cstack[$I19]
  rx928_cstack_done2486:
    pop rx928_rep, rx928_bstack
    pop rx928_pos, rx928_bstack
    pop $I19, rx928_bstack
    lt rx928_pos, -1, rx928_done2481
    lt rx928_pos, 0, rx928_fail2483
    eq $I19, 0, rx928_fail2483
    nqp_islist $I20, rx928_cstack
    unless $I20, rx928_jump2484
    elements $I18, rx928_bstack
    le $I18, 0, rx928_cut2485
    dec $I18
    set $I18, rx928_bstack[$I18]
  rx928_cut2485:
    assign rx928_cstack, $I18
  rx928_jump2484:
    jump $I19
  rx928_done2481:
    rx928_cur."!cursor_fail"()
    .return (rx928_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1346233478.067_caps" :subid("cuid_memo_249_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["quote_EXPR"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1346233478.067_nfa" :subid("cuid_memo_250_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 81
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 58
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 80
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 73
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 82
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 8
    push $P523, $P524
    box $P525, "ws"
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "quote_EXPR"
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P501, $P527
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_157_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P501, 'Hash'
    set $P101, $P501
    set self, _lex_param_0
    .local string rx933_tgt
    .local int rx933_pos
    .local int rx933_off
    .local int rx933_eos
    .local int rx933_rep
    .local pmc rx933_cur
    .local pmc rx933_curclass
    .local pmc rx933_bstack
    .local pmc rx933_cstack
    (rx933_cur, rx933_tgt, rx933_pos, rx933_curclass, rx933_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx933_cur
    length rx933_eos, rx933_tgt
    eq $I19, 1, rx933_restart2496
    gt rx933_pos, rx933_eos, rx933_fail2497
    repr_get_attr_int $I11, self, rx933_curclass, "$!from"
    ne $I11, -1, rxscan934_done2503
    goto rxscan934_scan2502
  rxscan934_loop2501:
    inc rx933_pos
    gt rx933_pos, rx933_eos, rx933_fail2497
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!from", rx933_pos
  rxscan934_scan2502:
    nqp_rxmark rx933_bstack, rxscan934_loop2501, rx933_pos, 0
  rxscan934_done2503:
    add $I11, rx933_pos, 1
    gt $I11, rx933_eos, rx933_fail2497
    substr $S10, rx933_tgt, rx933_pos, 1
    ne $S10, ucs4:"/", rx933_fail2497
    add rx933_pos, 1
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    $P11 = rx933_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx933_curclass, "$!pos"
    lt $I11, 0, rx933_fail2497
    repr_get_attr_int rx933_pos, $P11, rx933_curclass, "$!pos"
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    store_lex unicode:"$\x{a2}", rx933_cur
    unless_null $P101, fallback2505
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["%RX"]
    unless_null $P502, fallback2506
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    new $P507, 'Hash'
    set $P505["%RX"], $P507
    set $P502, $P507
  fallback2506:
    unless_null $P502, vivi_9362507
    die "Contextual %*RX not found"
    box $P508, "Contextual %*RX not found"
    set $P502, $P508
  vivi_9362507:
    set $P101, $P502
  fallback2505:
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    $P11 = rx933_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx933_curclass, "$!pos"
    lt $I11, 0, rx933_fail2497
    nqp_rxmark rx933_bstack, rxsubrule937_pass2508, -1, 0
  rxsubrule937_pass2508:
    rx933_cstack = rx933_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx933_pos, $P11, rx933_curclass, "$!pos"
    add $I11, rx933_pos, 1
    gt $I11, rx933_eos, rx933_fail2497
    substr $S10, rx933_tgt, rx933_pos, 1
    ne $S10, ucs4:"/", rx933_fail2497
    add rx933_pos, 1
    rx933_cur."!cursor_pass"(rx933_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx933_cur)
  rx933_restart2496:
    repr_get_attr_obj rx933_cstack, rx933_cur, rx933_curclass, "$!cstack"
  rx933_fail2497:
    unless rx933_bstack, rx933_done2495
    pop $I19, rx933_bstack
    if_null rx933_cstack, rx933_cstack_done2500
    unless rx933_cstack, rx933_cstack_done2500
    dec $I19
    set $P11, rx933_cstack[$I19]
  rx933_cstack_done2500:
    pop rx933_rep, rx933_bstack
    pop rx933_pos, rx933_bstack
    pop $I19, rx933_bstack
    lt rx933_pos, -1, rx933_done2495
    lt rx933_pos, 0, rx933_fail2497
    eq $I19, 0, rx933_fail2497
    nqp_islist $I20, rx933_cstack
    unless $I20, rx933_jump2498
    elements $I18, rx933_bstack
    le $I18, 0, rx933_cut2499
    dec $I18
    set $I18, rx933_bstack[$I18]
  rx933_cut2499:
    assign rx933_cstack, $I18
  rx933_jump2498:
    jump $I19
  rx933_done2495:
    rx933_cur."!cursor_fail"()
    .return (rx933_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1346233478.067_caps" :subid("cuid_memo_251_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["p6regex"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1346233478.067_nfa" :subid("cuid_memo_252_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 47
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "newpad"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 1
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "LANG"
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 47
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_158_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx938_tgt
    .local int rx938_pos
    .local int rx938_off
    .local int rx938_eos
    .local int rx938_rep
    .local pmc rx938_cur
    .local pmc rx938_curclass
    .local pmc rx938_bstack
    .local pmc rx938_cstack
    (rx938_cur, rx938_tgt, rx938_pos, rx938_curclass, rx938_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx938_cur
    length rx938_eos, rx938_tgt
    eq $I19, 1, rx938_restart2511
    gt rx938_pos, rx938_eos, rx938_fail2512
    repr_get_attr_int $I11, self, rx938_curclass, "$!from"
    ne $I11, -1, rxscan939_done2518
    goto rxscan939_scan2517
  rxscan939_loop2516:
    inc rx938_pos
    gt rx938_pos, rx938_eos, rx938_fail2512
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!from", rx938_pos
  rxscan939_scan2517:
    nqp_rxmark rx938_bstack, rxscan939_loop2516, rx938_pos, 0
  rxscan939_done2518:
    ge rx938_pos, rx938_eos, rx938_fail2512
    substr $S11, rx938_tgt, rx938_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx938_fail2512
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2512
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."variable"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2512
    nqp_rxmark rx938_bstack, rxsubrule940_pass2519, -1, 0
  rxsubrule940_pass2519:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    rx938_cur."!cursor_pass"(rx938_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx938_cur)
  rx938_restart2511:
    repr_get_attr_obj rx938_cstack, rx938_cur, rx938_curclass, "$!cstack"
  rx938_fail2512:
    unless rx938_bstack, rx938_done2510
    pop $I19, rx938_bstack
    if_null rx938_cstack, rx938_cstack_done2515
    unless rx938_cstack, rx938_cstack_done2515
    dec $I19
    set $P11, rx938_cstack[$I19]
  rx938_cstack_done2515:
    pop rx938_rep, rx938_bstack
    pop rx938_pos, rx938_bstack
    pop $I19, rx938_bstack
    lt rx938_pos, -1, rx938_done2510
    lt rx938_pos, 0, rx938_fail2512
    eq $I19, 0, rx938_fail2512
    nqp_islist $I20, rx938_cstack
    unless $I20, rx938_jump2513
    elements $I18, rx938_bstack
    le $I18, 0, rx938_cut2514
    dec $I18
    set $I18, rx938_bstack[$I18]
  rx938_cut2514:
    assign rx938_cstack, $I18
  rx938_jump2513:
    jump $I19
  rx938_done2510:
    rx938_cur."!cursor_fail"()
    .return (rx938_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1346233478.067_caps" :subid("cuid_memo_253_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["variable"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1346233478.067_nfa" :subid("cuid_memo_254_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "$"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_159_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx941_tgt
    .local int rx941_pos
    .local int rx941_off
    .local int rx941_eos
    .local int rx941_rep
    .local pmc rx941_cur
    .local pmc rx941_curclass
    .local pmc rx941_bstack
    .local pmc rx941_cstack
    (rx941_cur, rx941_tgt, rx941_pos, rx941_curclass, rx941_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx941_cur
    length rx941_eos, rx941_tgt
    eq $I19, 1, rx941_restart2522
    gt rx941_pos, rx941_eos, rx941_fail2523
    repr_get_attr_int $I11, self, rx941_curclass, "$!from"
    ne $I11, -1, rxscan942_done2529
    goto rxscan942_scan2528
  rxscan942_loop2527:
    inc rx941_pos
    gt rx941_pos, rx941_eos, rx941_fail2523
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!from", rx941_pos
  rxscan942_scan2528:
    nqp_rxmark rx941_bstack, rxscan942_loop2527, rx941_pos, 0
  rxscan942_done2529:
    ge rx941_pos, rx941_eos, rx941_fail2523
    substr $S11, rx941_tgt, rx941_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx941_fail2523
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2523
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."block"()
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2523
    nqp_rxmark rx941_bstack, rxsubrule943_pass2530, -1, 0
  rxsubrule943_pass2530:
    rx941_cstack = rx941_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx941_pos, $P11, rx941_curclass, "$!pos"
    rx941_cur."!cursor_pass"(rx941_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx941_cur)
  rx941_restart2522:
    repr_get_attr_obj rx941_cstack, rx941_cur, rx941_curclass, "$!cstack"
  rx941_fail2523:
    unless rx941_bstack, rx941_done2521
    pop $I19, rx941_bstack
    if_null rx941_cstack, rx941_cstack_done2526
    unless rx941_cstack, rx941_cstack_done2526
    dec $I19
    set $P11, rx941_cstack[$I19]
  rx941_cstack_done2526:
    pop rx941_rep, rx941_bstack
    pop rx941_pos, rx941_bstack
    pop $I19, rx941_bstack
    lt rx941_pos, -1, rx941_done2521
    lt rx941_pos, 0, rx941_fail2523
    eq $I19, 0, rx941_fail2523
    nqp_islist $I20, rx941_cstack
    unless $I20, rx941_jump2524
    elements $I18, rx941_bstack
    le $I18, 0, rx941_cut2525
    dec $I18
    set $I18, rx941_bstack[$I18]
  rx941_cut2525:
    assign rx941_cstack, $I18
  rx941_jump2524:
    jump $I19
  rx941_done2521:
    rx941_cur."!cursor_fail"()
    .return (rx941_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1346233478.067_caps" :subid("cuid_memo_255_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["block"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1346233478.067_nfa" :subid("cuid_memo_256_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "{"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_160_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx944_tgt
    .local int rx944_pos
    .local int rx944_off
    .local int rx944_eos
    .local int rx944_rep
    .local pmc rx944_cur
    .local pmc rx944_curclass
    .local pmc rx944_bstack
    .local pmc rx944_cstack
    (rx944_cur, rx944_tgt, rx944_pos, rx944_curclass, rx944_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx944_cur
    length rx944_eos, rx944_tgt
    eq $I19, 1, rx944_restart2533
    gt rx944_pos, rx944_eos, rx944_fail2534
    repr_get_attr_int $I11, self, rx944_curclass, "$!from"
    ne $I11, -1, rxscan945_done2540
    goto rxscan945_scan2539
  rxscan945_loop2538:
    inc rx944_pos
    gt rx944_pos, rx944_eos, rx944_fail2534
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!from", rx944_pos
  rxscan945_scan2539:
    nqp_rxmark rx944_bstack, rxscan945_loop2538, rx944_pos, 0
  rxscan945_done2540:
    add $I11, rx944_pos, 2
    gt $I11, rx944_eos, rx944_fail2534
    substr $S10, rx944_tgt, rx944_pos, 2
    ne $S10, ucs4:"\\e", rx944_fail2534
    add rx944_pos, 2
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2534
    rx944_cur."!cursor_pass"(rx944_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx944_cur)
  rx944_restart2533:
    repr_get_attr_obj rx944_cstack, rx944_cur, rx944_curclass, "$!cstack"
  rx944_fail2534:
    unless rx944_bstack, rx944_done2532
    pop $I19, rx944_bstack
    if_null rx944_cstack, rx944_cstack_done2537
    unless rx944_cstack, rx944_cstack_done2537
    dec $I19
    set $P11, rx944_cstack[$I19]
  rx944_cstack_done2537:
    pop rx944_rep, rx944_bstack
    pop rx944_pos, rx944_bstack
    pop $I19, rx944_bstack
    lt rx944_pos, -1, rx944_done2532
    lt rx944_pos, 0, rx944_fail2534
    eq $I19, 0, rx944_fail2534
    nqp_islist $I20, rx944_cstack
    unless $I20, rx944_jump2535
    elements $I18, rx944_bstack
    le $I18, 0, rx944_cut2536
    dec $I18
    set $I18, rx944_bstack[$I18]
  rx944_cut2536:
    assign rx944_cstack, $I18
  rx944_jump2535:
    jump $I19
  rx944_done2532:
    rx944_cur."!cursor_fail"()
    .return (rx944_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1346233478.067_caps" :subid("cuid_memo_257_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1346233478.067_nfa" :subid("cuid_memo_258_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 92
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "quotemod_check"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 0
    push $P515, $P516
    box $P517, 0
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_161_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx946_tgt
    .local int rx946_pos
    .local int rx946_off
    .local int rx946_eos
    .local int rx946_rep
    .local pmc rx946_cur
    .local pmc rx946_curclass
    .local pmc rx946_bstack
    .local pmc rx946_cstack
    (rx946_cur, rx946_tgt, rx946_pos, rx946_curclass, rx946_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx946_cur
    length rx946_eos, rx946_tgt
    eq $I19, 1, rx946_restart2543
    gt rx946_pos, rx946_eos, rx946_fail2544
    repr_get_attr_int $I11, self, rx946_curclass, "$!from"
    ne $I11, -1, rxscan947_done2550
    goto rxscan947_scan2549
  rxscan947_loop2548:
    inc rx946_pos
    gt rx946_pos, rx946_eos, rx946_fail2544
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!from", rx946_pos
  rxscan947_scan2549:
    nqp_rxmark rx946_bstack, rxscan947_loop2548, rx946_pos, 0
  rxscan947_done2550:
    add $I11, rx946_pos, 1
    gt $I11, rx946_eos, rx946_fail2544
    substr $S10, rx946_tgt, rx946_pos, 1
    ne $S10, ucs4:"(", rx946_fail2544
    add rx946_pos, 1
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!pos", rx946_pos
    $P11 = rx946_cur."ws"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2544
    repr_get_attr_int rx946_pos, $P11, rx946_curclass, "$!pos"
    nqp_rxmark rx946_bstack, rxquantr949_done2553, rx946_pos, 0
  rxquantr949_loop2552:
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!pos", rx946_pos
    $P11 = rx946_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2544
    goto rxsubrule950_pass2554
  rxsubrule950_back2555:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2544
  rxsubrule950_pass2554:
    rx946_cstack = rx946_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule950_back2555
    push rx946_bstack, $I11
    push rx946_bstack, 0
    push rx946_bstack, rx946_pos
    elements $I11, rx946_cstack
    push rx946_bstack, $I11
    repr_get_attr_int rx946_pos, $P11, rx946_curclass, "$!pos"
    nqp_rxpeek $I19, rx946_bstack, rxquantr949_done2553
    inc $I19
    inc $I19
    set rx946_rep, rx946_bstack[$I19]
    nqp_rxcommit rx946_bstack, rxquantr949_done2553
    inc rx946_rep
  rxquantr949_done2553:
    add $I11, rx946_pos, 1
    gt $I11, rx946_eos, rx946_fail2544
    substr $S10, rx946_tgt, rx946_pos, 1
    ne $S10, ucs4:")", rx946_fail2544
    add rx946_pos, 1
    rx946_cur."!cursor_pass"(rx946_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx946_cur)
  rx946_restart2543:
    repr_get_attr_obj rx946_cstack, rx946_cur, rx946_curclass, "$!cstack"
  rx946_fail2544:
    unless rx946_bstack, rx946_done2542
    pop $I19, rx946_bstack
    if_null rx946_cstack, rx946_cstack_done2547
    unless rx946_cstack, rx946_cstack_done2547
    dec $I19
    set $P11, rx946_cstack[$I19]
  rx946_cstack_done2547:
    pop rx946_rep, rx946_bstack
    pop rx946_pos, rx946_bstack
    pop $I19, rx946_bstack
    lt rx946_pos, -1, rx946_done2542
    lt rx946_pos, 0, rx946_fail2544
    eq $I19, 0, rx946_fail2544
    nqp_islist $I20, rx946_cstack
    unless $I20, rx946_jump2545
    elements $I18, rx946_bstack
    le $I18, 0, rx946_cut2546
    dec $I18
    set $I18, rx946_bstack[$I18]
  rx946_cut2546:
    assign rx946_cstack, $I18
  rx946_jump2545:
    jump $I19
  rx946_done2542:
    rx946_cur."!cursor_fail"()
    .return (rx946_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1346233478.067_caps" :subid("cuid_memo_259_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 2
    set $P501["EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1346233478.067_nfa" :subid("cuid_memo_260_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 40
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "ws"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "EXPR"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    box $P515, 1
    push $P511, $P515
    box $P516, 0
    push $P511, $P516
    box $P517, 4
    push $P511, $P517
    push $P501, $P511
    new $P518, 'ResizablePMCArray'
    box $P519, 2
    push $P518, $P519
    box $P520, 41
    push $P518, $P520
    box $P521, 0
    push $P518, $P521
    push $P501, $P518
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_162_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx951_tgt
    .local int rx951_pos
    .local int rx951_off
    .local int rx951_eos
    .local int rx951_rep
    .local pmc rx951_cur
    .local pmc rx951_curclass
    .local pmc rx951_bstack
    .local pmc rx951_cstack
    (rx951_cur, rx951_tgt, rx951_pos, rx951_curclass, rx951_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx951_cur
    length rx951_eos, rx951_tgt
    eq $I19, 1, rx951_restart2558
    gt rx951_pos, rx951_eos, rx951_fail2559
    repr_get_attr_int $I11, self, rx951_curclass, "$!from"
    ne $I11, -1, rxscan952_done2565
    goto rxscan952_scan2564
  rxscan952_loop2563:
    inc rx951_pos
    gt rx951_pos, rx951_eos, rx951_fail2559
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!from", rx951_pos
  rxscan952_scan2564:
    nqp_rxmark rx951_bstack, rxscan952_loop2563, rx951_pos, 0
  rxscan952_done2565:
    add $I11, rx951_pos, 1
    gt $I11, rx951_eos, rx951_fail2559
    substr $S10, rx951_tgt, rx951_pos, 1
    ne $S10, ucs4:"[", rx951_fail2559
    add rx951_pos, 1
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."ws"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2559
    repr_get_attr_int rx951_pos, $P11, rx951_curclass, "$!pos"
    nqp_rxmark rx951_bstack, rxquantr954_done2568, rx951_pos, 0
  rxquantr954_loop2567:
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2559
    goto rxsubrule955_pass2569
  rxsubrule955_back2570:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2559
  rxsubrule955_pass2569:
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule955_back2570
    push rx951_bstack, $I11
    push rx951_bstack, 0
    push rx951_bstack, rx951_pos
    elements $I11, rx951_cstack
    push rx951_bstack, $I11
    repr_get_attr_int rx951_pos, $P11, rx951_curclass, "$!pos"
    nqp_rxpeek $I19, rx951_bstack, rxquantr954_done2568
    inc $I19
    inc $I19
    set rx951_rep, rx951_bstack[$I19]
    nqp_rxcommit rx951_bstack, rxquantr954_done2568
    inc rx951_rep
  rxquantr954_done2568:
    add $I11, rx951_pos, 1
    gt $I11, rx951_eos, rx951_fail2559
    substr $S10, rx951_tgt, rx951_pos, 1
    ne $S10, ucs4:"]", rx951_fail2559
    add rx951_pos, 1
    rx951_cur."!cursor_pass"(rx951_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx951_cur)
  rx951_restart2558:
    repr_get_attr_obj rx951_cstack, rx951_cur, rx951_curclass, "$!cstack"
  rx951_fail2559:
    unless rx951_bstack, rx951_done2557
    pop $I19, rx951_bstack
    if_null rx951_cstack, rx951_cstack_done2562
    unless rx951_cstack, rx951_cstack_done2562
    dec $I19
    set $P11, rx951_cstack[$I19]
  rx951_cstack_done2562:
    pop rx951_rep, rx951_bstack
    pop rx951_pos, rx951_bstack
    pop $I19, rx951_bstack
    lt rx951_pos, -1, rx951_done2557
    lt rx951_pos, 0, rx951_fail2559
    eq $I19, 0, rx951_fail2559
    nqp_islist $I20, rx951_cstack
    unless $I20, rx951_jump2560
    elements $I18, rx951_bstack
    le $I18, 0, rx951_cut2561
    dec $I18
    set $I18, rx951_bstack[$I18]
  rx951_cut2561:
    assign rx951_cstack, $I18
  rx951_jump2560:
    jump $I19
  rx951_done2557:
    rx951_cur."!cursor_fail"()
    .return (rx951_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1346233478.067_caps" :subid("cuid_memo_261_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 2
    set $P501["EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1346233478.067_nfa" :subid("cuid_memo_262_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 91
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "ws"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "EXPR"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    box $P515, 1
    push $P511, $P515
    box $P516, 0
    push $P511, $P516
    box $P517, 4
    push $P511, $P517
    push $P501, $P511
    new $P518, 'ResizablePMCArray'
    box $P519, 2
    push $P518, $P519
    box $P520, 93
    push $P518, $P520
    box $P521, 0
    push $P518, $P521
    push $P501, $P518
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_163_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx956_tgt
    .local int rx956_pos
    .local int rx956_off
    .local int rx956_eos
    .local int rx956_rep
    .local pmc rx956_cur
    .local pmc rx956_curclass
    .local pmc rx956_bstack
    .local pmc rx956_cstack
    (rx956_cur, rx956_tgt, rx956_pos, rx956_curclass, rx956_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx956_cur
    length rx956_eos, rx956_tgt
    eq $I19, 1, rx956_restart2573
    gt rx956_pos, rx956_eos, rx956_fail2574
    repr_get_attr_int $I11, self, rx956_curclass, "$!from"
    ne $I11, -1, rxscan957_done2580
    goto rxscan957_scan2579
  rxscan957_loop2578:
    inc rx956_pos
    gt rx956_pos, rx956_eos, rx956_fail2574
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!from", rx956_pos
  rxscan957_scan2579:
    nqp_rxmark rx956_bstack, rxscan957_loop2578, rx956_pos, 0
  rxscan957_done2580:
    ge rx956_pos, rx956_eos, rx956_fail2574
    substr $S11, rx956_tgt, rx956_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx956_fail2574
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!pos", rx956_pos
    $P11 = rx956_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx956_curclass, "$!pos"
    lt $I11, 0, rx956_fail2574
    nqp_rxmark rx956_bstack, rxsubrule958_pass2581, -1, 0
  rxsubrule958_pass2581:
    rx956_cstack = rx956_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx956_pos, $P11, rx956_curclass, "$!pos"
    rx956_cur."!cursor_pass"(rx956_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx956_cur)
  rx956_restart2573:
    repr_get_attr_obj rx956_cstack, rx956_cur, rx956_curclass, "$!cstack"
  rx956_fail2574:
    unless rx956_bstack, rx956_done2572
    pop $I19, rx956_bstack
    if_null rx956_cstack, rx956_cstack_done2577
    unless rx956_cstack, rx956_cstack_done2577
    dec $I19
    set $P11, rx956_cstack[$I19]
  rx956_cstack_done2577:
    pop rx956_rep, rx956_bstack
    pop rx956_pos, rx956_bstack
    pop $I19, rx956_bstack
    lt rx956_pos, -1, rx956_done2572
    lt rx956_pos, 0, rx956_fail2574
    eq $I19, 0, rx956_fail2574
    nqp_islist $I20, rx956_cstack
    unless $I20, rx956_jump2575
    elements $I18, rx956_bstack
    le $I18, 0, rx956_cut2576
    dec $I18
    set $I18, rx956_bstack[$I18]
  rx956_cut2576:
    assign rx956_cstack, $I18
  rx956_jump2575:
    jump $I19
  rx956_done2572:
    rx956_cur."!cursor_fail"()
    .return (rx956_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1346233478.067_caps" :subid("cuid_memo_263_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["quote_EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1346233478.067_nfa" :subid("cuid_memo_264_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "<"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_164_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx959_tgt
    .local int rx959_pos
    .local int rx959_off
    .local int rx959_eos
    .local int rx959_rep
    .local pmc rx959_cur
    .local pmc rx959_curclass
    .local pmc rx959_bstack
    .local pmc rx959_cstack
    (rx959_cur, rx959_tgt, rx959_pos, rx959_curclass, rx959_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx959_cur
    length rx959_eos, rx959_tgt
    eq $I19, 1, rx959_restart2584
    gt rx959_pos, rx959_eos, rx959_fail2585
    repr_get_attr_int $I11, self, rx959_curclass, "$!from"
    ne $I11, -1, rxscan960_done2591
    goto rxscan960_scan2590
  rxscan960_loop2589:
    inc rx959_pos
    gt rx959_pos, rx959_eos, rx959_fail2585
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!from", rx959_pos
  rxscan960_scan2590:
    nqp_rxmark rx959_bstack, rxscan960_loop2589, rx959_pos, 0
  rxscan960_done2591:
    ge rx959_pos, rx959_eos, rx959_fail2585
    substr $S11, rx959_tgt, rx959_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx959_fail2585
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2585
    nqp_rxmark rx959_bstack, rxsubrule961_pass2592, -1, 0
  rxsubrule961_pass2592:
    rx959_cstack = rx959_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx959_pos, $P11, rx959_curclass, "$!pos"
    rx959_cur."!cursor_pass"(rx959_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx959_cur)
  rx959_restart2584:
    repr_get_attr_obj rx959_cstack, rx959_cur, rx959_curclass, "$!cstack"
  rx959_fail2585:
    unless rx959_bstack, rx959_done2583
    pop $I19, rx959_bstack
    if_null rx959_cstack, rx959_cstack_done2588
    unless rx959_cstack, rx959_cstack_done2588
    dec $I19
    set $P11, rx959_cstack[$I19]
  rx959_cstack_done2588:
    pop rx959_rep, rx959_bstack
    pop rx959_pos, rx959_bstack
    pop $I19, rx959_bstack
    lt rx959_pos, -1, rx959_done2583
    lt rx959_pos, 0, rx959_fail2585
    eq $I19, 0, rx959_fail2585
    nqp_islist $I20, rx959_cstack
    unless $I20, rx959_jump2586
    elements $I18, rx959_bstack
    le $I18, 0, rx959_cut2587
    dec $I18
    set $I18, rx959_bstack[$I18]
  rx959_cut2587:
    assign rx959_cstack, $I18
  rx959_jump2586:
    jump $I19
  rx959_done2583:
    rx959_cur."!cursor_fail"()
    .return (rx959_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1346233478.067_caps" :subid("cuid_memo_265_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["quote_EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1346233478.067_nfa" :subid("cuid_memo_266_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, utf8:"\x{ab}"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_165_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx962_tgt
    .local int rx962_pos
    .local int rx962_off
    .local int rx962_eos
    .local int rx962_rep
    .local pmc rx962_cur
    .local pmc rx962_curclass
    .local pmc rx962_bstack
    .local pmc rx962_cstack
    (rx962_cur, rx962_tgt, rx962_pos, rx962_curclass, rx962_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx962_cur
    length rx962_eos, rx962_tgt
    eq $I19, 1, rx962_restart2595
    gt rx962_pos, rx962_eos, rx962_fail2596
    repr_get_attr_int $I11, self, rx962_curclass, "$!from"
    ne $I11, -1, rxscan963_done2602
    goto rxscan963_scan2601
  rxscan963_loop2600:
    inc rx962_pos
    gt rx962_pos, rx962_eos, rx962_fail2596
    repr_bind_attr_int rx962_cur, rx962_curclass, "$!from", rx962_pos
  rxscan963_scan2601:
    nqp_rxmark rx962_bstack, rxscan963_loop2600, rx962_pos, 0
  rxscan963_done2602:
    ge rx962_pos, rx962_eos, rx962_fail2596
    substr $S11, rx962_tgt, rx962_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx962_fail2596
    repr_bind_attr_int rx962_cur, rx962_curclass, "$!pos", rx962_pos
    $P11 = rx962_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx962_curclass, "$!pos"
    lt $I11, 0, rx962_fail2596
    nqp_rxmark rx962_bstack, rxsubrule964_pass2603, -1, 0
  rxsubrule964_pass2603:
    rx962_cstack = rx962_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx962_pos, $P11, rx962_curclass, "$!pos"
    rx962_cur."!cursor_pass"(rx962_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx962_cur)
  rx962_restart2595:
    repr_get_attr_obj rx962_cstack, rx962_cur, rx962_curclass, "$!cstack"
  rx962_fail2596:
    unless rx962_bstack, rx962_done2594
    pop $I19, rx962_bstack
    if_null rx962_cstack, rx962_cstack_done2599
    unless rx962_cstack, rx962_cstack_done2599
    dec $I19
    set $P11, rx962_cstack[$I19]
  rx962_cstack_done2599:
    pop rx962_rep, rx962_bstack
    pop rx962_pos, rx962_bstack
    pop $I19, rx962_bstack
    lt rx962_pos, -1, rx962_done2594
    lt rx962_pos, 0, rx962_fail2596
    eq $I19, 0, rx962_fail2596
    nqp_islist $I20, rx962_cstack
    unless $I20, rx962_jump2597
    elements $I18, rx962_bstack
    le $I18, 0, rx962_cut2598
    dec $I18
    set $I18, rx962_bstack[$I18]
  rx962_cut2598:
    assign rx962_cstack, $I18
  rx962_jump2597:
    jump $I19
  rx962_done2594:
    rx962_cur."!cursor_fail"()
    .return (rx962_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1346233478.067_caps" :subid("cuid_memo_267_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["pblock"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1346233478.067_nfa" :subid("cuid_memo_268_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "{"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_166_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx965_tgt
    .local int rx965_pos
    .local int rx965_off
    .local int rx965_eos
    .local int rx965_rep
    .local pmc rx965_cur
    .local pmc rx965_curclass
    .local pmc rx965_bstack
    .local pmc rx965_cstack
    (rx965_cur, rx965_tgt, rx965_pos, rx965_curclass, rx965_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx965_cur
    length rx965_eos, rx965_tgt
    eq $I19, 1, rx965_restart2606
    gt rx965_pos, rx965_eos, rx965_fail2607
    repr_get_attr_int $I11, self, rx965_curclass, "$!from"
    ne $I11, -1, rxscan966_done2613
    goto rxscan966_scan2612
  rxscan966_loop2611:
    inc rx965_pos
    gt rx965_pos, rx965_eos, rx965_fail2607
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!from", rx965_pos
  rxscan966_scan2612:
    nqp_rxmark rx965_bstack, rxscan966_loop2611, rx965_pos, 0
  rxscan966_done2613:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2607
    nqp_rxmark rx965_bstack, rxsubrule967_pass2614, -1, 0
  rxsubrule967_pass2614:
    rx965_cstack = rx965_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
    add $I11, rx965_pos, 1
    gt $I11, rx965_eos, rx965_fail2607
    substr $S10, rx965_tgt, rx965_pos, 1
    ne $S10, ucs4:"(", rx965_fail2607
    add rx965_pos, 1
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2607
    nqp_rxmark rx965_bstack, rxsubrule968_pass2615, -1, 0
  rxsubrule968_pass2615:
    rx965_cstack = rx965_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
  alt969_02617:
    nqp_rxmark rx965_bstack, alt969_12618, rx965_pos, 0
    add $I11, rx965_pos, 1
    gt $I11, rx965_eos, rx965_fail2607
    substr $S10, rx965_tgt, rx965_pos, 1
    ne $S10, ucs4:")", rx965_fail2607
    add rx965_pos, 1
    goto alt969_end2616
  alt969_12618:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2607
    goto rxsubrule970_pass2619
  rxsubrule970_back2620:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2607
  rxsubrule970_pass2619:
    rx965_cstack = rx965_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule970_back2620
    push rx965_bstack, $I11
    push rx965_bstack, 0
    push rx965_bstack, rx965_pos
    elements $I11, rx965_cstack
    push rx965_bstack, $I11
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
  alt969_end2616:
    rx965_cur."!cursor_pass"(rx965_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx965_cur)
  rx965_restart2606:
    repr_get_attr_obj rx965_cstack, rx965_cur, rx965_curclass, "$!cstack"
  rx965_fail2607:
    unless rx965_bstack, rx965_done2605
    pop $I19, rx965_bstack
    if_null rx965_cstack, rx965_cstack_done2610
    unless rx965_cstack, rx965_cstack_done2610
    dec $I19
    set $P11, rx965_cstack[$I19]
  rx965_cstack_done2610:
    pop rx965_rep, rx965_bstack
    pop rx965_pos, rx965_bstack
    pop $I19, rx965_bstack
    lt rx965_pos, -1, rx965_done2605
    lt rx965_pos, 0, rx965_fail2607
    eq $I19, 0, rx965_fail2607
    nqp_islist $I20, rx965_cstack
    unless $I20, rx965_jump2608
    elements $I18, rx965_bstack
    le $I18, 0, rx965_cut2609
    dec $I18
    set $I18, rx965_bstack[$I18]
  rx965_cut2609:
    assign rx965_cstack, $I18
  rx965_jump2608:
    jump $I19
  rx965_done2605:
    rx965_cur."!cursor_fail"()
    .return (rx965_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1346233478.067_caps" :subid("cuid_memo_269_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sigil"], $P502
    box $P503, 0
    set $P501["semilist"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1346233478.067_nfa" :subid("cuid_memo_270_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "sigil"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 40
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "semilist"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 0
    push $P515, $P516
    box $P517, 0
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_167_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1207
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx971_tgt
    .local int rx971_pos
    .local int rx971_off
    .local int rx971_eos
    .local int rx971_rep
    .local pmc rx971_cur
    .local pmc rx971_curclass
    .local pmc rx971_bstack
    .local pmc rx971_cstack
    (rx971_cur, rx971_tgt, rx971_pos, rx971_curclass, rx971_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx971_cur
    length rx971_eos, rx971_tgt
    eq $I19, 1, rx971_restart2623
    gt rx971_pos, rx971_eos, rx971_fail2624
    repr_get_attr_int $I11, self, rx971_curclass, "$!from"
    ne $I11, -1, rxscan972_done2630
    goto rxscan972_scan2629
  rxscan972_loop2628:
    inc rx971_pos
    gt rx971_pos, rx971_eos, rx971_fail2624
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!from", rx971_pos
  rxscan972_scan2629:
    nqp_rxmark rx971_bstack, rxscan972_loop2628, rx971_pos, 0
  rxscan972_done2630:
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."ws"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2624
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."statement"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2624
    nqp_rxmark rx971_bstack, rxsubrule974_pass2632, -1, 0
  rxsubrule974_pass2632:
    rx971_cstack = rx971_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."ws"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2624
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    rx971_cur."!cursor_pass"(rx971_pos, "semilist", 'backtrack'=>1)
    .return (rx971_cur)
  rx971_restart2623:
    repr_get_attr_obj rx971_cstack, rx971_cur, rx971_curclass, "$!cstack"
  rx971_fail2624:
    unless rx971_bstack, rx971_done2622
    pop $I19, rx971_bstack
    if_null rx971_cstack, rx971_cstack_done2627
    unless rx971_cstack, rx971_cstack_done2627
    dec $I19
    set $P11, rx971_cstack[$I19]
  rx971_cstack_done2627:
    pop rx971_rep, rx971_bstack
    pop rx971_pos, rx971_bstack
    pop $I19, rx971_bstack
    lt rx971_pos, -1, rx971_done2622
    lt rx971_pos, 0, rx971_fail2624
    eq $I19, 0, rx971_fail2624
    nqp_islist $I20, rx971_cstack
    unless $I20, rx971_jump2625
    elements $I18, rx971_bstack
    le $I18, 0, rx971_cut2626
    dec $I18
    set $I18, rx971_bstack[$I18]
  rx971_cut2626:
    assign rx971_cstack, $I18
  rx971_jump2625:
    jump $I19
  rx971_done2622:
    rx971_cur."!cursor_fail"()
    .return (rx971_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_167_1346233478.067_caps" :subid("cuid_memo_271_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["statement"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_168_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx976_tgt
    .local int rx976_pos
    .local int rx976_off
    .local int rx976_eos
    .local int rx976_rep
    .local pmc rx976_cur
    .local pmc rx976_curclass
    .local pmc rx976_bstack
    .local pmc rx976_cstack
    (rx976_cur, rx976_tgt, rx976_pos, rx976_curclass, rx976_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx976_cur
    length rx976_eos, rx976_tgt
    eq $I19, 1, rx976_restart2636
    gt rx976_pos, rx976_eos, rx976_fail2637
    repr_get_attr_int $I11, self, rx976_curclass, "$!from"
    ne $I11, -1, rxscan977_done2643
    goto rxscan977_scan2642
  rxscan977_loop2641:
    inc rx976_pos
    gt rx976_pos, rx976_eos, rx976_fail2637
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!from", rx976_pos
  rxscan977_scan2642:
    nqp_rxmark rx976_bstack, rxscan977_loop2641, rx976_pos, 0
  rxscan977_done2643:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    ge $I11, 0, rx976_fail2637
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."infix"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2637
    nqp_rxmark rx976_bstack, rxsubrule978_pass2644, -1, 0
  rxsubrule978_pass2644:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    rx976_cur."!cursor_pass"(rx976_pos, "infixish", 'backtrack'=>1)
    .return (rx976_cur)
  rx976_restart2636:
    repr_get_attr_obj rx976_cstack, rx976_cur, rx976_curclass, "$!cstack"
  rx976_fail2637:
    unless rx976_bstack, rx976_done2635
    pop $I19, rx976_bstack
    if_null rx976_cstack, rx976_cstack_done2640
    unless rx976_cstack, rx976_cstack_done2640
    dec $I19
    set $P11, rx976_cstack[$I19]
  rx976_cstack_done2640:
    pop rx976_rep, rx976_bstack
    pop rx976_pos, rx976_bstack
    pop $I19, rx976_bstack
    lt rx976_pos, -1, rx976_done2635
    lt rx976_pos, 0, rx976_fail2637
    eq $I19, 0, rx976_fail2637
    nqp_islist $I20, rx976_cstack
    unless $I20, rx976_jump2638
    elements $I18, rx976_bstack
    le $I18, 0, rx976_cut2639
    dec $I18
    set $I18, rx976_bstack[$I18]
  rx976_cut2639:
    assign rx976_cstack, $I18
  rx976_jump2638:
    jump $I19
  rx976_done2635:
    rx976_cur."!cursor_fail"()
    .return (rx976_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_168_1346233478.067_caps" :subid("cuid_memo_272_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["OPER"], $P502
    box $P503, 0
    set $P501["infix"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_169_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx979_tgt
    .local int rx979_pos
    .local int rx979_off
    .local int rx979_eos
    .local int rx979_rep
    .local pmc rx979_cur
    .local pmc rx979_curclass
    .local pmc rx979_bstack
    .local pmc rx979_cstack
    (rx979_cur, rx979_tgt, rx979_pos, rx979_curclass, rx979_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx979_cur
    length rx979_eos, rx979_tgt
    eq $I19, 1, rx979_restart2647
    gt rx979_pos, rx979_eos, rx979_fail2648
    repr_get_attr_int $I11, self, rx979_curclass, "$!from"
    ne $I11, -1, rxscan980_done2654
    goto rxscan980_scan2653
  rxscan980_loop2652:
    inc rx979_pos
    gt rx979_pos, rx979_eos, rx979_fail2648
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!from", rx979_pos
  rxscan980_scan2653:
    nqp_rxmark rx979_bstack, rxscan980_loop2652, rx979_pos, 0
  rxscan980_done2654:
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2648
    rx979_cur."!cursor_pass"(rx979_pos, "infixstopper", 'backtrack'=>1)
    .return (rx979_cur)
  rx979_restart2647:
    repr_get_attr_obj rx979_cstack, rx979_cur, rx979_curclass, "$!cstack"
  rx979_fail2648:
    unless rx979_bstack, rx979_done2646
    pop $I19, rx979_bstack
    if_null rx979_cstack, rx979_cstack_done2651
    unless rx979_cstack, rx979_cstack_done2651
    dec $I19
    set $P11, rx979_cstack[$I19]
  rx979_cstack_done2651:
    pop rx979_rep, rx979_bstack
    pop rx979_pos, rx979_bstack
    pop $I19, rx979_bstack
    lt rx979_pos, -1, rx979_done2646
    lt rx979_pos, 0, rx979_fail2648
    eq $I19, 0, rx979_fail2648
    nqp_islist $I20, rx979_cstack
    unless $I20, rx979_jump2649
    elements $I18, rx979_bstack
    le $I18, 0, rx979_cut2650
    dec $I18
    set $I18, rx979_bstack[$I18]
  rx979_cut2650:
    assign rx979_cstack, $I18
  rx979_jump2649:
    jump $I19
  rx979_done2646:
    rx979_cur."!cursor_fail"()
    .return (rx979_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1346233478.067_caps" :subid("cuid_memo_273_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1346233478.067_nfa" :subid("cuid_memo_274_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "lambda"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_170_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_curclass
    .local pmc rx981_bstack
    .local pmc rx981_cstack
    (rx981_cur, rx981_tgt, rx981_pos, rx981_curclass, rx981_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx981_cur
    length rx981_eos, rx981_tgt
    eq $I19, 1, rx981_restart2657
    gt rx981_pos, rx981_eos, rx981_fail2658
    repr_get_attr_int $I11, self, rx981_curclass, "$!from"
    ne $I11, -1, rxscan982_done2664
    goto rxscan982_scan2663
  rxscan982_loop2662:
    inc rx981_pos
    gt rx981_pos, rx981_eos, rx981_fail2658
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!from", rx981_pos
  rxscan982_scan2663:
    nqp_rxmark rx981_bstack, rxscan982_loop2662, rx981_pos, 0
  rxscan982_done2664:
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2658
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"[", rx981_fail2658
    add rx981_pos, 1
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."ws"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2658
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2658
    nqp_rxmark rx981_bstack, rxsubrule984_pass2666, -1, 0
  rxsubrule984_pass2666:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2658
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"]", rx981_fail2658
    add rx981_pos, 1
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2658
    nqp_rxmark rx981_bstack, rxsubrule985_pass2667, -1, 0
  rxsubrule985_pass2667:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    rx981_cur."!cursor_pass"(rx981_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx981_cur)
  rx981_restart2657:
    repr_get_attr_obj rx981_cstack, rx981_cur, rx981_curclass, "$!cstack"
  rx981_fail2658:
    unless rx981_bstack, rx981_done2656
    pop $I19, rx981_bstack
    if_null rx981_cstack, rx981_cstack_done2661
    unless rx981_cstack, rx981_cstack_done2661
    dec $I19
    set $P11, rx981_cstack[$I19]
  rx981_cstack_done2661:
    pop rx981_rep, rx981_bstack
    pop rx981_pos, rx981_bstack
    pop $I19, rx981_bstack
    lt rx981_pos, -1, rx981_done2656
    lt rx981_pos, 0, rx981_fail2658
    eq $I19, 0, rx981_fail2658
    nqp_islist $I20, rx981_cstack
    unless $I20, rx981_jump2659
    elements $I18, rx981_bstack
    le $I18, 0, rx981_cut2660
    dec $I18
    set $I18, rx981_bstack[$I18]
  rx981_cut2660:
    assign rx981_cstack, $I18
  rx981_jump2659:
    jump $I19
  rx981_done2656:
    rx981_cur."!cursor_fail"()
    .return (rx981_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1346233478.067_caps" :subid("cuid_memo_275_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["EXPR"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1346233478.067_nfa" :subid("cuid_memo_276_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 91
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "ws"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "EXPR"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 93
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 8
    push $P519, $P520
    box $P521, "O"
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_171_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx986_tgt
    .local int rx986_pos
    .local int rx986_off
    .local int rx986_eos
    .local int rx986_rep
    .local pmc rx986_cur
    .local pmc rx986_curclass
    .local pmc rx986_bstack
    .local pmc rx986_cstack
    (rx986_cur, rx986_tgt, rx986_pos, rx986_curclass, rx986_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx986_cur
    length rx986_eos, rx986_tgt
    eq $I19, 1, rx986_restart2670
    gt rx986_pos, rx986_eos, rx986_fail2671
    repr_get_attr_int $I11, self, rx986_curclass, "$!from"
    ne $I11, -1, rxscan987_done2677
    goto rxscan987_scan2676
  rxscan987_loop2675:
    inc rx986_pos
    gt rx986_pos, rx986_eos, rx986_fail2671
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!from", rx986_pos
  rxscan987_scan2676:
    nqp_rxmark rx986_bstack, rxscan987_loop2675, rx986_pos, 0
  rxscan987_done2677:
    add $I11, rx986_pos, 1
    gt $I11, rx986_eos, rx986_fail2671
    substr $S10, rx986_tgt, rx986_pos, 1
    ne $S10, ucs4:"{", rx986_fail2671
    add rx986_pos, 1
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."ws"()
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2671
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2671
    nqp_rxmark rx986_bstack, rxsubrule989_pass2679, -1, 0
  rxsubrule989_pass2679:
    rx986_cstack = rx986_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    add $I11, rx986_pos, 1
    gt $I11, rx986_eos, rx986_fail2671
    substr $S10, rx986_tgt, rx986_pos, 1
    ne $S10, ucs4:"}", rx986_fail2671
    add rx986_pos, 1
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2671
    nqp_rxmark rx986_bstack, rxsubrule990_pass2680, -1, 0
  rxsubrule990_pass2680:
    rx986_cstack = rx986_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    rx986_cur."!cursor_pass"(rx986_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx986_cur)
  rx986_restart2670:
    repr_get_attr_obj rx986_cstack, rx986_cur, rx986_curclass, "$!cstack"
  rx986_fail2671:
    unless rx986_bstack, rx986_done2669
    pop $I19, rx986_bstack
    if_null rx986_cstack, rx986_cstack_done2674
    unless rx986_cstack, rx986_cstack_done2674
    dec $I19
    set $P11, rx986_cstack[$I19]
  rx986_cstack_done2674:
    pop rx986_rep, rx986_bstack
    pop rx986_pos, rx986_bstack
    pop $I19, rx986_bstack
    lt rx986_pos, -1, rx986_done2669
    lt rx986_pos, 0, rx986_fail2671
    eq $I19, 0, rx986_fail2671
    nqp_islist $I20, rx986_cstack
    unless $I20, rx986_jump2672
    elements $I18, rx986_bstack
    le $I18, 0, rx986_cut2673
    dec $I18
    set $I18, rx986_bstack[$I18]
  rx986_cut2673:
    assign rx986_cstack, $I18
  rx986_jump2672:
    jump $I19
  rx986_done2669:
    rx986_cur."!cursor_fail"()
    .return (rx986_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1346233478.067_caps" :subid("cuid_memo_277_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["EXPR"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1346233478.067_nfa" :subid("cuid_memo_278_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 123
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "ws"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "EXPR"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 125
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 8
    push $P519, $P520
    box $P521, "O"
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_172_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx991_tgt
    .local int rx991_pos
    .local int rx991_off
    .local int rx991_eos
    .local int rx991_rep
    .local pmc rx991_cur
    .local pmc rx991_curclass
    .local pmc rx991_bstack
    .local pmc rx991_cstack
    (rx991_cur, rx991_tgt, rx991_pos, rx991_curclass, rx991_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx991_cur
    length rx991_eos, rx991_tgt
    eq $I19, 1, rx991_restart2683
    gt rx991_pos, rx991_eos, rx991_fail2684
    repr_get_attr_int $I11, self, rx991_curclass, "$!from"
    ne $I11, -1, rxscan992_done2690
    goto rxscan992_scan2689
  rxscan992_loop2688:
    inc rx991_pos
    gt rx991_pos, rx991_eos, rx991_fail2684
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!from", rx991_pos
  rxscan992_scan2689:
    nqp_rxmark rx991_bstack, rxscan992_loop2688, rx991_pos, 0
  rxscan992_done2690:
    ge rx991_pos, rx991_eos, rx991_fail2684
    substr $S11, rx991_tgt, rx991_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx991_fail2684
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail2684
    nqp_rxmark rx991_bstack, rxsubrule993_pass2691, -1, 0
  rxsubrule993_pass2691:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail2684
    nqp_rxmark rx991_bstack, rxsubrule994_pass2692, -1, 0
  rxsubrule994_pass2692:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    rx991_cur."!cursor_pass"(rx991_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx991_cur)
  rx991_restart2683:
    repr_get_attr_obj rx991_cstack, rx991_cur, rx991_curclass, "$!cstack"
  rx991_fail2684:
    unless rx991_bstack, rx991_done2682
    pop $I19, rx991_bstack
    if_null rx991_cstack, rx991_cstack_done2687
    unless rx991_cstack, rx991_cstack_done2687
    dec $I19
    set $P11, rx991_cstack[$I19]
  rx991_cstack_done2687:
    pop rx991_rep, rx991_bstack
    pop rx991_pos, rx991_bstack
    pop $I19, rx991_bstack
    lt rx991_pos, -1, rx991_done2682
    lt rx991_pos, 0, rx991_fail2684
    eq $I19, 0, rx991_fail2684
    nqp_islist $I20, rx991_cstack
    unless $I20, rx991_jump2685
    elements $I18, rx991_bstack
    le $I18, 0, rx991_cut2686
    dec $I18
    set $I18, rx991_bstack[$I18]
  rx991_cut2686:
    assign rx991_cstack, $I18
  rx991_jump2685:
    jump $I19
  rx991_done2682:
    rx991_cur."!cursor_fail"()
    .return (rx991_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1346233478.067_caps" :subid("cuid_memo_279_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["quote_EXPR"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1346233478.067_nfa" :subid("cuid_memo_280_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "<"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_173_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx995_tgt
    .local int rx995_pos
    .local int rx995_off
    .local int rx995_eos
    .local int rx995_rep
    .local pmc rx995_cur
    .local pmc rx995_curclass
    .local pmc rx995_bstack
    .local pmc rx995_cstack
    (rx995_cur, rx995_tgt, rx995_pos, rx995_curclass, rx995_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx995_cur
    length rx995_eos, rx995_tgt
    eq $I19, 1, rx995_restart2695
    gt rx995_pos, rx995_eos, rx995_fail2696
    repr_get_attr_int $I11, self, rx995_curclass, "$!from"
    ne $I11, -1, rxscan996_done2702
    goto rxscan996_scan2701
  rxscan996_loop2700:
    inc rx995_pos
    gt rx995_pos, rx995_eos, rx995_fail2696
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!from", rx995_pos
  rxscan996_scan2701:
    nqp_rxmark rx995_bstack, rxscan996_loop2700, rx995_pos, 0
  rxscan996_done2702:
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2696
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:"(", rx995_fail2696
    add rx995_pos, 1
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."ws"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2696
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2696
    nqp_rxmark rx995_bstack, rxsubrule998_pass2704, -1, 0
  rxsubrule998_pass2704:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2696
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:")", rx995_fail2696
    add rx995_pos, 1
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2696
    nqp_rxmark rx995_bstack, rxsubrule999_pass2705, -1, 0
  rxsubrule999_pass2705:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    rx995_cur."!cursor_pass"(rx995_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx995_cur)
  rx995_restart2695:
    repr_get_attr_obj rx995_cstack, rx995_cur, rx995_curclass, "$!cstack"
  rx995_fail2696:
    unless rx995_bstack, rx995_done2694
    pop $I19, rx995_bstack
    if_null rx995_cstack, rx995_cstack_done2699
    unless rx995_cstack, rx995_cstack_done2699
    dec $I19
    set $P11, rx995_cstack[$I19]
  rx995_cstack_done2699:
    pop rx995_rep, rx995_bstack
    pop rx995_pos, rx995_bstack
    pop $I19, rx995_bstack
    lt rx995_pos, -1, rx995_done2694
    lt rx995_pos, 0, rx995_fail2696
    eq $I19, 0, rx995_fail2696
    nqp_islist $I20, rx995_cstack
    unless $I20, rx995_jump2697
    elements $I18, rx995_bstack
    le $I18, 0, rx995_cut2698
    dec $I18
    set $I18, rx995_bstack[$I18]
  rx995_cut2698:
    assign rx995_cstack, $I18
  rx995_jump2697:
    jump $I19
  rx995_done2694:
    rx995_cur."!cursor_fail"()
    .return (rx995_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1346233478.067_caps" :subid("cuid_memo_281_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["arglist"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1346233478.067_nfa" :subid("cuid_memo_282_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 40
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "ws"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "arglist"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 41
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 8
    push $P519, $P520
    box $P521, "O"
    push $P519, $P521
    box $P522, 0
    push $P519, $P522
    push $P501, $P519
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_174_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1253
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1000_tgt
    .local int rx1000_pos
    .local int rx1000_off
    .local int rx1000_eos
    .local int rx1000_rep
    .local pmc rx1000_cur
    .local pmc rx1000_curclass
    .local pmc rx1000_bstack
    .local pmc rx1000_cstack
    (rx1000_cur, rx1000_tgt, rx1000_pos, rx1000_curclass, rx1000_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1000_cur
    length rx1000_eos, rx1000_tgt
    eq $I19, 1, rx1000_restart2708
    gt rx1000_pos, rx1000_eos, rx1000_fail2709
    repr_get_attr_int $I11, self, rx1000_curclass, "$!from"
    ne $I11, -1, rxscan1001_done2715
    goto rxscan1001_scan2714
  rxscan1001_loop2713:
    inc rx1000_pos
    gt rx1000_pos, rx1000_eos, rx1000_fail2709
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!from", rx1000_pos
  rxscan1001_scan2714:
    nqp_rxmark rx1000_bstack, rxscan1001_loop2713, rx1000_pos, 0
  rxscan1001_done2715:
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!pos", rx1000_pos
    $P11 = rx1000_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1000_curclass, "$!pos"
    lt $I11, 0, rx1000_fail2709
    nqp_rxmark rx1000_bstack, rxsubrule1002_pass2716, -1, 0
  rxsubrule1002_pass2716:
    rx1000_cstack = rx1000_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1000_pos, $P11, rx1000_curclass, "$!pos"
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!pos", rx1000_pos
    $P11 = rx1000_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1000_curclass, "$!pos"
    lt $I11, 0, rx1000_fail2709
    nqp_rxmark rx1000_bstack, rxsubrule1003_pass2717, -1, 0
  rxsubrule1003_pass2717:
    rx1000_cstack = rx1000_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1000_pos, $P11, rx1000_curclass, "$!pos"
    rx1000_cur."!cursor_pass"(rx1000_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1000_cur)
  rx1000_restart2708:
    repr_get_attr_obj rx1000_cstack, rx1000_cur, rx1000_curclass, "$!cstack"
  rx1000_fail2709:
    unless rx1000_bstack, rx1000_done2707
    pop $I19, rx1000_bstack
    if_null rx1000_cstack, rx1000_cstack_done2712
    unless rx1000_cstack, rx1000_cstack_done2712
    dec $I19
    set $P11, rx1000_cstack[$I19]
  rx1000_cstack_done2712:
    pop rx1000_rep, rx1000_bstack
    pop rx1000_pos, rx1000_bstack
    pop $I19, rx1000_bstack
    lt rx1000_pos, -1, rx1000_done2707
    lt rx1000_pos, 0, rx1000_fail2709
    eq $I19, 0, rx1000_fail2709
    nqp_islist $I20, rx1000_cstack
    unless $I20, rx1000_jump2710
    elements $I18, rx1000_bstack
    le $I18, 0, rx1000_cut2711
    dec $I18
    set $I18, rx1000_bstack[$I18]
  rx1000_cut2711:
    assign rx1000_cstack, $I18
  rx1000_jump2710:
    jump $I19
  rx1000_done2707:
    rx1000_cur."!cursor_fail"()
    .return (rx1000_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1346233478.067_caps" :subid("cuid_memo_283_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["dotty"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1346233478.067_nfa" :subid("cuid_memo_284_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "dotty"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_175_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1004_tgt
    .local int rx1004_pos
    .local int rx1004_off
    .local int rx1004_eos
    .local int rx1004_rep
    .local pmc rx1004_cur
    .local pmc rx1004_curclass
    .local pmc rx1004_bstack
    .local pmc rx1004_cstack
    (rx1004_cur, rx1004_tgt, rx1004_pos, rx1004_curclass, rx1004_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1004_cur
    length rx1004_eos, rx1004_tgt
    eq $I19, 1, rx1004_restart2720
    gt rx1004_pos, rx1004_eos, rx1004_fail2721
    repr_get_attr_int $I11, self, rx1004_curclass, "$!from"
    ne $I11, -1, rxscan1005_done2727
    goto rxscan1005_scan2726
  rxscan1005_loop2725:
    inc rx1004_pos
    gt rx1004_pos, rx1004_eos, rx1004_fail2721
    repr_bind_attr_int rx1004_cur, rx1004_curclass, "$!from", rx1004_pos
  rxscan1005_scan2726:
    nqp_rxmark rx1004_bstack, rxscan1005_loop2725, rx1004_pos, 0
  rxscan1005_done2727:
    nqp_rxmark rx1004_bstack, rxcap1006_fail2729, rx1004_pos, 0
    add $I11, rx1004_pos, 2
    gt $I11, rx1004_eos, rx1004_fail2721
    substr $S10, rx1004_tgt, rx1004_pos, 2
    ne $S10, ucs4:"++", rx1004_fail2721
    add rx1004_pos, 2
    nqp_rxpeek $I19, rx1004_bstack, rxcap1006_fail2729
    inc $I19
    set $I11, rx1004_bstack[$I19]
    $P11 = rx1004_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1004_pos)
    rx1004_cstack = rx1004_cur."!cursor_capture"($P11, "sym")
    goto rxcap1006_done2728
  rxcap1006_fail2729:
    goto rx1004_fail2721
  rxcap1006_done2728:
    repr_bind_attr_int rx1004_cur, rx1004_curclass, "$!pos", rx1004_pos
    $P11 = rx1004_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1004_curclass, "$!pos"
    lt $I11, 0, rx1004_fail2721
    nqp_rxmark rx1004_bstack, rxsubrule1007_pass2730, -1, 0
  rxsubrule1007_pass2730:
    rx1004_cstack = rx1004_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1004_pos, $P11, rx1004_curclass, "$!pos"
    rx1004_cur."!cursor_pass"(rx1004_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1004_cur)
  rx1004_restart2720:
    repr_get_attr_obj rx1004_cstack, rx1004_cur, rx1004_curclass, "$!cstack"
  rx1004_fail2721:
    unless rx1004_bstack, rx1004_done2719
    pop $I19, rx1004_bstack
    if_null rx1004_cstack, rx1004_cstack_done2724
    unless rx1004_cstack, rx1004_cstack_done2724
    dec $I19
    set $P11, rx1004_cstack[$I19]
  rx1004_cstack_done2724:
    pop rx1004_rep, rx1004_bstack
    pop rx1004_pos, rx1004_bstack
    pop $I19, rx1004_bstack
    lt rx1004_pos, -1, rx1004_done2719
    lt rx1004_pos, 0, rx1004_fail2721
    eq $I19, 0, rx1004_fail2721
    nqp_islist $I20, rx1004_cstack
    unless $I20, rx1004_jump2722
    elements $I18, rx1004_bstack
    le $I18, 0, rx1004_cut2723
    dec $I18
    set $I18, rx1004_bstack[$I18]
  rx1004_cut2723:
    assign rx1004_cstack, $I18
  rx1004_jump2722:
    jump $I19
  rx1004_done2719:
    rx1004_cur."!cursor_fail"()
    .return (rx1004_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1346233478.067_caps" :subid("cuid_memo_285_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1346233478.067_nfa" :subid("cuid_memo_286_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 43
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 43
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_176_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1008_tgt
    .local int rx1008_pos
    .local int rx1008_off
    .local int rx1008_eos
    .local int rx1008_rep
    .local pmc rx1008_cur
    .local pmc rx1008_curclass
    .local pmc rx1008_bstack
    .local pmc rx1008_cstack
    (rx1008_cur, rx1008_tgt, rx1008_pos, rx1008_curclass, rx1008_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1008_cur
    length rx1008_eos, rx1008_tgt
    eq $I19, 1, rx1008_restart2733
    gt rx1008_pos, rx1008_eos, rx1008_fail2734
    repr_get_attr_int $I11, self, rx1008_curclass, "$!from"
    ne $I11, -1, rxscan1009_done2740
    goto rxscan1009_scan2739
  rxscan1009_loop2738:
    inc rx1008_pos
    gt rx1008_pos, rx1008_eos, rx1008_fail2734
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!from", rx1008_pos
  rxscan1009_scan2739:
    nqp_rxmark rx1008_bstack, rxscan1009_loop2738, rx1008_pos, 0
  rxscan1009_done2740:
    nqp_rxmark rx1008_bstack, rxcap1010_fail2742, rx1008_pos, 0
    add $I11, rx1008_pos, 2
    gt $I11, rx1008_eos, rx1008_fail2734
    substr $S10, rx1008_tgt, rx1008_pos, 2
    ne $S10, ucs4:"--", rx1008_fail2734
    add rx1008_pos, 2
    nqp_rxpeek $I19, rx1008_bstack, rxcap1010_fail2742
    inc $I19
    set $I11, rx1008_bstack[$I19]
    $P11 = rx1008_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1008_pos)
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "sym")
    goto rxcap1010_done2741
  rxcap1010_fail2742:
    goto rx1008_fail2734
  rxcap1010_done2741:
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2734
    nqp_rxmark rx1008_bstack, rxsubrule1011_pass2743, -1, 0
  rxsubrule1011_pass2743:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    rx1008_cur."!cursor_pass"(rx1008_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1008_cur)
  rx1008_restart2733:
    repr_get_attr_obj rx1008_cstack, rx1008_cur, rx1008_curclass, "$!cstack"
  rx1008_fail2734:
    unless rx1008_bstack, rx1008_done2732
    pop $I19, rx1008_bstack
    if_null rx1008_cstack, rx1008_cstack_done2737
    unless rx1008_cstack, rx1008_cstack_done2737
    dec $I19
    set $P11, rx1008_cstack[$I19]
  rx1008_cstack_done2737:
    pop rx1008_rep, rx1008_bstack
    pop rx1008_pos, rx1008_bstack
    pop $I19, rx1008_bstack
    lt rx1008_pos, -1, rx1008_done2732
    lt rx1008_pos, 0, rx1008_fail2734
    eq $I19, 0, rx1008_fail2734
    nqp_islist $I20, rx1008_cstack
    unless $I20, rx1008_jump2735
    elements $I18, rx1008_bstack
    le $I18, 0, rx1008_cut2736
    dec $I18
    set $I18, rx1008_bstack[$I18]
  rx1008_cut2736:
    assign rx1008_cstack, $I18
  rx1008_jump2735:
    jump $I19
  rx1008_done2732:
    rx1008_cur."!cursor_fail"()
    .return (rx1008_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1346233478.067_caps" :subid("cuid_memo_287_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1346233478.067_nfa" :subid("cuid_memo_288_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 45
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 45
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_177_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1012_tgt
    .local int rx1012_pos
    .local int rx1012_off
    .local int rx1012_eos
    .local int rx1012_rep
    .local pmc rx1012_cur
    .local pmc rx1012_curclass
    .local pmc rx1012_bstack
    .local pmc rx1012_cstack
    (rx1012_cur, rx1012_tgt, rx1012_pos, rx1012_curclass, rx1012_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1012_cur
    length rx1012_eos, rx1012_tgt
    eq $I19, 1, rx1012_restart2746
    gt rx1012_pos, rx1012_eos, rx1012_fail2747
    repr_get_attr_int $I11, self, rx1012_curclass, "$!from"
    ne $I11, -1, rxscan1013_done2753
    goto rxscan1013_scan2752
  rxscan1013_loop2751:
    inc rx1012_pos
    gt rx1012_pos, rx1012_eos, rx1012_fail2747
    repr_bind_attr_int rx1012_cur, rx1012_curclass, "$!from", rx1012_pos
  rxscan1013_scan2752:
    nqp_rxmark rx1012_bstack, rxscan1013_loop2751, rx1012_pos, 0
  rxscan1013_done2753:
    nqp_rxmark rx1012_bstack, rxcap1014_fail2755, rx1012_pos, 0
    add $I11, rx1012_pos, 2
    gt $I11, rx1012_eos, rx1012_fail2747
    substr $S10, rx1012_tgt, rx1012_pos, 2
    ne $S10, ucs4:"++", rx1012_fail2747
    add rx1012_pos, 2
    nqp_rxpeek $I19, rx1012_bstack, rxcap1014_fail2755
    inc $I19
    set $I11, rx1012_bstack[$I19]
    $P11 = rx1012_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1012_pos)
    rx1012_cstack = rx1012_cur."!cursor_capture"($P11, "sym")
    goto rxcap1014_done2754
  rxcap1014_fail2755:
    goto rx1012_fail2747
  rxcap1014_done2754:
    repr_bind_attr_int rx1012_cur, rx1012_curclass, "$!pos", rx1012_pos
    $P11 = rx1012_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1012_curclass, "$!pos"
    lt $I11, 0, rx1012_fail2747
    nqp_rxmark rx1012_bstack, rxsubrule1015_pass2756, -1, 0
  rxsubrule1015_pass2756:
    rx1012_cstack = rx1012_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1012_pos, $P11, rx1012_curclass, "$!pos"
    rx1012_cur."!cursor_pass"(rx1012_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1012_cur)
  rx1012_restart2746:
    repr_get_attr_obj rx1012_cstack, rx1012_cur, rx1012_curclass, "$!cstack"
  rx1012_fail2747:
    unless rx1012_bstack, rx1012_done2745
    pop $I19, rx1012_bstack
    if_null rx1012_cstack, rx1012_cstack_done2750
    unless rx1012_cstack, rx1012_cstack_done2750
    dec $I19
    set $P11, rx1012_cstack[$I19]
  rx1012_cstack_done2750:
    pop rx1012_rep, rx1012_bstack
    pop rx1012_pos, rx1012_bstack
    pop $I19, rx1012_bstack
    lt rx1012_pos, -1, rx1012_done2745
    lt rx1012_pos, 0, rx1012_fail2747
    eq $I19, 0, rx1012_fail2747
    nqp_islist $I20, rx1012_cstack
    unless $I20, rx1012_jump2748
    elements $I18, rx1012_bstack
    le $I18, 0, rx1012_cut2749
    dec $I18
    set $I18, rx1012_bstack[$I18]
  rx1012_cut2749:
    assign rx1012_cstack, $I18
  rx1012_jump2748:
    jump $I19
  rx1012_done2745:
    rx1012_cur."!cursor_fail"()
    .return (rx1012_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1346233478.067_caps" :subid("cuid_memo_289_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1346233478.067_nfa" :subid("cuid_memo_290_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 43
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 43
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_178_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1259
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1016_tgt
    .local int rx1016_pos
    .local int rx1016_off
    .local int rx1016_eos
    .local int rx1016_rep
    .local pmc rx1016_cur
    .local pmc rx1016_curclass
    .local pmc rx1016_bstack
    .local pmc rx1016_cstack
    (rx1016_cur, rx1016_tgt, rx1016_pos, rx1016_curclass, rx1016_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1016_cur
    length rx1016_eos, rx1016_tgt
    eq $I19, 1, rx1016_restart2759
    gt rx1016_pos, rx1016_eos, rx1016_fail2760
    repr_get_attr_int $I11, self, rx1016_curclass, "$!from"
    ne $I11, -1, rxscan1017_done2766
    goto rxscan1017_scan2765
  rxscan1017_loop2764:
    inc rx1016_pos
    gt rx1016_pos, rx1016_eos, rx1016_fail2760
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!from", rx1016_pos
  rxscan1017_scan2765:
    nqp_rxmark rx1016_bstack, rxscan1017_loop2764, rx1016_pos, 0
  rxscan1017_done2766:
    nqp_rxmark rx1016_bstack, rxcap1018_fail2768, rx1016_pos, 0
    add $I11, rx1016_pos, 2
    gt $I11, rx1016_eos, rx1016_fail2760
    substr $S10, rx1016_tgt, rx1016_pos, 2
    ne $S10, ucs4:"--", rx1016_fail2760
    add rx1016_pos, 2
    nqp_rxpeek $I19, rx1016_bstack, rxcap1018_fail2768
    inc $I19
    set $I11, rx1016_bstack[$I19]
    $P11 = rx1016_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1016_pos)
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "sym")
    goto rxcap1018_done2767
  rxcap1018_fail2768:
    goto rx1016_fail2760
  rxcap1018_done2767:
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!pos", rx1016_pos
    $P11 = rx1016_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1016_curclass, "$!pos"
    lt $I11, 0, rx1016_fail2760
    nqp_rxmark rx1016_bstack, rxsubrule1019_pass2769, -1, 0
  rxsubrule1019_pass2769:
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1016_pos, $P11, rx1016_curclass, "$!pos"
    rx1016_cur."!cursor_pass"(rx1016_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1016_cur)
  rx1016_restart2759:
    repr_get_attr_obj rx1016_cstack, rx1016_cur, rx1016_curclass, "$!cstack"
  rx1016_fail2760:
    unless rx1016_bstack, rx1016_done2758
    pop $I19, rx1016_bstack
    if_null rx1016_cstack, rx1016_cstack_done2763
    unless rx1016_cstack, rx1016_cstack_done2763
    dec $I19
    set $P11, rx1016_cstack[$I19]
  rx1016_cstack_done2763:
    pop rx1016_rep, rx1016_bstack
    pop rx1016_pos, rx1016_bstack
    pop $I19, rx1016_bstack
    lt rx1016_pos, -1, rx1016_done2758
    lt rx1016_pos, 0, rx1016_fail2760
    eq $I19, 0, rx1016_fail2760
    nqp_islist $I20, rx1016_cstack
    unless $I20, rx1016_jump2761
    elements $I18, rx1016_bstack
    le $I18, 0, rx1016_cut2762
    dec $I18
    set $I18, rx1016_bstack[$I18]
  rx1016_cut2762:
    assign rx1016_cstack, $I18
  rx1016_jump2761:
    jump $I19
  rx1016_done2758:
    rx1016_cur."!cursor_fail"()
    .return (rx1016_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1346233478.067_caps" :subid("cuid_memo_291_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1346233478.067_nfa" :subid("cuid_memo_292_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 45
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 45
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_179_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1020_tgt
    .local int rx1020_pos
    .local int rx1020_off
    .local int rx1020_eos
    .local int rx1020_rep
    .local pmc rx1020_cur
    .local pmc rx1020_curclass
    .local pmc rx1020_bstack
    .local pmc rx1020_cstack
    (rx1020_cur, rx1020_tgt, rx1020_pos, rx1020_curclass, rx1020_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1020_cur
    length rx1020_eos, rx1020_tgt
    eq $I19, 1, rx1020_restart2772
    gt rx1020_pos, rx1020_eos, rx1020_fail2773
    repr_get_attr_int $I11, self, rx1020_curclass, "$!from"
    ne $I11, -1, rxscan1021_done2779
    goto rxscan1021_scan2778
  rxscan1021_loop2777:
    inc rx1020_pos
    gt rx1020_pos, rx1020_eos, rx1020_fail2773
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!from", rx1020_pos
  rxscan1021_scan2778:
    nqp_rxmark rx1020_bstack, rxscan1021_loop2777, rx1020_pos, 0
  rxscan1021_done2779:
    nqp_rxmark rx1020_bstack, rxcap1022_fail2781, rx1020_pos, 0
    add $I11, rx1020_pos, 2
    gt $I11, rx1020_eos, rx1020_fail2773
    substr $S10, rx1020_tgt, rx1020_pos, 2
    ne $S10, ucs4:"**", rx1020_fail2773
    add rx1020_pos, 2
    nqp_rxpeek $I19, rx1020_bstack, rxcap1022_fail2781
    inc $I19
    set $I11, rx1020_bstack[$I19]
    $P11 = rx1020_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1020_pos)
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "sym")
    goto rxcap1022_done2780
  rxcap1022_fail2781:
    goto rx1020_fail2773
  rxcap1022_done2780:
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2773
    nqp_rxmark rx1020_bstack, rxsubrule1023_pass2782, -1, 0
  rxsubrule1023_pass2782:
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    rx1020_cur."!cursor_pass"(rx1020_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1020_cur)
  rx1020_restart2772:
    repr_get_attr_obj rx1020_cstack, rx1020_cur, rx1020_curclass, "$!cstack"
  rx1020_fail2773:
    unless rx1020_bstack, rx1020_done2771
    pop $I19, rx1020_bstack
    if_null rx1020_cstack, rx1020_cstack_done2776
    unless rx1020_cstack, rx1020_cstack_done2776
    dec $I19
    set $P11, rx1020_cstack[$I19]
  rx1020_cstack_done2776:
    pop rx1020_rep, rx1020_bstack
    pop rx1020_pos, rx1020_bstack
    pop $I19, rx1020_bstack
    lt rx1020_pos, -1, rx1020_done2771
    lt rx1020_pos, 0, rx1020_fail2773
    eq $I19, 0, rx1020_fail2773
    nqp_islist $I20, rx1020_cstack
    unless $I20, rx1020_jump2774
    elements $I18, rx1020_bstack
    le $I18, 0, rx1020_cut2775
    dec $I18
    set $I18, rx1020_bstack[$I18]
  rx1020_cut2775:
    assign rx1020_cstack, $I18
  rx1020_jump2774:
    jump $I19
  rx1020_done2771:
    rx1020_cur."!cursor_fail"()
    .return (rx1020_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1346233478.067_caps" :subid("cuid_memo_293_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1346233478.067_nfa" :subid("cuid_memo_294_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 42
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 42
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_180_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1024_tgt
    .local int rx1024_pos
    .local int rx1024_off
    .local int rx1024_eos
    .local int rx1024_rep
    .local pmc rx1024_cur
    .local pmc rx1024_curclass
    .local pmc rx1024_bstack
    .local pmc rx1024_cstack
    (rx1024_cur, rx1024_tgt, rx1024_pos, rx1024_curclass, rx1024_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1024_cur
    length rx1024_eos, rx1024_tgt
    eq $I19, 1, rx1024_restart2785
    gt rx1024_pos, rx1024_eos, rx1024_fail2786
    repr_get_attr_int $I11, self, rx1024_curclass, "$!from"
    ne $I11, -1, rxscan1025_done2792
    goto rxscan1025_scan2791
  rxscan1025_loop2790:
    inc rx1024_pos
    gt rx1024_pos, rx1024_eos, rx1024_fail2786
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!from", rx1024_pos
  rxscan1025_scan2791:
    nqp_rxmark rx1024_bstack, rxscan1025_loop2790, rx1024_pos, 0
  rxscan1025_done2792:
    nqp_rxmark rx1024_bstack, rxcap1026_fail2794, rx1024_pos, 0
    add $I11, rx1024_pos, 1
    gt $I11, rx1024_eos, rx1024_fail2786
    substr $S10, rx1024_tgt, rx1024_pos, 1
    ne $S10, ucs4:"+", rx1024_fail2786
    add rx1024_pos, 1
    nqp_rxpeek $I19, rx1024_bstack, rxcap1026_fail2794
    inc $I19
    set $I11, rx1024_bstack[$I19]
    $P11 = rx1024_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1024_pos)
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "sym")
    goto rxcap1026_done2793
  rxcap1026_fail2794:
    goto rx1024_fail2786
  rxcap1026_done2793:
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    $P11 = rx1024_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1024_curclass, "$!pos"
    lt $I11, 0, rx1024_fail2786
    nqp_rxmark rx1024_bstack, rxsubrule1027_pass2795, -1, 0
  rxsubrule1027_pass2795:
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1024_pos, $P11, rx1024_curclass, "$!pos"
    rx1024_cur."!cursor_pass"(rx1024_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1024_cur)
  rx1024_restart2785:
    repr_get_attr_obj rx1024_cstack, rx1024_cur, rx1024_curclass, "$!cstack"
  rx1024_fail2786:
    unless rx1024_bstack, rx1024_done2784
    pop $I19, rx1024_bstack
    if_null rx1024_cstack, rx1024_cstack_done2789
    unless rx1024_cstack, rx1024_cstack_done2789
    dec $I19
    set $P11, rx1024_cstack[$I19]
  rx1024_cstack_done2789:
    pop rx1024_rep, rx1024_bstack
    pop rx1024_pos, rx1024_bstack
    pop $I19, rx1024_bstack
    lt rx1024_pos, -1, rx1024_done2784
    lt rx1024_pos, 0, rx1024_fail2786
    eq $I19, 0, rx1024_fail2786
    nqp_islist $I20, rx1024_cstack
    unless $I20, rx1024_jump2787
    elements $I18, rx1024_bstack
    le $I18, 0, rx1024_cut2788
    dec $I18
    set $I18, rx1024_bstack[$I18]
  rx1024_cut2788:
    assign rx1024_cstack, $I18
  rx1024_jump2787:
    jump $I19
  rx1024_done2784:
    rx1024_cur."!cursor_fail"()
    .return (rx1024_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1346233478.067_caps" :subid("cuid_memo_295_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1346233478.067_nfa" :subid("cuid_memo_296_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 43
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_181_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1264
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1028_tgt
    .local int rx1028_pos
    .local int rx1028_off
    .local int rx1028_eos
    .local int rx1028_rep
    .local pmc rx1028_cur
    .local pmc rx1028_curclass
    .local pmc rx1028_bstack
    .local pmc rx1028_cstack
    (rx1028_cur, rx1028_tgt, rx1028_pos, rx1028_curclass, rx1028_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1028_cur
    length rx1028_eos, rx1028_tgt
    eq $I19, 1, rx1028_restart2798
    gt rx1028_pos, rx1028_eos, rx1028_fail2799
    repr_get_attr_int $I11, self, rx1028_curclass, "$!from"
    ne $I11, -1, rxscan1029_done2805
    goto rxscan1029_scan2804
  rxscan1029_loop2803:
    inc rx1028_pos
    gt rx1028_pos, rx1028_eos, rx1028_fail2799
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!from", rx1028_pos
  rxscan1029_scan2804:
    nqp_rxmark rx1028_bstack, rxscan1029_loop2803, rx1028_pos, 0
  rxscan1029_done2805:
    nqp_rxmark rx1028_bstack, rxcap1030_fail2807, rx1028_pos, 0
    add $I11, rx1028_pos, 1
    gt $I11, rx1028_eos, rx1028_fail2799
    substr $S10, rx1028_tgt, rx1028_pos, 1
    ne $S10, ucs4:"~", rx1028_fail2799
    add rx1028_pos, 1
    nqp_rxpeek $I19, rx1028_bstack, rxcap1030_fail2807
    inc $I19
    set $I11, rx1028_bstack[$I19]
    $P11 = rx1028_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1028_pos)
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "sym")
    goto rxcap1030_done2806
  rxcap1030_fail2807:
    goto rx1028_fail2799
  rxcap1030_done2806:
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!pos", rx1028_pos
    $P11 = rx1028_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1028_curclass, "$!pos"
    lt $I11, 0, rx1028_fail2799
    nqp_rxmark rx1028_bstack, rxsubrule1031_pass2808, -1, 0
  rxsubrule1031_pass2808:
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1028_pos, $P11, rx1028_curclass, "$!pos"
    rx1028_cur."!cursor_pass"(rx1028_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1028_cur)
  rx1028_restart2798:
    repr_get_attr_obj rx1028_cstack, rx1028_cur, rx1028_curclass, "$!cstack"
  rx1028_fail2799:
    unless rx1028_bstack, rx1028_done2797
    pop $I19, rx1028_bstack
    if_null rx1028_cstack, rx1028_cstack_done2802
    unless rx1028_cstack, rx1028_cstack_done2802
    dec $I19
    set $P11, rx1028_cstack[$I19]
  rx1028_cstack_done2802:
    pop rx1028_rep, rx1028_bstack
    pop rx1028_pos, rx1028_bstack
    pop $I19, rx1028_bstack
    lt rx1028_pos, -1, rx1028_done2797
    lt rx1028_pos, 0, rx1028_fail2799
    eq $I19, 0, rx1028_fail2799
    nqp_islist $I20, rx1028_cstack
    unless $I20, rx1028_jump2800
    elements $I18, rx1028_bstack
    le $I18, 0, rx1028_cut2801
    dec $I18
    set $I18, rx1028_bstack[$I18]
  rx1028_cut2801:
    assign rx1028_cstack, $I18
  rx1028_jump2800:
    jump $I19
  rx1028_done2797:
    rx1028_cur."!cursor_fail"()
    .return (rx1028_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1346233478.067_caps" :subid("cuid_memo_297_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1346233478.067_nfa" :subid("cuid_memo_298_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 126
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_182_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1265
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1032_tgt
    .local int rx1032_pos
    .local int rx1032_off
    .local int rx1032_eos
    .local int rx1032_rep
    .local pmc rx1032_cur
    .local pmc rx1032_curclass
    .local pmc rx1032_bstack
    .local pmc rx1032_cstack
    (rx1032_cur, rx1032_tgt, rx1032_pos, rx1032_curclass, rx1032_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1032_cur
    length rx1032_eos, rx1032_tgt
    eq $I19, 1, rx1032_restart2811
    gt rx1032_pos, rx1032_eos, rx1032_fail2812
    repr_get_attr_int $I11, self, rx1032_curclass, "$!from"
    ne $I11, -1, rxscan1033_done2818
    goto rxscan1033_scan2817
  rxscan1033_loop2816:
    inc rx1032_pos
    gt rx1032_pos, rx1032_eos, rx1032_fail2812
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!from", rx1032_pos
  rxscan1033_scan2817:
    nqp_rxmark rx1032_bstack, rxscan1033_loop2816, rx1032_pos, 0
  rxscan1033_done2818:
    nqp_rxmark rx1032_bstack, rxcap1034_fail2820, rx1032_pos, 0
    add $I11, rx1032_pos, 1
    gt $I11, rx1032_eos, rx1032_fail2812
    substr $S10, rx1032_tgt, rx1032_pos, 1
    ne $S10, ucs4:"-", rx1032_fail2812
    add rx1032_pos, 1
    nqp_rxpeek $I19, rx1032_bstack, rxcap1034_fail2820
    inc $I19
    set $I11, rx1032_bstack[$I19]
    $P11 = rx1032_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1032_pos)
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "sym")
    goto rxcap1034_done2819
  rxcap1034_fail2820:
    goto rx1032_fail2812
  rxcap1034_done2819:
    ge rx1032_pos, rx1032_eos, rx1032_fail2812
    substr $S11, rx1032_tgt, rx1032_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1032_fail2812
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."number"()
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    ge $I11, 0, rx1032_fail2812
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    lt $I11, 0, rx1032_fail2812
    nqp_rxmark rx1032_bstack, rxsubrule1035_pass2821, -1, 0
  rxsubrule1035_pass2821:
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1032_pos, $P11, rx1032_curclass, "$!pos"
    rx1032_cur."!cursor_pass"(rx1032_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1032_cur)
  rx1032_restart2811:
    repr_get_attr_obj rx1032_cstack, rx1032_cur, rx1032_curclass, "$!cstack"
  rx1032_fail2812:
    unless rx1032_bstack, rx1032_done2810
    pop $I19, rx1032_bstack
    if_null rx1032_cstack, rx1032_cstack_done2815
    unless rx1032_cstack, rx1032_cstack_done2815
    dec $I19
    set $P11, rx1032_cstack[$I19]
  rx1032_cstack_done2815:
    pop rx1032_rep, rx1032_bstack
    pop rx1032_pos, rx1032_bstack
    pop $I19, rx1032_bstack
    lt rx1032_pos, -1, rx1032_done2810
    lt rx1032_pos, 0, rx1032_fail2812
    eq $I19, 0, rx1032_fail2812
    nqp_islist $I20, rx1032_cstack
    unless $I20, rx1032_jump2813
    elements $I18, rx1032_bstack
    le $I18, 0, rx1032_cut2814
    dec $I18
    set $I18, rx1032_bstack[$I18]
  rx1032_cut2814:
    assign rx1032_cstack, $I18
  rx1032_jump2813:
    jump $I19
  rx1032_done2810:
    rx1032_cur."!cursor_fail"()
    .return (rx1032_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1346233478.067_caps" :subid("cuid_memo_299_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1346233478.067_nfa" :subid("cuid_memo_300_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 45
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 7
    push $P507, $P508
    box $P509, ">"
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 0
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_183_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1266
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1036_tgt
    .local int rx1036_pos
    .local int rx1036_off
    .local int rx1036_eos
    .local int rx1036_rep
    .local pmc rx1036_cur
    .local pmc rx1036_curclass
    .local pmc rx1036_bstack
    .local pmc rx1036_cstack
    (rx1036_cur, rx1036_tgt, rx1036_pos, rx1036_curclass, rx1036_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1036_cur
    length rx1036_eos, rx1036_tgt
    eq $I19, 1, rx1036_restart2824
    gt rx1036_pos, rx1036_eos, rx1036_fail2825
    repr_get_attr_int $I11, self, rx1036_curclass, "$!from"
    ne $I11, -1, rxscan1037_done2831
    goto rxscan1037_scan2830
  rxscan1037_loop2829:
    inc rx1036_pos
    gt rx1036_pos, rx1036_eos, rx1036_fail2825
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!from", rx1036_pos
  rxscan1037_scan2830:
    nqp_rxmark rx1036_bstack, rxscan1037_loop2829, rx1036_pos, 0
  rxscan1037_done2831:
    nqp_rxmark rx1036_bstack, rxcap1038_fail2833, rx1036_pos, 0
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2825
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"?", rx1036_fail2825
    add rx1036_pos, 1
    nqp_rxpeek $I19, rx1036_bstack, rxcap1038_fail2833
    inc $I19
    set $I11, rx1036_bstack[$I19]
    $P11 = rx1036_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1036_pos)
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "sym")
    goto rxcap1038_done2832
  rxcap1038_fail2833:
    goto rx1036_fail2825
  rxcap1038_done2832:
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2825
    nqp_rxmark rx1036_bstack, rxsubrule1039_pass2834, -1, 0
  rxsubrule1039_pass2834:
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    rx1036_cur."!cursor_pass"(rx1036_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1036_cur)
  rx1036_restart2824:
    repr_get_attr_obj rx1036_cstack, rx1036_cur, rx1036_curclass, "$!cstack"
  rx1036_fail2825:
    unless rx1036_bstack, rx1036_done2823
    pop $I19, rx1036_bstack
    if_null rx1036_cstack, rx1036_cstack_done2828
    unless rx1036_cstack, rx1036_cstack_done2828
    dec $I19
    set $P11, rx1036_cstack[$I19]
  rx1036_cstack_done2828:
    pop rx1036_rep, rx1036_bstack
    pop rx1036_pos, rx1036_bstack
    pop $I19, rx1036_bstack
    lt rx1036_pos, -1, rx1036_done2823
    lt rx1036_pos, 0, rx1036_fail2825
    eq $I19, 0, rx1036_fail2825
    nqp_islist $I20, rx1036_cstack
    unless $I20, rx1036_jump2826
    elements $I18, rx1036_bstack
    le $I18, 0, rx1036_cut2827
    dec $I18
    set $I18, rx1036_bstack[$I18]
  rx1036_cut2827:
    assign rx1036_cstack, $I18
  rx1036_jump2826:
    jump $I19
  rx1036_done2823:
    rx1036_cur."!cursor_fail"()
    .return (rx1036_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1346233478.067_caps" :subid("cuid_memo_301_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1346233478.067_nfa" :subid("cuid_memo_302_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 63
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_184_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1267
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1040_tgt
    .local int rx1040_pos
    .local int rx1040_off
    .local int rx1040_eos
    .local int rx1040_rep
    .local pmc rx1040_cur
    .local pmc rx1040_curclass
    .local pmc rx1040_bstack
    .local pmc rx1040_cstack
    (rx1040_cur, rx1040_tgt, rx1040_pos, rx1040_curclass, rx1040_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1040_cur
    length rx1040_eos, rx1040_tgt
    eq $I19, 1, rx1040_restart2837
    gt rx1040_pos, rx1040_eos, rx1040_fail2838
    repr_get_attr_int $I11, self, rx1040_curclass, "$!from"
    ne $I11, -1, rxscan1041_done2844
    goto rxscan1041_scan2843
  rxscan1041_loop2842:
    inc rx1040_pos
    gt rx1040_pos, rx1040_eos, rx1040_fail2838
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!from", rx1040_pos
  rxscan1041_scan2843:
    nqp_rxmark rx1040_bstack, rxscan1041_loop2842, rx1040_pos, 0
  rxscan1041_done2844:
    nqp_rxmark rx1040_bstack, rxcap1042_fail2846, rx1040_pos, 0
    add $I11, rx1040_pos, 1
    gt $I11, rx1040_eos, rx1040_fail2838
    substr $S10, rx1040_tgt, rx1040_pos, 1
    ne $S10, ucs4:"!", rx1040_fail2838
    add rx1040_pos, 1
    nqp_rxpeek $I19, rx1040_bstack, rxcap1042_fail2846
    inc $I19
    set $I11, rx1040_bstack[$I19]
    $P11 = rx1040_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1040_pos)
    rx1040_cstack = rx1040_cur."!cursor_capture"($P11, "sym")
    goto rxcap1042_done2845
  rxcap1042_fail2846:
    goto rx1040_fail2838
  rxcap1042_done2845:
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!pos", rx1040_pos
    $P11 = rx1040_cur."O"("%symbolic_unary, :op<isfalse>")
    repr_get_attr_int $I11, $P11, rx1040_curclass, "$!pos"
    lt $I11, 0, rx1040_fail2838
    nqp_rxmark rx1040_bstack, rxsubrule1043_pass2847, -1, 0
  rxsubrule1043_pass2847:
    rx1040_cstack = rx1040_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1040_pos, $P11, rx1040_curclass, "$!pos"
    rx1040_cur."!cursor_pass"(rx1040_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1040_cur)
  rx1040_restart2837:
    repr_get_attr_obj rx1040_cstack, rx1040_cur, rx1040_curclass, "$!cstack"
  rx1040_fail2838:
    unless rx1040_bstack, rx1040_done2836
    pop $I19, rx1040_bstack
    if_null rx1040_cstack, rx1040_cstack_done2841
    unless rx1040_cstack, rx1040_cstack_done2841
    dec $I19
    set $P11, rx1040_cstack[$I19]
  rx1040_cstack_done2841:
    pop rx1040_rep, rx1040_bstack
    pop rx1040_pos, rx1040_bstack
    pop $I19, rx1040_bstack
    lt rx1040_pos, -1, rx1040_done2836
    lt rx1040_pos, 0, rx1040_fail2838
    eq $I19, 0, rx1040_fail2838
    nqp_islist $I20, rx1040_cstack
    unless $I20, rx1040_jump2839
    elements $I18, rx1040_bstack
    le $I18, 0, rx1040_cut2840
    dec $I18
    set $I18, rx1040_bstack[$I18]
  rx1040_cut2840:
    assign rx1040_cstack, $I18
  rx1040_jump2839:
    jump $I19
  rx1040_done2836:
    rx1040_cur."!cursor_fail"()
    .return (rx1040_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1346233478.067_caps" :subid("cuid_memo_303_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1346233478.067_nfa" :subid("cuid_memo_304_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 33
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_185_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1268
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1044_tgt
    .local int rx1044_pos
    .local int rx1044_off
    .local int rx1044_eos
    .local int rx1044_rep
    .local pmc rx1044_cur
    .local pmc rx1044_curclass
    .local pmc rx1044_bstack
    .local pmc rx1044_cstack
    (rx1044_cur, rx1044_tgt, rx1044_pos, rx1044_curclass, rx1044_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1044_cur
    length rx1044_eos, rx1044_tgt
    eq $I19, 1, rx1044_restart2850
    gt rx1044_pos, rx1044_eos, rx1044_fail2851
    repr_get_attr_int $I11, self, rx1044_curclass, "$!from"
    ne $I11, -1, rxscan1045_done2857
    goto rxscan1045_scan2856
  rxscan1045_loop2855:
    inc rx1044_pos
    gt rx1044_pos, rx1044_eos, rx1044_fail2851
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!from", rx1044_pos
  rxscan1045_scan2856:
    nqp_rxmark rx1044_bstack, rxscan1045_loop2855, rx1044_pos, 0
  rxscan1045_done2857:
    nqp_rxmark rx1044_bstack, rxcap1046_fail2859, rx1044_pos, 0
    add $I11, rx1044_pos, 1
    gt $I11, rx1044_eos, rx1044_fail2851
    substr $S10, rx1044_tgt, rx1044_pos, 1
    ne $S10, ucs4:"|", rx1044_fail2851
    add rx1044_pos, 1
    nqp_rxpeek $I19, rx1044_bstack, rxcap1046_fail2859
    inc $I19
    set $I11, rx1044_bstack[$I19]
    $P11 = rx1044_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1044_pos)
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "sym")
    goto rxcap1046_done2858
  rxcap1046_fail2859:
    goto rx1044_fail2851
  rxcap1046_done2858:
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!pos", rx1044_pos
    $P11 = rx1044_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1044_curclass, "$!pos"
    lt $I11, 0, rx1044_fail2851
    nqp_rxmark rx1044_bstack, rxsubrule1047_pass2860, -1, 0
  rxsubrule1047_pass2860:
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1044_pos, $P11, rx1044_curclass, "$!pos"
    rx1044_cur."!cursor_pass"(rx1044_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1044_cur)
  rx1044_restart2850:
    repr_get_attr_obj rx1044_cstack, rx1044_cur, rx1044_curclass, "$!cstack"
  rx1044_fail2851:
    unless rx1044_bstack, rx1044_done2849
    pop $I19, rx1044_bstack
    if_null rx1044_cstack, rx1044_cstack_done2854
    unless rx1044_cstack, rx1044_cstack_done2854
    dec $I19
    set $P11, rx1044_cstack[$I19]
  rx1044_cstack_done2854:
    pop rx1044_rep, rx1044_bstack
    pop rx1044_pos, rx1044_bstack
    pop $I19, rx1044_bstack
    lt rx1044_pos, -1, rx1044_done2849
    lt rx1044_pos, 0, rx1044_fail2851
    eq $I19, 0, rx1044_fail2851
    nqp_islist $I20, rx1044_cstack
    unless $I20, rx1044_jump2852
    elements $I18, rx1044_bstack
    le $I18, 0, rx1044_cut2853
    dec $I18
    set $I18, rx1044_bstack[$I18]
  rx1044_cut2853:
    assign rx1044_cstack, $I18
  rx1044_jump2852:
    jump $I19
  rx1044_done2849:
    rx1044_cur."!cursor_fail"()
    .return (rx1044_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1346233478.067_caps" :subid("cuid_memo_305_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1346233478.067_nfa" :subid("cuid_memo_306_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 124
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_186_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1270
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1048_tgt
    .local int rx1048_pos
    .local int rx1048_off
    .local int rx1048_eos
    .local int rx1048_rep
    .local pmc rx1048_cur
    .local pmc rx1048_curclass
    .local pmc rx1048_bstack
    .local pmc rx1048_cstack
    (rx1048_cur, rx1048_tgt, rx1048_pos, rx1048_curclass, rx1048_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1048_cur
    length rx1048_eos, rx1048_tgt
    eq $I19, 1, rx1048_restart2863
    gt rx1048_pos, rx1048_eos, rx1048_fail2864
    repr_get_attr_int $I11, self, rx1048_curclass, "$!from"
    ne $I11, -1, rxscan1049_done2870
    goto rxscan1049_scan2869
  rxscan1049_loop2868:
    inc rx1048_pos
    gt rx1048_pos, rx1048_eos, rx1048_fail2864
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!from", rx1048_pos
  rxscan1049_scan2869:
    nqp_rxmark rx1048_bstack, rxscan1049_loop2868, rx1048_pos, 0
  rxscan1049_done2870:
    nqp_rxmark rx1048_bstack, rxcap1050_fail2872, rx1048_pos, 0
    add $I11, rx1048_pos, 1
    gt $I11, rx1048_eos, rx1048_fail2864
    substr $S10, rx1048_tgt, rx1048_pos, 1
    ne $S10, ucs4:"*", rx1048_fail2864
    add rx1048_pos, 1
    nqp_rxpeek $I19, rx1048_bstack, rxcap1050_fail2872
    inc $I19
    set $I11, rx1048_bstack[$I19]
    $P11 = rx1048_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1048_pos)
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "sym")
    goto rxcap1050_done2871
  rxcap1050_fail2872:
    goto rx1048_fail2864
  rxcap1050_done2871:
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!pos", rx1048_pos
    $P11 = rx1048_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1048_curclass, "$!pos"
    lt $I11, 0, rx1048_fail2864
    nqp_rxmark rx1048_bstack, rxsubrule1051_pass2873, -1, 0
  rxsubrule1051_pass2873:
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1048_pos, $P11, rx1048_curclass, "$!pos"
    rx1048_cur."!cursor_pass"(rx1048_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1048_cur)
  rx1048_restart2863:
    repr_get_attr_obj rx1048_cstack, rx1048_cur, rx1048_curclass, "$!cstack"
  rx1048_fail2864:
    unless rx1048_bstack, rx1048_done2862
    pop $I19, rx1048_bstack
    if_null rx1048_cstack, rx1048_cstack_done2867
    unless rx1048_cstack, rx1048_cstack_done2867
    dec $I19
    set $P11, rx1048_cstack[$I19]
  rx1048_cstack_done2867:
    pop rx1048_rep, rx1048_bstack
    pop rx1048_pos, rx1048_bstack
    pop $I19, rx1048_bstack
    lt rx1048_pos, -1, rx1048_done2862
    lt rx1048_pos, 0, rx1048_fail2864
    eq $I19, 0, rx1048_fail2864
    nqp_islist $I20, rx1048_cstack
    unless $I20, rx1048_jump2865
    elements $I18, rx1048_bstack
    le $I18, 0, rx1048_cut2866
    dec $I18
    set $I18, rx1048_bstack[$I18]
  rx1048_cut2866:
    assign rx1048_cstack, $I18
  rx1048_jump2865:
    jump $I19
  rx1048_done2862:
    rx1048_cur."!cursor_fail"()
    .return (rx1048_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1346233478.067_caps" :subid("cuid_memo_307_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1346233478.067_nfa" :subid("cuid_memo_308_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 42
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_187_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1271
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1052_tgt
    .local int rx1052_pos
    .local int rx1052_off
    .local int rx1052_eos
    .local int rx1052_rep
    .local pmc rx1052_cur
    .local pmc rx1052_curclass
    .local pmc rx1052_bstack
    .local pmc rx1052_cstack
    (rx1052_cur, rx1052_tgt, rx1052_pos, rx1052_curclass, rx1052_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1052_cur
    length rx1052_eos, rx1052_tgt
    eq $I19, 1, rx1052_restart2876
    gt rx1052_pos, rx1052_eos, rx1052_fail2877
    repr_get_attr_int $I11, self, rx1052_curclass, "$!from"
    ne $I11, -1, rxscan1053_done2883
    goto rxscan1053_scan2882
  rxscan1053_loop2881:
    inc rx1052_pos
    gt rx1052_pos, rx1052_eos, rx1052_fail2877
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!from", rx1052_pos
  rxscan1053_scan2882:
    nqp_rxmark rx1052_bstack, rxscan1053_loop2881, rx1052_pos, 0
  rxscan1053_done2883:
    nqp_rxmark rx1052_bstack, rxcap1054_fail2885, rx1052_pos, 0
    add $I11, rx1052_pos, 1
    gt $I11, rx1052_eos, rx1052_fail2877
    substr $S10, rx1052_tgt, rx1052_pos, 1
    ne $S10, ucs4:"/", rx1052_fail2877
    add rx1052_pos, 1
    nqp_rxpeek $I19, rx1052_bstack, rxcap1054_fail2885
    inc $I19
    set $I11, rx1052_bstack[$I19]
    $P11 = rx1052_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1052_pos)
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "sym")
    goto rxcap1054_done2884
  rxcap1054_fail2885:
    goto rx1052_fail2877
  rxcap1054_done2884:
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2877
    nqp_rxmark rx1052_bstack, rxsubrule1055_pass2886, -1, 0
  rxsubrule1055_pass2886:
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
    rx1052_cur."!cursor_pass"(rx1052_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1052_cur)
  rx1052_restart2876:
    repr_get_attr_obj rx1052_cstack, rx1052_cur, rx1052_curclass, "$!cstack"
  rx1052_fail2877:
    unless rx1052_bstack, rx1052_done2875
    pop $I19, rx1052_bstack
    if_null rx1052_cstack, rx1052_cstack_done2880
    unless rx1052_cstack, rx1052_cstack_done2880
    dec $I19
    set $P11, rx1052_cstack[$I19]
  rx1052_cstack_done2880:
    pop rx1052_rep, rx1052_bstack
    pop rx1052_pos, rx1052_bstack
    pop $I19, rx1052_bstack
    lt rx1052_pos, -1, rx1052_done2875
    lt rx1052_pos, 0, rx1052_fail2877
    eq $I19, 0, rx1052_fail2877
    nqp_islist $I20, rx1052_cstack
    unless $I20, rx1052_jump2878
    elements $I18, rx1052_bstack
    le $I18, 0, rx1052_cut2879
    dec $I18
    set $I18, rx1052_bstack[$I18]
  rx1052_cut2879:
    assign rx1052_cstack, $I18
  rx1052_jump2878:
    jump $I19
  rx1052_done2875:
    rx1052_cur."!cursor_fail"()
    .return (rx1052_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1346233478.067_caps" :subid("cuid_memo_309_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1346233478.067_nfa" :subid("cuid_memo_310_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 47
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_188_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1272
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1056_tgt
    .local int rx1056_pos
    .local int rx1056_off
    .local int rx1056_eos
    .local int rx1056_rep
    .local pmc rx1056_cur
    .local pmc rx1056_curclass
    .local pmc rx1056_bstack
    .local pmc rx1056_cstack
    (rx1056_cur, rx1056_tgt, rx1056_pos, rx1056_curclass, rx1056_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1056_cur
    length rx1056_eos, rx1056_tgt
    eq $I19, 1, rx1056_restart2889
    gt rx1056_pos, rx1056_eos, rx1056_fail2890
    repr_get_attr_int $I11, self, rx1056_curclass, "$!from"
    ne $I11, -1, rxscan1057_done2896
    goto rxscan1057_scan2895
  rxscan1057_loop2894:
    inc rx1056_pos
    gt rx1056_pos, rx1056_eos, rx1056_fail2890
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!from", rx1056_pos
  rxscan1057_scan2895:
    nqp_rxmark rx1056_bstack, rxscan1057_loop2894, rx1056_pos, 0
  rxscan1057_done2896:
    nqp_rxmark rx1056_bstack, rxcap1058_fail2898, rx1056_pos, 0
    add $I11, rx1056_pos, 1
    gt $I11, rx1056_eos, rx1056_fail2890
    substr $S10, rx1056_tgt, rx1056_pos, 1
    ne $S10, ucs4:"%", rx1056_fail2890
    add rx1056_pos, 1
    nqp_rxpeek $I19, rx1056_bstack, rxcap1058_fail2898
    inc $I19
    set $I11, rx1056_bstack[$I19]
    $P11 = rx1056_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1056_pos)
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "sym")
    goto rxcap1058_done2897
  rxcap1058_fail2898:
    goto rx1056_fail2890
  rxcap1058_done2897:
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2890
    nqp_rxmark rx1056_bstack, rxsubrule1059_pass2899, -1, 0
  rxsubrule1059_pass2899:
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    rx1056_cur."!cursor_pass"(rx1056_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1056_cur)
  rx1056_restart2889:
    repr_get_attr_obj rx1056_cstack, rx1056_cur, rx1056_curclass, "$!cstack"
  rx1056_fail2890:
    unless rx1056_bstack, rx1056_done2888
    pop $I19, rx1056_bstack
    if_null rx1056_cstack, rx1056_cstack_done2893
    unless rx1056_cstack, rx1056_cstack_done2893
    dec $I19
    set $P11, rx1056_cstack[$I19]
  rx1056_cstack_done2893:
    pop rx1056_rep, rx1056_bstack
    pop rx1056_pos, rx1056_bstack
    pop $I19, rx1056_bstack
    lt rx1056_pos, -1, rx1056_done2888
    lt rx1056_pos, 0, rx1056_fail2890
    eq $I19, 0, rx1056_fail2890
    nqp_islist $I20, rx1056_cstack
    unless $I20, rx1056_jump2891
    elements $I18, rx1056_bstack
    le $I18, 0, rx1056_cut2892
    dec $I18
    set $I18, rx1056_bstack[$I18]
  rx1056_cut2892:
    assign rx1056_cstack, $I18
  rx1056_jump2891:
    jump $I19
  rx1056_done2888:
    rx1056_cur."!cursor_fail"()
    .return (rx1056_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1346233478.067_caps" :subid("cuid_memo_311_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1346233478.067_nfa" :subid("cuid_memo_312_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 37
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_189_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1060_tgt
    .local int rx1060_pos
    .local int rx1060_off
    .local int rx1060_eos
    .local int rx1060_rep
    .local pmc rx1060_cur
    .local pmc rx1060_curclass
    .local pmc rx1060_bstack
    .local pmc rx1060_cstack
    (rx1060_cur, rx1060_tgt, rx1060_pos, rx1060_curclass, rx1060_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1060_cur
    length rx1060_eos, rx1060_tgt
    eq $I19, 1, rx1060_restart2902
    gt rx1060_pos, rx1060_eos, rx1060_fail2903
    repr_get_attr_int $I11, self, rx1060_curclass, "$!from"
    ne $I11, -1, rxscan1061_done2909
    goto rxscan1061_scan2908
  rxscan1061_loop2907:
    inc rx1060_pos
    gt rx1060_pos, rx1060_eos, rx1060_fail2903
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!from", rx1060_pos
  rxscan1061_scan2908:
    nqp_rxmark rx1060_bstack, rxscan1061_loop2907, rx1060_pos, 0
  rxscan1061_done2909:
    nqp_rxmark rx1060_bstack, rxcap1062_fail2911, rx1060_pos, 0
    add $I11, rx1060_pos, 2
    gt $I11, rx1060_eos, rx1060_fail2903
    substr $S10, rx1060_tgt, rx1060_pos, 2
    ne $S10, ucs4:"+&", rx1060_fail2903
    add rx1060_pos, 2
    nqp_rxpeek $I19, rx1060_bstack, rxcap1062_fail2911
    inc $I19
    set $I11, rx1060_bstack[$I19]
    $P11 = rx1060_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1060_pos)
    rx1060_cstack = rx1060_cur."!cursor_capture"($P11, "sym")
    goto rxcap1062_done2910
  rxcap1062_fail2911:
    goto rx1060_fail2903
  rxcap1062_done2910:
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!pos", rx1060_pos
    $P11 = rx1060_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1060_curclass, "$!pos"
    lt $I11, 0, rx1060_fail2903
    nqp_rxmark rx1060_bstack, rxsubrule1063_pass2912, -1, 0
  rxsubrule1063_pass2912:
    rx1060_cstack = rx1060_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1060_pos, $P11, rx1060_curclass, "$!pos"
    rx1060_cur."!cursor_pass"(rx1060_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1060_cur)
  rx1060_restart2902:
    repr_get_attr_obj rx1060_cstack, rx1060_cur, rx1060_curclass, "$!cstack"
  rx1060_fail2903:
    unless rx1060_bstack, rx1060_done2901
    pop $I19, rx1060_bstack
    if_null rx1060_cstack, rx1060_cstack_done2906
    unless rx1060_cstack, rx1060_cstack_done2906
    dec $I19
    set $P11, rx1060_cstack[$I19]
  rx1060_cstack_done2906:
    pop rx1060_rep, rx1060_bstack
    pop rx1060_pos, rx1060_bstack
    pop $I19, rx1060_bstack
    lt rx1060_pos, -1, rx1060_done2901
    lt rx1060_pos, 0, rx1060_fail2903
    eq $I19, 0, rx1060_fail2903
    nqp_islist $I20, rx1060_cstack
    unless $I20, rx1060_jump2904
    elements $I18, rx1060_bstack
    le $I18, 0, rx1060_cut2905
    dec $I18
    set $I18, rx1060_bstack[$I18]
  rx1060_cut2905:
    assign rx1060_cstack, $I18
  rx1060_jump2904:
    jump $I19
  rx1060_done2901:
    rx1060_cur."!cursor_fail"()
    .return (rx1060_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1346233478.067_caps" :subid("cuid_memo_313_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1346233478.067_nfa" :subid("cuid_memo_314_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 43
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 38
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_190_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1275
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart2915
    gt rx1064_pos, rx1064_eos, rx1064_fail2916
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done2922
    goto rxscan1065_scan2921
  rxscan1065_loop2920:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail2916
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan2921:
    nqp_rxmark rx1064_bstack, rxscan1065_loop2920, rx1064_pos, 0
  rxscan1065_done2922:
    nqp_rxmark rx1064_bstack, rxcap1066_fail2924, rx1064_pos, 0
    add $I11, rx1064_pos, 1
    gt $I11, rx1064_eos, rx1064_fail2916
    substr $S10, rx1064_tgt, rx1064_pos, 1
    ne $S10, ucs4:"+", rx1064_fail2916
    add rx1064_pos, 1
    nqp_rxpeek $I19, rx1064_bstack, rxcap1066_fail2924
    inc $I19
    set $I11, rx1064_bstack[$I19]
    $P11 = rx1064_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1064_pos)
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "sym")
    goto rxcap1066_done2923
  rxcap1066_fail2924:
    goto rx1064_fail2916
  rxcap1066_done2923:
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2916
    nqp_rxmark rx1064_bstack, rxsubrule1067_pass2925, -1, 0
  rxsubrule1067_pass2925:
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1064_pos, $P11, rx1064_curclass, "$!pos"
    rx1064_cur."!cursor_pass"(rx1064_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart2915:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail2916:
    unless rx1064_bstack, rx1064_done2914
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done2919
    unless rx1064_cstack, rx1064_cstack_done2919
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done2919:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done2914
    lt rx1064_pos, 0, rx1064_fail2916
    eq $I19, 0, rx1064_fail2916
    nqp_islist $I20, rx1064_cstack
    unless $I20, rx1064_jump2917
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut2918
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut2918:
    assign rx1064_cstack, $I18
  rx1064_jump2917:
    jump $I19
  rx1064_done2914:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1346233478.067_caps" :subid("cuid_memo_315_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1346233478.067_nfa" :subid("cuid_memo_316_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 43
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_191_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1068_tgt
    .local int rx1068_pos
    .local int rx1068_off
    .local int rx1068_eos
    .local int rx1068_rep
    .local pmc rx1068_cur
    .local pmc rx1068_curclass
    .local pmc rx1068_bstack
    .local pmc rx1068_cstack
    (rx1068_cur, rx1068_tgt, rx1068_pos, rx1068_curclass, rx1068_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1068_cur
    length rx1068_eos, rx1068_tgt
    eq $I19, 1, rx1068_restart2928
    gt rx1068_pos, rx1068_eos, rx1068_fail2929
    repr_get_attr_int $I11, self, rx1068_curclass, "$!from"
    ne $I11, -1, rxscan1069_done2935
    goto rxscan1069_scan2934
  rxscan1069_loop2933:
    inc rx1068_pos
    gt rx1068_pos, rx1068_eos, rx1068_fail2929
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!from", rx1068_pos
  rxscan1069_scan2934:
    nqp_rxmark rx1068_bstack, rxscan1069_loop2933, rx1068_pos, 0
  rxscan1069_done2935:
    nqp_rxmark rx1068_bstack, rxcap1070_fail2937, rx1068_pos, 0
    add $I11, rx1068_pos, 1
    gt $I11, rx1068_eos, rx1068_fail2929
    substr $S10, rx1068_tgt, rx1068_pos, 1
    ne $S10, ucs4:"-", rx1068_fail2929
    add rx1068_pos, 1
    nqp_rxpeek $I19, rx1068_bstack, rxcap1070_fail2937
    inc $I19
    set $I11, rx1068_bstack[$I19]
    $P11 = rx1068_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1068_pos)
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "sym")
    goto rxcap1070_done2936
  rxcap1070_fail2937:
    goto rx1068_fail2929
  rxcap1070_done2936:
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!pos", rx1068_pos
    $P11 = rx1068_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1068_curclass, "$!pos"
    lt $I11, 0, rx1068_fail2929
    nqp_rxmark rx1068_bstack, rxsubrule1071_pass2938, -1, 0
  rxsubrule1071_pass2938:
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1068_pos, $P11, rx1068_curclass, "$!pos"
    rx1068_cur."!cursor_pass"(rx1068_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1068_cur)
  rx1068_restart2928:
    repr_get_attr_obj rx1068_cstack, rx1068_cur, rx1068_curclass, "$!cstack"
  rx1068_fail2929:
    unless rx1068_bstack, rx1068_done2927
    pop $I19, rx1068_bstack
    if_null rx1068_cstack, rx1068_cstack_done2932
    unless rx1068_cstack, rx1068_cstack_done2932
    dec $I19
    set $P11, rx1068_cstack[$I19]
  rx1068_cstack_done2932:
    pop rx1068_rep, rx1068_bstack
    pop rx1068_pos, rx1068_bstack
    pop $I19, rx1068_bstack
    lt rx1068_pos, -1, rx1068_done2927
    lt rx1068_pos, 0, rx1068_fail2929
    eq $I19, 0, rx1068_fail2929
    nqp_islist $I20, rx1068_cstack
    unless $I20, rx1068_jump2930
    elements $I18, rx1068_bstack
    le $I18, 0, rx1068_cut2931
    dec $I18
    set $I18, rx1068_bstack[$I18]
  rx1068_cut2931:
    assign rx1068_cstack, $I18
  rx1068_jump2930:
    jump $I19
  rx1068_done2927:
    rx1068_cur."!cursor_fail"()
    .return (rx1068_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1346233478.067_caps" :subid("cuid_memo_317_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1346233478.067_nfa" :subid("cuid_memo_318_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 45
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_192_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1277
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1072_tgt
    .local int rx1072_pos
    .local int rx1072_off
    .local int rx1072_eos
    .local int rx1072_rep
    .local pmc rx1072_cur
    .local pmc rx1072_curclass
    .local pmc rx1072_bstack
    .local pmc rx1072_cstack
    (rx1072_cur, rx1072_tgt, rx1072_pos, rx1072_curclass, rx1072_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1072_cur
    length rx1072_eos, rx1072_tgt
    eq $I19, 1, rx1072_restart2941
    gt rx1072_pos, rx1072_eos, rx1072_fail2942
    repr_get_attr_int $I11, self, rx1072_curclass, "$!from"
    ne $I11, -1, rxscan1073_done2948
    goto rxscan1073_scan2947
  rxscan1073_loop2946:
    inc rx1072_pos
    gt rx1072_pos, rx1072_eos, rx1072_fail2942
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!from", rx1072_pos
  rxscan1073_scan2947:
    nqp_rxmark rx1072_bstack, rxscan1073_loop2946, rx1072_pos, 0
  rxscan1073_done2948:
    nqp_rxmark rx1072_bstack, rxcap1074_fail2950, rx1072_pos, 0
    add $I11, rx1072_pos, 2
    gt $I11, rx1072_eos, rx1072_fail2942
    substr $S10, rx1072_tgt, rx1072_pos, 2
    ne $S10, ucs4:"+|", rx1072_fail2942
    add rx1072_pos, 2
    nqp_rxpeek $I19, rx1072_bstack, rxcap1074_fail2950
    inc $I19
    set $I11, rx1072_bstack[$I19]
    $P11 = rx1072_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1072_pos)
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "sym")
    goto rxcap1074_done2949
  rxcap1074_fail2950:
    goto rx1072_fail2942
  rxcap1074_done2949:
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail2942
    nqp_rxmark rx1072_bstack, rxsubrule1075_pass2951, -1, 0
  rxsubrule1075_pass2951:
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    rx1072_cur."!cursor_pass"(rx1072_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1072_cur)
  rx1072_restart2941:
    repr_get_attr_obj rx1072_cstack, rx1072_cur, rx1072_curclass, "$!cstack"
  rx1072_fail2942:
    unless rx1072_bstack, rx1072_done2940
    pop $I19, rx1072_bstack
    if_null rx1072_cstack, rx1072_cstack_done2945
    unless rx1072_cstack, rx1072_cstack_done2945
    dec $I19
    set $P11, rx1072_cstack[$I19]
  rx1072_cstack_done2945:
    pop rx1072_rep, rx1072_bstack
    pop rx1072_pos, rx1072_bstack
    pop $I19, rx1072_bstack
    lt rx1072_pos, -1, rx1072_done2940
    lt rx1072_pos, 0, rx1072_fail2942
    eq $I19, 0, rx1072_fail2942
    nqp_islist $I20, rx1072_cstack
    unless $I20, rx1072_jump2943
    elements $I18, rx1072_bstack
    le $I18, 0, rx1072_cut2944
    dec $I18
    set $I18, rx1072_bstack[$I18]
  rx1072_cut2944:
    assign rx1072_cstack, $I18
  rx1072_jump2943:
    jump $I19
  rx1072_done2940:
    rx1072_cur."!cursor_fail"()
    .return (rx1072_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1346233478.067_caps" :subid("cuid_memo_319_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1346233478.067_nfa" :subid("cuid_memo_320_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 43
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 124
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_193_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart2954
    gt rx1076_pos, rx1076_eos, rx1076_fail2955
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done2961
    goto rxscan1077_scan2960
  rxscan1077_loop2959:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail2955
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan2960:
    nqp_rxmark rx1076_bstack, rxscan1077_loop2959, rx1076_pos, 0
  rxscan1077_done2961:
    nqp_rxmark rx1076_bstack, rxcap1078_fail2963, rx1076_pos, 0
    add $I11, rx1076_pos, 2
    gt $I11, rx1076_eos, rx1076_fail2955
    substr $S10, rx1076_tgt, rx1076_pos, 2
    ne $S10, ucs4:"+^", rx1076_fail2955
    add rx1076_pos, 2
    nqp_rxpeek $I19, rx1076_bstack, rxcap1078_fail2963
    inc $I19
    set $I11, rx1076_bstack[$I19]
    $P11 = rx1076_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1076_pos)
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "sym")
    goto rxcap1078_done2962
  rxcap1078_fail2963:
    goto rx1076_fail2955
  rxcap1078_done2962:
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2955
    nqp_rxmark rx1076_bstack, rxsubrule1079_pass2964, -1, 0
  rxsubrule1079_pass2964:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    rx1076_cur."!cursor_pass"(rx1076_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart2954:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail2955:
    unless rx1076_bstack, rx1076_done2953
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done2958
    unless rx1076_cstack, rx1076_cstack_done2958
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done2958:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done2953
    lt rx1076_pos, 0, rx1076_fail2955
    eq $I19, 0, rx1076_fail2955
    nqp_islist $I20, rx1076_cstack
    unless $I20, rx1076_jump2956
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut2957
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut2957:
    assign rx1076_cstack, $I18
  rx1076_jump2956:
    jump $I19
  rx1076_done2953:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1346233478.067_caps" :subid("cuid_memo_321_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1346233478.067_nfa" :subid("cuid_memo_322_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 43
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 94
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_194_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1280
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1080_tgt
    .local int rx1080_pos
    .local int rx1080_off
    .local int rx1080_eos
    .local int rx1080_rep
    .local pmc rx1080_cur
    .local pmc rx1080_curclass
    .local pmc rx1080_bstack
    .local pmc rx1080_cstack
    (rx1080_cur, rx1080_tgt, rx1080_pos, rx1080_curclass, rx1080_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1080_cur
    length rx1080_eos, rx1080_tgt
    eq $I19, 1, rx1080_restart2967
    gt rx1080_pos, rx1080_eos, rx1080_fail2968
    repr_get_attr_int $I11, self, rx1080_curclass, "$!from"
    ne $I11, -1, rxscan1081_done2974
    goto rxscan1081_scan2973
  rxscan1081_loop2972:
    inc rx1080_pos
    gt rx1080_pos, rx1080_eos, rx1080_fail2968
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!from", rx1080_pos
  rxscan1081_scan2973:
    nqp_rxmark rx1080_bstack, rxscan1081_loop2972, rx1080_pos, 0
  rxscan1081_done2974:
    nqp_rxmark rx1080_bstack, rxcap1082_fail2976, rx1080_pos, 0
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2968
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:"~", rx1080_fail2968
    add rx1080_pos, 1
    nqp_rxpeek $I19, rx1080_bstack, rxcap1082_fail2976
    inc $I19
    set $I11, rx1080_bstack[$I19]
    $P11 = rx1080_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1080_pos)
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "sym")
    goto rxcap1082_done2975
  rxcap1082_fail2976:
    goto rx1080_fail2968
  rxcap1082_done2975:
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2968
    nqp_rxmark rx1080_bstack, rxsubrule1083_pass2977, -1, 0
  rxsubrule1083_pass2977:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    rx1080_cur."!cursor_pass"(rx1080_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1080_cur)
  rx1080_restart2967:
    repr_get_attr_obj rx1080_cstack, rx1080_cur, rx1080_curclass, "$!cstack"
  rx1080_fail2968:
    unless rx1080_bstack, rx1080_done2966
    pop $I19, rx1080_bstack
    if_null rx1080_cstack, rx1080_cstack_done2971
    unless rx1080_cstack, rx1080_cstack_done2971
    dec $I19
    set $P11, rx1080_cstack[$I19]
  rx1080_cstack_done2971:
    pop rx1080_rep, rx1080_bstack
    pop rx1080_pos, rx1080_bstack
    pop $I19, rx1080_bstack
    lt rx1080_pos, -1, rx1080_done2966
    lt rx1080_pos, 0, rx1080_fail2968
    eq $I19, 0, rx1080_fail2968
    nqp_islist $I20, rx1080_cstack
    unless $I20, rx1080_jump2969
    elements $I18, rx1080_bstack
    le $I18, 0, rx1080_cut2970
    dec $I18
    set $I18, rx1080_bstack[$I18]
  rx1080_cut2970:
    assign rx1080_cstack, $I18
  rx1080_jump2969:
    jump $I19
  rx1080_done2966:
    rx1080_cur."!cursor_fail"()
    .return (rx1080_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1346233478.067_caps" :subid("cuid_memo_323_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1346233478.067_nfa" :subid("cuid_memo_324_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 126
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_195_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1282
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1084_tgt
    .local int rx1084_pos
    .local int rx1084_off
    .local int rx1084_eos
    .local int rx1084_rep
    .local pmc rx1084_cur
    .local pmc rx1084_curclass
    .local pmc rx1084_bstack
    .local pmc rx1084_cstack
    (rx1084_cur, rx1084_tgt, rx1084_pos, rx1084_curclass, rx1084_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1084_cur
    length rx1084_eos, rx1084_tgt
    eq $I19, 1, rx1084_restart2980
    gt rx1084_pos, rx1084_eos, rx1084_fail2981
    repr_get_attr_int $I11, self, rx1084_curclass, "$!from"
    ne $I11, -1, rxscan1085_done2987
    goto rxscan1085_scan2986
  rxscan1085_loop2985:
    inc rx1084_pos
    gt rx1084_pos, rx1084_eos, rx1084_fail2981
    repr_bind_attr_int rx1084_cur, rx1084_curclass, "$!from", rx1084_pos
  rxscan1085_scan2986:
    nqp_rxmark rx1084_bstack, rxscan1085_loop2985, rx1084_pos, 0
  rxscan1085_done2987:
    nqp_rxmark rx1084_bstack, rxcap1086_fail2989, rx1084_pos, 0
    add $I11, rx1084_pos, 2
    gt $I11, rx1084_eos, rx1084_fail2981
    substr $S10, rx1084_tgt, rx1084_pos, 2
    ne $S10, ucs4:"==", rx1084_fail2981
    add rx1084_pos, 2
    nqp_rxpeek $I19, rx1084_bstack, rxcap1086_fail2989
    inc $I19
    set $I11, rx1084_bstack[$I19]
    $P11 = rx1084_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1084_pos)
    rx1084_cstack = rx1084_cur."!cursor_capture"($P11, "sym")
    goto rxcap1086_done2988
  rxcap1086_fail2989:
    goto rx1084_fail2981
  rxcap1086_done2988:
    repr_bind_attr_int rx1084_cur, rx1084_curclass, "$!pos", rx1084_pos
    $P11 = rx1084_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1084_curclass, "$!pos"
    lt $I11, 0, rx1084_fail2981
    nqp_rxmark rx1084_bstack, rxsubrule1087_pass2990, -1, 0
  rxsubrule1087_pass2990:
    rx1084_cstack = rx1084_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1084_pos, $P11, rx1084_curclass, "$!pos"
    rx1084_cur."!cursor_pass"(rx1084_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1084_cur)
  rx1084_restart2980:
    repr_get_attr_obj rx1084_cstack, rx1084_cur, rx1084_curclass, "$!cstack"
  rx1084_fail2981:
    unless rx1084_bstack, rx1084_done2979
    pop $I19, rx1084_bstack
    if_null rx1084_cstack, rx1084_cstack_done2984
    unless rx1084_cstack, rx1084_cstack_done2984
    dec $I19
    set $P11, rx1084_cstack[$I19]
  rx1084_cstack_done2984:
    pop rx1084_rep, rx1084_bstack
    pop rx1084_pos, rx1084_bstack
    pop $I19, rx1084_bstack
    lt rx1084_pos, -1, rx1084_done2979
    lt rx1084_pos, 0, rx1084_fail2981
    eq $I19, 0, rx1084_fail2981
    nqp_islist $I20, rx1084_cstack
    unless $I20, rx1084_jump2982
    elements $I18, rx1084_bstack
    le $I18, 0, rx1084_cut2983
    dec $I18
    set $I18, rx1084_bstack[$I18]
  rx1084_cut2983:
    assign rx1084_cstack, $I18
  rx1084_jump2982:
    jump $I19
  rx1084_done2979:
    rx1084_cur."!cursor_fail"()
    .return (rx1084_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1346233478.067_caps" :subid("cuid_memo_325_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1346233478.067_nfa" :subid("cuid_memo_326_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 61
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 61
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_196_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1283
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1088_tgt
    .local int rx1088_pos
    .local int rx1088_off
    .local int rx1088_eos
    .local int rx1088_rep
    .local pmc rx1088_cur
    .local pmc rx1088_curclass
    .local pmc rx1088_bstack
    .local pmc rx1088_cstack
    (rx1088_cur, rx1088_tgt, rx1088_pos, rx1088_curclass, rx1088_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1088_cur
    length rx1088_eos, rx1088_tgt
    eq $I19, 1, rx1088_restart2993
    gt rx1088_pos, rx1088_eos, rx1088_fail2994
    repr_get_attr_int $I11, self, rx1088_curclass, "$!from"
    ne $I11, -1, rxscan1089_done3000
    goto rxscan1089_scan2999
  rxscan1089_loop2998:
    inc rx1088_pos
    gt rx1088_pos, rx1088_eos, rx1088_fail2994
    repr_bind_attr_int rx1088_cur, rx1088_curclass, "$!from", rx1088_pos
  rxscan1089_scan2999:
    nqp_rxmark rx1088_bstack, rxscan1089_loop2998, rx1088_pos, 0
  rxscan1089_done3000:
    nqp_rxmark rx1088_bstack, rxcap1090_fail3002, rx1088_pos, 0
    add $I11, rx1088_pos, 2
    gt $I11, rx1088_eos, rx1088_fail2994
    substr $S10, rx1088_tgt, rx1088_pos, 2
    ne $S10, ucs4:"!=", rx1088_fail2994
    add rx1088_pos, 2
    nqp_rxpeek $I19, rx1088_bstack, rxcap1090_fail3002
    inc $I19
    set $I11, rx1088_bstack[$I19]
    $P11 = rx1088_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1088_pos)
    rx1088_cstack = rx1088_cur."!cursor_capture"($P11, "sym")
    goto rxcap1090_done3001
  rxcap1090_fail3002:
    goto rx1088_fail2994
  rxcap1090_done3001:
    repr_bind_attr_int rx1088_cur, rx1088_curclass, "$!pos", rx1088_pos
    $P11 = rx1088_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1088_curclass, "$!pos"
    lt $I11, 0, rx1088_fail2994
    nqp_rxmark rx1088_bstack, rxsubrule1091_pass3003, -1, 0
  rxsubrule1091_pass3003:
    rx1088_cstack = rx1088_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1088_pos, $P11, rx1088_curclass, "$!pos"
    rx1088_cur."!cursor_pass"(rx1088_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1088_cur)
  rx1088_restart2993:
    repr_get_attr_obj rx1088_cstack, rx1088_cur, rx1088_curclass, "$!cstack"
  rx1088_fail2994:
    unless rx1088_bstack, rx1088_done2992
    pop $I19, rx1088_bstack
    if_null rx1088_cstack, rx1088_cstack_done2997
    unless rx1088_cstack, rx1088_cstack_done2997
    dec $I19
    set $P11, rx1088_cstack[$I19]
  rx1088_cstack_done2997:
    pop rx1088_rep, rx1088_bstack
    pop rx1088_pos, rx1088_bstack
    pop $I19, rx1088_bstack
    lt rx1088_pos, -1, rx1088_done2992
    lt rx1088_pos, 0, rx1088_fail2994
    eq $I19, 0, rx1088_fail2994
    nqp_islist $I20, rx1088_cstack
    unless $I20, rx1088_jump2995
    elements $I18, rx1088_bstack
    le $I18, 0, rx1088_cut2996
    dec $I18
    set $I18, rx1088_bstack[$I18]
  rx1088_cut2996:
    assign rx1088_cstack, $I18
  rx1088_jump2995:
    jump $I19
  rx1088_done2992:
    rx1088_cur."!cursor_fail"()
    .return (rx1088_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1346233478.067_caps" :subid("cuid_memo_327_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1346233478.067_nfa" :subid("cuid_memo_328_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 33
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 61
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_197_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1284
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1092_tgt
    .local int rx1092_pos
    .local int rx1092_off
    .local int rx1092_eos
    .local int rx1092_rep
    .local pmc rx1092_cur
    .local pmc rx1092_curclass
    .local pmc rx1092_bstack
    .local pmc rx1092_cstack
    (rx1092_cur, rx1092_tgt, rx1092_pos, rx1092_curclass, rx1092_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1092_cur
    length rx1092_eos, rx1092_tgt
    eq $I19, 1, rx1092_restart3006
    gt rx1092_pos, rx1092_eos, rx1092_fail3007
    repr_get_attr_int $I11, self, rx1092_curclass, "$!from"
    ne $I11, -1, rxscan1093_done3013
    goto rxscan1093_scan3012
  rxscan1093_loop3011:
    inc rx1092_pos
    gt rx1092_pos, rx1092_eos, rx1092_fail3007
    repr_bind_attr_int rx1092_cur, rx1092_curclass, "$!from", rx1092_pos
  rxscan1093_scan3012:
    nqp_rxmark rx1092_bstack, rxscan1093_loop3011, rx1092_pos, 0
  rxscan1093_done3013:
    nqp_rxmark rx1092_bstack, rxcap1094_fail3015, rx1092_pos, 0
    add $I11, rx1092_pos, 2
    gt $I11, rx1092_eos, rx1092_fail3007
    substr $S10, rx1092_tgt, rx1092_pos, 2
    ne $S10, ucs4:"<=", rx1092_fail3007
    add rx1092_pos, 2
    nqp_rxpeek $I19, rx1092_bstack, rxcap1094_fail3015
    inc $I19
    set $I11, rx1092_bstack[$I19]
    $P11 = rx1092_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1092_pos)
    rx1092_cstack = rx1092_cur."!cursor_capture"($P11, "sym")
    goto rxcap1094_done3014
  rxcap1094_fail3015:
    goto rx1092_fail3007
  rxcap1094_done3014:
    repr_bind_attr_int rx1092_cur, rx1092_curclass, "$!pos", rx1092_pos
    $P11 = rx1092_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1092_curclass, "$!pos"
    lt $I11, 0, rx1092_fail3007
    nqp_rxmark rx1092_bstack, rxsubrule1095_pass3016, -1, 0
  rxsubrule1095_pass3016:
    rx1092_cstack = rx1092_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1092_pos, $P11, rx1092_curclass, "$!pos"
    rx1092_cur."!cursor_pass"(rx1092_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1092_cur)
  rx1092_restart3006:
    repr_get_attr_obj rx1092_cstack, rx1092_cur, rx1092_curclass, "$!cstack"
  rx1092_fail3007:
    unless rx1092_bstack, rx1092_done3005
    pop $I19, rx1092_bstack
    if_null rx1092_cstack, rx1092_cstack_done3010
    unless rx1092_cstack, rx1092_cstack_done3010
    dec $I19
    set $P11, rx1092_cstack[$I19]
  rx1092_cstack_done3010:
    pop rx1092_rep, rx1092_bstack
    pop rx1092_pos, rx1092_bstack
    pop $I19, rx1092_bstack
    lt rx1092_pos, -1, rx1092_done3005
    lt rx1092_pos, 0, rx1092_fail3007
    eq $I19, 0, rx1092_fail3007
    nqp_islist $I20, rx1092_cstack
    unless $I20, rx1092_jump3008
    elements $I18, rx1092_bstack
    le $I18, 0, rx1092_cut3009
    dec $I18
    set $I18, rx1092_bstack[$I18]
  rx1092_cut3009:
    assign rx1092_cstack, $I18
  rx1092_jump3008:
    jump $I19
  rx1092_done3005:
    rx1092_cur."!cursor_fail"()
    .return (rx1092_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1346233478.067_caps" :subid("cuid_memo_329_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1346233478.067_nfa" :subid("cuid_memo_330_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 60
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 61
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_198_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1096_tgt
    .local int rx1096_pos
    .local int rx1096_off
    .local int rx1096_eos
    .local int rx1096_rep
    .local pmc rx1096_cur
    .local pmc rx1096_curclass
    .local pmc rx1096_bstack
    .local pmc rx1096_cstack
    (rx1096_cur, rx1096_tgt, rx1096_pos, rx1096_curclass, rx1096_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1096_cur
    length rx1096_eos, rx1096_tgt
    eq $I19, 1, rx1096_restart3019
    gt rx1096_pos, rx1096_eos, rx1096_fail3020
    repr_get_attr_int $I11, self, rx1096_curclass, "$!from"
    ne $I11, -1, rxscan1097_done3026
    goto rxscan1097_scan3025
  rxscan1097_loop3024:
    inc rx1096_pos
    gt rx1096_pos, rx1096_eos, rx1096_fail3020
    repr_bind_attr_int rx1096_cur, rx1096_curclass, "$!from", rx1096_pos
  rxscan1097_scan3025:
    nqp_rxmark rx1096_bstack, rxscan1097_loop3024, rx1096_pos, 0
  rxscan1097_done3026:
    nqp_rxmark rx1096_bstack, rxcap1098_fail3028, rx1096_pos, 0
    add $I11, rx1096_pos, 2
    gt $I11, rx1096_eos, rx1096_fail3020
    substr $S10, rx1096_tgt, rx1096_pos, 2
    ne $S10, ucs4:">=", rx1096_fail3020
    add rx1096_pos, 2
    nqp_rxpeek $I19, rx1096_bstack, rxcap1098_fail3028
    inc $I19
    set $I11, rx1096_bstack[$I19]
    $P11 = rx1096_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1096_pos)
    rx1096_cstack = rx1096_cur."!cursor_capture"($P11, "sym")
    goto rxcap1098_done3027
  rxcap1098_fail3028:
    goto rx1096_fail3020
  rxcap1098_done3027:
    repr_bind_attr_int rx1096_cur, rx1096_curclass, "$!pos", rx1096_pos
    $P11 = rx1096_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1096_curclass, "$!pos"
    lt $I11, 0, rx1096_fail3020
    nqp_rxmark rx1096_bstack, rxsubrule1099_pass3029, -1, 0
  rxsubrule1099_pass3029:
    rx1096_cstack = rx1096_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1096_pos, $P11, rx1096_curclass, "$!pos"
    rx1096_cur."!cursor_pass"(rx1096_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1096_cur)
  rx1096_restart3019:
    repr_get_attr_obj rx1096_cstack, rx1096_cur, rx1096_curclass, "$!cstack"
  rx1096_fail3020:
    unless rx1096_bstack, rx1096_done3018
    pop $I19, rx1096_bstack
    if_null rx1096_cstack, rx1096_cstack_done3023
    unless rx1096_cstack, rx1096_cstack_done3023
    dec $I19
    set $P11, rx1096_cstack[$I19]
  rx1096_cstack_done3023:
    pop rx1096_rep, rx1096_bstack
    pop rx1096_pos, rx1096_bstack
    pop $I19, rx1096_bstack
    lt rx1096_pos, -1, rx1096_done3018
    lt rx1096_pos, 0, rx1096_fail3020
    eq $I19, 0, rx1096_fail3020
    nqp_islist $I20, rx1096_cstack
    unless $I20, rx1096_jump3021
    elements $I18, rx1096_bstack
    le $I18, 0, rx1096_cut3022
    dec $I18
    set $I18, rx1096_bstack[$I18]
  rx1096_cut3022:
    assign rx1096_cstack, $I18
  rx1096_jump3021:
    jump $I19
  rx1096_done3018:
    rx1096_cur."!cursor_fail"()
    .return (rx1096_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1346233478.067_caps" :subid("cuid_memo_331_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1346233478.067_nfa" :subid("cuid_memo_332_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 62
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 61
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_199_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1100_tgt
    .local int rx1100_pos
    .local int rx1100_off
    .local int rx1100_eos
    .local int rx1100_rep
    .local pmc rx1100_cur
    .local pmc rx1100_curclass
    .local pmc rx1100_bstack
    .local pmc rx1100_cstack
    (rx1100_cur, rx1100_tgt, rx1100_pos, rx1100_curclass, rx1100_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1100_cur
    length rx1100_eos, rx1100_tgt
    eq $I19, 1, rx1100_restart3032
    gt rx1100_pos, rx1100_eos, rx1100_fail3033
    repr_get_attr_int $I11, self, rx1100_curclass, "$!from"
    ne $I11, -1, rxscan1101_done3039
    goto rxscan1101_scan3038
  rxscan1101_loop3037:
    inc rx1100_pos
    gt rx1100_pos, rx1100_eos, rx1100_fail3033
    repr_bind_attr_int rx1100_cur, rx1100_curclass, "$!from", rx1100_pos
  rxscan1101_scan3038:
    nqp_rxmark rx1100_bstack, rxscan1101_loop3037, rx1100_pos, 0
  rxscan1101_done3039:
    nqp_rxmark rx1100_bstack, rxcap1102_fail3041, rx1100_pos, 0
    add $I11, rx1100_pos, 1
    gt $I11, rx1100_eos, rx1100_fail3033
    substr $S10, rx1100_tgt, rx1100_pos, 1
    ne $S10, ucs4:"<", rx1100_fail3033
    add rx1100_pos, 1
    nqp_rxpeek $I19, rx1100_bstack, rxcap1102_fail3041
    inc $I19
    set $I11, rx1100_bstack[$I19]
    $P11 = rx1100_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1100_pos)
    rx1100_cstack = rx1100_cur."!cursor_capture"($P11, "sym")
    goto rxcap1102_done3040
  rxcap1102_fail3041:
    goto rx1100_fail3033
  rxcap1102_done3040:
    repr_bind_attr_int rx1100_cur, rx1100_curclass, "$!pos", rx1100_pos
    $P11 = rx1100_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1100_curclass, "$!pos"
    lt $I11, 0, rx1100_fail3033
    nqp_rxmark rx1100_bstack, rxsubrule1103_pass3042, -1, 0
  rxsubrule1103_pass3042:
    rx1100_cstack = rx1100_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1100_pos, $P11, rx1100_curclass, "$!pos"
    rx1100_cur."!cursor_pass"(rx1100_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1100_cur)
  rx1100_restart3032:
    repr_get_attr_obj rx1100_cstack, rx1100_cur, rx1100_curclass, "$!cstack"
  rx1100_fail3033:
    unless rx1100_bstack, rx1100_done3031
    pop $I19, rx1100_bstack
    if_null rx1100_cstack, rx1100_cstack_done3036
    unless rx1100_cstack, rx1100_cstack_done3036
    dec $I19
    set $P11, rx1100_cstack[$I19]
  rx1100_cstack_done3036:
    pop rx1100_rep, rx1100_bstack
    pop rx1100_pos, rx1100_bstack
    pop $I19, rx1100_bstack
    lt rx1100_pos, -1, rx1100_done3031
    lt rx1100_pos, 0, rx1100_fail3033
    eq $I19, 0, rx1100_fail3033
    nqp_islist $I20, rx1100_cstack
    unless $I20, rx1100_jump3034
    elements $I18, rx1100_bstack
    le $I18, 0, rx1100_cut3035
    dec $I18
    set $I18, rx1100_bstack[$I18]
  rx1100_cut3035:
    assign rx1100_cstack, $I18
  rx1100_jump3034:
    jump $I19
  rx1100_done3031:
    rx1100_cur."!cursor_fail"()
    .return (rx1100_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1346233478.067_caps" :subid("cuid_memo_333_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1346233478.067_nfa" :subid("cuid_memo_334_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 60
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_200_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1287
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1104_tgt
    .local int rx1104_pos
    .local int rx1104_off
    .local int rx1104_eos
    .local int rx1104_rep
    .local pmc rx1104_cur
    .local pmc rx1104_curclass
    .local pmc rx1104_bstack
    .local pmc rx1104_cstack
    (rx1104_cur, rx1104_tgt, rx1104_pos, rx1104_curclass, rx1104_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1104_cur
    length rx1104_eos, rx1104_tgt
    eq $I19, 1, rx1104_restart3045
    gt rx1104_pos, rx1104_eos, rx1104_fail3046
    repr_get_attr_int $I11, self, rx1104_curclass, "$!from"
    ne $I11, -1, rxscan1105_done3052
    goto rxscan1105_scan3051
  rxscan1105_loop3050:
    inc rx1104_pos
    gt rx1104_pos, rx1104_eos, rx1104_fail3046
    repr_bind_attr_int rx1104_cur, rx1104_curclass, "$!from", rx1104_pos
  rxscan1105_scan3051:
    nqp_rxmark rx1104_bstack, rxscan1105_loop3050, rx1104_pos, 0
  rxscan1105_done3052:
    nqp_rxmark rx1104_bstack, rxcap1106_fail3054, rx1104_pos, 0
    add $I11, rx1104_pos, 1
    gt $I11, rx1104_eos, rx1104_fail3046
    substr $S10, rx1104_tgt, rx1104_pos, 1
    ne $S10, ucs4:">", rx1104_fail3046
    add rx1104_pos, 1
    nqp_rxpeek $I19, rx1104_bstack, rxcap1106_fail3054
    inc $I19
    set $I11, rx1104_bstack[$I19]
    $P11 = rx1104_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1104_pos)
    rx1104_cstack = rx1104_cur."!cursor_capture"($P11, "sym")
    goto rxcap1106_done3053
  rxcap1106_fail3054:
    goto rx1104_fail3046
  rxcap1106_done3053:
    repr_bind_attr_int rx1104_cur, rx1104_curclass, "$!pos", rx1104_pos
    $P11 = rx1104_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1104_curclass, "$!pos"
    lt $I11, 0, rx1104_fail3046
    nqp_rxmark rx1104_bstack, rxsubrule1107_pass3055, -1, 0
  rxsubrule1107_pass3055:
    rx1104_cstack = rx1104_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1104_pos, $P11, rx1104_curclass, "$!pos"
    rx1104_cur."!cursor_pass"(rx1104_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1104_cur)
  rx1104_restart3045:
    repr_get_attr_obj rx1104_cstack, rx1104_cur, rx1104_curclass, "$!cstack"
  rx1104_fail3046:
    unless rx1104_bstack, rx1104_done3044
    pop $I19, rx1104_bstack
    if_null rx1104_cstack, rx1104_cstack_done3049
    unless rx1104_cstack, rx1104_cstack_done3049
    dec $I19
    set $P11, rx1104_cstack[$I19]
  rx1104_cstack_done3049:
    pop rx1104_rep, rx1104_bstack
    pop rx1104_pos, rx1104_bstack
    pop $I19, rx1104_bstack
    lt rx1104_pos, -1, rx1104_done3044
    lt rx1104_pos, 0, rx1104_fail3046
    eq $I19, 0, rx1104_fail3046
    nqp_islist $I20, rx1104_cstack
    unless $I20, rx1104_jump3047
    elements $I18, rx1104_bstack
    le $I18, 0, rx1104_cut3048
    dec $I18
    set $I18, rx1104_bstack[$I18]
  rx1104_cut3048:
    assign rx1104_cstack, $I18
  rx1104_jump3047:
    jump $I19
  rx1104_done3044:
    rx1104_cur."!cursor_fail"()
    .return (rx1104_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1346233478.067_caps" :subid("cuid_memo_335_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1346233478.067_nfa" :subid("cuid_memo_336_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 62
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_201_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1108_tgt
    .local int rx1108_pos
    .local int rx1108_off
    .local int rx1108_eos
    .local int rx1108_rep
    .local pmc rx1108_cur
    .local pmc rx1108_curclass
    .local pmc rx1108_bstack
    .local pmc rx1108_cstack
    (rx1108_cur, rx1108_tgt, rx1108_pos, rx1108_curclass, rx1108_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1108_cur
    length rx1108_eos, rx1108_tgt
    eq $I19, 1, rx1108_restart3058
    gt rx1108_pos, rx1108_eos, rx1108_fail3059
    repr_get_attr_int $I11, self, rx1108_curclass, "$!from"
    ne $I11, -1, rxscan1109_done3065
    goto rxscan1109_scan3064
  rxscan1109_loop3063:
    inc rx1108_pos
    gt rx1108_pos, rx1108_eos, rx1108_fail3059
    repr_bind_attr_int rx1108_cur, rx1108_curclass, "$!from", rx1108_pos
  rxscan1109_scan3064:
    nqp_rxmark rx1108_bstack, rxscan1109_loop3063, rx1108_pos, 0
  rxscan1109_done3065:
    nqp_rxmark rx1108_bstack, rxcap1110_fail3067, rx1108_pos, 0
    add $I11, rx1108_pos, 2
    gt $I11, rx1108_eos, rx1108_fail3059
    substr $S10, rx1108_tgt, rx1108_pos, 2
    ne $S10, ucs4:"eq", rx1108_fail3059
    add rx1108_pos, 2
    nqp_rxpeek $I19, rx1108_bstack, rxcap1110_fail3067
    inc $I19
    set $I11, rx1108_bstack[$I19]
    $P11 = rx1108_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1108_pos)
    rx1108_cstack = rx1108_cur."!cursor_capture"($P11, "sym")
    goto rxcap1110_done3066
  rxcap1110_fail3067:
    goto rx1108_fail3059
  rxcap1110_done3066:
    repr_bind_attr_int rx1108_cur, rx1108_curclass, "$!pos", rx1108_pos
    $P11 = rx1108_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1108_curclass, "$!pos"
    lt $I11, 0, rx1108_fail3059
    nqp_rxmark rx1108_bstack, rxsubrule1111_pass3068, -1, 0
  rxsubrule1111_pass3068:
    rx1108_cstack = rx1108_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1108_pos, $P11, rx1108_curclass, "$!pos"
    rx1108_cur."!cursor_pass"(rx1108_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1108_cur)
  rx1108_restart3058:
    repr_get_attr_obj rx1108_cstack, rx1108_cur, rx1108_curclass, "$!cstack"
  rx1108_fail3059:
    unless rx1108_bstack, rx1108_done3057
    pop $I19, rx1108_bstack
    if_null rx1108_cstack, rx1108_cstack_done3062
    unless rx1108_cstack, rx1108_cstack_done3062
    dec $I19
    set $P11, rx1108_cstack[$I19]
  rx1108_cstack_done3062:
    pop rx1108_rep, rx1108_bstack
    pop rx1108_pos, rx1108_bstack
    pop $I19, rx1108_bstack
    lt rx1108_pos, -1, rx1108_done3057
    lt rx1108_pos, 0, rx1108_fail3059
    eq $I19, 0, rx1108_fail3059
    nqp_islist $I20, rx1108_cstack
    unless $I20, rx1108_jump3060
    elements $I18, rx1108_bstack
    le $I18, 0, rx1108_cut3061
    dec $I18
    set $I18, rx1108_bstack[$I18]
  rx1108_cut3061:
    assign rx1108_cstack, $I18
  rx1108_jump3060:
    jump $I19
  rx1108_done3057:
    rx1108_cur."!cursor_fail"()
    .return (rx1108_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1346233478.067_caps" :subid("cuid_memo_337_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1346233478.067_nfa" :subid("cuid_memo_338_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 101
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 113
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_202_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1112_tgt
    .local int rx1112_pos
    .local int rx1112_off
    .local int rx1112_eos
    .local int rx1112_rep
    .local pmc rx1112_cur
    .local pmc rx1112_curclass
    .local pmc rx1112_bstack
    .local pmc rx1112_cstack
    (rx1112_cur, rx1112_tgt, rx1112_pos, rx1112_curclass, rx1112_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1112_cur
    length rx1112_eos, rx1112_tgt
    eq $I19, 1, rx1112_restart3071
    gt rx1112_pos, rx1112_eos, rx1112_fail3072
    repr_get_attr_int $I11, self, rx1112_curclass, "$!from"
    ne $I11, -1, rxscan1113_done3078
    goto rxscan1113_scan3077
  rxscan1113_loop3076:
    inc rx1112_pos
    gt rx1112_pos, rx1112_eos, rx1112_fail3072
    repr_bind_attr_int rx1112_cur, rx1112_curclass, "$!from", rx1112_pos
  rxscan1113_scan3077:
    nqp_rxmark rx1112_bstack, rxscan1113_loop3076, rx1112_pos, 0
  rxscan1113_done3078:
    nqp_rxmark rx1112_bstack, rxcap1114_fail3080, rx1112_pos, 0
    add $I11, rx1112_pos, 2
    gt $I11, rx1112_eos, rx1112_fail3072
    substr $S10, rx1112_tgt, rx1112_pos, 2
    ne $S10, ucs4:"ne", rx1112_fail3072
    add rx1112_pos, 2
    nqp_rxpeek $I19, rx1112_bstack, rxcap1114_fail3080
    inc $I19
    set $I11, rx1112_bstack[$I19]
    $P11 = rx1112_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1112_pos)
    rx1112_cstack = rx1112_cur."!cursor_capture"($P11, "sym")
    goto rxcap1114_done3079
  rxcap1114_fail3080:
    goto rx1112_fail3072
  rxcap1114_done3079:
    repr_bind_attr_int rx1112_cur, rx1112_curclass, "$!pos", rx1112_pos
    $P11 = rx1112_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1112_curclass, "$!pos"
    lt $I11, 0, rx1112_fail3072
    nqp_rxmark rx1112_bstack, rxsubrule1115_pass3081, -1, 0
  rxsubrule1115_pass3081:
    rx1112_cstack = rx1112_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1112_pos, $P11, rx1112_curclass, "$!pos"
    rx1112_cur."!cursor_pass"(rx1112_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1112_cur)
  rx1112_restart3071:
    repr_get_attr_obj rx1112_cstack, rx1112_cur, rx1112_curclass, "$!cstack"
  rx1112_fail3072:
    unless rx1112_bstack, rx1112_done3070
    pop $I19, rx1112_bstack
    if_null rx1112_cstack, rx1112_cstack_done3075
    unless rx1112_cstack, rx1112_cstack_done3075
    dec $I19
    set $P11, rx1112_cstack[$I19]
  rx1112_cstack_done3075:
    pop rx1112_rep, rx1112_bstack
    pop rx1112_pos, rx1112_bstack
    pop $I19, rx1112_bstack
    lt rx1112_pos, -1, rx1112_done3070
    lt rx1112_pos, 0, rx1112_fail3072
    eq $I19, 0, rx1112_fail3072
    nqp_islist $I20, rx1112_cstack
    unless $I20, rx1112_jump3073
    elements $I18, rx1112_bstack
    le $I18, 0, rx1112_cut3074
    dec $I18
    set $I18, rx1112_bstack[$I18]
  rx1112_cut3074:
    assign rx1112_cstack, $I18
  rx1112_jump3073:
    jump $I19
  rx1112_done3070:
    rx1112_cur."!cursor_fail"()
    .return (rx1112_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1346233478.067_caps" :subid("cuid_memo_339_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1346233478.067_nfa" :subid("cuid_memo_340_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 110
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_203_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1116_tgt
    .local int rx1116_pos
    .local int rx1116_off
    .local int rx1116_eos
    .local int rx1116_rep
    .local pmc rx1116_cur
    .local pmc rx1116_curclass
    .local pmc rx1116_bstack
    .local pmc rx1116_cstack
    (rx1116_cur, rx1116_tgt, rx1116_pos, rx1116_curclass, rx1116_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1116_cur
    length rx1116_eos, rx1116_tgt
    eq $I19, 1, rx1116_restart3084
    gt rx1116_pos, rx1116_eos, rx1116_fail3085
    repr_get_attr_int $I11, self, rx1116_curclass, "$!from"
    ne $I11, -1, rxscan1117_done3091
    goto rxscan1117_scan3090
  rxscan1117_loop3089:
    inc rx1116_pos
    gt rx1116_pos, rx1116_eos, rx1116_fail3085
    repr_bind_attr_int rx1116_cur, rx1116_curclass, "$!from", rx1116_pos
  rxscan1117_scan3090:
    nqp_rxmark rx1116_bstack, rxscan1117_loop3089, rx1116_pos, 0
  rxscan1117_done3091:
    nqp_rxmark rx1116_bstack, rxcap1118_fail3093, rx1116_pos, 0
    add $I11, rx1116_pos, 2
    gt $I11, rx1116_eos, rx1116_fail3085
    substr $S10, rx1116_tgt, rx1116_pos, 2
    ne $S10, ucs4:"le", rx1116_fail3085
    add rx1116_pos, 2
    nqp_rxpeek $I19, rx1116_bstack, rxcap1118_fail3093
    inc $I19
    set $I11, rx1116_bstack[$I19]
    $P11 = rx1116_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1116_pos)
    rx1116_cstack = rx1116_cur."!cursor_capture"($P11, "sym")
    goto rxcap1118_done3092
  rxcap1118_fail3093:
    goto rx1116_fail3085
  rxcap1118_done3092:
    repr_bind_attr_int rx1116_cur, rx1116_curclass, "$!pos", rx1116_pos
    $P11 = rx1116_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1116_curclass, "$!pos"
    lt $I11, 0, rx1116_fail3085
    nqp_rxmark rx1116_bstack, rxsubrule1119_pass3094, -1, 0
  rxsubrule1119_pass3094:
    rx1116_cstack = rx1116_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1116_pos, $P11, rx1116_curclass, "$!pos"
    rx1116_cur."!cursor_pass"(rx1116_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1116_cur)
  rx1116_restart3084:
    repr_get_attr_obj rx1116_cstack, rx1116_cur, rx1116_curclass, "$!cstack"
  rx1116_fail3085:
    unless rx1116_bstack, rx1116_done3083
    pop $I19, rx1116_bstack
    if_null rx1116_cstack, rx1116_cstack_done3088
    unless rx1116_cstack, rx1116_cstack_done3088
    dec $I19
    set $P11, rx1116_cstack[$I19]
  rx1116_cstack_done3088:
    pop rx1116_rep, rx1116_bstack
    pop rx1116_pos, rx1116_bstack
    pop $I19, rx1116_bstack
    lt rx1116_pos, -1, rx1116_done3083
    lt rx1116_pos, 0, rx1116_fail3085
    eq $I19, 0, rx1116_fail3085
    nqp_islist $I20, rx1116_cstack
    unless $I20, rx1116_jump3086
    elements $I18, rx1116_bstack
    le $I18, 0, rx1116_cut3087
    dec $I18
    set $I18, rx1116_bstack[$I18]
  rx1116_cut3087:
    assign rx1116_cstack, $I18
  rx1116_jump3086:
    jump $I19
  rx1116_done3083:
    rx1116_cur."!cursor_fail"()
    .return (rx1116_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1346233478.067_caps" :subid("cuid_memo_341_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1346233478.067_nfa" :subid("cuid_memo_342_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 108
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_204_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1120_tgt
    .local int rx1120_pos
    .local int rx1120_off
    .local int rx1120_eos
    .local int rx1120_rep
    .local pmc rx1120_cur
    .local pmc rx1120_curclass
    .local pmc rx1120_bstack
    .local pmc rx1120_cstack
    (rx1120_cur, rx1120_tgt, rx1120_pos, rx1120_curclass, rx1120_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1120_cur
    length rx1120_eos, rx1120_tgt
    eq $I19, 1, rx1120_restart3097
    gt rx1120_pos, rx1120_eos, rx1120_fail3098
    repr_get_attr_int $I11, self, rx1120_curclass, "$!from"
    ne $I11, -1, rxscan1121_done3104
    goto rxscan1121_scan3103
  rxscan1121_loop3102:
    inc rx1120_pos
    gt rx1120_pos, rx1120_eos, rx1120_fail3098
    repr_bind_attr_int rx1120_cur, rx1120_curclass, "$!from", rx1120_pos
  rxscan1121_scan3103:
    nqp_rxmark rx1120_bstack, rxscan1121_loop3102, rx1120_pos, 0
  rxscan1121_done3104:
    nqp_rxmark rx1120_bstack, rxcap1122_fail3106, rx1120_pos, 0
    add $I11, rx1120_pos, 2
    gt $I11, rx1120_eos, rx1120_fail3098
    substr $S10, rx1120_tgt, rx1120_pos, 2
    ne $S10, ucs4:"ge", rx1120_fail3098
    add rx1120_pos, 2
    nqp_rxpeek $I19, rx1120_bstack, rxcap1122_fail3106
    inc $I19
    set $I11, rx1120_bstack[$I19]
    $P11 = rx1120_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1120_pos)
    rx1120_cstack = rx1120_cur."!cursor_capture"($P11, "sym")
    goto rxcap1122_done3105
  rxcap1122_fail3106:
    goto rx1120_fail3098
  rxcap1122_done3105:
    repr_bind_attr_int rx1120_cur, rx1120_curclass, "$!pos", rx1120_pos
    $P11 = rx1120_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1120_curclass, "$!pos"
    lt $I11, 0, rx1120_fail3098
    nqp_rxmark rx1120_bstack, rxsubrule1123_pass3107, -1, 0
  rxsubrule1123_pass3107:
    rx1120_cstack = rx1120_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1120_pos, $P11, rx1120_curclass, "$!pos"
    rx1120_cur."!cursor_pass"(rx1120_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1120_cur)
  rx1120_restart3097:
    repr_get_attr_obj rx1120_cstack, rx1120_cur, rx1120_curclass, "$!cstack"
  rx1120_fail3098:
    unless rx1120_bstack, rx1120_done3096
    pop $I19, rx1120_bstack
    if_null rx1120_cstack, rx1120_cstack_done3101
    unless rx1120_cstack, rx1120_cstack_done3101
    dec $I19
    set $P11, rx1120_cstack[$I19]
  rx1120_cstack_done3101:
    pop rx1120_rep, rx1120_bstack
    pop rx1120_pos, rx1120_bstack
    pop $I19, rx1120_bstack
    lt rx1120_pos, -1, rx1120_done3096
    lt rx1120_pos, 0, rx1120_fail3098
    eq $I19, 0, rx1120_fail3098
    nqp_islist $I20, rx1120_cstack
    unless $I20, rx1120_jump3099
    elements $I18, rx1120_bstack
    le $I18, 0, rx1120_cut3100
    dec $I18
    set $I18, rx1120_bstack[$I18]
  rx1120_cut3100:
    assign rx1120_cstack, $I18
  rx1120_jump3099:
    jump $I19
  rx1120_done3096:
    rx1120_cur."!cursor_fail"()
    .return (rx1120_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1346233478.067_caps" :subid("cuid_memo_343_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1346233478.067_nfa" :subid("cuid_memo_344_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 103
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_205_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1124_tgt
    .local int rx1124_pos
    .local int rx1124_off
    .local int rx1124_eos
    .local int rx1124_rep
    .local pmc rx1124_cur
    .local pmc rx1124_curclass
    .local pmc rx1124_bstack
    .local pmc rx1124_cstack
    (rx1124_cur, rx1124_tgt, rx1124_pos, rx1124_curclass, rx1124_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1124_cur
    length rx1124_eos, rx1124_tgt
    eq $I19, 1, rx1124_restart3110
    gt rx1124_pos, rx1124_eos, rx1124_fail3111
    repr_get_attr_int $I11, self, rx1124_curclass, "$!from"
    ne $I11, -1, rxscan1125_done3117
    goto rxscan1125_scan3116
  rxscan1125_loop3115:
    inc rx1124_pos
    gt rx1124_pos, rx1124_eos, rx1124_fail3111
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!from", rx1124_pos
  rxscan1125_scan3116:
    nqp_rxmark rx1124_bstack, rxscan1125_loop3115, rx1124_pos, 0
  rxscan1125_done3117:
    nqp_rxmark rx1124_bstack, rxcap1126_fail3119, rx1124_pos, 0
    add $I11, rx1124_pos, 2
    gt $I11, rx1124_eos, rx1124_fail3111
    substr $S10, rx1124_tgt, rx1124_pos, 2
    ne $S10, ucs4:"lt", rx1124_fail3111
    add rx1124_pos, 2
    nqp_rxpeek $I19, rx1124_bstack, rxcap1126_fail3119
    inc $I19
    set $I11, rx1124_bstack[$I19]
    $P11 = rx1124_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1124_pos)
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "sym")
    goto rxcap1126_done3118
  rxcap1126_fail3119:
    goto rx1124_fail3111
  rxcap1126_done3118:
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail3111
    nqp_rxmark rx1124_bstack, rxsubrule1127_pass3120, -1, 0
  rxsubrule1127_pass3120:
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
    rx1124_cur."!cursor_pass"(rx1124_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1124_cur)
  rx1124_restart3110:
    repr_get_attr_obj rx1124_cstack, rx1124_cur, rx1124_curclass, "$!cstack"
  rx1124_fail3111:
    unless rx1124_bstack, rx1124_done3109
    pop $I19, rx1124_bstack
    if_null rx1124_cstack, rx1124_cstack_done3114
    unless rx1124_cstack, rx1124_cstack_done3114
    dec $I19
    set $P11, rx1124_cstack[$I19]
  rx1124_cstack_done3114:
    pop rx1124_rep, rx1124_bstack
    pop rx1124_pos, rx1124_bstack
    pop $I19, rx1124_bstack
    lt rx1124_pos, -1, rx1124_done3109
    lt rx1124_pos, 0, rx1124_fail3111
    eq $I19, 0, rx1124_fail3111
    nqp_islist $I20, rx1124_cstack
    unless $I20, rx1124_jump3112
    elements $I18, rx1124_bstack
    le $I18, 0, rx1124_cut3113
    dec $I18
    set $I18, rx1124_bstack[$I18]
  rx1124_cut3113:
    assign rx1124_cstack, $I18
  rx1124_jump3112:
    jump $I19
  rx1124_done3109:
    rx1124_cur."!cursor_fail"()
    .return (rx1124_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1346233478.067_caps" :subid("cuid_memo_345_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1346233478.067_nfa" :subid("cuid_memo_346_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 108
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 116
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_206_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1128_tgt
    .local int rx1128_pos
    .local int rx1128_off
    .local int rx1128_eos
    .local int rx1128_rep
    .local pmc rx1128_cur
    .local pmc rx1128_curclass
    .local pmc rx1128_bstack
    .local pmc rx1128_cstack
    (rx1128_cur, rx1128_tgt, rx1128_pos, rx1128_curclass, rx1128_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1128_cur
    length rx1128_eos, rx1128_tgt
    eq $I19, 1, rx1128_restart3123
    gt rx1128_pos, rx1128_eos, rx1128_fail3124
    repr_get_attr_int $I11, self, rx1128_curclass, "$!from"
    ne $I11, -1, rxscan1129_done3130
    goto rxscan1129_scan3129
  rxscan1129_loop3128:
    inc rx1128_pos
    gt rx1128_pos, rx1128_eos, rx1128_fail3124
    repr_bind_attr_int rx1128_cur, rx1128_curclass, "$!from", rx1128_pos
  rxscan1129_scan3129:
    nqp_rxmark rx1128_bstack, rxscan1129_loop3128, rx1128_pos, 0
  rxscan1129_done3130:
    nqp_rxmark rx1128_bstack, rxcap1130_fail3132, rx1128_pos, 0
    add $I11, rx1128_pos, 2
    gt $I11, rx1128_eos, rx1128_fail3124
    substr $S10, rx1128_tgt, rx1128_pos, 2
    ne $S10, ucs4:"gt", rx1128_fail3124
    add rx1128_pos, 2
    nqp_rxpeek $I19, rx1128_bstack, rxcap1130_fail3132
    inc $I19
    set $I11, rx1128_bstack[$I19]
    $P11 = rx1128_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1128_pos)
    rx1128_cstack = rx1128_cur."!cursor_capture"($P11, "sym")
    goto rxcap1130_done3131
  rxcap1130_fail3132:
    goto rx1128_fail3124
  rxcap1130_done3131:
    repr_bind_attr_int rx1128_cur, rx1128_curclass, "$!pos", rx1128_pos
    $P11 = rx1128_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1128_curclass, "$!pos"
    lt $I11, 0, rx1128_fail3124
    nqp_rxmark rx1128_bstack, rxsubrule1131_pass3133, -1, 0
  rxsubrule1131_pass3133:
    rx1128_cstack = rx1128_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1128_pos, $P11, rx1128_curclass, "$!pos"
    rx1128_cur."!cursor_pass"(rx1128_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1128_cur)
  rx1128_restart3123:
    repr_get_attr_obj rx1128_cstack, rx1128_cur, rx1128_curclass, "$!cstack"
  rx1128_fail3124:
    unless rx1128_bstack, rx1128_done3122
    pop $I19, rx1128_bstack
    if_null rx1128_cstack, rx1128_cstack_done3127
    unless rx1128_cstack, rx1128_cstack_done3127
    dec $I19
    set $P11, rx1128_cstack[$I19]
  rx1128_cstack_done3127:
    pop rx1128_rep, rx1128_bstack
    pop rx1128_pos, rx1128_bstack
    pop $I19, rx1128_bstack
    lt rx1128_pos, -1, rx1128_done3122
    lt rx1128_pos, 0, rx1128_fail3124
    eq $I19, 0, rx1128_fail3124
    nqp_islist $I20, rx1128_cstack
    unless $I20, rx1128_jump3125
    elements $I18, rx1128_bstack
    le $I18, 0, rx1128_cut3126
    dec $I18
    set $I18, rx1128_bstack[$I18]
  rx1128_cut3126:
    assign rx1128_cstack, $I18
  rx1128_jump3125:
    jump $I19
  rx1128_done3122:
    rx1128_cur."!cursor_fail"()
    .return (rx1128_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1346233478.067_caps" :subid("cuid_memo_347_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1346233478.067_nfa" :subid("cuid_memo_348_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 103
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 116
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_207_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1132_tgt
    .local int rx1132_pos
    .local int rx1132_off
    .local int rx1132_eos
    .local int rx1132_rep
    .local pmc rx1132_cur
    .local pmc rx1132_curclass
    .local pmc rx1132_bstack
    .local pmc rx1132_cstack
    (rx1132_cur, rx1132_tgt, rx1132_pos, rx1132_curclass, rx1132_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1132_cur
    length rx1132_eos, rx1132_tgt
    eq $I19, 1, rx1132_restart3136
    gt rx1132_pos, rx1132_eos, rx1132_fail3137
    repr_get_attr_int $I11, self, rx1132_curclass, "$!from"
    ne $I11, -1, rxscan1133_done3143
    goto rxscan1133_scan3142
  rxscan1133_loop3141:
    inc rx1132_pos
    gt rx1132_pos, rx1132_eos, rx1132_fail3137
    repr_bind_attr_int rx1132_cur, rx1132_curclass, "$!from", rx1132_pos
  rxscan1133_scan3142:
    nqp_rxmark rx1132_bstack, rxscan1133_loop3141, rx1132_pos, 0
  rxscan1133_done3143:
    nqp_rxmark rx1132_bstack, rxcap1134_fail3145, rx1132_pos, 0
    add $I11, rx1132_pos, 3
    gt $I11, rx1132_eos, rx1132_fail3137
    substr $S10, rx1132_tgt, rx1132_pos, 3
    ne $S10, ucs4:"=:=", rx1132_fail3137
    add rx1132_pos, 3
    nqp_rxpeek $I19, rx1132_bstack, rxcap1134_fail3145
    inc $I19
    set $I11, rx1132_bstack[$I19]
    $P11 = rx1132_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1132_pos)
    rx1132_cstack = rx1132_cur."!cursor_capture"($P11, "sym")
    goto rxcap1134_done3144
  rxcap1134_fail3145:
    goto rx1132_fail3137
  rxcap1134_done3144:
    repr_bind_attr_int rx1132_cur, rx1132_curclass, "$!pos", rx1132_pos
    $P11 = rx1132_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1132_curclass, "$!pos"
    lt $I11, 0, rx1132_fail3137
    nqp_rxmark rx1132_bstack, rxsubrule1135_pass3146, -1, 0
  rxsubrule1135_pass3146:
    rx1132_cstack = rx1132_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1132_pos, $P11, rx1132_curclass, "$!pos"
    rx1132_cur."!cursor_pass"(rx1132_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1132_cur)
  rx1132_restart3136:
    repr_get_attr_obj rx1132_cstack, rx1132_cur, rx1132_curclass, "$!cstack"
  rx1132_fail3137:
    unless rx1132_bstack, rx1132_done3135
    pop $I19, rx1132_bstack
    if_null rx1132_cstack, rx1132_cstack_done3140
    unless rx1132_cstack, rx1132_cstack_done3140
    dec $I19
    set $P11, rx1132_cstack[$I19]
  rx1132_cstack_done3140:
    pop rx1132_rep, rx1132_bstack
    pop rx1132_pos, rx1132_bstack
    pop $I19, rx1132_bstack
    lt rx1132_pos, -1, rx1132_done3135
    lt rx1132_pos, 0, rx1132_fail3137
    eq $I19, 0, rx1132_fail3137
    nqp_islist $I20, rx1132_cstack
    unless $I20, rx1132_jump3138
    elements $I18, rx1132_bstack
    le $I18, 0, rx1132_cut3139
    dec $I18
    set $I18, rx1132_bstack[$I18]
  rx1132_cut3139:
    assign rx1132_cstack, $I18
  rx1132_jump3138:
    jump $I19
  rx1132_done3135:
    rx1132_cur."!cursor_fail"()
    .return (rx1132_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1346233478.067_caps" :subid("cuid_memo_349_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1346233478.067_nfa" :subid("cuid_memo_350_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 61
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 58
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 61
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "O"
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_208_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1136_tgt
    .local int rx1136_pos
    .local int rx1136_off
    .local int rx1136_eos
    .local int rx1136_rep
    .local pmc rx1136_cur
    .local pmc rx1136_curclass
    .local pmc rx1136_bstack
    .local pmc rx1136_cstack
    (rx1136_cur, rx1136_tgt, rx1136_pos, rx1136_curclass, rx1136_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1136_cur
    length rx1136_eos, rx1136_tgt
    eq $I19, 1, rx1136_restart3149
    gt rx1136_pos, rx1136_eos, rx1136_fail3150
    repr_get_attr_int $I11, self, rx1136_curclass, "$!from"
    ne $I11, -1, rxscan1137_done3156
    goto rxscan1137_scan3155
  rxscan1137_loop3154:
    inc rx1136_pos
    gt rx1136_pos, rx1136_eos, rx1136_fail3150
    repr_bind_attr_int rx1136_cur, rx1136_curclass, "$!from", rx1136_pos
  rxscan1137_scan3155:
    nqp_rxmark rx1136_bstack, rxscan1137_loop3154, rx1136_pos, 0
  rxscan1137_done3156:
    nqp_rxmark rx1136_bstack, rxcap1138_fail3158, rx1136_pos, 0
    add $I11, rx1136_pos, 2
    gt $I11, rx1136_eos, rx1136_fail3150
    substr $S10, rx1136_tgt, rx1136_pos, 2
    ne $S10, ucs4:"~~", rx1136_fail3150
    add rx1136_pos, 2
    nqp_rxpeek $I19, rx1136_bstack, rxcap1138_fail3158
    inc $I19
    set $I11, rx1136_bstack[$I19]
    $P11 = rx1136_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1136_pos)
    rx1136_cstack = rx1136_cur."!cursor_capture"($P11, "sym")
    goto rxcap1138_done3157
  rxcap1138_fail3158:
    goto rx1136_fail3150
  rxcap1138_done3157:
    repr_bind_attr_int rx1136_cur, rx1136_curclass, "$!pos", rx1136_pos
    $P11 = rx1136_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1136_curclass, "$!pos"
    lt $I11, 0, rx1136_fail3150
    nqp_rxmark rx1136_bstack, rxsubrule1139_pass3159, -1, 0
  rxsubrule1139_pass3159:
    rx1136_cstack = rx1136_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1136_pos, $P11, rx1136_curclass, "$!pos"
    rx1136_cur."!cursor_pass"(rx1136_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1136_cur)
  rx1136_restart3149:
    repr_get_attr_obj rx1136_cstack, rx1136_cur, rx1136_curclass, "$!cstack"
  rx1136_fail3150:
    unless rx1136_bstack, rx1136_done3148
    pop $I19, rx1136_bstack
    if_null rx1136_cstack, rx1136_cstack_done3153
    unless rx1136_cstack, rx1136_cstack_done3153
    dec $I19
    set $P11, rx1136_cstack[$I19]
  rx1136_cstack_done3153:
    pop rx1136_rep, rx1136_bstack
    pop rx1136_pos, rx1136_bstack
    pop $I19, rx1136_bstack
    lt rx1136_pos, -1, rx1136_done3148
    lt rx1136_pos, 0, rx1136_fail3150
    eq $I19, 0, rx1136_fail3150
    nqp_islist $I20, rx1136_cstack
    unless $I20, rx1136_jump3151
    elements $I18, rx1136_bstack
    le $I18, 0, rx1136_cut3152
    dec $I18
    set $I18, rx1136_bstack[$I18]
  rx1136_cut3152:
    assign rx1136_cstack, $I18
  rx1136_jump3151:
    jump $I19
  rx1136_done3148:
    rx1136_cur."!cursor_fail"()
    .return (rx1136_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1346233478.067_caps" :subid("cuid_memo_351_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1346233478.067_nfa" :subid("cuid_memo_352_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 126
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 126
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_209_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1140_tgt
    .local int rx1140_pos
    .local int rx1140_off
    .local int rx1140_eos
    .local int rx1140_rep
    .local pmc rx1140_cur
    .local pmc rx1140_curclass
    .local pmc rx1140_bstack
    .local pmc rx1140_cstack
    (rx1140_cur, rx1140_tgt, rx1140_pos, rx1140_curclass, rx1140_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1140_cur
    length rx1140_eos, rx1140_tgt
    eq $I19, 1, rx1140_restart3162
    gt rx1140_pos, rx1140_eos, rx1140_fail3163
    repr_get_attr_int $I11, self, rx1140_curclass, "$!from"
    ne $I11, -1, rxscan1141_done3169
    goto rxscan1141_scan3168
  rxscan1141_loop3167:
    inc rx1140_pos
    gt rx1140_pos, rx1140_eos, rx1140_fail3163
    repr_bind_attr_int rx1140_cur, rx1140_curclass, "$!from", rx1140_pos
  rxscan1141_scan3168:
    nqp_rxmark rx1140_bstack, rxscan1141_loop3167, rx1140_pos, 0
  rxscan1141_done3169:
    nqp_rxmark rx1140_bstack, rxcap1142_fail3171, rx1140_pos, 0
    add $I11, rx1140_pos, 2
    gt $I11, rx1140_eos, rx1140_fail3163
    substr $S10, rx1140_tgt, rx1140_pos, 2
    ne $S10, ucs4:"&&", rx1140_fail3163
    add rx1140_pos, 2
    nqp_rxpeek $I19, rx1140_bstack, rxcap1142_fail3171
    inc $I19
    set $I11, rx1140_bstack[$I19]
    $P11 = rx1140_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1140_pos)
    rx1140_cstack = rx1140_cur."!cursor_capture"($P11, "sym")
    goto rxcap1142_done3170
  rxcap1142_fail3171:
    goto rx1140_fail3163
  rxcap1142_done3170:
    repr_bind_attr_int rx1140_cur, rx1140_curclass, "$!pos", rx1140_pos
    $P11 = rx1140_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1140_curclass, "$!pos"
    lt $I11, 0, rx1140_fail3163
    nqp_rxmark rx1140_bstack, rxsubrule1143_pass3172, -1, 0
  rxsubrule1143_pass3172:
    rx1140_cstack = rx1140_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1140_pos, $P11, rx1140_curclass, "$!pos"
    rx1140_cur."!cursor_pass"(rx1140_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1140_cur)
  rx1140_restart3162:
    repr_get_attr_obj rx1140_cstack, rx1140_cur, rx1140_curclass, "$!cstack"
  rx1140_fail3163:
    unless rx1140_bstack, rx1140_done3161
    pop $I19, rx1140_bstack
    if_null rx1140_cstack, rx1140_cstack_done3166
    unless rx1140_cstack, rx1140_cstack_done3166
    dec $I19
    set $P11, rx1140_cstack[$I19]
  rx1140_cstack_done3166:
    pop rx1140_rep, rx1140_bstack
    pop rx1140_pos, rx1140_bstack
    pop $I19, rx1140_bstack
    lt rx1140_pos, -1, rx1140_done3161
    lt rx1140_pos, 0, rx1140_fail3163
    eq $I19, 0, rx1140_fail3163
    nqp_islist $I20, rx1140_cstack
    unless $I20, rx1140_jump3164
    elements $I18, rx1140_bstack
    le $I18, 0, rx1140_cut3165
    dec $I18
    set $I18, rx1140_bstack[$I18]
  rx1140_cut3165:
    assign rx1140_cstack, $I18
  rx1140_jump3164:
    jump $I19
  rx1140_done3161:
    rx1140_cur."!cursor_fail"()
    .return (rx1140_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1346233478.067_caps" :subid("cuid_memo_353_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1346233478.067_nfa" :subid("cuid_memo_354_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 38
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 38
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_210_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1144_tgt
    .local int rx1144_pos
    .local int rx1144_off
    .local int rx1144_eos
    .local int rx1144_rep
    .local pmc rx1144_cur
    .local pmc rx1144_curclass
    .local pmc rx1144_bstack
    .local pmc rx1144_cstack
    (rx1144_cur, rx1144_tgt, rx1144_pos, rx1144_curclass, rx1144_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1144_cur
    length rx1144_eos, rx1144_tgt
    eq $I19, 1, rx1144_restart3175
    gt rx1144_pos, rx1144_eos, rx1144_fail3176
    repr_get_attr_int $I11, self, rx1144_curclass, "$!from"
    ne $I11, -1, rxscan1145_done3182
    goto rxscan1145_scan3181
  rxscan1145_loop3180:
    inc rx1144_pos
    gt rx1144_pos, rx1144_eos, rx1144_fail3176
    repr_bind_attr_int rx1144_cur, rx1144_curclass, "$!from", rx1144_pos
  rxscan1145_scan3181:
    nqp_rxmark rx1144_bstack, rxscan1145_loop3180, rx1144_pos, 0
  rxscan1145_done3182:
    nqp_rxmark rx1144_bstack, rxcap1146_fail3184, rx1144_pos, 0
    add $I11, rx1144_pos, 2
    gt $I11, rx1144_eos, rx1144_fail3176
    substr $S10, rx1144_tgt, rx1144_pos, 2
    ne $S10, ucs4:"||", rx1144_fail3176
    add rx1144_pos, 2
    nqp_rxpeek $I19, rx1144_bstack, rxcap1146_fail3184
    inc $I19
    set $I11, rx1144_bstack[$I19]
    $P11 = rx1144_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1144_pos)
    rx1144_cstack = rx1144_cur."!cursor_capture"($P11, "sym")
    goto rxcap1146_done3183
  rxcap1146_fail3184:
    goto rx1144_fail3176
  rxcap1146_done3183:
    repr_bind_attr_int rx1144_cur, rx1144_curclass, "$!pos", rx1144_pos
    $P11 = rx1144_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1144_curclass, "$!pos"
    lt $I11, 0, rx1144_fail3176
    nqp_rxmark rx1144_bstack, rxsubrule1147_pass3185, -1, 0
  rxsubrule1147_pass3185:
    rx1144_cstack = rx1144_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1144_pos, $P11, rx1144_curclass, "$!pos"
    rx1144_cur."!cursor_pass"(rx1144_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1144_cur)
  rx1144_restart3175:
    repr_get_attr_obj rx1144_cstack, rx1144_cur, rx1144_curclass, "$!cstack"
  rx1144_fail3176:
    unless rx1144_bstack, rx1144_done3174
    pop $I19, rx1144_bstack
    if_null rx1144_cstack, rx1144_cstack_done3179
    unless rx1144_cstack, rx1144_cstack_done3179
    dec $I19
    set $P11, rx1144_cstack[$I19]
  rx1144_cstack_done3179:
    pop rx1144_rep, rx1144_bstack
    pop rx1144_pos, rx1144_bstack
    pop $I19, rx1144_bstack
    lt rx1144_pos, -1, rx1144_done3174
    lt rx1144_pos, 0, rx1144_fail3176
    eq $I19, 0, rx1144_fail3176
    nqp_islist $I20, rx1144_cstack
    unless $I20, rx1144_jump3177
    elements $I18, rx1144_bstack
    le $I18, 0, rx1144_cut3178
    dec $I18
    set $I18, rx1144_bstack[$I18]
  rx1144_cut3178:
    assign rx1144_cstack, $I18
  rx1144_jump3177:
    jump $I19
  rx1144_done3174:
    rx1144_cur."!cursor_fail"()
    .return (rx1144_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1346233478.067_caps" :subid("cuid_memo_355_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1346233478.067_nfa" :subid("cuid_memo_356_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 124
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 124
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_211_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1300
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1148_tgt
    .local int rx1148_pos
    .local int rx1148_off
    .local int rx1148_eos
    .local int rx1148_rep
    .local pmc rx1148_cur
    .local pmc rx1148_curclass
    .local pmc rx1148_bstack
    .local pmc rx1148_cstack
    (rx1148_cur, rx1148_tgt, rx1148_pos, rx1148_curclass, rx1148_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1148_cur
    length rx1148_eos, rx1148_tgt
    eq $I19, 1, rx1148_restart3188
    gt rx1148_pos, rx1148_eos, rx1148_fail3189
    repr_get_attr_int $I11, self, rx1148_curclass, "$!from"
    ne $I11, -1, rxscan1149_done3195
    goto rxscan1149_scan3194
  rxscan1149_loop3193:
    inc rx1148_pos
    gt rx1148_pos, rx1148_eos, rx1148_fail3189
    repr_bind_attr_int rx1148_cur, rx1148_curclass, "$!from", rx1148_pos
  rxscan1149_scan3194:
    nqp_rxmark rx1148_bstack, rxscan1149_loop3193, rx1148_pos, 0
  rxscan1149_done3195:
    nqp_rxmark rx1148_bstack, rxcap1150_fail3197, rx1148_pos, 0
    add $I11, rx1148_pos, 2
    gt $I11, rx1148_eos, rx1148_fail3189
    substr $S10, rx1148_tgt, rx1148_pos, 2
    ne $S10, ucs4:"//", rx1148_fail3189
    add rx1148_pos, 2
    nqp_rxpeek $I19, rx1148_bstack, rxcap1150_fail3197
    inc $I19
    set $I11, rx1148_bstack[$I19]
    $P11 = rx1148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1148_pos)
    rx1148_cstack = rx1148_cur."!cursor_capture"($P11, "sym")
    goto rxcap1150_done3196
  rxcap1150_fail3197:
    goto rx1148_fail3189
  rxcap1150_done3196:
    repr_bind_attr_int rx1148_cur, rx1148_curclass, "$!pos", rx1148_pos
    $P11 = rx1148_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1148_curclass, "$!pos"
    lt $I11, 0, rx1148_fail3189
    nqp_rxmark rx1148_bstack, rxsubrule1151_pass3198, -1, 0
  rxsubrule1151_pass3198:
    rx1148_cstack = rx1148_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1148_pos, $P11, rx1148_curclass, "$!pos"
    rx1148_cur."!cursor_pass"(rx1148_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1148_cur)
  rx1148_restart3188:
    repr_get_attr_obj rx1148_cstack, rx1148_cur, rx1148_curclass, "$!cstack"
  rx1148_fail3189:
    unless rx1148_bstack, rx1148_done3187
    pop $I19, rx1148_bstack
    if_null rx1148_cstack, rx1148_cstack_done3192
    unless rx1148_cstack, rx1148_cstack_done3192
    dec $I19
    set $P11, rx1148_cstack[$I19]
  rx1148_cstack_done3192:
    pop rx1148_rep, rx1148_bstack
    pop rx1148_pos, rx1148_bstack
    pop $I19, rx1148_bstack
    lt rx1148_pos, -1, rx1148_done3187
    lt rx1148_pos, 0, rx1148_fail3189
    eq $I19, 0, rx1148_fail3189
    nqp_islist $I20, rx1148_cstack
    unless $I20, rx1148_jump3190
    elements $I18, rx1148_bstack
    le $I18, 0, rx1148_cut3191
    dec $I18
    set $I18, rx1148_bstack[$I18]
  rx1148_cut3191:
    assign rx1148_cstack, $I18
  rx1148_jump3190:
    jump $I19
  rx1148_done3187:
    rx1148_cur."!cursor_fail"()
    .return (rx1148_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1346233478.067_caps" :subid("cuid_memo_357_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1346233478.067_nfa" :subid("cuid_memo_358_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 47
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 47
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_212_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1152_tgt
    .local int rx1152_pos
    .local int rx1152_off
    .local int rx1152_eos
    .local int rx1152_rep
    .local pmc rx1152_cur
    .local pmc rx1152_curclass
    .local pmc rx1152_bstack
    .local pmc rx1152_cstack
    (rx1152_cur, rx1152_tgt, rx1152_pos, rx1152_curclass, rx1152_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1152_cur
    length rx1152_eos, rx1152_tgt
    eq $I19, 1, rx1152_restart3201
    gt rx1152_pos, rx1152_eos, rx1152_fail3202
    repr_get_attr_int $I11, self, rx1152_curclass, "$!from"
    ne $I11, -1, rxscan1153_done3208
    goto rxscan1153_scan3207
  rxscan1153_loop3206:
    inc rx1152_pos
    gt rx1152_pos, rx1152_eos, rx1152_fail3202
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!from", rx1152_pos
  rxscan1153_scan3207:
    nqp_rxmark rx1152_bstack, rxscan1153_loop3206, rx1152_pos, 0
  rxscan1153_done3208:
    add $I11, rx1152_pos, 2
    gt $I11, rx1152_eos, rx1152_fail3202
    substr $S10, rx1152_tgt, rx1152_pos, 2
    ne $S10, ucs4:"??", rx1152_fail3202
    add rx1152_pos, 2
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3202
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3202
    nqp_rxmark rx1152_bstack, rxsubrule1155_pass3210, -1, 0
  rxsubrule1155_pass3210:
    rx1152_cstack = rx1152_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    add $I11, rx1152_pos, 2
    gt $I11, rx1152_eos, rx1152_fail3202
    substr $S10, rx1152_tgt, rx1152_pos, 2
    ne $S10, ucs4:"!!", rx1152_fail3202
    add rx1152_pos, 2
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3202
    nqp_rxmark rx1152_bstack, rxsubrule1156_pass3211, -1, 0
  rxsubrule1156_pass3211:
    rx1152_cstack = rx1152_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    rx1152_cur."!cursor_pass"(rx1152_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1152_cur)
  rx1152_restart3201:
    repr_get_attr_obj rx1152_cstack, rx1152_cur, rx1152_curclass, "$!cstack"
  rx1152_fail3202:
    unless rx1152_bstack, rx1152_done3200
    pop $I19, rx1152_bstack
    if_null rx1152_cstack, rx1152_cstack_done3205
    unless rx1152_cstack, rx1152_cstack_done3205
    dec $I19
    set $P11, rx1152_cstack[$I19]
  rx1152_cstack_done3205:
    pop rx1152_rep, rx1152_bstack
    pop rx1152_pos, rx1152_bstack
    pop $I19, rx1152_bstack
    lt rx1152_pos, -1, rx1152_done3200
    lt rx1152_pos, 0, rx1152_fail3202
    eq $I19, 0, rx1152_fail3202
    nqp_islist $I20, rx1152_cstack
    unless $I20, rx1152_jump3203
    elements $I18, rx1152_bstack
    le $I18, 0, rx1152_cut3204
    dec $I18
    set $I18, rx1152_bstack[$I18]
  rx1152_cut3204:
    assign rx1152_cstack, $I18
  rx1152_jump3203:
    jump $I19
  rx1152_done3200:
    rx1152_cur."!cursor_fail"()
    .return (rx1152_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1346233478.067_caps" :subid("cuid_memo_359_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["EXPR"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1346233478.067_nfa" :subid("cuid_memo_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 63
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 63
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "ws"
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "EXPR"
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 33
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 33
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 8
    push $P527, $P528
    box $P529, "O"
    push $P527, $P529
    box $P530, 0
    push $P527, $P530
    push $P501, $P527
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_213_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1157_tgt
    .local int rx1157_pos
    .local int rx1157_off
    .local int rx1157_eos
    .local int rx1157_rep
    .local pmc rx1157_cur
    .local pmc rx1157_curclass
    .local pmc rx1157_bstack
    .local pmc rx1157_cstack
    (rx1157_cur, rx1157_tgt, rx1157_pos, rx1157_curclass, rx1157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1157_cur
    length rx1157_eos, rx1157_tgt
    eq $I19, 1, rx1157_restart3214
    gt rx1157_pos, rx1157_eos, rx1157_fail3215
    repr_get_attr_int $I11, self, rx1157_curclass, "$!from"
    ne $I11, -1, rxscan1158_done3221
    goto rxscan1158_scan3220
  rxscan1158_loop3219:
    inc rx1157_pos
    gt rx1157_pos, rx1157_eos, rx1157_fail3215
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!from", rx1157_pos
  rxscan1158_scan3220:
    nqp_rxmark rx1157_bstack, rxscan1158_loop3219, rx1157_pos, 0
  rxscan1158_done3221:
    nqp_rxmark rx1157_bstack, rxcap1159_fail3223, rx1157_pos, 0
    add $I11, rx1157_pos, 1
    gt $I11, rx1157_eos, rx1157_fail3215
    substr $S10, rx1157_tgt, rx1157_pos, 1
    ne $S10, ucs4:"=", rx1157_fail3215
    add rx1157_pos, 1
    nqp_rxpeek $I19, rx1157_bstack, rxcap1159_fail3223
    inc $I19
    set $I11, rx1157_bstack[$I19]
    $P11 = rx1157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1157_pos)
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "sym")
    goto rxcap1159_done3222
  rxcap1159_fail3223:
    goto rx1157_fail3215
  rxcap1159_done3222:
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1157_curclass, "$!pos"
    lt $I11, 0, rx1157_fail3215
    repr_get_attr_int rx1157_pos, $P11, rx1157_curclass, "$!pos"
    rx1157_cur."!cursor_pass"(rx1157_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1157_cur)
  rx1157_restart3214:
    repr_get_attr_obj rx1157_cstack, rx1157_cur, rx1157_curclass, "$!cstack"
  rx1157_fail3215:
    unless rx1157_bstack, rx1157_done3213
    pop $I19, rx1157_bstack
    if_null rx1157_cstack, rx1157_cstack_done3218
    unless rx1157_cstack, rx1157_cstack_done3218
    dec $I19
    set $P11, rx1157_cstack[$I19]
  rx1157_cstack_done3218:
    pop rx1157_rep, rx1157_bstack
    pop rx1157_pos, rx1157_bstack
    pop $I19, rx1157_bstack
    lt rx1157_pos, -1, rx1157_done3213
    lt rx1157_pos, 0, rx1157_fail3215
    eq $I19, 0, rx1157_fail3215
    nqp_islist $I20, rx1157_cstack
    unless $I20, rx1157_jump3216
    elements $I18, rx1157_bstack
    le $I18, 0, rx1157_cut3217
    dec $I18
    set $I18, rx1157_bstack[$I18]
  rx1157_cut3217:
    assign rx1157_cstack, $I18
  rx1157_jump3216:
    jump $I19
  rx1157_done3213:
    rx1157_cur."!cursor_fail"()
    .return (rx1157_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1346233478.067_caps" :subid("cuid_memo_361_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1346233478.067_nfa" :subid("cuid_memo_362_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 61
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "panic"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_214_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_curclass
    .local pmc rx1161_bstack
    .local pmc rx1161_cstack
    (rx1161_cur, rx1161_tgt, rx1161_pos, rx1161_curclass, rx1161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1161_cur
    length rx1161_eos, rx1161_tgt
    eq $I19, 1, rx1161_restart3227
    gt rx1161_pos, rx1161_eos, rx1161_fail3228
    repr_get_attr_int $I11, self, rx1161_curclass, "$!from"
    ne $I11, -1, rxscan1162_done3234
    goto rxscan1162_scan3233
  rxscan1162_loop3232:
    inc rx1161_pos
    gt rx1161_pos, rx1161_eos, rx1161_fail3228
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!from", rx1161_pos
  rxscan1162_scan3233:
    nqp_rxmark rx1161_bstack, rxscan1162_loop3232, rx1161_pos, 0
  rxscan1162_done3234:
    nqp_rxmark rx1161_bstack, rxcap1163_fail3236, rx1161_pos, 0
    add $I11, rx1161_pos, 2
    gt $I11, rx1161_eos, rx1161_fail3228
    substr $S10, rx1161_tgt, rx1161_pos, 2
    ne $S10, ucs4:":=", rx1161_fail3228
    add rx1161_pos, 2
    nqp_rxpeek $I19, rx1161_bstack, rxcap1163_fail3236
    inc $I19
    set $I11, rx1161_bstack[$I19]
    $P11 = rx1161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1161_pos)
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "sym")
    goto rxcap1163_done3235
  rxcap1163_fail3236:
    goto rx1161_fail3228
  rxcap1163_done3235:
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1161_curclass, "$!pos"
    lt $I11, 0, rx1161_fail3228
    nqp_rxmark rx1161_bstack, rxsubrule1164_pass3237, -1, 0
  rxsubrule1164_pass3237:
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1161_pos, $P11, rx1161_curclass, "$!pos"
    rx1161_cur."!cursor_pass"(rx1161_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1161_cur)
  rx1161_restart3227:
    repr_get_attr_obj rx1161_cstack, rx1161_cur, rx1161_curclass, "$!cstack"
  rx1161_fail3228:
    unless rx1161_bstack, rx1161_done3226
    pop $I19, rx1161_bstack
    if_null rx1161_cstack, rx1161_cstack_done3231
    unless rx1161_cstack, rx1161_cstack_done3231
    dec $I19
    set $P11, rx1161_cstack[$I19]
  rx1161_cstack_done3231:
    pop rx1161_rep, rx1161_bstack
    pop rx1161_pos, rx1161_bstack
    pop $I19, rx1161_bstack
    lt rx1161_pos, -1, rx1161_done3226
    lt rx1161_pos, 0, rx1161_fail3228
    eq $I19, 0, rx1161_fail3228
    nqp_islist $I20, rx1161_cstack
    unless $I20, rx1161_jump3229
    elements $I18, rx1161_bstack
    le $I18, 0, rx1161_cut3230
    dec $I18
    set $I18, rx1161_bstack[$I18]
  rx1161_cut3230:
    assign rx1161_cstack, $I18
  rx1161_jump3229:
    jump $I19
  rx1161_done3226:
    rx1161_cur."!cursor_fail"()
    .return (rx1161_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1346233478.067_caps" :subid("cuid_memo_363_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1346233478.067_nfa" :subid("cuid_memo_364_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 58
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 61
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 8
    push $P511, $P512
    box $P513, "O"
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_215_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1165_tgt
    .local int rx1165_pos
    .local int rx1165_off
    .local int rx1165_eos
    .local int rx1165_rep
    .local pmc rx1165_cur
    .local pmc rx1165_curclass
    .local pmc rx1165_bstack
    .local pmc rx1165_cstack
    (rx1165_cur, rx1165_tgt, rx1165_pos, rx1165_curclass, rx1165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1165_cur
    length rx1165_eos, rx1165_tgt
    eq $I19, 1, rx1165_restart3240
    gt rx1165_pos, rx1165_eos, rx1165_fail3241
    repr_get_attr_int $I11, self, rx1165_curclass, "$!from"
    ne $I11, -1, rxscan1166_done3247
    goto rxscan1166_scan3246
  rxscan1166_loop3245:
    inc rx1165_pos
    gt rx1165_pos, rx1165_eos, rx1165_fail3241
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!from", rx1165_pos
  rxscan1166_scan3246:
    nqp_rxmark rx1165_bstack, rxscan1166_loop3245, rx1165_pos, 0
  rxscan1166_done3247:
    nqp_rxmark rx1165_bstack, rxcap1167_fail3249, rx1165_pos, 0
    add $I11, rx1165_pos, 3
    gt $I11, rx1165_eos, rx1165_fail3241
    substr $S10, rx1165_tgt, rx1165_pos, 3
    ne $S10, ucs4:"::=", rx1165_fail3241
    add rx1165_pos, 3
    nqp_rxpeek $I19, rx1165_bstack, rxcap1167_fail3249
    inc $I19
    set $I11, rx1165_bstack[$I19]
    $P11 = rx1165_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1165_pos)
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "sym")
    goto rxcap1167_done3248
  rxcap1167_fail3249:
    goto rx1165_fail3241
  rxcap1167_done3248:
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1165_curclass, "$!pos"
    lt $I11, 0, rx1165_fail3241
    nqp_rxmark rx1165_bstack, rxsubrule1168_pass3250, -1, 0
  rxsubrule1168_pass3250:
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1165_pos, $P11, rx1165_curclass, "$!pos"
    rx1165_cur."!cursor_pass"(rx1165_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1165_cur)
  rx1165_restart3240:
    repr_get_attr_obj rx1165_cstack, rx1165_cur, rx1165_curclass, "$!cstack"
  rx1165_fail3241:
    unless rx1165_bstack, rx1165_done3239
    pop $I19, rx1165_bstack
    if_null rx1165_cstack, rx1165_cstack_done3244
    unless rx1165_cstack, rx1165_cstack_done3244
    dec $I19
    set $P11, rx1165_cstack[$I19]
  rx1165_cstack_done3244:
    pop rx1165_rep, rx1165_bstack
    pop rx1165_pos, rx1165_bstack
    pop $I19, rx1165_bstack
    lt rx1165_pos, -1, rx1165_done3239
    lt rx1165_pos, 0, rx1165_fail3241
    eq $I19, 0, rx1165_fail3241
    nqp_islist $I20, rx1165_cstack
    unless $I20, rx1165_jump3242
    elements $I18, rx1165_bstack
    le $I18, 0, rx1165_cut3243
    dec $I18
    set $I18, rx1165_bstack[$I18]
  rx1165_cut3243:
    assign rx1165_cstack, $I18
  rx1165_jump3242:
    jump $I19
  rx1165_done3239:
    rx1165_cur."!cursor_fail"()
    .return (rx1165_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1346233478.067_caps" :subid("cuid_memo_365_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1346233478.067_nfa" :subid("cuid_memo_366_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 58
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 58
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 61
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 8
    push $P515, $P516
    box $P517, "O"
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_216_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_curclass
    .local pmc rx1169_bstack
    .local pmc rx1169_cstack
    (rx1169_cur, rx1169_tgt, rx1169_pos, rx1169_curclass, rx1169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1169_cur
    length rx1169_eos, rx1169_tgt
    eq $I19, 1, rx1169_restart3253
    gt rx1169_pos, rx1169_eos, rx1169_fail3254
    repr_get_attr_int $I11, self, rx1169_curclass, "$!from"
    ne $I11, -1, rxscan1170_done3260
    goto rxscan1170_scan3259
  rxscan1170_loop3258:
    inc rx1169_pos
    gt rx1169_pos, rx1169_eos, rx1169_fail3254
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!from", rx1169_pos
  rxscan1170_scan3259:
    nqp_rxmark rx1169_bstack, rxscan1170_loop3258, rx1169_pos, 0
  rxscan1170_done3260:
    nqp_rxmark rx1169_bstack, rxcap1171_fail3262, rx1169_pos, 0
    add $I11, rx1169_pos, 1
    gt $I11, rx1169_eos, rx1169_fail3254
    substr $S10, rx1169_tgt, rx1169_pos, 1
    ne $S10, ucs4:",", rx1169_fail3254
    add rx1169_pos, 1
    nqp_rxpeek $I19, rx1169_bstack, rxcap1171_fail3262
    inc $I19
    set $I11, rx1169_bstack[$I19]
    $P11 = rx1169_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1169_pos)
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "sym")
    goto rxcap1171_done3261
  rxcap1171_fail3262:
    goto rx1169_fail3254
  rxcap1171_done3261:
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1169_curclass, "$!pos"
    lt $I11, 0, rx1169_fail3254
    nqp_rxmark rx1169_bstack, rxsubrule1172_pass3263, -1, 0
  rxsubrule1172_pass3263:
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1169_pos, $P11, rx1169_curclass, "$!pos"
    rx1169_cur."!cursor_pass"(rx1169_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1169_cur)
  rx1169_restart3253:
    repr_get_attr_obj rx1169_cstack, rx1169_cur, rx1169_curclass, "$!cstack"
  rx1169_fail3254:
    unless rx1169_bstack, rx1169_done3252
    pop $I19, rx1169_bstack
    if_null rx1169_cstack, rx1169_cstack_done3257
    unless rx1169_cstack, rx1169_cstack_done3257
    dec $I19
    set $P11, rx1169_cstack[$I19]
  rx1169_cstack_done3257:
    pop rx1169_rep, rx1169_bstack
    pop rx1169_pos, rx1169_bstack
    pop $I19, rx1169_bstack
    lt rx1169_pos, -1, rx1169_done3252
    lt rx1169_pos, 0, rx1169_fail3254
    eq $I19, 0, rx1169_fail3254
    nqp_islist $I20, rx1169_cstack
    unless $I20, rx1169_jump3255
    elements $I18, rx1169_bstack
    le $I18, 0, rx1169_cut3256
    dec $I18
    set $I18, rx1169_bstack[$I18]
  rx1169_cut3256:
    assign rx1169_cstack, $I18
  rx1169_jump3255:
    jump $I19
  rx1169_done3252:
    rx1169_cur."!cursor_fail"()
    .return (rx1169_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1346233478.067_caps" :subid("cuid_memo_367_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1346233478.067_nfa" :subid("cuid_memo_368_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 44
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 8
    push $P507, $P508
    box $P509, "O"
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_217_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .const 'Sub' $P504 = 'cuid_399_1346233478.067' 
    capture_lex $P504 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1173_tgt
    .local int rx1173_pos
    .local int rx1173_off
    .local int rx1173_eos
    .local int rx1173_rep
    .local pmc rx1173_cur
    .local pmc rx1173_curclass
    .local pmc rx1173_bstack
    .local pmc rx1173_cstack
    (rx1173_cur, rx1173_tgt, rx1173_pos, rx1173_curclass, rx1173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1173_cur
    length rx1173_eos, rx1173_tgt
    eq $I19, 1, rx1173_restart3266
    gt rx1173_pos, rx1173_eos, rx1173_fail3267
    repr_get_attr_int $I11, self, rx1173_curclass, "$!from"
    ne $I11, -1, rxscan1174_done3273
    goto rxscan1174_scan3272
  rxscan1174_loop3271:
    inc rx1173_pos
    gt rx1173_pos, rx1173_eos, rx1173_fail3267
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!from", rx1173_pos
  rxscan1174_scan3272:
    nqp_rxmark rx1173_bstack, rxscan1174_loop3271, rx1173_pos, 0
  rxscan1174_done3273:
    nqp_rxmark rx1173_bstack, rxcap1175_fail3275, rx1173_pos, 0
    add $I11, rx1173_pos, 6
    gt $I11, rx1173_eos, rx1173_fail3267
    substr $S10, rx1173_tgt, rx1173_pos, 6
    ne $S10, ucs4:"return", rx1173_fail3267
    add rx1173_pos, 6
    nqp_rxpeek $I19, rx1173_bstack, rxcap1175_fail3275
    inc $I19
    set $I11, rx1173_bstack[$I19]
    $P11 = rx1173_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1173_pos)
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "sym")
    goto rxcap1175_done3274
  rxcap1175_fail3275:
    goto rx1173_fail3267
  rxcap1175_done3274:
    ge rx1173_pos, rx1173_eos, rx1173_fail3267
    is_cclass $I11, .CCLASS_WHITESPACE, rx1173_tgt, rx1173_pos
    unless $I11, rx1173_fail3267
    add rx1173_pos, 1
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1173_curclass, "$!pos"
    lt $I11, 0, rx1173_fail3267
    nqp_rxmark rx1173_bstack, rxsubrule1176_pass3276, -1, 0
  rxsubrule1176_pass3276:
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1173_pos, $P11, rx1173_curclass, "$!pos"
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    store_lex unicode:"$\x{a2}", rx1173_cur
    $P501 = $P101."MATCH"()
    set $P102, $P501
    .const 'Sub' $P502 = 'cuid_399_1346233478.067' 
    capture_lex $P502
    $P503 = $P502()
    rx1173_cur."!cursor_pass"(rx1173_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1173_cur)
  rx1173_restart3266:
    repr_get_attr_obj rx1173_cstack, rx1173_cur, rx1173_curclass, "$!cstack"
  rx1173_fail3267:
    unless rx1173_bstack, rx1173_done3265
    pop $I19, rx1173_bstack
    if_null rx1173_cstack, rx1173_cstack_done3270
    unless rx1173_cstack, rx1173_cstack_done3270
    dec $I19
    set $P11, rx1173_cstack[$I19]
  rx1173_cstack_done3270:
    pop rx1173_rep, rx1173_bstack
    pop rx1173_pos, rx1173_bstack
    pop $I19, rx1173_bstack
    lt rx1173_pos, -1, rx1173_done3265
    lt rx1173_pos, 0, rx1173_fail3267
    eq $I19, 0, rx1173_fail3267
    nqp_islist $I20, rx1173_cstack
    unless $I20, rx1173_jump3268
    elements $I18, rx1173_bstack
    le $I18, 0, rx1173_cut3269
    dec $I18
    set $I18, rx1173_bstack[$I18]
  rx1173_cut3269:
    assign rx1173_cstack, $I18
  rx1173_jump3268:
    jump $I19
  rx1173_done3265:
    rx1173_cur."!cursor_fail"()
    .return (rx1173_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1346233478.067_caps" :subid("cuid_memo_369_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1346233478.067_nfa" :subid("cuid_memo_370_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 114
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 116
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 117
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 2
    push $P519, $P520
    box $P521, 114
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 2
    push $P523, $P524
    box $P525, 110
    push $P523, $P525
    box $P526, 7
    push $P523, $P526
    push $P501, $P523
    new $P527, 'ResizablePMCArray'
    box $P528, 4
    push $P527, $P528
    box $P529, 32
    push $P527, $P529
    box $P530, 8
    push $P527, $P530
    push $P501, $P527
    new $P531, 'ResizablePMCArray'
    box $P532, 8
    push $P531, $P532
    box $P533, "O"
    push $P531, $P533
    box $P534, 9
    push $P531, $P534
    push $P501, $P531
    new $P535, 'ResizablePMCArray'
    box $P536, 0
    push $P535, $P536
    box $P537, 0
    push $P535, $P537
    box $P538, 0
    push $P535, $P538
    push $P501, $P535
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1346233478.067") :anon :lex :outer("cuid_217_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318

    box $P501, 1
    store_dynamic_lex "$*RETURN_USED", $P501
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_218_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_curclass
    .local pmc rx1177_bstack
    .local pmc rx1177_cstack
    (rx1177_cur, rx1177_tgt, rx1177_pos, rx1177_curclass, rx1177_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1177_cur
    length rx1177_eos, rx1177_tgt
    eq $I19, 1, rx1177_restart3279
    gt rx1177_pos, rx1177_eos, rx1177_fail3280
    repr_get_attr_int $I11, self, rx1177_curclass, "$!from"
    ne $I11, -1, rxscan1178_done3286
    goto rxscan1178_scan3285
  rxscan1178_loop3284:
    inc rx1177_pos
    gt rx1177_pos, rx1177_eos, rx1177_fail3280
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!from", rx1177_pos
  rxscan1178_scan3285:
    nqp_rxmark rx1177_bstack, rxscan1178_loop3284, rx1177_pos, 0
  rxscan1178_done3286:
    nqp_rxmark rx1177_bstack, rxcap1179_fail3288, rx1177_pos, 0
    add $I11, rx1177_pos, 4
    gt $I11, rx1177_eos, rx1177_fail3280
    substr $S10, rx1177_tgt, rx1177_pos, 4
    ne $S10, ucs4:"make", rx1177_fail3280
    add rx1177_pos, 4
    nqp_rxpeek $I19, rx1177_bstack, rxcap1179_fail3288
    inc $I19
    set $I11, rx1177_bstack[$I19]
    $P11 = rx1177_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1177_pos)
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "sym")
    goto rxcap1179_done3287
  rxcap1179_fail3288:
    goto rx1177_fail3280
  rxcap1179_done3287:
    ge rx1177_pos, rx1177_eos, rx1177_fail3280
    is_cclass $I11, .CCLASS_WHITESPACE, rx1177_tgt, rx1177_pos
    unless $I11, rx1177_fail3280
    add rx1177_pos, 1
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1177_curclass, "$!pos"
    lt $I11, 0, rx1177_fail3280
    nqp_rxmark rx1177_bstack, rxsubrule1180_pass3289, -1, 0
  rxsubrule1180_pass3289:
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1177_pos, $P11, rx1177_curclass, "$!pos"
    rx1177_cur."!cursor_pass"(rx1177_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1177_cur)
  rx1177_restart3279:
    repr_get_attr_obj rx1177_cstack, rx1177_cur, rx1177_curclass, "$!cstack"
  rx1177_fail3280:
    unless rx1177_bstack, rx1177_done3278
    pop $I19, rx1177_bstack
    if_null rx1177_cstack, rx1177_cstack_done3283
    unless rx1177_cstack, rx1177_cstack_done3283
    dec $I19
    set $P11, rx1177_cstack[$I19]
  rx1177_cstack_done3283:
    pop rx1177_rep, rx1177_bstack
    pop rx1177_pos, rx1177_bstack
    pop $I19, rx1177_bstack
    lt rx1177_pos, -1, rx1177_done3278
    lt rx1177_pos, 0, rx1177_fail3280
    eq $I19, 0, rx1177_fail3280
    nqp_islist $I20, rx1177_cstack
    unless $I20, rx1177_jump3281
    elements $I18, rx1177_bstack
    le $I18, 0, rx1177_cut3282
    dec $I18
    set $I18, rx1177_bstack[$I18]
  rx1177_cut3282:
    assign rx1177_cstack, $I18
  rx1177_jump3281:
    jump $I19
  rx1177_done3278:
    rx1177_cur."!cursor_fail"()
    .return (rx1177_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1346233478.067_caps" :subid("cuid_memo_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    box $P503, 0
    set $P501["O"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1346233478.067_nfa" :subid("cuid_memo_372_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 109
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 97
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 107
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 101
    push $P515, $P517
    box $P518, 5
    push $P515, $P518
    push $P501, $P515
    new $P519, 'ResizablePMCArray'
    box $P520, 4
    push $P519, $P520
    box $P521, 32
    push $P519, $P521
    box $P522, 6
    push $P519, $P522
    push $P501, $P519
    new $P523, 'ResizablePMCArray'
    box $P524, 8
    push $P523, $P524
    box $P525, "O"
    push $P523, $P525
    box $P526, 0
    push $P523, $P526
    push $P501, $P523
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_219_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_curclass
    .local pmc rx1181_bstack
    .local pmc rx1181_cstack
    (rx1181_cur, rx1181_tgt, rx1181_pos, rx1181_curclass, rx1181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1181_cur
    length rx1181_eos, rx1181_tgt
    eq $I19, 1, rx1181_restart3292
    gt rx1181_pos, rx1181_eos, rx1181_fail3293
    repr_get_attr_int $I11, self, rx1181_curclass, "$!from"
    ne $I11, -1, rxscan1182_done3299
    goto rxscan1182_scan3298
  rxscan1182_loop3297:
    inc rx1181_pos
    gt rx1181_pos, rx1181_eos, rx1181_fail3293
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!from", rx1181_pos
  rxscan1182_scan3298:
    nqp_rxmark rx1181_bstack, rxscan1182_loop3297, rx1181_pos, 0
  rxscan1182_done3299:
    nqp_rxmark rx1181_bstack, rxcap1183_fail3301, rx1181_pos, 0
    add $I11, rx1181_pos, 4
    gt $I11, rx1181_eos, rx1181_fail3293
    substr $S10, rx1181_tgt, rx1181_pos, 4
    ne $S10, ucs4:"last", rx1181_fail3293
    add rx1181_pos, 4
    nqp_rxpeek $I19, rx1181_bstack, rxcap1183_fail3301
    inc $I19
    set $I11, rx1181_bstack[$I19]
    $P11 = rx1181_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1181_pos)
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "sym")
    goto rxcap1183_done3300
  rxcap1183_fail3301:
    goto rx1181_fail3293
  rxcap1183_done3300:
    rx1181_cur."!cursor_pass"(rx1181_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1181_cur)
  rx1181_restart3292:
    repr_get_attr_obj rx1181_cstack, rx1181_cur, rx1181_curclass, "$!cstack"
  rx1181_fail3293:
    unless rx1181_bstack, rx1181_done3291
    pop $I19, rx1181_bstack
    if_null rx1181_cstack, rx1181_cstack_done3296
    unless rx1181_cstack, rx1181_cstack_done3296
    dec $I19
    set $P11, rx1181_cstack[$I19]
  rx1181_cstack_done3296:
    pop rx1181_rep, rx1181_bstack
    pop rx1181_pos, rx1181_bstack
    pop $I19, rx1181_bstack
    lt rx1181_pos, -1, rx1181_done3291
    lt rx1181_pos, 0, rx1181_fail3293
    eq $I19, 0, rx1181_fail3293
    nqp_islist $I20, rx1181_cstack
    unless $I20, rx1181_jump3294
    elements $I18, rx1181_bstack
    le $I18, 0, rx1181_cut3295
    dec $I18
    set $I18, rx1181_bstack[$I18]
  rx1181_cut3295:
    assign rx1181_cstack, $I18
  rx1181_jump3294:
    jump $I19
  rx1181_done3291:
    rx1181_cur."!cursor_fail"()
    .return (rx1181_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1346233478.067_caps" :subid("cuid_memo_373_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1346233478.067_nfa" :subid("cuid_memo_374_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 108
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 97
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 115
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 116
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_220_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1184_tgt
    .local int rx1184_pos
    .local int rx1184_off
    .local int rx1184_eos
    .local int rx1184_rep
    .local pmc rx1184_cur
    .local pmc rx1184_curclass
    .local pmc rx1184_bstack
    .local pmc rx1184_cstack
    (rx1184_cur, rx1184_tgt, rx1184_pos, rx1184_curclass, rx1184_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1184_cur
    length rx1184_eos, rx1184_tgt
    eq $I19, 1, rx1184_restart3304
    gt rx1184_pos, rx1184_eos, rx1184_fail3305
    repr_get_attr_int $I11, self, rx1184_curclass, "$!from"
    ne $I11, -1, rxscan1185_done3311
    goto rxscan1185_scan3310
  rxscan1185_loop3309:
    inc rx1184_pos
    gt rx1184_pos, rx1184_eos, rx1184_fail3305
    repr_bind_attr_int rx1184_cur, rx1184_curclass, "$!from", rx1184_pos
  rxscan1185_scan3310:
    nqp_rxmark rx1184_bstack, rxscan1185_loop3309, rx1184_pos, 0
  rxscan1185_done3311:
    nqp_rxmark rx1184_bstack, rxcap1186_fail3313, rx1184_pos, 0
    add $I11, rx1184_pos, 4
    gt $I11, rx1184_eos, rx1184_fail3305
    substr $S10, rx1184_tgt, rx1184_pos, 4
    ne $S10, ucs4:"next", rx1184_fail3305
    add rx1184_pos, 4
    nqp_rxpeek $I19, rx1184_bstack, rxcap1186_fail3313
    inc $I19
    set $I11, rx1184_bstack[$I19]
    $P11 = rx1184_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1184_pos)
    rx1184_cstack = rx1184_cur."!cursor_capture"($P11, "sym")
    goto rxcap1186_done3312
  rxcap1186_fail3313:
    goto rx1184_fail3305
  rxcap1186_done3312:
    rx1184_cur."!cursor_pass"(rx1184_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1184_cur)
  rx1184_restart3304:
    repr_get_attr_obj rx1184_cstack, rx1184_cur, rx1184_curclass, "$!cstack"
  rx1184_fail3305:
    unless rx1184_bstack, rx1184_done3303
    pop $I19, rx1184_bstack
    if_null rx1184_cstack, rx1184_cstack_done3308
    unless rx1184_cstack, rx1184_cstack_done3308
    dec $I19
    set $P11, rx1184_cstack[$I19]
  rx1184_cstack_done3308:
    pop rx1184_rep, rx1184_bstack
    pop rx1184_pos, rx1184_bstack
    pop $I19, rx1184_bstack
    lt rx1184_pos, -1, rx1184_done3303
    lt rx1184_pos, 0, rx1184_fail3305
    eq $I19, 0, rx1184_fail3305
    nqp_islist $I20, rx1184_cstack
    unless $I20, rx1184_jump3306
    elements $I18, rx1184_bstack
    le $I18, 0, rx1184_cut3307
    dec $I18
    set $I18, rx1184_bstack[$I18]
  rx1184_cut3307:
    assign rx1184_cstack, $I18
  rx1184_jump3306:
    jump $I19
  rx1184_done3303:
    rx1184_cur."!cursor_fail"()
    .return (rx1184_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1346233478.067_caps" :subid("cuid_memo_375_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1346233478.067_nfa" :subid("cuid_memo_376_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 110
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 120
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 116
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_221_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1187_tgt
    .local int rx1187_pos
    .local int rx1187_off
    .local int rx1187_eos
    .local int rx1187_rep
    .local pmc rx1187_cur
    .local pmc rx1187_curclass
    .local pmc rx1187_bstack
    .local pmc rx1187_cstack
    (rx1187_cur, rx1187_tgt, rx1187_pos, rx1187_curclass, rx1187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1187_cur
    length rx1187_eos, rx1187_tgt
    eq $I19, 1, rx1187_restart3316
    gt rx1187_pos, rx1187_eos, rx1187_fail3317
    repr_get_attr_int $I11, self, rx1187_curclass, "$!from"
    ne $I11, -1, rxscan1188_done3323
    goto rxscan1188_scan3322
  rxscan1188_loop3321:
    inc rx1187_pos
    gt rx1187_pos, rx1187_eos, rx1187_fail3317
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!from", rx1187_pos
  rxscan1188_scan3322:
    nqp_rxmark rx1187_bstack, rxscan1188_loop3321, rx1187_pos, 0
  rxscan1188_done3323:
    nqp_rxmark rx1187_bstack, rxcap1189_fail3325, rx1187_pos, 0
    add $I11, rx1187_pos, 4
    gt $I11, rx1187_eos, rx1187_fail3317
    substr $S10, rx1187_tgt, rx1187_pos, 4
    ne $S10, ucs4:"redo", rx1187_fail3317
    add rx1187_pos, 4
    nqp_rxpeek $I19, rx1187_bstack, rxcap1189_fail3325
    inc $I19
    set $I11, rx1187_bstack[$I19]
    $P11 = rx1187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1187_pos)
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "sym")
    goto rxcap1189_done3324
  rxcap1189_fail3325:
    goto rx1187_fail3317
  rxcap1189_done3324:
    rx1187_cur."!cursor_pass"(rx1187_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1187_cur)
  rx1187_restart3316:
    repr_get_attr_obj rx1187_cstack, rx1187_cur, rx1187_curclass, "$!cstack"
  rx1187_fail3317:
    unless rx1187_bstack, rx1187_done3315
    pop $I19, rx1187_bstack
    if_null rx1187_cstack, rx1187_cstack_done3320
    unless rx1187_cstack, rx1187_cstack_done3320
    dec $I19
    set $P11, rx1187_cstack[$I19]
  rx1187_cstack_done3320:
    pop rx1187_rep, rx1187_bstack
    pop rx1187_pos, rx1187_bstack
    pop $I19, rx1187_bstack
    lt rx1187_pos, -1, rx1187_done3315
    lt rx1187_pos, 0, rx1187_fail3317
    eq $I19, 0, rx1187_fail3317
    nqp_islist $I20, rx1187_cstack
    unless $I20, rx1187_jump3318
    elements $I18, rx1187_bstack
    le $I18, 0, rx1187_cut3319
    dec $I18
    set $I18, rx1187_bstack[$I18]
  rx1187_cut3319:
    assign rx1187_cstack, $I18
  rx1187_jump3318:
    jump $I19
  rx1187_done3315:
    rx1187_cur."!cursor_fail"()
    .return (rx1187_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1346233478.067_caps" :subid("cuid_memo_377_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["sym"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1346233478.067_nfa" :subid("cuid_memo_378_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 114
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 101
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 2
    push $P511, $P512
    box $P513, 100
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 111
    push $P515, $P517
    box $P518, 0
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_222_1346233478.067") :anon :lex :outer("cuid_223_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1[0]
    unless_null $P502, fallback3326
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback3326:
    set $P101, $P502
    set $P504, _lex_param_1[1]
    unless_null $P504, fallback3327
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback3327:
    set _lex_param_1[0], $P504
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .const 'Sub' $P512 = 'cuid_225_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_226_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_228_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_229_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_232_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_235_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_237_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_239_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_240_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_241_1346233478.067' 
    capture_lex $P512 
    .const 'Sub' $P512 = 'cuid_242_1346233478.067' 
    capture_lex $P512 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P501 = 'cuid_225_1346233478.067' 
    capture_lex $P501
    .const 'Sub' $P502 = 'cuid_226_1346233478.067' 
    capture_lex $P502
    .const 'Sub' $P503 = 'cuid_228_1346233478.067' 
    capture_lex $P503
    .const 'Sub' $P504 = 'cuid_229_1346233478.067' 
    capture_lex $P504
    .const 'Sub' $P505 = 'cuid_232_1346233478.067' 
    capture_lex $P505
    .const 'Sub' $P506 = 'cuid_235_1346233478.067' 
    capture_lex $P506
    .const 'Sub' $P507 = 'cuid_237_1346233478.067' 
    capture_lex $P507
    .const 'Sub' $P508 = 'cuid_239_1346233478.067' 
    capture_lex $P508
    .const 'Sub' $P509 = 'cuid_240_1346233478.067' 
    capture_lex $P509
    .const 'Sub' $P510 = 'cuid_241_1346233478.067' 
    capture_lex $P510
    .const 'Sub' $P511 = 'cuid_242_1346233478.067' 
    capture_lex $P511
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_225_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .param pmc _lex_param_0 
    .const 'Sub' $P502 = 'cuid_224_1346233478.067' 
    capture_lex $P502 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1190_tgt
    .local int rx1190_pos
    .local int rx1190_off
    .local int rx1190_eos
    .local int rx1190_rep
    .local pmc rx1190_cur
    .local pmc rx1190_curclass
    .local pmc rx1190_bstack
    .local pmc rx1190_cstack
    (rx1190_cur, rx1190_tgt, rx1190_pos, rx1190_curclass, rx1190_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1190_cur
    length rx1190_eos, rx1190_tgt
    eq $I19, 1, rx1190_restart3330
    gt rx1190_pos, rx1190_eos, rx1190_fail3331
    repr_get_attr_int $I11, self, rx1190_curclass, "$!from"
    ne $I11, -1, rxscan1191_done3337
    goto rxscan1191_scan3336
  rxscan1191_loop3335:
    inc rx1190_pos
    gt rx1190_pos, rx1190_eos, rx1190_fail3331
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!from", rx1190_pos
  rxscan1191_scan3336:
    nqp_rxmark rx1190_bstack, rxscan1191_loop3335, rx1190_pos, 0
  rxscan1191_done3337:
    add $I11, rx1190_pos, 1
    gt $I11, rx1190_eos, rx1190_fail3331
    substr $S10, rx1190_tgt, rx1190_pos, 1
    ne $S10, ucs4:":", rx1190_fail3331
    add rx1190_pos, 1
    .const 'Sub' $P501 = 'cuid_224_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3331
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3331
    nqp_rxmark rx1190_bstack, rxsubrule1194_pass3348, -1, 0
  rxsubrule1194_pass3348:
    rx1190_cstack = rx1190_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1190_pos, $P11, rx1190_curclass, "$!pos"
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3331
    repr_get_attr_int rx1190_pos, $P11, rx1190_curclass, "$!pos"
    add $I11, rx1190_pos, 1
    gt $I11, rx1190_eos, rx1190_fail3331
    substr $S10, rx1190_tgt, rx1190_pos, 1
    ne $S10, ucs4:";", rx1190_fail3331
    add rx1190_pos, 1
    rx1190_cur."!cursor_pass"(rx1190_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1190_cur)
  rx1190_restart3330:
    repr_get_attr_obj rx1190_cstack, rx1190_cur, rx1190_curclass, "$!cstack"
  rx1190_fail3331:
    unless rx1190_bstack, rx1190_done3329
    pop $I19, rx1190_bstack
    if_null rx1190_cstack, rx1190_cstack_done3334
    unless rx1190_cstack, rx1190_cstack_done3334
    dec $I19
    set $P11, rx1190_cstack[$I19]
  rx1190_cstack_done3334:
    pop rx1190_rep, rx1190_bstack
    pop rx1190_pos, rx1190_bstack
    pop $I19, rx1190_bstack
    lt rx1190_pos, -1, rx1190_done3329
    lt rx1190_pos, 0, rx1190_fail3331
    eq $I19, 0, rx1190_fail3331
    nqp_islist $I20, rx1190_cstack
    unless $I20, rx1190_jump3332
    elements $I18, rx1190_bstack
    le $I18, 0, rx1190_cut3333
    dec $I18
    set $I18, rx1190_bstack[$I18]
  rx1190_cut3333:
    assign rx1190_cstack, $I18
  rx1190_jump3332:
    jump $I19
  rx1190_done3329:
    rx1190_cur."!cursor_fail"()
    .return (rx1190_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1346233478.067_caps" :subid("cuid_memo_379_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["statement"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1346233478.067_nfa" :subid("cuid_memo_380_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 58
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 109
    push $P507, $P509
    box $P510, 4
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 0
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    new $P515, 'ResizablePMCArray'
    box $P516, 2
    push $P515, $P516
    box $P517, 121
    push $P515, $P517
    box $P518, 3
    push $P515, $P518
    push $P501, $P515
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1346233478.067") :anon :lex :outer("cuid_225_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1192_tgt
    .local int rx1192_pos
    .local int rx1192_off
    .local int rx1192_eos
    .local int rx1192_rep
    .local pmc rx1192_cur
    .local pmc rx1192_curclass
    .local pmc rx1192_bstack
    .local pmc rx1192_cstack
    (rx1192_cur, rx1192_tgt, rx1192_pos, rx1192_curclass, rx1192_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1192_cur
    length rx1192_eos, rx1192_tgt
    eq $I19, 1, rx1192_restart3340
    gt rx1192_pos, rx1192_eos, rx1192_fail3341
    repr_get_attr_int $I11, self, rx1192_curclass, "$!from"
    ne $I11, -1, rxscan1193_done3347
    goto rxscan1193_scan3346
  rxscan1193_loop3345:
    inc rx1192_pos
    gt rx1192_pos, rx1192_eos, rx1192_fail3341
    repr_bind_attr_int rx1192_cur, rx1192_curclass, "$!from", rx1192_pos
  rxscan1193_scan3346:
    nqp_rxmark rx1192_bstack, rxscan1193_loop3345, rx1192_pos, 0
  rxscan1193_done3347:
    add $I11, rx1192_pos, 2
    gt $I11, rx1192_eos, rx1192_fail3341
    substr $S10, rx1192_tgt, rx1192_pos, 2
    ne $S10, ucs4:"my", rx1192_fail3341
    add rx1192_pos, 2
    rx1192_cur."!cursor_pass"(rx1192_pos, 'backtrack'=>1)
    .return (rx1192_cur)
  rx1192_restart3340:
    repr_get_attr_obj rx1192_cstack, rx1192_cur, rx1192_curclass, "$!cstack"
  rx1192_fail3341:
    unless rx1192_bstack, rx1192_done3339
    pop $I19, rx1192_bstack
    if_null rx1192_cstack, rx1192_cstack_done3344
    unless rx1192_cstack, rx1192_cstack_done3344
    dec $I19
    set $P11, rx1192_cstack[$I19]
  rx1192_cstack_done3344:
    pop rx1192_rep, rx1192_bstack
    pop rx1192_pos, rx1192_bstack
    pop $I19, rx1192_bstack
    lt rx1192_pos, -1, rx1192_done3339
    lt rx1192_pos, 0, rx1192_fail3341
    eq $I19, 0, rx1192_fail3341
    nqp_islist $I20, rx1192_cstack
    unless $I20, rx1192_jump3342
    elements $I18, rx1192_bstack
    le $I18, 0, rx1192_cut3343
    dec $I18
    set $I18, rx1192_bstack[$I18]
  rx1192_cut3343:
    assign rx1192_cstack, $I18
  rx1192_jump3342:
    jump $I19
  rx1192_done3339:
    rx1192_cur."!cursor_fail"()
    .return (rx1192_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1346233478.067_caps" :subid("cuid_memo_381_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1346233478.067_nfa" :subid("cuid_memo_382_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 109
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 121
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_226_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1196_tgt
    .local int rx1196_pos
    .local int rx1196_off
    .local int rx1196_eos
    .local int rx1196_rep
    .local pmc rx1196_cur
    .local pmc rx1196_curclass
    .local pmc rx1196_bstack
    .local pmc rx1196_cstack
    (rx1196_cur, rx1196_tgt, rx1196_pos, rx1196_curclass, rx1196_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1196_cur
    length rx1196_eos, rx1196_tgt
    eq $I19, 1, rx1196_restart3352
    gt rx1196_pos, rx1196_eos, rx1196_fail3353
    repr_get_attr_int $I11, self, rx1196_curclass, "$!from"
    ne $I11, -1, rxscan1197_done3359
    goto rxscan1197_scan3358
  rxscan1197_loop3357:
    inc rx1196_pos
    gt rx1196_pos, rx1196_eos, rx1196_fail3353
    repr_bind_attr_int rx1196_cur, rx1196_curclass, "$!from", rx1196_pos
  rxscan1197_scan3358:
    nqp_rxmark rx1196_bstack, rxscan1197_loop3357, rx1196_pos, 0
  rxscan1197_done3359:
    ge rx1196_pos, rx1196_eos, rx1196_fail3353
    substr $S11, rx1196_tgt, rx1196_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1196_fail3353
    repr_bind_attr_int rx1196_cur, rx1196_curclass, "$!pos", rx1196_pos
    $P11 = rx1196_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1196_curclass, "$!pos"
    lt $I11, 0, rx1196_fail3353
    nqp_rxmark rx1196_bstack, rxsubrule1198_pass3360, -1, 0
  rxsubrule1198_pass3360:
    rx1196_cstack = rx1196_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1196_pos, $P11, rx1196_curclass, "$!pos"
    rx1196_cur."!cursor_pass"(rx1196_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1196_cur)
  rx1196_restart3352:
    repr_get_attr_obj rx1196_cstack, rx1196_cur, rx1196_curclass, "$!cstack"
  rx1196_fail3353:
    unless rx1196_bstack, rx1196_done3351
    pop $I19, rx1196_bstack
    if_null rx1196_cstack, rx1196_cstack_done3356
    unless rx1196_cstack, rx1196_cstack_done3356
    dec $I19
    set $P11, rx1196_cstack[$I19]
  rx1196_cstack_done3356:
    pop rx1196_rep, rx1196_bstack
    pop rx1196_pos, rx1196_bstack
    pop $I19, rx1196_bstack
    lt rx1196_pos, -1, rx1196_done3351
    lt rx1196_pos, 0, rx1196_fail3353
    eq $I19, 0, rx1196_fail3353
    nqp_islist $I20, rx1196_cstack
    unless $I20, rx1196_jump3354
    elements $I18, rx1196_bstack
    le $I18, 0, rx1196_cut3355
    dec $I18
    set $I18, rx1196_bstack[$I18]
  rx1196_cut3355:
    assign rx1196_cstack, $I18
  rx1196_jump3354:
    jump $I19
  rx1196_done3351:
    rx1196_cur."!cursor_fail"()
    .return (rx1196_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1346233478.067_caps" :subid("cuid_memo_383_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["codeblock"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1346233478.067_nfa" :subid("cuid_memo_384_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "{"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_228_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    .param pmc _lex_param_0 
    .const 'Sub' $P502 = 'cuid_227_1346233478.067' 
    capture_lex $P502 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1199_tgt
    .local int rx1199_pos
    .local int rx1199_off
    .local int rx1199_eos
    .local int rx1199_rep
    .local pmc rx1199_cur
    .local pmc rx1199_curclass
    .local pmc rx1199_bstack
    .local pmc rx1199_cstack
    (rx1199_cur, rx1199_tgt, rx1199_pos, rx1199_curclass, rx1199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1199_cur
    length rx1199_eos, rx1199_tgt
    eq $I19, 1, rx1199_restart3363
    gt rx1199_pos, rx1199_eos, rx1199_fail3364
    repr_get_attr_int $I11, self, rx1199_curclass, "$!from"
    ne $I11, -1, rxscan1200_done3370
    goto rxscan1200_scan3369
  rxscan1200_loop3368:
    inc rx1199_pos
    gt rx1199_pos, rx1199_eos, rx1199_fail3364
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!from", rx1199_pos
  rxscan1200_scan3369:
    nqp_rxmark rx1199_bstack, rxscan1200_loop3368, rx1199_pos, 0
  rxscan1200_done3370:
    .const 'Sub' $P501 = 'cuid_227_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3364
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3364
    nqp_rxmark rx1199_bstack, rxsubrule1204_pass3384, -1, 0
  rxsubrule1204_pass3384:
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1199_pos, $P11, rx1199_curclass, "$!pos"
    rx1199_cur."!cursor_pass"(rx1199_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1199_cur)
  rx1199_restart3363:
    repr_get_attr_obj rx1199_cstack, rx1199_cur, rx1199_curclass, "$!cstack"
  rx1199_fail3364:
    unless rx1199_bstack, rx1199_done3362
    pop $I19, rx1199_bstack
    if_null rx1199_cstack, rx1199_cstack_done3367
    unless rx1199_cstack, rx1199_cstack_done3367
    dec $I19
    set $P11, rx1199_cstack[$I19]
  rx1199_cstack_done3367:
    pop rx1199_rep, rx1199_bstack
    pop rx1199_pos, rx1199_bstack
    pop $I19, rx1199_bstack
    lt rx1199_pos, -1, rx1199_done3362
    lt rx1199_pos, 0, rx1199_fail3364
    eq $I19, 0, rx1199_fail3364
    nqp_islist $I20, rx1199_cstack
    unless $I20, rx1199_jump3365
    elements $I18, rx1199_bstack
    le $I18, 0, rx1199_cut3366
    dec $I18
    set $I18, rx1199_bstack[$I18]
  rx1199_cut3366:
    assign rx1199_cstack, $I18
  rx1199_jump3365:
    jump $I19
  rx1199_done3362:
    rx1199_cur."!cursor_fail"()
    .return (rx1199_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1346233478.067_caps" :subid("cuid_memo_385_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["var"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1346233478.067_nfa" :subid("cuid_memo_386_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "$@&"
    push $P503, $P505
    box $P506, 3
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 5
    push $P511, $P512
    box $P513, 8192
    push $P511, $P513
    box $P514, 4
    push $P511, $P514
    box $P515, 4
    push $P511, $P515
    box $P516, 8192
    push $P511, $P516
    box $P517, 2
    push $P511, $P517
    push $P501, $P511
    new $P518, 'ResizablePMCArray'
    box $P519, 4
    push $P518, $P519
    box $P520, 8192
    push $P518, $P520
    box $P521, 2
    push $P518, $P521
    push $P501, $P518
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1346233478.067") :anon :lex :outer("cuid_228_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_curclass
    .local pmc rx1201_bstack
    .local pmc rx1201_cstack
    (rx1201_cur, rx1201_tgt, rx1201_pos, rx1201_curclass, rx1201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1201_cur
    length rx1201_eos, rx1201_tgt
    eq $I19, 1, rx1201_restart3373
    gt rx1201_pos, rx1201_eos, rx1201_fail3374
    repr_get_attr_int $I11, self, rx1201_curclass, "$!from"
    ne $I11, -1, rxscan1202_done3380
    goto rxscan1202_scan3379
  rxscan1202_loop3378:
    inc rx1201_pos
    gt rx1201_pos, rx1201_eos, rx1201_fail3374
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!from", rx1201_pos
  rxscan1202_scan3379:
    nqp_rxmark rx1201_bstack, rxscan1202_loop3378, rx1201_pos, 0
  rxscan1202_done3380:
    ge rx1201_pos, rx1201_eos, rx1201_fail3374
    substr $S11, rx1201_tgt, rx1201_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1201_fail3374
    inc rx1201_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1203_03382
    nqp_push_label $P11, alt1203_13383
    nqp_rxmark rx1201_bstack, alt1203_end3381, -1, 0
    rx1201_cur."!alt"(rx1201_pos, "alt_nfa__39_1346233484.267", $P11)
    goto rx1201_fail3374
  alt1203_03382:
    ge rx1201_pos, rx1201_eos, rx1201_fail3374
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    if $I11, rx1201_fail3374
    add rx1201_pos, 1
    ge rx1201_pos, rx1201_eos, rx1201_fail3374
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    unless $I11, rx1201_fail3374
    add rx1201_pos, 1
    goto alt1203_end3381
  alt1203_13383:
    ge rx1201_pos, rx1201_eos, rx1201_fail3374
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    unless $I11, rx1201_fail3374
    add rx1201_pos, 1
    goto alt1203_end3381
  alt1203_end3381:
    nqp_rxcommit rx1201_bstack, alt1203_end3381
    rx1201_cur."!cursor_pass"(rx1201_pos, 'backtrack'=>1)
    .return (rx1201_cur)
  rx1201_restart3373:
    repr_get_attr_obj rx1201_cstack, rx1201_cur, rx1201_curclass, "$!cstack"
  rx1201_fail3374:
    unless rx1201_bstack, rx1201_done3372
    pop $I19, rx1201_bstack
    if_null rx1201_cstack, rx1201_cstack_done3377
    unless rx1201_cstack, rx1201_cstack_done3377
    dec $I19
    set $P11, rx1201_cstack[$I19]
  rx1201_cstack_done3377:
    pop rx1201_rep, rx1201_bstack
    pop rx1201_pos, rx1201_bstack
    pop $I19, rx1201_bstack
    lt rx1201_pos, -1, rx1201_done3372
    lt rx1201_pos, 0, rx1201_fail3374
    eq $I19, 0, rx1201_fail3374
    nqp_islist $I20, rx1201_cstack
    unless $I20, rx1201_jump3375
    elements $I18, rx1201_bstack
    le $I18, 0, rx1201_cut3376
    dec $I18
    set $I18, rx1201_bstack[$I18]
  rx1201_cut3376:
    assign rx1201_cstack, $I18
  rx1201_jump3375:
    jump $I19
  rx1201_done3372:
    rx1201_cur."!cursor_fail"()
    .return (rx1201_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346233478.067_caps" :subid("cuid_memo_387_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346233478.067_nfa" :subid("cuid_memo_388_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "$@&"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 5
    push $P507, $P508
    box $P509, 8192
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    box $P511, 4
    push $P507, $P511
    box $P512, 8192
    push $P507, $P512
    box $P513, 0
    push $P507, $P513
    push $P501, $P507
    new $P514, 'ResizablePMCArray'
    box $P515, 4
    push $P514, $P515
    box $P516, 8192
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    push $P501, $P514
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346233478.067_alt_nfa__39_1346233484.267" :subid("cuid_memo_389_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 5
    push $P504, $P505
    box $P506, 8192
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 4
    push $P508, $P509
    box $P510, 8192
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 4
    push $P514, $P515
    box $P516, 8192
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    push $P512, $P514
    push $P501, $P512
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_229_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1205_tgt
    .local int rx1205_pos
    .local int rx1205_off
    .local int rx1205_eos
    .local int rx1205_rep
    .local pmc rx1205_cur
    .local pmc rx1205_curclass
    .local pmc rx1205_bstack
    .local pmc rx1205_cstack
    (rx1205_cur, rx1205_tgt, rx1205_pos, rx1205_curclass, rx1205_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1205_cur
    length rx1205_eos, rx1205_tgt
    eq $I19, 1, rx1205_restart3387
    gt rx1205_pos, rx1205_eos, rx1205_fail3388
    repr_get_attr_int $I11, self, rx1205_curclass, "$!from"
    ne $I11, -1, rxscan1206_done3394
    goto rxscan1206_scan3393
  rxscan1206_loop3392:
    inc rx1205_pos
    gt rx1205_pos, rx1205_eos, rx1205_fail3388
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!from", rx1205_pos
  rxscan1206_scan3393:
    nqp_rxmark rx1205_bstack, rxscan1206_loop3392, rx1205_pos, 0
  rxscan1206_done3394:
    ge rx1205_pos, rx1205_eos, rx1205_fail3388
    substr $S11, rx1205_tgt, rx1205_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1205_fail3388
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1205_curclass, "$!pos"
    lt $I11, 0, rx1205_fail3388
    nqp_rxmark rx1205_bstack, rxsubrule1207_pass3395, -1, 0
  rxsubrule1207_pass3395:
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1205_pos, $P11, rx1205_curclass, "$!pos"
    rx1205_cur."!cursor_pass"(rx1205_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1205_cur)
  rx1205_restart3387:
    repr_get_attr_obj rx1205_cstack, rx1205_cur, rx1205_curclass, "$!cstack"
  rx1205_fail3388:
    unless rx1205_bstack, rx1205_done3386
    pop $I19, rx1205_bstack
    if_null rx1205_cstack, rx1205_cstack_done3391
    unless rx1205_cstack, rx1205_cstack_done3391
    dec $I19
    set $P11, rx1205_cstack[$I19]
  rx1205_cstack_done3391:
    pop rx1205_rep, rx1205_bstack
    pop rx1205_pos, rx1205_bstack
    pop $I19, rx1205_bstack
    lt rx1205_pos, -1, rx1205_done3386
    lt rx1205_pos, 0, rx1205_fail3388
    eq $I19, 0, rx1205_fail3388
    nqp_islist $I20, rx1205_cstack
    unless $I20, rx1205_jump3389
    elements $I18, rx1205_bstack
    le $I18, 0, rx1205_cut3390
    dec $I18
    set $I18, rx1205_bstack[$I18]
  rx1205_cut3390:
    assign rx1205_cstack, $I18
  rx1205_jump3389:
    jump $I19
  rx1205_done3386:
    rx1205_cur."!cursor_fail"()
    .return (rx1205_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1346233478.067_caps" :subid("cuid_memo_390_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["codeblock"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1346233478.067_nfa" :subid("cuid_memo_391_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "{"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .const 'Sub' $P503 = 'cuid_230_1346233478.067' 
    capture_lex $P503 
    .const 'Sub' $P503 = 'cuid_231_1346233478.067' 
    capture_lex $P503 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1208_tgt
    .local int rx1208_pos
    .local int rx1208_off
    .local int rx1208_eos
    .local int rx1208_rep
    .local pmc rx1208_cur
    .local pmc rx1208_curclass
    .local pmc rx1208_bstack
    .local pmc rx1208_cstack
    (rx1208_cur, rx1208_tgt, rx1208_pos, rx1208_curclass, rx1208_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1208_cur
    length rx1208_eos, rx1208_tgt
    eq $I19, 1, rx1208_restart3398
    gt rx1208_pos, rx1208_eos, rx1208_fail3399
    repr_get_attr_int $I11, self, rx1208_curclass, "$!from"
    ne $I11, -1, rxscan1209_done3405
    goto rxscan1209_scan3404
  rxscan1209_loop3403:
    inc rx1208_pos
    gt rx1208_pos, rx1208_eos, rx1208_fail3399
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!from", rx1208_pos
  rxscan1209_scan3404:
    nqp_rxmark rx1208_bstack, rxscan1209_loop3403, rx1208_pos, 0
  rxscan1209_done3405:
    add $I11, rx1208_pos, 1
    gt $I11, rx1208_eos, rx1208_fail3399
    substr $S10, rx1208_tgt, rx1208_pos, 1
    ne $S10, ucs4:"?", rx1208_fail3399
    add rx1208_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1210_03407
    nqp_push_label $P11, alt1210_13418
    nqp_rxmark rx1208_bstack, alt1210_end3406, -1, 0
    rx1208_cur."!alt"(rx1208_pos, "alt_nfa__40_1346233484.315", $P11)
    goto rx1208_fail3399
  alt1210_03407:
    .const 'Sub' $P501 = 'cuid_230_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    lt $I11, 0, rx1208_fail3399
    goto alt1210_end3406
  alt1210_13418:
    .const 'Sub' $P502 = 'cuid_231_1346233478.067' 
    capture_lex $P502
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."before"($P502)
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    ge $I11, 0, rx1208_fail3399
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    lt $I11, 0, rx1208_fail3399
    nqp_rxmark rx1208_bstack, rxsubrule1215_pass3429, -1, 0
  rxsubrule1215_pass3429:
    rx1208_cstack = rx1208_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1208_pos, $P11, rx1208_curclass, "$!pos"
    goto alt1210_end3406
  alt1210_end3406:
    nqp_rxcommit rx1208_bstack, alt1210_end3406
    rx1208_cur."!cursor_pass"(rx1208_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1208_cur)
  rx1208_restart3398:
    repr_get_attr_obj rx1208_cstack, rx1208_cur, rx1208_curclass, "$!cstack"
  rx1208_fail3399:
    unless rx1208_bstack, rx1208_done3397
    pop $I19, rx1208_bstack
    if_null rx1208_cstack, rx1208_cstack_done3402
    unless rx1208_cstack, rx1208_cstack_done3402
    dec $I19
    set $P11, rx1208_cstack[$I19]
  rx1208_cstack_done3402:
    pop rx1208_rep, rx1208_bstack
    pop rx1208_pos, rx1208_bstack
    pop $I19, rx1208_bstack
    lt rx1208_pos, -1, rx1208_done3397
    lt rx1208_pos, 0, rx1208_fail3399
    eq $I19, 0, rx1208_fail3399
    nqp_islist $I20, rx1208_cstack
    unless $I20, rx1208_jump3400
    elements $I18, rx1208_bstack
    le $I18, 0, rx1208_cut3401
    dec $I18
    set $I18, rx1208_bstack[$I18]
  rx1208_cut3401:
    assign rx1208_cstack, $I18
  rx1208_jump3400:
    jump $I19
  rx1208_done3397:
    rx1208_cur."!cursor_fail"()
    .return (rx1208_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346233478.067_caps" :subid("cuid_memo_392_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["assertion"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346233478.067_nfa" :subid("cuid_memo_393_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 63
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 62
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    box $P511, 0
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 0
    push $P507, $P513
    push $P501, $P507
    new $P514, 'ResizablePMCArray'
    box $P515, 0
    push $P514, $P515
    box $P516, 0
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    push $P501, $P514
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346233478.067_alt_nfa__40_1346233484.315" :subid("cuid_memo_394_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 62
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 0
    push $P508, $P509
    box $P510, 0
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 0
    push $P514, $P515
    box $P516, 0
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    box $P518, 0
    push $P514, $P518
    box $P519, 0
    push $P514, $P519
    box $P520, 0
    push $P514, $P520
    push $P512, $P514
    push $P501, $P512
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1346233478.067") :anon :lex :outer("cuid_232_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1211_tgt
    .local int rx1211_pos
    .local int rx1211_off
    .local int rx1211_eos
    .local int rx1211_rep
    .local pmc rx1211_cur
    .local pmc rx1211_curclass
    .local pmc rx1211_bstack
    .local pmc rx1211_cstack
    (rx1211_cur, rx1211_tgt, rx1211_pos, rx1211_curclass, rx1211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1211_cur
    length rx1211_eos, rx1211_tgt
    eq $I19, 1, rx1211_restart3410
    gt rx1211_pos, rx1211_eos, rx1211_fail3411
    repr_get_attr_int $I11, self, rx1211_curclass, "$!from"
    ne $I11, -1, rxscan1212_done3417
    goto rxscan1212_scan3416
  rxscan1212_loop3415:
    inc rx1211_pos
    gt rx1211_pos, rx1211_eos, rx1211_fail3411
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!from", rx1211_pos
  rxscan1212_scan3416:
    nqp_rxmark rx1211_bstack, rxscan1212_loop3415, rx1211_pos, 0
  rxscan1212_done3417:
    add $I11, rx1211_pos, 1
    gt $I11, rx1211_eos, rx1211_fail3411
    substr $S10, rx1211_tgt, rx1211_pos, 1
    ne $S10, ucs4:">", rx1211_fail3411
    add rx1211_pos, 1
    rx1211_cur."!cursor_pass"(rx1211_pos, 'backtrack'=>1)
    .return (rx1211_cur)
  rx1211_restart3410:
    repr_get_attr_obj rx1211_cstack, rx1211_cur, rx1211_curclass, "$!cstack"
  rx1211_fail3411:
    unless rx1211_bstack, rx1211_done3409
    pop $I19, rx1211_bstack
    if_null rx1211_cstack, rx1211_cstack_done3414
    unless rx1211_cstack, rx1211_cstack_done3414
    dec $I19
    set $P11, rx1211_cstack[$I19]
  rx1211_cstack_done3414:
    pop rx1211_rep, rx1211_bstack
    pop rx1211_pos, rx1211_bstack
    pop $I19, rx1211_bstack
    lt rx1211_pos, -1, rx1211_done3409
    lt rx1211_pos, 0, rx1211_fail3411
    eq $I19, 0, rx1211_fail3411
    nqp_islist $I20, rx1211_cstack
    unless $I20, rx1211_jump3412
    elements $I18, rx1211_bstack
    le $I18, 0, rx1211_cut3413
    dec $I18
    set $I18, rx1211_bstack[$I18]
  rx1211_cut3413:
    assign rx1211_cstack, $I18
  rx1211_jump3412:
    jump $I19
  rx1211_done3409:
    rx1211_cur."!cursor_fail"()
    .return (rx1211_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1346233478.067_caps" :subid("cuid_memo_395_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1346233478.067_nfa" :subid("cuid_memo_396_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 62
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1346233478.067") :anon :lex :outer("cuid_232_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1213_tgt
    .local int rx1213_pos
    .local int rx1213_off
    .local int rx1213_eos
    .local int rx1213_rep
    .local pmc rx1213_cur
    .local pmc rx1213_curclass
    .local pmc rx1213_bstack
    .local pmc rx1213_cstack
    (rx1213_cur, rx1213_tgt, rx1213_pos, rx1213_curclass, rx1213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1213_cur
    length rx1213_eos, rx1213_tgt
    eq $I19, 1, rx1213_restart3421
    gt rx1213_pos, rx1213_eos, rx1213_fail3422
    repr_get_attr_int $I11, self, rx1213_curclass, "$!from"
    ne $I11, -1, rxscan1214_done3428
    goto rxscan1214_scan3427
  rxscan1214_loop3426:
    inc rx1213_pos
    gt rx1213_pos, rx1213_eos, rx1213_fail3422
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!from", rx1213_pos
  rxscan1214_scan3427:
    nqp_rxmark rx1213_bstack, rxscan1214_loop3426, rx1213_pos, 0
  rxscan1214_done3428:
    add $I11, rx1213_pos, 1
    gt $I11, rx1213_eos, rx1213_fail3422
    substr $S10, rx1213_tgt, rx1213_pos, 1
    ne $S10, ucs4:"{", rx1213_fail3422
    add rx1213_pos, 1
    rx1213_cur."!cursor_pass"(rx1213_pos, 'backtrack'=>1)
    .return (rx1213_cur)
  rx1213_restart3421:
    repr_get_attr_obj rx1213_cstack, rx1213_cur, rx1213_curclass, "$!cstack"
  rx1213_fail3422:
    unless rx1213_bstack, rx1213_done3420
    pop $I19, rx1213_bstack
    if_null rx1213_cstack, rx1213_cstack_done3425
    unless rx1213_cstack, rx1213_cstack_done3425
    dec $I19
    set $P11, rx1213_cstack[$I19]
  rx1213_cstack_done3425:
    pop rx1213_rep, rx1213_bstack
    pop rx1213_pos, rx1213_bstack
    pop $I19, rx1213_bstack
    lt rx1213_pos, -1, rx1213_done3420
    lt rx1213_pos, 0, rx1213_fail3422
    eq $I19, 0, rx1213_fail3422
    nqp_islist $I20, rx1213_cstack
    unless $I20, rx1213_jump3423
    elements $I18, rx1213_bstack
    le $I18, 0, rx1213_cut3424
    dec $I18
    set $I18, rx1213_bstack[$I18]
  rx1213_cut3424:
    assign rx1213_cstack, $I18
  rx1213_jump3423:
    jump $I19
  rx1213_done3420:
    rx1213_cur."!cursor_fail"()
    .return (rx1213_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1346233478.067_caps" :subid("cuid_memo_397_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1346233478.067_nfa" :subid("cuid_memo_398_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 123
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .const 'Sub' $P503 = 'cuid_233_1346233478.067' 
    capture_lex $P503 
    .const 'Sub' $P503 = 'cuid_234_1346233478.067' 
    capture_lex $P503 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1216_tgt
    .local int rx1216_pos
    .local int rx1216_off
    .local int rx1216_eos
    .local int rx1216_rep
    .local pmc rx1216_cur
    .local pmc rx1216_curclass
    .local pmc rx1216_bstack
    .local pmc rx1216_cstack
    (rx1216_cur, rx1216_tgt, rx1216_pos, rx1216_curclass, rx1216_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1216_cur
    length rx1216_eos, rx1216_tgt
    eq $I19, 1, rx1216_restart3432
    gt rx1216_pos, rx1216_eos, rx1216_fail3433
    repr_get_attr_int $I11, self, rx1216_curclass, "$!from"
    ne $I11, -1, rxscan1217_done3439
    goto rxscan1217_scan3438
  rxscan1217_loop3437:
    inc rx1216_pos
    gt rx1216_pos, rx1216_eos, rx1216_fail3433
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!from", rx1216_pos
  rxscan1217_scan3438:
    nqp_rxmark rx1216_bstack, rxscan1217_loop3437, rx1216_pos, 0
  rxscan1217_done3439:
    add $I11, rx1216_pos, 1
    gt $I11, rx1216_eos, rx1216_fail3433
    substr $S10, rx1216_tgt, rx1216_pos, 1
    ne $S10, ucs4:"!", rx1216_fail3433
    add rx1216_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1218_03441
    nqp_push_label $P11, alt1218_13452
    nqp_rxmark rx1216_bstack, alt1218_end3440, -1, 0
    rx1216_cur."!alt"(rx1216_pos, "alt_nfa__41_1346233484.341", $P11)
    goto rx1216_fail3433
  alt1218_03441:
    .const 'Sub' $P501 = 'cuid_233_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    lt $I11, 0, rx1216_fail3433
    goto alt1218_end3440
  alt1218_13452:
    .const 'Sub' $P502 = 'cuid_234_1346233478.067' 
    capture_lex $P502
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."before"($P502)
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    ge $I11, 0, rx1216_fail3433
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    lt $I11, 0, rx1216_fail3433
    nqp_rxmark rx1216_bstack, rxsubrule1223_pass3463, -1, 0
  rxsubrule1223_pass3463:
    rx1216_cstack = rx1216_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1216_pos, $P11, rx1216_curclass, "$!pos"
    goto alt1218_end3440
  alt1218_end3440:
    nqp_rxcommit rx1216_bstack, alt1218_end3440
    rx1216_cur."!cursor_pass"(rx1216_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1216_cur)
  rx1216_restart3432:
    repr_get_attr_obj rx1216_cstack, rx1216_cur, rx1216_curclass, "$!cstack"
  rx1216_fail3433:
    unless rx1216_bstack, rx1216_done3431
    pop $I19, rx1216_bstack
    if_null rx1216_cstack, rx1216_cstack_done3436
    unless rx1216_cstack, rx1216_cstack_done3436
    dec $I19
    set $P11, rx1216_cstack[$I19]
  rx1216_cstack_done3436:
    pop rx1216_rep, rx1216_bstack
    pop rx1216_pos, rx1216_bstack
    pop $I19, rx1216_bstack
    lt rx1216_pos, -1, rx1216_done3431
    lt rx1216_pos, 0, rx1216_fail3433
    eq $I19, 0, rx1216_fail3433
    nqp_islist $I20, rx1216_cstack
    unless $I20, rx1216_jump3434
    elements $I18, rx1216_bstack
    le $I18, 0, rx1216_cut3435
    dec $I18
    set $I18, rx1216_bstack[$I18]
  rx1216_cut3435:
    assign rx1216_cstack, $I18
  rx1216_jump3434:
    jump $I19
  rx1216_done3431:
    rx1216_cur."!cursor_fail"()
    .return (rx1216_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346233478.067_caps" :subid("cuid_memo_399_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["assertion"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346233478.067_nfa" :subid("cuid_memo_400_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 33
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 62
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    box $P511, 0
    push $P507, $P511
    box $P512, 0
    push $P507, $P512
    box $P513, 0
    push $P507, $P513
    push $P501, $P507
    new $P514, 'ResizablePMCArray'
    box $P515, 0
    push $P514, $P515
    box $P516, 0
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    push $P501, $P514
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346233478.067_alt_nfa__41_1346233484.341" :subid("cuid_memo_401_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 62
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 0
    push $P508, $P509
    box $P510, 0
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 0
    push $P514, $P515
    box $P516, 0
    push $P514, $P516
    box $P517, 0
    push $P514, $P517
    box $P518, 0
    push $P514, $P518
    box $P519, 0
    push $P514, $P519
    box $P520, 0
    push $P514, $P520
    push $P512, $P514
    push $P501, $P512
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1346233478.067") :anon :lex :outer("cuid_235_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1219_tgt
    .local int rx1219_pos
    .local int rx1219_off
    .local int rx1219_eos
    .local int rx1219_rep
    .local pmc rx1219_cur
    .local pmc rx1219_curclass
    .local pmc rx1219_bstack
    .local pmc rx1219_cstack
    (rx1219_cur, rx1219_tgt, rx1219_pos, rx1219_curclass, rx1219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1219_cur
    length rx1219_eos, rx1219_tgt
    eq $I19, 1, rx1219_restart3444
    gt rx1219_pos, rx1219_eos, rx1219_fail3445
    repr_get_attr_int $I11, self, rx1219_curclass, "$!from"
    ne $I11, -1, rxscan1220_done3451
    goto rxscan1220_scan3450
  rxscan1220_loop3449:
    inc rx1219_pos
    gt rx1219_pos, rx1219_eos, rx1219_fail3445
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!from", rx1219_pos
  rxscan1220_scan3450:
    nqp_rxmark rx1219_bstack, rxscan1220_loop3449, rx1219_pos, 0
  rxscan1220_done3451:
    add $I11, rx1219_pos, 1
    gt $I11, rx1219_eos, rx1219_fail3445
    substr $S10, rx1219_tgt, rx1219_pos, 1
    ne $S10, ucs4:">", rx1219_fail3445
    add rx1219_pos, 1
    rx1219_cur."!cursor_pass"(rx1219_pos, 'backtrack'=>1)
    .return (rx1219_cur)
  rx1219_restart3444:
    repr_get_attr_obj rx1219_cstack, rx1219_cur, rx1219_curclass, "$!cstack"
  rx1219_fail3445:
    unless rx1219_bstack, rx1219_done3443
    pop $I19, rx1219_bstack
    if_null rx1219_cstack, rx1219_cstack_done3448
    unless rx1219_cstack, rx1219_cstack_done3448
    dec $I19
    set $P11, rx1219_cstack[$I19]
  rx1219_cstack_done3448:
    pop rx1219_rep, rx1219_bstack
    pop rx1219_pos, rx1219_bstack
    pop $I19, rx1219_bstack
    lt rx1219_pos, -1, rx1219_done3443
    lt rx1219_pos, 0, rx1219_fail3445
    eq $I19, 0, rx1219_fail3445
    nqp_islist $I20, rx1219_cstack
    unless $I20, rx1219_jump3446
    elements $I18, rx1219_bstack
    le $I18, 0, rx1219_cut3447
    dec $I18
    set $I18, rx1219_bstack[$I18]
  rx1219_cut3447:
    assign rx1219_cstack, $I18
  rx1219_jump3446:
    jump $I19
  rx1219_done3443:
    rx1219_cur."!cursor_fail"()
    .return (rx1219_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1346233478.067_caps" :subid("cuid_memo_402_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1346233478.067_nfa" :subid("cuid_memo_403_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 62
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1346233478.067") :anon :lex :outer("cuid_235_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3455
    gt rx1221_pos, rx1221_eos, rx1221_fail3456
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3462
    goto rxscan1222_scan3461
  rxscan1222_loop3460:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3456
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3461:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3460, rx1221_pos, 0
  rxscan1222_done3462:
    add $I11, rx1221_pos, 1
    gt $I11, rx1221_eos, rx1221_fail3456
    substr $S10, rx1221_tgt, rx1221_pos, 1
    ne $S10, ucs4:"{", rx1221_fail3456
    add rx1221_pos, 1
    rx1221_cur."!cursor_pass"(rx1221_pos, 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3455:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3456:
    unless rx1221_bstack, rx1221_done3454
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3459
    unless rx1221_cstack, rx1221_cstack_done3459
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3459:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3454
    lt rx1221_pos, 0, rx1221_fail3456
    eq $I19, 0, rx1221_fail3456
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3457
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3458
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3458:
    assign rx1221_cstack, $I18
  rx1221_jump3457:
    jump $I19
  rx1221_done3454:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1346233478.067_caps" :subid("cuid_memo_404_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1346233478.067_nfa" :subid("cuid_memo_405_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 123
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_237_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .const 'Sub' $P502 = 'cuid_236_1346233478.067' 
    capture_lex $P502 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1224_tgt
    .local int rx1224_pos
    .local int rx1224_off
    .local int rx1224_eos
    .local int rx1224_rep
    .local pmc rx1224_cur
    .local pmc rx1224_curclass
    .local pmc rx1224_bstack
    .local pmc rx1224_cstack
    (rx1224_cur, rx1224_tgt, rx1224_pos, rx1224_curclass, rx1224_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1224_cur
    length rx1224_eos, rx1224_tgt
    eq $I19, 1, rx1224_restart3466
    gt rx1224_pos, rx1224_eos, rx1224_fail3467
    repr_get_attr_int $I11, self, rx1224_curclass, "$!from"
    ne $I11, -1, rxscan1225_done3473
    goto rxscan1225_scan3472
  rxscan1225_loop3471:
    inc rx1224_pos
    gt rx1224_pos, rx1224_eos, rx1224_fail3467
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!from", rx1224_pos
  rxscan1225_scan3472:
    nqp_rxmark rx1224_bstack, rxscan1225_loop3471, rx1224_pos, 0
  rxscan1225_done3473:
    nqp_rxmark rx1224_bstack, rxcap1226_fail3475, rx1224_pos, 0
    ge rx1224_pos, rx1224_eos, rx1224_fail3467
    substr $S11, rx1224_tgt, rx1224_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1224_fail3467
    inc rx1224_pos
    .const 'Sub' $P501 = 'cuid_236_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!pos", rx1224_pos
    $P11 = rx1224_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx1224_curclass, "$!pos"
    lt $I11, 0, rx1224_fail3467
    nqp_rxpeek $I19, rx1224_bstack, rxcap1226_fail3475
    inc $I19
    set $I11, rx1224_bstack[$I19]
    $P11 = rx1224_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1224_pos)
    rx1224_cstack = rx1224_cur."!cursor_capture"($P11, "zw")
    goto rxcap1226_done3474
  rxcap1226_fail3475:
    goto rx1224_fail3467
  rxcap1226_done3474:
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!pos", rx1224_pos
    $P11 = rx1224_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1224_curclass, "$!pos"
    lt $I11, 0, rx1224_fail3467
    nqp_rxmark rx1224_bstack, rxsubrule1229_pass3486, -1, 0
  rxsubrule1229_pass3486:
    rx1224_cstack = rx1224_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1224_pos, $P11, rx1224_curclass, "$!pos"
    rx1224_cur."!cursor_pass"(rx1224_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1224_cur)
  rx1224_restart3466:
    repr_get_attr_obj rx1224_cstack, rx1224_cur, rx1224_curclass, "$!cstack"
  rx1224_fail3467:
    unless rx1224_bstack, rx1224_done3465
    pop $I19, rx1224_bstack
    if_null rx1224_cstack, rx1224_cstack_done3470
    unless rx1224_cstack, rx1224_cstack_done3470
    dec $I19
    set $P11, rx1224_cstack[$I19]
  rx1224_cstack_done3470:
    pop rx1224_rep, rx1224_bstack
    pop rx1224_pos, rx1224_bstack
    pop $I19, rx1224_bstack
    lt rx1224_pos, -1, rx1224_done3465
    lt rx1224_pos, 0, rx1224_fail3467
    eq $I19, 0, rx1224_fail3467
    nqp_islist $I20, rx1224_cstack
    unless $I20, rx1224_jump3468
    elements $I18, rx1224_bstack
    le $I18, 0, rx1224_cut3469
    dec $I18
    set $I18, rx1224_bstack[$I18]
  rx1224_cut3469:
    assign rx1224_cstack, $I18
  rx1224_jump3468:
    jump $I19
  rx1224_done3465:
    rx1224_cur."!cursor_fail"()
    .return (rx1224_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1346233478.067_caps" :subid("cuid_memo_406_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["zw"], $P502
    box $P503, 0
    set $P501["codeblock"], $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1346233478.067_nfa" :subid("cuid_memo_407_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "?!"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 123
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    push $P501, $P507
    new $P511, 'ResizablePMCArray'
    box $P512, 0
    push $P511, $P512
    box $P513, 0
    push $P511, $P513
    box $P514, 0
    push $P511, $P514
    push $P501, $P511
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1346233478.067") :anon :lex :outer("cuid_237_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1227_tgt
    .local int rx1227_pos
    .local int rx1227_off
    .local int rx1227_eos
    .local int rx1227_rep
    .local pmc rx1227_cur
    .local pmc rx1227_curclass
    .local pmc rx1227_bstack
    .local pmc rx1227_cstack
    (rx1227_cur, rx1227_tgt, rx1227_pos, rx1227_curclass, rx1227_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1227_cur
    length rx1227_eos, rx1227_tgt
    eq $I19, 1, rx1227_restart3478
    gt rx1227_pos, rx1227_eos, rx1227_fail3479
    repr_get_attr_int $I11, self, rx1227_curclass, "$!from"
    ne $I11, -1, rxscan1228_done3485
    goto rxscan1228_scan3484
  rxscan1228_loop3483:
    inc rx1227_pos
    gt rx1227_pos, rx1227_eos, rx1227_fail3479
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!from", rx1227_pos
  rxscan1228_scan3484:
    nqp_rxmark rx1227_bstack, rxscan1228_loop3483, rx1227_pos, 0
  rxscan1228_done3485:
    add $I11, rx1227_pos, 1
    gt $I11, rx1227_eos, rx1227_fail3479
    substr $S10, rx1227_tgt, rx1227_pos, 1
    ne $S10, ucs4:"{", rx1227_fail3479
    add rx1227_pos, 1
    rx1227_cur."!cursor_pass"(rx1227_pos, 'backtrack'=>1)
    .return (rx1227_cur)
  rx1227_restart3478:
    repr_get_attr_obj rx1227_cstack, rx1227_cur, rx1227_curclass, "$!cstack"
  rx1227_fail3479:
    unless rx1227_bstack, rx1227_done3477
    pop $I19, rx1227_bstack
    if_null rx1227_cstack, rx1227_cstack_done3482
    unless rx1227_cstack, rx1227_cstack_done3482
    dec $I19
    set $P11, rx1227_cstack[$I19]
  rx1227_cstack_done3482:
    pop rx1227_rep, rx1227_bstack
    pop rx1227_pos, rx1227_bstack
    pop $I19, rx1227_bstack
    lt rx1227_pos, -1, rx1227_done3477
    lt rx1227_pos, 0, rx1227_fail3479
    eq $I19, 0, rx1227_fail3479
    nqp_islist $I20, rx1227_cstack
    unless $I20, rx1227_jump3480
    elements $I18, rx1227_bstack
    le $I18, 0, rx1227_cut3481
    dec $I18
    set $I18, rx1227_bstack[$I18]
  rx1227_cut3481:
    assign rx1227_cstack, $I18
  rx1227_jump3480:
    jump $I19
  rx1227_done3477:
    rx1227_cur."!cursor_fail"()
    .return (rx1227_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1346233478.067_caps" :subid("cuid_memo_408_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1346233478.067_nfa" :subid("cuid_memo_409_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 123
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_239_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .param pmc _lex_param_0 
    .const 'Sub' $P502 = 'cuid_238_1346233478.067' 
    capture_lex $P502 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1230_tgt
    .local int rx1230_pos
    .local int rx1230_off
    .local int rx1230_eos
    .local int rx1230_rep
    .local pmc rx1230_cur
    .local pmc rx1230_curclass
    .local pmc rx1230_bstack
    .local pmc rx1230_cstack
    (rx1230_cur, rx1230_tgt, rx1230_pos, rx1230_curclass, rx1230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1230_cur
    length rx1230_eos, rx1230_tgt
    eq $I19, 1, rx1230_restart3489
    gt rx1230_pos, rx1230_eos, rx1230_fail3490
    repr_get_attr_int $I11, self, rx1230_curclass, "$!from"
    ne $I11, -1, rxscan1231_done3496
    goto rxscan1231_scan3495
  rxscan1231_loop3494:
    inc rx1230_pos
    gt rx1230_pos, rx1230_eos, rx1230_fail3490
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!from", rx1230_pos
  rxscan1231_scan3495:
    nqp_rxmark rx1230_bstack, rxscan1231_loop3494, rx1230_pos, 0
  rxscan1231_done3496:
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1232_pass3497, -1, 0
  rxsubrule1232_pass3497:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    nqp_rxmark rx1230_bstack, rxquantr1233_done3499, rx1230_pos, 0
  rxquantr1233_loop3498:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1234_03501
    nqp_push_label $P11, alt1234_13512
    nqp_push_label $P11, alt1234_23514
    nqp_push_label $P11, alt1234_33516
    nqp_push_label $P11, alt1234_43518
    nqp_rxmark rx1230_bstack, alt1234_end3500, -1, 0
    rx1230_cur."!alt"(rx1230_pos, "alt_nfa__42_1346233484.404", $P11)
    goto rx1230_fail3490
  alt1234_03501:
    .const 'Sub' $P501 = 'cuid_238_1346233478.067' 
    capture_lex $P501
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."before"($P501)
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    goto alt1234_end3500
  alt1234_13512:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3490
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:"=", rx1230_fail3490
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1237_pass3513, -1, 0
  rxsubrule1237_pass3513:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3500
  alt1234_23514:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3490
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:":", rx1230_fail3490
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1238_pass3515, -1, 0
  rxsubrule1238_pass3515:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3500
  alt1234_33516:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3490
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:"(", rx1230_fail3490
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1239_pass3517, -1, 0
  rxsubrule1239_pass3517:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3490
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:")", rx1230_fail3490
    add rx1230_pos, 1
    goto alt1234_end3500
  alt1234_43518:
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1241_pass3520, -1, 0
  rxsubrule1241_pass3520:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3500
  alt1234_end3500:
    nqp_rxpeek $I19, rx1230_bstack, rxquantr1233_done3499
    inc $I19
    inc $I19
    set rx1230_rep, rx1230_bstack[$I19]
    nqp_rxcommit rx1230_bstack, rxquantr1233_done3499
    inc rx1230_rep
  rxquantr1233_done3499:
    rx1230_cur."!cursor_pass"(rx1230_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1230_cur)
  rx1230_restart3489:
    repr_get_attr_obj rx1230_cstack, rx1230_cur, rx1230_curclass, "$!cstack"
  rx1230_fail3490:
    unless rx1230_bstack, rx1230_done3488
    pop $I19, rx1230_bstack
    if_null rx1230_cstack, rx1230_cstack_done3493
    unless rx1230_cstack, rx1230_cstack_done3493
    dec $I19
    set $P11, rx1230_cstack[$I19]
  rx1230_cstack_done3493:
    pop rx1230_rep, rx1230_bstack
    pop rx1230_pos, rx1230_bstack
    pop $I19, rx1230_bstack
    lt rx1230_pos, -1, rx1230_done3488
    lt rx1230_pos, 0, rx1230_fail3490
    eq $I19, 0, rx1230_fail3490
    nqp_islist $I20, rx1230_cstack
    unless $I20, rx1230_jump3491
    elements $I18, rx1230_bstack
    le $I18, 0, rx1230_cut3492
    dec $I18
    set $I18, rx1230_bstack[$I18]
  rx1230_cut3492:
    assign rx1230_cstack, $I18
  rx1230_jump3491:
    jump $I19
  rx1230_done3488:
    rx1230_cur."!cursor_fail"()
    .return (rx1230_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346233478.067_caps" :subid("cuid_memo_410_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["longname"], $P502
    box $P503, 2
    set $P501["assertion"], $P503
    box $P504, 2
    set $P501["arglist"], $P504
    box $P505, 2
    set $P501["nibbler"], $P505
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346233478.067_nfa" :subid("cuid_memo_411_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "identifier"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 2
    push $P507, $P508
    box $P509, 62
    push $P507, $P509
    box $P510, 3
    push $P507, $P510
    box $P511, 2
    push $P507, $P511
    box $P512, 61
    push $P507, $P512
    box $P513, 4
    push $P507, $P513
    box $P514, 2
    push $P507, $P514
    box $P515, 58
    push $P507, $P515
    box $P516, 5
    push $P507, $P516
    box $P517, 2
    push $P507, $P517
    box $P518, 40
    push $P507, $P518
    box $P519, 6
    push $P507, $P519
    box $P520, 8
    push $P507, $P520
    box $P521, "normspace"
    push $P507, $P521
    box $P522, 8
    push $P507, $P522
    box $P523, 1
    push $P507, $P523
    box $P524, 0
    push $P507, $P524
    box $P525, 0
    push $P507, $P525
    push $P501, $P507
    new $P526, 'ResizablePMCArray'
    box $P527, 0
    push $P526, $P527
    box $P528, 0
    push $P526, $P528
    box $P529, 0
    push $P526, $P529
    push $P501, $P526
    new $P530, 'ResizablePMCArray'
    box $P531, 8
    push $P530, $P531
    box $P532, "assertion"
    push $P530, $P532
    box $P533, 0
    push $P530, $P533
    push $P501, $P530
    new $P534, 'ResizablePMCArray'
    box $P535, 8
    push $P534, $P535
    box $P536, "arglist"
    push $P534, $P536
    box $P537, 0
    push $P534, $P537
    push $P501, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 8
    push $P538, $P539
    box $P540, "LANG"
    push $P538, $P540
    box $P541, 7
    push $P538, $P541
    push $P501, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 41
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P501, $P542
    new $P546, 'ResizablePMCArray'
    box $P547, 8
    push $P546, $P547
    box $P548, "nibbler"
    push $P546, $P548
    box $P549, 0
    push $P546, $P549
    push $P501, $P546
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346233478.067_alt_nfa__42_1346233484.404" :subid("cuid_memo_412_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    new $P503, 'ResizablePMCArray'
    push $P502, $P503
    new $P504, 'ResizablePMCArray'
    box $P505, 2
    push $P504, $P505
    box $P506, 62
    push $P504, $P506
    box $P507, 2
    push $P504, $P507
    push $P502, $P504
    new $P508, 'ResizablePMCArray'
    box $P509, 0
    push $P508, $P509
    box $P510, 0
    push $P508, $P510
    box $P511, 0
    push $P508, $P511
    push $P502, $P508
    push $P501, $P502
    new $P512, 'ResizablePMCArray'
    new $P513, 'ResizablePMCArray'
    push $P512, $P513
    new $P514, 'ResizablePMCArray'
    box $P515, 2
    push $P514, $P515
    box $P516, 61
    push $P514, $P516
    box $P517, 2
    push $P514, $P517
    push $P512, $P514
    new $P518, 'ResizablePMCArray'
    box $P519, 8
    push $P518, $P519
    box $P520, "assertion"
    push $P518, $P520
    box $P521, 0
    push $P518, $P521
    push $P512, $P518
    push $P501, $P512
    new $P522, 'ResizablePMCArray'
    new $P523, 'ResizablePMCArray'
    push $P522, $P523
    new $P524, 'ResizablePMCArray'
    box $P525, 2
    push $P524, $P525
    box $P526, 58
    push $P524, $P526
    box $P527, 2
    push $P524, $P527
    push $P522, $P524
    new $P528, 'ResizablePMCArray'
    box $P529, 8
    push $P528, $P529
    box $P530, "arglist"
    push $P528, $P530
    box $P531, 0
    push $P528, $P531
    push $P522, $P528
    push $P501, $P522
    new $P532, 'ResizablePMCArray'
    new $P533, 'ResizablePMCArray'
    push $P532, $P533
    new $P534, 'ResizablePMCArray'
    box $P535, 2
    push $P534, $P535
    box $P536, 40
    push $P534, $P536
    box $P537, 2
    push $P534, $P537
    push $P532, $P534
    new $P538, 'ResizablePMCArray'
    box $P539, 8
    push $P538, $P539
    box $P540, "LANG"
    push $P538, $P540
    box $P541, 3
    push $P538, $P541
    push $P532, $P538
    new $P542, 'ResizablePMCArray'
    box $P543, 2
    push $P542, $P543
    box $P544, 41
    push $P542, $P544
    box $P545, 0
    push $P542, $P545
    push $P532, $P542
    push $P501, $P532
    new $P546, 'ResizablePMCArray'
    new $P547, 'ResizablePMCArray'
    push $P546, $P547
    new $P548, 'ResizablePMCArray'
    box $P549, 8
    push $P548, $P549
    box $P550, "normspace"
    push $P548, $P550
    box $P551, 2
    push $P548, $P551
    push $P546, $P548
    new $P552, 'ResizablePMCArray'
    box $P553, 8
    push $P552, $P553
    box $P554, "nibbler"
    push $P552, $P554
    box $P555, 0
    push $P552, $P555
    push $P546, $P552
    push $P501, $P546
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1346233478.067") :anon :lex :outer("cuid_239_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1235_tgt
    .local int rx1235_pos
    .local int rx1235_off
    .local int rx1235_eos
    .local int rx1235_rep
    .local pmc rx1235_cur
    .local pmc rx1235_curclass
    .local pmc rx1235_bstack
    .local pmc rx1235_cstack
    (rx1235_cur, rx1235_tgt, rx1235_pos, rx1235_curclass, rx1235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1235_cur
    length rx1235_eos, rx1235_tgt
    eq $I19, 1, rx1235_restart3504
    gt rx1235_pos, rx1235_eos, rx1235_fail3505
    repr_get_attr_int $I11, self, rx1235_curclass, "$!from"
    ne $I11, -1, rxscan1236_done3511
    goto rxscan1236_scan3510
  rxscan1236_loop3509:
    inc rx1235_pos
    gt rx1235_pos, rx1235_eos, rx1235_fail3505
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!from", rx1235_pos
  rxscan1236_scan3510:
    nqp_rxmark rx1235_bstack, rxscan1236_loop3509, rx1235_pos, 0
  rxscan1236_done3511:
    add $I11, rx1235_pos, 1
    gt $I11, rx1235_eos, rx1235_fail3505
    substr $S10, rx1235_tgt, rx1235_pos, 1
    ne $S10, ucs4:">", rx1235_fail3505
    add rx1235_pos, 1
    rx1235_cur."!cursor_pass"(rx1235_pos, 'backtrack'=>1)
    .return (rx1235_cur)
  rx1235_restart3504:
    repr_get_attr_obj rx1235_cstack, rx1235_cur, rx1235_curclass, "$!cstack"
  rx1235_fail3505:
    unless rx1235_bstack, rx1235_done3503
    pop $I19, rx1235_bstack
    if_null rx1235_cstack, rx1235_cstack_done3508
    unless rx1235_cstack, rx1235_cstack_done3508
    dec $I19
    set $P11, rx1235_cstack[$I19]
  rx1235_cstack_done3508:
    pop rx1235_rep, rx1235_bstack
    pop rx1235_pos, rx1235_bstack
    pop $I19, rx1235_bstack
    lt rx1235_pos, -1, rx1235_done3503
    lt rx1235_pos, 0, rx1235_fail3505
    eq $I19, 0, rx1235_fail3505
    nqp_islist $I20, rx1235_cstack
    unless $I20, rx1235_jump3506
    elements $I18, rx1235_bstack
    le $I18, 0, rx1235_cut3507
    dec $I18
    set $I18, rx1235_bstack[$I18]
  rx1235_cut3507:
    assign rx1235_cstack, $I18
  rx1235_jump3506:
    jump $I19
  rx1235_done3503:
    rx1235_cur."!cursor_fail"()
    .return (rx1235_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1346233478.067_caps" :subid("cuid_memo_413_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1346233478.067_nfa" :subid("cuid_memo_414_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 2
    push $P503, $P504
    box $P505, 62
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_240_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_curclass
    .local pmc rx1242_bstack
    .local pmc rx1242_cstack
    (rx1242_cur, rx1242_tgt, rx1242_pos, rx1242_curclass, rx1242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1242_cur
    length rx1242_eos, rx1242_tgt
    eq $I19, 1, rx1242_restart3523
    gt rx1242_pos, rx1242_eos, rx1242_fail3524
    repr_get_attr_int $I11, self, rx1242_curclass, "$!from"
    ne $I11, -1, rxscan1243_done3530
    goto rxscan1243_scan3529
  rxscan1243_loop3528:
    inc rx1242_pos
    gt rx1242_pos, rx1242_eos, rx1242_fail3524
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!from", rx1242_pos
  rxscan1243_scan3529:
    nqp_rxmark rx1242_bstack, rxscan1243_loop3528, rx1242_pos, 0
  rxscan1243_done3530:
    ge rx1242_pos, rx1242_eos, rx1242_fail3524
    substr $S11, rx1242_tgt, rx1242_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1242_fail3524
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1242_curclass, "$!pos"
    lt $I11, 0, rx1242_fail3524
    nqp_rxmark rx1242_bstack, rxsubrule1244_pass3531, -1, 0
  rxsubrule1244_pass3531:
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1242_pos, $P11, rx1242_curclass, "$!pos"
    rx1242_cur."!cursor_pass"(rx1242_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1242_cur)
  rx1242_restart3523:
    repr_get_attr_obj rx1242_cstack, rx1242_cur, rx1242_curclass, "$!cstack"
  rx1242_fail3524:
    unless rx1242_bstack, rx1242_done3522
    pop $I19, rx1242_bstack
    if_null rx1242_cstack, rx1242_cstack_done3527
    unless rx1242_cstack, rx1242_cstack_done3527
    dec $I19
    set $P11, rx1242_cstack[$I19]
  rx1242_cstack_done3527:
    pop rx1242_rep, rx1242_bstack
    pop rx1242_pos, rx1242_bstack
    pop $I19, rx1242_bstack
    lt rx1242_pos, -1, rx1242_done3522
    lt rx1242_pos, 0, rx1242_fail3524
    eq $I19, 0, rx1242_fail3524
    nqp_islist $I20, rx1242_cstack
    unless $I20, rx1242_jump3525
    elements $I18, rx1242_bstack
    le $I18, 0, rx1242_cut3526
    dec $I18
    set $I18, rx1242_bstack[$I18]
  rx1242_cut3526:
    assign rx1242_cstack, $I18
  rx1242_jump3525:
    jump $I19
  rx1242_done3522:
    rx1242_cur."!cursor_fail"()
    .return (rx1242_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1346233478.067_caps" :subid("cuid_memo_415_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["var"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1346233478.067_nfa" :subid("cuid_memo_416_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 6
    push $P503, $P504
    box $P505, "$@"
    push $P503, $P505
    box $P506, 2
    push $P503, $P506
    push $P501, $P503
    new $P507, 'ResizablePMCArray'
    box $P508, 0
    push $P507, $P508
    box $P509, 0
    push $P507, $P509
    box $P510, 0
    push $P507, $P510
    push $P501, $P507
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_241_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1245_tgt
    .local int rx1245_pos
    .local int rx1245_off
    .local int rx1245_eos
    .local int rx1245_rep
    .local pmc rx1245_cur
    .local pmc rx1245_curclass
    .local pmc rx1245_bstack
    .local pmc rx1245_cstack
    (rx1245_cur, rx1245_tgt, rx1245_pos, rx1245_curclass, rx1245_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1245_cur
    length rx1245_eos, rx1245_tgt
    eq $I19, 1, rx1245_restart3534
    gt rx1245_pos, rx1245_eos, rx1245_fail3535
    repr_get_attr_int $I11, self, rx1245_curclass, "$!from"
    ne $I11, -1, rxscan1246_done3541
    goto rxscan1246_scan3540
  rxscan1246_loop3539:
    inc rx1245_pos
    gt rx1245_pos, rx1245_eos, rx1245_fail3535
    repr_bind_attr_int rx1245_cur, rx1245_curclass, "$!from", rx1245_pos
  rxscan1246_scan3540:
    nqp_rxmark rx1245_bstack, rxscan1246_loop3539, rx1245_pos, 0
  rxscan1246_done3541:
    repr_bind_attr_int rx1245_cur, rx1245_curclass, "$!pos", rx1245_pos
    $P11 = rx1245_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1245_curclass, "$!pos"
    lt $I11, 0, rx1245_fail3535
    nqp_rxmark rx1245_bstack, rxsubrule1247_pass3542, -1, 0
  rxsubrule1247_pass3542:
    rx1245_cstack = rx1245_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1245_pos, $P11, rx1245_curclass, "$!pos"
    rx1245_cur."!cursor_pass"(rx1245_pos, "codeblock", 'backtrack'=>1)
    .return (rx1245_cur)
  rx1245_restart3534:
    repr_get_attr_obj rx1245_cstack, rx1245_cur, rx1245_curclass, "$!cstack"
  rx1245_fail3535:
    unless rx1245_bstack, rx1245_done3533
    pop $I19, rx1245_bstack
    if_null rx1245_cstack, rx1245_cstack_done3538
    unless rx1245_cstack, rx1245_cstack_done3538
    dec $I19
    set $P11, rx1245_cstack[$I19]
  rx1245_cstack_done3538:
    pop rx1245_rep, rx1245_bstack
    pop rx1245_pos, rx1245_bstack
    pop $I19, rx1245_bstack
    lt rx1245_pos, -1, rx1245_done3533
    lt rx1245_pos, 0, rx1245_fail3535
    eq $I19, 0, rx1245_fail3535
    nqp_islist $I20, rx1245_cstack
    unless $I20, rx1245_jump3536
    elements $I18, rx1245_bstack
    le $I18, 0, rx1245_cut3537
    dec $I18
    set $I18, rx1245_bstack[$I18]
  rx1245_cut3537:
    assign rx1245_cstack, $I18
  rx1245_jump3536:
    jump $I19
  rx1245_done3533:
    rx1245_cur."!cursor_fail"()
    .return (rx1245_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1346233478.067_caps" :subid("cuid_memo_417_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["block"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1346233478.067_nfa" :subid("cuid_memo_418_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "LANG"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_242_1346233478.067") :anon :lex :outer("cuid_243_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1248_tgt
    .local int rx1248_pos
    .local int rx1248_off
    .local int rx1248_eos
    .local int rx1248_rep
    .local pmc rx1248_cur
    .local pmc rx1248_curclass
    .local pmc rx1248_bstack
    .local pmc rx1248_cstack
    (rx1248_cur, rx1248_tgt, rx1248_pos, rx1248_curclass, rx1248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1248_cur
    length rx1248_eos, rx1248_tgt
    eq $I19, 1, rx1248_restart3545
    gt rx1248_pos, rx1248_eos, rx1248_fail3546
    repr_get_attr_int $I11, self, rx1248_curclass, "$!from"
    ne $I11, -1, rxscan1249_done3552
    goto rxscan1249_scan3551
  rxscan1249_loop3550:
    inc rx1248_pos
    gt rx1248_pos, rx1248_eos, rx1248_fail3546
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!from", rx1248_pos
  rxscan1249_scan3551:
    nqp_rxmark rx1248_bstack, rxscan1249_loop3550, rx1248_pos, 0
  rxscan1249_done3552:
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!pos", rx1248_pos
    $P11 = rx1248_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1248_curclass, "$!pos"
    lt $I11, 0, rx1248_fail3546
    nqp_rxmark rx1248_bstack, rxsubrule1250_pass3553, -1, 0
  rxsubrule1250_pass3553:
    rx1248_cstack = rx1248_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1248_pos, $P11, rx1248_curclass, "$!pos"
    rx1248_cur."!cursor_pass"(rx1248_pos, "arg", 'backtrack'=>1)
    .return (rx1248_cur)
  rx1248_restart3545:
    repr_get_attr_obj rx1248_cstack, rx1248_cur, rx1248_curclass, "$!cstack"
  rx1248_fail3546:
    unless rx1248_bstack, rx1248_done3544
    pop $I19, rx1248_bstack
    if_null rx1248_cstack, rx1248_cstack_done3549
    unless rx1248_cstack, rx1248_cstack_done3549
    dec $I19
    set $P11, rx1248_cstack[$I19]
  rx1248_cstack_done3549:
    pop rx1248_rep, rx1248_bstack
    pop rx1248_pos, rx1248_bstack
    pop $I19, rx1248_bstack
    lt rx1248_pos, -1, rx1248_done3544
    lt rx1248_pos, 0, rx1248_fail3546
    eq $I19, 0, rx1248_fail3546
    nqp_islist $I20, rx1248_cstack
    unless $I20, rx1248_jump3547
    elements $I18, rx1248_bstack
    le $I18, 0, rx1248_cut3548
    dec $I18
    set $I18, rx1248_bstack[$I18]
  rx1248_cut3548:
    assign rx1248_cstack, $I18
  rx1248_jump3547:
    jump $I19
  rx1248_done3544:
    rx1248_cur."!cursor_fail"()
    .return (rx1248_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1346233478.067_caps" :subid("cuid_memo_419_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'Hash'
    box $P502, 0
    set $P501["quote_EXPR"], $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1346233478.067_nfa" :subid("cuid_memo_420_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    new $P502, 'ResizablePMCArray'
    push $P501, $P502
    new $P503, 'ResizablePMCArray'
    box $P504, 8
    push $P503, $P504
    box $P505, "LANG"
    push $P503, $P505
    box $P506, 0
    push $P503, $P506
    push $P501, $P503
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1[0]
    unless_null $P502, fallback3555
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback3555:
    set $P101, $P502
    get_hll_global $P507, "GLOBAL"
    nqp_get_package_through_who $P506, $P507, "QAST"
    get_who $P505, $P506
    set $P504, $P505["Var"]
    unless_null $P504, fallback3558
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P508
  fallback3558:
    type_check $I501, $P101, $P504
    box $P511, $I501
    set $P510, $P511
    if $I501 goto unless1251_end3557 
.annotate 'line', 1386
    box $P509, "Pre-increment can only work on a variable"
    die $P509
    set $P510, $P509
  unless1251_end3557:
.annotate 'line', 1389
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Op"]
    unless_null $P512, fallback3559
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback3559:
.annotate 'line', 1392
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["Op"]
    unless_null $P517, fallback3560
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback3560:
.annotate 'line', 1395
    get_hll_global $P525, "GLOBAL"
    nqp_get_package_through_who $P524, $P525, "QAST"
    get_who $P523, $P524
    set $P522, $P523["IVal"]
    unless_null $P522, fallback3561
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P526
  fallback3561:
    $P527 = $P522."new"(1 :named("value"))
    $P528 = $P517."new"($P101, $P527, "add_n" :named("op"))
    $P529 = $P512."new"($P101, $P528, "bind" :named("op"))
    $P530 = _lex_param_0."as_post"($P529)
    .return ($P530) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1399
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1[0]
    unless_null $P502, fallback3562
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback3562:
    set $P101, $P502
    get_hll_global $P507, "GLOBAL"
    nqp_get_package_through_who $P506, $P507, "QAST"
    get_who $P505, $P506
    set $P504, $P505["Var"]
    unless_null $P504, fallback3565
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P508
  fallback3565:
    type_check $I501, $P101, $P504
    box $P511, $I501
    set $P510, $P511
    if $I501 goto unless1252_end3564 
.annotate 'line', 1401
    box $P509, "Pre-decrement can only work on a variable"
    die $P509
    set $P510, $P509
  unless1252_end3564:
.annotate 'line', 1404
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Op"]
    unless_null $P512, fallback3566
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback3566:
.annotate 'line', 1407
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["Op"]
    unless_null $P517, fallback3567
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback3567:
.annotate 'line', 1410
    get_hll_global $P525, "GLOBAL"
    nqp_get_package_through_who $P524, $P525, "QAST"
    get_who $P523, $P524
    set $P522, $P523["IVal"]
    unless_null $P522, fallback3568
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P526
  fallback3568:
    $P527 = $P522."new"(1 :named("value"))
    $P528 = $P517."new"($P101, $P527, "sub_n" :named("op"))
    $P529 = $P512."new"($P101, $P528, "bind" :named("op"))
    $P530 = _lex_param_0."as_post"($P529)
    .return ($P530) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1414
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $P503, _lex_param_1[0]
    unless_null $P503, fallback3569
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback3569:
    set $P101, $P503
.annotate 'line', 1416
    get_hll_global $P508, "GLOBAL"
    nqp_get_package_through_who $P507, $P508, "QAST"
    get_who $P506, $P507
    set $P505, $P506["Op"]
    unless_null $P505, fallback3570
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P509
  fallback3570:
    $P510 = $P505."unique"("tmp")
    set $P102, $P510
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["Var"]
    unless_null $P511, fallback3573
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback3573:
    type_check $I501, $P101, $P511
    box $P518, $I501
    set $P517, $P518
    if $I501 goto unless1253_end3572 
.annotate 'line', 1417
    box $P516, "Post-increment can only work on a variable"
    die $P516
    set $P517, $P516
  unless1253_end3572:
.annotate 'line', 1420
    get_hll_global $P522, "GLOBAL"
    nqp_get_package_through_who $P521, $P522, "QAST"
    get_who $P520, $P521
    set $P519, $P520["Stmt"]
    unless_null $P519, fallback3574
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P523
  fallback3574:
.annotate 'line', 1422
    get_hll_global $P527, "GLOBAL"
    nqp_get_package_through_who $P526, $P527, "QAST"
    get_who $P525, $P526
    set $P524, $P525["Op"]
    unless_null $P524, fallback3575
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P528
  fallback3575:
.annotate 'line', 1424
    get_hll_global $P532, "GLOBAL"
    nqp_get_package_through_who $P531, $P532, "QAST"
    get_who $P530, $P531
    set $P529, $P530["Var"]
    unless_null $P529, fallback3576
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P533
  fallback3576:
    $P534 = $P529."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P535 = $P524."new"($P534, $P101, "bind" :named("op"))
.annotate 'line', 1427
    get_hll_global $P539, "GLOBAL"
    nqp_get_package_through_who $P538, $P539, "QAST"
    get_who $P537, $P538
    set $P536, $P537["Op"]
    unless_null $P536, fallback3577
    nqp_get_sc_object $P540, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P536, $P540
  fallback3577:
.annotate 'line', 1430
    get_hll_global $P544, "GLOBAL"
    nqp_get_package_through_who $P543, $P544, "QAST"
    get_who $P542, $P543
    set $P541, $P542["Op"]
    unless_null $P541, fallback3578
    nqp_get_sc_object $P545, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P545
  fallback3578:
.annotate 'line', 1432
    get_hll_global $P549, "GLOBAL"
    nqp_get_package_through_who $P548, $P549, "QAST"
    get_who $P547, $P548
    set $P546, $P547["Var"]
    unless_null $P546, fallback3579
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P546, $P550
  fallback3579:
    $P551 = $P546."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1433
    get_hll_global $P555, "GLOBAL"
    nqp_get_package_through_who $P554, $P555, "QAST"
    get_who $P553, $P554
    set $P552, $P553["IVal"]
    unless_null $P552, fallback3580
    nqp_get_sc_object $P556, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P552, $P556
  fallback3580:
    $P557 = $P552."new"(1 :named("value"))
    $P558 = $P541."new"($P551, $P557, "add_n" :named("op"))
    $P559 = $P536."new"($P101, $P558, "bind" :named("op"))
    $P560 = $P519."new"($P535, $P559, 0 :named("resultchild"))
    $P561 = _lex_param_0."as_post"($P560)
    .return ($P561) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1438
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $P503, _lex_param_1[0]
    unless_null $P503, fallback3581
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback3581:
    set $P101, $P503
.annotate 'line', 1440
    get_hll_global $P508, "GLOBAL"
    nqp_get_package_through_who $P507, $P508, "QAST"
    get_who $P506, $P507
    set $P505, $P506["Op"]
    unless_null $P505, fallback3582
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P509
  fallback3582:
    $P510 = $P505."unique"("tmp")
    set $P102, $P510
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["Var"]
    unless_null $P511, fallback3585
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback3585:
    type_check $I501, $P101, $P511
    box $P518, $I501
    set $P517, $P518
    if $I501 goto unless1254_end3584 
.annotate 'line', 1441
    box $P516, "Post-decrement can only work on a variable"
    die $P516
    set $P517, $P516
  unless1254_end3584:
.annotate 'line', 1444
    get_hll_global $P522, "GLOBAL"
    nqp_get_package_through_who $P521, $P522, "QAST"
    get_who $P520, $P521
    set $P519, $P520["Stmt"]
    unless_null $P519, fallback3586
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P523
  fallback3586:
.annotate 'line', 1446
    get_hll_global $P527, "GLOBAL"
    nqp_get_package_through_who $P526, $P527, "QAST"
    get_who $P525, $P526
    set $P524, $P525["Op"]
    unless_null $P524, fallback3587
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P528
  fallback3587:
.annotate 'line', 1448
    get_hll_global $P532, "GLOBAL"
    nqp_get_package_through_who $P531, $P532, "QAST"
    get_who $P530, $P531
    set $P529, $P530["Var"]
    unless_null $P529, fallback3588
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P533
  fallback3588:
    $P534 = $P529."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P535 = $P524."new"($P534, $P101, "bind" :named("op"))
.annotate 'line', 1451
    get_hll_global $P539, "GLOBAL"
    nqp_get_package_through_who $P538, $P539, "QAST"
    get_who $P537, $P538
    set $P536, $P537["Op"]
    unless_null $P536, fallback3589
    nqp_get_sc_object $P540, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P536, $P540
  fallback3589:
.annotate 'line', 1454
    get_hll_global $P544, "GLOBAL"
    nqp_get_package_through_who $P543, $P544, "QAST"
    get_who $P542, $P543
    set $P541, $P542["Op"]
    unless_null $P541, fallback3590
    nqp_get_sc_object $P545, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P545
  fallback3590:
.annotate 'line', 1456
    get_hll_global $P549, "GLOBAL"
    nqp_get_package_through_who $P548, $P549, "QAST"
    get_who $P547, $P548
    set $P546, $P547["Var"]
    unless_null $P546, fallback3591
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P546, $P550
  fallback3591:
    $P551 = $P546."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1457
    get_hll_global $P555, "GLOBAL"
    nqp_get_package_through_who $P554, $P555, "QAST"
    get_who $P553, $P554
    set $P552, $P553["IVal"]
    unless_null $P552, fallback3592
    nqp_get_sc_object $P556, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P552, $P556
  fallback3592:
    $P557 = $P552."new"(1 :named("value"))
    $P558 = $P541."new"($P551, $P557, "sub_n" :named("op"))
    $P559 = $P536."new"($P101, $P558, "bind" :named("op"))
    $P560 = $P519."new"($P535, $P559, 0 :named("resultchild"))
    $P561 = _lex_param_0."as_post"($P560)
    .return ($P561) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1462
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1463
    set $P501, _lex_param_1[0]
    unless_null $P501, fallback3593
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback3593:
    $P503 = _lex_param_0."as_post"($P501, "n" :named("want"))
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1466
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1467
    set $P501, _lex_param_1[0]
    unless_null $P501, fallback3594
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback3594:
    $P503 = _lex_param_0."as_post"($P501, "s" :named("want"))
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1470
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1471
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback3595
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3595:
.annotate 'line', 1473
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Op"]
    unless_null $P506, fallback3596
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback3596:
    set $P511, _lex_param_1[0]
    unless_null $P511, fallback3597
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P512
  fallback3597:
    $P513 = $P506."new"($P511, "where" :named("op"))
.annotate 'line', 1474
    get_hll_global $P517, "GLOBAL"
    nqp_get_package_through_who $P516, $P517, "QAST"
    get_who $P515, $P516
    set $P514, $P515["Op"]
    unless_null $P514, fallback3598
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P518
  fallback3598:
    set $P519, _lex_param_1[1]
    unless_null $P519, fallback3599
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P520
  fallback3599:
    $P521 = $P514."new"($P519, "where" :named("op"))
    $P522 = $P501."new"($P513, $P521, "iseq_i" :named("op"))
    $P523 = _lex_param_0."as_post"($P522)
    .return ($P523) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_360_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1479
    .const 'Sub' $P627 = 'cuid_407_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_410_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_413_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_416_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_418_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_419_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_420_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_422_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_423_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_426_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_244_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_245_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_246_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_247_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_248_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_249_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_250_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_251_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_252_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_253_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_254_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_255_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_256_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_257_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_258_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_259_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_260_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_261_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_262_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_263_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_264_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_265_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_266_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_267_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_268_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_269_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_270_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_271_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_272_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_273_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_274_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_275_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_276_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_277_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_278_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_279_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_280_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_281_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_282_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_283_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_284_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_285_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_286_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_287_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_288_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_289_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_290_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_291_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_292_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_293_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_294_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_295_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_296_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_297_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_298_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_299_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_300_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_301_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_302_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_303_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_304_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_305_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_306_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_307_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_308_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_309_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_310_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_311_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_312_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_313_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_314_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_315_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_316_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_317_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_318_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_319_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_320_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_321_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_322_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_323_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_324_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_325_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_326_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_327_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_328_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_329_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_330_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_331_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_332_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_333_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_334_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_335_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_336_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_337_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_338_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_339_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_340_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_341_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_342_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_343_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_344_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_345_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_346_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_347_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_348_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_349_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_350_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_351_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_352_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_353_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_354_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_355_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_356_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_357_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_358_1346233478.067' 
    capture_lex $P627 
    .const 'Sub' $P627 = 'cuid_359_1346233478.067' 
    capture_lex $P627 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&colonpair_str", $P104 
    .lex "&import_HOW_exports", $P105 
    .lex "&set_block_handler", $P106 
    .lex "&only_star_block", $P107 
    .lex "&attach_multi_signature", $P108 
    .lex "&wrap_return_handler", $P109 
    .lex "&lexical_package_lookup", $P110 
    .lex "$?PACKAGE", $P111 
    .lex "$?CLASS", $P112 
    .const 'Sub' $P501 = 'cuid_407_1346233478.067' 
    capture_lex $P501
    set $P101, $P501
    .const 'Sub' $P502 = 'cuid_410_1346233478.067' 
    capture_lex $P502
    set $P102, $P502
    .const 'Sub' $P503 = 'cuid_413_1346233478.067' 
    capture_lex $P503
    set $P103, $P503
    .const 'Sub' $P504 = 'cuid_416_1346233478.067' 
    capture_lex $P504
    set $P104, $P504
    .const 'Sub' $P505 = 'cuid_418_1346233478.067' 
    capture_lex $P505
    set $P105, $P505
    .const 'Sub' $P506 = 'cuid_419_1346233478.067' 
    capture_lex $P506
    set $P106, $P506
    .const 'Sub' $P507 = 'cuid_420_1346233478.067' 
    capture_lex $P507
    set $P107, $P507
    .const 'Sub' $P508 = 'cuid_422_1346233478.067' 
    capture_lex $P508
    set $P108, $P508
    .const 'Sub' $P509 = 'cuid_423_1346233478.067' 
    capture_lex $P509
    set $P109, $P509
    .const 'Sub' $P510 = 'cuid_426_1346233478.067' 
    capture_lex $P510
    set $P110, $P510
    .const 'Sub' $P511 = 'cuid_244_1346233478.067' 
    capture_lex $P511
    .const 'Sub' $P512 = 'cuid_245_1346233478.067' 
    capture_lex $P512
    .const 'Sub' $P513 = 'cuid_246_1346233478.067' 
    capture_lex $P513
    .const 'Sub' $P514 = 'cuid_247_1346233478.067' 
    capture_lex $P514
    .const 'Sub' $P515 = 'cuid_248_1346233478.067' 
    capture_lex $P515
    .const 'Sub' $P516 = 'cuid_249_1346233478.067' 
    capture_lex $P516
    .const 'Sub' $P517 = 'cuid_250_1346233478.067' 
    capture_lex $P517
    .const 'Sub' $P518 = 'cuid_251_1346233478.067' 
    capture_lex $P518
    .const 'Sub' $P519 = 'cuid_252_1346233478.067' 
    capture_lex $P519
    .const 'Sub' $P520 = 'cuid_253_1346233478.067' 
    capture_lex $P520
    .const 'Sub' $P521 = 'cuid_254_1346233478.067' 
    capture_lex $P521
    .const 'Sub' $P522 = 'cuid_255_1346233478.067' 
    capture_lex $P522
    .const 'Sub' $P523 = 'cuid_256_1346233478.067' 
    capture_lex $P523
    .const 'Sub' $P524 = 'cuid_257_1346233478.067' 
    capture_lex $P524
    .const 'Sub' $P525 = 'cuid_258_1346233478.067' 
    capture_lex $P525
    .const 'Sub' $P526 = 'cuid_259_1346233478.067' 
    capture_lex $P526
    .const 'Sub' $P527 = 'cuid_260_1346233478.067' 
    capture_lex $P527
    .const 'Sub' $P528 = 'cuid_261_1346233478.067' 
    capture_lex $P528
    .const 'Sub' $P529 = 'cuid_262_1346233478.067' 
    capture_lex $P529
    .const 'Sub' $P530 = 'cuid_263_1346233478.067' 
    capture_lex $P530
    .const 'Sub' $P531 = 'cuid_264_1346233478.067' 
    capture_lex $P531
    .const 'Sub' $P532 = 'cuid_265_1346233478.067' 
    capture_lex $P532
    .const 'Sub' $P533 = 'cuid_266_1346233478.067' 
    capture_lex $P533
    .const 'Sub' $P534 = 'cuid_267_1346233478.067' 
    capture_lex $P534
    .const 'Sub' $P535 = 'cuid_268_1346233478.067' 
    capture_lex $P535
    .const 'Sub' $P536 = 'cuid_269_1346233478.067' 
    capture_lex $P536
    .const 'Sub' $P537 = 'cuid_270_1346233478.067' 
    capture_lex $P537
    .const 'Sub' $P538 = 'cuid_271_1346233478.067' 
    capture_lex $P538
    .const 'Sub' $P539 = 'cuid_272_1346233478.067' 
    capture_lex $P539
    .const 'Sub' $P540 = 'cuid_273_1346233478.067' 
    capture_lex $P540
    .const 'Sub' $P541 = 'cuid_274_1346233478.067' 
    capture_lex $P541
    .const 'Sub' $P542 = 'cuid_275_1346233478.067' 
    capture_lex $P542
    .const 'Sub' $P543 = 'cuid_276_1346233478.067' 
    capture_lex $P543
    .const 'Sub' $P544 = 'cuid_277_1346233478.067' 
    capture_lex $P544
    .const 'Sub' $P545 = 'cuid_278_1346233478.067' 
    capture_lex $P545
    .const 'Sub' $P546 = 'cuid_279_1346233478.067' 
    capture_lex $P546
    .const 'Sub' $P547 = 'cuid_280_1346233478.067' 
    capture_lex $P547
    .const 'Sub' $P548 = 'cuid_281_1346233478.067' 
    capture_lex $P548
    .const 'Sub' $P549 = 'cuid_282_1346233478.067' 
    capture_lex $P549
    .const 'Sub' $P550 = 'cuid_283_1346233478.067' 
    capture_lex $P550
    .const 'Sub' $P551 = 'cuid_284_1346233478.067' 
    capture_lex $P551
    .const 'Sub' $P552 = 'cuid_285_1346233478.067' 
    capture_lex $P552
    .const 'Sub' $P553 = 'cuid_286_1346233478.067' 
    capture_lex $P553
    .const 'Sub' $P554 = 'cuid_287_1346233478.067' 
    capture_lex $P554
    .const 'Sub' $P555 = 'cuid_288_1346233478.067' 
    capture_lex $P555
    .const 'Sub' $P556 = 'cuid_289_1346233478.067' 
    capture_lex $P556
    .const 'Sub' $P557 = 'cuid_290_1346233478.067' 
    capture_lex $P557
    .const 'Sub' $P558 = 'cuid_291_1346233478.067' 
    capture_lex $P558
    .const 'Sub' $P559 = 'cuid_292_1346233478.067' 
    capture_lex $P559
    .const 'Sub' $P560 = 'cuid_293_1346233478.067' 
    capture_lex $P560
    .const 'Sub' $P561 = 'cuid_294_1346233478.067' 
    capture_lex $P561
    .const 'Sub' $P562 = 'cuid_295_1346233478.067' 
    capture_lex $P562
    .const 'Sub' $P563 = 'cuid_296_1346233478.067' 
    capture_lex $P563
    .const 'Sub' $P564 = 'cuid_297_1346233478.067' 
    capture_lex $P564
    .const 'Sub' $P565 = 'cuid_298_1346233478.067' 
    capture_lex $P565
    .const 'Sub' $P566 = 'cuid_299_1346233478.067' 
    capture_lex $P566
    .const 'Sub' $P567 = 'cuid_300_1346233478.067' 
    capture_lex $P567
    .const 'Sub' $P568 = 'cuid_301_1346233478.067' 
    capture_lex $P568
    .const 'Sub' $P569 = 'cuid_302_1346233478.067' 
    capture_lex $P569
    .const 'Sub' $P570 = 'cuid_303_1346233478.067' 
    capture_lex $P570
    .const 'Sub' $P571 = 'cuid_304_1346233478.067' 
    capture_lex $P571
    .const 'Sub' $P572 = 'cuid_305_1346233478.067' 
    capture_lex $P572
    .const 'Sub' $P573 = 'cuid_306_1346233478.067' 
    capture_lex $P573
    .const 'Sub' $P574 = 'cuid_307_1346233478.067' 
    capture_lex $P574
    .const 'Sub' $P575 = 'cuid_308_1346233478.067' 
    capture_lex $P575
    .const 'Sub' $P576 = 'cuid_309_1346233478.067' 
    capture_lex $P576
    .const 'Sub' $P577 = 'cuid_310_1346233478.067' 
    capture_lex $P577
    .const 'Sub' $P578 = 'cuid_311_1346233478.067' 
    capture_lex $P578
    .const 'Sub' $P579 = 'cuid_312_1346233478.067' 
    capture_lex $P579
    .const 'Sub' $P580 = 'cuid_313_1346233478.067' 
    capture_lex $P580
    .const 'Sub' $P581 = 'cuid_314_1346233478.067' 
    capture_lex $P581
    .const 'Sub' $P582 = 'cuid_315_1346233478.067' 
    capture_lex $P582
    .const 'Sub' $P583 = 'cuid_316_1346233478.067' 
    capture_lex $P583
    .const 'Sub' $P584 = 'cuid_317_1346233478.067' 
    capture_lex $P584
    .const 'Sub' $P585 = 'cuid_318_1346233478.067' 
    capture_lex $P585
    .const 'Sub' $P586 = 'cuid_319_1346233478.067' 
    capture_lex $P586
    .const 'Sub' $P587 = 'cuid_320_1346233478.067' 
    capture_lex $P587
    .const 'Sub' $P588 = 'cuid_321_1346233478.067' 
    capture_lex $P588
    .const 'Sub' $P589 = 'cuid_322_1346233478.067' 
    capture_lex $P589
    .const 'Sub' $P590 = 'cuid_323_1346233478.067' 
    capture_lex $P590
    .const 'Sub' $P591 = 'cuid_324_1346233478.067' 
    capture_lex $P591
    .const 'Sub' $P592 = 'cuid_325_1346233478.067' 
    capture_lex $P592
    .const 'Sub' $P593 = 'cuid_326_1346233478.067' 
    capture_lex $P593
    .const 'Sub' $P594 = 'cuid_327_1346233478.067' 
    capture_lex $P594
    .const 'Sub' $P595 = 'cuid_328_1346233478.067' 
    capture_lex $P595
    .const 'Sub' $P596 = 'cuid_329_1346233478.067' 
    capture_lex $P596
    .const 'Sub' $P597 = 'cuid_330_1346233478.067' 
    capture_lex $P597
    .const 'Sub' $P598 = 'cuid_331_1346233478.067' 
    capture_lex $P598
    .const 'Sub' $P599 = 'cuid_332_1346233478.067' 
    capture_lex $P599
    .const 'Sub' $P600 = 'cuid_333_1346233478.067' 
    capture_lex $P600
    .const 'Sub' $P601 = 'cuid_334_1346233478.067' 
    capture_lex $P601
    .const 'Sub' $P602 = 'cuid_335_1346233478.067' 
    capture_lex $P602
    .const 'Sub' $P603 = 'cuid_336_1346233478.067' 
    capture_lex $P603
    .const 'Sub' $P604 = 'cuid_337_1346233478.067' 
    capture_lex $P604
    .const 'Sub' $P605 = 'cuid_338_1346233478.067' 
    capture_lex $P605
    .const 'Sub' $P606 = 'cuid_339_1346233478.067' 
    capture_lex $P606
    .const 'Sub' $P607 = 'cuid_340_1346233478.067' 
    capture_lex $P607
    .const 'Sub' $P608 = 'cuid_341_1346233478.067' 
    capture_lex $P608
    .const 'Sub' $P609 = 'cuid_342_1346233478.067' 
    capture_lex $P609
    .const 'Sub' $P610 = 'cuid_343_1346233478.067' 
    capture_lex $P610
    .const 'Sub' $P611 = 'cuid_344_1346233478.067' 
    capture_lex $P611
    .const 'Sub' $P612 = 'cuid_345_1346233478.067' 
    capture_lex $P612
    .const 'Sub' $P613 = 'cuid_346_1346233478.067' 
    capture_lex $P613
    .const 'Sub' $P614 = 'cuid_347_1346233478.067' 
    capture_lex $P614
    .const 'Sub' $P615 = 'cuid_348_1346233478.067' 
    capture_lex $P615
    .const 'Sub' $P616 = 'cuid_349_1346233478.067' 
    capture_lex $P616
    .const 'Sub' $P617 = 'cuid_350_1346233478.067' 
    capture_lex $P617
    .const 'Sub' $P618 = 'cuid_351_1346233478.067' 
    capture_lex $P618
    .const 'Sub' $P619 = 'cuid_352_1346233478.067' 
    capture_lex $P619
    .const 'Sub' $P620 = 'cuid_353_1346233478.067' 
    capture_lex $P620
    .const 'Sub' $P621 = 'cuid_354_1346233478.067' 
    capture_lex $P621
    .const 'Sub' $P622 = 'cuid_355_1346233478.067' 
    capture_lex $P622
    .const 'Sub' $P623 = 'cuid_356_1346233478.067' 
    capture_lex $P623
    .const 'Sub' $P624 = 'cuid_357_1346233478.067' 
    capture_lex $P624
    .const 'Sub' $P625 = 'cuid_358_1346233478.067' 
    capture_lex $P625
    .const 'Sub' $P626 = 'cuid_359_1346233478.067' 
    capture_lex $P626
    .return ($P110) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_407_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1480
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1481
    set $P501, _lex_param_0[1]
    unless_null $P501, fallback3600
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback3600:
    $P503 = "&block_immediate"($P501)
    set _lex_param_0[1], $P503
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_410_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1485
    .param pmc _lex_param_0 
    .const 'Sub' $P506 = 'cuid_409_1346233478.067' 
    capture_lex $P506 
    .lex "$block", _lex_param_0 
.annotate 'line', 1486
    $P501 = _lex_param_0."blocktype"("immediate")
.annotate 'line', 1487
    $P502 = _lex_param_0."symtable"()
    set $P505, $P502
    if $P502 goto unless1255_end3602 
    .const 'Sub' $P503 = 'cuid_409_1346233478.067' 
    capture_lex $P503
    $P504 = $P503()
    set $P505, $P504
  unless1255_end3602:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1346233478.067") :anon :lex :outer("cuid_410_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1487
    .const 'Sub' $P518 = 'cuid_408_1346233478.067' 
    capture_lex $P518 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1488
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["Stmts"]
    unless_null $P502, fallback3603
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback3603:
    find_lex $P507, "$block"
    $P508 = $P507."node"()
    $P509 = $P502."new"($P508 :named("node"))
    set $P101, $P509
.annotate 'line', 1489
    find_lex $P513, "$block"
    $P514 = $P513."list"()
    set $P510, $P514
    iter $P512, $P514
    new $P516, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P516, for_handlers3604
    push_eh $P516
  for_next3605:
    unless $P512, for_done3607
    shift $P517, $P512
  for_redo3606:
    .const 'Sub' $P515 = 'cuid_408_1346233478.067' 
    capture_lex $P515
    $P510 = $P515($P517)
    goto for_next3605
  for_handlers3604:
    .get_results ($P516)
    pop_upto_eh $P516
    getattribute $P516, $P516, 'type'
    eq $P516, .CONTROL_LOOP_NEXT, for_next3605
    eq $P516, .CONTROL_LOOP_REDO, for_redo3606
  for_done3607:
    pop_eh 
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1346233478.067") :anon :lex :outer("cuid_409_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1489
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P501, "$stmts"
    $P502 = $P501."push"(_lex_param_0)
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_413_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1495
    .param pmc _lex_param_0 
    .const 'Sub' $P517 = 'cuid_412_1346233478.067' 
    capture_lex $P517 
    .lex "$sigil", _lex_param_0 
    set $S501, _lex_param_0
    iseq $I501, $S501, "@"
    unless $I501 goto if1256_else3608 
.annotate 'line', 1496
.annotate 'line', 1497
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback3610
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3610:
    $P506 = $P501."new"("list" :named("op"))
    set $P516, $P506
    goto if1256_end3609
  if1256_else3608:
    set $S502, _lex_param_0
    iseq $I502, $S502, "%"
    unless $I502 goto if1257_else3611 
.annotate 'line', 1499
.annotate 'line', 1500
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["Op"]
    unless_null $P507, fallback3613
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback3613:
    $P512 = $P507."new"("hash" :named("op"))
    set $P515, $P512
    goto if1257_end3612
  if1257_else3611:
    .const 'Sub' $P513 = 'cuid_412_1346233478.067' 
    capture_lex $P513
    $P514 = $P513()
    set $P515, $P514
  if1257_end3612:
    set $P516, $P515
  if1256_end3609:
    .return ($P516) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1346233478.067") :anon :lex :outer("cuid_413_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1502
    .const 'Sub' $P522 = 'cuid_411_1346233478.067' 
    capture_lex $P522 
    .lex "$default", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    new $P520, 'ExceptionHandler'
    set_label $P520, catch_handler_12623622
    $P520.'handle_types_except'(.CONTROL_ALL)
    push_eh $P520
.annotate 'line', 1504
    new $P518, 'ExceptionHandler'
    set_label $P518, catch_handler_12603619
    $P518.'handle_types_except'(.CONTROL_ALL)
    push_eh $P518
.annotate 'line', 1505
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["WVal"]
    unless_null $P502, fallback3614
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback3614:
    find_dynamic_lex $P507, "$*W"
    unless_null $P507, fallback3615
    get_hll_global $P510, "GLOBAL"
    get_who $P509, $P510
    set $P508, $P509["$W"]
    unless_null $P508, fallback3616
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P511
  fallback3616:
    unless_null $P508, vivi_12583617
    die "Contextual $*W not found"
    box $P512, "Contextual $*W not found"
    set $P508, $P512
  vivi_12583617:
    set $P507, $P508
  fallback3615:
    new $P513, 'ResizablePMCArray'
    box $P514, "NQPMu"
    push $P513, $P514
    $P515 = $P507."find_sym"($P513)
    $P516 = $P502."new"($P515 :named("value"))
    set $P101, $P516
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P517
    pop_eh 
    goto skip_handler_12593618
  catch_handler_12603619:
    .get_results ($P518) 
    .const 'Sub' $P10001 = 'cuid_411_1346233478.067' 
    capture_lex $P10001
    $P10002 = $P10001($P518)
    set $I10001, 1
    set $P518["handled"], $I10001
    nqp_get_sc_object $P10003, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P518
    pop_upto_eh $P518
    pop_eh 
    set $P519, $P10003
    goto skip_handler_12593618
  skip_handler_12593618:
    set $P521, $P519
    pop_eh 
    goto skip_handler_12613621
  catch_handler_12623622:
    .get_results ($P520) 
    set $I10001, 1
    set $P520["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P520
    pop_upto_eh $P520
    pop_eh 
    set $P521, $P10001
    goto skip_handler_12613621
  skip_handler_12613621:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1346233478.067") :anon :lex :outer("cuid_412_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1506
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback3620
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3620:
    $P506 = $P501."new"("null" :named("op"))
    store_lex "$default", $P506
    .return ($P506) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_416_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1522
    .param pmc _lex_param_0 
    .const 'Sub' $P510 = 'cuid_415_1346233478.067' 
    capture_lex $P510 
    .lex "$ast", _lex_param_0 
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback3625
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3625:
    type_check $I501, _lex_param_0, $P501
    unless $I501 goto if1263_else3623 
    .const 'Sub' $P506 = 'cuid_415_1346233478.067' 
    capture_lex $P506
    $P507 = $P506()
    set $P509, $P507
    goto if1263_end3624
  if1263_else3623:
.annotate 'line', 1527
.annotate 'line', 1528
    $P508 = _lex_param_0."value"()
    set $P509, $P508
  if1263_end3624:
    .return ($P509) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1346233478.067") :anon :lex :outer("cuid_416_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1523
    .const 'Sub' $P510 = 'cuid_414_1346233478.067' 
    capture_lex $P510 
    .lex "@parts", $P101 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
.annotate 'line', 1525
    find_lex $P505, "$ast"
    $P506 = $P505."list"()
    set $P502, $P506
    iter $P504, $P506
    new $P508, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P508, for_handlers3626
    push_eh $P508
  for_next3627:
    unless $P504, for_done3629
    shift $P509, $P504
  for_redo3628:
    .const 'Sub' $P507 = 'cuid_414_1346233478.067' 
    capture_lex $P507
    $P502 = $P507($P509)
    goto for_next3627
  for_handlers3626:
    .get_results ($P508)
    pop_upto_eh $P508
    getattribute $P508, $P508, 'type'
    eq $P508, .CONTROL_LOOP_NEXT, for_next3627
    eq $P508, .CONTROL_LOOP_REDO, for_redo3628
  for_done3629:
    pop_eh 
    join $S501, " ", $P101
    .return ($S501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1346233478.067") :anon :lex :outer("cuid_415_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1525
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P501, "@parts"
    $P502 = _lex_param_0."value"()
    $P503 = $P501."push"($P502)
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_418_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1732
    .param pmc _lex_param_0 
    .const 'Sub' $P512 = 'cuid_417_1346233478.067' 
    capture_lex $P512 
    .lex "$UNIT", _lex_param_0 
    exists $I501, _lex_param_0["EXPORTHOW"]
    box $P511, $I501
    set $P510, $P511
    unless $I501 goto if1264_end3631 
.annotate 'line', 1734
    set $P505, _lex_param_0["EXPORTHOW"]
    unless_null $P505, fallback3632
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback3632:
    get_who $P504, $P505
    set $P501, $P504
    iter $P503, $P504
    new $P508, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P508, for_handlers3636
    push_eh $P508
  for_next3637:
    unless $P503, for_done3639
    shift $P509, $P503
  for_redo3638:
    .const 'Sub' $P507 = 'cuid_417_1346233478.067' 
    capture_lex $P507
    $P501 = $P507($P509)
    goto for_next3637
  for_handlers3636:
    .get_results ($P508)
    pop_upto_eh $P508
    getattribute $P508, $P508, 'type'
    eq $P508, .CONTROL_LOOP_NEXT, for_next3637
    eq $P508, .CONTROL_LOOP_REDO, for_redo3638
  for_done3639:
    pop_eh 
    set $P510, $P501
  if1264_end3631:
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1346233478.067") :anon :lex :outer("cuid_418_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1735
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P501, "%*HOW"
    unless_null $P501, fallback3633
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["%HOW"]
    unless_null $P502, fallback3634
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    new $P507, 'Hash'
    set $P505["%HOW"], $P507
    set $P502, $P507
  fallback3634:
    unless_null $P502, vivi_12653635
    die "Contextual %*HOW not found"
    box $P508, "Contextual %*HOW not found"
    set $P502, $P508
  vivi_12653635:
    set $P501, $P502
  fallback3633:
.annotate 'line', 1736
    $P509 = _lex_param_0."key"()
    set $S501, $P509
    $P510 = _lex_param_0."value"()
    set $P501[$S501], $P510
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_419_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1862
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P501, "%*HANDLERS"
    unless_null $P501, fallback3642
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["%HANDLERS"]
    unless_null $P502, fallback3643
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    new $P507, 'Hash'
    set $P505["%HANDLERS"], $P507
    set $P502, $P507
  fallback3643:
    unless_null $P502, vivi_12673644
    die "Contextual %*HANDLERS not found"
    box $P508, "Contextual %*HANDLERS not found"
    set $P502, $P508
  vivi_12673644:
    set $P501, $P502
  fallback3642:
    set $S501, _lex_param_2
    exists $I501, $P501[$S501]
    box $P511, $I501
    set $P510, $P511
    unless $I501 goto if1266_end3641 
.annotate 'line', 1863
    set $S504, _lex_param_2
    concat $S503, "Duplicate ", $S504
    concat $S502, $S503, " handler in block"
    box $P509, $S502
    die $P509
    set $P510, $P509
  if1266_end3641:
.annotate 'line', 1866
    $P512 = _lex_param_1."arity"()
    set $P542, $P512
    if $P512 goto unless1268_end3646 
.annotate 'line', 1867
.annotate 'line', 1868
    get_hll_global $P516, "GLOBAL"
    nqp_get_package_through_who $P515, $P516, "QAST"
    get_who $P514, $P515
    set $P513, $P514["Op"]
    unless_null $P513, fallback3647
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P517
  fallback3647:
.annotate 'line', 1869
    get_hll_global $P521, "GLOBAL"
    nqp_get_package_through_who $P520, $P521, "QAST"
    get_who $P519, $P520
    set $P518, $P519["Var"]
    unless_null $P518, fallback3648
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P522
  fallback3648:
    $P523 = $P518."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1870
    get_hll_global $P527, "GLOBAL"
    nqp_get_package_through_who $P526, $P527, "QAST"
    get_who $P525, $P526
    set $P524, $P525["Var"]
    unless_null $P524, fallback3649
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P528
  fallback3649:
    $P529 = $P524."new"("lexical" :named("scope"), "$_" :named("name"))
    $P530 = $P513."new"($P523, $P529, "bind" :named("op"))
    $P531 = _lex_param_1."unshift"($P530)
.annotate 'line', 1873
    get_hll_global $P535, "GLOBAL"
    nqp_get_package_through_who $P534, $P535, "QAST"
    get_who $P533, $P534
    set $P532, $P533["Var"]
    unless_null $P532, fallback3650
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P532, $P536
  fallback3650:
    $P537 = $P532."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P538 = _lex_param_1."unshift"($P537)
.annotate 'line', 1874
    $P539 = _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1875
    $P540 = _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1876
    $P541 = _lex_param_1."arity"(1)
    set $P542, $P541
  unless1268_end3646:
.annotate 'line', 1878
    $P543 = _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P544, "%*HANDLERS"
    unless_null $P544, fallback3651
    get_hll_global $P547, "GLOBAL"
    get_who $P546, $P547
    set $P545, $P546["%HANDLERS"]
    unless_null $P545, fallback3652
    get_hll_global $P549, "GLOBAL"
    get_who $P548, $P549
    new $P550, 'Hash'
    set $P548["%HANDLERS"], $P550
    set $P545, $P550
  fallback3652:
    unless_null $P545, vivi_12693653
    die "Contextual %*HANDLERS not found"
    box $P551, "Contextual %*HANDLERS not found"
    set $P545, $P551
  vivi_12693653:
    set $P544, $P545
  fallback3651:
    set $S505, _lex_param_2
.annotate 'line', 1879
    get_hll_global $P555, "GLOBAL"
    nqp_get_package_through_who $P554, $P555, "QAST"
    get_who $P553, $P554
    set $P552, $P553["Stmts"]
    unless_null $P552, fallback3654
    nqp_get_sc_object $P556, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P552, $P556
  fallback3654:
.annotate 'line', 1880
    get_hll_global $P560, "GLOBAL"
    nqp_get_package_through_who $P559, $P560, "QAST"
    get_who $P558, $P559
    set $P557, $P558["Op"]
    unless_null $P557, fallback3655
    nqp_get_sc_object $P561, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P557, $P561
  fallback3655:
.annotate 'line', 1882
    get_hll_global $P565, "GLOBAL"
    nqp_get_package_through_who $P564, $P565, "QAST"
    get_who $P563, $P564
    set $P562, $P563["Op"]
    unless_null $P562, fallback3656
    nqp_get_sc_object $P566, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P562, $P566
  fallback3656:
    $P567 = $P562."new"("exception" :named("op"))
    $P568 = $P557."new"(_lex_param_1, $P567, "call" :named("op"))
.annotate 'line', 1884
    get_hll_global $P572, "GLOBAL"
    nqp_get_package_through_who $P571, $P572, "QAST"
    get_who $P570, $P571
    set $P569, $P570["Op"]
    unless_null $P569, fallback3657
    nqp_get_sc_object $P573, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P573
  fallback3657:
.annotate 'line', 1886
    get_hll_global $P577, "GLOBAL"
    nqp_get_package_through_who $P576, $P577, "QAST"
    get_who $P575, $P576
    set $P574, $P575["Op"]
    unless_null $P574, fallback3658
    nqp_get_sc_object $P578, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P574, $P578
  fallback3658:
    $P579 = $P574."new"("exception" :named("op"))
.annotate 'line', 1887
    get_hll_global $P583, "GLOBAL"
    nqp_get_package_through_who $P582, $P583, "QAST"
    get_who $P581, $P582
    set $P580, $P581["SVal"]
    unless_null $P580, fallback3659
    nqp_get_sc_object $P584, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P580, $P584
  fallback3659:
    $P585 = $P580."new"("handled" :named("value"))
.annotate 'line', 1888
    get_hll_global $P589, "GLOBAL"
    nqp_get_package_through_who $P588, $P589, "QAST"
    get_who $P587, $P588
    set $P586, $P587["IVal"]
    unless_null $P586, fallback3660
    nqp_get_sc_object $P590, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P586, $P590
  fallback3660:
    $P591 = $P586."new"(1 :named("value"))
    $P592 = $P569."new"($P579, $P585, $P591, "bindkey_i" :named("op"))
.annotate 'line', 1890
    $P593 = "&default_for"("$")
    $P594 = $P552."new"($P568, $P592, $P593)
    set $P544[$S505], $P594
    .return ($P594) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_420_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2448
    .lex "$past", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2449
    find_dynamic_lex $P502, "$*W"
    unless_null $P502, fallback3661
    get_hll_global $P505, "GLOBAL"
    get_who $P504, $P505
    set $P503, $P504["$W"]
    unless_null $P503, fallback3662
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback3662:
    unless_null $P503, vivi_12703663
    die "Contextual $*W not found"
    box $P507, "Contextual $*W not found"
    set $P503, $P507
  vivi_12703663:
    set $P502, $P503
  fallback3661:
    $P508 = $P502."pop_lexpad"()
    set $P101, $P508
.annotate 'line', 2450
    get_hll_global $P512, "GLOBAL"
    nqp_get_package_through_who $P511, $P512, "QAST"
    get_who $P510, $P511
    set $P509, $P510["Op"]
    unless_null $P509, fallback3664
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P513
  fallback3664:
    $P514 = $P509."new"("nqpmultidispatch" :named("op"))
    $P515 = $P101."push"($P514)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_422_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2454
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P521 = 'cuid_421_1346233478.067' 
    capture_lex $P521 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    new $P503, 'ResizablePMCArray'
    set $P101, $P503
    new $P504, 'ResizablePMCArray'
    set $P102, $P504
    set $P508, _lex_param_1[0]
    unless_null $P508, fallback3665
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P509
  fallback3665:
    $P510 = $P508."list"()
    set $P505, $P510
    iter $P507, $P510
    new $P512, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P512, for_handlers3681
    push_eh $P512
  for_next3682:
    unless $P507, for_done3684
    shift $P513, $P507
  for_redo3683:
    .const 'Sub' $P511 = 'cuid_421_1346233478.067' 
    capture_lex $P511
    $P505 = $P511($P513)
    goto for_next3682
  for_handlers3681:
    .get_results ($P512)
    pop_upto_eh $P512
    getattribute $P512, $P512, 'type'
    eq $P512, .CONTROL_LOOP_NEXT, for_next3682
    eq $P512, .CONTROL_LOOP_REDO, for_redo3683
  for_done3684:
    pop_eh 
.annotate 'line', 2467
    find_dynamic_lex $P514, "$*W"
    unless_null $P514, fallback3685
    get_hll_global $P517, "GLOBAL"
    get_who $P516, $P517
    set $P515, $P516["$W"]
    unless_null $P515, fallback3686
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P518
  fallback3686:
    unless_null $P515, vivi_12773687
    die "Contextual $*W not found"
    box $P519, "Contextual $*W not found"
    set $P515, $P519
  vivi_12773687:
    set $P514, $P515
  fallback3685:
    $P520 = $P514."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P520) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1346233478.067") :anon :lex :outer("cuid_422_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2457
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Var"]
    unless_null $P501, fallback3670
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3670:
    type_check $I501, _lex_param_0, $P501
    set $I503, $I501
    unless $I501 goto if1272_end3669 
.annotate 'line', 2458
    $P506 = _lex_param_0."decl"()
    set $S501, $P506
    iseq $I502, $S501, "param"
    set $I503, $I502
  if1272_end3669:
    box $P522, $I503
    set $P521, $P522
    unless $I503 goto if1271_end3667 
.annotate 'line', 2459
    find_lex $P507, "$types"
    $P508 = _lex_param_0."returns"()
    get_id $I505, $P508
    find_lex $P509, "NQPMu"
    get_id $I506, $P509
    iseq $I504, $I505, $I506
    set $I508, $I504
    if $I504 goto unless1274_end3674 
.annotate 'line', 2460
    $P510 = _lex_param_0."returns"()
    isa $I507, $P510, "Undef"
    set $I508, $I507
  unless1274_end3674:
    unless $I508 goto if1273_else3671 
    null $P511
    set $P513, $P511
    goto if1273_end3672
  if1273_else3671:
.annotate 'line', 2462
    $P512 = _lex_param_0."returns"()
    set $P513, $P512
  if1273_end3672:
    $P514 = $P507."push"($P513)
.annotate 'line', 2463
    find_lex $P515, "$definednesses"
    set $P516, _lex_param_0["definedness"]
    unless_null $P516, fallback3677
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P517
  fallback3677:
    set $S502, $P516
    iseq $I509, $S502, "D"
    unless $I509 goto if1275_else3675 
    set $I512, 1
    goto if1275_end3676
  if1275_else3675:
    set $P518, _lex_param_0["definedness"]
    unless_null $P518, fallback3680
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P519
  fallback3680:
    set $S503, $P518
    iseq $I510, $S503, "U"
    unless $I510 goto if1276_else3678 
    set $I511, 2
    goto if1276_end3679
  if1276_else3678:
    set $I511, 0
  if1276_end3679:
    set $I512, $I511
  if1275_end3676:
    $P520 = $P515."push"($I512)
    set $P521, $P520
  if1271_end3667:
    .return ($P521) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_423_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2470
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2471
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback3688
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3688:
    $P506 = $P501."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P506) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_426_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2956
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P576 = 'cuid_425_1346233478.067' 
    capture_lex $P576 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3689
    .lex "RETURN", $P103
    set $N501, _lex_param_0
    set $N502, 0
    iseq $I501, $N501, $N502
    box $P506, $I501
    set $P505, $P506
    unless $I501 goto if1278_end3692 
.annotate 'line', 2958
    $P503 = _lex_param_1."CURSOR"()
    $P504 = $P503."panic"("Cannot compile empty name")
    set $P505, $P504
  if1278_end3692:
.annotate 'line', 2962
    $P507 = _lex_param_0."pop"()
    set $P101, $P507
.annotate 'line', 2963
    get_hll_global $P511, "GLOBAL"
    nqp_get_package_through_who $P510, $P511, "QAST"
    get_who $P509, $P510
    set $P508, $P509["VarWithFallback"]
    unless_null $P508, fallback3693
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P512
  fallback3693:
.annotate 'line', 2965
    get_hll_global $P516, "GLOBAL"
    nqp_get_package_through_who $P515, $P516, "QAST"
    get_who $P514, $P515
    set $P513, $P514["SVal"]
    unless_null $P513, fallback3694
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P517
  fallback3694:
    set $S501, $P101
    $P518 = $P513."new"($S501 :named("value"))
    $P519 = $P508."new"($P518, "associative" :named("scope"))
    set $P102, $P519
    set $N503, _lex_param_0
    set $N504, 0
    iseq $I502, $N503, $N504
    unless $I502 goto if1279_else3695 
.annotate 'line', 2970
.annotate 'line', 2971
    get_hll_global $P523, "GLOBAL"
    nqp_get_package_through_who $P522, $P523, "QAST"
    get_who $P521, $P522
    set $P520, $P521["Op"]
    unless_null $P520, fallback3697
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P524
  fallback3697:
.annotate 'line', 2973
    get_hll_global $P528, "GLOBAL"
    nqp_get_package_through_who $P527, $P528, "QAST"
    get_who $P526, $P527
    set $P525, $P526["Var"]
    unless_null $P525, fallback3698
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P529
  fallback3698:
    $P530 = $P525."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P531 = $P520."new"($P530, "who" :named("op"))
    $P532 = $P102."unshift"($P531)
.annotate 'line', 2975
    get_hll_global $P536, "GLOBAL"
    nqp_get_package_through_who $P535, $P536, "QAST"
    get_who $P534, $P535
    set $P533, $P534["Op"]
    unless_null $P533, fallback3699
    nqp_get_sc_object $P537, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P537
  fallback3699:
.annotate 'line', 2977
    get_hll_global $P541, "GLOBAL"
    nqp_get_package_through_who $P540, $P541, "QAST"
    get_who $P539, $P540
    set $P538, $P539["Op"]
    unless_null $P538, fallback3700
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P538, $P542
  fallback3700:
.annotate 'line', 2979
    get_hll_global $P546, "GLOBAL"
    nqp_get_package_through_who $P545, $P546, "QAST"
    get_who $P544, $P545
    set $P543, $P544["Op"]
    unless_null $P543, fallback3701
    nqp_get_sc_object $P547, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P543, $P547
  fallback3701:
.annotate 'line', 2981
    get_hll_global $P551, "GLOBAL"
    nqp_get_package_through_who $P550, $P551, "QAST"
    get_who $P549, $P550
    set $P548, $P549["VM"]
    unless_null $P548, fallback3702
    nqp_get_sc_object $P552, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P548, $P552
  fallback3702:
.annotate 'line', 2982
    get_hll_global $P556, "GLOBAL"
    nqp_get_package_through_who $P555, $P556, "QAST"
    get_who $P554, $P555
    set $P553, $P554["SVal"]
    unless_null $P553, fallback3703
    nqp_get_sc_object $P557, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P553, $P557
  fallback3703:
    $P558 = $P553."new"("GLOBAL" :named("value"))
    $P559 = $P548."new"($P558, "get_hll_global Ps" :named("pirop"))
    $P560 = $P543."new"($P559, "who" :named("op"))
.annotate 'line', 2984
    get_hll_global $P564, "GLOBAL"
    nqp_get_package_through_who $P563, $P564, "QAST"
    get_who $P562, $P563
    set $P561, $P562["SVal"]
    unless_null $P561, fallback3704
    nqp_get_sc_object $P565, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P561, $P565
  fallback3704:
    set $S502, $P101
    $P566 = $P561."new"($S502 :named("value"))
    $P567 = $P538."new"($P560, $P566, "atkey" :named("op"))
.annotate 'line', 2986
    set $S504, $P101
    substr $S503, $S504, 0, 1
    $P568 = "&default_for"($S503)
    $P569 = $P533."new"($P567, $P568, "ifnull" :named("op"))
    $P570 = $P102."fallback"($P569)
    set $P573, $P570
    goto if1279_end3696
  if1279_else3695:
    .const 'Sub' $P571 = 'cuid_425_1346233478.067' 
    capture_lex $P571
    $P572 = $P571()
    set $P573, $P572
  if1279_end3696:
    find_lex $P574, "RETURN"
    $P575 = $P574($P102)
    goto lexotic_3690
  lexotic_3689:
    .get_results ($P575)
  lexotic_3690:
    .return ($P575) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1346233478.067") :anon :lex :outer("cuid_426_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2992
    .const 'Sub' $P577 = 'cuid_424_1346233478.067' 
    capture_lex $P577 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 2993
    find_dynamic_lex $P503, "$*W"
    unless_null $P503, fallback3707
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$W"]
    unless_null $P504, fallback3708
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback3708:
    unless_null $P504, vivi_12813709
    die "Contextual $*W not found"
    box $P508, "Contextual $*W not found"
    set $P504, $P508
  vivi_12813709:
    set $P503, $P504
  fallback3707:
    find_lex $P510, "@name"
    set $P509, $P510[0]
    unless_null $P509, fallback3710
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P511
  fallback3710:
    $P512 = $P503."is_lexical"($P509)
    unless $P512 goto if1280_else3705 
.annotate 'line', 2994
    get_hll_global $P516, "GLOBAL"
    nqp_get_package_through_who $P515, $P516, "QAST"
    get_who $P514, $P515
    set $P513, $P514["Var"]
    unless_null $P513, fallback3711
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P517
  fallback3711:
    find_lex $P518, "@name"
    $P519 = $P518."shift"()
    $P520 = $P513."new"($P519 :named("name"), "lexical" :named("scope"))
    set $P533, $P520
    goto if1280_end3706
  if1280_else3705:
.annotate 'line', 2995
    get_hll_global $P524, "GLOBAL"
    nqp_get_package_through_who $P523, $P524, "QAST"
    get_who $P522, $P523
    set $P521, $P522["VM"]
    unless_null $P521, fallback3712
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P525
  fallback3712:
.annotate 'line', 2996
    get_hll_global $P529, "GLOBAL"
    nqp_get_package_through_who $P528, $P529, "QAST"
    get_who $P527, $P528
    set $P526, $P527["SVal"]
    unless_null $P526, fallback3713
    nqp_get_sc_object $P530, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P530
  fallback3713:
    $P531 = $P526."new"("GLOBAL" :named("value"))
    $P532 = $P521."new"($P531, "get_hll_global Ps" :named("pirop"))
    set $P533, $P532
  if1280_end3706:
    set $P101, $P533
    find_lex $P535, "@name"
    set $P534, $P535[0]
    unless_null $P534, fallback3716
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P534, $P536
  fallback3716:
    set $S501, $P534
    iseq $I501, $S501, "GLOBAL"
    box $P540, $I501
    set $P539, $P540
    unless $I501 goto if1282_end3715 
.annotate 'line', 2997
.annotate 'line', 2998
    find_lex $P537, "@name"
    $P538 = $P537."shift"()
    set $P539, $P538
  if1282_end3715:
    find_lex $P544, "@name"
    set $P541, $P544
    iter $P543, $P544
    new $P546, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P546, for_handlers3719
    push_eh $P546
  for_next3720:
    unless $P543, for_done3722
    shift $P547, $P543
  for_redo3721:
    .const 'Sub' $P545 = 'cuid_424_1346233478.067' 
    capture_lex $P545
    $P541 = $P545($P547)
    goto for_next3720
  for_handlers3719:
    .get_results ($P546)
    pop_upto_eh $P546
    getattribute $P546, $P546, 'type'
    eq $P546, .CONTROL_LOOP_NEXT, for_next3720
    eq $P546, .CONTROL_LOOP_REDO, for_redo3721
  for_done3722:
    pop_eh 
.annotate 'line', 3005
    find_lex $P548, "$lookup"
    get_hll_global $P552, "GLOBAL"
    nqp_get_package_through_who $P551, $P552, "QAST"
    get_who $P550, $P551
    set $P549, $P550["Op"]
    unless_null $P549, fallback3723
    nqp_get_sc_object $P553, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P553
  fallback3723:
    $P554 = $P549."new"($P101, "who" :named("op"))
    $P555 = $P548."unshift"($P554)
    find_lex $P556, "$final_name"
    set $S503, $P556
    substr $S502, $S503, 0, 1
    box $P557, $S502
    set $P102, $P557
    set $S504, $P102
    iseq $I502, $S504, "@"
    set $I504, $I502
    if $I502 goto unless1284_end3727 
    set $S505, $P102
    iseq $I503, $S505, "%"
    set $I504, $I503
  unless1284_end3727:
    unless $I504 goto if1283_else3724 
.annotate 'line', 3007
.annotate 'line', 3008
    find_lex $P558, "$lookup"
    get_hll_global $P562, "GLOBAL"
    nqp_get_package_through_who $P561, $P562, "QAST"
    get_who $P560, $P561
    set $P559, $P560["Op"]
    unless_null $P559, fallback3728
    nqp_get_sc_object $P563, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P559, $P563
  fallback3728:
    find_lex $P565, "$lookup"
    set $P564, $P565[0]
    unless_null $P564, fallback3729
    nqp_get_sc_object $P566, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P564, $P566
  fallback3729:
    find_lex $P568, "$lookup"
    set $P567, $P568[1]
    unless_null $P567, fallback3730
    nqp_get_sc_object $P569, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P567, $P569
  fallback3730:
.annotate 'line', 3012
    $P570 = "&default_for"($P102)
    $P571 = $P559."new"($P564, $P567, $P570, "bindkey" :named("op"))
    $P572 = $P558."fallback"($P571)
    set $P576, $P572
    goto if1283_end3725
  if1283_else3724:
.annotate 'line', 3015
.annotate 'line', 3016
    find_lex $P573, "$lookup"
    $P574 = "&default_for"($P102)
    $P575 = $P573."fallback"($P574)
    set $P576, $P575
  if1283_end3725:
    .return ($P576) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1346233478.067") :anon :lex :outer("cuid_425_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3000
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3001
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["VM"]
    unless_null $P501, fallback3717
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3717:
    find_lex $P506, "$path"
.annotate 'line', 3003
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["SVal"]
    unless_null $P507, fallback3718
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback3718:
    set $S501, _lex_param_0
    $P512 = $P507."new"($S501 :named("value"))
    $P513 = $P501."new"($P506, $P512, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P513
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_244_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1512
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["comp_unit"]
    unless_null $P501, fallback3731
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback3731:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_245_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1514
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1515
    set $P501, _lex_param_1["colonpair"]
    unless_null $P501, fallback3734
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback3734:
    unless $P501 goto if1285_else3732 
    set $P503, _lex_param_1["identifier"]
    unless_null $P503, fallback3735
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback3735:
    set $S506, $P503
    concat $S505, $S506, ":"
.annotate 'line', 1516
    set $P506, _lex_param_1["colonpair"]
    unless_null $P506, fallback3736
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback3736:
    set $P505, $P506[0]
    unless_null $P505, fallback3737
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P508
  fallback3737:
    $P509 = $P505."ast"()
    $P510 = $P509."named"()
    set $S507, $P510
    concat $S504, $S505, $S507
    concat $S503, $S504, "<"
.annotate 'line', 1517
    set $P512, _lex_param_1["colonpair"]
    unless_null $P512, fallback3738
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P513
  fallback3738:
    set $P511, $P512[0]
    unless_null $P511, fallback3739
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P514
  fallback3739:
    $P515 = $P511."ast"()
    $P516 = "&colonpair_str"($P515)
    set $S508, $P516
    concat $S502, $S503, $S508
    concat $S501, $S502, ">"
    set $S510, $S501
    goto if1285_end3733
  if1285_else3732:
    set $S509, _lex_param_1
    set $S510, $S509
  if1285_end3733:
    $P517 = _lex_param_1."!make"($S510)
    .return ($P517) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_246_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1532
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$global_install", $P103 
    .lex "$main_tasks", $P104 
    .lex "$compunit", $P105 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P105, $P505
.annotate 'line', 1533
    set $P506, _lex_param_1["statementlist"]
    unless_null $P506, fallback3740
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback3740:
    $P508 = $P506."ast"()
    set $P101, $P508
.annotate 'line', 1534
    find_dynamic_lex $P509, "$*W"
    unless_null $P509, fallback3741
    get_hll_global $P512, "GLOBAL"
    get_who $P511, $P512
    set $P510, $P511["$W"]
    unless_null $P510, fallback3742
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P513
  fallback3742:
    unless_null $P510, vivi_12863743
    die "Contextual $*W not found"
    box $P514, "Contextual $*W not found"
    set $P510, $P514
  vivi_12863743:
    set $P509, $P510
  fallback3741:
    $P515 = $P509."pop_lexpad"()
    set $P102, $P515
.annotate 'line', 1539
    get_hll_global $P519, "GLOBAL"
    nqp_get_package_through_who $P518, $P519, "QAST"
    get_who $P517, $P518
    set $P516, $P517["VM"]
    unless_null $P516, fallback3744
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P520
  fallback3744:
.annotate 'line', 1541
    get_hll_global $P524, "GLOBAL"
    nqp_get_package_through_who $P523, $P524, "QAST"
    get_who $P522, $P523
    set $P521, $P522["SVal"]
    unless_null $P521, fallback3745
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P525
  fallback3745:
    $P526 = $P521."new"("GLOBAL" :named("value"))
.annotate 'line', 1542
    get_hll_global $P530, "GLOBAL"
    nqp_get_package_through_who $P529, $P530, "QAST"
    get_who $P528, $P529
    set $P527, $P528["WVal"]
    unless_null $P527, fallback3746
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P527, $P531
  fallback3746:
    find_dynamic_lex $P532, "$*PACKAGE"
    unless_null $P532, fallback3747
    get_hll_global $P535, "GLOBAL"
    get_who $P534, $P535
    set $P533, $P534["$PACKAGE"]
    unless_null $P533, fallback3748
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P536
  fallback3748:
    unless_null $P533, vivi_12873749
    die "Contextual $*PACKAGE not found"
    box $P537, "Contextual $*PACKAGE not found"
    set $P533, $P537
  vivi_12873749:
    set $P532, $P533
  fallback3747:
    $P538 = $P527."new"($P532 :named("value"))
    $P539 = $P516."new"($P526, $P538, "set_hll_global vsP" :named("pirop"))
    set $P103, $P539
.annotate 'line', 1544
    find_dynamic_lex $P540, "$*W"
    unless_null $P540, fallback3750
    get_hll_global $P543, "GLOBAL"
    get_who $P542, $P543
    set $P541, $P542["$W"]
    unless_null $P541, fallback3751
    nqp_get_sc_object $P544, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P544
  fallback3751:
    unless_null $P541, vivi_12883752
    die "Contextual $*W not found"
    box $P545, "Contextual $*W not found"
    set $P541, $P545
  vivi_12883752:
    set $P540, $P541
  fallback3750:
    $P546 = $P540."add_fixup_task"($P103 :named("deserialize_past"), $P103 :named("fixup_past"))
    find_dynamic_lex $P547, "$*HAS_YOU_ARE_HERE"
    unless_null $P547, fallback3755
    get_hll_global $P550, "GLOBAL"
    get_who $P549, $P550
    set $P548, $P549["$HAS_YOU_ARE_HERE"]
    unless_null $P548, fallback3756
    nqp_get_sc_object $P551, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P548, $P551
  fallback3756:
    unless_null $P548, vivi_12903757
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P552, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P548, $P552
  vivi_12903757:
    set $P547, $P548
  fallback3755:
    set $P556, $P547
    if $P547 goto unless1289_end3754 
.annotate 'line', 1549
.annotate 'line', 1550
    nqp_decontainerize $P553, _lex_param_0
    $P554 = $P553."CTXSAVE"()
    $P555 = $P102."push"($P554)
    set $P556, $P555
  unless1289_end3754:
.annotate 'line', 1557
    get_hll_global $P560, "GLOBAL"
    nqp_get_package_through_who $P559, $P560, "QAST"
    get_who $P558, $P559
    set $P557, $P558["Var"]
    unless_null $P557, fallback3758
    nqp_get_sc_object $P561, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P557, $P561
  fallback3758:
    $P562 = $P557."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P563 = $P102."unshift"($P562)
.annotate 'line', 1558
    get_hll_global $P567, "GLOBAL"
    nqp_get_package_through_who $P566, $P567, "QAST"
    get_who $P565, $P566
    set $P564, $P565["Stmts"]
    unless_null $P564, fallback3759
    nqp_get_sc_object $P568, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P564, $P568
  fallback3759:
.annotate 'line', 1559
    get_hll_global $P572, "GLOBAL"
    nqp_get_package_through_who $P571, $P572, "QAST"
    get_who $P570, $P571
    set $P569, $P570["VM"]
    unless_null $P569, fallback3760
    nqp_get_sc_object $P573, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P573
  fallback3760:
.annotate 'line', 1561
    get_hll_global $P577, "GLOBAL"
    nqp_get_package_through_who $P576, $P577, "QAST"
    get_who $P575, $P576
    set $P574, $P575["SVal"]
    unless_null $P574, fallback3761
    nqp_get_sc_object $P578, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P574, $P578
  fallback3761:
    $P579 = $P574."new"("ModuleLoader.pbc" :named("value"))
    $P580 = $P569."new"($P579, "load_bytecode vs" :named("pirop"))
.annotate 'line', 1563
    get_hll_global $P584, "GLOBAL"
    nqp_get_package_through_who $P583, $P584, "QAST"
    get_who $P582, $P583
    set $P581, $P582["Op"]
    unless_null $P581, fallback3762
    nqp_get_sc_object $P585, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P581, $P585
  fallback3762:
.annotate 'line', 1565
    get_hll_global $P589, "GLOBAL"
    nqp_get_package_through_who $P588, $P589, "QAST"
    get_who $P587, $P588
    set $P586, $P587["VM"]
    unless_null $P586, fallback3763
    nqp_get_sc_object $P590, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P586, $P590
  fallback3763:
.annotate 'line', 1567
    get_hll_global $P594, "GLOBAL"
    nqp_get_package_through_who $P593, $P594, "QAST"
    get_who $P592, $P593
    set $P591, $P592["SVal"]
    unless_null $P591, fallback3764
    nqp_get_sc_object $P595, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P591, $P595
  fallback3764:
    $P596 = $P591."new"("ModuleLoader" :named("value"))
    $P597 = $P586."new"($P596, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 1569
    get_hll_global $P601, "GLOBAL"
    nqp_get_package_through_who $P600, $P601, "QAST"
    get_who $P599, $P600
    set $P598, $P599["Op"]
    unless_null $P598, fallback3765
    nqp_get_sc_object $P602, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P598, $P602
  fallback3765:
.annotate 'line', 1571
    get_hll_global $P606, "GLOBAL"
    nqp_get_package_through_who $P605, $P606, "QAST"
    get_who $P604, $P605
    set $P603, $P604["VM"]
    unless_null $P603, fallback3766
    nqp_get_sc_object $P607, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P603, $P607
  fallback3766:
    $P608 = $P603."new"("getinterp P" :named("pirop"))
.annotate 'line', 1572
    get_hll_global $P612, "GLOBAL"
    nqp_get_package_through_who $P611, $P612, "QAST"
    get_who $P610, $P611
    set $P609, $P610["SVal"]
    unless_null $P609, fallback3767
    nqp_get_sc_object $P613, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P609, $P613
  fallback3767:
    $P614 = $P609."new"("context" :named("value"))
    $P615 = $P598."new"($P608, $P614, "atkey" :named("op"))
    $P616 = $P581."new"($P597, $P615, "callmethod" :named("op"), "set_mainline_module" :named("name"))
    $P617 = $P564."new"($P580, $P616)
    set $P104, $P617
    find_dynamic_lex $P618, "$*MAIN_SUB"
    unless_null $P618, fallback3770
    get_hll_global $P621, "GLOBAL"
    get_who $P620, $P621
    set $P619, $P620["$MAIN_SUB"]
    unless_null $P619, fallback3771
    nqp_get_sc_object $P622, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P619, $P622
  fallback3771:
    unless_null $P619, vivi_12923772
    die "Contextual $*MAIN_SUB not found"
    box $P623, "Contextual $*MAIN_SUB not found"
    set $P619, $P623
  vivi_12923772:
    set $P618, $P619
  fallback3770:
    set $P649, $P618
    unless $P618 goto if1291_end3769 
.annotate 'line', 1576
.annotate 'line', 1577
    get_hll_global $P627, "GLOBAL"
    nqp_get_package_through_who $P626, $P627, "QAST"
    get_who $P625, $P626
    set $P624, $P625["Op"]
    unless_null $P624, fallback3773
    nqp_get_sc_object $P628, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P624, $P628
  fallback3773:
.annotate 'line', 1578
    get_hll_global $P632, "GLOBAL"
    nqp_get_package_through_who $P631, $P632, "QAST"
    get_who $P630, $P631
    set $P629, $P630["BVal"]
    unless_null $P629, fallback3774
    nqp_get_sc_object $P633, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P629, $P633
  fallback3774:
    find_dynamic_lex $P634, "$*MAIN_SUB"
    unless_null $P634, fallback3775
    get_hll_global $P637, "GLOBAL"
    get_who $P636, $P637
    set $P635, $P636["$MAIN_SUB"]
    unless_null $P635, fallback3776
    nqp_get_sc_object $P638, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P635, $P638
  fallback3776:
    unless_null $P635, vivi_12933777
    die "Contextual $*MAIN_SUB not found"
    box $P639, "Contextual $*MAIN_SUB not found"
    set $P635, $P639
  vivi_12933777:
    set $P634, $P635
  fallback3775:
    $P640 = $P629."new"($P634 :named("value"))
.annotate 'line', 1579
    get_hll_global $P644, "GLOBAL"
    nqp_get_package_through_who $P643, $P644, "QAST"
    get_who $P642, $P643
    set $P641, $P642["Var"]
    unless_null $P641, fallback3778
    nqp_get_sc_object $P645, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P641, $P645
  fallback3778:
    $P646 = $P641."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P647 = $P624."new"($P640, $P646, "call" :named("op"))
    $P648 = $P104."push"($P647)
    set $P649, $P648
  if1291_end3769:
.annotate 'line', 1582
    get_hll_global $P653, "GLOBAL"
    nqp_get_package_through_who $P652, $P653, "QAST"
    get_who $P651, $P652
    set $P650, $P651["Op"]
    unless_null $P650, fallback3779
    nqp_get_sc_object $P654, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P650, $P654
  fallback3779:
.annotate 'line', 1584
    get_hll_global $P658, "GLOBAL"
    nqp_get_package_through_who $P657, $P658, "QAST"
    get_who $P656, $P657
    set $P655, $P656["Var"]
    unless_null $P655, fallback3780
    nqp_get_sc_object $P659, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P655, $P659
  fallback3780:
    $P660 = $P655."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    $P661 = $P650."new"($P660, $P104, "if" :named("op"))
    $P662 = $P101."push"($P661)
.annotate 'line', 1589
    $P663 = $P102."push"($P101)
.annotate 'line', 1592
    find_dynamic_lex $P664, "$*W"
    unless_null $P664, fallback3781
    get_hll_global $P667, "GLOBAL"
    get_who $P666, $P667
    set $P665, $P666["$W"]
    unless_null $P665, fallback3782
    nqp_get_sc_object $P668, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P665, $P668
  fallback3782:
    unless_null $P665, vivi_12943783
    die "Contextual $*W not found"
    box $P669, "Contextual $*W not found"
    set $P665, $P669
  vivi_12943783:
    set $P664, $P665
  fallback3781:
    $P670 = $P664."add_libs"($P102)
.annotate 'line', 1595
    get_hll_global $P674, "GLOBAL"
    nqp_get_package_through_who $P673, $P674, "QAST"
    get_who $P672, $P673
    set $P671, $P672["CompUnit"]
    unless_null $P671, fallback3784
    nqp_get_sc_object $P675, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P671, $P675
  fallback3784:
.annotate 'line', 1599
    find_dynamic_lex $P676, "$*W"
    unless_null $P676, fallback3785
    get_hll_global $P679, "GLOBAL"
    get_who $P678, $P679
    set $P677, $P678["$W"]
    unless_null $P677, fallback3786
    nqp_get_sc_object $P680, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P677, $P680
  fallback3786:
    unless_null $P677, vivi_12953787
    die "Contextual $*W not found"
    box $P681, "Contextual $*W not found"
    set $P677, $P681
  vivi_12953787:
    set $P676, $P677
  fallback3785:
    $P682 = $P676."sc"()
.annotate 'line', 1600
    find_dynamic_lex $P683, "$*W"
    unless_null $P683, fallback3788
    get_hll_global $P686, "GLOBAL"
    get_who $P685, $P686
    set $P684, $P685["$W"]
    unless_null $P684, fallback3789
    nqp_get_sc_object $P687, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P684, $P687
  fallback3789:
    unless_null $P684, vivi_12963790
    die "Contextual $*W not found"
    box $P688, "Contextual $*W not found"
    set $P684, $P688
  vivi_12963790:
    set $P683, $P684
  fallback3788:
    $P689 = $P683."code_ref_blocks"()
.annotate 'line', 1601
    find_dynamic_lex $P690, "$*W"
    unless_null $P690, fallback3791
    get_hll_global $P693, "GLOBAL"
    get_who $P692, $P693
    set $P691, $P692["$W"]
    unless_null $P691, fallback3792
    nqp_get_sc_object $P694, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P691, $P694
  fallback3792:
    unless_null $P691, vivi_12973793
    die "Contextual $*W not found"
    box $P695, "Contextual $*W not found"
    set $P691, $P695
  vivi_12973793:
    set $P690, $P691
  fallback3791:
    $P696 = $P690."is_precompilation_mode"()
.annotate 'line', 1602
    find_dynamic_lex $P697, "$*W"
    unless_null $P697, fallback3794
    get_hll_global $P700, "GLOBAL"
    get_who $P699, $P700
    set $P698, $P699["$W"]
    unless_null $P698, fallback3795
    nqp_get_sc_object $P701, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P698, $P701
  fallback3795:
    unless_null $P698, vivi_12983796
    die "Contextual $*W not found"
    box $P702, "Contextual $*W not found"
    set $P698, $P702
  vivi_12983796:
    set $P697, $P698
  fallback3794:
    $P703 = $P697."load_dependency_tasks"()
.annotate 'line', 1603
    find_dynamic_lex $P704, "$*W"
    unless_null $P704, fallback3797
    get_hll_global $P707, "GLOBAL"
    get_who $P706, $P707
    set $P705, $P706["$W"]
    unless_null $P705, fallback3798
    nqp_get_sc_object $P708, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P705, $P708
  fallback3798:
    unless_null $P705, vivi_12993799
    die "Contextual $*W not found"
    box $P709, "Contextual $*W not found"
    set $P705, $P709
  vivi_12993799:
    set $P704, $P705
  fallback3797:
    $P710 = $P704."fixup_tasks"()
.annotate 'line', 1608
    get_hll_global $P714, "GLOBAL"
    nqp_get_package_through_who $P713, $P714, "QAST"
    get_who $P712, $P713
    set $P711, $P712["Op"]
    unless_null $P711, fallback3800
    nqp_get_sc_object $P715, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P711, $P715
  fallback3800:
.annotate 'line', 1610
    get_hll_global $P719, "GLOBAL"
    nqp_get_package_through_who $P718, $P719, "QAST"
    get_who $P717, $P718
    set $P716, $P717["BVal"]
    unless_null $P716, fallback3801
    nqp_get_sc_object $P720, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P716, $P720
  fallback3801:
    $P721 = $P716."new"($P102 :named("value"))
    $P722 = $P711."new"($P721, "call" :named("op"))
    $P723 = $P671."new"($P102, "nqp" :named("hll"), $P682 :named("sc"), $P689 :named("code_ref_blocks"), $P696 :named("compilation_mode"), $P703 :named("pre_deserialize"), $P710 :named("post_deserialize"), $P722 :named("load"))
    set $P105, $P723
.annotate 'line', 1618
    $P724 = _lex_param_1."!make"($P105)
    .return ($P724) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_247_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1621
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P522 = 'cuid_427_1346233478.067' 
    capture_lex $P522 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1622
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["Stmts"]
    unless_null $P502, fallback3802
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback3802:
    $P507 = $P502."new"(_lex_param_1 :named("node"))
    set $P101, $P507
    set $P508, _lex_param_1["statement"]
    unless_null $P508, fallback3805
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P509
  fallback3805:
    unless $P508 goto if1300_else3803 
.annotate 'line', 1623
    set $P513, _lex_param_1["statement"]
    unless_null $P513, fallback3806
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P514
  fallback3806:
    set $P510, $P513
    iter $P512, $P513
    new $P516, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P516, for_handlers3819
    push_eh $P516
  for_next3820:
    unless $P512, for_done3822
    shift $P517, $P512
  for_redo3821:
    .const 'Sub' $P515 = 'cuid_427_1346233478.067' 
    capture_lex $P515
    $P510 = $P515($P517)
    goto for_next3820
  for_handlers3819:
    .get_results ($P516)
    pop_upto_eh $P516
    getattribute $P516, $P516, 'type'
    eq $P516, .CONTROL_LOOP_NEXT, for_next3820
    eq $P516, .CONTROL_LOOP_REDO, for_redo3821
  for_done3822:
    pop_eh 
    set $P520, $P510
    goto if1300_end3804
  if1300_else3803:
.annotate 'line', 1632
.annotate 'line', 1633
    $P518 = "&default_for"("$")
    $P519 = $P101."push"($P518)
    set $P520, $P519
  if1300_end3804:
.annotate 'line', 1635
    $P521 = _lex_param_1."!make"($P101)
    .return ($P521) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_427_1346233478.067") :anon :lex :outer("cuid_247_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1624
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1625
    $P502 = _lex_param_0."ast"()
    set $P101, $P502
    set $P503, $P101["sink"]
    unless_null $P503, fallback3809
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback3809:
    defined $I501, $P503
    box $P508, $I501
    set $P507, $P508
    unless $I501 goto if1301_end3808 
    set $P505, $P101["sink"]
    unless_null $P505, fallback3810
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback3810:
    set $P101, $P505
    set $P507, $P101
  if1301_end3808:
    set $P509, $P101["bareblock"]
    unless_null $P509, fallback3813
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback3813:
    set $P514, $P509
    unless $P509 goto if1302_end3812 
.annotate 'line', 1627
    set $P511, $P101[0]
    unless_null $P511, fallback3814
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P512
  fallback3814:
    $P513 = "&block_immediate"($P511)
    set $P101, $P513
    set $P514, $P101
  if1302_end3812:
    get_hll_global $P518, "GLOBAL"
    nqp_get_package_through_who $P517, $P518, "QAST"
    get_who $P516, $P517
    set $P515, $P516["Node"]
    unless_null $P515, fallback3817
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P519
  fallback3817:
    type_check $I502, $P101, $P515
    box $P527, $I502
    set $P526, $P527
    unless $I502 goto if1303_end3816 
.annotate 'line', 1628
    get_hll_global $P523, "GLOBAL"
    nqp_get_package_through_who $P522, $P523, "QAST"
    get_who $P521, $P522
    set $P520, $P521["Stmts"]
    unless_null $P520, fallback3818
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P524
  fallback3818:
    $P525 = $P520."new"($P101)
    set $P101, $P525
    set $P526, $P101
  if1303_end3816:
.annotate 'line', 1629
    find_lex $P528, "$past"
    $P529 = $P528."push"($P101)
    .return ($P529) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_248_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1638
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_3 :opt_flag 
    .const 'Sub' $P516 = 'cuid_428_1346233478.067' 
    capture_lex $P516 
    if haz_param_3, default3853
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set _lex_param_2, $P515
  default3853:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1["EXPR"]
    unless_null $P502, fallback3825
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback3825:
    unless $P502 goto if1304_else3823 
    .const 'Sub' $P504 = 'cuid_428_1346233478.067' 
    capture_lex $P504
    $P505 = $P504()
    set $P513, $P505
    goto if1304_end3824
  if1304_else3823:
    set $P506, _lex_param_1["statement_control"]
    unless_null $P506, fallback3851
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback3851:
    unless $P506 goto if1308_else3849 
.annotate 'line', 1661
    set $P508, _lex_param_1["statement_control"]
    unless_null $P508, fallback3852
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P509
  fallback3852:
    $P510 = $P508."ast"()
    set $P101, $P510
    set $P512, $P101
    goto if1308_end3850
  if1308_else3849:
.annotate 'line', 1662
    box $P511, 0
    set $P101, $P511
    set $P512, $P101
  if1308_end3850:
    set $P513, $P512
  if1304_end3824:
.annotate 'line', 1663
    $P514 = _lex_param_1."!make"($P101)
    .return ($P514) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1346233478.067") :anon :lex :outer("cuid_248_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1640
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    find_lex $P505, "$/"
    set $P504, $P505["statement_mod_cond"]
    unless_null $P504, fallback3826
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P506
  fallback3826:
    set $P503, $P504[0]
    unless_null $P503, fallback3827
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P507
  fallback3827:
    set $P101, $P503
    find_lex $P510, "$/"
    set $P509, $P510["statement_mod_loop"]
    unless_null $P509, fallback3828
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P511
  fallback3828:
    set $P508, $P509[0]
    unless_null $P508, fallback3829
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P512
  fallback3829:
    set $P102, $P508
.annotate 'line', 1643
    find_lex $P514, "$/"
    set $P513, $P514["EXPR"]
    unless_null $P513, fallback3830
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P515
  fallback3830:
    $P516 = $P513."ast"()
    store_lex "$past", $P516
    set $P530, $P101
    unless $P101 goto if1305_end3832 
.annotate 'line', 1644
.annotate 'line', 1645
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["Op"]
    unless_null $P517, fallback3833
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback3833:
    set $P522, $P101["cond"]
    unless_null $P522, fallback3834
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P523
  fallback3834:
    $P524 = $P522."ast"()
    find_lex $P525, "$past"
    set $P526, $P101["sym"]
    unless_null $P526, fallback3835
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P527
  fallback3835:
    set $S501, $P526
    find_lex $P528, "$/"
    $P529 = $P517."new"($P524, $P525, $S501 :named("op"), $P528 :named("node"))
    store_lex "$past", $P529
    set $P530, $P529
  if1305_end3832:
    set $P577, $P102
    unless $P102 goto if1306_end3837 
.annotate 'line', 1647
    set $P531, $P102["sym"]
    unless_null $P531, fallback3840
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P531, $P532
  fallback3840:
    set $S502, $P531
    iseq $I501, $S502, "for"
    unless $I501 goto if1307_else3838 
.annotate 'line', 1648
.annotate 'line', 1649
    get_hll_global $P536, "GLOBAL"
    nqp_get_package_through_who $P535, $P536, "QAST"
    get_who $P534, $P535
    set $P533, $P534["Block"]
    unless_null $P533, fallback3841
    nqp_get_sc_object $P537, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P537
  fallback3841:
.annotate 'line', 1650
    get_hll_global $P541, "GLOBAL"
    nqp_get_package_through_who $P540, $P541, "QAST"
    get_who $P539, $P540
    set $P538, $P539["Var"]
    unless_null $P538, fallback3842
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P538, $P542
  fallback3842:
    $P543 = $P538."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P544, "$past"
    $P545 = $P533."new"($P543, $P544, "immediate" :named("blocktype"))
    store_lex "$past", $P545
.annotate 'line', 1652
    find_lex $P546, "$past"
    $P547 = $P546."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1653
    find_lex $P548, "$past"
    $P549 = $P548."arity"(1)
.annotate 'line', 1654
    get_hll_global $P553, "GLOBAL"
    nqp_get_package_through_who $P552, $P553, "QAST"
    get_who $P551, $P552
    set $P550, $P551["Op"]
    unless_null $P550, fallback3843
    nqp_get_sc_object $P554, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P550, $P554
  fallback3843:
    set $P555, $P102["cond"]
    unless_null $P555, fallback3844
    nqp_get_sc_object $P556, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P555, $P556
  fallback3844:
    $P557 = $P555."ast"()
    find_lex $P558, "$past"
    set $P559, $P102["sym"]
    unless_null $P559, fallback3845
    nqp_get_sc_object $P560, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P559, $P560
  fallback3845:
    set $S503, $P559
    find_lex $P561, "$/"
    $P562 = $P550."new"($P557, $P558, $S503 :named("op"), $P561 :named("node"))
    store_lex "$past", $P562
    set $P576, $P562
    goto if1307_end3839
  if1307_else3838:
.annotate 'line', 1656
.annotate 'line', 1657
    get_hll_global $P566, "GLOBAL"
    nqp_get_package_through_who $P565, $P566, "QAST"
    get_who $P564, $P565
    set $P563, $P564["Op"]
    unless_null $P563, fallback3846
    nqp_get_sc_object $P567, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P563, $P567
  fallback3846:
    set $P568, $P102["cond"]
    unless_null $P568, fallback3847
    nqp_get_sc_object $P569, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P568, $P569
  fallback3847:
    $P570 = $P568."ast"()
    find_lex $P571, "$past"
    set $P572, $P102["sym"]
    unless_null $P572, fallback3848
    nqp_get_sc_object $P573, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P572, $P573
  fallback3848:
    set $S504, $P572
    find_lex $P574, "$/"
    $P575 = $P563."new"($P570, $P571, $S504 :named("op"), $P574 :named("node"))
    store_lex "$past", $P575
    set $P576, $P575
  if1307_end3839:
    set $P577, $P576
  if1306_end3837:
    .return ($P577) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_249_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1666
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1667
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback3854
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3854:
    set $P506, _lex_param_1["EXPR"]
    unless_null $P506, fallback3855
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback3855:
    $P508 = $P506."ast"()
    set $P509, _lex_param_1["pblock"]
    unless_null $P509, fallback3856
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback3856:
    $P511 = $P509."ast"()
    $P512 = $P501."new"($P508, $P511, "if" :named("op"), _lex_param_1 :named("node"))
    $P513 = _lex_param_1."!make"($P512)
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_250_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1670
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1671
    set $P501, _lex_param_1["blockoid"]
    unless_null $P501, fallback3857
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback3857:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_251_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1674
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1675
    set $P501, _lex_param_1["blockoid"]
    unless_null $P501, fallback3858
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback3858:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_252_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1678
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P528 = 'cuid_430_1346233478.067' 
    capture_lex $P528 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1679
    find_dynamic_lex $P502, "$*W"
    unless_null $P502, fallback3859
    get_hll_global $P505, "GLOBAL"
    get_who $P504, $P505
    set $P503, $P504["$W"]
    unless_null $P503, fallback3860
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback3860:
    unless_null $P503, vivi_13093861
    die "Contextual $*W not found"
    box $P507, "Contextual $*W not found"
    set $P503, $P507
  vivi_13093861:
    set $P502, $P503
  fallback3859:
    $P508 = $P502."pop_lexpad"()
    set $P101, $P508
    set $P509, _lex_param_1["statementlist"]
    unless_null $P509, fallback3864
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback3864:
    unless $P509 goto if1310_else3862 
    .const 'Sub' $P511 = 'cuid_430_1346233478.067' 
    capture_lex $P511
    $P512 = $P511()
    set $P527, $P512
    goto if1310_end3863
  if1310_else3862:
.annotate 'line', 1694
    find_dynamic_lex $P513, "$*HAS_YOU_ARE_HERE"
    unless_null $P513, fallback3889
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    set $P514, $P515["$HAS_YOU_ARE_HERE"]
    unless_null $P514, fallback3890
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P517
  fallback3890:
    unless_null $P514, vivi_13183891
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P518, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P514, $P518
  vivi_13183891:
    set $P513, $P514
  fallback3889:
    set $P521, $P513
    unless $P513 goto if1317_end3888 
.annotate 'line', 1695
.annotate 'line', 1696
    $P519 = _lex_param_1."CURSOR"()
    $P520 = $P519."panic"("{YOU_ARE_HERE} may only appear once in a setting")
    set $P521, $P520
  if1317_end3888:
    box $P522, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P522
.annotate 'line', 1699
    set $P523, _lex_param_1["you_are_here"]
    unless_null $P523, fallback3892
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P524
  fallback3892:
    $P525 = $P523."ast"()
    $P526 = _lex_param_1."!make"($P525)
    set $P527, $P526
  if1310_end3863:
    .return ($P527) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_430_1346233478.067") :anon :lex :outer("cuid_252_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1680
    .const 'Sub' $P561 = 'cuid_429_1346233478.067' 
    capture_lex $P561 
    .lex "$past", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1681
    find_lex $P503, "$/"
    set $P502, $P503["statementlist"]
    unless_null $P502, fallback3865
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P504
  fallback3865:
    $P505 = $P502."ast"()
    set $P101, $P505
    find_dynamic_lex $P506, "%*HANDLERS"
    unless_null $P506, fallback3868
    get_hll_global $P509, "GLOBAL"
    get_who $P508, $P509
    set $P507, $P508["%HANDLERS"]
    unless_null $P507, fallback3869
    get_hll_global $P511, "GLOBAL"
    get_who $P510, $P511
    new $P512, 'Hash'
    set $P510["%HANDLERS"], $P512
    set $P507, $P512
  fallback3869:
    unless_null $P507, vivi_13123870
    die "Contextual %*HANDLERS not found"
    box $P513, "Contextual %*HANDLERS not found"
    set $P507, $P513
  vivi_13123870:
    set $P506, $P507
  fallback3868:
    set $P534, $P506
    unless $P506 goto if1311_end3867 
.annotate 'line', 1682
.annotate 'line', 1683
    get_hll_global $P517, "GLOBAL"
    nqp_get_package_through_who $P516, $P517, "QAST"
    get_who $P515, $P516
    set $P514, $P515["Op"]
    unless_null $P514, fallback3871
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P518
  fallback3871:
    $P519 = $P514."new"($P101, "handle" :named("op"))
    set $P101, $P519
    find_dynamic_lex $P523, "%*HANDLERS"
    unless_null $P523, fallback3872
    get_hll_global $P526, "GLOBAL"
    get_who $P525, $P526
    set $P524, $P525["%HANDLERS"]
    unless_null $P524, fallback3873
    get_hll_global $P528, "GLOBAL"
    get_who $P527, $P528
    new $P529, 'Hash'
    set $P527["%HANDLERS"], $P529
    set $P524, $P529
  fallback3873:
    unless_null $P524, vivi_13133874
    die "Contextual %*HANDLERS not found"
    box $P530, "Contextual %*HANDLERS not found"
    set $P524, $P530
  vivi_13133874:
    set $P523, $P524
  fallback3872:
    set $P520, $P523
    iter $P522, $P523
    new $P532, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P532, for_handlers3875
    push_eh $P532
  for_next3876:
    unless $P522, for_done3878
    shift $P533, $P522
  for_redo3877:
    .const 'Sub' $P531 = 'cuid_429_1346233478.067' 
    capture_lex $P531
    $P520 = $P531($P533)
    goto for_next3876
  for_handlers3875:
    .get_results ($P532)
    pop_upto_eh $P532
    getattribute $P532, $P532, 'type'
    eq $P532, .CONTROL_LOOP_NEXT, for_next3876
    eq $P532, .CONTROL_LOOP_REDO, for_redo3877
  for_done3878:
    pop_eh 
    set $P534, $P520
  if1311_end3867:
.annotate 'line', 1689
    find_lex $P535, "$BLOCK"
    $P536 = $P535."push"($P101)
.annotate 'line', 1690
    find_lex $P537, "$BLOCK"
    find_lex $P538, "$/"
    $P539 = $P537."node"($P538)
    find_dynamic_lex $P540, "%*HANDLERS"
    unless_null $P540, fallback3881
    get_hll_global $P543, "GLOBAL"
    get_who $P542, $P543
    set $P541, $P542["%HANDLERS"]
    unless_null $P541, fallback3882
    get_hll_global $P545, "GLOBAL"
    get_who $P544, $P545
    new $P546, 'Hash'
    set $P544["%HANDLERS"], $P546
    set $P541, $P546
  fallback3882:
    unless_null $P541, vivi_13153883
    die "Contextual %*HANDLERS not found"
    box $P547, "Contextual %*HANDLERS not found"
    set $P541, $P547
  vivi_13153883:
    set $P540, $P541
  fallback3881:
    set $P557, $P540
    unless $P540 goto if1314_end3880 
    find_lex $P548, "$BLOCK"
    find_dynamic_lex $P549, "%*HANDLERS"
    unless_null $P549, fallback3884
    get_hll_global $P552, "GLOBAL"
    get_who $P551, $P552
    set $P550, $P551["%HANDLERS"]
    unless_null $P550, fallback3885
    get_hll_global $P554, "GLOBAL"
    get_who $P553, $P554
    new $P555, 'Hash'
    set $P553["%HANDLERS"], $P555
    set $P550, $P555
  fallback3885:
    unless_null $P550, vivi_13163886
    die "Contextual %*HANDLERS not found"
    box $P556, "Contextual %*HANDLERS not found"
    set $P550, $P556
  vivi_13163886:
    set $P549, $P550
  fallback3884:
    set $P548["handlers"], $P549
    set $P557, $P549
  if1314_end3880:
.annotate 'line', 1692
    find_dynamic_lex $P558, "$/"
    find_lex $P559, "$BLOCK"
    $P560 = $P558."!make"($P559)
    .return ($P560) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1346233478.067") :anon :lex :outer("cuid_430_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1684
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1685
    find_lex $P501, "$past"
    $P502 = _lex_param_0."key"()
    $P503 = $P501."push"($P502)
.annotate 'line', 1686
    find_lex $P504, "$past"
    $P505 = _lex_param_0."value"()
    $P506 = $P504."push"($P505)
    .return ($P506) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_253_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1703
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1704
    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback3893
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback3894
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback3894:
    unless_null $P502, vivi_13193895
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_13193895:
    set $P501, $P502
  fallback3893:
    $P507 = $P501."push_lexpad"(_lex_param_1)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_254_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1707
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P526 = 'cuid_431_1346233478.067' 
    capture_lex $P526 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P503, "%*COMPILING"
    unless_null $P503, fallback3898
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["%COMPILING"]
    unless_null $P504, fallback3899
    get_hll_global $P508, "GLOBAL"
    get_who $P507, $P508
    new $P509, 'Hash'
    set $P507["%COMPILING"], $P509
    set $P504, $P509
  fallback3899:
    unless_null $P504, vivi_13213900
    die "Contextual %*COMPILING not found"
    box $P510, "Contextual %*COMPILING not found"
    set $P504, $P510
  vivi_13213900:
    set $P503, $P504
  fallback3898:
    set $P502, $P503["%?OPTIONS"]
    unless_null $P502, fallback3901
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P511
  fallback3901:
    set $P501, $P502["outer_ctx"]
    unless_null $P501, fallback3902
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P512
  fallback3902:
    defined $I501, $P501
    box $P516, $I501
    set $P515, $P516
    if $I501 goto unless1320_end3897 
    .const 'Sub' $P513 = 'cuid_431_1346233478.067' 
    capture_lex $P513
    $P514 = $P513()
    set $P515, $P514
  unless1320_end3897:
.annotate 'line', 1729
    nqp_decontainerize $P517, _lex_param_0
    find_dynamic_lex $P518, "$*W"
    unless_null $P518, fallback3958
    get_hll_global $P521, "GLOBAL"
    get_who $P520, $P521
    set $P519, $P520["$W"]
    unless_null $P519, fallback3959
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P522
  fallback3959:
    unless_null $P519, vivi_13383960
    die "Contextual $*W not found"
    box $P523, "Contextual $*W not found"
    set $P519, $P523
  vivi_13383960:
    set $P518, $P519
  fallback3958:
    $P524 = $P518."cur_lexpad"()
    $P525 = $P517."SET_BLOCK_OUTER_CTX"($P524)
    .return ($P525) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1346233478.067") :anon :lex :outer("cuid_254_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1708
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1711
    find_dynamic_lex $P502, "$*W"
    unless_null $P502, fallback3903
    get_hll_global $P505, "GLOBAL"
    get_who $P504, $P505
    set $P503, $P504["$W"]
    unless_null $P503, fallback3904
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback3904:
    unless_null $P503, vivi_13223905
    die "Contextual $*W not found"
    box $P507, "Contextual $*W not found"
    set $P503, $P507
  vivi_13223905:
    set $P502, $P503
  fallback3903:
    find_dynamic_lex $P511, "%*COMPILING"
    unless_null $P511, fallback3907
    get_hll_global $P514, "GLOBAL"
    get_who $P513, $P514
    set $P512, $P513["%COMPILING"]
    unless_null $P512, fallback3908
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    new $P517, 'Hash'
    set $P515["%COMPILING"], $P517
    set $P512, $P517
  fallback3908:
    unless_null $P512, vivi_13233909
    die "Contextual %*COMPILING not found"
    box $P518, "Contextual %*COMPILING not found"
    set $P512, $P518
  vivi_13233909:
    set $P511, $P512
  fallback3907:
    set $P510, $P511["%?OPTIONS"]
    unless_null $P510, fallback3910
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P519
  fallback3910:
    set $P509, $P510["setting"]
    unless_null $P509, fallback3911
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P520
  fallback3911:
    set $P508, $P509
    defined $I501, $P508
    if $I501, defor3906
    box $P521, "NQPCORE"
    set $P508, $P521
  defor3906:
    $P522 = $P502."load_setting"($P508)
    set $P101, $P522
    find_dynamic_lex $P525, "%*COMPILING"
    unless_null $P525, fallback3914
    get_hll_global $P528, "GLOBAL"
    get_who $P527, $P528
    set $P526, $P527["%COMPILING"]
    unless_null $P526, fallback3915
    get_hll_global $P530, "GLOBAL"
    get_who $P529, $P530
    new $P531, 'Hash'
    set $P529["%COMPILING"], $P531
    set $P526, $P531
  fallback3915:
    unless_null $P526, vivi_13253916
    die "Contextual %*COMPILING not found"
    box $P532, "Contextual %*COMPILING not found"
    set $P526, $P532
  vivi_13253916:
    set $P525, $P526
  fallback3914:
    set $P524, $P525["%?OPTIONS"]
    unless_null $P524, fallback3917
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P533
  fallback3917:
    set $P523, $P524["setting"]
    unless_null $P523, fallback3918
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P534
  fallback3918:
    set $S501, $P523
    iseq $I502, $S501, "NULL"
    box $P615, $I502
    set $P614, $P615
    if $I502 goto unless1324_end3913 
.annotate 'line', 1716
.annotate 'line', 1717
    $P535 = "&import_HOW_exports"($P101)
    find_dynamic_lex $P538, "%*COMPILING"
    unless_null $P538, fallback3921
    get_hll_global $P541, "GLOBAL"
    get_who $P540, $P541
    set $P539, $P540["%COMPILING"]
    unless_null $P539, fallback3922
    get_hll_global $P543, "GLOBAL"
    get_who $P542, $P543
    new $P544, 'Hash'
    set $P542["%COMPILING"], $P544
    set $P539, $P544
  fallback3922:
    unless_null $P539, vivi_13273923
    die "Contextual %*COMPILING not found"
    box $P545, "Contextual %*COMPILING not found"
    set $P539, $P545
  vivi_13273923:
    set $P538, $P539
  fallback3921:
    set $P537, $P538["%?OPTIONS"]
    unless_null $P537, fallback3924
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P537, $P546
  fallback3924:
    set $P536, $P537["old-regex-lib"]
    unless_null $P536, fallback3925
    nqp_get_sc_object $P547, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P536, $P547
  fallback3925:
    set $P561, $P536
    unless $P536 goto if1326_end3920 
.annotate 'line', 1718
.annotate 'line', 1719
    find_dynamic_lex $P548, "$*W"
    unless_null $P548, fallback3926
    get_hll_global $P551, "GLOBAL"
    get_who $P550, $P551
    set $P549, $P550["$W"]
    unless_null $P549, fallback3927
    nqp_get_sc_object $P552, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P552
  fallback3927:
    unless_null $P549, vivi_13283928
    die "Contextual $*W not found"
    box $P553, "Contextual $*W not found"
    set $P549, $P553
  vivi_13283928:
    set $P548, $P549
  fallback3926:
    find_dynamic_lex $P554, "$*GLOBALish"
    unless_null $P554, fallback3929
    get_hll_global $P557, "GLOBAL"
    get_who $P556, $P557
    set $P555, $P556["$GLOBALish"]
    unless_null $P555, fallback3930
    nqp_get_sc_object $P558, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P555, $P558
  fallback3930:
    unless_null $P555, vivi_13293931
    die "Contextual $*GLOBALish not found"
    box $P559, "Contextual $*GLOBALish not found"
    set $P555, $P559
  vivi_13293931:
    set $P554, $P555
  fallback3929:
    $P560 = $P548."load_module"("NQPRegex", $P554)
    set $P561, $P560
  if1326_end3920:
    find_dynamic_lex $P564, "%*COMPILING"
    unless_null $P564, fallback3934
    get_hll_global $P567, "GLOBAL"
    get_who $P566, $P567
    set $P565, $P566["%COMPILING"]
    unless_null $P565, fallback3935
    get_hll_global $P569, "GLOBAL"
    get_who $P568, $P569
    new $P570, 'Hash'
    set $P568["%COMPILING"], $P570
    set $P565, $P570
  fallback3935:
    unless_null $P565, vivi_13313936
    die "Contextual %*COMPILING not found"
    box $P571, "Contextual %*COMPILING not found"
    set $P565, $P571
  vivi_13313936:
    set $P564, $P565
  fallback3934:
    set $P563, $P564["%?OPTIONS"]
    unless_null $P563, fallback3937
    nqp_get_sc_object $P572, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P563, $P572
  fallback3937:
    set $P562, $P563["no-regex-lib"]
    unless_null $P562, fallback3938
    nqp_get_sc_object $P573, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P562, $P573
  fallback3938:
    set $P613, $P562
    if $P562 goto unless1330_end3933 
.annotate 'line', 1721
.annotate 'line', 1722
    find_dynamic_lex $P574, "$*W"
    unless_null $P574, fallback3939
    get_hll_global $P577, "GLOBAL"
    get_who $P576, $P577
    set $P575, $P576["$W"]
    unless_null $P575, fallback3940
    nqp_get_sc_object $P578, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P575, $P578
  fallback3940:
    unless_null $P575, vivi_13323941
    die "Contextual $*W not found"
    box $P579, "Contextual $*W not found"
    set $P575, $P579
  vivi_13323941:
    set $P574, $P575
  fallback3939:
    find_dynamic_lex $P580, "$*GLOBALish"
    unless_null $P580, fallback3942
    get_hll_global $P583, "GLOBAL"
    get_who $P582, $P583
    set $P581, $P582["$GLOBALish"]
    unless_null $P581, fallback3943
    nqp_get_sc_object $P584, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P581, $P584
  fallback3943:
    unless_null $P581, vivi_13333944
    die "Contextual $*GLOBALish not found"
    box $P585, "Contextual $*GLOBALish not found"
    set $P581, $P585
  vivi_13333944:
    set $P580, $P581
  fallback3942:
    $P586 = $P574."load_module"("QRegex", $P580)
    find_dynamic_lex $P589, "%*COMPILING"
    unless_null $P589, fallback3947
    get_hll_global $P592, "GLOBAL"
    get_who $P591, $P592
    set $P590, $P591["%COMPILING"]
    unless_null $P590, fallback3948
    get_hll_global $P594, "GLOBAL"
    get_who $P593, $P594
    new $P595, 'Hash'
    set $P593["%COMPILING"], $P595
    set $P590, $P595
  fallback3948:
    unless_null $P590, vivi_13353949
    die "Contextual %*COMPILING not found"
    box $P596, "Contextual %*COMPILING not found"
    set $P590, $P596
  vivi_13353949:
    set $P589, $P590
  fallback3947:
    set $P588, $P589["%?OPTIONS"]
    unless_null $P588, fallback3950
    nqp_get_sc_object $P597, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P588, $P597
  fallback3950:
    set $P587, $P588["old-regex-lib"]
    unless_null $P587, fallback3951
    nqp_get_sc_object $P598, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P587, $P598
  fallback3951:
    set $P612, $P587
    if $P587 goto unless1334_end3946 
.annotate 'line', 1723
.annotate 'line', 1724
    find_dynamic_lex $P599, "$*W"
    unless_null $P599, fallback3952
    get_hll_global $P602, "GLOBAL"
    get_who $P601, $P602
    set $P600, $P601["$W"]
    unless_null $P600, fallback3953
    nqp_get_sc_object $P603, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P600, $P603
  fallback3953:
    unless_null $P600, vivi_13363954
    die "Contextual $*W not found"
    box $P604, "Contextual $*W not found"
    set $P600, $P604
  vivi_13363954:
    set $P599, $P600
  fallback3952:
    find_dynamic_lex $P605, "$*GLOBALish"
    unless_null $P605, fallback3955
    get_hll_global $P608, "GLOBAL"
    get_who $P607, $P608
    set $P606, $P607["$GLOBALish"]
    unless_null $P606, fallback3956
    nqp_get_sc_object $P609, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P606, $P609
  fallback3956:
    unless_null $P606, vivi_13373957
    die "Contextual $*GLOBALish not found"
    box $P610, "Contextual $*GLOBALish not found"
    set $P606, $P610
  vivi_13373957:
    set $P605, $P606
  fallback3955:
    $P611 = $P599."load_module"("NQPP6QRegex", $P605)
    set $P612, $P611
  unless1334_end3946:
    set $P613, $P612
  unless1330_end3933:
    set $P614, $P613
  unless1324_end3913:
    .return ($P614) 
.end
.HLL "nqp"
.namespace []
.sub "GLOBALish" :subid("cuid_255_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1741
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1745
    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback3961
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback3962
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback3962:
    unless_null $P502, vivi_13393963
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_13393963:
    set $P501, $P502
  fallback3961:
    find_dynamic_lex $P508, "%*HOW"
    unless_null $P508, fallback3964
    get_hll_global $P511, "GLOBAL"
    get_who $P510, $P511
    set $P509, $P510["%HOW"]
    unless_null $P509, fallback3965
    get_hll_global $P513, "GLOBAL"
    get_who $P512, $P513
    new $P514, 'Hash'
    set $P512["%HOW"], $P514
    set $P509, $P514
  fallback3965:
    unless_null $P509, vivi_13403966
    die "Contextual %*HOW not found"
    box $P515, "Contextual %*HOW not found"
    set $P509, $P515
  vivi_13403966:
    set $P508, $P509
  fallback3964:
    set $P507, $P508["knowhow"]
    unless_null $P507, fallback3967
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P516
  fallback3967:
    $P517 = $P501."pkg_create_mo"($P507, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P517
.annotate 'line', 1746
    find_dynamic_lex $P519, "$*GLOBALish"
    unless_null $P519, fallback3968
    get_hll_global $P522, "GLOBAL"
    get_who $P521, $P522
    set $P520, $P521["$GLOBALish"]
    unless_null $P520, fallback3969
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P523
  fallback3969:
    unless_null $P520, vivi_13413970
    die "Contextual $*GLOBALish not found"
    box $P524, "Contextual $*GLOBALish not found"
    set $P520, $P524
  vivi_13413970:
    set $P519, $P520
  fallback3968:
    get_how $P518, $P519
    find_dynamic_lex $P525, "$*GLOBALish"
    unless_null $P525, fallback3971
    get_hll_global $P528, "GLOBAL"
    get_who $P527, $P528
    set $P526, $P527["$GLOBALish"]
    unless_null $P526, fallback3972
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P529
  fallback3972:
    unless_null $P526, vivi_13423973
    die "Contextual $*GLOBALish not found"
    box $P530, "Contextual $*GLOBALish not found"
    set $P526, $P530
  vivi_13423973:
    set $P525, $P526
  fallback3971:
    $P531 = $P518."compose"($P525)
.annotate 'line', 1747
    find_dynamic_lex $P532, "$*W"
    unless_null $P532, fallback3974
    get_hll_global $P535, "GLOBAL"
    get_who $P534, $P535
    set $P533, $P534["$W"]
    unless_null $P533, fallback3975
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P536
  fallback3975:
    unless_null $P533, vivi_13433976
    die "Contextual $*W not found"
    box $P537, "Contextual $*W not found"
    set $P533, $P537
  vivi_13433976:
    set $P532, $P533
  fallback3974:
    find_dynamic_lex $P538, "$*W"
    unless_null $P538, fallback3977
    get_hll_global $P541, "GLOBAL"
    get_who $P540, $P541
    set $P539, $P540["$W"]
    unless_null $P539, fallback3978
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P539, $P542
  fallback3978:
    unless_null $P539, vivi_13443979
    die "Contextual $*W not found"
    box $P543, "Contextual $*W not found"
    set $P539, $P543
  vivi_13443979:
    set $P538, $P539
  fallback3977:
    $P544 = $P538."cur_lexpad"()
    find_dynamic_lex $P545, "$*GLOBALish"
    unless_null $P545, fallback3980
    get_hll_global $P548, "GLOBAL"
    get_who $P547, $P548
    set $P546, $P547["$GLOBALish"]
    unless_null $P546, fallback3981
    nqp_get_sc_object $P549, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P546, $P549
  fallback3981:
    unless_null $P546, vivi_13453982
    die "Contextual $*GLOBALish not found"
    box $P550, "Contextual $*GLOBALish not found"
    set $P546, $P550
  vivi_13453982:
    set $P545, $P546
  fallback3980:
    $P551 = $P532."install_lexical_symbol"($P544, "GLOBALish", $P545)
    find_dynamic_lex $P552, "$*GLOBALish"
    unless_null $P552, fallback3983
    get_hll_global $P555, "GLOBAL"
    get_who $P554, $P555
    set $P553, $P554["$GLOBALish"]
    unless_null $P553, fallback3984
    nqp_get_sc_object $P556, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P553, $P556
  fallback3984:
    unless_null $P553, vivi_13463985
    die "Contextual $*GLOBALish not found"
    box $P557, "Contextual $*GLOBALish not found"
    set $P553, $P557
  vivi_13463985:
    set $P552, $P553
  fallback3983:
    store_dynamic_lex "$*PACKAGE", $P552
.annotate 'line', 1751
    find_dynamic_lex $P558, "$*W"
    unless_null $P558, fallback3986
    get_hll_global $P561, "GLOBAL"
    get_who $P560, $P561
    set $P559, $P560["$W"]
    unless_null $P559, fallback3987
    nqp_get_sc_object $P562, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P559, $P562
  fallback3987:
    unless_null $P559, vivi_13473988
    die "Contextual $*W not found"
    box $P563, "Contextual $*W not found"
    set $P559, $P563
  vivi_13473988:
    set $P558, $P559
  fallback3986:
    find_dynamic_lex $P564, "$*W"
    unless_null $P564, fallback3989
    get_hll_global $P567, "GLOBAL"
    get_who $P566, $P567
    set $P565, $P566["$W"]
    unless_null $P565, fallback3990
    nqp_get_sc_object $P568, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P565, $P568
  fallback3990:
    unless_null $P565, vivi_13483991
    die "Contextual $*W not found"
    box $P569, "Contextual $*W not found"
    set $P565, $P569
  vivi_13483991:
    set $P564, $P565
  fallback3989:
    $P570 = $P564."cur_lexpad"()
    find_dynamic_lex $P571, "$*PACKAGE"
    unless_null $P571, fallback3992
    get_hll_global $P574, "GLOBAL"
    get_who $P573, $P574
    set $P572, $P573["$PACKAGE"]
    unless_null $P572, fallback3993
    nqp_get_sc_object $P575, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P572, $P575
  fallback3993:
    unless_null $P572, vivi_13493994
    die "Contextual $*PACKAGE not found"
    box $P576, "Contextual $*PACKAGE not found"
    set $P572, $P576
  vivi_13493994:
    set $P571, $P572
  fallback3992:
    $P577 = $P558."install_lexical_symbol"($P570, "$?PACKAGE", $P571)
    .return ($P577) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_256_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1754
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1755
    nqp_decontainerize $P501, _lex_param_0
    $P502 = $P501."CTXSAVE"()
    $P503 = _lex_param_1."!make"($P502)
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "CTXSAVE" :subid("cuid_257_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1759
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 1760
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Stmts"]
    unless_null $P501, fallback3995
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback3995:
.annotate 'line', 1761
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Op"]
    unless_null $P506, fallback3996
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback3996:
.annotate 'line', 1763
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["Var"]
    unless_null $P511, fallback3997
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback3997:
    $P516 = $P511."new"("ctxsave" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 1764
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["Var"]
    unless_null $P517, fallback3998
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback3998:
    $P522 = $P517."new"("$*CTXSAVE" :named("name"), "contextual" :named("scope"))
    $P523 = $P506."new"($P516, $P522, "bind" :named("op"))
.annotate 'line', 1766
    get_hll_global $P527, "GLOBAL"
    nqp_get_package_through_who $P526, $P527, "QAST"
    get_who $P525, $P526
    set $P524, $P525["Op"]
    unless_null $P524, fallback3999
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P528
  fallback3999:
.annotate 'line', 1768
    get_hll_global $P532, "GLOBAL"
    nqp_get_package_through_who $P531, $P532, "QAST"
    get_who $P530, $P531
    set $P529, $P530["Op"]
    unless_null $P529, fallback4000
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P533
  fallback4000:
.annotate 'line', 1770
    get_hll_global $P537, "GLOBAL"
    nqp_get_package_through_who $P536, $P537, "QAST"
    get_who $P535, $P536
    set $P534, $P535["Var"]
    unless_null $P534, fallback4001
    nqp_get_sc_object $P538, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P534, $P538
  fallback4001:
    $P539 = $P534."new"("ctxsave" :named("name"), "local" :named("scope"))
    $P540 = $P529."new"($P539, "isnull" :named("op"))
.annotate 'line', 1772
    get_hll_global $P544, "GLOBAL"
    nqp_get_package_through_who $P543, $P544, "QAST"
    get_who $P542, $P543
    set $P541, $P542["Op"]
    unless_null $P541, fallback4002
    nqp_get_sc_object $P545, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P545
  fallback4002:
.annotate 'line', 1774
    get_hll_global $P549, "GLOBAL"
    nqp_get_package_through_who $P548, $P549, "QAST"
    get_who $P547, $P548
    set $P546, $P547["VM"]
    unless_null $P546, fallback4003
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P546, $P550
  fallback4003:
.annotate 'line', 1776
    get_hll_global $P554, "GLOBAL"
    nqp_get_package_through_who $P553, $P554, "QAST"
    get_who $P552, $P553
    set $P551, $P552["Var"]
    unless_null $P551, fallback4004
    nqp_get_sc_object $P555, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P551, $P555
  fallback4004:
    $P556 = $P551."new"("ctxsave" :named("name"), "local" :named("scope"))
.annotate 'line', 1777
    get_hll_global $P560, "GLOBAL"
    nqp_get_package_through_who $P559, $P560, "QAST"
    get_who $P558, $P559
    set $P557, $P558["SVal"]
    unless_null $P557, fallback4005
    nqp_get_sc_object $P561, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P557, $P561
  fallback4005:
    $P562 = $P557."new"("ctxsave" :named("value"))
    $P563 = $P546."new"($P556, $P562, "can IPs" :named("pirop"))
.annotate 'line', 1779
    get_hll_global $P567, "GLOBAL"
    nqp_get_package_through_who $P566, $P567, "QAST"
    get_who $P565, $P566
    set $P564, $P565["Op"]
    unless_null $P564, fallback4006
    nqp_get_sc_object $P568, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P564, $P568
  fallback4006:
.annotate 'line', 1781
    get_hll_global $P572, "GLOBAL"
    nqp_get_package_through_who $P571, $P572, "QAST"
    get_who $P570, $P571
    set $P569, $P570["Var"]
    unless_null $P569, fallback4007
    nqp_get_sc_object $P573, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P573
  fallback4007:
    $P574 = $P569."new"("ctxsave" :named("name"), "local" :named("scope"))
    $P575 = $P564."new"($P574, "callmethod" :named("op"), "ctxsave" :named("name"))
    $P576 = $P541."new"($P563, $P575, "if" :named("op"))
    $P577 = $P524."new"($P540, $P576, "unless" :named("op"))
    $P578 = $P501."new"($P523, $P577)
    .return ($P578) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_258_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1787
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1788
    find_dynamic_lex $P502, "$*W"
    unless_null $P502, fallback4008
    get_hll_global $P505, "GLOBAL"
    get_who $P504, $P505
    set $P503, $P504["$W"]
    unless_null $P503, fallback4009
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback4009:
    unless_null $P503, vivi_13504010
    die "Contextual $*W not found"
    box $P507, "Contextual $*W not found"
    set $P503, $P507
  vivi_13504010:
    set $P502, $P503
  fallback4008:
    set $P508, _lex_param_1["name"]
    unless_null $P508, fallback4011
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P509
  fallback4011:
    set $S501, $P508
    find_dynamic_lex $P510, "$*GLOBALish"
    unless_null $P510, fallback4012
    get_hll_global $P513, "GLOBAL"
    get_who $P512, $P513
    set $P511, $P512["$GLOBALish"]
    unless_null $P511, fallback4013
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P514
  fallback4013:
    unless_null $P511, vivi_13514014
    die "Contextual $*GLOBALish not found"
    box $P515, "Contextual $*GLOBALish not found"
    set $P511, $P515
  vivi_13514014:
    set $P510, $P511
  fallback4012:
    $P516 = $P502."load_module"($S501, $P510)
    set $P101, $P516
    defined $I501, $P101
    box $P519, $I501
    set $P518, $P519
    unless $I501 goto if1352_end4016 
.annotate 'line', 1789
.annotate 'line', 1790
    $P517 = "&import_HOW_exports"($P101)
    set $P518, $P517
  if1352_end4016:
.annotate 'line', 1792
    get_hll_global $P523, "GLOBAL"
    nqp_get_package_through_who $P522, $P523, "QAST"
    get_who $P521, $P522
    set $P520, $P521["Stmts"]
    unless_null $P520, fallback4017
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P524
  fallback4017:
    $P525 = $P520."new"()
    $P526 = _lex_param_1."!make"($P525)
    .return ($P526) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_259_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1795
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P528 = 'cuid_432_1346233478.067' 
    capture_lex $P528 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $P503, _lex_param_1["xblock"]
    unless_null $P503, fallback4018
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4018:
    set $N502, $P503
    set $N503, 1
    sub $N501, $N502, $N503
    box $P505, $N501
    set $P101, $P505
.annotate 'line', 1797
    set $P507, _lex_param_1["xblock"]
    unless_null $P507, fallback4019
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4019:
    set $I501, $P101
    set $P506, $P507[$I501]
    unless_null $P506, fallback4020
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P509
  fallback4020:
    $P510 = $P506."ast"()
    $P511 = "&xblock_immediate"($P510)
    set $P102, $P511
    set $P512, _lex_param_1["else"]
    unless_null $P512, fallback4023
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P513
  fallback4023:
    set $P521, $P512
    unless $P512 goto if1353_end4022 
.annotate 'line', 1798
.annotate 'line', 1799
    set $P515, _lex_param_1["else"]
    unless_null $P515, fallback4024
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P516
  fallback4024:
    set $P514, $P515[0]
    unless_null $P514, fallback4025
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P517
  fallback4025:
    $P518 = $P514."ast"()
    $P519 = "&block_immediate"($P518)
    $P520 = $P102."push"($P519)
    set $P521, $P520
  if1353_end4022:
    new $P525, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P525, while1354_handlers4029
    push_eh $P525
  while1354_test4026:
    set $N504, $P101
    set $N505, 0
    isgt $I502, $N504, $N505
    box $P526, $I502
    set $P524, $P526
    unless $I502 goto while1354_done4030 
  while1354_redo4028:
    .const 'Sub' $P522 = 'cuid_432_1346233478.067' 
    capture_lex $P522
    $P523 = $P522()
    set $P524, $P523
    goto while1354_test4026 
  while1354_handlers4029:
    .get_results ($P525)
    pop_upto_eh $P525
    getattribute $P525, $P525, 'type'
    eq $P525, .CONTROL_LOOP_NEXT, while1354_test4026
    eq $P525, .CONTROL_LOOP_REDO, while1354_redo4028
  while1354_done4030:
    pop_eh 
.annotate 'line', 1808
    $P527 = _lex_param_1."!make"($P102)
    .return ($P527) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_432_1346233478.067") :anon :lex :outer("cuid_259_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1802
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    find_lex $P502, "$count"
    set tmp_1, $P502
    set $N502, tmp_1
    set $N503, 1
    sub $N501, $N502, $N503
    box $P503, $N501
    store_lex "$count", $P503
    find_lex $P502, "$past"
    set $P101, $P502
.annotate 'line', 1805
    find_lex $P505, "$/"
    set $P504, $P505["xblock"]
    unless_null $P504, fallback4031
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P506
  fallback4031:
    find_lex $P507, "$count"
    set $I501, $P507
    set $P503, $P504[$I501]
    unless_null $P503, fallback4032
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P508
  fallback4032:
    $P509 = $P503."ast"()
    $P510 = "&xblock_immediate"($P509)
    store_lex "$past", $P510
.annotate 'line', 1806
    find_lex $P511, "$past"
    $P512 = $P511."push"($P101)
    .return ($P512) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_260_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1811
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1812
    set $P502, _lex_param_1["xblock"]
    unless_null $P502, fallback4033
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4033:
    $P504 = $P502."ast"()
    $P505 = "&xblock_immediate"($P504)
    set $P101, $P505
.annotate 'line', 1813
    $P506 = $P101."op"("unless")
.annotate 'line', 1814
    $P507 = _lex_param_1."!make"($P101)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_261_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1817
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1818
    set $P502, _lex_param_1["xblock"]
    unless_null $P502, fallback4034
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4034:
    $P504 = $P502."ast"()
    $P505 = "&xblock_immediate"($P504)
    set $P101, $P505
.annotate 'line', 1819
    set $P506, _lex_param_1["sym"]
    unless_null $P506, fallback4035
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4035:
    set $S501, $P506
    $P508 = $P101."op"($S501)
.annotate 'line', 1820
    $P509 = _lex_param_1."!make"($P101)
    .return ($P509) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_262_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1823
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $P503, _lex_param_1["wu"]
    unless_null $P503, fallback4036
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4036:
    set $S502, $P503
    concat $S501, "repeat_", $S502
    box $P505, $S501
    set $P101, $P505
    set $P506, _lex_param_1["xblock"]
    unless_null $P506, fallback4039
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4039:
    unless $P506 goto if1355_else4037 
.annotate 'line', 1826
.annotate 'line', 1827
    set $P508, _lex_param_1["xblock"]
    unless_null $P508, fallback4040
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P509
  fallback4040:
    $P510 = $P508."ast"()
    $P511 = "&xblock_immediate"($P510)
    set $P102, $P511
.annotate 'line', 1828
    $P512 = $P102."op"($P101)
    set $P526, $P512
    goto if1355_end4038
  if1355_else4037:
.annotate 'line', 1830
.annotate 'line', 1831
    get_hll_global $P516, "GLOBAL"
    nqp_get_package_through_who $P515, $P516, "QAST"
    get_who $P514, $P515
    set $P513, $P514["Op"]
    unless_null $P513, fallback4041
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P517
  fallback4041:
    set $P518, _lex_param_1["EXPR"]
    unless_null $P518, fallback4042
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P519
  fallback4042:
    $P520 = $P518."ast"()
    set $P521, _lex_param_1["pblock"]
    unless_null $P521, fallback4043
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P522
  fallback4043:
    $P523 = $P521."ast"()
    $P524 = "&block_immediate"($P523)
    $P525 = $P513."new"($P520, $P524, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P525
    set $P526, $P102
  if1355_end4038:
.annotate 'line', 1834
    $P527 = _lex_param_1."!make"($P102)
    .return ($P527) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_263_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1837
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 1838
    set $P503, _lex_param_1["xblock"]
    unless_null $P503, fallback4044
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4044:
    $P505 = $P503."ast"()
    set $P101, $P505
.annotate 'line', 1839
    $P506 = $P101."op"("for")
    set $P507, $P101[1]
    unless_null $P507, fallback4045
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4045:
    set $P102, $P507
.annotate 'line', 1841
    $P509 = $P102."arity"()
    set $P521, $P509
    if $P509 goto unless1356_end4047 
.annotate 'line', 1842
    set $P510, $P102[0]
    unless_null $P510, fallback4048
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4048:
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Var"]
    unless_null $P512, fallback4049
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback4049:
    $P517 = $P512."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P518 = $P510."push"($P517)
.annotate 'line', 1843
    $P519 = $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1844
    $P520 = $P102."arity"(1)
    set $P521, $P520
  unless1356_end4047:
.annotate 'line', 1846
    $P522 = $P102."blocktype"("immediate")
.annotate 'line', 1847
    $P523 = _lex_param_1."!make"($P101)
    .return ($P523) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_264_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1850
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1851
    set $P502, _lex_param_1["block"]
    unless_null $P502, fallback4050
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4050:
    $P504 = $P502."ast"()
    set $P101, $P504
.annotate 'line', 1852
    $P505 = "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1853
    $P506 = "&default_for"("$")
    $P507 = _lex_param_1."!make"($P506)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_265_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1856
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1857
    set $P502, _lex_param_1["block"]
    unless_null $P502, fallback4051
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4051:
    $P504 = $P502."ast"()
    set $P101, $P504
.annotate 'line', 1858
    $P505 = "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1859
    $P506 = "&default_for"("$")
    $P507 = _lex_param_1."!make"($P506)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_266_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1893
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1894
    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback4052
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback4053
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback4053:
    unless_null $P502, vivi_13574054
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_13574054:
    set $P501, $P502
  fallback4052:
    set $P507, _lex_param_1["blorst"]
    unless_null $P507, fallback4055
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4055:
    $P509 = $P507."ast"()
    $P510 = $P501."run_begin_block"($P509)
    $P511 = _lex_param_1."!make"($P510)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_267_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1897
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1898
    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback4056
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback4057
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback4057:
    unless_null $P502, vivi_13584058
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_13584058:
    set $P501, $P502
  fallback4056:
    $P507 = $P501."cur_lexpad"()
    set $P508, _lex_param_1["blorst"]
    unless_null $P508, fallback4059
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P509
  fallback4059:
    $P510 = $P508."ast"()
    $P511 = $P507."push"($P510)
.annotate 'line', 1899
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Stmts"]
    unless_null $P512, fallback4060
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback4060:
    $P517 = $P512."new"()
    $P518 = _lex_param_1."!make"($P517)
    .return ($P518) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_268_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1902
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4061
    .lex "RETURN", $P102
.annotate 'line', 1903
    set $P502, _lex_param_1["blorst"]
    unless_null $P502, fallback4063
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4063:
    $P504 = $P502."ast"()
    set $P101, $P504
    get_hll_global $P508, "GLOBAL"
    nqp_get_package_through_who $P507, $P508, "QAST"
    get_who $P506, $P507
    set $P505, $P506["Block"]
    unless_null $P505, fallback4066
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P509
  fallback4066:
    type_check $I501, $P101, $P505
    box $P522, $I501
    set $P521, $P522
    unless $I501 goto if1359_end4065 
.annotate 'line', 1904
    set $P510, $P101["handlers"]
    unless_null $P510, fallback4071
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4071:
    set $P514, $P510
    unless $P510 goto if1361_end4070 
    set $P512, $P101["handlers"]
    unless_null $P512, fallback4072
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P513
  fallback4072:
    exists $I502, $P512["CATCH"]
    box $P515, $I502
    set $P514, $P515
  if1361_end4070:
    unless $P514 goto if1360_else4067 
.annotate 'line', 1905
.annotate 'line', 1906
    $P516 = _lex_param_1."!make"($P101)
    find_lex $P517, "RETURN"
    $P518 = $P517(1)
    set $P520, $P518
    goto if1360_end4068
  if1360_else4067:
.annotate 'line', 1909
.annotate 'line', 1910
    $P519 = $P101."blocktype"("immediate")
    set $P520, $P519
  if1360_end4068:
    set $P521, $P520
  if1359_end4065:
.annotate 'line', 1913
    get_hll_global $P526, "GLOBAL"
    nqp_get_package_through_who $P525, $P526, "QAST"
    get_who $P524, $P525
    set $P523, $P524["Op"]
    unless_null $P523, fallback4073
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P527
  fallback4073:
.annotate 'line', 1917
    get_hll_global $P531, "GLOBAL"
    nqp_get_package_through_who $P530, $P531, "QAST"
    get_who $P529, $P530
    set $P528, $P529["Stmts"]
    unless_null $P528, fallback4074
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P528, $P532
  fallback4074:
.annotate 'line', 1918
    get_hll_global $P536, "GLOBAL"
    nqp_get_package_through_who $P535, $P536, "QAST"
    get_who $P534, $P535
    set $P533, $P534["Op"]
    unless_null $P533, fallback4075
    nqp_get_sc_object $P537, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P537
  fallback4075:
.annotate 'line', 1920
    get_hll_global $P541, "GLOBAL"
    nqp_get_package_through_who $P540, $P541, "QAST"
    get_who $P539, $P540
    set $P538, $P539["Op"]
    unless_null $P538, fallback4076
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P538, $P542
  fallback4076:
    $P543 = $P538."new"("exception" :named("op"))
.annotate 'line', 1921
    get_hll_global $P547, "GLOBAL"
    nqp_get_package_through_who $P546, $P547, "QAST"
    get_who $P545, $P546
    set $P544, $P545["SVal"]
    unless_null $P544, fallback4077
    nqp_get_sc_object $P548, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P544, $P548
  fallback4077:
    $P549 = $P544."new"("handled" :named("value"))
.annotate 'line', 1922
    get_hll_global $P553, "GLOBAL"
    nqp_get_package_through_who $P552, $P553, "QAST"
    get_who $P551, $P552
    set $P550, $P551["IVal"]
    unless_null $P550, fallback4078
    nqp_get_sc_object $P554, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P550, $P554
  fallback4078:
    $P555 = $P550."new"(1 :named("value"))
    $P556 = $P533."new"($P543, $P549, $P555, "bindkey_i" :named("op"))
.annotate 'line', 1924
    $P557 = "&default_for"("$")
    $P558 = $P528."new"($P556, $P557)
    $P559 = $P523."new"($P101, "CATCH", $P558, "handle" :named("op"))
    $P560 = _lex_param_1."!make"($P559)
    goto lexotic_4062
  lexotic_4061:
    .get_results ($P560)
  lexotic_4062:
    .return ($P560) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_269_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1928
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1929
    set $P501, _lex_param_1["block"]
    unless_null $P501, fallback4081
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4081:
    unless $P501 goto if1362_else4079 
.annotate 'line', 1930
    set $P503, _lex_param_1["block"]
    unless_null $P503, fallback4082
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4082:
    $P505 = $P503."ast"()
    $P506 = "&block_immediate"($P505)
    set $P510, $P506
    goto if1362_end4080
  if1362_else4079:
.annotate 'line', 1931
    set $P507, _lex_param_1["statement"]
    unless_null $P507, fallback4083
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4083:
    $P509 = $P507."ast"()
    set $P510, $P509
  if1362_end4080:
    $P511 = _lex_param_1."!make"($P510)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_270_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1936
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["cond"]
    unless_null $P501, fallback4084
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4084:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_271_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["cond"]
    unless_null $P501, fallback4085
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4085:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_272_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1939
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["cond"]
    unless_null $P501, fallback4086
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4086:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_273_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1940
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["cond"]
    unless_null $P501, fallback4087
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4087:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "EXPR" :subid("cuid_274_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1944
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P527 = 'cuid_433_1346233478.067' 
    capture_lex $P527 
    .const 'Sub' $P527 = 'cuid_434_1346233478.067' 
    capture_lex $P527 
    if haz_param_4, default4120
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set _lex_param_2, $P526
  default4120:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4088
    .lex "RETURN", $P102
    set $P504, _lex_param_2
    if _lex_param_2 goto unless1363_end4091 
.annotate 'line', 1945
    find_lex $P502, "RETURN"
    $P503 = $P502(0)
    set $P504, $P503
  unless1363_end4091:
.annotate 'line', 1946
    $P506 = _lex_param_1."ast"()
    set $P505, $P506
    defined $I501, $P505
    if $I501, defor4092
    set $P507, _lex_param_1["OPER"]
    unless_null $P507, fallback4093
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4093:
    $P509 = $P507."ast"()
    set $P505, $P509
  defor4092:
    set $P101, $P505
    set $P512, $P101
    if $P101 goto unless1364_end4095 
    .const 'Sub' $P510 = 'cuid_433_1346233478.067' 
    capture_lex $P510
    $P511 = $P510()
    set $P512, $P511
  unless1364_end4095:
    set $S501, _lex_param_2
    iseq $I502, $S501, "POSTFIX"
    unless $I502 goto if1368_else4111 
.annotate 'line', 1959
.annotate 'line', 1960
    set $P513, _lex_param_1[0]
    unless_null $P513, fallback4113
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P514
  fallback4113:
    $P515 = $P513."ast"()
    $P516 = $P101."unshift"($P515)
    set $P524, $P516
    goto if1368_end4112
  if1368_else4111:
.annotate 'line', 1962
.annotate 'line', 1963
    $P520 = _lex_param_1."list"()
    set $P517, $P520
    iter $P519, $P520
    new $P522, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P522, for_handlers4116
    push_eh $P522
  for_next4117:
    unless $P519, for_done4119
    shift $P523, $P519
  for_redo4118:
    .const 'Sub' $P521 = 'cuid_434_1346233478.067' 
    capture_lex $P521
    $P517 = $P521($P523)
    goto for_next4117
  for_handlers4116:
    .get_results ($P522)
    pop_upto_eh $P522
    getattribute $P522, $P522, 'type'
    eq $P522, .CONTROL_LOOP_NEXT, for_next4117
    eq $P522, .CONTROL_LOOP_REDO, for_redo4118
  for_done4119:
    pop_eh 
    set $P524, $P517
  if1368_end4112:
.annotate 'line', 1965
    $P525 = _lex_param_1."!make"($P101)
    goto lexotic_4089
  lexotic_4088:
    .get_results ($P525)
  lexotic_4089:
    .return ($P525) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_433_1346233478.067") :anon :lex :outer("cuid_274_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1947
    .lex "$name", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1948
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["Op"]
    unless_null $P502, fallback4096
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback4096:
    find_lex $P507, "$/"
    $P508 = $P502."new"($P507 :named("node"))
    store_lex "$past", $P508
    find_lex $P512, "$/"
    set $P511, $P512["OPER"]
    unless_null $P511, fallback4099
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P513
  fallback4099:
    set $P510, $P511["O"]
    unless_null $P510, fallback4100
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P514
  fallback4100:
    set $P509, $P510["op"]
    unless_null $P509, fallback4101
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P515
  fallback4101:
    set $P525, $P509
    unless $P509 goto if1365_end4098 
.annotate 'line', 1949
.annotate 'line', 1950
    find_lex $P516, "$past"
    find_lex $P520, "$/"
    set $P519, $P520["OPER"]
    unless_null $P519, fallback4102
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P521
  fallback4102:
    set $P518, $P519["O"]
    unless_null $P518, fallback4103
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P522
  fallback4103:
    set $P517, $P518["op"]
    unless_null $P517, fallback4104
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P523
  fallback4104:
    set $S501, $P517
    $P524 = $P516."op"($S501)
    set $P525, $P524
  if1365_end4098:
    find_lex $P526, "$key"
    set $S502, $P526
    iseq $I501, $S502, "LIST"
    box $P529, $I501
    set $P528, $P529
    unless $I501 goto if1366_end4106 
.annotate 'line', 1952
    box $P527, "infix"
    store_lex "$key", $P527
    set $P528, $P527
  if1366_end4106:
    find_lex $P530, "$key"
    set $S507, $P530
    downcase $S506, $S507
    concat $S505, $S506, ":<"
    find_lex $P533, "$/"
    set $P532, $P533["OPER"]
    unless_null $P532, fallback4107
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P532, $P534
  fallback4107:
    set $P531, $P532["sym"]
    unless_null $P531, fallback4108
    nqp_get_sc_object $P535, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P531, $P535
  fallback4108:
    set $S508, $P531
    concat $S504, $S505, $S508
    concat $S503, $S504, ">"
    box $P536, $S503
    set $P101, $P536
.annotate 'line', 1954
    find_lex $P537, "$past"
    set $S510, $P101
    concat $S509, "&", $S510
    $P538 = $P537."name"($S509)
.annotate 'line', 1955
    find_lex $P539, "$past"
    $P540 = $P539."op"()
    set $P543, $P540
    if $P540 goto unless1367_end4110 
.annotate 'line', 1956
    find_lex $P541, "$past"
    $P542 = $P541."op"("call")
    set $P543, $P542
  unless1367_end4110:
    .return ($P543) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1346233478.067") :anon :lex :outer("cuid_274_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1963
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    $P501 = _lex_param_0."ast"()
    defined $I501, $P501
    box $P506, $I501
    set $P505, $P506
    unless $I501 goto if1369_end4115 
    find_lex $P502, "$past"
    $P503 = _lex_param_0."ast"()
    $P504 = $P502."push"($P503)
    set $P505, $P504
  if1369_end4115:
    .return ($P505) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_275_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1970
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["fatarrow"]
    unless_null $P501, fallback4121
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4121:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_276_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1971
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["colonpair"]
    unless_null $P501, fallback4122
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4122:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_277_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1972
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["variable"]
    unless_null $P501, fallback4123
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4123:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_278_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1973
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["package_declarator"]
    unless_null $P501, fallback4124
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4124:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_279_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1974
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["scope_declarator"]
    unless_null $P501, fallback4125
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4125:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_280_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1975
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["routine_declarator"]
    unless_null $P501, fallback4126
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4126:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_281_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["regex_declarator"]
    unless_null $P501, fallback4127
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4127:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_282_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1977
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["statement_prefix"]
    unless_null $P501, fallback4128
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4128:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_283_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1978
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1979
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback4129
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback4129:
    set $P506, _lex_param_1["pblock"]
    unless_null $P506, fallback4130
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4130:
    $P508 = $P506."ast"()
    $P509 = $P501."new"($P508, "takeclosure" :named("op"))
    $P510 = _lex_param_1."!make"($P509)
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_284_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 1983
    set $P502, _lex_param_1["val"]
    unless_null $P502, fallback4131
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4131:
    $P504 = $P502."ast"()
    set $P101, $P504
.annotate 'line', 1984
    set $P505, _lex_param_1["key"]
    unless_null $P505, fallback4132
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback4132:
    $P507 = $P505."Str"()
    $P508 = $P101."named"($P507)
.annotate 'line', 1985
    $P509 = _lex_param_1."!make"($P101)
    .return ($P509) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_285_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1988
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P518 = 'cuid_435_1346233478.067' 
    capture_lex $P518 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["variable"]
    unless_null $P501, fallback4135
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4135:
    unless $P501 goto if1370_else4133 
.annotate 'line', 1989
.annotate 'line', 1990
    set $P503, _lex_param_1["variable"]
    unless_null $P503, fallback4136
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4136:
    $P505 = $P503."ast"()
    set $P507, _lex_param_1["variable"]
    unless_null $P507, fallback4137
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4137:
    set $P506, $P507["desigilname"]
    unless_null $P506, fallback4138
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P509
  fallback4138:
    set $S501, $P506
    $P510 = $P505."named"($S501)
.annotate 'line', 1991
    set $P511, _lex_param_1["variable"]
    unless_null $P511, fallback4139
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P512
  fallback4139:
    $P513 = $P511."ast"()
    $P514 = _lex_param_1."!make"($P513)
    set $P517, $P514
    goto if1370_end4134
  if1370_else4133:
    .const 'Sub' $P515 = 'cuid_435_1346233478.067' 
    capture_lex $P515
    $P516 = $P515()
    set $P517, $P516
  if1370_end4134:
    .return ($P517) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1346233478.067") :anon :lex :outer("cuid_285_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1992
    .lex "$past", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    find_lex $P503, "$/"
    set $P502, $P503["circumfix"]
    unless_null $P502, fallback4142
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P504
  fallback4142:
    unless $P502 goto if1371_else4140 
.annotate 'line', 1994
    find_lex $P507, "$/"
    set $P506, $P507["circumfix"]
    unless_null $P506, fallback4143
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P508
  fallback4143:
    set $P505, $P506[0]
    unless_null $P505, fallback4144
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P509
  fallback4144:
    $P510 = $P505."ast"()
    set $P520, $P510
    goto if1371_end4141
  if1371_else4140:
.annotate 'line', 1995
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["IVal"]
    unless_null $P511, fallback4145
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback4145:
    find_lex $P517, "$/"
    set $P516, $P517["not"]
    unless_null $P516, fallback4146
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P518
  fallback4146:
    isfalse $I501, $P516
    $P519 = $P511."new"($I501 :named("value"))
    set $P520, $P519
  if1371_end4141:
    set $P101, $P520
.annotate 'line', 1996
    find_lex $P522, "$/"
    set $P521, $P522["identifier"]
    unless_null $P521, fallback4147
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P523
  fallback4147:
    set $S501, $P521
    $P524 = $P101."named"($S501)
.annotate 'line', 1997
    find_dynamic_lex $P525, "$/"
    $P526 = $P525."!make"($P101)
    .return ($P526) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_286_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2001
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P518 = 'cuid_437_1346233478.067' 
    capture_lex $P518 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1["postcircumfix"]
    unless_null $P502, fallback4150
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4150:
    unless $P502 goto if1372_else4148 
.annotate 'line', 2003
.annotate 'line', 2004
    set $P504, _lex_param_1["postcircumfix"]
    unless_null $P504, fallback4151
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback4151:
    $P506 = $P504."ast"()
    set $P101, $P506
.annotate 'line', 2005
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["Var"]
    unless_null $P507, fallback4152
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback4152:
    $P512 = $P507."new"("$/" :named("name"), "lexical" :named("scope"))
    $P513 = $P101."unshift"($P512)
    set $P516, $P513
    goto if1372_end4149
  if1372_else4148:
    .const 'Sub' $P514 = 'cuid_437_1346233478.067' 
    capture_lex $P514
    $P515 = $P514()
    set $P516, $P515
  if1372_end4149:
.annotate 'line', 2073
    $P517 = _lex_param_1."!make"($P101)
    .return ($P517) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1346233478.067") :anon :lex :outer("cuid_286_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2007
    .const 'Sub' $P560 = 'cuid_436_1346233478.067' 
    capture_lex $P560 
    .const 'Sub' $P560 = 'cuid_440_1346233478.067' 
    capture_lex $P560 
    .lex "@name", $P101 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
.annotate 'line', 2008
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "NQP"
    get_who $P503, $P504
    set $P502, $P503["Compiler"]
    unless_null $P502, fallback4153
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback4153:
    find_lex $P507, "$/"
    set $S501, $P507
    $P508 = $P502."parse_name"($S501)
    set $P101, $P508
    set $N501, $P101
    set $N502, 1
    isgt $I501, $N501, $N502
    unless $I501 goto if1373_else4154 
.annotate 'line', 2009
    find_lex $P510, "$/"
    set $P509, $P510["twigil"]
    unless_null $P509, fallback4158
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P511
  fallback4158:
    set $P515, $P509
    unless $P509 goto if1374_end4157 
.annotate 'line', 2010
.annotate 'line', 2011
    find_lex $P512, "$/"
    $P513 = $P512."CURSOR"()
    $P514 = $P513."panic"("Twigil not allowed on multi-part name")
    set $P515, $P514
  if1374_end4157:
.annotate 'line', 2013
    find_lex $P516, "$/"
    $P517 = "&lexical_package_lookup"($P101, $P516)
    store_lex "$past", $P517
    set $P559, $P517
    goto if1373_end4155
  if1373_else4154:
    find_lex $P520, "$/"
    set $P519, $P520["twigil"]
    unless_null $P519, fallback4161
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P521
  fallback4161:
    set $P518, $P519[0]
    unless_null $P518, fallback4162
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P522
  fallback4162:
    set $S502, $P518
    iseq $I502, $S502, "*"
    unless $I502 goto if1375_else4159 
    .const 'Sub' $P523 = 'cuid_436_1346233478.067' 
    capture_lex $P523
    $P524 = $P523()
    set $P558, $P524
    goto if1375_end4160
  if1375_else4159:
    find_lex $P527, "$/"
    set $P526, $P527["twigil"]
    unless_null $P526, fallback4171
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P528
  fallback4171:
    set $P525, $P526[0]
    unless_null $P525, fallback4172
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P529
  fallback4172:
    set $S503, $P525
    iseq $I503, $S503, "!"
    unless $I503 goto if1376_else4169 
    .const 'Sub' $P530 = 'cuid_440_1346233478.067' 
    capture_lex $P530
    $P531 = $P530()
    set $P557, $P531
    goto if1376_end4170
  if1376_else4169:
.annotate 'line', 2065
    find_dynamic_lex $P532, "$*W"
    unless_null $P532, fallback4212
    get_hll_global $P535, "GLOBAL"
    get_who $P534, $P535
    set $P533, $P534["$W"]
    unless_null $P533, fallback4213
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P536
  fallback4213:
    unless_null $P533, vivi_13894214
    die "Contextual $*W not found"
    box $P537, "Contextual $*W not found"
    set $P533, $P537
  vivi_13894214:
    set $P532, $P533
  fallback4212:
    set $P538, $P101[0]
    unless_null $P538, fallback4215
    nqp_get_sc_object $P539, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P538, $P539
  fallback4215:
    set $S504, $P538
    $P540 = $P532."is_package"($S504)
    unless $P540 goto if1388_else4210 
.annotate 'line', 2066
    find_lex $P541, "$/"
    $P542 = "&lexical_package_lookup"($P101, $P541)
    store_lex "$past", $P542
.annotate 'line', 2067
    find_lex $P543, "$past"
    find_lex $P545, "$/"
    set $P544, $P545["sigil"]
    unless_null $P544, fallback4216
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P544, $P546
  fallback4216:
    $P547 = "&default_for"($P544)
    $P548 = $P543."fallback"($P547)
    set $P556, $P548
    goto if1388_end4211
  if1388_else4210:
.annotate 'line', 2069
.annotate 'line', 2070
    get_hll_global $P552, "GLOBAL"
    nqp_get_package_through_who $P551, $P552, "QAST"
    get_who $P550, $P551
    set $P549, $P550["Var"]
    unless_null $P549, fallback4217
    nqp_get_sc_object $P553, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P553
  fallback4217:
    $P554 = $P101."pop"()
    set $S505, $P554
    $P555 = $P549."new"($S505 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P555
    set $P556, $P555
  if1388_end4211:
    set $P557, $P556
  if1376_end4170:
    set $P558, $P557
  if1375_end4160:
    set $P559, $P558
  if1373_end4155:
    .return ($P559) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1346233478.067") :anon :lex :outer("cuid_437_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2015
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2016
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["Op"]
    unless_null $P502, fallback4163
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback4163:
.annotate 'line', 2018
    new $P507, 'ResizablePMCArray'
    box $P508, "GLOBAL"
    push $P507, $P508
    find_lex $P510, "$/"
    set $P509, $P510["sigil"]
    unless_null $P509, fallback4164
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P511
  fallback4164:
    set $S502, $P509
    find_lex $P513, "$/"
    set $P512, $P513["desigilname"]
    unless_null $P512, fallback4165
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P514
  fallback4165:
    set $S503, $P512
    concat $S501, $S502, $S503
    box $P515, $S501
    push $P507, $P515
    find_lex $P516, "$/"
    $P517 = "&lexical_package_lookup"($P507, $P516)
.annotate 'line', 2019
    get_hll_global $P521, "GLOBAL"
    nqp_get_package_through_who $P520, $P521, "QAST"
    get_who $P519, $P520
    set $P518, $P519["Op"]
    unless_null $P518, fallback4166
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P522
  fallback4166:
.annotate 'line', 2021
    get_hll_global $P526, "GLOBAL"
    nqp_get_package_through_who $P525, $P526, "QAST"
    get_who $P524, $P525
    set $P523, $P524["SVal"]
    unless_null $P523, fallback4167
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P527
  fallback4167:
    find_lex $P528, "$/"
    set $S506, $P528
    concat $S505, "Contextual ", $S506
    concat $S504, $S505, " not found"
    $P529 = $P523."new"($S504 :named("value"))
    $P530 = $P518."new"($P529, "die_s" :named("op"))
    $P531 = $P502."new"($P517, $P530, "ifnull" :named("op"))
    set $P101, $P531
.annotate 'line', 2023
    get_hll_global $P535, "GLOBAL"
    nqp_get_package_through_who $P534, $P535, "QAST"
    get_who $P533, $P534
    set $P532, $P533["VarWithFallback"]
    unless_null $P532, fallback4168
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P532, $P536
  fallback4168:
.annotate 'line', 2024
    find_lex $P537, "@name"
    $P538 = $P537."pop"()
    set $S507, $P538
    $P539 = $P532."new"($S507 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P539
    .return ($P539) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1346233478.067") :anon :lex :outer("cuid_437_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2028
    .const 'Sub' $P565 = 'cuid_439_1346233478.067' 
    capture_lex $P565 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 2030
    find_lex $P503, "@name"
    $P504 = $P503."pop"()
    set $S501, $P504
    box $P505, $S501
    set $P101, $P505
    find_dynamic_lex $P506, "$*PKGDECL"
    unless_null $P506, fallback4175
    get_hll_global $P509, "GLOBAL"
    get_who $P508, $P509
    set $P507, $P508["$PKGDECL"]
    unless_null $P507, fallback4176
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P510
  fallback4176:
    unless_null $P507, vivi_13784177
    die "Contextual $*PKGDECL not found"
    box $P511, "Contextual $*PKGDECL not found"
    set $P507, $P511
  vivi_13784177:
    set $P506, $P507
  fallback4175:
    set $S502, $P506
    iseq $I501, $S502, "role"
    unless $I501 goto if1377_else4173 
.annotate 'line', 2032
.annotate 'line', 2033
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Var"]
    unless_null $P512, fallback4178
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback4178:
    $P517 = $P512."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P517
.annotate 'line', 2034
    find_dynamic_lex $P518, "$*PACKAGE"
    unless_null $P518, fallback4179
    get_hll_global $P521, "GLOBAL"
    get_who $P520, $P521
    set $P519, $P520["$PACKAGE"]
    unless_null $P519, fallback4180
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P522
  fallback4180:
    unless_null $P519, vivi_13794181
    die "Contextual $*PACKAGE not found"
    box $P523, "Contextual $*PACKAGE not found"
    set $P519, $P523
  vivi_13794181:
    set $P518, $P519
  fallback4179:
    $P524 = $P102."set_compile_time_value"($P518)
    set $P537, $P524
    goto if1377_end4174
  if1377_else4173:
.annotate 'line', 2036
.annotate 'line', 2037
    get_hll_global $P528, "GLOBAL"
    nqp_get_package_through_who $P527, $P528, "QAST"
    get_who $P526, $P527
    set $P525, $P526["WVal"]
    unless_null $P525, fallback4182
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P529
  fallback4182:
    find_dynamic_lex $P530, "$*PACKAGE"
    unless_null $P530, fallback4183
    get_hll_global $P533, "GLOBAL"
    get_who $P532, $P533
    set $P531, $P532["$PACKAGE"]
    unless_null $P531, fallback4184
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P531, $P534
  fallback4184:
    unless_null $P531, vivi_13804185
    die "Contextual $*PACKAGE not found"
    box $P535, "Contextual $*PACKAGE not found"
    set $P531, $P535
  vivi_13804185:
    set $P530, $P531
  fallback4183:
    $P536 = $P525."new"($P530 :named("value"))
    set $P102, $P536
    set $P537, $P102
  if1377_end4174:
.annotate 'line', 2039
    get_hll_global $P541, "GLOBAL"
    nqp_get_package_through_who $P540, $P541, "QAST"
    get_who $P539, $P540
    set $P538, $P539["Var"]
    unless_null $P538, fallback4186
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P538, $P542
  fallback4186:
.annotate 'line', 2041
    get_hll_global $P546, "GLOBAL"
    nqp_get_package_through_who $P545, $P546, "QAST"
    get_who $P544, $P545
    set $P543, $P544["VM"]
    unless_null $P543, fallback4187
    nqp_get_sc_object $P547, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P543, $P547
  fallback4187:
.annotate 'line', 2042
    get_hll_global $P551, "GLOBAL"
    nqp_get_package_through_who $P550, $P551, "QAST"
    get_who $P549, $P550
    set $P548, $P549["Var"]
    unless_null $P548, fallback4188
    nqp_get_sc_object $P552, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P548, $P552
  fallback4188:
    $P553 = $P548."new"("self" :named("name"), "lexical" :named("scope"))
    $P554 = $P543."new"($P553, "nqp_decontainerize PP" :named("pirop"))
    $P555 = $P538."new"($P554, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P555
    find_dynamic_lex $P556, "$*IN_DECL"
    unless_null $P556, fallback4191
    get_hll_global $P559, "GLOBAL"
    get_who $P558, $P559
    set $P557, $P558["$IN_DECL"]
    unless_null $P557, fallback4192
    nqp_get_sc_object $P560, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P557, $P560
  fallback4192:
    unless_null $P557, vivi_13824193
    die "Contextual $*IN_DECL not found"
    box $P561, "Contextual $*IN_DECL not found"
    set $P557, $P561
  vivi_13824193:
    set $P556, $P557
  fallback4191:
    set $P564, $P556
    if $P556 goto unless1381_end4190 
    .const 'Sub' $P562 = 'cuid_439_1346233478.067' 
    capture_lex $P562
    $P563 = $P562()
    set $P564, $P563
  unless1381_end4190:
    .return ($P564) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1346233478.067") :anon :lex :outer("cuid_440_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2047
    .const 'Sub' $P532 = 'cuid_438_1346233478.067' 
    capture_lex $P532 
    .lex "$attr", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2049
    find_dynamic_lex $P506, "$*PACKAGE"
    unless_null $P506, fallback4194
    get_hll_global $P509, "GLOBAL"
    get_who $P508, $P509
    set $P507, $P508["$PACKAGE"]
    unless_null $P507, fallback4195
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P510
  fallback4195:
    unless_null $P507, vivi_13834196
    die "Contextual $*PACKAGE not found"
    box $P511, "Contextual $*PACKAGE not found"
    set $P507, $P511
  vivi_13834196:
    set $P506, $P507
  fallback4194:
    get_how $P505, $P506
    find_dynamic_lex $P512, "$*PACKAGE"
    unless_null $P512, fallback4197
    get_hll_global $P515, "GLOBAL"
    get_who $P514, $P515
    set $P513, $P514["$PACKAGE"]
    unless_null $P513, fallback4198
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P516
  fallback4198:
    unless_null $P513, vivi_13844199
    die "Contextual $*PACKAGE not found"
    box $P517, "Contextual $*PACKAGE not found"
    set $P513, $P517
  vivi_13844199:
    set $P512, $P513
  fallback4197:
    $P518 = $P505."attributes"($P512, 1 :named("local"))
    set $P502, $P518
    iter $P504, $P518
    new $P520, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P520, for_handlers4202
    push_eh $P520
  for_next4203:
    unless $P504, for_done4205
    shift $P521, $P504
  for_redo4204:
    .const 'Sub' $P519 = 'cuid_438_1346233478.067' 
    capture_lex $P519
    $P502 = $P519($P521)
    goto for_next4203
  for_handlers4202:
    .get_results ($P520)
    pop_upto_eh $P520
    getattribute $P520, $P520, 'type'
    eq $P520, .CONTROL_LOOP_NEXT, for_next4203
    eq $P520, .CONTROL_LOOP_REDO, for_redo4204
  for_done4205:
    pop_eh 
    defined $I501, $P101
    unless $I501 goto if1386_else4206 
.annotate 'line', 2055
    can $I502, $P101, "type"
    box $P526, $I502
    set $P525, $P526
    unless $I502 goto if1387_end4209 
.annotate 'line', 2056
.annotate 'line', 2057
    find_lex $P522, "$past"
    $P523 = $P101."type"()
    $P524 = $P522."returns"($P523)
    set $P525, $P524
  if1387_end4209:
    set $P531, $P525
    goto if1386_end4207
  if1386_else4206:
.annotate 'line', 2060
.annotate 'line', 2061
    find_lex $P527, "$/"
    $P528 = $P527."CURSOR"()
    find_lex $P529, "$name"
    set $S503, $P529
    concat $S502, "Attribute '", $S503
    concat $S501, $S502, "' not declared"
    $P530 = $P528."panic"($S501)
    set $P531, $P530
  if1386_end4207:
    .return ($P531) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1346233478.067") :anon :lex :outer("cuid_439_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2049
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2050
    $P501 = _lex_param_0."name"()
    set $S501, $P501
    find_lex $P502, "$name"
    set $S502, $P502
    iseq $I501, $S501, $S502
    set $I502, $I501
    unless $I501 goto if1385_end4201 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I502, 0
  if1385_end4201:
    .return ($I502) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_287_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2076
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["package_def"]
    unless_null $P501, fallback4218
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4218:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_288_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2077
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["package_def"]
    unless_null $P501, fallback4219
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4219:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_289_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2078
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["package_def"]
    unless_null $P501, fallback4220
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4220:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_290_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2079
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["package_def"]
    unless_null $P501, fallback4221
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4221:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_291_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2080
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["package_def"]
    unless_null $P501, fallback4222
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4222:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_292_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2081
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["package_def"]
    unless_null $P501, fallback4223
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4223:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_293_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2083
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 2086
    find_dynamic_lex $P503, "$*W"
    unless_null $P503, fallback4224
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$W"]
    unless_null $P504, fallback4225
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback4225:
    unless_null $P504, vivi_13904226
    die "Contextual $*W not found"
    box $P508, "Contextual $*W not found"
    set $P504, $P508
  vivi_13904226:
    set $P503, $P504
  fallback4224:
    set $P510, _lex_param_1["metaclass"]
    unless_null $P510, fallback4227
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4227:
    set $P509, $P510["identifier"]
    unless_null $P509, fallback4228
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P512
  fallback4228:
    $P513 = $P503."find_sym"($P509)
    set $P101, $P513
.annotate 'line', 2087
    find_dynamic_lex $P514, "$*W"
    unless_null $P514, fallback4229
    get_hll_global $P517, "GLOBAL"
    get_who $P516, $P517
    set $P515, $P516["$W"]
    unless_null $P515, fallback4230
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P518
  fallback4230:
    unless_null $P515, vivi_13914231
    die "Contextual $*W not found"
    box $P519, "Contextual $*W not found"
    set $P515, $P519
  vivi_13914231:
    set $P514, $P515
  fallback4229:
    set $P520, _lex_param_1["name"]
    unless_null $P520, fallback4232
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P521
  fallback4232:
    set $S501, $P520
    $P522 = $P514."pkg_create_mo"($P101, $S501 :named("name"))
    set $P102, $P522
    find_dynamic_lex $P523, "$*SCOPE"
    unless_null $P523, fallback4237
    get_hll_global $P526, "GLOBAL"
    get_who $P525, $P526
    set $P524, $P525["$SCOPE"]
    unless_null $P524, fallback4238
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P527
  fallback4238:
    unless_null $P524, vivi_13944239
    die "Contextual $*SCOPE not found"
    box $P528, "Contextual $*SCOPE not found"
    set $P524, $P528
  vivi_13944239:
    set $P523, $P524
  fallback4237:
    set $S502, $P523
    iseq $I501, $S502, "our"
    set $I503, $I501
    if $I501 goto unless1393_end4236 
    find_dynamic_lex $P529, "$*SCOPE"
    unless_null $P529, fallback4240
    get_hll_global $P532, "GLOBAL"
    get_who $P531, $P532
    set $P530, $P531["$SCOPE"]
    unless_null $P530, fallback4241
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P533
  fallback4241:
    unless_null $P530, vivi_13954242
    die "Contextual $*SCOPE not found"
    box $P534, "Contextual $*SCOPE not found"
    set $P530, $P534
  vivi_13954242:
    set $P529, $P530
  fallback4240:
    set $S503, $P529
    iseq $I502, $S503, ""
    set $I503, $I502
  unless1393_end4236:
    unless $I503 goto if1392_else4233 
.annotate 'line', 2090
.annotate 'line', 2091
    find_dynamic_lex $P535, "$*W"
    unless_null $P535, fallback4243
    get_hll_global $P538, "GLOBAL"
    get_who $P537, $P538
    set $P536, $P537["$W"]
    unless_null $P536, fallback4244
    nqp_get_sc_object $P539, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P536, $P539
  fallback4244:
    unless_null $P536, vivi_13964245
    die "Contextual $*W not found"
    box $P540, "Contextual $*W not found"
    set $P536, $P540
  vivi_13964245:
    set $P535, $P536
  fallback4243:
    find_dynamic_lex $P541, "$*OUTERPACKAGE"
    unless_null $P541, fallback4246
    get_hll_global $P544, "GLOBAL"
    get_who $P543, $P544
    set $P542, $P543["$OUTERPACKAGE"]
    unless_null $P542, fallback4247
    nqp_get_sc_object $P545, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P542, $P545
  fallback4247:
    unless_null $P542, vivi_13974248
    die "Contextual $*OUTERPACKAGE not found"
    box $P546, "Contextual $*OUTERPACKAGE not found"
    set $P542, $P546
  vivi_13974248:
    set $P541, $P542
  fallback4246:
    set $P548, _lex_param_1["name"]
    unless_null $P548, fallback4249
    nqp_get_sc_object $P549, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P548, $P549
  fallback4249:
    set $P547, $P548["identifier"]
    unless_null $P547, fallback4250
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P547, $P550
  fallback4250:
    $P551 = $P535."install_package_symbol"($P541, $P547, $P102)
    set $P553, _lex_param_1["name"]
    unless_null $P553, fallback4253
    nqp_get_sc_object $P554, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P553, $P554
  fallback4253:
    set $P552, $P553["identifier"]
    unless_null $P552, fallback4254
    nqp_get_sc_object $P555, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P552, $P555
  fallback4254:
    set $N501, $P552
    set $N502, 1
    iseq $I504, $N501, $N502
    box $P577, $I504
    set $P576, $P577
    unless $I504 goto if1398_end4252 
.annotate 'line', 2092
.annotate 'line', 2093
    find_dynamic_lex $P556, "$*W"
    unless_null $P556, fallback4255
    get_hll_global $P559, "GLOBAL"
    get_who $P558, $P559
    set $P557, $P558["$W"]
    unless_null $P557, fallback4256
    nqp_get_sc_object $P560, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P557, $P560
  fallback4256:
    unless_null $P557, vivi_13994257
    die "Contextual $*W not found"
    box $P561, "Contextual $*W not found"
    set $P557, $P561
  vivi_13994257:
    set $P556, $P557
  fallback4255:
    find_dynamic_lex $P562, "$*W"
    unless_null $P562, fallback4258
    get_hll_global $P565, "GLOBAL"
    get_who $P564, $P565
    set $P563, $P564["$W"]
    unless_null $P563, fallback4259
    nqp_get_sc_object $P566, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P563, $P566
  fallback4259:
    unless_null $P563, vivi_14004260
    die "Contextual $*W not found"
    box $P567, "Contextual $*W not found"
    set $P563, $P567
  vivi_14004260:
    set $P562, $P563
  fallback4258:
    $P568 = $P562."cur_lexpad"()
    set $P571, _lex_param_1["name"]
    unless_null $P571, fallback4261
    nqp_get_sc_object $P572, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P571, $P572
  fallback4261:
    set $P570, $P571["identifier"]
    unless_null $P570, fallback4262
    nqp_get_sc_object $P573, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P570, $P573
  fallback4262:
    set $P569, $P570[0]
    unless_null $P569, fallback4263
    nqp_get_sc_object $P574, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P574
  fallback4263:
    $P575 = $P556."install_lexical_symbol"($P568, $P569, $P102)
    set $P576, $P575
  if1398_end4252:
    set $P623, $P576
    goto if1392_end4234
  if1392_else4233:
    find_dynamic_lex $P578, "$*SCOPE"
    unless_null $P578, fallback4266
    get_hll_global $P581, "GLOBAL"
    get_who $P580, $P581
    set $P579, $P580["$SCOPE"]
    unless_null $P579, fallback4267
    nqp_get_sc_object $P582, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P579, $P582
  fallback4267:
    unless_null $P579, vivi_14024268
    die "Contextual $*SCOPE not found"
    box $P583, "Contextual $*SCOPE not found"
    set $P579, $P583
  vivi_14024268:
    set $P578, $P579
  fallback4266:
    set $S504, $P578
    iseq $I505, $S504, "my"
    unless $I505 goto if1401_else4264 
.annotate 'line', 2096
    set $P585, _lex_param_1["name"]
    unless_null $P585, fallback4271
    nqp_get_sc_object $P586, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P585, $P586
  fallback4271:
    set $P584, $P585["identifier"]
    unless_null $P584, fallback4272
    nqp_get_sc_object $P587, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P584, $P587
  fallback4272:
    set $N503, $P584
    set $N504, 1
    isne $I506, $N503, $N504
    box $P593, $I506
    set $P592, $P593
    unless $I506 goto if1403_end4270 
.annotate 'line', 2097
.annotate 'line', 2098
    set $P588, _lex_param_1["name"]
    unless_null $P588, fallback4273
    nqp_get_sc_object $P589, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P588, $P589
  fallback4273:
    $P590 = $P588."CURSOR"()
    $P591 = $P590."panic"("A my scoped package cannot have a multi-part name yet")
    set $P592, $P591
  if1403_end4270:
.annotate 'line', 2100
    find_dynamic_lex $P594, "$*W"
    unless_null $P594, fallback4274
    get_hll_global $P597, "GLOBAL"
    get_who $P596, $P597
    set $P595, $P596["$W"]
    unless_null $P595, fallback4275
    nqp_get_sc_object $P598, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P595, $P598
  fallback4275:
    unless_null $P595, vivi_14044276
    die "Contextual $*W not found"
    box $P599, "Contextual $*W not found"
    set $P595, $P599
  vivi_14044276:
    set $P594, $P595
  fallback4274:
    find_dynamic_lex $P600, "$*W"
    unless_null $P600, fallback4277
    get_hll_global $P603, "GLOBAL"
    get_who $P602, $P603
    set $P601, $P602["$W"]
    unless_null $P601, fallback4278
    nqp_get_sc_object $P604, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P601, $P604
  fallback4278:
    unless_null $P601, vivi_14054279
    die "Contextual $*W not found"
    box $P605, "Contextual $*W not found"
    set $P601, $P605
  vivi_14054279:
    set $P600, $P601
  fallback4277:
    $P606 = $P600."cur_lexpad"()
    set $P609, _lex_param_1["name"]
    unless_null $P609, fallback4280
    nqp_get_sc_object $P610, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P609, $P610
  fallback4280:
    set $P608, $P609["identifier"]
    unless_null $P608, fallback4281
    nqp_get_sc_object $P611, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P608, $P611
  fallback4281:
    set $P607, $P608[0]
    unless_null $P607, fallback4282
    nqp_get_sc_object $P612, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P607, $P612
  fallback4282:
    $P613 = $P594."install_lexical_symbol"($P606, $P607, $P102)
    set $P622, $P613
    goto if1401_end4265
  if1401_else4264:
.annotate 'line', 2102
.annotate 'line', 2103
    $P614 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P615, "$*SCOPE"
    unless_null $P615, fallback4283
    get_hll_global $P618, "GLOBAL"
    get_who $P617, $P618
    set $P616, $P617["$SCOPE"]
    unless_null $P616, fallback4284
    nqp_get_sc_object $P619, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P616, $P619
  fallback4284:
    unless_null $P616, vivi_14064285
    die "Contextual $*SCOPE not found"
    box $P620, "Contextual $*SCOPE not found"
    set $P616, $P620
  vivi_14064285:
    set $P615, $P616
  fallback4283:
    set $S506, $P615
    concat $S505, $S506, " scoped packages are not supported"
    $P621 = $P614."panic"($S505)
    set $P622, $P621
  if1401_end4265:
    set $P623, $P622
  if1392_end4234:
.annotate 'line', 2106
    get_hll_global $P627, "GLOBAL"
    nqp_get_package_through_who $P626, $P627, "QAST"
    get_who $P625, $P626
    set $P624, $P625["Stmts"]
    unless_null $P624, fallback4286
    nqp_get_sc_object $P628, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P624, $P628
  fallback4286:
    $P629 = $P624."new"()
    $P630 = _lex_param_1."!make"($P629)
    .return ($P630) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_294_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2109
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P650 = 'cuid_441_1346233478.067' 
    capture_lex $P650 
    .const 'Sub' $P650 = 'cuid_442_1346233478.067' 
    capture_lex $P650 
    .const 'Sub' $P650 = 'cuid_443_1346233478.067' 
    capture_lex $P650 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    set $P507, _lex_param_1["name"]
    unless_null $P507, fallback4287
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4287:
    set $P506, $P507["identifier"]
    unless_null $P506, fallback4288
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P509
  fallback4288:
    clone $P505, $P506
    set $P101, $P505
.annotate 'line', 2112
    $P510 = $P101."pop"()
    set $S501, $P510
    box $P511, $S501
    set $P102, $P511
    find_dynamic_lex $P513, "%*HOW"
    unless_null $P513, fallback4289
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    set $P514, $P515["%HOW"]
    unless_null $P514, fallback4290
    get_hll_global $P518, "GLOBAL"
    get_who $P517, $P518
    new $P519, 'Hash'
    set $P517["%HOW"], $P519
    set $P514, $P519
  fallback4290:
    unless_null $P514, vivi_14074291
    die "Contextual %*HOW not found"
    box $P520, "Contextual %*HOW not found"
    set $P514, $P520
  vivi_14074291:
    set $P513, $P514
  fallback4289:
    find_dynamic_lex $P521, "$*PKGDECL"
    unless_null $P521, fallback4292
    get_hll_global $P524, "GLOBAL"
    get_who $P523, $P524
    set $P522, $P523["$PKGDECL"]
    unless_null $P522, fallback4293
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P525
  fallback4293:
    unless_null $P522, vivi_14084294
    die "Contextual $*PKGDECL not found"
    box $P526, "Contextual $*PKGDECL not found"
    set $P522, $P526
  vivi_14084294:
    set $P521, $P522
  fallback4292:
    set $S502, $P521
    set $P512, $P513[$S502]
    unless_null $P512, fallback4295
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P527
  fallback4295:
    set $P103, $P512
    set $P528, _lex_param_1["block"]
    unless_null $P528, fallback4298
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P528, $P529
  fallback4298:
    unless $P528 goto if1409_else4296 
.annotate 'line', 2116
    set $P530, _lex_param_1["block"]
    unless_null $P530, fallback4299
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P531
  fallback4299:
    $P532 = $P530."ast"()
    set $P536, $P532
    goto if1409_end4297
  if1409_else4296:
    set $P533, _lex_param_1["comp_unit"]
    unless_null $P533, fallback4300
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P534
  fallback4300:
    $P535 = $P533."ast"()
    set $P536, $P535
  if1409_end4297:
    set $P104, $P536
    can $I501, $P103, "parametric"
    box $P539, $I501
    set $P538, $P539
    unless $I501 goto if1411_end4304 
.annotate 'line', 2122
    $P537 = $P103."parametric"($P103)
    set $P538, $P537
  if1411_end4304:
    unless $P538 goto if1410_else4301 
.annotate 'line', 2123
    $P540 = $P104."blocktype"("declaration")
.annotate 'line', 2124
    get_hll_global $P544, "GLOBAL"
    nqp_get_package_through_who $P543, $P544, "QAST"
    get_who $P542, $P543
    set $P541, $P542["Var"]
    unless_null $P541, fallback4305
    nqp_get_sc_object $P545, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P545
  fallback4305:
    $P546 = $P541."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P547 = $P104."unshift"($P546)
.annotate 'line', 2126
    $P548 = $P104."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2127
    find_dynamic_lex $P549, "$*W"
    unless_null $P549, fallback4306
    get_hll_global $P552, "GLOBAL"
    get_who $P551, $P552
    set $P550, $P551["$W"]
    unless_null $P550, fallback4307
    nqp_get_sc_object $P553, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P550, $P553
  fallback4307:
    unless_null $P550, vivi_14124308
    die "Contextual $*W not found"
    box $P554, "Contextual $*W not found"
    set $P550, $P554
  vivi_14124308:
    set $P549, $P550
  fallback4306:
    find_dynamic_lex $P555, "$*PACKAGE"
    unless_null $P555, fallback4309
    get_hll_global $P558, "GLOBAL"
    get_who $P557, $P558
    set $P556, $P557["$PACKAGE"]
    unless_null $P556, fallback4310
    nqp_get_sc_object $P559, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P556, $P559
  fallback4310:
    unless_null $P556, vivi_14134311
    die "Contextual $*PACKAGE not found"
    box $P560, "Contextual $*PACKAGE not found"
    set $P556, $P560
  vivi_14134311:
    set $P555, $P556
  fallback4309:
    $P561 = $P549."pkg_set_body_block"($P555, $P104)
.annotate 'line', 2128
    find_dynamic_lex $P562, "$*W"
    unless_null $P562, fallback4312
    get_hll_global $P565, "GLOBAL"
    get_who $P564, $P565
    set $P563, $P564["$W"]
    unless_null $P563, fallback4313
    nqp_get_sc_object $P566, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P563, $P566
  fallback4313:
    unless_null $P563, vivi_14144314
    die "Contextual $*W not found"
    box $P567, "Contextual $*W not found"
    set $P563, $P567
  vivi_14144314:
    set $P562, $P563
  fallback4312:
    find_dynamic_lex $P568, "$*PACKAGE"
    unless_null $P568, fallback4315
    get_hll_global $P571, "GLOBAL"
    get_who $P570, $P571
    set $P569, $P570["$PACKAGE"]
    unless_null $P569, fallback4316
    nqp_get_sc_object $P572, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P572
  fallback4316:
    unless_null $P569, vivi_14154317
    die "Contextual $*PACKAGE not found"
    box $P573, "Contextual $*PACKAGE not found"
    set $P569, $P573
  vivi_14154317:
    set $P568, $P569
  fallback4315:
    $P574 = $P562."install_lexical_symbol"($P104, "$?PACKAGE", $P568)
.annotate 'line', 2129
    find_dynamic_lex $P575, "$*W"
    unless_null $P575, fallback4318
    get_hll_global $P578, "GLOBAL"
    get_who $P577, $P578
    set $P576, $P577["$W"]
    unless_null $P576, fallback4319
    nqp_get_sc_object $P579, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P576, $P579
  fallback4319:
    unless_null $P576, vivi_14164320
    die "Contextual $*W not found"
    box $P580, "Contextual $*W not found"
    set $P576, $P580
  vivi_14164320:
    set $P575, $P576
  fallback4318:
    find_dynamic_lex $P581, "$*PACKAGE"
    unless_null $P581, fallback4321
    get_hll_global $P584, "GLOBAL"
    get_who $P583, $P584
    set $P582, $P583["$PACKAGE"]
    unless_null $P582, fallback4322
    nqp_get_sc_object $P585, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P582, $P585
  fallback4322:
    unless_null $P582, vivi_14174323
    die "Contextual $*PACKAGE not found"
    box $P586, "Contextual $*PACKAGE not found"
    set $P582, $P586
  vivi_14174323:
    set $P581, $P582
  fallback4321:
    $P587 = $P575."install_lexical_symbol"($P104, "$?ROLE", $P581)
    set $P615, $P587
    goto if1410_end4302
  if1410_else4301:
.annotate 'line', 2131
.annotate 'line', 2132
    $P588 = $P104."blocktype"("immediate")
.annotate 'line', 2133
    find_dynamic_lex $P589, "$*W"
    unless_null $P589, fallback4324
    get_hll_global $P592, "GLOBAL"
    get_who $P591, $P592
    set $P590, $P591["$W"]
    unless_null $P590, fallback4325
    nqp_get_sc_object $P593, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P590, $P593
  fallback4325:
    unless_null $P590, vivi_14184326
    die "Contextual $*W not found"
    box $P594, "Contextual $*W not found"
    set $P590, $P594
  vivi_14184326:
    set $P589, $P590
  fallback4324:
    find_dynamic_lex $P595, "$*PACKAGE"
    unless_null $P595, fallback4327
    get_hll_global $P598, "GLOBAL"
    get_who $P597, $P598
    set $P596, $P597["$PACKAGE"]
    unless_null $P596, fallback4328
    nqp_get_sc_object $P599, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P596, $P599
  fallback4328:
    unless_null $P596, vivi_14194329
    die "Contextual $*PACKAGE not found"
    box $P600, "Contextual $*PACKAGE not found"
    set $P596, $P600
  vivi_14194329:
    set $P595, $P596
  fallback4327:
    $P601 = $P589."install_lexical_symbol"($P104, "$?PACKAGE", $P595)
.annotate 'line', 2134
    find_dynamic_lex $P602, "$*W"
    unless_null $P602, fallback4330
    get_hll_global $P605, "GLOBAL"
    get_who $P604, $P605
    set $P603, $P604["$W"]
    unless_null $P603, fallback4331
    nqp_get_sc_object $P606, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P603, $P606
  fallback4331:
    unless_null $P603, vivi_14204332
    die "Contextual $*W not found"
    box $P607, "Contextual $*W not found"
    set $P603, $P607
  vivi_14204332:
    set $P602, $P603
  fallback4330:
    find_dynamic_lex $P608, "$*PACKAGE"
    unless_null $P608, fallback4333
    get_hll_global $P611, "GLOBAL"
    get_who $P610, $P611
    set $P609, $P610["$PACKAGE"]
    unless_null $P609, fallback4334
    nqp_get_sc_object $P612, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P609, $P612
  fallback4334:
    unless_null $P609, vivi_14214335
    die "Contextual $*PACKAGE not found"
    box $P613, "Contextual $*PACKAGE not found"
    set $P609, $P613
  vivi_14214335:
    set $P608, $P609
  fallback4333:
    $P614 = $P602."install_lexical_symbol"($P104, "$?CLASS", $P608)
    set $P615, $P614
  if1410_end4302:
    set $P616, _lex_param_1["parent"]
    unless_null $P616, fallback4338
    nqp_get_sc_object $P617, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P616, $P617
  fallback4338:
    unless $P616 goto if1422_else4336 
    .const 'Sub' $P618 = 'cuid_441_1346233478.067' 
    capture_lex $P618
    $P619 = $P618()
    set $P624, $P619
    goto if1422_end4337
  if1422_else4336:
    can $I502, $P103, "set_default_parent"
    box $P623, $I502
    set $P622, $P623
    unless $I502 goto if1429_end4358 
    .const 'Sub' $P620 = 'cuid_442_1346233478.067' 
    capture_lex $P620
    $P621 = $P620()
    set $P622, $P621
  if1429_end4358:
    set $P624, $P622
  if1422_end4337:
    set $P625, _lex_param_1["role"]
    unless_null $P625, fallback4375
    nqp_get_sc_object $P626, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P625, $P626
  fallback4375:
    set $P635, $P625
    unless $P625 goto if1435_end4374 
.annotate 'line', 2159
    set $P630, _lex_param_1["role"]
    unless_null $P630, fallback4376
    nqp_get_sc_object $P631, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P630, $P631
  fallback4376:
    set $P627, $P630
    iter $P629, $P630
    new $P633, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P633, for_handlers4391
    push_eh $P633
  for_next4392:
    unless $P629, for_done4394
    shift $P634, $P629
  for_redo4393:
    .const 'Sub' $P632 = 'cuid_443_1346233478.067' 
    capture_lex $P632
    $P627 = $P632($P634)
    goto for_next4392
  for_handlers4391:
    .get_results ($P633)
    pop_upto_eh $P633
    getattribute $P633, $P633, 'type'
    eq $P633, .CONTROL_LOOP_NEXT, for_next4392
    eq $P633, .CONTROL_LOOP_REDO, for_redo4393
  for_done4394:
    pop_eh 
    set $P635, $P627
  if1435_end4374:
.annotate 'line', 2177
    find_dynamic_lex $P636, "$*W"
    unless_null $P636, fallback4395
    get_hll_global $P639, "GLOBAL"
    get_who $P638, $P639
    set $P637, $P638["$W"]
    unless_null $P637, fallback4396
    nqp_get_sc_object $P640, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P637, $P640
  fallback4396:
    unless_null $P637, vivi_14424397
    die "Contextual $*W not found"
    box $P641, "Contextual $*W not found"
    set $P637, $P641
  vivi_14424397:
    set $P636, $P637
  fallback4395:
    find_dynamic_lex $P642, "$*PACKAGE"
    unless_null $P642, fallback4398
    get_hll_global $P645, "GLOBAL"
    get_who $P644, $P645
    set $P643, $P644["$PACKAGE"]
    unless_null $P643, fallback4399
    nqp_get_sc_object $P646, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P643, $P646
  fallback4399:
    unless_null $P643, vivi_14434400
    die "Contextual $*PACKAGE not found"
    box $P647, "Contextual $*PACKAGE not found"
    set $P643, $P647
  vivi_14434400:
    set $P642, $P643
  fallback4398:
    $P648 = $P636."pkg_compose"($P642)
.annotate 'line', 2179
    $P649 = _lex_param_1."!make"($P104)
    .return ($P649) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1346233478.067") :anon :lex :outer("cuid_294_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2138
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    new $P519, 'ExceptionHandler'
    set_label $P519, catch_handler_14254346
    $P519.'handle_types_except'(.CONTROL_ALL)
    push_eh $P519
.annotate 'line', 2141
.annotate 'line', 2142
    find_dynamic_lex $P503, "$*W"
    unless_null $P503, fallback4339
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$W"]
    unless_null $P504, fallback4340
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback4340:
    unless_null $P504, vivi_14234341
    die "Contextual $*W not found"
    box $P508, "Contextual $*W not found"
    set $P504, $P508
  vivi_14234341:
    set $P503, $P504
  fallback4339:
    find_lex $P513, "$/"
    set $P512, $P513["parent"]
    unless_null $P512, fallback4342
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P514
  fallback4342:
    set $P511, $P512[0]
    unless_null $P511, fallback4343
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback4343:
    set $P510, $P511["identifier"]
    unless_null $P510, fallback4344
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P516
  fallback4344:
    clone $P509, $P510
    $P517 = $P503."find_sym"($P509)
    set $P101, $P517
    box $P518, 1
    set $P102, $P518
    set $P520, $P102
    pop_eh 
    goto skip_handler_14244345
  catch_handler_14254346:
    .get_results ($P519) 
    set $I10001, 1
    set $P519["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P519
    pop_upto_eh $P519
    pop_eh 
    set $P520, $P10001
    goto skip_handler_14244345
  skip_handler_14244345:
    unless $P102 goto if1426_else4347 
.annotate 'line', 2145
.annotate 'line', 2146
    find_dynamic_lex $P521, "$*W"
    unless_null $P521, fallback4349
    get_hll_global $P524, "GLOBAL"
    get_who $P523, $P524
    set $P522, $P523["$W"]
    unless_null $P522, fallback4350
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P525
  fallback4350:
    unless_null $P522, vivi_14274351
    die "Contextual $*W not found"
    box $P526, "Contextual $*W not found"
    set $P522, $P526
  vivi_14274351:
    set $P521, $P522
  fallback4349:
    find_dynamic_lex $P527, "$*PACKAGE"
    unless_null $P527, fallback4352
    get_hll_global $P530, "GLOBAL"
    get_who $P529, $P530
    set $P528, $P529["$PACKAGE"]
    unless_null $P528, fallback4353
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P528, $P531
  fallback4353:
    unless_null $P528, vivi_14284354
    die "Contextual $*PACKAGE not found"
    box $P532, "Contextual $*PACKAGE not found"
    set $P528, $P532
  vivi_14284354:
    set $P527, $P528
  fallback4352:
    $P533 = $P521."pkg_add_parent_or_role"($P527, "add_parent", $P101)
    set $P542, $P533
    goto if1426_end4348
  if1426_else4347:
.annotate 'line', 2148
.annotate 'line', 2149
    find_lex $P534, "$/"
    $P535 = $P534."CURSOR"()
    find_lex $P538, "$/"
    set $P537, $P538["parent"]
    unless_null $P537, fallback4355
    nqp_get_sc_object $P539, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P537, $P539
  fallback4355:
    set $P536, $P537[0]
    unless_null $P536, fallback4356
    nqp_get_sc_object $P540, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P536, $P540
  fallback4356:
    set $S503, $P536
    concat $S502, "Could not find parent class '", $S503
    concat $S501, $S502, "'"
    $P541 = $P535."panic"($S501)
    set $P542, $P541
  if1426_end4348:
    .return ($P542) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1346233478.067") :anon :lex :outer("cuid_294_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2152
    .lex "$default", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    find_dynamic_lex $P502, "$*PKGDECL"
    unless_null $P502, fallback4361
    get_hll_global $P505, "GLOBAL"
    get_who $P504, $P505
    set $P503, $P504["$PKGDECL"]
    unless_null $P503, fallback4362
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback4362:
    unless_null $P503, vivi_14314363
    die "Contextual $*PKGDECL not found"
    box $P507, "Contextual $*PKGDECL not found"
    set $P503, $P507
  vivi_14314363:
    set $P502, $P503
  fallback4361:
    set $S501, $P502
    iseq $I501, $S501, "grammar"
    unless $I501 goto if1430_else4359 
    new $P508, 'ResizablePMCArray'
    box $P509, "NQPCursor"
    push $P508, $P509
    set $P512, $P508
    goto if1430_end4360
  if1430_else4359:
    new $P510, 'ResizablePMCArray'
    box $P511, "NQPMu"
    push $P510, $P511
    set $P512, $P510
  if1430_end4360:
    set $P101, $P512
.annotate 'line', 2154
    find_dynamic_lex $P513, "$*W"
    unless_null $P513, fallback4364
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    set $P514, $P515["$W"]
    unless_null $P514, fallback4365
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P517
  fallback4365:
    unless_null $P514, vivi_14324366
    die "Contextual $*W not found"
    box $P518, "Contextual $*W not found"
    set $P514, $P518
  vivi_14324366:
    set $P513, $P514
  fallback4364:
    find_dynamic_lex $P519, "$*PACKAGE"
    unless_null $P519, fallback4367
    get_hll_global $P522, "GLOBAL"
    get_who $P521, $P522
    set $P520, $P521["$PACKAGE"]
    unless_null $P520, fallback4368
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P523
  fallback4368:
    unless_null $P520, vivi_14334369
    die "Contextual $*PACKAGE not found"
    box $P524, "Contextual $*PACKAGE not found"
    set $P520, $P524
  vivi_14334369:
    set $P519, $P520
  fallback4367:
.annotate 'line', 2155
    find_dynamic_lex $P525, "$*W"
    unless_null $P525, fallback4370
    get_hll_global $P528, "GLOBAL"
    get_who $P527, $P528
    set $P526, $P527["$W"]
    unless_null $P526, fallback4371
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P529
  fallback4371:
    unless_null $P526, vivi_14344372
    die "Contextual $*W not found"
    box $P530, "Contextual $*W not found"
    set $P526, $P530
  vivi_14344372:
    set $P525, $P526
  fallback4370:
    $P531 = $P525."find_sym"($P101)
    $P532 = $P513."pkg_add_parent_or_role"($P519, "set_default_parent", $P531)
    .return ($P532) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1346233478.067") :anon :lex :outer("cuid_294_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2160
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    new $P514, 'ExceptionHandler'
    set_label $P514, catch_handler_14384382
    $P514.'handle_types_except'(.CONTROL_ALL)
    push_eh $P514
.annotate 'line', 2163
.annotate 'line', 2164
    find_dynamic_lex $P503, "$*W"
    unless_null $P503, fallback4377
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$W"]
    unless_null $P504, fallback4378
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback4378:
    unless_null $P504, vivi_14364379
    die "Contextual $*W not found"
    box $P508, "Contextual $*W not found"
    set $P504, $P508
  vivi_14364379:
    set $P503, $P504
  fallback4377:
    set $P510, _lex_param_0["identifier"]
    unless_null $P510, fallback4380
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4380:
    clone $P509, $P510
    $P512 = $P503."find_sym"($P509)
    set $P101, $P512
    box $P513, 1
    set $P102, $P513
    set $P515, $P102
    pop_eh 
    goto skip_handler_14374381
  catch_handler_14384382:
    .get_results ($P514) 
    set $I10001, 1
    set $P514["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P514
    pop_upto_eh $P514
    pop_eh 
    set $P515, $P10001
    goto skip_handler_14374381
  skip_handler_14374381:
    unless $P102 goto if1439_else4383 
.annotate 'line', 2167
.annotate 'line', 2168
    find_dynamic_lex $P516, "$*W"
    unless_null $P516, fallback4385
    get_hll_global $P519, "GLOBAL"
    get_who $P518, $P519
    set $P517, $P518["$W"]
    unless_null $P517, fallback4386
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P520
  fallback4386:
    unless_null $P517, vivi_14404387
    die "Contextual $*W not found"
    box $P521, "Contextual $*W not found"
    set $P517, $P521
  vivi_14404387:
    set $P516, $P517
  fallback4385:
    find_dynamic_lex $P522, "$*PACKAGE"
    unless_null $P522, fallback4388
    get_hll_global $P525, "GLOBAL"
    get_who $P524, $P525
    set $P523, $P524["$PACKAGE"]
    unless_null $P523, fallback4389
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P526
  fallback4389:
    unless_null $P523, vivi_14414390
    die "Contextual $*PACKAGE not found"
    box $P527, "Contextual $*PACKAGE not found"
    set $P523, $P527
  vivi_14414390:
    set $P522, $P523
  fallback4388:
    $P528 = $P516."pkg_add_parent_or_role"($P522, "add_role", $P101)
    set $P532, $P528
    goto if1439_end4384
  if1439_else4383:
.annotate 'line', 2170
.annotate 'line', 2171
    find_lex $P529, "$/"
    $P530 = $P529."CURSOR"()
    set $S503, _lex_param_0
    concat $S502, "Could not find role '", $S503
    concat $S501, $S502, "'"
    $P531 = $P530."panic"($S501)
    set $P532, $P531
  if1439_end4384:
    .return ($P532) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_295_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2182
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["scoped"]
    unless_null $P501, fallback4401
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4401:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_296_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2183
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["scoped"]
    unless_null $P501, fallback4402
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4402:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_297_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2184
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["scoped"]
    unless_null $P501, fallback4403
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4403:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_298_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2186
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2187
    set $P501, _lex_param_1["declarator"]
    unless_null $P501, fallback4406
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4406:
    unless $P501 goto if1444_else4404 
    set $P503, _lex_param_1["declarator"]
    unless_null $P503, fallback4407
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4407:
    $P505 = $P503."ast"()
    set $P515, $P505
    goto if1444_end4405
  if1444_else4404:
    set $P506, _lex_param_1["multi_declarator"]
    unless_null $P506, fallback4410
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4410:
    unless $P506 goto if1445_else4408 
.annotate 'line', 2188
    set $P508, _lex_param_1["multi_declarator"]
    unless_null $P508, fallback4411
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P509
  fallback4411:
    $P510 = $P508."ast"()
    set $P514, $P510
    goto if1445_end4409
  if1445_else4408:
.annotate 'line', 2189
    set $P511, _lex_param_1["package_declarator"]
    unless_null $P511, fallback4412
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P512
  fallback4412:
    $P513 = $P511."ast"()
    set $P514, $P513
  if1445_end4409:
    set $P515, $P514
  if1444_end4405:
    $P516 = _lex_param_1."!make"($P515)
    .return ($P516) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_299_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2192
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2193
    set $P501, _lex_param_1["routine_declarator"]
    unless_null $P501, fallback4415
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4415:
    unless $P501 goto if1446_else4413 
.annotate 'line', 2194
    set $P503, _lex_param_1["routine_declarator"]
    unless_null $P503, fallback4416
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4416:
    $P505 = $P503."ast"()
    set $P509, $P505
    goto if1446_end4414
  if1446_else4413:
.annotate 'line', 2195
    set $P506, _lex_param_1["variable_declarator"]
    unless_null $P506, fallback4417
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4417:
    $P508 = $P506."ast"()
    set $P509, $P508
  if1446_end4414:
    $P510 = _lex_param_1."!make"($P509)
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_300_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2198
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["declarator"]
    unless_null $P501, fallback4420
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4420:
    unless $P501 goto if1447_else4418 
    set $P503, _lex_param_1["declarator"]
    unless_null $P503, fallback4421
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4421:
    $P505 = $P503."ast"()
    set $P509, $P505
    goto if1447_end4419
  if1447_else4418:
    set $P506, _lex_param_1["routine_def"]
    unless_null $P506, fallback4422
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4422:
    $P508 = $P506."ast"()
    set $P509, $P508
  if1447_end4419:
    $P510 = _lex_param_1."!make"($P509)
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_301_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2199
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["declarator"]
    unless_null $P501, fallback4425
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4425:
    unless $P501 goto if1448_else4423 
    set $P503, _lex_param_1["declarator"]
    unless_null $P503, fallback4426
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4426:
    $P505 = $P503."ast"()
    set $P509, $P505
    goto if1448_end4424
  if1448_else4423:
    set $P506, _lex_param_1["routine_def"]
    unless_null $P506, fallback4427
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4427:
    $P508 = $P506."ast"()
    set $P509, $P508
  if1448_end4424:
    $P510 = _lex_param_1."!make"($P509)
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_302_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2200
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["declarator"]
    unless_null $P501, fallback4428
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4428:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_303_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2203
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P576 = 'cuid_444_1346233478.067' 
    capture_lex $P576 
    .const 'Sub' $P576 = 'cuid_445_1346233478.067' 
    capture_lex $P576 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
.annotate 'line', 2204
    set $P505, _lex_param_1["variable"]
    unless_null $P505, fallback4429
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback4429:
    $P507 = $P505."ast"()
    set $P101, $P507
    set $P509, _lex_param_1["variable"]
    unless_null $P509, fallback4430
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback4430:
    set $P508, $P509["sigil"]
    unless_null $P508, fallback4431
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P511
  fallback4431:
    set $P102, $P508
.annotate 'line', 2206
    $P512 = $P101."name"()
    set $P103, $P512
.annotate 'line', 2207
    find_dynamic_lex $P513, "$*W"
    unless_null $P513, fallback4432
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    set $P514, $P515["$W"]
    unless_null $P514, fallback4433
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P517
  fallback4433:
    unless_null $P514, vivi_14494434
    die "Contextual $*W not found"
    box $P518, "Contextual $*W not found"
    set $P514, $P518
  vivi_14494434:
    set $P513, $P514
  fallback4432:
    $P519 = $P513."cur_lexpad"()
    set $P104, $P519
    set $P521, $P103
    unless $P103 goto if1451_end4438 
.annotate 'line', 2208
    $P520 = $P104."symbol"($P103)
    set $P521, $P520
  if1451_end4438:
    set $P524, $P521
    unless $P521 goto if1450_end4436 
.annotate 'line', 2209
    $P522 = _lex_param_1."CURSOR"()
    $P523 = $P522."panic"("Redeclaration of symbol ", $P103)
    set $P524, $P523
  if1450_end4436:
    find_dynamic_lex $P525, "$*SCOPE"
    unless_null $P525, fallback4441
    get_hll_global $P528, "GLOBAL"
    get_who $P527, $P528
    set $P526, $P527["$SCOPE"]
    unless_null $P526, fallback4442
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P529
  fallback4442:
    unless_null $P526, vivi_14534443
    die "Contextual $*SCOPE not found"
    box $P530, "Contextual $*SCOPE not found"
    set $P526, $P530
  vivi_14534443:
    set $P525, $P526
  fallback4441:
    set $S501, $P525
    iseq $I501, $S501, "has"
    unless $I501 goto if1452_else4439 
    .const 'Sub' $P531 = 'cuid_444_1346233478.067' 
    capture_lex $P531
    $P532 = $P531()
    set $P563, $P532
    goto if1452_end4440
  if1452_else4439:
    find_dynamic_lex $P533, "$*SCOPE"
    unless_null $P533, fallback4492
    get_hll_global $P536, "GLOBAL"
    get_who $P535, $P536
    set $P534, $P535["$SCOPE"]
    unless_null $P534, fallback4493
    nqp_get_sc_object $P537, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P534, $P537
  fallback4493:
    unless_null $P534, vivi_14714494
    die "Contextual $*SCOPE not found"
    box $P538, "Contextual $*SCOPE not found"
    set $P534, $P538
  vivi_14714494:
    set $P533, $P534
  fallback4492:
    set $S502, $P533
    iseq $I502, $S502, "our"
    unless $I502 goto if1470_else4490 
.annotate 'line', 2239
    set $P539, _lex_param_1["variable"]
    unless_null $P539, fallback4495
    nqp_get_sc_object $P540, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P539, $P540
  fallback4495:
    set $S503, $P539
    box $P541, $S503
    set $P103, $P541
.annotate 'line', 2244
    new $P542, 'ResizablePMCArray'
    push $P542, $P103
    $P543 = "&lexical_package_lookup"($P542, _lex_param_1)
    set $P101, $P543
.annotate 'line', 2245
    $P544 = $P104."symbol"($P103, "package" :named("scope"))
    set $P562, $P544
    goto if1470_end4491
  if1470_else4490:
.annotate 'line', 2247
.annotate 'line', 2248
    set $P545, $P104[0]
    unless_null $P545, fallback4496
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P545, $P546
  fallback4496:
    get_hll_global $P550, "GLOBAL"
    nqp_get_package_through_who $P549, $P550, "QAST"
    get_who $P548, $P549
    set $P547, $P548["Op"]
    unless_null $P547, fallback4497
    nqp_get_sc_object $P551, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P547, $P551
  fallback4497:
.annotate 'line', 2250
    get_hll_global $P555, "GLOBAL"
    nqp_get_package_through_who $P554, $P555, "QAST"
    get_who $P553, $P554
    set $P552, $P553["Var"]
    unless_null $P552, fallback4498
    nqp_get_sc_object $P556, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P552, $P556
  fallback4498:
    $P557 = $P552."new"($P103 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2251
    $P558 = "&default_for"($P102)
    $P559 = $P547."new"($P557, $P558, "bind" :named("op"), _lex_param_1 :named("node"))
    $P560 = $P545."push"($P559)
.annotate 'line', 2253
    $P561 = $P104."symbol"($P103, "lexical" :named("scope"))
    set $P562, $P561
  if1470_end4491:
    set $P563, $P562
  if1452_end4440:
    set $P564, _lex_param_1["trait"]
    unless_null $P564, fallback4501
    nqp_get_sc_object $P565, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P564, $P565
  fallback4501:
    set $P574, $P564
    unless $P564 goto if1472_end4500 
.annotate 'line', 2257
    set $P569, _lex_param_1["trait"]
    unless_null $P569, fallback4502
    nqp_get_sc_object $P570, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P570
  fallback4502:
    set $P566, $P569
    iter $P568, $P569
    new $P572, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P572, for_handlers4503
    push_eh $P572
  for_next4504:
    unless $P568, for_done4506
    shift $P573, $P568
  for_redo4505:
    .const 'Sub' $P571 = 'cuid_445_1346233478.067' 
    capture_lex $P571
    $P566 = $P571($P573)
    goto for_next4504
  for_handlers4503:
    .get_results ($P572)
    pop_upto_eh $P572
    getattribute $P572, $P572, 'type'
    eq $P572, .CONTROL_LOOP_NEXT, for_next4504
    eq $P572, .CONTROL_LOOP_REDO, for_redo4505
  for_done4506:
    pop_eh 
    set $P574, $P566
  if1472_end4500:
.annotate 'line', 2261
    $P575 = _lex_param_1."!make"($P101)
    .return ($P575) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1346233478.067") :anon :lex :outer("cuid_303_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2211
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P501, 'Hash'
    set $P101, $P501
    new $P502, 'Hash'
    set $P102, $P502
    find_dynamic_lex $P503, "%*HOW"
    unless_null $P503, fallback4446
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["%HOW"]
    unless_null $P504, fallback4447
    get_hll_global $P508, "GLOBAL"
    get_who $P507, $P508
    new $P509, 'Hash'
    set $P507["%HOW"], $P509
    set $P504, $P509
  fallback4447:
    unless_null $P504, vivi_14554448
    die "Contextual %*HOW not found"
    box $P510, "Contextual %*HOW not found"
    set $P504, $P510
  vivi_14554448:
    set $P503, $P504
  fallback4446:
    find_dynamic_lex $P511, "$*PKGDECL"
    unless_null $P511, fallback4449
    get_hll_global $P514, "GLOBAL"
    get_who $P513, $P514
    set $P512, $P513["$PKGDECL"]
    unless_null $P512, fallback4450
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P515
  fallback4450:
    unless_null $P512, vivi_14564451
    die "Contextual $*PKGDECL not found"
    box $P516, "Contextual $*PKGDECL not found"
    set $P512, $P516
  vivi_14564451:
    set $P511, $P512
  fallback4449:
    set $S502, $P511
    concat $S501, $S502, "-attr"
    exists $I501, $P503[$S501]
    box $P527, $I501
    set $P526, $P527
    if $I501 goto unless1454_end4445 
.annotate 'line', 2213
.annotate 'line', 2214
    find_lex $P517, "$/"
    $P518 = $P517."CURSOR"()
    find_dynamic_lex $P519, "$*PKGDECL"
    unless_null $P519, fallback4452
    get_hll_global $P522, "GLOBAL"
    get_who $P521, $P522
    set $P520, $P521["$PKGDECL"]
    unless_null $P520, fallback4453
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P523
  fallback4453:
    unless_null $P520, vivi_14574454
    die "Contextual $*PKGDECL not found"
    box $P524, "Contextual $*PKGDECL not found"
    set $P520, $P524
  vivi_14574454:
    set $P519, $P520
  fallback4452:
    set $S504, $P519
    concat $S503, $S504, " packages do not support attributes"
    $P525 = $P518."panic"($S503)
    set $P526, $P525
  unless1454_end4445:
    find_lex $P528, "$name"
    set $P101["name"], $P528
    find_lex $P530, "$/"
    set $P529, $P530["typename"]
    unless_null $P529, fallback4457
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P531
  fallback4457:
    set $P546, $P529
    unless $P529 goto if1458_end4456 
.annotate 'line', 2221
.annotate 'line', 2222
    find_dynamic_lex $P532, "$*W"
    unless_null $P532, fallback4458
    get_hll_global $P535, "GLOBAL"
    get_who $P534, $P535
    set $P533, $P534["$W"]
    unless_null $P533, fallback4459
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P536
  fallback4459:
    unless_null $P533, vivi_14594460
    die "Contextual $*W not found"
    box $P537, "Contextual $*W not found"
    set $P533, $P537
  vivi_14594460:
    set $P532, $P533
  fallback4458:
    new $P538, 'ResizablePMCArray'
    find_lex $P541, "$/"
    set $P540, $P541["typename"]
    unless_null $P540, fallback4461
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P540, $P542
  fallback4461:
    set $P539, $P540[0]
    unless_null $P539, fallback4462
    nqp_get_sc_object $P543, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P539, $P543
  fallback4462:
    set $S505, $P539
    box $P544, $S505
    push $P538, $P544
    $P545 = $P532."find_sym"($P538)
    set $P102["type"], $P545
    set $P546, $P545
  if1458_end4456:
    find_lex $P547, "$sigil"
    set $S506, $P547
    iseq $I502, $S506, "$"
    set $I504, $I502
    if $I502 goto unless1461_end4466 
    find_lex $P548, "$sigil"
    set $S507, $P548
    iseq $I503, $S507, "&"
    set $I504, $I503
  unless1461_end4466:
    box $P567, $I504
    set $P566, $P567
    unless $I504 goto if1460_end4464 
.annotate 'line', 2224
    find_lex $P550, "$/"
    set $P549, $P550["typename"]
    unless_null $P549, fallback4469
    nqp_get_sc_object $P551, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P551
  fallback4469:
    unless $P549 goto if1462_else4467 
.annotate 'line', 2225
    set $P552, $P102["type"]
    unless_null $P552, fallback4470
    nqp_get_sc_object $P553, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P552, $P553
  fallback4470:
    set $P102["default"], $P552
    set $P565, $P552
    goto if1462_end4468
  if1462_else4467:
.annotate 'line', 2228
    new $P563, 'ExceptionHandler'
    set_label $P563, catch_handler_14654475
    $P563.'handle_types_except'(.CONTROL_ALL)
    push_eh $P563
.annotate 'line', 2229
    find_dynamic_lex $P554, "$*W"
    unless_null $P554, fallback4471
    get_hll_global $P557, "GLOBAL"
    get_who $P556, $P557
    set $P555, $P556["$W"]
    unless_null $P555, fallback4472
    nqp_get_sc_object $P558, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P555, $P558
  fallback4472:
    unless_null $P555, vivi_14634473
    die "Contextual $*W not found"
    box $P559, "Contextual $*W not found"
    set $P555, $P559
  vivi_14634473:
    set $P554, $P555
  fallback4471:
    new $P560, 'ResizablePMCArray'
    box $P561, "NQPMu"
    push $P560, $P561
    $P562 = $P554."find_sym"($P560)
    set $P102["default"], $P562
    set $P564, $P562
    pop_eh 
    goto skip_handler_14644474
  catch_handler_14654475:
    .get_results ($P563) 
    set $I10001, 1
    set $P563["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P563
    pop_upto_eh $P563
    pop_eh 
    set $P564, $P10001
    goto skip_handler_14644474
  skip_handler_14644474:
    set $P565, $P564
  if1462_end4468:
    set $P566, $P565
  if1460_end4464:
.annotate 'line', 2234
    find_dynamic_lex $P568, "$*W"
    unless_null $P568, fallback4476
    get_hll_global $P571, "GLOBAL"
    get_who $P570, $P571
    set $P569, $P570["$W"]
    unless_null $P569, fallback4477
    nqp_get_sc_object $P572, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P572
  fallback4477:
    unless_null $P569, vivi_14664478
    die "Contextual $*W not found"
    box $P573, "Contextual $*W not found"
    set $P569, $P573
  vivi_14664478:
    set $P568, $P569
  fallback4476:
    find_dynamic_lex $P574, "$*PACKAGE"
    unless_null $P574, fallback4479
    get_hll_global $P577, "GLOBAL"
    get_who $P576, $P577
    set $P575, $P576["$PACKAGE"]
    unless_null $P575, fallback4480
    nqp_get_sc_object $P578, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P575, $P578
  fallback4480:
    unless_null $P575, vivi_14674481
    die "Contextual $*PACKAGE not found"
    box $P579, "Contextual $*PACKAGE not found"
    set $P575, $P579
  vivi_14674481:
    set $P574, $P575
  fallback4479:
    find_dynamic_lex $P581, "%*HOW"
    unless_null $P581, fallback4482
    get_hll_global $P584, "GLOBAL"
    get_who $P583, $P584
    set $P582, $P583["%HOW"]
    unless_null $P582, fallback4483
    get_hll_global $P586, "GLOBAL"
    get_who $P585, $P586
    new $P587, 'Hash'
    set $P585["%HOW"], $P587
    set $P582, $P587
  fallback4483:
    unless_null $P582, vivi_14684484
    die "Contextual %*HOW not found"
    box $P588, "Contextual %*HOW not found"
    set $P582, $P588
  vivi_14684484:
    set $P581, $P582
  fallback4482:
    find_dynamic_lex $P589, "$*PKGDECL"
    unless_null $P589, fallback4485
    get_hll_global $P592, "GLOBAL"
    get_who $P591, $P592
    set $P590, $P591["$PKGDECL"]
    unless_null $P590, fallback4486
    nqp_get_sc_object $P593, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P590, $P593
  fallback4486:
    unless_null $P590, vivi_14694487
    die "Contextual $*PKGDECL not found"
    box $P594, "Contextual $*PKGDECL not found"
    set $P590, $P594
  vivi_14694487:
    set $P589, $P590
  fallback4485:
    set $S509, $P589
    concat $S508, $S509, "-attr"
    set $P580, $P581[$S508]
    unless_null $P580, fallback4488
    nqp_get_sc_object $P595, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P580, $P595
  fallback4488:
    $P596 = $P568."pkg_add_attribute"($P574, $P580, $P101, $P102)
.annotate 'line', 2237
    get_hll_global $P600, "GLOBAL"
    nqp_get_package_through_who $P599, $P600, "QAST"
    get_who $P598, $P599
    set $P597, $P598["Stmts"]
    unless_null $P597, fallback4489
    nqp_get_sc_object $P601, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P597, $P601
  fallback4489:
    $P602 = $P597."new"()
    store_lex "$past", $P602
    .return ($P602) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1346233478.067") :anon :lex :outer("cuid_303_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2258
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P502, "$/"
    $P501 = _lex_param_0."ast"()
    $P503 = $P501($P502)
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_304_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2264
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["routine_def"]
    unless_null $P501, fallback4507
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4507:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_305_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2265
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["method_def"]
    unless_null $P501, fallback4508
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4508:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_306_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2267
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P560 = 'cuid_449_1346233478.067' 
    capture_lex $P560 
    .const 'Sub' $P560 = 'cuid_452_1346233478.067' 
    capture_lex $P560 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    set $P504, _lex_param_1["onlystar"]
    unless_null $P504, fallback4511
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback4511:
    unless $P504 goto if1473_else4509 
.annotate 'line', 2271
.annotate 'line', 2272
    $P506 = "&only_star_block"()
    set $P101, $P506
    set $P521, $P101
    goto if1473_end4510
  if1473_else4509:
.annotate 'line', 2274
.annotate 'line', 2275
    set $P507, _lex_param_1["blockoid"]
    unless_null $P507, fallback4512
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4512:
    $P509 = $P507."ast"()
    set $P101, $P509
.annotate 'line', 2276
    $P510 = $P101."blocktype"("declaration")
    find_dynamic_lex $P511, "$*RETURN_USED"
    unless_null $P511, fallback4515
    get_hll_global $P514, "GLOBAL"
    get_who $P513, $P514
    set $P512, $P513["$RETURN_USED"]
    unless_null $P512, fallback4516
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P515
  fallback4516:
    unless_null $P512, vivi_14754517
    die "Contextual $*RETURN_USED not found"
    box $P516, "Contextual $*RETURN_USED not found"
    set $P512, $P516
  vivi_14754517:
    set $P511, $P512
  fallback4515:
    set $P520, $P511
    unless $P511 goto if1474_end4514 
.annotate 'line', 2277
.annotate 'line', 2278
    set $P517, $P101[1]
    unless_null $P517, fallback4518
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P518
  fallback4518:
    $P519 = "&wrap_return_handler"($P517)
    set $P101[1], $P519
    set $P520, $P519
  if1474_end4514:
    set $P521, $P520
  if1473_end4510:
    set $P102, $P101
    set $P522, _lex_param_1["deflongname"]
    unless_null $P522, fallback4521
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P523
  fallback4521:
    unless $P522 goto if1476_else4519 
    .const 'Sub' $P524 = 'cuid_449_1346233478.067' 
    capture_lex $P524
    $P525 = $P524()
    set $P541, $P525
    goto if1476_end4520
  if1476_else4519:
.annotate 'line', 2375
.annotate 'line', 2376
    find_dynamic_lex $P526, "$*W"
    unless_null $P526, fallback4632
    get_hll_global $P529, "GLOBAL"
    get_who $P528, $P529
    set $P527, $P528["$W"]
    unless_null $P527, fallback4633
    nqp_get_sc_object $P530, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P527, $P530
  fallback4633:
    unless_null $P527, vivi_15114634
    die "Contextual $*W not found"
    box $P531, "Contextual $*W not found"
    set $P527, $P531
  vivi_15114634:
    set $P526, $P527
  fallback4632:
    $P532 = $P526."is_precompilation_mode"()
    set $P540, $P532
    unless $P532 goto if1510_end4631 
.annotate 'line', 2377
    find_dynamic_lex $P533, "$*W"
    unless_null $P533, fallback4635
    get_hll_global $P536, "GLOBAL"
    get_who $P535, $P536
    set $P534, $P535["$W"]
    unless_null $P534, fallback4636
    nqp_get_sc_object $P537, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P534, $P537
  fallback4636:
    unless_null $P534, vivi_15124637
    die "Contextual $*W not found"
    box $P538, "Contextual $*W not found"
    set $P534, $P538
  vivi_15124637:
    set $P533, $P534
  fallback4635:
    $P539 = $P533."create_code"($P101, "<anon>", 0)
    set $P540, $P539
  if1510_end4631:
    set $P541, $P540
  if1476_end4520:
.annotate 'line', 2381
    get_hll_global $P545, "GLOBAL"
    nqp_get_package_through_who $P544, $P545, "QAST"
    get_who $P543, $P544
    set $P542, $P543["Op"]
    unless_null $P542, fallback4638
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P542, $P546
  fallback4638:
    $P547 = $P542."new"($P101, "takeclosure" :named("op"))
    set $P103, $P547
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2384
    $P548 = _lex_param_1."!make"($P103)
    set $P549, _lex_param_1["trait"]
    unless_null $P549, fallback4641
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P550
  fallback4641:
    set $P559, $P549
    unless $P549 goto if1513_end4640 
.annotate 'line', 2387
    set $P554, _lex_param_1["trait"]
    unless_null $P554, fallback4642
    nqp_get_sc_object $P555, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P554, $P555
  fallback4642:
    set $P551, $P554
    iter $P553, $P554
    new $P557, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P557, for_handlers4643
    push_eh $P557
  for_next4644:
    unless $P553, for_done4646
    shift $P558, $P553
  for_redo4645:
    .const 'Sub' $P556 = 'cuid_452_1346233478.067' 
    capture_lex $P556
    $P551 = $P556($P558)
    goto for_next4644
  for_handlers4643:
    .get_results ($P557)
    pop_upto_eh $P557
    getattribute $P557, $P557, 'type'
    eq $P557, .CONTROL_LOOP_NEXT, for_next4644
    eq $P557, .CONTROL_LOOP_REDO, for_redo4645
  for_done4646:
    pop_eh 
    set $P559, $P551
  if1513_end4640:
    .return ($P559) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1346233478.067") :anon :lex :outer("cuid_306_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2283
    .const 'Sub' $P579 = 'cuid_448_1346233478.067' 
    capture_lex $P579 
    .const 'Sub' $P579 = 'cuid_450_1346233478.067' 
    capture_lex $P579 
    .const 'Sub' $P579 = 'cuid_451_1346233478.067' 
    capture_lex $P579 
    .lex "$name", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    find_lex $P504, "$/"
    set $P503, $P504["sigil"]
    unless_null $P503, fallback4522
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P505
  fallback4522:
    set $P502, $P503[0]
    unless_null $P502, fallback4523
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback4523:
    set $S502, $P502
.annotate 'line', 2284
    find_lex $P509, "$/"
    set $P508, $P509["deflongname"]
    unless_null $P508, fallback4524
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P510
  fallback4524:
    set $P507, $P508[0]
    unless_null $P507, fallback4525
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback4525:
    $P512 = $P507."ast"()
    set $S503, $P512
    concat $S501, $S502, $S503
    box $P513, $S501
    set $P101, $P513
.annotate 'line', 2285
    find_lex $P514, "$past"
    $P515 = $P514."name"($P101)
    find_dynamic_lex $P516, "$*SCOPE"
    unless_null $P516, fallback4532
    get_hll_global $P519, "GLOBAL"
    get_who $P518, $P519
    set $P517, $P518["$SCOPE"]
    unless_null $P517, fallback4533
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P520
  fallback4533:
    unless_null $P517, vivi_14804534
    die "Contextual $*SCOPE not found"
    box $P521, "Contextual $*SCOPE not found"
    set $P517, $P521
  vivi_14804534:
    set $P516, $P517
  fallback4532:
    set $S504, $P516
    iseq $I501, $S504, ""
    set $I503, $I501
    if $I501 goto unless1479_end4531 
    find_dynamic_lex $P522, "$*SCOPE"
    unless_null $P522, fallback4535
    get_hll_global $P525, "GLOBAL"
    get_who $P524, $P525
    set $P523, $P524["$SCOPE"]
    unless_null $P523, fallback4536
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P526
  fallback4536:
    unless_null $P523, vivi_14814537
    die "Contextual $*SCOPE not found"
    box $P527, "Contextual $*SCOPE not found"
    set $P523, $P527
  vivi_14814537:
    set $P522, $P523
  fallback4535:
    set $S505, $P522
    iseq $I502, $S505, "my"
    set $I503, $I502
  unless1479_end4531:
    set $I505, $I503
    if $I503 goto unless1478_end4529 
    find_dynamic_lex $P528, "$*SCOPE"
    unless_null $P528, fallback4538
    get_hll_global $P531, "GLOBAL"
    get_who $P530, $P531
    set $P529, $P530["$SCOPE"]
    unless_null $P529, fallback4539
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P532
  fallback4539:
    unless_null $P529, vivi_14824540
    die "Contextual $*SCOPE not found"
    box $P533, "Contextual $*SCOPE not found"
    set $P529, $P533
  vivi_14824540:
    set $P528, $P529
  fallback4538:
    set $S506, $P528
    iseq $I504, $S506, "our"
    set $I505, $I504
  unless1478_end4529:
    unless $I505 goto if1477_else4526 
.annotate 'line', 2286
    find_dynamic_lex $P534, "$*MULTINESS"
    unless_null $P534, fallback4543
    get_hll_global $P537, "GLOBAL"
    get_who $P536, $P537
    set $P535, $P536["$MULTINESS"]
    unless_null $P535, fallback4544
    nqp_get_sc_object $P538, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P535, $P538
  fallback4544:
    unless_null $P535, vivi_14844545
    die "Contextual $*MULTINESS not found"
    box $P539, "Contextual $*MULTINESS not found"
    set $P535, $P539
  vivi_14844545:
    set $P534, $P535
  fallback4543:
    set $S507, $P534
    iseq $I506, $S507, "multi"
    unless $I506 goto if1483_else4541 
    .const 'Sub' $P540 = 'cuid_448_1346233478.067' 
    capture_lex $P540
    $P541 = $P540()
    set $P553, $P541
    goto if1483_end4542
  if1483_else4541:
    find_dynamic_lex $P542, "$*MULTINESS"
    unless_null $P542, fallback4582
    get_hll_global $P545, "GLOBAL"
    get_who $P544, $P545
    set $P543, $P544["$MULTINESS"]
    unless_null $P543, fallback4583
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P543, $P546
  fallback4583:
    unless_null $P543, vivi_14964584
    die "Contextual $*MULTINESS not found"
    box $P547, "Contextual $*MULTINESS not found"
    set $P543, $P547
  vivi_14964584:
    set $P542, $P543
  fallback4582:
    set $S508, $P542
    iseq $I507, $S508, "proto"
    unless $I507 goto if1495_else4580 
    .const 'Sub' $P548 = 'cuid_450_1346233478.067' 
    capture_lex $P548
    $P549 = $P548()
    set $P552, $P549
    goto if1495_end4581
  if1495_else4580:
    .const 'Sub' $P550 = 'cuid_451_1346233478.067' 
    capture_lex $P550
    $P551 = $P550()
    set $P552, $P551
  if1495_end4581:
    set $P553, $P552
  if1483_end4542:
.annotate 'line', 2364
    get_hll_global $P557, "GLOBAL"
    nqp_get_package_through_who $P556, $P557, "QAST"
    get_who $P555, $P556
    set $P554, $P555["Var"]
    unless_null $P554, fallback4619
    nqp_get_sc_object $P558, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P554, $P558
  fallback4619:
    set $S510, $P101
    concat $S509, "&", $S510
    $P559 = $P554."new"($S509 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P559
    set $P569, $P559
    goto if1477_end4527
  if1477_else4526:
.annotate 'line', 2366
.annotate 'line', 2367
    find_lex $P560, "$/"
    $P561 = $P560."CURSOR"()
    find_dynamic_lex $P562, "$*SCOPE"
    unless_null $P562, fallback4620
    get_hll_global $P565, "GLOBAL"
    get_who $P564, $P565
    set $P563, $P564["$SCOPE"]
    unless_null $P563, fallback4621
    nqp_get_sc_object $P566, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P563, $P566
  fallback4621:
    unless_null $P563, vivi_15064622
    die "Contextual $*SCOPE not found"
    box $P567, "Contextual $*SCOPE not found"
    set $P563, $P567
  vivi_15064622:
    set $P562, $P563
  fallback4620:
    set $S512, $P562
    concat $S511, $S512, " scoped routines are not supported yet"
    $P568 = $P561."panic"($S511)
    set $P569, $P568
  if1477_end4527:
    set $S513, $P101
    iseq $I508, $S513, "MAIN"
    set $I510, $I508
    unless $I508 goto if1508_end4626 
    find_dynamic_lex $P570, "$*MULTINESS"
    unless_null $P570, fallback4627
    get_hll_global $P573, "GLOBAL"
    get_who $P572, $P573
    set $P571, $P572["$MULTINESS"]
    unless_null $P571, fallback4628
    nqp_get_sc_object $P574, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P571, $P574
  fallback4628:
    unless_null $P571, vivi_15094629
    die "Contextual $*MULTINESS not found"
    box $P575, "Contextual $*MULTINESS not found"
    set $P571, $P575
  vivi_15094629:
    set $P570, $P571
  fallback4627:
    set $S514, $P570
    isne $I509, $S514, "multi"
    set $I510, $I509
  if1508_end4626:
    box $P578, $I510
    set $P577, $P578
    unless $I510 goto if1507_end4624 
.annotate 'line', 2371
    find_lex $P576, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P576
    set $P577, $P576
  if1507_end4624:
    .return ($P577) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1346233478.067") :anon :lex :outer("cuid_449_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2287
    .const 'Sub' $P553 = 'cuid_447_1346233478.067' 
    capture_lex $P553 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    new $P502, 'Hash'
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    find_dynamic_lex $P505, "$*SCOPE"
    unless_null $P505, fallback4548
    get_hll_global $P508, "GLOBAL"
    get_who $P507, $P508
    set $P506, $P507["$SCOPE"]
    unless_null $P506, fallback4549
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P509
  fallback4549:
    unless_null $P506, vivi_14864550
    die "Contextual $*SCOPE not found"
    box $P510, "Contextual $*SCOPE not found"
    set $P506, $P510
  vivi_14864550:
    set $P505, $P506
  fallback4548:
    set $S501, $P505
    iseq $I501, $S501, "our"
    box $P513, $I501
    set $P512, $P513
    unless $I501 goto if1485_end4547 
.annotate 'line', 2289
    box $P511, "a multi can not be our-scoped"
    die $P511
    set $P512, $P511
  if1485_end4547:
.annotate 'line', 2291
    find_dynamic_lex $P514, "$*W"
    unless_null $P514, fallback4551
    get_hll_global $P517, "GLOBAL"
    get_who $P516, $P517
    set $P515, $P516["$W"]
    unless_null $P515, fallback4552
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P518
  fallback4552:
    unless_null $P515, vivi_14874553
    die "Contextual $*W not found"
    box $P519, "Contextual $*W not found"
    set $P515, $P519
  vivi_14874553:
    set $P514, $P515
  fallback4551:
    $P520 = $P514."cur_lexpad"()
    find_lex $P521, "$name"
    set $S503, $P521
    concat $S502, "&", $S503
    $P522 = $P520."symbol"($S502)
    set $P102, $P522
    set $P523, $P102["proto"]
    unless_null $P523, fallback4556
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P524
  fallback4556:
    unless $P523 goto if1488_else4554 
.annotate 'line', 2292
    set $P525, $P102["value"]
    unless_null $P525, fallback4557
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P526
  fallback4557:
    set $P101, $P525
    set $P529, $P101
    goto if1488_end4555
  if1488_else4554:
    .const 'Sub' $P527 = 'cuid_447_1346233478.067' 
    capture_lex $P527
    $P528 = $P527()
    set $P529, $P528
  if1488_end4555:
.annotate 'line', 2321
    find_dynamic_lex $P530, "$*W"
    unless_null $P530, fallback4573
    get_hll_global $P533, "GLOBAL"
    get_who $P532, $P533
    set $P531, $P532["$W"]
    unless_null $P531, fallback4574
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P531, $P534
  fallback4574:
    unless_null $P531, vivi_14934575
    die "Contextual $*W not found"
    box $P535, "Contextual $*W not found"
    set $P531, $P535
  vivi_14934575:
    set $P530, $P531
  fallback4573:
    find_lex $P536, "$past"
    find_lex $P537, "$name"
    $P538 = $P530."create_code"($P536, $P537, 0)
    set $P103, $P538
.annotate 'line', 2322
    find_lex $P539, "$past"
    $P540 = "&attach_multi_signature"($P103, $P539)
.annotate 'line', 2325
    $P541 = $P101."add_dispatchee"($P103)
.annotate 'line', 2328
    find_dynamic_lex $P542, "$*W"
    unless_null $P542, fallback4576
    get_hll_global $P545, "GLOBAL"
    get_who $P544, $P545
    set $P543, $P544["$W"]
    unless_null $P543, fallback4577
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P543, $P546
  fallback4577:
    unless_null $P543, vivi_14944578
    die "Contextual $*W not found"
    box $P547, "Contextual $*W not found"
    set $P543, $P547
  vivi_14944578:
    set $P542, $P543
  fallback4576:
    $P548 = $P542."cur_lexpad"()
    set $P104, $P548
.annotate 'line', 2329
    set $P549, $P104[0]
    unless_null $P549, fallback4579
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P550
  fallback4579:
    find_lex $P551, "$past"
    $P552 = $P549."push"($P551)
    .return ($P552) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1346233478.067") :anon :lex :outer("cuid_448_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2297
    .const 'Sub' $P520 = 'cuid_446_1346233478.067' 
    capture_lex $P520 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2300
    find_dynamic_lex $P505, "$*W"
    unless_null $P505, fallback4558
    get_hll_global $P508, "GLOBAL"
    get_who $P507, $P508
    set $P506, $P507["$W"]
    unless_null $P506, fallback4559
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P509
  fallback4559:
    unless_null $P506, vivi_14894560
    die "Contextual $*W not found"
    box $P510, "Contextual $*W not found"
    set $P506, $P510
  vivi_14894560:
    set $P505, $P506
  fallback4558:
    $P511 = $P505."get_legacy_block_list"()
    set $P502, $P511
    iter $P504, $P511
    new $P513, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P513, for_handlers4567
    push_eh $P513
  for_next4568:
    unless $P504, for_done4570
    shift $P514, $P504
  for_redo4569:
    .const 'Sub' $P512 = 'cuid_446_1346233478.067' 
    capture_lex $P512
    $P502 = $P512($P514)
    goto for_next4568
  for_handlers4567:
    .get_results ($P513)
    pop_upto_eh $P513
    getattribute $P513, $P513, 'type'
    eq $P513, .CONTROL_LOOP_NEXT, for_next4568
    eq $P513, .CONTROL_LOOP_REDO, for_redo4569
  for_done4570:
    pop_eh 
    set $P518, $P101
    if $P101 goto unless1492_end4572 
.annotate 'line', 2312
.annotate 'line', 2313
    find_lex $P515, "$/"
    $P516 = $P515."CURSOR"()
    $P517 = $P516."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
    set $P518, $P517
  unless1492_end4572:
    box $P519, "Dispatcher derivation NYI"
    die $P519
    .return ($P519) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1346233478.067") :anon :lex :outer("cuid_447_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2300
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P501, 'Hash'
    set $P101, $P501
.annotate 'line', 2301
    find_lex $P502, "$name"
    set $S502, $P502
    concat $S501, "&", $S502
    $P503 = _lex_param_0."symbol"($S501)
    set $P101, $P503
    set $P504, $P101["proto"]
    unless_null $P504, fallback4563
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback4563:
    unless $P504 goto if1490_else4561 
.annotate 'line', 2302
    set $P506, $P101["value"]
    unless_null $P506, fallback4564
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4564:
    store_lex "$proto", $P506
    box $P508, 1
    store_lex "$found_proto", $P508
    set $P513, $P508
    goto if1490_end4562
  if1490_else4561:
    set $P512, $P101
    unless $P101 goto if1491_end4566 
.annotate 'line', 2306
.annotate 'line', 2307
    find_lex $P509, "$/"
    $P510 = $P509."CURSOR"()
    $P511 = $P510."panic"("Cannot declare a multi when an only is already in scope.")
    set $P512, $P511
  if1491_end4566:
    set $P513, $P512
  if1490_end4562:
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1346233478.067") :anon :lex :outer("cuid_449_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2331
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    find_dynamic_lex $P503, "$*SCOPE"
    unless_null $P503, fallback4587
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$SCOPE"]
    unless_null $P504, fallback4588
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback4588:
    unless_null $P504, vivi_14984589
    die "Contextual $*SCOPE not found"
    box $P508, "Contextual $*SCOPE not found"
    set $P504, $P508
  vivi_14984589:
    set $P503, $P504
  fallback4587:
    set $S501, $P503
    iseq $I501, $S501, "our"
    box $P511, $I501
    set $P510, $P511
    unless $I501 goto if1497_end4586 
.annotate 'line', 2335
    box $P509, "our-scoped protos not yet implemented"
    die $P509
    set $P510, $P509
  if1497_end4586:
.annotate 'line', 2336
    find_dynamic_lex $P512, "$*W"
    unless_null $P512, fallback4590
    get_hll_global $P515, "GLOBAL"
    get_who $P514, $P515
    set $P513, $P514["$W"]
    unless_null $P513, fallback4591
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P516
  fallback4591:
    unless_null $P513, vivi_14994592
    die "Contextual $*W not found"
    box $P517, "Contextual $*W not found"
    set $P513, $P517
  vivi_14994592:
    set $P512, $P513
  fallback4590:
    find_lex $P518, "$past"
    find_lex $P519, "$name"
    $P520 = $P512."create_code"($P518, $P519, 1)
    set $P101, $P520
.annotate 'line', 2337
    find_dynamic_lex $P521, "$*W"
    unless_null $P521, fallback4593
    get_hll_global $P524, "GLOBAL"
    get_who $P523, $P524
    set $P522, $P523["$W"]
    unless_null $P522, fallback4594
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P525
  fallback4594:
    unless_null $P522, vivi_15004595
    die "Contextual $*W not found"
    box $P526, "Contextual $*W not found"
    set $P522, $P526
  vivi_15004595:
    set $P521, $P522
  fallback4593:
    $P527 = $P521."cur_lexpad"()
    set $P102, $P527
.annotate 'line', 2338
    set $P528, $P102[0]
    unless_null $P528, fallback4596
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P528, $P529
  fallback4596:
    get_hll_global $P533, "GLOBAL"
    nqp_get_package_through_who $P532, $P533, "QAST"
    get_who $P531, $P532
    set $P530, $P531["Op"]
    unless_null $P530, fallback4597
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P534
  fallback4597:
.annotate 'line', 2340
    get_hll_global $P538, "GLOBAL"
    nqp_get_package_through_who $P537, $P538, "QAST"
    get_who $P536, $P537
    set $P535, $P536["Var"]
    unless_null $P535, fallback4598
    nqp_get_sc_object $P539, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P535, $P539
  fallback4598:
    find_lex $P540, "$name"
    set $S503, $P540
    concat $S502, "&", $S503
    $P541 = $P535."new"($S502 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P542, "$past"
    $P543 = $P530."new"($P541, $P542, "bind" :named("op"))
    $P544 = $P528."push"($P543)
.annotate 'line', 2343
    find_lex $P545, "$name"
    set $S505, $P545
    concat $S504, "&", $S505
    $P546 = $P102."symbol"($S504, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P546) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1346233478.067") :anon :lex :outer("cuid_449_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2345
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2346
    find_dynamic_lex $P502, "$*W"
    unless_null $P502, fallback4599
    get_hll_global $P505, "GLOBAL"
    get_who $P504, $P505
    set $P503, $P504["$W"]
    unless_null $P503, fallback4600
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback4600:
    unless_null $P503, vivi_15014601
    die "Contextual $*W not found"
    box $P507, "Contextual $*W not found"
    set $P503, $P507
  vivi_15014601:
    set $P502, $P503
  fallback4599:
    $P508 = $P502."cur_lexpad"()
    set $P101, $P508
.annotate 'line', 2347
    set $P509, $P101[0]
    unless_null $P509, fallback4602
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback4602:
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["Op"]
    unless_null $P511, fallback4603
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback4603:
.annotate 'line', 2349
    get_hll_global $P519, "GLOBAL"
    nqp_get_package_through_who $P518, $P519, "QAST"
    get_who $P517, $P518
    set $P516, $P517["Var"]
    unless_null $P516, fallback4604
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P520
  fallback4604:
    find_lex $P521, "$name"
    set $S502, $P521
    concat $S501, "&", $S502
    $P522 = $P516."new"($S501 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P523, "$past"
    $P524 = $P511."new"($P522, $P523, "bind" :named("op"))
    $P525 = $P509."push"($P524)
.annotate 'line', 2352
    find_lex $P526, "$name"
    set $S504, $P526
    concat $S503, "&", $S504
    $P527 = $P101."symbol"($S503, "lexical" :named("scope"))
    find_dynamic_lex $P528, "$*SCOPE"
    unless_null $P528, fallback4607
    get_hll_global $P531, "GLOBAL"
    get_who $P530, $P531
    set $P529, $P530["$SCOPE"]
    unless_null $P529, fallback4608
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P532
  fallback4608:
    unless_null $P529, vivi_15034609
    die "Contextual $*SCOPE not found"
    box $P533, "Contextual $*SCOPE not found"
    set $P529, $P533
  vivi_15034609:
    set $P528, $P529
  fallback4607:
    set $S505, $P528
    iseq $I501, $S505, "our"
    box $P570, $I501
    set $P569, $P570
    unless $I501 goto if1502_end4606 
.annotate 'line', 2353
.annotate 'line', 2356
    find_dynamic_lex $P534, "$*W"
    unless_null $P534, fallback4610
    get_hll_global $P537, "GLOBAL"
    get_who $P536, $P537
    set $P535, $P536["$W"]
    unless_null $P535, fallback4611
    nqp_get_sc_object $P538, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P535, $P538
  fallback4611:
    unless_null $P535, vivi_15044612
    die "Contextual $*W not found"
    box $P539, "Contextual $*W not found"
    set $P535, $P539
  vivi_15044612:
    set $P534, $P535
  fallback4610:
    find_dynamic_lex $P540, "$*PACKAGE"
    unless_null $P540, fallback4613
    get_hll_global $P543, "GLOBAL"
    get_who $P542, $P543
    set $P541, $P542["$PACKAGE"]
    unless_null $P541, fallback4614
    nqp_get_sc_object $P544, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P544
  fallback4614:
    unless_null $P541, vivi_15054615
    die "Contextual $*PACKAGE not found"
    box $P545, "Contextual $*PACKAGE not found"
    set $P541, $P545
  vivi_15054615:
    set $P540, $P541
  fallback4613:
    find_lex $P546, "$name"
    find_lex $P547, "$past"
    $P548 = $P534."install_package_routine"($P540, $P546, $P547)
.annotate 'line', 2357
    set $P549, $P101[0]
    unless_null $P549, fallback4616
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P550
  fallback4616:
    get_hll_global $P554, "GLOBAL"
    nqp_get_package_through_who $P553, $P554, "QAST"
    get_who $P552, $P553
    set $P551, $P552["Op"]
    unless_null $P551, fallback4617
    nqp_get_sc_object $P555, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P551, $P555
  fallback4617:
.annotate 'line', 2359
    new $P556, 'ResizablePMCArray'
    find_lex $P557, "$name"
    push $P556, $P557
    find_lex $P558, "$/"
    $P559 = "&lexical_package_lookup"($P556, $P558)
.annotate 'line', 2360
    get_hll_global $P563, "GLOBAL"
    nqp_get_package_through_who $P562, $P563, "QAST"
    get_who $P561, $P562
    set $P560, $P561["Var"]
    unless_null $P560, fallback4618
    nqp_get_sc_object $P564, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P560, $P564
  fallback4618:
    find_lex $P565, "$name"
    set $S507, $P565
    concat $S506, "&", $S507
    $P566 = $P560."new"($S506 :named("name"), "lexical" :named("scope"))
    $P567 = $P551."new"($P559, $P566, "bind" :named("op"))
    $P568 = $P549."push"($P567)
    set $P569, $P568
  if1502_end4606:
    .return ($P569) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1346233478.067") :anon :lex :outer("cuid_306_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2388
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P502, "$/"
    $P501 = _lex_param_0."ast"()
    $P503 = $P501($P502)
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_307_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2393
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P565 = 'cuid_453_1346233478.067' 
    capture_lex $P565 
    .const 'Sub' $P565 = 'cuid_454_1346233478.067' 
    capture_lex $P565 
    .lex "$past", $P101 
    .lex "$lexpast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $P503, _lex_param_1["onlystar"]
    unless_null $P503, fallback4649
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4649:
    unless $P503 goto if1514_else4647 
.annotate 'line', 2397
.annotate 'line', 2398
    $P505 = "&only_star_block"()
    set $P101, $P505
    set $P520, $P101
    goto if1514_end4648
  if1514_else4647:
.annotate 'line', 2400
.annotate 'line', 2401
    set $P506, _lex_param_1["blockoid"]
    unless_null $P506, fallback4650
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4650:
    $P508 = $P506."ast"()
    set $P101, $P508
.annotate 'line', 2402
    $P509 = $P101."blocktype"("declaration")
    find_dynamic_lex $P510, "$*RETURN_USED"
    unless_null $P510, fallback4653
    get_hll_global $P513, "GLOBAL"
    get_who $P512, $P513
    set $P511, $P512["$RETURN_USED"]
    unless_null $P511, fallback4654
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P514
  fallback4654:
    unless_null $P511, vivi_15164655
    die "Contextual $*RETURN_USED not found"
    box $P515, "Contextual $*RETURN_USED not found"
    set $P511, $P515
  vivi_15164655:
    set $P510, $P511
  fallback4653:
    set $P519, $P510
    unless $P510 goto if1515_end4652 
.annotate 'line', 2403
.annotate 'line', 2404
    set $P516, $P101[1]
    unless_null $P516, fallback4656
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P517
  fallback4656:
    $P518 = "&wrap_return_handler"($P516)
    set $P101[1], $P518
    set $P519, $P518
  if1515_end4652:
    set $P520, $P519
  if1514_end4648:
    set $P521, $P101["signature_has_invocant"]
    unless_null $P521, fallback4659
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P522
  fallback4659:
    set $P538, $P521
    if $P521 goto unless1517_end4658 
.annotate 'line', 2409
.annotate 'line', 2410
    set $P523, $P101[0]
    unless_null $P523, fallback4660
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P524
  fallback4660:
    get_hll_global $P528, "GLOBAL"
    nqp_get_package_through_who $P527, $P528, "QAST"
    get_who $P526, $P527
    set $P525, $P526["Var"]
    unless_null $P525, fallback4661
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P529
  fallback4661:
    find_dynamic_lex $P530, "$*PACKAGE"
    unless_null $P530, fallback4662
    get_hll_global $P533, "GLOBAL"
    get_who $P532, $P533
    set $P531, $P532["$PACKAGE"]
    unless_null $P531, fallback4663
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P531, $P534
  fallback4663:
    unless_null $P531, vivi_15184664
    die "Contextual $*PACKAGE not found"
    box $P535, "Contextual $*PACKAGE not found"
    set $P531, $P535
  vivi_15184664:
    set $P530, $P531
  fallback4662:
    $P536 = $P525."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P530 :named("returns"))
    $P537 = $P523."unshift"($P536)
    set $P538, $P537
  unless1517_end4658:
.annotate 'line', 2415
    $P539 = $P101."symbol"("self", "lexical" :named("scope"))
    set $P540, _lex_param_1["deflongname"]
    unless_null $P540, fallback4667
    nqp_get_sc_object $P541, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P540, $P541
  fallback4667:
    set $P544, $P540
    unless $P540 goto if1519_end4666 
    .const 'Sub' $P542 = 'cuid_453_1346233478.067' 
    capture_lex $P542
    $P543 = $P542()
    set $P544, $P543
  if1519_end4666:
.annotate 'line', 2438
    get_hll_global $P548, "GLOBAL"
    nqp_get_package_through_who $P547, $P548, "QAST"
    get_who $P546, $P547
    set $P545, $P546["Op"]
    unless_null $P545, fallback4704
    nqp_get_sc_object $P549, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P545, $P549
  fallback4704:
    $P550 = $P545."new"($P101, "takeclosure" :named("op"))
    set $P102, $P550
    set $P102["sink"], $P101
    set $P102["block_past"], $P101
    set $P551, $P101["code_obj"]
    unless_null $P551, fallback4705
    nqp_get_sc_object $P552, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P551, $P552
  fallback4705:
    set $P102["code_obj"], $P551
.annotate 'line', 2442
    $P553 = _lex_param_1."!make"($P102)
    set $P554, _lex_param_1["trait"]
    unless_null $P554, fallback4708
    nqp_get_sc_object $P555, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P554, $P555
  fallback4708:
    set $P564, $P554
    unless $P554 goto if1532_end4707 
.annotate 'line', 2443
    set $P559, _lex_param_1["trait"]
    unless_null $P559, fallback4709
    nqp_get_sc_object $P560, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P559, $P560
  fallback4709:
    set $P556, $P559
    iter $P558, $P559
    new $P562, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P562, for_handlers4710
    push_eh $P562
  for_next4711:
    unless $P558, for_done4713
    shift $P563, $P558
  for_redo4712:
    .const 'Sub' $P561 = 'cuid_454_1346233478.067' 
    capture_lex $P561
    $P556 = $P561($P563)
    goto for_next4711
  for_handlers4710:
    .get_results ($P562)
    pop_upto_eh $P562
    getattribute $P562, $P562, 'type'
    eq $P562, .CONTROL_LOOP_NEXT, for_next4711
    eq $P562, .CONTROL_LOOP_REDO, for_redo4712
  for_done4713:
    pop_eh 
    set $P564, $P556
  if1532_end4707:
    .return ($P564) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1346233478.067") :anon :lex :outer("cuid_307_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2418
    .lex "$name", $P101 
    .lex "$meta_meth", $P102 
    .lex "$is_dispatcher", $P103 
    .lex "$code", $P104 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
    find_lex $P506, "$/"
    set $P505, $P506["private"]
    unless_null $P505, fallback4668
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P507
  fallback4668:
    set $S502, $P505
.annotate 'line', 2420
    find_lex $P510, "$/"
    set $P509, $P510["deflongname"]
    unless_null $P509, fallback4669
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P511
  fallback4669:
    set $P508, $P509[0]
    unless_null $P508, fallback4670
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P512
  fallback4670:
    $P513 = $P508."ast"()
    set $S503, $P513
    concat $S501, $S502, $S503
    box $P514, $S501
    set $P101, $P514
.annotate 'line', 2421
    find_lex $P515, "$past"
    $P516 = $P515."name"($P101)
    find_dynamic_lex $P517, "$*MULTINESS"
    unless_null $P517, fallback4673
    get_hll_global $P520, "GLOBAL"
    get_who $P519, $P520
    set $P518, $P519["$MULTINESS"]
    unless_null $P518, fallback4674
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P521
  fallback4674:
    unless_null $P518, vivi_15214675
    die "Contextual $*MULTINESS not found"
    box $P522, "Contextual $*MULTINESS not found"
    set $P518, $P522
  vivi_15214675:
    set $P517, $P518
  fallback4673:
    set $S504, $P517
    iseq $I501, $S504, "multi"
    unless $I501 goto if1520_else4671 
    set $S505, "add_multi_method"
    goto if1520_end4672
  if1520_else4671:
    set $S505, "add_method"
  if1520_end4672:
    box $P523, $S505
    set $P102, $P523
    find_dynamic_lex $P524, "$*MULTINESS"
    unless_null $P524, fallback4676
    get_hll_global $P527, "GLOBAL"
    get_who $P526, $P527
    set $P525, $P526["$MULTINESS"]
    unless_null $P525, fallback4677
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P528
  fallback4677:
    unless_null $P525, vivi_15224678
    die "Contextual $*MULTINESS not found"
    box $P529, "Contextual $*MULTINESS not found"
    set $P525, $P529
  vivi_15224678:
    set $P524, $P525
  fallback4676:
    set $S506, $P524
    iseq $I502, $S506, "proto"
    box $P530, $I502
    set $P103, $P530
.annotate 'line', 2426
    find_dynamic_lex $P531, "$*W"
    unless_null $P531, fallback4679
    get_hll_global $P534, "GLOBAL"
    get_who $P533, $P534
    set $P532, $P533["$W"]
    unless_null $P532, fallback4680
    nqp_get_sc_object $P535, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P532, $P535
  fallback4680:
    unless_null $P532, vivi_15234681
    die "Contextual $*W not found"
    box $P536, "Contextual $*W not found"
    set $P532, $P536
  vivi_15234681:
    set $P531, $P532
  fallback4679:
    find_lex $P537, "$past"
    $P538 = $P531."create_code"($P537, $P101, $P103)
    set $P104, $P538
    find_dynamic_lex $P539, "$*MULTINESS"
    unless_null $P539, fallback4684
    get_hll_global $P542, "GLOBAL"
    get_who $P541, $P542
    set $P540, $P541["$MULTINESS"]
    unless_null $P540, fallback4685
    nqp_get_sc_object $P543, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P540, $P543
  fallback4685:
    unless_null $P540, vivi_15254686
    die "Contextual $*MULTINESS not found"
    box $P544, "Contextual $*MULTINESS not found"
    set $P540, $P544
  vivi_15254686:
    set $P539, $P540
  fallback4684:
    set $S507, $P539
    iseq $I503, $S507, "multi"
    box $P548, $I503
    set $P547, $P548
    unless $I503 goto if1524_end4683 
.annotate 'line', 2427
    find_lex $P545, "$past"
    $P546 = "&attach_multi_signature"($P104, $P545)
    set $P547, $P546
  if1524_end4683:
.annotate 'line', 2428
    find_dynamic_lex $P549, "$*W"
    unless_null $P549, fallback4687
    get_hll_global $P552, "GLOBAL"
    get_who $P551, $P552
    set $P550, $P551["$W"]
    unless_null $P550, fallback4688
    nqp_get_sc_object $P553, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P550, $P553
  fallback4688:
    unless_null $P550, vivi_15264689
    die "Contextual $*W not found"
    box $P554, "Contextual $*W not found"
    set $P550, $P554
  vivi_15264689:
    set $P549, $P550
  fallback4687:
    find_dynamic_lex $P555, "$*PACKAGE"
    unless_null $P555, fallback4690
    get_hll_global $P558, "GLOBAL"
    get_who $P557, $P558
    set $P556, $P557["$PACKAGE"]
    unless_null $P556, fallback4691
    nqp_get_sc_object $P559, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P556, $P559
  fallback4691:
    unless_null $P556, vivi_15274692
    die "Contextual $*PACKAGE not found"
    box $P560, "Contextual $*PACKAGE not found"
    set $P556, $P560
  vivi_15274692:
    set $P555, $P556
  fallback4690:
    $P561 = $P549."pkg_add_method"($P555, $P102, $P101, $P104)
    find_lex $P562, "$past"
    set $P562["code_obj"], $P104
    find_dynamic_lex $P563, "$*SCOPE"
    unless_null $P563, fallback4695
    get_hll_global $P566, "GLOBAL"
    get_who $P565, $P566
    set $P564, $P565["$SCOPE"]
    unless_null $P564, fallback4696
    nqp_get_sc_object $P567, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P564, $P567
  fallback4696:
    unless_null $P564, vivi_15294697
    die "Contextual $*SCOPE not found"
    box $P568, "Contextual $*SCOPE not found"
    set $P564, $P568
  vivi_15294697:
    set $P563, $P564
  fallback4695:
    set $S508, $P563
    iseq $I504, $S508, "our"
    box $P584, $I504
    set $P583, $P584
    unless $I504 goto if1528_end4694 
.annotate 'line', 2432
.annotate 'line', 2433
    find_dynamic_lex $P569, "$*W"
    unless_null $P569, fallback4698
    get_hll_global $P572, "GLOBAL"
    get_who $P571, $P572
    set $P570, $P571["$W"]
    unless_null $P570, fallback4699
    nqp_get_sc_object $P573, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P570, $P573
  fallback4699:
    unless_null $P570, vivi_15304700
    die "Contextual $*W not found"
    box $P574, "Contextual $*W not found"
    set $P570, $P574
  vivi_15304700:
    set $P569, $P570
  fallback4698:
    find_dynamic_lex $P575, "$*PACKAGE"
    unless_null $P575, fallback4701
    get_hll_global $P578, "GLOBAL"
    get_who $P577, $P578
    set $P576, $P577["$PACKAGE"]
    unless_null $P576, fallback4702
    nqp_get_sc_object $P579, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P576, $P579
  fallback4702:
    unless_null $P576, vivi_15314703
    die "Contextual $*PACKAGE not found"
    box $P580, "Contextual $*PACKAGE not found"
    set $P576, $P580
  vivi_15314703:
    set $P575, $P576
  fallback4701:
    find_lex $P581, "$past"
    $P582 = $P569."install_package_routine"($P575, $P101, $P581)
    set $P583, $P582
  if1528_end4694:
    .return ($P583) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1346233478.067") :anon :lex :outer("cuid_307_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2444
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P502, "$/"
    $P501 = _lex_param_0."ast"()
    $P503 = $P501($P502)
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_308_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2477
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P525 = 'cuid_455_1346233478.067' 
    capture_lex $P525 
    .const 'Sub' $P525 = 'cuid_456_1346233478.067' 
    capture_lex $P525 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 2478
    find_dynamic_lex $P503, "$*W"
    unless_null $P503, fallback4714
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$W"]
    unless_null $P504, fallback4715
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback4715:
    unless_null $P504, vivi_15334716
    die "Contextual $*W not found"
    box $P508, "Contextual $*W not found"
    set $P504, $P508
  vivi_15334716:
    set $P503, $P504
  fallback4714:
    $P509 = $P503."cur_lexpad"()
    set $P101, $P509
    set $P510, $P101[0]
    unless_null $P510, fallback4717
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4717:
    set $P102, $P510
    set $P512, _lex_param_1["invocant"]
    unless_null $P512, fallback4720
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P513
  fallback4720:
    set $P516, $P512
    unless $P512 goto if1534_end4719 
    .const 'Sub' $P514 = 'cuid_455_1346233478.067' 
    capture_lex $P514
    $P515 = $P514()
    set $P516, $P515
  if1534_end4719:
    set $P520, _lex_param_1["parameter"]
    unless_null $P520, fallback4726
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P521
  fallback4726:
    set $P517, $P520
    iter $P519, $P520
    new $P523, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P523, for_handlers4727
    push_eh $P523
  for_next4728:
    unless $P519, for_done4730
    shift $P524, $P519
  for_redo4729:
    .const 'Sub' $P522 = 'cuid_456_1346233478.067' 
    capture_lex $P522
    $P517 = $P522($P524)
    goto for_next4728
  for_handlers4727:
    .get_results ($P523)
    pop_upto_eh $P523
    getattribute $P523, $P523, 'type'
    eq $P523, .CONTROL_LOOP_NEXT, for_next4728
    eq $P523, .CONTROL_LOOP_REDO, for_redo4729
  for_done4730:
    pop_eh 
    .return ($P517) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1346233478.067") :anon :lex :outer("cuid_308_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2480
    .lex "$inv", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2481
    find_lex $P504, "$/"
    set $P503, $P504["invocant"]
    unless_null $P503, fallback4721
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P505
  fallback4721:
    set $P502, $P503[0]
    unless_null $P502, fallback4722
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback4722:
    $P507 = $P502."ast"()
    set $P101, $P507
.annotate 'line', 2482
    find_lex $P508, "$BLOCKINIT"
    $P509 = $P508."push"($P101)
.annotate 'line', 2483
    find_lex $P510, "$BLOCKINIT"
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["Op"]
    unless_null $P511, fallback4723
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback4723:
.annotate 'line', 2485
    get_hll_global $P519, "GLOBAL"
    nqp_get_package_through_who $P518, $P519, "QAST"
    get_who $P517, $P518
    set $P516, $P517["Var"]
    unless_null $P516, fallback4724
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P520
  fallback4724:
    $P521 = $P516."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2486
    get_hll_global $P525, "GLOBAL"
    nqp_get_package_through_who $P524, $P525, "QAST"
    get_who $P523, $P524
    set $P522, $P523["Var"]
    unless_null $P522, fallback4725
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P526
  fallback4725:
    $P527 = $P101."name"()
    $P528 = $P522."new"("lexical" :named("scope"), $P527 :named("name"))
    $P529 = $P511."new"($P521, $P528, "bind" :named("op"))
    $P530 = $P510."push"($P529)
    find_lex $P531, "$BLOCK"
    box $P532, 1
    set $P531["signature_has_invocant"], $P532
    .return ($P532) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1346233478.067") :anon :lex :outer("cuid_308_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2490
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P501, "$BLOCKINIT"
    $P502 = _lex_param_0."ast"()
    $P503 = $P501."push"($P502)
    .return ($P503) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_309_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2493
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $P503, _lex_param_1["quant"]
    unless_null $P503, fallback4731
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4731:
    set $P101, $P503
    set $P505, _lex_param_1["named_param"]
    unless_null $P505, fallback4734
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback4734:
    unless $P505 goto if1535_else4732 
.annotate 'line', 2496
.annotate 'line', 2497
    set $P507, _lex_param_1["named_param"]
    unless_null $P507, fallback4735
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4735:
    $P509 = $P507."ast"()
    set $P102, $P509
    set $S501, $P101
    isne $I501, $S501, "!"
    box $P519, $I501
    set $P518, $P519
    unless $I501 goto if1536_end4737 
.annotate 'line', 2498
.annotate 'line', 2499
    set $P512, _lex_param_1["named_param"]
    unless_null $P512, fallback4738
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P513
  fallback4738:
    set $P511, $P512["param_var"]
    unless_null $P511, fallback4739
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P514
  fallback4739:
    set $P510, $P511["sigil"]
    unless_null $P510, fallback4740
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P515
  fallback4740:
    $P516 = "&default_for"($P510)
    $P517 = $P102."default"($P516)
    set $P518, $P517
  if1536_end4737:
    set $P538, $P518
    goto if1535_end4733
  if1535_else4732:
.annotate 'line', 2502
.annotate 'line', 2503
    set $P520, _lex_param_1["param_var"]
    unless_null $P520, fallback4741
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P521
  fallback4741:
    $P522 = $P520."ast"()
    set $P102, $P522
    set $S502, $P101
    iseq $I502, $S502, "*"
    unless $I502 goto if1537_else4742 
.annotate 'line', 2504
.annotate 'line', 2505
    $P523 = $P102."slurpy"(1)
.annotate 'line', 2506
    set $P525, _lex_param_1["param_var"]
    unless_null $P525, fallback4744
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P526
  fallback4744:
    set $P524, $P525["sigil"]
    unless_null $P524, fallback4745
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P527
  fallback4745:
    set $S503, $P524
    iseq $I503, $S503, "%"
    $P528 = $P102."named"($I503)
    set $P537, $P528
    goto if1537_end4743
  if1537_else4742:
    set $S504, $P101
    iseq $I504, $S504, "?"
    box $P536, $I504
    set $P535, $P536
    unless $I504 goto if1538_end4747 
.annotate 'line', 2508
.annotate 'line', 2509
    set $P530, _lex_param_1["param_var"]
    unless_null $P530, fallback4748
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P531
  fallback4748:
    set $P529, $P530["sigil"]
    unless_null $P529, fallback4749
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P532
  fallback4749:
    $P533 = "&default_for"($P529)
    $P534 = $P102."default"($P533)
    set $P535, $P534
  if1538_end4747:
    set $P537, $P535
  if1537_end4743:
    set $P538, $P537
  if1535_end4733:
    set $P539, _lex_param_1["default_value"]
    unless_null $P539, fallback4752
    nqp_get_sc_object $P540, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P539, $P540
  fallback4752:
    set $P557, $P539
    unless $P539 goto if1539_end4751 
.annotate 'line', 2512
    set $S505, $P101
    iseq $I505, $S505, "*"
    box $P544, $I505
    set $P543, $P544
    unless $I505 goto if1540_end4754 
.annotate 'line', 2513
.annotate 'line', 2514
    $P541 = _lex_param_1."CURSOR"()
    $P542 = $P541."panic"("Can't put default on slurpy parameter")
    set $P543, $P542
  if1540_end4754:
    set $S506, $P101
    iseq $I506, $S506, "!"
    box $P548, $I506
    set $P547, $P548
    unless $I506 goto if1541_end4756 
.annotate 'line', 2516
.annotate 'line', 2517
    $P545 = _lex_param_1."CURSOR"()
    $P546 = $P545."panic"("Can't put default on required parameter")
    set $P547, $P546
  if1541_end4756:
.annotate 'line', 2519
    set $P551, _lex_param_1["default_value"]
    unless_null $P551, fallback4757
    nqp_get_sc_object $P552, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P551, $P552
  fallback4757:
    set $P550, $P551[0]
    unless_null $P550, fallback4758
    nqp_get_sc_object $P553, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P550, $P553
  fallback4758:
    set $P549, $P550["EXPR"]
    unless_null $P549, fallback4759
    nqp_get_sc_object $P554, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P554
  fallback4759:
    $P555 = $P549."ast"()
    $P556 = $P102."default"($P555)
    set $P557, $P556
  if1539_end4751:
.annotate 'line', 2521
    $P558 = $P102."default"()
    set $P575, $P558
    if $P558 goto unless1542_end4761 
    find_dynamic_lex $P559, "$*W"
    unless_null $P559, fallback4762
    get_hll_global $P562, "GLOBAL"
    get_who $P561, $P562
    set $P560, $P561["$W"]
    unless_null $P560, fallback4763
    nqp_get_sc_object $P563, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P560, $P563
  fallback4763:
    unless_null $P560, vivi_15434764
    die "Contextual $*W not found"
    box $P564, "Contextual $*W not found"
    set $P560, $P564
  vivi_15434764:
    set $P559, $P560
  fallback4762:
    $P565 = $P559."cur_lexpad"()
    find_dynamic_lex $P566, "$*W"
    unless_null $P566, fallback4765
    get_hll_global $P569, "GLOBAL"
    get_who $P568, $P569
    set $P567, $P568["$W"]
    unless_null $P567, fallback4766
    nqp_get_sc_object $P570, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P567, $P570
  fallback4766:
    unless_null $P567, vivi_15444767
    die "Contextual $*W not found"
    box $P571, "Contextual $*W not found"
    set $P567, $P571
  vivi_15444767:
    set $P566, $P567
  fallback4765:
    $P572 = $P566."cur_lexpad"()
    $P573 = $P572."arity"()
    set $N502, $P573
    set $N503, 1
    add $N501, $N502, $N503
    $P574 = $P565."arity"($N501)
    set $P575, $P574
  unless1542_end4761:
    set $P576, _lex_param_1["typename"]
    unless_null $P576, fallback4770
    nqp_get_sc_object $P577, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P576, $P577
  fallback4770:
    set $P585, $P576
    unless $P576 goto if1545_end4769 
.annotate 'line', 2524
.annotate 'line', 2525
    set $P579, _lex_param_1["typename"]
    unless_null $P579, fallback4771
    nqp_get_sc_object $P580, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P579, $P580
  fallback4771:
    set $P578, $P579[0]
    unless_null $P578, fallback4772
    nqp_get_sc_object $P581, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P578, $P581
  fallback4772:
    $P582 = $P578."ast"()
    $P583 = $P582."value"()
    $P584 = $P102."returns"($P583)
    set $P585, $P584
  if1545_end4769:
    set $P586, _lex_param_1["definedness"]
    unless_null $P586, fallback4775
    nqp_get_sc_object $P587, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P586, $P587
  fallback4775:
    set $P593, $P586
    unless $P586 goto if1546_end4774 
.annotate 'line', 2529
    set $P589, _lex_param_1["definedness"]
    unless_null $P589, fallback4776
    nqp_get_sc_object $P590, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P589, $P590
  fallback4776:
    set $P588, $P589[0]
    unless_null $P588, fallback4777
    nqp_get_sc_object $P591, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P588, $P591
  fallback4777:
    set $S507, $P588
    box $P592, $S507
    set $P102["definedness"], $P592
    set $P593, $P592
  if1546_end4774:
.annotate 'line', 2533
    $P594 = _lex_param_1."!make"($P102)
    .return ($P594) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_310_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2536
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $S501, _lex_param_1
    box $P503, $S501
    set $P101, $P503
.annotate 'line', 2538
    get_hll_global $P507, "GLOBAL"
    nqp_get_package_through_who $P506, $P507, "QAST"
    get_who $P505, $P506
    set $P504, $P505["Var"]
    unless_null $P504, fallback4778
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P508
  fallback4778:
    $P509 = $P504."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P509
.annotate 'line', 2540
    find_dynamic_lex $P510, "$*W"
    unless_null $P510, fallback4779
    get_hll_global $P513, "GLOBAL"
    get_who $P512, $P513
    set $P511, $P512["$W"]
    unless_null $P511, fallback4780
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P514
  fallback4780:
    unless_null $P511, vivi_15474781
    die "Contextual $*W not found"
    box $P515, "Contextual $*W not found"
    set $P511, $P515
  vivi_15474781:
    set $P510, $P511
  fallback4779:
    $P516 = $P510."cur_lexpad"()
    $P517 = $P516."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2541
    $P518 = _lex_param_1."!make"($P102)
    .return ($P518) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_311_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2544
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2545
    set $P502, _lex_param_1["param_var"]
    unless_null $P502, fallback4782
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4782:
    $P504 = $P502."ast"()
    set $P101, $P504
.annotate 'line', 2546
    set $P506, _lex_param_1["param_var"]
    unless_null $P506, fallback4783
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4783:
    set $P505, $P506["name"]
    unless_null $P505, fallback4784
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P508
  fallback4784:
    set $S501, $P505
    $P509 = $P101."named"($S501)
.annotate 'line', 2547
    $P510 = _lex_param_1."!make"($P101)
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_312_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2550
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P517 = 'cuid_457_1346233478.067' 
    capture_lex $P517 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 2554
    get_hll_global $P506, "GLOBAL"
    nqp_get_package_through_who $P505, $P506, "HLL"
    get_who $P504, $P505
    set $P503, $P504["Compiler"]
    unless_null $P503, fallback4785
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P507
  fallback4785:
    set $S501, _lex_param_1
    $P508 = $P503."parse_name"($S501)
    set $P101, $P508
    box $P509, 0
    set $P102, $P509
    new $P512, 'ExceptionHandler'
    set_label $P512, catch_handler_15504791
    $P512.'handle_types_except'(.CONTROL_ALL)
    push_eh $P512
    .const 'Sub' $P510 = 'cuid_457_1346233478.067' 
    capture_lex $P510
    $P511 = $P510()
    set $P513, $P511
    pop_eh 
    goto skip_handler_15494790
  catch_handler_15504791:
    .get_results ($P512) 
    set $I10001, 1
    set $P512["handled"], $I10001
    nqp_get_sc_object $P10001, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    finalize $P512
    pop_upto_eh $P512
    pop_eh 
    set $P513, $P10001
    goto skip_handler_15494790
  skip_handler_15494790:
    set $P516, $P102
    if $P102 goto unless1551_end4793 
.annotate 'line', 2561
.annotate 'line', 2562
    $P514 = _lex_param_1."CURSOR"()
    set $S504, _lex_param_1
    concat $S503, "Use of undeclared type '", $S504
    concat $S502, $S503, "'"
    $P515 = $P514."panic"($S502)
    set $P516, $P515
  unless1551_end4793:
    .return ($P516) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1346233478.067") :anon :lex :outer("cuid_312_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2556
    .lex "$sym", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2557
    find_dynamic_lex $P502, "$*W"
    unless_null $P502, fallback4786
    get_hll_global $P505, "GLOBAL"
    get_who $P504, $P505
    set $P503, $P504["$W"]
    unless_null $P503, fallback4787
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback4787:
    unless_null $P503, vivi_15484788
    die "Contextual $*W not found"
    box $P507, "Contextual $*W not found"
    set $P503, $P507
  vivi_15484788:
    set $P502, $P503
  fallback4786:
    find_lex $P508, "@name"
    $P509 = $P502."find_sym"($P508)
    set $P101, $P509
.annotate 'line', 2558
    find_dynamic_lex $P510, "$/"
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["WVal"]
    unless_null $P511, fallback4789
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback4789:
    $P516 = $P511."new"($P101 :named("value"))
    $P517 = $P510."!make"($P516)
    box $P518, 1
    store_lex "$found", $P518
    .return ($P518) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_313_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2566
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2567
    set $P501, _lex_param_1["trait_mod"]
    unless_null $P501, fallback4794
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4794:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_314_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2570
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P515 = 'cuid_459_1346233478.067' 
    capture_lex $P515 
    .const 'Sub' $P515 = 'cuid_461_1346233478.067' 
    capture_lex $P515 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["longname"]
    unless_null $P501, fallback4797
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4797:
    set $S501, $P501
    iseq $I501, $S501, "parrot_vtable"
    unless $I501 goto if1552_else4795 
    .const 'Sub' $P503 = 'cuid_459_1346233478.067' 
    capture_lex $P503
    $P504 = $P503()
    set $P514, $P504
    goto if1552_end4796
  if1552_else4795:
    set $P505, _lex_param_1["longname"]
    unless_null $P505, fallback4820
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback4820:
    set $S502, $P505
    iseq $I502, $S502, "parrot_vtable_handler"
    unless $I502 goto if1558_else4818 
    .const 'Sub' $P507 = 'cuid_461_1346233478.067' 
    capture_lex $P507
    $P508 = $P507()
    set $P513, $P508
    goto if1558_end4819
  if1558_else4818:
.annotate 'line', 2596
.annotate 'line', 2597
    $P509 = _lex_param_1."CURSOR"()
    set $P510, _lex_param_1["longname"]
    unless_null $P510, fallback4833
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4833:
    set $S505, $P510
    concat $S504, "Trait '", $S505
    concat $S503, $S504, "' not implemented"
    $P512 = $P509."panic"($S503)
    set $P513, $P512
  if1558_end4819:
    set $P514, $P513
  if1552_end4796:
    .return ($P514) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1346233478.067") :anon :lex :outer("cuid_314_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2571
    .const 'Sub' $P539 = 'cuid_458_1346233478.067' 
    capture_lex $P539 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P104, $P504
.annotate 'line', 2573
    find_lex $P507, "$/"
    set $P506, $P507["circumfix"]
    unless_null $P506, fallback4798
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P508
  fallback4798:
    set $P505, $P506[0]
    unless_null $P505, fallback4799
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P509
  fallback4799:
    $P510 = $P505."ast"()
    set $P101, $P510
.annotate 'line', 2575
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["SVal"]
    unless_null $P511, fallback4802
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback4802:
    $P516 = $P511."ACCEPTS"($P101)
    set $P520, $P516
    if $P516 goto unless1553_end4801 
.annotate 'line', 2574
    find_lex $P517, "$/"
    $P518 = $P517."CURSOR"()
    $P519 = $P518."panic"("Trait 'parrot_vtable' requires constant scalar argument")
    set $P520, $P519
  unless1553_end4801:
.annotate 'line', 2576
    $P521 = $P101."value"()
    set $P102, $P521
    find_dynamic_lex $P522, "$*PACKAGE"
    unless_null $P522, fallback4803
    get_hll_global $P525, "GLOBAL"
    get_who $P524, $P525
    set $P523, $P524["$PACKAGE"]
    unless_null $P523, fallback4804
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P526
  fallback4804:
    unless_null $P523, vivi_15544805
    die "Contextual $*PACKAGE not found"
    box $P527, "Contextual $*PACKAGE not found"
    set $P523, $P527
  vivi_15544805:
    set $P522, $P523
  fallback4803:
    set $P103, $P522
    find_dynamic_lex $P528, "$*SCOPE"
    unless_null $P528, fallback4806
    get_hll_global $P531, "GLOBAL"
    get_who $P530, $P531
    set $P529, $P530["$SCOPE"]
    unless_null $P529, fallback4807
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P532
  fallback4807:
    unless_null $P529, vivi_15554808
    die "Contextual $*SCOPE not found"
    box $P533, "Contextual $*SCOPE not found"
    set $P529, $P533
  vivi_15554808:
    set $P528, $P529
  fallback4806:
    set $S501, $P528
    iseq $I501, $S501, "proto"
    box $P534, $I501
    set $P104, $P534
.annotate 'line', 2579
    find_dynamic_lex $P535, "$/"
    .const 'Sub' $P537 = 'cuid_458_1346233478.067' 
    capture_lex $P537
    newclosure $P536, $P537
    $P538 = $P535."!make"($P536)
    .return ($P538) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1346233478.067") :anon :lex :outer("cuid_459_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2579
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2580
    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback4809
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback4810
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback4810:
    unless_null $P502, vivi_15564811
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_15564811:
    set $P501, $P502
  fallback4809:
    find_lex $P507, "$package"
    find_lex $P508, "$name"
.annotate 'line', 2581
    $P511 = _lex_param_0."ast"()
    set $P510, $P511["code_obj"]
    unless_null $P510, fallback4813
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P512
  fallback4813:
    set $P509, $P510
    defined $I501, $P509
    if $I501, defor4812
.annotate 'line', 2582
    find_dynamic_lex $P513, "$*W"
    unless_null $P513, fallback4814
    get_hll_global $P516, "GLOBAL"
    get_who $P515, $P516
    set $P514, $P515["$W"]
    unless_null $P514, fallback4815
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P517
  fallback4815:
    unless_null $P514, vivi_15574816
    die "Contextual $*W not found"
    box $P518, "Contextual $*W not found"
    set $P514, $P518
  vivi_15574816:
    set $P513, $P514
  fallback4814:
    $P520 = _lex_param_0."ast"()
    set $P519, $P520["block_past"]
    unless_null $P519, fallback4817
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P521
  fallback4817:
    find_lex $P522, "$name"
    find_lex $P523, "$is_dispatcher"
    $P524 = $P513."create_code"($P519, $P522, $P523)
    set $P509, $P524
  defor4812:
    $P525 = $P501."pkg_add_method"($P507, "add_parrot_vtable_mapping", $P508, $P509)
    .return ($P525) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1346233478.067") :anon :lex :outer("cuid_314_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2585
    .const 'Sub' $P531 = 'cuid_460_1346233478.067' 
    capture_lex $P531 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
.annotate 'line', 2587
    find_lex $P506, "$/"
    set $P505, $P506["circumfix"]
    unless_null $P505, fallback4821
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P507
  fallback4821:
    set $P504, $P505[0]
    unless_null $P504, fallback4822
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P508
  fallback4822:
    $P509 = $P504."ast"()
    set $P101, $P509
.annotate 'line', 2589
    get_hll_global $P513, "GLOBAL"
    nqp_get_package_through_who $P512, $P513, "QAST"
    get_who $P511, $P512
    set $P510, $P511["SVal"]
    unless_null $P510, fallback4825
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P514
  fallback4825:
    $P515 = $P510."ACCEPTS"($P101)
    set $P519, $P515
    if $P515 goto unless1559_end4824 
.annotate 'line', 2588
    find_lex $P516, "$/"
    $P517 = $P516."CURSOR"()
    $P518 = $P517."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
    set $P519, $P518
  unless1559_end4824:
.annotate 'line', 2590
    $P520 = $P101."value"()
    set $P102, $P520
    find_dynamic_lex $P521, "$*PACKAGE"
    unless_null $P521, fallback4826
    get_hll_global $P524, "GLOBAL"
    get_who $P523, $P524
    set $P522, $P523["$PACKAGE"]
    unless_null $P522, fallback4827
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P525
  fallback4827:
    unless_null $P522, vivi_15604828
    die "Contextual $*PACKAGE not found"
    box $P526, "Contextual $*PACKAGE not found"
    set $P522, $P526
  vivi_15604828:
    set $P521, $P522
  fallback4826:
    set $P103, $P521
.annotate 'line', 2592
    find_dynamic_lex $P527, "$/"
    .const 'Sub' $P529 = 'cuid_460_1346233478.067' 
    capture_lex $P529
    newclosure $P528, $P529
    $P530 = $P527."!make"($P528)
    .return ($P530) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1346233478.067") :anon :lex :outer("cuid_461_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2592
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2593
    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback4829
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback4830
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback4830:
    unless_null $P502, vivi_15614831
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_15614831:
    set $P501, $P502
  fallback4829:
    find_lex $P507, "$package"
    find_lex $P508, "$name"
    set $P509, _lex_param_0["variable"]
    unless_null $P509, fallback4832
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback4832:
    set $S501, $P509
    $P511 = $P501."pkg_add_parrot_vtable_handler_mapping"($P507, $P508, $S501)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_315_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2601
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P551 = 'cuid_462_1346233478.067' 
    capture_lex $P551 
    .const 'Sub' $P551 = 'cuid_463_1346233478.067' 
    capture_lex $P551 
    if haz_param_5, default4891
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set _lex_param_2, $P550
  default4891:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 2602
    set $P503, _lex_param_1["deflongname"]
    unless_null $P503, fallback4834
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4834:
    $P505 = $P503."ast"()
    set $S501, $P505
    box $P506, $S501
    set $P101, $P506
    set $P507, _lex_param_1["proto"]
    unless_null $P507, fallback4837
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4837:
    unless $P507 goto if1562_else4835 
.annotate 'line', 2604
.annotate 'line', 2606
    get_hll_global $P512, "GLOBAL"
    nqp_get_package_through_who $P511, $P512, "QAST"
    get_who $P510, $P511
    set $P509, $P510["Stmts"]
    unless_null $P509, fallback4838
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P513
  fallback4838:
.annotate 'line', 2607
    get_hll_global $P517, "GLOBAL"
    nqp_get_package_through_who $P516, $P517, "QAST"
    get_who $P515, $P516
    set $P514, $P515["Block"]
    unless_null $P514, fallback4839
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P518
  fallback4839:
.annotate 'line', 2609
    get_hll_global $P522, "GLOBAL"
    nqp_get_package_through_who $P521, $P522, "QAST"
    get_who $P520, $P521
    set $P519, $P520["Op"]
    unless_null $P519, fallback4840
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P523
  fallback4840:
.annotate 'line', 2610
    get_hll_global $P527, "GLOBAL"
    nqp_get_package_through_who $P526, $P527, "QAST"
    get_who $P525, $P526
    set $P524, $P525["Var"]
    unless_null $P524, fallback4841
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P528
  fallback4841:
    $P529 = $P524."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2611
    get_hll_global $P533, "GLOBAL"
    nqp_get_package_through_who $P532, $P533, "QAST"
    get_who $P531, $P532
    set $P530, $P531["SVal"]
    unless_null $P530, fallback4842
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P534
  fallback4842:
    $P535 = $P530."new"($P101 :named("value"))
    $P536 = $P519."new"($P529, $P535, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P537 = $P514."new"($P536, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    $P538 = $P509."new"($P537)
    set $P102, $P538
    $P542 = $P102."list"()
    set $P539, $P542
    iter $P541, $P542
    new $P544, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P544, for_handlers4852
    push_eh $P544
  for_next4853:
    unless $P541, for_done4855
    shift $P545, $P541
  for_redo4854:
    .const 'Sub' $P543 = 'cuid_462_1346233478.067' 
    capture_lex $P543
    $P539 = $P543($P545)
    goto for_next4853
  for_handlers4852:
    .get_results ($P544)
    pop_upto_eh $P544
    getattribute $P544, $P544, 'type'
    eq $P544, .CONTROL_LOOP_NEXT, for_next4853
    eq $P544, .CONTROL_LOOP_REDO, for_redo4854
  for_done4855:
    pop_eh 
    set $P548, $P539
    goto if1562_end4836
  if1562_else4835:
    .const 'Sub' $P546 = 'cuid_463_1346233478.067' 
    capture_lex $P546
    $P547 = $P546()
    set $P548, $P547
  if1562_end4836:
.annotate 'line', 2649
    $P549 = _lex_param_1."!make"($P102)
    .return ($P549) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1346233478.067") :anon :lex :outer("cuid_315_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2619
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2620
    find_dynamic_lex $P501, "$*W"
    unless_null $P501, fallback4843
    get_hll_global $P504, "GLOBAL"
    get_who $P503, $P504
    set $P502, $P503["$W"]
    unless_null $P502, fallback4844
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P505
  fallback4844:
    unless_null $P502, vivi_15634845
    die "Contextual $*W not found"
    box $P506, "Contextual $*W not found"
    set $P502, $P506
  vivi_15634845:
    set $P501, $P502
  fallback4843:
    find_dynamic_lex $P507, "$*PACKAGE"
    unless_null $P507, fallback4846
    get_hll_global $P510, "GLOBAL"
    get_who $P509, $P510
    set $P508, $P509["$PACKAGE"]
    unless_null $P508, fallback4847
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P511
  fallback4847:
    unless_null $P508, vivi_15644848
    die "Contextual $*PACKAGE not found"
    box $P512, "Contextual $*PACKAGE not found"
    set $P508, $P512
  vivi_15644848:
    set $P507, $P508
  fallback4846:
    $P513 = _lex_param_0."name"()
    find_dynamic_lex $P514, "$*W"
    unless_null $P514, fallback4849
    get_hll_global $P517, "GLOBAL"
    get_who $P516, $P517
    set $P515, $P516["$W"]
    unless_null $P515, fallback4850
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P518
  fallback4850:
    unless_null $P515, vivi_15654851
    die "Contextual $*W not found"
    box $P519, "Contextual $*W not found"
    set $P515, $P519
  vivi_15654851:
    set $P514, $P515
  fallback4849:
    $P520 = _lex_param_0."name"()
    $P521 = $P514."create_code"(_lex_param_0, $P520, 0)
    $P522 = $P501."pkg_add_method"($P507, "add_method", $P513, $P521)
    .return ($P522) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1346233478.067") :anon :lex :outer("cuid_315_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2623
    .lex "$block", $P101 
    .lex "$regex", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 2624
    find_dynamic_lex $P503, "$*W"
    unless_null $P503, fallback4856
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$W"]
    unless_null $P504, fallback4857
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback4857:
    unless_null $P504, vivi_15664858
    die "Contextual $*W not found"
    box $P508, "Contextual $*W not found"
    set $P504, $P508
  vivi_15664858:
    set $P503, $P504
  fallback4856:
    $P509 = $P503."pop_lexpad"()
    set $P101, $P509
.annotate 'line', 2625
    set $P510, $P101[0]
    unless_null $P510, fallback4859
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4859:
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Var"]
    unless_null $P512, fallback4860
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback4860:
    $P517 = $P512."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P518 = $P510."unshift"($P517)
.annotate 'line', 2626
    set $P519, $P101[0]
    unless_null $P519, fallback4861
    nqp_get_sc_object $P520, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P519, $P520
  fallback4861:
    get_hll_global $P524, "GLOBAL"
    nqp_get_package_through_who $P523, $P524, "QAST"
    get_who $P522, $P523
    set $P521, $P522["Op"]
    unless_null $P521, fallback4862
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P525
  fallback4862:
.annotate 'line', 2628
    get_hll_global $P529, "GLOBAL"
    nqp_get_package_through_who $P528, $P529, "QAST"
    get_who $P527, $P528
    set $P526, $P527["Var"]
    unless_null $P526, fallback4863
    nqp_get_sc_object $P530, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P530
  fallback4863:
    $P531 = $P526."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2629
    get_hll_global $P535, "GLOBAL"
    nqp_get_package_through_who $P534, $P535, "QAST"
    get_who $P533, $P534
    set $P532, $P533["Var"]
    unless_null $P532, fallback4864
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P532, $P536
  fallback4864:
    $P537 = $P532."new"("self" :named("name"), "lexical" :named("scope"))
    $P538 = $P521."new"($P531, $P537, "bind" :named("op"))
    $P539 = $P519."push"($P538)
.annotate 'line', 2630
    set $P540, $P101[0]
    unless_null $P540, fallback4865
    nqp_get_sc_object $P541, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P540, $P541
  fallback4865:
    get_hll_global $P545, "GLOBAL"
    nqp_get_package_through_who $P544, $P545, "QAST"
    get_who $P543, $P544
    set $P542, $P543["Var"]
    unless_null $P542, fallback4866
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P542, $P546
  fallback4866:
    $P547 = $P542."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P548 = $P540."push"($P547)
.annotate 'line', 2631
    set $P549, $P101[0]
    unless_null $P549, fallback4867
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P550
  fallback4867:
    get_hll_global $P554, "GLOBAL"
    nqp_get_package_through_who $P553, $P554, "QAST"
    get_who $P552, $P553
    set $P551, $P552["Var"]
    unless_null $P551, fallback4868
    nqp_get_sc_object $P555, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P551, $P555
  fallback4868:
    $P556 = $P551."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P557 = $P549."push"($P556)
.annotate 'line', 2632
    $P558 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2633
    $P559 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2634
    find_lex $P568, "$/"
    set $P567, $P568["p6regex"]
    unless_null $P567, fallback4870
    nqp_get_sc_object $P569, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P567, $P569
  fallback4870:
    $P570 = $P567."ast"()
    get_hll_global $P565, "GLOBAL"
    nqp_get_package_through_who $P564, $P565, "QRegex"
    nqp_get_package_through_who $P563, $P564, "P6Regex"
    nqp_get_package_through_who $P562, $P563, "Actions"
    get_who $P561, $P562
    set $P560, $P561["qbuildsub"]
    unless_null $P560, fallback4869
    nqp_get_sc_object $P566, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P560, $P566
  fallback4869:
    $P571 = $P560($P570, $P101)
    set $P102, $P571
.annotate 'line', 2635
    find_lex $P572, "$name"
    $P573 = $P102."name"($P572)
    find_dynamic_lex $P574, "$*PKGDECL"
    unless_null $P574, fallback4875
    get_hll_global $P577, "GLOBAL"
    get_who $P576, $P577
    set $P575, $P576["$PKGDECL"]
    unless_null $P575, fallback4876
    nqp_get_sc_object $P578, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P575, $P578
  fallback4876:
    unless_null $P575, vivi_15694877
    die "Contextual $*PKGDECL not found"
    box $P579, "Contextual $*PKGDECL not found"
    set $P575, $P579
  vivi_15694877:
    set $P574, $P575
  fallback4875:
    set $P587, $P574
    unless $P574 goto if1568_end4874 
    find_dynamic_lex $P581, "$*PACKAGE"
    unless_null $P581, fallback4878
    get_hll_global $P584, "GLOBAL"
    get_who $P583, $P584
    set $P582, $P583["$PACKAGE"]
    unless_null $P582, fallback4879
    nqp_get_sc_object $P585, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P582, $P585
  fallback4879:
    unless_null $P582, vivi_15704880
    die "Contextual $*PACKAGE not found"
    box $P586, "Contextual $*PACKAGE not found"
    set $P582, $P586
  vivi_15704880:
    set $P581, $P582
  fallback4878:
    get_how $P580, $P581
    can $I501, $P580, "add_method"
    box $P588, $I501
    set $P587, $P588
  if1568_end4874:
    set $P611, $P587
    unless $P587 goto if1567_end4872 
.annotate 'line', 2637
.annotate 'line', 2639
    find_dynamic_lex $P589, "$*W"
    unless_null $P589, fallback4881
    get_hll_global $P592, "GLOBAL"
    get_who $P591, $P592
    set $P590, $P591["$W"]
    unless_null $P590, fallback4882
    nqp_get_sc_object $P593, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P590, $P593
  fallback4882:
    unless_null $P590, vivi_15714883
    die "Contextual $*W not found"
    box $P594, "Contextual $*W not found"
    set $P590, $P594
  vivi_15714883:
    set $P589, $P590
  fallback4881:
    find_dynamic_lex $P595, "$*PACKAGE"
    unless_null $P595, fallback4884
    get_hll_global $P598, "GLOBAL"
    get_who $P597, $P598
    set $P596, $P597["$PACKAGE"]
    unless_null $P596, fallback4885
    nqp_get_sc_object $P599, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P596, $P599
  fallback4885:
    unless_null $P596, vivi_15724886
    die "Contextual $*PACKAGE not found"
    box $P600, "Contextual $*PACKAGE not found"
    set $P596, $P600
  vivi_15724886:
    set $P595, $P596
  fallback4884:
    find_lex $P601, "$name"
    find_dynamic_lex $P602, "$*W"
    unless_null $P602, fallback4887
    get_hll_global $P605, "GLOBAL"
    get_who $P604, $P605
    set $P603, $P604["$W"]
    unless_null $P603, fallback4888
    nqp_get_sc_object $P606, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P603, $P606
  fallback4888:
    unless_null $P603, vivi_15734889
    die "Contextual $*W not found"
    box $P607, "Contextual $*W not found"
    set $P603, $P607
  vivi_15734889:
    set $P602, $P603
  fallback4887:
    find_lex $P608, "$name"
    $P609 = $P602."create_code"($P102, $P608, 0)
    $P610 = $P589."pkg_add_method"($P595, "add_method", $P601, $P609)
    set $P611, $P610
  if1567_end4872:
.annotate 'line', 2643
    get_hll_global $P615, "GLOBAL"
    nqp_get_package_through_who $P614, $P615, "QAST"
    get_who $P613, $P614
    set $P612, $P613["Op"]
    unless_null $P612, fallback4890
    nqp_get_sc_object $P616, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P612, $P616
  fallback4890:
.annotate 'line', 2645
    new $P617, 'ResizablePMCArray'
    box $P618, "NQPRegexMethod"
    push $P617, $P618
    find_lex $P619, "$/"
    $P620 = "&lexical_package_lookup"($P617, $P619)
    $P621 = $P612."new"($P620, $P102, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P621
    find_lex $P622, "$past"
    set $P622["sink"], $P102
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_316_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2653
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1["args"]
    unless_null $P502, fallback4894
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4894:
    unless $P502 goto if1574_else4892 
.annotate 'line', 2654
    set $P505, _lex_param_1["args"]
    unless_null $P505, fallback4895
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback4895:
    set $P504, $P505[0]
    unless_null $P504, fallback4896
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback4896:
    $P508 = $P504."ast"()
    set $P515, $P508
    goto if1574_end4893
  if1574_else4892:
    get_hll_global $P512, "GLOBAL"
    nqp_get_package_through_who $P511, $P512, "QAST"
    get_who $P510, $P511
    set $P509, $P510["Op"]
    unless_null $P509, fallback4897
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P513
  fallback4897:
    $P514 = $P509."new"(_lex_param_1 :named("node"))
    set $P515, $P514
  if1574_end4893:
    set $P101, $P515
    set $P516, _lex_param_1["quote"]
    unless_null $P516, fallback4900
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P517
  fallback4900:
    unless $P516 goto if1575_else4898 
.annotate 'line', 2655
.annotate 'line', 2656
    set $P518, _lex_param_1["quote"]
    unless_null $P518, fallback4901
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P519
  fallback4901:
    $P520 = $P518."ast"()
    $P521 = $P101."unshift"($P520)
.annotate 'line', 2657
    $P522 = $P101."op"("callmethod")
    set $P543, $P522
    goto if1575_end4899
  if1575_else4898:
    set $P523, _lex_param_1["longname"]
    unless_null $P523, fallback4904
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P524
  fallback4904:
    set $S501, $P523
    iseq $I501, $S501, "HOW"
    unless $I501 goto if1576_else4902 
.annotate 'line', 2659
.annotate 'line', 2660
    $P525 = $P101."op"("how")
    set $P542, $P525
    goto if1576_end4903
  if1576_else4902:
    set $P526, _lex_param_1["longname"]
    unless_null $P526, fallback4907
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P527
  fallback4907:
    set $S502, $P526
    iseq $I502, $S502, "WHAT"
    unless $I502 goto if1577_else4905 
.annotate 'line', 2662
.annotate 'line', 2663
    $P528 = $P101."op"("what")
    set $P541, $P528
    goto if1577_end4906
  if1577_else4905:
    set $P529, _lex_param_1["longname"]
    unless_null $P529, fallback4910
    nqp_get_sc_object $P530, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P530
  fallback4910:
    set $S503, $P529
    iseq $I503, $S503, "WHO"
    unless $I503 goto if1578_else4908 
.annotate 'line', 2665
.annotate 'line', 2666
    $P531 = $P101."op"("who")
    set $P540, $P531
    goto if1578_end4909
  if1578_else4908:
    set $P532, _lex_param_1["longname"]
    unless_null $P532, fallback4913
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P532, $P533
  fallback4913:
    set $S504, $P532
    iseq $I504, $S504, "REPR"
    unless $I504 goto if1579_else4911 
.annotate 'line', 2668
.annotate 'line', 2669
    $P534 = $P101."op"("reprname")
    set $P539, $P534
    goto if1579_end4912
  if1579_else4911:
.annotate 'line', 2671
.annotate 'line', 2672
    set $P535, _lex_param_1["longname"]
    unless_null $P535, fallback4914
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P535, $P536
  fallback4914:
    set $S505, $P535
    $P537 = $P101."name"($S505)
.annotate 'line', 2673
    $P538 = $P101."op"("callmethod")
    set $P539, $P538
  if1579_end4912:
    set $P540, $P539
  if1578_end4909:
    set $P541, $P540
  if1577_end4906:
    set $P542, $P541
  if1576_end4903:
    set $P543, $P542
  if1575_end4899:
.annotate 'line', 2675
    $P544 = _lex_param_1."!make"($P101)
    .return ($P544) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_317_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2680
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2681
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["VM"]
    unless_null $P501, fallback4915
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback4915:
.annotate 'line', 2682
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Var"]
    unless_null $P506, fallback4916
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback4916:
    $P511 = $P506."new"("self" :named("name"), "lexical" :named("scope"))
    $P512 = $P501."new"($P511, "nqp_decontainerize PP" :named("pirop"))
    $P513 = _lex_param_1."!make"($P512)
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_318_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2685
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2686
    set $P502, _lex_param_1["args"]
    unless_null $P502, fallback4917
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback4917:
    $P504 = $P502."ast"()
    set $P101, $P504
.annotate 'line', 2687
    set $P505, _lex_param_1["deflongname"]
    unless_null $P505, fallback4918
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback4918:
    set $S502, $P505
    concat $S501, "&", $S502
    $P507 = $P101."name"($S501)
.annotate 'line', 2688
    $P508 = _lex_param_1."!make"($P101)
    .return ($P508) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_319_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2691
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P533 = 'cuid_464_1346233478.067' 
    capture_lex $P533 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 2694
    find_dynamic_lex $P503, "$*W"
    unless_null $P503, fallback4921
    get_hll_global $P506, "GLOBAL"
    get_who $P505, $P506
    set $P504, $P505["$W"]
    unless_null $P504, fallback4922
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback4922:
    unless_null $P504, vivi_15814923
    die "Contextual $*W not found"
    box $P508, "Contextual $*W not found"
    set $P504, $P508
  vivi_15814923:
    set $P503, $P504
  fallback4921:
    set $P509, _lex_param_1["name"]
    unless_null $P509, fallback4924
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback4924:
    set $S501, $P509
    $P511 = $P503."is_lexical"($S501)
    unless $P511 goto if1580_else4919 
.annotate 'line', 2695
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Var"]
    unless_null $P512, fallback4925
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback4925:
    set $P517, _lex_param_1["name"]
    unless_null $P517, fallback4926
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P518
  fallback4926:
    set $S502, $P517
    $P519 = $P512."new"($S502 :named("name"), "lexical" :named("scope"))
    set $P101, $P519
    set $P522, $P101
    goto if1580_end4920
  if1580_else4919:
    .const 'Sub' $P520 = 'cuid_464_1346233478.067' 
    capture_lex $P520
    $P521 = $P520()
    set $P522, $P521
  if1580_end4920:
    set $P102, $P101
    set $P523, _lex_param_1["args"]
    unless_null $P523, fallback4931
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P524
  fallback4931:
    set $P531, $P523
    unless $P523 goto if1582_end4930 
.annotate 'line', 2704
.annotate 'line', 2705
    set $P526, _lex_param_1["args"]
    unless_null $P526, fallback4932
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P526, $P527
  fallback4932:
    set $P525, $P526[0]
    unless_null $P525, fallback4933
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P528
  fallback4933:
    $P529 = $P525."ast"()
    set $P102, $P529
.annotate 'line', 2706
    $P530 = $P102."unshift"($P101)
    set $P531, $P530
  if1582_end4930:
.annotate 'line', 2708
    $P532 = _lex_param_1."!make"($P102)
    .return ($P532) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1346233478.067") :anon :lex :outer("cuid_319_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2697
    .lex "@ns", $P101 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
    find_lex $P505, "$/"
    set $P504, $P505["name"]
    unless_null $P504, fallback4927
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P506
  fallback4927:
    set $P503, $P504["identifier"]
    unless_null $P503, fallback4928
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P507
  fallback4928:
    clone $P502, $P503
    set $P101, $P502
.annotate 'line', 2699
    find_lex $P508, "$/"
    $P509 = "&lexical_package_lookup"($P101, $P508)
    store_lex "$var", $P509
    .return ($P509) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_320_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2711
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $P503, _lex_param_1["args"]
    unless_null $P503, fallback4936
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback4936:
    unless $P503 goto if1583_else4934 
.annotate 'line', 2712
    set $P506, _lex_param_1["args"]
    unless_null $P506, fallback4937
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4937:
    set $P505, $P506[0]
    unless_null $P505, fallback4938
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P508
  fallback4938:
    $P509 = $P505."ast"()
    $P510 = $P509."list"()
    set $P512, $P510
    goto if1583_end4935
  if1583_else4934:
    new $P511, 'ResizablePMCArray'
    set $P512, $P511
  if1583_end4935:
    set $P101, $P512
    set $P513, _lex_param_1["op"]
    unless_null $P513, fallback4939
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P514
  fallback4939:
    set $S501, $P513
    box $P515, $S501
    set $P102, $P515
    set $S503, $P102
    split $P516, "__", $S503
    join $S502, " ", $P516
    box $P517, $S502
    set $P102, $P517
.annotate 'line', 2715
    get_hll_global $P521, "GLOBAL"
    nqp_get_package_through_who $P520, $P521, "QAST"
    get_who $P519, $P520
    set $P518, $P519["VM"]
    unless_null $P518, fallback4940
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P522
  fallback4940:
    $P523 = $P518."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P524 = _lex_param_1."!make"($P523)
    .return ($P524) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_321_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2718
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2719
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["VM"]
    unless_null $P501, fallback4941
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback4941:
    set $P506, _lex_param_1["const"]
    unless_null $P506, fallback4942
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback4942:
    set $S501, $P506
    $P508 = $P501."new"($S501 :named("pirconst"))
    $P509 = _lex_param_1."!make"($P508)
    .return ($P509) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_322_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2722
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    new $P502, 'ResizablePMCArray'
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    set $P504, _lex_param_1["op"]
    unless_null $P504, fallback4943
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback4943:
    set $S501, $P504
    box $P506, $S501
    set $P101, $P506
    set $P507, _lex_param_1["args"]
    unless_null $P507, fallback4946
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback4946:
    unless $P507 goto if1584_else4944 
.annotate 'line', 2724
    set $P510, _lex_param_1["args"]
    unless_null $P510, fallback4947
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4947:
    set $P509, $P510[0]
    unless_null $P509, fallback4948
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P512
  fallback4948:
    $P513 = $P509."ast"()
    $P514 = $P513."list"()
    set $P516, $P514
    goto if1584_end4945
  if1584_else4944:
    new $P515, 'ResizablePMCArray'
    set $P516, $P515
  if1584_end4945:
    set $P102, $P516
.annotate 'line', 2725
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["Op"]
    unless_null $P517, fallback4949
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback4949:
    $P522 = $P517."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P522
.annotate 'line', 2726
    $P523 = _lex_param_1."!make"($P103)
    .return ($P523) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_323_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2729
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2730
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback4950
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback4950:
    $P506 = $P501."new"("nqpmultidispatch" :named("op"))
    $P507 = _lex_param_1."!make"($P506)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_324_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2733
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["arglist"]
    unless_null $P501, fallback4951
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4951:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_325_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2735
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P556 = 'cuid_466_1346233478.067' 
    capture_lex $P556 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
.annotate 'line', 2736
    get_hll_global $P507, "GLOBAL"
    nqp_get_package_through_who $P506, $P507, "QAST"
    get_who $P505, $P506
    set $P504, $P505["Op"]
    unless_null $P504, fallback4952
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P508
  fallback4952:
    $P509 = $P504."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P509
    set $P510, _lex_param_1["EXPR"]
    unless_null $P510, fallback4955
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P510, $P511
  fallback4955:
    set $P514, $P510
    unless $P510 goto if1585_end4954 
    .const 'Sub' $P512 = 'cuid_466_1346233478.067' 
    capture_lex $P512
    $P513 = $P512()
    set $P514, $P513
  if1585_end4954:
    box $P515, 0
    set $P102, $P515
.annotate 'line', 2745
    $P516 = $P101."list"()
    set $N501, $P516
    box $P517, $N501
    set $P103, $P517
    new $P553, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P553, while1589_handlers4971
    push_eh $P553
  while1589_test4968:
    set $N502, $P102
    set $N503, $P103
    islt $I501, $N502, $N503
    box $P554, $I501
    set $P552, $P554
    unless $I501 goto while1589_done4972 
  while1589_redo4970:
.annotate 'line', 2746
    set $I503, $P102
    set $P518, $P101[$I503]
    unless_null $P518, fallback4977
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P519
  fallback4977:
    get_hll_global $P523, "GLOBAL"
    nqp_get_package_through_who $P522, $P523, "QAST"
    get_who $P521, $P522
    set $P520, $P521["Op"]
    unless_null $P520, fallback4978
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P524
  fallback4978:
    type_check $I502, $P518, $P520
    set $I506, $I502
    unless $I502 goto if1591_end4976 
.annotate 'line', 2747
    set $I505, $P102
    set $P525, $P101[$I505]
    unless_null $P525, fallback4979
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P526
  fallback4979:
    $P527 = $P525."name"()
    set $S501, $P527
    iseq $I504, $S501, "&prefix:<|>"
    set $I506, $I504
  if1591_end4976:
    box $P551, $I506
    set $P550, $P551
    unless $I506 goto if1590_end4974 
    set $I507, $P102
    set $I508, $P102
    set $P529, $P101[$I508]
    unless_null $P529, fallback4980
    nqp_get_sc_object $P530, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P529, $P530
  fallback4980:
    set $P528, $P529[0]
    unless_null $P528, fallback4981
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P528, $P531
  fallback4981:
    set $P101[$I507], $P528
.annotate 'line', 2749
    set $I509, $P102
    set $P532, $P101[$I509]
    unless_null $P532, fallback4982
    nqp_get_sc_object $P533, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P532, $P533
  fallback4982:
    $P534 = $P532."flat"(1)
    set $I511, $P102
    set $P535, $P101[$I511]
    unless_null $P535, fallback4987
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P535, $P536
  fallback4987:
    get_hll_global $P540, "GLOBAL"
    nqp_get_package_through_who $P539, $P540, "QAST"
    get_who $P538, $P539
    set $P537, $P538["Var"]
    unless_null $P537, fallback4988
    nqp_get_sc_object $P541, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P537, $P541
  fallback4988:
    type_check $I510, $P535, $P537
    set $I514, $I510
    unless $I510 goto if1593_end4986 
.annotate 'line', 2751
    set $I513, $P102
    set $P542, $P101[$I513]
    unless_null $P542, fallback4989
    nqp_get_sc_object $P543, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P542, $P543
  fallback4989:
    $P544 = $P542."name"()
    set $S503, $P544
    substr $S502, $S503, 0, 1
    iseq $I512, $S502, "%"
    set $I514, $I512
  if1593_end4986:
    box $P549, $I514
    set $P548, $P549
    unless $I514 goto if1592_end4984 
.annotate 'line', 2750
    set $I515, $P102
    set $P545, $P101[$I515]
    unless_null $P545, fallback4990
    nqp_get_sc_object $P546, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P545, $P546
  fallback4990:
    $P547 = $P545."named"(1)
    set $P548, $P547
  if1592_end4984:
    set $P550, $P548
  if1590_end4974:
    set tmp_2, $P102
    set $N505, tmp_2
    set $N506, 1
    add $N504, $N505, $N506
    box $P552, $N504
    set $P102, $P552
    set $P552, tmp_2
    goto while1589_test4968 
  while1589_handlers4971:
    .get_results ($P553)
    pop_upto_eh $P553
    getattribute $P553, $P553, 'type'
    eq $P553, .CONTROL_LOOP_NEXT, while1589_test4968
    eq $P553, .CONTROL_LOOP_REDO, while1589_redo4970
  while1589_done4972:
    pop_eh 
.annotate 'line', 2755
    $P555 = _lex_param_1."!make"($P101)
    .return ($P555) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1346233478.067") :anon :lex :outer("cuid_325_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2737
    .const 'Sub' $P523 = 'cuid_465_1346233478.067' 
    capture_lex $P523 
    .lex "$expr", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2738
    find_lex $P503, "$/"
    set $P502, $P503["EXPR"]
    unless_null $P502, fallback4956
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P504
  fallback4956:
    $P505 = $P502."ast"()
    set $P101, $P505
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Op"]
    unless_null $P506, fallback4963
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback4963:
    type_check $I501, $P101, $P506
    set $I503, $I501
    unless $I501 goto if1588_end4962 
.annotate 'line', 2739
    $P511 = $P101."name"()
    set $S501, $P511
    iseq $I502, $S501, "&infix:<,>"
    set $I503, $I502
  if1588_end4962:
    set $I505, $I503
    unless $I503 goto if1587_end4960 
    $P512 = $P101."named"()
    isfalse $I504, $P512
    set $I505, $I504
  if1587_end4960:
    unless $I505 goto if1586_else4957 
.annotate 'line', 2740
    $P516 = $P101."list"()
    set $P513, $P516
    iter $P515, $P516
    new $P518, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P518, for_handlers4964
    push_eh $P518
  for_next4965:
    unless $P515, for_done4967
    shift $P519, $P515
  for_redo4966:
    .const 'Sub' $P517 = 'cuid_465_1346233478.067' 
    capture_lex $P517
    $P513 = $P517($P519)
    goto for_next4965
  for_handlers4964:
    .get_results ($P518)
    pop_upto_eh $P518
    getattribute $P518, $P518, 'type'
    eq $P518, .CONTROL_LOOP_NEXT, for_next4965
    eq $P518, .CONTROL_LOOP_REDO, for_redo4966
  for_done4967:
    pop_eh 
    set $P522, $P513
    goto if1586_end4958
  if1586_else4957:
.annotate 'line', 2742
    find_lex $P520, "$past"
    $P521 = $P520."push"($P101)
    set $P522, $P521
  if1586_end4958:
    .return ($P522) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1346233478.067") :anon :lex :outer("cuid_466_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2740
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P501, "$past"
    $P502 = $P501."push"(_lex_param_0)
    .return ($P502) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_326_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2758
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["multi_declarator"]
    unless_null $P501, fallback4991
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4991:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_327_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2760
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["value"]
    unless_null $P501, fallback4992
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4992:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_328_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2762
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2763
    set $P501, _lex_param_1["EXPR"]
    unless_null $P501, fallback4995
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback4995:
    unless $P501 goto if1594_else4993 
.annotate 'line', 2764
    set $P504, _lex_param_1["EXPR"]
    unless_null $P504, fallback4996
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback4996:
    set $P503, $P504[0]
    unless_null $P503, fallback4997
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback4997:
    $P507 = $P503."ast"()
    set $P514, $P507
    goto if1594_end4994
  if1594_else4993:
.annotate 'line', 2765
    get_hll_global $P511, "GLOBAL"
    nqp_get_package_through_who $P510, $P511, "QAST"
    get_who $P509, $P510
    set $P508, $P509["Op"]
    unless_null $P508, fallback4998
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P512
  fallback4998:
    $P513 = $P508."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P514, $P513
  if1594_end4994:
    $P515 = _lex_param_1."!make"($P514)
    .return ($P515) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_329_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2768
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1["EXPR"]
    unless_null $P502, fallback5001
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback5001:
    unless $P502 goto if1595_else4999 
.annotate 'line', 2770
.annotate 'line', 2771
    set $P505, _lex_param_1["EXPR"]
    unless_null $P505, fallback5002
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P506
  fallback5002:
    set $P504, $P505[0]
    unless_null $P504, fallback5003
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P507
  fallback5003:
    $P508 = $P504."ast"()
    set $P101, $P508
    get_hll_global $P512, "GLOBAL"
    nqp_get_package_through_who $P511, $P512, "QAST"
    get_who $P510, $P511
    set $P509, $P510["Op"]
    unless_null $P509, fallback5008
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P513
  fallback5008:
    type_check $I501, $P101, $P509
    set $I503, $I501
    unless $I501 goto if1597_end5007 
.annotate 'line', 2772
    $P514 = $P101."name"()
    set $S501, $P514
    iseq $I502, $S501, "&infix:<,>"
    set $I503, $I502
  if1597_end5007:
    box $P522, $I503
    set $P521, $P522
    if $I503 goto unless1596_end5005 
.annotate 'line', 2773
    get_hll_global $P518, "GLOBAL"
    nqp_get_package_through_who $P517, $P518, "QAST"
    get_who $P516, $P517
    set $P515, $P516["Op"]
    unless_null $P515, fallback5009
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P519
  fallback5009:
    $P520 = $P515."new"($P101, "list" :named("op"))
    set $P101, $P520
    set $P521, $P101
  unless1596_end5005:
    set $P529, $P521
    goto if1595_end5000
  if1595_else4999:
.annotate 'line', 2776
.annotate 'line', 2777
    get_hll_global $P526, "GLOBAL"
    nqp_get_package_through_who $P525, $P526, "QAST"
    get_who $P524, $P525
    set $P523, $P524["Op"]
    unless_null $P523, fallback5010
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P527
  fallback5010:
    $P528 = $P523."new"("list" :named("op"))
    set $P101, $P528
    set $P529, $P101
  if1595_end5000:
.annotate 'line', 2779
    $P530 = $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2780
    $P531 = _lex_param_1."!make"($P101)
    .return ($P531) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_330_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2783
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["quote_EXPR"]
    unless_null $P501, fallback5011
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5011:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_331_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2784
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["quote_EXPR"]
    unless_null $P501, fallback5012
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5012:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_332_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2786
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P525 = 'cuid_467_1346233478.067' 
    capture_lex $P525 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P504, _lex_param_1["pblock"]
    unless_null $P504, fallback5015
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback5015:
    set $P503, $P504["blockoid"]
    unless_null $P503, fallback5016
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P506
  fallback5016:
    set $P502, $P503["statementlist"]
    unless_null $P502, fallback5017
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P507
  fallback5017:
    set $P501, $P502["statement"]
    unless_null $P501, fallback5018
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P508
  fallback5018:
    set $N501, $P501
    set $N502, 0
    isgt $I501, $N501, $N502
    unless $I501 goto if1598_else5013 
    .const 'Sub' $P509 = 'cuid_467_1346233478.067' 
    capture_lex $P509
    $P510 = $P509()
    set $P524, $P510
    goto if1598_end5014
  if1598_else5013:
    set $P513, _lex_param_1["pblock"]
    unless_null $P513, fallback5023
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P514
  fallback5023:
    set $P512, $P513["blockoid"]
    unless_null $P512, fallback5024
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P515
  fallback5024:
    set $P511, $P512["you_are_here"]
    unless_null $P511, fallback5025
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P516
  fallback5025:
    unless $P511 goto if1599_else5021 
.annotate 'line', 2792
.annotate 'line', 2793
    set $P517, _lex_param_1["pblock"]
    unless_null $P517, fallback5026
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P518
  fallback5026:
    $P519 = $P517."ast"()
    $P520 = _lex_param_1."!make"($P519)
    set $P523, $P520
    goto if1599_end5022
  if1599_else5021:
.annotate 'line', 2795
.annotate 'line', 2796
    $P521 = "&default_for"("%")
    $P522 = _lex_param_1."!make"($P521)
    set $P523, $P522
  if1599_end5022:
    set $P524, $P523
  if1598_end5014:
    .return ($P524) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1346233478.067") :anon :lex :outer("cuid_332_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2787
    .lex "$past", $P101 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2788
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["Op"]
    unless_null $P502, fallback5019
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback5019:
    find_lex $P508, "$/"
    set $P507, $P508["pblock"]
    unless_null $P507, fallback5020
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P509
  fallback5020:
    $P510 = $P507."ast"()
    $P511 = $P502."new"($P510, "takeclosure" :named("op"))
    set $P101, $P511
    box $P512, 1
    set $P101["bareblock"], $P512
.annotate 'line', 2790
    find_dynamic_lex $P513, "$/"
    $P514 = $P513."!make"($P101)
    .return ($P514) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_333_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2800
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1["sigil"]
    unless_null $P502, fallback5029
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback5029:
    set $S501, $P502
    iseq $I501, $S501, "@"
    unless $I501 goto if1600_else5027 
    set $S504, "list"
    goto if1600_end5028
  if1600_else5027:
    set $P504, _lex_param_1["sigil"]
    unless_null $P504, fallback5032
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback5032:
    set $S502, $P504
    iseq $I502, $S502, "%"
    unless $I502 goto if1601_else5030 
    set $S503, "hash"
    goto if1601_end5031
  if1601_else5030:
    set $S503, "item"
  if1601_end5031:
    set $S504, $S503
  if1600_end5028:
    box $P506, $S504
    set $P101, $P506
.annotate 'line', 2804
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["Op"]
    unless_null $P507, fallback5033
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback5033:
    set $P512, _lex_param_1["semilist"]
    unless_null $P512, fallback5034
    nqp_get_sc_object $P513, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P513
  fallback5034:
    $P514 = $P512."ast"()
    $P515 = $P507."new"($P514, "callmethod" :named("op"), $P101 :named("name"))
    $P516 = _lex_param_1."!make"($P515)
    .return ($P516) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_334_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2807
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["statement"]
    unless_null $P501, fallback5035
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5035:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_335_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2809
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2810
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["VarWithFallback"]
    unless_null $P501, fallback5036
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5036:
    set $P506, _lex_param_1["EXPR"]
    unless_null $P506, fallback5037
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5037:
    $P508 = $P506."ast"()
    $P509 = "&default_for"("$")
    $P510 = $P501."new"($P508, "positional" :named("scope"), $P509 :named("fallback"))
    $P511 = _lex_param_1."!make"($P510)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_336_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2813
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2814
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["VarWithFallback"]
    unless_null $P501, fallback5038
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5038:
    set $P506, _lex_param_1["EXPR"]
    unless_null $P506, fallback5039
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5039:
    $P508 = $P506."ast"()
    $P509 = "&default_for"("$")
    $P510 = $P501."new"($P508, "associative" :named("scope"), $P509 :named("fallback"))
    $P511 = _lex_param_1."!make"($P510)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_337_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2817
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2818
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["VarWithFallback"]
    unless_null $P501, fallback5040
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5040:
    set $P506, _lex_param_1["quote_EXPR"]
    unless_null $P506, fallback5041
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5041:
    $P508 = $P506."ast"()
    $P509 = "&default_for"("$")
    $P510 = $P501."new"($P508, "associative" :named("scope"), $P509 :named("fallback"))
    $P511 = _lex_param_1."!make"($P510)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_338_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2821
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2822
    set $P501, _lex_param_1["arglist"]
    unless_null $P501, fallback5042
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5042:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_339_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2825
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2826
    set $P501, _lex_param_1["quote"]
    unless_null $P501, fallback5045
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5045:
    unless $P501 goto if1602_else5043 
    set $P503, _lex_param_1["quote"]
    unless_null $P503, fallback5046
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback5046:
    $P505 = $P503."ast"()
    set $P509, $P505
    goto if1602_end5044
  if1602_else5043:
    set $P506, _lex_param_1["number"]
    unless_null $P506, fallback5047
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5047:
    $P508 = $P506."ast"()
    set $P509, $P508
  if1602_end5044:
    $P510 = _lex_param_1."!make"($P509)
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_340_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2829
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    set $P502, _lex_param_1["dec_number"]
    unless_null $P502, fallback5050
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback5050:
    unless $P502 goto if1603_else5048 
.annotate 'line', 2830
    set $P504, _lex_param_1["dec_number"]
    unless_null $P504, fallback5051
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P504, $P505
  fallback5051:
    $P506 = $P504."ast"()
    set $P510, $P506
    goto if1603_end5049
  if1603_else5048:
    set $P507, _lex_param_1["integer"]
    unless_null $P507, fallback5052
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P508
  fallback5052:
    $P509 = $P507."ast"()
    set $P510, $P509
  if1603_end5049:
    set $P101, $P510
    set $P511, _lex_param_1["sign"]
    unless_null $P511, fallback5055
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P512
  fallback5055:
    set $S501, $P511
    iseq $I501, $S501, "-"
    box $P515, $I501
    set $P514, $P515
    unless $I501 goto if1604_end5054 
.annotate 'line', 2831
    set $N502, $P101
    neg $N501, $N502
    box $P513, $N501
    set $P101, $P513
    set $P514, $P101
  if1604_end5054:
.annotate 'line', 2832
    set $P516, _lex_param_1["dec_number"]
    unless_null $P516, fallback5058
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P516, $P517
  fallback5058:
    unless $P516 goto if1605_else5056 
.annotate 'line', 2833
    get_hll_global $P521, "GLOBAL"
    nqp_get_package_through_who $P520, $P521, "QAST"
    get_who $P519, $P520
    set $P518, $P519["NVal"]
    unless_null $P518, fallback5059
    nqp_get_sc_object $P522, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P518, $P522
  fallback5059:
    $P523 = $P518."new"($P101 :named("value"))
    set $P530, $P523
    goto if1605_end5057
  if1605_else5056:
.annotate 'line', 2834
    get_hll_global $P527, "GLOBAL"
    nqp_get_package_through_who $P526, $P527, "QAST"
    get_who $P525, $P526
    set $P524, $P525["IVal"]
    unless_null $P524, fallback5060
    nqp_get_sc_object $P528, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P524, $P528
  fallback5060:
    $P529 = $P524."new"($P101 :named("value"))
    set $P530, $P529
  if1605_end5057:
    $P531 = _lex_param_1."!make"($P530)
    .return ($P531) 
.end
.HLL "nqp"
.namespace []
.sub "quote_EXPR" :subid("cuid_341_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2837
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P527 = 'cuid_469_1346233478.067' 
    capture_lex $P527 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2838
    set $P502, _lex_param_1["quote_delimited"]
    unless_null $P502, fallback5061
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback5061:
    $P504 = $P502."ast"()
    set $P101, $P504
    find_dynamic_lex $P506, "%*QUOTEMOD"
    unless_null $P506, fallback5064
    get_hll_global $P509, "GLOBAL"
    get_who $P508, $P509
    set $P507, $P508["%QUOTEMOD"]
    unless_null $P507, fallback5065
    get_hll_global $P511, "GLOBAL"
    get_who $P510, $P511
    new $P512, 'Hash'
    set $P510["%QUOTEMOD"], $P512
    set $P507, $P512
  fallback5065:
    unless_null $P507, vivi_16075066
    die "Contextual %*QUOTEMOD not found"
    box $P513, "Contextual %*QUOTEMOD not found"
    set $P507, $P513
  vivi_16075066:
    set $P506, $P507
  fallback5064:
    set $P505, $P506["w"]
    unless_null $P505, fallback5067
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P514
  fallback5067:
    set $P525, $P505
    unless $P505 goto if1606_end5063 
.annotate 'line', 2839
    get_hll_global $P518, "GLOBAL"
    nqp_get_package_through_who $P517, $P518, "QAST"
    get_who $P516, $P517
    set $P515, $P516["SVal"]
    unless_null $P515, fallback5070
    nqp_get_sc_object $P519, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P519
  fallback5070:
    type_check $I501, $P101, $P515
    unless $I501 goto if1608_else5068 
    .const 'Sub' $P520 = 'cuid_469_1346233478.067' 
    capture_lex $P520
    $P521 = $P520()
    set $P524, $P521
    goto if1608_end5069
  if1608_else5068:
.annotate 'line', 2850
.annotate 'line', 2851
    $P522 = _lex_param_1."CURSOR"()
    $P523 = $P522."panic"("Can't form :w list from non-constant strings (yet)")
    set $P524, $P523
  if1608_end5069:
    set $P525, $P524
  if1606_end5063:
.annotate 'line', 2854
    $P526 = _lex_param_1."!make"($P101)
    .return ($P526) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1346233478.067") :anon :lex :outer("cuid_341_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2840
    .const 'Sub' $P534 = 'cuid_468_1346233478.067' 
    capture_lex $P534 
    .lex "@words", $P101 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
.annotate 'line', 2841
    find_lex $P508, "$/"
    find_lex $P509, "$past"
    $P510 = $P509."value"()
    get_hll_global $P506, "GLOBAL"
    nqp_get_package_through_who $P505, $P506, "HLL"
    nqp_get_package_through_who $P504, $P505, "Grammar"
    get_who $P503, $P504
    set $P502, $P503["split_words"]
    unless_null $P502, fallback5071
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P507
  fallback5071:
    $P511 = $P502($P508, $P510)
    set $P101, $P511
    set $N501, $P101
    set $N502, 1
    isne $I501, $N501, $N502
    unless $I501 goto if1609_else5072 
.annotate 'line', 2842
.annotate 'line', 2843
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Op"]
    unless_null $P512, fallback5074
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback5074:
    find_lex $P517, "$/"
    $P518 = $P512."new"("list" :named("op"), $P517 :named("node"))
    store_lex "$past", $P518
    set $P519, $P101
    iter $P521, $P101
    new $P523, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P523, for_handlers5076
    push_eh $P523
  for_next5077:
    unless $P521, for_done5079
    shift $P524, $P521
  for_redo5078:
    .const 'Sub' $P522 = 'cuid_468_1346233478.067' 
    capture_lex $P522
    $P519 = $P522($P524)
    goto for_next5077
  for_handlers5076:
    .get_results ($P523)
    pop_upto_eh $P523
    getattribute $P523, $P523, 'type'
    eq $P523, .CONTROL_LOOP_NEXT, for_next5077
    eq $P523, .CONTROL_LOOP_REDO, for_redo5078
  for_done5079:
    pop_eh 
    set $P533, $P519
    goto if1609_end5073
  if1609_else5072:
.annotate 'line', 2846
.annotate 'line', 2847
    get_hll_global $P528, "GLOBAL"
    nqp_get_package_through_who $P527, $P528, "QAST"
    get_who $P526, $P527
    set $P525, $P526["SVal"]
    unless_null $P525, fallback5080
    nqp_get_sc_object $P529, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P529
  fallback5080:
    set $P530, $P101[0]
    unless_null $P530, fallback5081
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P531
  fallback5081:
    set $S501, $P530
    $P532 = $P525."new"($S501 :named("value"))
    store_lex "$past", $P532
    set $P533, $P532
  if1609_end5073:
    .return ($P533) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1346233478.067") :anon :lex :outer("cuid_469_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2844
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P501, "$past"
    get_hll_global $P505, "GLOBAL"
    nqp_get_package_through_who $P504, $P505, "QAST"
    get_who $P503, $P504
    set $P502, $P503["SVal"]
    unless_null $P502, fallback5075
    nqp_get_sc_object $P506, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P506
  fallback5075:
    $P507 = $P502."new"(_lex_param_0 :named("value"))
    $P508 = $P501."push"($P507)
    .return ($P508) 
.end
.HLL "nqp"
.namespace []
.sub "quote_delimited" :subid("cuid_342_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2857
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P540 = 'cuid_470_1346233478.067' 
    capture_lex $P540 
    .lex "@parts", $P101 
    .lex "$lastlit", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P501, 'ResizablePMCArray'
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
    box $P504, ""
    set $P102, $P504
    set $P508, _lex_param_1["quote_atom"]
    unless_null $P508, fallback5082
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P509
  fallback5082:
    set $P505, $P508
    iter $P507, $P508
    new $P511, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P511, for_handlers5096
    push_eh $P511
  for_next5097:
    unless $P507, for_done5099
    shift $P512, $P507
  for_redo5098:
    .const 'Sub' $P510 = 'cuid_470_1346233478.067' 
    capture_lex $P510
    $P505 = $P510($P512)
    goto for_next5097
  for_handlers5096:
    .get_results ($P511)
    pop_upto_eh $P511
    getattribute $P511, $P511, 'type'
    eq $P511, .CONTROL_LOOP_NEXT, for_next5097
    eq $P511, .CONTROL_LOOP_REDO, for_redo5098
  for_done5099:
    pop_eh 
    set $S501, $P102
    isgt $I501, $S501, ""
    box $P521, $I501
    set $P520, $P521
    unless $I501 goto if1614_end5101 
.annotate 'line', 2878
    get_hll_global $P516, "GLOBAL"
    nqp_get_package_through_who $P515, $P516, "QAST"
    get_who $P514, $P515
    set $P513, $P514["SVal"]
    unless_null $P513, fallback5102
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P517
  fallback5102:
    $P518 = $P513."new"($P102 :named("value"))
    $P519 = $P101."push"($P518)
    set $P520, $P519
  if1614_end5101:
    unless $P101 goto if1615_else5103 
.annotate 'line', 2879
    $P522 = $P101."shift"()
    set $P529, $P522
    goto if1615_end5104
  if1615_else5103:
    get_hll_global $P526, "GLOBAL"
    nqp_get_package_through_who $P525, $P526, "QAST"
    get_who $P524, $P525
    set $P523, $P524["SVal"]
    unless_null $P523, fallback5105
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P527
  fallback5105:
    $P528 = $P523."new"("" :named("value"))
    set $P529, $P528
  if1615_end5104:
    set $P103, $P529
    new $P538, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P538, while1616_handlers5109
    push_eh $P538
  while1616_test5106:
    set $P537, $P101
    unless $P101 goto while1616_done5110 
  while1616_redo5108:
.annotate 'line', 2880
.annotate 'line', 2881
    get_hll_global $P533, "GLOBAL"
    nqp_get_package_through_who $P532, $P533, "QAST"
    get_who $P531, $P532
    set $P530, $P531["Op"]
    unless_null $P530, fallback5111
    nqp_get_sc_object $P534, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P530, $P534
  fallback5111:
    $P535 = $P101."shift"()
    $P536 = $P530."new"($P103, $P535, "concat" :named("op"))
    set $P103, $P536
    set $P537, $P103
    goto while1616_test5106 
  while1616_handlers5109:
    .get_results ($P538)
    pop_upto_eh $P538
    getattribute $P538, $P538, 'type'
    eq $P538, .CONTROL_LOOP_NEXT, while1616_test5106
    eq $P538, .CONTROL_LOOP_REDO, while1616_redo5108
  while1616_done5110:
    pop_eh 
.annotate 'line', 2883
    $P539 = _lex_param_1."!make"($P103)
    .return ($P539) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1346233478.067") :anon :lex :outer("cuid_342_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2860
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 2861
    $P502 = _lex_param_0."ast"()
    set $P101, $P502
    get_hll_global $P506, "GLOBAL"
    nqp_get_package_through_who $P505, $P506, "QAST"
    get_who $P504, $P505
    set $P503, $P504["Node"]
    unless_null $P503, fallback5085
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P507
  fallback5085:
    type_check $I502, $P101, $P503
    box $P508, $I502
    isfalse $I501, $P508
    unless $I501 goto if1610_else5083 
.annotate 'line', 2862
    find_lex $P509, "$lastlit"
    set $S502, $P509
    set $S503, $P101
    concat $S501, $S502, $S503
    box $P510, $S501
    store_lex "$lastlit", $P510
    set $P547, $P510
    goto if1610_end5084
  if1610_else5083:
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["SVal"]
    unless_null $P511, fallback5088
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback5088:
    type_check $I503, $P101, $P511
    unless $I503 goto if1611_else5086 
.annotate 'line', 2865
    find_lex $P516, "$lastlit"
    set $S505, $P516
.annotate 'line', 2866
    $P517 = $P101."value"()
    set $S506, $P517
    concat $S504, $S505, $S506
    box $P518, $S504
    store_lex "$lastlit", $P518
    set $P546, $P518
    goto if1611_end5087
  if1611_else5086:
.annotate 'line', 2868
    find_lex $P519, "$lastlit"
    set $S507, $P519
    isgt $I504, $S507, ""
    box $P530, $I504
    set $P529, $P530
    unless $I504 goto if1612_end5090 
.annotate 'line', 2869
.annotate 'line', 2870
    find_lex $P520, "@parts"
    get_hll_global $P524, "GLOBAL"
    nqp_get_package_through_who $P523, $P524, "QAST"
    get_who $P522, $P523
    set $P521, $P522["SVal"]
    unless_null $P521, fallback5091
    nqp_get_sc_object $P525, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P521, $P525
  fallback5091:
    find_lex $P526, "$lastlit"
    $P527 = $P521."new"($P526 :named("value"))
    $P528 = $P520."push"($P527)
    set $P529, $P528
  if1612_end5090:
.annotate 'line', 2872
    find_lex $P531, "@parts"
    get_hll_global $P535, "GLOBAL"
    nqp_get_package_through_who $P534, $P535, "QAST"
    get_who $P533, $P534
    set $P532, $P533["Node"]
    unless_null $P532, fallback5094
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P532, $P536
  fallback5094:
    type_check $I505, $P101, $P532
    unless $I505 goto if1613_else5092 
    set $P543, $P101
    goto if1613_end5093
  if1613_else5092:
.annotate 'line', 2874
    get_hll_global $P540, "GLOBAL"
    nqp_get_package_through_who $P539, $P540, "QAST"
    get_who $P538, $P539
    set $P537, $P538["SVal"]
    unless_null $P537, fallback5095
    nqp_get_sc_object $P541, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P537, $P541
  fallback5095:
    $P542 = $P537."new"($P101 :named("value"))
    set $P543, $P542
  if1613_end5093:
    $P544 = $P531."push"($P543)
    box $P545, ""
    store_lex "$lastlit", $P545
    set $P546, $P545
  if1611_end5087:
    set $P547, $P546
  if1610_end5084:
    .return ($P547) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_343_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2886
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["quote_EXPR"]
    unless_null $P501, fallback5112
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5112:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_344_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2887
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["quote_EXPR"]
    unless_null $P501, fallback5113
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5113:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_345_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2888
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["quote_EXPR"]
    unless_null $P501, fallback5114
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5114:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_346_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2889
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["quote_EXPR"]
    unless_null $P501, fallback5115
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5115:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_347_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2890
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["quote_EXPR"]
    unless_null $P501, fallback5116
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5116:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_348_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2891
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2892
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["VM"]
    unless_null $P501, fallback5117
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5117:
    set $P506, _lex_param_1["quote_EXPR"]
    unless_null $P506, fallback5118
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5118:
    $P508 = $P506."ast"()
    $P509 = $P508."value"()
    $P510 = $P501."new"($P509 :named("pir"), _lex_param_1 :named("node"))
    $P511 = _lex_param_1."!make"($P510)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_349_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2895
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P103, $P503
.annotate 'line', 2896
    find_dynamic_lex $P504, "$*W"
    unless_null $P504, fallback5119
    get_hll_global $P507, "GLOBAL"
    get_who $P506, $P507
    set $P505, $P506["$W"]
    unless_null $P505, fallback5120
    nqp_get_sc_object $P508, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P508
  fallback5120:
    unless_null $P505, vivi_16175121
    die "Contextual $*W not found"
    box $P509, "Contextual $*W not found"
    set $P505, $P509
  vivi_16175121:
    set $P504, $P505
  fallback5119:
    $P510 = $P504."pop_lexpad"()
    set $P101, $P510
.annotate 'line', 2897
    set $P511, $P101[0]
    unless_null $P511, fallback5122
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P512
  fallback5122:
    get_hll_global $P516, "GLOBAL"
    nqp_get_package_through_who $P515, $P516, "QAST"
    get_who $P514, $P515
    set $P513, $P514["Var"]
    unless_null $P513, fallback5123
    nqp_get_sc_object $P517, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P513, $P517
  fallback5123:
    $P518 = $P513."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P519 = $P511."push"($P518)
.annotate 'line', 2898
    set $P520, $P101[0]
    unless_null $P520, fallback5124
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P521
  fallback5124:
    get_hll_global $P525, "GLOBAL"
    nqp_get_package_through_who $P524, $P525, "QAST"
    get_who $P523, $P524
    set $P522, $P523["Op"]
    unless_null $P522, fallback5125
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P526
  fallback5125:
.annotate 'line', 2900
    get_hll_global $P530, "GLOBAL"
    nqp_get_package_through_who $P529, $P530, "QAST"
    get_who $P528, $P529
    set $P527, $P528["Var"]
    unless_null $P527, fallback5126
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P527, $P531
  fallback5126:
    $P532 = $P527."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2901
    get_hll_global $P536, "GLOBAL"
    nqp_get_package_through_who $P535, $P536, "QAST"
    get_who $P534, $P535
    set $P533, $P534["Var"]
    unless_null $P533, fallback5127
    nqp_get_sc_object $P537, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P533, $P537
  fallback5127:
    $P538 = $P533."new"("self" :named("name"), "lexical" :named("scope"))
    $P539 = $P522."new"($P532, $P538, "bind" :named("op"))
    $P540 = $P520."push"($P539)
.annotate 'line', 2902
    set $P541, $P101[0]
    unless_null $P541, fallback5128
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P542
  fallback5128:
    get_hll_global $P546, "GLOBAL"
    nqp_get_package_through_who $P545, $P546, "QAST"
    get_who $P544, $P545
    set $P543, $P544["Var"]
    unless_null $P543, fallback5129
    nqp_get_sc_object $P547, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P543, $P547
  fallback5129:
    $P548 = $P543."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P549 = $P541."push"($P548)
.annotate 'line', 2903
    set $P550, $P101[0]
    unless_null $P550, fallback5130
    nqp_get_sc_object $P551, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P550, $P551
  fallback5130:
    get_hll_global $P555, "GLOBAL"
    nqp_get_package_through_who $P554, $P555, "QAST"
    get_who $P553, $P554
    set $P552, $P553["Var"]
    unless_null $P552, fallback5131
    nqp_get_sc_object $P556, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P552, $P556
  fallback5131:
    $P557 = $P552."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P558 = $P550."push"($P557)
.annotate 'line', 2904
    $P559 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2905
    $P560 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2907
    set $P568, _lex_param_1["p6regex"]
    unless_null $P568, fallback5133
    nqp_get_sc_object $P569, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P568, $P569
  fallback5133:
    $P570 = $P568."ast"()
    get_hll_global $P566, "GLOBAL"
    nqp_get_package_through_who $P565, $P566, "QRegex"
    nqp_get_package_through_who $P564, $P565, "P6Regex"
    nqp_get_package_through_who $P563, $P564, "Actions"
    get_who $P562, $P563
    set $P561, $P562["qbuildsub"]
    unless_null $P561, fallback5132
    nqp_get_sc_object $P567, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P561, $P567
  fallback5132:
    $P571 = $P561($P570, $P101)
    set $P102, $P571
.annotate 'line', 2908
    get_hll_global $P575, "GLOBAL"
    nqp_get_package_through_who $P574, $P575, "QAST"
    get_who $P573, $P574
    set $P572, $P573["Op"]
    unless_null $P572, fallback5134
    nqp_get_sc_object $P576, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P572, $P576
  fallback5134:
.annotate 'line', 2910
    new $P577, 'ResizablePMCArray'
    box $P578, "NQPRegex"
    push $P577, $P578
    $P579 = "&lexical_package_lookup"($P577, _lex_param_1)
    $P580 = $P572."new"($P579, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P580
    set $P103["sink"], $P102
.annotate 'line', 2915
    $P581 = _lex_param_1."!make"($P103)
    .return ($P581) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_350_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2918
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["variable"]
    unless_null $P501, fallback5135
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5135:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_351_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2919
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2920
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback5136
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5136:
.annotate 'line', 2921
    set $P506, _lex_param_1["block"]
    unless_null $P506, fallback5137
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5137:
    $P508 = $P506."ast"()
    $P509 = "&block_immediate"($P508)
    $P510 = $P501."new"($P509, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P511 = _lex_param_1."!make"($P510)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_352_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2924
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P501 = _lex_param_1."!make"("\e")
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_353_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2928
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P501, _lex_param_1["dotty"]
    unless_null $P501, fallback5138
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5138:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_354_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2930
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2931
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback5139
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5139:
.annotate 'line', 2933
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Var"]
    unless_null $P506, fallback5140
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback5140:
    $P511 = $P506."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P512 = $P501."new"($P511, "call" :named("op"))
    $P513 = _lex_param_1."!make"($P512)
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_355_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2938
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback5141
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5141:
.annotate 'line', 2939
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Var"]
    unless_null $P506, fallback5142
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback5142:
    $P511 = $P506."new"("$/" :named("name"), "contextual" :named("scope"))
    $P512 = $P501."new"($P511, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P513 = _lex_param_1."!make"($P512)
    .return ($P513) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_356_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2946
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback5143
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5143:
    $P506 = $P501."new"("control" :named("op"), "next" :named("name"))
    $P507 = _lex_param_1."!make"($P506)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_357_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2947
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback5144
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5144:
    $P506 = $P501."new"("control" :named("op"), "last" :named("name"))
    $P507 = _lex_param_1."!make"($P506)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_358_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2948
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback5145
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5145:
    $P506 = $P501."new"("control" :named("op"), "redo" :named("name"))
    $P507 = _lex_param_1."!make"($P506)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_359_1346233478.067") :anon :lex :outer("cuid_360_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2950
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2951
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Op"]
    unless_null $P501, fallback5146
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5146:
    $P506 = $P501."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P507 = _lex_param_1."!make"($P506)
    .return ($P507) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3024
    .const 'Sub' $P511 = 'cuid_361_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_362_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_363_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_364_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_365_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_366_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_367_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_368_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_369_1346233478.067' 
    capture_lex $P511 
    .const 'Sub' $P511 = 'cuid_370_1346233478.067' 
    capture_lex $P511 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P501 = 'cuid_361_1346233478.067' 
    capture_lex $P501
    .const 'Sub' $P502 = 'cuid_362_1346233478.067' 
    capture_lex $P502
    .const 'Sub' $P503 = 'cuid_363_1346233478.067' 
    capture_lex $P503
    .const 'Sub' $P504 = 'cuid_364_1346233478.067' 
    capture_lex $P504
    .const 'Sub' $P505 = 'cuid_365_1346233478.067' 
    capture_lex $P505
    .const 'Sub' $P506 = 'cuid_366_1346233478.067' 
    capture_lex $P506
    .const 'Sub' $P507 = 'cuid_367_1346233478.067' 
    capture_lex $P507
    .const 'Sub' $P508 = 'cuid_368_1346233478.067' 
    capture_lex $P508
    .const 'Sub' $P509 = 'cuid_369_1346233478.067' 
    capture_lex $P509
    .const 'Sub' $P510 = 'cuid_370_1346233478.067' 
    capture_lex $P510
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_361_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3026
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
.annotate 'line', 3027
    set $P502, _lex_param_1["statement"]
    unless_null $P502, fallback5147
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P502, $P503
  fallback5147:
    $P504 = $P502."ast"()
    set $P101, $P504
.annotate 'line', 3028
    get_hll_global $P508, "GLOBAL"
    nqp_get_package_through_who $P507, $P508, "QAST"
    get_who $P506, $P507
    set $P505, $P506["Regex"]
    unless_null $P505, fallback5148
    nqp_get_sc_object $P509, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P505, $P509
  fallback5148:
    $P510 = $P505."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P511 = _lex_param_1."!make"($P510)
    .return ($P511) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_362_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3032
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3033
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Regex"]
    unless_null $P501, fallback5149
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5149:
    set $P506, _lex_param_1["codeblock"]
    unless_null $P506, fallback5150
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5150:
    $P508 = $P506."ast"()
    $P509 = $P501."new"($P508, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P510 = _lex_param_1."!make"($P509)
    .return ($P510) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_363_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3037
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3038
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Regex"]
    unless_null $P501, fallback5151
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5151:
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Node"]
    unless_null $P506, fallback5152
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback5152:
.annotate 'line', 3039
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["SVal"]
    unless_null $P511, fallback5153
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback5153:
    $P516 = $P511."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3040
    set $P517, _lex_param_1["var"]
    unless_null $P517, fallback5154
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P518
  fallback5154:
    $P519 = $P517."ast"()
    $P520 = $P506."new"($P516, $P519)
    $P521 = $P501."new"($P520, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P522 = _lex_param_1."!make"($P521)
    .return ($P522) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_364_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3044
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3045
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Regex"]
    unless_null $P501, fallback5155
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5155:
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Node"]
    unless_null $P506, fallback5156
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback5156:
.annotate 'line', 3046
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["SVal"]
    unless_null $P511, fallback5157
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback5157:
    $P516 = $P511."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3047
    set $P517, _lex_param_1["codeblock"]
    unless_null $P517, fallback5158
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P518
  fallback5158:
    $P519 = $P517."ast"()
    $P520 = $P506."new"($P516, $P519)
    $P521 = $P501."new"($P520, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P522 = _lex_param_1."!make"($P521)
    .return ($P522) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_365_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3051
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3052
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Regex"]
    unless_null $P501, fallback5159
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5159:
    set $P506, _lex_param_1["codeblock"]
    unless_null $P506, fallback5160
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5160:
    $P508 = $P506."ast"()
    set $P509, _lex_param_1["zw"]
    unless_null $P509, fallback5161
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback5161:
    set $S501, $P509
    iseq $I501, $S501, "!"
    $P511 = $P501."new"($P508, "zerowidth" :named("subtype"), $I501 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P512 = _lex_param_1."!make"($P511)
    .return ($P512) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_366_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3057
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3058
    get_hll_global $P504, "GLOBAL"
    nqp_get_package_through_who $P503, $P504, "QAST"
    get_who $P502, $P503
    set $P501, $P502["Regex"]
    unless_null $P501, fallback5162
    nqp_get_sc_object $P505, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P505
  fallback5162:
    get_hll_global $P509, "GLOBAL"
    nqp_get_package_through_who $P508, $P509, "QAST"
    get_who $P507, $P508
    set $P506, $P507["Node"]
    unless_null $P506, fallback5163
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P510
  fallback5163:
.annotate 'line', 3059
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P513, $P514, "QAST"
    get_who $P512, $P513
    set $P511, $P512["SVal"]
    unless_null $P511, fallback5164
    nqp_get_sc_object $P515, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P511, $P515
  fallback5164:
    $P516 = $P511."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3060
    set $P517, _lex_param_1["var"]
    unless_null $P517, fallback5165
    nqp_get_sc_object $P518, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P518
  fallback5165:
    $P519 = $P517."ast"()
    $P520 = $P506."new"($P516, $P519)
    $P521 = $P501."new"($P520, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P522 = _lex_param_1."!make"($P521)
    .return ($P522) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_367_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3064
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 3065
    set $P503, _lex_param_1["block"]
    unless_null $P503, fallback5166
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback5166:
    $P505 = $P503."ast"()
    set $P101, $P505
.annotate 'line', 3066
    $P506 = $P101."blocktype"("immediate")
.annotate 'line', 3068
    get_hll_global $P510, "GLOBAL"
    nqp_get_package_through_who $P509, $P510, "QAST"
    get_who $P508, $P509
    set $P507, $P508["Stmts"]
    unless_null $P507, fallback5167
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P507, $P511
  fallback5167:
.annotate 'line', 3069
    get_hll_global $P515, "GLOBAL"
    nqp_get_package_through_who $P514, $P515, "QAST"
    get_who $P513, $P514
    set $P512, $P513["Op"]
    unless_null $P512, fallback5168
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P512, $P516
  fallback5168:
.annotate 'line', 3071
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["Var"]
    unless_null $P517, fallback5169
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback5169:
    $P522 = $P517."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3072
    get_hll_global $P526, "GLOBAL"
    nqp_get_package_through_who $P525, $P526, "QAST"
    get_who $P524, $P525
    set $P523, $P524["Op"]
    unless_null $P523, fallback5170
    nqp_get_sc_object $P527, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P523, $P527
  fallback5170:
.annotate 'line', 3073
    get_hll_global $P531, "GLOBAL"
    nqp_get_package_through_who $P530, $P531, "QAST"
    get_who $P529, $P530
    set $P528, $P529["Var"]
    unless_null $P528, fallback5171
    nqp_get_sc_object $P532, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P528, $P532
  fallback5171:
    $P533 = $P528."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P534 = $P523."new"($P533, "MATCH" :named("name"), "callmethod" :named("op"))
    $P535 = $P512."new"($P522, $P534, "bind" :named("op"))
    $P536 = $P507."new"($P535, $P101)
    set $P102, $P536
.annotate 'line', 3080
    $P537 = _lex_param_1."!make"($P102)
    .return ($P537) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_368_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3084
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
.annotate 'line', 3085
    get_hll_global $P506, "GLOBAL"
    nqp_get_package_through_who $P505, $P506, "QAST"
    get_who $P504, $P505
    set $P503, $P504["Node"]
    unless_null $P503, fallback5172
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P507
  fallback5172:
.annotate 'line', 3086
    set $P515, _lex_param_1["nibbler"]
    unless_null $P515, fallback5174
    nqp_get_sc_object $P516, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P515, $P516
  fallback5174:
    $P517 = $P515."ast"()
    get_hll_global $P513, "GLOBAL"
    nqp_get_package_through_who $P512, $P513, "QRegex"
    nqp_get_package_through_who $P511, $P512, "P6Regex"
    nqp_get_package_through_who $P510, $P511, "Actions"
    get_who $P509, $P510
    set $P508, $P509["qbuildsub"]
    unless_null $P508, fallback5173
    nqp_get_sc_object $P514, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P514
  fallback5173:
    $P518 = $P508($P517, 1 :named("anon"), 1 :named("addself"))
    $P519 = $P503."new"($P518)
    set $P101, $P519
.annotate 'line', 3087
    get_hll_global $P523, "GLOBAL"
    nqp_get_package_through_who $P522, $P523, "QAST"
    get_who $P521, $P522
    set $P520, $P521["Regex"]
    unless_null $P520, fallback5175
    nqp_get_sc_object $P524, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P520, $P524
  fallback5175:
    set $P525, _lex_param_1["nibbler"]
    unless_null $P525, fallback5176
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P525, $P526
  fallback5176:
    $P527 = $P525."ast"()
    $P528 = $P520."new"($P101, $P527, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P528
.annotate 'line', 3089
    $P529 = _lex_param_1."!make"($P102)
    .return ($P529) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_369_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3092
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P591 = 'cuid_471_1346233478.067' 
    capture_lex $P591 
    .const 'Sub' $P591 = 'cuid_472_1346233478.067' 
    capture_lex $P591 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    set $P503, _lex_param_1["longname"]
    unless_null $P503, fallback5177
    nqp_get_sc_object $P504, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P504
  fallback5177:
    set $S501, $P503
    box $P505, $S501
    set $P101, $P505
    set $P506, _lex_param_1["assertion"]
    unless_null $P506, fallback5180
    nqp_get_sc_object $P507, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P506, $P507
  fallback5180:
    unless $P506 goto if1618_else5178 
.annotate 'line', 3095
.annotate 'line', 3096
    set $P509, _lex_param_1["assertion"]
    unless_null $P509, fallback5181
    nqp_get_sc_object $P510, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P509, $P510
  fallback5181:
    set $P508, $P509[0]
    unless_null $P508, fallback5182
    nqp_get_sc_object $P511, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P508, $P511
  fallback5182:
    $P512 = $P508."ast"()
    set $P102, $P512
.annotate 'line', 3097
    nqp_decontainerize $P513, _lex_param_0
    $P514 = $P513."subrule_alias"($P102, $P101)
    set $P589, $P514
    goto if1618_end5179
  if1618_else5178:
    set $S502, $P101
    iseq $I501, $S502, "sym"
    unless $I501 goto if1619_else5183 
    .const 'Sub' $P515 = 'cuid_471_1346233478.067' 
    capture_lex $P515
    $P516 = $P515()
    set $P588, $P516
    goto if1619_end5184
  if1619_else5183:
.annotate 'line', 3107
.annotate 'line', 3108
    get_hll_global $P520, "GLOBAL"
    nqp_get_package_through_who $P519, $P520, "QAST"
    get_who $P518, $P519
    set $P517, $P518["Regex"]
    unless_null $P517, fallback5201
    nqp_get_sc_object $P521, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P517, $P521
  fallback5201:
.annotate 'line', 3110
    get_hll_global $P525, "GLOBAL"
    nqp_get_package_through_who $P524, $P525, "QAST"
    get_who $P523, $P524
    set $P522, $P523["Node"]
    unless_null $P522, fallback5202
    nqp_get_sc_object $P526, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P522, $P526
  fallback5202:
    get_hll_global $P530, "GLOBAL"
    nqp_get_package_through_who $P529, $P530, "QAST"
    get_who $P528, $P529
    set $P527, $P528["SVal"]
    unless_null $P527, fallback5203
    nqp_get_sc_object $P531, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P527, $P531
  fallback5203:
    $P532 = $P527."new"($P101 :named("value"))
    $P533 = $P522."new"($P532)
    $P534 = $P517."new"($P533, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P534
    set $P535, _lex_param_1["arglist"]
    unless_null $P535, fallback5206
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P535, $P536
  fallback5206:
    unless $P535 goto if1624_else5204 
.annotate 'line', 3111
.annotate 'line', 3112
    set $P541, _lex_param_1["arglist"]
    unless_null $P541, fallback5207
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P541, $P542
  fallback5207:
    set $P540, $P541[0]
    unless_null $P540, fallback5208
    nqp_get_sc_object $P543, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P540, $P543
  fallback5208:
    $P544 = $P540."ast"()
    $P545 = $P544."list"()
    set $P537, $P545
    iter $P539, $P545
    new $P547, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P547, for_handlers5210
    push_eh $P547
  for_next5211:
    unless $P539, for_done5213
    shift $P548, $P539
  for_redo5212:
    .const 'Sub' $P546 = 'cuid_472_1346233478.067' 
    capture_lex $P546
    $P537 = $P546($P548)
    goto for_next5211
  for_handlers5210:
    .get_results ($P547)
    pop_upto_eh $P547
    getattribute $P547, $P547, 'type'
    eq $P547, .CONTROL_LOOP_NEXT, for_next5211
    eq $P547, .CONTROL_LOOP_REDO, for_redo5212
  for_done5213:
    pop_eh 
    set $P587, $P537
    goto if1624_end5205
  if1624_else5204:
    set $P549, _lex_param_1["nibbler"]
    unless_null $P549, fallback5216
    nqp_get_sc_object $P550, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P549, $P550
  fallback5216:
    set $P586, $P549
    unless $P549 goto if1625_end5215 
.annotate 'line', 3114
    set $S503, $P101
    iseq $I502, $S503, "after"
    unless $I502 goto if1626_else5217 
.annotate 'line', 3116
    set $P551, $P102[0]
    unless_null $P551, fallback5219
    nqp_get_sc_object $P552, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P551, $P552
  fallback5219:
    nqp_decontainerize $P560, _lex_param_0
    set $P562, _lex_param_1["nibbler"]
    unless_null $P562, fallback5221
    nqp_get_sc_object $P563, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P562, $P563
  fallback5221:
    set $P561, $P562[0]
    unless_null $P561, fallback5222
    nqp_get_sc_object $P564, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P561, $P564
  fallback5222:
    $P565 = $P561."ast"()
    $P566 = $P560."flip_ast"($P565)
    get_hll_global $P558, "GLOBAL"
    nqp_get_package_through_who $P557, $P558, "QRegex"
    nqp_get_package_through_who $P556, $P557, "P6Regex"
    nqp_get_package_through_who $P555, $P556, "Actions"
    get_who $P554, $P555
    set $P553, $P554["qbuildsub"]
    unless_null $P553, fallback5220
    nqp_get_sc_object $P559, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P553, $P559
  fallback5220:
    $P567 = $P553($P566, 1 :named("anon"), 1 :named("addself"))
    $P568 = $P551."push"($P567)
    set $P585, $P568
    goto if1626_end5218
  if1626_else5217:
.annotate 'line', 3117
    set $P569, $P102[0]
    unless_null $P569, fallback5223
    nqp_get_sc_object $P570, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P569, $P570
  fallback5223:
    set $P579, _lex_param_1["nibbler"]
    unless_null $P579, fallback5225
    nqp_get_sc_object $P580, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P579, $P580
  fallback5225:
    set $P578, $P579[0]
    unless_null $P578, fallback5226
    nqp_get_sc_object $P581, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P578, $P581
  fallback5226:
    $P582 = $P578."ast"()
    get_hll_global $P576, "GLOBAL"
    nqp_get_package_through_who $P575, $P576, "QRegex"
    nqp_get_package_through_who $P574, $P575, "P6Regex"
    nqp_get_package_through_who $P573, $P574, "Actions"
    get_who $P572, $P573
    set $P571, $P572["qbuildsub"]
    unless_null $P571, fallback5224
    nqp_get_sc_object $P577, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P571, $P577
  fallback5224:
    $P583 = $P571($P582, 1 :named("anon"), 1 :named("addself"))
    $P584 = $P569."push"($P583)
    set $P585, $P584
  if1626_end5218:
    set $P586, $P585
  if1625_end5215:
    set $P587, $P586
  if1624_end5205:
    set $P588, $P587
  if1619_end5184:
    set $P589, $P588
  if1618_end5179:
.annotate 'line', 3120
    $P590 = _lex_param_1."!make"($P102)
    .return ($P590) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1346233478.067") :anon :lex :outer("cuid_369_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3099
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P101, $P501
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P102, $P502
    find_dynamic_lex $P504, "%*RX"
    unless_null $P504, fallback5185
    get_hll_global $P507, "GLOBAL"
    get_who $P506, $P507
    set $P505, $P506["%RX"]
    unless_null $P505, fallback5186
    get_hll_global $P509, "GLOBAL"
    get_who $P508, $P509
    new $P510, 'Hash'
    set $P508["%RX"], $P510
    set $P505, $P510
  fallback5186:
    unless_null $P505, vivi_16205187
    die "Contextual %*RX not found"
    box $P511, "Contextual %*RX not found"
    set $P505, $P511
  vivi_16205187:
    set $P504, $P505
  fallback5185:
    set $P503, $P504["name"]
    unless_null $P503, fallback5188
    nqp_get_sc_object $P512, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P503, $P512
  fallback5188:
    set $S501, $P503
    index $I501, $S501, ":sym<", 0
    box $P513, $I501
    set $P101, $P513
    set $N501, $P101
    set $N502, 0
    islt $I502, $N501, $N502
    box $P526, $I502
    set $P525, $P526
    unless $I502 goto if1621_end5190 
    find_dynamic_lex $P515, "%*RX"
    unless_null $P515, fallback5191
    get_hll_global $P518, "GLOBAL"
    get_who $P517, $P518
    set $P516, $P517["%RX"]
    unless_null $P516, fallback5192
    get_hll_global $P520, "GLOBAL"
    get_who $P519, $P520
    new $P521, 'Hash'
    set $P519["%RX"], $P521
    set $P516, $P521
  fallback5192:
    unless_null $P516, vivi_16225193
    die "Contextual %*RX not found"
    box $P522, "Contextual %*RX not found"
    set $P516, $P522
  vivi_16225193:
    set $P515, $P516
  fallback5191:
    set $P514, $P515["name"]
    unless_null $P514, fallback5194
    nqp_get_sc_object $P523, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P514, $P523
  fallback5194:
    set $S502, $P514
    index $I503, $S502, utf8:":sym\x{ab}", 0
    box $P524, $I503
    set $P101, $P524
    set $P525, $P101
  if1621_end5190:
    find_dynamic_lex $P528, "%*RX"
    unless_null $P528, fallback5195
    get_hll_global $P531, "GLOBAL"
    get_who $P530, $P531
    set $P529, $P530["%RX"]
    unless_null $P529, fallback5196
    get_hll_global $P533, "GLOBAL"
    get_who $P532, $P533
    new $P534, 'Hash'
    set $P532["%RX"], $P534
    set $P529, $P534
  fallback5196:
    unless_null $P529, vivi_16235197
    die "Contextual %*RX not found"
    box $P535, "Contextual %*RX not found"
    set $P529, $P535
  vivi_16235197:
    set $P528, $P529
  fallback5195:
    set $P527, $P528["name"]
    unless_null $P527, fallback5198
    nqp_get_sc_object $P536, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P527, $P536
  fallback5198:
    set $S505, $P527
    set $N504, $P101
    set $N505, 5
    add $N503, $N504, $N505
    set $I504, $N503
    substr $S504, $S505, $I504
    chopn $S503, $S504, 1
    box $P537, $S503
    set $P102, $P537
.annotate 'line', 3104
    get_hll_global $P541, "GLOBAL"
    nqp_get_package_through_who $P540, $P541, "QAST"
    get_who $P539, $P540
    set $P538, $P539["Regex"]
    unless_null $P538, fallback5199
    nqp_get_sc_object $P542, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P538, $P542
  fallback5199:
    find_lex $P543, "$/"
.annotate 'line', 3105
    get_hll_global $P547, "GLOBAL"
    nqp_get_package_through_who $P546, $P547, "QAST"
    get_who $P545, $P546
    set $P544, $P545["Regex"]
    unless_null $P544, fallback5200
    nqp_get_sc_object $P548, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P544, $P548
  fallback5200:
    find_lex $P549, "$/"
    $P550 = $P544."new"($P102, "literal" :named("rxtype"), $P549 :named("node"))
    $P551 = $P538."new"($P550, "sym" :named("name"), "subcapture" :named("rxtype"), $P543 :named("node"))
    store_lex "$qast", $P551
    .return ($P551) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1346233478.067") :anon :lex :outer("cuid_369_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3112
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P502, "$qast"
    set $P501, $P502[0]
    unless_null $P501, fallback5209
    nqp_get_sc_object $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P503
  fallback5209:
    $P504 = $P501."push"(_lex_param_0)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_370_1346233478.067") :anon :lex :outer("cuid_371_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3123
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3124
    set $P501, _lex_param_1["quote_EXPR"]
    unless_null $P501, fallback5227
    nqp_get_sc_object $P502, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    set $P501, $P502
  fallback5227:
    $P503 = $P501."ast"()
    $P504 = _lex_param_1."!make"($P503)
    .return ($P504) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1346233478.067") :anon :lex :outer("cuid_1_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3129
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P501, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99", 7
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1346233478.067") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P501 = 'cuid_473_1346233478.067' 
    capture_lex $P501 
    .local pmc cur_sc 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P501
    get_class $P502, "LexPad"
    get_class $P503, "NQPLexPad"
    $P504 = $P501."hll_map"($P502, $P503)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P501 = "cuid_1_1346233478.067" 
    get_hll_global $P502, "ModuleLoader"
    $P503 = $P502."load_setting"("NQPCORE")
    $P504 = $P501."set_outer_ctx"($P503)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P501, "ModuleLoader"
    $P502 = $P501."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P501, "ModuleLoader"
    $P502 = $P501."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P501, "ModuleLoader"
    $P502 = $P501."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P501, "ModuleLoader"
    $P502 = $P501."load_module"("QAST")
    nqp_create_sc $P501, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107"
    set cur_sc, $P501
    $P502 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P503, 'ResizableStringArray'
    null $S501
    push $P503, $S501
    push $P503, "P6opaque"
    push $P503, "QAST"
    push $P503, "QRegex"
    push $P503, "NQPCursorRole"
    push $P503, "3F04B14CE2A0361857F90C7B424E866EF9110B88-1346233431.244"
    push $P503, "src\\stage2\\QRegex.nqp"
    push $P503, "NQPMatch"
    push $P503, "NQPCursor"
    push $P503, "NQPRegexMethod"
    push $P503, "NQPRegex"
    push $P503, "HLL"
    push $P503, "PIRT"
    push $P503, "PAST"
    push $P503, "__PAST_CORE_SC__"
    push $P503, "NQP"
    push $P503, "CREATE"
    push $P503, "07D402AEDF5610FACB7346C622DDB1FFA6DD134D-1346233425.99"
    push $P503, "src\\stage2\\NQPCORE.setting"
    push $P503, "bless"
    push $P503, "BUILDALL"
    push $P503, "new"
    push $P503, "Str"
    push $P503, "Numeric"
    push $P503, "Int"
    push $P503, "at_pos"
    push $P503, "at_key"
    push $P503, "defined"
    push $P503, "ACCEPTS"
    push $P503, "isa"
    push $P503, "__dump"
    push $P503, "BUILD"
    push $P503, "slot_for_object"
    push $P503, "2BB67A389134BBAD0A6C35350CCD1D56BE456969-1346233437.664"
    push $P503, "src\\stage2\\gen\\NQPHLL.pm"
    push $P503, "get_slot_past_for_object"
    push $P503, "get_slot_past_for_code_ref_at"
    push $P503, "set_slot_past"
    push $P503, "set_cur_sc"
    push $P503, "add_object_to_cur_sc_past"
    push $P503, "add_object"
    push $P503, "add_root_code_ref"
    push $P503, "update_root_code_ref"
    push $P503, "is_precompilation_mode"
    push $P503, "add_load_dependency_task"
    push $P503, "add_fixup_task"
    push $P503, "get_ref"
    push $P503, "sc"
    push $P503, "handle"
    push $P503, "code_ref_blocks"
    push $P503, "load_dependency_tasks"
    push $P503, "fixup_tasks"
    push $P503, "serialize_and_produce_deserialization_past"
    push $P503, "push_lexpad"
    push $P503, "pop_lexpad"
    push $P503, "cur_lexpad"
    push $P503, "get_legacy_block_list"
    push $P503, "load_setting"
    push $P503, "load_module"
    push $P503, "install_package_symbol"
    push $P503, "install_lexical_symbol"
    push $P503, "install_package_routine"
    push $P503, "create_code"
    push $P503, "pkg_create_mo"
    push $P503, "pkg_add_attribute"
    push $P503, "pkg_add_method"
    push $P503, "set_routine_signature"
    push $P503, "pkg_set_body_block"
    push $P503, "pkg_add_parent_or_role"
    push $P503, "pkg_add_parrot_vtable_handler_mapping"
    push $P503, "pkg_compose"
    push $P503, "run_begin_block"
    push $P503, "add_libs"
    push $P503, "add_initializations"
    push $P503, "is_lexical"
    push $P503, "is_package"
    push $P503, "is_scope"
    push $P503, "known_sym"
    push $P503, "find_sym"
    push $P503, "$!sc"
    push $P503, "$!handle"
    push $P503, "$!precomp_mode"
    push $P503, "$!num_code_refs"
    push $P503, "$!code_ref_blocks"
    push $P503, "@!load_dependency_tasks"
    push $P503, "@!fixup_tasks"
    push $P503, "%!addr_to_slot"
    push $P503, "@!BLOCKS"
    push $P503, "%!code_objects_to_fix_up"
    push $P503, "%!code_object_fixup_list"
    push $P503, "%!code_stub_sc_idx"
    push $P503, "MATCH"
    push $P503, "Bool"
    push $P503, "parse"
    push $P503, "!INTERPOLATE"
    push $P503, "!INTERPOLATE_REGEX"
    push $P503, "target"
    push $P503, "from"
    push $P503, "pos"
    push $P503, "CAPHASH"
    push $P503, "!cursor_init"
    push $P503, "!cursor_start"
    push $P503, "!cursor_start_subcapture"
    push $P503, "!cursor_capture"
    push $P503, "!cursor_push_cstack"
    push $P503, "!cursor_pass"
    push $P503, "!cursor_fail"
    push $P503, "!cursor_next"
    push $P503, "!cursor_more"
    push $P503, "!reduce"
    push $P503, "!reduce_with_match"
    push $P503, "!protoregex"
    push $P503, "!protoregex_nfa"
    push $P503, "!protoregex_table"
    push $P503, "!alt"
    push $P503, "!alt_nfa"
    push $P503, "!BACKREF"
    push $P503, "!LITERAL"
    push $P503, "at"
    push $P503, "before"
    push $P503, "after"
    push $P503, "ws"
    push $P503, "ww"
    push $P503, "wb"
    push $P503, "ident"
    push $P503, "alpha"
    push $P503, "alnum"
    push $P503, "upper"
    push $P503, "lower"
    push $P503, "digit"
    push $P503, "xdigit"
    push $P503, "space"
    push $P503, "blank"
    push $P503, "cntrl"
    push $P503, "punct"
    push $P503, "FAILGOAL"
    push $P503, "termish"
    push $P503, "term"
    push $P503, "infix"
    push $P503, "prefix"
    push $P503, "postfix"
    push $P503, "circumfix"
    push $P503, "postcircumfix"
    push $P503, "term:sym<circumfix>"
    push $P503, "infixish"
    push $P503, "prefixish"
    push $P503, "postfixish"
    push $P503, "nullterm"
    push $P503, "nullterm_alt"
    push $P503, "nulltermish"
    push $P503, "quote_delimited"
    push $P503, "quote_atom"
    push $P503, "decint"
    push $P503, "decints"
    push $P503, "hexint"
    push $P503, "hexints"
    push $P503, "octint"
    push $P503, "octints"
    push $P503, "binint"
    push $P503, "binints"
    push $P503, "integer"
    push $P503, "dec_number"
    push $P503, "escale"
    push $P503, "quote_escape"
    push $P503, "quote_escape:sym<backslash>"
    push $P503, "quote_escape:sym<stopper>"
    push $P503, "quote_escape:sym<bs>"
    push $P503, "quote_escape:sym<nl>"
    push $P503, "quote_escape:sym<cr>"
    push $P503, "quote_escape:sym<tab>"
    push $P503, "quote_escape:sym<ff>"
    push $P503, "quote_escape:sym<esc>"
    push $P503, "quote_escape:sym<hex>"
    push $P503, "quote_escape:sym<oct>"
    push $P503, "quote_escape:sym<chr>"
    push $P503, "quote_escape:sym<0>"
    push $P503, "quote_escape:sym<misc>"
    push $P503, "charname"
    push $P503, "charnames"
    push $P503, "charspec"
    push $P503, "O"
    push $P503, "panic"
    push $P503, "peek_delimiters"
    push $P503, "quote_EXPR"
    push $P503, "quotemod_check"
    push $P503, "starter"
    push $P503, "stopper"
    push $P503, "split_words"
    push $P503, "EXPR"
    push $P503, "EXPR_reduce"
    push $P503, "ternary"
    push $P503, "MARKER"
    push $P503, "MARKED"
    push $P503, "LANG"
    push $P503, "TOP"
    push $P503, "identifier"
    push $P503, "name"
    push $P503, "deflongname"
    push $P503, "ENDSTMT"
    push $P503, "unv"
    push $P503, "pod_comment"
    push $P503, "comp_unit"
    push $P503, "statementlist"
    push $P503, "statement"
    push $P503, "eat_terminator"
    push $P503, "xblock"
    push $P503, "pblock"
    push $P503, "lambda"
    push $P503, "block"
    push $P503, "blockoid"
    push $P503, "newpad"
    push $P503, "outerctx"
    push $P503, "GLOBALish"
    push $P503, "finishpad"
    push $P503, "you_are_here"
    push $P503, "terminator"
    push $P503, "terminator:sym<;>"
    push $P503, "terminator:sym<}>"
    push $P503, "statement_control"
    push $P503, "statement_control:sym<use>"
    push $P503, "statement_control:sym<if>"
    push $P503, "statement_control:sym<unless>"
    push $P503, "statement_control:sym<while>"
    push $P503, "statement_control:sym<repeat>"
    push $P503, "statement_control:sym<for>"
    push $P503, "statement_control:sym<CATCH>"
    push $P503, "statement_control:sym<CONTROL>"
    push $P503, "statement_prefix"
    push $P503, "statement_prefix:sym<BEGIN>"
    push $P503, "statement_prefix:sym<INIT>"
    push $P503, "statement_prefix:sym<try>"
    push $P503, "blorst"
    push $P503, "statement_mod_cond"
    push $P503, "statement_mod_cond:sym<if>"
    push $P503, "statement_mod_cond:sym<unless>"
    push $P503, "statement_mod_loop"
    push $P503, "statement_mod_loop:sym<while>"
    push $P503, "statement_mod_loop:sym<until>"
    push $P503, "statement_mod_loop:sym<for>"
    push $P503, "term:sym<fatarrow>"
    push $P503, "term:sym<colonpair>"
    push $P503, "term:sym<variable>"
    push $P503, "term:sym<package_declarator>"
    push $P503, "term:sym<scope_declarator>"
    push $P503, "term:sym<routine_declarator>"
    push $P503, "term:sym<multi_declarator>"
    push $P503, "term:sym<regex_declarator>"
    push $P503, "term:sym<statement_prefix>"
    push $P503, "term:sym<lambda>"
    push $P503, "fatarrow"
    push $P503, "colonpair"
    push $P503, "variable"
    push $P503, "sigil"
    push $P503, "twigil"
    push $P503, "package_declarator"
    push $P503, "package_declarator:sym<module>"
    push $P503, "package_declarator:sym<knowhow>"
    push $P503, "package_declarator:sym<class>"
    push $P503, "package_declarator:sym<grammar>"
    push $P503, "package_declarator:sym<role>"
    push $P503, "package_declarator:sym<native>"
    push $P503, "package_declarator:sym<stub>"
    push $P503, "package_def"
    push $P503, "scope_declarator"
    push $P503, "scope_declarator:sym<my>"
    push $P503, "scope_declarator:sym<our>"
    push $P503, "scope_declarator:sym<has>"
    push $P503, "scoped"
    push $P503, "typename"
    push $P503, "declarator"
    push $P503, "variable_declarator"
    push $P503, "routine_declarator"
    push $P503, "routine_declarator:sym<sub>"
    push $P503, "routine_declarator:sym<method>"
    push $P503, "routine_def"
    push $P503, "method_def"
    push $P503, "onlystar"
    push $P503, "multi_declarator"
    push $P503, "multi_declarator:sym<multi>"
    push $P503, "multi_declarator:sym<proto>"
    push $P503, "multi_declarator:sym<null>"
    push $P503, "signature"
    push $P503, "parameter"
    push $P503, "param_var"
    push $P503, "named_param"
    push $P503, "default_value"
    push $P503, "trait"
    push $P503, "trait_mod"
    push $P503, "trait_mod:sym<is>"
    push $P503, "regex_declarator"
    push $P503, "dotty"
    push $P503, "term:sym<self>"
    push $P503, "term:sym<identifier>"
    push $P503, "term:sym<name>"
    push $P503, "term:sym<pir::op>"
    push $P503, "term:sym<pir::const>"
    push $P503, "term:sym<nqp::op>"
    push $P503, "term:sym<onlystar>"
    push $P503, "args"
    push $P503, "arglist"
    push $P503, "term:sym<value>"
    push $P503, "value"
    push $P503, "number"
    push $P503, "quote"
    push $P503, "quote:sym<apos>"
    push $P503, "quote:sym<dblq>"
    push $P503, "quote:sym<q>"
    push $P503, "quote:sym<qq>"
    push $P503, "quote:sym<Q>"
    push $P503, "quote:sym<Q:PIR>"
    push $P503, "quote:sym</ />"
    push $P503, "quote_escape:sym<$>"
    push $P503, "quote_escape:sym<{ }>"
    push $P503, "circumfix:sym<( )>"
    push $P503, "circumfix:sym<[ ]>"
    push $P503, "circumfix:sym<ang>"
    push $P503, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P503, "circumfix:sym<{ }>"
    push $P503, "circumfix:sym<sigil>"
    push $P503, "semilist"
    push $P503, "infixstopper"
    push $P503, "postcircumfix:sym<[ ]>"
    push $P503, "postcircumfix:sym<{ }>"
    push $P503, "postcircumfix:sym<ang>"
    push $P503, "postcircumfix:sym<( )>"
    push $P503, "postfix:sym<.>"
    push $P503, "prefix:sym<++>"
    push $P503, "prefix:sym<-->"
    push $P503, "postfix:sym<++>"
    push $P503, "postfix:sym<-->"
    push $P503, "infix:sym<**>"
    push $P503, "prefix:sym<+>"
    push $P503, "prefix:sym<~>"
    push $P503, "prefix:sym<->"
    push $P503, "prefix:sym<?>"
    push $P503, "prefix:sym<!>"
    push $P503, "prefix:sym<|>"
    push $P503, "infix:sym<*>"
    push $P503, "infix:sym</>"
    push $P503, "infix:sym<%>"
    push $P503, "infix:sym<+&>"
    push $P503, "infix:sym<+>"
    push $P503, "infix:sym<->"
    push $P503, "infix:sym<+|>"
    push $P503, "infix:sym<+^>"
    push $P503, "infix:sym<~>"
    push $P503, "infix:sym<==>"
    push $P503, "infix:sym<!=>"
    push $P503, "infix:sym<<=>"
    push $P503, "infix:sym<>=>"
    push $P503, "infix:sym<<>"
    push $P503, "infix:sym<>>"
    push $P503, "infix:sym<eq>"
    push $P503, "infix:sym<ne>"
    push $P503, "infix:sym<le>"
    push $P503, "infix:sym<ge>"
    push $P503, "infix:sym<lt>"
    push $P503, "infix:sym<gt>"
    push $P503, "infix:sym<=:=>"
    push $P503, "infix:sym<~~>"
    push $P503, "infix:sym<&&>"
    push $P503, "infix:sym<||>"
    push $P503, "infix:sym<//>"
    push $P503, "infix:sym<?? !!>"
    push $P503, "infix:sym<=>"
    push $P503, "infix:sym<:=>"
    push $P503, "infix:sym<::=>"
    push $P503, "infix:sym<,>"
    push $P503, "prefix:sym<return>"
    push $P503, "prefix:sym<make>"
    push $P503, "term:sym<last>"
    push $P503, "term:sym<next>"
    push $P503, "term:sym<redo>"
    push $P503, "smartmatch"
    push $P503, "$!orig"
    push $P503, "$!target"
    push $P503, "$!from"
    push $P503, "$!pos"
    push $P503, "$!match"
    push $P503, "$!name"
    push $P503, "$!bstack"
    push $P503, "$!cstack"
    push $P503, "$!regexsub"
    push $P503, "$!restart"
    push $P503, "5234B5A49DFB4F02BA7DCED030C35D4C271407E5-1346233469.971"
    push $P503, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P503, "obs"
    push $P503, "normspace"
    push $P503, "arg"
    push $P503, "nibbler"
    push $P503, "termaltseq"
    push $P503, "termconjseq"
    push $P503, "termalt"
    push $P503, "termconj"
    push $P503, "quantified_atom"
    push $P503, "separator"
    push $P503, "atom"
    push $P503, "quantifier"
    push $P503, "quantifier:sym<*>"
    push $P503, "quantifier:sym<+>"
    push $P503, "quantifier:sym<?>"
    push $P503, "quantifier:sym<{N,M}>"
    push $P503, "quantifier:sym<**>"
    push $P503, "backmod"
    push $P503, "metachar"
    push $P503, "metachar:sym<ws>"
    push $P503, "metachar:sym<[ ]>"
    push $P503, "metachar:sym<( )>"
    push $P503, "metachar:sym<'>"
    push $P503, "metachar:sym<\">"
    push $P503, "metachar:sym<.>"
    push $P503, "metachar:sym<^>"
    push $P503, "metachar:sym<^^>"
    push $P503, "metachar:sym<$>"
    push $P503, "metachar:sym<$$>"
    push $P503, "metachar:sym<:::>"
    push $P503, "metachar:sym<::>"
    push $P503, "metachar:sym<lwb>"
    push $P503, "metachar:sym<rwb>"
    push $P503, "metachar:sym<from>"
    push $P503, "metachar:sym<to>"
    push $P503, "metachar:sym<bs>"
    push $P503, "metachar:sym<mod>"
    push $P503, "metachar:sym<quantifier>"
    push $P503, "metachar:sym<~>"
    push $P503, "metachar:sym<{*}>"
    push $P503, "metachar:sym<assert>"
    push $P503, "metachar:sym<var>"
    push $P503, "metachar:sym<PIR>"
    push $P503, "backslash"
    push $P503, "backslash:sym<s>"
    push $P503, "backslash:sym<b>"
    push $P503, "backslash:sym<e>"
    push $P503, "backslash:sym<f>"
    push $P503, "backslash:sym<h>"
    push $P503, "backslash:sym<r>"
    push $P503, "backslash:sym<t>"
    push $P503, "backslash:sym<v>"
    push $P503, "backslash:sym<o>"
    push $P503, "backslash:sym<x>"
    push $P503, "backslash:sym<c>"
    push $P503, "backslash:sym<A>"
    push $P503, "backslash:sym<z>"
    push $P503, "backslash:sym<Z>"
    push $P503, "backslash:sym<Q>"
    push $P503, "backslash:sym<unrec>"
    push $P503, "backslash:sym<misc>"
    push $P503, "assertion"
    push $P503, "assertion:sym<?>"
    push $P503, "assertion:sym<!>"
    push $P503, "assertion:sym<|>"
    push $P503, "assertion:sym<method>"
    push $P503, "assertion:sym<name>"
    push $P503, "assertion:sym<[>"
    push $P503, "cclass_elem"
    push $P503, "mod_internal"
    push $P503, "mod_ident"
    push $P503, "mod_ident:sym<ignorecase>"
    push $P503, "mod_ident:sym<ratchet>"
    push $P503, "mod_ident:sym<sigspace>"
    push $P503, "metachar:sym<:my>"
    push $P503, "metachar:sym<{ }>"
    push $P503, "metachar:sym<nqpvar>"
    push $P503, "assertion:sym<{ }>"
    push $P503, "assertion:sym<?{ }>"
    push $P503, "assertion:sym<var>"
    push $P503, "codeblock"
    push $P503, "ints_to_string"
    push $P503, "CTXSAVE"
    push $P503, "SET_BLOCK_OUTER_CTX"
    push $P503, "subrule_alias"
    push $P503, "flip_ast"
    push $P503, "get_exports"
    push $P503, "get_module"
    push $P503, "language"
    push $P503, "compiler"
    push $P503, "config"
    push $P503, "autoprint"
    push $P503, "interactive"
    push $P503, "eval"
    push $P503, "ctxsave"
    push $P503, "stages"
    push $P503, "parsegrammar"
    push $P503, "parseactions"
    push $P503, "interactive_banner"
    push $P503, "interactive_prompt"
    push $P503, "compiler_progname"
    push $P503, "commandline_options"
    push $P503, "command_line"
    push $P503, "command_eval"
    push $P503, "process_args"
    push $P503, "evalfiles"
    push $P503, "compile"
    push $P503, "start"
    push $P503, "past"
    push $P503, "post"
    push $P503, "pirbegin"
    push $P503, "pir"
    push $P503, "evalpmc"
    push $P503, "dumper"
    push $P503, "usage"
    push $P503, "version"
    push $P503, "show-config"
    push $P503, "verbose-config"
    push $P503, "vmstat"
    push $P503, "nqpevent"
    push $P503, "removestage"
    push $P503, "addstage"
    push $P503, "parse_name"
    push $P503, "lineof"
    push $P503, "user-progname"
    push $P503, "cli-options"
    push $P503, "cli-arguments"
    push $P503, "@!stages"
    push $P503, "$!parsegrammar"
    push $P503, "$!parseactions"
    push $P503, "@!cmdoptions"
    push $P503, "$!usage"
    push $P503, "$!compiler_progname"
    push $P503, "$!language"
    push $P503, "%!config"
    push $P503, "$!user_progname"
    push $P503, "@!cli-arguments"
    push $P503, "%!cli-options"
    push $P503, "__6MODEL_CORE__"
    push $P503, "9445C5406A048972164361D402A20067808C4578-1346233419.227"
    push $P503, "src\\stage2\\gen\\nqp-mo.pm"
    push $P503, "NQP::World"
    push $P503, "NQP::Grammar"
    push $P503, "orig"
    push $P503, "match"
    push $P503, "bstack"
    push $P503, "cstack"
    push $P503, "regexsub"
    push $P503, "restart"
    push $P503, "NQP::Regex"
    push $P503, "NQP::Actions"
    push $P503, "NQP::RegexActions"
    push $P503, "NQP::Compiler"
    push $P503, "CompileTimeValue"
    push $P503, "AA49D86054CDC686E34A37C6F89EC4059A76B342-1346233428.122"
    push $P503, "src\\stage2\\QASTNode.nqp"
    push $P503, "SpecialArg"
    push $P503, "Node"
    push $P503, "Regex"
    push $P503, "IVal"
    push $P503, "NVal"
    push $P503, "SVal"
    push $P503, "BVal"
    push $P503, "WVal"
    push $P503, "Want"
    push $P503, "Var"
    push $P503, "VarWithFallback"
    push $P503, "Op"
    push $P503, "VM"
    push $P503, "Stmts"
    push $P503, "Stmt"
    push $P503, "Block"
    push $P503, "BlockMemo"
    push $P503, "Unquote"
    push $P503, "CompUnit"
    push $P503, "InlinePlaceholder"
    push $P503, "Operations"
    push $P503, "5B9F058D7D242FDD79B51D58DE66B682BE0865F8-1346233447.856"
    push $P503, "src\\stage2\\QAST.nqp"
    push $P503, "Compiler"
    push $P503, "NFA"
    push $P503, "P6Regex"
    push $P503, "Grammar"
    push $P503, "Actions"
    push $P503, "CommandLine"
    push $P503, "World"
    push $P503, "CallResult"
    push $P503, "Sub"
    push $P503, "Ops"
    push $P503, "Label"
    push $P503, "RegexActions"
    .const 'Sub' $P504 = 'cuid_473_1346233478.067' 
    capture_lex $P504
    $P505 = $P504()
    nqp_deserialize_sc "", cur_sc, $P503, $P505
    .const "LexInfo" $P501 = "cuid_1_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 0
    $P503 = $P501."set_static_lexpad_value"("GLOBALish", $P502)
    .const "LexInfo" $P504 = "cuid_1_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const "LexInfo" $P501 = "cuid_1_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 0
    $P503 = $P501."set_static_lexpad_value"("$?PACKAGE", $P502)
    .const "LexInfo" $P504 = "cuid_1_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const 'Sub' $P501 = "cuid_2_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 2
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_3_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 3
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_4_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 4
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_5_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 5
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_6_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 6
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_7_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 7
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_8_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 8
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_9_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 9
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_10_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 10
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_11_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 11
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_12_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 12
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_13_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 13
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_14_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 14
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_15_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 15
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_16_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 16
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_17_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 17
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_18_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 18
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_19_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 19
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_20_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 20
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_21_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 21
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_22_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 22
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_23_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 23
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_24_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 24
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_25_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 25
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_26_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 26
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_27_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 27
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_28_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 28
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_29_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 29
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_30_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 30
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_31_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 31
    set_sub_code_object $P501, $P502
    .const "LexInfo" $P501 = "cuid_32_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    $P503 = $P501."set_static_lexpad_value"("$?PACKAGE", $P502)
    .const "LexInfo" $P504 = "cuid_32_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const "LexInfo" $P501 = "cuid_32_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 1
    $P503 = $P501."set_static_lexpad_value"("$?CLASS", $P502)
    .const "LexInfo" $P504 = "cuid_32_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const 'Sub' $P501 = "cuid_33_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 33
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_34_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 34
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_35_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 35
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_36_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 36
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_37_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 37
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_38_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 38
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_40_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 39
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_42_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 40
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_43_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 41
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_44_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 42
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_46_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 43
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_47_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 44
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_48_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 45
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_49_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 46
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_50_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 47
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_51_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 48
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_52_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 49
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_53_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 50
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_54_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 51
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_55_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 52
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_56_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 53
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_57_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 54
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_58_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 55
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_59_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 56
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_60_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 57
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_61_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 58
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_62_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 59
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_63_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 60
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_65_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 61
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_66_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 62
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_67_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 63
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_68_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 64
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_69_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 65
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_70_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 66
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_71_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 67
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_72_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 68
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_73_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 69
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_74_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 70
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_75_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 71
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_76_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 72
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_77_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 73
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_78_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 74
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_79_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 75
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_80_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 76
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_81_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 77
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_82_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 78
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_83_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 79
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_84_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 80
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_85_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 81
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_86_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 82
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_87_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 83
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_88_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 84
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_91_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 85
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_92_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 86
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_93_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 87
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_94_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 88
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_95_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 89
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_96_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 90
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_97_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 91
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_98_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 92
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_99_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 93
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_100_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 94
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_101_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 95
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_102_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 96
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_103_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 97
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_104_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 98
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_105_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 99
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_106_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 100
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_107_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 101
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_108_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 102
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_109_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 103
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_110_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 104
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_111_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 105
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_112_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 106
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_113_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 107
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_114_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 108
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_115_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 109
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_116_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 110
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_117_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 111
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_118_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 112
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_119_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 113
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_120_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 114
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_121_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 115
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_122_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 116
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_123_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 117
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_124_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 118
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_125_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 119
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_126_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 120
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_128_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 121
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_129_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 122
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_130_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 123
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_131_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 124
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_132_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 125
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_133_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 126
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_134_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 127
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_135_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 128
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_136_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 129
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_137_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 130
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_138_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 131
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_139_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 132
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_140_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 133
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_141_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 134
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_142_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 135
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_143_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 136
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_144_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 137
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_145_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 138
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_146_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 139
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_147_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 140
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_148_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 141
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_149_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 142
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_150_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 143
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_151_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 144
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_152_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 145
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_153_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 146
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_154_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 147
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_155_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 148
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_156_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 149
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_157_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 150
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_158_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 151
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_159_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 152
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_160_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 153
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_161_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 154
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_162_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 155
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_163_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 156
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_164_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 157
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_165_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 158
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_166_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 159
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_167_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 160
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_168_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 161
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_169_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 162
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_170_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 163
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_171_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 164
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_172_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 165
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_173_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 166
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_174_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 167
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_175_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 168
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_176_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 169
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_177_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 170
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_178_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 171
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_179_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 172
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_180_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 173
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_181_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 174
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_182_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 175
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_183_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 176
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_184_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 177
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_185_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 178
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_186_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 179
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_187_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 180
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_188_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 181
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_189_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 182
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_190_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 183
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_191_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 184
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_192_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 185
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_193_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 186
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_194_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 187
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_195_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 188
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_196_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 189
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_197_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 190
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_198_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 191
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_199_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 192
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_200_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 193
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_201_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 194
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_202_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 195
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_203_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 196
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_204_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 197
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_205_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 198
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_206_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 199
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_207_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 200
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_208_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 201
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_209_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 202
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_210_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 203
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_211_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 204
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_212_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 205
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_213_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 206
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_214_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 207
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_215_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 208
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_216_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 209
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_217_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 210
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_218_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 211
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_219_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 212
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_220_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 213
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_221_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 214
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_222_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 215
    set_sub_code_object $P501, $P502
    .const "LexInfo" $P501 = "cuid_223_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 32
    $P503 = $P501."set_static_lexpad_value"("$?PACKAGE", $P502)
    .const "LexInfo" $P504 = "cuid_223_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const "LexInfo" $P501 = "cuid_223_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 32
    $P503 = $P501."set_static_lexpad_value"("$?CLASS", $P502)
    .const "LexInfo" $P504 = "cuid_223_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const 'Sub' $P501 = "cuid_225_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 217
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_226_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 218
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_228_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 219
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_229_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 220
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_232_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 221
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_235_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 222
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_237_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 223
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_239_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 224
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_240_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 225
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_241_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 226
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_242_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 227
    set_sub_code_object $P501, $P502
    .const "LexInfo" $P501 = "cuid_243_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 216
    $P503 = $P501."set_static_lexpad_value"("$?PACKAGE", $P502)
    .const "LexInfo" $P504 = "cuid_243_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const "LexInfo" $P501 = "cuid_243_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 216
    $P503 = $P501."set_static_lexpad_value"("$?CLASS", $P502)
    .const "LexInfo" $P504 = "cuid_243_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const 'Sub' $P501 = "cuid_244_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 229
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_245_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 230
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_246_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 231
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_247_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 232
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_248_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 233
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_249_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 234
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_250_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 235
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_251_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 236
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_252_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 237
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_253_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 238
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_254_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 239
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_255_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 240
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_256_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 241
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_257_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 242
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_258_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 243
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_259_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 244
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_260_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 245
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_261_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 246
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_262_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 247
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_263_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 248
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_264_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 249
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_265_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 250
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_266_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 251
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_267_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 252
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_268_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 253
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_269_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 254
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_270_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 255
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_271_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 256
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_272_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 257
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_273_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 258
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_274_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 259
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_275_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 260
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_276_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 261
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_277_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 262
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_278_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 263
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_279_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 264
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_280_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 265
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_281_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 266
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_282_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 267
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_283_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 268
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_284_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 269
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_285_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 270
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_286_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 271
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_287_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 272
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_288_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 273
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_289_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 274
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_290_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 275
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_291_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 276
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_292_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 277
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_293_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 278
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_294_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 279
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_295_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 280
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_296_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 281
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_297_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 282
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_298_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 283
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_299_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 284
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_300_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 285
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_301_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 286
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_302_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 287
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_303_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 288
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_304_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 289
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_305_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 290
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_306_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 291
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_307_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 292
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_308_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 293
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_309_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 294
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_310_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 295
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_311_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 296
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_312_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 297
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_313_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 298
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_314_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 299
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_315_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 300
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_316_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 301
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_317_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 302
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_318_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 303
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_319_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 304
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_320_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 305
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_321_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 306
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_322_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 307
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_323_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 308
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_324_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 309
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_325_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 310
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_326_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 311
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_327_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 312
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_328_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 313
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_329_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 314
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_330_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 315
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_331_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 316
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_332_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 317
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_333_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 318
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_334_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 319
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_335_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 320
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_336_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 321
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_337_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 322
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_338_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 323
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_339_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 324
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_340_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 325
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_341_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 326
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_342_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 327
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_343_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 328
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_344_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 329
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_345_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 330
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_346_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 331
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_347_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 332
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_348_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 333
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_349_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 334
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_350_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 335
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_351_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 336
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_352_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 337
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_353_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 338
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_354_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 339
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_355_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 340
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_356_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 341
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_357_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 342
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_358_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 343
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_359_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 344
    set_sub_code_object $P501, $P502
    .const "LexInfo" $P501 = "cuid_360_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 228
    $P503 = $P501."set_static_lexpad_value"("$?PACKAGE", $P502)
    .const "LexInfo" $P504 = "cuid_360_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const "LexInfo" $P501 = "cuid_360_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 228
    $P503 = $P501."set_static_lexpad_value"("$?CLASS", $P502)
    .const "LexInfo" $P504 = "cuid_360_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const 'Sub' $P501 = "cuid_361_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 346
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_362_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 347
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_363_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 348
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_364_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 349
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_365_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 350
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_366_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 351
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_367_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 352
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_368_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 353
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_369_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 354
    set_sub_code_object $P501, $P502
    .const 'Sub' $P501 = "cuid_370_1346233478.067" 
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 355
    set_sub_code_object $P501, $P502
    .const "LexInfo" $P501 = "cuid_371_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 345
    $P503 = $P501."set_static_lexpad_value"("$?PACKAGE", $P502)
    .const "LexInfo" $P504 = "cuid_371_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const "LexInfo" $P501 = "cuid_371_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 345
    $P503 = $P501."set_static_lexpad_value"("$?CLASS", $P502)
    .const "LexInfo" $P504 = "cuid_371_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const "LexInfo" $P501 = "cuid_372_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 356
    $P503 = $P501."set_static_lexpad_value"("$?PACKAGE", $P502)
    .const "LexInfo" $P504 = "cuid_372_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    .const "LexInfo" $P501 = "cuid_372_1346233478.067"
    nqp_get_sc_object $P502, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 356
    $P503 = $P501."set_static_lexpad_value"("$?CLASS", $P502)
    .const "LexInfo" $P504 = "cuid_372_1346233478.067"
    $P505 = $P504."finish_static_lexpad"()
    nqp_get_sc_object $P501, "661440016C220547B029EDD9F9829BA133A56C33-1346233478.107", 0
    set_hll_global "GLOBAL", $P501
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1346233478.067") :anon :lex :outer("cuid_474_1346233478.067")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P501, 'ResizablePMCArray'
    .const 'Sub' $P502 = "cuid_2_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_3_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_4_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_5_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_6_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_7_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_8_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_9_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_10_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_11_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_12_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_13_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_14_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_15_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_16_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_17_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_18_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_19_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_20_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_21_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_22_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_23_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_24_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_25_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_26_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_27_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_28_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_29_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_30_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_31_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_33_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_34_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_35_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_36_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_37_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_38_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_40_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_42_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_43_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_44_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_46_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_47_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_48_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_49_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_50_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_51_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_52_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_53_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_54_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_55_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_56_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_57_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_58_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_59_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_60_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_61_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_62_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_63_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_65_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_66_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_67_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_68_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_69_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_70_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_71_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_72_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_73_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_74_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_75_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_76_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_77_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_78_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_79_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_80_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_81_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_82_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_83_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_84_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_85_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_86_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_87_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_88_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_91_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_92_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_93_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_94_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_95_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_96_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_97_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_98_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_99_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_100_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_101_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_102_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_103_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_104_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_105_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_106_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_107_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_108_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_109_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_110_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_111_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_112_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_113_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_114_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_115_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_116_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_117_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_118_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_119_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_120_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_121_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_122_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_123_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_124_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_125_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_126_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_128_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_129_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_130_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_131_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_132_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_133_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_134_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_135_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_136_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_137_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_138_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_139_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_140_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_141_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_142_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_143_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_144_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_145_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_146_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_147_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_148_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_149_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_150_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_151_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_152_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_153_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_154_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_155_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_156_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_157_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_158_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_159_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_160_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_161_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_162_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_163_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_164_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_165_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_166_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_167_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_168_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_169_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_170_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_171_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_172_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_173_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_174_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_175_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_176_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_177_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_178_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_179_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_180_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_181_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_182_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_183_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_184_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_185_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_186_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_187_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_188_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_189_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_190_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_191_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_192_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_193_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_194_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_195_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_196_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_197_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_198_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_199_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_200_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_201_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_202_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_203_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_204_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_205_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_206_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_207_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_208_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_209_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_210_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_211_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_212_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_213_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_214_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_215_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_216_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_217_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_218_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_219_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_220_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_221_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_222_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_225_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_226_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_228_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_229_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_232_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_235_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_237_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_239_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_240_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_241_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_242_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_244_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_245_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_246_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_247_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_248_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_249_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_250_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_251_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_252_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_253_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_254_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_255_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_256_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_257_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_258_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_259_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_260_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_261_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_262_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_263_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_264_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_265_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_266_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_267_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_268_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_269_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_270_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_271_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_272_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_273_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_274_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_275_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_276_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_277_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_278_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_279_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_280_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_281_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_282_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_283_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_284_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_285_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_286_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_287_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_288_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_289_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_290_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_291_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_292_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_293_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_294_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_295_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_296_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_297_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_298_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_299_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_300_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_301_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_302_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_303_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_304_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_305_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_306_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_307_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_308_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_309_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_310_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_311_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_312_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_313_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_314_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_315_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_316_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_317_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_318_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_319_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_320_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_321_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_322_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_323_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_324_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_325_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_326_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_327_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_328_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_329_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_330_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_331_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_332_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_333_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_334_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_335_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_336_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_337_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_338_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_339_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_340_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_341_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_342_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_343_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_344_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_345_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_346_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_347_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_348_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_349_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_350_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_351_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_352_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_353_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_354_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_355_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_356_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_357_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_358_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_359_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_361_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_362_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_363_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_364_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_365_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_366_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_367_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_368_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_369_1346233478.067" 
    push $P501, $P502
    .const 'Sub' $P502 = "cuid_370_1346233478.067" 
    push $P501, $P502
    .return ($P501) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1346233478.067") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P501 = "cuid_1_1346233478.067" 
    $P502 = $P501()
    .return ($P502) 
.end