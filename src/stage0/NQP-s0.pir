.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1359718901.265") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5064 = 'cuid_370_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_372_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_374_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_391_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_410_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_411_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_412_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_413_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_414_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_415_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_416_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_417_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_418_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_420_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_492_1359718901.265' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_496_1359718901.265' 
    capture_lex $P5064 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "$nqpcomp", $P105 
    .lex "@clo", $P106 
    .lex "&MAIN", $P107 
    .lex "&hll-config", $P108 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P105, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P106, $P5003
    .const 'Sub' $P5004 = 'cuid_370_1359718901.265' 
    capture_lex $P5004
    set $P107, $P5004
    .const 'Sub' $P5005 = 'cuid_372_1359718901.265' 
    capture_lex $P5005
    set $P108, $P5005
    find_dynamic_lex $P5006, "$*CTXSAVE"
    set ctxsave, $P5006
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5009, $I5002
    set $P5008, $P5009
    unless $I5002 goto if11_end13 
    $P5007 = ctxsave."ctxsave"()
    set $P5008, $P5007
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_374_1359718901.265' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_391_1359718901.265' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_410_1359718901.265' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1442
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3792
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5020
  fallback3792:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1444
    $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1446
    .const 'Sub' $P5023 = 'cuid_411_1359718901.265' 
    capture_lex $P5023
    newclosure $P5022, $P5023
    $P104."add_hll_op"("nqp", "preinc", $P5022)
.annotate 'line', 1461
    .const 'Sub' $P5025 = 'cuid_412_1359718901.265' 
    capture_lex $P5025
    newclosure $P5024, $P5025
    $P104."add_hll_op"("nqp", "predec", $P5024)
.annotate 'line', 1476
    .const 'Sub' $P5027 = 'cuid_413_1359718901.265' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P104."add_hll_op"("nqp", "postinc", $P5026)
.annotate 'line', 1500
    .const 'Sub' $P5029 = 'cuid_414_1359718901.265' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P104."add_hll_op"("nqp", "postdec", $P5028)
.annotate 'line', 1524
    .const 'Sub' $P5031 = 'cuid_415_1359718901.265' 
    capture_lex $P5031
    newclosure $P5030, $P5031
    $P104."add_hll_op"("nqp", "numify", $P5030)
.annotate 'line', 1528
    .const 'Sub' $P5033 = 'cuid_416_1359718901.265' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P104."add_hll_op"("nqp", "stringify", $P5032)
.annotate 'line', 1532
    .const 'Sub' $P5035 = 'cuid_417_1359718901.265' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P104."add_hll_op"("nqp", "eqaddr", $P5034)
.annotate 'line', 1540
    .const 'Sub' $P5037 = 'cuid_418_1359718901.265' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P104."add_hll_op"("nqp", "falsey", $P5036)
    .const 'Sub' $P5038 = 'cuid_420_1359718901.265' 
    capture_lex $P5038
    $P5039 = $P5038()
    .const 'Sub' $P5040 = 'cuid_492_1359718901.265' 
    capture_lex $P5040
    $P5041 = $P5040()
    .const 'Sub' $P5042 = 'cuid_496_1359718901.265' 
    capture_lex $P5042
    $P5043 = $P5042()
.annotate 'line', 3223
    nqp_get_sc_object $P5047, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5046, $P5047, "NQP"
    get_who $P5045, $P5046
    set $P5044, $P5045["Compiler"]
    unless_null $P5044, fallback5773
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5048
  fallback5773:
    $P5049 = $P5044."new"()
    set $P105, $P5049
.annotate 'line', 3224
    $P105."language"("nqp")
.annotate 'line', 3225
    nqp_get_sc_object $P5053, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5052, $P5053, "NQP"
    get_who $P5051, $P5052
    set $P5050, $P5051["Grammar"]
    unless_null $P5050, fallback5774
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5050, $P5054
  fallback5774:
    $P105."parsegrammar"($P5050)
.annotate 'line', 3226
    nqp_get_sc_object $P5058, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Actions"]
    unless_null $P5055, fallback5775
    nqp_get_sc_object $P5059, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5059
  fallback5775:
    $P105."parseactions"($P5055)
.annotate 'line', 3227
    $P5060 = $P105."config"()
    "&hll-config"($P5060)
.annotate 'line', 3230
    $P5061 = $P105."commandline_options"()
    set $P106, $P5061
.annotate 'line', 3231
    $P106."push"("parsetrace")
.annotate 'line', 3232
    $P106."push"("setting=s")
.annotate 'line', 3233
    $P106."push"("setting-path=s")
.annotate 'line', 3234
    $P106."push"("module-path=s")
.annotate 'line', 3235
    $P106."push"("vmlibs=s")
.annotate 'line', 3236
    $P106."push"("no-regex-lib")
.annotate 'line', 3237
    $P106."push"("old-regex-lib")
.annotate 'line', 3238
    $P106."push"("dynext=s")
.annotate 'line', 3239
    $P106."push"("stable-sc")
    unless _lex_param_0 goto if1764_end5777 
    .const 'Sub' $P5062 = "cuid_370_1359718901.265" 
    $P5063 = $P5062(_lex_param_0 :flat)
  if1764_end5777:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_370_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3241
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 3243
    find_lex $P5001, "$nqpcomp"
    $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3246
    find_lex $P5002, "$nqpcomp"
    $P5003 = $P5002."nqpevent"()
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_372_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3250
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2013.01-39-gaaf85c3"
    set _lex_param_0["version"], $P5001
    box $P5002, "2013-02-01T11:41:41Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5031 = 'cuid_1_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_2_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_3_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_4_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_5_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_6_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_7_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_8_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_9_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_10_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_11_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_15_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_16_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_17_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_18_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_19_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_20_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_21_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_22_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_23_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_24_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_25_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_26_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_27_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_28_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_29_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_30_1359718901.265' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_31_1359718901.265' 
    capture_lex $P5031 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_1_1359718901.265' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_2_1359718901.265' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_3_1359718901.265' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_4_1359718901.265' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_5_1359718901.265' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_6_1359718901.265' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_7_1359718901.265' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_8_1359718901.265' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_9_1359718901.265' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_10_1359718901.265' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_11_1359718901.265' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_15_1359718901.265' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_16_1359718901.265' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_17_1359718901.265' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_18_1359718901.265' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_19_1359718901.265' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_20_1359718901.265' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_21_1359718901.265' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_22_1359718901.265' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_23_1359718901.265' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_24_1359718901.265' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_25_1359718901.265' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_26_1359718901.265' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_27_1359718901.265' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_28_1359718901.265' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_29_1359718901.265' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_30_1359718901.265' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_31_1359718901.265' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_1_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 30
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5032 = 'cuid_373_1359718901.265' 
    capture_lex $P5032 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_types", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_object_fixup_list", $P5012
    nqp_decontainerize $P5013, _lex_param_0
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    new $P5015, 'Hash'
    repr_bind_attr_obj $P5013, $P5014, "%!code_stub_sc_idx", $P5015
    find_dynamic_lex $P5018, "%*COMPILING"
    unless_null $P5018, fallback16
    nqp_get_sc_object $P5021, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%COMPILING"]
    unless_null $P5019, fallback17
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%COMPILING"], $P5024
    set $P5019, $P5024
  fallback17:
    unless_null $P5019, vivi_1318
    die "Contextual %*COMPILING not found"
    box $P5025, "Contextual %*COMPILING not found"
    set $P5019, $P5025
  vivi_1318:
    set $P5018, $P5019
  fallback16:
    set $P5017, $P5018["%?OPTIONS"]
    unless_null $P5017, fallback19
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5026
  fallback19:
    set $P5016, $P5017["dynext"]
    unless_null $P5016, fallback20
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5027
  fallback20:
    defined $I5001, $P5016
    box $P5031, $I5001
    set $P5030, $P5031
    unless $I5001 goto if12_end15 
    .const 'Sub' $P5028 = 'cuid_373_1359718901.265' 
    capture_lex $P5028
    $P5029 = $P5028()
    set $P5030, $P5029
  if12_end15:
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1359718901.265") :anon :lex :outer("cuid_1_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 37
    .lex "$dynext_path", $P101 
    .lex "@dynext_paths", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    find_dynamic_lex $P5005, "%*COMPILING"
    unless_null $P5005, fallback21
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%COMPILING"]
    unless_null $P5006, fallback22
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%COMPILING"], $P5011
    set $P5006, $P5011
  fallback22:
    unless_null $P5006, vivi_1423
    die "Contextual %*COMPILING not found"
    box $P5012, "Contextual %*COMPILING not found"
    set $P5006, $P5012
  vivi_1423:
    set $P5005, $P5006
  fallback21:
    set $P5004, $P5005["%?OPTIONS"]
    unless_null $P5004, fallback24
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5013
  fallback24:
    set $P5003, $P5004["dynext"]
    unless_null $P5003, fallback25
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5014
  fallback25:
    set $P101, $P5003
    getinterp $P5017
    set $P5016, $P5017[.IGLOBALS_LIB_PATHS]
    unless_null $P5016, fallback26
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5018
  fallback26:
    set $P5015, $P5016[.PARROT_LIB_PATH_DYNEXT]
    unless_null $P5015, fallback27
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5019
  fallback27:
    set $P102, $P5015
.annotate 'line', 41
    $P5020 = $P102."push"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_2_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 48
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback28
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback28:
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback29
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback29:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    unless $N5001 goto if15_end31 
.annotate 'line', 49
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback32
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5024
  fallback32:
    set $P101["outer"], $P5017
  if15_end31:
    nqp_decontainerize $P5025, _lex_param_0
    nqp_get_sc_object $P5026, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5027, $P5025, $P5026, "@!BLOCKS"
    nqp_decontainerize $P5028, _lex_param_0
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5030, $P5028, $P5029, "@!BLOCKS"
    set $N5005, $P5030
    set $I5002, $N5005
    set $P5027[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_3_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 57
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 58
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_4_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback33
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5008
  fallback33:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_5_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 67
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    repr_clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 69
    $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_6_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 80
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_375_1359718901.265' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_34
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if16_end37 
    .const 'Sub' $P5001 = 'cuid_375_1359718901.265' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if16_end37:
    goto lexotic_35
  lexotic_34:
    .get_results ($P5003)
  lexotic_35:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1359718901.265") :anon :lex :outer("cuid_6_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 82
    .lex "$setting", $P101 
    .lex "$set_outer", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*COMPILING"
    unless_null $P5004, fallback38
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%COMPILING"]
    unless_null $P5005, fallback39
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%COMPILING"], $P5010
    set $P5005, $P5010
  fallback39:
    unless_null $P5005, vivi_1740
    die "Contextual %*COMPILING not found"
    box $P5011, "Contextual %*COMPILING not found"
    set $P5005, $P5011
  vivi_1740:
    set $P5004, $P5005
  fallback38:
    set $P5003, $P5004["%?OPTIONS"]
    unless_null $P5003, fallback41
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5012
  fallback41:
.annotate 'line', 87
    find_lex $P5013, "$loader"
    find_lex $P5014, "$setting_name"
    $P5015 = $P5013."load_setting"($P5014)
    set $P5003["outer_ctx"], $P5015
    set $P101, $P5015
.annotate 'line', 91
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback42
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5020
  fallback42:
.annotate 'line', 92
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback43
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback43:
.annotate 'line', 94
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["BVal"]
    unless_null $P5026, fallback44
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5030
  fallback44:
    find_dynamic_lex $P5031, "$*UNIT"
    unless_null $P5031, fallback45
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$UNIT"]
    unless_null $P5032, fallback46
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5035
  fallback46:
    unless_null $P5032, vivi_1847
    die "Contextual $*UNIT not found"
    box $P5036, "Contextual $*UNIT not found"
    set $P5032, $P5036
  vivi_1847:
    set $P5031, $P5032
  fallback45:
    $P5037 = $P5026."new"($P5031 :named("value"))
.annotate 'line', 95
    nqp_get_sc_object $P5041, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback48
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5042
  fallback48:
.annotate 'line', 97
    nqp_get_sc_object $P5046, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback49
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5043, $P5047
  fallback49:
.annotate 'line', 99
    nqp_get_sc_object $P5051, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["SVal"]
    unless_null $P5048, fallback50
    nqp_get_sc_object $P5052, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5052
  fallback50:
    $P5053 = $P5048."new"("ModuleLoader" :named("value"))
    $P5054 = $P5043."new"($P5053, "getcurhllsym" :named("op"))
.annotate 'line', 101
    nqp_get_sc_object $P5058, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback51
    nqp_get_sc_object $P5059, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5059
  fallback51:
    find_lex $P5060, "$setting_name"
    $P5061 = $P5055."new"($P5060 :named("value"))
    $P5062 = $P5038."new"($P5054, $P5061, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5063 = $P5021."new"($P5037, $P5062, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
.annotate 'line', 103
    nqp_get_sc_object $P5067, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Op"]
    unless_null $P5064, fallback52
    nqp_get_sc_object $P5068, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5064, $P5068
  fallback52:
.annotate 'line', 105
    nqp_get_sc_object $P5072, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["BVal"]
    unless_null $P5069, fallback53
    nqp_get_sc_object $P5073, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5069, $P5073
  fallback53:
    find_dynamic_lex $P5074, "$*UNIT"
    unless_null $P5074, fallback54
    nqp_get_sc_object $P5077, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$UNIT"]
    unless_null $P5075, fallback55
    nqp_get_sc_object $P5078, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5075, $P5078
  fallback55:
    unless_null $P5075, vivi_1956
    die "Contextual $*UNIT not found"
    box $P5079, "Contextual $*UNIT not found"
    set $P5075, $P5079
  vivi_1956:
    set $P5074, $P5075
  fallback54:
    $P5080 = $P5069."new"($P5074 :named("value"))
.annotate 'line', 106
    nqp_get_sc_object $P5084, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Op"]
    unless_null $P5081, fallback57
    nqp_get_sc_object $P5085, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5081, $P5085
  fallback57:
.annotate 'line', 108
    nqp_get_sc_object $P5089, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["Op"]
    unless_null $P5086, fallback58
    nqp_get_sc_object $P5090, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5086, $P5090
  fallback58:
.annotate 'line', 110
    nqp_get_sc_object $P5094, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["SVal"]
    unless_null $P5091, fallback59
    nqp_get_sc_object $P5095, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5091, $P5095
  fallback59:
    $P5096 = $P5091."new"("ModuleLoader" :named("value"))
    $P5097 = $P5086."new"($P5096, "getcurhllsym" :named("op"))
.annotate 'line', 112
    nqp_get_sc_object $P5101, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5100, $P5101, "QAST"
    get_who $P5099, $P5100
    set $P5098, $P5099["SVal"]
    unless_null $P5098, fallback60
    nqp_get_sc_object $P5102, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5098, $P5102
  fallback60:
    find_lex $P5103, "$setting_name"
    $P5104 = $P5098."new"($P5103 :named("value"))
    $P5105 = $P5081."new"($P5097, $P5104, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5106 = $P5064."new"($P5080, $P5105, "forceouterctx" :named("op"))
    $P5107 = $P5016."new"($P5063 :named("parrot"), $P5106 :named("jvm"))
    set $P102, $P5107
.annotate 'line', 114
    find_lex $P5109, "self"
    nqp_decontainerize $P5108, $P5109
    $P5110 = $P5108."is_precompilation_mode"()
    unless $P5110 goto if20_else61 
.annotate 'line', 115
    find_lex $P5112, "self"
    nqp_decontainerize $P5111, $P5112
    nqp_get_sc_object $P5116, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5115, $P5116, "QAST"
    get_who $P5114, $P5115
    set $P5113, $P5114["Stmts"]
    unless_null $P5113, fallback63
    nqp_get_sc_object $P5117, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5113, $P5117
  fallback63:
.annotate 'line', 116
    nqp_get_sc_object $P5121, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["Op"]
    unless_null $P5118, fallback64
    nqp_get_sc_object $P5122, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5118, $P5122
  fallback64:
.annotate 'line', 118
    nqp_get_sc_object $P5126, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5125, $P5126, "QAST"
    get_who $P5124, $P5125
    set $P5123, $P5124["VM"]
    unless_null $P5123, fallback65
    nqp_get_sc_object $P5127, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5123, $P5127
  fallback65:
.annotate 'line', 119
    nqp_get_sc_object $P5131, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["SVal"]
    unless_null $P5128, fallback66
    nqp_get_sc_object $P5132, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5128, $P5132
  fallback66:
    $P5133 = $P5128."new"("ModuleLoader.pbc" :named("value"))
.annotate 'line', 120
    nqp_get_sc_object $P5137, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5136, $P5137, "QAST"
    get_who $P5135, $P5136
    set $P5134, $P5135["SVal"]
    unless_null $P5134, fallback67
    nqp_get_sc_object $P5138, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5134, $P5138
  fallback67:
    $P5139 = $P5134."new"("ModuleLoader.class" :named("value"))
    $P5140 = $P5123."new"($P5133 :named("parrot"), $P5139 :named("jvm"))
    $P5141 = $P5118."new"($P5140, "loadbytecode" :named("op"))
    $P5142 = $P5113."new"($P5141, $P102)
    $P5143 = $P5111."add_load_dependency_task"($P5142 :named("deserialize_past"))
    goto if20_end62
  if20_else61:
.annotate 'line', 125
.annotate 'line', 126
    find_lex $P5145, "self"
    nqp_decontainerize $P5144, $P5145
    $P5146 = $P5144."add_fixup_task"($P102 :named("fixup_past"))
  if20_end62:
    getattribute $P5148, $P101, "lex_pad"
    find_lex $P5147, "RETURN"
    $P5149 = $P5147($P5148)
    .return ($P5149) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_7_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 135
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_68
    .lex "RETURN", $P102
.annotate 'line', 137
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 140
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    unless $P5005 goto if21_end71 
.annotate 'line', 141
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback72
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback72:
.annotate 'line', 142
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback73
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback73:
.annotate 'line', 144
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["VM"]
    unless_null $P5017, fallback74
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5021
  fallback74:
.annotate 'line', 145
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback75
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5026
  fallback75:
    $P5027 = $P5022."new"("ModuleLoader.pbc" :named("value"))
.annotate 'line', 146
    nqp_get_sc_object $P5031, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["SVal"]
    unless_null $P5028, fallback76
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5032
  fallback76:
    $P5033 = $P5028."new"("ModuleLoader.class" :named("value"))
    $P5034 = $P5017."new"($P5027 :named("parrot"), $P5033 :named("jvm"))
    $P5035 = $P5012."new"($P5034, "loadbytecode" :named("op"))
.annotate 'line', 148
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback77
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5040
  fallback77:
.annotate 'line', 150
    nqp_get_sc_object $P5044, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback78
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5041, $P5045
  fallback78:
.annotate 'line', 152
    nqp_get_sc_object $P5049, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["SVal"]
    unless_null $P5046, fallback79
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5046, $P5050
  fallback79:
    $P5051 = $P5046."new"("ModuleLoader" :named("value"))
    $P5052 = $P5041."new"($P5051, "getcurhllsym" :named("op"))
.annotate 'line', 154
    nqp_get_sc_object $P5056, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback80
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5053, $P5057
  fallback80:
    $P5058 = $P5053."new"(_lex_param_1 :named("value"))
    $P5059 = $P5036."new"($P5052, $P5058, "callmethod" :named("op"), "load_module" :named("name"))
    $P5060 = $P5007."new"($P5035, $P5059)
    $P5061 = $P5006."add_load_dependency_task"($P5060 :named("deserialize_past"))
  if21_end71:
    getattribute $P5063, $P101, "lex_pad"
    find_lex $P5062, "RETURN"
    $P5064 = $P5062($P5063)
    goto lexotic_69
  lexotic_68:
    .get_results ($P5064)
  lexotic_69:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_8_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 161
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_376_1359718901.265' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 162
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next81:
    unless $P5006, for_done83
    shift $P5008, $P5006
  for_redo82:
    .const 'Sub' $P5007 = 'cuid_376_1359718901.265' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next81
  for_done83:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1359718901.265") :anon :lex :outer("cuid_8_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 163
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 164
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 170
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_377_1359718901.265' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    repr_clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 172
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next84:
    unless $P5008, for_done86
    shift $P5010, $P5008
  for_redo85:
    .const 'Sub' $P5009 = 'cuid_377_1359718901.265' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next84
  for_done86:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1359718901.265") :anon :lex :outer("cuid_9_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 176
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 186
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 188
    _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 189
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback87
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5003
  fallback87:
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback88
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5008
  fallback88:
    $P5009 = $P5004."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5002."push"($P5009)
.annotate 'line', 192
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback89
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5014
  fallback89:
.annotate 'line', 195
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["SVal"]
    unless_null $P5015, fallback90
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5019
  fallback90:
    $P5020 = $P5015."new"(_lex_param_2 :named("value"))
.annotate 'line', 196
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback91
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback91:
    $P5026 = $P5021."new"(_lex_param_3 :named("value"))
    $P5027 = $P5010."new"(_lex_param_1, $P5020, $P5026, "setstaticlex" :named("op"))
    set $P101, $P5027
.annotate 'line', 198
    nqp_decontainerize $P5028, _lex_param_0
    $P5029 = $P5028."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 203
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 204
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback92
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback92:
.annotate 'line', 206
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback93
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback93:
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback94
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback94:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 207
    nqp_get_sc_object $P5022, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback95
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5023
  fallback95:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 208
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback96
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5029
  fallback96:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 210
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 215
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("code_type_name") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5098 = 'cuid_12_1359718901.265' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_13_1359718901.265' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_14_1359718901.265' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_381_1359718901.265' 
    capture_lex $P5098 
    if haz_param_1, default174
    box $P5097, "NQPRoutine"
    set _lex_param_4, $P5097
  default174:
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    .lex "$code_type_name", _lex_param_4 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_97
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5026, 'ExceptionHandler'
    set_label $P5026, catch_handler_25106
    $P5026.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5026
.annotate 'line', 219
.annotate 'line', 220
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    push $P5009, _lex_param_4
    $P5010 = $P5008."find_sym"($P5009)
    set $P101, $P5010
.annotate 'line', 221
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback99
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback100
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5016
  fallback100:
    unless_null $P5013, vivi_22101
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_22101:
    set $P5012, $P5013
  fallback99:
    get_how $P5011, $P5012
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback102
    nqp_get_sc_object $P5021, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback103
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5022
  fallback103:
    unless_null $P5019, vivi_23104
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_23104:
    set $P5018, $P5019
  fallback102:
    $P5024 = $P5011."name"($P5018)
    set $S5001, $P5024
    set $S5002, _lex_param_4
    isne $I5001, $S5001, $S5002
    box $P5025, $I5001
    set $P102, $P5025
    set $P5027, $P102
    pop_eh 
    goto skip_handler_24105
  catch_handler_25106:
    .get_results ($P5026) 
    set $I10001, 1
    set $P5026["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5026
    pop_upto_eh $P5026
    pop_eh 
    set $P5027, $P10001
    goto skip_handler_24105
  skip_handler_24105:
    .const 'Sub' $P5029 = 'cuid_12_1359718901.265' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    set $P103, $P5028
.annotate 'line', 264
    nqp_get_sc_object $P5033, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Stmts"]
    unless_null $P5030, fallback135
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5030, $P5034
  fallback135:
    $P5035 = $P5030."new"()
    set $P104, $P5035
    set $P5036, _lex_param_1["compile_time_dummy"]
    unless_null $P5036, fallback138
    nqp_get_sc_object $P5037, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5037
  fallback138:
    defined $I5002, $P5036
    unless $I5002 goto if29_else136 
.annotate 'line', 267
    set $P5038, _lex_param_1["compile_time_dummy"]
    unless_null $P5038, fallback139
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5039
  fallback139:
    set $P105, $P5038
    goto if29_end137
  if29_else136:
.annotate 'line', 270
    nqp_fresh_stub $P5040, $P103
    set $P105, $P5040
    set $S5003, _lex_param_2
    assign $P105, $S5003
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 277
    nqp_decontainerize $P5041, _lex_param_0
    $P5042 = $P5041."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5042
    nqp_decontainerize $P5043, _lex_param_0
    nqp_get_sc_object $P5044, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5045, $P5043, $P5044, "%!code_stub_sc_idx"
.annotate 'line', 278
    $P5046 = _lex_param_1."cuid"()
    set $S5004, $P5046
    set $P5045[$S5004], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5058, $P102
    unless $P102 goto if30_end141 
.annotate 'line', 284
    nqp_decontainerize $P5047, _lex_param_0
    nqp_get_sc_object $P5048, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5049, $P5047, $P5048, "%!code_object_fixup_list"
.annotate 'line', 285
    $P5050 = _lex_param_1."cuid"()
    set $S5005, $P5050
    set $P5049[$S5005], $P104
.annotate 'line', 286
    nqp_decontainerize $P5051, _lex_param_0
    $P5052 = $P5051."is_precompilation_mode"()
    unless $P5052 goto if31_else142 
    .const 'Sub' $P5054 = 'cuid_13_1359718901.265' 
    capture_lex $P5054
    newclosure $P5053, $P5054
    setprop $P105, "CLONE_CALLBACK", $P5053
    set $P5057, $P105
    goto if31_end143
  if31_else142:
.annotate 'line', 291
    .const 'Sub' $P5056 = 'cuid_14_1359718901.265' 
    capture_lex $P5056
    newclosure $P5055, $P5056
    setprop $P105, "CLONE_CALLBACK", $P5055
    set $P5057, $P105
  if31_end143:
    set $P5058, $P5057
  if30_end141:
  if29_end137:
.annotate 'line', 315
    nqp_decontainerize $P5059, _lex_param_0
    $P5059."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if32_else154 
    .const 'Sub' $P5060 = 'cuid_381_1359718901.265' 
    capture_lex $P5060
    $P5061 = $P5060()
    set $P5096, $P5061
    goto if32_end155
  if32_else154:
.annotate 'line', 355
.annotate 'line', 358
    nqp_get_sc_object $P5065, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["VM"]
    unless_null $P5062, fallback169
    nqp_get_sc_object $P5066, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5062, $P5066
  fallback169:
.annotate 'line', 360
    nqp_get_sc_object $P5070, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["VM"]
    unless_null $P5067, fallback170
    nqp_get_sc_object $P5071, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5067, $P5071
  fallback170:
.annotate 'line', 362
    nqp_get_sc_object $P5075, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback171
    nqp_get_sc_object $P5076, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5072, $P5076
  fallback171:
    nqp_decontainerize $P5077, _lex_param_0
    $P5078 = $P5077."handle"()
    $P5079 = $P5072."new"($P5078 :named("value"))
.annotate 'line', 363
    nqp_get_sc_object $P5083, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["IVal"]
    unless_null $P5080, fallback172
    nqp_get_sc_object $P5084, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5080, $P5084
  fallback172:
    $P5085 = $P5080."new"($P106 :named("value"))
    $P5086 = $P5067."new"($P5079, $P5085, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 365
    nqp_get_sc_object $P5090, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["BVal"]
    unless_null $P5087, fallback173
    nqp_get_sc_object $P5091, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5087, $P5091
  fallback173:
    $P5092 = $P5087."new"(_lex_param_1 :named("value"))
    $P5093 = $P5062."new"($P5086, $P5092, "assign vPP" :named("pirop"))
    $P104."push"($P5093)
    find_lex $P5094, "RETURN"
    $P5095 = $P5094($P105)
    set $P5096, $P5095
  if32_end155:
    goto lexotic_98
  lexotic_97:
    .get_results ($P5096)
  lexotic_98:
    .return ($P5096) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1359718901.265") :anon :lex :outer("cuid_15_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 228
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5029 = 'cuid_380_1359718901.265' 
    capture_lex $P5029 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P106, $P5006
.annotate 'line', 230
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5007."unshift"($P5010)
    compreg $P5011, "nqp"
    set $P101, $P5011
.annotate 'line', 232
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["CompUnit"]
    unless_null $P5012, fallback107
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback107:
    find_lex $P5017, "$past"
    $P5018 = $P5012."new"($P5017, "nqp" :named("hll"))
    $P5019 = $P101."post"($P5018)
    set $P102, $P5019
.annotate 'line', 233
    $P5020 = $P101."pir"($P102)
    set $P103, $P5020
.annotate 'line', 234
    $P5021 = $P101."evalpmc"($P103)
    set $P104, $P5021
    elements $I5001, $P104
    box $P5022, $I5001
    set $P105, $P5022
    box $P5023, 0
    set $P106, $P5023
  while26_test108:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto while26_done112 
  while26_redo110:
    .const 'Sub' $P5024 = 'cuid_380_1359718901.265' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5026, $P5025
    goto while26_test108 
  while26_done112:
.annotate 'line', 260
    $P5028 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1359718901.265") :anon :lex :outer("cuid_12_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 239
    .const 'Sub' $P5015 = 'cuid_379_1359718901.265' 
    capture_lex $P5015 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 240
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback113
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback113:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    unless $I5002 goto if27_end115 
    .const 'Sub' $P5011 = 'cuid_379_1359718901.265' 
    capture_lex $P5011
    $P5012 = $P5011()
  if27_end115:
    find_lex $P5013, "$i"
    set $N5002, $P5013
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5014, $N5001
    store_lex "$i", $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1359718901.265") :anon :lex :outer("cuid_380_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 241
    .const 'Sub' $P5067 = 'cuid_378_1359718901.265' 
    capture_lex $P5067 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 245
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback116
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5009
  fallback116:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5015, $P5012, $P5014, "%!code_object_types"
    find_lex $P5016, "$subid"
    set $S5002, $P5016
    set $P5011, $P5015[$S5002]
    unless_null $P5011, fallback117
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5017
  fallback117:
    find_lex $P5019, "$compiled"
    find_lex $P5020, "$i"
    set $I5001, $P5020
    set $P5018, $P5019[$I5001]
    unless_null $P5018, fallback118
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5021
  fallback118:
    setattribute $P101, $P5011, "$!do", $P5018
    find_lex $P5027, "self"
    nqp_decontainerize $P5026, $P5027
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5029, $P5026, $P5028, "%!code_objects_to_fix_up"
    find_lex $P5030, "$subid"
    set $S5003, $P5030
    set $P5025, $P5029[$S5003]
    unless_null $P5025, fallback119
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5031
  fallback119:
    set $P5022, $P5025
    iter $P5024, $P5025
  for_next122:
    unless $P5024, for_done124
    shift $P5033, $P5024
  for_redo123:
    .const 'Sub' $P5032 = 'cuid_378_1359718901.265' 
    capture_lex $P5032
    $P5022 = $P5032($P5033)
    goto for_next122
  for_done124:
    find_lex $P5035, "$compiled"
    find_lex $P5036, "$i"
    set $I5002, $P5036
    set $P5034, $P5035[$I5002]
    unless_null $P5034, fallback125
    nqp_get_sc_object $P5037, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5034, $P5037
  fallback125:
    find_lex $P5039, "$compiled"
    find_lex $P5040, "$i"
    set $I5003, $P5040
    set $P5038, $P5039[$I5003]
    unless_null $P5038, fallback126
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5041
  fallback126:
    setprop $P5034, "STATIC_CODE_REF", $P5038
.annotate 'line', 251
    find_lex $P5043, "self"
    nqp_decontainerize $P5042, $P5043
    find_lex $P5046, "self"
    nqp_decontainerize $P5045, $P5046
    nqp_get_sc_object $P5047, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5048, $P5045, $P5047, "%!code_stub_sc_idx"
    find_lex $P5049, "$subid"
    set $S5004, $P5049
    set $P5044, $P5048[$S5004]
    unless_null $P5044, fallback127
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5050
  fallback127:
    find_lex $P5052, "$compiled"
    find_lex $P5053, "$i"
    set $I5004, $P5053
    set $P5051, $P5052[$I5004]
    unless_null $P5051, fallback128
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5051, $P5054
  fallback128:
    $P5042."update_root_code_ref"($P5044, $P5051)
    find_lex $P5057, "self"
    nqp_decontainerize $P5056, $P5057
    nqp_get_sc_object $P5058, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5059, $P5056, $P5058, "%!code_object_fixup_list"
    find_lex $P5060, "$subid"
    set $S5005, $P5060
    set $P5055, $P5059[$S5005]
    unless_null $P5055, fallback129
    nqp_get_sc_object $P5061, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5061
  fallback129:
    set $P102, $P5055
    new $P5065, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5065, while28_handlers133
    push_eh $P5065
  while28_test130:
    $P5062 = $P102."list"()
    set $N5001, $P5062
    box $P5066, $N5001
    set $P5064, $P5066
    unless $N5001 goto while28_done134 
  while28_redo132:
.annotate 'line', 255
    $P5063 = $P102."shift"()
    set $P5064, $P5063
    goto while28_test130 
  while28_handlers133:
    .get_results ($P5065)
    pop_upto_eh $P5065
    getattribute $P5065, $P5065, 'type'
    eq $P5065, .CONTROL_LOOP_NEXT, while28_test130
    eq $P5065, .CONTROL_LOOP_REDO, while28_redo132
  while28_done134:
    pop_eh 
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1359718901.265") :anon :lex :outer("cuid_379_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_object_types"
    find_lex $P5006, "$subid"
    set $S5001, $P5006
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback120
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5007
  fallback120:
    find_lex $P5010, "$compiled"
    find_lex $P5011, "$i"
    set $I5001, $P5011
    set $P5009, $P5010[$I5001]
    unless_null $P5009, fallback121
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback121:
    repr_clone $P5008, $P5009
    setattribute _lex_param_0, $P5001, "$!do", $P5008
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1359718901.265") :anon :lex :outer("cuid_15_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 287
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 288
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback144
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5008
  fallback144:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1359718901.265") :anon :lex :outer("cuid_15_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 292
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 294
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5001."add_object"(_lex_param_2)
.annotate 'line', 295
    find_lex $P5003, "$fixups"
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback145
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5008
  fallback145:
.annotate 'line', 297
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["WVal"]
    unless_null $P5009, fallback146
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5013
  fallback146:
    $P5014 = $P5009."new"(_lex_param_2 :named("value"))
.annotate 'line', 298
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback147
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5019
  fallback147:
    find_lex $P5020, "$code_type"
    $P5021 = $P5015."new"($P5020 :named("value"))
.annotate 'line', 299
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback148
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5026
  fallback148:
    $P5027 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 300
    nqp_get_sc_object $P5031, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["VM"]
    unless_null $P5028, fallback149
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5032
  fallback149:
.annotate 'line', 302
    nqp_get_sc_object $P5036, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback150
    nqp_get_sc_object $P5037, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5033, $P5037
  fallback150:
    nqp_get_sc_object $P5041, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["BVal"]
    unless_null $P5038, fallback151
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5042
  fallback151:
    find_lex $P5043, "$past"
    $P5044 = $P5038."new"($P5043 :named("value"))
    $P5045 = $P5033."new"($P5044, "clone" :named("op"))
.annotate 'line', 303
    nqp_get_sc_object $P5049, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback152
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5046, $P5050
  fallback152:
    $P5051 = $P5046."new"(_lex_param_2 :named("value"))
    $P5052 = $P5028."new"($P5045, $P5051, "set_sub_code_object 0PP" :named("pirop"))
    $P5053 = $P5004."new"($P5014, $P5021, $P5027, $P5052, "bindattr" :named("op"))
    $P5003."push"($P5053)
.annotate 'line', 308
    find_lex $P5056, "self"
    nqp_decontainerize $P5055, $P5056
    nqp_get_sc_object $P5057, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5058, $P5055, $P5057, "%!code_objects_to_fix_up"
    find_lex $P5059, "$past"
    $P5060 = $P5059."cuid"()
    set $S5001, $P5060
    set $P5054, $P5058[$S5001]
    unless_null $P5054, fallback153
    nqp_get_sc_object $P5061, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5054, $P5061
  fallback153:
    $P5062 = $P5054."push"(_lex_param_2)
    .return ($P5062) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1359718901.265") :anon :lex :outer("cuid_15_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 319
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    unless $P5007 goto if33_end157 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
  if33_end157:
.annotate 'line', 325
    find_lex $P5011, "self"
    nqp_decontainerize $P5010, $P5011
    $P5012 = $P5010."add_object"($P101)
    set $P102, $P5012
.annotate 'line', 328
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
.annotate 'line', 329
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback158
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5019
  fallback158:
.annotate 'line', 331
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["BVal"]
    unless_null $P5020, fallback159
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5024
  fallback159:
    find_lex $P5025, "$past"
    $P5026 = $P5020."new"($P5025 :named("value"))
.annotate 'line', 332
    nqp_get_sc_object $P5030, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback160
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5031
  fallback160:
    $P5032 = $P5027."new"($P101 :named("value"))
    $P5033 = $P5015."new"($P5026, $P5032, "setcodeobj" :named("op"))
    $P5013."add_fixup_task"($P5033 :named("deserialize_past"))
.annotate 'line', 336
    find_lex $P5034, "$fixups"
    nqp_get_sc_object $P5038, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback161
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5039
  fallback161:
.annotate 'line', 338
    nqp_get_sc_object $P5043, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["WVal"]
    unless_null $P5040, fallback162
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5044
  fallback162:
    $P5045 = $P5040."new"($P101 :named("value"))
.annotate 'line', 339
    nqp_get_sc_object $P5049, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback163
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5046, $P5050
  fallback163:
    find_lex $P5051, "$code_type"
    $P5052 = $P5046."new"($P5051 :named("value"))
.annotate 'line', 340
    nqp_get_sc_object $P5056, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback164
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5053, $P5057
  fallback164:
    $P5058 = $P5053."new"("$!do" :named("value"))
.annotate 'line', 341
    nqp_get_sc_object $P5062, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["BVal"]
    unless_null $P5059, fallback165
    nqp_get_sc_object $P5063, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5059, $P5063
  fallback165:
    find_lex $P5064, "$past"
    $P5065 = $P5059."new"($P5064 :named("value"))
    $P5066 = $P5035."new"($P5045, $P5052, $P5058, $P5065, "bindattr" :named("op"))
    $P5034."push"($P5066)
.annotate 'line', 343
    find_lex $P5067, "$fixups"
    nqp_get_sc_object $P5071, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5070, $P5071, "QAST"
    get_who $P5069, $P5070
    set $P5068, $P5069["Op"]
    unless_null $P5068, fallback166
    nqp_get_sc_object $P5072, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5068, $P5072
  fallback166:
.annotate 'line', 345
    nqp_get_sc_object $P5076, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["BVal"]
    unless_null $P5073, fallback167
    nqp_get_sc_object $P5077, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5073, $P5077
  fallback167:
    find_lex $P5078, "$past"
    $P5079 = $P5073."new"($P5078 :named("value"))
.annotate 'line', 346
    nqp_get_sc_object $P5083, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["WVal"]
    unless_null $P5080, fallback168
    nqp_get_sc_object $P5084, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5080, $P5084
  fallback168:
    $P5085 = $P5080."new"($P101 :named("value"))
    $P5086 = $P5068."new"($P5079, $P5085, "setcodeobj" :named("op"))
    $P5067."push"($P5086)
    find_lex $P5088, "self"
    nqp_decontainerize $P5087, $P5088
    nqp_get_sc_object $P5089, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5090, $P5087, $P5089, "%!code_objects_to_fix_up"
.annotate 'line', 350
    find_lex $P5091, "$past"
    $P5092 = $P5091."cuid"()
    set $S5001, $P5092
    new $P5093, 'ResizablePMCArray'
    push $P5093, $P101
    set $P5090[$S5001], $P5093
    find_lex $P5095, "self"
    nqp_decontainerize $P5094, $P5095
    nqp_get_sc_object $P5096, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5097, $P5094, $P5096, "%!code_object_types"
.annotate 'line', 351
    find_lex $P5098, "$past"
    $P5099 = $P5098."cuid"()
    set $S5002, $P5099
    find_lex $P5100, "$code_type"
    set $P5097[$S5002], $P5100
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 373
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_2, default181
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_2, $P5007
  default181:
    if haz_param_3, default182
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_3, $P5008
  default182:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_175
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    unless $I5001 goto if34_end178 
.annotate 'line', 376
    set $P101["name"], _lex_param_2
  if34_end178:
    defined $I5002, _lex_param_3
    unless $I5002 goto if35_end180 
.annotate 'line', 377
    set $P101["repr"], _lex_param_3
  if35_end180:
.annotate 'line', 378
    $P5003 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5003
.annotate 'line', 379
    nqp_decontainerize $P5004, _lex_param_0
    $P5004."add_object"($P102)
    find_lex $P5005, "RETURN"
    $P5006 = $P5005($P102)
    goto lexotic_176
  lexotic_175:
    .get_results ($P5006)
  lexotic_176:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 390
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 391
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 392
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 397
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 401
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
.annotate 'line', 402
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 403
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 411
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 413
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 416
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 420
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 421
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 424
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 425
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 429
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 430
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 434
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_383_1359718901.265' 
    capture_lex $P5040 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_183
    .lex "RETURN", $P106
.annotate 'line', 436
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback185
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback185:
.annotate 'line', 437
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback186
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback186:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while36_test187:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while36_done191 
  while36_redo189:
    .const 'Sub' $P5022 = 'cuid_383_1359718901.265' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while36_test187 
  while36_done191:
.annotate 'line', 460
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback208
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback209
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5035
  fallback209:
    unless_null $P5032, vivi_41210
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_41210:
    set $P5031, $P5032
  fallback208:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 463
    $P104()
    new $P5037, 'ResizablePMCArray'
    set_hll_global $P5037, "GLOBAL", $P105
.annotate 'line', 468
    $P101."shift"()
    find_lex $P5038, "RETURN"
    $P5039 = $P5038($P101)
    goto lexotic_184
  lexotic_183:
    .get_results ($P5039)
  lexotic_184:
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1359718901.265") :anon :lex :outer("cuid_24_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 442
    .const 'Sub' $P5017 = 'cuid_382_1359718901.265' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 444
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback192
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5010
  fallback192:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next205:
    unless $P5014, for_done207
    shift $P5016, $P5014
  for_redo206:
    .const 'Sub' $P5015 = 'cuid_382_1359718901.265' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next205
  for_done207:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1359718901.265") :anon :lex :outer("cuid_383_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 445
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 446
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback197
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5004
  fallback197:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if38_end196 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if38_end196:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if37_end194 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_40204
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 447
.annotate 'line', 448
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback198
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback198:
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback199
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5013
  fallback199:
.annotate 'line', 450
    nqp_get_sc_object $P5017, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback200
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5018
  fallback200:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 451
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback201
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback201:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback202
    nqp_get_sc_object $P5028, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5028
  fallback202:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_39203
  catch_handler_40204:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_39203
  skip_handler_39203:
    find_lex $P5034, "%seen"
.annotate 'line', 454
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if37_end194:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_25_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 473
    .param pmc _lex_param_0 
    .const 'Sub' $P5050 = 'cuid_384_1359718901.265' 
    capture_lex $P5050 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback213
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback214
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback214:
    unless_null $P5011, vivi_43215
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_43215:
    set $P5010, $P5011
  fallback213:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback216
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5018
  fallback216:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback217
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5019
  fallback217:
    unless $P5008 goto if42_end212 
.annotate 'line', 476
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback218
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback219
    nqp_get_sc_object $P5031, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback219:
    unless_null $P5027, vivi_44220
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_44220:
    set $P5026, $P5027
  fallback218:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback221
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5034
  fallback221:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback222
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5035
  fallback222:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next223:
    unless $P5022, for_done225
    shift $P5037, $P5022
  for_redo224:
    .const 'Sub' $P5036 = 'cuid_384_1359718901.265' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next223
  for_done225:
  if42_end212:
.annotate 'line', 481
    nqp_get_sc_object $P5041, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback226
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5042
  fallback226:
.annotate 'line', 483
    nqp_get_sc_object $P5046, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback227
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5043, $P5047
  fallback227:
    $P5048 = $P5043."new"("null" :named("op"))
    $P5049 = $P5038."new"($P101 :named("loadlibs"), $P5048 :named("jvm"))
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1359718901.265") :anon :lex :outer("cuid_25_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 477
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 478
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 487
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 488
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["VM"]
    unless_null $P5002, fallback228
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback228:
.annotate 'line', 489
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback229
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback229:
.annotate 'line', 490
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback230
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback230:
    $P5017 = $P5012."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 491
    nqp_get_sc_object $P5021, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["VM"]
    unless_null $P5018, fallback231
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5022
  fallback231:
    $P5023 = $P5018."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 492
    nqp_get_sc_object $P5027, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback232
    nqp_get_sc_object $P5028, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5028
  fallback232:
.annotate 'line', 494
    nqp_get_sc_object $P5032, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback233
    nqp_get_sc_object $P5033, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5029, $P5033
  fallback233:
    $P5034 = $P5029."new"("getinterp P" :named("pirop"))
.annotate 'line', 495
    nqp_get_sc_object $P5038, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["VM"]
    unless_null $P5035, fallback234
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5039
  fallback234:
    nqp_get_sc_object $P5043, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["SVal"]
    unless_null $P5040, fallback235
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5044
  fallback235:
    $P5045 = $P5040."new"("LexPad" :named("value"))
    $P5046 = $P5035."new"($P5045, "get_class Ps" :named("pirop"))
.annotate 'line', 496
    nqp_get_sc_object $P5050, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback236
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5047, $P5051
  fallback236:
    nqp_get_sc_object $P5055, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["SVal"]
    unless_null $P5052, fallback237
    nqp_get_sc_object $P5056, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5052, $P5056
  fallback237:
    $P5057 = $P5052."new"("NQPLexPad" :named("value"))
    $P5058 = $P5047."new"($P5057, "get_class Ps" :named("pirop"))
    $P5059 = $P5024."new"($P5034, $P5046, $P5058, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5060 = $P5007."new"($P5017, $P5023, $P5059)
.annotate 'line', 498
    nqp_get_sc_object $P5064, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback238
    nqp_get_sc_object $P5065, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5061, $P5065
  fallback238:
    $P5066 = $P5061."new"("null" :named("op"))
    $P5067 = $P5002."new"($P5060 :named("parrot"), $P5066 :named("jvm"))
    $P5068 = $P5001."add_load_dependency_task"($P5067 :named("deserialize_past"))
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 504
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 505
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 510
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 511
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 516
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_385_1359718901.265' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_239
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while45_test241:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while45_done245 
  while45_redo243:
    .const 'Sub' $P5006 = 'cuid_385_1359718901.265' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while45_test241 
  while45_done245:
    box $P5010, 0
    goto lexotic_240
  lexotic_239:
    .get_results ($P5010)
  lexotic_240:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1359718901.265") :anon :lex :outer("cuid_29_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 518
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 520
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback246
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5010
  fallback246:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if46_end248 
.annotate 'line', 521
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback249
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5015
  fallback249:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if46_end248:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 529
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5005, 'ExceptionHandler'
    set_label $P5005, catch_handler_48251
    $P5005.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5005
.annotate 'line', 531
.annotate 'line', 532
    nqp_decontainerize $P5003, _lex_param_0
    $P5003."find_sym"(_lex_param_2)
    box $P5004, 1
    set $P101, $P5004
    set $P5006, $P101
    pop_eh 
    goto skip_handler_47250
  catch_handler_48251:
    .get_results ($P5005) 
    set $I10001, 1
    set $P5005["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5005
    pop_upto_eh $P5005
    pop_eh 
    set $P5006, $P10001
    goto skip_handler_47250
  skip_handler_47250:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1359718901.265") :anon :lex :outer("cuid_374_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 541
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_387_1359718901.265' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_389_1359718901.265' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_390_1359718901.265' 
    capture_lex $P5018 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_252
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    if $N5001 goto unless49_end255 
.annotate 'line', 543
    box $P5002, "Cannot look up empty name"
    die $P5002
  unless49_end255:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    unless $I5001 goto if50_end257 
    .const 'Sub' $P5003 = 'cuid_387_1359718901.265' 
    capture_lex $P5003
    $P5004 = $P5003()
  if50_end257:
    find_dynamic_lex $P5005, "$*GLOBALish"
    unless_null $P5005, fallback270
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$GLOBALish"]
    unless_null $P5006, fallback271
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5009
  fallback271:
    unless_null $P5006, vivi_54272
    die "Contextual $*GLOBALish not found"
    box $P5010, "Contextual $*GLOBALish not found"
    set $P5006, $P5010
  vivi_54272:
    set $P5005, $P5006
  fallback270:
    set $P101, $P5005
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    unless $I5002 goto if55_end274 
    .const 'Sub' $P5011 = 'cuid_389_1359718901.265' 
    capture_lex $P5011
    $P5012 = $P5011()
  if55_end274:
    set $P5013, _lex_param_1
    iter $P5015, _lex_param_1
  for_next290:
    unless $P5015, for_done292
    shift $P5017, $P5015
  for_redo291:
    .const 'Sub' $P5016 = 'cuid_390_1359718901.265' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next290
  for_done292:
    goto lexotic_253
  lexotic_252:
    .get_results ($P101)
  lexotic_253:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1359718901.265") :anon :lex :outer("cuid_31_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 547
    .const 'Sub' $P5015 = 'cuid_386_1359718901.265' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback258
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback258:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while51_test259:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while51_done263 
  while51_redo261:
    .const 'Sub' $P5011 = 'cuid_386_1359718901.265' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while51_test259 
  while51_done263:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1359718901.265") :anon :lex :outer("cuid_387_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 550
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 552
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback264
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5010
  fallback264:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if52_end266 
.annotate 'line', 553
    exists $I5002, $P101["value"]
    unless $I5002 goto if53_else267 
.annotate 'line', 554
    set $P5014, $P101["value"]
    unless_null $P5014, fallback269
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5015
  fallback269:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if53_end268
  if53_else267:
.annotate 'line', 557
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if53_end268:
    set $P5020, $P5019
  if52_end266:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1359718901.265") :anon :lex :outer("cuid_31_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 568
    .const 'Sub' $P5015 = 'cuid_388_1359718901.265' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback275
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback275:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while56_test276:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while56_done280 
  while56_redo278:
    .const 'Sub' $P5011 = 'cuid_388_1359718901.265' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while56_test276 
  while56_done280:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1359718901.265") :anon :lex :outer("cuid_389_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 571
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 573
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback281
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5010
  fallback281:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if57_end283 
.annotate 'line', 574
    exists $I5002, $P101["value"]
    unless $I5002 goto if58_else284 
.annotate 'line', 575
    set $P5013, $P101["value"]
    unless_null $P5013, fallback286
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5014
  fallback286:
    store_lex "$result", $P5013
.annotate 'line', 577
    find_lex $P5015, "@name"
    $P5015."shift"()
    box $P5016, 0
    store_lex "$i", $P5016
    set $P5019, $P5016
    goto if58_end285
  if58_else284:
.annotate 'line', 580
    find_lex $P5017, "$first"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if58_end285:
    set $P5020, $P5019
  if57_end283:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1359718901.265") :anon :lex :outer("cuid_31_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 588
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if59_else287 
.annotate 'line', 589
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback289
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback289:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if59_end288
  if59_else287:
.annotate 'line', 592
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if59_end288:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 603
    .const 'Sub' $P5259 = 'cuid_32_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_33_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_34_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_35_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_36_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_37_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_38_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_40_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_42_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_43_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_44_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_46_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_47_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_48_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_49_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_50_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_51_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_52_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_53_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_54_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_55_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_56_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_57_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_58_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_59_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_60_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_61_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_62_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_64_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_65_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_66_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_67_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_68_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_69_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_70_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_71_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_72_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_73_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_74_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_75_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_76_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_77_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_78_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_79_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_80_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_81_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_82_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_83_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_84_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_85_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_86_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_87_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_90_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_91_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_92_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_93_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_94_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_95_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_96_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_97_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_98_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_99_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_100_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_101_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_102_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_103_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_104_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_105_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_106_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_107_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_108_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_109_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_110_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_111_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_112_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_113_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_114_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_115_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_116_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_117_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_118_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_119_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_120_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_121_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_122_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_123_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_124_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_125_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_126_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_128_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_129_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_130_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_131_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_132_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_133_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_134_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_135_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_136_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_137_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_138_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_139_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_140_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_141_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_142_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_143_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_144_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_145_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_146_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_147_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_148_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_149_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_150_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_151_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_152_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_153_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_154_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_155_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_156_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_157_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_158_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_159_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_160_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_161_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_162_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_163_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_164_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_165_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_166_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_167_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_168_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_169_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_170_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_171_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_172_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_173_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_174_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_175_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_176_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_177_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_178_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_179_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_180_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_181_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_182_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_183_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_184_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_185_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_186_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_187_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_188_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_189_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_190_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_191_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_192_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_193_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_194_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_195_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_196_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_197_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_198_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_199_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_200_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_201_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_202_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_203_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_204_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_205_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_206_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_207_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_208_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_209_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_210_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_211_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_212_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_213_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_214_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_215_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_216_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_217_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_218_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_220_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_222_1359718901.265' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_224_1359718901.265' 
    capture_lex $P5259 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1269
.annotate 'line', 1270
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback293
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback293:
    $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1271
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "NQP"
    get_who $P5007, $P5008
    set $P5006, $P5007["Grammar"]
    unless_null $P5006, fallback294
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback294:
    $P5006."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1272
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "NQP"
    get_who $P5012, $P5013
    set $P5011, $P5012["Grammar"]
    unless_null $P5011, fallback295
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback295:
    $P5011."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1273
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Grammar"]
    unless_null $P5016, fallback296
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5020
  fallback296:
    $P5016."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1274
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "NQP"
    get_who $P5022, $P5023
    set $P5021, $P5022["Grammar"]
    unless_null $P5021, fallback297
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback297:
    $P5021."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1275
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Grammar"]
    unless_null $P5026, fallback298
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5030
  fallback298:
    $P5026."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1276
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback299
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5031, $P5035
  fallback299:
    $P5031."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1277
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5038, $P5039, "NQP"
    get_who $P5037, $P5038
    set $P5036, $P5037["Grammar"]
    unless_null $P5036, fallback300
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5040
  fallback300:
    $P5036."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1278
    nqp_get_sc_object $P5044, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5043, $P5044, "NQP"
    get_who $P5042, $P5043
    set $P5041, $P5042["Grammar"]
    unless_null $P5041, fallback301
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5041, $P5045
  fallback301:
    $P5041."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1279
    nqp_get_sc_object $P5049, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5048, $P5049, "NQP"
    get_who $P5047, $P5048
    set $P5046, $P5047["Grammar"]
    unless_null $P5046, fallback302
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5046, $P5050
  fallback302:
    $P5046."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1280
    nqp_get_sc_object $P5054, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback303
    nqp_get_sc_object $P5055, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5051, $P5055
  fallback303:
    $P5051."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1281
    nqp_get_sc_object $P5059, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5058, $P5059, "NQP"
    get_who $P5057, $P5058
    set $P5056, $P5057["Grammar"]
    unless_null $P5056, fallback304
    nqp_get_sc_object $P5060, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5056, $P5060
  fallback304:
    $P5056."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1282
    nqp_get_sc_object $P5064, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback305
    nqp_get_sc_object $P5065, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5061, $P5065
  fallback305:
    $P5061."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1283
    nqp_get_sc_object $P5069, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5068, $P5069, "NQP"
    get_who $P5067, $P5068
    set $P5066, $P5067["Grammar"]
    unless_null $P5066, fallback306
    nqp_get_sc_object $P5070, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5066, $P5070
  fallback306:
    $P5066."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1284
    nqp_get_sc_object $P5074, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5073, $P5074, "NQP"
    get_who $P5072, $P5073
    set $P5071, $P5072["Grammar"]
    unless_null $P5071, fallback307
    nqp_get_sc_object $P5075, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5071, $P5075
  fallback307:
    $P5071."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 603
    .const 'Sub' $P5076 = 'cuid_32_1359718901.265' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_33_1359718901.265' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_34_1359718901.265' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_35_1359718901.265' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_36_1359718901.265' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_37_1359718901.265' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_38_1359718901.265' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_40_1359718901.265' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_42_1359718901.265' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_43_1359718901.265' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_44_1359718901.265' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_46_1359718901.265' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_47_1359718901.265' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_48_1359718901.265' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_49_1359718901.265' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_50_1359718901.265' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_51_1359718901.265' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_52_1359718901.265' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_53_1359718901.265' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_54_1359718901.265' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_55_1359718901.265' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_56_1359718901.265' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_57_1359718901.265' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_58_1359718901.265' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_59_1359718901.265' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_60_1359718901.265' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_61_1359718901.265' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_62_1359718901.265' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_64_1359718901.265' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_65_1359718901.265' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_66_1359718901.265' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_67_1359718901.265' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_68_1359718901.265' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_69_1359718901.265' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_70_1359718901.265' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_71_1359718901.265' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_72_1359718901.265' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_73_1359718901.265' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_74_1359718901.265' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_75_1359718901.265' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_76_1359718901.265' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_77_1359718901.265' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_78_1359718901.265' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_79_1359718901.265' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_80_1359718901.265' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_81_1359718901.265' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_82_1359718901.265' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_83_1359718901.265' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_84_1359718901.265' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_85_1359718901.265' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_86_1359718901.265' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_87_1359718901.265' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_90_1359718901.265' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_91_1359718901.265' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_92_1359718901.265' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_93_1359718901.265' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_94_1359718901.265' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_95_1359718901.265' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_96_1359718901.265' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_97_1359718901.265' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_98_1359718901.265' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_99_1359718901.265' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_100_1359718901.265' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_101_1359718901.265' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_102_1359718901.265' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_103_1359718901.265' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_104_1359718901.265' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_105_1359718901.265' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_106_1359718901.265' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_107_1359718901.265' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_108_1359718901.265' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_109_1359718901.265' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_110_1359718901.265' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_111_1359718901.265' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_112_1359718901.265' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_113_1359718901.265' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_114_1359718901.265' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_115_1359718901.265' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_116_1359718901.265' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_117_1359718901.265' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_118_1359718901.265' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_119_1359718901.265' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_120_1359718901.265' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_121_1359718901.265' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_122_1359718901.265' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_123_1359718901.265' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_124_1359718901.265' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_125_1359718901.265' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_126_1359718901.265' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_128_1359718901.265' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_129_1359718901.265' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_130_1359718901.265' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_131_1359718901.265' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_132_1359718901.265' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_133_1359718901.265' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_134_1359718901.265' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_135_1359718901.265' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_136_1359718901.265' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_137_1359718901.265' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_138_1359718901.265' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_139_1359718901.265' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_140_1359718901.265' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_141_1359718901.265' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_142_1359718901.265' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_143_1359718901.265' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_144_1359718901.265' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_145_1359718901.265' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_146_1359718901.265' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_147_1359718901.265' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_148_1359718901.265' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_149_1359718901.265' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_150_1359718901.265' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_151_1359718901.265' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_152_1359718901.265' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_153_1359718901.265' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_154_1359718901.265' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_155_1359718901.265' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_156_1359718901.265' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_157_1359718901.265' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_158_1359718901.265' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_159_1359718901.265' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_160_1359718901.265' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_161_1359718901.265' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_162_1359718901.265' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_163_1359718901.265' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_164_1359718901.265' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_165_1359718901.265' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_166_1359718901.265' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_167_1359718901.265' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_168_1359718901.265' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_169_1359718901.265' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_170_1359718901.265' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_171_1359718901.265' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_172_1359718901.265' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_173_1359718901.265' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_174_1359718901.265' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_175_1359718901.265' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_176_1359718901.265' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_177_1359718901.265' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_178_1359718901.265' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_179_1359718901.265' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_180_1359718901.265' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_181_1359718901.265' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_182_1359718901.265' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_183_1359718901.265' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_184_1359718901.265' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_185_1359718901.265' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_186_1359718901.265' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_187_1359718901.265' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_188_1359718901.265' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_189_1359718901.265' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_190_1359718901.265' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_191_1359718901.265' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_192_1359718901.265' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_193_1359718901.265' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_194_1359718901.265' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_195_1359718901.265' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_196_1359718901.265' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_197_1359718901.265' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_198_1359718901.265' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_199_1359718901.265' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_200_1359718901.265' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_201_1359718901.265' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_202_1359718901.265' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_203_1359718901.265' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_204_1359718901.265' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_205_1359718901.265' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_206_1359718901.265' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_207_1359718901.265' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_208_1359718901.265' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_209_1359718901.265' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_210_1359718901.265' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_211_1359718901.265' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_212_1359718901.265' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_213_1359718901.265' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_214_1359718901.265' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_215_1359718901.265' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_216_1359718901.265' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_217_1359718901.265' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_218_1359718901.265' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_220_1359718901.265' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_222_1359718901.265' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_224_1359718901.265' 
    capture_lex $P5258
    .return ($P5258) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_32_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 604
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback311
    nqp_get_sc_object $P5022, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback312
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback312:
    unless_null $P5020, vivi_61313
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_61313:
    set $P101, $P5020
  fallback311:
    nqp_get_sc_object $P5030, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback314
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5031
  fallback314:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback315
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback316
    nqp_get_sc_object $P5036, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback316:
    unless_null $P5032, vivi_62317
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_62317:
    set $P101, $P5032
  fallback315:
    nqp_get_sc_object $P5042, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback318
    nqp_get_sc_object $P5043, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5043
  fallback318:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback319
    nqp_get_sc_object $P5046, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback320
    nqp_get_sc_object $P5048, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback320:
    unless_null $P5044, vivi_63321
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_63321:
    set $P101, $P5044
  fallback319:
    nqp_get_sc_object $P5054, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback322
    nqp_get_sc_object $P5055, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5051, $P5055
  fallback322:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback323
    nqp_get_sc_object $P5058, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback324
    nqp_get_sc_object $P5060, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback324:
    unless_null $P5056, vivi_64325
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_64325:
    set $P101, $P5056
  fallback323:
    nqp_get_sc_object $P5066, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback326
    nqp_get_sc_object $P5067, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5063, $P5067
  fallback326:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback330
    nqp_get_sc_object $P5077, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback331
    nqp_get_sc_object $P5079, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback331:
    unless_null $P5075, vivi_66332
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_66332:
    set $P102, $P5075
  fallback330:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback333
    nqp_get_sc_object $P5085, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback334
    nqp_get_sc_object $P5087, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback334:
    unless_null $P5083, vivi_67335
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_67335:
    set $P102, $P5083
  fallback333:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
.annotate 'line', 623
    nqp_decontainerize $P5092, _lex_param_0
    $P5093 = $P5092."target"()
    set $S5003, $P5093
    nqp_sha1 $S5002, $S5003
    find_dynamic_lex $P5096, "%*COMPILING"
    unless_null $P5096, fallback338
    nqp_get_sc_object $P5099, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["%COMPILING"]
    unless_null $P5097, fallback339
    nqp_get_sc_object $P5101, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5100, $P5101
    new $P5102, 'Hash'
    set $P5100["%COMPILING"], $P5102
    set $P5097, $P5102
  fallback339:
    unless_null $P5097, vivi_69340
    die "Contextual %*COMPILING not found"
    box $P5103, "Contextual %*COMPILING not found"
    set $P5097, $P5103
  vivi_69340:
    set $P5096, $P5097
  fallback338:
    set $P5095, $P5096["%?OPTIONS"]
    unless_null $P5095, fallback341
    nqp_get_sc_object $P5104, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5095, $P5104
  fallback341:
    set $P5094, $P5095["stable-sc"]
    unless_null $P5094, fallback342
    nqp_get_sc_object $P5105, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5094, $P5105
  fallback342:
    unless $P5094 goto if68_else336 
    set $S5006, ""
    goto if68_end337
  if68_else336:
    time $N5001
    set $S5005, $N5001
    concat $S5004, "-", $S5005
    set $S5006, $S5004
  if68_end337:
    concat $S5001, $S5002, $S5006
    box $P5106, $S5001
    set $P104, $P5106
    isnull $I5001, $P103
    unless $I5001 goto if70_else343 
.annotate 'line', 626
    nqp_get_sc_object $P5110, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback345
    nqp_get_sc_object $P5111, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5107, $P5111
  fallback345:
    $P5112 = $P5107."new"($P104 :named("handle"))
    set $P5119, $P5112
    goto if70_end344
  if70_else343:
.annotate 'line', 627
    nqp_get_sc_object $P5116, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5115, $P5116, "NQP"
    get_who $P5114, $P5115
    set $P5113, $P5114["World"]
    unless_null $P5113, fallback346
    nqp_get_sc_object $P5117, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5113, $P5117
  fallback346:
    $P5118 = $P5113."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5119, $P5118
  if70_end344:
    set $P105, $P5119
    box $P5120, ""
    set $P106, $P5120
    box $P5121, ""
    set $P107, $P5121
    box $P5122, ""
    set $P108, $P5122
    box $P5123, 0
    set $P109, $P5123
    box $P5124, 0
    set $P110, $P5124
    box $P5125, 0
    set $P111, $P5125
.annotate 'line', 636
    nqp_decontainerize $P5133, _lex_param_0
    $P5134 = $P5133."comp_unit"()
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_33_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 641
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx72_tgt
    .local int rx72_pos
    .local int rx72_off
    .local int rx72_eos
    .local int rx72_rep
    .local pmc rx72_cur
    .local pmc rx72_curclass
    .local pmc rx72_bstack
    .local pmc rx72_cstack
    (rx72_cur, rx72_tgt, rx72_pos, rx72_curclass, rx72_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx72_cur
    length rx72_eos, rx72_tgt
    eq $I19, 1, rx72_restart352
    gt rx72_pos, rx72_eos, rx72_fail353
    repr_get_attr_int $I11, self, rx72_curclass, "$!from"
    ne $I11, -1, rxscan73_done359
    goto rxscan73_scan358
  rxscan73_loop357:
    inc rx72_pos
    gt rx72_pos, rx72_eos, rx72_fail353
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!from", rx72_pos
  rxscan73_scan358:
    nqp_rxmark rx72_bstack, rxscan73_loop357, rx72_pos, 0
  rxscan73_done359:
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."ident"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail353
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    nqp_rxmark rx72_bstack, rxquantr75_done362, rx72_pos, 0
  rxquantr75_loop361:
  alt76_0364:
    nqp_rxmark rx72_bstack, alt76_1365, rx72_pos, 0
    add $I11, rx72_pos, 1
    gt $I11, rx72_eos, rx72_fail353
    substr $S10, rx72_tgt, rx72_pos, 1
    ne $S10, ucs4:"-", rx72_fail353
    add rx72_pos, 1
    goto alt76_end363
  alt76_1365:
    ge rx72_pos, rx72_eos, rx72_fail353
    substr $S11, rx72_tgt, rx72_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx72_fail353
    inc rx72_pos
  alt76_end363:
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."ident"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail353
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    nqp_rxpeek $I19, rx72_bstack, rxquantr75_done362
    inc $I19
    inc $I19
    set rx72_rep, rx72_bstack[$I19]
    nqp_rxcommit rx72_bstack, rxquantr75_done362
    inc rx72_rep
    nqp_rxmark rx72_bstack, rxquantr75_done362, rx72_pos, rx72_rep
    goto rxquantr75_loop361
  rxquantr75_done362:
    rx72_cur."!cursor_pass"(rx72_pos, "identifier", 'backtrack'=>1)
    .return (rx72_cur)
  rx72_restart352:
    repr_get_attr_obj rx72_cstack, rx72_cur, rx72_curclass, "$!cstack"
  rx72_fail353:
    unless rx72_bstack, rx72_done351
    pop $I19, rx72_bstack
    if_null rx72_cstack, rx72_cstack_done356
    unless rx72_cstack, rx72_cstack_done356
    dec $I19
    set $P11, rx72_cstack[$I19]
  rx72_cstack_done356:
    pop rx72_rep, rx72_bstack
    pop rx72_pos, rx72_bstack
    pop $I19, rx72_bstack
    lt rx72_pos, -1, rx72_done351
    lt rx72_pos, 0, rx72_fail353
    eq $I19, 0, rx72_fail353
    nqp_islist $I20, rx72_cstack
    unless $I20, rx72_jump354
    elements $I18, rx72_bstack
    le $I18, 0, rx72_cut355
    dec $I18
    set $I18, rx72_bstack[$I18]
  rx72_cut355:
    assign rx72_cstack, $I18
  rx72_jump354:
    jump $I19
  rx72_done351:
    rx72_cur."!cursor_fail"()
    .return (rx72_cur) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_34_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 643
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    (rx78_cur, rx78_tgt, rx78_pos, rx78_curclass, rx78_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart369
    gt rx78_pos, rx78_eos, rx78_fail370
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done376
    goto rxscan79_scan375
  rxscan79_loop374:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail370
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan375:
    nqp_rxmark rx78_bstack, rxscan79_loop374, rx78_pos, 0
  rxscan79_done376:
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail370
    nqp_rxmark rx78_bstack, rxsubrule80_pass377, -1, 0
  rxsubrule80_pass377:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    nqp_rxmark rx78_bstack, rxquantr81_done379, rx78_pos, 0
  rxquantr81_loop378:
    add $I11, rx78_pos, 2
    gt $I11, rx78_eos, rx78_fail370
    substr $S10, rx78_tgt, rx78_pos, 2
    ne $S10, ucs4:"::", rx78_fail370
    add rx78_pos, 2
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail370
    nqp_rxmark rx78_bstack, rxsubrule82_pass380, -1, 0
  rxsubrule82_pass380:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    nqp_rxpeek $I19, rx78_bstack, rxquantr81_done379
    inc $I19
    inc $I19
    set rx78_rep, rx78_bstack[$I19]
    nqp_rxcommit rx78_bstack, rxquantr81_done379
    inc rx78_rep
    nqp_rxmark rx78_bstack, rxquantr81_done379, rx78_pos, rx78_rep
    goto rxquantr81_loop378
  rxquantr81_done379:
    rx78_cur."!cursor_pass"(rx78_pos, "name", 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart369:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail370:
    unless rx78_bstack, rx78_done368
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done373
    unless rx78_cstack, rx78_cstack_done373
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done373:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done368
    lt rx78_pos, 0, rx78_fail370
    eq $I19, 0, rx78_fail370
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump371
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut372
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut372:
    assign rx78_cstack, $I18
  rx78_jump371:
    jump $I19
  rx78_done368:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_35_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 645
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx83_tgt
    .local int rx83_pos
    .local int rx83_off
    .local int rx83_eos
    .local int rx83_rep
    .local pmc rx83_cur
    .local pmc rx83_curclass
    .local pmc rx83_bstack
    .local pmc rx83_cstack
    (rx83_cur, rx83_tgt, rx83_pos, rx83_curclass, rx83_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx83_cur
    length rx83_eos, rx83_tgt
    eq $I19, 1, rx83_restart383
    gt rx83_pos, rx83_eos, rx83_fail384
    repr_get_attr_int $I11, self, rx83_curclass, "$!from"
    ne $I11, -1, rxscan84_done390
    goto rxscan84_scan389
  rxscan84_loop388:
    inc rx83_pos
    gt rx83_pos, rx83_eos, rx83_fail384
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!from", rx83_pos
  rxscan84_scan389:
    nqp_rxmark rx83_bstack, rxscan84_loop388, rx83_pos, 0
  rxscan84_done390:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
    nqp_rxmark rx83_bstack, rxsubrule85_pass391, -1, 0
  rxsubrule85_pass391:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    nqp_rxmark rx83_bstack, rxquantr86_done393, rx83_pos, 0
  rxquantr86_loop392:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
    goto rxsubrule87_pass394
  rxsubrule87_back395:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
  rxsubrule87_pass394:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule87_back395
    push rx83_bstack, $I11
    push rx83_bstack, 0
    push rx83_bstack, rx83_pos
    elements $I11, rx83_cstack
    push rx83_bstack, $I11
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    nqp_rxpeek $I19, rx83_bstack, rxquantr86_done393
    inc $I19
    inc $I19
    set rx83_rep, rx83_bstack[$I19]
    nqp_rxcommit rx83_bstack, rxquantr86_done393
    inc rx83_rep
  rxquantr86_done393:
    rx83_cur."!cursor_pass"(rx83_pos, "deflongname", 'backtrack'=>1)
    .return (rx83_cur)
  rx83_restart383:
    repr_get_attr_obj rx83_cstack, rx83_cur, rx83_curclass, "$!cstack"
  rx83_fail384:
    unless rx83_bstack, rx83_done382
    pop $I19, rx83_bstack
    if_null rx83_cstack, rx83_cstack_done387
    unless rx83_cstack, rx83_cstack_done387
    dec $I19
    set $P11, rx83_cstack[$I19]
  rx83_cstack_done387:
    pop rx83_rep, rx83_bstack
    pop rx83_pos, rx83_bstack
    pop $I19, rx83_bstack
    lt rx83_pos, -1, rx83_done382
    lt rx83_pos, 0, rx83_fail384
    eq $I19, 0, rx83_fail384
    nqp_islist $I20, rx83_cstack
    unless $I20, rx83_jump385
    elements $I18, rx83_bstack
    le $I18, 0, rx83_cut386
    dec $I18
    set $I18, rx83_bstack[$I18]
  rx83_cut386:
    assign rx83_cstack, $I18
  rx83_jump385:
    jump $I19
  rx83_done382:
    rx83_cur."!cursor_fail"()
    .return (rx83_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_36_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 649
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx88_tgt
    .local int rx88_pos
    .local int rx88_off
    .local int rx88_eos
    .local int rx88_rep
    .local pmc rx88_cur
    .local pmc rx88_curclass
    .local pmc rx88_bstack
    .local pmc rx88_cstack
    (rx88_cur, rx88_tgt, rx88_pos, rx88_curclass, rx88_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx88_cur
    length rx88_eos, rx88_tgt
    eq $I19, 1, rx88_restart398
    gt rx88_pos, rx88_eos, rx88_fail399
    repr_get_attr_int $I11, self, rx88_curclass, "$!from"
    ne $I11, -1, rxscan89_done405
    goto rxscan89_scan404
  rxscan89_loop403:
    inc rx88_pos
    gt rx88_pos, rx88_eos, rx88_fail399
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!from", rx88_pos
  rxscan89_scan404:
    nqp_rxmark rx88_bstack, rxscan89_loop403, rx88_pos, 0
  rxscan89_done405:
    nqp_rxmark rx88_bstack, rxquantr90_done407, rx88_pos, 0
  rxquantr90_loop406:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt91_0409
    nqp_push_label $P11, alt91_1414
    nqp_rxmark rx88_bstack, alt91_end408, -1, 0
    rx88_cur."!alt"(rx88_pos, "alt_nfa__1_1359718902.455", $P11)
    goto rx88_fail399
  alt91_0409:
    nqp_rxmark rx88_bstack, rxquantr92_done411, rx88_pos, 0
  rxquantr92_loop410:
    ge rx88_pos, rx88_eos, rx88_fail399
    substr $S11, rx88_tgt, rx88_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx88_fail399
    inc rx88_pos
    nqp_rxpeek $I19, rx88_bstack, rxquantr92_done411
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr92_done411
    inc rx88_rep
    nqp_rxmark rx88_bstack, rxquantr92_done411, rx88_pos, rx88_rep
    goto rxquantr92_loop410
  rxquantr92_done411:
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, rx88_pos
    if $I11, rxanchor93_done412
    ne rx88_pos, rx88_eos, rx88_fail399
    eq rx88_pos, 0, rxanchor93_done412
    sub $I11, rx88_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, $I11
    if $I11, rx88_fail399
  rxanchor93_done412:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."ws"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto alt91_end408
  alt91_1414:
    nqp_rxmark rx88_bstack, rxquantr95_done416, rx88_pos, 0
  rxquantr95_loop415:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."unv"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto rxsubrule96_pass417
  rxsubrule96_back418:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
  rxsubrule96_pass417:
    rx88_cstack = rx88_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule96_back418
    push rx88_bstack, $I11
    push rx88_bstack, 0
    push rx88_bstack, rx88_pos
    elements $I11, rx88_cstack
    push rx88_bstack, $I11
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    nqp_rxpeek $I19, rx88_bstack, rxquantr95_done416
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr95_done416
    inc rx88_rep
  rxquantr95_done416:
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, rx88_pos
    if $I11, rxanchor97_done419
    ne rx88_pos, rx88_eos, rx88_fail399
    eq rx88_pos, 0, rxanchor97_done419
    sub $I11, rx88_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, $I11
    if $I11, rx88_fail399
  rxanchor97_done419:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."ws"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto alt91_end408
  alt91_end408:
    nqp_rxpeek $I19, rx88_bstack, rxquantr90_done407
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr90_done407
    inc rx88_rep
  rxquantr90_done407:
    rx88_cur."!cursor_pass"(rx88_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx88_cur)
  rx88_restart398:
    repr_get_attr_obj rx88_cstack, rx88_cur, rx88_curclass, "$!cstack"
  rx88_fail399:
    unless rx88_bstack, rx88_done397
    pop $I19, rx88_bstack
    if_null rx88_cstack, rx88_cstack_done402
    unless rx88_cstack, rx88_cstack_done402
    dec $I19
    set $P11, rx88_cstack[$I19]
  rx88_cstack_done402:
    pop rx88_rep, rx88_bstack
    pop rx88_pos, rx88_bstack
    pop $I19, rx88_bstack
    lt rx88_pos, -1, rx88_done397
    lt rx88_pos, 0, rx88_fail399
    eq $I19, 0, rx88_fail399
    nqp_islist $I20, rx88_cstack
    unless $I20, rx88_jump400
    elements $I18, rx88_bstack
    le $I18, 0, rx88_cut401
    dec $I18
    set $I18, rx88_bstack[$I18]
  rx88_cut401:
    assign rx88_cstack, $I18
  rx88_jump400:
    jump $I19
  rx88_done397:
    rx88_cur."!cursor_fail"()
    .return (rx88_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_37_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 656
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx99_tgt
    .local int rx99_pos
    .local int rx99_off
    .local int rx99_eos
    .local int rx99_rep
    .local pmc rx99_cur
    .local pmc rx99_curclass
    .local pmc rx99_bstack
    .local pmc rx99_cstack
    (rx99_cur, rx99_tgt, rx99_pos, rx99_curclass, rx99_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx99_cur
    length rx99_eos, rx99_tgt
    eq $I19, 1, rx99_restart423
    gt rx99_pos, rx99_eos, rx99_fail424
    repr_get_attr_int $I11, self, rx99_curclass, "$!from"
    ne $I11, -1, rxscan100_done430
    goto rxscan100_scan429
  rxscan100_loop428:
    inc rx99_pos
    gt rx99_pos, rx99_eos, rx99_fail424
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!from", rx99_pos
  rxscan100_scan429:
    nqp_rxmark rx99_bstack, rxscan100_loop428, rx99_pos, 0
  rxscan100_done430:
  alt101_0432:
    nqp_rxmark rx99_bstack, alt101_1433, rx99_pos, 0
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
    goto alt101_end431
  alt101_1433:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."ww"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    ge $I11, 0, rx99_fail424
    nqp_rxmark rx99_bstack, rxquantr102_done435, rx99_pos, 0
  rxquantr102_loop434:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt103_0437
    nqp_push_label $P11, alt103_1440
    nqp_push_label $P11, alt103_2443
    nqp_push_label $P11, alt103_3446
    nqp_rxmark rx99_bstack, alt103_end436, -1, 0
    rx99_cur."!alt"(rx99_pos, "alt_nfa__2_1359718902.471", $P11)
    goto rx99_fail424
  alt103_0437:
    nqp_rxmark rx99_bstack, rxquantr104_done439, -1, 0
  rxquantr104_loop438:
    ge rx99_pos, rx99_eos, rx99_fail424
    substr $S11, rx99_tgt, rx99_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx99_fail424
    inc rx99_pos
    nqp_rxpeek $I19, rx99_bstack, rxquantr104_done439
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr104_done439
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr104_done439, rx99_pos, rx99_rep
    goto rxquantr104_loop438
  rxquantr104_done439:
    goto alt103_end436
  alt103_1440:
    add $I11, rx99_pos, 1
    gt $I11, rx99_eos, rx99_fail424
    substr $S10, rx99_tgt, rx99_pos, 1
    ne $S10, ucs4:"#", rx99_fail424
    add rx99_pos, 1
    nqp_rxmark rx99_bstack, rxquantr105_done442, rx99_pos, 0
  rxquantr105_loop441:
    ge rx99_pos, rx99_eos, rx99_fail424
    is_cclass $I11, .CCLASS_NEWLINE, rx99_tgt, rx99_pos
    if $I11, rx99_fail424
    add rx99_pos, 1
    nqp_rxpeek $I19, rx99_bstack, rxquantr105_done442
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr105_done442
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr105_done442, rx99_pos, rx99_rep
    goto rxquantr105_loop441
  rxquantr105_done442:
    goto alt103_end436
  alt103_2443:
    eq rx99_pos, 0, rxanchor106_done444
    ge rx99_pos, rx99_eos, rx99_fail424
    sub $I11, rx99_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx99_tgt, $I11
    unless $I11, rx99_fail424
  rxanchor106_done444:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    goto alt103_end436
  alt103_3446:
    nqp_rxmark rx99_bstack, rxquantr108_done448, -1, 0
  rxquantr108_loop447:
    ge rx99_pos, rx99_eos, rx99_fail424
    substr $S11, rx99_tgt, rx99_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx99_fail424
    inc rx99_pos
    nqp_rxpeek $I19, rx99_bstack, rxquantr108_done448
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr108_done448
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr108_done448, rx99_pos, rx99_rep
    goto rxquantr108_loop447
  rxquantr108_done448:
    goto alt103_end436
  alt103_end436:
    nqp_rxpeek $I19, rx99_bstack, rxquantr102_done435
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr102_done435
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr102_done435, rx99_pos, rx99_rep
    goto rxquantr102_loop434
  rxquantr102_done435:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
  alt101_end431:
    rx99_cur."!cursor_pass"(rx99_pos, "ws", 'backtrack'=>1)
    .return (rx99_cur)
  rx99_restart423:
    repr_get_attr_obj rx99_cstack, rx99_cur, rx99_curclass, "$!cstack"
  rx99_fail424:
    unless rx99_bstack, rx99_done422
    pop $I19, rx99_bstack
    if_null rx99_cstack, rx99_cstack_done427
    unless rx99_cstack, rx99_cstack_done427
    dec $I19
    set $P11, rx99_cstack[$I19]
  rx99_cstack_done427:
    pop rx99_rep, rx99_bstack
    pop rx99_pos, rx99_bstack
    pop $I19, rx99_bstack
    lt rx99_pos, -1, rx99_done422
    lt rx99_pos, 0, rx99_fail424
    eq $I19, 0, rx99_fail424
    nqp_islist $I20, rx99_cstack
    unless $I20, rx99_jump425
    elements $I18, rx99_bstack
    le $I18, 0, rx99_cut426
    dec $I18
    set $I18, rx99_bstack[$I18]
  rx99_cut426:
    assign rx99_cstack, $I18
  rx99_jump425:
    jump $I19
  rx99_done422:
    rx99_cur."!cursor_fail"()
    .return (rx99_cur) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_38_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 667
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1359718901.265' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    (rx109_cur, rx109_tgt, rx109_pos, rx109_curclass, rx109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart451
    gt rx109_pos, rx109_eos, rx109_fail452
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done458
    goto rxscan110_scan457
  rxscan110_loop456:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail452
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan457:
    nqp_rxmark rx109_bstack, rxscan110_loop456, rx109_pos, 0
  rxscan110_done458:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt111_0460
    nqp_push_label $P11, alt111_1478
    nqp_push_label $P11, alt111_2483
    nqp_rxmark rx109_bstack, alt111_end459, -1, 0
    rx109_cur."!alt"(rx109_pos, "alt_nfa__4_1359718902.489", $P11)
    goto rx109_fail452
  alt111_0460:
    eq rx109_pos, 0, rxanchor112_done461
    ge rx109_pos, rx109_eos, rx109_fail452
    sub $I11, rx109_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx109_tgt, $I11
    unless $I11, rx109_fail452
  rxanchor112_done461:
    .const 'Sub' $P5001 = 'cuid_39_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail452
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail452
    repr_get_attr_int rx109_pos, $P11, rx109_curclass, "$!pos"
    goto alt111_end459
  alt111_1478:
    nqp_rxmark rx109_bstack, rxquantr118_done480, rx109_pos, 0
  rxquantr118_loop479:
    ge rx109_pos, rx109_eos, rx109_fail452
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail452
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr118_done480
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr118_done480
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr118_done480, rx109_pos, rx109_rep
    goto rxquantr118_loop479
  rxquantr118_done480:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail452
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"#", rx109_fail452
    add rx109_pos, 1
    nqp_rxmark rx109_bstack, rxquantr119_done482, rx109_pos, 0
  rxquantr119_loop481:
    ge rx109_pos, rx109_eos, rx109_fail452
    is_cclass $I11, .CCLASS_NEWLINE, rx109_tgt, rx109_pos
    if $I11, rx109_fail452
    add rx109_pos, 1
    nqp_rxpeek $I19, rx109_bstack, rxquantr119_done482
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr119_done482
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr119_done482, rx109_pos, rx109_rep
    goto rxquantr119_loop481
  rxquantr119_done482:
    goto alt111_end459
  alt111_2483:
    nqp_rxmark rx109_bstack, rxquantr120_done485, -1, 0
  rxquantr120_loop484:
    ge rx109_pos, rx109_eos, rx109_fail452
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail452
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr120_done485
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr120_done485
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr120_done485, rx109_pos, rx109_rep
    goto rxquantr120_loop484
  rxquantr120_done485:
    goto alt111_end459
  alt111_end459:
    nqp_rxcommit rx109_bstack, alt111_end459
    rx109_cur."!cursor_pass"(rx109_pos, "unv", 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart451:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail452:
    unless rx109_bstack, rx109_done450
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done455
    unless rx109_cstack, rx109_cstack_done455
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done455:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done450
    lt rx109_pos, 0, rx109_fail452
    eq $I19, 0, rx109_fail452
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump453
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut454
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut454:
    assign rx109_cstack, $I18
  rx109_jump453:
    jump $I19
  rx109_done450:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1359718901.265") :anon :lex :outer("cuid_38_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    (rx113_cur, rx113_tgt, rx113_pos, rx113_curclass, rx113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart464
    gt rx113_pos, rx113_eos, rx113_fail465
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done471
    goto rxscan114_scan470
  rxscan114_loop469:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail465
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan470:
    nqp_rxmark rx113_bstack, rxscan114_loop469, rx113_pos, 0
  rxscan114_done471:
    nqp_rxmark rx113_bstack, rxquantr115_done473, rx113_pos, 0
  rxquantr115_loop472:
    ge rx113_pos, rx113_eos, rx113_fail465
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx113_fail465
    inc rx113_pos
    nqp_rxpeek $I19, rx113_bstack, rxquantr115_done473
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr115_done473
    inc rx113_rep
    nqp_rxmark rx113_bstack, rxquantr115_done473, rx113_pos, rx113_rep
    goto rxquantr115_loop472
  rxquantr115_done473:
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail465
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"=", rx113_fail465
    add rx113_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt116_0475
    nqp_push_label $P11, alt116_1476
    nqp_rxmark rx113_bstack, alt116_end474, -1, 0
    rx113_cur."!alt"(rx113_pos, "alt_nfa__3_1359718902.481", $P11)
    goto rx113_fail465
  alt116_0475:
    ge rx113_pos, rx113_eos, rx113_fail465
    is_cclass $I11, .CCLASS_WORD, rx113_tgt, rx113_pos
    unless $I11, rx113_fail465
    add rx113_pos, 1
    goto alt116_end474
  alt116_1476:
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail465
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"\\", rx113_fail465
    add rx113_pos, 1
    goto alt116_end474
  alt116_end474:
    nqp_rxcommit rx113_bstack, alt116_end474
    rx113_cur."!cursor_pass"(rx113_pos, 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart464:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail465:
    unless rx113_bstack, rx113_done463
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done468
    unless rx113_cstack, rx113_cstack_done468
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done468:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done463
    lt rx113_pos, 0, rx113_fail465
    eq $I19, 0, rx113_fail465
    nqp_islist $I20, rx113_cstack
    unless $I20, rx113_jump466
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut467
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut467:
    assign rx113_cstack, $I18
  rx113_jump466:
    jump $I19
  rx113_done463:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_40_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 676
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1359718901.265' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx121_tgt
    .local int rx121_pos
    .local int rx121_off
    .local int rx121_eos
    .local int rx121_rep
    .local pmc rx121_cur
    .local pmc rx121_curclass
    .local pmc rx121_bstack
    .local pmc rx121_cstack
    (rx121_cur, rx121_tgt, rx121_pos, rx121_curclass, rx121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx121_cur
    length rx121_eos, rx121_tgt
    eq $I19, 1, rx121_restart488
    gt rx121_pos, rx121_eos, rx121_fail489
    repr_get_attr_int $I11, self, rx121_curclass, "$!from"
    ne $I11, -1, rxscan122_done495
    goto rxscan122_scan494
  rxscan122_loop493:
    inc rx121_pos
    gt rx121_pos, rx121_eos, rx121_fail489
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!from", rx121_pos
  rxscan122_scan494:
    nqp_rxmark rx121_bstack, rxscan122_loop493, rx121_pos, 0
  rxscan122_done495:
    eq rx121_pos, 0, rxanchor123_done496
    ge rx121_pos, rx121_eos, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    unless $I11, rx121_fail489
  rxanchor123_done496:
    nqp_rxmark rx121_bstack, rxquantr124_done498, rx121_pos, 0
  rxquantr124_loop497:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr124_done498
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr124_done498
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr124_done498, rx121_pos, rx121_rep
    goto rxquantr124_loop497
  rxquantr124_done498:
    add $I11, rx121_pos, 1
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 1
    ne $S10, ucs4:"=", rx121_fail489
    add rx121_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt125_0500
    nqp_push_label $P11, alt125_1519
    nqp_push_label $P11, alt125_2538
    nqp_push_label $P11, alt125_3560
    nqp_push_label $P11, alt125_4585
    nqp_rxmark rx121_bstack, alt125_end499, -1, 0
    rx121_cur."!alt"(rx121_pos, "alt_nfa__6_1359718902.568", $P11)
    goto rx121_fail489
  alt125_0500:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    nqp_rxmark rx121_bstack, rxquantr126_done502, -1, 0
  rxquantr126_loop501:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr126_done502
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr126_done502
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr126_done502, rx121_pos, rx121_rep
    goto rxquantr126_loop501
  rxquantr126_done502:
    add $I11, rx121_pos, 3
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 3
    ne $S10, ucs4:"END", rx121_fail489
    add rx121_pos, 3
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
  alt128_0505:
    nqp_rxmark rx121_bstack, alt128_1516, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf129_loop506, rx121_pos, rx121_rep
    goto rxquantf129_done507
  rxquantf129_loop506:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf129_loop506, rx121_pos, rx121_rep
  rxquantf129_done507:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr130_done510, rx121_pos, 0
  rxquantr130_loop509:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr130_done510
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr130_done510
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr130_done510, rx121_pos, rx121_rep
    goto rxquantr130_loop509
  rxquantr130_done510:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    nqp_rxmark rx121_bstack, rxquantr131_done512, -1, 0
  rxquantr131_loop511:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr131_done512
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr131_done512
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr131_done512, rx121_pos, rx121_rep
    goto rxquantr131_loop511
  rxquantr131_done512:
    add $I11, rx121_pos, 3
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 3
    ne $S10, ucs4:"END", rx121_fail489
    add rx121_pos, 3
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr133_done515, rx121_pos, 0
  rxquantr133_loop514:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr133_done515
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr133_done515
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr133_done515, rx121_pos, rx121_rep
    goto rxquantr133_loop514
  rxquantr133_done515:
    goto alt128_end504
  alt128_1516:
    nqp_rxmark rx121_bstack, rxquantr134_done518, rx121_pos, 0
  rxquantr134_loop517:
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr134_done518
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr134_done518
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr134_done518, rx121_pos, rx121_rep
    goto rxquantr134_loop517
  rxquantr134_done518:
  alt128_end504:
    goto alt125_end499
  alt125_1519:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    nqp_rxmark rx121_bstack, rxquantr135_done521, -1, 0
  rxquantr135_loop520:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr135_done521
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr135_done521
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr135_done521, rx121_pos, rx121_rep
    goto rxquantr135_loop520
  rxquantr135_done521:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    nqp_rxmark rx121_bstack, rxsubrule136_pass522, -1, 0
  rxsubrule136_pass522:
    rx121_cstack = rx121_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt137_0524:
    nqp_rxmark rx121_bstack, alt137_1536, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf138_loop525, rx121_pos, rx121_rep
    goto rxquantf138_done526
  rxquantf138_loop525:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf138_loop525, rx121_pos, rx121_rep
  rxquantf138_done526:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr139_done529, rx121_pos, 0
  rxquantr139_loop528:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr139_done529
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr139_done529
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr139_done529, rx121_pos, rx121_rep
    goto rxquantr139_loop528
  rxquantr139_done529:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    nqp_rxmark rx121_bstack, rxquantr140_done531, -1, 0
  rxquantr140_loop530:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr140_done531
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr140_done531
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr140_done531, rx121_pos, rx121_rep
    goto rxquantr140_loop530
  rxquantr140_done531:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr143_done535, rx121_pos, 0
  rxquantr143_loop534:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr143_done535
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr143_done535
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr143_done535, rx121_pos, rx121_rep
    goto rxquantr143_loop534
  rxquantr143_done535:
    goto alt137_end523
  alt137_1536:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt137_end523:
    goto alt125_end499
  alt125_2538:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr146_done541, rx121_pos, 0
  rxquantr146_loop540:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr146_done541
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr146_done541
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr146_done541, rx121_pos, rx121_rep
    goto rxquantr146_loop540
  rxquantr146_done541:
  alt147_0543:
    nqp_rxmark rx121_bstack, alt147_1545, rx121_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rxanchor148_done544
    ne rx121_pos, rx121_eos, rx121_fail489
    eq rx121_pos, 0, rxanchor148_done544
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    if $I11, rx121_fail489
  rxanchor148_done544:
    goto alt147_end542
  alt147_1545:
    nqp_rxmark rx121_bstack, alt147_2546, rx121_pos, 0
    add $I11, rx121_pos, 1
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 1
    ne $S10, ucs4:"#", rx121_fail489
    add rx121_pos, 1
    goto alt147_end542
  alt147_2546:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt147_end542:
  alt150_0549:
    nqp_rxmark rx121_bstack, alt150_1558, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf151_loop550, rx121_pos, rx121_rep
    goto rxquantf151_done551
  rxquantf151_loop550:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf151_loop550, rx121_pos, rx121_rep
  rxquantf151_done551:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr152_done554, rx121_pos, 0
  rxquantr152_loop553:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr152_done554
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr152_done554
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr152_done554, rx121_pos, rx121_rep
    goto rxquantr152_loop553
  rxquantr152_done554:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr154_done557, rx121_pos, 0
  rxquantr154_loop556:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr154_done557
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr154_done557
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr154_done557, rx121_pos, rx121_rep
    goto rxquantr154_loop556
  rxquantr154_done557:
    goto alt150_end548
  alt150_1558:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt150_end548:
    goto alt125_end499
  alt125_3560:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    nqp_rxmark rx121_bstack, rxsubrule156_pass561, -1, 0
  rxsubrule156_pass561:
    rx121_cstack = rx121_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf157_loop562, rx121_pos, rx121_rep
    goto rxquantf157_done563
  rxquantf157_loop562:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf157_loop562, rx121_pos, rx121_rep
  rxquantf157_done563:
    eq rx121_pos, 0, rxanchor158_done565
    ge rx121_pos, rx121_eos, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    unless $I11, rx121_fail489
  rxanchor158_done565:
    .const 'Sub' $P5001 = 'cuid_41_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    goto alt125_end499
  alt125_4585:
  alt166_0587:
    nqp_rxmark rx121_bstack, alt166_1588, rx121_pos, 0
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_WHITESPACE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    add rx121_pos, 1
    goto alt166_end586
  alt166_1588:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt166_end586:
    nqp_rxmark rx121_bstack, rxquantr168_done591, rx121_pos, 0
  rxquantr168_loop590:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr168_done591
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr168_done591
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr168_done591, rx121_pos, rx121_rep
    goto rxquantr168_loop590
  rxquantr168_done591:
    goto alt125_end499
  alt125_end499:
    nqp_rxcommit rx121_bstack, alt125_end499
    rx121_cur."!cursor_pass"(rx121_pos, "pod_comment", 'backtrack'=>1)
    .return (rx121_cur)
  rx121_restart488:
    repr_get_attr_obj rx121_cstack, rx121_cur, rx121_curclass, "$!cstack"
  rx121_fail489:
    unless rx121_bstack, rx121_done487
    pop $I19, rx121_bstack
    if_null rx121_cstack, rx121_cstack_done492
    unless rx121_cstack, rx121_cstack_done492
    dec $I19
    set $P11, rx121_cstack[$I19]
  rx121_cstack_done492:
    pop rx121_rep, rx121_bstack
    pop rx121_pos, rx121_bstack
    pop $I19, rx121_bstack
    lt rx121_pos, -1, rx121_done487
    lt rx121_pos, 0, rx121_fail489
    eq $I19, 0, rx121_fail489
    nqp_islist $I20, rx121_cstack
    unless $I20, rx121_jump490
    elements $I18, rx121_bstack
    le $I18, 0, rx121_cut491
    dec $I18
    set $I18, rx121_bstack[$I18]
  rx121_cut491:
    assign rx121_cstack, $I18
  rx121_jump490:
    jump $I19
  rx121_done487:
    rx121_cur."!cursor_fail"()
    .return (rx121_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1359718901.265") :anon :lex :outer("cuid_40_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx159_tgt
    .local int rx159_pos
    .local int rx159_off
    .local int rx159_eos
    .local int rx159_rep
    .local pmc rx159_cur
    .local pmc rx159_curclass
    .local pmc rx159_bstack
    .local pmc rx159_cstack
    (rx159_cur, rx159_tgt, rx159_pos, rx159_curclass, rx159_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx159_cur
    length rx159_eos, rx159_tgt
    eq $I19, 1, rx159_restart568
    gt rx159_pos, rx159_eos, rx159_fail569
    repr_get_attr_int $I11, self, rx159_curclass, "$!from"
    ne $I11, -1, rxscan160_done575
    goto rxscan160_scan574
  rxscan160_loop573:
    inc rx159_pos
    gt rx159_pos, rx159_eos, rx159_fail569
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!from", rx159_pos
  rxscan160_scan574:
    nqp_rxmark rx159_bstack, rxscan160_loop573, rx159_pos, 0
  rxscan160_done575:
    nqp_rxmark rx159_bstack, rxquantr161_done577, rx159_pos, 0
  rxquantr161_loop576:
    ge rx159_pos, rx159_eos, rx159_fail569
    substr $S11, rx159_tgt, rx159_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx159_fail569
    inc rx159_pos
    nqp_rxpeek $I19, rx159_bstack, rxquantr161_done577
    inc $I19
    inc $I19
    set rx159_rep, rx159_bstack[$I19]
    nqp_rxcommit rx159_bstack, rxquantr161_done577
    inc rx159_rep
    nqp_rxmark rx159_bstack, rxquantr161_done577, rx159_pos, rx159_rep
    goto rxquantr161_loop576
  rxquantr161_done577:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt162_0579
    nqp_push_label $P11, alt162_1584
    nqp_rxmark rx159_bstack, alt162_end578, -1, 0
    rx159_cur."!alt"(rx159_pos, "alt_nfa__5_1359718902.556", $P11)
    goto rx159_fail569
  alt162_0579:
    add $I11, rx159_pos, 1
    gt $I11, rx159_eos, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 1
    ne $S10, ucs4:"=", rx159_fail569
    add rx159_pos, 1
    nqp_rxmark rx159_bstack, rxquantr163_done581, rx159_pos, 0
  rxquantr163_loop580:
    add $I11, rx159_pos, 3
    gt $I11, rx159_eos, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 3
    ne $S10, ucs4:"cut", rx159_fail569
    add rx159_pos, 3
    le rx159_pos, 0, rx159_fail569
    is_cclass $I11, .CCLASS_WORD, rx159_tgt, rx159_pos
    if $I11, rx159_fail569
    sub $I11, rx159_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx159_tgt, $I11
    unless $I11, rx159_fail569
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!pos", rx159_pos
    $P11 = rx159_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx159_curclass, "$!pos"
    lt $I11, 0, rx159_fail569
    repr_get_attr_int rx159_pos, $P11, rx159_curclass, "$!pos"
    nqp_rxpeek $I19, rx159_bstack, rxquantr163_done581
    inc $I19
    inc $I19
    set rx159_rep, rx159_bstack[$I19]
    nqp_rxcommit rx159_bstack, rxquantr163_done581
    inc rx159_rep
  rxquantr163_done581:
    goto alt162_end578
  alt162_1584:
    ge rx159_pos, rx159_eos, rx159_fail569
    is_cclass $I11, .CCLASS_NEWLINE, rx159_tgt, rx159_pos
    unless $I11, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx159_pos, $I11
    add rx159_pos, 1
    goto alt162_end578
  alt162_end578:
    nqp_rxcommit rx159_bstack, alt162_end578
    rx159_cur."!cursor_pass"(rx159_pos, 'backtrack'=>1)
    .return (rx159_cur)
  rx159_restart568:
    repr_get_attr_obj rx159_cstack, rx159_cur, rx159_curclass, "$!cstack"
  rx159_fail569:
    unless rx159_bstack, rx159_done567
    pop $I19, rx159_bstack
    if_null rx159_cstack, rx159_cstack_done572
    unless rx159_cstack, rx159_cstack_done572
    dec $I19
    set $P11, rx159_cstack[$I19]
  rx159_cstack_done572:
    pop rx159_rep, rx159_bstack
    pop rx159_pos, rx159_bstack
    pop $I19, rx159_bstack
    lt rx159_pos, -1, rx159_done567
    lt rx159_pos, 0, rx159_fail569
    eq $I19, 0, rx159_fail569
    nqp_islist $I20, rx159_cstack
    unless $I20, rx159_jump570
    elements $I18, rx159_bstack
    le $I18, 0, rx159_cut571
    dec $I18
    set $I18, rx159_bstack[$I18]
  rx159_cut571:
    assign rx159_cstack, $I18
  rx159_jump570:
    jump $I19
  rx159_done567:
    rx159_cur."!cursor_fail"()
    .return (rx159_cur) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_42_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 707
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_392_1359718901.265' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_393_1359718901.265' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_395_1359718901.265' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_396_1359718901.265' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx169_tgt
    .local int rx169_pos
    .local int rx169_off
    .local int rx169_eos
    .local int rx169_rep
    .local pmc rx169_cur
    .local pmc rx169_curclass
    .local pmc rx169_bstack
    .local pmc rx169_cstack
    (rx169_cur, rx169_tgt, rx169_pos, rx169_curclass, rx169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx169_cur
    length rx169_eos, rx169_tgt
    eq $I19, 1, rx169_restart594
    gt rx169_pos, rx169_eos, rx169_fail595
    repr_get_attr_int $I11, self, rx169_curclass, "$!from"
    ne $I11, -1, rxscan170_done601
    goto rxscan170_scan600
  rxscan170_loop599:
    inc rx169_pos
    gt rx169_pos, rx169_eos, rx169_fail595
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!from", rx169_pos
  rxscan170_scan600:
    nqp_rxmark rx169_bstack, rxscan170_loop599, rx169_pos, 0
  rxscan170_done601:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P103, fallback602
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback603
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5013
  fallback603:
    unless_null $P5010, vivi_171604
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_171604:
    set $P103, $P5010
  fallback602:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
.annotate 'line', 712
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback605
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback606
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5019
  fallback606:
    unless_null $P5016, vivi_172607
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_172607:
    set $P5015, $P5016
  fallback605:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
.annotate 'line', 716
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback608
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback609
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5026
  fallback609:
    unless_null $P5023, vivi_173610
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_173610:
    set $P5022, $P5023
  fallback608:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback611
    nqp_get_sc_object $P5032, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback612
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback612:
    unless_null $P5030, vivi_174613
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_174613:
    set $P5029, $P5030
  fallback611:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback614
    nqp_get_sc_object $P5037, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5037
  fallback614:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_392_1359718901.265' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P105, fallback630
    nqp_get_sc_object $P5044, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback631
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5045
  fallback631:
    unless_null $P5042, vivi_180632
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_180632:
    set $P105, $P5042
  fallback630:
    set $P106, $P105
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_393_1359718901.265' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P107, fallback642
    nqp_get_sc_object $P5052, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback643
    nqp_get_sc_object $P5053, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5050, $P5053
  fallback643:
    unless_null $P5050, vivi_184644
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_184644:
    set $P107, $P5050
  fallback642:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_395_1359718901.265' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_396_1359718901.265' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    nqp_rxmark rx169_bstack, rxsubrule199_pass688, -1, 0
  rxsubrule199_pass688:
    rx169_cstack = rx169_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
  alt200_0690:
    nqp_rxmark rx169_bstack, alt200_1692, rx169_pos, 0
    lt rx169_pos, rx169_eos, rx169_fail595
    goto alt200_end689
  alt200_1692:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
  alt200_end689:
    rx169_cur."!cursor_pass"(rx169_pos, "comp_unit", 'backtrack'=>1)
    .return (rx169_cur)
  rx169_restart594:
    repr_get_attr_obj rx169_cstack, rx169_cur, rx169_curclass, "$!cstack"
  rx169_fail595:
    unless rx169_bstack, rx169_done593
    pop $I19, rx169_bstack
    if_null rx169_cstack, rx169_cstack_done598
    unless rx169_cstack, rx169_cstack_done598
    dec $I19
    set $P11, rx169_cstack[$I19]
  rx169_cstack_done598:
    pop rx169_rep, rx169_bstack
    pop rx169_pos, rx169_bstack
    pop $I19, rx169_bstack
    lt rx169_pos, -1, rx169_done593
    lt rx169_pos, 0, rx169_fail595
    eq $I19, 0, rx169_fail595
    nqp_islist $I20, rx169_cstack
    unless $I20, rx169_jump596
    elements $I18, rx169_bstack
    le $I18, 0, rx169_cut597
    dec $I18
    set $I18, rx169_bstack[$I18]
  rx169_cut597:
    assign rx169_cstack, $I18
  rx169_jump596:
    jump $I19
  rx169_done593:
    rx169_cur."!cursor_fail"()
    .return (rx169_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1359718901.265") :anon :lex :outer("cuid_42_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 717

.annotate 'line', 718
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback615
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback616
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback616:
    unless_null $P5003, vivi_175617
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_175617:
    set $P5002, $P5003
  fallback615:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback618
    nqp_get_sc_object $P5011, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback619
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback619:
    unless_null $P5009, vivi_176620
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_176620:
    set $P5008, $P5009
  fallback618:
    $P5001."compose"($P5008)
.annotate 'line', 719
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback621
    nqp_get_sc_object $P5017, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback622
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5018
  fallback622:
    unless_null $P5015, vivi_177623
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_177623:
    set $P5014, $P5015
  fallback621:
    find_dynamic_lex $P5020, "$*UNIT"
    unless_null $P5020, fallback624
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$UNIT"]
    unless_null $P5021, fallback625
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5024
  fallback625:
    unless_null $P5021, vivi_178626
    die "Contextual $*UNIT not found"
    box $P5025, "Contextual $*UNIT not found"
    set $P5021, $P5025
  vivi_178626:
    set $P5020, $P5021
  fallback624:
    find_dynamic_lex $P5026, "$*GLOBALish"
    unless_null $P5026, fallback627
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$GLOBALish"]
    unless_null $P5027, fallback628
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5030
  fallback628:
    unless_null $P5027, vivi_179629
    die "Contextual $*GLOBALish not found"
    box $P5031, "Contextual $*GLOBALish not found"
    set $P5027, $P5031
  vivi_179629:
    set $P5026, $P5027
  fallback627:
    $P5032 = $P5014."install_lexical_symbol"($P5020, "GLOBALish", $P5026)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1359718901.265") :anon :lex :outer("cuid_42_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 724

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback633
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback634
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback634:
    unless_null $P5002, vivi_181635
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_181635:
    set $P5001, $P5002
  fallback633:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback636
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback637
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5011
  fallback637:
    unless_null $P5008, vivi_182638
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_182638:
    set $P5007, $P5008
  fallback636:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback639
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback640
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5017
  fallback640:
    unless_null $P5014, vivi_183641
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_183641:
    set $P5013, $P5014
  fallback639:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1359718901.265") :anon :lex :outer("cuid_42_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 728
    .const 'Sub' $P5017 = 'cuid_394_1359718901.265' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback647
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback648
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback648:
    unless_null $P5004, vivi_186649
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_186649:
    set $P5003, $P5004
  fallback647:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback650
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5011
  fallback650:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback651
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5012
  fallback651:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless185_end646 
    .const 'Sub' $P5013 = 'cuid_394_1359718901.265' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless185_end646:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1359718901.265") :anon :lex :outer("cuid_395_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 729
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 730
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback652
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback653
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback653:
    unless_null $P5003, vivi_187654
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_187654:
    set $P5002, $P5003
  fallback652:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback655
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback656
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback656:
    unless_null $P5010, vivi_188657
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_188657:
    set $P5009, $P5010
  fallback655:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback658
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5017
  fallback658:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 731
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback659
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback660
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5024
  fallback660:
    unless_null $P5021, vivi_189661
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_189661:
    set $P5020, $P5021
  fallback659:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback662
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback663
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5030
  fallback663:
    unless_null $P5027, vivi_190664
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_190664:
    set $P5026, $P5027
  fallback662:
    $P5019."compose"($P5026)
.annotate 'line', 732
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback665
    nqp_get_sc_object $P5035, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback666
    nqp_get_sc_object $P5036, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5033, $P5036
  fallback666:
    unless_null $P5033, vivi_191667
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_191667:
    set $P5032, $P5033
  fallback665:
    find_dynamic_lex $P5038, "$*UNIT"
    unless_null $P5038, fallback668
    nqp_get_sc_object $P5041, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$UNIT"]
    unless_null $P5039, fallback669
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5042
  fallback669:
    unless_null $P5039, vivi_192670
    die "Contextual $*UNIT not found"
    box $P5043, "Contextual $*UNIT not found"
    set $P5039, $P5043
  vivi_192670:
    set $P5038, $P5039
  fallback668:
    find_dynamic_lex $P5044, "$*EXPORT"
    unless_null $P5044, fallback671
    nqp_get_sc_object $P5047, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$EXPORT"]
    unless_null $P5045, fallback672
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5045, $P5048
  fallback672:
    unless_null $P5045, vivi_193673
    die "Contextual $*EXPORT not found"
    box $P5049, "Contextual $*EXPORT not found"
    set $P5045, $P5049
  vivi_193673:
    set $P5044, $P5045
  fallback671:
    $P5032."install_lexical_symbol"($P5038, "EXPORT", $P5044)
.annotate 'line', 733
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback674
    nqp_get_sc_object $P5053, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback675
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5051, $P5054
  fallback675:
    unless_null $P5051, vivi_194676
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_194676:
    set $P5050, $P5051
  fallback674:
    find_dynamic_lex $P5057, "%*HOW"
    unless_null $P5057, fallback677
    nqp_get_sc_object $P5060, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%HOW"]
    unless_null $P5058, fallback678
    nqp_get_sc_object $P5062, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%HOW"], $P5063
    set $P5058, $P5063
  fallback678:
    unless_null $P5058, vivi_195679
    die "Contextual %*HOW not found"
    box $P5064, "Contextual %*HOW not found"
    set $P5058, $P5064
  vivi_195679:
    set $P5057, $P5058
  fallback677:
    set $P5056, $P5057["knowhow"]
    unless_null $P5056, fallback680
    nqp_get_sc_object $P5065, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5056, $P5065
  fallback680:
    $P5066 = $P5050."pkg_create_mo"($P5056, "DEFAULT" :named("name"))
    set $P101, $P5066
.annotate 'line', 734
    get_how $P5067, $P101
    $P5067."compose"($P101)
    find_dynamic_lex $P5069, "$*EXPORT"
    unless_null $P5069, fallback681
    nqp_get_sc_object $P5072, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$EXPORT"]
    unless_null $P5070, fallback682
    nqp_get_sc_object $P5073, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5070, $P5073
  fallback682:
    unless_null $P5070, vivi_196683
    die "Contextual $*EXPORT not found"
    box $P5074, "Contextual $*EXPORT not found"
    set $P5070, $P5074
  vivi_196683:
    set $P5069, $P5070
  fallback681:
    get_who $P5068, $P5069
    set $P5068["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1359718901.265") :anon :lex :outer("cuid_42_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 739

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback684
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback685
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback685:
    unless_null $P5002, vivi_197686
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_197686:
    set $P5001, $P5002
  fallback684:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_43_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 747
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx203_tgt
    .local int rx203_pos
    .local int rx203_off
    .local int rx203_eos
    .local int rx203_rep
    .local pmc rx203_cur
    .local pmc rx203_curclass
    .local pmc rx203_bstack
    .local pmc rx203_cstack
    (rx203_cur, rx203_tgt, rx203_pos, rx203_curclass, rx203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx203_cur
    length rx203_eos, rx203_tgt
    eq $I19, 1, rx203_restart696
    gt rx203_pos, rx203_eos, rx203_fail697
    repr_get_attr_int $I11, self, rx203_curclass, "$!from"
    ne $I11, -1, rxscan204_done703
    goto rxscan204_scan702
  rxscan204_loop701:
    inc rx203_pos
    gt rx203_pos, rx203_eos, rx203_fail697
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!from", rx203_pos
  rxscan204_scan702:
    nqp_rxmark rx203_bstack, rxscan204_loop701, rx203_pos, 0
  rxscan204_done703:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt205_0705
    nqp_push_label $P11, alt205_1709
    nqp_rxmark rx203_bstack, alt205_end704, -1, 0
    rx203_cur."!alt"(rx203_pos, "alt_nfa__7_1359718902.652", $P11)
    goto rx203_fail697
  alt205_0705:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    lt rx203_pos, rx203_eos, rx203_fail697
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    goto alt205_end704
  alt205_1709:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    nqp_rxmark rx203_bstack, rxquantr210_done712, rx203_pos, 0
  rxquantr210_loop711:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."statement"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    nqp_rxmark rx203_bstack, rxsubrule211_pass713, -1, 0
  rxsubrule211_pass713:
    rx203_cstack = rx203_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    nqp_rxpeek $I19, rx203_bstack, rxquantr210_done712
    inc $I19
    inc $I19
    set rx203_rep, rx203_bstack[$I19]
    nqp_rxcommit rx203_bstack, rxquantr210_done712
    inc rx203_rep
    nqp_rxmark rx203_bstack, rxquantr210_done712, rx203_pos, rx203_rep
    goto rxquantr210_loop711
  rxquantr210_done712:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    goto alt205_end704
  alt205_end704:
    rx203_cur."!cursor_pass"(rx203_pos, "statementlist", 'backtrack'=>1)
    .return (rx203_cur)
  rx203_restart696:
    repr_get_attr_obj rx203_cstack, rx203_cur, rx203_curclass, "$!cstack"
  rx203_fail697:
    unless rx203_bstack, rx203_done695
    pop $I19, rx203_bstack
    if_null rx203_cstack, rx203_cstack_done700
    unless rx203_cstack, rx203_cstack_done700
    dec $I19
    set $P11, rx203_cstack[$I19]
  rx203_cstack_done700:
    pop rx203_rep, rx203_bstack
    pop rx203_pos, rx203_bstack
    pop $I19, rx203_bstack
    lt rx203_pos, -1, rx203_done695
    lt rx203_pos, 0, rx203_fail697
    eq $I19, 0, rx203_fail697
    nqp_islist $I20, rx203_cstack
    unless $I20, rx203_jump698
    elements $I18, rx203_bstack
    le $I18, 0, rx203_cut699
    dec $I18
    set $I18, rx203_bstack[$I18]
  rx203_cut699:
    assign rx203_cstack, $I18
  rx203_jump698:
    jump $I19
  rx203_done695:
    rx203_cur."!cursor_fail"()
    .return (rx203_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_44_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 752
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_45_1359718901.265' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx215_tgt
    .local int rx215_pos
    .local int rx215_off
    .local int rx215_eos
    .local int rx215_rep
    .local pmc rx215_cur
    .local pmc rx215_curclass
    .local pmc rx215_bstack
    .local pmc rx215_cstack
    (rx215_cur, rx215_tgt, rx215_pos, rx215_curclass, rx215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx215_cur
    length rx215_eos, rx215_tgt
    eq $I19, 1, rx215_restart719
    gt rx215_pos, rx215_eos, rx215_fail720
    repr_get_attr_int $I11, self, rx215_curclass, "$!from"
    ne $I11, -1, rxscan216_done726
    goto rxscan216_scan725
  rxscan216_loop724:
    inc rx215_pos
    gt rx215_pos, rx215_eos, rx215_fail720
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!from", rx215_pos
  rxscan216_scan725:
    nqp_rxmark rx215_bstack, rxscan216_loop724, rx215_pos, 0
  rxscan216_done726:
    .const 'Sub' $P5001 = 'cuid_45_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    ge $I11, 0, rx215_fail720
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt222_0745
    nqp_push_label $P11, alt222_1747
    nqp_rxmark rx215_bstack, alt222_end744, -1, 0
    rx215_cur."!alt"(rx215_pos, "alt_nfa__9_1359718902.671", $P11)
    goto rx215_fail720
  alt222_0745:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule223_pass746, -1, 0
  rxsubrule223_pass746:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    goto alt222_end744
  alt222_1747:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule224_pass748, -1, 0
  rxsubrule224_pass748:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."ws"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxmark rx215_bstack, rxquantr226_done751, rx215_pos, 0
  rxquantr226_loop750:
  alt227_0753:
    nqp_rxmark rx215_bstack, alt227_1754, rx215_pos, 0
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    goto alt227_end752
  alt227_1754:
    nqp_rxmark rx215_bstack, alt227_2760, rx215_pos, 0
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule228_pass755, -1, 0
  rxsubrule228_pass755:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxmark rx215_bstack, rxquantr229_done757, rx215_pos, 0
  rxquantr229_loop756:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    goto rxsubrule230_pass758
  rxsubrule230_back759:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
  rxsubrule230_pass758:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule230_back759
    push rx215_bstack, $I11
    push rx215_bstack, 0
    push rx215_bstack, rx215_pos
    elements $I11, rx215_cstack
    push rx215_bstack, $I11
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxpeek $I19, rx215_bstack, rxquantr229_done757
    inc $I19
    inc $I19
    set rx215_rep, rx215_bstack[$I19]
    nqp_rxcommit rx215_bstack, rxquantr229_done757
    inc rx215_rep
  rxquantr229_done757:
    goto alt227_end752
  alt227_2760:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule231_pass761, -1, 0
  rxsubrule231_pass761:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
  alt227_end752:
    nqp_rxpeek $I19, rx215_bstack, rxquantr226_done751
    inc $I19
    inc $I19
    set rx215_rep, rx215_bstack[$I19]
    nqp_rxcommit rx215_bstack, rxquantr226_done751
    inc rx215_rep
  rxquantr226_done751:
    goto alt222_end744
  alt222_end744:
    nqp_rxcommit rx215_bstack, alt222_end744
    rx215_cur."!cursor_pass"(rx215_pos, "statement", 'backtrack'=>1)
    .return (rx215_cur)
  rx215_restart719:
    repr_get_attr_obj rx215_cstack, rx215_cur, rx215_curclass, "$!cstack"
  rx215_fail720:
    unless rx215_bstack, rx215_done718
    pop $I19, rx215_bstack
    if_null rx215_cstack, rx215_cstack_done723
    unless rx215_cstack, rx215_cstack_done723
    dec $I19
    set $P11, rx215_cstack[$I19]
  rx215_cstack_done723:
    pop rx215_rep, rx215_bstack
    pop rx215_pos, rx215_bstack
    pop $I19, rx215_bstack
    lt rx215_pos, -1, rx215_done718
    lt rx215_pos, 0, rx215_fail720
    eq $I19, 0, rx215_fail720
    nqp_islist $I20, rx215_cstack
    unless $I20, rx215_jump721
    elements $I18, rx215_bstack
    le $I18, 0, rx215_cut722
    dec $I18
    set $I18, rx215_bstack[$I18]
  rx215_cut722:
    assign rx215_cstack, $I18
  rx215_jump721:
    jump $I19
  rx215_done718:
    rx215_cur."!cursor_fail"()
    .return (rx215_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1359718901.265") :anon :lex :outer("cuid_44_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx217_tgt
    .local int rx217_pos
    .local int rx217_off
    .local int rx217_eos
    .local int rx217_rep
    .local pmc rx217_cur
    .local pmc rx217_curclass
    .local pmc rx217_bstack
    .local pmc rx217_cstack
    (rx217_cur, rx217_tgt, rx217_pos, rx217_curclass, rx217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx217_cur
    length rx217_eos, rx217_tgt
    eq $I19, 1, rx217_restart729
    gt rx217_pos, rx217_eos, rx217_fail730
    repr_get_attr_int $I11, self, rx217_curclass, "$!from"
    ne $I11, -1, rxscan218_done736
    goto rxscan218_scan735
  rxscan218_loop734:
    inc rx217_pos
    gt rx217_pos, rx217_eos, rx217_fail730
    repr_bind_attr_int rx217_cur, rx217_curclass, "$!from", rx217_pos
  rxscan218_scan735:
    nqp_rxmark rx217_bstack, rxscan218_loop734, rx217_pos, 0
  rxscan218_done736:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt219_0738
    nqp_push_label $P11, alt219_1742
    nqp_rxmark rx217_bstack, alt219_end737, -1, 0
    rx217_cur."!alt"(rx217_pos, "alt_nfa__8_1359718902.658", $P11)
    goto rx217_fail730
  alt219_0738:
  alt220_0740:
    nqp_rxmark rx217_bstack, alt220_1741, rx217_pos, 0
    add $I11, rx217_pos, 1
    gt $I11, rx217_eos, rx217_fail730
    substr $S10, rx217_tgt, rx217_pos, 1
    ne $S10, ucs4:"]", rx217_fail730
    add rx217_pos, 1
    goto alt220_end739
  alt220_1741:
    ge rx217_pos, rx217_eos, rx217_fail730
    substr $S11, rx217_tgt, rx217_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx217_fail730
    inc rx217_pos
  alt220_end739:
    goto alt219_end737
  alt219_1742:
    lt rx217_pos, rx217_eos, rx217_fail730
    goto alt219_end737
  alt219_end737:
    rx217_cur."!cursor_pass"(rx217_pos, 'backtrack'=>1)
    .return (rx217_cur)
  rx217_restart729:
    repr_get_attr_obj rx217_cstack, rx217_cur, rx217_curclass, "$!cstack"
  rx217_fail730:
    unless rx217_bstack, rx217_done728
    pop $I19, rx217_bstack
    if_null rx217_cstack, rx217_cstack_done733
    unless rx217_cstack, rx217_cstack_done733
    dec $I19
    set $P11, rx217_cstack[$I19]
  rx217_cstack_done733:
    pop rx217_rep, rx217_bstack
    pop rx217_pos, rx217_bstack
    pop $I19, rx217_bstack
    lt rx217_pos, -1, rx217_done728
    lt rx217_pos, 0, rx217_fail730
    eq $I19, 0, rx217_fail730
    nqp_islist $I20, rx217_cstack
    unless $I20, rx217_jump731
    elements $I18, rx217_bstack
    le $I18, 0, rx217_cut732
    dec $I18
    set $I18, rx217_bstack[$I18]
  rx217_cut732:
    assign rx217_cstack, $I18
  rx217_jump731:
    jump $I19
  rx217_done728:
    rx217_cur."!cursor_fail"()
    .return (rx217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_46_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 765
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    (rx232_cur, rx232_tgt, rx232_pos, rx232_curclass, rx232_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart764
    gt rx232_pos, rx232_eos, rx232_fail765
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done771
    goto rxscan233_scan770
  rxscan233_loop769:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail765
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan770:
    nqp_rxmark rx232_bstack, rxscan233_loop769, rx232_pos, 0
  rxscan233_done771:
  alt234_0773:
    nqp_rxmark rx232_bstack, alt234_1774, rx232_pos, 0
    add $I11, rx232_pos, 1
    gt $I11, rx232_eos, rx232_fail765
    substr $S10, rx232_tgt, rx232_pos, 1
    ne $S10, ucs4:";", rx232_fail765
    add rx232_pos, 1
    goto alt234_end772
  alt234_1774:
    nqp_rxmark rx232_bstack, alt234_2775, rx232_pos, 0
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail765
    goto alt234_end772
  alt234_2775:
    nqp_rxmark rx232_bstack, alt234_3776, rx232_pos, 0
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail765
    goto alt234_end772
  alt234_3776:
    lt rx232_pos, rx232_eos, rx232_fail765
  alt234_end772:
    rx232_cur."!cursor_pass"(rx232_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart764:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail765:
    unless rx232_bstack, rx232_done763
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done768
    unless rx232_cstack, rx232_cstack_done768
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done768:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done763
    lt rx232_pos, 0, rx232_fail765
    eq $I19, 0, rx232_fail765
    nqp_islist $I20, rx232_cstack
    unless $I20, rx232_jump766
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut767
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut767:
    assign rx232_cstack, $I18
  rx232_jump766:
    jump $I19
  rx232_done763:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_47_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx236_tgt
    .local int rx236_pos
    .local int rx236_off
    .local int rx236_eos
    .local int rx236_rep
    .local pmc rx236_cur
    .local pmc rx236_curclass
    .local pmc rx236_bstack
    .local pmc rx236_cstack
    (rx236_cur, rx236_tgt, rx236_pos, rx236_curclass, rx236_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx236_cur
    length rx236_eos, rx236_tgt
    eq $I19, 1, rx236_restart780
    gt rx236_pos, rx236_eos, rx236_fail781
    repr_get_attr_int $I11, self, rx236_curclass, "$!from"
    ne $I11, -1, rxscan237_done787
    goto rxscan237_scan786
  rxscan237_loop785:
    inc rx236_pos
    gt rx236_pos, rx236_eos, rx236_fail781
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!from", rx236_pos
  rxscan237_scan786:
    nqp_rxmark rx236_bstack, rxscan237_loop785, rx236_pos, 0
  rxscan237_done787:
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    nqp_rxmark rx236_bstack, rxsubrule238_pass788, -1, 0
  rxsubrule238_pass788:
    rx236_cstack = rx236_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."ws"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    nqp_rxmark rx236_bstack, rxsubrule240_pass790, -1, 0
  rxsubrule240_pass790:
    rx236_cstack = rx236_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    rx236_cur."!cursor_pass"(rx236_pos, "xblock", 'backtrack'=>1)
    .return (rx236_cur)
  rx236_restart780:
    repr_get_attr_obj rx236_cstack, rx236_cur, rx236_curclass, "$!cstack"
  rx236_fail781:
    unless rx236_bstack, rx236_done779
    pop $I19, rx236_bstack
    if_null rx236_cstack, rx236_cstack_done784
    unless rx236_cstack, rx236_cstack_done784
    dec $I19
    set $P11, rx236_cstack[$I19]
  rx236_cstack_done784:
    pop rx236_rep, rx236_bstack
    pop rx236_pos, rx236_bstack
    pop $I19, rx236_bstack
    lt rx236_pos, -1, rx236_done779
    lt rx236_pos, 0, rx236_fail781
    eq $I19, 0, rx236_fail781
    nqp_islist $I20, rx236_cstack
    unless $I20, rx236_jump782
    elements $I18, rx236_bstack
    le $I18, 0, rx236_cut783
    dec $I18
    set $I18, rx236_bstack[$I18]
  rx236_cut783:
    assign rx236_cstack, $I18
  rx236_jump782:
    jump $I19
  rx236_done779:
    rx236_cur."!cursor_fail"()
    .return (rx236_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_48_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx241_tgt
    .local int rx241_pos
    .local int rx241_off
    .local int rx241_eos
    .local int rx241_rep
    .local pmc rx241_cur
    .local pmc rx241_curclass
    .local pmc rx241_bstack
    .local pmc rx241_cstack
    (rx241_cur, rx241_tgt, rx241_pos, rx241_curclass, rx241_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx241_cur
    length rx241_eos, rx241_tgt
    eq $I19, 1, rx241_restart793
    gt rx241_pos, rx241_eos, rx241_fail794
    repr_get_attr_int $I11, self, rx241_curclass, "$!from"
    ne $I11, -1, rxscan242_done800
    goto rxscan242_scan799
  rxscan242_loop798:
    inc rx241_pos
    gt rx241_pos, rx241_eos, rx241_fail794
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!from", rx241_pos
  rxscan242_scan799:
    nqp_rxmark rx241_bstack, rxscan242_loop798, rx241_pos, 0
  rxscan242_done800:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt243_0802
    nqp_push_label $P11, alt243_1808
    nqp_push_label $P11, alt243_2811
    nqp_rxmark rx241_bstack, alt243_end801, -1, 0
    rx241_cur."!alt"(rx241_pos, "alt_nfa__10_1359718902.698", $P11)
    goto rx241_fail794
  alt243_0802:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."signature"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule246_pass805, -1, 0
  rxsubrule246_pass805:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule248_pass807, -1, 0
  rxsubrule248_pass807:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_1808:
    ge rx241_pos, rx241_eos, rx241_fail794
    substr $S11, rx241_tgt, rx241_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx241_fail794
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule250_pass810, -1, 0
  rxsubrule250_pass810:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_2811:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_end801:
    rx241_cur."!cursor_pass"(rx241_pos, "pblock", 'backtrack'=>1)
    .return (rx241_cur)
  rx241_restart793:
    repr_get_attr_obj rx241_cstack, rx241_cur, rx241_curclass, "$!cstack"
  rx241_fail794:
    unless rx241_bstack, rx241_done792
    pop $I19, rx241_bstack
    if_null rx241_cstack, rx241_cstack_done797
    unless rx241_cstack, rx241_cstack_done797
    dec $I19
    set $P11, rx241_cstack[$I19]
  rx241_cstack_done797:
    pop rx241_rep, rx241_bstack
    pop rx241_pos, rx241_bstack
    pop $I19, rx241_bstack
    lt rx241_pos, -1, rx241_done792
    lt rx241_pos, 0, rx241_fail794
    eq $I19, 0, rx241_fail794
    nqp_islist $I20, rx241_cstack
    unless $I20, rx241_jump795
    elements $I18, rx241_bstack
    le $I18, 0, rx241_cut796
    dec $I18
    set $I18, rx241_bstack[$I18]
  rx241_cut796:
    assign rx241_cstack, $I18
  rx241_jump795:
    jump $I19
  rx241_done792:
    rx241_cur."!cursor_fail"()
    .return (rx241_cur) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_49_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 787
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx252_tgt
    .local int rx252_pos
    .local int rx252_off
    .local int rx252_eos
    .local int rx252_rep
    .local pmc rx252_cur
    .local pmc rx252_curclass
    .local pmc rx252_bstack
    .local pmc rx252_cstack
    (rx252_cur, rx252_tgt, rx252_pos, rx252_curclass, rx252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx252_cur
    length rx252_eos, rx252_tgt
    eq $I19, 1, rx252_restart815
    gt rx252_pos, rx252_eos, rx252_fail816
    repr_get_attr_int $I11, self, rx252_curclass, "$!from"
    ne $I11, -1, rxscan253_done822
    goto rxscan253_scan821
  rxscan253_loop820:
    inc rx252_pos
    gt rx252_pos, rx252_eos, rx252_fail816
    repr_bind_attr_int rx252_cur, rx252_curclass, "$!from", rx252_pos
  rxscan253_scan821:
    nqp_rxmark rx252_bstack, rxscan253_loop820, rx252_pos, 0
  rxscan253_done822:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt254_0824
    nqp_push_label $P11, alt254_1825
    nqp_rxmark rx252_bstack, alt254_end823, -1, 0
    rx252_cur."!alt"(rx252_pos, "alt_nfa__11_1359718902.704", $P11)
    goto rx252_fail816
  alt254_0824:
    add $I11, rx252_pos, 2
    gt $I11, rx252_eos, rx252_fail816
    substr $S10, rx252_tgt, rx252_pos, 2
    ne $S10, ucs4:"->", rx252_fail816
    add rx252_pos, 2
    goto alt254_end823
  alt254_1825:
    add $I11, rx252_pos, 3
    gt $I11, rx252_eos, rx252_fail816
    substr $S10, rx252_tgt, rx252_pos, 3
    ne $S10, ucs4:"<->", rx252_fail816
    add rx252_pos, 3
    goto alt254_end823
  alt254_end823:
    rx252_cur."!cursor_pass"(rx252_pos, "lambda", 'backtrack'=>1)
    .return (rx252_cur)
  rx252_restart815:
    repr_get_attr_obj rx252_cstack, rx252_cur, rx252_curclass, "$!cstack"
  rx252_fail816:
    unless rx252_bstack, rx252_done814
    pop $I19, rx252_bstack
    if_null rx252_cstack, rx252_cstack_done819
    unless rx252_cstack, rx252_cstack_done819
    dec $I19
    set $P11, rx252_cstack[$I19]
  rx252_cstack_done819:
    pop rx252_rep, rx252_bstack
    pop rx252_pos, rx252_bstack
    pop $I19, rx252_bstack
    lt rx252_pos, -1, rx252_done814
    lt rx252_pos, 0, rx252_fail816
    eq $I19, 0, rx252_fail816
    nqp_islist $I20, rx252_cstack
    unless $I20, rx252_jump817
    elements $I18, rx252_bstack
    le $I18, 0, rx252_cut818
    dec $I18
    set $I18, rx252_bstack[$I18]
  rx252_cut818:
    assign rx252_cstack, $I18
  rx252_jump817:
    jump $I19
  rx252_done814:
    rx252_cur."!cursor_fail"()
    .return (rx252_cur) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_50_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 789
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx255_tgt
    .local int rx255_pos
    .local int rx255_off
    .local int rx255_eos
    .local int rx255_rep
    .local pmc rx255_cur
    .local pmc rx255_curclass
    .local pmc rx255_bstack
    .local pmc rx255_cstack
    (rx255_cur, rx255_tgt, rx255_pos, rx255_curclass, rx255_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx255_cur
    length rx255_eos, rx255_tgt
    eq $I19, 1, rx255_restart828
    gt rx255_pos, rx255_eos, rx255_fail829
    repr_get_attr_int $I11, self, rx255_curclass, "$!from"
    ne $I11, -1, rxscan256_done835
    goto rxscan256_scan834
  rxscan256_loop833:
    inc rx255_pos
    gt rx255_pos, rx255_eos, rx255_fail829
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!from", rx255_pos
  rxscan256_scan834:
    nqp_rxmark rx255_bstack, rxscan256_loop833, rx255_pos, 0
  rxscan256_done835:
  alt257_0837:
    nqp_rxmark rx255_bstack, alt257_1838, rx255_pos, 0
    ge rx255_pos, rx255_eos, rx255_fail829
    substr $S11, rx255_tgt, rx255_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx255_fail829
    goto alt257_end836
  alt257_1838:
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
  alt257_end836:
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    nqp_rxmark rx255_bstack, rxsubrule260_pass841, -1, 0
  rxsubrule260_pass841:
    rx255_cstack = rx255_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
    rx255_cur."!cursor_pass"(rx255_pos, "block", 'backtrack'=>1)
    .return (rx255_cur)
  rx255_restart828:
    repr_get_attr_obj rx255_cstack, rx255_cur, rx255_curclass, "$!cstack"
  rx255_fail829:
    unless rx255_bstack, rx255_done827
    pop $I19, rx255_bstack
    if_null rx255_cstack, rx255_cstack_done832
    unless rx255_cstack, rx255_cstack_done832
    dec $I19
    set $P11, rx255_cstack[$I19]
  rx255_cstack_done832:
    pop rx255_rep, rx255_bstack
    pop rx255_pos, rx255_bstack
    pop $I19, rx255_bstack
    lt rx255_pos, -1, rx255_done827
    lt rx255_pos, 0, rx255_fail829
    eq $I19, 0, rx255_fail829
    nqp_islist $I20, rx255_cstack
    unless $I20, rx255_jump830
    elements $I18, rx255_bstack
    le $I18, 0, rx255_cut831
    dec $I18
    set $I18, rx255_bstack[$I18]
  rx255_cut831:
    assign rx255_cstack, $I18
  rx255_jump830:
    jump $I19
  rx255_done827:
    rx255_cur."!cursor_fail"()
    .return (rx255_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_51_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 795
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart844
    gt rx261_pos, rx261_eos, rx261_fail845
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done851
    goto rxscan262_scan850
  rxscan262_loop849:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail845
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan850:
    nqp_rxmark rx261_bstack, rxscan262_loop849, rx261_pos, 0
  rxscan262_done851:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    store_lex unicode:"$\x{a2}", rx261_cur
    unless_null $P101, fallback852
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback853
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback853:
    unless_null $P5002, vivi_263854
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_263854:
    set $P101, $P5002
  fallback852:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt265_0857:
    nqp_rxmark rx261_bstack, alt265_1859, rx261_pos, 0
    add $I11, rx261_pos, 14
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx261_fail845
    add rx261_pos, 14
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    nqp_rxmark rx261_bstack, rxsubrule266_pass858, -1, 0
  rxsubrule266_pass858:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    goto alt265_end856
  alt265_1859:
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"{", rx261_fail845
    add rx261_pos, 1
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    nqp_rxmark rx261_bstack, rxsubrule267_pass860, -1, 0
  rxsubrule267_pass860:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt268_0862:
    nqp_rxmark rx261_bstack, alt268_1863, rx261_pos, 0
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"}", rx261_fail845
    add rx261_pos, 1
    goto alt268_end861
  alt268_1863:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    goto rxsubrule269_pass864
  rxsubrule269_back865:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
  rxsubrule269_pass864:
    rx261_cstack = rx261_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule269_back865
    push rx261_bstack, $I11
    push rx261_bstack, 0
    push rx261_bstack, rx261_pos
    elements $I11, rx261_cstack
    push rx261_bstack, $I11
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt268_end861:
  alt265_end856:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    rx261_cur."!cursor_pass"(rx261_pos, "blockoid", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart844:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail845:
    unless rx261_bstack, rx261_done843
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done848
    unless rx261_cstack, rx261_cstack_done848
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done848:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done843
    lt rx261_pos, 0, rx261_fail845
    eq $I19, 0, rx261_fail845
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump846
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut847
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut847:
    assign rx261_cstack, $I18
  rx261_jump846:
    jump $I19
  rx261_done843:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_52_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 805
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx270_tgt
    .local int rx270_pos
    .local int rx270_off
    .local int rx270_eos
    .local int rx270_rep
    .local pmc rx270_cur
    .local pmc rx270_curclass
    .local pmc rx270_bstack
    .local pmc rx270_cstack
    (rx270_cur, rx270_tgt, rx270_pos, rx270_curclass, rx270_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx270_cur
    length rx270_eos, rx270_tgt
    eq $I19, 1, rx270_restart868
    gt rx270_pos, rx270_eos, rx270_fail869
    repr_get_attr_int $I11, self, rx270_curclass, "$!from"
    ne $I11, -1, rxscan271_done875
    goto rxscan271_scan874
  rxscan271_loop873:
    inc rx270_pos
    gt rx270_pos, rx270_eos, rx270_fail869
    repr_bind_attr_int rx270_cur, rx270_curclass, "$!from", rx270_pos
  rxscan271_scan874:
    nqp_rxmark rx270_bstack, rxscan271_loop873, rx270_pos, 0
  rxscan271_done875:
    rx270_cur."!cursor_pass"(rx270_pos, "newpad", 'backtrack'=>1)
    .return (rx270_cur)
  rx270_restart868:
    repr_get_attr_obj rx270_cstack, rx270_cur, rx270_curclass, "$!cstack"
  rx270_fail869:
    unless rx270_bstack, rx270_done867
    pop $I19, rx270_bstack
    if_null rx270_cstack, rx270_cstack_done872
    unless rx270_cstack, rx270_cstack_done872
    dec $I19
    set $P11, rx270_cstack[$I19]
  rx270_cstack_done872:
    pop rx270_rep, rx270_bstack
    pop rx270_pos, rx270_bstack
    pop $I19, rx270_bstack
    lt rx270_pos, -1, rx270_done867
    lt rx270_pos, 0, rx270_fail869
    eq $I19, 0, rx270_fail869
    nqp_islist $I20, rx270_cstack
    unless $I20, rx270_jump870
    elements $I18, rx270_bstack
    le $I18, 0, rx270_cut871
    dec $I18
    set $I18, rx270_bstack[$I18]
  rx270_cut871:
    assign rx270_cstack, $I18
  rx270_jump870:
    jump $I19
  rx270_done867:
    rx270_cur."!cursor_fail"()
    .return (rx270_cur) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_53_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 806
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx273_tgt
    .local int rx273_pos
    .local int rx273_off
    .local int rx273_eos
    .local int rx273_rep
    .local pmc rx273_cur
    .local pmc rx273_curclass
    .local pmc rx273_bstack
    .local pmc rx273_cstack
    (rx273_cur, rx273_tgt, rx273_pos, rx273_curclass, rx273_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx273_cur
    length rx273_eos, rx273_tgt
    eq $I19, 1, rx273_restart879
    gt rx273_pos, rx273_eos, rx273_fail880
    repr_get_attr_int $I11, self, rx273_curclass, "$!from"
    ne $I11, -1, rxscan274_done886
    goto rxscan274_scan885
  rxscan274_loop884:
    inc rx273_pos
    gt rx273_pos, rx273_eos, rx273_fail880
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!from", rx273_pos
  rxscan274_scan885:
    nqp_rxmark rx273_bstack, rxscan274_loop884, rx273_pos, 0
  rxscan274_done886:
    rx273_cur."!cursor_pass"(rx273_pos, "outerctx", 'backtrack'=>1)
    .return (rx273_cur)
  rx273_restart879:
    repr_get_attr_obj rx273_cstack, rx273_cur, rx273_curclass, "$!cstack"
  rx273_fail880:
    unless rx273_bstack, rx273_done878
    pop $I19, rx273_bstack
    if_null rx273_cstack, rx273_cstack_done883
    unless rx273_cstack, rx273_cstack_done883
    dec $I19
    set $P11, rx273_cstack[$I19]
  rx273_cstack_done883:
    pop rx273_rep, rx273_bstack
    pop rx273_pos, rx273_bstack
    pop $I19, rx273_bstack
    lt rx273_pos, -1, rx273_done878
    lt rx273_pos, 0, rx273_fail880
    eq $I19, 0, rx273_fail880
    nqp_islist $I20, rx273_cstack
    unless $I20, rx273_jump881
    elements $I18, rx273_bstack
    le $I18, 0, rx273_cut882
    dec $I18
    set $I18, rx273_bstack[$I18]
  rx273_cut882:
    assign rx273_cstack, $I18
  rx273_jump881:
    jump $I19
  rx273_done878:
    rx273_cur."!cursor_fail"()
    .return (rx273_cur) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_54_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 807
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx276_tgt
    .local int rx276_pos
    .local int rx276_off
    .local int rx276_eos
    .local int rx276_rep
    .local pmc rx276_cur
    .local pmc rx276_curclass
    .local pmc rx276_bstack
    .local pmc rx276_cstack
    (rx276_cur, rx276_tgt, rx276_pos, rx276_curclass, rx276_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx276_cur
    length rx276_eos, rx276_tgt
    eq $I19, 1, rx276_restart890
    gt rx276_pos, rx276_eos, rx276_fail891
    repr_get_attr_int $I11, self, rx276_curclass, "$!from"
    ne $I11, -1, rxscan277_done897
    goto rxscan277_scan896
  rxscan277_loop895:
    inc rx276_pos
    gt rx276_pos, rx276_eos, rx276_fail891
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!from", rx276_pos
  rxscan277_scan896:
    nqp_rxmark rx276_bstack, rxscan277_loop895, rx276_pos, 0
  rxscan277_done897:
    rx276_cur."!cursor_pass"(rx276_pos, "finishpad", 'backtrack'=>1)
    .return (rx276_cur)
  rx276_restart890:
    repr_get_attr_obj rx276_cstack, rx276_cur, rx276_curclass, "$!cstack"
  rx276_fail891:
    unless rx276_bstack, rx276_done889
    pop $I19, rx276_bstack
    if_null rx276_cstack, rx276_cstack_done894
    unless rx276_cstack, rx276_cstack_done894
    dec $I19
    set $P11, rx276_cstack[$I19]
  rx276_cstack_done894:
    pop rx276_rep, rx276_bstack
    pop rx276_pos, rx276_bstack
    pop $I19, rx276_bstack
    lt rx276_pos, -1, rx276_done889
    lt rx276_pos, 0, rx276_fail891
    eq $I19, 0, rx276_fail891
    nqp_islist $I20, rx276_cstack
    unless $I20, rx276_jump892
    elements $I18, rx276_bstack
    le $I18, 0, rx276_cut893
    dec $I18
    set $I18, rx276_bstack[$I18]
  rx276_cut893:
    assign rx276_cstack, $I18
  rx276_jump892:
    jump $I19
  rx276_done889:
    rx276_cur."!cursor_fail"()
    .return (rx276_cur) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_55_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 808
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx279_tgt
    .local int rx279_pos
    .local int rx279_off
    .local int rx279_eos
    .local int rx279_rep
    .local pmc rx279_cur
    .local pmc rx279_curclass
    .local pmc rx279_bstack
    .local pmc rx279_cstack
    (rx279_cur, rx279_tgt, rx279_pos, rx279_curclass, rx279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx279_cur
    length rx279_eos, rx279_tgt
    eq $I19, 1, rx279_restart901
    gt rx279_pos, rx279_eos, rx279_fail902
    repr_get_attr_int $I11, self, rx279_curclass, "$!from"
    ne $I11, -1, rxscan280_done908
    goto rxscan280_scan907
  rxscan280_loop906:
    inc rx279_pos
    gt rx279_pos, rx279_eos, rx279_fail902
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!from", rx279_pos
  rxscan280_scan907:
    nqp_rxmark rx279_bstack, rxscan280_loop906, rx279_pos, 0
  rxscan280_done908:
    rx279_cur."!cursor_pass"(rx279_pos, "you_are_here", 'backtrack'=>1)
    .return (rx279_cur)
  rx279_restart901:
    repr_get_attr_obj rx279_cstack, rx279_cur, rx279_curclass, "$!cstack"
  rx279_fail902:
    unless rx279_bstack, rx279_done900
    pop $I19, rx279_bstack
    if_null rx279_cstack, rx279_cstack_done905
    unless rx279_cstack, rx279_cstack_done905
    dec $I19
    set $P11, rx279_cstack[$I19]
  rx279_cstack_done905:
    pop rx279_rep, rx279_bstack
    pop rx279_pos, rx279_bstack
    pop $I19, rx279_bstack
    lt rx279_pos, -1, rx279_done900
    lt rx279_pos, 0, rx279_fail902
    eq $I19, 0, rx279_fail902
    nqp_islist $I20, rx279_cstack
    unless $I20, rx279_jump903
    elements $I18, rx279_bstack
    le $I18, 0, rx279_cut904
    dec $I18
    set $I18, rx279_bstack[$I18]
  rx279_cut904:
    assign rx279_cstack, $I18
  rx279_jump903:
    jump $I19
  rx279_done900:
    rx279_cur."!cursor_fail"()
    .return (rx279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_56_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 810
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_57_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart912
    gt rx282_pos, rx282_eos, rx282_fail913
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done919
    goto rxscan283_scan918
  rxscan283_loop917:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail913
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan918:
    nqp_rxmark rx282_bstack, rxscan283_loop917, rx282_pos, 0
  rxscan283_done919:
    ge rx282_pos, rx282_eos, rx282_fail913
    substr $S11, rx282_tgt, rx282_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx282_fail913
    rx282_cur."!cursor_pass"(rx282_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart912:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail913:
    unless rx282_bstack, rx282_done911
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done916
    unless rx282_cstack, rx282_cstack_done916
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done916:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done911
    lt rx282_pos, 0, rx282_fail913
    eq $I19, 0, rx282_fail913
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump914
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut915
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut915:
    assign rx282_cstack, $I18
  rx282_jump914:
    jump $I19
  rx282_done911:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_58_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart922
    gt rx284_pos, rx284_eos, rx284_fail923
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done929
    goto rxscan285_scan928
  rxscan285_loop927:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail923
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan928:
    nqp_rxmark rx284_bstack, rxscan285_loop927, rx284_pos, 0
  rxscan285_done929:
    ge rx284_pos, rx284_eos, rx284_fail923
    substr $S11, rx284_tgt, rx284_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx284_fail923
    rx284_cur."!cursor_pass"(rx284_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart922:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail923:
    unless rx284_bstack, rx284_done921
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done926
    unless rx284_cstack, rx284_cstack_done926
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done926:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done921
    lt rx284_pos, 0, rx284_fail923
    eq $I19, 0, rx284_fail923
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump924
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut925
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut925:
    assign rx284_cstack, $I18
  rx284_jump924:
    jump $I19
  rx284_done921:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_59_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_60_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx286_tgt
    .local int rx286_pos
    .local int rx286_off
    .local int rx286_eos
    .local int rx286_rep
    .local pmc rx286_cur
    .local pmc rx286_curclass
    .local pmc rx286_bstack
    .local pmc rx286_cstack
    (rx286_cur, rx286_tgt, rx286_pos, rx286_curclass, rx286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx286_cur
    length rx286_eos, rx286_tgt
    eq $I19, 1, rx286_restart932
    gt rx286_pos, rx286_eos, rx286_fail933
    repr_get_attr_int $I11, self, rx286_curclass, "$!from"
    ne $I11, -1, rxscan287_done939
    goto rxscan287_scan938
  rxscan287_loop937:
    inc rx286_pos
    gt rx286_pos, rx286_eos, rx286_fail933
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!from", rx286_pos
  rxscan287_scan938:
    nqp_rxmark rx286_bstack, rxscan287_loop937, rx286_pos, 0
  rxscan287_done939:
    nqp_rxmark rx286_bstack, rxcap288_fail941, rx286_pos, 0
    add $I11, rx286_pos, 3
    gt $I11, rx286_eos, rx286_fail933
    substr $S10, rx286_tgt, rx286_pos, 3
    ne $S10, ucs4:"use", rx286_fail933
    add rx286_pos, 3
    nqp_rxpeek $I19, rx286_bstack, rxcap288_fail941
    inc $I19
    set $I11, rx286_bstack[$I19]
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx286_pos)
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "sym")
    goto rxcap288_done940
  rxcap288_fail941:
    goto rx286_fail933
  rxcap288_done940:
    ge rx286_pos, rx286_eos, rx286_fail933
    is_cclass $I11, .CCLASS_WHITESPACE, rx286_tgt, rx286_pos
    unless $I11, rx286_fail933
    add rx286_pos, 1
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."name"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    nqp_rxmark rx286_bstack, rxsubrule290_pass943, -1, 0
  rxsubrule290_pass943:
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    rx286_cur."!cursor_pass"(rx286_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx286_cur)
  rx286_restart932:
    repr_get_attr_obj rx286_cstack, rx286_cur, rx286_curclass, "$!cstack"
  rx286_fail933:
    unless rx286_bstack, rx286_done931
    pop $I19, rx286_bstack
    if_null rx286_cstack, rx286_cstack_done936
    unless rx286_cstack, rx286_cstack_done936
    dec $I19
    set $P11, rx286_cstack[$I19]
  rx286_cstack_done936:
    pop rx286_rep, rx286_bstack
    pop rx286_pos, rx286_bstack
    pop $I19, rx286_bstack
    lt rx286_pos, -1, rx286_done931
    lt rx286_pos, 0, rx286_fail933
    eq $I19, 0, rx286_fail933
    nqp_islist $I20, rx286_cstack
    unless $I20, rx286_jump934
    elements $I18, rx286_bstack
    le $I18, 0, rx286_cut935
    dec $I18
    set $I18, rx286_bstack[$I18]
  rx286_cut935:
    assign rx286_cstack, $I18
  rx286_jump934:
    jump $I19
  rx286_done931:
    rx286_cur."!cursor_fail"()
    .return (rx286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_61_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 823
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx292_tgt
    .local int rx292_pos
    .local int rx292_off
    .local int rx292_eos
    .local int rx292_rep
    .local pmc rx292_cur
    .local pmc rx292_curclass
    .local pmc rx292_bstack
    .local pmc rx292_cstack
    (rx292_cur, rx292_tgt, rx292_pos, rx292_curclass, rx292_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx292_cur
    length rx292_eos, rx292_tgt
    eq $I19, 1, rx292_restart947
    gt rx292_pos, rx292_eos, rx292_fail948
    repr_get_attr_int $I11, self, rx292_curclass, "$!from"
    ne $I11, -1, rxscan293_done954
    goto rxscan293_scan953
  rxscan293_loop952:
    inc rx292_pos
    gt rx292_pos, rx292_eos, rx292_fail948
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!from", rx292_pos
  rxscan293_scan953:
    nqp_rxmark rx292_bstack, rxscan293_loop952, rx292_pos, 0
  rxscan293_done954:
    nqp_rxmark rx292_bstack, rxcap294_fail956, rx292_pos, 0
    add $I11, rx292_pos, 2
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 2
    ne $S10, ucs4:"if", rx292_fail948
    add rx292_pos, 2
    nqp_rxpeek $I19, rx292_bstack, rxcap294_fail956
    inc $I19
    set $I11, rx292_bstack[$I19]
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx292_pos)
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "sym")
    goto rxcap294_done955
  rxcap294_fail956:
    goto rx292_fail948
  rxcap294_done955:
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule296_pass958, -1, 0
  rxsubrule296_pass958:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxmark rx292_bstack, rxquantr298_done961, rx292_pos, 0
  rxquantr298_loop960:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    add $I11, rx292_pos, 5
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 5
    ne $S10, ucs4:"elsif", rx292_fail948
    add rx292_pos, 5
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule301_pass964, -1, 0
  rxsubrule301_pass964:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxpeek $I19, rx292_bstack, rxquantr298_done961
    inc $I19
    inc $I19
    set rx292_rep, rx292_bstack[$I19]
    nqp_rxcommit rx292_bstack, rxquantr298_done961
    inc rx292_rep
    nqp_rxmark rx292_bstack, rxquantr298_done961, rx292_pos, rx292_rep
    goto rxquantr298_loop960
  rxquantr298_done961:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxmark rx292_bstack, rxquantr304_done968, rx292_pos, 0
  rxquantr304_loop967:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    add $I11, rx292_pos, 4
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 4
    ne $S10, ucs4:"else", rx292_fail948
    add rx292_pos, 4
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule307_pass971, -1, 0
  rxsubrule307_pass971:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxpeek $I19, rx292_bstack, rxquantr304_done968
    inc $I19
    inc $I19
    set rx292_rep, rx292_bstack[$I19]
    nqp_rxcommit rx292_bstack, rxquantr304_done968
    inc rx292_rep
  rxquantr304_done968:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    rx292_cur."!cursor_pass"(rx292_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx292_cur)
  rx292_restart947:
    repr_get_attr_obj rx292_cstack, rx292_cur, rx292_curclass, "$!cstack"
  rx292_fail948:
    unless rx292_bstack, rx292_done946
    pop $I19, rx292_bstack
    if_null rx292_cstack, rx292_cstack_done951
    unless rx292_cstack, rx292_cstack_done951
    dec $I19
    set $P11, rx292_cstack[$I19]
  rx292_cstack_done951:
    pop rx292_rep, rx292_bstack
    pop rx292_pos, rx292_bstack
    pop $I19, rx292_bstack
    lt rx292_pos, -1, rx292_done946
    lt rx292_pos, 0, rx292_fail948
    eq $I19, 0, rx292_fail948
    nqp_islist $I20, rx292_cstack
    unless $I20, rx292_jump949
    elements $I18, rx292_bstack
    le $I18, 0, rx292_cut950
    dec $I18
    set $I18, rx292_bstack[$I18]
  rx292_cut950:
    assign rx292_cstack, $I18
  rx292_jump949:
    jump $I19
  rx292_done946:
    rx292_cur."!cursor_fail"()
    .return (rx292_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_62_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_63_1359718901.265' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx310_tgt
    .local int rx310_pos
    .local int rx310_off
    .local int rx310_eos
    .local int rx310_rep
    .local pmc rx310_cur
    .local pmc rx310_curclass
    .local pmc rx310_bstack
    .local pmc rx310_cstack
    (rx310_cur, rx310_tgt, rx310_pos, rx310_curclass, rx310_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx310_cur
    length rx310_eos, rx310_tgt
    eq $I19, 1, rx310_restart976
    gt rx310_pos, rx310_eos, rx310_fail977
    repr_get_attr_int $I11, self, rx310_curclass, "$!from"
    ne $I11, -1, rxscan311_done983
    goto rxscan311_scan982
  rxscan311_loop981:
    inc rx310_pos
    gt rx310_pos, rx310_eos, rx310_fail977
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!from", rx310_pos
  rxscan311_scan982:
    nqp_rxmark rx310_bstack, rxscan311_loop981, rx310_pos, 0
  rxscan311_done983:
    nqp_rxmark rx310_bstack, rxcap312_fail985, rx310_pos, 0
    add $I11, rx310_pos, 6
    gt $I11, rx310_eos, rx310_fail977
    substr $S10, rx310_tgt, rx310_pos, 6
    ne $S10, ucs4:"unless", rx310_fail977
    add rx310_pos, 6
    nqp_rxpeek $I19, rx310_bstack, rxcap312_fail985
    inc $I19
    set $I11, rx310_bstack[$I19]
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx310_pos)
    rx310_cstack = rx310_cur."!cursor_capture"($P11, "sym")
    goto rxcap312_done984
  rxcap312_fail985:
    goto rx310_fail977
  rxcap312_done984:
    ge rx310_pos, rx310_eos, rx310_fail977
    is_cclass $I11, .CCLASS_WHITESPACE, rx310_tgt, rx310_pos
    unless $I11, rx310_fail977
    add rx310_pos, 1
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    nqp_rxmark rx310_bstack, rxsubrule314_pass987, -1, 0
  rxsubrule314_pass987:
    rx310_cstack = rx310_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
  alt316_0990:
    nqp_rxmark rx310_bstack, alt316_11003, rx310_pos, 0
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_63_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    ge $I11, 0, rx310_fail977
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    goto alt316_end989
  alt316_11003:
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
  alt316_end989:
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    rx310_cur."!cursor_pass"(rx310_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx310_cur)
  rx310_restart976:
    repr_get_attr_obj rx310_cstack, rx310_cur, rx310_curclass, "$!cstack"
  rx310_fail977:
    unless rx310_bstack, rx310_done975
    pop $I19, rx310_bstack
    if_null rx310_cstack, rx310_cstack_done980
    unless rx310_cstack, rx310_cstack_done980
    dec $I19
    set $P11, rx310_cstack[$I19]
  rx310_cstack_done980:
    pop rx310_rep, rx310_bstack
    pop rx310_pos, rx310_bstack
    pop $I19, rx310_bstack
    lt rx310_pos, -1, rx310_done975
    lt rx310_pos, 0, rx310_fail977
    eq $I19, 0, rx310_fail977
    nqp_islist $I20, rx310_cstack
    unless $I20, rx310_jump978
    elements $I18, rx310_bstack
    le $I18, 0, rx310_cut979
    dec $I18
    set $I18, rx310_bstack[$I18]
  rx310_cut979:
    assign rx310_cstack, $I18
  rx310_jump978:
    jump $I19
  rx310_done975:
    rx310_cur."!cursor_fail"()
    .return (rx310_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_63_1359718901.265") :anon :lex :outer("cuid_62_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx318_tgt
    .local int rx318_pos
    .local int rx318_off
    .local int rx318_eos
    .local int rx318_rep
    .local pmc rx318_cur
    .local pmc rx318_curclass
    .local pmc rx318_bstack
    .local pmc rx318_cstack
    (rx318_cur, rx318_tgt, rx318_pos, rx318_curclass, rx318_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx318_cur
    length rx318_eos, rx318_tgt
    eq $I19, 1, rx318_restart994
    gt rx318_pos, rx318_eos, rx318_fail995
    repr_get_attr_int $I11, self, rx318_curclass, "$!from"
    ne $I11, -1, rxscan319_done1001
    goto rxscan319_scan1000
  rxscan319_loop999:
    inc rx318_pos
    gt rx318_pos, rx318_eos, rx318_fail995
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!from", rx318_pos
  rxscan319_scan1000:
    nqp_rxmark rx318_bstack, rxscan319_loop999, rx318_pos, 0
  rxscan319_done1001:
    add $I11, rx318_pos, 4
    gt $I11, rx318_eos, rx318_fail995
    substr $S10, rx318_tgt, rx318_pos, 4
    ne $S10, ucs4:"else", rx318_fail995
    add rx318_pos, 4
    rx318_cur."!cursor_pass"(rx318_pos, 'backtrack'=>1)
    .return (rx318_cur)
  rx318_restart994:
    repr_get_attr_obj rx318_cstack, rx318_cur, rx318_curclass, "$!cstack"
  rx318_fail995:
    unless rx318_bstack, rx318_done993
    pop $I19, rx318_bstack
    if_null rx318_cstack, rx318_cstack_done998
    unless rx318_cstack, rx318_cstack_done998
    dec $I19
    set $P11, rx318_cstack[$I19]
  rx318_cstack_done998:
    pop rx318_rep, rx318_bstack
    pop rx318_pos, rx318_bstack
    pop $I19, rx318_bstack
    lt rx318_pos, -1, rx318_done993
    lt rx318_pos, 0, rx318_fail995
    eq $I19, 0, rx318_fail995
    nqp_islist $I20, rx318_cstack
    unless $I20, rx318_jump996
    elements $I18, rx318_bstack
    le $I18, 0, rx318_cut997
    dec $I18
    set $I18, rx318_bstack[$I18]
  rx318_cut997:
    assign rx318_cstack, $I18
  rx318_jump996:
    jump $I19
  rx318_done993:
    rx318_cur."!cursor_fail"()
    .return (rx318_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_64_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 836
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx325_tgt
    .local int rx325_pos
    .local int rx325_off
    .local int rx325_eos
    .local int rx325_rep
    .local pmc rx325_cur
    .local pmc rx325_curclass
    .local pmc rx325_bstack
    .local pmc rx325_cstack
    (rx325_cur, rx325_tgt, rx325_pos, rx325_curclass, rx325_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx325_cur
    length rx325_eos, rx325_tgt
    eq $I19, 1, rx325_restart1010
    gt rx325_pos, rx325_eos, rx325_fail1011
    repr_get_attr_int $I11, self, rx325_curclass, "$!from"
    ne $I11, -1, rxscan326_done1017
    goto rxscan326_scan1016
  rxscan326_loop1015:
    inc rx325_pos
    gt rx325_pos, rx325_eos, rx325_fail1011
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!from", rx325_pos
  rxscan326_scan1016:
    nqp_rxmark rx325_bstack, rxscan326_loop1015, rx325_pos, 0
  rxscan326_done1017:
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    store_lex unicode:"$\x{a2}", rx325_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx325_bstack, rxcap327_fail1019, rx325_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt328_01021
    nqp_push_label $P11, alt328_11022
    nqp_rxmark rx325_bstack, alt328_end1020, -1, 0
    rx325_cur."!alt"(rx325_pos, "alt_nfa__12_1359718902.801", $P11)
    goto rx325_fail1011
  alt328_01021:
    add $I11, rx325_pos, 5
    gt $I11, rx325_eos, rx325_fail1011
    substr $S10, rx325_tgt, rx325_pos, 5
    ne $S10, ucs4:"while", rx325_fail1011
    add rx325_pos, 5
    goto alt328_end1020
  alt328_11022:
    add $I11, rx325_pos, 5
    gt $I11, rx325_eos, rx325_fail1011
    substr $S10, rx325_tgt, rx325_pos, 5
    ne $S10, ucs4:"until", rx325_fail1011
    add rx325_pos, 5
    goto alt328_end1020
  alt328_end1020:
    nqp_rxcommit rx325_bstack, alt328_end1020
    nqp_rxpeek $I19, rx325_bstack, rxcap327_fail1019
    inc $I19
    set $I11, rx325_bstack[$I19]
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx325_pos)
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "sym")
    goto rxcap327_done1018
  rxcap327_fail1019:
    goto rx325_fail1011
  rxcap327_done1018:
    ge rx325_pos, rx325_eos, rx325_fail1011
    is_cclass $I11, .CCLASS_WHITESPACE, rx325_tgt, rx325_pos
    unless $I11, rx325_fail1011
    add rx325_pos, 1
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."ws"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    nqp_rxmark rx325_bstack, rxsubrule330_pass1024, -1, 0
  rxsubrule330_pass1024:
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."ws"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    rx325_cur."!cursor_pass"(rx325_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx325_cur)
  rx325_restart1010:
    repr_get_attr_obj rx325_cstack, rx325_cur, rx325_curclass, "$!cstack"
  rx325_fail1011:
    unless rx325_bstack, rx325_done1009
    pop $I19, rx325_bstack
    if_null rx325_cstack, rx325_cstack_done1014
    unless rx325_cstack, rx325_cstack_done1014
    dec $I19
    set $P11, rx325_cstack[$I19]
  rx325_cstack_done1014:
    pop rx325_rep, rx325_bstack
    pop rx325_pos, rx325_bstack
    pop $I19, rx325_bstack
    lt rx325_pos, -1, rx325_done1009
    lt rx325_pos, 0, rx325_fail1011
    eq $I19, 0, rx325_fail1011
    nqp_islist $I20, rx325_cstack
    unless $I20, rx325_jump1012
    elements $I18, rx325_bstack
    le $I18, 0, rx325_cut1013
    dec $I18
    set $I18, rx325_bstack[$I18]
  rx325_cut1013:
    assign rx325_cstack, $I18
  rx325_jump1012:
    jump $I19
  rx325_done1009:
    rx325_cur."!cursor_fail"()
    .return (rx325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_65_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 842
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx332_tgt
    .local int rx332_pos
    .local int rx332_off
    .local int rx332_eos
    .local int rx332_rep
    .local pmc rx332_cur
    .local pmc rx332_curclass
    .local pmc rx332_bstack
    .local pmc rx332_cstack
    (rx332_cur, rx332_tgt, rx332_pos, rx332_curclass, rx332_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx332_cur
    length rx332_eos, rx332_tgt
    eq $I19, 1, rx332_restart1028
    gt rx332_pos, rx332_eos, rx332_fail1029
    repr_get_attr_int $I11, self, rx332_curclass, "$!from"
    ne $I11, -1, rxscan333_done1035
    goto rxscan333_scan1034
  rxscan333_loop1033:
    inc rx332_pos
    gt rx332_pos, rx332_eos, rx332_fail1029
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!from", rx332_pos
  rxscan333_scan1034:
    nqp_rxmark rx332_bstack, rxscan333_loop1033, rx332_pos, 0
  rxscan333_done1035:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    store_lex unicode:"$\x{a2}", rx332_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx332_bstack, rxcap334_fail1037, rx332_pos, 0
    add $I11, rx332_pos, 6
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 6
    ne $S10, ucs4:"repeat", rx332_fail1029
    add rx332_pos, 6
    nqp_rxpeek $I19, rx332_bstack, rxcap334_fail1037
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "sym")
    goto rxcap334_done1036
  rxcap334_fail1037:
    goto rx332_fail1029
  rxcap334_done1036:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt336_01040
    nqp_push_label $P11, alt336_11050
    nqp_rxmark rx332_bstack, alt336_end1039, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__15_1359718902.822", $P11)
    goto rx332_fail1029
  alt336_01040:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    nqp_rxmark rx332_bstack, rxcap338_fail1043, rx332_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt339_01045
    nqp_push_label $P11, alt339_11046
    nqp_rxmark rx332_bstack, alt339_end1044, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__13_1359718902.822", $P11)
    goto rx332_fail1029
  alt339_01045:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"while", rx332_fail1029
    add rx332_pos, 5
    goto alt339_end1044
  alt339_11046:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"until", rx332_fail1029
    add rx332_pos, 5
    goto alt339_end1044
  alt339_end1044:
    nqp_rxcommit rx332_bstack, alt339_end1044
    nqp_rxpeek $I19, rx332_bstack, rxcap338_fail1043
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "wu")
    goto rxcap338_done1042
  rxcap338_fail1043:
    goto rx332_fail1029
  rxcap338_done1042:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule341_pass1048, -1, 0
  rxsubrule341_pass1048:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    goto alt336_end1039
  alt336_11050:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule344_pass1052, -1, 0
  rxsubrule344_pass1052:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    nqp_rxmark rx332_bstack, rxcap346_fail1055, rx332_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt347_01057
    nqp_push_label $P11, alt347_11058
    nqp_rxmark rx332_bstack, alt347_end1056, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__14_1359718902.822", $P11)
    goto rx332_fail1029
  alt347_01057:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"while", rx332_fail1029
    add rx332_pos, 5
    goto alt347_end1056
  alt347_11058:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"until", rx332_fail1029
    add rx332_pos, 5
    goto alt347_end1056
  alt347_end1056:
    nqp_rxcommit rx332_bstack, alt347_end1056
    nqp_rxpeek $I19, rx332_bstack, rxcap346_fail1055
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "wu")
    goto rxcap346_done1054
  rxcap346_fail1055:
    goto rx332_fail1029
  rxcap346_done1054:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule349_pass1060, -1, 0
  rxsubrule349_pass1060:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    goto alt336_end1039
  alt336_end1039:
    nqp_rxcommit rx332_bstack, alt336_end1039
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    rx332_cur."!cursor_pass"(rx332_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx332_cur)
  rx332_restart1028:
    repr_get_attr_obj rx332_cstack, rx332_cur, rx332_curclass, "$!cstack"
  rx332_fail1029:
    unless rx332_bstack, rx332_done1027
    pop $I19, rx332_bstack
    if_null rx332_cstack, rx332_cstack_done1032
    unless rx332_cstack, rx332_cstack_done1032
    dec $I19
    set $P11, rx332_cstack[$I19]
  rx332_cstack_done1032:
    pop rx332_rep, rx332_bstack
    pop rx332_pos, rx332_bstack
    pop $I19, rx332_bstack
    lt rx332_pos, -1, rx332_done1027
    lt rx332_pos, 0, rx332_fail1029
    eq $I19, 0, rx332_fail1029
    nqp_islist $I20, rx332_cstack
    unless $I20, rx332_jump1030
    elements $I18, rx332_bstack
    le $I18, 0, rx332_cut1031
    dec $I18
    set $I18, rx332_bstack[$I18]
  rx332_cut1031:
    assign rx332_cstack, $I18
  rx332_jump1030:
    jump $I19
  rx332_done1027:
    rx332_cur."!cursor_fail"()
    .return (rx332_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_66_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    (rx352_cur, rx352_tgt, rx352_pos, rx352_curclass, rx352_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart1065
    gt rx352_pos, rx352_eos, rx352_fail1066
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done1072
    goto rxscan353_scan1071
  rxscan353_loop1070:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail1066
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan1071:
    nqp_rxmark rx352_bstack, rxscan353_loop1070, rx352_pos, 0
  rxscan353_done1072:
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    store_lex unicode:"$\x{a2}", rx352_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx352_bstack, rxcap354_fail1074, rx352_pos, 0
    add $I11, rx352_pos, 3
    gt $I11, rx352_eos, rx352_fail1066
    substr $S10, rx352_tgt, rx352_pos, 3
    ne $S10, ucs4:"for", rx352_fail1066
    add rx352_pos, 3
    nqp_rxpeek $I19, rx352_bstack, rxcap354_fail1074
    inc $I19
    set $I11, rx352_bstack[$I19]
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx352_pos)
    rx352_cstack = rx352_cur."!cursor_capture"($P11, "sym")
    goto rxcap354_done1073
  rxcap354_fail1074:
    goto rx352_fail1066
  rxcap354_done1073:
    ge rx352_pos, rx352_eos, rx352_fail1066
    is_cclass $I11, .CCLASS_WHITESPACE, rx352_tgt, rx352_pos
    unless $I11, rx352_fail1066
    add rx352_pos, 1
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."ws"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    nqp_rxmark rx352_bstack, rxsubrule356_pass1076, -1, 0
  rxsubrule356_pass1076:
    rx352_cstack = rx352_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."ws"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    rx352_cur."!cursor_pass"(rx352_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart1065:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail1066:
    unless rx352_bstack, rx352_done1064
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done1069
    unless rx352_cstack, rx352_cstack_done1069
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done1069:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done1064
    lt rx352_pos, 0, rx352_fail1066
    eq $I19, 0, rx352_fail1066
    nqp_islist $I20, rx352_cstack
    unless $I20, rx352_jump1067
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut1068
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut1068:
    assign rx352_cstack, $I18
  rx352_jump1067:
    jump $I19
  rx352_done1064:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_67_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx358_tgt
    .local int rx358_pos
    .local int rx358_off
    .local int rx358_eos
    .local int rx358_rep
    .local pmc rx358_cur
    .local pmc rx358_curclass
    .local pmc rx358_bstack
    .local pmc rx358_cstack
    (rx358_cur, rx358_tgt, rx358_pos, rx358_curclass, rx358_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx358_cur
    length rx358_eos, rx358_tgt
    eq $I19, 1, rx358_restart1080
    gt rx358_pos, rx358_eos, rx358_fail1081
    repr_get_attr_int $I11, self, rx358_curclass, "$!from"
    ne $I11, -1, rxscan359_done1087
    goto rxscan359_scan1086
  rxscan359_loop1085:
    inc rx358_pos
    gt rx358_pos, rx358_eos, rx358_fail1081
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!from", rx358_pos
  rxscan359_scan1086:
    nqp_rxmark rx358_bstack, rxscan359_loop1085, rx358_pos, 0
  rxscan359_done1087:
    nqp_rxmark rx358_bstack, rxcap360_fail1089, rx358_pos, 0
    add $I11, rx358_pos, 5
    gt $I11, rx358_eos, rx358_fail1081
    substr $S10, rx358_tgt, rx358_pos, 5
    ne $S10, ucs4:"CATCH", rx358_fail1081
    add rx358_pos, 5
    nqp_rxpeek $I19, rx358_bstack, rxcap360_fail1089
    inc $I19
    set $I11, rx358_bstack[$I19]
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx358_pos)
    rx358_cstack = rx358_cur."!cursor_capture"($P11, "sym")
    goto rxcap360_done1088
  rxcap360_fail1089:
    goto rx358_fail1081
  rxcap360_done1088:
    ge rx358_pos, rx358_eos, rx358_fail1081
    is_cclass $I11, .CCLASS_WHITESPACE, rx358_tgt, rx358_pos
    unless $I11, rx358_fail1081
    add rx358_pos, 1
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."ws"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."block"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    nqp_rxmark rx358_bstack, rxsubrule362_pass1091, -1, 0
  rxsubrule362_pass1091:
    rx358_cstack = rx358_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."ws"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    rx358_cur."!cursor_pass"(rx358_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx358_cur)
  rx358_restart1080:
    repr_get_attr_obj rx358_cstack, rx358_cur, rx358_curclass, "$!cstack"
  rx358_fail1081:
    unless rx358_bstack, rx358_done1079
    pop $I19, rx358_bstack
    if_null rx358_cstack, rx358_cstack_done1084
    unless rx358_cstack, rx358_cstack_done1084
    dec $I19
    set $P11, rx358_cstack[$I19]
  rx358_cstack_done1084:
    pop rx358_rep, rx358_bstack
    pop rx358_pos, rx358_bstack
    pop $I19, rx358_bstack
    lt rx358_pos, -1, rx358_done1079
    lt rx358_pos, 0, rx358_fail1081
    eq $I19, 0, rx358_fail1081
    nqp_islist $I20, rx358_cstack
    unless $I20, rx358_jump1082
    elements $I18, rx358_bstack
    le $I18, 0, rx358_cut1083
    dec $I18
    set $I18, rx358_bstack[$I18]
  rx358_cut1083:
    assign rx358_cstack, $I18
  rx358_jump1082:
    jump $I19
  rx358_done1079:
    rx358_cur."!cursor_fail"()
    .return (rx358_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_68_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 862
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx364_tgt
    .local int rx364_pos
    .local int rx364_off
    .local int rx364_eos
    .local int rx364_rep
    .local pmc rx364_cur
    .local pmc rx364_curclass
    .local pmc rx364_bstack
    .local pmc rx364_cstack
    (rx364_cur, rx364_tgt, rx364_pos, rx364_curclass, rx364_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx364_cur
    length rx364_eos, rx364_tgt
    eq $I19, 1, rx364_restart1095
    gt rx364_pos, rx364_eos, rx364_fail1096
    repr_get_attr_int $I11, self, rx364_curclass, "$!from"
    ne $I11, -1, rxscan365_done1102
    goto rxscan365_scan1101
  rxscan365_loop1100:
    inc rx364_pos
    gt rx364_pos, rx364_eos, rx364_fail1096
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!from", rx364_pos
  rxscan365_scan1101:
    nqp_rxmark rx364_bstack, rxscan365_loop1100, rx364_pos, 0
  rxscan365_done1102:
    nqp_rxmark rx364_bstack, rxcap366_fail1104, rx364_pos, 0
    add $I11, rx364_pos, 7
    gt $I11, rx364_eos, rx364_fail1096
    substr $S10, rx364_tgt, rx364_pos, 7
    ne $S10, ucs4:"CONTROL", rx364_fail1096
    add rx364_pos, 7
    nqp_rxpeek $I19, rx364_bstack, rxcap366_fail1104
    inc $I19
    set $I11, rx364_bstack[$I19]
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx364_pos)
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "sym")
    goto rxcap366_done1103
  rxcap366_fail1104:
    goto rx364_fail1096
  rxcap366_done1103:
    ge rx364_pos, rx364_eos, rx364_fail1096
    is_cclass $I11, .CCLASS_WHITESPACE, rx364_tgt, rx364_pos
    unless $I11, rx364_fail1096
    add rx364_pos, 1
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."ws"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."block"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    nqp_rxmark rx364_bstack, rxsubrule368_pass1106, -1, 0
  rxsubrule368_pass1106:
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."ws"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    rx364_cur."!cursor_pass"(rx364_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx364_cur)
  rx364_restart1095:
    repr_get_attr_obj rx364_cstack, rx364_cur, rx364_curclass, "$!cstack"
  rx364_fail1096:
    unless rx364_bstack, rx364_done1094
    pop $I19, rx364_bstack
    if_null rx364_cstack, rx364_cstack_done1099
    unless rx364_cstack, rx364_cstack_done1099
    dec $I19
    set $P11, rx364_cstack[$I19]
  rx364_cstack_done1099:
    pop rx364_rep, rx364_bstack
    pop rx364_pos, rx364_bstack
    pop $I19, rx364_bstack
    lt rx364_pos, -1, rx364_done1094
    lt rx364_pos, 0, rx364_fail1096
    eq $I19, 0, rx364_fail1096
    nqp_islist $I20, rx364_cstack
    unless $I20, rx364_jump1097
    elements $I18, rx364_bstack
    le $I18, 0, rx364_cut1098
    dec $I18
    set $I18, rx364_bstack[$I18]
  rx364_cut1098:
    assign rx364_cstack, $I18
  rx364_jump1097:
    jump $I19
  rx364_done1094:
    rx364_cur."!cursor_fail"()
    .return (rx364_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_69_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 867
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_70_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    (rx370_cur, rx370_tgt, rx370_pos, rx370_curclass, rx370_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart1110
    gt rx370_pos, rx370_eos, rx370_fail1111
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done1117
    goto rxscan371_scan1116
  rxscan371_loop1115:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail1111
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan1116:
    nqp_rxmark rx370_bstack, rxscan371_loop1115, rx370_pos, 0
  rxscan371_done1117:
    nqp_rxmark rx370_bstack, rxcap372_fail1119, rx370_pos, 0
    add $I11, rx370_pos, 5
    gt $I11, rx370_eos, rx370_fail1111
    substr $S10, rx370_tgt, rx370_pos, 5
    ne $S10, ucs4:"BEGIN", rx370_fail1111
    add rx370_pos, 5
    nqp_rxpeek $I19, rx370_bstack, rxcap372_fail1119
    inc $I19
    set $I11, rx370_bstack[$I19]
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx370_pos)
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "sym")
    goto rxcap372_done1118
  rxcap372_fail1119:
    goto rx370_fail1111
  rxcap372_done1118:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail1111
    nqp_rxmark rx370_bstack, rxsubrule373_pass1120, -1, 0
  rxsubrule373_pass1120:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    rx370_cur."!cursor_pass"(rx370_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart1110:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail1111:
    unless rx370_bstack, rx370_done1109
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done1114
    unless rx370_cstack, rx370_cstack_done1114
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done1114:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done1109
    lt rx370_pos, 0, rx370_fail1111
    eq $I19, 0, rx370_fail1111
    nqp_islist $I20, rx370_cstack
    unless $I20, rx370_jump1112
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut1113
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut1113:
    assign rx370_cstack, $I18
  rx370_jump1112:
    jump $I19
  rx370_done1109:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_71_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    (rx374_cur, rx374_tgt, rx374_pos, rx374_curclass, rx374_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1123
    gt rx374_pos, rx374_eos, rx374_fail1124
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1130
    goto rxscan375_scan1129
  rxscan375_loop1128:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1124
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1129:
    nqp_rxmark rx374_bstack, rxscan375_loop1128, rx374_pos, 0
  rxscan375_done1130:
    nqp_rxmark rx374_bstack, rxcap376_fail1132, rx374_pos, 0
    add $I11, rx374_pos, 4
    gt $I11, rx374_eos, rx374_fail1124
    substr $S10, rx374_tgt, rx374_pos, 4
    ne $S10, ucs4:"INIT", rx374_fail1124
    add rx374_pos, 4
    nqp_rxpeek $I19, rx374_bstack, rxcap376_fail1132
    inc $I19
    set $I11, rx374_bstack[$I19]
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx374_pos)
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "sym")
    goto rxcap376_done1131
  rxcap376_fail1132:
    goto rx374_fail1124
  rxcap376_done1131:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1124
    nqp_rxmark rx374_bstack, rxsubrule377_pass1133, -1, 0
  rxsubrule377_pass1133:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    rx374_cur."!cursor_pass"(rx374_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1123:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1124:
    unless rx374_bstack, rx374_done1122
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1127
    unless rx374_cstack, rx374_cstack_done1127
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1127:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1122
    lt rx374_pos, 0, rx374_fail1124
    eq $I19, 0, rx374_fail1124
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1125
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1126
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1126:
    assign rx374_cstack, $I18
  rx374_jump1125:
    jump $I19
  rx374_done1122:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_72_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx378_tgt
    .local int rx378_pos
    .local int rx378_off
    .local int rx378_eos
    .local int rx378_rep
    .local pmc rx378_cur
    .local pmc rx378_curclass
    .local pmc rx378_bstack
    .local pmc rx378_cstack
    (rx378_cur, rx378_tgt, rx378_pos, rx378_curclass, rx378_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx378_cur
    length rx378_eos, rx378_tgt
    eq $I19, 1, rx378_restart1136
    gt rx378_pos, rx378_eos, rx378_fail1137
    repr_get_attr_int $I11, self, rx378_curclass, "$!from"
    ne $I11, -1, rxscan379_done1143
    goto rxscan379_scan1142
  rxscan379_loop1141:
    inc rx378_pos
    gt rx378_pos, rx378_eos, rx378_fail1137
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!from", rx378_pos
  rxscan379_scan1142:
    nqp_rxmark rx378_bstack, rxscan379_loop1141, rx378_pos, 0
  rxscan379_done1143:
    nqp_rxmark rx378_bstack, rxcap380_fail1145, rx378_pos, 0
    add $I11, rx378_pos, 3
    gt $I11, rx378_eos, rx378_fail1137
    substr $S10, rx378_tgt, rx378_pos, 3
    ne $S10, ucs4:"try", rx378_fail1137
    add rx378_pos, 3
    nqp_rxpeek $I19, rx378_bstack, rxcap380_fail1145
    inc $I19
    set $I11, rx378_bstack[$I19]
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx378_pos)
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "sym")
    goto rxcap380_done1144
  rxcap380_fail1145:
    goto rx378_fail1137
  rxcap380_done1144:
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1137
    nqp_rxmark rx378_bstack, rxsubrule381_pass1146, -1, 0
  rxsubrule381_pass1146:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    rx378_cur."!cursor_pass"(rx378_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx378_cur)
  rx378_restart1136:
    repr_get_attr_obj rx378_cstack, rx378_cur, rx378_curclass, "$!cstack"
  rx378_fail1137:
    unless rx378_bstack, rx378_done1135
    pop $I19, rx378_bstack
    if_null rx378_cstack, rx378_cstack_done1140
    unless rx378_cstack, rx378_cstack_done1140
    dec $I19
    set $P11, rx378_cstack[$I19]
  rx378_cstack_done1140:
    pop rx378_rep, rx378_bstack
    pop rx378_pos, rx378_bstack
    pop $I19, rx378_bstack
    lt rx378_pos, -1, rx378_done1135
    lt rx378_pos, 0, rx378_fail1137
    eq $I19, 0, rx378_fail1137
    nqp_islist $I20, rx378_cstack
    unless $I20, rx378_jump1138
    elements $I18, rx378_bstack
    le $I18, 0, rx378_cut1139
    dec $I18
    set $I18, rx378_bstack[$I18]
  rx378_cut1139:
    assign rx378_cstack, $I18
  rx378_jump1138:
    jump $I19
  rx378_done1135:
    rx378_cur."!cursor_fail"()
    .return (rx378_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_73_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 876
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx382_tgt
    .local int rx382_pos
    .local int rx382_off
    .local int rx382_eos
    .local int rx382_rep
    .local pmc rx382_cur
    .local pmc rx382_curclass
    .local pmc rx382_bstack
    .local pmc rx382_cstack
    (rx382_cur, rx382_tgt, rx382_pos, rx382_curclass, rx382_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx382_cur
    length rx382_eos, rx382_tgt
    eq $I19, 1, rx382_restart1149
    gt rx382_pos, rx382_eos, rx382_fail1150
    repr_get_attr_int $I11, self, rx382_curclass, "$!from"
    ne $I11, -1, rxscan383_done1156
    goto rxscan383_scan1155
  rxscan383_loop1154:
    inc rx382_pos
    gt rx382_pos, rx382_eos, rx382_fail1150
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!from", rx382_pos
  rxscan383_scan1155:
    nqp_rxmark rx382_bstack, rxscan383_loop1154, rx382_pos, 0
  rxscan383_done1156:
    ge rx382_pos, rx382_eos, rx382_fail1150
    is_cclass $I11, .CCLASS_WHITESPACE, rx382_tgt, rx382_pos
    unless $I11, rx382_fail1150
    add rx382_pos, 1
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."ws"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt385_01159
    nqp_push_label $P11, alt385_11161
    nqp_rxmark rx382_bstack, alt385_end1158, -1, 0
    rx382_cur."!alt"(rx382_pos, "alt_nfa__16_1359718902.874", $P11)
    goto rx382_fail1150
  alt385_01159:
    ge rx382_pos, rx382_eos, rx382_fail1150
    substr $S11, rx382_tgt, rx382_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx382_fail1150
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."block"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    nqp_rxmark rx382_bstack, rxsubrule386_pass1160, -1, 0
  rxsubrule386_pass1160:
    rx382_cstack = rx382_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    goto alt385_end1158
  alt385_11161:
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."statement"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    nqp_rxmark rx382_bstack, rxsubrule387_pass1162, -1, 0
  rxsubrule387_pass1162:
    rx382_cstack = rx382_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    goto alt385_end1158
  alt385_end1158:
    nqp_rxcommit rx382_bstack, alt385_end1158
    rx382_cur."!cursor_pass"(rx382_pos, "blorst", 'backtrack'=>1)
    .return (rx382_cur)
  rx382_restart1149:
    repr_get_attr_obj rx382_cstack, rx382_cur, rx382_curclass, "$!cstack"
  rx382_fail1150:
    unless rx382_bstack, rx382_done1148
    pop $I19, rx382_bstack
    if_null rx382_cstack, rx382_cstack_done1153
    unless rx382_cstack, rx382_cstack_done1153
    dec $I19
    set $P11, rx382_cstack[$I19]
  rx382_cstack_done1153:
    pop rx382_rep, rx382_bstack
    pop rx382_pos, rx382_bstack
    pop $I19, rx382_bstack
    lt rx382_pos, -1, rx382_done1148
    lt rx382_pos, 0, rx382_fail1150
    eq $I19, 0, rx382_fail1150
    nqp_islist $I20, rx382_cstack
    unless $I20, rx382_jump1151
    elements $I18, rx382_bstack
    le $I18, 0, rx382_cut1152
    dec $I18
    set $I18, rx382_bstack[$I18]
  rx382_cut1152:
    assign rx382_cstack, $I18
  rx382_jump1151:
    jump $I19
  rx382_done1148:
    rx382_cur."!cursor_fail"()
    .return (rx382_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_74_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 882
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_75_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 884
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx388_tgt
    .local int rx388_pos
    .local int rx388_off
    .local int rx388_eos
    .local int rx388_rep
    .local pmc rx388_cur
    .local pmc rx388_curclass
    .local pmc rx388_bstack
    .local pmc rx388_cstack
    (rx388_cur, rx388_tgt, rx388_pos, rx388_curclass, rx388_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx388_cur
    length rx388_eos, rx388_tgt
    eq $I19, 1, rx388_restart1165
    gt rx388_pos, rx388_eos, rx388_fail1166
    repr_get_attr_int $I11, self, rx388_curclass, "$!from"
    ne $I11, -1, rxscan389_done1172
    goto rxscan389_scan1171
  rxscan389_loop1170:
    inc rx388_pos
    gt rx388_pos, rx388_eos, rx388_fail1166
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!from", rx388_pos
  rxscan389_scan1171:
    nqp_rxmark rx388_bstack, rxscan389_loop1170, rx388_pos, 0
  rxscan389_done1172:
    nqp_rxmark rx388_bstack, rxcap390_fail1174, rx388_pos, 0
    add $I11, rx388_pos, 2
    gt $I11, rx388_eos, rx388_fail1166
    substr $S10, rx388_tgt, rx388_pos, 2
    ne $S10, ucs4:"if", rx388_fail1166
    add rx388_pos, 2
    nqp_rxpeek $I19, rx388_bstack, rxcap390_fail1174
    inc $I19
    set $I11, rx388_bstack[$I19]
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx388_pos)
    rx388_cstack = rx388_cur."!cursor_capture"($P11, "sym")
    goto rxcap390_done1173
  rxcap390_fail1174:
    goto rx388_fail1166
  rxcap390_done1173:
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."ws"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    nqp_rxmark rx388_bstack, rxsubrule392_pass1176, -1, 0
  rxsubrule392_pass1176:
    rx388_cstack = rx388_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."ws"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    rx388_cur."!cursor_pass"(rx388_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx388_cur)
  rx388_restart1165:
    repr_get_attr_obj rx388_cstack, rx388_cur, rx388_curclass, "$!cstack"
  rx388_fail1166:
    unless rx388_bstack, rx388_done1164
    pop $I19, rx388_bstack
    if_null rx388_cstack, rx388_cstack_done1169
    unless rx388_cstack, rx388_cstack_done1169
    dec $I19
    set $P11, rx388_cstack[$I19]
  rx388_cstack_done1169:
    pop rx388_rep, rx388_bstack
    pop rx388_pos, rx388_bstack
    pop $I19, rx388_bstack
    lt rx388_pos, -1, rx388_done1164
    lt rx388_pos, 0, rx388_fail1166
    eq $I19, 0, rx388_fail1166
    nqp_islist $I20, rx388_cstack
    unless $I20, rx388_jump1167
    elements $I18, rx388_bstack
    le $I18, 0, rx388_cut1168
    dec $I18
    set $I18, rx388_bstack[$I18]
  rx388_cut1168:
    assign rx388_cstack, $I18
  rx388_jump1167:
    jump $I19
  rx388_done1164:
    rx388_cur."!cursor_fail"()
    .return (rx388_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_76_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx394_tgt
    .local int rx394_pos
    .local int rx394_off
    .local int rx394_eos
    .local int rx394_rep
    .local pmc rx394_cur
    .local pmc rx394_curclass
    .local pmc rx394_bstack
    .local pmc rx394_cstack
    (rx394_cur, rx394_tgt, rx394_pos, rx394_curclass, rx394_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx394_cur
    length rx394_eos, rx394_tgt
    eq $I19, 1, rx394_restart1180
    gt rx394_pos, rx394_eos, rx394_fail1181
    repr_get_attr_int $I11, self, rx394_curclass, "$!from"
    ne $I11, -1, rxscan395_done1187
    goto rxscan395_scan1186
  rxscan395_loop1185:
    inc rx394_pos
    gt rx394_pos, rx394_eos, rx394_fail1181
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!from", rx394_pos
  rxscan395_scan1186:
    nqp_rxmark rx394_bstack, rxscan395_loop1185, rx394_pos, 0
  rxscan395_done1187:
    nqp_rxmark rx394_bstack, rxcap396_fail1189, rx394_pos, 0
    add $I11, rx394_pos, 6
    gt $I11, rx394_eos, rx394_fail1181
    substr $S10, rx394_tgt, rx394_pos, 6
    ne $S10, ucs4:"unless", rx394_fail1181
    add rx394_pos, 6
    nqp_rxpeek $I19, rx394_bstack, rxcap396_fail1189
    inc $I19
    set $I11, rx394_bstack[$I19]
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx394_pos)
    rx394_cstack = rx394_cur."!cursor_capture"($P11, "sym")
    goto rxcap396_done1188
  rxcap396_fail1189:
    goto rx394_fail1181
  rxcap396_done1188:
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."ws"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    nqp_rxmark rx394_bstack, rxsubrule398_pass1191, -1, 0
  rxsubrule398_pass1191:
    rx394_cstack = rx394_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."ws"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    rx394_cur."!cursor_pass"(rx394_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx394_cur)
  rx394_restart1180:
    repr_get_attr_obj rx394_cstack, rx394_cur, rx394_curclass, "$!cstack"
  rx394_fail1181:
    unless rx394_bstack, rx394_done1179
    pop $I19, rx394_bstack
    if_null rx394_cstack, rx394_cstack_done1184
    unless rx394_cstack, rx394_cstack_done1184
    dec $I19
    set $P11, rx394_cstack[$I19]
  rx394_cstack_done1184:
    pop rx394_rep, rx394_bstack
    pop rx394_pos, rx394_bstack
    pop $I19, rx394_bstack
    lt rx394_pos, -1, rx394_done1179
    lt rx394_pos, 0, rx394_fail1181
    eq $I19, 0, rx394_fail1181
    nqp_islist $I20, rx394_cstack
    unless $I20, rx394_jump1182
    elements $I18, rx394_bstack
    le $I18, 0, rx394_cut1183
    dec $I18
    set $I18, rx394_bstack[$I18]
  rx394_cut1183:
    assign rx394_cstack, $I18
  rx394_jump1182:
    jump $I19
  rx394_done1179:
    rx394_cur."!cursor_fail"()
    .return (rx394_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_77_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 887
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_78_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    (rx400_cur, rx400_tgt, rx400_pos, rx400_curclass, rx400_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1195
    gt rx400_pos, rx400_eos, rx400_fail1196
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1202
    goto rxscan401_scan1201
  rxscan401_loop1200:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1196
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1201:
    nqp_rxmark rx400_bstack, rxscan401_loop1200, rx400_pos, 0
  rxscan401_done1202:
    nqp_rxmark rx400_bstack, rxcap402_fail1204, rx400_pos, 0
    add $I11, rx400_pos, 5
    gt $I11, rx400_eos, rx400_fail1196
    substr $S10, rx400_tgt, rx400_pos, 5
    ne $S10, ucs4:"while", rx400_fail1196
    add rx400_pos, 5
    nqp_rxpeek $I19, rx400_bstack, rxcap402_fail1204
    inc $I19
    set $I11, rx400_bstack[$I19]
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx400_pos)
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "sym")
    goto rxcap402_done1203
  rxcap402_fail1204:
    goto rx400_fail1196
  rxcap402_done1203:
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."ws"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    nqp_rxmark rx400_bstack, rxsubrule404_pass1206, -1, 0
  rxsubrule404_pass1206:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."ws"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    rx400_cur."!cursor_pass"(rx400_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1195:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1196:
    unless rx400_bstack, rx400_done1194
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1199
    unless rx400_cstack, rx400_cstack_done1199
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1199:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1194
    lt rx400_pos, 0, rx400_fail1196
    eq $I19, 0, rx400_fail1196
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1197
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1198
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1198:
    assign rx400_cstack, $I18
  rx400_jump1197:
    jump $I19
  rx400_done1194:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_79_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    (rx406_cur, rx406_tgt, rx406_pos, rx406_curclass, rx406_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1210
    gt rx406_pos, rx406_eos, rx406_fail1211
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1217
    goto rxscan407_scan1216
  rxscan407_loop1215:
    inc rx406_pos
    gt rx406_pos, rx406_eos, rx406_fail1211
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1216:
    nqp_rxmark rx406_bstack, rxscan407_loop1215, rx406_pos, 0
  rxscan407_done1217:
    nqp_rxmark rx406_bstack, rxcap408_fail1219, rx406_pos, 0
    add $I11, rx406_pos, 5
    gt $I11, rx406_eos, rx406_fail1211
    substr $S10, rx406_tgt, rx406_pos, 5
    ne $S10, ucs4:"until", rx406_fail1211
    add rx406_pos, 5
    nqp_rxpeek $I19, rx406_bstack, rxcap408_fail1219
    inc $I19
    set $I11, rx406_bstack[$I19]
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx406_pos)
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "sym")
    goto rxcap408_done1218
  rxcap408_fail1219:
    goto rx406_fail1211
  rxcap408_done1218:
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."ws"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    nqp_rxmark rx406_bstack, rxsubrule410_pass1221, -1, 0
  rxsubrule410_pass1221:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."ws"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    rx406_cur."!cursor_pass"(rx406_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1210:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1211:
    unless rx406_bstack, rx406_done1209
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1214
    unless rx406_cstack, rx406_cstack_done1214
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1214:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1209
    lt rx406_pos, 0, rx406_fail1211
    eq $I19, 0, rx406_fail1211
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1212
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1213
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1213:
    assign rx406_cstack, $I18
  rx406_jump1212:
    jump $I19
  rx406_done1209:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_80_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx412_tgt
    .local int rx412_pos
    .local int rx412_off
    .local int rx412_eos
    .local int rx412_rep
    .local pmc rx412_cur
    .local pmc rx412_curclass
    .local pmc rx412_bstack
    .local pmc rx412_cstack
    (rx412_cur, rx412_tgt, rx412_pos, rx412_curclass, rx412_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx412_cur
    length rx412_eos, rx412_tgt
    eq $I19, 1, rx412_restart1225
    gt rx412_pos, rx412_eos, rx412_fail1226
    repr_get_attr_int $I11, self, rx412_curclass, "$!from"
    ne $I11, -1, rxscan413_done1232
    goto rxscan413_scan1231
  rxscan413_loop1230:
    inc rx412_pos
    gt rx412_pos, rx412_eos, rx412_fail1226
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!from", rx412_pos
  rxscan413_scan1231:
    nqp_rxmark rx412_bstack, rxscan413_loop1230, rx412_pos, 0
  rxscan413_done1232:
    nqp_rxmark rx412_bstack, rxcap414_fail1234, rx412_pos, 0
    add $I11, rx412_pos, 3
    gt $I11, rx412_eos, rx412_fail1226
    substr $S10, rx412_tgt, rx412_pos, 3
    ne $S10, ucs4:"for", rx412_fail1226
    add rx412_pos, 3
    nqp_rxpeek $I19, rx412_bstack, rxcap414_fail1234
    inc $I19
    set $I11, rx412_bstack[$I19]
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx412_pos)
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "sym")
    goto rxcap414_done1233
  rxcap414_fail1234:
    goto rx412_fail1226
  rxcap414_done1233:
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."ws"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    nqp_rxmark rx412_bstack, rxsubrule416_pass1236, -1, 0
  rxsubrule416_pass1236:
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."ws"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    rx412_cur."!cursor_pass"(rx412_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx412_cur)
  rx412_restart1225:
    repr_get_attr_obj rx412_cstack, rx412_cur, rx412_curclass, "$!cstack"
  rx412_fail1226:
    unless rx412_bstack, rx412_done1224
    pop $I19, rx412_bstack
    if_null rx412_cstack, rx412_cstack_done1229
    unless rx412_cstack, rx412_cstack_done1229
    dec $I19
    set $P11, rx412_cstack[$I19]
  rx412_cstack_done1229:
    pop rx412_rep, rx412_bstack
    pop rx412_pos, rx412_bstack
    pop $I19, rx412_bstack
    lt rx412_pos, -1, rx412_done1224
    lt rx412_pos, 0, rx412_fail1226
    eq $I19, 0, rx412_fail1226
    nqp_islist $I20, rx412_cstack
    unless $I20, rx412_jump1227
    elements $I18, rx412_bstack
    le $I18, 0, rx412_cut1228
    dec $I18
    set $I18, rx412_bstack[$I18]
  rx412_cut1228:
    assign rx412_cstack, $I18
  rx412_jump1227:
    jump $I19
  rx412_done1224:
    rx412_cur."!cursor_fail"()
    .return (rx412_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_81_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx418_tgt
    .local int rx418_pos
    .local int rx418_off
    .local int rx418_eos
    .local int rx418_rep
    .local pmc rx418_cur
    .local pmc rx418_curclass
    .local pmc rx418_bstack
    .local pmc rx418_cstack
    (rx418_cur, rx418_tgt, rx418_pos, rx418_curclass, rx418_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx418_cur
    length rx418_eos, rx418_tgt
    eq $I19, 1, rx418_restart1240
    gt rx418_pos, rx418_eos, rx418_fail1241
    repr_get_attr_int $I11, self, rx418_curclass, "$!from"
    ne $I11, -1, rxscan419_done1247
    goto rxscan419_scan1246
  rxscan419_loop1245:
    inc rx418_pos
    gt rx418_pos, rx418_eos, rx418_fail1241
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!from", rx418_pos
  rxscan419_scan1246:
    nqp_rxmark rx418_bstack, rxscan419_loop1245, rx418_pos, 0
  rxscan419_done1247:
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    $P11 = rx418_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx418_curclass, "$!pos"
    lt $I11, 0, rx418_fail1241
    nqp_rxmark rx418_bstack, rxsubrule420_pass1248, -1, 0
  rxsubrule420_pass1248:
    rx418_cstack = rx418_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx418_pos, $P11, rx418_curclass, "$!pos"
    rx418_cur."!cursor_pass"(rx418_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx418_cur)
  rx418_restart1240:
    repr_get_attr_obj rx418_cstack, rx418_cur, rx418_curclass, "$!cstack"
  rx418_fail1241:
    unless rx418_bstack, rx418_done1239
    pop $I19, rx418_bstack
    if_null rx418_cstack, rx418_cstack_done1244
    unless rx418_cstack, rx418_cstack_done1244
    dec $I19
    set $P11, rx418_cstack[$I19]
  rx418_cstack_done1244:
    pop rx418_rep, rx418_bstack
    pop rx418_pos, rx418_bstack
    pop $I19, rx418_bstack
    lt rx418_pos, -1, rx418_done1239
    lt rx418_pos, 0, rx418_fail1241
    eq $I19, 0, rx418_fail1241
    nqp_islist $I20, rx418_cstack
    unless $I20, rx418_jump1242
    elements $I18, rx418_bstack
    le $I18, 0, rx418_cut1243
    dec $I18
    set $I18, rx418_bstack[$I18]
  rx418_cut1243:
    assign rx418_cstack, $I18
  rx418_jump1242:
    jump $I19
  rx418_done1239:
    rx418_cur."!cursor_fail"()
    .return (rx418_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_82_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx421_tgt
    .local int rx421_pos
    .local int rx421_off
    .local int rx421_eos
    .local int rx421_rep
    .local pmc rx421_cur
    .local pmc rx421_curclass
    .local pmc rx421_bstack
    .local pmc rx421_cstack
    (rx421_cur, rx421_tgt, rx421_pos, rx421_curclass, rx421_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx421_cur
    length rx421_eos, rx421_tgt
    eq $I19, 1, rx421_restart1251
    gt rx421_pos, rx421_eos, rx421_fail1252
    repr_get_attr_int $I11, self, rx421_curclass, "$!from"
    ne $I11, -1, rxscan422_done1258
    goto rxscan422_scan1257
  rxscan422_loop1256:
    inc rx421_pos
    gt rx421_pos, rx421_eos, rx421_fail1252
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!from", rx421_pos
  rxscan422_scan1257:
    nqp_rxmark rx421_bstack, rxscan422_loop1256, rx421_pos, 0
  rxscan422_done1258:
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!pos", rx421_pos
    $P11 = rx421_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx421_curclass, "$!pos"
    lt $I11, 0, rx421_fail1252
    nqp_rxmark rx421_bstack, rxsubrule423_pass1259, -1, 0
  rxsubrule423_pass1259:
    rx421_cstack = rx421_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx421_pos, $P11, rx421_curclass, "$!pos"
    rx421_cur."!cursor_pass"(rx421_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx421_cur)
  rx421_restart1251:
    repr_get_attr_obj rx421_cstack, rx421_cur, rx421_curclass, "$!cstack"
  rx421_fail1252:
    unless rx421_bstack, rx421_done1250
    pop $I19, rx421_bstack
    if_null rx421_cstack, rx421_cstack_done1255
    unless rx421_cstack, rx421_cstack_done1255
    dec $I19
    set $P11, rx421_cstack[$I19]
  rx421_cstack_done1255:
    pop rx421_rep, rx421_bstack
    pop rx421_pos, rx421_bstack
    pop $I19, rx421_bstack
    lt rx421_pos, -1, rx421_done1250
    lt rx421_pos, 0, rx421_fail1252
    eq $I19, 0, rx421_fail1252
    nqp_islist $I20, rx421_cstack
    unless $I20, rx421_jump1253
    elements $I18, rx421_bstack
    le $I18, 0, rx421_cut1254
    dec $I18
    set $I18, rx421_bstack[$I18]
  rx421_cut1254:
    assign rx421_cstack, $I18
  rx421_jump1253:
    jump $I19
  rx421_done1250:
    rx421_cur."!cursor_fail"()
    .return (rx421_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_83_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx424_tgt
    .local int rx424_pos
    .local int rx424_off
    .local int rx424_eos
    .local int rx424_rep
    .local pmc rx424_cur
    .local pmc rx424_curclass
    .local pmc rx424_bstack
    .local pmc rx424_cstack
    (rx424_cur, rx424_tgt, rx424_pos, rx424_curclass, rx424_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx424_cur
    length rx424_eos, rx424_tgt
    eq $I19, 1, rx424_restart1262
    gt rx424_pos, rx424_eos, rx424_fail1263
    repr_get_attr_int $I11, self, rx424_curclass, "$!from"
    ne $I11, -1, rxscan425_done1269
    goto rxscan425_scan1268
  rxscan425_loop1267:
    inc rx424_pos
    gt rx424_pos, rx424_eos, rx424_fail1263
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!from", rx424_pos
  rxscan425_scan1268:
    nqp_rxmark rx424_bstack, rxscan425_loop1267, rx424_pos, 0
  rxscan425_done1269:
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."variable"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail1263
    nqp_rxmark rx424_bstack, rxsubrule426_pass1270, -1, 0
  rxsubrule426_pass1270:
    rx424_cstack = rx424_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    rx424_cur."!cursor_pass"(rx424_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx424_cur)
  rx424_restart1262:
    repr_get_attr_obj rx424_cstack, rx424_cur, rx424_curclass, "$!cstack"
  rx424_fail1263:
    unless rx424_bstack, rx424_done1261
    pop $I19, rx424_bstack
    if_null rx424_cstack, rx424_cstack_done1266
    unless rx424_cstack, rx424_cstack_done1266
    dec $I19
    set $P11, rx424_cstack[$I19]
  rx424_cstack_done1266:
    pop rx424_rep, rx424_bstack
    pop rx424_pos, rx424_bstack
    pop $I19, rx424_bstack
    lt rx424_pos, -1, rx424_done1261
    lt rx424_pos, 0, rx424_fail1263
    eq $I19, 0, rx424_fail1263
    nqp_islist $I20, rx424_cstack
    unless $I20, rx424_jump1264
    elements $I18, rx424_bstack
    le $I18, 0, rx424_cut1265
    dec $I18
    set $I18, rx424_bstack[$I18]
  rx424_cut1265:
    assign rx424_cstack, $I18
  rx424_jump1264:
    jump $I19
  rx424_done1261:
    rx424_cur."!cursor_fail"()
    .return (rx424_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_84_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx427_tgt
    .local int rx427_pos
    .local int rx427_off
    .local int rx427_eos
    .local int rx427_rep
    .local pmc rx427_cur
    .local pmc rx427_curclass
    .local pmc rx427_bstack
    .local pmc rx427_cstack
    (rx427_cur, rx427_tgt, rx427_pos, rx427_curclass, rx427_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx427_cur
    length rx427_eos, rx427_tgt
    eq $I19, 1, rx427_restart1273
    gt rx427_pos, rx427_eos, rx427_fail1274
    repr_get_attr_int $I11, self, rx427_curclass, "$!from"
    ne $I11, -1, rxscan428_done1280
    goto rxscan428_scan1279
  rxscan428_loop1278:
    inc rx427_pos
    gt rx427_pos, rx427_eos, rx427_fail1274
    repr_bind_attr_int rx427_cur, rx427_curclass, "$!from", rx427_pos
  rxscan428_scan1279:
    nqp_rxmark rx427_bstack, rxscan428_loop1278, rx427_pos, 0
  rxscan428_done1280:
    repr_bind_attr_int rx427_cur, rx427_curclass, "$!pos", rx427_pos
    $P11 = rx427_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx427_curclass, "$!pos"
    lt $I11, 0, rx427_fail1274
    nqp_rxmark rx427_bstack, rxsubrule429_pass1281, -1, 0
  rxsubrule429_pass1281:
    rx427_cstack = rx427_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx427_pos, $P11, rx427_curclass, "$!pos"
    rx427_cur."!cursor_pass"(rx427_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx427_cur)
  rx427_restart1273:
    repr_get_attr_obj rx427_cstack, rx427_cur, rx427_curclass, "$!cstack"
  rx427_fail1274:
    unless rx427_bstack, rx427_done1272
    pop $I19, rx427_bstack
    if_null rx427_cstack, rx427_cstack_done1277
    unless rx427_cstack, rx427_cstack_done1277
    dec $I19
    set $P11, rx427_cstack[$I19]
  rx427_cstack_done1277:
    pop rx427_rep, rx427_bstack
    pop rx427_pos, rx427_bstack
    pop $I19, rx427_bstack
    lt rx427_pos, -1, rx427_done1272
    lt rx427_pos, 0, rx427_fail1274
    eq $I19, 0, rx427_fail1274
    nqp_islist $I20, rx427_cstack
    unless $I20, rx427_jump1275
    elements $I18, rx427_bstack
    le $I18, 0, rx427_cut1276
    dec $I18
    set $I18, rx427_bstack[$I18]
  rx427_cut1276:
    assign rx427_cstack, $I18
  rx427_jump1275:
    jump $I19
  rx427_done1272:
    rx427_cur."!cursor_fail"()
    .return (rx427_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_85_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx430_tgt
    .local int rx430_pos
    .local int rx430_off
    .local int rx430_eos
    .local int rx430_rep
    .local pmc rx430_cur
    .local pmc rx430_curclass
    .local pmc rx430_bstack
    .local pmc rx430_cstack
    (rx430_cur, rx430_tgt, rx430_pos, rx430_curclass, rx430_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx430_cur
    length rx430_eos, rx430_tgt
    eq $I19, 1, rx430_restart1284
    gt rx430_pos, rx430_eos, rx430_fail1285
    repr_get_attr_int $I11, self, rx430_curclass, "$!from"
    ne $I11, -1, rxscan431_done1291
    goto rxscan431_scan1290
  rxscan431_loop1289:
    inc rx430_pos
    gt rx430_pos, rx430_eos, rx430_fail1285
    repr_bind_attr_int rx430_cur, rx430_curclass, "$!from", rx430_pos
  rxscan431_scan1290:
    nqp_rxmark rx430_bstack, rxscan431_loop1289, rx430_pos, 0
  rxscan431_done1291:
    repr_bind_attr_int rx430_cur, rx430_curclass, "$!pos", rx430_pos
    $P11 = rx430_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx430_curclass, "$!pos"
    lt $I11, 0, rx430_fail1285
    nqp_rxmark rx430_bstack, rxsubrule432_pass1292, -1, 0
  rxsubrule432_pass1292:
    rx430_cstack = rx430_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx430_pos, $P11, rx430_curclass, "$!pos"
    rx430_cur."!cursor_pass"(rx430_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx430_cur)
  rx430_restart1284:
    repr_get_attr_obj rx430_cstack, rx430_cur, rx430_curclass, "$!cstack"
  rx430_fail1285:
    unless rx430_bstack, rx430_done1283
    pop $I19, rx430_bstack
    if_null rx430_cstack, rx430_cstack_done1288
    unless rx430_cstack, rx430_cstack_done1288
    dec $I19
    set $P11, rx430_cstack[$I19]
  rx430_cstack_done1288:
    pop rx430_rep, rx430_bstack
    pop rx430_pos, rx430_bstack
    pop $I19, rx430_bstack
    lt rx430_pos, -1, rx430_done1283
    lt rx430_pos, 0, rx430_fail1285
    eq $I19, 0, rx430_fail1285
    nqp_islist $I20, rx430_cstack
    unless $I20, rx430_jump1286
    elements $I18, rx430_bstack
    le $I18, 0, rx430_cut1287
    dec $I18
    set $I18, rx430_bstack[$I18]
  rx430_cut1287:
    assign rx430_cstack, $I18
  rx430_jump1286:
    jump $I19
  rx430_done1283:
    rx430_cur."!cursor_fail"()
    .return (rx430_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_86_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx433_tgt
    .local int rx433_pos
    .local int rx433_off
    .local int rx433_eos
    .local int rx433_rep
    .local pmc rx433_cur
    .local pmc rx433_curclass
    .local pmc rx433_bstack
    .local pmc rx433_cstack
    (rx433_cur, rx433_tgt, rx433_pos, rx433_curclass, rx433_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx433_cur
    length rx433_eos, rx433_tgt
    eq $I19, 1, rx433_restart1295
    gt rx433_pos, rx433_eos, rx433_fail1296
    repr_get_attr_int $I11, self, rx433_curclass, "$!from"
    ne $I11, -1, rxscan434_done1302
    goto rxscan434_scan1301
  rxscan434_loop1300:
    inc rx433_pos
    gt rx433_pos, rx433_eos, rx433_fail1296
    repr_bind_attr_int rx433_cur, rx433_curclass, "$!from", rx433_pos
  rxscan434_scan1301:
    nqp_rxmark rx433_bstack, rxscan434_loop1300, rx433_pos, 0
  rxscan434_done1302:
    repr_bind_attr_int rx433_cur, rx433_curclass, "$!pos", rx433_pos
    $P11 = rx433_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx433_curclass, "$!pos"
    lt $I11, 0, rx433_fail1296
    nqp_rxmark rx433_bstack, rxsubrule435_pass1303, -1, 0
  rxsubrule435_pass1303:
    rx433_cstack = rx433_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx433_pos, $P11, rx433_curclass, "$!pos"
    rx433_cur."!cursor_pass"(rx433_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx433_cur)
  rx433_restart1295:
    repr_get_attr_obj rx433_cstack, rx433_cur, rx433_curclass, "$!cstack"
  rx433_fail1296:
    unless rx433_bstack, rx433_done1294
    pop $I19, rx433_bstack
    if_null rx433_cstack, rx433_cstack_done1299
    unless rx433_cstack, rx433_cstack_done1299
    dec $I19
    set $P11, rx433_cstack[$I19]
  rx433_cstack_done1299:
    pop rx433_rep, rx433_bstack
    pop rx433_pos, rx433_bstack
    pop $I19, rx433_bstack
    lt rx433_pos, -1, rx433_done1294
    lt rx433_pos, 0, rx433_fail1296
    eq $I19, 0, rx433_fail1296
    nqp_islist $I20, rx433_cstack
    unless $I20, rx433_jump1297
    elements $I18, rx433_bstack
    le $I18, 0, rx433_cut1298
    dec $I18
    set $I18, rx433_bstack[$I18]
  rx433_cut1298:
    assign rx433_cstack, $I18
  rx433_jump1297:
    jump $I19
  rx433_done1294:
    rx433_cur."!cursor_fail"()
    .return (rx433_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_87_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_88_1359718901.265' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_89_1359718901.265' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx436_tgt
    .local int rx436_pos
    .local int rx436_off
    .local int rx436_eos
    .local int rx436_rep
    .local pmc rx436_cur
    .local pmc rx436_curclass
    .local pmc rx436_bstack
    .local pmc rx436_cstack
    (rx436_cur, rx436_tgt, rx436_pos, rx436_curclass, rx436_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx436_cur
    length rx436_eos, rx436_tgt
    eq $I19, 1, rx436_restart1306
    gt rx436_pos, rx436_eos, rx436_fail1307
    repr_get_attr_int $I11, self, rx436_curclass, "$!from"
    ne $I11, -1, rxscan437_done1313
    goto rxscan437_scan1312
  rxscan437_loop1311:
    inc rx436_pos
    gt rx436_pos, rx436_eos, rx436_fail1307
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!from", rx436_pos
  rxscan437_scan1312:
    nqp_rxmark rx436_bstack, rxscan437_loop1311, rx436_pos, 0
  rxscan437_done1313:
    .const 'Sub' $P5001 = 'cuid_88_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1307
    .const 'Sub' $P5002 = 'cuid_89_1359718901.265' 
    capture_lex $P5002
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    ge $I11, 0, rx436_fail1307
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1307
    nqp_rxmark rx436_bstack, rxsubrule445_pass1343, -1, 0
  rxsubrule445_pass1343:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    rx436_cur."!cursor_pass"(rx436_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx436_cur)
  rx436_restart1306:
    repr_get_attr_obj rx436_cstack, rx436_cur, rx436_curclass, "$!cstack"
  rx436_fail1307:
    unless rx436_bstack, rx436_done1305
    pop $I19, rx436_bstack
    if_null rx436_cstack, rx436_cstack_done1310
    unless rx436_cstack, rx436_cstack_done1310
    dec $I19
    set $P11, rx436_cstack[$I19]
  rx436_cstack_done1310:
    pop rx436_rep, rx436_bstack
    pop rx436_pos, rx436_bstack
    pop $I19, rx436_bstack
    lt rx436_pos, -1, rx436_done1305
    lt rx436_pos, 0, rx436_fail1307
    eq $I19, 0, rx436_fail1307
    nqp_islist $I20, rx436_cstack
    unless $I20, rx436_jump1308
    elements $I18, rx436_bstack
    le $I18, 0, rx436_cut1309
    dec $I18
    set $I18, rx436_bstack[$I18]
  rx436_cut1309:
    assign rx436_cstack, $I18
  rx436_jump1308:
    jump $I19
  rx436_done1305:
    rx436_cur."!cursor_fail"()
    .return (rx436_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1359718901.265") :anon :lex :outer("cuid_87_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx438_tgt
    .local int rx438_pos
    .local int rx438_off
    .local int rx438_eos
    .local int rx438_rep
    .local pmc rx438_cur
    .local pmc rx438_curclass
    .local pmc rx438_bstack
    .local pmc rx438_cstack
    (rx438_cur, rx438_tgt, rx438_pos, rx438_curclass, rx438_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx438_cur
    length rx438_eos, rx438_tgt
    eq $I19, 1, rx438_restart1316
    gt rx438_pos, rx438_eos, rx438_fail1317
    repr_get_attr_int $I11, self, rx438_curclass, "$!from"
    ne $I11, -1, rxscan439_done1323
    goto rxscan439_scan1322
  rxscan439_loop1321:
    inc rx438_pos
    gt rx438_pos, rx438_eos, rx438_fail1317
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!from", rx438_pos
  rxscan439_scan1322:
    nqp_rxmark rx438_bstack, rxscan439_loop1321, rx438_pos, 0
  rxscan439_done1323:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt440_01325
    nqp_push_label $P11, alt440_11326
    nqp_push_label $P11, alt440_21327
    nqp_rxmark rx438_bstack, alt440_end1324, -1, 0
    rx438_cur."!alt"(rx438_pos, "alt_nfa__17_1359718902.944", $P11)
    goto rx438_fail1317
  alt440_01325:
    add $I11, rx438_pos, 5
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 5
    ne $S10, ucs4:"multi", rx438_fail1317
    add rx438_pos, 5
    goto alt440_end1324
  alt440_11326:
    add $I11, rx438_pos, 5
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 5
    ne $S10, ucs4:"proto", rx438_fail1317
    add rx438_pos, 5
    goto alt440_end1324
  alt440_21327:
    add $I11, rx438_pos, 4
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 4
    ne $S10, ucs4:"only", rx438_fail1317
    add rx438_pos, 4
    goto alt440_end1324
  alt440_end1324:
    rx438_cur."!cursor_pass"(rx438_pos, 'backtrack'=>1)
    .return (rx438_cur)
  rx438_restart1316:
    repr_get_attr_obj rx438_cstack, rx438_cur, rx438_curclass, "$!cstack"
  rx438_fail1317:
    unless rx438_bstack, rx438_done1315
    pop $I19, rx438_bstack
    if_null rx438_cstack, rx438_cstack_done1320
    unless rx438_cstack, rx438_cstack_done1320
    dec $I19
    set $P11, rx438_cstack[$I19]
  rx438_cstack_done1320:
    pop rx438_rep, rx438_bstack
    pop rx438_pos, rx438_bstack
    pop $I19, rx438_bstack
    lt rx438_pos, -1, rx438_done1315
    lt rx438_pos, 0, rx438_fail1317
    eq $I19, 0, rx438_fail1317
    nqp_islist $I20, rx438_cstack
    unless $I20, rx438_jump1318
    elements $I18, rx438_bstack
    le $I18, 0, rx438_cut1319
    dec $I18
    set $I18, rx438_bstack[$I18]
  rx438_cut1319:
    assign rx438_cstack, $I18
  rx438_jump1318:
    jump $I19
  rx438_done1315:
    rx438_cur."!cursor_fail"()
    .return (rx438_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1359718901.265") :anon :lex :outer("cuid_87_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx441_tgt
    .local int rx441_pos
    .local int rx441_off
    .local int rx441_eos
    .local int rx441_rep
    .local pmc rx441_cur
    .local pmc rx441_curclass
    .local pmc rx441_bstack
    .local pmc rx441_cstack
    (rx441_cur, rx441_tgt, rx441_pos, rx441_curclass, rx441_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx441_cur
    length rx441_eos, rx441_tgt
    eq $I19, 1, rx441_restart1330
    gt rx441_pos, rx441_eos, rx441_fail1331
    repr_get_attr_int $I11, self, rx441_curclass, "$!from"
    ne $I11, -1, rxscan442_done1337
    goto rxscan442_scan1336
  rxscan442_loop1335:
    inc rx441_pos
    gt rx441_pos, rx441_eos, rx441_fail1331
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!from", rx441_pos
  rxscan442_scan1336:
    nqp_rxmark rx441_bstack, rxscan442_loop1335, rx441_pos, 0
  rxscan442_done1337:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"proto", rx441_fail1331
    add rx441_pos, 5
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur."ws"()
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1331
    repr_get_attr_int rx441_pos, $P11, rx441_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt444_01340
    nqp_push_label $P11, alt444_11341
    nqp_push_label $P11, alt444_21342
    nqp_rxmark rx441_bstack, alt444_end1339, -1, 0
    rx441_cur."!alt"(rx441_pos, "alt_nfa__18_1359718902.952", $P11)
    goto rx441_fail1331
  alt444_01340:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"regex", rx441_fail1331
    add rx441_pos, 5
    goto alt444_end1339
  alt444_11341:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"token", rx441_fail1331
    add rx441_pos, 5
    goto alt444_end1339
  alt444_21342:
    add $I11, rx441_pos, 4
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 4
    ne $S10, ucs4:"rule", rx441_fail1331
    add rx441_pos, 4
    goto alt444_end1339
  alt444_end1339:
    nqp_rxcommit rx441_bstack, alt444_end1339
    rx441_cur."!cursor_pass"(rx441_pos, 'backtrack'=>1)
    .return (rx441_cur)
  rx441_restart1330:
    repr_get_attr_obj rx441_cstack, rx441_cur, rx441_curclass, "$!cstack"
  rx441_fail1331:
    unless rx441_bstack, rx441_done1329
    pop $I19, rx441_bstack
    if_null rx441_cstack, rx441_cstack_done1334
    unless rx441_cstack, rx441_cstack_done1334
    dec $I19
    set $P11, rx441_cstack[$I19]
  rx441_cstack_done1334:
    pop rx441_rep, rx441_bstack
    pop rx441_pos, rx441_bstack
    pop $I19, rx441_bstack
    lt rx441_pos, -1, rx441_done1329
    lt rx441_pos, 0, rx441_fail1331
    eq $I19, 0, rx441_fail1331
    nqp_islist $I20, rx441_cstack
    unless $I20, rx441_jump1332
    elements $I18, rx441_bstack
    le $I18, 0, rx441_cut1333
    dec $I18
    set $I18, rx441_bstack[$I18]
  rx441_cut1333:
    assign rx441_cstack, $I18
  rx441_jump1332:
    jump $I19
  rx441_done1329:
    rx441_cur."!cursor_fail"()
    .return (rx441_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_90_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 906
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx446_tgt
    .local int rx446_pos
    .local int rx446_off
    .local int rx446_eos
    .local int rx446_rep
    .local pmc rx446_cur
    .local pmc rx446_curclass
    .local pmc rx446_bstack
    .local pmc rx446_cstack
    (rx446_cur, rx446_tgt, rx446_pos, rx446_curclass, rx446_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx446_cur
    length rx446_eos, rx446_tgt
    eq $I19, 1, rx446_restart1346
    gt rx446_pos, rx446_eos, rx446_fail1347
    repr_get_attr_int $I11, self, rx446_curclass, "$!from"
    ne $I11, -1, rxscan447_done1353
    goto rxscan447_scan1352
  rxscan447_loop1351:
    inc rx446_pos
    gt rx446_pos, rx446_eos, rx446_fail1347
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!from", rx446_pos
  rxscan447_scan1352:
    nqp_rxmark rx446_bstack, rxscan447_loop1351, rx446_pos, 0
  rxscan447_done1353:
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!pos", rx446_pos
    $P11 = rx446_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx446_curclass, "$!pos"
    lt $I11, 0, rx446_fail1347
    nqp_rxmark rx446_bstack, rxsubrule448_pass1354, -1, 0
  rxsubrule448_pass1354:
    rx446_cstack = rx446_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx446_pos, $P11, rx446_curclass, "$!pos"
    rx446_cur."!cursor_pass"(rx446_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx446_cur)
  rx446_restart1346:
    repr_get_attr_obj rx446_cstack, rx446_cur, rx446_curclass, "$!cstack"
  rx446_fail1347:
    unless rx446_bstack, rx446_done1345
    pop $I19, rx446_bstack
    if_null rx446_cstack, rx446_cstack_done1350
    unless rx446_cstack, rx446_cstack_done1350
    dec $I19
    set $P11, rx446_cstack[$I19]
  rx446_cstack_done1350:
    pop rx446_rep, rx446_bstack
    pop rx446_pos, rx446_bstack
    pop $I19, rx446_bstack
    lt rx446_pos, -1, rx446_done1345
    lt rx446_pos, 0, rx446_fail1347
    eq $I19, 0, rx446_fail1347
    nqp_islist $I20, rx446_cstack
    unless $I20, rx446_jump1348
    elements $I18, rx446_bstack
    le $I18, 0, rx446_cut1349
    dec $I18
    set $I18, rx446_bstack[$I18]
  rx446_cut1349:
    assign rx446_cstack, $I18
  rx446_jump1348:
    jump $I19
  rx446_done1345:
    rx446_cur."!cursor_fail"()
    .return (rx446_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_91_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 907
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx449_tgt
    .local int rx449_pos
    .local int rx449_off
    .local int rx449_eos
    .local int rx449_rep
    .local pmc rx449_cur
    .local pmc rx449_curclass
    .local pmc rx449_bstack
    .local pmc rx449_cstack
    (rx449_cur, rx449_tgt, rx449_pos, rx449_curclass, rx449_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx449_cur
    length rx449_eos, rx449_tgt
    eq $I19, 1, rx449_restart1357
    gt rx449_pos, rx449_eos, rx449_fail1358
    repr_get_attr_int $I11, self, rx449_curclass, "$!from"
    ne $I11, -1, rxscan450_done1364
    goto rxscan450_scan1363
  rxscan450_loop1362:
    inc rx449_pos
    gt rx449_pos, rx449_eos, rx449_fail1358
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!from", rx449_pos
  rxscan450_scan1363:
    nqp_rxmark rx449_bstack, rxscan450_loop1362, rx449_pos, 0
  rxscan450_done1364:
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!pos", rx449_pos
    $P11 = rx449_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx449_curclass, "$!pos"
    lt $I11, 0, rx449_fail1358
    nqp_rxmark rx449_bstack, rxsubrule451_pass1365, -1, 0
  rxsubrule451_pass1365:
    rx449_cstack = rx449_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx449_pos, $P11, rx449_curclass, "$!pos"
    rx449_cur."!cursor_pass"(rx449_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx449_cur)
  rx449_restart1357:
    repr_get_attr_obj rx449_cstack, rx449_cur, rx449_curclass, "$!cstack"
  rx449_fail1358:
    unless rx449_bstack, rx449_done1356
    pop $I19, rx449_bstack
    if_null rx449_cstack, rx449_cstack_done1361
    unless rx449_cstack, rx449_cstack_done1361
    dec $I19
    set $P11, rx449_cstack[$I19]
  rx449_cstack_done1361:
    pop rx449_rep, rx449_bstack
    pop rx449_pos, rx449_bstack
    pop $I19, rx449_bstack
    lt rx449_pos, -1, rx449_done1356
    lt rx449_pos, 0, rx449_fail1358
    eq $I19, 0, rx449_fail1358
    nqp_islist $I20, rx449_cstack
    unless $I20, rx449_jump1359
    elements $I18, rx449_bstack
    le $I18, 0, rx449_cut1360
    dec $I18
    set $I18, rx449_bstack[$I18]
  rx449_cut1360:
    assign rx449_cstack, $I18
  rx449_jump1359:
    jump $I19
  rx449_done1356:
    rx449_cur."!cursor_fail"()
    .return (rx449_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_92_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 908
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx452_tgt
    .local int rx452_pos
    .local int rx452_off
    .local int rx452_eos
    .local int rx452_rep
    .local pmc rx452_cur
    .local pmc rx452_curclass
    .local pmc rx452_bstack
    .local pmc rx452_cstack
    (rx452_cur, rx452_tgt, rx452_pos, rx452_curclass, rx452_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx452_cur
    length rx452_eos, rx452_tgt
    eq $I19, 1, rx452_restart1368
    gt rx452_pos, rx452_eos, rx452_fail1369
    repr_get_attr_int $I11, self, rx452_curclass, "$!from"
    ne $I11, -1, rxscan453_done1375
    goto rxscan453_scan1374
  rxscan453_loop1373:
    inc rx452_pos
    gt rx452_pos, rx452_eos, rx452_fail1369
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!from", rx452_pos
  rxscan453_scan1374:
    nqp_rxmark rx452_bstack, rxscan453_loop1373, rx452_pos, 0
  rxscan453_done1375:
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!pos", rx452_pos
    $P11 = rx452_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx452_curclass, "$!pos"
    lt $I11, 0, rx452_fail1369
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!pos", rx452_pos
    $P11 = rx452_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx452_curclass, "$!pos"
    lt $I11, 0, rx452_fail1369
    nqp_rxmark rx452_bstack, rxsubrule454_pass1376, -1, 0
  rxsubrule454_pass1376:
    rx452_cstack = rx452_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx452_pos, $P11, rx452_curclass, "$!pos"
    rx452_cur."!cursor_pass"(rx452_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx452_cur)
  rx452_restart1368:
    repr_get_attr_obj rx452_cstack, rx452_cur, rx452_curclass, "$!cstack"
  rx452_fail1369:
    unless rx452_bstack, rx452_done1367
    pop $I19, rx452_bstack
    if_null rx452_cstack, rx452_cstack_done1372
    unless rx452_cstack, rx452_cstack_done1372
    dec $I19
    set $P11, rx452_cstack[$I19]
  rx452_cstack_done1372:
    pop rx452_rep, rx452_bstack
    pop rx452_pos, rx452_bstack
    pop $I19, rx452_bstack
    lt rx452_pos, -1, rx452_done1367
    lt rx452_pos, 0, rx452_fail1369
    eq $I19, 0, rx452_fail1369
    nqp_islist $I20, rx452_cstack
    unless $I20, rx452_jump1370
    elements $I18, rx452_bstack
    le $I18, 0, rx452_cut1371
    dec $I18
    set $I18, rx452_bstack[$I18]
  rx452_cut1371:
    assign rx452_cstack, $I18
  rx452_jump1370:
    jump $I19
  rx452_done1367:
    rx452_cur."!cursor_fail"()
    .return (rx452_cur) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_93_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx455_tgt
    .local int rx455_pos
    .local int rx455_off
    .local int rx455_eos
    .local int rx455_rep
    .local pmc rx455_cur
    .local pmc rx455_curclass
    .local pmc rx455_bstack
    .local pmc rx455_cstack
    (rx455_cur, rx455_tgt, rx455_pos, rx455_curclass, rx455_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx455_cur
    length rx455_eos, rx455_tgt
    eq $I19, 1, rx455_restart1379
    gt rx455_pos, rx455_eos, rx455_fail1380
    repr_get_attr_int $I11, self, rx455_curclass, "$!from"
    ne $I11, -1, rxscan456_done1386
    goto rxscan456_scan1385
  rxscan456_loop1384:
    inc rx455_pos
    gt rx455_pos, rx455_eos, rx455_fail1380
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!from", rx455_pos
  rxscan456_scan1385:
    nqp_rxmark rx455_bstack, rxscan456_loop1384, rx455_pos, 0
  rxscan456_done1386:
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    nqp_rxmark rx455_bstack, rxsubrule457_pass1387, -1, 0
  rxsubrule457_pass1387:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    nqp_rxmark rx455_bstack, rxquantr458_done1389, rx455_pos, 0
  rxquantr458_loop1388:
    ge rx455_pos, rx455_eos, rx455_fail1380
    substr $S11, rx455_tgt, rx455_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx455_fail1380
    inc rx455_pos
    nqp_rxpeek $I19, rx455_bstack, rxquantr458_done1389
    inc $I19
    inc $I19
    set rx455_rep, rx455_bstack[$I19]
    nqp_rxcommit rx455_bstack, rxquantr458_done1389
    inc rx455_rep
    nqp_rxmark rx455_bstack, rxquantr458_done1389, rx455_pos, rx455_rep
    goto rxquantr458_loop1388
  rxquantr458_done1389:
    add $I11, rx455_pos, 2
    gt $I11, rx455_eos, rx455_fail1380
    substr $S10, rx455_tgt, rx455_pos, 2
    ne $S10, ucs4:"=>", rx455_fail1380
    add rx455_pos, 2
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."ws"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    nqp_rxmark rx455_bstack, rxsubrule460_pass1391, -1, 0
  rxsubrule460_pass1391:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    rx455_cur."!cursor_pass"(rx455_pos, "fatarrow", 'backtrack'=>1)
    .return (rx455_cur)
  rx455_restart1379:
    repr_get_attr_obj rx455_cstack, rx455_cur, rx455_curclass, "$!cstack"
  rx455_fail1380:
    unless rx455_bstack, rx455_done1378
    pop $I19, rx455_bstack
    if_null rx455_cstack, rx455_cstack_done1383
    unless rx455_cstack, rx455_cstack_done1383
    dec $I19
    set $P11, rx455_cstack[$I19]
  rx455_cstack_done1383:
    pop rx455_rep, rx455_bstack
    pop rx455_pos, rx455_bstack
    pop $I19, rx455_bstack
    lt rx455_pos, -1, rx455_done1378
    lt rx455_pos, 0, rx455_fail1380
    eq $I19, 0, rx455_fail1380
    nqp_islist $I20, rx455_cstack
    unless $I20, rx455_jump1381
    elements $I18, rx455_bstack
    le $I18, 0, rx455_cut1382
    dec $I18
    set $I18, rx455_bstack[$I18]
  rx455_cut1382:
    assign rx455_cstack, $I18
  rx455_jump1381:
    jump $I19
  rx455_done1378:
    rx455_cur."!cursor_fail"()
    .return (rx455_cur) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_94_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    (rx461_cur, rx461_tgt, rx461_pos, rx461_curclass, rx461_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1394
    gt rx461_pos, rx461_eos, rx461_fail1395
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1401
    goto rxscan462_scan1400
  rxscan462_loop1399:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1395
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1400:
    nqp_rxmark rx461_bstack, rxscan462_loop1399, rx461_pos, 0
  rxscan462_done1401:
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1395
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:":", rx461_fail1395
    add rx461_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt463_01403
    nqp_push_label $P11, alt463_11407
    nqp_push_label $P11, alt463_21413
    nqp_push_label $P11, alt463_31415
    nqp_rxmark rx461_bstack, alt463_end1402, -1, 0
    rx461_cur."!alt"(rx461_pos, "alt_nfa__19_1359718902.989", $P11)
    goto rx461_fail1395
  alt463_01403:
    nqp_rxmark rx461_bstack, rxcap464_fail1405, rx461_pos, 0
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1395
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:"!", rx461_fail1395
    add rx461_pos, 1
    nqp_rxpeek $I19, rx461_bstack, rxcap464_fail1405
    inc $I19
    set $I11, rx461_bstack[$I19]
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx461_pos)
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "not")
    goto rxcap464_done1404
  rxcap464_fail1405:
    goto rx461_fail1395
  rxcap464_done1404:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule465_pass1406, -1, 0
  rxsubrule465_pass1406:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_11407:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule466_pass1408, -1, 0
  rxsubrule466_pass1408:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    nqp_rxmark rx461_bstack, rxquantr467_done1410, rx461_pos, 0
  rxquantr467_loop1409:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    goto rxsubrule468_pass1411
  rxsubrule468_back1412:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
  rxsubrule468_pass1411:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule468_back1412
    push rx461_bstack, $I11
    push rx461_bstack, 0
    push rx461_bstack, rx461_pos
    elements $I11, rx461_cstack
    push rx461_bstack, $I11
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    nqp_rxpeek $I19, rx461_bstack, rxquantr467_done1410
    inc $I19
    inc $I19
    set rx461_rep, rx461_bstack[$I19]
    nqp_rxcommit rx461_bstack, rxquantr467_done1410
    inc rx461_rep
  rxquantr467_done1410:
    goto alt463_end1402
  alt463_21413:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule469_pass1414, -1, 0
  rxsubrule469_pass1414:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_31415:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."variable"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule470_pass1416, -1, 0
  rxsubrule470_pass1416:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_end1402:
    nqp_rxcommit rx461_bstack, alt463_end1402
    rx461_cur."!cursor_pass"(rx461_pos, "colonpair", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1394:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1395:
    unless rx461_bstack, rx461_done1393
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1398
    unless rx461_cstack, rx461_cstack_done1398
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1398:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1393
    lt rx461_pos, 0, rx461_fail1395
    eq $I19, 0, rx461_fail1395
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1396
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1397
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1397:
    assign rx461_cstack, $I18
  rx461_jump1396:
    jump $I19
  rx461_done1393:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_95_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 924
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx471_tgt
    .local int rx471_pos
    .local int rx471_off
    .local int rx471_eos
    .local int rx471_rep
    .local pmc rx471_cur
    .local pmc rx471_curclass
    .local pmc rx471_bstack
    .local pmc rx471_cstack
    (rx471_cur, rx471_tgt, rx471_pos, rx471_curclass, rx471_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx471_cur
    length rx471_eos, rx471_tgt
    eq $I19, 1, rx471_restart1419
    gt rx471_pos, rx471_eos, rx471_fail1420
    repr_get_attr_int $I11, self, rx471_curclass, "$!from"
    ne $I11, -1, rxscan472_done1426
    goto rxscan472_scan1425
  rxscan472_loop1424:
    inc rx471_pos
    gt rx471_pos, rx471_eos, rx471_fail1420
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!from", rx471_pos
  rxscan472_scan1425:
    nqp_rxmark rx471_bstack, rxscan472_loop1424, rx471_pos, 0
  rxscan472_done1426:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt473_01428
    nqp_push_label $P11, alt473_11435
    nqp_push_label $P11, alt473_21438
    nqp_rxmark rx471_bstack, alt473_end1427, -1, 0
    rx471_cur."!alt"(rx471_pos, "alt_nfa__20_1359718903.004", $P11)
    goto rx471_fail1420
  alt473_01428:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule474_pass1429, -1, 0
  rxsubrule474_pass1429:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    nqp_rxmark rx471_bstack, rxquantr475_done1431, rx471_pos, 0
  rxquantr475_loop1430:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    goto rxsubrule476_pass1432
  rxsubrule476_back1433:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
  rxsubrule476_pass1432:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule476_back1433
    push rx471_bstack, $I11
    push rx471_bstack, 0
    push rx471_bstack, rx471_pos
    elements $I11, rx471_cstack
    push rx471_bstack, $I11
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    nqp_rxpeek $I19, rx471_bstack, rxquantr475_done1431
    inc $I19
    inc $I19
    set rx471_rep, rx471_bstack[$I19]
    nqp_rxcommit rx471_bstack, rxquantr475_done1431
    inc rx471_rep
  rxquantr475_done1431:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."name"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule477_pass1434, -1, 0
  rxsubrule477_pass1434:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    goto alt473_end1427
  alt473_11435:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule478_pass1436, -1, 0
  rxsubrule478_pass1436:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    ge rx471_pos, rx471_eos, rx471_fail1420
    substr $S11, rx471_tgt, rx471_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx471_fail1420
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule479_pass1437, -1, 0
  rxsubrule479_pass1437:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    goto alt473_end1427
  alt473_21438:
    nqp_rxmark rx471_bstack, rxcap480_fail1440, rx471_pos, 0
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1420
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:"$", rx471_fail1420
    add rx471_pos, 1
    nqp_rxpeek $I19, rx471_bstack, rxcap480_fail1440
    inc $I19
    set $I11, rx471_bstack[$I19]
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx471_pos)
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    goto rxcap480_done1439
  rxcap480_fail1440:
    goto rx471_fail1420
  rxcap480_done1439:
    nqp_rxmark rx471_bstack, rxcap481_fail1442, rx471_pos, 0
    ge rx471_pos, rx471_eos, rx471_fail1420
    substr $S11, rx471_tgt, rx471_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx471_fail1420
    inc rx471_pos
    nqp_rxpeek $I19, rx471_bstack, rxcap481_fail1442
    inc $I19
    set $I11, rx471_bstack[$I19]
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx471_pos)
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap481_done1441
  rxcap481_fail1442:
    goto rx471_fail1420
  rxcap481_done1441:
    goto alt473_end1427
  alt473_end1427:
    rx471_cur."!cursor_pass"(rx471_pos, "variable", 'backtrack'=>1)
    .return (rx471_cur)
  rx471_restart1419:
    repr_get_attr_obj rx471_cstack, rx471_cur, rx471_curclass, "$!cstack"
  rx471_fail1420:
    unless rx471_bstack, rx471_done1418
    pop $I19, rx471_bstack
    if_null rx471_cstack, rx471_cstack_done1423
    unless rx471_cstack, rx471_cstack_done1423
    dec $I19
    set $P11, rx471_cstack[$I19]
  rx471_cstack_done1423:
    pop rx471_rep, rx471_bstack
    pop rx471_pos, rx471_bstack
    pop $I19, rx471_bstack
    lt rx471_pos, -1, rx471_done1418
    lt rx471_pos, 0, rx471_fail1420
    eq $I19, 0, rx471_fail1420
    nqp_islist $I20, rx471_cstack
    unless $I20, rx471_jump1421
    elements $I18, rx471_bstack
    le $I18, 0, rx471_cut1422
    dec $I18
    set $I18, rx471_bstack[$I18]
  rx471_cut1422:
    assign rx471_cstack, $I18
  rx471_jump1421:
    jump $I19
  rx471_done1418:
    rx471_cur."!cursor_fail"()
    .return (rx471_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_96_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 930
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    (rx482_cur, rx482_tgt, rx482_pos, rx482_curclass, rx482_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1445
    gt rx482_pos, rx482_eos, rx482_fail1446
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1452
    goto rxscan483_scan1451
  rxscan483_loop1450:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1446
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1451:
    nqp_rxmark rx482_bstack, rxscan483_loop1450, rx482_pos, 0
  rxscan483_done1452:
    ge rx482_pos, rx482_eos, rx482_fail1446
    substr $S11, rx482_tgt, rx482_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx482_fail1446
    inc rx482_pos
    rx482_cur."!cursor_pass"(rx482_pos, "sigil", 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1445:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1446:
    unless rx482_bstack, rx482_done1444
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1449
    unless rx482_cstack, rx482_cstack_done1449
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1449:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1444
    lt rx482_pos, 0, rx482_fail1446
    eq $I19, 0, rx482_fail1446
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1447
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1448
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1448:
    assign rx482_cstack, $I18
  rx482_jump1447:
    jump $I19
  rx482_done1444:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_97_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 932
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx484_tgt
    .local int rx484_pos
    .local int rx484_off
    .local int rx484_eos
    .local int rx484_rep
    .local pmc rx484_cur
    .local pmc rx484_curclass
    .local pmc rx484_bstack
    .local pmc rx484_cstack
    (rx484_cur, rx484_tgt, rx484_pos, rx484_curclass, rx484_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx484_cur
    length rx484_eos, rx484_tgt
    eq $I19, 1, rx484_restart1455
    gt rx484_pos, rx484_eos, rx484_fail1456
    repr_get_attr_int $I11, self, rx484_curclass, "$!from"
    ne $I11, -1, rxscan485_done1462
    goto rxscan485_scan1461
  rxscan485_loop1460:
    inc rx484_pos
    gt rx484_pos, rx484_eos, rx484_fail1456
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!from", rx484_pos
  rxscan485_scan1461:
    nqp_rxmark rx484_bstack, rxscan485_loop1460, rx484_pos, 0
  rxscan485_done1462:
    ge rx484_pos, rx484_eos, rx484_fail1456
    substr $S11, rx484_tgt, rx484_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx484_fail1456
    inc rx484_pos
    rx484_cur."!cursor_pass"(rx484_pos, "twigil", 'backtrack'=>1)
    .return (rx484_cur)
  rx484_restart1455:
    repr_get_attr_obj rx484_cstack, rx484_cur, rx484_curclass, "$!cstack"
  rx484_fail1456:
    unless rx484_bstack, rx484_done1454
    pop $I19, rx484_bstack
    if_null rx484_cstack, rx484_cstack_done1459
    unless rx484_cstack, rx484_cstack_done1459
    dec $I19
    set $P11, rx484_cstack[$I19]
  rx484_cstack_done1459:
    pop rx484_rep, rx484_bstack
    pop rx484_pos, rx484_bstack
    pop $I19, rx484_bstack
    lt rx484_pos, -1, rx484_done1454
    lt rx484_pos, 0, rx484_fail1456
    eq $I19, 0, rx484_fail1456
    nqp_islist $I20, rx484_cstack
    unless $I20, rx484_jump1457
    elements $I18, rx484_bstack
    le $I18, 0, rx484_cut1458
    dec $I18
    set $I18, rx484_bstack[$I18]
  rx484_cut1458:
    assign rx484_cstack, $I18
  rx484_jump1457:
    jump $I19
  rx484_done1454:
    rx484_cur."!cursor_fail"()
    .return (rx484_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_98_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_99_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx486_tgt
    .local int rx486_pos
    .local int rx486_off
    .local int rx486_eos
    .local int rx486_rep
    .local pmc rx486_cur
    .local pmc rx486_curclass
    .local pmc rx486_bstack
    .local pmc rx486_cstack
    (rx486_cur, rx486_tgt, rx486_pos, rx486_curclass, rx486_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx486_cur
    length rx486_eos, rx486_tgt
    eq $I19, 1, rx486_restart1465
    gt rx486_pos, rx486_eos, rx486_fail1466
    repr_get_attr_int $I11, self, rx486_curclass, "$!from"
    ne $I11, -1, rxscan487_done1472
    goto rxscan487_scan1471
  rxscan487_loop1470:
    inc rx486_pos
    gt rx486_pos, rx486_eos, rx486_fail1466
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!from", rx486_pos
  rxscan487_scan1471:
    nqp_rxmark rx486_bstack, rxscan487_loop1470, rx486_pos, 0
  rxscan487_done1472:
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    store_lex unicode:"$\x{a2}", rx486_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1473
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1474
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback1474:
    unless_null $P5004, vivi_4881475
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4881475:
    set $P5003, $P5004
  fallback1473:
    set $P101, $P5003
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    store_lex unicode:"$\x{a2}", rx486_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx486_bstack, rxcap489_fail1477, rx486_pos, 0
    add $I11, rx486_pos, 6
    gt $I11, rx486_eos, rx486_fail1466
    substr $S10, rx486_tgt, rx486_pos, 6
    ne $S10, ucs4:"module", rx486_fail1466
    add rx486_pos, 6
    nqp_rxpeek $I19, rx486_bstack, rxcap489_fail1477
    inc $I19
    set $I11, rx486_bstack[$I19]
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx486_pos)
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "sym")
    goto rxcap489_done1476
  rxcap489_fail1477:
    goto rx486_fail1466
  rxcap489_done1476:
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx486_curclass, "$!pos"
    lt $I11, 0, rx486_fail1466
    nqp_rxmark rx486_bstack, rxsubrule490_pass1478, -1, 0
  rxsubrule490_pass1478:
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx486_pos, $P11, rx486_curclass, "$!pos"
    rx486_cur."!cursor_pass"(rx486_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx486_cur)
  rx486_restart1465:
    repr_get_attr_obj rx486_cstack, rx486_cur, rx486_curclass, "$!cstack"
  rx486_fail1466:
    unless rx486_bstack, rx486_done1464
    pop $I19, rx486_bstack
    if_null rx486_cstack, rx486_cstack_done1469
    unless rx486_cstack, rx486_cstack_done1469
    dec $I19
    set $P11, rx486_cstack[$I19]
  rx486_cstack_done1469:
    pop rx486_rep, rx486_bstack
    pop rx486_pos, rx486_bstack
    pop $I19, rx486_bstack
    lt rx486_pos, -1, rx486_done1464
    lt rx486_pos, 0, rx486_fail1466
    eq $I19, 0, rx486_fail1466
    nqp_islist $I20, rx486_cstack
    unless $I20, rx486_jump1467
    elements $I18, rx486_bstack
    le $I18, 0, rx486_cut1468
    dec $I18
    set $I18, rx486_bstack[$I18]
  rx486_cut1468:
    assign rx486_cstack, $I18
  rx486_jump1467:
    jump $I19
  rx486_done1464:
    rx486_cur."!cursor_fail"()
    .return (rx486_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_100_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 940
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx491_tgt
    .local int rx491_pos
    .local int rx491_off
    .local int rx491_eos
    .local int rx491_rep
    .local pmc rx491_cur
    .local pmc rx491_curclass
    .local pmc rx491_bstack
    .local pmc rx491_cstack
    (rx491_cur, rx491_tgt, rx491_pos, rx491_curclass, rx491_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx491_cur
    length rx491_eos, rx491_tgt
    eq $I19, 1, rx491_restart1481
    gt rx491_pos, rx491_eos, rx491_fail1482
    repr_get_attr_int $I11, self, rx491_curclass, "$!from"
    ne $I11, -1, rxscan492_done1488
    goto rxscan492_scan1487
  rxscan492_loop1486:
    inc rx491_pos
    gt rx491_pos, rx491_eos, rx491_fail1482
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!from", rx491_pos
  rxscan492_scan1487:
    nqp_rxmark rx491_bstack, rxscan492_loop1486, rx491_pos, 0
  rxscan492_done1488:
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    store_lex unicode:"$\x{a2}", rx491_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1489
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1490
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback1490:
    unless_null $P5004, vivi_4931491
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4931491:
    set $P5003, $P5004
  fallback1489:
    set $P101, $P5003
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    store_lex unicode:"$\x{a2}", rx491_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx491_bstack, rxcap494_fail1493, rx491_pos, 0
    add $I11, rx491_pos, 7
    gt $I11, rx491_eos, rx491_fail1482
    substr $S10, rx491_tgt, rx491_pos, 7
    ne $S10, ucs4:"knowhow", rx491_fail1482
    add rx491_pos, 7
    nqp_rxpeek $I19, rx491_bstack, rxcap494_fail1493
    inc $I19
    set $I11, rx491_bstack[$I19]
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx491_pos)
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "sym")
    goto rxcap494_done1492
  rxcap494_fail1493:
    goto rx491_fail1482
  rxcap494_done1492:
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1482
    nqp_rxmark rx491_bstack, rxsubrule495_pass1494, -1, 0
  rxsubrule495_pass1494:
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    rx491_cur."!cursor_pass"(rx491_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx491_cur)
  rx491_restart1481:
    repr_get_attr_obj rx491_cstack, rx491_cur, rx491_curclass, "$!cstack"
  rx491_fail1482:
    unless rx491_bstack, rx491_done1480
    pop $I19, rx491_bstack
    if_null rx491_cstack, rx491_cstack_done1485
    unless rx491_cstack, rx491_cstack_done1485
    dec $I19
    set $P11, rx491_cstack[$I19]
  rx491_cstack_done1485:
    pop rx491_rep, rx491_bstack
    pop rx491_pos, rx491_bstack
    pop $I19, rx491_bstack
    lt rx491_pos, -1, rx491_done1480
    lt rx491_pos, 0, rx491_fail1482
    eq $I19, 0, rx491_fail1482
    nqp_islist $I20, rx491_cstack
    unless $I20, rx491_jump1483
    elements $I18, rx491_bstack
    le $I18, 0, rx491_cut1484
    dec $I18
    set $I18, rx491_bstack[$I18]
  rx491_cut1484:
    assign rx491_cstack, $I18
  rx491_jump1483:
    jump $I19
  rx491_done1480:
    rx491_cur."!cursor_fail"()
    .return (rx491_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_101_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 945
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx496_tgt
    .local int rx496_pos
    .local int rx496_off
    .local int rx496_eos
    .local int rx496_rep
    .local pmc rx496_cur
    .local pmc rx496_curclass
    .local pmc rx496_bstack
    .local pmc rx496_cstack
    (rx496_cur, rx496_tgt, rx496_pos, rx496_curclass, rx496_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx496_cur
    length rx496_eos, rx496_tgt
    eq $I19, 1, rx496_restart1497
    gt rx496_pos, rx496_eos, rx496_fail1498
    repr_get_attr_int $I11, self, rx496_curclass, "$!from"
    ne $I11, -1, rxscan497_done1504
    goto rxscan497_scan1503
  rxscan497_loop1502:
    inc rx496_pos
    gt rx496_pos, rx496_eos, rx496_fail1498
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!from", rx496_pos
  rxscan497_scan1503:
    nqp_rxmark rx496_bstack, rxscan497_loop1502, rx496_pos, 0
  rxscan497_done1504:
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    store_lex unicode:"$\x{a2}", rx496_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1505
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1506
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback1506:
    unless_null $P5004, vivi_4981507
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4981507:
    set $P5003, $P5004
  fallback1505:
    set $P101, $P5003
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    store_lex unicode:"$\x{a2}", rx496_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx496_bstack, rxcap499_fail1509, rx496_pos, 0
    add $I11, rx496_pos, 5
    gt $I11, rx496_eos, rx496_fail1498
    substr $S10, rx496_tgt, rx496_pos, 5
    ne $S10, ucs4:"class", rx496_fail1498
    add rx496_pos, 5
    nqp_rxpeek $I19, rx496_bstack, rxcap499_fail1509
    inc $I19
    set $I11, rx496_bstack[$I19]
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    $P11 = rx496_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx496_pos)
    rx496_cstack = rx496_cur."!cursor_capture"($P11, "sym")
    goto rxcap499_done1508
  rxcap499_fail1509:
    goto rx496_fail1498
  rxcap499_done1508:
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    $P11 = rx496_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx496_curclass, "$!pos"
    lt $I11, 0, rx496_fail1498
    nqp_rxmark rx496_bstack, rxsubrule500_pass1510, -1, 0
  rxsubrule500_pass1510:
    rx496_cstack = rx496_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx496_pos, $P11, rx496_curclass, "$!pos"
    rx496_cur."!cursor_pass"(rx496_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx496_cur)
  rx496_restart1497:
    repr_get_attr_obj rx496_cstack, rx496_cur, rx496_curclass, "$!cstack"
  rx496_fail1498:
    unless rx496_bstack, rx496_done1496
    pop $I19, rx496_bstack
    if_null rx496_cstack, rx496_cstack_done1501
    unless rx496_cstack, rx496_cstack_done1501
    dec $I19
    set $P11, rx496_cstack[$I19]
  rx496_cstack_done1501:
    pop rx496_rep, rx496_bstack
    pop rx496_pos, rx496_bstack
    pop $I19, rx496_bstack
    lt rx496_pos, -1, rx496_done1496
    lt rx496_pos, 0, rx496_fail1498
    eq $I19, 0, rx496_fail1498
    nqp_islist $I20, rx496_cstack
    unless $I20, rx496_jump1499
    elements $I18, rx496_bstack
    le $I18, 0, rx496_cut1500
    dec $I18
    set $I18, rx496_bstack[$I18]
  rx496_cut1500:
    assign rx496_cstack, $I18
  rx496_jump1499:
    jump $I19
  rx496_done1496:
    rx496_cur."!cursor_fail"()
    .return (rx496_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_102_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 950
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx501_tgt
    .local int rx501_pos
    .local int rx501_off
    .local int rx501_eos
    .local int rx501_rep
    .local pmc rx501_cur
    .local pmc rx501_curclass
    .local pmc rx501_bstack
    .local pmc rx501_cstack
    (rx501_cur, rx501_tgt, rx501_pos, rx501_curclass, rx501_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx501_cur
    length rx501_eos, rx501_tgt
    eq $I19, 1, rx501_restart1513
    gt rx501_pos, rx501_eos, rx501_fail1514
    repr_get_attr_int $I11, self, rx501_curclass, "$!from"
    ne $I11, -1, rxscan502_done1520
    goto rxscan502_scan1519
  rxscan502_loop1518:
    inc rx501_pos
    gt rx501_pos, rx501_eos, rx501_fail1514
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!from", rx501_pos
  rxscan502_scan1519:
    nqp_rxmark rx501_bstack, rxscan502_loop1518, rx501_pos, 0
  rxscan502_done1520:
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    store_lex unicode:"$\x{a2}", rx501_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1521
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1522
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback1522:
    unless_null $P5004, vivi_5031523
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5031523:
    set $P5003, $P5004
  fallback1521:
    set $P101, $P5003
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    store_lex unicode:"$\x{a2}", rx501_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx501_bstack, rxcap504_fail1525, rx501_pos, 0
    add $I11, rx501_pos, 7
    gt $I11, rx501_eos, rx501_fail1514
    substr $S10, rx501_tgt, rx501_pos, 7
    ne $S10, ucs4:"grammar", rx501_fail1514
    add rx501_pos, 7
    nqp_rxpeek $I19, rx501_bstack, rxcap504_fail1525
    inc $I19
    set $I11, rx501_bstack[$I19]
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx501_pos)
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "sym")
    goto rxcap504_done1524
  rxcap504_fail1525:
    goto rx501_fail1514
  rxcap504_done1524:
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1514
    nqp_rxmark rx501_bstack, rxsubrule505_pass1526, -1, 0
  rxsubrule505_pass1526:
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx501_pos, $P11, rx501_curclass, "$!pos"
    rx501_cur."!cursor_pass"(rx501_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx501_cur)
  rx501_restart1513:
    repr_get_attr_obj rx501_cstack, rx501_cur, rx501_curclass, "$!cstack"
  rx501_fail1514:
    unless rx501_bstack, rx501_done1512
    pop $I19, rx501_bstack
    if_null rx501_cstack, rx501_cstack_done1517
    unless rx501_cstack, rx501_cstack_done1517
    dec $I19
    set $P11, rx501_cstack[$I19]
  rx501_cstack_done1517:
    pop rx501_rep, rx501_bstack
    pop rx501_pos, rx501_bstack
    pop $I19, rx501_bstack
    lt rx501_pos, -1, rx501_done1512
    lt rx501_pos, 0, rx501_fail1514
    eq $I19, 0, rx501_fail1514
    nqp_islist $I20, rx501_cstack
    unless $I20, rx501_jump1515
    elements $I18, rx501_bstack
    le $I18, 0, rx501_cut1516
    dec $I18
    set $I18, rx501_bstack[$I18]
  rx501_cut1516:
    assign rx501_cstack, $I18
  rx501_jump1515:
    jump $I19
  rx501_done1512:
    rx501_cur."!cursor_fail"()
    .return (rx501_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_103_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 955
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx506_tgt
    .local int rx506_pos
    .local int rx506_off
    .local int rx506_eos
    .local int rx506_rep
    .local pmc rx506_cur
    .local pmc rx506_curclass
    .local pmc rx506_bstack
    .local pmc rx506_cstack
    (rx506_cur, rx506_tgt, rx506_pos, rx506_curclass, rx506_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx506_cur
    length rx506_eos, rx506_tgt
    eq $I19, 1, rx506_restart1529
    gt rx506_pos, rx506_eos, rx506_fail1530
    repr_get_attr_int $I11, self, rx506_curclass, "$!from"
    ne $I11, -1, rxscan507_done1536
    goto rxscan507_scan1535
  rxscan507_loop1534:
    inc rx506_pos
    gt rx506_pos, rx506_eos, rx506_fail1530
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!from", rx506_pos
  rxscan507_scan1535:
    nqp_rxmark rx506_bstack, rxscan507_loop1534, rx506_pos, 0
  rxscan507_done1536:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    store_lex unicode:"$\x{a2}", rx506_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1537
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1538
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback1538:
    unless_null $P5004, vivi_5081539
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5081539:
    set $P5003, $P5004
  fallback1537:
    set $P101, $P5003
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    store_lex unicode:"$\x{a2}", rx506_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx506_bstack, rxcap509_fail1541, rx506_pos, 0
    add $I11, rx506_pos, 4
    gt $I11, rx506_eos, rx506_fail1530
    substr $S10, rx506_tgt, rx506_pos, 4
    ne $S10, ucs4:"role", rx506_fail1530
    add rx506_pos, 4
    nqp_rxpeek $I19, rx506_bstack, rxcap509_fail1541
    inc $I19
    set $I11, rx506_bstack[$I19]
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx506_pos)
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "sym")
    goto rxcap509_done1540
  rxcap509_fail1541:
    goto rx506_fail1530
  rxcap509_done1540:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1530
    nqp_rxmark rx506_bstack, rxsubrule510_pass1542, -1, 0
  rxsubrule510_pass1542:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    rx506_cur."!cursor_pass"(rx506_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx506_cur)
  rx506_restart1529:
    repr_get_attr_obj rx506_cstack, rx506_cur, rx506_curclass, "$!cstack"
  rx506_fail1530:
    unless rx506_bstack, rx506_done1528
    pop $I19, rx506_bstack
    if_null rx506_cstack, rx506_cstack_done1533
    unless rx506_cstack, rx506_cstack_done1533
    dec $I19
    set $P11, rx506_cstack[$I19]
  rx506_cstack_done1533:
    pop rx506_rep, rx506_bstack
    pop rx506_pos, rx506_bstack
    pop $I19, rx506_bstack
    lt rx506_pos, -1, rx506_done1528
    lt rx506_pos, 0, rx506_fail1530
    eq $I19, 0, rx506_fail1530
    nqp_islist $I20, rx506_cstack
    unless $I20, rx506_jump1531
    elements $I18, rx506_bstack
    le $I18, 0, rx506_cut1532
    dec $I18
    set $I18, rx506_bstack[$I18]
  rx506_cut1532:
    assign rx506_cstack, $I18
  rx506_jump1531:
    jump $I19
  rx506_done1528:
    rx506_cur."!cursor_fail"()
    .return (rx506_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_104_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 960
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx511_tgt
    .local int rx511_pos
    .local int rx511_off
    .local int rx511_eos
    .local int rx511_rep
    .local pmc rx511_cur
    .local pmc rx511_curclass
    .local pmc rx511_bstack
    .local pmc rx511_cstack
    (rx511_cur, rx511_tgt, rx511_pos, rx511_curclass, rx511_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx511_cur
    length rx511_eos, rx511_tgt
    eq $I19, 1, rx511_restart1545
    gt rx511_pos, rx511_eos, rx511_fail1546
    repr_get_attr_int $I11, self, rx511_curclass, "$!from"
    ne $I11, -1, rxscan512_done1552
    goto rxscan512_scan1551
  rxscan512_loop1550:
    inc rx511_pos
    gt rx511_pos, rx511_eos, rx511_fail1546
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!from", rx511_pos
  rxscan512_scan1551:
    nqp_rxmark rx511_bstack, rxscan512_loop1550, rx511_pos, 0
  rxscan512_done1552:
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    store_lex unicode:"$\x{a2}", rx511_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1553
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1554
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback1554:
    unless_null $P5004, vivi_5131555
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5131555:
    set $P5003, $P5004
  fallback1553:
    set $P101, $P5003
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    store_lex unicode:"$\x{a2}", rx511_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx511_bstack, rxcap514_fail1557, rx511_pos, 0
    add $I11, rx511_pos, 6
    gt $I11, rx511_eos, rx511_fail1546
    substr $S10, rx511_tgt, rx511_pos, 6
    ne $S10, ucs4:"native", rx511_fail1546
    add rx511_pos, 6
    nqp_rxpeek $I19, rx511_bstack, rxcap514_fail1557
    inc $I19
    set $I11, rx511_bstack[$I19]
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    $P11 = rx511_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx511_pos)
    rx511_cstack = rx511_cur."!cursor_capture"($P11, "sym")
    goto rxcap514_done1556
  rxcap514_fail1557:
    goto rx511_fail1546
  rxcap514_done1556:
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    $P11 = rx511_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx511_curclass, "$!pos"
    lt $I11, 0, rx511_fail1546
    nqp_rxmark rx511_bstack, rxsubrule515_pass1558, -1, 0
  rxsubrule515_pass1558:
    rx511_cstack = rx511_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx511_pos, $P11, rx511_curclass, "$!pos"
    rx511_cur."!cursor_pass"(rx511_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx511_cur)
  rx511_restart1545:
    repr_get_attr_obj rx511_cstack, rx511_cur, rx511_curclass, "$!cstack"
  rx511_fail1546:
    unless rx511_bstack, rx511_done1544
    pop $I19, rx511_bstack
    if_null rx511_cstack, rx511_cstack_done1549
    unless rx511_cstack, rx511_cstack_done1549
    dec $I19
    set $P11, rx511_cstack[$I19]
  rx511_cstack_done1549:
    pop rx511_rep, rx511_bstack
    pop rx511_pos, rx511_bstack
    pop $I19, rx511_bstack
    lt rx511_pos, -1, rx511_done1544
    lt rx511_pos, 0, rx511_fail1546
    eq $I19, 0, rx511_fail1546
    nqp_islist $I20, rx511_cstack
    unless $I20, rx511_jump1547
    elements $I18, rx511_bstack
    le $I18, 0, rx511_cut1548
    dec $I18
    set $I18, rx511_bstack[$I18]
  rx511_cut1548:
    assign rx511_cstack, $I18
  rx511_jump1547:
    jump $I19
  rx511_done1544:
    rx511_cur."!cursor_fail"()
    .return (rx511_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_105_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 965
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx516_tgt
    .local int rx516_pos
    .local int rx516_off
    .local int rx516_eos
    .local int rx516_rep
    .local pmc rx516_cur
    .local pmc rx516_curclass
    .local pmc rx516_bstack
    .local pmc rx516_cstack
    (rx516_cur, rx516_tgt, rx516_pos, rx516_curclass, rx516_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx516_cur
    length rx516_eos, rx516_tgt
    eq $I19, 1, rx516_restart1561
    gt rx516_pos, rx516_eos, rx516_fail1562
    repr_get_attr_int $I11, self, rx516_curclass, "$!from"
    ne $I11, -1, rxscan517_done1568
    goto rxscan517_scan1567
  rxscan517_loop1566:
    inc rx516_pos
    gt rx516_pos, rx516_eos, rx516_fail1562
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!from", rx516_pos
  rxscan517_scan1567:
    nqp_rxmark rx516_bstack, rxscan517_loop1566, rx516_pos, 0
  rxscan517_done1568:
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    store_lex unicode:"$\x{a2}", rx516_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1569
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1570
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback1570:
    unless_null $P5004, vivi_5181571
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5181571:
    set $P5003, $P5004
  fallback1569:
    set $P101, $P5003
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    store_lex unicode:"$\x{a2}", rx516_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx516_bstack, rxcap519_fail1573, rx516_pos, 0
    add $I11, rx516_pos, 4
    gt $I11, rx516_eos, rx516_fail1562
    substr $S10, rx516_tgt, rx516_pos, 4
    ne $S10, ucs4:"stub", rx516_fail1562
    add rx516_pos, 4
    nqp_rxpeek $I19, rx516_bstack, rxcap519_fail1573
    inc $I19
    set $I11, rx516_bstack[$I19]
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx516_pos)
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "sym")
    goto rxcap519_done1572
  rxcap519_fail1573:
    goto rx516_fail1562
  rxcap519_done1572:
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."name"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    nqp_rxmark rx516_bstack, rxsubrule521_pass1575, -1, 0
  rxsubrule521_pass1575:
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    add $I11, rx516_pos, 9
    gt $I11, rx516_eos, rx516_fail1562
    substr $S10, rx516_tgt, rx516_pos, 9
    ne $S10, ucs4:"metaclass", rx516_fail1562
    add rx516_pos, 9
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."name"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    nqp_rxmark rx516_bstack, rxsubrule524_pass1578, -1, 0
  rxsubrule524_pass1578:
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    add $I11, rx516_pos, 1
    gt $I11, rx516_eos, rx516_fail1562
    substr $S10, rx516_tgt, rx516_pos, 1
    ne $S10, ucs4:"{", rx516_fail1562
    add rx516_pos, 1
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    add $I11, rx516_pos, 3
    gt $I11, rx516_eos, rx516_fail1562
    substr $S10, rx516_tgt, rx516_pos, 3
    ne $S10, ucs4:"...", rx516_fail1562
    add rx516_pos, 3
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    add $I11, rx516_pos, 1
    gt $I11, rx516_eos, rx516_fail1562
    substr $S10, rx516_tgt, rx516_pos, 1
    ne $S10, ucs4:"}", rx516_fail1562
    add rx516_pos, 1
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1562
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    rx516_cur."!cursor_pass"(rx516_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx516_cur)
  rx516_restart1561:
    repr_get_attr_obj rx516_cstack, rx516_cur, rx516_curclass, "$!cstack"
  rx516_fail1562:
    unless rx516_bstack, rx516_done1560
    pop $I19, rx516_bstack
    if_null rx516_cstack, rx516_cstack_done1565
    unless rx516_cstack, rx516_cstack_done1565
    dec $I19
    set $P11, rx516_cstack[$I19]
  rx516_cstack_done1565:
    pop rx516_rep, rx516_bstack
    pop rx516_pos, rx516_bstack
    pop $I19, rx516_bstack
    lt rx516_pos, -1, rx516_done1560
    lt rx516_pos, 0, rx516_fail1562
    eq $I19, 0, rx516_fail1562
    nqp_islist $I20, rx516_cstack
    unless $I20, rx516_jump1563
    elements $I18, rx516_bstack
    le $I18, 0, rx516_cut1564
    dec $I18
    set $I18, rx516_bstack[$I18]
  rx516_cut1564:
    assign rx516_cstack, $I18
  rx516_jump1563:
    jump $I19
  rx516_done1560:
    rx516_cur."!cursor_fail"()
    .return (rx516_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_106_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 973
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_397_1359718901.265' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_398_1359718901.265' 
    capture_lex $P5021 
    .lex "$*PACKAGE", $P101 
    .lex "$OUTER", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx529_tgt
    .local int rx529_pos
    .local int rx529_off
    .local int rx529_eos
    .local int rx529_rep
    .local pmc rx529_cur
    .local pmc rx529_curclass
    .local pmc rx529_bstack
    .local pmc rx529_cstack
    (rx529_cur, rx529_tgt, rx529_pos, rx529_curclass, rx529_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx529_cur
    length rx529_eos, rx529_tgt
    eq $I19, 1, rx529_restart1585
    gt rx529_pos, rx529_eos, rx529_fail1586
    repr_get_attr_int $I11, self, rx529_curclass, "$!from"
    ne $I11, -1, rxscan530_done1592
    goto rxscan530_scan1591
  rxscan530_loop1590:
    inc rx529_pos
    gt rx529_pos, rx529_eos, rx529_fail1586
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!from", rx529_pos
  rxscan530_scan1591:
    nqp_rxmark rx529_bstack, rxscan530_loop1590, rx529_pos, 0
  rxscan530_done1592:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
    unless_null $P101, fallback1594
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PACKAGE"]
    unless_null $P5003, fallback1595
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback1595:
    unless_null $P5003, vivi_5321596
    die "Contextual $*PACKAGE not found"
    box $P5007, "Contextual $*PACKAGE not found"
    set $P5003, $P5007
  vivi_5321596:
    set $P101, $P5003
  fallback1594:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
.annotate 'line', 975
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1598
    nqp_get_sc_object $P5011, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback1599
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback1599:
    unless_null $P5009, vivi_5341600
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_5341600:
    set $P5008, $P5009
  fallback1598:
    $P5014 = $P5008."cur_lexpad"()
    set $P102, $P5014
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."name"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    nqp_rxmark rx529_bstack, rxsubrule536_pass1602, -1, 0
  rxsubrule536_pass1602:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr540_done1607, rx529_pos, 0
  rxquantr540_loop1606:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_397_1359718901.265' 
    capture_lex $P5016
    $P5017 = $P5016()
    unless $P5017, rx529_fail1586
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:"[", rx529_fail1586
    add rx529_pos, 1
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."role_params"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    nqp_rxmark rx529_bstack, rxsubrule545_pass1614, -1, 0
  rxsubrule545_pass1614:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "role_params")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt546_01616:
    nqp_rxmark rx529_bstack, alt546_11617, rx529_pos, 0
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:"]", rx529_fail1586
    add rx529_pos, 1
    goto alt546_end1615
  alt546_11617:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."FAILGOAL"("']'")
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    goto rxsubrule547_pass1618
  rxsubrule547_back1619:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
  rxsubrule547_pass1618:
    rx529_cstack = rx529_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule547_back1619
    push rx529_bstack, $I11
    push rx529_bstack, 0
    push rx529_bstack, rx529_pos
    elements $I11, rx529_cstack
    push rx529_bstack, $I11
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt546_end1615:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr540_done1607
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr540_done1607
    inc rx529_rep
  rxquantr540_done1607:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr550_done1623, rx529_pos, 0
  rxquantr550_loop1622:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 2
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 2
    ne $S10, ucs4:"is", rx529_fail1586
    add rx529_pos, 2
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 5
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 5
    ne $S10, ucs4:"repr(", rx529_fail1586
    add rx529_pos, 5
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    nqp_rxmark rx529_bstack, rxsubrule554_pass1627, -1, 0
  rxsubrule554_pass1627:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:")", rx529_fail1586
    add rx529_pos, 1
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr550_done1623
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr550_done1623
    inc rx529_rep
  rxquantr550_done1623:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
    $P5018 = $P103."MATCH"()
    set $P104, $P5018
    .const 'Sub' $P5019 = 'cuid_398_1359718901.265' 
    capture_lex $P5019
    $P5020 = $P5019()
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr579_done1717, rx529_pos, 0
  rxquantr579_loop1716:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxcap581_fail1720, rx529_pos, 0
    add $I11, rx529_pos, 9
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 9
    ne $S10, ucs4:"is export", rx529_fail1586
    add rx529_pos, 9
    nqp_rxpeek $I19, rx529_bstack, rxcap581_fail1720
    inc $I19
    set $I11, rx529_bstack[$I19]
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx529_pos)
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "export")
    goto rxcap581_done1719
  rxcap581_fail1720:
    goto rx529_fail1586
  rxcap581_done1719:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr579_done1717
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr579_done1717
    inc rx529_rep
  rxquantr579_done1717:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr584_done1724, rx529_pos, 0
  rxquantr584_loop1723:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 2
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 2
    ne $S10, ucs4:"is", rx529_fail1586
    add rx529_pos, 2
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."name"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    nqp_rxmark rx529_bstack, rxsubrule587_pass1727, -1, 0
  rxsubrule587_pass1727:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr584_done1724
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr584_done1724
    inc rx529_rep
  rxquantr584_done1724:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr590_done1731, rx529_pos, 0
  rxquantr590_loop1730:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 4
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 4
    ne $S10, ucs4:"does", rx529_fail1586
    add rx529_pos, 4
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."name"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    nqp_rxmark rx529_bstack, rxsubrule593_pass1734, -1, 0
  rxsubrule593_pass1734:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr590_done1731
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr590_done1731
    inc rx529_rep
    nqp_rxmark rx529_bstack, rxquantr590_done1731, rx529_pos, rx529_rep
    goto rxquantr590_loop1730
  rxquantr590_done1731:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt596_01738:
    nqp_rxmark rx529_bstack, alt596_11753, rx529_pos, 0
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1586
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:";", rx529_fail1586
    add rx529_pos, 1
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    nqp_rxmark rx529_bstack, rxsubrule599_pass1741, -1, 0
  rxsubrule599_pass1741:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt601_01744:
    nqp_rxmark rx529_bstack, alt601_11748, rx529_pos, 0
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    lt rx529_pos, rx529_eos, rx529_fail1586
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    goto alt601_end1743
  alt601_11748:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt601_end1743:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    goto alt596_end1737
  alt596_11753:
    nqp_rxmark rx529_bstack, alt596_21758, rx529_pos, 0
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    ge rx529_pos, rx529_eos, rx529_fail1586
    substr $S11, rx529_tgt, rx529_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx529_fail1586
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    nqp_rxmark rx529_bstack, rxsubrule611_pass1756, -1, 0
  rxsubrule611_pass1756:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    goto alt596_end1737
  alt596_21758:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt596_end1737:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1586
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    rx529_cur."!cursor_pass"(rx529_pos, "package_def", 'backtrack'=>1)
    .return (rx529_cur)
  rx529_restart1585:
    repr_get_attr_obj rx529_cstack, rx529_cur, rx529_curclass, "$!cstack"
  rx529_fail1586:
    unless rx529_bstack, rx529_done1584
    pop $I19, rx529_bstack
    if_null rx529_cstack, rx529_cstack_done1589
    unless rx529_cstack, rx529_cstack_done1589
    dec $I19
    set $P11, rx529_cstack[$I19]
  rx529_cstack_done1589:
    pop rx529_rep, rx529_bstack
    pop rx529_pos, rx529_bstack
    pop $I19, rx529_bstack
    lt rx529_pos, -1, rx529_done1584
    lt rx529_pos, 0, rx529_fail1586
    eq $I19, 0, rx529_fail1586
    nqp_islist $I20, rx529_cstack
    unless $I20, rx529_jump1587
    elements $I18, rx529_bstack
    le $I18, 0, rx529_cut1588
    dec $I18
    set $I18, rx529_bstack[$I18]
  rx529_cut1588:
    assign rx529_cstack, $I18
  rx529_jump1587:
    jump $I19
  rx529_done1584:
    rx529_cur."!cursor_fail"()
    .return (rx529_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1359718901.265") :anon :lex :outer("cuid_106_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 979

    find_dynamic_lex $P5001, "$*PKGDECL"
    unless_null $P5001, fallback1609
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PKGDECL"]
    unless_null $P5002, fallback1610
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback1610:
    unless_null $P5002, vivi_5421611
    die "Contextual $*PKGDECL not found"
    box $P5006, "Contextual $*PKGDECL not found"
    set $P5002, $P5006
  vivi_5421611:
    set $P5001, $P5002
  fallback1609:
    set $S5001, $P5001
    iseq $I5001, $S5001, "role"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1359718901.265") :anon :lex :outer("cuid_106_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 982
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1631
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5004
  fallback1631:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1632
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback1632:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1635
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5009
  fallback1635:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1636
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5010
  fallback1636:
    unless $P5007 goto if558_end1634 
.annotate 'line', 987
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1637
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5017
  fallback1637:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1638
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5018
  fallback1638:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1639
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5019
  fallback1639:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1640
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5020
  fallback1640:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1641
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5021
  fallback1641:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1642
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5022
  fallback1642:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
  if558_end1634:
.annotate 'line', 990
    find_dynamic_lex $P5024, "$*W"
    unless_null $P5024, fallback1643
    nqp_get_sc_object $P5027, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$W"]
    unless_null $P5025, fallback1644
    nqp_get_sc_object $P5028, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5028
  fallback1644:
    unless_null $P5025, vivi_5591645
    die "Contextual $*W not found"
    box $P5029, "Contextual $*W not found"
    set $P5025, $P5029
  vivi_5591645:
    set $P5024, $P5025
  fallback1643:
    find_dynamic_lex $P5031, "%*HOW"
    unless_null $P5031, fallback1646
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%HOW"]
    unless_null $P5032, fallback1647
    nqp_get_sc_object $P5036, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%HOW"], $P5037
    set $P5032, $P5037
  fallback1647:
    unless_null $P5032, vivi_5601648
    die "Contextual %*HOW not found"
    box $P5038, "Contextual %*HOW not found"
    set $P5032, $P5038
  vivi_5601648:
    set $P5031, $P5032
  fallback1646:
    find_dynamic_lex $P5039, "$*PKGDECL"
    unless_null $P5039, fallback1649
    nqp_get_sc_object $P5042, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$PKGDECL"]
    unless_null $P5040, fallback1650
    nqp_get_sc_object $P5043, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5043
  fallback1650:
    unless_null $P5040, vivi_5611651
    die "Contextual $*PKGDECL not found"
    box $P5044, "Contextual $*PKGDECL not found"
    set $P5040, $P5044
  vivi_5611651:
    set $P5039, $P5040
  fallback1649:
    set $S5003, $P5039
    set $P5030, $P5031[$S5003]
    unless_null $P5030, fallback1652
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5030, $P5045
  fallback1652:
    $P5046 = $P5024."pkg_create_mo"($P5030, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5046
    find_dynamic_lex $P5047, "$*SCOPE"
    unless_null $P5047, fallback1657
    nqp_get_sc_object $P5050, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$SCOPE"]
    unless_null $P5048, fallback1658
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5051
  fallback1658:
    unless_null $P5048, vivi_5641659
    die "Contextual $*SCOPE not found"
    box $P5052, "Contextual $*SCOPE not found"
    set $P5048, $P5052
  vivi_5641659:
    set $P5047, $P5048
  fallback1657:
    set $S5004, $P5047
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless563_end1656 
    find_dynamic_lex $P5053, "$*SCOPE"
    unless_null $P5053, fallback1660
    nqp_get_sc_object $P5056, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$SCOPE"]
    unless_null $P5054, fallback1661
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5054, $P5057
  fallback1661:
    unless_null $P5054, vivi_5651662
    die "Contextual $*SCOPE not found"
    box $P5058, "Contextual $*SCOPE not found"
    set $P5054, $P5058
  vivi_5651662:
    set $P5053, $P5054
  fallback1660:
    set $S5005, $P5053
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless563_end1656:
    unless $I5003 goto if562_else1653 
.annotate 'line', 993
.annotate 'line', 994
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback1663
    nqp_get_sc_object $P5062, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback1664
    nqp_get_sc_object $P5063, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5060, $P5063
  fallback1664:
    unless_null $P5060, vivi_5661665
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_5661665:
    set $P5059, $P5060
  fallback1663:
    find_dynamic_lex $P5065, "$*OUTERPACKAGE"
    unless_null $P5065, fallback1666
    nqp_get_sc_object $P5068, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$OUTERPACKAGE"]
    unless_null $P5066, fallback1667
    nqp_get_sc_object $P5069, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5066, $P5069
  fallback1667:
    unless_null $P5066, vivi_5671668
    die "Contextual $*OUTERPACKAGE not found"
    box $P5070, "Contextual $*OUTERPACKAGE not found"
    set $P5066, $P5070
  vivi_5671668:
    set $P5065, $P5066
  fallback1666:
    find_lex $P5073, "$/"
    unless_null $P5073, fallback1669
    nqp_get_sc_object $P5074, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5073, $P5074
  fallback1669:
    set $P5072, $P5073["name"]
    unless_null $P5072, fallback1670
    nqp_get_sc_object $P5075, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5072, $P5075
  fallback1670:
    set $P5071, $P5072["identifier"]
    unless_null $P5071, fallback1671
    nqp_get_sc_object $P5076, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5071, $P5076
  fallback1671:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback1672
    nqp_get_sc_object $P5080, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback1673
    nqp_get_sc_object $P5081, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5078, $P5081
  fallback1673:
    unless_null $P5078, vivi_5681674
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_5681674:
    set $P5077, $P5078
  fallback1672:
    $P5059."install_package_symbol"($P5065, $P5071, $P5077)
    find_lex $P5085, "$/"
    unless_null $P5085, fallback1677
    nqp_get_sc_object $P5086, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5085, $P5086
  fallback1677:
    set $P5084, $P5085["name"]
    unless_null $P5084, fallback1678
    nqp_get_sc_object $P5087, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5084, $P5087
  fallback1678:
    set $P5083, $P5084["identifier"]
    unless_null $P5083, fallback1679
    nqp_get_sc_object $P5088, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5083, $P5088
  fallback1679:
    set $N5001, $P5083
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5112, $I5004
    set $P5111, $P5112
    unless $I5004 goto if569_end1676 
.annotate 'line', 995
.annotate 'line', 996
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback1680
    nqp_get_sc_object $P5092, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback1681
    nqp_get_sc_object $P5093, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5090, $P5093
  fallback1681:
    unless_null $P5090, vivi_5701682
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_5701682:
    set $P5089, $P5090
  fallback1680:
    find_lex $P5095, "$OUTER"
    find_lex $P5099, "$/"
    unless_null $P5099, fallback1683
    nqp_get_sc_object $P5100, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5099, $P5100
  fallback1683:
    set $P5098, $P5099["name"]
    unless_null $P5098, fallback1684
    nqp_get_sc_object $P5101, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5098, $P5101
  fallback1684:
    set $P5097, $P5098["identifier"]
    unless_null $P5097, fallback1685
    nqp_get_sc_object $P5102, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5097, $P5102
  fallback1685:
    set $P5096, $P5097[0]
    unless_null $P5096, fallback1686
    nqp_get_sc_object $P5103, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5096, $P5103
  fallback1686:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback1687
    nqp_get_sc_object $P5107, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback1688
    nqp_get_sc_object $P5108, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5105, $P5108
  fallback1688:
    unless_null $P5105, vivi_5711689
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_5711689:
    set $P5104, $P5105
  fallback1687:
    $P5110 = $P5089."install_lexical_symbol"($P5095, $P5096, $P5104)
    set $P5111, $P5110
  if569_end1676:
    set $P5163, $P5111
    goto if562_end1654
  if562_else1653:
    find_dynamic_lex $P5113, "$*SCOPE"
    unless_null $P5113, fallback1692
    nqp_get_sc_object $P5116, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$SCOPE"]
    unless_null $P5114, fallback1693
    nqp_get_sc_object $P5117, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5114, $P5117
  fallback1693:
    unless_null $P5114, vivi_5731694
    die "Contextual $*SCOPE not found"
    box $P5118, "Contextual $*SCOPE not found"
    set $P5114, $P5118
  vivi_5731694:
    set $P5113, $P5114
  fallback1692:
    set $S5006, $P5113
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if572_else1690 
.annotate 'line', 999
    find_lex $P5121, "$/"
    unless_null $P5121, fallback1697
    nqp_get_sc_object $P5122, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5121, $P5122
  fallback1697:
    set $P5120, $P5121["name"]
    unless_null $P5120, fallback1698
    nqp_get_sc_object $P5123, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5120, $P5123
  fallback1698:
    set $P5119, $P5120["identifier"]
    unless_null $P5119, fallback1699
    nqp_get_sc_object $P5124, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5119, $P5124
  fallback1699:
    set $N5003, $P5119
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if574_end1696 
.annotate 'line', 1000
.annotate 'line', 1001
    find_lex $P5126, "$/"
    unless_null $P5126, fallback1700
    nqp_get_sc_object $P5127, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5126, $P5127
  fallback1700:
    set $P5125, $P5126["name"]
    unless_null $P5125, fallback1701
    nqp_get_sc_object $P5128, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5125, $P5128
  fallback1701:
    $P5129 = $P5125."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
  if574_end1696:
.annotate 'line', 1003
    find_dynamic_lex $P5131, "$*W"
    unless_null $P5131, fallback1702
    nqp_get_sc_object $P5134, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5133, $P5134
    set $P5132, $P5133["$W"]
    unless_null $P5132, fallback1703
    nqp_get_sc_object $P5135, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5132, $P5135
  fallback1703:
    unless_null $P5132, vivi_5751704
    die "Contextual $*W not found"
    box $P5136, "Contextual $*W not found"
    set $P5132, $P5136
  vivi_5751704:
    set $P5131, $P5132
  fallback1702:
    find_lex $P5137, "$OUTER"
    find_lex $P5141, "$/"
    unless_null $P5141, fallback1705
    nqp_get_sc_object $P5142, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5141, $P5142
  fallback1705:
    set $P5140, $P5141["name"]
    unless_null $P5140, fallback1706
    nqp_get_sc_object $P5143, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5140, $P5143
  fallback1706:
    set $P5139, $P5140["identifier"]
    unless_null $P5139, fallback1707
    nqp_get_sc_object $P5144, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5139, $P5144
  fallback1707:
    set $P5138, $P5139[0]
    unless_null $P5138, fallback1708
    nqp_get_sc_object $P5145, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5138, $P5145
  fallback1708:
    find_dynamic_lex $P5146, "$*PACKAGE"
    unless_null $P5146, fallback1709
    nqp_get_sc_object $P5149, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$PACKAGE"]
    unless_null $P5147, fallback1710
    nqp_get_sc_object $P5150, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5147, $P5150
  fallback1710:
    unless_null $P5147, vivi_5761711
    die "Contextual $*PACKAGE not found"
    box $P5151, "Contextual $*PACKAGE not found"
    set $P5147, $P5151
  vivi_5761711:
    set $P5146, $P5147
  fallback1709:
    $P5152 = $P5131."install_lexical_symbol"($P5137, $P5138, $P5146)
    set $P5162, $P5152
    goto if572_end1691
  if572_else1690:
.annotate 'line', 1005
.annotate 'line', 1006
    find_lex $P5153, "$/"
    $P5154 = $P5153."CURSOR"()
    find_dynamic_lex $P5155, "$*SCOPE"
    unless_null $P5155, fallback1712
    nqp_get_sc_object $P5158, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5157, $P5158
    set $P5156, $P5157["$SCOPE"]
    unless_null $P5156, fallback1713
    nqp_get_sc_object $P5159, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5156, $P5159
  fallback1713:
    unless_null $P5156, vivi_5771714
    die "Contextual $*SCOPE not found"
    box $P5160, "Contextual $*SCOPE not found"
    set $P5156, $P5160
  vivi_5771714:
    set $P5155, $P5156
  fallback1712:
    set $S5008, $P5155
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5161 = $P5154."panic"($S5007)
    set $P5162, $P5161
  if572_end1691:
    set $P5163, $P5162
  if562_end1654:
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_107_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1020
    .param pmc _lex_param_0 
    .lex "$*SCOPE", $P101 
    .lex "$*IN_DECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx617_tgt
    .local int rx617_pos
    .local int rx617_off
    .local int rx617_eos
    .local int rx617_rep
    .local pmc rx617_cur
    .local pmc rx617_curclass
    .local pmc rx617_bstack
    .local pmc rx617_cstack
    (rx617_cur, rx617_tgt, rx617_pos, rx617_curclass, rx617_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx617_cur
    length rx617_eos, rx617_tgt
    eq $I19, 1, rx617_restart1765
    gt rx617_pos, rx617_eos, rx617_fail1766
    repr_get_attr_int $I11, self, rx617_curclass, "$!from"
    ne $I11, -1, rxscan618_done1772
    goto rxscan618_scan1771
  rxscan618_loop1770:
    inc rx617_pos
    gt rx617_pos, rx617_eos, rx617_fail1766
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!from", rx617_pos
  rxscan618_scan1771:
    nqp_rxmark rx617_bstack, rxscan618_loop1770, rx617_pos, 0
  rxscan618_done1772:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    store_lex unicode:"$\x{a2}", rx617_cur
    box $P5003, "my"
    set $P101, $P5003
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    store_lex unicode:"$\x{a2}", rx617_cur
    box $P5004, "variable"
    set $P102, $P5004
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    nqp_rxmark rx617_bstack, rxquantr622_done1777, -1, 0
  rxquantr622_loop1776:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."variable"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    nqp_rxmark rx617_bstack, rxsubrule624_pass1779, -1, 0
  rxsubrule624_pass1779:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    nqp_rxpeek $I19, rx617_bstack, rxquantr622_done1777
    inc $I19
    inc $I19
    set rx617_rep, rx617_bstack[$I19]
    nqp_rxcommit rx617_bstack, rxquantr622_done1777
    inc rx617_rep
    nqp_rxmark rx617_bstack, rxquantr622_done1777, rx617_pos, rx617_rep
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    add $I11, rx617_pos, 1
    gt $I11, rx617_eos, rx617_fail1766
    substr $S10, rx617_tgt, rx617_pos, 1
    ne $S10, ucs4:",", rx617_fail1766
    add rx617_pos, 1
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    goto rxquantr622_loop1776
  rxquantr622_done1777:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1766
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    rx617_cur."!cursor_pass"(rx617_pos, "role_params", 'backtrack'=>1)
    .return (rx617_cur)
  rx617_restart1765:
    repr_get_attr_obj rx617_cstack, rx617_cur, rx617_curclass, "$!cstack"
  rx617_fail1766:
    unless rx617_bstack, rx617_done1764
    pop $I19, rx617_bstack
    if_null rx617_cstack, rx617_cstack_done1769
    unless rx617_cstack, rx617_cstack_done1769
    dec $I19
    set $P11, rx617_cstack[$I19]
  rx617_cstack_done1769:
    pop rx617_rep, rx617_bstack
    pop rx617_pos, rx617_bstack
    pop $I19, rx617_bstack
    lt rx617_pos, -1, rx617_done1764
    lt rx617_pos, 0, rx617_fail1766
    eq $I19, 0, rx617_fail1766
    nqp_islist $I20, rx617_cstack
    unless $I20, rx617_jump1767
    elements $I18, rx617_bstack
    le $I18, 0, rx617_cut1768
    dec $I18
    set $I18, rx617_bstack[$I18]
  rx617_cut1768:
    assign rx617_cstack, $I18
  rx617_jump1767:
    jump $I19
  rx617_done1764:
    rx617_cur."!cursor_fail"()
    .return (rx617_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_108_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1026
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_109_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1027
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx629_tgt
    .local int rx629_pos
    .local int rx629_off
    .local int rx629_eos
    .local int rx629_rep
    .local pmc rx629_cur
    .local pmc rx629_curclass
    .local pmc rx629_bstack
    .local pmc rx629_cstack
    (rx629_cur, rx629_tgt, rx629_pos, rx629_curclass, rx629_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx629_cur
    length rx629_eos, rx629_tgt
    eq $I19, 1, rx629_restart1786
    gt rx629_pos, rx629_eos, rx629_fail1787
    repr_get_attr_int $I11, self, rx629_curclass, "$!from"
    ne $I11, -1, rxscan630_done1793
    goto rxscan630_scan1792
  rxscan630_loop1791:
    inc rx629_pos
    gt rx629_pos, rx629_eos, rx629_fail1787
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!from", rx629_pos
  rxscan630_scan1792:
    nqp_rxmark rx629_bstack, rxscan630_loop1791, rx629_pos, 0
  rxscan630_done1793:
    nqp_rxmark rx629_bstack, rxcap631_fail1795, rx629_pos, 0
    add $I11, rx629_pos, 2
    gt $I11, rx629_eos, rx629_fail1787
    substr $S10, rx629_tgt, rx629_pos, 2
    ne $S10, ucs4:"my", rx629_fail1787
    add rx629_pos, 2
    nqp_rxpeek $I19, rx629_bstack, rxcap631_fail1795
    inc $I19
    set $I11, rx629_bstack[$I19]
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!pos", rx629_pos
    $P11 = rx629_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx629_pos)
    rx629_cstack = rx629_cur."!cursor_capture"($P11, "sym")
    goto rxcap631_done1794
  rxcap631_fail1795:
    goto rx629_fail1787
  rxcap631_done1794:
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!pos", rx629_pos
    $P11 = rx629_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx629_curclass, "$!pos"
    lt $I11, 0, rx629_fail1787
    nqp_rxmark rx629_bstack, rxsubrule632_pass1796, -1, 0
  rxsubrule632_pass1796:
    rx629_cstack = rx629_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx629_pos, $P11, rx629_curclass, "$!pos"
    rx629_cur."!cursor_pass"(rx629_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx629_cur)
  rx629_restart1786:
    repr_get_attr_obj rx629_cstack, rx629_cur, rx629_curclass, "$!cstack"
  rx629_fail1787:
    unless rx629_bstack, rx629_done1785
    pop $I19, rx629_bstack
    if_null rx629_cstack, rx629_cstack_done1790
    unless rx629_cstack, rx629_cstack_done1790
    dec $I19
    set $P11, rx629_cstack[$I19]
  rx629_cstack_done1790:
    pop rx629_rep, rx629_bstack
    pop rx629_pos, rx629_bstack
    pop $I19, rx629_bstack
    lt rx629_pos, -1, rx629_done1785
    lt rx629_pos, 0, rx629_fail1787
    eq $I19, 0, rx629_fail1787
    nqp_islist $I20, rx629_cstack
    unless $I20, rx629_jump1788
    elements $I18, rx629_bstack
    le $I18, 0, rx629_cut1789
    dec $I18
    set $I18, rx629_bstack[$I18]
  rx629_cut1789:
    assign rx629_cstack, $I18
  rx629_jump1788:
    jump $I19
  rx629_done1785:
    rx629_cur."!cursor_fail"()
    .return (rx629_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_110_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1028
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx633_tgt
    .local int rx633_pos
    .local int rx633_off
    .local int rx633_eos
    .local int rx633_rep
    .local pmc rx633_cur
    .local pmc rx633_curclass
    .local pmc rx633_bstack
    .local pmc rx633_cstack
    (rx633_cur, rx633_tgt, rx633_pos, rx633_curclass, rx633_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx633_cur
    length rx633_eos, rx633_tgt
    eq $I19, 1, rx633_restart1799
    gt rx633_pos, rx633_eos, rx633_fail1800
    repr_get_attr_int $I11, self, rx633_curclass, "$!from"
    ne $I11, -1, rxscan634_done1806
    goto rxscan634_scan1805
  rxscan634_loop1804:
    inc rx633_pos
    gt rx633_pos, rx633_eos, rx633_fail1800
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!from", rx633_pos
  rxscan634_scan1805:
    nqp_rxmark rx633_bstack, rxscan634_loop1804, rx633_pos, 0
  rxscan634_done1806:
    nqp_rxmark rx633_bstack, rxcap635_fail1808, rx633_pos, 0
    add $I11, rx633_pos, 3
    gt $I11, rx633_eos, rx633_fail1800
    substr $S10, rx633_tgt, rx633_pos, 3
    ne $S10, ucs4:"our", rx633_fail1800
    add rx633_pos, 3
    nqp_rxpeek $I19, rx633_bstack, rxcap635_fail1808
    inc $I19
    set $I11, rx633_bstack[$I19]
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!pos", rx633_pos
    $P11 = rx633_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx633_pos)
    rx633_cstack = rx633_cur."!cursor_capture"($P11, "sym")
    goto rxcap635_done1807
  rxcap635_fail1808:
    goto rx633_fail1800
  rxcap635_done1807:
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!pos", rx633_pos
    $P11 = rx633_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx633_curclass, "$!pos"
    lt $I11, 0, rx633_fail1800
    nqp_rxmark rx633_bstack, rxsubrule636_pass1809, -1, 0
  rxsubrule636_pass1809:
    rx633_cstack = rx633_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx633_pos, $P11, rx633_curclass, "$!pos"
    rx633_cur."!cursor_pass"(rx633_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx633_cur)
  rx633_restart1799:
    repr_get_attr_obj rx633_cstack, rx633_cur, rx633_curclass, "$!cstack"
  rx633_fail1800:
    unless rx633_bstack, rx633_done1798
    pop $I19, rx633_bstack
    if_null rx633_cstack, rx633_cstack_done1803
    unless rx633_cstack, rx633_cstack_done1803
    dec $I19
    set $P11, rx633_cstack[$I19]
  rx633_cstack_done1803:
    pop rx633_rep, rx633_bstack
    pop rx633_pos, rx633_bstack
    pop $I19, rx633_bstack
    lt rx633_pos, -1, rx633_done1798
    lt rx633_pos, 0, rx633_fail1800
    eq $I19, 0, rx633_fail1800
    nqp_islist $I20, rx633_cstack
    unless $I20, rx633_jump1801
    elements $I18, rx633_bstack
    le $I18, 0, rx633_cut1802
    dec $I18
    set $I18, rx633_bstack[$I18]
  rx633_cut1802:
    assign rx633_cstack, $I18
  rx633_jump1801:
    jump $I19
  rx633_done1798:
    rx633_cur."!cursor_fail"()
    .return (rx633_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_111_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1029
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx637_tgt
    .local int rx637_pos
    .local int rx637_off
    .local int rx637_eos
    .local int rx637_rep
    .local pmc rx637_cur
    .local pmc rx637_curclass
    .local pmc rx637_bstack
    .local pmc rx637_cstack
    (rx637_cur, rx637_tgt, rx637_pos, rx637_curclass, rx637_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx637_cur
    length rx637_eos, rx637_tgt
    eq $I19, 1, rx637_restart1812
    gt rx637_pos, rx637_eos, rx637_fail1813
    repr_get_attr_int $I11, self, rx637_curclass, "$!from"
    ne $I11, -1, rxscan638_done1819
    goto rxscan638_scan1818
  rxscan638_loop1817:
    inc rx637_pos
    gt rx637_pos, rx637_eos, rx637_fail1813
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!from", rx637_pos
  rxscan638_scan1818:
    nqp_rxmark rx637_bstack, rxscan638_loop1817, rx637_pos, 0
  rxscan638_done1819:
    nqp_rxmark rx637_bstack, rxcap639_fail1821, rx637_pos, 0
    add $I11, rx637_pos, 3
    gt $I11, rx637_eos, rx637_fail1813
    substr $S10, rx637_tgt, rx637_pos, 3
    ne $S10, ucs4:"has", rx637_fail1813
    add rx637_pos, 3
    nqp_rxpeek $I19, rx637_bstack, rxcap639_fail1821
    inc $I19
    set $I11, rx637_bstack[$I19]
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx637_pos)
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "sym")
    goto rxcap639_done1820
  rxcap639_fail1821:
    goto rx637_fail1813
  rxcap639_done1820:
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1813
    nqp_rxmark rx637_bstack, rxsubrule640_pass1822, -1, 0
  rxsubrule640_pass1822:
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    rx637_cur."!cursor_pass"(rx637_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx637_cur)
  rx637_restart1812:
    repr_get_attr_obj rx637_cstack, rx637_cur, rx637_curclass, "$!cstack"
  rx637_fail1813:
    unless rx637_bstack, rx637_done1811
    pop $I19, rx637_bstack
    if_null rx637_cstack, rx637_cstack_done1816
    unless rx637_cstack, rx637_cstack_done1816
    dec $I19
    set $P11, rx637_cstack[$I19]
  rx637_cstack_done1816:
    pop rx637_rep, rx637_bstack
    pop rx637_pos, rx637_bstack
    pop $I19, rx637_bstack
    lt rx637_pos, -1, rx637_done1811
    lt rx637_pos, 0, rx637_fail1813
    eq $I19, 0, rx637_fail1813
    nqp_islist $I20, rx637_cstack
    unless $I20, rx637_jump1814
    elements $I18, rx637_bstack
    le $I18, 0, rx637_cut1815
    dec $I18
    set $I18, rx637_bstack[$I18]
  rx637_cut1815:
    assign rx637_cstack, $I18
  rx637_jump1814:
    jump $I19
  rx637_done1811:
    rx637_cur."!cursor_fail"()
    .return (rx637_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_112_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx641_tgt
    .local int rx641_pos
    .local int rx641_off
    .local int rx641_eos
    .local int rx641_rep
    .local pmc rx641_cur
    .local pmc rx641_curclass
    .local pmc rx641_bstack
    .local pmc rx641_cstack
    (rx641_cur, rx641_tgt, rx641_pos, rx641_curclass, rx641_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx641_cur
    length rx641_eos, rx641_tgt
    eq $I19, 1, rx641_restart1825
    gt rx641_pos, rx641_eos, rx641_fail1826
    repr_get_attr_int $I11, self, rx641_curclass, "$!from"
    ne $I11, -1, rxscan642_done1832
    goto rxscan642_scan1831
  rxscan642_loop1830:
    inc rx641_pos
    gt rx641_pos, rx641_eos, rx641_fail1826
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!from", rx641_pos
  rxscan642_scan1831:
    nqp_rxmark rx641_bstack, rxscan642_loop1830, rx641_pos, 0
  rxscan642_done1832:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt643_01834
    nqp_push_label $P11, alt643_11838
    nqp_push_label $P11, alt643_21842
    nqp_rxmark rx641_bstack, alt643_end1833, -1, 0
    rx641_cur."!alt"(rx641_pos, "alt_nfa__21_1359718903.256", $P11)
    goto rx641_fail1826
  alt643_01834:
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    nqp_rxmark rx641_bstack, rxsubrule645_pass1836, -1, 0
  rxsubrule645_pass1836:
    rx641_cstack = rx641_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    goto alt643_end1833
  alt643_11838:
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    nqp_rxmark rx641_bstack, rxsubrule648_pass1840, -1, 0
  rxsubrule648_pass1840:
    rx641_cstack = rx641_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    goto alt643_end1833
  alt643_21842:
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    nqp_rxmark rx641_bstack, rxsubrule651_pass1844, -1, 0
  rxsubrule651_pass1844:
    rx641_cstack = rx641_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1826
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    goto alt643_end1833
  alt643_end1833:
    rx641_cur."!cursor_pass"(rx641_pos, "scoped", 'backtrack'=>1)
    .return (rx641_cur)
  rx641_restart1825:
    repr_get_attr_obj rx641_cstack, rx641_cur, rx641_curclass, "$!cstack"
  rx641_fail1826:
    unless rx641_bstack, rx641_done1824
    pop $I19, rx641_bstack
    if_null rx641_cstack, rx641_cstack_done1829
    unless rx641_cstack, rx641_cstack_done1829
    dec $I19
    set $P11, rx641_cstack[$I19]
  rx641_cstack_done1829:
    pop rx641_rep, rx641_bstack
    pop rx641_pos, rx641_bstack
    pop $I19, rx641_bstack
    lt rx641_pos, -1, rx641_done1824
    lt rx641_pos, 0, rx641_fail1826
    eq $I19, 0, rx641_fail1826
    nqp_islist $I20, rx641_cstack
    unless $I20, rx641_jump1827
    elements $I18, rx641_bstack
    le $I18, 0, rx641_cut1828
    dec $I18
    set $I18, rx641_bstack[$I18]
  rx641_cut1828:
    assign rx641_cstack, $I18
  rx641_jump1827:
    jump $I19
  rx641_done1824:
    rx641_cur."!cursor_fail"()
    .return (rx641_cur) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_113_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1037
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_399_1359718901.265' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx653_tgt
    .local int rx653_pos
    .local int rx653_off
    .local int rx653_eos
    .local int rx653_rep
    .local pmc rx653_cur
    .local pmc rx653_curclass
    .local pmc rx653_bstack
    .local pmc rx653_cstack
    (rx653_cur, rx653_tgt, rx653_pos, rx653_curclass, rx653_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx653_cur
    length rx653_eos, rx653_tgt
    eq $I19, 1, rx653_restart1848
    gt rx653_pos, rx653_eos, rx653_fail1849
    repr_get_attr_int $I11, self, rx653_curclass, "$!from"
    ne $I11, -1, rxscan654_done1855
    goto rxscan654_scan1854
  rxscan654_loop1853:
    inc rx653_pos
    gt rx653_pos, rx653_eos, rx653_fail1849
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!from", rx653_pos
  rxscan654_scan1854:
    nqp_rxmark rx653_bstack, rxscan654_loop1853, rx653_pos, 0
  rxscan654_done1855:
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!pos", rx653_pos
    $P11 = rx653_cur."name"()
    repr_get_attr_int $I11, $P11, rx653_curclass, "$!pos"
    lt $I11, 0, rx653_fail1849
    nqp_rxmark rx653_bstack, rxsubrule655_pass1856, -1, 0
  rxsubrule655_pass1856:
    rx653_cstack = rx653_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx653_pos, $P11, rx653_curclass, "$!pos"
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!pos", rx653_pos
    store_lex unicode:"$\x{a2}", rx653_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_399_1359718901.265' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx653_fail1849
    rx653_cur."!cursor_pass"(rx653_pos, "typename", 'backtrack'=>1)
    .return (rx653_cur)
  rx653_restart1848:
    repr_get_attr_obj rx653_cstack, rx653_cur, rx653_curclass, "$!cstack"
  rx653_fail1849:
    unless rx653_bstack, rx653_done1847
    pop $I19, rx653_bstack
    if_null rx653_cstack, rx653_cstack_done1852
    unless rx653_cstack, rx653_cstack_done1852
    dec $I19
    set $P11, rx653_cstack[$I19]
  rx653_cstack_done1852:
    pop rx653_rep, rx653_bstack
    pop rx653_pos, rx653_bstack
    pop $I19, rx653_bstack
    lt rx653_pos, -1, rx653_done1847
    lt rx653_pos, 0, rx653_fail1849
    eq $I19, 0, rx653_fail1849
    nqp_islist $I20, rx653_cstack
    unless $I20, rx653_jump1850
    elements $I18, rx653_bstack
    le $I18, 0, rx653_cut1851
    dec $I18
    set $I18, rx653_bstack[$I18]
  rx653_cut1851:
    assign rx653_cstack, $I18
  rx653_jump1850:
    jump $I19
  rx653_done1847:
    rx653_cur."!cursor_fail"()
    .return (rx653_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1359718901.265") :anon :lex :outer("cuid_113_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1039

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1857
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1858
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback1858:
    unless_null $P5002, vivi_6561859
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6561859:
    set $P5001, $P5002
  fallback1857:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1860
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5011
  fallback1860:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1861
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback1861:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1862
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5013
  fallback1862:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_114_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1042
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx657_tgt
    .local int rx657_pos
    .local int rx657_off
    .local int rx657_eos
    .local int rx657_rep
    .local pmc rx657_cur
    .local pmc rx657_curclass
    .local pmc rx657_bstack
    .local pmc rx657_cstack
    (rx657_cur, rx657_tgt, rx657_pos, rx657_curclass, rx657_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx657_cur
    length rx657_eos, rx657_tgt
    eq $I19, 1, rx657_restart1865
    gt rx657_pos, rx657_eos, rx657_fail1866
    repr_get_attr_int $I11, self, rx657_curclass, "$!from"
    ne $I11, -1, rxscan658_done1872
    goto rxscan658_scan1871
  rxscan658_loop1870:
    inc rx657_pos
    gt rx657_pos, rx657_eos, rx657_fail1866
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!from", rx657_pos
  rxscan658_scan1871:
    nqp_rxmark rx657_bstack, rxscan658_loop1870, rx657_pos, 0
  rxscan658_done1872:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt659_01874
    nqp_push_label $P11, alt659_11876
    nqp_rxmark rx657_bstack, alt659_end1873, -1, 0
    rx657_cur."!alt"(rx657_pos, "alt_nfa__22_1359718903.27", $P11)
    goto rx657_fail1866
  alt659_01874:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1866
    nqp_rxmark rx657_bstack, rxsubrule660_pass1875, -1, 0
  rxsubrule660_pass1875:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    goto alt659_end1873
  alt659_11876:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1866
    nqp_rxmark rx657_bstack, rxsubrule661_pass1877, -1, 0
  rxsubrule661_pass1877:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    goto alt659_end1873
  alt659_end1873:
    rx657_cur."!cursor_pass"(rx657_pos, "declarator", 'backtrack'=>1)
    .return (rx657_cur)
  rx657_restart1865:
    repr_get_attr_obj rx657_cstack, rx657_cur, rx657_curclass, "$!cstack"
  rx657_fail1866:
    unless rx657_bstack, rx657_done1864
    pop $I19, rx657_bstack
    if_null rx657_cstack, rx657_cstack_done1869
    unless rx657_cstack, rx657_cstack_done1869
    dec $I19
    set $P11, rx657_cstack[$I19]
  rx657_cstack_done1869:
    pop rx657_rep, rx657_bstack
    pop rx657_pos, rx657_bstack
    pop $I19, rx657_bstack
    lt rx657_pos, -1, rx657_done1864
    lt rx657_pos, 0, rx657_fail1866
    eq $I19, 0, rx657_fail1866
    nqp_islist $I20, rx657_cstack
    unless $I20, rx657_jump1867
    elements $I18, rx657_bstack
    le $I18, 0, rx657_cut1868
    dec $I18
    set $I18, rx657_bstack[$I18]
  rx657_cut1868:
    assign rx657_cstack, $I18
  rx657_jump1867:
    jump $I19
  rx657_done1864:
    rx657_cur."!cursor_fail"()
    .return (rx657_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_115_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1047
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_400_1359718901.265' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx662_tgt
    .local int rx662_pos
    .local int rx662_off
    .local int rx662_eos
    .local int rx662_rep
    .local pmc rx662_cur
    .local pmc rx662_curclass
    .local pmc rx662_bstack
    .local pmc rx662_cstack
    (rx662_cur, rx662_tgt, rx662_pos, rx662_curclass, rx662_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx662_cur
    length rx662_eos, rx662_tgt
    eq $I19, 1, rx662_restart1880
    gt rx662_pos, rx662_eos, rx662_fail1881
    repr_get_attr_int $I11, self, rx662_curclass, "$!from"
    ne $I11, -1, rxscan663_done1887
    goto rxscan663_scan1886
  rxscan663_loop1885:
    inc rx662_pos
    gt rx662_pos, rx662_eos, rx662_fail1881
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!from", rx662_pos
  rxscan663_scan1886:
    nqp_rxmark rx662_bstack, rxscan663_loop1885, rx662_pos, 0
  rxscan663_done1887:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    nqp_rxmark rx662_bstack, rxquantr665_done1890, rx662_pos, 0
  rxquantr665_loop1889:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."typename"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    goto rxsubrule666_pass1891
  rxsubrule666_back1892:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
  rxsubrule666_pass1891:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule666_back1892
    push rx662_bstack, $I11
    push rx662_bstack, 0
    push rx662_bstack, rx662_pos
    elements $I11, rx662_cstack
    push rx662_bstack, $I11
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    nqp_rxpeek $I19, rx662_bstack, rxquantr665_done1890
    inc $I19
    inc $I19
    set rx662_rep, rx662_bstack[$I19]
    nqp_rxcommit rx662_bstack, rxquantr665_done1890
    inc rx662_rep
  rxquantr665_done1890:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    store_lex unicode:"$\x{a2}", rx662_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."variable"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    nqp_rxmark rx662_bstack, rxsubrule669_pass1895, -1, 0
  rxsubrule669_pass1895:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    store_lex unicode:"$\x{a2}", rx662_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_400_1359718901.265' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    nqp_rxmark rx662_bstack, rxquantr672_done1899, rx662_pos, 0
  rxquantr672_loop1898:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."trait"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    goto rxsubrule673_pass1900
  rxsubrule673_back1901:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
  rxsubrule673_pass1900:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule673_back1901
    push rx662_bstack, $I11
    push rx662_bstack, 0
    push rx662_bstack, rx662_pos
    elements $I11, rx662_cstack
    push rx662_bstack, $I11
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    nqp_rxpeek $I19, rx662_bstack, rxquantr672_done1899
    inc $I19
    inc $I19
    set rx662_rep, rx662_bstack[$I19]
    nqp_rxcommit rx662_bstack, rxquantr672_done1899
    inc rx662_rep
    nqp_rxmark rx662_bstack, rxquantr672_done1899, rx662_pos, rx662_rep
    goto rxquantr672_loop1898
  rxquantr672_done1899:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1881
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    rx662_cur."!cursor_pass"(rx662_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx662_cur)
  rx662_restart1880:
    repr_get_attr_obj rx662_cstack, rx662_cur, rx662_curclass, "$!cstack"
  rx662_fail1881:
    unless rx662_bstack, rx662_done1879
    pop $I19, rx662_bstack
    if_null rx662_cstack, rx662_cstack_done1884
    unless rx662_cstack, rx662_cstack_done1884
    dec $I19
    set $P11, rx662_cstack[$I19]
  rx662_cstack_done1884:
    pop rx662_rep, rx662_bstack
    pop rx662_pos, rx662_bstack
    pop $I19, rx662_bstack
    lt rx662_pos, -1, rx662_done1879
    lt rx662_pos, 0, rx662_fail1881
    eq $I19, 0, rx662_fail1881
    nqp_islist $I20, rx662_cstack
    unless $I20, rx662_jump1882
    elements $I18, rx662_bstack
    le $I18, 0, rx662_cut1883
    dec $I18
    set $I18, rx662_bstack[$I18]
  rx662_cut1883:
    assign rx662_cstack, $I18
  rx662_jump1882:
    jump $I19
  rx662_done1879:
    rx662_cur."!cursor_fail"()
    .return (rx662_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1359718901.265") :anon :lex :outer("cuid_115_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_116_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1055
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_117_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1056
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx675_tgt
    .local int rx675_pos
    .local int rx675_off
    .local int rx675_eos
    .local int rx675_rep
    .local pmc rx675_cur
    .local pmc rx675_curclass
    .local pmc rx675_bstack
    .local pmc rx675_cstack
    (rx675_cur, rx675_tgt, rx675_pos, rx675_curclass, rx675_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx675_cur
    length rx675_eos, rx675_tgt
    eq $I19, 1, rx675_restart1905
    gt rx675_pos, rx675_eos, rx675_fail1906
    repr_get_attr_int $I11, self, rx675_curclass, "$!from"
    ne $I11, -1, rxscan676_done1912
    goto rxscan676_scan1911
  rxscan676_loop1910:
    inc rx675_pos
    gt rx675_pos, rx675_eos, rx675_fail1906
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!from", rx675_pos
  rxscan676_scan1911:
    nqp_rxmark rx675_bstack, rxscan676_loop1910, rx675_pos, 0
  rxscan676_done1912:
    nqp_rxmark rx675_bstack, rxcap677_fail1914, rx675_pos, 0
    add $I11, rx675_pos, 3
    gt $I11, rx675_eos, rx675_fail1906
    substr $S10, rx675_tgt, rx675_pos, 3
    ne $S10, ucs4:"sub", rx675_fail1906
    add rx675_pos, 3
    nqp_rxpeek $I19, rx675_bstack, rxcap677_fail1914
    inc $I19
    set $I11, rx675_bstack[$I19]
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!pos", rx675_pos
    $P11 = rx675_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx675_pos)
    rx675_cstack = rx675_cur."!cursor_capture"($P11, "sym")
    goto rxcap677_done1913
  rxcap677_fail1914:
    goto rx675_fail1906
  rxcap677_done1913:
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!pos", rx675_pos
    $P11 = rx675_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx675_curclass, "$!pos"
    lt $I11, 0, rx675_fail1906
    nqp_rxmark rx675_bstack, rxsubrule678_pass1915, -1, 0
  rxsubrule678_pass1915:
    rx675_cstack = rx675_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx675_pos, $P11, rx675_curclass, "$!pos"
    rx675_cur."!cursor_pass"(rx675_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx675_cur)
  rx675_restart1905:
    repr_get_attr_obj rx675_cstack, rx675_cur, rx675_curclass, "$!cstack"
  rx675_fail1906:
    unless rx675_bstack, rx675_done1904
    pop $I19, rx675_bstack
    if_null rx675_cstack, rx675_cstack_done1909
    unless rx675_cstack, rx675_cstack_done1909
    dec $I19
    set $P11, rx675_cstack[$I19]
  rx675_cstack_done1909:
    pop rx675_rep, rx675_bstack
    pop rx675_pos, rx675_bstack
    pop $I19, rx675_bstack
    lt rx675_pos, -1, rx675_done1904
    lt rx675_pos, 0, rx675_fail1906
    eq $I19, 0, rx675_fail1906
    nqp_islist $I20, rx675_cstack
    unless $I20, rx675_jump1907
    elements $I18, rx675_bstack
    le $I18, 0, rx675_cut1908
    dec $I18
    set $I18, rx675_bstack[$I18]
  rx675_cut1908:
    assign rx675_cstack, $I18
  rx675_jump1907:
    jump $I19
  rx675_done1904:
    rx675_cur."!cursor_fail"()
    .return (rx675_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_118_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1057
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx679_tgt
    .local int rx679_pos
    .local int rx679_off
    .local int rx679_eos
    .local int rx679_rep
    .local pmc rx679_cur
    .local pmc rx679_curclass
    .local pmc rx679_bstack
    .local pmc rx679_cstack
    (rx679_cur, rx679_tgt, rx679_pos, rx679_curclass, rx679_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx679_cur
    length rx679_eos, rx679_tgt
    eq $I19, 1, rx679_restart1918
    gt rx679_pos, rx679_eos, rx679_fail1919
    repr_get_attr_int $I11, self, rx679_curclass, "$!from"
    ne $I11, -1, rxscan680_done1925
    goto rxscan680_scan1924
  rxscan680_loop1923:
    inc rx679_pos
    gt rx679_pos, rx679_eos, rx679_fail1919
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!from", rx679_pos
  rxscan680_scan1924:
    nqp_rxmark rx679_bstack, rxscan680_loop1923, rx679_pos, 0
  rxscan680_done1925:
    nqp_rxmark rx679_bstack, rxcap681_fail1927, rx679_pos, 0
    add $I11, rx679_pos, 6
    gt $I11, rx679_eos, rx679_fail1919
    substr $S10, rx679_tgt, rx679_pos, 6
    ne $S10, ucs4:"method", rx679_fail1919
    add rx679_pos, 6
    nqp_rxpeek $I19, rx679_bstack, rxcap681_fail1927
    inc $I19
    set $I11, rx679_bstack[$I19]
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx679_pos)
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "sym")
    goto rxcap681_done1926
  rxcap681_fail1927:
    goto rx679_fail1919
  rxcap681_done1926:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1919
    nqp_rxmark rx679_bstack, rxsubrule682_pass1928, -1, 0
  rxsubrule682_pass1928:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    rx679_cur."!cursor_pass"(rx679_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx679_cur)
  rx679_restart1918:
    repr_get_attr_obj rx679_cstack, rx679_cur, rx679_curclass, "$!cstack"
  rx679_fail1919:
    unless rx679_bstack, rx679_done1917
    pop $I19, rx679_bstack
    if_null rx679_cstack, rx679_cstack_done1922
    unless rx679_cstack, rx679_cstack_done1922
    dec $I19
    set $P11, rx679_cstack[$I19]
  rx679_cstack_done1922:
    pop rx679_rep, rx679_bstack
    pop rx679_pos, rx679_bstack
    pop $I19, rx679_bstack
    lt rx679_pos, -1, rx679_done1917
    lt rx679_pos, 0, rx679_fail1919
    eq $I19, 0, rx679_fail1919
    nqp_islist $I20, rx679_cstack
    unless $I20, rx679_jump1920
    elements $I18, rx679_bstack
    le $I18, 0, rx679_cut1921
    dec $I18
    set $I18, rx679_bstack[$I18]
  rx679_cut1921:
    assign rx679_cstack, $I18
  rx679_jump1920:
    jump $I19
  rx679_done1917:
    rx679_cur."!cursor_fail"()
    .return (rx679_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_119_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1059
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx683_tgt
    .local int rx683_pos
    .local int rx683_off
    .local int rx683_eos
    .local int rx683_rep
    .local pmc rx683_cur
    .local pmc rx683_curclass
    .local pmc rx683_bstack
    .local pmc rx683_cstack
    (rx683_cur, rx683_tgt, rx683_pos, rx683_curclass, rx683_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx683_cur
    length rx683_eos, rx683_tgt
    eq $I19, 1, rx683_restart1931
    gt rx683_pos, rx683_eos, rx683_fail1932
    repr_get_attr_int $I11, self, rx683_curclass, "$!from"
    ne $I11, -1, rxscan684_done1938
    goto rxscan684_scan1937
  rxscan684_loop1936:
    inc rx683_pos
    gt rx683_pos, rx683_eos, rx683_fail1932
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!from", rx683_pos
  rxscan684_scan1937:
    nqp_rxmark rx683_bstack, rxscan684_loop1936, rx683_pos, 0
  rxscan684_done1938:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    store_lex unicode:"$\x{a2}", rx683_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxmark rx683_bstack, rxquantr687_done1942, rx683_pos, 0
  rxquantr687_loop1941:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxmark rx683_bstack, rxcap689_fail1945, rx683_pos, 0
    nqp_rxmark rx683_bstack, rxquantr690_done1947, rx683_pos, 0
  rxquantr690_loop1946:
    add $I11, rx683_pos, 1
    gt $I11, rx683_eos, rx683_fail1932
    substr $S10, rx683_tgt, rx683_pos, 1
    ne $S10, ucs4:"&", rx683_fail1932
    add rx683_pos, 1
    nqp_rxpeek $I19, rx683_bstack, rxquantr690_done1947
    inc $I19
    inc $I19
    set rx683_rep, rx683_bstack[$I19]
    nqp_rxcommit rx683_bstack, rxquantr690_done1947
    inc rx683_rep
  rxquantr690_done1947:
    nqp_rxpeek $I19, rx683_bstack, rxcap689_fail1945
    inc $I19
    set $I11, rx683_bstack[$I19]
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx683_pos)
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "sigil")
    goto rxcap689_done1944
  rxcap689_fail1945:
    goto rx683_fail1932
  rxcap689_done1944:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    nqp_rxmark rx683_bstack, rxsubrule691_pass1948, -1, 0
  rxsubrule691_pass1948:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxpeek $I19, rx683_bstack, rxquantr687_done1942
    inc $I19
    inc $I19
    set rx683_rep, rx683_bstack[$I19]
    nqp_rxcommit rx683_bstack, rxquantr687_done1942
    inc rx683_rep
  rxquantr687_done1942:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
  alt696_01954:
    nqp_rxmark rx683_bstack, alt696_11960, rx683_pos, 0
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    add $I11, rx683_pos, 1
    gt $I11, rx683_eos, rx683_fail1932
    substr $S10, rx683_tgt, rx683_pos, 1
    ne $S10, ucs4:"(", rx683_fail1932
    add rx683_pos, 1
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."signature"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    nqp_rxmark rx683_bstack, rxsubrule699_pass1957, -1, 0
  rxsubrule699_pass1957:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    add $I11, rx683_pos, 1
    gt $I11, rx683_eos, rx683_fail1932
    substr $S10, rx683_tgt, rx683_pos, 1
    ne $S10, ucs4:")", rx683_fail1932
    add rx683_pos, 1
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    goto alt696_end1953
  alt696_11960:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
  alt696_end1953:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxmark rx683_bstack, rxquantr706_done1966, rx683_pos, 0
  rxquantr706_loop1965:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."trait"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    goto rxsubrule707_pass1967
  rxsubrule707_back1968:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
  rxsubrule707_pass1967:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule707_back1968
    push rx683_bstack, $I11
    push rx683_bstack, 0
    push rx683_bstack, rx683_pos
    elements $I11, rx683_cstack
    push rx683_bstack, $I11
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxpeek $I19, rx683_bstack, rxquantr706_done1966
    inc $I19
    inc $I19
    set rx683_rep, rx683_bstack[$I19]
    nqp_rxcommit rx683_bstack, rxquantr706_done1966
    inc rx683_rep
    nqp_rxmark rx683_bstack, rxquantr706_done1966, rx683_pos, rx683_rep
    goto rxquantr706_loop1965
  rxquantr706_done1966:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt709_01971
    nqp_push_label $P11, alt709_11975
    nqp_rxmark rx683_bstack, alt709_end1970, -1, 0
    rx683_cur."!alt"(rx683_pos, "alt_nfa__23_1359718903.416", $P11)
    goto rx683_fail1932
  alt709_01971:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    nqp_rxmark rx683_bstack, rxsubrule711_pass1973, -1, 0
  rxsubrule711_pass1973:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    goto alt709_end1970
  alt709_11975:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    nqp_rxmark rx683_bstack, rxsubrule714_pass1977, -1, 0
  rxsubrule714_pass1977:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    goto alt709_end1970
  alt709_end1970:
    nqp_rxcommit rx683_bstack, alt709_end1970
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1932
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    rx683_cur."!cursor_pass"(rx683_pos, "routine_def", 'backtrack'=>1)
    .return (rx683_cur)
  rx683_restart1931:
    repr_get_attr_obj rx683_cstack, rx683_cur, rx683_curclass, "$!cstack"
  rx683_fail1932:
    unless rx683_bstack, rx683_done1930
    pop $I19, rx683_bstack
    if_null rx683_cstack, rx683_cstack_done1935
    unless rx683_cstack, rx683_cstack_done1935
    dec $I19
    set $P11, rx683_cstack[$I19]
  rx683_cstack_done1935:
    pop rx683_rep, rx683_bstack
    pop rx683_pos, rx683_bstack
    pop $I19, rx683_bstack
    lt rx683_pos, -1, rx683_done1930
    lt rx683_pos, 0, rx683_fail1932
    eq $I19, 0, rx683_fail1932
    nqp_islist $I20, rx683_cstack
    unless $I20, rx683_jump1933
    elements $I18, rx683_bstack
    le $I18, 0, rx683_cut1934
    dec $I18
    set $I18, rx683_bstack[$I18]
  rx683_cut1934:
    assign rx683_cstack, $I18
  rx683_jump1933:
    jump $I19
  rx683_done1930:
    rx683_cur."!cursor_fail"()
    .return (rx683_cur) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_120_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1072
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_401_1359718901.265' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx717_tgt
    .local int rx717_pos
    .local int rx717_off
    .local int rx717_eos
    .local int rx717_rep
    .local pmc rx717_cur
    .local pmc rx717_curclass
    .local pmc rx717_bstack
    .local pmc rx717_cstack
    (rx717_cur, rx717_tgt, rx717_pos, rx717_curclass, rx717_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx717_cur
    length rx717_eos, rx717_tgt
    eq $I19, 1, rx717_restart1982
    gt rx717_pos, rx717_eos, rx717_fail1983
    repr_get_attr_int $I11, self, rx717_curclass, "$!from"
    ne $I11, -1, rxscan718_done1989
    goto rxscan718_scan1988
  rxscan718_loop1987:
    inc rx717_pos
    gt rx717_pos, rx717_eos, rx717_fail1983
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!from", rx717_pos
  rxscan718_scan1988:
    nqp_rxmark rx717_bstack, rxscan718_loop1987, rx717_pos, 0
  rxscan718_done1989:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    store_lex unicode:"$\x{a2}", rx717_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    store_lex unicode:"$\x{a2}", rx717_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
  alt722_01994:
    nqp_rxmark rx717_bstack, alt722_12000, rx717_pos, 0
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 3
    gt $I11, rx717_eos, rx717_fail1983
    substr $S10, rx717_tgt, rx717_pos, 3
    ne $S10, ucs4:"::(", rx717_fail1983
    add rx717_pos, 3
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."variable"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    nqp_rxmark rx717_bstack, rxsubrule725_pass1997, -1, 0
  rxsubrule725_pass1997:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1983
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:")", rx717_fail1983
    add rx717_pos, 1
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt722_end1993
  alt722_12000:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxmark rx717_bstack, rxcap729_fail2003, rx717_pos, 0
    nqp_rxmark rx717_bstack, rxquantr730_done2005, rx717_pos, 0
  rxquantr730_loop2004:
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1983
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:"!", rx717_fail1983
    add rx717_pos, 1
    nqp_rxpeek $I19, rx717_bstack, rxquantr730_done2005
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr730_done2005
    inc rx717_rep
  rxquantr730_done2005:
    nqp_rxpeek $I19, rx717_bstack, rxcap729_fail2003
    inc $I19
    set $I11, rx717_bstack[$I19]
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx717_pos)
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "private")
    goto rxcap729_done2002
  rxcap729_fail2003:
    goto rx717_fail1983
  rxcap729_done2002:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxmark rx717_bstack, rxquantr732_done2008, rx717_pos, 0
  rxquantr732_loop2007:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    goto rxsubrule733_pass2009
  rxsubrule733_back2010:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
  rxsubrule733_pass2009:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule733_back2010
    push rx717_bstack, $I11
    push rx717_bstack, 0
    push rx717_bstack, rx717_pos
    elements $I11, rx717_cstack
    push rx717_bstack, $I11
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxpeek $I19, rx717_bstack, rxquantr732_done2008
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr732_done2008
    inc rx717_rep
  rxquantr732_done2008:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
  alt722_end1993:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
  alt738_02016:
    nqp_rxmark rx717_bstack, alt738_12022, rx717_pos, 0
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1983
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:"(", rx717_fail1983
    add rx717_pos, 1
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."signature"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    nqp_rxmark rx717_bstack, rxsubrule741_pass2019, -1, 0
  rxsubrule741_pass2019:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1983
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:")", rx717_fail1983
    add rx717_pos, 1
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt738_end2015
  alt738_12022:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
  alt738_end2015:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    store_lex unicode:"$\x{a2}", rx717_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_401_1359718901.265' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxmark rx717_bstack, rxquantr749_done2029, rx717_pos, 0
  rxquantr749_loop2028:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."trait"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    goto rxsubrule750_pass2030
  rxsubrule750_back2031:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
  rxsubrule750_pass2030:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule750_back2031
    push rx717_bstack, $I11
    push rx717_bstack, 0
    push rx717_bstack, rx717_pos
    elements $I11, rx717_cstack
    push rx717_bstack, $I11
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxpeek $I19, rx717_bstack, rxquantr749_done2029
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr749_done2029
    inc rx717_rep
    nqp_rxmark rx717_bstack, rxquantr749_done2029, rx717_pos, rx717_rep
    goto rxquantr749_loop2028
  rxquantr749_done2029:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt752_02034
    nqp_push_label $P11, alt752_12038
    nqp_rxmark rx717_bstack, alt752_end2033, -1, 0
    rx717_cur."!alt"(rx717_pos, "alt_nfa__24_1359718903.451", $P11)
    goto rx717_fail1983
  alt752_02034:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    nqp_rxmark rx717_bstack, rxsubrule754_pass2036, -1, 0
  rxsubrule754_pass2036:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt752_end2033
  alt752_12038:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    nqp_rxmark rx717_bstack, rxsubrule757_pass2040, -1, 0
  rxsubrule757_pass2040:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt752_end2033
  alt752_end2033:
    nqp_rxcommit rx717_bstack, alt752_end2033
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1983
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    rx717_cur."!cursor_pass"(rx717_pos, "method_def", 'backtrack'=>1)
    .return (rx717_cur)
  rx717_restart1982:
    repr_get_attr_obj rx717_cstack, rx717_cur, rx717_curclass, "$!cstack"
  rx717_fail1983:
    unless rx717_bstack, rx717_done1981
    pop $I19, rx717_bstack
    if_null rx717_cstack, rx717_cstack_done1986
    unless rx717_cstack, rx717_cstack_done1986
    dec $I19
    set $P11, rx717_cstack[$I19]
  rx717_cstack_done1986:
    pop rx717_rep, rx717_bstack
    pop rx717_pos, rx717_bstack
    pop $I19, rx717_bstack
    lt rx717_pos, -1, rx717_done1981
    lt rx717_pos, 0, rx717_fail1983
    eq $I19, 0, rx717_fail1983
    nqp_islist $I20, rx717_cstack
    unless $I20, rx717_jump1984
    elements $I18, rx717_bstack
    le $I18, 0, rx717_cut1985
    dec $I18
    set $I18, rx717_bstack[$I18]
  rx717_cut1985:
    assign rx717_cstack, $I18
  rx717_jump1984:
    jump $I19
  rx717_done1981:
    rx717_cur."!cursor_fail"()
    .return (rx717_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1359718901.265") :anon :lex :outer("cuid_120_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_121_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_402_1359718901.265' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx760_tgt
    .local int rx760_pos
    .local int rx760_off
    .local int rx760_eos
    .local int rx760_rep
    .local pmc rx760_cur
    .local pmc rx760_curclass
    .local pmc rx760_bstack
    .local pmc rx760_cstack
    (rx760_cur, rx760_tgt, rx760_pos, rx760_curclass, rx760_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx760_cur
    length rx760_eos, rx760_tgt
    eq $I19, 1, rx760_restart2045
    gt rx760_pos, rx760_eos, rx760_fail2046
    repr_get_attr_int $I11, self, rx760_curclass, "$!from"
    ne $I11, -1, rxscan761_done2052
    goto rxscan761_scan2051
  rxscan761_loop2050:
    inc rx760_pos
    gt rx760_pos, rx760_eos, rx760_fail2046
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!from", rx760_pos
  rxscan761_scan2051:
    nqp_rxmark rx760_bstack, rxscan761_loop2050, rx760_pos, 0
  rxscan761_done2052:
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    store_lex unicode:"$\x{a2}", rx760_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_402_1359718901.265' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx760_fail2046
    add $I11, rx760_pos, 1
    gt $I11, rx760_eos, rx760_fail2046
    substr $S10, rx760_tgt, rx760_pos, 1
    ne $S10, ucs4:"{", rx760_fail2046
    add rx760_pos, 1
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    $P11 = rx760_cur."ws"()
    repr_get_attr_int $I11, $P11, rx760_curclass, "$!pos"
    lt $I11, 0, rx760_fail2046
    repr_get_attr_int rx760_pos, $P11, rx760_curclass, "$!pos"
    add $I11, rx760_pos, 1
    gt $I11, rx760_eos, rx760_fail2046
    substr $S10, rx760_tgt, rx760_pos, 1
    ne $S10, ucs4:"*", rx760_fail2046
    add rx760_pos, 1
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    $P11 = rx760_cur."ws"()
    repr_get_attr_int $I11, $P11, rx760_curclass, "$!pos"
    lt $I11, 0, rx760_fail2046
    repr_get_attr_int rx760_pos, $P11, rx760_curclass, "$!pos"
    add $I11, rx760_pos, 1
    gt $I11, rx760_eos, rx760_fail2046
    substr $S10, rx760_tgt, rx760_pos, 1
    ne $S10, ucs4:"}", rx760_fail2046
    add rx760_pos, 1
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    $P11 = rx760_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx760_curclass, "$!pos"
    lt $I11, 0, rx760_fail2046
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    $P11 = rx760_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx760_curclass, "$!pos"
    lt $I11, 0, rx760_fail2046
    repr_get_attr_int rx760_pos, $P11, rx760_curclass, "$!pos"
    rx760_cur."!cursor_pass"(rx760_pos, "onlystar", 'backtrack'=>1)
    .return (rx760_cur)
  rx760_restart2045:
    repr_get_attr_obj rx760_cstack, rx760_cur, rx760_curclass, "$!cstack"
  rx760_fail2046:
    unless rx760_bstack, rx760_done2044
    pop $I19, rx760_bstack
    if_null rx760_cstack, rx760_cstack_done2049
    unless rx760_cstack, rx760_cstack_done2049
    dec $I19
    set $P11, rx760_cstack[$I19]
  rx760_cstack_done2049:
    pop rx760_rep, rx760_bstack
    pop rx760_pos, rx760_bstack
    pop $I19, rx760_bstack
    lt rx760_pos, -1, rx760_done2044
    lt rx760_pos, 0, rx760_fail2046
    eq $I19, 0, rx760_fail2046
    nqp_islist $I20, rx760_cstack
    unless $I20, rx760_jump2047
    elements $I18, rx760_bstack
    le $I18, 0, rx760_cut2048
    dec $I18
    set $I18, rx760_bstack[$I18]
  rx760_cut2048:
    assign rx760_cstack, $I18
  rx760_jump2047:
    jump $I19
  rx760_done2044:
    rx760_cur."!cursor_fail"()
    .return (rx760_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1359718901.265") :anon :lex :outer("cuid_121_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1091

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2053
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2054
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback2054:
    unless_null $P5002, vivi_7622055
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7622055:
    set $P5001, $P5002
  fallback2053:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_122_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1097
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_123_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1098
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx766_tgt
    .local int rx766_pos
    .local int rx766_off
    .local int rx766_eos
    .local int rx766_rep
    .local pmc rx766_cur
    .local pmc rx766_curclass
    .local pmc rx766_bstack
    .local pmc rx766_cstack
    (rx766_cur, rx766_tgt, rx766_pos, rx766_curclass, rx766_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx766_cur
    length rx766_eos, rx766_tgt
    eq $I19, 1, rx766_restart2061
    gt rx766_pos, rx766_eos, rx766_fail2062
    repr_get_attr_int $I11, self, rx766_curclass, "$!from"
    ne $I11, -1, rxscan767_done2068
    goto rxscan767_scan2067
  rxscan767_loop2066:
    inc rx766_pos
    gt rx766_pos, rx766_eos, rx766_fail2062
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!from", rx766_pos
  rxscan767_scan2067:
    nqp_rxmark rx766_bstack, rxscan767_loop2066, rx766_pos, 0
  rxscan767_done2068:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    store_lex unicode:"$\x{a2}", rx766_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx766_bstack, rxcap768_fail2070, rx766_pos, 0
    add $I11, rx766_pos, 5
    gt $I11, rx766_eos, rx766_fail2062
    substr $S10, rx766_tgt, rx766_pos, 5
    ne $S10, ucs4:"multi", rx766_fail2062
    add rx766_pos, 5
    nqp_rxpeek $I19, rx766_bstack, rxcap768_fail2070
    inc $I19
    set $I11, rx766_bstack[$I19]
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx766_pos)
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "sym")
    goto rxcap768_done2069
  rxcap768_fail2070:
    goto rx766_fail2062
  rxcap768_done2069:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2062
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
  alt770_02073:
    nqp_rxmark rx766_bstack, alt770_12075, rx766_pos, 0
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2062
    nqp_rxmark rx766_bstack, rxsubrule771_pass2074, -1, 0
  rxsubrule771_pass2074:
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    goto alt770_end2072
  alt770_12075:
    nqp_rxmark rx766_bstack, alt770_22077, rx766_pos, 0
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2062
    nqp_rxmark rx766_bstack, rxsubrule772_pass2076, -1, 0
  rxsubrule772_pass2076:
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    goto alt770_end2072
  alt770_22077:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2062
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
  alt770_end2072:
    rx766_cur."!cursor_pass"(rx766_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx766_cur)
  rx766_restart2061:
    repr_get_attr_obj rx766_cstack, rx766_cur, rx766_curclass, "$!cstack"
  rx766_fail2062:
    unless rx766_bstack, rx766_done2060
    pop $I19, rx766_bstack
    if_null rx766_cstack, rx766_cstack_done2065
    unless rx766_cstack, rx766_cstack_done2065
    dec $I19
    set $P11, rx766_cstack[$I19]
  rx766_cstack_done2065:
    pop rx766_rep, rx766_bstack
    pop rx766_pos, rx766_bstack
    pop $I19, rx766_bstack
    lt rx766_pos, -1, rx766_done2060
    lt rx766_pos, 0, rx766_fail2062
    eq $I19, 0, rx766_fail2062
    nqp_islist $I20, rx766_cstack
    unless $I20, rx766_jump2063
    elements $I18, rx766_bstack
    le $I18, 0, rx766_cut2064
    dec $I18
    set $I18, rx766_bstack[$I18]
  rx766_cut2064:
    assign rx766_cstack, $I18
  rx766_jump2063:
    jump $I19
  rx766_done2060:
    rx766_cur."!cursor_fail"()
    .return (rx766_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_124_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1103
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx774_tgt
    .local int rx774_pos
    .local int rx774_off
    .local int rx774_eos
    .local int rx774_rep
    .local pmc rx774_cur
    .local pmc rx774_curclass
    .local pmc rx774_bstack
    .local pmc rx774_cstack
    (rx774_cur, rx774_tgt, rx774_pos, rx774_curclass, rx774_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx774_cur
    length rx774_eos, rx774_tgt
    eq $I19, 1, rx774_restart2081
    gt rx774_pos, rx774_eos, rx774_fail2082
    repr_get_attr_int $I11, self, rx774_curclass, "$!from"
    ne $I11, -1, rxscan775_done2088
    goto rxscan775_scan2087
  rxscan775_loop2086:
    inc rx774_pos
    gt rx774_pos, rx774_eos, rx774_fail2082
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!from", rx774_pos
  rxscan775_scan2087:
    nqp_rxmark rx774_bstack, rxscan775_loop2086, rx774_pos, 0
  rxscan775_done2088:
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    store_lex unicode:"$\x{a2}", rx774_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx774_bstack, rxcap776_fail2090, rx774_pos, 0
    add $I11, rx774_pos, 5
    gt $I11, rx774_eos, rx774_fail2082
    substr $S10, rx774_tgt, rx774_pos, 5
    ne $S10, ucs4:"proto", rx774_fail2082
    add rx774_pos, 5
    nqp_rxpeek $I19, rx774_bstack, rxcap776_fail2090
    inc $I19
    set $I11, rx774_bstack[$I19]
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx774_pos)
    rx774_cstack = rx774_cur."!cursor_capture"($P11, "sym")
    goto rxcap776_done2089
  rxcap776_fail2090:
    goto rx774_fail2082
  rxcap776_done2089:
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."ws"()
    repr_get_attr_int $I11, $P11, rx774_curclass, "$!pos"
    lt $I11, 0, rx774_fail2082
    repr_get_attr_int rx774_pos, $P11, rx774_curclass, "$!pos"
  alt778_02093:
    nqp_rxmark rx774_bstack, alt778_12095, rx774_pos, 0
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx774_curclass, "$!pos"
    lt $I11, 0, rx774_fail2082
    nqp_rxmark rx774_bstack, rxsubrule779_pass2094, -1, 0
  rxsubrule779_pass2094:
    rx774_cstack = rx774_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx774_pos, $P11, rx774_curclass, "$!pos"
    goto alt778_end2092
  alt778_12095:
    nqp_rxmark rx774_bstack, alt778_22097, rx774_pos, 0
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx774_curclass, "$!pos"
    lt $I11, 0, rx774_fail2082
    nqp_rxmark rx774_bstack, rxsubrule780_pass2096, -1, 0
  rxsubrule780_pass2096:
    rx774_cstack = rx774_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx774_pos, $P11, rx774_curclass, "$!pos"
    goto alt778_end2092
  alt778_22097:
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx774_curclass, "$!pos"
    lt $I11, 0, rx774_fail2082
    repr_get_attr_int rx774_pos, $P11, rx774_curclass, "$!pos"
  alt778_end2092:
    rx774_cur."!cursor_pass"(rx774_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx774_cur)
  rx774_restart2081:
    repr_get_attr_obj rx774_cstack, rx774_cur, rx774_curclass, "$!cstack"
  rx774_fail2082:
    unless rx774_bstack, rx774_done2080
    pop $I19, rx774_bstack
    if_null rx774_cstack, rx774_cstack_done2085
    unless rx774_cstack, rx774_cstack_done2085
    dec $I19
    set $P11, rx774_cstack[$I19]
  rx774_cstack_done2085:
    pop rx774_rep, rx774_bstack
    pop rx774_pos, rx774_bstack
    pop $I19, rx774_bstack
    lt rx774_pos, -1, rx774_done2080
    lt rx774_pos, 0, rx774_fail2082
    eq $I19, 0, rx774_fail2082
    nqp_islist $I20, rx774_cstack
    unless $I20, rx774_jump2083
    elements $I18, rx774_bstack
    le $I18, 0, rx774_cut2084
    dec $I18
    set $I18, rx774_bstack[$I18]
  rx774_cut2084:
    assign rx774_cstack, $I18
  rx774_jump2083:
    jump $I19
  rx774_done2080:
    rx774_cur."!cursor_fail"()
    .return (rx774_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_125_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1108
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx782_tgt
    .local int rx782_pos
    .local int rx782_off
    .local int rx782_eos
    .local int rx782_rep
    .local pmc rx782_cur
    .local pmc rx782_curclass
    .local pmc rx782_bstack
    .local pmc rx782_cstack
    (rx782_cur, rx782_tgt, rx782_pos, rx782_curclass, rx782_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx782_cur
    length rx782_eos, rx782_tgt
    eq $I19, 1, rx782_restart2101
    gt rx782_pos, rx782_eos, rx782_fail2102
    repr_get_attr_int $I11, self, rx782_curclass, "$!from"
    ne $I11, -1, rxscan783_done2108
    goto rxscan783_scan2107
  rxscan783_loop2106:
    inc rx782_pos
    gt rx782_pos, rx782_eos, rx782_fail2102
    repr_bind_attr_int rx782_cur, rx782_curclass, "$!from", rx782_pos
  rxscan783_scan2107:
    nqp_rxmark rx782_bstack, rxscan783_loop2106, rx782_pos, 0
  rxscan783_done2108:
    repr_bind_attr_int rx782_cur, rx782_curclass, "$!pos", rx782_pos
    store_lex unicode:"$\x{a2}", rx782_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx782_cur, rx782_curclass, "$!pos", rx782_pos
    $P11 = rx782_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx782_curclass, "$!pos"
    lt $I11, 0, rx782_fail2102
    nqp_rxmark rx782_bstack, rxsubrule784_pass2109, -1, 0
  rxsubrule784_pass2109:
    rx782_cstack = rx782_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx782_pos, $P11, rx782_curclass, "$!pos"
    rx782_cur."!cursor_pass"(rx782_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx782_cur)
  rx782_restart2101:
    repr_get_attr_obj rx782_cstack, rx782_cur, rx782_curclass, "$!cstack"
  rx782_fail2102:
    unless rx782_bstack, rx782_done2100
    pop $I19, rx782_bstack
    if_null rx782_cstack, rx782_cstack_done2105
    unless rx782_cstack, rx782_cstack_done2105
    dec $I19
    set $P11, rx782_cstack[$I19]
  rx782_cstack_done2105:
    pop rx782_rep, rx782_bstack
    pop rx782_pos, rx782_bstack
    pop $I19, rx782_bstack
    lt rx782_pos, -1, rx782_done2100
    lt rx782_pos, 0, rx782_fail2102
    eq $I19, 0, rx782_fail2102
    nqp_islist $I20, rx782_cstack
    unless $I20, rx782_jump2103
    elements $I18, rx782_bstack
    le $I18, 0, rx782_cut2104
    dec $I18
    set $I18, rx782_bstack[$I18]
  rx782_cut2104:
    assign rx782_cstack, $I18
  rx782_jump2103:
    jump $I19
  rx782_done2100:
    rx782_cur."!cursor_fail"()
    .return (rx782_cur) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_126_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1113
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_403_1359718901.265' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_127_1359718901.265' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx785_tgt
    .local int rx785_pos
    .local int rx785_off
    .local int rx785_eos
    .local int rx785_rep
    .local pmc rx785_cur
    .local pmc rx785_curclass
    .local pmc rx785_bstack
    .local pmc rx785_cstack
    (rx785_cur, rx785_tgt, rx785_pos, rx785_curclass, rx785_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx785_cur
    length rx785_eos, rx785_tgt
    eq $I19, 1, rx785_restart2112
    gt rx785_pos, rx785_eos, rx785_fail2113
    repr_get_attr_int $I11, self, rx785_curclass, "$!from"
    ne $I11, -1, rxscan786_done2119
    goto rxscan786_scan2118
  rxscan786_loop2117:
    inc rx785_pos
    gt rx785_pos, rx785_eos, rx785_fail2113
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!from", rx785_pos
  rxscan786_scan2118:
    nqp_rxmark rx785_bstack, rxscan786_loop2117, rx785_pos, 0
  rxscan786_done2119:
    nqp_rxmark rx785_bstack, rxquantr787_done2121, rx785_pos, 0
  rxquantr787_loop2120:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    store_lex unicode:"$\x{a2}", rx785_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_403_1359718901.265' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx785_fail2113
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2113
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2113
    nqp_rxmark rx785_bstack, rxsubrule790_pass2126, -1, 0
  rxsubrule790_pass2126:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2113
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2113
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:":", rx785_fail2113
    add rx785_pos, 1
    nqp_rxpeek $I19, rx785_bstack, rxquantr787_done2121
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr787_done2121
    inc rx785_rep
  rxquantr787_done2121:
    nqp_rxmark rx785_bstack, rxquantr792_done2129, rx785_pos, 0
  rxquantr792_loop2128:
    nqp_rxmark rx785_bstack, rxquantr793_done2131, rx785_pos, 0
  rxquantr793_loop2130:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2113
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2113
    nqp_rxmark rx785_bstack, rxsubrule795_pass2133, -1, 0
  rxsubrule795_pass2133:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2113
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt797_02136
    nqp_push_label $P11, alt797_12137
    nqp_rxmark rx785_bstack, alt797_end2135, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__26_1359718903.527", $P11)
    goto rx785_fail2113
  alt797_02136:
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2113
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:",", rx785_fail2113
    add rx785_pos, 1
    goto alt797_end2135
  alt797_12137:
    .const 'Sub' $P5004 = 'cuid_127_1359718901.265' 
    capture_lex $P5004
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2113
    nqp_rxmark rx785_bstack, rxsubrule802_pass2153, -1, 0
  rxsubrule802_pass2153:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt797_end2135
  alt797_end2135:
    nqp_rxcommit rx785_bstack, alt797_end2135
    nqp_rxpeek $I19, rx785_bstack, rxquantr793_done2131
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr793_done2131
    inc rx785_rep
    nqp_rxmark rx785_bstack, rxquantr793_done2131, rx785_pos, rx785_rep
    goto rxquantr793_loop2130
  rxquantr793_done2131:
    nqp_rxpeek $I19, rx785_bstack, rxquantr792_done2129
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr792_done2129
    inc rx785_rep
  rxquantr792_done2129:
    rx785_cur."!cursor_pass"(rx785_pos, "signature", 'backtrack'=>1)
    .return (rx785_cur)
  rx785_restart2112:
    repr_get_attr_obj rx785_cstack, rx785_cur, rx785_curclass, "$!cstack"
  rx785_fail2113:
    unless rx785_bstack, rx785_done2111
    pop $I19, rx785_bstack
    if_null rx785_cstack, rx785_cstack_done2116
    unless rx785_cstack, rx785_cstack_done2116
    dec $I19
    set $P11, rx785_cstack[$I19]
  rx785_cstack_done2116:
    pop rx785_rep, rx785_bstack
    pop rx785_pos, rx785_bstack
    pop $I19, rx785_bstack
    lt rx785_pos, -1, rx785_done2111
    lt rx785_pos, 0, rx785_fail2113
    eq $I19, 0, rx785_fail2113
    nqp_islist $I20, rx785_cstack
    unless $I20, rx785_jump2114
    elements $I18, rx785_bstack
    le $I18, 0, rx785_cut2115
    dec $I18
    set $I18, rx785_bstack[$I18]
  rx785_cut2115:
    assign rx785_cstack, $I18
  rx785_jump2114:
    jump $I19
  rx785_done2111:
    rx785_cur."!cursor_fail"()
    .return (rx785_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1359718901.265") :anon :lex :outer("cuid_126_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1114

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2122
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2123
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback2123:
    unless_null $P5002, vivi_7882124
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7882124:
    set $P5001, $P5002
  fallback2122:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_127_1359718901.265") :anon :lex :outer("cuid_126_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx798_tgt
    .local int rx798_pos
    .local int rx798_off
    .local int rx798_eos
    .local int rx798_rep
    .local pmc rx798_cur
    .local pmc rx798_curclass
    .local pmc rx798_bstack
    .local pmc rx798_cstack
    (rx798_cur, rx798_tgt, rx798_pos, rx798_curclass, rx798_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx798_cur
    length rx798_eos, rx798_tgt
    eq $I19, 1, rx798_restart2140
    gt rx798_pos, rx798_eos, rx798_fail2141
    repr_get_attr_int $I11, self, rx798_curclass, "$!from"
    ne $I11, -1, rxscan799_done2147
    goto rxscan799_scan2146
  rxscan799_loop2145:
    inc rx798_pos
    gt rx798_pos, rx798_eos, rx798_fail2141
    repr_bind_attr_int rx798_cur, rx798_curclass, "$!from", rx798_pos
  rxscan799_scan2146:
    nqp_rxmark rx798_bstack, rxscan799_loop2145, rx798_pos, 0
  rxscan799_done2147:
    nqp_rxmark rx798_bstack, rxquantr800_done2149, rx798_pos, 0
  rxquantr800_loop2148:
    ge rx798_pos, rx798_eos, rx798_fail2141
    is_cclass $I11, .CCLASS_WHITESPACE, rx798_tgt, rx798_pos
    unless $I11, rx798_fail2141
    add rx798_pos, 1
    nqp_rxpeek $I19, rx798_bstack, rxquantr800_done2149
    inc $I19
    inc $I19
    set rx798_rep, rx798_bstack[$I19]
    nqp_rxcommit rx798_bstack, rxquantr800_done2149
    inc rx798_rep
    nqp_rxmark rx798_bstack, rxquantr800_done2149, rx798_pos, rx798_rep
    goto rxquantr800_loop2148
  rxquantr800_done2149:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt801_02151
    nqp_push_label $P11, alt801_12152
    nqp_rxmark rx798_bstack, alt801_end2150, -1, 0
    rx798_cur."!alt"(rx798_pos, "alt_nfa__25_1359718903.522", $P11)
    goto rx798_fail2141
  alt801_02151:
    add $I11, rx798_pos, 1
    gt $I11, rx798_eos, rx798_fail2141
    substr $S10, rx798_tgt, rx798_pos, 1
    ne $S10, ucs4:")", rx798_fail2141
    add rx798_pos, 1
    goto alt801_end2150
  alt801_12152:
    add $I11, rx798_pos, 1
    gt $I11, rx798_eos, rx798_fail2141
    substr $S10, rx798_tgt, rx798_pos, 1
    ne $S10, ucs4:"{", rx798_fail2141
    add rx798_pos, 1
    goto alt801_end2150
  alt801_end2150:
    nqp_rxcommit rx798_bstack, alt801_end2150
    rx798_cur."!cursor_pass"(rx798_pos, 'backtrack'=>1)
    .return (rx798_cur)
  rx798_restart2140:
    repr_get_attr_obj rx798_cstack, rx798_cur, rx798_curclass, "$!cstack"
  rx798_fail2141:
    unless rx798_bstack, rx798_done2139
    pop $I19, rx798_bstack
    if_null rx798_cstack, rx798_cstack_done2144
    unless rx798_cstack, rx798_cstack_done2144
    dec $I19
    set $P11, rx798_cstack[$I19]
  rx798_cstack_done2144:
    pop rx798_rep, rx798_bstack
    pop rx798_pos, rx798_bstack
    pop $I19, rx798_bstack
    lt rx798_pos, -1, rx798_done2139
    lt rx798_pos, 0, rx798_fail2141
    eq $I19, 0, rx798_fail2141
    nqp_islist $I20, rx798_cstack
    unless $I20, rx798_jump2142
    elements $I18, rx798_bstack
    le $I18, 0, rx798_cut2143
    dec $I18
    set $I18, rx798_bstack[$I18]
  rx798_cut2143:
    assign rx798_cstack, $I18
  rx798_jump2142:
    jump $I19
  rx798_done2139:
    rx798_cur."!cursor_fail"()
    .return (rx798_cur) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_128_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1118
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx803_tgt
    .local int rx803_pos
    .local int rx803_off
    .local int rx803_eos
    .local int rx803_rep
    .local pmc rx803_cur
    .local pmc rx803_curclass
    .local pmc rx803_bstack
    .local pmc rx803_cstack
    (rx803_cur, rx803_tgt, rx803_pos, rx803_curclass, rx803_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx803_cur
    length rx803_eos, rx803_tgt
    eq $I19, 1, rx803_restart2156
    gt rx803_pos, rx803_eos, rx803_fail2157
    repr_get_attr_int $I11, self, rx803_curclass, "$!from"
    ne $I11, -1, rxscan804_done2163
    goto rxscan804_scan2162
  rxscan804_loop2161:
    inc rx803_pos
    gt rx803_pos, rx803_eos, rx803_fail2157
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!from", rx803_pos
  rxscan804_scan2162:
    nqp_rxmark rx803_bstack, rxscan804_loop2161, rx803_pos, 0
  rxscan804_done2163:
    nqp_rxmark rx803_bstack, rxquantr805_done2165, rx803_pos, 0
  rxquantr805_loop2164:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."typename"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2157
    nqp_rxmark rx803_bstack, rxsubrule806_pass2166, -1, 0
  rxsubrule806_pass2166:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    nqp_rxmark rx803_bstack, rxquantr807_done2168, rx803_pos, 0
  rxquantr807_loop2167:
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2157
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:":", rx803_fail2157
    add rx803_pos, 1
    nqp_rxmark rx803_bstack, rxcap808_fail2170, rx803_pos, 0
    ge rx803_pos, rx803_eos, rx803_fail2157
    substr $S11, rx803_tgt, rx803_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx803_fail2157
    inc rx803_pos
    nqp_rxpeek $I19, rx803_bstack, rxcap808_fail2170
    inc $I19
    set $I11, rx803_bstack[$I19]
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx803_pos)
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "definedness")
    goto rxcap808_done2169
  rxcap808_fail2170:
    goto rx803_fail2157
  rxcap808_done2169:
    nqp_rxpeek $I19, rx803_bstack, rxquantr807_done2168
    inc $I19
    inc $I19
    set rx803_rep, rx803_bstack[$I19]
    nqp_rxcommit rx803_bstack, rxquantr807_done2168
    inc rx803_rep
  rxquantr807_done2168:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."ws"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2157
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    nqp_rxpeek $I19, rx803_bstack, rxquantr805_done2165
    inc $I19
    inc $I19
    set rx803_rep, rx803_bstack[$I19]
    nqp_rxcommit rx803_bstack, rxquantr805_done2165
    inc rx803_rep
    nqp_rxmark rx803_bstack, rxquantr805_done2165, rx803_pos, rx803_rep
    goto rxquantr805_loop2164
  rxquantr805_done2165:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt810_02173
    nqp_push_label $P11, alt810_12177
    nqp_rxmark rx803_bstack, alt810_end2172, -1, 0
    rx803_cur."!alt"(rx803_pos, "alt_nfa__29_1359718903.552", $P11)
    goto rx803_fail2157
  alt810_02173:
    nqp_rxmark rx803_bstack, rxcap811_fail2175, rx803_pos, 0
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2157
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:"*", rx803_fail2157
    add rx803_pos, 1
    nqp_rxpeek $I19, rx803_bstack, rxcap811_fail2175
    inc $I19
    set $I11, rx803_bstack[$I19]
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx803_pos)
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "quant")
    goto rxcap811_done2174
  rxcap811_fail2175:
    goto rx803_fail2157
  rxcap811_done2174:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2157
    nqp_rxmark rx803_bstack, rxsubrule812_pass2176, -1, 0
  rxsubrule812_pass2176:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    goto alt810_end2172
  alt810_12177:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt813_02179
    nqp_push_label $P11, alt813_12181
    nqp_rxmark rx803_bstack, alt813_end2178, -1, 0
    rx803_cur."!alt"(rx803_pos, "alt_nfa__27_1359718903.552", $P11)
    goto rx803_fail2157
  alt813_02179:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2157
    nqp_rxmark rx803_bstack, rxsubrule814_pass2180, -1, 0
  rxsubrule814_pass2180:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    goto alt813_end2178
  alt813_12181:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2157
    nqp_rxmark rx803_bstack, rxsubrule815_pass2182, -1, 0
  rxsubrule815_pass2182:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    goto alt813_end2178
  alt813_end2178:
    nqp_rxcommit rx803_bstack, alt813_end2178
    nqp_rxmark rx803_bstack, rxcap816_fail2184, rx803_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt817_02186
    nqp_push_label $P11, alt817_12187
    nqp_push_label $P11, alt817_22188
    nqp_rxmark rx803_bstack, alt817_end2185, -1, 0
    rx803_cur."!alt"(rx803_pos, "alt_nfa__28_1359718903.552", $P11)
    goto rx803_fail2157
  alt817_02186:
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2157
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:"?", rx803_fail2157
    add rx803_pos, 1
    goto alt817_end2185
  alt817_12187:
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2157
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:"!", rx803_fail2157
    add rx803_pos, 1
    goto alt817_end2185
  alt817_22188:
    goto alt817_end2185
  alt817_end2185:
    nqp_rxcommit rx803_bstack, alt817_end2185
    nqp_rxpeek $I19, rx803_bstack, rxcap816_fail2184
    inc $I19
    set $I11, rx803_bstack[$I19]
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx803_pos)
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "quant")
    goto rxcap816_done2183
  rxcap816_fail2184:
    goto rx803_fail2157
  rxcap816_done2183:
    goto alt810_end2172
  alt810_end2172:
    nqp_rxcommit rx803_bstack, alt810_end2172
    nqp_rxmark rx803_bstack, rxquantr819_done2191, rx803_pos, 0
  rxquantr819_loop2190:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2157
    goto rxsubrule820_pass2192
  rxsubrule820_back2193:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2157
  rxsubrule820_pass2192:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule820_back2193
    push rx803_bstack, $I11
    push rx803_bstack, 0
    push rx803_bstack, rx803_pos
    elements $I11, rx803_cstack
    push rx803_bstack, $I11
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    nqp_rxpeek $I19, rx803_bstack, rxquantr819_done2191
    inc $I19
    inc $I19
    set rx803_rep, rx803_bstack[$I19]
    nqp_rxcommit rx803_bstack, rxquantr819_done2191
    inc rx803_rep
  rxquantr819_done2191:
    rx803_cur."!cursor_pass"(rx803_pos, "parameter", 'backtrack'=>1)
    .return (rx803_cur)
  rx803_restart2156:
    repr_get_attr_obj rx803_cstack, rx803_cur, rx803_curclass, "$!cstack"
  rx803_fail2157:
    unless rx803_bstack, rx803_done2155
    pop $I19, rx803_bstack
    if_null rx803_cstack, rx803_cstack_done2160
    unless rx803_cstack, rx803_cstack_done2160
    dec $I19
    set $P11, rx803_cstack[$I19]
  rx803_cstack_done2160:
    pop rx803_rep, rx803_bstack
    pop rx803_pos, rx803_bstack
    pop $I19, rx803_bstack
    lt rx803_pos, -1, rx803_done2155
    lt rx803_pos, 0, rx803_fail2157
    eq $I19, 0, rx803_fail2157
    nqp_islist $I20, rx803_cstack
    unless $I20, rx803_jump2158
    elements $I18, rx803_bstack
    le $I18, 0, rx803_cut2159
    dec $I18
    set $I18, rx803_bstack[$I18]
  rx803_cut2159:
    assign rx803_cstack, $I18
  rx803_jump2158:
    jump $I19
  rx803_done2155:
    rx803_cur."!cursor_fail"()
    .return (rx803_cur) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_129_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1127
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx821_tgt
    .local int rx821_pos
    .local int rx821_off
    .local int rx821_eos
    .local int rx821_rep
    .local pmc rx821_cur
    .local pmc rx821_curclass
    .local pmc rx821_bstack
    .local pmc rx821_cstack
    (rx821_cur, rx821_tgt, rx821_pos, rx821_curclass, rx821_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx821_cur
    length rx821_eos, rx821_tgt
    eq $I19, 1, rx821_restart2196
    gt rx821_pos, rx821_eos, rx821_fail2197
    repr_get_attr_int $I11, self, rx821_curclass, "$!from"
    ne $I11, -1, rxscan822_done2203
    goto rxscan822_scan2202
  rxscan822_loop2201:
    inc rx821_pos
    gt rx821_pos, rx821_eos, rx821_fail2197
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!from", rx821_pos
  rxscan822_scan2202:
    nqp_rxmark rx821_bstack, rxscan822_loop2201, rx821_pos, 0
  rxscan822_done2203:
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!pos", rx821_pos
    $P11 = rx821_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx821_curclass, "$!pos"
    lt $I11, 0, rx821_fail2197
    nqp_rxmark rx821_bstack, rxsubrule823_pass2204, -1, 0
  rxsubrule823_pass2204:
    rx821_cstack = rx821_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx821_pos, $P11, rx821_curclass, "$!pos"
    nqp_rxmark rx821_bstack, rxquantr824_done2206, rx821_pos, 0
  rxquantr824_loop2205:
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!pos", rx821_pos
    $P11 = rx821_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx821_curclass, "$!pos"
    lt $I11, 0, rx821_fail2197
    goto rxsubrule825_pass2207
  rxsubrule825_back2208:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx821_curclass, "$!pos"
    lt $I11, 0, rx821_fail2197
  rxsubrule825_pass2207:
    rx821_cstack = rx821_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule825_back2208
    push rx821_bstack, $I11
    push rx821_bstack, 0
    push rx821_bstack, rx821_pos
    elements $I11, rx821_cstack
    push rx821_bstack, $I11
    repr_get_attr_int rx821_pos, $P11, rx821_curclass, "$!pos"
    nqp_rxpeek $I19, rx821_bstack, rxquantr824_done2206
    inc $I19
    inc $I19
    set rx821_rep, rx821_bstack[$I19]
    nqp_rxcommit rx821_bstack, rxquantr824_done2206
    inc rx821_rep
  rxquantr824_done2206:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt826_02210
    nqp_push_label $P11, alt826_12212
    nqp_rxmark rx821_bstack, alt826_end2209, -1, 0
    rx821_cur."!alt"(rx821_pos, "alt_nfa__30_1359718903.563", $P11)
    goto rx821_fail2197
  alt826_02210:
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!pos", rx821_pos
    $P11 = rx821_cur."ident"()
    repr_get_attr_int $I11, $P11, rx821_curclass, "$!pos"
    lt $I11, 0, rx821_fail2197
    nqp_rxmark rx821_bstack, rxsubrule827_pass2211, -1, 0
  rxsubrule827_pass2211:
    rx821_cstack = rx821_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx821_pos, $P11, rx821_curclass, "$!pos"
    goto alt826_end2209
  alt826_12212:
    nqp_rxmark rx821_bstack, rxcap828_fail2214, rx821_pos, 0
    ge rx821_pos, rx821_eos, rx821_fail2197
    substr $S11, rx821_tgt, rx821_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx821_fail2197
    inc rx821_pos
    nqp_rxpeek $I19, rx821_bstack, rxcap828_fail2214
    inc $I19
    set $I11, rx821_bstack[$I19]
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!pos", rx821_pos
    $P11 = rx821_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx821_pos)
    rx821_cstack = rx821_cur."!cursor_capture"($P11, "name")
    goto rxcap828_done2213
  rxcap828_fail2214:
    goto rx821_fail2197
  rxcap828_done2213:
    goto alt826_end2209
  alt826_end2209:
    nqp_rxcommit rx821_bstack, alt826_end2209
    rx821_cur."!cursor_pass"(rx821_pos, "param_var", 'backtrack'=>1)
    .return (rx821_cur)
  rx821_restart2196:
    repr_get_attr_obj rx821_cstack, rx821_cur, rx821_curclass, "$!cstack"
  rx821_fail2197:
    unless rx821_bstack, rx821_done2195
    pop $I19, rx821_bstack
    if_null rx821_cstack, rx821_cstack_done2200
    unless rx821_cstack, rx821_cstack_done2200
    dec $I19
    set $P11, rx821_cstack[$I19]
  rx821_cstack_done2200:
    pop rx821_rep, rx821_bstack
    pop rx821_pos, rx821_bstack
    pop $I19, rx821_bstack
    lt rx821_pos, -1, rx821_done2195
    lt rx821_pos, 0, rx821_fail2197
    eq $I19, 0, rx821_fail2197
    nqp_islist $I20, rx821_cstack
    unless $I20, rx821_jump2198
    elements $I18, rx821_bstack
    le $I18, 0, rx821_cut2199
    dec $I18
    set $I18, rx821_bstack[$I18]
  rx821_cut2199:
    assign rx821_cstack, $I18
  rx821_jump2198:
    jump $I19
  rx821_done2195:
    rx821_cur."!cursor_fail"()
    .return (rx821_cur) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_130_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1132
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx829_tgt
    .local int rx829_pos
    .local int rx829_off
    .local int rx829_eos
    .local int rx829_rep
    .local pmc rx829_cur
    .local pmc rx829_curclass
    .local pmc rx829_bstack
    .local pmc rx829_cstack
    (rx829_cur, rx829_tgt, rx829_pos, rx829_curclass, rx829_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx829_cur
    length rx829_eos, rx829_tgt
    eq $I19, 1, rx829_restart2217
    gt rx829_pos, rx829_eos, rx829_fail2218
    repr_get_attr_int $I11, self, rx829_curclass, "$!from"
    ne $I11, -1, rxscan830_done2224
    goto rxscan830_scan2223
  rxscan830_loop2222:
    inc rx829_pos
    gt rx829_pos, rx829_eos, rx829_fail2218
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!from", rx829_pos
  rxscan830_scan2223:
    nqp_rxmark rx829_bstack, rxscan830_loop2222, rx829_pos, 0
  rxscan830_done2224:
    add $I11, rx829_pos, 1
    gt $I11, rx829_eos, rx829_fail2218
    substr $S10, rx829_tgt, rx829_pos, 1
    ne $S10, ucs4:":", rx829_fail2218
    add rx829_pos, 1
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!pos", rx829_pos
    $P11 = rx829_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx829_curclass, "$!pos"
    lt $I11, 0, rx829_fail2218
    nqp_rxmark rx829_bstack, rxsubrule831_pass2225, -1, 0
  rxsubrule831_pass2225:
    rx829_cstack = rx829_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx829_pos, $P11, rx829_curclass, "$!pos"
    rx829_cur."!cursor_pass"(rx829_pos, "named_param", 'backtrack'=>1)
    .return (rx829_cur)
  rx829_restart2217:
    repr_get_attr_obj rx829_cstack, rx829_cur, rx829_curclass, "$!cstack"
  rx829_fail2218:
    unless rx829_bstack, rx829_done2216
    pop $I19, rx829_bstack
    if_null rx829_cstack, rx829_cstack_done2221
    unless rx829_cstack, rx829_cstack_done2221
    dec $I19
    set $P11, rx829_cstack[$I19]
  rx829_cstack_done2221:
    pop rx829_rep, rx829_bstack
    pop rx829_pos, rx829_bstack
    pop $I19, rx829_bstack
    lt rx829_pos, -1, rx829_done2216
    lt rx829_pos, 0, rx829_fail2218
    eq $I19, 0, rx829_fail2218
    nqp_islist $I20, rx829_cstack
    unless $I20, rx829_jump2219
    elements $I18, rx829_bstack
    le $I18, 0, rx829_cut2220
    dec $I18
    set $I18, rx829_bstack[$I18]
  rx829_cut2220:
    assign rx829_cstack, $I18
  rx829_jump2219:
    jump $I19
  rx829_done2216:
    rx829_cur."!cursor_fail"()
    .return (rx829_cur) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_131_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1136
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx832_tgt
    .local int rx832_pos
    .local int rx832_off
    .local int rx832_eos
    .local int rx832_rep
    .local pmc rx832_cur
    .local pmc rx832_curclass
    .local pmc rx832_bstack
    .local pmc rx832_cstack
    (rx832_cur, rx832_tgt, rx832_pos, rx832_curclass, rx832_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx832_cur
    length rx832_eos, rx832_tgt
    eq $I19, 1, rx832_restart2228
    gt rx832_pos, rx832_eos, rx832_fail2229
    repr_get_attr_int $I11, self, rx832_curclass, "$!from"
    ne $I11, -1, rxscan833_done2235
    goto rxscan833_scan2234
  rxscan833_loop2233:
    inc rx832_pos
    gt rx832_pos, rx832_eos, rx832_fail2229
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!from", rx832_pos
  rxscan833_scan2234:
    nqp_rxmark rx832_bstack, rxscan833_loop2233, rx832_pos, 0
  rxscan833_done2235:
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."ws"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2229
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    add $I11, rx832_pos, 1
    gt $I11, rx832_eos, rx832_fail2229
    substr $S10, rx832_tgt, rx832_pos, 1
    ne $S10, ucs4:"=", rx832_fail2229
    add rx832_pos, 1
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."ws"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2229
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2229
    nqp_rxmark rx832_bstack, rxsubrule836_pass2238, -1, 0
  rxsubrule836_pass2238:
    rx832_cstack = rx832_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."ws"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2229
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    rx832_cur."!cursor_pass"(rx832_pos, "default_value", 'backtrack'=>1)
    .return (rx832_cur)
  rx832_restart2228:
    repr_get_attr_obj rx832_cstack, rx832_cur, rx832_curclass, "$!cstack"
  rx832_fail2229:
    unless rx832_bstack, rx832_done2227
    pop $I19, rx832_bstack
    if_null rx832_cstack, rx832_cstack_done2232
    unless rx832_cstack, rx832_cstack_done2232
    dec $I19
    set $P11, rx832_cstack[$I19]
  rx832_cstack_done2232:
    pop rx832_rep, rx832_bstack
    pop rx832_pos, rx832_bstack
    pop $I19, rx832_bstack
    lt rx832_pos, -1, rx832_done2227
    lt rx832_pos, 0, rx832_fail2229
    eq $I19, 0, rx832_fail2229
    nqp_islist $I20, rx832_cstack
    unless $I20, rx832_jump2230
    elements $I18, rx832_bstack
    le $I18, 0, rx832_cut2231
    dec $I18
    set $I18, rx832_bstack[$I18]
  rx832_cut2231:
    assign rx832_cstack, $I18
  rx832_jump2230:
    jump $I19
  rx832_done2227:
    rx832_cur."!cursor_fail"()
    .return (rx832_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_132_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1138
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx838_tgt
    .local int rx838_pos
    .local int rx838_off
    .local int rx838_eos
    .local int rx838_rep
    .local pmc rx838_cur
    .local pmc rx838_curclass
    .local pmc rx838_bstack
    .local pmc rx838_cstack
    (rx838_cur, rx838_tgt, rx838_pos, rx838_curclass, rx838_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx838_cur
    length rx838_eos, rx838_tgt
    eq $I19, 1, rx838_restart2242
    gt rx838_pos, rx838_eos, rx838_fail2243
    repr_get_attr_int $I11, self, rx838_curclass, "$!from"
    ne $I11, -1, rxscan839_done2249
    goto rxscan839_scan2248
  rxscan839_loop2247:
    inc rx838_pos
    gt rx838_pos, rx838_eos, rx838_fail2243
    repr_bind_attr_int rx838_cur, rx838_curclass, "$!from", rx838_pos
  rxscan839_scan2248:
    nqp_rxmark rx838_bstack, rxscan839_loop2247, rx838_pos, 0
  rxscan839_done2249:
    repr_bind_attr_int rx838_cur, rx838_curclass, "$!pos", rx838_pos
    $P11 = rx838_cur."ws"()
    repr_get_attr_int $I11, $P11, rx838_curclass, "$!pos"
    lt $I11, 0, rx838_fail2243
    repr_get_attr_int rx838_pos, $P11, rx838_curclass, "$!pos"
    repr_bind_attr_int rx838_cur, rx838_curclass, "$!pos", rx838_pos
    $P11 = rx838_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx838_curclass, "$!pos"
    lt $I11, 0, rx838_fail2243
    nqp_rxmark rx838_bstack, rxsubrule841_pass2251, -1, 0
  rxsubrule841_pass2251:
    rx838_cstack = rx838_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx838_pos, $P11, rx838_curclass, "$!pos"
    repr_bind_attr_int rx838_cur, rx838_curclass, "$!pos", rx838_pos
    $P11 = rx838_cur."ws"()
    repr_get_attr_int $I11, $P11, rx838_curclass, "$!pos"
    lt $I11, 0, rx838_fail2243
    repr_get_attr_int rx838_pos, $P11, rx838_curclass, "$!pos"
    rx838_cur."!cursor_pass"(rx838_pos, "trait", 'backtrack'=>1)
    .return (rx838_cur)
  rx838_restart2242:
    repr_get_attr_obj rx838_cstack, rx838_cur, rx838_curclass, "$!cstack"
  rx838_fail2243:
    unless rx838_bstack, rx838_done2241
    pop $I19, rx838_bstack
    if_null rx838_cstack, rx838_cstack_done2246
    unless rx838_cstack, rx838_cstack_done2246
    dec $I19
    set $P11, rx838_cstack[$I19]
  rx838_cstack_done2246:
    pop rx838_rep, rx838_bstack
    pop rx838_pos, rx838_bstack
    pop $I19, rx838_bstack
    lt rx838_pos, -1, rx838_done2241
    lt rx838_pos, 0, rx838_fail2243
    eq $I19, 0, rx838_fail2243
    nqp_islist $I20, rx838_cstack
    unless $I20, rx838_jump2244
    elements $I18, rx838_bstack
    le $I18, 0, rx838_cut2245
    dec $I18
    set $I18, rx838_bstack[$I18]
  rx838_cut2245:
    assign rx838_cstack, $I18
  rx838_jump2244:
    jump $I19
  rx838_done2241:
    rx838_cur."!cursor_fail"()
    .return (rx838_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_133_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1140
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_134_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1141
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx843_tgt
    .local int rx843_pos
    .local int rx843_off
    .local int rx843_eos
    .local int rx843_rep
    .local pmc rx843_cur
    .local pmc rx843_curclass
    .local pmc rx843_bstack
    .local pmc rx843_cstack
    (rx843_cur, rx843_tgt, rx843_pos, rx843_curclass, rx843_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx843_cur
    length rx843_eos, rx843_tgt
    eq $I19, 1, rx843_restart2255
    gt rx843_pos, rx843_eos, rx843_fail2256
    repr_get_attr_int $I11, self, rx843_curclass, "$!from"
    ne $I11, -1, rxscan844_done2262
    goto rxscan844_scan2261
  rxscan844_loop2260:
    inc rx843_pos
    gt rx843_pos, rx843_eos, rx843_fail2256
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!from", rx843_pos
  rxscan844_scan2261:
    nqp_rxmark rx843_bstack, rxscan844_loop2260, rx843_pos, 0
  rxscan844_done2262:
    nqp_rxmark rx843_bstack, rxcap845_fail2264, rx843_pos, 0
    add $I11, rx843_pos, 2
    gt $I11, rx843_eos, rx843_fail2256
    substr $S10, rx843_tgt, rx843_pos, 2
    ne $S10, ucs4:"is", rx843_fail2256
    add rx843_pos, 2
    nqp_rxpeek $I19, rx843_bstack, rxcap845_fail2264
    inc $I19
    set $I11, rx843_bstack[$I19]
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx843_pos)
    rx843_cstack = rx843_cur."!cursor_capture"($P11, "sym")
    goto rxcap845_done2263
  rxcap845_fail2264:
    goto rx843_fail2256
  rxcap845_done2263:
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."ws"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2256
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2256
    nqp_rxmark rx843_bstack, rxsubrule847_pass2266, -1, 0
  rxsubrule847_pass2266:
    rx843_cstack = rx843_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    nqp_rxmark rx843_bstack, rxquantr848_done2268, rx843_pos, 0
  rxquantr848_loop2267:
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2256
    goto rxsubrule849_pass2269
  rxsubrule849_back2270:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2256
  rxsubrule849_pass2269:
    rx843_cstack = rx843_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule849_back2270
    push rx843_bstack, $I11
    push rx843_bstack, 0
    push rx843_bstack, rx843_pos
    elements $I11, rx843_cstack
    push rx843_bstack, $I11
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    nqp_rxpeek $I19, rx843_bstack, rxquantr848_done2268
    inc $I19
    inc $I19
    set rx843_rep, rx843_bstack[$I19]
    nqp_rxcommit rx843_bstack, rxquantr848_done2268
    inc rx843_rep
  rxquantr848_done2268:
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."ws"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2256
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    rx843_cur."!cursor_pass"(rx843_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx843_cur)
  rx843_restart2255:
    repr_get_attr_obj rx843_cstack, rx843_cur, rx843_curclass, "$!cstack"
  rx843_fail2256:
    unless rx843_bstack, rx843_done2254
    pop $I19, rx843_bstack
    if_null rx843_cstack, rx843_cstack_done2259
    unless rx843_cstack, rx843_cstack_done2259
    dec $I19
    set $P11, rx843_cstack[$I19]
  rx843_cstack_done2259:
    pop rx843_rep, rx843_bstack
    pop rx843_pos, rx843_bstack
    pop $I19, rx843_bstack
    lt rx843_pos, -1, rx843_done2254
    lt rx843_pos, 0, rx843_fail2256
    eq $I19, 0, rx843_fail2256
    nqp_islist $I20, rx843_cstack
    unless $I20, rx843_jump2257
    elements $I18, rx843_bstack
    le $I18, 0, rx843_cut2258
    dec $I18
    set $I18, rx843_bstack[$I18]
  rx843_cut2258:
    assign rx843_cstack, $I18
  rx843_jump2257:
    jump $I19
  rx843_done2254:
    rx843_cur."!cursor_fail"()
    .return (rx843_cur) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_135_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1143
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_404_1359718901.265' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx851_tgt
    .local int rx851_pos
    .local int rx851_off
    .local int rx851_eos
    .local int rx851_rep
    .local pmc rx851_cur
    .local pmc rx851_curclass
    .local pmc rx851_bstack
    .local pmc rx851_cstack
    (rx851_cur, rx851_tgt, rx851_pos, rx851_curclass, rx851_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx851_cur
    length rx851_eos, rx851_tgt
    eq $I19, 1, rx851_restart2274
    gt rx851_pos, rx851_eos, rx851_fail2275
    repr_get_attr_int $I11, self, rx851_curclass, "$!from"
    ne $I11, -1, rxscan852_done2281
    goto rxscan852_scan2280
  rxscan852_loop2279:
    inc rx851_pos
    gt rx851_pos, rx851_eos, rx851_fail2275
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!from", rx851_pos
  rxscan852_scan2280:
    nqp_rxmark rx851_bstack, rxscan852_loop2279, rx851_pos, 0
  rxscan852_done2281:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt853_02283
    nqp_push_label $P11, alt853_12323
    nqp_rxmark rx851_bstack, alt853_end2282, -1, 0
    rx851_cur."!alt"(rx851_pos, "alt_nfa__33_1359718903.678", $P11)
    goto rx851_fail2275
  alt853_02283:
    nqp_rxmark rx851_bstack, rxcap854_fail2285, rx851_pos, 0
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"proto", rx851_fail2275
    add rx851_pos, 5
    nqp_rxpeek $I19, rx851_bstack, rxcap854_fail2285
    inc $I19
    set $I11, rx851_bstack[$I19]
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx851_pos)
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "proto")
    goto rxcap854_done2284
  rxcap854_fail2285:
    goto rx851_fail2275
  rxcap854_done2284:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt856_02288
    nqp_push_label $P11, alt856_12289
    nqp_push_label $P11, alt856_22290
    nqp_rxmark rx851_bstack, alt856_end2287, -1, 0
    rx851_cur."!alt"(rx851_pos, "alt_nfa__31_1359718903.678", $P11)
    goto rx851_fail2275
  alt856_02288:
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"regex", rx851_fail2275
    add rx851_pos, 5
    goto alt856_end2287
  alt856_12289:
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"token", rx851_fail2275
    add rx851_pos, 5
    goto alt856_end2287
  alt856_22290:
    add $I11, rx851_pos, 4
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 4
    ne $S10, ucs4:"rule", rx851_fail2275
    add rx851_pos, 4
    goto alt856_end2287
  alt856_end2287:
    nqp_rxcommit rx851_bstack, alt856_end2287
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt858_02293:
    nqp_rxmark rx851_bstack, alt858_12299, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 3
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 3
    ne $S10, ucs4:"::(", rx851_fail2275
    add rx851_pos, 3
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."variable"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    nqp_rxmark rx851_bstack, rxsubrule861_pass2296, -1, 0
  rxsubrule861_pass2296:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:")", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt858_end2292
  alt858_12299:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    nqp_rxmark rx851_bstack, rxsubrule865_pass2301, -1, 0
  rxsubrule865_pass2301:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt858_end2292:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt868_02305:
    nqp_rxmark rx851_bstack, alt868_12308, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 3
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 3
    ne $S10, ucs4:"{*}", rx851_fail2275
    add rx851_pos, 3
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt868_end2304
  alt868_12308:
    nqp_rxmark rx851_bstack, alt868_22313, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"{", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"<...>", rx851_fail2275
    add rx851_pos, 5
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"}", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt868_end2304
  alt868_22313:
    nqp_rxmark rx851_bstack, alt868_32318, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"{", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 3
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 3
    ne $S10, ucs4:"<*>", rx851_fail2275
    add rx851_pos, 3
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"}", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt868_end2304
  alt868_32318:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt868_end2304:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt853_end2282
  alt853_12323:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    nqp_rxmark rx851_bstack, rxcap884_fail2326, rx851_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt885_02328
    nqp_push_label $P11, alt885_12329
    nqp_push_label $P11, alt885_22330
    nqp_rxmark rx851_bstack, alt885_end2327, -1, 0
    rx851_cur."!alt"(rx851_pos, "alt_nfa__32_1359718903.678", $P11)
    goto rx851_fail2275
  alt885_02328:
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"regex", rx851_fail2275
    add rx851_pos, 5
    goto alt885_end2327
  alt885_12329:
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"token", rx851_fail2275
    add rx851_pos, 5
    goto alt885_end2327
  alt885_22330:
    add $I11, rx851_pos, 4
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 4
    ne $S10, ucs4:"rule", rx851_fail2275
    add rx851_pos, 4
    goto alt885_end2327
  alt885_end2327:
    nqp_rxcommit rx851_bstack, alt885_end2327
    nqp_rxpeek $I19, rx851_bstack, rxcap884_fail2326
    inc $I19
    set $I11, rx851_bstack[$I19]
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx851_pos)
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "sym")
    goto rxcap884_done2325
  rxcap884_fail2326:
    goto rx851_fail2275
  rxcap884_done2325:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt888_02334:
    nqp_rxmark rx851_bstack, alt888_12340, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 3
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 3
    ne $S10, ucs4:"::(", rx851_fail2275
    add rx851_pos, 3
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."variable"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    nqp_rxmark rx851_bstack, rxsubrule891_pass2337, -1, 0
  rxsubrule891_pass2337:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:")", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt888_end2333
  alt888_12340:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    nqp_rxmark rx851_bstack, rxsubrule895_pass2342, -1, 0
  rxsubrule895_pass2342:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt888_end2333:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    nqp_rxmark rx851_bstack, rxquantr900_done2348, rx851_pos, 0
  rxquantr900_loop2347:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"(", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."signature"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    nqp_rxmark rx851_bstack, rxsubrule903_pass2351, -1, 0
  rxsubrule903_pass2351:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:")", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    nqp_rxpeek $I19, rx851_bstack, rxquantr900_done2348
    inc $I19
    inc $I19
    set rx851_rep, rx851_bstack[$I19]
    nqp_rxcommit rx851_bstack, rxquantr900_done2348
    inc rx851_rep
  rxquantr900_done2348:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    store_lex unicode:"$\x{a2}", rx851_cur
    unless_null $P101, fallback2355
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2356
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2356:
    unless_null $P5002, vivi_9072357
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9072357:
    set $P101, $P5002
  fallback2355:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    store_lex unicode:"$\x{a2}", rx851_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_404_1359718901.265' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"{", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    nqp_rxmark rx851_bstack, rxsubrule919_pass2398, -1, 0
  rxsubrule919_pass2398:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2275
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"}", rx851_fail2275
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2275
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt853_end2282
  alt853_end2282:
    nqp_rxcommit rx851_bstack, alt853_end2282
    rx851_cur."!cursor_pass"(rx851_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx851_cur)
  rx851_restart2274:
    repr_get_attr_obj rx851_cstack, rx851_cur, rx851_curclass, "$!cstack"
  rx851_fail2275:
    unless rx851_bstack, rx851_done2273
    pop $I19, rx851_bstack
    if_null rx851_cstack, rx851_cstack_done2278
    unless rx851_cstack, rx851_cstack_done2278
    dec $I19
    set $P11, rx851_cstack[$I19]
  rx851_cstack_done2278:
    pop rx851_rep, rx851_bstack
    pop rx851_pos, rx851_bstack
    pop $I19, rx851_bstack
    lt rx851_pos, -1, rx851_done2273
    lt rx851_pos, 0, rx851_fail2275
    eq $I19, 0, rx851_fail2275
    nqp_islist $I20, rx851_cstack
    unless $I20, rx851_jump2276
    elements $I18, rx851_bstack
    le $I18, 0, rx851_cut2277
    dec $I18
    set $I18, rx851_bstack[$I18]
  rx851_cut2277:
    assign rx851_cstack, $I18
  rx851_jump2276:
    jump $I19
  rx851_done2273:
    rx851_cur."!cursor_fail"()
    .return (rx851_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1359718901.265") :anon :lex :outer("cuid_135_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1164

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2359
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2360
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2360:
    unless_null $P5002, vivi_9092361
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9092361:
    set $P5001, $P5002
  fallback2359:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2362
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5011
  fallback2362:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2363
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback2363:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2364
    nqp_get_sc_object $P5017, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2365
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2365:
    unless_null $P5015, vivi_9102366
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_9102366:
    set $P5014, $P5015
  fallback2364:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2369
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5024
  fallback2369:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2370
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5025
  fallback2370:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless911_end2368 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2371
    nqp_get_sc_object $P5028, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5028
  fallback2371:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2372
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5029
  fallback2372:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless911_end2368:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2373
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2374
    nqp_get_sc_object $P5036, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2374:
    unless_null $P5032, vivi_9122375
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_9122375:
    set $P5031, $P5032
  fallback2373:
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2378
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5041
  fallback2378:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2379
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5042
  fallback2379:
    unless $P5039 goto if913_else2376 
.annotate 'line', 1167
    find_lex $P5044, "$/"
    unless_null $P5044, fallback2380
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5045
  fallback2380:
    set $P5043, $P5044["deflongname"]
    unless_null $P5043, fallback2381
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5043, $P5046
  fallback2381:
    $P5047 = $P5043."ast"()
    set $P5052, $P5047
    goto if913_end2377
  if913_else2376:
    find_lex $P5049, "$/"
    unless_null $P5049, fallback2382
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5049, $P5050
  fallback2382:
    set $P5048, $P5049["latename"]
    unless_null $P5048, fallback2383
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5051
  fallback2383:
    set $S5005, $P5048
    concat $S5004, "!!LATENAME!!", $S5005
    box $P5053, $S5004
    set $P5052, $P5053
  if913_end2377:
    set $P5031["name"], $P5052
    find_dynamic_lex $P5054, "%*RX"
    unless_null $P5054, fallback2384
    nqp_get_sc_object $P5057, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%RX"]
    unless_null $P5055, fallback2385
    nqp_get_sc_object $P5059, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%RX"], $P5060
    set $P5055, $P5060
  fallback2385:
    unless_null $P5055, vivi_9142386
    die "Contextual %*RX not found"
    box $P5061, "Contextual %*RX not found"
    set $P5055, $P5061
  vivi_9142386:
    set $P5054, $P5055
  fallback2384:
.annotate 'line', 1168
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback2387
    nqp_get_sc_object $P5065, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback2388
    nqp_get_sc_object $P5066, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5063, $P5066
  fallback2388:
    unless_null $P5063, vivi_9152389
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_9152389:
    set $P5062, $P5063
  fallback2387:
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback2390
    nqp_get_sc_object $P5071, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback2391
    nqp_get_sc_object $P5072, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5069, $P5072
  fallback2391:
    unless_null $P5069, vivi_9162392
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_9162392:
    set $P5068, $P5069
  fallback2390:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5076, "%*RX"
    unless_null $P5076, fallback2393
    nqp_get_sc_object $P5079, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["%RX"]
    unless_null $P5077, fallback2394
    nqp_get_sc_object $P5081, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5080, $P5081
    new $P5082, 'Hash'
    set $P5080["%RX"], $P5082
    set $P5077, $P5082
  fallback2394:
    unless_null $P5077, vivi_9172395
    die "Contextual %*RX not found"
    box $P5083, "Contextual %*RX not found"
    set $P5077, $P5083
  vivi_9172395:
    set $P5076, $P5077
  fallback2393:
    set $P5075, $P5076["name"]
    unless_null $P5075, fallback2396
    nqp_get_sc_object $P5084, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5075, $P5084
  fallback2396:
    $P5085 = $P5062."create_code"($P5074, $P5075, 0, "NQPRegex" :named("code_type_name"))
    set $P5054["code"], $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_136_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx921_tgt
    .local int rx921_pos
    .local int rx921_off
    .local int rx921_eos
    .local int rx921_rep
    .local pmc rx921_cur
    .local pmc rx921_curclass
    .local pmc rx921_bstack
    .local pmc rx921_cstack
    (rx921_cur, rx921_tgt, rx921_pos, rx921_curclass, rx921_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx921_cur
    length rx921_eos, rx921_tgt
    eq $I19, 1, rx921_restart2402
    gt rx921_pos, rx921_eos, rx921_fail2403
    repr_get_attr_int $I11, self, rx921_curclass, "$!from"
    ne $I11, -1, rxscan922_done2409
    goto rxscan922_scan2408
  rxscan922_loop2407:
    inc rx921_pos
    gt rx921_pos, rx921_eos, rx921_fail2403
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!from", rx921_pos
  rxscan922_scan2408:
    nqp_rxmark rx921_bstack, rxscan922_loop2407, rx921_pos, 0
  rxscan922_done2409:
    add $I11, rx921_pos, 1
    gt $I11, rx921_eos, rx921_fail2403
    substr $S10, rx921_tgt, rx921_pos, 1
    ne $S10, ucs4:".", rx921_fail2403
    add rx921_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt923_02411
    nqp_push_label $P11, alt923_12413
    nqp_rxmark rx921_bstack, alt923_end2410, -1, 0
    rx921_cur."!alt"(rx921_pos, "alt_nfa__34_1359718903.702", $P11)
    goto rx921_fail2403
  alt923_02411:
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2403
    nqp_rxmark rx921_bstack, rxsubrule924_pass2412, -1, 0
  rxsubrule924_pass2412:
    rx921_cstack = rx921_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
    goto alt923_end2410
  alt923_12413:
    ge rx921_pos, rx921_eos, rx921_fail2403
    substr $S11, rx921_tgt, rx921_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx921_fail2403
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."quote"()
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2403
    nqp_rxmark rx921_bstack, rxsubrule925_pass2414, -1, 0
  rxsubrule925_pass2414:
    rx921_cstack = rx921_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
  alt926_02416:
    nqp_rxmark rx921_bstack, alt926_12417, rx921_pos, 0
    ge rx921_pos, rx921_eos, rx921_fail2403
    substr $S11, rx921_tgt, rx921_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx921_fail2403
    goto alt926_end2415
  alt926_12417:
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2403
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
  alt926_end2415:
    goto alt923_end2410
  alt923_end2410:
    nqp_rxcommit rx921_bstack, alt923_end2410
    nqp_rxmark rx921_bstack, rxquantr928_done2420, rx921_pos, 0
  rxquantr928_loop2419:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt929_02422
    nqp_push_label $P11, alt929_12424
    nqp_rxmark rx921_bstack, alt929_end2421, -1, 0
    rx921_cur."!alt"(rx921_pos, "alt_nfa__35_1359718903.702", $P11)
    goto rx921_fail2403
  alt929_02422:
    ge rx921_pos, rx921_eos, rx921_fail2403
    substr $S11, rx921_tgt, rx921_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx921_fail2403
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."args"()
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2403
    nqp_rxmark rx921_bstack, rxsubrule930_pass2423, -1, 0
  rxsubrule930_pass2423:
    rx921_cstack = rx921_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
    goto alt929_end2421
  alt929_12424:
    add $I11, rx921_pos, 1
    gt $I11, rx921_eos, rx921_fail2403
    substr $S10, rx921_tgt, rx921_pos, 1
    ne $S10, ucs4:":", rx921_fail2403
    add rx921_pos, 1
    ge rx921_pos, rx921_eos, rx921_fail2403
    is_cclass $I11, .CCLASS_WHITESPACE, rx921_tgt, rx921_pos
    unless $I11, rx921_fail2403
    add rx921_pos, 1
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2403
    nqp_rxmark rx921_bstack, rxsubrule931_pass2425, -1, 0
  rxsubrule931_pass2425:
    rx921_cstack = rx921_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
    goto alt929_end2421
  alt929_end2421:
    nqp_rxpeek $I19, rx921_bstack, rxquantr928_done2420
    inc $I19
    inc $I19
    set rx921_rep, rx921_bstack[$I19]
    nqp_rxcommit rx921_bstack, rxquantr928_done2420
    inc rx921_rep
  rxquantr928_done2420:
    rx921_cur."!cursor_pass"(rx921_pos, "dotty", 'backtrack'=>1)
    .return (rx921_cur)
  rx921_restart2402:
    repr_get_attr_obj rx921_cstack, rx921_cur, rx921_curclass, "$!cstack"
  rx921_fail2403:
    unless rx921_bstack, rx921_done2401
    pop $I19, rx921_bstack
    if_null rx921_cstack, rx921_cstack_done2406
    unless rx921_cstack, rx921_cstack_done2406
    dec $I19
    set $P11, rx921_cstack[$I19]
  rx921_cstack_done2406:
    pop rx921_rep, rx921_bstack
    pop rx921_pos, rx921_bstack
    pop $I19, rx921_bstack
    lt rx921_pos, -1, rx921_done2401
    lt rx921_pos, 0, rx921_fail2403
    eq $I19, 0, rx921_fail2403
    nqp_islist $I20, rx921_cstack
    unless $I20, rx921_jump2404
    elements $I18, rx921_bstack
    le $I18, 0, rx921_cut2405
    dec $I18
    set $I18, rx921_bstack[$I18]
  rx921_cut2405:
    assign rx921_cstack, $I18
  rx921_jump2404:
    jump $I19
  rx921_done2401:
    rx921_cur."!cursor_fail"()
    .return (rx921_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_137_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx932_tgt
    .local int rx932_pos
    .local int rx932_off
    .local int rx932_eos
    .local int rx932_rep
    .local pmc rx932_cur
    .local pmc rx932_curclass
    .local pmc rx932_bstack
    .local pmc rx932_cstack
    (rx932_cur, rx932_tgt, rx932_pos, rx932_curclass, rx932_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx932_cur
    length rx932_eos, rx932_tgt
    eq $I19, 1, rx932_restart2428
    gt rx932_pos, rx932_eos, rx932_fail2429
    repr_get_attr_int $I11, self, rx932_curclass, "$!from"
    ne $I11, -1, rxscan933_done2435
    goto rxscan933_scan2434
  rxscan933_loop2433:
    inc rx932_pos
    gt rx932_pos, rx932_eos, rx932_fail2429
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!from", rx932_pos
  rxscan933_scan2434:
    nqp_rxmark rx932_bstack, rxscan933_loop2433, rx932_pos, 0
  rxscan933_done2435:
    nqp_rxmark rx932_bstack, rxcap934_fail2437, rx932_pos, 0
    add $I11, rx932_pos, 4
    gt $I11, rx932_eos, rx932_fail2429
    substr $S10, rx932_tgt, rx932_pos, 4
    ne $S10, ucs4:"self", rx932_fail2429
    add rx932_pos, 4
    nqp_rxpeek $I19, rx932_bstack, rxcap934_fail2437
    inc $I19
    set $I11, rx932_bstack[$I19]
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx932_pos)
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "sym")
    goto rxcap934_done2436
  rxcap934_fail2437:
    goto rx932_fail2429
  rxcap934_done2436:
    le rx932_pos, 0, rx932_fail2429
    is_cclass $I11, .CCLASS_WORD, rx932_tgt, rx932_pos
    if $I11, rx932_fail2429
    sub $I11, rx932_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx932_tgt, $I11
    unless $I11, rx932_fail2429
    rx932_cur."!cursor_pass"(rx932_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx932_cur)
  rx932_restart2428:
    repr_get_attr_obj rx932_cstack, rx932_cur, rx932_curclass, "$!cstack"
  rx932_fail2429:
    unless rx932_bstack, rx932_done2427
    pop $I19, rx932_bstack
    if_null rx932_cstack, rx932_cstack_done2432
    unless rx932_cstack, rx932_cstack_done2432
    dec $I19
    set $P11, rx932_cstack[$I19]
  rx932_cstack_done2432:
    pop rx932_rep, rx932_bstack
    pop rx932_pos, rx932_bstack
    pop $I19, rx932_bstack
    lt rx932_pos, -1, rx932_done2427
    lt rx932_pos, 0, rx932_fail2429
    eq $I19, 0, rx932_fail2429
    nqp_islist $I20, rx932_cstack
    unless $I20, rx932_jump2430
    elements $I18, rx932_bstack
    le $I18, 0, rx932_cut2431
    dec $I18
    set $I18, rx932_bstack[$I18]
  rx932_cut2431:
    assign rx932_cstack, $I18
  rx932_jump2430:
    jump $I19
  rx932_done2427:
    rx932_cur."!cursor_fail"()
    .return (rx932_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_138_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx936_tgt
    .local int rx936_pos
    .local int rx936_off
    .local int rx936_eos
    .local int rx936_rep
    .local pmc rx936_cur
    .local pmc rx936_curclass
    .local pmc rx936_bstack
    .local pmc rx936_cstack
    (rx936_cur, rx936_tgt, rx936_pos, rx936_curclass, rx936_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx936_cur
    length rx936_eos, rx936_tgt
    eq $I19, 1, rx936_restart2441
    gt rx936_pos, rx936_eos, rx936_fail2442
    repr_get_attr_int $I11, self, rx936_curclass, "$!from"
    ne $I11, -1, rxscan937_done2448
    goto rxscan937_scan2447
  rxscan937_loop2446:
    inc rx936_pos
    gt rx936_pos, rx936_eos, rx936_fail2442
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!from", rx936_pos
  rxscan937_scan2447:
    nqp_rxmark rx936_bstack, rxscan937_loop2446, rx936_pos, 0
  rxscan937_done2448:
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2442
    nqp_rxmark rx936_bstack, rxsubrule938_pass2449, -1, 0
  rxsubrule938_pass2449:
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx936_pos, $P11, rx936_curclass, "$!pos"
    ge rx936_pos, rx936_eos, rx936_fail2442
    substr $S11, rx936_tgt, rx936_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx936_fail2442
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."args"()
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2442
    nqp_rxmark rx936_bstack, rxsubrule939_pass2450, -1, 0
  rxsubrule939_pass2450:
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx936_pos, $P11, rx936_curclass, "$!pos"
    rx936_cur."!cursor_pass"(rx936_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx936_cur)
  rx936_restart2441:
    repr_get_attr_obj rx936_cstack, rx936_cur, rx936_curclass, "$!cstack"
  rx936_fail2442:
    unless rx936_bstack, rx936_done2440
    pop $I19, rx936_bstack
    if_null rx936_cstack, rx936_cstack_done2445
    unless rx936_cstack, rx936_cstack_done2445
    dec $I19
    set $P11, rx936_cstack[$I19]
  rx936_cstack_done2445:
    pop rx936_rep, rx936_bstack
    pop rx936_pos, rx936_bstack
    pop $I19, rx936_bstack
    lt rx936_pos, -1, rx936_done2440
    lt rx936_pos, 0, rx936_fail2442
    eq $I19, 0, rx936_fail2442
    nqp_islist $I20, rx936_cstack
    unless $I20, rx936_jump2443
    elements $I18, rx936_bstack
    le $I18, 0, rx936_cut2444
    dec $I18
    set $I18, rx936_bstack[$I18]
  rx936_cut2444:
    assign rx936_cstack, $I18
  rx936_jump2443:
    jump $I19
  rx936_done2440:
    rx936_cur."!cursor_fail"()
    .return (rx936_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_139_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1193
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx940_tgt
    .local int rx940_pos
    .local int rx940_off
    .local int rx940_eos
    .local int rx940_rep
    .local pmc rx940_cur
    .local pmc rx940_curclass
    .local pmc rx940_bstack
    .local pmc rx940_cstack
    (rx940_cur, rx940_tgt, rx940_pos, rx940_curclass, rx940_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx940_cur
    length rx940_eos, rx940_tgt
    eq $I19, 1, rx940_restart2453
    gt rx940_pos, rx940_eos, rx940_fail2454
    repr_get_attr_int $I11, self, rx940_curclass, "$!from"
    ne $I11, -1, rxscan941_done2460
    goto rxscan941_scan2459
  rxscan941_loop2458:
    inc rx940_pos
    gt rx940_pos, rx940_eos, rx940_fail2454
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!from", rx940_pos
  rxscan941_scan2459:
    nqp_rxmark rx940_bstack, rxscan941_loop2458, rx940_pos, 0
  rxscan941_done2460:
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!pos", rx940_pos
    $P11 = rx940_cur."name"()
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail2454
    nqp_rxmark rx940_bstack, rxsubrule942_pass2461, -1, 0
  rxsubrule942_pass2461:
    rx940_cstack = rx940_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx940_pos, $P11, rx940_curclass, "$!pos"
    nqp_rxmark rx940_bstack, rxquantr943_done2463, rx940_pos, 0
  rxquantr943_loop2462:
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!pos", rx940_pos
    $P11 = rx940_cur."args"()
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail2454
    goto rxsubrule944_pass2464
  rxsubrule944_back2465:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail2454
  rxsubrule944_pass2464:
    rx940_cstack = rx940_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule944_back2465
    push rx940_bstack, $I11
    push rx940_bstack, 0
    push rx940_bstack, rx940_pos
    elements $I11, rx940_cstack
    push rx940_bstack, $I11
    repr_get_attr_int rx940_pos, $P11, rx940_curclass, "$!pos"
    nqp_rxpeek $I19, rx940_bstack, rxquantr943_done2463
    inc $I19
    inc $I19
    set rx940_rep, rx940_bstack[$I19]
    nqp_rxcommit rx940_bstack, rxquantr943_done2463
    inc rx940_rep
  rxquantr943_done2463:
    rx940_cur."!cursor_pass"(rx940_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx940_cur)
  rx940_restart2453:
    repr_get_attr_obj rx940_cstack, rx940_cur, rx940_curclass, "$!cstack"
  rx940_fail2454:
    unless rx940_bstack, rx940_done2452
    pop $I19, rx940_bstack
    if_null rx940_cstack, rx940_cstack_done2457
    unless rx940_cstack, rx940_cstack_done2457
    dec $I19
    set $P11, rx940_cstack[$I19]
  rx940_cstack_done2457:
    pop rx940_rep, rx940_bstack
    pop rx940_pos, rx940_bstack
    pop $I19, rx940_bstack
    lt rx940_pos, -1, rx940_done2452
    lt rx940_pos, 0, rx940_fail2454
    eq $I19, 0, rx940_fail2454
    nqp_islist $I20, rx940_cstack
    unless $I20, rx940_jump2455
    elements $I18, rx940_bstack
    le $I18, 0, rx940_cut2456
    dec $I18
    set $I18, rx940_bstack[$I18]
  rx940_cut2456:
    assign rx940_cstack, $I18
  rx940_jump2455:
    jump $I19
  rx940_done2452:
    rx940_cur."!cursor_fail"()
    .return (rx940_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_140_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx945_tgt
    .local int rx945_pos
    .local int rx945_off
    .local int rx945_eos
    .local int rx945_rep
    .local pmc rx945_cur
    .local pmc rx945_curclass
    .local pmc rx945_bstack
    .local pmc rx945_cstack
    (rx945_cur, rx945_tgt, rx945_pos, rx945_curclass, rx945_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx945_cur
    length rx945_eos, rx945_tgt
    eq $I19, 1, rx945_restart2468
    gt rx945_pos, rx945_eos, rx945_fail2469
    repr_get_attr_int $I11, self, rx945_curclass, "$!from"
    ne $I11, -1, rxscan946_done2475
    goto rxscan946_scan2474
  rxscan946_loop2473:
    inc rx945_pos
    gt rx945_pos, rx945_eos, rx945_fail2469
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!from", rx945_pos
  rxscan946_scan2474:
    nqp_rxmark rx945_bstack, rxscan946_loop2473, rx945_pos, 0
  rxscan946_done2475:
    add $I11, rx945_pos, 5
    gt $I11, rx945_eos, rx945_fail2469
    substr $S10, rx945_tgt, rx945_pos, 5
    ne $S10, ucs4:"pir::", rx945_fail2469
    add rx945_pos, 5
    nqp_rxmark rx945_bstack, rxcap947_fail2477, rx945_pos, 0
    nqp_rxmark rx945_bstack, rxquantr948_done2479, -1, 0
  rxquantr948_loop2478:
    ge rx945_pos, rx945_eos, rx945_fail2469
    is_cclass $I11, .CCLASS_WORD, rx945_tgt, rx945_pos
    unless $I11, rx945_fail2469
    add rx945_pos, 1
    nqp_rxpeek $I19, rx945_bstack, rxquantr948_done2479
    inc $I19
    inc $I19
    set rx945_rep, rx945_bstack[$I19]
    nqp_rxcommit rx945_bstack, rxquantr948_done2479
    inc rx945_rep
    nqp_rxmark rx945_bstack, rxquantr948_done2479, rx945_pos, rx945_rep
    goto rxquantr948_loop2478
  rxquantr948_done2479:
    nqp_rxpeek $I19, rx945_bstack, rxcap947_fail2477
    inc $I19
    set $I11, rx945_bstack[$I19]
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!pos", rx945_pos
    $P11 = rx945_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx945_pos)
    rx945_cstack = rx945_cur."!cursor_capture"($P11, "op")
    goto rxcap947_done2476
  rxcap947_fail2477:
    goto rx945_fail2469
  rxcap947_done2476:
    nqp_rxmark rx945_bstack, rxquantr949_done2481, rx945_pos, 0
  rxquantr949_loop2480:
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!pos", rx945_pos
    $P11 = rx945_cur."args"()
    repr_get_attr_int $I11, $P11, rx945_curclass, "$!pos"
    lt $I11, 0, rx945_fail2469
    goto rxsubrule950_pass2482
  rxsubrule950_back2483:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx945_curclass, "$!pos"
    lt $I11, 0, rx945_fail2469
  rxsubrule950_pass2482:
    rx945_cstack = rx945_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule950_back2483
    push rx945_bstack, $I11
    push rx945_bstack, 0
    push rx945_bstack, rx945_pos
    elements $I11, rx945_cstack
    push rx945_bstack, $I11
    repr_get_attr_int rx945_pos, $P11, rx945_curclass, "$!pos"
    nqp_rxpeek $I19, rx945_bstack, rxquantr949_done2481
    inc $I19
    inc $I19
    set rx945_rep, rx945_bstack[$I19]
    nqp_rxcommit rx945_bstack, rxquantr949_done2481
    inc rx945_rep
  rxquantr949_done2481:
    rx945_cur."!cursor_pass"(rx945_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx945_cur)
  rx945_restart2468:
    repr_get_attr_obj rx945_cstack, rx945_cur, rx945_curclass, "$!cstack"
  rx945_fail2469:
    unless rx945_bstack, rx945_done2467
    pop $I19, rx945_bstack
    if_null rx945_cstack, rx945_cstack_done2472
    unless rx945_cstack, rx945_cstack_done2472
    dec $I19
    set $P11, rx945_cstack[$I19]
  rx945_cstack_done2472:
    pop rx945_rep, rx945_bstack
    pop rx945_pos, rx945_bstack
    pop $I19, rx945_bstack
    lt rx945_pos, -1, rx945_done2467
    lt rx945_pos, 0, rx945_fail2469
    eq $I19, 0, rx945_fail2469
    nqp_islist $I20, rx945_cstack
    unless $I20, rx945_jump2470
    elements $I18, rx945_bstack
    le $I18, 0, rx945_cut2471
    dec $I18
    set $I18, rx945_bstack[$I18]
  rx945_cut2471:
    assign rx945_cstack, $I18
  rx945_jump2470:
    jump $I19
  rx945_done2467:
    rx945_cur."!cursor_fail"()
    .return (rx945_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_141_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx951_tgt
    .local int rx951_pos
    .local int rx951_off
    .local int rx951_eos
    .local int rx951_rep
    .local pmc rx951_cur
    .local pmc rx951_curclass
    .local pmc rx951_bstack
    .local pmc rx951_cstack
    (rx951_cur, rx951_tgt, rx951_pos, rx951_curclass, rx951_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx951_cur
    length rx951_eos, rx951_tgt
    eq $I19, 1, rx951_restart2486
    gt rx951_pos, rx951_eos, rx951_fail2487
    repr_get_attr_int $I11, self, rx951_curclass, "$!from"
    ne $I11, -1, rxscan952_done2493
    goto rxscan952_scan2492
  rxscan952_loop2491:
    inc rx951_pos
    gt rx951_pos, rx951_eos, rx951_fail2487
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!from", rx951_pos
  rxscan952_scan2492:
    nqp_rxmark rx951_bstack, rxscan952_loop2491, rx951_pos, 0
  rxscan952_done2493:
    add $I11, rx951_pos, 12
    gt $I11, rx951_eos, rx951_fail2487
    substr $S10, rx951_tgt, rx951_pos, 12
    ne $S10, ucs4:"pir::const::", rx951_fail2487
    add rx951_pos, 12
    nqp_rxmark rx951_bstack, rxcap953_fail2495, rx951_pos, 0
    nqp_rxmark rx951_bstack, rxquantr954_done2497, -1, 0
  rxquantr954_loop2496:
    ge rx951_pos, rx951_eos, rx951_fail2487
    is_cclass $I11, .CCLASS_WORD, rx951_tgt, rx951_pos
    unless $I11, rx951_fail2487
    add rx951_pos, 1
    nqp_rxpeek $I19, rx951_bstack, rxquantr954_done2497
    inc $I19
    inc $I19
    set rx951_rep, rx951_bstack[$I19]
    nqp_rxcommit rx951_bstack, rxquantr954_done2497
    inc rx951_rep
    nqp_rxmark rx951_bstack, rxquantr954_done2497, rx951_pos, rx951_rep
    goto rxquantr954_loop2496
  rxquantr954_done2497:
    nqp_rxpeek $I19, rx951_bstack, rxcap953_fail2495
    inc $I19
    set $I11, rx951_bstack[$I19]
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx951_pos)
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "const")
    goto rxcap953_done2494
  rxcap953_fail2495:
    goto rx951_fail2487
  rxcap953_done2494:
    rx951_cur."!cursor_pass"(rx951_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx951_cur)
  rx951_restart2486:
    repr_get_attr_obj rx951_cstack, rx951_cur, rx951_curclass, "$!cstack"
  rx951_fail2487:
    unless rx951_bstack, rx951_done2485
    pop $I19, rx951_bstack
    if_null rx951_cstack, rx951_cstack_done2490
    unless rx951_cstack, rx951_cstack_done2490
    dec $I19
    set $P11, rx951_cstack[$I19]
  rx951_cstack_done2490:
    pop rx951_rep, rx951_bstack
    pop rx951_pos, rx951_bstack
    pop $I19, rx951_bstack
    lt rx951_pos, -1, rx951_done2485
    lt rx951_pos, 0, rx951_fail2487
    eq $I19, 0, rx951_fail2487
    nqp_islist $I20, rx951_cstack
    unless $I20, rx951_jump2488
    elements $I18, rx951_bstack
    le $I18, 0, rx951_cut2489
    dec $I18
    set $I18, rx951_bstack[$I18]
  rx951_cut2489:
    assign rx951_cstack, $I18
  rx951_jump2488:
    jump $I19
  rx951_done2485:
    rx951_cur."!cursor_fail"()
    .return (rx951_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_142_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx955_tgt
    .local int rx955_pos
    .local int rx955_off
    .local int rx955_eos
    .local int rx955_rep
    .local pmc rx955_cur
    .local pmc rx955_curclass
    .local pmc rx955_bstack
    .local pmc rx955_cstack
    (rx955_cur, rx955_tgt, rx955_pos, rx955_curclass, rx955_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx955_cur
    length rx955_eos, rx955_tgt
    eq $I19, 1, rx955_restart2500
    gt rx955_pos, rx955_eos, rx955_fail2501
    repr_get_attr_int $I11, self, rx955_curclass, "$!from"
    ne $I11, -1, rxscan956_done2507
    goto rxscan956_scan2506
  rxscan956_loop2505:
    inc rx955_pos
    gt rx955_pos, rx955_eos, rx955_fail2501
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!from", rx955_pos
  rxscan956_scan2506:
    nqp_rxmark rx955_bstack, rxscan956_loop2505, rx955_pos, 0
  rxscan956_done2507:
    add $I11, rx955_pos, 5
    gt $I11, rx955_eos, rx955_fail2501
    substr $S10, rx955_tgt, rx955_pos, 5
    ne $S10, ucs4:"nqp::", rx955_fail2501
    add rx955_pos, 5
    nqp_rxmark rx955_bstack, rxcap957_fail2509, rx955_pos, 0
    nqp_rxmark rx955_bstack, rxquantr958_done2511, -1, 0
  rxquantr958_loop2510:
    ge rx955_pos, rx955_eos, rx955_fail2501
    is_cclass $I11, .CCLASS_WORD, rx955_tgt, rx955_pos
    unless $I11, rx955_fail2501
    add rx955_pos, 1
    nqp_rxpeek $I19, rx955_bstack, rxquantr958_done2511
    inc $I19
    inc $I19
    set rx955_rep, rx955_bstack[$I19]
    nqp_rxcommit rx955_bstack, rxquantr958_done2511
    inc rx955_rep
    nqp_rxmark rx955_bstack, rxquantr958_done2511, rx955_pos, rx955_rep
    goto rxquantr958_loop2510
  rxquantr958_done2511:
    nqp_rxpeek $I19, rx955_bstack, rxcap957_fail2509
    inc $I19
    set $I11, rx955_bstack[$I19]
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx955_pos)
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "op")
    goto rxcap957_done2508
  rxcap957_fail2509:
    goto rx955_fail2501
  rxcap957_done2508:
    nqp_rxmark rx955_bstack, rxquantr959_done2513, rx955_pos, 0
  rxquantr959_loop2512:
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."args"()
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail2501
    goto rxsubrule960_pass2514
  rxsubrule960_back2515:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail2501
  rxsubrule960_pass2514:
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule960_back2515
    push rx955_bstack, $I11
    push rx955_bstack, 0
    push rx955_bstack, rx955_pos
    elements $I11, rx955_cstack
    push rx955_bstack, $I11
    repr_get_attr_int rx955_pos, $P11, rx955_curclass, "$!pos"
    nqp_rxpeek $I19, rx955_bstack, rxquantr959_done2513
    inc $I19
    inc $I19
    set rx955_rep, rx955_bstack[$I19]
    nqp_rxcommit rx955_bstack, rxquantr959_done2513
    inc rx955_rep
  rxquantr959_done2513:
    rx955_cur."!cursor_pass"(rx955_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx955_cur)
  rx955_restart2500:
    repr_get_attr_obj rx955_cstack, rx955_cur, rx955_curclass, "$!cstack"
  rx955_fail2501:
    unless rx955_bstack, rx955_done2499
    pop $I19, rx955_bstack
    if_null rx955_cstack, rx955_cstack_done2504
    unless rx955_cstack, rx955_cstack_done2504
    dec $I19
    set $P11, rx955_cstack[$I19]
  rx955_cstack_done2504:
    pop rx955_rep, rx955_bstack
    pop rx955_pos, rx955_bstack
    pop $I19, rx955_bstack
    lt rx955_pos, -1, rx955_done2499
    lt rx955_pos, 0, rx955_fail2501
    eq $I19, 0, rx955_fail2501
    nqp_islist $I20, rx955_cstack
    unless $I20, rx955_jump2502
    elements $I18, rx955_bstack
    le $I18, 0, rx955_cut2503
    dec $I18
    set $I18, rx955_bstack[$I18]
  rx955_cut2503:
    assign rx955_cstack, $I18
  rx955_jump2502:
    jump $I19
  rx955_done2499:
    rx955_cur."!cursor_fail"()
    .return (rx955_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_143_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1209
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_405_1359718901.265' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx961_tgt
    .local int rx961_pos
    .local int rx961_off
    .local int rx961_eos
    .local int rx961_rep
    .local pmc rx961_cur
    .local pmc rx961_curclass
    .local pmc rx961_bstack
    .local pmc rx961_cstack
    (rx961_cur, rx961_tgt, rx961_pos, rx961_curclass, rx961_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx961_cur
    length rx961_eos, rx961_tgt
    eq $I19, 1, rx961_restart2518
    gt rx961_pos, rx961_eos, rx961_fail2519
    repr_get_attr_int $I11, self, rx961_curclass, "$!from"
    ne $I11, -1, rxscan962_done2525
    goto rxscan962_scan2524
  rxscan962_loop2523:
    inc rx961_pos
    gt rx961_pos, rx961_eos, rx961_fail2519
    repr_bind_attr_int rx961_cur, rx961_curclass, "$!from", rx961_pos
  rxscan962_scan2524:
    nqp_rxmark rx961_bstack, rxscan962_loop2523, rx961_pos, 0
  rxscan962_done2525:
    add $I11, rx961_pos, 3
    gt $I11, rx961_eos, rx961_fail2519
    substr $S10, rx961_tgt, rx961_pos, 3
    ne $S10, ucs4:"{*}", rx961_fail2519
    add rx961_pos, 3
    repr_bind_attr_int rx961_cur, rx961_curclass, "$!pos", rx961_pos
    $P11 = rx961_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx961_curclass, "$!pos"
    lt $I11, 0, rx961_fail2519
  alt963_02527:
    nqp_rxmark rx961_bstack, alt963_12531, rx961_pos, 0
    repr_bind_attr_int rx961_cur, rx961_curclass, "$!pos", rx961_pos
    store_lex unicode:"$\x{a2}", rx961_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_405_1359718901.265' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx961_fail2519
    goto alt963_end2526
  alt963_12531:
    repr_bind_attr_int rx961_cur, rx961_curclass, "$!pos", rx961_pos
    $P11 = rx961_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx961_curclass, "$!pos"
    lt $I11, 0, rx961_fail2519
    repr_get_attr_int rx961_pos, $P11, rx961_curclass, "$!pos"
  alt963_end2526:
    rx961_cur."!cursor_pass"(rx961_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx961_cur)
  rx961_restart2518:
    repr_get_attr_obj rx961_cstack, rx961_cur, rx961_curclass, "$!cstack"
  rx961_fail2519:
    unless rx961_bstack, rx961_done2517
    pop $I19, rx961_bstack
    if_null rx961_cstack, rx961_cstack_done2522
    unless rx961_cstack, rx961_cstack_done2522
    dec $I19
    set $P11, rx961_cstack[$I19]
  rx961_cstack_done2522:
    pop rx961_rep, rx961_bstack
    pop rx961_pos, rx961_bstack
    pop $I19, rx961_bstack
    lt rx961_pos, -1, rx961_done2517
    lt rx961_pos, 0, rx961_fail2519
    eq $I19, 0, rx961_fail2519
    nqp_islist $I20, rx961_cstack
    unless $I20, rx961_jump2520
    elements $I18, rx961_bstack
    le $I18, 0, rx961_cut2521
    dec $I18
    set $I18, rx961_bstack[$I18]
  rx961_cut2521:
    assign rx961_cstack, $I18
  rx961_jump2520:
    jump $I19
  rx961_done2517:
    rx961_cur."!cursor_fail"()
    .return (rx961_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1359718901.265") :anon :lex :outer("cuid_143_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1211

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2528
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2529
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback2529:
    unless_null $P5002, vivi_9642530
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_9642530:
    set $P5001, $P5002
  fallback2528:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_144_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1214
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx966_tgt
    .local int rx966_pos
    .local int rx966_off
    .local int rx966_eos
    .local int rx966_rep
    .local pmc rx966_cur
    .local pmc rx966_curclass
    .local pmc rx966_bstack
    .local pmc rx966_cstack
    (rx966_cur, rx966_tgt, rx966_pos, rx966_curclass, rx966_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx966_cur
    length rx966_eos, rx966_tgt
    eq $I19, 1, rx966_restart2535
    gt rx966_pos, rx966_eos, rx966_fail2536
    repr_get_attr_int $I11, self, rx966_curclass, "$!from"
    ne $I11, -1, rxscan967_done2542
    goto rxscan967_scan2541
  rxscan967_loop2540:
    inc rx966_pos
    gt rx966_pos, rx966_eos, rx966_fail2536
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!from", rx966_pos
  rxscan967_scan2541:
    nqp_rxmark rx966_bstack, rxscan967_loop2540, rx966_pos, 0
  rxscan967_done2542:
    add $I11, rx966_pos, 1
    gt $I11, rx966_eos, rx966_fail2536
    substr $S10, rx966_tgt, rx966_pos, 1
    ne $S10, ucs4:"(", rx966_fail2536
    add rx966_pos, 1
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!pos", rx966_pos
    $P11 = rx966_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx966_curclass, "$!pos"
    lt $I11, 0, rx966_fail2536
    nqp_rxmark rx966_bstack, rxsubrule968_pass2543, -1, 0
  rxsubrule968_pass2543:
    rx966_cstack = rx966_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx966_pos, $P11, rx966_curclass, "$!pos"
    add $I11, rx966_pos, 1
    gt $I11, rx966_eos, rx966_fail2536
    substr $S10, rx966_tgt, rx966_pos, 1
    ne $S10, ucs4:")", rx966_fail2536
    add rx966_pos, 1
    rx966_cur."!cursor_pass"(rx966_pos, "args", 'backtrack'=>1)
    .return (rx966_cur)
  rx966_restart2535:
    repr_get_attr_obj rx966_cstack, rx966_cur, rx966_curclass, "$!cstack"
  rx966_fail2536:
    unless rx966_bstack, rx966_done2534
    pop $I19, rx966_bstack
    if_null rx966_cstack, rx966_cstack_done2539
    unless rx966_cstack, rx966_cstack_done2539
    dec $I19
    set $P11, rx966_cstack[$I19]
  rx966_cstack_done2539:
    pop rx966_rep, rx966_bstack
    pop rx966_pos, rx966_bstack
    pop $I19, rx966_bstack
    lt rx966_pos, -1, rx966_done2534
    lt rx966_pos, 0, rx966_fail2536
    eq $I19, 0, rx966_fail2536
    nqp_islist $I20, rx966_cstack
    unless $I20, rx966_jump2537
    elements $I18, rx966_bstack
    le $I18, 0, rx966_cut2538
    dec $I18
    set $I18, rx966_bstack[$I18]
  rx966_cut2538:
    assign rx966_cstack, $I18
  rx966_jump2537:
    jump $I19
  rx966_done2534:
    rx966_cur."!cursor_fail"()
    .return (rx966_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_145_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1218
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx969_tgt
    .local int rx969_pos
    .local int rx969_off
    .local int rx969_eos
    .local int rx969_rep
    .local pmc rx969_cur
    .local pmc rx969_curclass
    .local pmc rx969_bstack
    .local pmc rx969_cstack
    (rx969_cur, rx969_tgt, rx969_pos, rx969_curclass, rx969_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx969_cur
    length rx969_eos, rx969_tgt
    eq $I19, 1, rx969_restart2546
    gt rx969_pos, rx969_eos, rx969_fail2547
    repr_get_attr_int $I11, self, rx969_curclass, "$!from"
    ne $I11, -1, rxscan970_done2553
    goto rxscan970_scan2552
  rxscan970_loop2551:
    inc rx969_pos
    gt rx969_pos, rx969_eos, rx969_fail2547
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!from", rx969_pos
  rxscan970_scan2552:
    nqp_rxmark rx969_bstack, rxscan970_loop2551, rx969_pos, 0
  rxscan970_done2553:
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!pos", rx969_pos
    $P11 = rx969_cur."ws"()
    repr_get_attr_int $I11, $P11, rx969_curclass, "$!pos"
    lt $I11, 0, rx969_fail2547
    repr_get_attr_int rx969_pos, $P11, rx969_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt972_02556
    nqp_push_label $P11, alt972_12558
    nqp_rxmark rx969_bstack, alt972_end2555, -1, 0
    rx969_cur."!alt"(rx969_pos, "alt_nfa__36_1359718903.774", $P11)
    goto rx969_fail2547
  alt972_02556:
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!pos", rx969_pos
    $P11 = rx969_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx969_curclass, "$!pos"
    lt $I11, 0, rx969_fail2547
    nqp_rxmark rx969_bstack, rxsubrule973_pass2557, -1, 0
  rxsubrule973_pass2557:
    rx969_cstack = rx969_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx969_pos, $P11, rx969_curclass, "$!pos"
    goto alt972_end2555
  alt972_12558:
    goto alt972_end2555
  alt972_end2555:
    nqp_rxcommit rx969_bstack, alt972_end2555
    rx969_cur."!cursor_pass"(rx969_pos, "arglist", 'backtrack'=>1)
    .return (rx969_cur)
  rx969_restart2546:
    repr_get_attr_obj rx969_cstack, rx969_cur, rx969_curclass, "$!cstack"
  rx969_fail2547:
    unless rx969_bstack, rx969_done2545
    pop $I19, rx969_bstack
    if_null rx969_cstack, rx969_cstack_done2550
    unless rx969_cstack, rx969_cstack_done2550
    dec $I19
    set $P11, rx969_cstack[$I19]
  rx969_cstack_done2550:
    pop rx969_rep, rx969_bstack
    pop rx969_pos, rx969_bstack
    pop $I19, rx969_bstack
    lt rx969_pos, -1, rx969_done2545
    lt rx969_pos, 0, rx969_fail2547
    eq $I19, 0, rx969_fail2547
    nqp_islist $I20, rx969_cstack
    unless $I20, rx969_jump2548
    elements $I18, rx969_bstack
    le $I18, 0, rx969_cut2549
    dec $I18
    set $I18, rx969_bstack[$I18]
  rx969_cut2549:
    assign rx969_cstack, $I18
  rx969_jump2548:
    jump $I19
  rx969_done2545:
    rx969_cur."!cursor_fail"()
    .return (rx969_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_146_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx975_tgt
    .local int rx975_pos
    .local int rx975_off
    .local int rx975_eos
    .local int rx975_rep
    .local pmc rx975_cur
    .local pmc rx975_curclass
    .local pmc rx975_bstack
    .local pmc rx975_cstack
    (rx975_cur, rx975_tgt, rx975_pos, rx975_curclass, rx975_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx975_cur
    length rx975_eos, rx975_tgt
    eq $I19, 1, rx975_restart2562
    gt rx975_pos, rx975_eos, rx975_fail2563
    repr_get_attr_int $I11, self, rx975_curclass, "$!from"
    ne $I11, -1, rxscan976_done2569
    goto rxscan976_scan2568
  rxscan976_loop2567:
    inc rx975_pos
    gt rx975_pos, rx975_eos, rx975_fail2563
    repr_bind_attr_int rx975_cur, rx975_curclass, "$!from", rx975_pos
  rxscan976_scan2568:
    nqp_rxmark rx975_bstack, rxscan976_loop2567, rx975_pos, 0
  rxscan976_done2569:
    repr_bind_attr_int rx975_cur, rx975_curclass, "$!pos", rx975_pos
    $P11 = rx975_cur."value"()
    repr_get_attr_int $I11, $P11, rx975_curclass, "$!pos"
    lt $I11, 0, rx975_fail2563
    nqp_rxmark rx975_bstack, rxsubrule977_pass2570, -1, 0
  rxsubrule977_pass2570:
    rx975_cstack = rx975_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx975_pos, $P11, rx975_curclass, "$!pos"
    rx975_cur."!cursor_pass"(rx975_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx975_cur)
  rx975_restart2562:
    repr_get_attr_obj rx975_cstack, rx975_cur, rx975_curclass, "$!cstack"
  rx975_fail2563:
    unless rx975_bstack, rx975_done2561
    pop $I19, rx975_bstack
    if_null rx975_cstack, rx975_cstack_done2566
    unless rx975_cstack, rx975_cstack_done2566
    dec $I19
    set $P11, rx975_cstack[$I19]
  rx975_cstack_done2566:
    pop rx975_rep, rx975_bstack
    pop rx975_pos, rx975_bstack
    pop $I19, rx975_bstack
    lt rx975_pos, -1, rx975_done2561
    lt rx975_pos, 0, rx975_fail2563
    eq $I19, 0, rx975_fail2563
    nqp_islist $I20, rx975_cstack
    unless $I20, rx975_jump2564
    elements $I18, rx975_bstack
    le $I18, 0, rx975_cut2565
    dec $I18
    set $I18, rx975_bstack[$I18]
  rx975_cut2565:
    assign rx975_cstack, $I18
  rx975_jump2564:
    jump $I19
  rx975_done2561:
    rx975_cur."!cursor_fail"()
    .return (rx975_cur) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_147_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx978_tgt
    .local int rx978_pos
    .local int rx978_off
    .local int rx978_eos
    .local int rx978_rep
    .local pmc rx978_cur
    .local pmc rx978_curclass
    .local pmc rx978_bstack
    .local pmc rx978_cstack
    (rx978_cur, rx978_tgt, rx978_pos, rx978_curclass, rx978_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx978_cur
    length rx978_eos, rx978_tgt
    eq $I19, 1, rx978_restart2573
    gt rx978_pos, rx978_eos, rx978_fail2574
    repr_get_attr_int $I11, self, rx978_curclass, "$!from"
    ne $I11, -1, rxscan979_done2580
    goto rxscan979_scan2579
  rxscan979_loop2578:
    inc rx978_pos
    gt rx978_pos, rx978_eos, rx978_fail2574
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!from", rx978_pos
  rxscan979_scan2579:
    nqp_rxmark rx978_bstack, rxscan979_loop2578, rx978_pos, 0
  rxscan979_done2580:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt980_02582
    nqp_push_label $P11, alt980_12584
    nqp_rxmark rx978_bstack, alt980_end2581, -1, 0
    rx978_cur."!alt"(rx978_pos, "alt_nfa__37_1359718903.783", $P11)
    goto rx978_fail2574
  alt980_02582:
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!pos", rx978_pos
    $P11 = rx978_cur."quote"()
    repr_get_attr_int $I11, $P11, rx978_curclass, "$!pos"
    lt $I11, 0, rx978_fail2574
    nqp_rxmark rx978_bstack, rxsubrule981_pass2583, -1, 0
  rxsubrule981_pass2583:
    rx978_cstack = rx978_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx978_pos, $P11, rx978_curclass, "$!pos"
    goto alt980_end2581
  alt980_12584:
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!pos", rx978_pos
    $P11 = rx978_cur."number"()
    repr_get_attr_int $I11, $P11, rx978_curclass, "$!pos"
    lt $I11, 0, rx978_fail2574
    nqp_rxmark rx978_bstack, rxsubrule982_pass2585, -1, 0
  rxsubrule982_pass2585:
    rx978_cstack = rx978_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx978_pos, $P11, rx978_curclass, "$!pos"
    goto alt980_end2581
  alt980_end2581:
    rx978_cur."!cursor_pass"(rx978_pos, "value", 'backtrack'=>1)
    .return (rx978_cur)
  rx978_restart2573:
    repr_get_attr_obj rx978_cstack, rx978_cur, rx978_curclass, "$!cstack"
  rx978_fail2574:
    unless rx978_bstack, rx978_done2572
    pop $I19, rx978_bstack
    if_null rx978_cstack, rx978_cstack_done2577
    unless rx978_cstack, rx978_cstack_done2577
    dec $I19
    set $P11, rx978_cstack[$I19]
  rx978_cstack_done2577:
    pop rx978_rep, rx978_bstack
    pop rx978_pos, rx978_bstack
    pop $I19, rx978_bstack
    lt rx978_pos, -1, rx978_done2572
    lt rx978_pos, 0, rx978_fail2574
    eq $I19, 0, rx978_fail2574
    nqp_islist $I20, rx978_cstack
    unless $I20, rx978_jump2575
    elements $I18, rx978_bstack
    le $I18, 0, rx978_cut2576
    dec $I18
    set $I18, rx978_bstack[$I18]
  rx978_cut2576:
    assign rx978_cstack, $I18
  rx978_jump2575:
    jump $I19
  rx978_done2572:
    rx978_cur."!cursor_fail"()
    .return (rx978_cur) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_148_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx983_tgt
    .local int rx983_pos
    .local int rx983_off
    .local int rx983_eos
    .local int rx983_rep
    .local pmc rx983_cur
    .local pmc rx983_curclass
    .local pmc rx983_bstack
    .local pmc rx983_cstack
    (rx983_cur, rx983_tgt, rx983_pos, rx983_curclass, rx983_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx983_cur
    length rx983_eos, rx983_tgt
    eq $I19, 1, rx983_restart2588
    gt rx983_pos, rx983_eos, rx983_fail2589
    repr_get_attr_int $I11, self, rx983_curclass, "$!from"
    ne $I11, -1, rxscan984_done2595
    goto rxscan984_scan2594
  rxscan984_loop2593:
    inc rx983_pos
    gt rx983_pos, rx983_eos, rx983_fail2589
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!from", rx983_pos
  rxscan984_scan2594:
    nqp_rxmark rx983_bstack, rxscan984_loop2593, rx983_pos, 0
  rxscan984_done2595:
    nqp_rxmark rx983_bstack, rxcap985_fail2597, rx983_pos, 0
    nqp_rxmark rx983_bstack, rxquantr986_done2599, rx983_pos, 0
  rxquantr986_loop2598:
  alt987_02601:
    nqp_rxmark rx983_bstack, alt987_12602, rx983_pos, 0
    add $I11, rx983_pos, 1
    gt $I11, rx983_eos, rx983_fail2589
    substr $S10, rx983_tgt, rx983_pos, 1
    ne $S10, ucs4:"-", rx983_fail2589
    add rx983_pos, 1
    goto alt987_end2600
  alt987_12602:
    ge rx983_pos, rx983_eos, rx983_fail2589
    substr $S11, rx983_tgt, rx983_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx983_fail2589
    inc rx983_pos
  alt987_end2600:
    nqp_rxpeek $I19, rx983_bstack, rxquantr986_done2599
    inc $I19
    inc $I19
    set rx983_rep, rx983_bstack[$I19]
    nqp_rxcommit rx983_bstack, rxquantr986_done2599
    inc rx983_rep
  rxquantr986_done2599:
    nqp_rxpeek $I19, rx983_bstack, rxcap985_fail2597
    inc $I19
    set $I11, rx983_bstack[$I19]
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx983_pos)
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "sign")
    goto rxcap985_done2596
  rxcap985_fail2597:
    goto rx983_fail2589
  rxcap985_done2596:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt988_02604
    nqp_push_label $P11, alt988_12606
    nqp_rxmark rx983_bstack, alt988_end2603, -1, 0
    rx983_cur."!alt"(rx983_pos, "alt_nfa__38_1359718903.793", $P11)
    goto rx983_fail2589
  alt988_02604:
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx983_curclass, "$!pos"
    lt $I11, 0, rx983_fail2589
    nqp_rxmark rx983_bstack, rxsubrule989_pass2605, -1, 0
  rxsubrule989_pass2605:
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx983_pos, $P11, rx983_curclass, "$!pos"
    goto alt988_end2603
  alt988_12606:
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."integer"()
    repr_get_attr_int $I11, $P11, rx983_curclass, "$!pos"
    lt $I11, 0, rx983_fail2589
    nqp_rxmark rx983_bstack, rxsubrule990_pass2607, -1, 0
  rxsubrule990_pass2607:
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx983_pos, $P11, rx983_curclass, "$!pos"
    goto alt988_end2603
  alt988_end2603:
    nqp_rxcommit rx983_bstack, alt988_end2603
    rx983_cur."!cursor_pass"(rx983_pos, "number", 'backtrack'=>1)
    .return (rx983_cur)
  rx983_restart2588:
    repr_get_attr_obj rx983_cstack, rx983_cur, rx983_curclass, "$!cstack"
  rx983_fail2589:
    unless rx983_bstack, rx983_done2587
    pop $I19, rx983_bstack
    if_null rx983_cstack, rx983_cstack_done2592
    unless rx983_cstack, rx983_cstack_done2592
    dec $I19
    set $P11, rx983_cstack[$I19]
  rx983_cstack_done2592:
    pop rx983_rep, rx983_bstack
    pop rx983_pos, rx983_bstack
    pop $I19, rx983_bstack
    lt rx983_pos, -1, rx983_done2587
    lt rx983_pos, 0, rx983_fail2589
    eq $I19, 0, rx983_fail2589
    nqp_islist $I20, rx983_cstack
    unless $I20, rx983_jump2590
    elements $I18, rx983_bstack
    le $I18, 0, rx983_cut2591
    dec $I18
    set $I18, rx983_bstack[$I18]
  rx983_cut2591:
    assign rx983_cstack, $I18
  rx983_jump2590:
    jump $I19
  rx983_done2587:
    rx983_cur."!cursor_fail"()
    .return (rx983_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_149_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_150_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx991_tgt
    .local int rx991_pos
    .local int rx991_off
    .local int rx991_eos
    .local int rx991_rep
    .local pmc rx991_cur
    .local pmc rx991_curclass
    .local pmc rx991_bstack
    .local pmc rx991_cstack
    (rx991_cur, rx991_tgt, rx991_pos, rx991_curclass, rx991_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx991_cur
    length rx991_eos, rx991_tgt
    eq $I19, 1, rx991_restart2610
    gt rx991_pos, rx991_eos, rx991_fail2611
    repr_get_attr_int $I11, self, rx991_curclass, "$!from"
    ne $I11, -1, rxscan992_done2617
    goto rxscan992_scan2616
  rxscan992_loop2615:
    inc rx991_pos
    gt rx991_pos, rx991_eos, rx991_fail2611
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!from", rx991_pos
  rxscan992_scan2616:
    nqp_rxmark rx991_bstack, rxscan992_loop2615, rx991_pos, 0
  rxscan992_done2617:
    ge rx991_pos, rx991_eos, rx991_fail2611
    substr $S11, rx991_tgt, rx991_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx991_fail2611
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail2611
    nqp_rxmark rx991_bstack, rxsubrule993_pass2618, -1, 0
  rxsubrule993_pass2618:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    rx991_cur."!cursor_pass"(rx991_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx991_cur)
  rx991_restart2610:
    repr_get_attr_obj rx991_cstack, rx991_cur, rx991_curclass, "$!cstack"
  rx991_fail2611:
    unless rx991_bstack, rx991_done2609
    pop $I19, rx991_bstack
    if_null rx991_cstack, rx991_cstack_done2614
    unless rx991_cstack, rx991_cstack_done2614
    dec $I19
    set $P11, rx991_cstack[$I19]
  rx991_cstack_done2614:
    pop rx991_rep, rx991_bstack
    pop rx991_pos, rx991_bstack
    pop $I19, rx991_bstack
    lt rx991_pos, -1, rx991_done2609
    lt rx991_pos, 0, rx991_fail2611
    eq $I19, 0, rx991_fail2611
    nqp_islist $I20, rx991_cstack
    unless $I20, rx991_jump2612
    elements $I18, rx991_bstack
    le $I18, 0, rx991_cut2613
    dec $I18
    set $I18, rx991_bstack[$I18]
  rx991_cut2613:
    assign rx991_cstack, $I18
  rx991_jump2612:
    jump $I19
  rx991_done2609:
    rx991_cur."!cursor_fail"()
    .return (rx991_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_151_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx994_tgt
    .local int rx994_pos
    .local int rx994_off
    .local int rx994_eos
    .local int rx994_rep
    .local pmc rx994_cur
    .local pmc rx994_curclass
    .local pmc rx994_bstack
    .local pmc rx994_cstack
    (rx994_cur, rx994_tgt, rx994_pos, rx994_curclass, rx994_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx994_cur
    length rx994_eos, rx994_tgt
    eq $I19, 1, rx994_restart2621
    gt rx994_pos, rx994_eos, rx994_fail2622
    repr_get_attr_int $I11, self, rx994_curclass, "$!from"
    ne $I11, -1, rxscan995_done2628
    goto rxscan995_scan2627
  rxscan995_loop2626:
    inc rx994_pos
    gt rx994_pos, rx994_eos, rx994_fail2622
    repr_bind_attr_int rx994_cur, rx994_curclass, "$!from", rx994_pos
  rxscan995_scan2627:
    nqp_rxmark rx994_bstack, rxscan995_loop2626, rx994_pos, 0
  rxscan995_done2628:
    ge rx994_pos, rx994_eos, rx994_fail2622
    substr $S11, rx994_tgt, rx994_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx994_fail2622
    repr_bind_attr_int rx994_cur, rx994_curclass, "$!pos", rx994_pos
    $P11 = rx994_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx994_curclass, "$!pos"
    lt $I11, 0, rx994_fail2622
    nqp_rxmark rx994_bstack, rxsubrule996_pass2629, -1, 0
  rxsubrule996_pass2629:
    rx994_cstack = rx994_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx994_pos, $P11, rx994_curclass, "$!pos"
    rx994_cur."!cursor_pass"(rx994_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx994_cur)
  rx994_restart2621:
    repr_get_attr_obj rx994_cstack, rx994_cur, rx994_curclass, "$!cstack"
  rx994_fail2622:
    unless rx994_bstack, rx994_done2620
    pop $I19, rx994_bstack
    if_null rx994_cstack, rx994_cstack_done2625
    unless rx994_cstack, rx994_cstack_done2625
    dec $I19
    set $P11, rx994_cstack[$I19]
  rx994_cstack_done2625:
    pop rx994_rep, rx994_bstack
    pop rx994_pos, rx994_bstack
    pop $I19, rx994_bstack
    lt rx994_pos, -1, rx994_done2620
    lt rx994_pos, 0, rx994_fail2622
    eq $I19, 0, rx994_fail2622
    nqp_islist $I20, rx994_cstack
    unless $I20, rx994_jump2623
    elements $I18, rx994_bstack
    le $I18, 0, rx994_cut2624
    dec $I18
    set $I18, rx994_bstack[$I18]
  rx994_cut2624:
    assign rx994_cstack, $I18
  rx994_jump2623:
    jump $I19
  rx994_done2620:
    rx994_cur."!cursor_fail"()
    .return (rx994_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_152_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx997_tgt
    .local int rx997_pos
    .local int rx997_off
    .local int rx997_eos
    .local int rx997_rep
    .local pmc rx997_cur
    .local pmc rx997_curclass
    .local pmc rx997_bstack
    .local pmc rx997_cstack
    (rx997_cur, rx997_tgt, rx997_pos, rx997_curclass, rx997_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx997_cur
    length rx997_eos, rx997_tgt
    eq $I19, 1, rx997_restart2632
    gt rx997_pos, rx997_eos, rx997_fail2633
    repr_get_attr_int $I11, self, rx997_curclass, "$!from"
    ne $I11, -1, rxscan998_done2639
    goto rxscan998_scan2638
  rxscan998_loop2637:
    inc rx997_pos
    gt rx997_pos, rx997_eos, rx997_fail2633
    repr_bind_attr_int rx997_cur, rx997_curclass, "$!from", rx997_pos
  rxscan998_scan2638:
    nqp_rxmark rx997_bstack, rxscan998_loop2637, rx997_pos, 0
  rxscan998_done2639:
    nqp_rxmark rx997_bstack, rxcap999_fail2641, rx997_pos, 0
    add $I11, rx997_pos, 1
    gt $I11, rx997_eos, rx997_fail2633
    substr $S10, rx997_tgt, rx997_pos, 1
    ne $S10, ucs4:"q", rx997_fail2633
    add rx997_pos, 1
    nqp_rxpeek $I19, rx997_bstack, rxcap999_fail2641
    inc $I19
    set $I11, rx997_bstack[$I19]
    repr_bind_attr_int rx997_cur, rx997_curclass, "$!pos", rx997_pos
    $P11 = rx997_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx997_pos)
    rx997_cstack = rx997_cur."!cursor_capture"($P11, "sym")
    goto rxcap999_done2640
  rxcap999_fail2641:
    goto rx997_fail2633
  rxcap999_done2640:
    le rx997_pos, 0, rx997_fail2633
    is_cclass $I11, .CCLASS_WORD, rx997_tgt, rx997_pos
    if $I11, rx997_fail2633
    sub $I11, rx997_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx997_tgt, $I11
    unless $I11, rx997_fail2633
    ge rx997_pos, rx997_eos, rx997_fail2633
    substr $S11, rx997_tgt, rx997_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx997_fail2633
    repr_bind_attr_int rx997_cur, rx997_curclass, "$!pos", rx997_pos
    $P11 = rx997_cur."ws"()
    repr_get_attr_int $I11, $P11, rx997_curclass, "$!pos"
    lt $I11, 0, rx997_fail2633
    repr_get_attr_int rx997_pos, $P11, rx997_curclass, "$!pos"
    repr_bind_attr_int rx997_cur, rx997_curclass, "$!pos", rx997_pos
    $P11 = rx997_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx997_curclass, "$!pos"
    lt $I11, 0, rx997_fail2633
    nqp_rxmark rx997_bstack, rxsubrule1002_pass2644, -1, 0
  rxsubrule1002_pass2644:
    rx997_cstack = rx997_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx997_pos, $P11, rx997_curclass, "$!pos"
    rx997_cur."!cursor_pass"(rx997_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx997_cur)
  rx997_restart2632:
    repr_get_attr_obj rx997_cstack, rx997_cur, rx997_curclass, "$!cstack"
  rx997_fail2633:
    unless rx997_bstack, rx997_done2631
    pop $I19, rx997_bstack
    if_null rx997_cstack, rx997_cstack_done2636
    unless rx997_cstack, rx997_cstack_done2636
    dec $I19
    set $P11, rx997_cstack[$I19]
  rx997_cstack_done2636:
    pop rx997_rep, rx997_bstack
    pop rx997_pos, rx997_bstack
    pop $I19, rx997_bstack
    lt rx997_pos, -1, rx997_done2631
    lt rx997_pos, 0, rx997_fail2633
    eq $I19, 0, rx997_fail2633
    nqp_islist $I20, rx997_cstack
    unless $I20, rx997_jump2634
    elements $I18, rx997_bstack
    le $I18, 0, rx997_cut2635
    dec $I18
    set $I18, rx997_bstack[$I18]
  rx997_cut2635:
    assign rx997_cstack, $I18
  rx997_jump2634:
    jump $I19
  rx997_done2631:
    rx997_cur."!cursor_fail"()
    .return (rx997_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_153_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1003_tgt
    .local int rx1003_pos
    .local int rx1003_off
    .local int rx1003_eos
    .local int rx1003_rep
    .local pmc rx1003_cur
    .local pmc rx1003_curclass
    .local pmc rx1003_bstack
    .local pmc rx1003_cstack
    (rx1003_cur, rx1003_tgt, rx1003_pos, rx1003_curclass, rx1003_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1003_cur
    length rx1003_eos, rx1003_tgt
    eq $I19, 1, rx1003_restart2647
    gt rx1003_pos, rx1003_eos, rx1003_fail2648
    repr_get_attr_int $I11, self, rx1003_curclass, "$!from"
    ne $I11, -1, rxscan1004_done2654
    goto rxscan1004_scan2653
  rxscan1004_loop2652:
    inc rx1003_pos
    gt rx1003_pos, rx1003_eos, rx1003_fail2648
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!from", rx1003_pos
  rxscan1004_scan2653:
    nqp_rxmark rx1003_bstack, rxscan1004_loop2652, rx1003_pos, 0
  rxscan1004_done2654:
    nqp_rxmark rx1003_bstack, rxcap1005_fail2656, rx1003_pos, 0
    add $I11, rx1003_pos, 2
    gt $I11, rx1003_eos, rx1003_fail2648
    substr $S10, rx1003_tgt, rx1003_pos, 2
    ne $S10, ucs4:"qq", rx1003_fail2648
    add rx1003_pos, 2
    nqp_rxpeek $I19, rx1003_bstack, rxcap1005_fail2656
    inc $I19
    set $I11, rx1003_bstack[$I19]
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1003_pos)
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "sym")
    goto rxcap1005_done2655
  rxcap1005_fail2656:
    goto rx1003_fail2648
  rxcap1005_done2655:
    le rx1003_pos, 0, rx1003_fail2648
    is_cclass $I11, .CCLASS_WORD, rx1003_tgt, rx1003_pos
    if $I11, rx1003_fail2648
    sub $I11, rx1003_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1003_tgt, $I11
    unless $I11, rx1003_fail2648
    ge rx1003_pos, rx1003_eos, rx1003_fail2648
    substr $S11, rx1003_tgt, rx1003_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1003_fail2648
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2648
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2648
    nqp_rxmark rx1003_bstack, rxsubrule1008_pass2659, -1, 0
  rxsubrule1008_pass2659:
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    rx1003_cur."!cursor_pass"(rx1003_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx1003_cur)
  rx1003_restart2647:
    repr_get_attr_obj rx1003_cstack, rx1003_cur, rx1003_curclass, "$!cstack"
  rx1003_fail2648:
    unless rx1003_bstack, rx1003_done2646
    pop $I19, rx1003_bstack
    if_null rx1003_cstack, rx1003_cstack_done2651
    unless rx1003_cstack, rx1003_cstack_done2651
    dec $I19
    set $P11, rx1003_cstack[$I19]
  rx1003_cstack_done2651:
    pop rx1003_rep, rx1003_bstack
    pop rx1003_pos, rx1003_bstack
    pop $I19, rx1003_bstack
    lt rx1003_pos, -1, rx1003_done2646
    lt rx1003_pos, 0, rx1003_fail2648
    eq $I19, 0, rx1003_fail2648
    nqp_islist $I20, rx1003_cstack
    unless $I20, rx1003_jump2649
    elements $I18, rx1003_bstack
    le $I18, 0, rx1003_cut2650
    dec $I18
    set $I18, rx1003_bstack[$I18]
  rx1003_cut2650:
    assign rx1003_cstack, $I18
  rx1003_jump2649:
    jump $I19
  rx1003_done2646:
    rx1003_cur."!cursor_fail"()
    .return (rx1003_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_154_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1009_tgt
    .local int rx1009_pos
    .local int rx1009_off
    .local int rx1009_eos
    .local int rx1009_rep
    .local pmc rx1009_cur
    .local pmc rx1009_curclass
    .local pmc rx1009_bstack
    .local pmc rx1009_cstack
    (rx1009_cur, rx1009_tgt, rx1009_pos, rx1009_curclass, rx1009_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1009_cur
    length rx1009_eos, rx1009_tgt
    eq $I19, 1, rx1009_restart2662
    gt rx1009_pos, rx1009_eos, rx1009_fail2663
    repr_get_attr_int $I11, self, rx1009_curclass, "$!from"
    ne $I11, -1, rxscan1010_done2669
    goto rxscan1010_scan2668
  rxscan1010_loop2667:
    inc rx1009_pos
    gt rx1009_pos, rx1009_eos, rx1009_fail2663
    repr_bind_attr_int rx1009_cur, rx1009_curclass, "$!from", rx1009_pos
  rxscan1010_scan2668:
    nqp_rxmark rx1009_bstack, rxscan1010_loop2667, rx1009_pos, 0
  rxscan1010_done2669:
    nqp_rxmark rx1009_bstack, rxcap1011_fail2671, rx1009_pos, 0
    add $I11, rx1009_pos, 1
    gt $I11, rx1009_eos, rx1009_fail2663
    substr $S10, rx1009_tgt, rx1009_pos, 1
    ne $S10, ucs4:"Q", rx1009_fail2663
    add rx1009_pos, 1
    nqp_rxpeek $I19, rx1009_bstack, rxcap1011_fail2671
    inc $I19
    set $I11, rx1009_bstack[$I19]
    repr_bind_attr_int rx1009_cur, rx1009_curclass, "$!pos", rx1009_pos
    $P11 = rx1009_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1009_pos)
    rx1009_cstack = rx1009_cur."!cursor_capture"($P11, "sym")
    goto rxcap1011_done2670
  rxcap1011_fail2671:
    goto rx1009_fail2663
  rxcap1011_done2670:
    le rx1009_pos, 0, rx1009_fail2663
    is_cclass $I11, .CCLASS_WORD, rx1009_tgt, rx1009_pos
    if $I11, rx1009_fail2663
    sub $I11, rx1009_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1009_tgt, $I11
    unless $I11, rx1009_fail2663
    ge rx1009_pos, rx1009_eos, rx1009_fail2663
    substr $S11, rx1009_tgt, rx1009_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1009_fail2663
    repr_bind_attr_int rx1009_cur, rx1009_curclass, "$!pos", rx1009_pos
    $P11 = rx1009_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1009_curclass, "$!pos"
    lt $I11, 0, rx1009_fail2663
    repr_get_attr_int rx1009_pos, $P11, rx1009_curclass, "$!pos"
    repr_bind_attr_int rx1009_cur, rx1009_curclass, "$!pos", rx1009_pos
    $P11 = rx1009_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1009_curclass, "$!pos"
    lt $I11, 0, rx1009_fail2663
    nqp_rxmark rx1009_bstack, rxsubrule1014_pass2674, -1, 0
  rxsubrule1014_pass2674:
    rx1009_cstack = rx1009_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1009_pos, $P11, rx1009_curclass, "$!pos"
    rx1009_cur."!cursor_pass"(rx1009_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx1009_cur)
  rx1009_restart2662:
    repr_get_attr_obj rx1009_cstack, rx1009_cur, rx1009_curclass, "$!cstack"
  rx1009_fail2663:
    unless rx1009_bstack, rx1009_done2661
    pop $I19, rx1009_bstack
    if_null rx1009_cstack, rx1009_cstack_done2666
    unless rx1009_cstack, rx1009_cstack_done2666
    dec $I19
    set $P11, rx1009_cstack[$I19]
  rx1009_cstack_done2666:
    pop rx1009_rep, rx1009_bstack
    pop rx1009_pos, rx1009_bstack
    pop $I19, rx1009_bstack
    lt rx1009_pos, -1, rx1009_done2661
    lt rx1009_pos, 0, rx1009_fail2663
    eq $I19, 0, rx1009_fail2663
    nqp_islist $I20, rx1009_cstack
    unless $I20, rx1009_jump2664
    elements $I18, rx1009_bstack
    le $I18, 0, rx1009_cut2665
    dec $I18
    set $I18, rx1009_bstack[$I18]
  rx1009_cut2665:
    assign rx1009_cstack, $I18
  rx1009_jump2664:
    jump $I19
  rx1009_done2661:
    rx1009_cur."!cursor_fail"()
    .return (rx1009_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_155_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1015_tgt
    .local int rx1015_pos
    .local int rx1015_off
    .local int rx1015_eos
    .local int rx1015_rep
    .local pmc rx1015_cur
    .local pmc rx1015_curclass
    .local pmc rx1015_bstack
    .local pmc rx1015_cstack
    (rx1015_cur, rx1015_tgt, rx1015_pos, rx1015_curclass, rx1015_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1015_cur
    length rx1015_eos, rx1015_tgt
    eq $I19, 1, rx1015_restart2677
    gt rx1015_pos, rx1015_eos, rx1015_fail2678
    repr_get_attr_int $I11, self, rx1015_curclass, "$!from"
    ne $I11, -1, rxscan1016_done2684
    goto rxscan1016_scan2683
  rxscan1016_loop2682:
    inc rx1015_pos
    gt rx1015_pos, rx1015_eos, rx1015_fail2678
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!from", rx1015_pos
  rxscan1016_scan2683:
    nqp_rxmark rx1015_bstack, rxscan1016_loop2682, rx1015_pos, 0
  rxscan1016_done2684:
    nqp_rxmark rx1015_bstack, rxcap1017_fail2686, rx1015_pos, 0
    add $I11, rx1015_pos, 5
    gt $I11, rx1015_eos, rx1015_fail2678
    substr $S10, rx1015_tgt, rx1015_pos, 5
    ne $S10, ucs4:"Q:PIR", rx1015_fail2678
    add rx1015_pos, 5
    nqp_rxpeek $I19, rx1015_bstack, rxcap1017_fail2686
    inc $I19
    set $I11, rx1015_bstack[$I19]
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!pos", rx1015_pos
    $P11 = rx1015_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1015_pos)
    rx1015_cstack = rx1015_cur."!cursor_capture"($P11, "sym")
    goto rxcap1017_done2685
  rxcap1017_fail2686:
    goto rx1015_fail2678
  rxcap1017_done2685:
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!pos", rx1015_pos
    $P11 = rx1015_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1015_curclass, "$!pos"
    lt $I11, 0, rx1015_fail2678
    repr_get_attr_int rx1015_pos, $P11, rx1015_curclass, "$!pos"
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!pos", rx1015_pos
    $P11 = rx1015_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1015_curclass, "$!pos"
    lt $I11, 0, rx1015_fail2678
    nqp_rxmark rx1015_bstack, rxsubrule1019_pass2688, -1, 0
  rxsubrule1019_pass2688:
    rx1015_cstack = rx1015_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1015_pos, $P11, rx1015_curclass, "$!pos"
    rx1015_cur."!cursor_pass"(rx1015_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx1015_cur)
  rx1015_restart2677:
    repr_get_attr_obj rx1015_cstack, rx1015_cur, rx1015_curclass, "$!cstack"
  rx1015_fail2678:
    unless rx1015_bstack, rx1015_done2676
    pop $I19, rx1015_bstack
    if_null rx1015_cstack, rx1015_cstack_done2681
    unless rx1015_cstack, rx1015_cstack_done2681
    dec $I19
    set $P11, rx1015_cstack[$I19]
  rx1015_cstack_done2681:
    pop rx1015_rep, rx1015_bstack
    pop rx1015_pos, rx1015_bstack
    pop $I19, rx1015_bstack
    lt rx1015_pos, -1, rx1015_done2676
    lt rx1015_pos, 0, rx1015_fail2678
    eq $I19, 0, rx1015_fail2678
    nqp_islist $I20, rx1015_cstack
    unless $I20, rx1015_jump2679
    elements $I18, rx1015_bstack
    le $I18, 0, rx1015_cut2680
    dec $I18
    set $I18, rx1015_bstack[$I18]
  rx1015_cut2680:
    assign rx1015_cstack, $I18
  rx1015_jump2679:
    jump $I19
  rx1015_done2676:
    rx1015_cur."!cursor_fail"()
    .return (rx1015_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_156_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx1020_tgt
    .local int rx1020_pos
    .local int rx1020_off
    .local int rx1020_eos
    .local int rx1020_rep
    .local pmc rx1020_cur
    .local pmc rx1020_curclass
    .local pmc rx1020_bstack
    .local pmc rx1020_cstack
    (rx1020_cur, rx1020_tgt, rx1020_pos, rx1020_curclass, rx1020_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1020_cur
    length rx1020_eos, rx1020_tgt
    eq $I19, 1, rx1020_restart2691
    gt rx1020_pos, rx1020_eos, rx1020_fail2692
    repr_get_attr_int $I11, self, rx1020_curclass, "$!from"
    ne $I11, -1, rxscan1021_done2698
    goto rxscan1021_scan2697
  rxscan1021_loop2696:
    inc rx1020_pos
    gt rx1020_pos, rx1020_eos, rx1020_fail2692
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!from", rx1020_pos
  rxscan1021_scan2697:
    nqp_rxmark rx1020_bstack, rxscan1021_loop2696, rx1020_pos, 0
  rxscan1021_done2698:
    add $I11, rx1020_pos, 1
    gt $I11, rx1020_eos, rx1020_fail2692
    substr $S10, rx1020_tgt, rx1020_pos, 1
    ne $S10, ucs4:"/", rx1020_fail2692
    add rx1020_pos, 1
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2692
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    store_lex unicode:"$\x{a2}", rx1020_cur
    unless_null $P101, fallback2700
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2701
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2701:
    unless_null $P5002, vivi_10232702
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_10232702:
    set $P101, $P5002
  fallback2700:
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2692
    nqp_rxmark rx1020_bstack, rxsubrule1024_pass2703, -1, 0
  rxsubrule1024_pass2703:
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    add $I11, rx1020_pos, 1
    gt $I11, rx1020_eos, rx1020_fail2692
    substr $S10, rx1020_tgt, rx1020_pos, 1
    ne $S10, ucs4:"/", rx1020_fail2692
    add rx1020_pos, 1
    rx1020_cur."!cursor_pass"(rx1020_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx1020_cur)
  rx1020_restart2691:
    repr_get_attr_obj rx1020_cstack, rx1020_cur, rx1020_curclass, "$!cstack"
  rx1020_fail2692:
    unless rx1020_bstack, rx1020_done2690
    pop $I19, rx1020_bstack
    if_null rx1020_cstack, rx1020_cstack_done2695
    unless rx1020_cstack, rx1020_cstack_done2695
    dec $I19
    set $P11, rx1020_cstack[$I19]
  rx1020_cstack_done2695:
    pop rx1020_rep, rx1020_bstack
    pop rx1020_pos, rx1020_bstack
    pop $I19, rx1020_bstack
    lt rx1020_pos, -1, rx1020_done2690
    lt rx1020_pos, 0, rx1020_fail2692
    eq $I19, 0, rx1020_fail2692
    nqp_islist $I20, rx1020_cstack
    unless $I20, rx1020_jump2693
    elements $I18, rx1020_bstack
    le $I18, 0, rx1020_cut2694
    dec $I18
    set $I18, rx1020_bstack[$I18]
  rx1020_cut2694:
    assign rx1020_cstack, $I18
  rx1020_jump2693:
    jump $I19
  rx1020_done2690:
    rx1020_cur."!cursor_fail"()
    .return (rx1020_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_157_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1025_tgt
    .local int rx1025_pos
    .local int rx1025_off
    .local int rx1025_eos
    .local int rx1025_rep
    .local pmc rx1025_cur
    .local pmc rx1025_curclass
    .local pmc rx1025_bstack
    .local pmc rx1025_cstack
    (rx1025_cur, rx1025_tgt, rx1025_pos, rx1025_curclass, rx1025_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1025_cur
    length rx1025_eos, rx1025_tgt
    eq $I19, 1, rx1025_restart2706
    gt rx1025_pos, rx1025_eos, rx1025_fail2707
    repr_get_attr_int $I11, self, rx1025_curclass, "$!from"
    ne $I11, -1, rxscan1026_done2713
    goto rxscan1026_scan2712
  rxscan1026_loop2711:
    inc rx1025_pos
    gt rx1025_pos, rx1025_eos, rx1025_fail2707
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!from", rx1025_pos
  rxscan1026_scan2712:
    nqp_rxmark rx1025_bstack, rxscan1026_loop2711, rx1025_pos, 0
  rxscan1026_done2713:
    ge rx1025_pos, rx1025_eos, rx1025_fail2707
    substr $S11, rx1025_tgt, rx1025_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx1025_fail2707
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!pos", rx1025_pos
    $P11 = rx1025_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx1025_curclass, "$!pos"
    lt $I11, 0, rx1025_fail2707
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!pos", rx1025_pos
    $P11 = rx1025_cur."variable"()
    repr_get_attr_int $I11, $P11, rx1025_curclass, "$!pos"
    lt $I11, 0, rx1025_fail2707
    nqp_rxmark rx1025_bstack, rxsubrule1027_pass2714, -1, 0
  rxsubrule1027_pass2714:
    rx1025_cstack = rx1025_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx1025_pos, $P11, rx1025_curclass, "$!pos"
    rx1025_cur."!cursor_pass"(rx1025_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx1025_cur)
  rx1025_restart2706:
    repr_get_attr_obj rx1025_cstack, rx1025_cur, rx1025_curclass, "$!cstack"
  rx1025_fail2707:
    unless rx1025_bstack, rx1025_done2705
    pop $I19, rx1025_bstack
    if_null rx1025_cstack, rx1025_cstack_done2710
    unless rx1025_cstack, rx1025_cstack_done2710
    dec $I19
    set $P11, rx1025_cstack[$I19]
  rx1025_cstack_done2710:
    pop rx1025_rep, rx1025_bstack
    pop rx1025_pos, rx1025_bstack
    pop $I19, rx1025_bstack
    lt rx1025_pos, -1, rx1025_done2705
    lt rx1025_pos, 0, rx1025_fail2707
    eq $I19, 0, rx1025_fail2707
    nqp_islist $I20, rx1025_cstack
    unless $I20, rx1025_jump2708
    elements $I18, rx1025_bstack
    le $I18, 0, rx1025_cut2709
    dec $I18
    set $I18, rx1025_bstack[$I18]
  rx1025_cut2709:
    assign rx1025_cstack, $I18
  rx1025_jump2708:
    jump $I19
  rx1025_done2705:
    rx1025_cur."!cursor_fail"()
    .return (rx1025_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_158_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1028_tgt
    .local int rx1028_pos
    .local int rx1028_off
    .local int rx1028_eos
    .local int rx1028_rep
    .local pmc rx1028_cur
    .local pmc rx1028_curclass
    .local pmc rx1028_bstack
    .local pmc rx1028_cstack
    (rx1028_cur, rx1028_tgt, rx1028_pos, rx1028_curclass, rx1028_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1028_cur
    length rx1028_eos, rx1028_tgt
    eq $I19, 1, rx1028_restart2717
    gt rx1028_pos, rx1028_eos, rx1028_fail2718
    repr_get_attr_int $I11, self, rx1028_curclass, "$!from"
    ne $I11, -1, rxscan1029_done2724
    goto rxscan1029_scan2723
  rxscan1029_loop2722:
    inc rx1028_pos
    gt rx1028_pos, rx1028_eos, rx1028_fail2718
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!from", rx1028_pos
  rxscan1029_scan2723:
    nqp_rxmark rx1028_bstack, rxscan1029_loop2722, rx1028_pos, 0
  rxscan1029_done2724:
    ge rx1028_pos, rx1028_eos, rx1028_fail2718
    substr $S11, rx1028_tgt, rx1028_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1028_fail2718
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!pos", rx1028_pos
    $P11 = rx1028_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx1028_curclass, "$!pos"
    lt $I11, 0, rx1028_fail2718
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!pos", rx1028_pos
    $P11 = rx1028_cur."block"()
    repr_get_attr_int $I11, $P11, rx1028_curclass, "$!pos"
    lt $I11, 0, rx1028_fail2718
    nqp_rxmark rx1028_bstack, rxsubrule1030_pass2725, -1, 0
  rxsubrule1030_pass2725:
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1028_pos, $P11, rx1028_curclass, "$!pos"
    rx1028_cur."!cursor_pass"(rx1028_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx1028_cur)
  rx1028_restart2717:
    repr_get_attr_obj rx1028_cstack, rx1028_cur, rx1028_curclass, "$!cstack"
  rx1028_fail2718:
    unless rx1028_bstack, rx1028_done2716
    pop $I19, rx1028_bstack
    if_null rx1028_cstack, rx1028_cstack_done2721
    unless rx1028_cstack, rx1028_cstack_done2721
    dec $I19
    set $P11, rx1028_cstack[$I19]
  rx1028_cstack_done2721:
    pop rx1028_rep, rx1028_bstack
    pop rx1028_pos, rx1028_bstack
    pop $I19, rx1028_bstack
    lt rx1028_pos, -1, rx1028_done2716
    lt rx1028_pos, 0, rx1028_fail2718
    eq $I19, 0, rx1028_fail2718
    nqp_islist $I20, rx1028_cstack
    unless $I20, rx1028_jump2719
    elements $I18, rx1028_bstack
    le $I18, 0, rx1028_cut2720
    dec $I18
    set $I18, rx1028_bstack[$I18]
  rx1028_cut2720:
    assign rx1028_cstack, $I18
  rx1028_jump2719:
    jump $I19
  rx1028_done2716:
    rx1028_cur."!cursor_fail"()
    .return (rx1028_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_159_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1031_tgt
    .local int rx1031_pos
    .local int rx1031_off
    .local int rx1031_eos
    .local int rx1031_rep
    .local pmc rx1031_cur
    .local pmc rx1031_curclass
    .local pmc rx1031_bstack
    .local pmc rx1031_cstack
    (rx1031_cur, rx1031_tgt, rx1031_pos, rx1031_curclass, rx1031_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1031_cur
    length rx1031_eos, rx1031_tgt
    eq $I19, 1, rx1031_restart2728
    gt rx1031_pos, rx1031_eos, rx1031_fail2729
    repr_get_attr_int $I11, self, rx1031_curclass, "$!from"
    ne $I11, -1, rxscan1032_done2735
    goto rxscan1032_scan2734
  rxscan1032_loop2733:
    inc rx1031_pos
    gt rx1031_pos, rx1031_eos, rx1031_fail2729
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!from", rx1031_pos
  rxscan1032_scan2734:
    nqp_rxmark rx1031_bstack, rxscan1032_loop2733, rx1031_pos, 0
  rxscan1032_done2735:
    add $I11, rx1031_pos, 2
    gt $I11, rx1031_eos, rx1031_fail2729
    substr $S10, rx1031_tgt, rx1031_pos, 2
    ne $S10, ucs4:"\\e", rx1031_fail2729
    add rx1031_pos, 2
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2729
    rx1031_cur."!cursor_pass"(rx1031_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx1031_cur)
  rx1031_restart2728:
    repr_get_attr_obj rx1031_cstack, rx1031_cur, rx1031_curclass, "$!cstack"
  rx1031_fail2729:
    unless rx1031_bstack, rx1031_done2727
    pop $I19, rx1031_bstack
    if_null rx1031_cstack, rx1031_cstack_done2732
    unless rx1031_cstack, rx1031_cstack_done2732
    dec $I19
    set $P11, rx1031_cstack[$I19]
  rx1031_cstack_done2732:
    pop rx1031_rep, rx1031_bstack
    pop rx1031_pos, rx1031_bstack
    pop $I19, rx1031_bstack
    lt rx1031_pos, -1, rx1031_done2727
    lt rx1031_pos, 0, rx1031_fail2729
    eq $I19, 0, rx1031_fail2729
    nqp_islist $I20, rx1031_cstack
    unless $I20, rx1031_jump2730
    elements $I18, rx1031_bstack
    le $I18, 0, rx1031_cut2731
    dec $I18
    set $I18, rx1031_bstack[$I18]
  rx1031_cut2731:
    assign rx1031_cstack, $I18
  rx1031_jump2730:
    jump $I19
  rx1031_done2727:
    rx1031_cur."!cursor_fail"()
    .return (rx1031_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_160_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1033_tgt
    .local int rx1033_pos
    .local int rx1033_off
    .local int rx1033_eos
    .local int rx1033_rep
    .local pmc rx1033_cur
    .local pmc rx1033_curclass
    .local pmc rx1033_bstack
    .local pmc rx1033_cstack
    (rx1033_cur, rx1033_tgt, rx1033_pos, rx1033_curclass, rx1033_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1033_cur
    length rx1033_eos, rx1033_tgt
    eq $I19, 1, rx1033_restart2738
    gt rx1033_pos, rx1033_eos, rx1033_fail2739
    repr_get_attr_int $I11, self, rx1033_curclass, "$!from"
    ne $I11, -1, rxscan1034_done2745
    goto rxscan1034_scan2744
  rxscan1034_loop2743:
    inc rx1033_pos
    gt rx1033_pos, rx1033_eos, rx1033_fail2739
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!from", rx1033_pos
  rxscan1034_scan2744:
    nqp_rxmark rx1033_bstack, rxscan1034_loop2743, rx1033_pos, 0
  rxscan1034_done2745:
    add $I11, rx1033_pos, 1
    gt $I11, rx1033_eos, rx1033_fail2739
    substr $S10, rx1033_tgt, rx1033_pos, 1
    ne $S10, ucs4:"(", rx1033_fail2739
    add rx1033_pos, 1
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!pos", rx1033_pos
    $P11 = rx1033_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1033_curclass, "$!pos"
    lt $I11, 0, rx1033_fail2739
    repr_get_attr_int rx1033_pos, $P11, rx1033_curclass, "$!pos"
    nqp_rxmark rx1033_bstack, rxquantr1036_done2748, rx1033_pos, 0
  rxquantr1036_loop2747:
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!pos", rx1033_pos
    $P11 = rx1033_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1033_curclass, "$!pos"
    lt $I11, 0, rx1033_fail2739
    goto rxsubrule1037_pass2749
  rxsubrule1037_back2750:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1033_curclass, "$!pos"
    lt $I11, 0, rx1033_fail2739
  rxsubrule1037_pass2749:
    rx1033_cstack = rx1033_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1037_back2750
    push rx1033_bstack, $I11
    push rx1033_bstack, 0
    push rx1033_bstack, rx1033_pos
    elements $I11, rx1033_cstack
    push rx1033_bstack, $I11
    repr_get_attr_int rx1033_pos, $P11, rx1033_curclass, "$!pos"
    nqp_rxpeek $I19, rx1033_bstack, rxquantr1036_done2748
    inc $I19
    inc $I19
    set rx1033_rep, rx1033_bstack[$I19]
    nqp_rxcommit rx1033_bstack, rxquantr1036_done2748
    inc rx1033_rep
  rxquantr1036_done2748:
    add $I11, rx1033_pos, 1
    gt $I11, rx1033_eos, rx1033_fail2739
    substr $S10, rx1033_tgt, rx1033_pos, 1
    ne $S10, ucs4:")", rx1033_fail2739
    add rx1033_pos, 1
    rx1033_cur."!cursor_pass"(rx1033_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1033_cur)
  rx1033_restart2738:
    repr_get_attr_obj rx1033_cstack, rx1033_cur, rx1033_curclass, "$!cstack"
  rx1033_fail2739:
    unless rx1033_bstack, rx1033_done2737
    pop $I19, rx1033_bstack
    if_null rx1033_cstack, rx1033_cstack_done2742
    unless rx1033_cstack, rx1033_cstack_done2742
    dec $I19
    set $P11, rx1033_cstack[$I19]
  rx1033_cstack_done2742:
    pop rx1033_rep, rx1033_bstack
    pop rx1033_pos, rx1033_bstack
    pop $I19, rx1033_bstack
    lt rx1033_pos, -1, rx1033_done2737
    lt rx1033_pos, 0, rx1033_fail2739
    eq $I19, 0, rx1033_fail2739
    nqp_islist $I20, rx1033_cstack
    unless $I20, rx1033_jump2740
    elements $I18, rx1033_bstack
    le $I18, 0, rx1033_cut2741
    dec $I18
    set $I18, rx1033_bstack[$I18]
  rx1033_cut2741:
    assign rx1033_cstack, $I18
  rx1033_jump2740:
    jump $I19
  rx1033_done2737:
    rx1033_cur."!cursor_fail"()
    .return (rx1033_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_161_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1259
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1038_tgt
    .local int rx1038_pos
    .local int rx1038_off
    .local int rx1038_eos
    .local int rx1038_rep
    .local pmc rx1038_cur
    .local pmc rx1038_curclass
    .local pmc rx1038_bstack
    .local pmc rx1038_cstack
    (rx1038_cur, rx1038_tgt, rx1038_pos, rx1038_curclass, rx1038_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1038_cur
    length rx1038_eos, rx1038_tgt
    eq $I19, 1, rx1038_restart2753
    gt rx1038_pos, rx1038_eos, rx1038_fail2754
    repr_get_attr_int $I11, self, rx1038_curclass, "$!from"
    ne $I11, -1, rxscan1039_done2760
    goto rxscan1039_scan2759
  rxscan1039_loop2758:
    inc rx1038_pos
    gt rx1038_pos, rx1038_eos, rx1038_fail2754
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!from", rx1038_pos
  rxscan1039_scan2759:
    nqp_rxmark rx1038_bstack, rxscan1039_loop2758, rx1038_pos, 0
  rxscan1039_done2760:
    add $I11, rx1038_pos, 1
    gt $I11, rx1038_eos, rx1038_fail2754
    substr $S10, rx1038_tgt, rx1038_pos, 1
    ne $S10, ucs4:"[", rx1038_fail2754
    add rx1038_pos, 1
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2754
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    nqp_rxmark rx1038_bstack, rxquantr1041_done2763, rx1038_pos, 0
  rxquantr1041_loop2762:
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2754
    goto rxsubrule1042_pass2764
  rxsubrule1042_back2765:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2754
  rxsubrule1042_pass2764:
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1042_back2765
    push rx1038_bstack, $I11
    push rx1038_bstack, 0
    push rx1038_bstack, rx1038_pos
    elements $I11, rx1038_cstack
    push rx1038_bstack, $I11
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    nqp_rxpeek $I19, rx1038_bstack, rxquantr1041_done2763
    inc $I19
    inc $I19
    set rx1038_rep, rx1038_bstack[$I19]
    nqp_rxcommit rx1038_bstack, rxquantr1041_done2763
    inc rx1038_rep
  rxquantr1041_done2763:
    add $I11, rx1038_pos, 1
    gt $I11, rx1038_eos, rx1038_fail2754
    substr $S10, rx1038_tgt, rx1038_pos, 1
    ne $S10, ucs4:"]", rx1038_fail2754
    add rx1038_pos, 1
    rx1038_cur."!cursor_pass"(rx1038_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1038_cur)
  rx1038_restart2753:
    repr_get_attr_obj rx1038_cstack, rx1038_cur, rx1038_curclass, "$!cstack"
  rx1038_fail2754:
    unless rx1038_bstack, rx1038_done2752
    pop $I19, rx1038_bstack
    if_null rx1038_cstack, rx1038_cstack_done2757
    unless rx1038_cstack, rx1038_cstack_done2757
    dec $I19
    set $P11, rx1038_cstack[$I19]
  rx1038_cstack_done2757:
    pop rx1038_rep, rx1038_bstack
    pop rx1038_pos, rx1038_bstack
    pop $I19, rx1038_bstack
    lt rx1038_pos, -1, rx1038_done2752
    lt rx1038_pos, 0, rx1038_fail2754
    eq $I19, 0, rx1038_fail2754
    nqp_islist $I20, rx1038_cstack
    unless $I20, rx1038_jump2755
    elements $I18, rx1038_bstack
    le $I18, 0, rx1038_cut2756
    dec $I18
    set $I18, rx1038_bstack[$I18]
  rx1038_cut2756:
    assign rx1038_cstack, $I18
  rx1038_jump2755:
    jump $I19
  rx1038_done2752:
    rx1038_cur."!cursor_fail"()
    .return (rx1038_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_162_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1043_tgt
    .local int rx1043_pos
    .local int rx1043_off
    .local int rx1043_eos
    .local int rx1043_rep
    .local pmc rx1043_cur
    .local pmc rx1043_curclass
    .local pmc rx1043_bstack
    .local pmc rx1043_cstack
    (rx1043_cur, rx1043_tgt, rx1043_pos, rx1043_curclass, rx1043_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1043_cur
    length rx1043_eos, rx1043_tgt
    eq $I19, 1, rx1043_restart2768
    gt rx1043_pos, rx1043_eos, rx1043_fail2769
    repr_get_attr_int $I11, self, rx1043_curclass, "$!from"
    ne $I11, -1, rxscan1044_done2775
    goto rxscan1044_scan2774
  rxscan1044_loop2773:
    inc rx1043_pos
    gt rx1043_pos, rx1043_eos, rx1043_fail2769
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!from", rx1043_pos
  rxscan1044_scan2774:
    nqp_rxmark rx1043_bstack, rxscan1044_loop2773, rx1043_pos, 0
  rxscan1044_done2775:
    ge rx1043_pos, rx1043_eos, rx1043_fail2769
    substr $S11, rx1043_tgt, rx1043_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1043_fail2769
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!pos", rx1043_pos
    $P11 = rx1043_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx1043_curclass, "$!pos"
    lt $I11, 0, rx1043_fail2769
    nqp_rxmark rx1043_bstack, rxsubrule1045_pass2776, -1, 0
  rxsubrule1045_pass2776:
    rx1043_cstack = rx1043_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1043_pos, $P11, rx1043_curclass, "$!pos"
    rx1043_cur."!cursor_pass"(rx1043_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1043_cur)
  rx1043_restart2768:
    repr_get_attr_obj rx1043_cstack, rx1043_cur, rx1043_curclass, "$!cstack"
  rx1043_fail2769:
    unless rx1043_bstack, rx1043_done2767
    pop $I19, rx1043_bstack
    if_null rx1043_cstack, rx1043_cstack_done2772
    unless rx1043_cstack, rx1043_cstack_done2772
    dec $I19
    set $P11, rx1043_cstack[$I19]
  rx1043_cstack_done2772:
    pop rx1043_rep, rx1043_bstack
    pop rx1043_pos, rx1043_bstack
    pop $I19, rx1043_bstack
    lt rx1043_pos, -1, rx1043_done2767
    lt rx1043_pos, 0, rx1043_fail2769
    eq $I19, 0, rx1043_fail2769
    nqp_islist $I20, rx1043_cstack
    unless $I20, rx1043_jump2770
    elements $I18, rx1043_bstack
    le $I18, 0, rx1043_cut2771
    dec $I18
    set $I18, rx1043_bstack[$I18]
  rx1043_cut2771:
    assign rx1043_cstack, $I18
  rx1043_jump2770:
    jump $I19
  rx1043_done2767:
    rx1043_cur."!cursor_fail"()
    .return (rx1043_cur) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_163_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1046_tgt
    .local int rx1046_pos
    .local int rx1046_off
    .local int rx1046_eos
    .local int rx1046_rep
    .local pmc rx1046_cur
    .local pmc rx1046_curclass
    .local pmc rx1046_bstack
    .local pmc rx1046_cstack
    (rx1046_cur, rx1046_tgt, rx1046_pos, rx1046_curclass, rx1046_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1046_cur
    length rx1046_eos, rx1046_tgt
    eq $I19, 1, rx1046_restart2779
    gt rx1046_pos, rx1046_eos, rx1046_fail2780
    repr_get_attr_int $I11, self, rx1046_curclass, "$!from"
    ne $I11, -1, rxscan1047_done2786
    goto rxscan1047_scan2785
  rxscan1047_loop2784:
    inc rx1046_pos
    gt rx1046_pos, rx1046_eos, rx1046_fail2780
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!from", rx1046_pos
  rxscan1047_scan2785:
    nqp_rxmark rx1046_bstack, rxscan1047_loop2784, rx1046_pos, 0
  rxscan1047_done2786:
    ge rx1046_pos, rx1046_eos, rx1046_fail2780
    substr $S11, rx1046_tgt, rx1046_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx1046_fail2780
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!pos", rx1046_pos
    $P11 = rx1046_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx1046_curclass, "$!pos"
    lt $I11, 0, rx1046_fail2780
    nqp_rxmark rx1046_bstack, rxsubrule1048_pass2787, -1, 0
  rxsubrule1048_pass2787:
    rx1046_cstack = rx1046_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1046_pos, $P11, rx1046_curclass, "$!pos"
    rx1046_cur."!cursor_pass"(rx1046_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx1046_cur)
  rx1046_restart2779:
    repr_get_attr_obj rx1046_cstack, rx1046_cur, rx1046_curclass, "$!cstack"
  rx1046_fail2780:
    unless rx1046_bstack, rx1046_done2778
    pop $I19, rx1046_bstack
    if_null rx1046_cstack, rx1046_cstack_done2783
    unless rx1046_cstack, rx1046_cstack_done2783
    dec $I19
    set $P11, rx1046_cstack[$I19]
  rx1046_cstack_done2783:
    pop rx1046_rep, rx1046_bstack
    pop rx1046_pos, rx1046_bstack
    pop $I19, rx1046_bstack
    lt rx1046_pos, -1, rx1046_done2778
    lt rx1046_pos, 0, rx1046_fail2780
    eq $I19, 0, rx1046_fail2780
    nqp_islist $I20, rx1046_cstack
    unless $I20, rx1046_jump2781
    elements $I18, rx1046_bstack
    le $I18, 0, rx1046_cut2782
    dec $I18
    set $I18, rx1046_bstack[$I18]
  rx1046_cut2782:
    assign rx1046_cstack, $I18
  rx1046_jump2781:
    jump $I19
  rx1046_done2778:
    rx1046_cur."!cursor_fail"()
    .return (rx1046_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_164_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1262
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1049_tgt
    .local int rx1049_pos
    .local int rx1049_off
    .local int rx1049_eos
    .local int rx1049_rep
    .local pmc rx1049_cur
    .local pmc rx1049_curclass
    .local pmc rx1049_bstack
    .local pmc rx1049_cstack
    (rx1049_cur, rx1049_tgt, rx1049_pos, rx1049_curclass, rx1049_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1049_cur
    length rx1049_eos, rx1049_tgt
    eq $I19, 1, rx1049_restart2790
    gt rx1049_pos, rx1049_eos, rx1049_fail2791
    repr_get_attr_int $I11, self, rx1049_curclass, "$!from"
    ne $I11, -1, rxscan1050_done2797
    goto rxscan1050_scan2796
  rxscan1050_loop2795:
    inc rx1049_pos
    gt rx1049_pos, rx1049_eos, rx1049_fail2791
    repr_bind_attr_int rx1049_cur, rx1049_curclass, "$!from", rx1049_pos
  rxscan1050_scan2796:
    nqp_rxmark rx1049_bstack, rxscan1050_loop2795, rx1049_pos, 0
  rxscan1050_done2797:
    ge rx1049_pos, rx1049_eos, rx1049_fail2791
    substr $S11, rx1049_tgt, rx1049_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1049_fail2791
    repr_bind_attr_int rx1049_cur, rx1049_curclass, "$!pos", rx1049_pos
    $P11 = rx1049_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx1049_curclass, "$!pos"
    lt $I11, 0, rx1049_fail2791
    nqp_rxmark rx1049_bstack, rxsubrule1051_pass2798, -1, 0
  rxsubrule1051_pass2798:
    rx1049_cstack = rx1049_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx1049_pos, $P11, rx1049_curclass, "$!pos"
    rx1049_cur."!cursor_pass"(rx1049_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1049_cur)
  rx1049_restart2790:
    repr_get_attr_obj rx1049_cstack, rx1049_cur, rx1049_curclass, "$!cstack"
  rx1049_fail2791:
    unless rx1049_bstack, rx1049_done2789
    pop $I19, rx1049_bstack
    if_null rx1049_cstack, rx1049_cstack_done2794
    unless rx1049_cstack, rx1049_cstack_done2794
    dec $I19
    set $P11, rx1049_cstack[$I19]
  rx1049_cstack_done2794:
    pop rx1049_rep, rx1049_bstack
    pop rx1049_pos, rx1049_bstack
    pop $I19, rx1049_bstack
    lt rx1049_pos, -1, rx1049_done2789
    lt rx1049_pos, 0, rx1049_fail2791
    eq $I19, 0, rx1049_fail2791
    nqp_islist $I20, rx1049_cstack
    unless $I20, rx1049_jump2792
    elements $I18, rx1049_bstack
    le $I18, 0, rx1049_cut2793
    dec $I18
    set $I18, rx1049_bstack[$I18]
  rx1049_cut2793:
    assign rx1049_cstack, $I18
  rx1049_jump2792:
    jump $I19
  rx1049_done2789:
    rx1049_cur."!cursor_fail"()
    .return (rx1049_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_165_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1052_tgt
    .local int rx1052_pos
    .local int rx1052_off
    .local int rx1052_eos
    .local int rx1052_rep
    .local pmc rx1052_cur
    .local pmc rx1052_curclass
    .local pmc rx1052_bstack
    .local pmc rx1052_cstack
    (rx1052_cur, rx1052_tgt, rx1052_pos, rx1052_curclass, rx1052_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1052_cur
    length rx1052_eos, rx1052_tgt
    eq $I19, 1, rx1052_restart2801
    gt rx1052_pos, rx1052_eos, rx1052_fail2802
    repr_get_attr_int $I11, self, rx1052_curclass, "$!from"
    ne $I11, -1, rxscan1053_done2808
    goto rxscan1053_scan2807
  rxscan1053_loop2806:
    inc rx1052_pos
    gt rx1052_pos, rx1052_eos, rx1052_fail2802
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!from", rx1052_pos
  rxscan1053_scan2807:
    nqp_rxmark rx1052_bstack, rxscan1053_loop2806, rx1052_pos, 0
  rxscan1053_done2808:
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2802
    nqp_rxmark rx1052_bstack, rxsubrule1054_pass2809, -1, 0
  rxsubrule1054_pass2809:
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
    add $I11, rx1052_pos, 1
    gt $I11, rx1052_eos, rx1052_fail2802
    substr $S10, rx1052_tgt, rx1052_pos, 1
    ne $S10, ucs4:"(", rx1052_fail2802
    add rx1052_pos, 1
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2802
    nqp_rxmark rx1052_bstack, rxsubrule1055_pass2810, -1, 0
  rxsubrule1055_pass2810:
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
  alt1056_02812:
    nqp_rxmark rx1052_bstack, alt1056_12813, rx1052_pos, 0
    add $I11, rx1052_pos, 1
    gt $I11, rx1052_eos, rx1052_fail2802
    substr $S10, rx1052_tgt, rx1052_pos, 1
    ne $S10, ucs4:")", rx1052_fail2802
    add rx1052_pos, 1
    goto alt1056_end2811
  alt1056_12813:
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2802
    goto rxsubrule1057_pass2814
  rxsubrule1057_back2815:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2802
  rxsubrule1057_pass2814:
    rx1052_cstack = rx1052_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule1057_back2815
    push rx1052_bstack, $I11
    push rx1052_bstack, 0
    push rx1052_bstack, rx1052_pos
    elements $I11, rx1052_cstack
    push rx1052_bstack, $I11
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
  alt1056_end2811:
    rx1052_cur."!cursor_pass"(rx1052_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx1052_cur)
  rx1052_restart2801:
    repr_get_attr_obj rx1052_cstack, rx1052_cur, rx1052_curclass, "$!cstack"
  rx1052_fail2802:
    unless rx1052_bstack, rx1052_done2800
    pop $I19, rx1052_bstack
    if_null rx1052_cstack, rx1052_cstack_done2805
    unless rx1052_cstack, rx1052_cstack_done2805
    dec $I19
    set $P11, rx1052_cstack[$I19]
  rx1052_cstack_done2805:
    pop rx1052_rep, rx1052_bstack
    pop rx1052_pos, rx1052_bstack
    pop $I19, rx1052_bstack
    lt rx1052_pos, -1, rx1052_done2800
    lt rx1052_pos, 0, rx1052_fail2802
    eq $I19, 0, rx1052_fail2802
    nqp_islist $I20, rx1052_cstack
    unless $I20, rx1052_jump2803
    elements $I18, rx1052_bstack
    le $I18, 0, rx1052_cut2804
    dec $I18
    set $I18, rx1052_bstack[$I18]
  rx1052_cut2804:
    assign rx1052_cstack, $I18
  rx1052_jump2803:
    jump $I19
  rx1052_done2800:
    rx1052_cur."!cursor_fail"()
    .return (rx1052_cur) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_166_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1265
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1058_tgt
    .local int rx1058_pos
    .local int rx1058_off
    .local int rx1058_eos
    .local int rx1058_rep
    .local pmc rx1058_cur
    .local pmc rx1058_curclass
    .local pmc rx1058_bstack
    .local pmc rx1058_cstack
    (rx1058_cur, rx1058_tgt, rx1058_pos, rx1058_curclass, rx1058_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1058_cur
    length rx1058_eos, rx1058_tgt
    eq $I19, 1, rx1058_restart2818
    gt rx1058_pos, rx1058_eos, rx1058_fail2819
    repr_get_attr_int $I11, self, rx1058_curclass, "$!from"
    ne $I11, -1, rxscan1059_done2825
    goto rxscan1059_scan2824
  rxscan1059_loop2823:
    inc rx1058_pos
    gt rx1058_pos, rx1058_eos, rx1058_fail2819
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!from", rx1058_pos
  rxscan1059_scan2824:
    nqp_rxmark rx1058_bstack, rxscan1059_loop2823, rx1058_pos, 0
  rxscan1059_done2825:
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!pos", rx1058_pos
    $P11 = rx1058_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1058_curclass, "$!pos"
    lt $I11, 0, rx1058_fail2819
    repr_get_attr_int rx1058_pos, $P11, rx1058_curclass, "$!pos"
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!pos", rx1058_pos
    $P11 = rx1058_cur."statement"()
    repr_get_attr_int $I11, $P11, rx1058_curclass, "$!pos"
    lt $I11, 0, rx1058_fail2819
    nqp_rxmark rx1058_bstack, rxsubrule1061_pass2827, -1, 0
  rxsubrule1061_pass2827:
    rx1058_cstack = rx1058_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1058_pos, $P11, rx1058_curclass, "$!pos"
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!pos", rx1058_pos
    $P11 = rx1058_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1058_curclass, "$!pos"
    lt $I11, 0, rx1058_fail2819
    repr_get_attr_int rx1058_pos, $P11, rx1058_curclass, "$!pos"
    rx1058_cur."!cursor_pass"(rx1058_pos, "semilist", 'backtrack'=>1)
    .return (rx1058_cur)
  rx1058_restart2818:
    repr_get_attr_obj rx1058_cstack, rx1058_cur, rx1058_curclass, "$!cstack"
  rx1058_fail2819:
    unless rx1058_bstack, rx1058_done2817
    pop $I19, rx1058_bstack
    if_null rx1058_cstack, rx1058_cstack_done2822
    unless rx1058_cstack, rx1058_cstack_done2822
    dec $I19
    set $P11, rx1058_cstack[$I19]
  rx1058_cstack_done2822:
    pop rx1058_rep, rx1058_bstack
    pop rx1058_pos, rx1058_bstack
    pop $I19, rx1058_bstack
    lt rx1058_pos, -1, rx1058_done2817
    lt rx1058_pos, 0, rx1058_fail2819
    eq $I19, 0, rx1058_fail2819
    nqp_islist $I20, rx1058_cstack
    unless $I20, rx1058_jump2820
    elements $I18, rx1058_bstack
    le $I18, 0, rx1058_cut2821
    dec $I18
    set $I18, rx1058_bstack[$I18]
  rx1058_cut2821:
    assign rx1058_cstack, $I18
  rx1058_jump2820:
    jump $I19
  rx1058_done2817:
    rx1058_cur."!cursor_fail"()
    .return (rx1058_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_167_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1063_tgt
    .local int rx1063_pos
    .local int rx1063_off
    .local int rx1063_eos
    .local int rx1063_rep
    .local pmc rx1063_cur
    .local pmc rx1063_curclass
    .local pmc rx1063_bstack
    .local pmc rx1063_cstack
    (rx1063_cur, rx1063_tgt, rx1063_pos, rx1063_curclass, rx1063_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1063_cur
    length rx1063_eos, rx1063_tgt
    eq $I19, 1, rx1063_restart2831
    gt rx1063_pos, rx1063_eos, rx1063_fail2832
    repr_get_attr_int $I11, self, rx1063_curclass, "$!from"
    ne $I11, -1, rxscan1064_done2838
    goto rxscan1064_scan2837
  rxscan1064_loop2836:
    inc rx1063_pos
    gt rx1063_pos, rx1063_eos, rx1063_fail2832
    repr_bind_attr_int rx1063_cur, rx1063_curclass, "$!from", rx1063_pos
  rxscan1064_scan2837:
    nqp_rxmark rx1063_bstack, rxscan1064_loop2836, rx1063_pos, 0
  rxscan1064_done2838:
    repr_bind_attr_int rx1063_cur, rx1063_curclass, "$!pos", rx1063_pos
    $P11 = rx1063_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx1063_curclass, "$!pos"
    ge $I11, 0, rx1063_fail2832
    repr_bind_attr_int rx1063_cur, rx1063_curclass, "$!pos", rx1063_pos
    $P11 = rx1063_cur."infix"()
    repr_get_attr_int $I11, $P11, rx1063_curclass, "$!pos"
    lt $I11, 0, rx1063_fail2832
    nqp_rxmark rx1063_bstack, rxsubrule1065_pass2839, -1, 0
  rxsubrule1065_pass2839:
    rx1063_cstack = rx1063_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx1063_pos, $P11, rx1063_curclass, "$!pos"
    rx1063_cur."!cursor_pass"(rx1063_pos, "infixish", 'backtrack'=>1)
    .return (rx1063_cur)
  rx1063_restart2831:
    repr_get_attr_obj rx1063_cstack, rx1063_cur, rx1063_curclass, "$!cstack"
  rx1063_fail2832:
    unless rx1063_bstack, rx1063_done2830
    pop $I19, rx1063_bstack
    if_null rx1063_cstack, rx1063_cstack_done2835
    unless rx1063_cstack, rx1063_cstack_done2835
    dec $I19
    set $P11, rx1063_cstack[$I19]
  rx1063_cstack_done2835:
    pop rx1063_rep, rx1063_bstack
    pop rx1063_pos, rx1063_bstack
    pop $I19, rx1063_bstack
    lt rx1063_pos, -1, rx1063_done2830
    lt rx1063_pos, 0, rx1063_fail2832
    eq $I19, 0, rx1063_fail2832
    nqp_islist $I20, rx1063_cstack
    unless $I20, rx1063_jump2833
    elements $I18, rx1063_bstack
    le $I18, 0, rx1063_cut2834
    dec $I18
    set $I18, rx1063_bstack[$I18]
  rx1063_cut2834:
    assign rx1063_cstack, $I18
  rx1063_jump2833:
    jump $I19
  rx1063_done2830:
    rx1063_cur."!cursor_fail"()
    .return (rx1063_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_168_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1066_tgt
    .local int rx1066_pos
    .local int rx1066_off
    .local int rx1066_eos
    .local int rx1066_rep
    .local pmc rx1066_cur
    .local pmc rx1066_curclass
    .local pmc rx1066_bstack
    .local pmc rx1066_cstack
    (rx1066_cur, rx1066_tgt, rx1066_pos, rx1066_curclass, rx1066_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1066_cur
    length rx1066_eos, rx1066_tgt
    eq $I19, 1, rx1066_restart2842
    gt rx1066_pos, rx1066_eos, rx1066_fail2843
    repr_get_attr_int $I11, self, rx1066_curclass, "$!from"
    ne $I11, -1, rxscan1067_done2849
    goto rxscan1067_scan2848
  rxscan1067_loop2847:
    inc rx1066_pos
    gt rx1066_pos, rx1066_eos, rx1066_fail2843
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!from", rx1066_pos
  rxscan1067_scan2848:
    nqp_rxmark rx1066_bstack, rxscan1067_loop2847, rx1066_pos, 0
  rxscan1067_done2849:
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2843
    rx1066_cur."!cursor_pass"(rx1066_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1066_cur)
  rx1066_restart2842:
    repr_get_attr_obj rx1066_cstack, rx1066_cur, rx1066_curclass, "$!cstack"
  rx1066_fail2843:
    unless rx1066_bstack, rx1066_done2841
    pop $I19, rx1066_bstack
    if_null rx1066_cstack, rx1066_cstack_done2846
    unless rx1066_cstack, rx1066_cstack_done2846
    dec $I19
    set $P11, rx1066_cstack[$I19]
  rx1066_cstack_done2846:
    pop rx1066_rep, rx1066_bstack
    pop rx1066_pos, rx1066_bstack
    pop $I19, rx1066_bstack
    lt rx1066_pos, -1, rx1066_done2841
    lt rx1066_pos, 0, rx1066_fail2843
    eq $I19, 0, rx1066_fail2843
    nqp_islist $I20, rx1066_cstack
    unless $I20, rx1066_jump2844
    elements $I18, rx1066_bstack
    le $I18, 0, rx1066_cut2845
    dec $I18
    set $I18, rx1066_bstack[$I18]
  rx1066_cut2845:
    assign rx1066_cstack, $I18
  rx1066_jump2844:
    jump $I19
  rx1066_done2841:
    rx1066_cur."!cursor_fail"()
    .return (rx1066_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_169_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1068_tgt
    .local int rx1068_pos
    .local int rx1068_off
    .local int rx1068_eos
    .local int rx1068_rep
    .local pmc rx1068_cur
    .local pmc rx1068_curclass
    .local pmc rx1068_bstack
    .local pmc rx1068_cstack
    (rx1068_cur, rx1068_tgt, rx1068_pos, rx1068_curclass, rx1068_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1068_cur
    length rx1068_eos, rx1068_tgt
    eq $I19, 1, rx1068_restart2852
    gt rx1068_pos, rx1068_eos, rx1068_fail2853
    repr_get_attr_int $I11, self, rx1068_curclass, "$!from"
    ne $I11, -1, rxscan1069_done2859
    goto rxscan1069_scan2858
  rxscan1069_loop2857:
    inc rx1068_pos
    gt rx1068_pos, rx1068_eos, rx1068_fail2853
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!from", rx1068_pos
  rxscan1069_scan2858:
    nqp_rxmark rx1068_bstack, rxscan1069_loop2857, rx1068_pos, 0
  rxscan1069_done2859:
    add $I11, rx1068_pos, 1
    gt $I11, rx1068_eos, rx1068_fail2853
    substr $S10, rx1068_tgt, rx1068_pos, 1
    ne $S10, ucs4:"[", rx1068_fail2853
    add rx1068_pos, 1
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!pos", rx1068_pos
    $P11 = rx1068_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1068_curclass, "$!pos"
    lt $I11, 0, rx1068_fail2853
    repr_get_attr_int rx1068_pos, $P11, rx1068_curclass, "$!pos"
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!pos", rx1068_pos
    $P11 = rx1068_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1068_curclass, "$!pos"
    lt $I11, 0, rx1068_fail2853
    nqp_rxmark rx1068_bstack, rxsubrule1071_pass2861, -1, 0
  rxsubrule1071_pass2861:
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1068_pos, $P11, rx1068_curclass, "$!pos"
    add $I11, rx1068_pos, 1
    gt $I11, rx1068_eos, rx1068_fail2853
    substr $S10, rx1068_tgt, rx1068_pos, 1
    ne $S10, ucs4:"]", rx1068_fail2853
    add rx1068_pos, 1
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!pos", rx1068_pos
    $P11 = rx1068_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1068_curclass, "$!pos"
    lt $I11, 0, rx1068_fail2853
    nqp_rxmark rx1068_bstack, rxsubrule1072_pass2862, -1, 0
  rxsubrule1072_pass2862:
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1068_pos, $P11, rx1068_curclass, "$!pos"
    rx1068_cur."!cursor_pass"(rx1068_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1068_cur)
  rx1068_restart2852:
    repr_get_attr_obj rx1068_cstack, rx1068_cur, rx1068_curclass, "$!cstack"
  rx1068_fail2853:
    unless rx1068_bstack, rx1068_done2851
    pop $I19, rx1068_bstack
    if_null rx1068_cstack, rx1068_cstack_done2856
    unless rx1068_cstack, rx1068_cstack_done2856
    dec $I19
    set $P11, rx1068_cstack[$I19]
  rx1068_cstack_done2856:
    pop rx1068_rep, rx1068_bstack
    pop rx1068_pos, rx1068_bstack
    pop $I19, rx1068_bstack
    lt rx1068_pos, -1, rx1068_done2851
    lt rx1068_pos, 0, rx1068_fail2853
    eq $I19, 0, rx1068_fail2853
    nqp_islist $I20, rx1068_cstack
    unless $I20, rx1068_jump2854
    elements $I18, rx1068_bstack
    le $I18, 0, rx1068_cut2855
    dec $I18
    set $I18, rx1068_bstack[$I18]
  rx1068_cut2855:
    assign rx1068_cstack, $I18
  rx1068_jump2854:
    jump $I19
  rx1068_done2851:
    rx1068_cur."!cursor_fail"()
    .return (rx1068_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_170_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1073_tgt
    .local int rx1073_pos
    .local int rx1073_off
    .local int rx1073_eos
    .local int rx1073_rep
    .local pmc rx1073_cur
    .local pmc rx1073_curclass
    .local pmc rx1073_bstack
    .local pmc rx1073_cstack
    (rx1073_cur, rx1073_tgt, rx1073_pos, rx1073_curclass, rx1073_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1073_cur
    length rx1073_eos, rx1073_tgt
    eq $I19, 1, rx1073_restart2865
    gt rx1073_pos, rx1073_eos, rx1073_fail2866
    repr_get_attr_int $I11, self, rx1073_curclass, "$!from"
    ne $I11, -1, rxscan1074_done2872
    goto rxscan1074_scan2871
  rxscan1074_loop2870:
    inc rx1073_pos
    gt rx1073_pos, rx1073_eos, rx1073_fail2866
    repr_bind_attr_int rx1073_cur, rx1073_curclass, "$!from", rx1073_pos
  rxscan1074_scan2871:
    nqp_rxmark rx1073_bstack, rxscan1074_loop2870, rx1073_pos, 0
  rxscan1074_done2872:
    add $I11, rx1073_pos, 1
    gt $I11, rx1073_eos, rx1073_fail2866
    substr $S10, rx1073_tgt, rx1073_pos, 1
    ne $S10, ucs4:"{", rx1073_fail2866
    add rx1073_pos, 1
    repr_bind_attr_int rx1073_cur, rx1073_curclass, "$!pos", rx1073_pos
    $P11 = rx1073_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1073_curclass, "$!pos"
    lt $I11, 0, rx1073_fail2866
    repr_get_attr_int rx1073_pos, $P11, rx1073_curclass, "$!pos"
    repr_bind_attr_int rx1073_cur, rx1073_curclass, "$!pos", rx1073_pos
    $P11 = rx1073_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1073_curclass, "$!pos"
    lt $I11, 0, rx1073_fail2866
    nqp_rxmark rx1073_bstack, rxsubrule1076_pass2874, -1, 0
  rxsubrule1076_pass2874:
    rx1073_cstack = rx1073_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1073_pos, $P11, rx1073_curclass, "$!pos"
    add $I11, rx1073_pos, 1
    gt $I11, rx1073_eos, rx1073_fail2866
    substr $S10, rx1073_tgt, rx1073_pos, 1
    ne $S10, ucs4:"}", rx1073_fail2866
    add rx1073_pos, 1
    repr_bind_attr_int rx1073_cur, rx1073_curclass, "$!pos", rx1073_pos
    $P11 = rx1073_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1073_curclass, "$!pos"
    lt $I11, 0, rx1073_fail2866
    nqp_rxmark rx1073_bstack, rxsubrule1077_pass2875, -1, 0
  rxsubrule1077_pass2875:
    rx1073_cstack = rx1073_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1073_pos, $P11, rx1073_curclass, "$!pos"
    rx1073_cur."!cursor_pass"(rx1073_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1073_cur)
  rx1073_restart2865:
    repr_get_attr_obj rx1073_cstack, rx1073_cur, rx1073_curclass, "$!cstack"
  rx1073_fail2866:
    unless rx1073_bstack, rx1073_done2864
    pop $I19, rx1073_bstack
    if_null rx1073_cstack, rx1073_cstack_done2869
    unless rx1073_cstack, rx1073_cstack_done2869
    dec $I19
    set $P11, rx1073_cstack[$I19]
  rx1073_cstack_done2869:
    pop rx1073_rep, rx1073_bstack
    pop rx1073_pos, rx1073_bstack
    pop $I19, rx1073_bstack
    lt rx1073_pos, -1, rx1073_done2864
    lt rx1073_pos, 0, rx1073_fail2866
    eq $I19, 0, rx1073_fail2866
    nqp_islist $I20, rx1073_cstack
    unless $I20, rx1073_jump2867
    elements $I18, rx1073_bstack
    le $I18, 0, rx1073_cut2868
    dec $I18
    set $I18, rx1073_bstack[$I18]
  rx1073_cut2868:
    assign rx1073_cstack, $I18
  rx1073_jump2867:
    jump $I19
  rx1073_done2864:
    rx1073_cur."!cursor_fail"()
    .return (rx1073_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_171_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1078_tgt
    .local int rx1078_pos
    .local int rx1078_off
    .local int rx1078_eos
    .local int rx1078_rep
    .local pmc rx1078_cur
    .local pmc rx1078_curclass
    .local pmc rx1078_bstack
    .local pmc rx1078_cstack
    (rx1078_cur, rx1078_tgt, rx1078_pos, rx1078_curclass, rx1078_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1078_cur
    length rx1078_eos, rx1078_tgt
    eq $I19, 1, rx1078_restart2878
    gt rx1078_pos, rx1078_eos, rx1078_fail2879
    repr_get_attr_int $I11, self, rx1078_curclass, "$!from"
    ne $I11, -1, rxscan1079_done2885
    goto rxscan1079_scan2884
  rxscan1079_loop2883:
    inc rx1078_pos
    gt rx1078_pos, rx1078_eos, rx1078_fail2879
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!from", rx1078_pos
  rxscan1079_scan2884:
    nqp_rxmark rx1078_bstack, rxscan1079_loop2883, rx1078_pos, 0
  rxscan1079_done2885:
    ge rx1078_pos, rx1078_eos, rx1078_fail2879
    substr $S11, rx1078_tgt, rx1078_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1078_fail2879
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail2879
    nqp_rxmark rx1078_bstack, rxsubrule1080_pass2886, -1, 0
  rxsubrule1080_pass2886:
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail2879
    nqp_rxmark rx1078_bstack, rxsubrule1081_pass2887, -1, 0
  rxsubrule1081_pass2887:
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    rx1078_cur."!cursor_pass"(rx1078_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1078_cur)
  rx1078_restart2878:
    repr_get_attr_obj rx1078_cstack, rx1078_cur, rx1078_curclass, "$!cstack"
  rx1078_fail2879:
    unless rx1078_bstack, rx1078_done2877
    pop $I19, rx1078_bstack
    if_null rx1078_cstack, rx1078_cstack_done2882
    unless rx1078_cstack, rx1078_cstack_done2882
    dec $I19
    set $P11, rx1078_cstack[$I19]
  rx1078_cstack_done2882:
    pop rx1078_rep, rx1078_bstack
    pop rx1078_pos, rx1078_bstack
    pop $I19, rx1078_bstack
    lt rx1078_pos, -1, rx1078_done2877
    lt rx1078_pos, 0, rx1078_fail2879
    eq $I19, 0, rx1078_fail2879
    nqp_islist $I20, rx1078_cstack
    unless $I20, rx1078_jump2880
    elements $I18, rx1078_bstack
    le $I18, 0, rx1078_cut2881
    dec $I18
    set $I18, rx1078_bstack[$I18]
  rx1078_cut2881:
    assign rx1078_cstack, $I18
  rx1078_jump2880:
    jump $I19
  rx1078_done2877:
    rx1078_cur."!cursor_fail"()
    .return (rx1078_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_172_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1306
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1082_tgt
    .local int rx1082_pos
    .local int rx1082_off
    .local int rx1082_eos
    .local int rx1082_rep
    .local pmc rx1082_cur
    .local pmc rx1082_curclass
    .local pmc rx1082_bstack
    .local pmc rx1082_cstack
    (rx1082_cur, rx1082_tgt, rx1082_pos, rx1082_curclass, rx1082_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1082_cur
    length rx1082_eos, rx1082_tgt
    eq $I19, 1, rx1082_restart2890
    gt rx1082_pos, rx1082_eos, rx1082_fail2891
    repr_get_attr_int $I11, self, rx1082_curclass, "$!from"
    ne $I11, -1, rxscan1083_done2897
    goto rxscan1083_scan2896
  rxscan1083_loop2895:
    inc rx1082_pos
    gt rx1082_pos, rx1082_eos, rx1082_fail2891
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!from", rx1082_pos
  rxscan1083_scan2896:
    nqp_rxmark rx1082_bstack, rxscan1083_loop2895, rx1082_pos, 0
  rxscan1083_done2897:
    add $I11, rx1082_pos, 1
    gt $I11, rx1082_eos, rx1082_fail2891
    substr $S10, rx1082_tgt, rx1082_pos, 1
    ne $S10, ucs4:"(", rx1082_fail2891
    add rx1082_pos, 1
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!pos", rx1082_pos
    $P11 = rx1082_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1082_curclass, "$!pos"
    lt $I11, 0, rx1082_fail2891
    repr_get_attr_int rx1082_pos, $P11, rx1082_curclass, "$!pos"
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!pos", rx1082_pos
    $P11 = rx1082_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1082_curclass, "$!pos"
    lt $I11, 0, rx1082_fail2891
    nqp_rxmark rx1082_bstack, rxsubrule1085_pass2899, -1, 0
  rxsubrule1085_pass2899:
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1082_pos, $P11, rx1082_curclass, "$!pos"
    add $I11, rx1082_pos, 1
    gt $I11, rx1082_eos, rx1082_fail2891
    substr $S10, rx1082_tgt, rx1082_pos, 1
    ne $S10, ucs4:")", rx1082_fail2891
    add rx1082_pos, 1
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!pos", rx1082_pos
    $P11 = rx1082_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1082_curclass, "$!pos"
    lt $I11, 0, rx1082_fail2891
    nqp_rxmark rx1082_bstack, rxsubrule1086_pass2900, -1, 0
  rxsubrule1086_pass2900:
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1082_pos, $P11, rx1082_curclass, "$!pos"
    rx1082_cur."!cursor_pass"(rx1082_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1082_cur)
  rx1082_restart2890:
    repr_get_attr_obj rx1082_cstack, rx1082_cur, rx1082_curclass, "$!cstack"
  rx1082_fail2891:
    unless rx1082_bstack, rx1082_done2889
    pop $I19, rx1082_bstack
    if_null rx1082_cstack, rx1082_cstack_done2894
    unless rx1082_cstack, rx1082_cstack_done2894
    dec $I19
    set $P11, rx1082_cstack[$I19]
  rx1082_cstack_done2894:
    pop rx1082_rep, rx1082_bstack
    pop rx1082_pos, rx1082_bstack
    pop $I19, rx1082_bstack
    lt rx1082_pos, -1, rx1082_done2889
    lt rx1082_pos, 0, rx1082_fail2891
    eq $I19, 0, rx1082_fail2891
    nqp_islist $I20, rx1082_cstack
    unless $I20, rx1082_jump2892
    elements $I18, rx1082_bstack
    le $I18, 0, rx1082_cut2893
    dec $I18
    set $I18, rx1082_bstack[$I18]
  rx1082_cut2893:
    assign rx1082_cstack, $I18
  rx1082_jump2892:
    jump $I19
  rx1082_done2889:
    rx1082_cur."!cursor_fail"()
    .return (rx1082_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_173_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1087_tgt
    .local int rx1087_pos
    .local int rx1087_off
    .local int rx1087_eos
    .local int rx1087_rep
    .local pmc rx1087_cur
    .local pmc rx1087_curclass
    .local pmc rx1087_bstack
    .local pmc rx1087_cstack
    (rx1087_cur, rx1087_tgt, rx1087_pos, rx1087_curclass, rx1087_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1087_cur
    length rx1087_eos, rx1087_tgt
    eq $I19, 1, rx1087_restart2903
    gt rx1087_pos, rx1087_eos, rx1087_fail2904
    repr_get_attr_int $I11, self, rx1087_curclass, "$!from"
    ne $I11, -1, rxscan1088_done2910
    goto rxscan1088_scan2909
  rxscan1088_loop2908:
    inc rx1087_pos
    gt rx1087_pos, rx1087_eos, rx1087_fail2904
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!from", rx1087_pos
  rxscan1088_scan2909:
    nqp_rxmark rx1087_bstack, rxscan1088_loop2908, rx1087_pos, 0
  rxscan1088_done2910:
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!pos", rx1087_pos
    $P11 = rx1087_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1087_curclass, "$!pos"
    lt $I11, 0, rx1087_fail2904
    nqp_rxmark rx1087_bstack, rxsubrule1089_pass2911, -1, 0
  rxsubrule1089_pass2911:
    rx1087_cstack = rx1087_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1087_pos, $P11, rx1087_curclass, "$!pos"
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!pos", rx1087_pos
    $P11 = rx1087_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1087_curclass, "$!pos"
    lt $I11, 0, rx1087_fail2904
    nqp_rxmark rx1087_bstack, rxsubrule1090_pass2912, -1, 0
  rxsubrule1090_pass2912:
    rx1087_cstack = rx1087_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1087_pos, $P11, rx1087_curclass, "$!pos"
    rx1087_cur."!cursor_pass"(rx1087_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1087_cur)
  rx1087_restart2903:
    repr_get_attr_obj rx1087_cstack, rx1087_cur, rx1087_curclass, "$!cstack"
  rx1087_fail2904:
    unless rx1087_bstack, rx1087_done2902
    pop $I19, rx1087_bstack
    if_null rx1087_cstack, rx1087_cstack_done2907
    unless rx1087_cstack, rx1087_cstack_done2907
    dec $I19
    set $P11, rx1087_cstack[$I19]
  rx1087_cstack_done2907:
    pop rx1087_rep, rx1087_bstack
    pop rx1087_pos, rx1087_bstack
    pop $I19, rx1087_bstack
    lt rx1087_pos, -1, rx1087_done2902
    lt rx1087_pos, 0, rx1087_fail2904
    eq $I19, 0, rx1087_fail2904
    nqp_islist $I20, rx1087_cstack
    unless $I20, rx1087_jump2905
    elements $I18, rx1087_bstack
    le $I18, 0, rx1087_cut2906
    dec $I18
    set $I18, rx1087_bstack[$I18]
  rx1087_cut2906:
    assign rx1087_cstack, $I18
  rx1087_jump2905:
    jump $I19
  rx1087_done2902:
    rx1087_cur."!cursor_fail"()
    .return (rx1087_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_174_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1091_tgt
    .local int rx1091_pos
    .local int rx1091_off
    .local int rx1091_eos
    .local int rx1091_rep
    .local pmc rx1091_cur
    .local pmc rx1091_curclass
    .local pmc rx1091_bstack
    .local pmc rx1091_cstack
    (rx1091_cur, rx1091_tgt, rx1091_pos, rx1091_curclass, rx1091_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1091_cur
    length rx1091_eos, rx1091_tgt
    eq $I19, 1, rx1091_restart2915
    gt rx1091_pos, rx1091_eos, rx1091_fail2916
    repr_get_attr_int $I11, self, rx1091_curclass, "$!from"
    ne $I11, -1, rxscan1092_done2922
    goto rxscan1092_scan2921
  rxscan1092_loop2920:
    inc rx1091_pos
    gt rx1091_pos, rx1091_eos, rx1091_fail2916
    repr_bind_attr_int rx1091_cur, rx1091_curclass, "$!from", rx1091_pos
  rxscan1092_scan2921:
    nqp_rxmark rx1091_bstack, rxscan1092_loop2920, rx1091_pos, 0
  rxscan1092_done2922:
    nqp_rxmark rx1091_bstack, rxcap1093_fail2924, rx1091_pos, 0
    add $I11, rx1091_pos, 2
    gt $I11, rx1091_eos, rx1091_fail2916
    substr $S10, rx1091_tgt, rx1091_pos, 2
    ne $S10, ucs4:"++", rx1091_fail2916
    add rx1091_pos, 2
    nqp_rxpeek $I19, rx1091_bstack, rxcap1093_fail2924
    inc $I19
    set $I11, rx1091_bstack[$I19]
    repr_bind_attr_int rx1091_cur, rx1091_curclass, "$!pos", rx1091_pos
    $P11 = rx1091_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1091_pos)
    rx1091_cstack = rx1091_cur."!cursor_capture"($P11, "sym")
    goto rxcap1093_done2923
  rxcap1093_fail2924:
    goto rx1091_fail2916
  rxcap1093_done2923:
    repr_bind_attr_int rx1091_cur, rx1091_curclass, "$!pos", rx1091_pos
    $P11 = rx1091_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1091_curclass, "$!pos"
    lt $I11, 0, rx1091_fail2916
    nqp_rxmark rx1091_bstack, rxsubrule1094_pass2925, -1, 0
  rxsubrule1094_pass2925:
    rx1091_cstack = rx1091_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1091_pos, $P11, rx1091_curclass, "$!pos"
    rx1091_cur."!cursor_pass"(rx1091_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1091_cur)
  rx1091_restart2915:
    repr_get_attr_obj rx1091_cstack, rx1091_cur, rx1091_curclass, "$!cstack"
  rx1091_fail2916:
    unless rx1091_bstack, rx1091_done2914
    pop $I19, rx1091_bstack
    if_null rx1091_cstack, rx1091_cstack_done2919
    unless rx1091_cstack, rx1091_cstack_done2919
    dec $I19
    set $P11, rx1091_cstack[$I19]
  rx1091_cstack_done2919:
    pop rx1091_rep, rx1091_bstack
    pop rx1091_pos, rx1091_bstack
    pop $I19, rx1091_bstack
    lt rx1091_pos, -1, rx1091_done2914
    lt rx1091_pos, 0, rx1091_fail2916
    eq $I19, 0, rx1091_fail2916
    nqp_islist $I20, rx1091_cstack
    unless $I20, rx1091_jump2917
    elements $I18, rx1091_bstack
    le $I18, 0, rx1091_cut2918
    dec $I18
    set $I18, rx1091_bstack[$I18]
  rx1091_cut2918:
    assign rx1091_cstack, $I18
  rx1091_jump2917:
    jump $I19
  rx1091_done2914:
    rx1091_cur."!cursor_fail"()
    .return (rx1091_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_175_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1095_tgt
    .local int rx1095_pos
    .local int rx1095_off
    .local int rx1095_eos
    .local int rx1095_rep
    .local pmc rx1095_cur
    .local pmc rx1095_curclass
    .local pmc rx1095_bstack
    .local pmc rx1095_cstack
    (rx1095_cur, rx1095_tgt, rx1095_pos, rx1095_curclass, rx1095_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1095_cur
    length rx1095_eos, rx1095_tgt
    eq $I19, 1, rx1095_restart2928
    gt rx1095_pos, rx1095_eos, rx1095_fail2929
    repr_get_attr_int $I11, self, rx1095_curclass, "$!from"
    ne $I11, -1, rxscan1096_done2935
    goto rxscan1096_scan2934
  rxscan1096_loop2933:
    inc rx1095_pos
    gt rx1095_pos, rx1095_eos, rx1095_fail2929
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!from", rx1095_pos
  rxscan1096_scan2934:
    nqp_rxmark rx1095_bstack, rxscan1096_loop2933, rx1095_pos, 0
  rxscan1096_done2935:
    nqp_rxmark rx1095_bstack, rxcap1097_fail2937, rx1095_pos, 0
    add $I11, rx1095_pos, 2
    gt $I11, rx1095_eos, rx1095_fail2929
    substr $S10, rx1095_tgt, rx1095_pos, 2
    ne $S10, ucs4:"--", rx1095_fail2929
    add rx1095_pos, 2
    nqp_rxpeek $I19, rx1095_bstack, rxcap1097_fail2937
    inc $I19
    set $I11, rx1095_bstack[$I19]
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!pos", rx1095_pos
    $P11 = rx1095_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1095_pos)
    rx1095_cstack = rx1095_cur."!cursor_capture"($P11, "sym")
    goto rxcap1097_done2936
  rxcap1097_fail2937:
    goto rx1095_fail2929
  rxcap1097_done2936:
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!pos", rx1095_pos
    $P11 = rx1095_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1095_curclass, "$!pos"
    lt $I11, 0, rx1095_fail2929
    nqp_rxmark rx1095_bstack, rxsubrule1098_pass2938, -1, 0
  rxsubrule1098_pass2938:
    rx1095_cstack = rx1095_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1095_pos, $P11, rx1095_curclass, "$!pos"
    rx1095_cur."!cursor_pass"(rx1095_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1095_cur)
  rx1095_restart2928:
    repr_get_attr_obj rx1095_cstack, rx1095_cur, rx1095_curclass, "$!cstack"
  rx1095_fail2929:
    unless rx1095_bstack, rx1095_done2927
    pop $I19, rx1095_bstack
    if_null rx1095_cstack, rx1095_cstack_done2932
    unless rx1095_cstack, rx1095_cstack_done2932
    dec $I19
    set $P11, rx1095_cstack[$I19]
  rx1095_cstack_done2932:
    pop rx1095_rep, rx1095_bstack
    pop rx1095_pos, rx1095_bstack
    pop $I19, rx1095_bstack
    lt rx1095_pos, -1, rx1095_done2927
    lt rx1095_pos, 0, rx1095_fail2929
    eq $I19, 0, rx1095_fail2929
    nqp_islist $I20, rx1095_cstack
    unless $I20, rx1095_jump2930
    elements $I18, rx1095_bstack
    le $I18, 0, rx1095_cut2931
    dec $I18
    set $I18, rx1095_bstack[$I18]
  rx1095_cut2931:
    assign rx1095_cstack, $I18
  rx1095_jump2930:
    jump $I19
  rx1095_done2927:
    rx1095_cur."!cursor_fail"()
    .return (rx1095_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_176_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1099_tgt
    .local int rx1099_pos
    .local int rx1099_off
    .local int rx1099_eos
    .local int rx1099_rep
    .local pmc rx1099_cur
    .local pmc rx1099_curclass
    .local pmc rx1099_bstack
    .local pmc rx1099_cstack
    (rx1099_cur, rx1099_tgt, rx1099_pos, rx1099_curclass, rx1099_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1099_cur
    length rx1099_eos, rx1099_tgt
    eq $I19, 1, rx1099_restart2941
    gt rx1099_pos, rx1099_eos, rx1099_fail2942
    repr_get_attr_int $I11, self, rx1099_curclass, "$!from"
    ne $I11, -1, rxscan1100_done2948
    goto rxscan1100_scan2947
  rxscan1100_loop2946:
    inc rx1099_pos
    gt rx1099_pos, rx1099_eos, rx1099_fail2942
    repr_bind_attr_int rx1099_cur, rx1099_curclass, "$!from", rx1099_pos
  rxscan1100_scan2947:
    nqp_rxmark rx1099_bstack, rxscan1100_loop2946, rx1099_pos, 0
  rxscan1100_done2948:
    nqp_rxmark rx1099_bstack, rxcap1101_fail2950, rx1099_pos, 0
    add $I11, rx1099_pos, 2
    gt $I11, rx1099_eos, rx1099_fail2942
    substr $S10, rx1099_tgt, rx1099_pos, 2
    ne $S10, ucs4:"++", rx1099_fail2942
    add rx1099_pos, 2
    nqp_rxpeek $I19, rx1099_bstack, rxcap1101_fail2950
    inc $I19
    set $I11, rx1099_bstack[$I19]
    repr_bind_attr_int rx1099_cur, rx1099_curclass, "$!pos", rx1099_pos
    $P11 = rx1099_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1099_pos)
    rx1099_cstack = rx1099_cur."!cursor_capture"($P11, "sym")
    goto rxcap1101_done2949
  rxcap1101_fail2950:
    goto rx1099_fail2942
  rxcap1101_done2949:
    repr_bind_attr_int rx1099_cur, rx1099_curclass, "$!pos", rx1099_pos
    $P11 = rx1099_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1099_curclass, "$!pos"
    lt $I11, 0, rx1099_fail2942
    nqp_rxmark rx1099_bstack, rxsubrule1102_pass2951, -1, 0
  rxsubrule1102_pass2951:
    rx1099_cstack = rx1099_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1099_pos, $P11, rx1099_curclass, "$!pos"
    rx1099_cur."!cursor_pass"(rx1099_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1099_cur)
  rx1099_restart2941:
    repr_get_attr_obj rx1099_cstack, rx1099_cur, rx1099_curclass, "$!cstack"
  rx1099_fail2942:
    unless rx1099_bstack, rx1099_done2940
    pop $I19, rx1099_bstack
    if_null rx1099_cstack, rx1099_cstack_done2945
    unless rx1099_cstack, rx1099_cstack_done2945
    dec $I19
    set $P11, rx1099_cstack[$I19]
  rx1099_cstack_done2945:
    pop rx1099_rep, rx1099_bstack
    pop rx1099_pos, rx1099_bstack
    pop $I19, rx1099_bstack
    lt rx1099_pos, -1, rx1099_done2940
    lt rx1099_pos, 0, rx1099_fail2942
    eq $I19, 0, rx1099_fail2942
    nqp_islist $I20, rx1099_cstack
    unless $I20, rx1099_jump2943
    elements $I18, rx1099_bstack
    le $I18, 0, rx1099_cut2944
    dec $I18
    set $I18, rx1099_bstack[$I18]
  rx1099_cut2944:
    assign rx1099_cstack, $I18
  rx1099_jump2943:
    jump $I19
  rx1099_done2940:
    rx1099_cur."!cursor_fail"()
    .return (rx1099_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_177_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1103_tgt
    .local int rx1103_pos
    .local int rx1103_off
    .local int rx1103_eos
    .local int rx1103_rep
    .local pmc rx1103_cur
    .local pmc rx1103_curclass
    .local pmc rx1103_bstack
    .local pmc rx1103_cstack
    (rx1103_cur, rx1103_tgt, rx1103_pos, rx1103_curclass, rx1103_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1103_cur
    length rx1103_eos, rx1103_tgt
    eq $I19, 1, rx1103_restart2954
    gt rx1103_pos, rx1103_eos, rx1103_fail2955
    repr_get_attr_int $I11, self, rx1103_curclass, "$!from"
    ne $I11, -1, rxscan1104_done2961
    goto rxscan1104_scan2960
  rxscan1104_loop2959:
    inc rx1103_pos
    gt rx1103_pos, rx1103_eos, rx1103_fail2955
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!from", rx1103_pos
  rxscan1104_scan2960:
    nqp_rxmark rx1103_bstack, rxscan1104_loop2959, rx1103_pos, 0
  rxscan1104_done2961:
    nqp_rxmark rx1103_bstack, rxcap1105_fail2963, rx1103_pos, 0
    add $I11, rx1103_pos, 2
    gt $I11, rx1103_eos, rx1103_fail2955
    substr $S10, rx1103_tgt, rx1103_pos, 2
    ne $S10, ucs4:"--", rx1103_fail2955
    add rx1103_pos, 2
    nqp_rxpeek $I19, rx1103_bstack, rxcap1105_fail2963
    inc $I19
    set $I11, rx1103_bstack[$I19]
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!pos", rx1103_pos
    $P11 = rx1103_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1103_pos)
    rx1103_cstack = rx1103_cur."!cursor_capture"($P11, "sym")
    goto rxcap1105_done2962
  rxcap1105_fail2963:
    goto rx1103_fail2955
  rxcap1105_done2962:
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!pos", rx1103_pos
    $P11 = rx1103_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1103_curclass, "$!pos"
    lt $I11, 0, rx1103_fail2955
    nqp_rxmark rx1103_bstack, rxsubrule1106_pass2964, -1, 0
  rxsubrule1106_pass2964:
    rx1103_cstack = rx1103_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1103_pos, $P11, rx1103_curclass, "$!pos"
    rx1103_cur."!cursor_pass"(rx1103_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1103_cur)
  rx1103_restart2954:
    repr_get_attr_obj rx1103_cstack, rx1103_cur, rx1103_curclass, "$!cstack"
  rx1103_fail2955:
    unless rx1103_bstack, rx1103_done2953
    pop $I19, rx1103_bstack
    if_null rx1103_cstack, rx1103_cstack_done2958
    unless rx1103_cstack, rx1103_cstack_done2958
    dec $I19
    set $P11, rx1103_cstack[$I19]
  rx1103_cstack_done2958:
    pop rx1103_rep, rx1103_bstack
    pop rx1103_pos, rx1103_bstack
    pop $I19, rx1103_bstack
    lt rx1103_pos, -1, rx1103_done2953
    lt rx1103_pos, 0, rx1103_fail2955
    eq $I19, 0, rx1103_fail2955
    nqp_islist $I20, rx1103_cstack
    unless $I20, rx1103_jump2956
    elements $I18, rx1103_bstack
    le $I18, 0, rx1103_cut2957
    dec $I18
    set $I18, rx1103_bstack[$I18]
  rx1103_cut2957:
    assign rx1103_cstack, $I18
  rx1103_jump2956:
    jump $I19
  rx1103_done2953:
    rx1103_cur."!cursor_fail"()
    .return (rx1103_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_178_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1107_tgt
    .local int rx1107_pos
    .local int rx1107_off
    .local int rx1107_eos
    .local int rx1107_rep
    .local pmc rx1107_cur
    .local pmc rx1107_curclass
    .local pmc rx1107_bstack
    .local pmc rx1107_cstack
    (rx1107_cur, rx1107_tgt, rx1107_pos, rx1107_curclass, rx1107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1107_cur
    length rx1107_eos, rx1107_tgt
    eq $I19, 1, rx1107_restart2967
    gt rx1107_pos, rx1107_eos, rx1107_fail2968
    repr_get_attr_int $I11, self, rx1107_curclass, "$!from"
    ne $I11, -1, rxscan1108_done2974
    goto rxscan1108_scan2973
  rxscan1108_loop2972:
    inc rx1107_pos
    gt rx1107_pos, rx1107_eos, rx1107_fail2968
    repr_bind_attr_int rx1107_cur, rx1107_curclass, "$!from", rx1107_pos
  rxscan1108_scan2973:
    nqp_rxmark rx1107_bstack, rxscan1108_loop2972, rx1107_pos, 0
  rxscan1108_done2974:
    nqp_rxmark rx1107_bstack, rxcap1109_fail2976, rx1107_pos, 0
    add $I11, rx1107_pos, 2
    gt $I11, rx1107_eos, rx1107_fail2968
    substr $S10, rx1107_tgt, rx1107_pos, 2
    ne $S10, ucs4:"**", rx1107_fail2968
    add rx1107_pos, 2
    nqp_rxpeek $I19, rx1107_bstack, rxcap1109_fail2976
    inc $I19
    set $I11, rx1107_bstack[$I19]
    repr_bind_attr_int rx1107_cur, rx1107_curclass, "$!pos", rx1107_pos
    $P11 = rx1107_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1107_pos)
    rx1107_cstack = rx1107_cur."!cursor_capture"($P11, "sym")
    goto rxcap1109_done2975
  rxcap1109_fail2976:
    goto rx1107_fail2968
  rxcap1109_done2975:
    repr_bind_attr_int rx1107_cur, rx1107_curclass, "$!pos", rx1107_pos
    $P11 = rx1107_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1107_curclass, "$!pos"
    lt $I11, 0, rx1107_fail2968
    nqp_rxmark rx1107_bstack, rxsubrule1110_pass2977, -1, 0
  rxsubrule1110_pass2977:
    rx1107_cstack = rx1107_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1107_pos, $P11, rx1107_curclass, "$!pos"
    rx1107_cur."!cursor_pass"(rx1107_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1107_cur)
  rx1107_restart2967:
    repr_get_attr_obj rx1107_cstack, rx1107_cur, rx1107_curclass, "$!cstack"
  rx1107_fail2968:
    unless rx1107_bstack, rx1107_done2966
    pop $I19, rx1107_bstack
    if_null rx1107_cstack, rx1107_cstack_done2971
    unless rx1107_cstack, rx1107_cstack_done2971
    dec $I19
    set $P11, rx1107_cstack[$I19]
  rx1107_cstack_done2971:
    pop rx1107_rep, rx1107_bstack
    pop rx1107_pos, rx1107_bstack
    pop $I19, rx1107_bstack
    lt rx1107_pos, -1, rx1107_done2966
    lt rx1107_pos, 0, rx1107_fail2968
    eq $I19, 0, rx1107_fail2968
    nqp_islist $I20, rx1107_cstack
    unless $I20, rx1107_jump2969
    elements $I18, rx1107_bstack
    le $I18, 0, rx1107_cut2970
    dec $I18
    set $I18, rx1107_bstack[$I18]
  rx1107_cut2970:
    assign rx1107_cstack, $I18
  rx1107_jump2969:
    jump $I19
  rx1107_done2966:
    rx1107_cur."!cursor_fail"()
    .return (rx1107_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_179_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1111_tgt
    .local int rx1111_pos
    .local int rx1111_off
    .local int rx1111_eos
    .local int rx1111_rep
    .local pmc rx1111_cur
    .local pmc rx1111_curclass
    .local pmc rx1111_bstack
    .local pmc rx1111_cstack
    (rx1111_cur, rx1111_tgt, rx1111_pos, rx1111_curclass, rx1111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1111_cur
    length rx1111_eos, rx1111_tgt
    eq $I19, 1, rx1111_restart2980
    gt rx1111_pos, rx1111_eos, rx1111_fail2981
    repr_get_attr_int $I11, self, rx1111_curclass, "$!from"
    ne $I11, -1, rxscan1112_done2987
    goto rxscan1112_scan2986
  rxscan1112_loop2985:
    inc rx1111_pos
    gt rx1111_pos, rx1111_eos, rx1111_fail2981
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!from", rx1111_pos
  rxscan1112_scan2986:
    nqp_rxmark rx1111_bstack, rxscan1112_loop2985, rx1111_pos, 0
  rxscan1112_done2987:
    nqp_rxmark rx1111_bstack, rxcap1113_fail2989, rx1111_pos, 0
    add $I11, rx1111_pos, 1
    gt $I11, rx1111_eos, rx1111_fail2981
    substr $S10, rx1111_tgt, rx1111_pos, 1
    ne $S10, ucs4:"+", rx1111_fail2981
    add rx1111_pos, 1
    nqp_rxpeek $I19, rx1111_bstack, rxcap1113_fail2989
    inc $I19
    set $I11, rx1111_bstack[$I19]
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!pos", rx1111_pos
    $P11 = rx1111_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1111_pos)
    rx1111_cstack = rx1111_cur."!cursor_capture"($P11, "sym")
    goto rxcap1113_done2988
  rxcap1113_fail2989:
    goto rx1111_fail2981
  rxcap1113_done2988:
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!pos", rx1111_pos
    $P11 = rx1111_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1111_curclass, "$!pos"
    lt $I11, 0, rx1111_fail2981
    nqp_rxmark rx1111_bstack, rxsubrule1114_pass2990, -1, 0
  rxsubrule1114_pass2990:
    rx1111_cstack = rx1111_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1111_pos, $P11, rx1111_curclass, "$!pos"
    rx1111_cur."!cursor_pass"(rx1111_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1111_cur)
  rx1111_restart2980:
    repr_get_attr_obj rx1111_cstack, rx1111_cur, rx1111_curclass, "$!cstack"
  rx1111_fail2981:
    unless rx1111_bstack, rx1111_done2979
    pop $I19, rx1111_bstack
    if_null rx1111_cstack, rx1111_cstack_done2984
    unless rx1111_cstack, rx1111_cstack_done2984
    dec $I19
    set $P11, rx1111_cstack[$I19]
  rx1111_cstack_done2984:
    pop rx1111_rep, rx1111_bstack
    pop rx1111_pos, rx1111_bstack
    pop $I19, rx1111_bstack
    lt rx1111_pos, -1, rx1111_done2979
    lt rx1111_pos, 0, rx1111_fail2981
    eq $I19, 0, rx1111_fail2981
    nqp_islist $I20, rx1111_cstack
    unless $I20, rx1111_jump2982
    elements $I18, rx1111_bstack
    le $I18, 0, rx1111_cut2983
    dec $I18
    set $I18, rx1111_bstack[$I18]
  rx1111_cut2983:
    assign rx1111_cstack, $I18
  rx1111_jump2982:
    jump $I19
  rx1111_done2979:
    rx1111_cur."!cursor_fail"()
    .return (rx1111_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_180_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1115_tgt
    .local int rx1115_pos
    .local int rx1115_off
    .local int rx1115_eos
    .local int rx1115_rep
    .local pmc rx1115_cur
    .local pmc rx1115_curclass
    .local pmc rx1115_bstack
    .local pmc rx1115_cstack
    (rx1115_cur, rx1115_tgt, rx1115_pos, rx1115_curclass, rx1115_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1115_cur
    length rx1115_eos, rx1115_tgt
    eq $I19, 1, rx1115_restart2993
    gt rx1115_pos, rx1115_eos, rx1115_fail2994
    repr_get_attr_int $I11, self, rx1115_curclass, "$!from"
    ne $I11, -1, rxscan1116_done3000
    goto rxscan1116_scan2999
  rxscan1116_loop2998:
    inc rx1115_pos
    gt rx1115_pos, rx1115_eos, rx1115_fail2994
    repr_bind_attr_int rx1115_cur, rx1115_curclass, "$!from", rx1115_pos
  rxscan1116_scan2999:
    nqp_rxmark rx1115_bstack, rxscan1116_loop2998, rx1115_pos, 0
  rxscan1116_done3000:
    nqp_rxmark rx1115_bstack, rxcap1117_fail3002, rx1115_pos, 0
    add $I11, rx1115_pos, 1
    gt $I11, rx1115_eos, rx1115_fail2994
    substr $S10, rx1115_tgt, rx1115_pos, 1
    ne $S10, ucs4:"~", rx1115_fail2994
    add rx1115_pos, 1
    nqp_rxpeek $I19, rx1115_bstack, rxcap1117_fail3002
    inc $I19
    set $I11, rx1115_bstack[$I19]
    repr_bind_attr_int rx1115_cur, rx1115_curclass, "$!pos", rx1115_pos
    $P11 = rx1115_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1115_pos)
    rx1115_cstack = rx1115_cur."!cursor_capture"($P11, "sym")
    goto rxcap1117_done3001
  rxcap1117_fail3002:
    goto rx1115_fail2994
  rxcap1117_done3001:
    repr_bind_attr_int rx1115_cur, rx1115_curclass, "$!pos", rx1115_pos
    $P11 = rx1115_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1115_curclass, "$!pos"
    lt $I11, 0, rx1115_fail2994
    nqp_rxmark rx1115_bstack, rxsubrule1118_pass3003, -1, 0
  rxsubrule1118_pass3003:
    rx1115_cstack = rx1115_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1115_pos, $P11, rx1115_curclass, "$!pos"
    rx1115_cur."!cursor_pass"(rx1115_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1115_cur)
  rx1115_restart2993:
    repr_get_attr_obj rx1115_cstack, rx1115_cur, rx1115_curclass, "$!cstack"
  rx1115_fail2994:
    unless rx1115_bstack, rx1115_done2992
    pop $I19, rx1115_bstack
    if_null rx1115_cstack, rx1115_cstack_done2997
    unless rx1115_cstack, rx1115_cstack_done2997
    dec $I19
    set $P11, rx1115_cstack[$I19]
  rx1115_cstack_done2997:
    pop rx1115_rep, rx1115_bstack
    pop rx1115_pos, rx1115_bstack
    pop $I19, rx1115_bstack
    lt rx1115_pos, -1, rx1115_done2992
    lt rx1115_pos, 0, rx1115_fail2994
    eq $I19, 0, rx1115_fail2994
    nqp_islist $I20, rx1115_cstack
    unless $I20, rx1115_jump2995
    elements $I18, rx1115_bstack
    le $I18, 0, rx1115_cut2996
    dec $I18
    set $I18, rx1115_bstack[$I18]
  rx1115_cut2996:
    assign rx1115_cstack, $I18
  rx1115_jump2995:
    jump $I19
  rx1115_done2992:
    rx1115_cur."!cursor_fail"()
    .return (rx1115_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_181_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1119_tgt
    .local int rx1119_pos
    .local int rx1119_off
    .local int rx1119_eos
    .local int rx1119_rep
    .local pmc rx1119_cur
    .local pmc rx1119_curclass
    .local pmc rx1119_bstack
    .local pmc rx1119_cstack
    (rx1119_cur, rx1119_tgt, rx1119_pos, rx1119_curclass, rx1119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1119_cur
    length rx1119_eos, rx1119_tgt
    eq $I19, 1, rx1119_restart3006
    gt rx1119_pos, rx1119_eos, rx1119_fail3007
    repr_get_attr_int $I11, self, rx1119_curclass, "$!from"
    ne $I11, -1, rxscan1120_done3013
    goto rxscan1120_scan3012
  rxscan1120_loop3011:
    inc rx1119_pos
    gt rx1119_pos, rx1119_eos, rx1119_fail3007
    repr_bind_attr_int rx1119_cur, rx1119_curclass, "$!from", rx1119_pos
  rxscan1120_scan3012:
    nqp_rxmark rx1119_bstack, rxscan1120_loop3011, rx1119_pos, 0
  rxscan1120_done3013:
    nqp_rxmark rx1119_bstack, rxcap1121_fail3015, rx1119_pos, 0
    add $I11, rx1119_pos, 1
    gt $I11, rx1119_eos, rx1119_fail3007
    substr $S10, rx1119_tgt, rx1119_pos, 1
    ne $S10, ucs4:"-", rx1119_fail3007
    add rx1119_pos, 1
    nqp_rxpeek $I19, rx1119_bstack, rxcap1121_fail3015
    inc $I19
    set $I11, rx1119_bstack[$I19]
    repr_bind_attr_int rx1119_cur, rx1119_curclass, "$!pos", rx1119_pos
    $P11 = rx1119_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1119_pos)
    rx1119_cstack = rx1119_cur."!cursor_capture"($P11, "sym")
    goto rxcap1121_done3014
  rxcap1121_fail3015:
    goto rx1119_fail3007
  rxcap1121_done3014:
    ge rx1119_pos, rx1119_eos, rx1119_fail3007
    substr $S11, rx1119_tgt, rx1119_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1119_fail3007
    repr_bind_attr_int rx1119_cur, rx1119_curclass, "$!pos", rx1119_pos
    $P11 = rx1119_cur."number"()
    repr_get_attr_int $I11, $P11, rx1119_curclass, "$!pos"
    ge $I11, 0, rx1119_fail3007
    repr_bind_attr_int rx1119_cur, rx1119_curclass, "$!pos", rx1119_pos
    $P11 = rx1119_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1119_curclass, "$!pos"
    lt $I11, 0, rx1119_fail3007
    nqp_rxmark rx1119_bstack, rxsubrule1122_pass3016, -1, 0
  rxsubrule1122_pass3016:
    rx1119_cstack = rx1119_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1119_pos, $P11, rx1119_curclass, "$!pos"
    rx1119_cur."!cursor_pass"(rx1119_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1119_cur)
  rx1119_restart3006:
    repr_get_attr_obj rx1119_cstack, rx1119_cur, rx1119_curclass, "$!cstack"
  rx1119_fail3007:
    unless rx1119_bstack, rx1119_done3005
    pop $I19, rx1119_bstack
    if_null rx1119_cstack, rx1119_cstack_done3010
    unless rx1119_cstack, rx1119_cstack_done3010
    dec $I19
    set $P11, rx1119_cstack[$I19]
  rx1119_cstack_done3010:
    pop rx1119_rep, rx1119_bstack
    pop rx1119_pos, rx1119_bstack
    pop $I19, rx1119_bstack
    lt rx1119_pos, -1, rx1119_done3005
    lt rx1119_pos, 0, rx1119_fail3007
    eq $I19, 0, rx1119_fail3007
    nqp_islist $I20, rx1119_cstack
    unless $I20, rx1119_jump3008
    elements $I18, rx1119_bstack
    le $I18, 0, rx1119_cut3009
    dec $I18
    set $I18, rx1119_bstack[$I18]
  rx1119_cut3009:
    assign rx1119_cstack, $I18
  rx1119_jump3008:
    jump $I19
  rx1119_done3005:
    rx1119_cur."!cursor_fail"()
    .return (rx1119_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_182_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1123_tgt
    .local int rx1123_pos
    .local int rx1123_off
    .local int rx1123_eos
    .local int rx1123_rep
    .local pmc rx1123_cur
    .local pmc rx1123_curclass
    .local pmc rx1123_bstack
    .local pmc rx1123_cstack
    (rx1123_cur, rx1123_tgt, rx1123_pos, rx1123_curclass, rx1123_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1123_cur
    length rx1123_eos, rx1123_tgt
    eq $I19, 1, rx1123_restart3019
    gt rx1123_pos, rx1123_eos, rx1123_fail3020
    repr_get_attr_int $I11, self, rx1123_curclass, "$!from"
    ne $I11, -1, rxscan1124_done3026
    goto rxscan1124_scan3025
  rxscan1124_loop3024:
    inc rx1123_pos
    gt rx1123_pos, rx1123_eos, rx1123_fail3020
    repr_bind_attr_int rx1123_cur, rx1123_curclass, "$!from", rx1123_pos
  rxscan1124_scan3025:
    nqp_rxmark rx1123_bstack, rxscan1124_loop3024, rx1123_pos, 0
  rxscan1124_done3026:
    nqp_rxmark rx1123_bstack, rxcap1125_fail3028, rx1123_pos, 0
    add $I11, rx1123_pos, 1
    gt $I11, rx1123_eos, rx1123_fail3020
    substr $S10, rx1123_tgt, rx1123_pos, 1
    ne $S10, ucs4:"?", rx1123_fail3020
    add rx1123_pos, 1
    nqp_rxpeek $I19, rx1123_bstack, rxcap1125_fail3028
    inc $I19
    set $I11, rx1123_bstack[$I19]
    repr_bind_attr_int rx1123_cur, rx1123_curclass, "$!pos", rx1123_pos
    $P11 = rx1123_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1123_pos)
    rx1123_cstack = rx1123_cur."!cursor_capture"($P11, "sym")
    goto rxcap1125_done3027
  rxcap1125_fail3028:
    goto rx1123_fail3020
  rxcap1125_done3027:
    repr_bind_attr_int rx1123_cur, rx1123_curclass, "$!pos", rx1123_pos
    $P11 = rx1123_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1123_curclass, "$!pos"
    lt $I11, 0, rx1123_fail3020
    nqp_rxmark rx1123_bstack, rxsubrule1126_pass3029, -1, 0
  rxsubrule1126_pass3029:
    rx1123_cstack = rx1123_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1123_pos, $P11, rx1123_curclass, "$!pos"
    rx1123_cur."!cursor_pass"(rx1123_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1123_cur)
  rx1123_restart3019:
    repr_get_attr_obj rx1123_cstack, rx1123_cur, rx1123_curclass, "$!cstack"
  rx1123_fail3020:
    unless rx1123_bstack, rx1123_done3018
    pop $I19, rx1123_bstack
    if_null rx1123_cstack, rx1123_cstack_done3023
    unless rx1123_cstack, rx1123_cstack_done3023
    dec $I19
    set $P11, rx1123_cstack[$I19]
  rx1123_cstack_done3023:
    pop rx1123_rep, rx1123_bstack
    pop rx1123_pos, rx1123_bstack
    pop $I19, rx1123_bstack
    lt rx1123_pos, -1, rx1123_done3018
    lt rx1123_pos, 0, rx1123_fail3020
    eq $I19, 0, rx1123_fail3020
    nqp_islist $I20, rx1123_cstack
    unless $I20, rx1123_jump3021
    elements $I18, rx1123_bstack
    le $I18, 0, rx1123_cut3022
    dec $I18
    set $I18, rx1123_bstack[$I18]
  rx1123_cut3022:
    assign rx1123_cstack, $I18
  rx1123_jump3021:
    jump $I19
  rx1123_done3018:
    rx1123_cur."!cursor_fail"()
    .return (rx1123_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_183_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1127_tgt
    .local int rx1127_pos
    .local int rx1127_off
    .local int rx1127_eos
    .local int rx1127_rep
    .local pmc rx1127_cur
    .local pmc rx1127_curclass
    .local pmc rx1127_bstack
    .local pmc rx1127_cstack
    (rx1127_cur, rx1127_tgt, rx1127_pos, rx1127_curclass, rx1127_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1127_cur
    length rx1127_eos, rx1127_tgt
    eq $I19, 1, rx1127_restart3032
    gt rx1127_pos, rx1127_eos, rx1127_fail3033
    repr_get_attr_int $I11, self, rx1127_curclass, "$!from"
    ne $I11, -1, rxscan1128_done3039
    goto rxscan1128_scan3038
  rxscan1128_loop3037:
    inc rx1127_pos
    gt rx1127_pos, rx1127_eos, rx1127_fail3033
    repr_bind_attr_int rx1127_cur, rx1127_curclass, "$!from", rx1127_pos
  rxscan1128_scan3038:
    nqp_rxmark rx1127_bstack, rxscan1128_loop3037, rx1127_pos, 0
  rxscan1128_done3039:
    nqp_rxmark rx1127_bstack, rxcap1129_fail3041, rx1127_pos, 0
    add $I11, rx1127_pos, 1
    gt $I11, rx1127_eos, rx1127_fail3033
    substr $S10, rx1127_tgt, rx1127_pos, 1
    ne $S10, ucs4:"!", rx1127_fail3033
    add rx1127_pos, 1
    nqp_rxpeek $I19, rx1127_bstack, rxcap1129_fail3041
    inc $I19
    set $I11, rx1127_bstack[$I19]
    repr_bind_attr_int rx1127_cur, rx1127_curclass, "$!pos", rx1127_pos
    $P11 = rx1127_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1127_pos)
    rx1127_cstack = rx1127_cur."!cursor_capture"($P11, "sym")
    goto rxcap1129_done3040
  rxcap1129_fail3041:
    goto rx1127_fail3033
  rxcap1129_done3040:
    repr_bind_attr_int rx1127_cur, rx1127_curclass, "$!pos", rx1127_pos
    $P11 = rx1127_cur."O"("%symbolic_unary, :op<falsey>")
    repr_get_attr_int $I11, $P11, rx1127_curclass, "$!pos"
    lt $I11, 0, rx1127_fail3033
    nqp_rxmark rx1127_bstack, rxsubrule1130_pass3042, -1, 0
  rxsubrule1130_pass3042:
    rx1127_cstack = rx1127_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1127_pos, $P11, rx1127_curclass, "$!pos"
    rx1127_cur."!cursor_pass"(rx1127_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1127_cur)
  rx1127_restart3032:
    repr_get_attr_obj rx1127_cstack, rx1127_cur, rx1127_curclass, "$!cstack"
  rx1127_fail3033:
    unless rx1127_bstack, rx1127_done3031
    pop $I19, rx1127_bstack
    if_null rx1127_cstack, rx1127_cstack_done3036
    unless rx1127_cstack, rx1127_cstack_done3036
    dec $I19
    set $P11, rx1127_cstack[$I19]
  rx1127_cstack_done3036:
    pop rx1127_rep, rx1127_bstack
    pop rx1127_pos, rx1127_bstack
    pop $I19, rx1127_bstack
    lt rx1127_pos, -1, rx1127_done3031
    lt rx1127_pos, 0, rx1127_fail3033
    eq $I19, 0, rx1127_fail3033
    nqp_islist $I20, rx1127_cstack
    unless $I20, rx1127_jump3034
    elements $I18, rx1127_bstack
    le $I18, 0, rx1127_cut3035
    dec $I18
    set $I18, rx1127_bstack[$I18]
  rx1127_cut3035:
    assign rx1127_cstack, $I18
  rx1127_jump3034:
    jump $I19
  rx1127_done3031:
    rx1127_cur."!cursor_fail"()
    .return (rx1127_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_184_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1131_tgt
    .local int rx1131_pos
    .local int rx1131_off
    .local int rx1131_eos
    .local int rx1131_rep
    .local pmc rx1131_cur
    .local pmc rx1131_curclass
    .local pmc rx1131_bstack
    .local pmc rx1131_cstack
    (rx1131_cur, rx1131_tgt, rx1131_pos, rx1131_curclass, rx1131_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1131_cur
    length rx1131_eos, rx1131_tgt
    eq $I19, 1, rx1131_restart3045
    gt rx1131_pos, rx1131_eos, rx1131_fail3046
    repr_get_attr_int $I11, self, rx1131_curclass, "$!from"
    ne $I11, -1, rxscan1132_done3052
    goto rxscan1132_scan3051
  rxscan1132_loop3050:
    inc rx1131_pos
    gt rx1131_pos, rx1131_eos, rx1131_fail3046
    repr_bind_attr_int rx1131_cur, rx1131_curclass, "$!from", rx1131_pos
  rxscan1132_scan3051:
    nqp_rxmark rx1131_bstack, rxscan1132_loop3050, rx1131_pos, 0
  rxscan1132_done3052:
    nqp_rxmark rx1131_bstack, rxcap1133_fail3054, rx1131_pos, 0
    add $I11, rx1131_pos, 1
    gt $I11, rx1131_eos, rx1131_fail3046
    substr $S10, rx1131_tgt, rx1131_pos, 1
    ne $S10, ucs4:"|", rx1131_fail3046
    add rx1131_pos, 1
    nqp_rxpeek $I19, rx1131_bstack, rxcap1133_fail3054
    inc $I19
    set $I11, rx1131_bstack[$I19]
    repr_bind_attr_int rx1131_cur, rx1131_curclass, "$!pos", rx1131_pos
    $P11 = rx1131_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1131_pos)
    rx1131_cstack = rx1131_cur."!cursor_capture"($P11, "sym")
    goto rxcap1133_done3053
  rxcap1133_fail3054:
    goto rx1131_fail3046
  rxcap1133_done3053:
    repr_bind_attr_int rx1131_cur, rx1131_curclass, "$!pos", rx1131_pos
    $P11 = rx1131_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1131_curclass, "$!pos"
    lt $I11, 0, rx1131_fail3046
    nqp_rxmark rx1131_bstack, rxsubrule1134_pass3055, -1, 0
  rxsubrule1134_pass3055:
    rx1131_cstack = rx1131_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1131_pos, $P11, rx1131_curclass, "$!pos"
    rx1131_cur."!cursor_pass"(rx1131_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1131_cur)
  rx1131_restart3045:
    repr_get_attr_obj rx1131_cstack, rx1131_cur, rx1131_curclass, "$!cstack"
  rx1131_fail3046:
    unless rx1131_bstack, rx1131_done3044
    pop $I19, rx1131_bstack
    if_null rx1131_cstack, rx1131_cstack_done3049
    unless rx1131_cstack, rx1131_cstack_done3049
    dec $I19
    set $P11, rx1131_cstack[$I19]
  rx1131_cstack_done3049:
    pop rx1131_rep, rx1131_bstack
    pop rx1131_pos, rx1131_bstack
    pop $I19, rx1131_bstack
    lt rx1131_pos, -1, rx1131_done3044
    lt rx1131_pos, 0, rx1131_fail3046
    eq $I19, 0, rx1131_fail3046
    nqp_islist $I20, rx1131_cstack
    unless $I20, rx1131_jump3047
    elements $I18, rx1131_bstack
    le $I18, 0, rx1131_cut3048
    dec $I18
    set $I18, rx1131_bstack[$I18]
  rx1131_cut3048:
    assign rx1131_cstack, $I18
  rx1131_jump3047:
    jump $I19
  rx1131_done3044:
    rx1131_cur."!cursor_fail"()
    .return (rx1131_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_185_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1135_tgt
    .local int rx1135_pos
    .local int rx1135_off
    .local int rx1135_eos
    .local int rx1135_rep
    .local pmc rx1135_cur
    .local pmc rx1135_curclass
    .local pmc rx1135_bstack
    .local pmc rx1135_cstack
    (rx1135_cur, rx1135_tgt, rx1135_pos, rx1135_curclass, rx1135_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1135_cur
    length rx1135_eos, rx1135_tgt
    eq $I19, 1, rx1135_restart3058
    gt rx1135_pos, rx1135_eos, rx1135_fail3059
    repr_get_attr_int $I11, self, rx1135_curclass, "$!from"
    ne $I11, -1, rxscan1136_done3065
    goto rxscan1136_scan3064
  rxscan1136_loop3063:
    inc rx1135_pos
    gt rx1135_pos, rx1135_eos, rx1135_fail3059
    repr_bind_attr_int rx1135_cur, rx1135_curclass, "$!from", rx1135_pos
  rxscan1136_scan3064:
    nqp_rxmark rx1135_bstack, rxscan1136_loop3063, rx1135_pos, 0
  rxscan1136_done3065:
    nqp_rxmark rx1135_bstack, rxcap1137_fail3067, rx1135_pos, 0
    add $I11, rx1135_pos, 1
    gt $I11, rx1135_eos, rx1135_fail3059
    substr $S10, rx1135_tgt, rx1135_pos, 1
    ne $S10, ucs4:"*", rx1135_fail3059
    add rx1135_pos, 1
    nqp_rxpeek $I19, rx1135_bstack, rxcap1137_fail3067
    inc $I19
    set $I11, rx1135_bstack[$I19]
    repr_bind_attr_int rx1135_cur, rx1135_curclass, "$!pos", rx1135_pos
    $P11 = rx1135_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1135_pos)
    rx1135_cstack = rx1135_cur."!cursor_capture"($P11, "sym")
    goto rxcap1137_done3066
  rxcap1137_fail3067:
    goto rx1135_fail3059
  rxcap1137_done3066:
    repr_bind_attr_int rx1135_cur, rx1135_curclass, "$!pos", rx1135_pos
    $P11 = rx1135_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1135_curclass, "$!pos"
    lt $I11, 0, rx1135_fail3059
    nqp_rxmark rx1135_bstack, rxsubrule1138_pass3068, -1, 0
  rxsubrule1138_pass3068:
    rx1135_cstack = rx1135_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1135_pos, $P11, rx1135_curclass, "$!pos"
    rx1135_cur."!cursor_pass"(rx1135_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1135_cur)
  rx1135_restart3058:
    repr_get_attr_obj rx1135_cstack, rx1135_cur, rx1135_curclass, "$!cstack"
  rx1135_fail3059:
    unless rx1135_bstack, rx1135_done3057
    pop $I19, rx1135_bstack
    if_null rx1135_cstack, rx1135_cstack_done3062
    unless rx1135_cstack, rx1135_cstack_done3062
    dec $I19
    set $P11, rx1135_cstack[$I19]
  rx1135_cstack_done3062:
    pop rx1135_rep, rx1135_bstack
    pop rx1135_pos, rx1135_bstack
    pop $I19, rx1135_bstack
    lt rx1135_pos, -1, rx1135_done3057
    lt rx1135_pos, 0, rx1135_fail3059
    eq $I19, 0, rx1135_fail3059
    nqp_islist $I20, rx1135_cstack
    unless $I20, rx1135_jump3060
    elements $I18, rx1135_bstack
    le $I18, 0, rx1135_cut3061
    dec $I18
    set $I18, rx1135_bstack[$I18]
  rx1135_cut3061:
    assign rx1135_cstack, $I18
  rx1135_jump3060:
    jump $I19
  rx1135_done3057:
    rx1135_cur."!cursor_fail"()
    .return (rx1135_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_186_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1139_tgt
    .local int rx1139_pos
    .local int rx1139_off
    .local int rx1139_eos
    .local int rx1139_rep
    .local pmc rx1139_cur
    .local pmc rx1139_curclass
    .local pmc rx1139_bstack
    .local pmc rx1139_cstack
    (rx1139_cur, rx1139_tgt, rx1139_pos, rx1139_curclass, rx1139_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1139_cur
    length rx1139_eos, rx1139_tgt
    eq $I19, 1, rx1139_restart3071
    gt rx1139_pos, rx1139_eos, rx1139_fail3072
    repr_get_attr_int $I11, self, rx1139_curclass, "$!from"
    ne $I11, -1, rxscan1140_done3078
    goto rxscan1140_scan3077
  rxscan1140_loop3076:
    inc rx1139_pos
    gt rx1139_pos, rx1139_eos, rx1139_fail3072
    repr_bind_attr_int rx1139_cur, rx1139_curclass, "$!from", rx1139_pos
  rxscan1140_scan3077:
    nqp_rxmark rx1139_bstack, rxscan1140_loop3076, rx1139_pos, 0
  rxscan1140_done3078:
    nqp_rxmark rx1139_bstack, rxcap1141_fail3080, rx1139_pos, 0
    add $I11, rx1139_pos, 1
    gt $I11, rx1139_eos, rx1139_fail3072
    substr $S10, rx1139_tgt, rx1139_pos, 1
    ne $S10, ucs4:"/", rx1139_fail3072
    add rx1139_pos, 1
    nqp_rxpeek $I19, rx1139_bstack, rxcap1141_fail3080
    inc $I19
    set $I11, rx1139_bstack[$I19]
    repr_bind_attr_int rx1139_cur, rx1139_curclass, "$!pos", rx1139_pos
    $P11 = rx1139_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1139_pos)
    rx1139_cstack = rx1139_cur."!cursor_capture"($P11, "sym")
    goto rxcap1141_done3079
  rxcap1141_fail3080:
    goto rx1139_fail3072
  rxcap1141_done3079:
    repr_bind_attr_int rx1139_cur, rx1139_curclass, "$!pos", rx1139_pos
    $P11 = rx1139_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1139_curclass, "$!pos"
    lt $I11, 0, rx1139_fail3072
    nqp_rxmark rx1139_bstack, rxsubrule1142_pass3081, -1, 0
  rxsubrule1142_pass3081:
    rx1139_cstack = rx1139_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1139_pos, $P11, rx1139_curclass, "$!pos"
    rx1139_cur."!cursor_pass"(rx1139_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1139_cur)
  rx1139_restart3071:
    repr_get_attr_obj rx1139_cstack, rx1139_cur, rx1139_curclass, "$!cstack"
  rx1139_fail3072:
    unless rx1139_bstack, rx1139_done3070
    pop $I19, rx1139_bstack
    if_null rx1139_cstack, rx1139_cstack_done3075
    unless rx1139_cstack, rx1139_cstack_done3075
    dec $I19
    set $P11, rx1139_cstack[$I19]
  rx1139_cstack_done3075:
    pop rx1139_rep, rx1139_bstack
    pop rx1139_pos, rx1139_bstack
    pop $I19, rx1139_bstack
    lt rx1139_pos, -1, rx1139_done3070
    lt rx1139_pos, 0, rx1139_fail3072
    eq $I19, 0, rx1139_fail3072
    nqp_islist $I20, rx1139_cstack
    unless $I20, rx1139_jump3073
    elements $I18, rx1139_bstack
    le $I18, 0, rx1139_cut3074
    dec $I18
    set $I18, rx1139_bstack[$I18]
  rx1139_cut3074:
    assign rx1139_cstack, $I18
  rx1139_jump3073:
    jump $I19
  rx1139_done3070:
    rx1139_cur."!cursor_fail"()
    .return (rx1139_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_187_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1143_tgt
    .local int rx1143_pos
    .local int rx1143_off
    .local int rx1143_eos
    .local int rx1143_rep
    .local pmc rx1143_cur
    .local pmc rx1143_curclass
    .local pmc rx1143_bstack
    .local pmc rx1143_cstack
    (rx1143_cur, rx1143_tgt, rx1143_pos, rx1143_curclass, rx1143_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1143_cur
    length rx1143_eos, rx1143_tgt
    eq $I19, 1, rx1143_restart3084
    gt rx1143_pos, rx1143_eos, rx1143_fail3085
    repr_get_attr_int $I11, self, rx1143_curclass, "$!from"
    ne $I11, -1, rxscan1144_done3091
    goto rxscan1144_scan3090
  rxscan1144_loop3089:
    inc rx1143_pos
    gt rx1143_pos, rx1143_eos, rx1143_fail3085
    repr_bind_attr_int rx1143_cur, rx1143_curclass, "$!from", rx1143_pos
  rxscan1144_scan3090:
    nqp_rxmark rx1143_bstack, rxscan1144_loop3089, rx1143_pos, 0
  rxscan1144_done3091:
    nqp_rxmark rx1143_bstack, rxcap1145_fail3093, rx1143_pos, 0
    add $I11, rx1143_pos, 1
    gt $I11, rx1143_eos, rx1143_fail3085
    substr $S10, rx1143_tgt, rx1143_pos, 1
    ne $S10, ucs4:"%", rx1143_fail3085
    add rx1143_pos, 1
    nqp_rxpeek $I19, rx1143_bstack, rxcap1145_fail3093
    inc $I19
    set $I11, rx1143_bstack[$I19]
    repr_bind_attr_int rx1143_cur, rx1143_curclass, "$!pos", rx1143_pos
    $P11 = rx1143_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1143_pos)
    rx1143_cstack = rx1143_cur."!cursor_capture"($P11, "sym")
    goto rxcap1145_done3092
  rxcap1145_fail3093:
    goto rx1143_fail3085
  rxcap1145_done3092:
    repr_bind_attr_int rx1143_cur, rx1143_curclass, "$!pos", rx1143_pos
    $P11 = rx1143_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1143_curclass, "$!pos"
    lt $I11, 0, rx1143_fail3085
    nqp_rxmark rx1143_bstack, rxsubrule1146_pass3094, -1, 0
  rxsubrule1146_pass3094:
    rx1143_cstack = rx1143_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1143_pos, $P11, rx1143_curclass, "$!pos"
    rx1143_cur."!cursor_pass"(rx1143_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1143_cur)
  rx1143_restart3084:
    repr_get_attr_obj rx1143_cstack, rx1143_cur, rx1143_curclass, "$!cstack"
  rx1143_fail3085:
    unless rx1143_bstack, rx1143_done3083
    pop $I19, rx1143_bstack
    if_null rx1143_cstack, rx1143_cstack_done3088
    unless rx1143_cstack, rx1143_cstack_done3088
    dec $I19
    set $P11, rx1143_cstack[$I19]
  rx1143_cstack_done3088:
    pop rx1143_rep, rx1143_bstack
    pop rx1143_pos, rx1143_bstack
    pop $I19, rx1143_bstack
    lt rx1143_pos, -1, rx1143_done3083
    lt rx1143_pos, 0, rx1143_fail3085
    eq $I19, 0, rx1143_fail3085
    nqp_islist $I20, rx1143_cstack
    unless $I20, rx1143_jump3086
    elements $I18, rx1143_bstack
    le $I18, 0, rx1143_cut3087
    dec $I18
    set $I18, rx1143_bstack[$I18]
  rx1143_cut3087:
    assign rx1143_cstack, $I18
  rx1143_jump3086:
    jump $I19
  rx1143_done3083:
    rx1143_cur."!cursor_fail"()
    .return (rx1143_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_188_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1147_tgt
    .local int rx1147_pos
    .local int rx1147_off
    .local int rx1147_eos
    .local int rx1147_rep
    .local pmc rx1147_cur
    .local pmc rx1147_curclass
    .local pmc rx1147_bstack
    .local pmc rx1147_cstack
    (rx1147_cur, rx1147_tgt, rx1147_pos, rx1147_curclass, rx1147_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1147_cur
    length rx1147_eos, rx1147_tgt
    eq $I19, 1, rx1147_restart3097
    gt rx1147_pos, rx1147_eos, rx1147_fail3098
    repr_get_attr_int $I11, self, rx1147_curclass, "$!from"
    ne $I11, -1, rxscan1148_done3104
    goto rxscan1148_scan3103
  rxscan1148_loop3102:
    inc rx1147_pos
    gt rx1147_pos, rx1147_eos, rx1147_fail3098
    repr_bind_attr_int rx1147_cur, rx1147_curclass, "$!from", rx1147_pos
  rxscan1148_scan3103:
    nqp_rxmark rx1147_bstack, rxscan1148_loop3102, rx1147_pos, 0
  rxscan1148_done3104:
    nqp_rxmark rx1147_bstack, rxcap1149_fail3106, rx1147_pos, 0
    add $I11, rx1147_pos, 2
    gt $I11, rx1147_eos, rx1147_fail3098
    substr $S10, rx1147_tgt, rx1147_pos, 2
    ne $S10, ucs4:"+&", rx1147_fail3098
    add rx1147_pos, 2
    nqp_rxpeek $I19, rx1147_bstack, rxcap1149_fail3106
    inc $I19
    set $I11, rx1147_bstack[$I19]
    repr_bind_attr_int rx1147_cur, rx1147_curclass, "$!pos", rx1147_pos
    $P11 = rx1147_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1147_pos)
    rx1147_cstack = rx1147_cur."!cursor_capture"($P11, "sym")
    goto rxcap1149_done3105
  rxcap1149_fail3106:
    goto rx1147_fail3098
  rxcap1149_done3105:
    repr_bind_attr_int rx1147_cur, rx1147_curclass, "$!pos", rx1147_pos
    $P11 = rx1147_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1147_curclass, "$!pos"
    lt $I11, 0, rx1147_fail3098
    nqp_rxmark rx1147_bstack, rxsubrule1150_pass3107, -1, 0
  rxsubrule1150_pass3107:
    rx1147_cstack = rx1147_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1147_pos, $P11, rx1147_curclass, "$!pos"
    rx1147_cur."!cursor_pass"(rx1147_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1147_cur)
  rx1147_restart3097:
    repr_get_attr_obj rx1147_cstack, rx1147_cur, rx1147_curclass, "$!cstack"
  rx1147_fail3098:
    unless rx1147_bstack, rx1147_done3096
    pop $I19, rx1147_bstack
    if_null rx1147_cstack, rx1147_cstack_done3101
    unless rx1147_cstack, rx1147_cstack_done3101
    dec $I19
    set $P11, rx1147_cstack[$I19]
  rx1147_cstack_done3101:
    pop rx1147_rep, rx1147_bstack
    pop rx1147_pos, rx1147_bstack
    pop $I19, rx1147_bstack
    lt rx1147_pos, -1, rx1147_done3096
    lt rx1147_pos, 0, rx1147_fail3098
    eq $I19, 0, rx1147_fail3098
    nqp_islist $I20, rx1147_cstack
    unless $I20, rx1147_jump3099
    elements $I18, rx1147_bstack
    le $I18, 0, rx1147_cut3100
    dec $I18
    set $I18, rx1147_bstack[$I18]
  rx1147_cut3100:
    assign rx1147_cstack, $I18
  rx1147_jump3099:
    jump $I19
  rx1147_done3096:
    rx1147_cur."!cursor_fail"()
    .return (rx1147_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_189_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1151_tgt
    .local int rx1151_pos
    .local int rx1151_off
    .local int rx1151_eos
    .local int rx1151_rep
    .local pmc rx1151_cur
    .local pmc rx1151_curclass
    .local pmc rx1151_bstack
    .local pmc rx1151_cstack
    (rx1151_cur, rx1151_tgt, rx1151_pos, rx1151_curclass, rx1151_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1151_cur
    length rx1151_eos, rx1151_tgt
    eq $I19, 1, rx1151_restart3110
    gt rx1151_pos, rx1151_eos, rx1151_fail3111
    repr_get_attr_int $I11, self, rx1151_curclass, "$!from"
    ne $I11, -1, rxscan1152_done3117
    goto rxscan1152_scan3116
  rxscan1152_loop3115:
    inc rx1151_pos
    gt rx1151_pos, rx1151_eos, rx1151_fail3111
    repr_bind_attr_int rx1151_cur, rx1151_curclass, "$!from", rx1151_pos
  rxscan1152_scan3116:
    nqp_rxmark rx1151_bstack, rxscan1152_loop3115, rx1151_pos, 0
  rxscan1152_done3117:
    nqp_rxmark rx1151_bstack, rxcap1153_fail3119, rx1151_pos, 0
    add $I11, rx1151_pos, 1
    gt $I11, rx1151_eos, rx1151_fail3111
    substr $S10, rx1151_tgt, rx1151_pos, 1
    ne $S10, ucs4:"+", rx1151_fail3111
    add rx1151_pos, 1
    nqp_rxpeek $I19, rx1151_bstack, rxcap1153_fail3119
    inc $I19
    set $I11, rx1151_bstack[$I19]
    repr_bind_attr_int rx1151_cur, rx1151_curclass, "$!pos", rx1151_pos
    $P11 = rx1151_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1151_pos)
    rx1151_cstack = rx1151_cur."!cursor_capture"($P11, "sym")
    goto rxcap1153_done3118
  rxcap1153_fail3119:
    goto rx1151_fail3111
  rxcap1153_done3118:
    repr_bind_attr_int rx1151_cur, rx1151_curclass, "$!pos", rx1151_pos
    $P11 = rx1151_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1151_curclass, "$!pos"
    lt $I11, 0, rx1151_fail3111
    nqp_rxmark rx1151_bstack, rxsubrule1154_pass3120, -1, 0
  rxsubrule1154_pass3120:
    rx1151_cstack = rx1151_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1151_pos, $P11, rx1151_curclass, "$!pos"
    rx1151_cur."!cursor_pass"(rx1151_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1151_cur)
  rx1151_restart3110:
    repr_get_attr_obj rx1151_cstack, rx1151_cur, rx1151_curclass, "$!cstack"
  rx1151_fail3111:
    unless rx1151_bstack, rx1151_done3109
    pop $I19, rx1151_bstack
    if_null rx1151_cstack, rx1151_cstack_done3114
    unless rx1151_cstack, rx1151_cstack_done3114
    dec $I19
    set $P11, rx1151_cstack[$I19]
  rx1151_cstack_done3114:
    pop rx1151_rep, rx1151_bstack
    pop rx1151_pos, rx1151_bstack
    pop $I19, rx1151_bstack
    lt rx1151_pos, -1, rx1151_done3109
    lt rx1151_pos, 0, rx1151_fail3111
    eq $I19, 0, rx1151_fail3111
    nqp_islist $I20, rx1151_cstack
    unless $I20, rx1151_jump3112
    elements $I18, rx1151_bstack
    le $I18, 0, rx1151_cut3113
    dec $I18
    set $I18, rx1151_bstack[$I18]
  rx1151_cut3113:
    assign rx1151_cstack, $I18
  rx1151_jump3112:
    jump $I19
  rx1151_done3109:
    rx1151_cur."!cursor_fail"()
    .return (rx1151_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_190_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1155_tgt
    .local int rx1155_pos
    .local int rx1155_off
    .local int rx1155_eos
    .local int rx1155_rep
    .local pmc rx1155_cur
    .local pmc rx1155_curclass
    .local pmc rx1155_bstack
    .local pmc rx1155_cstack
    (rx1155_cur, rx1155_tgt, rx1155_pos, rx1155_curclass, rx1155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1155_cur
    length rx1155_eos, rx1155_tgt
    eq $I19, 1, rx1155_restart3123
    gt rx1155_pos, rx1155_eos, rx1155_fail3124
    repr_get_attr_int $I11, self, rx1155_curclass, "$!from"
    ne $I11, -1, rxscan1156_done3130
    goto rxscan1156_scan3129
  rxscan1156_loop3128:
    inc rx1155_pos
    gt rx1155_pos, rx1155_eos, rx1155_fail3124
    repr_bind_attr_int rx1155_cur, rx1155_curclass, "$!from", rx1155_pos
  rxscan1156_scan3129:
    nqp_rxmark rx1155_bstack, rxscan1156_loop3128, rx1155_pos, 0
  rxscan1156_done3130:
    nqp_rxmark rx1155_bstack, rxcap1157_fail3132, rx1155_pos, 0
    add $I11, rx1155_pos, 1
    gt $I11, rx1155_eos, rx1155_fail3124
    substr $S10, rx1155_tgt, rx1155_pos, 1
    ne $S10, ucs4:"-", rx1155_fail3124
    add rx1155_pos, 1
    nqp_rxpeek $I19, rx1155_bstack, rxcap1157_fail3132
    inc $I19
    set $I11, rx1155_bstack[$I19]
    repr_bind_attr_int rx1155_cur, rx1155_curclass, "$!pos", rx1155_pos
    $P11 = rx1155_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1155_pos)
    rx1155_cstack = rx1155_cur."!cursor_capture"($P11, "sym")
    goto rxcap1157_done3131
  rxcap1157_fail3132:
    goto rx1155_fail3124
  rxcap1157_done3131:
    repr_bind_attr_int rx1155_cur, rx1155_curclass, "$!pos", rx1155_pos
    $P11 = rx1155_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1155_curclass, "$!pos"
    lt $I11, 0, rx1155_fail3124
    nqp_rxmark rx1155_bstack, rxsubrule1158_pass3133, -1, 0
  rxsubrule1158_pass3133:
    rx1155_cstack = rx1155_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1155_pos, $P11, rx1155_curclass, "$!pos"
    rx1155_cur."!cursor_pass"(rx1155_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1155_cur)
  rx1155_restart3123:
    repr_get_attr_obj rx1155_cstack, rx1155_cur, rx1155_curclass, "$!cstack"
  rx1155_fail3124:
    unless rx1155_bstack, rx1155_done3122
    pop $I19, rx1155_bstack
    if_null rx1155_cstack, rx1155_cstack_done3127
    unless rx1155_cstack, rx1155_cstack_done3127
    dec $I19
    set $P11, rx1155_cstack[$I19]
  rx1155_cstack_done3127:
    pop rx1155_rep, rx1155_bstack
    pop rx1155_pos, rx1155_bstack
    pop $I19, rx1155_bstack
    lt rx1155_pos, -1, rx1155_done3122
    lt rx1155_pos, 0, rx1155_fail3124
    eq $I19, 0, rx1155_fail3124
    nqp_islist $I20, rx1155_cstack
    unless $I20, rx1155_jump3125
    elements $I18, rx1155_bstack
    le $I18, 0, rx1155_cut3126
    dec $I18
    set $I18, rx1155_bstack[$I18]
  rx1155_cut3126:
    assign rx1155_cstack, $I18
  rx1155_jump3125:
    jump $I19
  rx1155_done3122:
    rx1155_cur."!cursor_fail"()
    .return (rx1155_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_191_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1159_tgt
    .local int rx1159_pos
    .local int rx1159_off
    .local int rx1159_eos
    .local int rx1159_rep
    .local pmc rx1159_cur
    .local pmc rx1159_curclass
    .local pmc rx1159_bstack
    .local pmc rx1159_cstack
    (rx1159_cur, rx1159_tgt, rx1159_pos, rx1159_curclass, rx1159_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1159_cur
    length rx1159_eos, rx1159_tgt
    eq $I19, 1, rx1159_restart3136
    gt rx1159_pos, rx1159_eos, rx1159_fail3137
    repr_get_attr_int $I11, self, rx1159_curclass, "$!from"
    ne $I11, -1, rxscan1160_done3143
    goto rxscan1160_scan3142
  rxscan1160_loop3141:
    inc rx1159_pos
    gt rx1159_pos, rx1159_eos, rx1159_fail3137
    repr_bind_attr_int rx1159_cur, rx1159_curclass, "$!from", rx1159_pos
  rxscan1160_scan3142:
    nqp_rxmark rx1159_bstack, rxscan1160_loop3141, rx1159_pos, 0
  rxscan1160_done3143:
    nqp_rxmark rx1159_bstack, rxcap1161_fail3145, rx1159_pos, 0
    add $I11, rx1159_pos, 2
    gt $I11, rx1159_eos, rx1159_fail3137
    substr $S10, rx1159_tgt, rx1159_pos, 2
    ne $S10, ucs4:"+|", rx1159_fail3137
    add rx1159_pos, 2
    nqp_rxpeek $I19, rx1159_bstack, rxcap1161_fail3145
    inc $I19
    set $I11, rx1159_bstack[$I19]
    repr_bind_attr_int rx1159_cur, rx1159_curclass, "$!pos", rx1159_pos
    $P11 = rx1159_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1159_pos)
    rx1159_cstack = rx1159_cur."!cursor_capture"($P11, "sym")
    goto rxcap1161_done3144
  rxcap1161_fail3145:
    goto rx1159_fail3137
  rxcap1161_done3144:
    repr_bind_attr_int rx1159_cur, rx1159_curclass, "$!pos", rx1159_pos
    $P11 = rx1159_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1159_curclass, "$!pos"
    lt $I11, 0, rx1159_fail3137
    nqp_rxmark rx1159_bstack, rxsubrule1162_pass3146, -1, 0
  rxsubrule1162_pass3146:
    rx1159_cstack = rx1159_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1159_pos, $P11, rx1159_curclass, "$!pos"
    rx1159_cur."!cursor_pass"(rx1159_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1159_cur)
  rx1159_restart3136:
    repr_get_attr_obj rx1159_cstack, rx1159_cur, rx1159_curclass, "$!cstack"
  rx1159_fail3137:
    unless rx1159_bstack, rx1159_done3135
    pop $I19, rx1159_bstack
    if_null rx1159_cstack, rx1159_cstack_done3140
    unless rx1159_cstack, rx1159_cstack_done3140
    dec $I19
    set $P11, rx1159_cstack[$I19]
  rx1159_cstack_done3140:
    pop rx1159_rep, rx1159_bstack
    pop rx1159_pos, rx1159_bstack
    pop $I19, rx1159_bstack
    lt rx1159_pos, -1, rx1159_done3135
    lt rx1159_pos, 0, rx1159_fail3137
    eq $I19, 0, rx1159_fail3137
    nqp_islist $I20, rx1159_cstack
    unless $I20, rx1159_jump3138
    elements $I18, rx1159_bstack
    le $I18, 0, rx1159_cut3139
    dec $I18
    set $I18, rx1159_bstack[$I18]
  rx1159_cut3139:
    assign rx1159_cstack, $I18
  rx1159_jump3138:
    jump $I19
  rx1159_done3135:
    rx1159_cur."!cursor_fail"()
    .return (rx1159_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_192_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1163_tgt
    .local int rx1163_pos
    .local int rx1163_off
    .local int rx1163_eos
    .local int rx1163_rep
    .local pmc rx1163_cur
    .local pmc rx1163_curclass
    .local pmc rx1163_bstack
    .local pmc rx1163_cstack
    (rx1163_cur, rx1163_tgt, rx1163_pos, rx1163_curclass, rx1163_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1163_cur
    length rx1163_eos, rx1163_tgt
    eq $I19, 1, rx1163_restart3149
    gt rx1163_pos, rx1163_eos, rx1163_fail3150
    repr_get_attr_int $I11, self, rx1163_curclass, "$!from"
    ne $I11, -1, rxscan1164_done3156
    goto rxscan1164_scan3155
  rxscan1164_loop3154:
    inc rx1163_pos
    gt rx1163_pos, rx1163_eos, rx1163_fail3150
    repr_bind_attr_int rx1163_cur, rx1163_curclass, "$!from", rx1163_pos
  rxscan1164_scan3155:
    nqp_rxmark rx1163_bstack, rxscan1164_loop3154, rx1163_pos, 0
  rxscan1164_done3156:
    nqp_rxmark rx1163_bstack, rxcap1165_fail3158, rx1163_pos, 0
    add $I11, rx1163_pos, 2
    gt $I11, rx1163_eos, rx1163_fail3150
    substr $S10, rx1163_tgt, rx1163_pos, 2
    ne $S10, ucs4:"+^", rx1163_fail3150
    add rx1163_pos, 2
    nqp_rxpeek $I19, rx1163_bstack, rxcap1165_fail3158
    inc $I19
    set $I11, rx1163_bstack[$I19]
    repr_bind_attr_int rx1163_cur, rx1163_curclass, "$!pos", rx1163_pos
    $P11 = rx1163_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1163_pos)
    rx1163_cstack = rx1163_cur."!cursor_capture"($P11, "sym")
    goto rxcap1165_done3157
  rxcap1165_fail3158:
    goto rx1163_fail3150
  rxcap1165_done3157:
    repr_bind_attr_int rx1163_cur, rx1163_curclass, "$!pos", rx1163_pos
    $P11 = rx1163_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1163_curclass, "$!pos"
    lt $I11, 0, rx1163_fail3150
    nqp_rxmark rx1163_bstack, rxsubrule1166_pass3159, -1, 0
  rxsubrule1166_pass3159:
    rx1163_cstack = rx1163_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1163_pos, $P11, rx1163_curclass, "$!pos"
    rx1163_cur."!cursor_pass"(rx1163_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1163_cur)
  rx1163_restart3149:
    repr_get_attr_obj rx1163_cstack, rx1163_cur, rx1163_curclass, "$!cstack"
  rx1163_fail3150:
    unless rx1163_bstack, rx1163_done3148
    pop $I19, rx1163_bstack
    if_null rx1163_cstack, rx1163_cstack_done3153
    unless rx1163_cstack, rx1163_cstack_done3153
    dec $I19
    set $P11, rx1163_cstack[$I19]
  rx1163_cstack_done3153:
    pop rx1163_rep, rx1163_bstack
    pop rx1163_pos, rx1163_bstack
    pop $I19, rx1163_bstack
    lt rx1163_pos, -1, rx1163_done3148
    lt rx1163_pos, 0, rx1163_fail3150
    eq $I19, 0, rx1163_fail3150
    nqp_islist $I20, rx1163_cstack
    unless $I20, rx1163_jump3151
    elements $I18, rx1163_bstack
    le $I18, 0, rx1163_cut3152
    dec $I18
    set $I18, rx1163_bstack[$I18]
  rx1163_cut3152:
    assign rx1163_cstack, $I18
  rx1163_jump3151:
    jump $I19
  rx1163_done3148:
    rx1163_cur."!cursor_fail"()
    .return (rx1163_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_193_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1167_tgt
    .local int rx1167_pos
    .local int rx1167_off
    .local int rx1167_eos
    .local int rx1167_rep
    .local pmc rx1167_cur
    .local pmc rx1167_curclass
    .local pmc rx1167_bstack
    .local pmc rx1167_cstack
    (rx1167_cur, rx1167_tgt, rx1167_pos, rx1167_curclass, rx1167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1167_cur
    length rx1167_eos, rx1167_tgt
    eq $I19, 1, rx1167_restart3162
    gt rx1167_pos, rx1167_eos, rx1167_fail3163
    repr_get_attr_int $I11, self, rx1167_curclass, "$!from"
    ne $I11, -1, rxscan1168_done3169
    goto rxscan1168_scan3168
  rxscan1168_loop3167:
    inc rx1167_pos
    gt rx1167_pos, rx1167_eos, rx1167_fail3163
    repr_bind_attr_int rx1167_cur, rx1167_curclass, "$!from", rx1167_pos
  rxscan1168_scan3168:
    nqp_rxmark rx1167_bstack, rxscan1168_loop3167, rx1167_pos, 0
  rxscan1168_done3169:
    nqp_rxmark rx1167_bstack, rxcap1169_fail3171, rx1167_pos, 0
    add $I11, rx1167_pos, 1
    gt $I11, rx1167_eos, rx1167_fail3163
    substr $S10, rx1167_tgt, rx1167_pos, 1
    ne $S10, ucs4:"~", rx1167_fail3163
    add rx1167_pos, 1
    nqp_rxpeek $I19, rx1167_bstack, rxcap1169_fail3171
    inc $I19
    set $I11, rx1167_bstack[$I19]
    repr_bind_attr_int rx1167_cur, rx1167_curclass, "$!pos", rx1167_pos
    $P11 = rx1167_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1167_pos)
    rx1167_cstack = rx1167_cur."!cursor_capture"($P11, "sym")
    goto rxcap1169_done3170
  rxcap1169_fail3171:
    goto rx1167_fail3163
  rxcap1169_done3170:
    repr_bind_attr_int rx1167_cur, rx1167_curclass, "$!pos", rx1167_pos
    $P11 = rx1167_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1167_curclass, "$!pos"
    lt $I11, 0, rx1167_fail3163
    nqp_rxmark rx1167_bstack, rxsubrule1170_pass3172, -1, 0
  rxsubrule1170_pass3172:
    rx1167_cstack = rx1167_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1167_pos, $P11, rx1167_curclass, "$!pos"
    rx1167_cur."!cursor_pass"(rx1167_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1167_cur)
  rx1167_restart3162:
    repr_get_attr_obj rx1167_cstack, rx1167_cur, rx1167_curclass, "$!cstack"
  rx1167_fail3163:
    unless rx1167_bstack, rx1167_done3161
    pop $I19, rx1167_bstack
    if_null rx1167_cstack, rx1167_cstack_done3166
    unless rx1167_cstack, rx1167_cstack_done3166
    dec $I19
    set $P11, rx1167_cstack[$I19]
  rx1167_cstack_done3166:
    pop rx1167_rep, rx1167_bstack
    pop rx1167_pos, rx1167_bstack
    pop $I19, rx1167_bstack
    lt rx1167_pos, -1, rx1167_done3161
    lt rx1167_pos, 0, rx1167_fail3163
    eq $I19, 0, rx1167_fail3163
    nqp_islist $I20, rx1167_cstack
    unless $I20, rx1167_jump3164
    elements $I18, rx1167_bstack
    le $I18, 0, rx1167_cut3165
    dec $I18
    set $I18, rx1167_bstack[$I18]
  rx1167_cut3165:
    assign rx1167_cstack, $I18
  rx1167_jump3164:
    jump $I19
  rx1167_done3161:
    rx1167_cur."!cursor_fail"()
    .return (rx1167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_194_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1171_tgt
    .local int rx1171_pos
    .local int rx1171_off
    .local int rx1171_eos
    .local int rx1171_rep
    .local pmc rx1171_cur
    .local pmc rx1171_curclass
    .local pmc rx1171_bstack
    .local pmc rx1171_cstack
    (rx1171_cur, rx1171_tgt, rx1171_pos, rx1171_curclass, rx1171_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1171_cur
    length rx1171_eos, rx1171_tgt
    eq $I19, 1, rx1171_restart3175
    gt rx1171_pos, rx1171_eos, rx1171_fail3176
    repr_get_attr_int $I11, self, rx1171_curclass, "$!from"
    ne $I11, -1, rxscan1172_done3182
    goto rxscan1172_scan3181
  rxscan1172_loop3180:
    inc rx1171_pos
    gt rx1171_pos, rx1171_eos, rx1171_fail3176
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!from", rx1171_pos
  rxscan1172_scan3181:
    nqp_rxmark rx1171_bstack, rxscan1172_loop3180, rx1171_pos, 0
  rxscan1172_done3182:
    nqp_rxmark rx1171_bstack, rxcap1173_fail3184, rx1171_pos, 0
    add $I11, rx1171_pos, 2
    gt $I11, rx1171_eos, rx1171_fail3176
    substr $S10, rx1171_tgt, rx1171_pos, 2
    ne $S10, ucs4:"==", rx1171_fail3176
    add rx1171_pos, 2
    nqp_rxpeek $I19, rx1171_bstack, rxcap1173_fail3184
    inc $I19
    set $I11, rx1171_bstack[$I19]
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!pos", rx1171_pos
    $P11 = rx1171_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1171_pos)
    rx1171_cstack = rx1171_cur."!cursor_capture"($P11, "sym")
    goto rxcap1173_done3183
  rxcap1173_fail3184:
    goto rx1171_fail3176
  rxcap1173_done3183:
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!pos", rx1171_pos
    $P11 = rx1171_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1171_curclass, "$!pos"
    lt $I11, 0, rx1171_fail3176
    nqp_rxmark rx1171_bstack, rxsubrule1174_pass3185, -1, 0
  rxsubrule1174_pass3185:
    rx1171_cstack = rx1171_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1171_pos, $P11, rx1171_curclass, "$!pos"
    rx1171_cur."!cursor_pass"(rx1171_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1171_cur)
  rx1171_restart3175:
    repr_get_attr_obj rx1171_cstack, rx1171_cur, rx1171_curclass, "$!cstack"
  rx1171_fail3176:
    unless rx1171_bstack, rx1171_done3174
    pop $I19, rx1171_bstack
    if_null rx1171_cstack, rx1171_cstack_done3179
    unless rx1171_cstack, rx1171_cstack_done3179
    dec $I19
    set $P11, rx1171_cstack[$I19]
  rx1171_cstack_done3179:
    pop rx1171_rep, rx1171_bstack
    pop rx1171_pos, rx1171_bstack
    pop $I19, rx1171_bstack
    lt rx1171_pos, -1, rx1171_done3174
    lt rx1171_pos, 0, rx1171_fail3176
    eq $I19, 0, rx1171_fail3176
    nqp_islist $I20, rx1171_cstack
    unless $I20, rx1171_jump3177
    elements $I18, rx1171_bstack
    le $I18, 0, rx1171_cut3178
    dec $I18
    set $I18, rx1171_bstack[$I18]
  rx1171_cut3178:
    assign rx1171_cstack, $I18
  rx1171_jump3177:
    jump $I19
  rx1171_done3174:
    rx1171_cur."!cursor_fail"()
    .return (rx1171_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_195_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1175_tgt
    .local int rx1175_pos
    .local int rx1175_off
    .local int rx1175_eos
    .local int rx1175_rep
    .local pmc rx1175_cur
    .local pmc rx1175_curclass
    .local pmc rx1175_bstack
    .local pmc rx1175_cstack
    (rx1175_cur, rx1175_tgt, rx1175_pos, rx1175_curclass, rx1175_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1175_cur
    length rx1175_eos, rx1175_tgt
    eq $I19, 1, rx1175_restart3188
    gt rx1175_pos, rx1175_eos, rx1175_fail3189
    repr_get_attr_int $I11, self, rx1175_curclass, "$!from"
    ne $I11, -1, rxscan1176_done3195
    goto rxscan1176_scan3194
  rxscan1176_loop3193:
    inc rx1175_pos
    gt rx1175_pos, rx1175_eos, rx1175_fail3189
    repr_bind_attr_int rx1175_cur, rx1175_curclass, "$!from", rx1175_pos
  rxscan1176_scan3194:
    nqp_rxmark rx1175_bstack, rxscan1176_loop3193, rx1175_pos, 0
  rxscan1176_done3195:
    nqp_rxmark rx1175_bstack, rxcap1177_fail3197, rx1175_pos, 0
    add $I11, rx1175_pos, 2
    gt $I11, rx1175_eos, rx1175_fail3189
    substr $S10, rx1175_tgt, rx1175_pos, 2
    ne $S10, ucs4:"!=", rx1175_fail3189
    add rx1175_pos, 2
    nqp_rxpeek $I19, rx1175_bstack, rxcap1177_fail3197
    inc $I19
    set $I11, rx1175_bstack[$I19]
    repr_bind_attr_int rx1175_cur, rx1175_curclass, "$!pos", rx1175_pos
    $P11 = rx1175_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1175_pos)
    rx1175_cstack = rx1175_cur."!cursor_capture"($P11, "sym")
    goto rxcap1177_done3196
  rxcap1177_fail3197:
    goto rx1175_fail3189
  rxcap1177_done3196:
    repr_bind_attr_int rx1175_cur, rx1175_curclass, "$!pos", rx1175_pos
    $P11 = rx1175_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1175_curclass, "$!pos"
    lt $I11, 0, rx1175_fail3189
    nqp_rxmark rx1175_bstack, rxsubrule1178_pass3198, -1, 0
  rxsubrule1178_pass3198:
    rx1175_cstack = rx1175_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1175_pos, $P11, rx1175_curclass, "$!pos"
    rx1175_cur."!cursor_pass"(rx1175_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1175_cur)
  rx1175_restart3188:
    repr_get_attr_obj rx1175_cstack, rx1175_cur, rx1175_curclass, "$!cstack"
  rx1175_fail3189:
    unless rx1175_bstack, rx1175_done3187
    pop $I19, rx1175_bstack
    if_null rx1175_cstack, rx1175_cstack_done3192
    unless rx1175_cstack, rx1175_cstack_done3192
    dec $I19
    set $P11, rx1175_cstack[$I19]
  rx1175_cstack_done3192:
    pop rx1175_rep, rx1175_bstack
    pop rx1175_pos, rx1175_bstack
    pop $I19, rx1175_bstack
    lt rx1175_pos, -1, rx1175_done3187
    lt rx1175_pos, 0, rx1175_fail3189
    eq $I19, 0, rx1175_fail3189
    nqp_islist $I20, rx1175_cstack
    unless $I20, rx1175_jump3190
    elements $I18, rx1175_bstack
    le $I18, 0, rx1175_cut3191
    dec $I18
    set $I18, rx1175_bstack[$I18]
  rx1175_cut3191:
    assign rx1175_cstack, $I18
  rx1175_jump3190:
    jump $I19
  rx1175_done3187:
    rx1175_cur."!cursor_fail"()
    .return (rx1175_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_196_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1179_tgt
    .local int rx1179_pos
    .local int rx1179_off
    .local int rx1179_eos
    .local int rx1179_rep
    .local pmc rx1179_cur
    .local pmc rx1179_curclass
    .local pmc rx1179_bstack
    .local pmc rx1179_cstack
    (rx1179_cur, rx1179_tgt, rx1179_pos, rx1179_curclass, rx1179_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1179_cur
    length rx1179_eos, rx1179_tgt
    eq $I19, 1, rx1179_restart3201
    gt rx1179_pos, rx1179_eos, rx1179_fail3202
    repr_get_attr_int $I11, self, rx1179_curclass, "$!from"
    ne $I11, -1, rxscan1180_done3208
    goto rxscan1180_scan3207
  rxscan1180_loop3206:
    inc rx1179_pos
    gt rx1179_pos, rx1179_eos, rx1179_fail3202
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!from", rx1179_pos
  rxscan1180_scan3207:
    nqp_rxmark rx1179_bstack, rxscan1180_loop3206, rx1179_pos, 0
  rxscan1180_done3208:
    nqp_rxmark rx1179_bstack, rxcap1181_fail3210, rx1179_pos, 0
    add $I11, rx1179_pos, 2
    gt $I11, rx1179_eos, rx1179_fail3202
    substr $S10, rx1179_tgt, rx1179_pos, 2
    ne $S10, ucs4:"<=", rx1179_fail3202
    add rx1179_pos, 2
    nqp_rxpeek $I19, rx1179_bstack, rxcap1181_fail3210
    inc $I19
    set $I11, rx1179_bstack[$I19]
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!pos", rx1179_pos
    $P11 = rx1179_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1179_pos)
    rx1179_cstack = rx1179_cur."!cursor_capture"($P11, "sym")
    goto rxcap1181_done3209
  rxcap1181_fail3210:
    goto rx1179_fail3202
  rxcap1181_done3209:
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!pos", rx1179_pos
    $P11 = rx1179_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1179_curclass, "$!pos"
    lt $I11, 0, rx1179_fail3202
    nqp_rxmark rx1179_bstack, rxsubrule1182_pass3211, -1, 0
  rxsubrule1182_pass3211:
    rx1179_cstack = rx1179_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1179_pos, $P11, rx1179_curclass, "$!pos"
    rx1179_cur."!cursor_pass"(rx1179_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1179_cur)
  rx1179_restart3201:
    repr_get_attr_obj rx1179_cstack, rx1179_cur, rx1179_curclass, "$!cstack"
  rx1179_fail3202:
    unless rx1179_bstack, rx1179_done3200
    pop $I19, rx1179_bstack
    if_null rx1179_cstack, rx1179_cstack_done3205
    unless rx1179_cstack, rx1179_cstack_done3205
    dec $I19
    set $P11, rx1179_cstack[$I19]
  rx1179_cstack_done3205:
    pop rx1179_rep, rx1179_bstack
    pop rx1179_pos, rx1179_bstack
    pop $I19, rx1179_bstack
    lt rx1179_pos, -1, rx1179_done3200
    lt rx1179_pos, 0, rx1179_fail3202
    eq $I19, 0, rx1179_fail3202
    nqp_islist $I20, rx1179_cstack
    unless $I20, rx1179_jump3203
    elements $I18, rx1179_bstack
    le $I18, 0, rx1179_cut3204
    dec $I18
    set $I18, rx1179_bstack[$I18]
  rx1179_cut3204:
    assign rx1179_cstack, $I18
  rx1179_jump3203:
    jump $I19
  rx1179_done3200:
    rx1179_cur."!cursor_fail"()
    .return (rx1179_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_197_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1183_tgt
    .local int rx1183_pos
    .local int rx1183_off
    .local int rx1183_eos
    .local int rx1183_rep
    .local pmc rx1183_cur
    .local pmc rx1183_curclass
    .local pmc rx1183_bstack
    .local pmc rx1183_cstack
    (rx1183_cur, rx1183_tgt, rx1183_pos, rx1183_curclass, rx1183_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1183_cur
    length rx1183_eos, rx1183_tgt
    eq $I19, 1, rx1183_restart3214
    gt rx1183_pos, rx1183_eos, rx1183_fail3215
    repr_get_attr_int $I11, self, rx1183_curclass, "$!from"
    ne $I11, -1, rxscan1184_done3221
    goto rxscan1184_scan3220
  rxscan1184_loop3219:
    inc rx1183_pos
    gt rx1183_pos, rx1183_eos, rx1183_fail3215
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!from", rx1183_pos
  rxscan1184_scan3220:
    nqp_rxmark rx1183_bstack, rxscan1184_loop3219, rx1183_pos, 0
  rxscan1184_done3221:
    nqp_rxmark rx1183_bstack, rxcap1185_fail3223, rx1183_pos, 0
    add $I11, rx1183_pos, 2
    gt $I11, rx1183_eos, rx1183_fail3215
    substr $S10, rx1183_tgt, rx1183_pos, 2
    ne $S10, ucs4:">=", rx1183_fail3215
    add rx1183_pos, 2
    nqp_rxpeek $I19, rx1183_bstack, rxcap1185_fail3223
    inc $I19
    set $I11, rx1183_bstack[$I19]
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!pos", rx1183_pos
    $P11 = rx1183_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1183_pos)
    rx1183_cstack = rx1183_cur."!cursor_capture"($P11, "sym")
    goto rxcap1185_done3222
  rxcap1185_fail3223:
    goto rx1183_fail3215
  rxcap1185_done3222:
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!pos", rx1183_pos
    $P11 = rx1183_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1183_curclass, "$!pos"
    lt $I11, 0, rx1183_fail3215
    nqp_rxmark rx1183_bstack, rxsubrule1186_pass3224, -1, 0
  rxsubrule1186_pass3224:
    rx1183_cstack = rx1183_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1183_pos, $P11, rx1183_curclass, "$!pos"
    rx1183_cur."!cursor_pass"(rx1183_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1183_cur)
  rx1183_restart3214:
    repr_get_attr_obj rx1183_cstack, rx1183_cur, rx1183_curclass, "$!cstack"
  rx1183_fail3215:
    unless rx1183_bstack, rx1183_done3213
    pop $I19, rx1183_bstack
    if_null rx1183_cstack, rx1183_cstack_done3218
    unless rx1183_cstack, rx1183_cstack_done3218
    dec $I19
    set $P11, rx1183_cstack[$I19]
  rx1183_cstack_done3218:
    pop rx1183_rep, rx1183_bstack
    pop rx1183_pos, rx1183_bstack
    pop $I19, rx1183_bstack
    lt rx1183_pos, -1, rx1183_done3213
    lt rx1183_pos, 0, rx1183_fail3215
    eq $I19, 0, rx1183_fail3215
    nqp_islist $I20, rx1183_cstack
    unless $I20, rx1183_jump3216
    elements $I18, rx1183_bstack
    le $I18, 0, rx1183_cut3217
    dec $I18
    set $I18, rx1183_bstack[$I18]
  rx1183_cut3217:
    assign rx1183_cstack, $I18
  rx1183_jump3216:
    jump $I19
  rx1183_done3213:
    rx1183_cur."!cursor_fail"()
    .return (rx1183_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_198_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1187_tgt
    .local int rx1187_pos
    .local int rx1187_off
    .local int rx1187_eos
    .local int rx1187_rep
    .local pmc rx1187_cur
    .local pmc rx1187_curclass
    .local pmc rx1187_bstack
    .local pmc rx1187_cstack
    (rx1187_cur, rx1187_tgt, rx1187_pos, rx1187_curclass, rx1187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1187_cur
    length rx1187_eos, rx1187_tgt
    eq $I19, 1, rx1187_restart3227
    gt rx1187_pos, rx1187_eos, rx1187_fail3228
    repr_get_attr_int $I11, self, rx1187_curclass, "$!from"
    ne $I11, -1, rxscan1188_done3234
    goto rxscan1188_scan3233
  rxscan1188_loop3232:
    inc rx1187_pos
    gt rx1187_pos, rx1187_eos, rx1187_fail3228
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!from", rx1187_pos
  rxscan1188_scan3233:
    nqp_rxmark rx1187_bstack, rxscan1188_loop3232, rx1187_pos, 0
  rxscan1188_done3234:
    nqp_rxmark rx1187_bstack, rxcap1189_fail3236, rx1187_pos, 0
    add $I11, rx1187_pos, 1
    gt $I11, rx1187_eos, rx1187_fail3228
    substr $S10, rx1187_tgt, rx1187_pos, 1
    ne $S10, ucs4:"<", rx1187_fail3228
    add rx1187_pos, 1
    nqp_rxpeek $I19, rx1187_bstack, rxcap1189_fail3236
    inc $I19
    set $I11, rx1187_bstack[$I19]
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!pos", rx1187_pos
    $P11 = rx1187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1187_pos)
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "sym")
    goto rxcap1189_done3235
  rxcap1189_fail3236:
    goto rx1187_fail3228
  rxcap1189_done3235:
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!pos", rx1187_pos
    $P11 = rx1187_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1187_curclass, "$!pos"
    lt $I11, 0, rx1187_fail3228
    nqp_rxmark rx1187_bstack, rxsubrule1190_pass3237, -1, 0
  rxsubrule1190_pass3237:
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1187_pos, $P11, rx1187_curclass, "$!pos"
    rx1187_cur."!cursor_pass"(rx1187_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1187_cur)
  rx1187_restart3227:
    repr_get_attr_obj rx1187_cstack, rx1187_cur, rx1187_curclass, "$!cstack"
  rx1187_fail3228:
    unless rx1187_bstack, rx1187_done3226
    pop $I19, rx1187_bstack
    if_null rx1187_cstack, rx1187_cstack_done3231
    unless rx1187_cstack, rx1187_cstack_done3231
    dec $I19
    set $P11, rx1187_cstack[$I19]
  rx1187_cstack_done3231:
    pop rx1187_rep, rx1187_bstack
    pop rx1187_pos, rx1187_bstack
    pop $I19, rx1187_bstack
    lt rx1187_pos, -1, rx1187_done3226
    lt rx1187_pos, 0, rx1187_fail3228
    eq $I19, 0, rx1187_fail3228
    nqp_islist $I20, rx1187_cstack
    unless $I20, rx1187_jump3229
    elements $I18, rx1187_bstack
    le $I18, 0, rx1187_cut3230
    dec $I18
    set $I18, rx1187_bstack[$I18]
  rx1187_cut3230:
    assign rx1187_cstack, $I18
  rx1187_jump3229:
    jump $I19
  rx1187_done3226:
    rx1187_cur."!cursor_fail"()
    .return (rx1187_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_199_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1191_tgt
    .local int rx1191_pos
    .local int rx1191_off
    .local int rx1191_eos
    .local int rx1191_rep
    .local pmc rx1191_cur
    .local pmc rx1191_curclass
    .local pmc rx1191_bstack
    .local pmc rx1191_cstack
    (rx1191_cur, rx1191_tgt, rx1191_pos, rx1191_curclass, rx1191_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1191_cur
    length rx1191_eos, rx1191_tgt
    eq $I19, 1, rx1191_restart3240
    gt rx1191_pos, rx1191_eos, rx1191_fail3241
    repr_get_attr_int $I11, self, rx1191_curclass, "$!from"
    ne $I11, -1, rxscan1192_done3247
    goto rxscan1192_scan3246
  rxscan1192_loop3245:
    inc rx1191_pos
    gt rx1191_pos, rx1191_eos, rx1191_fail3241
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!from", rx1191_pos
  rxscan1192_scan3246:
    nqp_rxmark rx1191_bstack, rxscan1192_loop3245, rx1191_pos, 0
  rxscan1192_done3247:
    nqp_rxmark rx1191_bstack, rxcap1193_fail3249, rx1191_pos, 0
    add $I11, rx1191_pos, 1
    gt $I11, rx1191_eos, rx1191_fail3241
    substr $S10, rx1191_tgt, rx1191_pos, 1
    ne $S10, ucs4:">", rx1191_fail3241
    add rx1191_pos, 1
    nqp_rxpeek $I19, rx1191_bstack, rxcap1193_fail3249
    inc $I19
    set $I11, rx1191_bstack[$I19]
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!pos", rx1191_pos
    $P11 = rx1191_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1191_pos)
    rx1191_cstack = rx1191_cur."!cursor_capture"($P11, "sym")
    goto rxcap1193_done3248
  rxcap1193_fail3249:
    goto rx1191_fail3241
  rxcap1193_done3248:
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!pos", rx1191_pos
    $P11 = rx1191_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1191_curclass, "$!pos"
    lt $I11, 0, rx1191_fail3241
    nqp_rxmark rx1191_bstack, rxsubrule1194_pass3250, -1, 0
  rxsubrule1194_pass3250:
    rx1191_cstack = rx1191_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1191_pos, $P11, rx1191_curclass, "$!pos"
    rx1191_cur."!cursor_pass"(rx1191_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1191_cur)
  rx1191_restart3240:
    repr_get_attr_obj rx1191_cstack, rx1191_cur, rx1191_curclass, "$!cstack"
  rx1191_fail3241:
    unless rx1191_bstack, rx1191_done3239
    pop $I19, rx1191_bstack
    if_null rx1191_cstack, rx1191_cstack_done3244
    unless rx1191_cstack, rx1191_cstack_done3244
    dec $I19
    set $P11, rx1191_cstack[$I19]
  rx1191_cstack_done3244:
    pop rx1191_rep, rx1191_bstack
    pop rx1191_pos, rx1191_bstack
    pop $I19, rx1191_bstack
    lt rx1191_pos, -1, rx1191_done3239
    lt rx1191_pos, 0, rx1191_fail3241
    eq $I19, 0, rx1191_fail3241
    nqp_islist $I20, rx1191_cstack
    unless $I20, rx1191_jump3242
    elements $I18, rx1191_bstack
    le $I18, 0, rx1191_cut3243
    dec $I18
    set $I18, rx1191_bstack[$I18]
  rx1191_cut3243:
    assign rx1191_cstack, $I18
  rx1191_jump3242:
    jump $I19
  rx1191_done3239:
    rx1191_cur."!cursor_fail"()
    .return (rx1191_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_200_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1195_tgt
    .local int rx1195_pos
    .local int rx1195_off
    .local int rx1195_eos
    .local int rx1195_rep
    .local pmc rx1195_cur
    .local pmc rx1195_curclass
    .local pmc rx1195_bstack
    .local pmc rx1195_cstack
    (rx1195_cur, rx1195_tgt, rx1195_pos, rx1195_curclass, rx1195_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1195_cur
    length rx1195_eos, rx1195_tgt
    eq $I19, 1, rx1195_restart3253
    gt rx1195_pos, rx1195_eos, rx1195_fail3254
    repr_get_attr_int $I11, self, rx1195_curclass, "$!from"
    ne $I11, -1, rxscan1196_done3260
    goto rxscan1196_scan3259
  rxscan1196_loop3258:
    inc rx1195_pos
    gt rx1195_pos, rx1195_eos, rx1195_fail3254
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!from", rx1195_pos
  rxscan1196_scan3259:
    nqp_rxmark rx1195_bstack, rxscan1196_loop3258, rx1195_pos, 0
  rxscan1196_done3260:
    nqp_rxmark rx1195_bstack, rxcap1197_fail3262, rx1195_pos, 0
    add $I11, rx1195_pos, 2
    gt $I11, rx1195_eos, rx1195_fail3254
    substr $S10, rx1195_tgt, rx1195_pos, 2
    ne $S10, ucs4:"eq", rx1195_fail3254
    add rx1195_pos, 2
    nqp_rxpeek $I19, rx1195_bstack, rxcap1197_fail3262
    inc $I19
    set $I11, rx1195_bstack[$I19]
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    $P11 = rx1195_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1195_pos)
    rx1195_cstack = rx1195_cur."!cursor_capture"($P11, "sym")
    goto rxcap1197_done3261
  rxcap1197_fail3262:
    goto rx1195_fail3254
  rxcap1197_done3261:
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    $P11 = rx1195_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1195_curclass, "$!pos"
    lt $I11, 0, rx1195_fail3254
    nqp_rxmark rx1195_bstack, rxsubrule1198_pass3263, -1, 0
  rxsubrule1198_pass3263:
    rx1195_cstack = rx1195_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1195_pos, $P11, rx1195_curclass, "$!pos"
    rx1195_cur."!cursor_pass"(rx1195_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1195_cur)
  rx1195_restart3253:
    repr_get_attr_obj rx1195_cstack, rx1195_cur, rx1195_curclass, "$!cstack"
  rx1195_fail3254:
    unless rx1195_bstack, rx1195_done3252
    pop $I19, rx1195_bstack
    if_null rx1195_cstack, rx1195_cstack_done3257
    unless rx1195_cstack, rx1195_cstack_done3257
    dec $I19
    set $P11, rx1195_cstack[$I19]
  rx1195_cstack_done3257:
    pop rx1195_rep, rx1195_bstack
    pop rx1195_pos, rx1195_bstack
    pop $I19, rx1195_bstack
    lt rx1195_pos, -1, rx1195_done3252
    lt rx1195_pos, 0, rx1195_fail3254
    eq $I19, 0, rx1195_fail3254
    nqp_islist $I20, rx1195_cstack
    unless $I20, rx1195_jump3255
    elements $I18, rx1195_bstack
    le $I18, 0, rx1195_cut3256
    dec $I18
    set $I18, rx1195_bstack[$I18]
  rx1195_cut3256:
    assign rx1195_cstack, $I18
  rx1195_jump3255:
    jump $I19
  rx1195_done3252:
    rx1195_cur."!cursor_fail"()
    .return (rx1195_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_201_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1199_tgt
    .local int rx1199_pos
    .local int rx1199_off
    .local int rx1199_eos
    .local int rx1199_rep
    .local pmc rx1199_cur
    .local pmc rx1199_curclass
    .local pmc rx1199_bstack
    .local pmc rx1199_cstack
    (rx1199_cur, rx1199_tgt, rx1199_pos, rx1199_curclass, rx1199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1199_cur
    length rx1199_eos, rx1199_tgt
    eq $I19, 1, rx1199_restart3266
    gt rx1199_pos, rx1199_eos, rx1199_fail3267
    repr_get_attr_int $I11, self, rx1199_curclass, "$!from"
    ne $I11, -1, rxscan1200_done3273
    goto rxscan1200_scan3272
  rxscan1200_loop3271:
    inc rx1199_pos
    gt rx1199_pos, rx1199_eos, rx1199_fail3267
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!from", rx1199_pos
  rxscan1200_scan3272:
    nqp_rxmark rx1199_bstack, rxscan1200_loop3271, rx1199_pos, 0
  rxscan1200_done3273:
    nqp_rxmark rx1199_bstack, rxcap1201_fail3275, rx1199_pos, 0
    add $I11, rx1199_pos, 2
    gt $I11, rx1199_eos, rx1199_fail3267
    substr $S10, rx1199_tgt, rx1199_pos, 2
    ne $S10, ucs4:"ne", rx1199_fail3267
    add rx1199_pos, 2
    nqp_rxpeek $I19, rx1199_bstack, rxcap1201_fail3275
    inc $I19
    set $I11, rx1199_bstack[$I19]
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1199_pos)
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "sym")
    goto rxcap1201_done3274
  rxcap1201_fail3275:
    goto rx1199_fail3267
  rxcap1201_done3274:
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3267
    nqp_rxmark rx1199_bstack, rxsubrule1202_pass3276, -1, 0
  rxsubrule1202_pass3276:
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1199_pos, $P11, rx1199_curclass, "$!pos"
    rx1199_cur."!cursor_pass"(rx1199_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1199_cur)
  rx1199_restart3266:
    repr_get_attr_obj rx1199_cstack, rx1199_cur, rx1199_curclass, "$!cstack"
  rx1199_fail3267:
    unless rx1199_bstack, rx1199_done3265
    pop $I19, rx1199_bstack
    if_null rx1199_cstack, rx1199_cstack_done3270
    unless rx1199_cstack, rx1199_cstack_done3270
    dec $I19
    set $P11, rx1199_cstack[$I19]
  rx1199_cstack_done3270:
    pop rx1199_rep, rx1199_bstack
    pop rx1199_pos, rx1199_bstack
    pop $I19, rx1199_bstack
    lt rx1199_pos, -1, rx1199_done3265
    lt rx1199_pos, 0, rx1199_fail3267
    eq $I19, 0, rx1199_fail3267
    nqp_islist $I20, rx1199_cstack
    unless $I20, rx1199_jump3268
    elements $I18, rx1199_bstack
    le $I18, 0, rx1199_cut3269
    dec $I18
    set $I18, rx1199_bstack[$I18]
  rx1199_cut3269:
    assign rx1199_cstack, $I18
  rx1199_jump3268:
    jump $I19
  rx1199_done3265:
    rx1199_cur."!cursor_fail"()
    .return (rx1199_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_202_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1203_tgt
    .local int rx1203_pos
    .local int rx1203_off
    .local int rx1203_eos
    .local int rx1203_rep
    .local pmc rx1203_cur
    .local pmc rx1203_curclass
    .local pmc rx1203_bstack
    .local pmc rx1203_cstack
    (rx1203_cur, rx1203_tgt, rx1203_pos, rx1203_curclass, rx1203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1203_cur
    length rx1203_eos, rx1203_tgt
    eq $I19, 1, rx1203_restart3279
    gt rx1203_pos, rx1203_eos, rx1203_fail3280
    repr_get_attr_int $I11, self, rx1203_curclass, "$!from"
    ne $I11, -1, rxscan1204_done3286
    goto rxscan1204_scan3285
  rxscan1204_loop3284:
    inc rx1203_pos
    gt rx1203_pos, rx1203_eos, rx1203_fail3280
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!from", rx1203_pos
  rxscan1204_scan3285:
    nqp_rxmark rx1203_bstack, rxscan1204_loop3284, rx1203_pos, 0
  rxscan1204_done3286:
    nqp_rxmark rx1203_bstack, rxcap1205_fail3288, rx1203_pos, 0
    add $I11, rx1203_pos, 2
    gt $I11, rx1203_eos, rx1203_fail3280
    substr $S10, rx1203_tgt, rx1203_pos, 2
    ne $S10, ucs4:"le", rx1203_fail3280
    add rx1203_pos, 2
    nqp_rxpeek $I19, rx1203_bstack, rxcap1205_fail3288
    inc $I19
    set $I11, rx1203_bstack[$I19]
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!pos", rx1203_pos
    $P11 = rx1203_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1203_pos)
    rx1203_cstack = rx1203_cur."!cursor_capture"($P11, "sym")
    goto rxcap1205_done3287
  rxcap1205_fail3288:
    goto rx1203_fail3280
  rxcap1205_done3287:
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!pos", rx1203_pos
    $P11 = rx1203_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1203_curclass, "$!pos"
    lt $I11, 0, rx1203_fail3280
    nqp_rxmark rx1203_bstack, rxsubrule1206_pass3289, -1, 0
  rxsubrule1206_pass3289:
    rx1203_cstack = rx1203_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1203_pos, $P11, rx1203_curclass, "$!pos"
    rx1203_cur."!cursor_pass"(rx1203_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1203_cur)
  rx1203_restart3279:
    repr_get_attr_obj rx1203_cstack, rx1203_cur, rx1203_curclass, "$!cstack"
  rx1203_fail3280:
    unless rx1203_bstack, rx1203_done3278
    pop $I19, rx1203_bstack
    if_null rx1203_cstack, rx1203_cstack_done3283
    unless rx1203_cstack, rx1203_cstack_done3283
    dec $I19
    set $P11, rx1203_cstack[$I19]
  rx1203_cstack_done3283:
    pop rx1203_rep, rx1203_bstack
    pop rx1203_pos, rx1203_bstack
    pop $I19, rx1203_bstack
    lt rx1203_pos, -1, rx1203_done3278
    lt rx1203_pos, 0, rx1203_fail3280
    eq $I19, 0, rx1203_fail3280
    nqp_islist $I20, rx1203_cstack
    unless $I20, rx1203_jump3281
    elements $I18, rx1203_bstack
    le $I18, 0, rx1203_cut3282
    dec $I18
    set $I18, rx1203_bstack[$I18]
  rx1203_cut3282:
    assign rx1203_cstack, $I18
  rx1203_jump3281:
    jump $I19
  rx1203_done3278:
    rx1203_cur."!cursor_fail"()
    .return (rx1203_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_203_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1207_tgt
    .local int rx1207_pos
    .local int rx1207_off
    .local int rx1207_eos
    .local int rx1207_rep
    .local pmc rx1207_cur
    .local pmc rx1207_curclass
    .local pmc rx1207_bstack
    .local pmc rx1207_cstack
    (rx1207_cur, rx1207_tgt, rx1207_pos, rx1207_curclass, rx1207_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1207_cur
    length rx1207_eos, rx1207_tgt
    eq $I19, 1, rx1207_restart3292
    gt rx1207_pos, rx1207_eos, rx1207_fail3293
    repr_get_attr_int $I11, self, rx1207_curclass, "$!from"
    ne $I11, -1, rxscan1208_done3299
    goto rxscan1208_scan3298
  rxscan1208_loop3297:
    inc rx1207_pos
    gt rx1207_pos, rx1207_eos, rx1207_fail3293
    repr_bind_attr_int rx1207_cur, rx1207_curclass, "$!from", rx1207_pos
  rxscan1208_scan3298:
    nqp_rxmark rx1207_bstack, rxscan1208_loop3297, rx1207_pos, 0
  rxscan1208_done3299:
    nqp_rxmark rx1207_bstack, rxcap1209_fail3301, rx1207_pos, 0
    add $I11, rx1207_pos, 2
    gt $I11, rx1207_eos, rx1207_fail3293
    substr $S10, rx1207_tgt, rx1207_pos, 2
    ne $S10, ucs4:"ge", rx1207_fail3293
    add rx1207_pos, 2
    nqp_rxpeek $I19, rx1207_bstack, rxcap1209_fail3301
    inc $I19
    set $I11, rx1207_bstack[$I19]
    repr_bind_attr_int rx1207_cur, rx1207_curclass, "$!pos", rx1207_pos
    $P11 = rx1207_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1207_pos)
    rx1207_cstack = rx1207_cur."!cursor_capture"($P11, "sym")
    goto rxcap1209_done3300
  rxcap1209_fail3301:
    goto rx1207_fail3293
  rxcap1209_done3300:
    repr_bind_attr_int rx1207_cur, rx1207_curclass, "$!pos", rx1207_pos
    $P11 = rx1207_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1207_curclass, "$!pos"
    lt $I11, 0, rx1207_fail3293
    nqp_rxmark rx1207_bstack, rxsubrule1210_pass3302, -1, 0
  rxsubrule1210_pass3302:
    rx1207_cstack = rx1207_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1207_pos, $P11, rx1207_curclass, "$!pos"
    rx1207_cur."!cursor_pass"(rx1207_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1207_cur)
  rx1207_restart3292:
    repr_get_attr_obj rx1207_cstack, rx1207_cur, rx1207_curclass, "$!cstack"
  rx1207_fail3293:
    unless rx1207_bstack, rx1207_done3291
    pop $I19, rx1207_bstack
    if_null rx1207_cstack, rx1207_cstack_done3296
    unless rx1207_cstack, rx1207_cstack_done3296
    dec $I19
    set $P11, rx1207_cstack[$I19]
  rx1207_cstack_done3296:
    pop rx1207_rep, rx1207_bstack
    pop rx1207_pos, rx1207_bstack
    pop $I19, rx1207_bstack
    lt rx1207_pos, -1, rx1207_done3291
    lt rx1207_pos, 0, rx1207_fail3293
    eq $I19, 0, rx1207_fail3293
    nqp_islist $I20, rx1207_cstack
    unless $I20, rx1207_jump3294
    elements $I18, rx1207_bstack
    le $I18, 0, rx1207_cut3295
    dec $I18
    set $I18, rx1207_bstack[$I18]
  rx1207_cut3295:
    assign rx1207_cstack, $I18
  rx1207_jump3294:
    jump $I19
  rx1207_done3291:
    rx1207_cur."!cursor_fail"()
    .return (rx1207_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_204_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1211_tgt
    .local int rx1211_pos
    .local int rx1211_off
    .local int rx1211_eos
    .local int rx1211_rep
    .local pmc rx1211_cur
    .local pmc rx1211_curclass
    .local pmc rx1211_bstack
    .local pmc rx1211_cstack
    (rx1211_cur, rx1211_tgt, rx1211_pos, rx1211_curclass, rx1211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1211_cur
    length rx1211_eos, rx1211_tgt
    eq $I19, 1, rx1211_restart3305
    gt rx1211_pos, rx1211_eos, rx1211_fail3306
    repr_get_attr_int $I11, self, rx1211_curclass, "$!from"
    ne $I11, -1, rxscan1212_done3312
    goto rxscan1212_scan3311
  rxscan1212_loop3310:
    inc rx1211_pos
    gt rx1211_pos, rx1211_eos, rx1211_fail3306
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!from", rx1211_pos
  rxscan1212_scan3311:
    nqp_rxmark rx1211_bstack, rxscan1212_loop3310, rx1211_pos, 0
  rxscan1212_done3312:
    nqp_rxmark rx1211_bstack, rxcap1213_fail3314, rx1211_pos, 0
    add $I11, rx1211_pos, 2
    gt $I11, rx1211_eos, rx1211_fail3306
    substr $S10, rx1211_tgt, rx1211_pos, 2
    ne $S10, ucs4:"lt", rx1211_fail3306
    add rx1211_pos, 2
    nqp_rxpeek $I19, rx1211_bstack, rxcap1213_fail3314
    inc $I19
    set $I11, rx1211_bstack[$I19]
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!pos", rx1211_pos
    $P11 = rx1211_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1211_pos)
    rx1211_cstack = rx1211_cur."!cursor_capture"($P11, "sym")
    goto rxcap1213_done3313
  rxcap1213_fail3314:
    goto rx1211_fail3306
  rxcap1213_done3313:
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!pos", rx1211_pos
    $P11 = rx1211_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1211_curclass, "$!pos"
    lt $I11, 0, rx1211_fail3306
    nqp_rxmark rx1211_bstack, rxsubrule1214_pass3315, -1, 0
  rxsubrule1214_pass3315:
    rx1211_cstack = rx1211_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1211_pos, $P11, rx1211_curclass, "$!pos"
    rx1211_cur."!cursor_pass"(rx1211_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1211_cur)
  rx1211_restart3305:
    repr_get_attr_obj rx1211_cstack, rx1211_cur, rx1211_curclass, "$!cstack"
  rx1211_fail3306:
    unless rx1211_bstack, rx1211_done3304
    pop $I19, rx1211_bstack
    if_null rx1211_cstack, rx1211_cstack_done3309
    unless rx1211_cstack, rx1211_cstack_done3309
    dec $I19
    set $P11, rx1211_cstack[$I19]
  rx1211_cstack_done3309:
    pop rx1211_rep, rx1211_bstack
    pop rx1211_pos, rx1211_bstack
    pop $I19, rx1211_bstack
    lt rx1211_pos, -1, rx1211_done3304
    lt rx1211_pos, 0, rx1211_fail3306
    eq $I19, 0, rx1211_fail3306
    nqp_islist $I20, rx1211_cstack
    unless $I20, rx1211_jump3307
    elements $I18, rx1211_bstack
    le $I18, 0, rx1211_cut3308
    dec $I18
    set $I18, rx1211_bstack[$I18]
  rx1211_cut3308:
    assign rx1211_cstack, $I18
  rx1211_jump3307:
    jump $I19
  rx1211_done3304:
    rx1211_cur."!cursor_fail"()
    .return (rx1211_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_205_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1215_tgt
    .local int rx1215_pos
    .local int rx1215_off
    .local int rx1215_eos
    .local int rx1215_rep
    .local pmc rx1215_cur
    .local pmc rx1215_curclass
    .local pmc rx1215_bstack
    .local pmc rx1215_cstack
    (rx1215_cur, rx1215_tgt, rx1215_pos, rx1215_curclass, rx1215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1215_cur
    length rx1215_eos, rx1215_tgt
    eq $I19, 1, rx1215_restart3318
    gt rx1215_pos, rx1215_eos, rx1215_fail3319
    repr_get_attr_int $I11, self, rx1215_curclass, "$!from"
    ne $I11, -1, rxscan1216_done3325
    goto rxscan1216_scan3324
  rxscan1216_loop3323:
    inc rx1215_pos
    gt rx1215_pos, rx1215_eos, rx1215_fail3319
    repr_bind_attr_int rx1215_cur, rx1215_curclass, "$!from", rx1215_pos
  rxscan1216_scan3324:
    nqp_rxmark rx1215_bstack, rxscan1216_loop3323, rx1215_pos, 0
  rxscan1216_done3325:
    nqp_rxmark rx1215_bstack, rxcap1217_fail3327, rx1215_pos, 0
    add $I11, rx1215_pos, 2
    gt $I11, rx1215_eos, rx1215_fail3319
    substr $S10, rx1215_tgt, rx1215_pos, 2
    ne $S10, ucs4:"gt", rx1215_fail3319
    add rx1215_pos, 2
    nqp_rxpeek $I19, rx1215_bstack, rxcap1217_fail3327
    inc $I19
    set $I11, rx1215_bstack[$I19]
    repr_bind_attr_int rx1215_cur, rx1215_curclass, "$!pos", rx1215_pos
    $P11 = rx1215_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1215_pos)
    rx1215_cstack = rx1215_cur."!cursor_capture"($P11, "sym")
    goto rxcap1217_done3326
  rxcap1217_fail3327:
    goto rx1215_fail3319
  rxcap1217_done3326:
    repr_bind_attr_int rx1215_cur, rx1215_curclass, "$!pos", rx1215_pos
    $P11 = rx1215_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1215_curclass, "$!pos"
    lt $I11, 0, rx1215_fail3319
    nqp_rxmark rx1215_bstack, rxsubrule1218_pass3328, -1, 0
  rxsubrule1218_pass3328:
    rx1215_cstack = rx1215_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1215_pos, $P11, rx1215_curclass, "$!pos"
    rx1215_cur."!cursor_pass"(rx1215_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1215_cur)
  rx1215_restart3318:
    repr_get_attr_obj rx1215_cstack, rx1215_cur, rx1215_curclass, "$!cstack"
  rx1215_fail3319:
    unless rx1215_bstack, rx1215_done3317
    pop $I19, rx1215_bstack
    if_null rx1215_cstack, rx1215_cstack_done3322
    unless rx1215_cstack, rx1215_cstack_done3322
    dec $I19
    set $P11, rx1215_cstack[$I19]
  rx1215_cstack_done3322:
    pop rx1215_rep, rx1215_bstack
    pop rx1215_pos, rx1215_bstack
    pop $I19, rx1215_bstack
    lt rx1215_pos, -1, rx1215_done3317
    lt rx1215_pos, 0, rx1215_fail3319
    eq $I19, 0, rx1215_fail3319
    nqp_islist $I20, rx1215_cstack
    unless $I20, rx1215_jump3320
    elements $I18, rx1215_bstack
    le $I18, 0, rx1215_cut3321
    dec $I18
    set $I18, rx1215_bstack[$I18]
  rx1215_cut3321:
    assign rx1215_cstack, $I18
  rx1215_jump3320:
    jump $I19
  rx1215_done3317:
    rx1215_cur."!cursor_fail"()
    .return (rx1215_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_206_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1219_tgt
    .local int rx1219_pos
    .local int rx1219_off
    .local int rx1219_eos
    .local int rx1219_rep
    .local pmc rx1219_cur
    .local pmc rx1219_curclass
    .local pmc rx1219_bstack
    .local pmc rx1219_cstack
    (rx1219_cur, rx1219_tgt, rx1219_pos, rx1219_curclass, rx1219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1219_cur
    length rx1219_eos, rx1219_tgt
    eq $I19, 1, rx1219_restart3331
    gt rx1219_pos, rx1219_eos, rx1219_fail3332
    repr_get_attr_int $I11, self, rx1219_curclass, "$!from"
    ne $I11, -1, rxscan1220_done3338
    goto rxscan1220_scan3337
  rxscan1220_loop3336:
    inc rx1219_pos
    gt rx1219_pos, rx1219_eos, rx1219_fail3332
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!from", rx1219_pos
  rxscan1220_scan3337:
    nqp_rxmark rx1219_bstack, rxscan1220_loop3336, rx1219_pos, 0
  rxscan1220_done3338:
    nqp_rxmark rx1219_bstack, rxcap1221_fail3340, rx1219_pos, 0
    add $I11, rx1219_pos, 3
    gt $I11, rx1219_eos, rx1219_fail3332
    substr $S10, rx1219_tgt, rx1219_pos, 3
    ne $S10, ucs4:"=:=", rx1219_fail3332
    add rx1219_pos, 3
    nqp_rxpeek $I19, rx1219_bstack, rxcap1221_fail3340
    inc $I19
    set $I11, rx1219_bstack[$I19]
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!pos", rx1219_pos
    $P11 = rx1219_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1219_pos)
    rx1219_cstack = rx1219_cur."!cursor_capture"($P11, "sym")
    goto rxcap1221_done3339
  rxcap1221_fail3340:
    goto rx1219_fail3332
  rxcap1221_done3339:
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!pos", rx1219_pos
    $P11 = rx1219_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1219_curclass, "$!pos"
    lt $I11, 0, rx1219_fail3332
    nqp_rxmark rx1219_bstack, rxsubrule1222_pass3341, -1, 0
  rxsubrule1222_pass3341:
    rx1219_cstack = rx1219_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1219_pos, $P11, rx1219_curclass, "$!pos"
    rx1219_cur."!cursor_pass"(rx1219_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1219_cur)
  rx1219_restart3331:
    repr_get_attr_obj rx1219_cstack, rx1219_cur, rx1219_curclass, "$!cstack"
  rx1219_fail3332:
    unless rx1219_bstack, rx1219_done3330
    pop $I19, rx1219_bstack
    if_null rx1219_cstack, rx1219_cstack_done3335
    unless rx1219_cstack, rx1219_cstack_done3335
    dec $I19
    set $P11, rx1219_cstack[$I19]
  rx1219_cstack_done3335:
    pop rx1219_rep, rx1219_bstack
    pop rx1219_pos, rx1219_bstack
    pop $I19, rx1219_bstack
    lt rx1219_pos, -1, rx1219_done3330
    lt rx1219_pos, 0, rx1219_fail3332
    eq $I19, 0, rx1219_fail3332
    nqp_islist $I20, rx1219_cstack
    unless $I20, rx1219_jump3333
    elements $I18, rx1219_bstack
    le $I18, 0, rx1219_cut3334
    dec $I18
    set $I18, rx1219_bstack[$I18]
  rx1219_cut3334:
    assign rx1219_cstack, $I18
  rx1219_jump3333:
    jump $I19
  rx1219_done3330:
    rx1219_cur."!cursor_fail"()
    .return (rx1219_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_207_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1223_tgt
    .local int rx1223_pos
    .local int rx1223_off
    .local int rx1223_eos
    .local int rx1223_rep
    .local pmc rx1223_cur
    .local pmc rx1223_curclass
    .local pmc rx1223_bstack
    .local pmc rx1223_cstack
    (rx1223_cur, rx1223_tgt, rx1223_pos, rx1223_curclass, rx1223_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1223_cur
    length rx1223_eos, rx1223_tgt
    eq $I19, 1, rx1223_restart3344
    gt rx1223_pos, rx1223_eos, rx1223_fail3345
    repr_get_attr_int $I11, self, rx1223_curclass, "$!from"
    ne $I11, -1, rxscan1224_done3351
    goto rxscan1224_scan3350
  rxscan1224_loop3349:
    inc rx1223_pos
    gt rx1223_pos, rx1223_eos, rx1223_fail3345
    repr_bind_attr_int rx1223_cur, rx1223_curclass, "$!from", rx1223_pos
  rxscan1224_scan3350:
    nqp_rxmark rx1223_bstack, rxscan1224_loop3349, rx1223_pos, 0
  rxscan1224_done3351:
    nqp_rxmark rx1223_bstack, rxcap1225_fail3353, rx1223_pos, 0
    add $I11, rx1223_pos, 2
    gt $I11, rx1223_eos, rx1223_fail3345
    substr $S10, rx1223_tgt, rx1223_pos, 2
    ne $S10, ucs4:"~~", rx1223_fail3345
    add rx1223_pos, 2
    nqp_rxpeek $I19, rx1223_bstack, rxcap1225_fail3353
    inc $I19
    set $I11, rx1223_bstack[$I19]
    repr_bind_attr_int rx1223_cur, rx1223_curclass, "$!pos", rx1223_pos
    $P11 = rx1223_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1223_pos)
    rx1223_cstack = rx1223_cur."!cursor_capture"($P11, "sym")
    goto rxcap1225_done3352
  rxcap1225_fail3353:
    goto rx1223_fail3345
  rxcap1225_done3352:
    repr_bind_attr_int rx1223_cur, rx1223_curclass, "$!pos", rx1223_pos
    $P11 = rx1223_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1223_curclass, "$!pos"
    lt $I11, 0, rx1223_fail3345
    nqp_rxmark rx1223_bstack, rxsubrule1226_pass3354, -1, 0
  rxsubrule1226_pass3354:
    rx1223_cstack = rx1223_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1223_pos, $P11, rx1223_curclass, "$!pos"
    rx1223_cur."!cursor_pass"(rx1223_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1223_cur)
  rx1223_restart3344:
    repr_get_attr_obj rx1223_cstack, rx1223_cur, rx1223_curclass, "$!cstack"
  rx1223_fail3345:
    unless rx1223_bstack, rx1223_done3343
    pop $I19, rx1223_bstack
    if_null rx1223_cstack, rx1223_cstack_done3348
    unless rx1223_cstack, rx1223_cstack_done3348
    dec $I19
    set $P11, rx1223_cstack[$I19]
  rx1223_cstack_done3348:
    pop rx1223_rep, rx1223_bstack
    pop rx1223_pos, rx1223_bstack
    pop $I19, rx1223_bstack
    lt rx1223_pos, -1, rx1223_done3343
    lt rx1223_pos, 0, rx1223_fail3345
    eq $I19, 0, rx1223_fail3345
    nqp_islist $I20, rx1223_cstack
    unless $I20, rx1223_jump3346
    elements $I18, rx1223_bstack
    le $I18, 0, rx1223_cut3347
    dec $I18
    set $I18, rx1223_bstack[$I18]
  rx1223_cut3347:
    assign rx1223_cstack, $I18
  rx1223_jump3346:
    jump $I19
  rx1223_done3343:
    rx1223_cur."!cursor_fail"()
    .return (rx1223_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_208_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1227_tgt
    .local int rx1227_pos
    .local int rx1227_off
    .local int rx1227_eos
    .local int rx1227_rep
    .local pmc rx1227_cur
    .local pmc rx1227_curclass
    .local pmc rx1227_bstack
    .local pmc rx1227_cstack
    (rx1227_cur, rx1227_tgt, rx1227_pos, rx1227_curclass, rx1227_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1227_cur
    length rx1227_eos, rx1227_tgt
    eq $I19, 1, rx1227_restart3357
    gt rx1227_pos, rx1227_eos, rx1227_fail3358
    repr_get_attr_int $I11, self, rx1227_curclass, "$!from"
    ne $I11, -1, rxscan1228_done3364
    goto rxscan1228_scan3363
  rxscan1228_loop3362:
    inc rx1227_pos
    gt rx1227_pos, rx1227_eos, rx1227_fail3358
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!from", rx1227_pos
  rxscan1228_scan3363:
    nqp_rxmark rx1227_bstack, rxscan1228_loop3362, rx1227_pos, 0
  rxscan1228_done3364:
    nqp_rxmark rx1227_bstack, rxcap1229_fail3366, rx1227_pos, 0
    add $I11, rx1227_pos, 2
    gt $I11, rx1227_eos, rx1227_fail3358
    substr $S10, rx1227_tgt, rx1227_pos, 2
    ne $S10, ucs4:"&&", rx1227_fail3358
    add rx1227_pos, 2
    nqp_rxpeek $I19, rx1227_bstack, rxcap1229_fail3366
    inc $I19
    set $I11, rx1227_bstack[$I19]
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!pos", rx1227_pos
    $P11 = rx1227_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1227_pos)
    rx1227_cstack = rx1227_cur."!cursor_capture"($P11, "sym")
    goto rxcap1229_done3365
  rxcap1229_fail3366:
    goto rx1227_fail3358
  rxcap1229_done3365:
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!pos", rx1227_pos
    $P11 = rx1227_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1227_curclass, "$!pos"
    lt $I11, 0, rx1227_fail3358
    nqp_rxmark rx1227_bstack, rxsubrule1230_pass3367, -1, 0
  rxsubrule1230_pass3367:
    rx1227_cstack = rx1227_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1227_pos, $P11, rx1227_curclass, "$!pos"
    rx1227_cur."!cursor_pass"(rx1227_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1227_cur)
  rx1227_restart3357:
    repr_get_attr_obj rx1227_cstack, rx1227_cur, rx1227_curclass, "$!cstack"
  rx1227_fail3358:
    unless rx1227_bstack, rx1227_done3356
    pop $I19, rx1227_bstack
    if_null rx1227_cstack, rx1227_cstack_done3361
    unless rx1227_cstack, rx1227_cstack_done3361
    dec $I19
    set $P11, rx1227_cstack[$I19]
  rx1227_cstack_done3361:
    pop rx1227_rep, rx1227_bstack
    pop rx1227_pos, rx1227_bstack
    pop $I19, rx1227_bstack
    lt rx1227_pos, -1, rx1227_done3356
    lt rx1227_pos, 0, rx1227_fail3358
    eq $I19, 0, rx1227_fail3358
    nqp_islist $I20, rx1227_cstack
    unless $I20, rx1227_jump3359
    elements $I18, rx1227_bstack
    le $I18, 0, rx1227_cut3360
    dec $I18
    set $I18, rx1227_bstack[$I18]
  rx1227_cut3360:
    assign rx1227_cstack, $I18
  rx1227_jump3359:
    jump $I19
  rx1227_done3356:
    rx1227_cur."!cursor_fail"()
    .return (rx1227_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_209_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1231_tgt
    .local int rx1231_pos
    .local int rx1231_off
    .local int rx1231_eos
    .local int rx1231_rep
    .local pmc rx1231_cur
    .local pmc rx1231_curclass
    .local pmc rx1231_bstack
    .local pmc rx1231_cstack
    (rx1231_cur, rx1231_tgt, rx1231_pos, rx1231_curclass, rx1231_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1231_cur
    length rx1231_eos, rx1231_tgt
    eq $I19, 1, rx1231_restart3370
    gt rx1231_pos, rx1231_eos, rx1231_fail3371
    repr_get_attr_int $I11, self, rx1231_curclass, "$!from"
    ne $I11, -1, rxscan1232_done3377
    goto rxscan1232_scan3376
  rxscan1232_loop3375:
    inc rx1231_pos
    gt rx1231_pos, rx1231_eos, rx1231_fail3371
    repr_bind_attr_int rx1231_cur, rx1231_curclass, "$!from", rx1231_pos
  rxscan1232_scan3376:
    nqp_rxmark rx1231_bstack, rxscan1232_loop3375, rx1231_pos, 0
  rxscan1232_done3377:
    nqp_rxmark rx1231_bstack, rxcap1233_fail3379, rx1231_pos, 0
    add $I11, rx1231_pos, 2
    gt $I11, rx1231_eos, rx1231_fail3371
    substr $S10, rx1231_tgt, rx1231_pos, 2
    ne $S10, ucs4:"||", rx1231_fail3371
    add rx1231_pos, 2
    nqp_rxpeek $I19, rx1231_bstack, rxcap1233_fail3379
    inc $I19
    set $I11, rx1231_bstack[$I19]
    repr_bind_attr_int rx1231_cur, rx1231_curclass, "$!pos", rx1231_pos
    $P11 = rx1231_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1231_pos)
    rx1231_cstack = rx1231_cur."!cursor_capture"($P11, "sym")
    goto rxcap1233_done3378
  rxcap1233_fail3379:
    goto rx1231_fail3371
  rxcap1233_done3378:
    repr_bind_attr_int rx1231_cur, rx1231_curclass, "$!pos", rx1231_pos
    $P11 = rx1231_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1231_curclass, "$!pos"
    lt $I11, 0, rx1231_fail3371
    nqp_rxmark rx1231_bstack, rxsubrule1234_pass3380, -1, 0
  rxsubrule1234_pass3380:
    rx1231_cstack = rx1231_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1231_pos, $P11, rx1231_curclass, "$!pos"
    rx1231_cur."!cursor_pass"(rx1231_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1231_cur)
  rx1231_restart3370:
    repr_get_attr_obj rx1231_cstack, rx1231_cur, rx1231_curclass, "$!cstack"
  rx1231_fail3371:
    unless rx1231_bstack, rx1231_done3369
    pop $I19, rx1231_bstack
    if_null rx1231_cstack, rx1231_cstack_done3374
    unless rx1231_cstack, rx1231_cstack_done3374
    dec $I19
    set $P11, rx1231_cstack[$I19]
  rx1231_cstack_done3374:
    pop rx1231_rep, rx1231_bstack
    pop rx1231_pos, rx1231_bstack
    pop $I19, rx1231_bstack
    lt rx1231_pos, -1, rx1231_done3369
    lt rx1231_pos, 0, rx1231_fail3371
    eq $I19, 0, rx1231_fail3371
    nqp_islist $I20, rx1231_cstack
    unless $I20, rx1231_jump3372
    elements $I18, rx1231_bstack
    le $I18, 0, rx1231_cut3373
    dec $I18
    set $I18, rx1231_bstack[$I18]
  rx1231_cut3373:
    assign rx1231_cstack, $I18
  rx1231_jump3372:
    jump $I19
  rx1231_done3369:
    rx1231_cur."!cursor_fail"()
    .return (rx1231_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_210_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1235_tgt
    .local int rx1235_pos
    .local int rx1235_off
    .local int rx1235_eos
    .local int rx1235_rep
    .local pmc rx1235_cur
    .local pmc rx1235_curclass
    .local pmc rx1235_bstack
    .local pmc rx1235_cstack
    (rx1235_cur, rx1235_tgt, rx1235_pos, rx1235_curclass, rx1235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1235_cur
    length rx1235_eos, rx1235_tgt
    eq $I19, 1, rx1235_restart3383
    gt rx1235_pos, rx1235_eos, rx1235_fail3384
    repr_get_attr_int $I11, self, rx1235_curclass, "$!from"
    ne $I11, -1, rxscan1236_done3390
    goto rxscan1236_scan3389
  rxscan1236_loop3388:
    inc rx1235_pos
    gt rx1235_pos, rx1235_eos, rx1235_fail3384
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!from", rx1235_pos
  rxscan1236_scan3389:
    nqp_rxmark rx1235_bstack, rxscan1236_loop3388, rx1235_pos, 0
  rxscan1236_done3390:
    nqp_rxmark rx1235_bstack, rxcap1237_fail3392, rx1235_pos, 0
    add $I11, rx1235_pos, 2
    gt $I11, rx1235_eos, rx1235_fail3384
    substr $S10, rx1235_tgt, rx1235_pos, 2
    ne $S10, ucs4:"//", rx1235_fail3384
    add rx1235_pos, 2
    nqp_rxpeek $I19, rx1235_bstack, rxcap1237_fail3392
    inc $I19
    set $I11, rx1235_bstack[$I19]
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!pos", rx1235_pos
    $P11 = rx1235_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1235_pos)
    rx1235_cstack = rx1235_cur."!cursor_capture"($P11, "sym")
    goto rxcap1237_done3391
  rxcap1237_fail3392:
    goto rx1235_fail3384
  rxcap1237_done3391:
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!pos", rx1235_pos
    $P11 = rx1235_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1235_curclass, "$!pos"
    lt $I11, 0, rx1235_fail3384
    nqp_rxmark rx1235_bstack, rxsubrule1238_pass3393, -1, 0
  rxsubrule1238_pass3393:
    rx1235_cstack = rx1235_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1235_pos, $P11, rx1235_curclass, "$!pos"
    rx1235_cur."!cursor_pass"(rx1235_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1235_cur)
  rx1235_restart3383:
    repr_get_attr_obj rx1235_cstack, rx1235_cur, rx1235_curclass, "$!cstack"
  rx1235_fail3384:
    unless rx1235_bstack, rx1235_done3382
    pop $I19, rx1235_bstack
    if_null rx1235_cstack, rx1235_cstack_done3387
    unless rx1235_cstack, rx1235_cstack_done3387
    dec $I19
    set $P11, rx1235_cstack[$I19]
  rx1235_cstack_done3387:
    pop rx1235_rep, rx1235_bstack
    pop rx1235_pos, rx1235_bstack
    pop $I19, rx1235_bstack
    lt rx1235_pos, -1, rx1235_done3382
    lt rx1235_pos, 0, rx1235_fail3384
    eq $I19, 0, rx1235_fail3384
    nqp_islist $I20, rx1235_cstack
    unless $I20, rx1235_jump3385
    elements $I18, rx1235_bstack
    le $I18, 0, rx1235_cut3386
    dec $I18
    set $I18, rx1235_bstack[$I18]
  rx1235_cut3386:
    assign rx1235_cstack, $I18
  rx1235_jump3385:
    jump $I19
  rx1235_done3382:
    rx1235_cur."!cursor_fail"()
    .return (rx1235_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_211_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1239_tgt
    .local int rx1239_pos
    .local int rx1239_off
    .local int rx1239_eos
    .local int rx1239_rep
    .local pmc rx1239_cur
    .local pmc rx1239_curclass
    .local pmc rx1239_bstack
    .local pmc rx1239_cstack
    (rx1239_cur, rx1239_tgt, rx1239_pos, rx1239_curclass, rx1239_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1239_cur
    length rx1239_eos, rx1239_tgt
    eq $I19, 1, rx1239_restart3396
    gt rx1239_pos, rx1239_eos, rx1239_fail3397
    repr_get_attr_int $I11, self, rx1239_curclass, "$!from"
    ne $I11, -1, rxscan1240_done3403
    goto rxscan1240_scan3402
  rxscan1240_loop3401:
    inc rx1239_pos
    gt rx1239_pos, rx1239_eos, rx1239_fail3397
    repr_bind_attr_int rx1239_cur, rx1239_curclass, "$!from", rx1239_pos
  rxscan1240_scan3402:
    nqp_rxmark rx1239_bstack, rxscan1240_loop3401, rx1239_pos, 0
  rxscan1240_done3403:
    add $I11, rx1239_pos, 2
    gt $I11, rx1239_eos, rx1239_fail3397
    substr $S10, rx1239_tgt, rx1239_pos, 2
    ne $S10, ucs4:"??", rx1239_fail3397
    add rx1239_pos, 2
    repr_bind_attr_int rx1239_cur, rx1239_curclass, "$!pos", rx1239_pos
    $P11 = rx1239_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1239_curclass, "$!pos"
    lt $I11, 0, rx1239_fail3397
    repr_get_attr_int rx1239_pos, $P11, rx1239_curclass, "$!pos"
    repr_bind_attr_int rx1239_cur, rx1239_curclass, "$!pos", rx1239_pos
    $P11 = rx1239_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1239_curclass, "$!pos"
    lt $I11, 0, rx1239_fail3397
    nqp_rxmark rx1239_bstack, rxsubrule1242_pass3405, -1, 0
  rxsubrule1242_pass3405:
    rx1239_cstack = rx1239_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1239_pos, $P11, rx1239_curclass, "$!pos"
    add $I11, rx1239_pos, 2
    gt $I11, rx1239_eos, rx1239_fail3397
    substr $S10, rx1239_tgt, rx1239_pos, 2
    ne $S10, ucs4:"!!", rx1239_fail3397
    add rx1239_pos, 2
    repr_bind_attr_int rx1239_cur, rx1239_curclass, "$!pos", rx1239_pos
    $P11 = rx1239_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1239_curclass, "$!pos"
    lt $I11, 0, rx1239_fail3397
    nqp_rxmark rx1239_bstack, rxsubrule1243_pass3406, -1, 0
  rxsubrule1243_pass3406:
    rx1239_cstack = rx1239_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1239_pos, $P11, rx1239_curclass, "$!pos"
    rx1239_cur."!cursor_pass"(rx1239_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1239_cur)
  rx1239_restart3396:
    repr_get_attr_obj rx1239_cstack, rx1239_cur, rx1239_curclass, "$!cstack"
  rx1239_fail3397:
    unless rx1239_bstack, rx1239_done3395
    pop $I19, rx1239_bstack
    if_null rx1239_cstack, rx1239_cstack_done3400
    unless rx1239_cstack, rx1239_cstack_done3400
    dec $I19
    set $P11, rx1239_cstack[$I19]
  rx1239_cstack_done3400:
    pop rx1239_rep, rx1239_bstack
    pop rx1239_pos, rx1239_bstack
    pop $I19, rx1239_bstack
    lt rx1239_pos, -1, rx1239_done3395
    lt rx1239_pos, 0, rx1239_fail3397
    eq $I19, 0, rx1239_fail3397
    nqp_islist $I20, rx1239_cstack
    unless $I20, rx1239_jump3398
    elements $I18, rx1239_bstack
    le $I18, 0, rx1239_cut3399
    dec $I18
    set $I18, rx1239_bstack[$I18]
  rx1239_cut3399:
    assign rx1239_cstack, $I18
  rx1239_jump3398:
    jump $I19
  rx1239_done3395:
    rx1239_cur."!cursor_fail"()
    .return (rx1239_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_212_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1368
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1244_tgt
    .local int rx1244_pos
    .local int rx1244_off
    .local int rx1244_eos
    .local int rx1244_rep
    .local pmc rx1244_cur
    .local pmc rx1244_curclass
    .local pmc rx1244_bstack
    .local pmc rx1244_cstack
    (rx1244_cur, rx1244_tgt, rx1244_pos, rx1244_curclass, rx1244_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1244_cur
    length rx1244_eos, rx1244_tgt
    eq $I19, 1, rx1244_restart3409
    gt rx1244_pos, rx1244_eos, rx1244_fail3410
    repr_get_attr_int $I11, self, rx1244_curclass, "$!from"
    ne $I11, -1, rxscan1245_done3416
    goto rxscan1245_scan3415
  rxscan1245_loop3414:
    inc rx1244_pos
    gt rx1244_pos, rx1244_eos, rx1244_fail3410
    repr_bind_attr_int rx1244_cur, rx1244_curclass, "$!from", rx1244_pos
  rxscan1245_scan3415:
    nqp_rxmark rx1244_bstack, rxscan1245_loop3414, rx1244_pos, 0
  rxscan1245_done3416:
    nqp_rxmark rx1244_bstack, rxcap1246_fail3418, rx1244_pos, 0
    add $I11, rx1244_pos, 1
    gt $I11, rx1244_eos, rx1244_fail3410
    substr $S10, rx1244_tgt, rx1244_pos, 1
    ne $S10, ucs4:"=", rx1244_fail3410
    add rx1244_pos, 1
    nqp_rxpeek $I19, rx1244_bstack, rxcap1246_fail3418
    inc $I19
    set $I11, rx1244_bstack[$I19]
    repr_bind_attr_int rx1244_cur, rx1244_curclass, "$!pos", rx1244_pos
    $P11 = rx1244_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1244_pos)
    rx1244_cstack = rx1244_cur."!cursor_capture"($P11, "sym")
    goto rxcap1246_done3417
  rxcap1246_fail3418:
    goto rx1244_fail3410
  rxcap1246_done3417:
    repr_bind_attr_int rx1244_cur, rx1244_curclass, "$!pos", rx1244_pos
    $P11 = rx1244_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1244_curclass, "$!pos"
    lt $I11, 0, rx1244_fail3410
    repr_get_attr_int rx1244_pos, $P11, rx1244_curclass, "$!pos"
    rx1244_cur."!cursor_pass"(rx1244_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1244_cur)
  rx1244_restart3409:
    repr_get_attr_obj rx1244_cstack, rx1244_cur, rx1244_curclass, "$!cstack"
  rx1244_fail3410:
    unless rx1244_bstack, rx1244_done3408
    pop $I19, rx1244_bstack
    if_null rx1244_cstack, rx1244_cstack_done3413
    unless rx1244_cstack, rx1244_cstack_done3413
    dec $I19
    set $P11, rx1244_cstack[$I19]
  rx1244_cstack_done3413:
    pop rx1244_rep, rx1244_bstack
    pop rx1244_pos, rx1244_bstack
    pop $I19, rx1244_bstack
    lt rx1244_pos, -1, rx1244_done3408
    lt rx1244_pos, 0, rx1244_fail3410
    eq $I19, 0, rx1244_fail3410
    nqp_islist $I20, rx1244_cstack
    unless $I20, rx1244_jump3411
    elements $I18, rx1244_bstack
    le $I18, 0, rx1244_cut3412
    dec $I18
    set $I18, rx1244_bstack[$I18]
  rx1244_cut3412:
    assign rx1244_cstack, $I18
  rx1244_jump3411:
    jump $I19
  rx1244_done3408:
    rx1244_cur."!cursor_fail"()
    .return (rx1244_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_213_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1248_tgt
    .local int rx1248_pos
    .local int rx1248_off
    .local int rx1248_eos
    .local int rx1248_rep
    .local pmc rx1248_cur
    .local pmc rx1248_curclass
    .local pmc rx1248_bstack
    .local pmc rx1248_cstack
    (rx1248_cur, rx1248_tgt, rx1248_pos, rx1248_curclass, rx1248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1248_cur
    length rx1248_eos, rx1248_tgt
    eq $I19, 1, rx1248_restart3422
    gt rx1248_pos, rx1248_eos, rx1248_fail3423
    repr_get_attr_int $I11, self, rx1248_curclass, "$!from"
    ne $I11, -1, rxscan1249_done3429
    goto rxscan1249_scan3428
  rxscan1249_loop3427:
    inc rx1248_pos
    gt rx1248_pos, rx1248_eos, rx1248_fail3423
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!from", rx1248_pos
  rxscan1249_scan3428:
    nqp_rxmark rx1248_bstack, rxscan1249_loop3427, rx1248_pos, 0
  rxscan1249_done3429:
    nqp_rxmark rx1248_bstack, rxcap1250_fail3431, rx1248_pos, 0
    add $I11, rx1248_pos, 2
    gt $I11, rx1248_eos, rx1248_fail3423
    substr $S10, rx1248_tgt, rx1248_pos, 2
    ne $S10, ucs4:":=", rx1248_fail3423
    add rx1248_pos, 2
    nqp_rxpeek $I19, rx1248_bstack, rxcap1250_fail3431
    inc $I19
    set $I11, rx1248_bstack[$I19]
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!pos", rx1248_pos
    $P11 = rx1248_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1248_pos)
    rx1248_cstack = rx1248_cur."!cursor_capture"($P11, "sym")
    goto rxcap1250_done3430
  rxcap1250_fail3431:
    goto rx1248_fail3423
  rxcap1250_done3430:
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!pos", rx1248_pos
    $P11 = rx1248_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1248_curclass, "$!pos"
    lt $I11, 0, rx1248_fail3423
    nqp_rxmark rx1248_bstack, rxsubrule1251_pass3432, -1, 0
  rxsubrule1251_pass3432:
    rx1248_cstack = rx1248_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1248_pos, $P11, rx1248_curclass, "$!pos"
    rx1248_cur."!cursor_pass"(rx1248_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1248_cur)
  rx1248_restart3422:
    repr_get_attr_obj rx1248_cstack, rx1248_cur, rx1248_curclass, "$!cstack"
  rx1248_fail3423:
    unless rx1248_bstack, rx1248_done3421
    pop $I19, rx1248_bstack
    if_null rx1248_cstack, rx1248_cstack_done3426
    unless rx1248_cstack, rx1248_cstack_done3426
    dec $I19
    set $P11, rx1248_cstack[$I19]
  rx1248_cstack_done3426:
    pop rx1248_rep, rx1248_bstack
    pop rx1248_pos, rx1248_bstack
    pop $I19, rx1248_bstack
    lt rx1248_pos, -1, rx1248_done3421
    lt rx1248_pos, 0, rx1248_fail3423
    eq $I19, 0, rx1248_fail3423
    nqp_islist $I20, rx1248_cstack
    unless $I20, rx1248_jump3424
    elements $I18, rx1248_bstack
    le $I18, 0, rx1248_cut3425
    dec $I18
    set $I18, rx1248_bstack[$I18]
  rx1248_cut3425:
    assign rx1248_cstack, $I18
  rx1248_jump3424:
    jump $I19
  rx1248_done3421:
    rx1248_cur."!cursor_fail"()
    .return (rx1248_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_214_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1252_tgt
    .local int rx1252_pos
    .local int rx1252_off
    .local int rx1252_eos
    .local int rx1252_rep
    .local pmc rx1252_cur
    .local pmc rx1252_curclass
    .local pmc rx1252_bstack
    .local pmc rx1252_cstack
    (rx1252_cur, rx1252_tgt, rx1252_pos, rx1252_curclass, rx1252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1252_cur
    length rx1252_eos, rx1252_tgt
    eq $I19, 1, rx1252_restart3435
    gt rx1252_pos, rx1252_eos, rx1252_fail3436
    repr_get_attr_int $I11, self, rx1252_curclass, "$!from"
    ne $I11, -1, rxscan1253_done3442
    goto rxscan1253_scan3441
  rxscan1253_loop3440:
    inc rx1252_pos
    gt rx1252_pos, rx1252_eos, rx1252_fail3436
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!from", rx1252_pos
  rxscan1253_scan3441:
    nqp_rxmark rx1252_bstack, rxscan1253_loop3440, rx1252_pos, 0
  rxscan1253_done3442:
    nqp_rxmark rx1252_bstack, rxcap1254_fail3444, rx1252_pos, 0
    add $I11, rx1252_pos, 3
    gt $I11, rx1252_eos, rx1252_fail3436
    substr $S10, rx1252_tgt, rx1252_pos, 3
    ne $S10, ucs4:"::=", rx1252_fail3436
    add rx1252_pos, 3
    nqp_rxpeek $I19, rx1252_bstack, rxcap1254_fail3444
    inc $I19
    set $I11, rx1252_bstack[$I19]
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1252_pos)
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "sym")
    goto rxcap1254_done3443
  rxcap1254_fail3444:
    goto rx1252_fail3436
  rxcap1254_done3443:
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3436
    nqp_rxmark rx1252_bstack, rxsubrule1255_pass3445, -1, 0
  rxsubrule1255_pass3445:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    rx1252_cur."!cursor_pass"(rx1252_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1252_cur)
  rx1252_restart3435:
    repr_get_attr_obj rx1252_cstack, rx1252_cur, rx1252_curclass, "$!cstack"
  rx1252_fail3436:
    unless rx1252_bstack, rx1252_done3434
    pop $I19, rx1252_bstack
    if_null rx1252_cstack, rx1252_cstack_done3439
    unless rx1252_cstack, rx1252_cstack_done3439
    dec $I19
    set $P11, rx1252_cstack[$I19]
  rx1252_cstack_done3439:
    pop rx1252_rep, rx1252_bstack
    pop rx1252_pos, rx1252_bstack
    pop $I19, rx1252_bstack
    lt rx1252_pos, -1, rx1252_done3434
    lt rx1252_pos, 0, rx1252_fail3436
    eq $I19, 0, rx1252_fail3436
    nqp_islist $I20, rx1252_cstack
    unless $I20, rx1252_jump3437
    elements $I18, rx1252_bstack
    le $I18, 0, rx1252_cut3438
    dec $I18
    set $I18, rx1252_bstack[$I18]
  rx1252_cut3438:
    assign rx1252_cstack, $I18
  rx1252_jump3437:
    jump $I19
  rx1252_done3434:
    rx1252_cur."!cursor_fail"()
    .return (rx1252_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_215_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1256_tgt
    .local int rx1256_pos
    .local int rx1256_off
    .local int rx1256_eos
    .local int rx1256_rep
    .local pmc rx1256_cur
    .local pmc rx1256_curclass
    .local pmc rx1256_bstack
    .local pmc rx1256_cstack
    (rx1256_cur, rx1256_tgt, rx1256_pos, rx1256_curclass, rx1256_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1256_cur
    length rx1256_eos, rx1256_tgt
    eq $I19, 1, rx1256_restart3448
    gt rx1256_pos, rx1256_eos, rx1256_fail3449
    repr_get_attr_int $I11, self, rx1256_curclass, "$!from"
    ne $I11, -1, rxscan1257_done3455
    goto rxscan1257_scan3454
  rxscan1257_loop3453:
    inc rx1256_pos
    gt rx1256_pos, rx1256_eos, rx1256_fail3449
    repr_bind_attr_int rx1256_cur, rx1256_curclass, "$!from", rx1256_pos
  rxscan1257_scan3454:
    nqp_rxmark rx1256_bstack, rxscan1257_loop3453, rx1256_pos, 0
  rxscan1257_done3455:
    nqp_rxmark rx1256_bstack, rxcap1258_fail3457, rx1256_pos, 0
    add $I11, rx1256_pos, 1
    gt $I11, rx1256_eos, rx1256_fail3449
    substr $S10, rx1256_tgt, rx1256_pos, 1
    ne $S10, ucs4:",", rx1256_fail3449
    add rx1256_pos, 1
    nqp_rxpeek $I19, rx1256_bstack, rxcap1258_fail3457
    inc $I19
    set $I11, rx1256_bstack[$I19]
    repr_bind_attr_int rx1256_cur, rx1256_curclass, "$!pos", rx1256_pos
    $P11 = rx1256_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1256_pos)
    rx1256_cstack = rx1256_cur."!cursor_capture"($P11, "sym")
    goto rxcap1258_done3456
  rxcap1258_fail3457:
    goto rx1256_fail3449
  rxcap1258_done3456:
    repr_bind_attr_int rx1256_cur, rx1256_curclass, "$!pos", rx1256_pos
    $P11 = rx1256_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1256_curclass, "$!pos"
    lt $I11, 0, rx1256_fail3449
    nqp_rxmark rx1256_bstack, rxsubrule1259_pass3458, -1, 0
  rxsubrule1259_pass3458:
    rx1256_cstack = rx1256_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1256_pos, $P11, rx1256_curclass, "$!pos"
    rx1256_cur."!cursor_pass"(rx1256_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1256_cur)
  rx1256_restart3448:
    repr_get_attr_obj rx1256_cstack, rx1256_cur, rx1256_curclass, "$!cstack"
  rx1256_fail3449:
    unless rx1256_bstack, rx1256_done3447
    pop $I19, rx1256_bstack
    if_null rx1256_cstack, rx1256_cstack_done3452
    unless rx1256_cstack, rx1256_cstack_done3452
    dec $I19
    set $P11, rx1256_cstack[$I19]
  rx1256_cstack_done3452:
    pop rx1256_rep, rx1256_bstack
    pop rx1256_pos, rx1256_bstack
    pop $I19, rx1256_bstack
    lt rx1256_pos, -1, rx1256_done3447
    lt rx1256_pos, 0, rx1256_fail3449
    eq $I19, 0, rx1256_fail3449
    nqp_islist $I20, rx1256_cstack
    unless $I20, rx1256_jump3450
    elements $I18, rx1256_bstack
    le $I18, 0, rx1256_cut3451
    dec $I18
    set $I18, rx1256_bstack[$I18]
  rx1256_cut3451:
    assign rx1256_cstack, $I18
  rx1256_jump3450:
    jump $I19
  rx1256_done3447:
    rx1256_cur."!cursor_fail"()
    .return (rx1256_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_216_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_406_1359718901.265' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1260_tgt
    .local int rx1260_pos
    .local int rx1260_off
    .local int rx1260_eos
    .local int rx1260_rep
    .local pmc rx1260_cur
    .local pmc rx1260_curclass
    .local pmc rx1260_bstack
    .local pmc rx1260_cstack
    (rx1260_cur, rx1260_tgt, rx1260_pos, rx1260_curclass, rx1260_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1260_cur
    length rx1260_eos, rx1260_tgt
    eq $I19, 1, rx1260_restart3461
    gt rx1260_pos, rx1260_eos, rx1260_fail3462
    repr_get_attr_int $I11, self, rx1260_curclass, "$!from"
    ne $I11, -1, rxscan1261_done3468
    goto rxscan1261_scan3467
  rxscan1261_loop3466:
    inc rx1260_pos
    gt rx1260_pos, rx1260_eos, rx1260_fail3462
    repr_bind_attr_int rx1260_cur, rx1260_curclass, "$!from", rx1260_pos
  rxscan1261_scan3467:
    nqp_rxmark rx1260_bstack, rxscan1261_loop3466, rx1260_pos, 0
  rxscan1261_done3468:
    nqp_rxmark rx1260_bstack, rxcap1262_fail3470, rx1260_pos, 0
    add $I11, rx1260_pos, 6
    gt $I11, rx1260_eos, rx1260_fail3462
    substr $S10, rx1260_tgt, rx1260_pos, 6
    ne $S10, ucs4:"return", rx1260_fail3462
    add rx1260_pos, 6
    nqp_rxpeek $I19, rx1260_bstack, rxcap1262_fail3470
    inc $I19
    set $I11, rx1260_bstack[$I19]
    repr_bind_attr_int rx1260_cur, rx1260_curclass, "$!pos", rx1260_pos
    $P11 = rx1260_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1260_pos)
    rx1260_cstack = rx1260_cur."!cursor_capture"($P11, "sym")
    goto rxcap1262_done3469
  rxcap1262_fail3470:
    goto rx1260_fail3462
  rxcap1262_done3469:
    ge rx1260_pos, rx1260_eos, rx1260_fail3462
    is_cclass $I11, .CCLASS_WHITESPACE, rx1260_tgt, rx1260_pos
    unless $I11, rx1260_fail3462
    add rx1260_pos, 1
    repr_bind_attr_int rx1260_cur, rx1260_curclass, "$!pos", rx1260_pos
    $P11 = rx1260_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1260_curclass, "$!pos"
    lt $I11, 0, rx1260_fail3462
    nqp_rxmark rx1260_bstack, rxsubrule1263_pass3471, -1, 0
  rxsubrule1263_pass3471:
    rx1260_cstack = rx1260_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1260_pos, $P11, rx1260_curclass, "$!pos"
    repr_bind_attr_int rx1260_cur, rx1260_curclass, "$!pos", rx1260_pos
    store_lex unicode:"$\x{a2}", rx1260_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_406_1359718901.265' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1260_cur."!cursor_pass"(rx1260_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1260_cur)
  rx1260_restart3461:
    repr_get_attr_obj rx1260_cstack, rx1260_cur, rx1260_curclass, "$!cstack"
  rx1260_fail3462:
    unless rx1260_bstack, rx1260_done3460
    pop $I19, rx1260_bstack
    if_null rx1260_cstack, rx1260_cstack_done3465
    unless rx1260_cstack, rx1260_cstack_done3465
    dec $I19
    set $P11, rx1260_cstack[$I19]
  rx1260_cstack_done3465:
    pop rx1260_rep, rx1260_bstack
    pop rx1260_pos, rx1260_bstack
    pop $I19, rx1260_bstack
    lt rx1260_pos, -1, rx1260_done3460
    lt rx1260_pos, 0, rx1260_fail3462
    eq $I19, 0, rx1260_fail3462
    nqp_islist $I20, rx1260_cstack
    unless $I20, rx1260_jump3463
    elements $I18, rx1260_bstack
    le $I18, 0, rx1260_cut3464
    dec $I18
    set $I18, rx1260_bstack[$I18]
  rx1260_cut3464:
    assign rx1260_cstack, $I18
  rx1260_jump3463:
    jump $I19
  rx1260_done3460:
    rx1260_cur."!cursor_fail"()
    .return (rx1260_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1359718901.265") :anon :lex :outer("cuid_216_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_217_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1264_tgt
    .local int rx1264_pos
    .local int rx1264_off
    .local int rx1264_eos
    .local int rx1264_rep
    .local pmc rx1264_cur
    .local pmc rx1264_curclass
    .local pmc rx1264_bstack
    .local pmc rx1264_cstack
    (rx1264_cur, rx1264_tgt, rx1264_pos, rx1264_curclass, rx1264_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1264_cur
    length rx1264_eos, rx1264_tgt
    eq $I19, 1, rx1264_restart3474
    gt rx1264_pos, rx1264_eos, rx1264_fail3475
    repr_get_attr_int $I11, self, rx1264_curclass, "$!from"
    ne $I11, -1, rxscan1265_done3481
    goto rxscan1265_scan3480
  rxscan1265_loop3479:
    inc rx1264_pos
    gt rx1264_pos, rx1264_eos, rx1264_fail3475
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!from", rx1264_pos
  rxscan1265_scan3480:
    nqp_rxmark rx1264_bstack, rxscan1265_loop3479, rx1264_pos, 0
  rxscan1265_done3481:
    nqp_rxmark rx1264_bstack, rxcap1266_fail3483, rx1264_pos, 0
    add $I11, rx1264_pos, 4
    gt $I11, rx1264_eos, rx1264_fail3475
    substr $S10, rx1264_tgt, rx1264_pos, 4
    ne $S10, ucs4:"make", rx1264_fail3475
    add rx1264_pos, 4
    nqp_rxpeek $I19, rx1264_bstack, rxcap1266_fail3483
    inc $I19
    set $I11, rx1264_bstack[$I19]
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!pos", rx1264_pos
    $P11 = rx1264_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1264_pos)
    rx1264_cstack = rx1264_cur."!cursor_capture"($P11, "sym")
    goto rxcap1266_done3482
  rxcap1266_fail3483:
    goto rx1264_fail3475
  rxcap1266_done3482:
    ge rx1264_pos, rx1264_eos, rx1264_fail3475
    is_cclass $I11, .CCLASS_WHITESPACE, rx1264_tgt, rx1264_pos
    unless $I11, rx1264_fail3475
    add rx1264_pos, 1
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!pos", rx1264_pos
    $P11 = rx1264_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1264_curclass, "$!pos"
    lt $I11, 0, rx1264_fail3475
    nqp_rxmark rx1264_bstack, rxsubrule1267_pass3484, -1, 0
  rxsubrule1267_pass3484:
    rx1264_cstack = rx1264_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1264_pos, $P11, rx1264_curclass, "$!pos"
    rx1264_cur."!cursor_pass"(rx1264_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1264_cur)
  rx1264_restart3474:
    repr_get_attr_obj rx1264_cstack, rx1264_cur, rx1264_curclass, "$!cstack"
  rx1264_fail3475:
    unless rx1264_bstack, rx1264_done3473
    pop $I19, rx1264_bstack
    if_null rx1264_cstack, rx1264_cstack_done3478
    unless rx1264_cstack, rx1264_cstack_done3478
    dec $I19
    set $P11, rx1264_cstack[$I19]
  rx1264_cstack_done3478:
    pop rx1264_rep, rx1264_bstack
    pop rx1264_pos, rx1264_bstack
    pop $I19, rx1264_bstack
    lt rx1264_pos, -1, rx1264_done3473
    lt rx1264_pos, 0, rx1264_fail3475
    eq $I19, 0, rx1264_fail3475
    nqp_islist $I20, rx1264_cstack
    unless $I20, rx1264_jump3476
    elements $I18, rx1264_bstack
    le $I18, 0, rx1264_cut3477
    dec $I18
    set $I18, rx1264_bstack[$I18]
  rx1264_cut3477:
    assign rx1264_cstack, $I18
  rx1264_jump3476:
    jump $I19
  rx1264_done3473:
    rx1264_cur."!cursor_fail"()
    .return (rx1264_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_218_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_219_1359718901.265' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_407_1359718901.265' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1268_tgt
    .local int rx1268_pos
    .local int rx1268_off
    .local int rx1268_eos
    .local int rx1268_rep
    .local pmc rx1268_cur
    .local pmc rx1268_curclass
    .local pmc rx1268_bstack
    .local pmc rx1268_cstack
    (rx1268_cur, rx1268_tgt, rx1268_pos, rx1268_curclass, rx1268_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1268_cur
    length rx1268_eos, rx1268_tgt
    eq $I19, 1, rx1268_restart3487
    gt rx1268_pos, rx1268_eos, rx1268_fail3488
    repr_get_attr_int $I11, self, rx1268_curclass, "$!from"
    ne $I11, -1, rxscan1269_done3494
    goto rxscan1269_scan3493
  rxscan1269_loop3492:
    inc rx1268_pos
    gt rx1268_pos, rx1268_eos, rx1268_fail3488
    repr_bind_attr_int rx1268_cur, rx1268_curclass, "$!from", rx1268_pos
  rxscan1269_scan3493:
    nqp_rxmark rx1268_bstack, rxscan1269_loop3492, rx1268_pos, 0
  rxscan1269_done3494:
    nqp_rxmark rx1268_bstack, rxcap1270_fail3496, rx1268_pos, 0
    add $I11, rx1268_pos, 4
    gt $I11, rx1268_eos, rx1268_fail3488
    substr $S10, rx1268_tgt, rx1268_pos, 4
    ne $S10, ucs4:"last", rx1268_fail3488
    add rx1268_pos, 4
    nqp_rxpeek $I19, rx1268_bstack, rxcap1270_fail3496
    inc $I19
    set $I11, rx1268_bstack[$I19]
    repr_bind_attr_int rx1268_cur, rx1268_curclass, "$!pos", rx1268_pos
    $P11 = rx1268_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1268_pos)
    rx1268_cstack = rx1268_cur."!cursor_capture"($P11, "sym")
    goto rxcap1270_done3495
  rxcap1270_fail3496:
    goto rx1268_fail3488
  rxcap1270_done3495:
    .const 'Sub' $P5001 = 'cuid_219_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1268_cur, rx1268_curclass, "$!pos", rx1268_pos
    $P11 = rx1268_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1268_curclass, "$!pos"
    ge $I11, 0, rx1268_fail3488
    repr_bind_attr_int rx1268_cur, rx1268_curclass, "$!pos", rx1268_pos
    store_lex unicode:"$\x{a2}", rx1268_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_407_1359718901.265' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1268_cur."!cursor_pass"(rx1268_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1268_cur)
  rx1268_restart3487:
    repr_get_attr_obj rx1268_cstack, rx1268_cur, rx1268_curclass, "$!cstack"
  rx1268_fail3488:
    unless rx1268_bstack, rx1268_done3486
    pop $I19, rx1268_bstack
    if_null rx1268_cstack, rx1268_cstack_done3491
    unless rx1268_cstack, rx1268_cstack_done3491
    dec $I19
    set $P11, rx1268_cstack[$I19]
  rx1268_cstack_done3491:
    pop rx1268_rep, rx1268_bstack
    pop rx1268_pos, rx1268_bstack
    pop $I19, rx1268_bstack
    lt rx1268_pos, -1, rx1268_done3486
    lt rx1268_pos, 0, rx1268_fail3488
    eq $I19, 0, rx1268_fail3488
    nqp_islist $I20, rx1268_cstack
    unless $I20, rx1268_jump3489
    elements $I18, rx1268_bstack
    le $I18, 0, rx1268_cut3490
    dec $I18
    set $I18, rx1268_bstack[$I18]
  rx1268_cut3490:
    assign rx1268_cstack, $I18
  rx1268_jump3489:
    jump $I19
  rx1268_done3486:
    rx1268_cur."!cursor_fail"()
    .return (rx1268_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1359718901.265") :anon :lex :outer("cuid_218_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1271_tgt
    .local int rx1271_pos
    .local int rx1271_off
    .local int rx1271_eos
    .local int rx1271_rep
    .local pmc rx1271_cur
    .local pmc rx1271_curclass
    .local pmc rx1271_bstack
    .local pmc rx1271_cstack
    (rx1271_cur, rx1271_tgt, rx1271_pos, rx1271_curclass, rx1271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1271_cur
    length rx1271_eos, rx1271_tgt
    eq $I19, 1, rx1271_restart3499
    gt rx1271_pos, rx1271_eos, rx1271_fail3500
    repr_get_attr_int $I11, self, rx1271_curclass, "$!from"
    ne $I11, -1, rxscan1272_done3506
    goto rxscan1272_scan3505
  rxscan1272_loop3504:
    inc rx1271_pos
    gt rx1271_pos, rx1271_eos, rx1271_fail3500
    repr_bind_attr_int rx1271_cur, rx1271_curclass, "$!from", rx1271_pos
  rxscan1272_scan3505:
    nqp_rxmark rx1271_bstack, rxscan1272_loop3504, rx1271_pos, 0
  rxscan1272_done3506:
    repr_bind_attr_int rx1271_cur, rx1271_curclass, "$!pos", rx1271_pos
    $P11 = rx1271_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1271_curclass, "$!pos"
    lt $I11, 0, rx1271_fail3500
    nqp_rxmark rx1271_bstack, rxsubrule1273_pass3507, -1, 0
  rxsubrule1273_pass3507:
    rx1271_cstack = rx1271_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1271_pos, $P11, rx1271_curclass, "$!pos"
    rx1271_cur."!cursor_pass"(rx1271_pos, 'backtrack'=>1)
    .return (rx1271_cur)
  rx1271_restart3499:
    repr_get_attr_obj rx1271_cstack, rx1271_cur, rx1271_curclass, "$!cstack"
  rx1271_fail3500:
    unless rx1271_bstack, rx1271_done3498
    pop $I19, rx1271_bstack
    if_null rx1271_cstack, rx1271_cstack_done3503
    unless rx1271_cstack, rx1271_cstack_done3503
    dec $I19
    set $P11, rx1271_cstack[$I19]
  rx1271_cstack_done3503:
    pop rx1271_rep, rx1271_bstack
    pop rx1271_pos, rx1271_bstack
    pop $I19, rx1271_bstack
    lt rx1271_pos, -1, rx1271_done3498
    lt rx1271_pos, 0, rx1271_fail3500
    eq $I19, 0, rx1271_fail3500
    nqp_islist $I20, rx1271_cstack
    unless $I20, rx1271_jump3501
    elements $I18, rx1271_bstack
    le $I18, 0, rx1271_cut3502
    dec $I18
    set $I18, rx1271_bstack[$I18]
  rx1271_cut3502:
    assign rx1271_cstack, $I18
  rx1271_jump3501:
    jump $I19
  rx1271_done3498:
    rx1271_cur."!cursor_fail"()
    .return (rx1271_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1359718901.265") :anon :lex :outer("cuid_218_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_220_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_221_1359718901.265' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_408_1359718901.265' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1274_tgt
    .local int rx1274_pos
    .local int rx1274_off
    .local int rx1274_eos
    .local int rx1274_rep
    .local pmc rx1274_cur
    .local pmc rx1274_curclass
    .local pmc rx1274_bstack
    .local pmc rx1274_cstack
    (rx1274_cur, rx1274_tgt, rx1274_pos, rx1274_curclass, rx1274_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1274_cur
    length rx1274_eos, rx1274_tgt
    eq $I19, 1, rx1274_restart3510
    gt rx1274_pos, rx1274_eos, rx1274_fail3511
    repr_get_attr_int $I11, self, rx1274_curclass, "$!from"
    ne $I11, -1, rxscan1275_done3517
    goto rxscan1275_scan3516
  rxscan1275_loop3515:
    inc rx1274_pos
    gt rx1274_pos, rx1274_eos, rx1274_fail3511
    repr_bind_attr_int rx1274_cur, rx1274_curclass, "$!from", rx1274_pos
  rxscan1275_scan3516:
    nqp_rxmark rx1274_bstack, rxscan1275_loop3515, rx1274_pos, 0
  rxscan1275_done3517:
    nqp_rxmark rx1274_bstack, rxcap1276_fail3519, rx1274_pos, 0
    add $I11, rx1274_pos, 4
    gt $I11, rx1274_eos, rx1274_fail3511
    substr $S10, rx1274_tgt, rx1274_pos, 4
    ne $S10, ucs4:"next", rx1274_fail3511
    add rx1274_pos, 4
    nqp_rxpeek $I19, rx1274_bstack, rxcap1276_fail3519
    inc $I19
    set $I11, rx1274_bstack[$I19]
    repr_bind_attr_int rx1274_cur, rx1274_curclass, "$!pos", rx1274_pos
    $P11 = rx1274_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1274_pos)
    rx1274_cstack = rx1274_cur."!cursor_capture"($P11, "sym")
    goto rxcap1276_done3518
  rxcap1276_fail3519:
    goto rx1274_fail3511
  rxcap1276_done3518:
    .const 'Sub' $P5001 = 'cuid_221_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1274_cur, rx1274_curclass, "$!pos", rx1274_pos
    $P11 = rx1274_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1274_curclass, "$!pos"
    ge $I11, 0, rx1274_fail3511
    repr_bind_attr_int rx1274_cur, rx1274_curclass, "$!pos", rx1274_pos
    store_lex unicode:"$\x{a2}", rx1274_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_408_1359718901.265' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1274_cur."!cursor_pass"(rx1274_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1274_cur)
  rx1274_restart3510:
    repr_get_attr_obj rx1274_cstack, rx1274_cur, rx1274_curclass, "$!cstack"
  rx1274_fail3511:
    unless rx1274_bstack, rx1274_done3509
    pop $I19, rx1274_bstack
    if_null rx1274_cstack, rx1274_cstack_done3514
    unless rx1274_cstack, rx1274_cstack_done3514
    dec $I19
    set $P11, rx1274_cstack[$I19]
  rx1274_cstack_done3514:
    pop rx1274_rep, rx1274_bstack
    pop rx1274_pos, rx1274_bstack
    pop $I19, rx1274_bstack
    lt rx1274_pos, -1, rx1274_done3509
    lt rx1274_pos, 0, rx1274_fail3511
    eq $I19, 0, rx1274_fail3511
    nqp_islist $I20, rx1274_cstack
    unless $I20, rx1274_jump3512
    elements $I18, rx1274_bstack
    le $I18, 0, rx1274_cut3513
    dec $I18
    set $I18, rx1274_bstack[$I18]
  rx1274_cut3513:
    assign rx1274_cstack, $I18
  rx1274_jump3512:
    jump $I19
  rx1274_done3509:
    rx1274_cur."!cursor_fail"()
    .return (rx1274_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1359718901.265") :anon :lex :outer("cuid_220_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1277_tgt
    .local int rx1277_pos
    .local int rx1277_off
    .local int rx1277_eos
    .local int rx1277_rep
    .local pmc rx1277_cur
    .local pmc rx1277_curclass
    .local pmc rx1277_bstack
    .local pmc rx1277_cstack
    (rx1277_cur, rx1277_tgt, rx1277_pos, rx1277_curclass, rx1277_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1277_cur
    length rx1277_eos, rx1277_tgt
    eq $I19, 1, rx1277_restart3522
    gt rx1277_pos, rx1277_eos, rx1277_fail3523
    repr_get_attr_int $I11, self, rx1277_curclass, "$!from"
    ne $I11, -1, rxscan1278_done3529
    goto rxscan1278_scan3528
  rxscan1278_loop3527:
    inc rx1277_pos
    gt rx1277_pos, rx1277_eos, rx1277_fail3523
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!from", rx1277_pos
  rxscan1278_scan3528:
    nqp_rxmark rx1277_bstack, rxscan1278_loop3527, rx1277_pos, 0
  rxscan1278_done3529:
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!pos", rx1277_pos
    $P11 = rx1277_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1277_curclass, "$!pos"
    lt $I11, 0, rx1277_fail3523
    nqp_rxmark rx1277_bstack, rxsubrule1279_pass3530, -1, 0
  rxsubrule1279_pass3530:
    rx1277_cstack = rx1277_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1277_pos, $P11, rx1277_curclass, "$!pos"
    rx1277_cur."!cursor_pass"(rx1277_pos, 'backtrack'=>1)
    .return (rx1277_cur)
  rx1277_restart3522:
    repr_get_attr_obj rx1277_cstack, rx1277_cur, rx1277_curclass, "$!cstack"
  rx1277_fail3523:
    unless rx1277_bstack, rx1277_done3521
    pop $I19, rx1277_bstack
    if_null rx1277_cstack, rx1277_cstack_done3526
    unless rx1277_cstack, rx1277_cstack_done3526
    dec $I19
    set $P11, rx1277_cstack[$I19]
  rx1277_cstack_done3526:
    pop rx1277_rep, rx1277_bstack
    pop rx1277_pos, rx1277_bstack
    pop $I19, rx1277_bstack
    lt rx1277_pos, -1, rx1277_done3521
    lt rx1277_pos, 0, rx1277_fail3523
    eq $I19, 0, rx1277_fail3523
    nqp_islist $I20, rx1277_cstack
    unless $I20, rx1277_jump3524
    elements $I18, rx1277_bstack
    le $I18, 0, rx1277_cut3525
    dec $I18
    set $I18, rx1277_bstack[$I18]
  rx1277_cut3525:
    assign rx1277_cstack, $I18
  rx1277_jump3524:
    jump $I19
  rx1277_done3521:
    rx1277_cur."!cursor_fail"()
    .return (rx1277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1359718901.265") :anon :lex :outer("cuid_220_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_222_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_223_1359718901.265' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_409_1359718901.265' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1280_tgt
    .local int rx1280_pos
    .local int rx1280_off
    .local int rx1280_eos
    .local int rx1280_rep
    .local pmc rx1280_cur
    .local pmc rx1280_curclass
    .local pmc rx1280_bstack
    .local pmc rx1280_cstack
    (rx1280_cur, rx1280_tgt, rx1280_pos, rx1280_curclass, rx1280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1280_cur
    length rx1280_eos, rx1280_tgt
    eq $I19, 1, rx1280_restart3533
    gt rx1280_pos, rx1280_eos, rx1280_fail3534
    repr_get_attr_int $I11, self, rx1280_curclass, "$!from"
    ne $I11, -1, rxscan1281_done3540
    goto rxscan1281_scan3539
  rxscan1281_loop3538:
    inc rx1280_pos
    gt rx1280_pos, rx1280_eos, rx1280_fail3534
    repr_bind_attr_int rx1280_cur, rx1280_curclass, "$!from", rx1280_pos
  rxscan1281_scan3539:
    nqp_rxmark rx1280_bstack, rxscan1281_loop3538, rx1280_pos, 0
  rxscan1281_done3540:
    nqp_rxmark rx1280_bstack, rxcap1282_fail3542, rx1280_pos, 0
    add $I11, rx1280_pos, 4
    gt $I11, rx1280_eos, rx1280_fail3534
    substr $S10, rx1280_tgt, rx1280_pos, 4
    ne $S10, ucs4:"redo", rx1280_fail3534
    add rx1280_pos, 4
    nqp_rxpeek $I19, rx1280_bstack, rxcap1282_fail3542
    inc $I19
    set $I11, rx1280_bstack[$I19]
    repr_bind_attr_int rx1280_cur, rx1280_curclass, "$!pos", rx1280_pos
    $P11 = rx1280_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1280_pos)
    rx1280_cstack = rx1280_cur."!cursor_capture"($P11, "sym")
    goto rxcap1282_done3541
  rxcap1282_fail3542:
    goto rx1280_fail3534
  rxcap1282_done3541:
    .const 'Sub' $P5001 = 'cuid_223_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1280_cur, rx1280_curclass, "$!pos", rx1280_pos
    $P11 = rx1280_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1280_curclass, "$!pos"
    ge $I11, 0, rx1280_fail3534
    repr_bind_attr_int rx1280_cur, rx1280_curclass, "$!pos", rx1280_pos
    store_lex unicode:"$\x{a2}", rx1280_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_409_1359718901.265' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1280_cur."!cursor_pass"(rx1280_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1280_cur)
  rx1280_restart3533:
    repr_get_attr_obj rx1280_cstack, rx1280_cur, rx1280_curclass, "$!cstack"
  rx1280_fail3534:
    unless rx1280_bstack, rx1280_done3532
    pop $I19, rx1280_bstack
    if_null rx1280_cstack, rx1280_cstack_done3537
    unless rx1280_cstack, rx1280_cstack_done3537
    dec $I19
    set $P11, rx1280_cstack[$I19]
  rx1280_cstack_done3537:
    pop rx1280_rep, rx1280_bstack
    pop rx1280_pos, rx1280_bstack
    pop $I19, rx1280_bstack
    lt rx1280_pos, -1, rx1280_done3532
    lt rx1280_pos, 0, rx1280_fail3534
    eq $I19, 0, rx1280_fail3534
    nqp_islist $I20, rx1280_cstack
    unless $I20, rx1280_jump3535
    elements $I18, rx1280_bstack
    le $I18, 0, rx1280_cut3536
    dec $I18
    set $I18, rx1280_bstack[$I18]
  rx1280_cut3536:
    assign rx1280_cstack, $I18
  rx1280_jump3535:
    jump $I19
  rx1280_done3532:
    rx1280_cur."!cursor_fail"()
    .return (rx1280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1359718901.265") :anon :lex :outer("cuid_222_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1283_tgt
    .local int rx1283_pos
    .local int rx1283_off
    .local int rx1283_eos
    .local int rx1283_rep
    .local pmc rx1283_cur
    .local pmc rx1283_curclass
    .local pmc rx1283_bstack
    .local pmc rx1283_cstack
    (rx1283_cur, rx1283_tgt, rx1283_pos, rx1283_curclass, rx1283_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1283_cur
    length rx1283_eos, rx1283_tgt
    eq $I19, 1, rx1283_restart3545
    gt rx1283_pos, rx1283_eos, rx1283_fail3546
    repr_get_attr_int $I11, self, rx1283_curclass, "$!from"
    ne $I11, -1, rxscan1284_done3552
    goto rxscan1284_scan3551
  rxscan1284_loop3550:
    inc rx1283_pos
    gt rx1283_pos, rx1283_eos, rx1283_fail3546
    repr_bind_attr_int rx1283_cur, rx1283_curclass, "$!from", rx1283_pos
  rxscan1284_scan3551:
    nqp_rxmark rx1283_bstack, rxscan1284_loop3550, rx1283_pos, 0
  rxscan1284_done3552:
    repr_bind_attr_int rx1283_cur, rx1283_curclass, "$!pos", rx1283_pos
    $P11 = rx1283_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1283_curclass, "$!pos"
    lt $I11, 0, rx1283_fail3546
    nqp_rxmark rx1283_bstack, rxsubrule1285_pass3553, -1, 0
  rxsubrule1285_pass3553:
    rx1283_cstack = rx1283_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1283_pos, $P11, rx1283_curclass, "$!pos"
    rx1283_cur."!cursor_pass"(rx1283_pos, 'backtrack'=>1)
    .return (rx1283_cur)
  rx1283_restart3545:
    repr_get_attr_obj rx1283_cstack, rx1283_cur, rx1283_curclass, "$!cstack"
  rx1283_fail3546:
    unless rx1283_bstack, rx1283_done3544
    pop $I19, rx1283_bstack
    if_null rx1283_cstack, rx1283_cstack_done3549
    unless rx1283_cstack, rx1283_cstack_done3549
    dec $I19
    set $P11, rx1283_cstack[$I19]
  rx1283_cstack_done3549:
    pop rx1283_rep, rx1283_bstack
    pop rx1283_pos, rx1283_bstack
    pop $I19, rx1283_bstack
    lt rx1283_pos, -1, rx1283_done3544
    lt rx1283_pos, 0, rx1283_fail3546
    eq $I19, 0, rx1283_fail3546
    nqp_islist $I20, rx1283_cstack
    unless $I20, rx1283_jump3547
    elements $I18, rx1283_bstack
    le $I18, 0, rx1283_cut3548
    dec $I18
    set $I18, rx1283_bstack[$I18]
  rx1283_cut3548:
    assign rx1283_cstack, $I18
  rx1283_jump3547:
    jump $I19
  rx1283_done3544:
    rx1283_cur."!cursor_fail"()
    .return (rx1283_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1359718901.265") :anon :lex :outer("cuid_222_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_224_1359718901.265") :anon :lex :outer("cuid_391_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1382
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3554
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5003
  fallback3554:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3555
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5005
  fallback3555:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1388
    .const 'Sub' $P5013 = 'cuid_225_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_226_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_228_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_229_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_231_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_232_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_235_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_238_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_240_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_242_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_243_1359718901.265' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_244_1359718901.265' 
    capture_lex $P5013 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1359718901.265' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_226_1359718901.265' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1359718901.265' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_229_1359718901.265' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_231_1359718901.265' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_232_1359718901.265' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_235_1359718901.265' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_238_1359718901.265' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_240_1359718901.265' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_242_1359718901.265' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_243_1359718901.265' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_244_1359718901.265' 
    capture_lex $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_225_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1286_tgt
    .local int rx1286_pos
    .local int rx1286_off
    .local int rx1286_eos
    .local int rx1286_rep
    .local pmc rx1286_cur
    .local pmc rx1286_curclass
    .local pmc rx1286_bstack
    .local pmc rx1286_cstack
    (rx1286_cur, rx1286_tgt, rx1286_pos, rx1286_curclass, rx1286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1286_cur
    length rx1286_eos, rx1286_tgt
    eq $I19, 1, rx1286_restart3558
    gt rx1286_pos, rx1286_eos, rx1286_fail3559
    repr_get_attr_int $I11, self, rx1286_curclass, "$!from"
    ne $I11, -1, rxscan1287_done3565
    goto rxscan1287_scan3564
  rxscan1287_loop3563:
    inc rx1286_pos
    gt rx1286_pos, rx1286_eos, rx1286_fail3559
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!from", rx1286_pos
  rxscan1287_scan3564:
    nqp_rxmark rx1286_bstack, rxscan1287_loop3563, rx1286_pos, 0
  rxscan1287_done3565:
    ge rx1286_pos, rx1286_eos, rx1286_fail3559
    substr $S11, rx1286_tgt, rx1286_pos, 1
    index $I11, ucs4:"}/", $S11
    lt $I11, 0, rx1286_fail3559
    inc rx1286_pos
    rx1286_cur."!cursor_pass"(rx1286_pos, "rxstopper", 'backtrack'=>1)
    .return (rx1286_cur)
  rx1286_restart3558:
    repr_get_attr_obj rx1286_cstack, rx1286_cur, rx1286_curclass, "$!cstack"
  rx1286_fail3559:
    unless rx1286_bstack, rx1286_done3557
    pop $I19, rx1286_bstack
    if_null rx1286_cstack, rx1286_cstack_done3562
    unless rx1286_cstack, rx1286_cstack_done3562
    dec $I19
    set $P11, rx1286_cstack[$I19]
  rx1286_cstack_done3562:
    pop rx1286_rep, rx1286_bstack
    pop rx1286_pos, rx1286_bstack
    pop $I19, rx1286_bstack
    lt rx1286_pos, -1, rx1286_done3557
    lt rx1286_pos, 0, rx1286_fail3559
    eq $I19, 0, rx1286_fail3559
    nqp_islist $I20, rx1286_cstack
    unless $I20, rx1286_jump3560
    elements $I18, rx1286_bstack
    le $I18, 0, rx1286_cut3561
    dec $I18
    set $I18, rx1286_bstack[$I18]
  rx1286_cut3561:
    assign rx1286_cstack, $I18
  rx1286_jump3560:
    jump $I19
  rx1286_done3557:
    rx1286_cur."!cursor_fail"()
    .return (rx1286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_226_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1393
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1359718901.265' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1288_tgt
    .local int rx1288_pos
    .local int rx1288_off
    .local int rx1288_eos
    .local int rx1288_rep
    .local pmc rx1288_cur
    .local pmc rx1288_curclass
    .local pmc rx1288_bstack
    .local pmc rx1288_cstack
    (rx1288_cur, rx1288_tgt, rx1288_pos, rx1288_curclass, rx1288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1288_cur
    length rx1288_eos, rx1288_tgt
    eq $I19, 1, rx1288_restart3568
    gt rx1288_pos, rx1288_eos, rx1288_fail3569
    repr_get_attr_int $I11, self, rx1288_curclass, "$!from"
    ne $I11, -1, rxscan1289_done3575
    goto rxscan1289_scan3574
  rxscan1289_loop3573:
    inc rx1288_pos
    gt rx1288_pos, rx1288_eos, rx1288_fail3569
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!from", rx1288_pos
  rxscan1289_scan3574:
    nqp_rxmark rx1288_bstack, rxscan1289_loop3573, rx1288_pos, 0
  rxscan1289_done3575:
    add $I11, rx1288_pos, 1
    gt $I11, rx1288_eos, rx1288_fail3569
    substr $S10, rx1288_tgt, rx1288_pos, 1
    ne $S10, ucs4:":", rx1288_fail3569
    add rx1288_pos, 1
    .const 'Sub' $P5001 = 'cuid_227_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!pos", rx1288_pos
    $P11 = rx1288_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1288_curclass, "$!pos"
    lt $I11, 0, rx1288_fail3569
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!pos", rx1288_pos
    $P11 = rx1288_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1288_curclass, "$!pos"
    lt $I11, 0, rx1288_fail3569
    nqp_rxmark rx1288_bstack, rxsubrule1292_pass3586, -1, 0
  rxsubrule1292_pass3586:
    rx1288_cstack = rx1288_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1288_pos, $P11, rx1288_curclass, "$!pos"
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!pos", rx1288_pos
    $P11 = rx1288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1288_curclass, "$!pos"
    lt $I11, 0, rx1288_fail3569
    repr_get_attr_int rx1288_pos, $P11, rx1288_curclass, "$!pos"
    add $I11, rx1288_pos, 1
    gt $I11, rx1288_eos, rx1288_fail3569
    substr $S10, rx1288_tgt, rx1288_pos, 1
    ne $S10, ucs4:";", rx1288_fail3569
    add rx1288_pos, 1
    rx1288_cur."!cursor_pass"(rx1288_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1288_cur)
  rx1288_restart3568:
    repr_get_attr_obj rx1288_cstack, rx1288_cur, rx1288_curclass, "$!cstack"
  rx1288_fail3569:
    unless rx1288_bstack, rx1288_done3567
    pop $I19, rx1288_bstack
    if_null rx1288_cstack, rx1288_cstack_done3572
    unless rx1288_cstack, rx1288_cstack_done3572
    dec $I19
    set $P11, rx1288_cstack[$I19]
  rx1288_cstack_done3572:
    pop rx1288_rep, rx1288_bstack
    pop rx1288_pos, rx1288_bstack
    pop $I19, rx1288_bstack
    lt rx1288_pos, -1, rx1288_done3567
    lt rx1288_pos, 0, rx1288_fail3569
    eq $I19, 0, rx1288_fail3569
    nqp_islist $I20, rx1288_cstack
    unless $I20, rx1288_jump3570
    elements $I18, rx1288_bstack
    le $I18, 0, rx1288_cut3571
    dec $I18
    set $I18, rx1288_bstack[$I18]
  rx1288_cut3571:
    assign rx1288_cstack, $I18
  rx1288_jump3570:
    jump $I19
  rx1288_done3567:
    rx1288_cur."!cursor_fail"()
    .return (rx1288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1359718901.265") :anon :lex :outer("cuid_226_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1290_tgt
    .local int rx1290_pos
    .local int rx1290_off
    .local int rx1290_eos
    .local int rx1290_rep
    .local pmc rx1290_cur
    .local pmc rx1290_curclass
    .local pmc rx1290_bstack
    .local pmc rx1290_cstack
    (rx1290_cur, rx1290_tgt, rx1290_pos, rx1290_curclass, rx1290_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1290_cur
    length rx1290_eos, rx1290_tgt
    eq $I19, 1, rx1290_restart3578
    gt rx1290_pos, rx1290_eos, rx1290_fail3579
    repr_get_attr_int $I11, self, rx1290_curclass, "$!from"
    ne $I11, -1, rxscan1291_done3585
    goto rxscan1291_scan3584
  rxscan1291_loop3583:
    inc rx1290_pos
    gt rx1290_pos, rx1290_eos, rx1290_fail3579
    repr_bind_attr_int rx1290_cur, rx1290_curclass, "$!from", rx1290_pos
  rxscan1291_scan3584:
    nqp_rxmark rx1290_bstack, rxscan1291_loop3583, rx1290_pos, 0
  rxscan1291_done3585:
    add $I11, rx1290_pos, 2
    gt $I11, rx1290_eos, rx1290_fail3579
    substr $S10, rx1290_tgt, rx1290_pos, 2
    ne $S10, ucs4:"my", rx1290_fail3579
    add rx1290_pos, 2
    rx1290_cur."!cursor_pass"(rx1290_pos, 'backtrack'=>1)
    .return (rx1290_cur)
  rx1290_restart3578:
    repr_get_attr_obj rx1290_cstack, rx1290_cur, rx1290_curclass, "$!cstack"
  rx1290_fail3579:
    unless rx1290_bstack, rx1290_done3577
    pop $I19, rx1290_bstack
    if_null rx1290_cstack, rx1290_cstack_done3582
    unless rx1290_cstack, rx1290_cstack_done3582
    dec $I19
    set $P11, rx1290_cstack[$I19]
  rx1290_cstack_done3582:
    pop rx1290_rep, rx1290_bstack
    pop rx1290_pos, rx1290_bstack
    pop $I19, rx1290_bstack
    lt rx1290_pos, -1, rx1290_done3577
    lt rx1290_pos, 0, rx1290_fail3579
    eq $I19, 0, rx1290_fail3579
    nqp_islist $I20, rx1290_cstack
    unless $I20, rx1290_jump3580
    elements $I18, rx1290_bstack
    le $I18, 0, rx1290_cut3581
    dec $I18
    set $I18, rx1290_bstack[$I18]
  rx1290_cut3581:
    assign rx1290_cstack, $I18
  rx1290_jump3580:
    jump $I19
  rx1290_done3577:
    rx1290_cur."!cursor_fail"()
    .return (rx1290_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_228_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1397
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1294_tgt
    .local int rx1294_pos
    .local int rx1294_off
    .local int rx1294_eos
    .local int rx1294_rep
    .local pmc rx1294_cur
    .local pmc rx1294_curclass
    .local pmc rx1294_bstack
    .local pmc rx1294_cstack
    (rx1294_cur, rx1294_tgt, rx1294_pos, rx1294_curclass, rx1294_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1294_cur
    length rx1294_eos, rx1294_tgt
    eq $I19, 1, rx1294_restart3590
    gt rx1294_pos, rx1294_eos, rx1294_fail3591
    repr_get_attr_int $I11, self, rx1294_curclass, "$!from"
    ne $I11, -1, rxscan1295_done3597
    goto rxscan1295_scan3596
  rxscan1295_loop3595:
    inc rx1294_pos
    gt rx1294_pos, rx1294_eos, rx1294_fail3591
    repr_bind_attr_int rx1294_cur, rx1294_curclass, "$!from", rx1294_pos
  rxscan1295_scan3596:
    nqp_rxmark rx1294_bstack, rxscan1295_loop3595, rx1294_pos, 0
  rxscan1295_done3597:
    ge rx1294_pos, rx1294_eos, rx1294_fail3591
    substr $S11, rx1294_tgt, rx1294_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1294_fail3591
    repr_bind_attr_int rx1294_cur, rx1294_curclass, "$!pos", rx1294_pos
    $P11 = rx1294_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1294_curclass, "$!pos"
    lt $I11, 0, rx1294_fail3591
    nqp_rxmark rx1294_bstack, rxsubrule1296_pass3598, -1, 0
  rxsubrule1296_pass3598:
    rx1294_cstack = rx1294_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1294_pos, $P11, rx1294_curclass, "$!pos"
    rx1294_cur."!cursor_pass"(rx1294_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1294_cur)
  rx1294_restart3590:
    repr_get_attr_obj rx1294_cstack, rx1294_cur, rx1294_curclass, "$!cstack"
  rx1294_fail3591:
    unless rx1294_bstack, rx1294_done3589
    pop $I19, rx1294_bstack
    if_null rx1294_cstack, rx1294_cstack_done3594
    unless rx1294_cstack, rx1294_cstack_done3594
    dec $I19
    set $P11, rx1294_cstack[$I19]
  rx1294_cstack_done3594:
    pop rx1294_rep, rx1294_bstack
    pop rx1294_pos, rx1294_bstack
    pop $I19, rx1294_bstack
    lt rx1294_pos, -1, rx1294_done3589
    lt rx1294_pos, 0, rx1294_fail3591
    eq $I19, 0, rx1294_fail3591
    nqp_islist $I20, rx1294_cstack
    unless $I20, rx1294_jump3592
    elements $I18, rx1294_bstack
    le $I18, 0, rx1294_cut3593
    dec $I18
    set $I18, rx1294_bstack[$I18]
  rx1294_cut3593:
    assign rx1294_cstack, $I18
  rx1294_jump3592:
    jump $I19
  rx1294_done3589:
    rx1294_cur."!cursor_fail"()
    .return (rx1294_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_229_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1401
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_230_1359718901.265' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1297_tgt
    .local int rx1297_pos
    .local int rx1297_off
    .local int rx1297_eos
    .local int rx1297_rep
    .local pmc rx1297_cur
    .local pmc rx1297_curclass
    .local pmc rx1297_bstack
    .local pmc rx1297_cstack
    (rx1297_cur, rx1297_tgt, rx1297_pos, rx1297_curclass, rx1297_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1297_cur
    length rx1297_eos, rx1297_tgt
    eq $I19, 1, rx1297_restart3601
    gt rx1297_pos, rx1297_eos, rx1297_fail3602
    repr_get_attr_int $I11, self, rx1297_curclass, "$!from"
    ne $I11, -1, rxscan1298_done3608
    goto rxscan1298_scan3607
  rxscan1298_loop3606:
    inc rx1297_pos
    gt rx1297_pos, rx1297_eos, rx1297_fail3602
    repr_bind_attr_int rx1297_cur, rx1297_curclass, "$!from", rx1297_pos
  rxscan1298_scan3607:
    nqp_rxmark rx1297_bstack, rxscan1298_loop3606, rx1297_pos, 0
  rxscan1298_done3608:
    .const 'Sub' $P5001 = 'cuid_230_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1297_cur, rx1297_curclass, "$!pos", rx1297_pos
    $P11 = rx1297_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1297_curclass, "$!pos"
    lt $I11, 0, rx1297_fail3602
    repr_bind_attr_int rx1297_cur, rx1297_curclass, "$!pos", rx1297_pos
    $P11 = rx1297_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1297_curclass, "$!pos"
    lt $I11, 0, rx1297_fail3602
    nqp_rxmark rx1297_bstack, rxsubrule1302_pass3622, -1, 0
  rxsubrule1302_pass3622:
    rx1297_cstack = rx1297_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1297_pos, $P11, rx1297_curclass, "$!pos"
    rx1297_cur."!cursor_pass"(rx1297_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1297_cur)
  rx1297_restart3601:
    repr_get_attr_obj rx1297_cstack, rx1297_cur, rx1297_curclass, "$!cstack"
  rx1297_fail3602:
    unless rx1297_bstack, rx1297_done3600
    pop $I19, rx1297_bstack
    if_null rx1297_cstack, rx1297_cstack_done3605
    unless rx1297_cstack, rx1297_cstack_done3605
    dec $I19
    set $P11, rx1297_cstack[$I19]
  rx1297_cstack_done3605:
    pop rx1297_rep, rx1297_bstack
    pop rx1297_pos, rx1297_bstack
    pop $I19, rx1297_bstack
    lt rx1297_pos, -1, rx1297_done3600
    lt rx1297_pos, 0, rx1297_fail3602
    eq $I19, 0, rx1297_fail3602
    nqp_islist $I20, rx1297_cstack
    unless $I20, rx1297_jump3603
    elements $I18, rx1297_bstack
    le $I18, 0, rx1297_cut3604
    dec $I18
    set $I18, rx1297_bstack[$I18]
  rx1297_cut3604:
    assign rx1297_cstack, $I18
  rx1297_jump3603:
    jump $I19
  rx1297_done3600:
    rx1297_cur."!cursor_fail"()
    .return (rx1297_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1359718901.265") :anon :lex :outer("cuid_229_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1299_tgt
    .local int rx1299_pos
    .local int rx1299_off
    .local int rx1299_eos
    .local int rx1299_rep
    .local pmc rx1299_cur
    .local pmc rx1299_curclass
    .local pmc rx1299_bstack
    .local pmc rx1299_cstack
    (rx1299_cur, rx1299_tgt, rx1299_pos, rx1299_curclass, rx1299_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1299_cur
    length rx1299_eos, rx1299_tgt
    eq $I19, 1, rx1299_restart3611
    gt rx1299_pos, rx1299_eos, rx1299_fail3612
    repr_get_attr_int $I11, self, rx1299_curclass, "$!from"
    ne $I11, -1, rxscan1300_done3618
    goto rxscan1300_scan3617
  rxscan1300_loop3616:
    inc rx1299_pos
    gt rx1299_pos, rx1299_eos, rx1299_fail3612
    repr_bind_attr_int rx1299_cur, rx1299_curclass, "$!from", rx1299_pos
  rxscan1300_scan3617:
    nqp_rxmark rx1299_bstack, rxscan1300_loop3616, rx1299_pos, 0
  rxscan1300_done3618:
    ge rx1299_pos, rx1299_eos, rx1299_fail3612
    substr $S11, rx1299_tgt, rx1299_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1299_fail3612
    inc rx1299_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1301_03620
    nqp_push_label $P11, alt1301_13621
    nqp_rxmark rx1299_bstack, alt1301_end3619, -1, 0
    rx1299_cur."!alt"(rx1299_pos, "alt_nfa__39_1359718904.569", $P11)
    goto rx1299_fail3612
  alt1301_03620:
    ge rx1299_pos, rx1299_eos, rx1299_fail3612
    is_cclass $I11, .CCLASS_WORD, rx1299_tgt, rx1299_pos
    if $I11, rx1299_fail3612
    add rx1299_pos, 1
    ge rx1299_pos, rx1299_eos, rx1299_fail3612
    is_cclass $I11, .CCLASS_WORD, rx1299_tgt, rx1299_pos
    unless $I11, rx1299_fail3612
    add rx1299_pos, 1
    goto alt1301_end3619
  alt1301_13621:
    ge rx1299_pos, rx1299_eos, rx1299_fail3612
    is_cclass $I11, .CCLASS_WORD, rx1299_tgt, rx1299_pos
    unless $I11, rx1299_fail3612
    add rx1299_pos, 1
    goto alt1301_end3619
  alt1301_end3619:
    nqp_rxcommit rx1299_bstack, alt1301_end3619
    rx1299_cur."!cursor_pass"(rx1299_pos, 'backtrack'=>1)
    .return (rx1299_cur)
  rx1299_restart3611:
    repr_get_attr_obj rx1299_cstack, rx1299_cur, rx1299_curclass, "$!cstack"
  rx1299_fail3612:
    unless rx1299_bstack, rx1299_done3610
    pop $I19, rx1299_bstack
    if_null rx1299_cstack, rx1299_cstack_done3615
    unless rx1299_cstack, rx1299_cstack_done3615
    dec $I19
    set $P11, rx1299_cstack[$I19]
  rx1299_cstack_done3615:
    pop rx1299_rep, rx1299_bstack
    pop rx1299_pos, rx1299_bstack
    pop $I19, rx1299_bstack
    lt rx1299_pos, -1, rx1299_done3610
    lt rx1299_pos, 0, rx1299_fail3612
    eq $I19, 0, rx1299_fail3612
    nqp_islist $I20, rx1299_cstack
    unless $I20, rx1299_jump3613
    elements $I18, rx1299_bstack
    le $I18, 0, rx1299_cut3614
    dec $I18
    set $I18, rx1299_bstack[$I18]
  rx1299_cut3614:
    assign rx1299_cstack, $I18
  rx1299_jump3613:
    jump $I19
  rx1299_done3610:
    rx1299_cur."!cursor_fail"()
    .return (rx1299_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_231_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1405
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1303_tgt
    .local int rx1303_pos
    .local int rx1303_off
    .local int rx1303_eos
    .local int rx1303_rep
    .local pmc rx1303_cur
    .local pmc rx1303_curclass
    .local pmc rx1303_bstack
    .local pmc rx1303_cstack
    (rx1303_cur, rx1303_tgt, rx1303_pos, rx1303_curclass, rx1303_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1303_cur
    length rx1303_eos, rx1303_tgt
    eq $I19, 1, rx1303_restart3625
    gt rx1303_pos, rx1303_eos, rx1303_fail3626
    repr_get_attr_int $I11, self, rx1303_curclass, "$!from"
    ne $I11, -1, rxscan1304_done3632
    goto rxscan1304_scan3631
  rxscan1304_loop3630:
    inc rx1303_pos
    gt rx1303_pos, rx1303_eos, rx1303_fail3626
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!from", rx1303_pos
  rxscan1304_scan3631:
    nqp_rxmark rx1303_bstack, rxscan1304_loop3630, rx1303_pos, 0
  rxscan1304_done3632:
    ge rx1303_pos, rx1303_eos, rx1303_fail3626
    substr $S11, rx1303_tgt, rx1303_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1303_fail3626
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!pos", rx1303_pos
    $P11 = rx1303_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1303_curclass, "$!pos"
    lt $I11, 0, rx1303_fail3626
    nqp_rxmark rx1303_bstack, rxsubrule1305_pass3633, -1, 0
  rxsubrule1305_pass3633:
    rx1303_cstack = rx1303_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1303_pos, $P11, rx1303_curclass, "$!pos"
    rx1303_cur."!cursor_pass"(rx1303_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1303_cur)
  rx1303_restart3625:
    repr_get_attr_obj rx1303_cstack, rx1303_cur, rx1303_curclass, "$!cstack"
  rx1303_fail3626:
    unless rx1303_bstack, rx1303_done3624
    pop $I19, rx1303_bstack
    if_null rx1303_cstack, rx1303_cstack_done3629
    unless rx1303_cstack, rx1303_cstack_done3629
    dec $I19
    set $P11, rx1303_cstack[$I19]
  rx1303_cstack_done3629:
    pop rx1303_rep, rx1303_bstack
    pop rx1303_pos, rx1303_bstack
    pop $I19, rx1303_bstack
    lt rx1303_pos, -1, rx1303_done3624
    lt rx1303_pos, 0, rx1303_fail3626
    eq $I19, 0, rx1303_fail3626
    nqp_islist $I20, rx1303_cstack
    unless $I20, rx1303_jump3627
    elements $I18, rx1303_bstack
    le $I18, 0, rx1303_cut3628
    dec $I18
    set $I18, rx1303_bstack[$I18]
  rx1303_cut3628:
    assign rx1303_cstack, $I18
  rx1303_jump3627:
    jump $I19
  rx1303_done3624:
    rx1303_cur."!cursor_fail"()
    .return (rx1303_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1359718901.265' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1359718901.265' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1306_tgt
    .local int rx1306_pos
    .local int rx1306_off
    .local int rx1306_eos
    .local int rx1306_rep
    .local pmc rx1306_cur
    .local pmc rx1306_curclass
    .local pmc rx1306_bstack
    .local pmc rx1306_cstack
    (rx1306_cur, rx1306_tgt, rx1306_pos, rx1306_curclass, rx1306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1306_cur
    length rx1306_eos, rx1306_tgt
    eq $I19, 1, rx1306_restart3636
    gt rx1306_pos, rx1306_eos, rx1306_fail3637
    repr_get_attr_int $I11, self, rx1306_curclass, "$!from"
    ne $I11, -1, rxscan1307_done3643
    goto rxscan1307_scan3642
  rxscan1307_loop3641:
    inc rx1306_pos
    gt rx1306_pos, rx1306_eos, rx1306_fail3637
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!from", rx1306_pos
  rxscan1307_scan3642:
    nqp_rxmark rx1306_bstack, rxscan1307_loop3641, rx1306_pos, 0
  rxscan1307_done3643:
    add $I11, rx1306_pos, 1
    gt $I11, rx1306_eos, rx1306_fail3637
    substr $S10, rx1306_tgt, rx1306_pos, 1
    ne $S10, ucs4:"?", rx1306_fail3637
    add rx1306_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1308_03645
    nqp_push_label $P11, alt1308_13656
    nqp_rxmark rx1306_bstack, alt1308_end3644, -1, 0
    rx1306_cur."!alt"(rx1306_pos, "alt_nfa__40_1359718904.593", $P11)
    goto rx1306_fail3637
  alt1308_03645:
    .const 'Sub' $P5001 = 'cuid_233_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!pos", rx1306_pos
    $P11 = rx1306_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1306_curclass, "$!pos"
    lt $I11, 0, rx1306_fail3637
    goto alt1308_end3644
  alt1308_13656:
    .const 'Sub' $P5002 = 'cuid_234_1359718901.265' 
    capture_lex $P5002
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!pos", rx1306_pos
    $P11 = rx1306_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1306_curclass, "$!pos"
    ge $I11, 0, rx1306_fail3637
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!pos", rx1306_pos
    $P11 = rx1306_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1306_curclass, "$!pos"
    lt $I11, 0, rx1306_fail3637
    nqp_rxmark rx1306_bstack, rxsubrule1313_pass3667, -1, 0
  rxsubrule1313_pass3667:
    rx1306_cstack = rx1306_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1306_pos, $P11, rx1306_curclass, "$!pos"
    goto alt1308_end3644
  alt1308_end3644:
    nqp_rxcommit rx1306_bstack, alt1308_end3644
    rx1306_cur."!cursor_pass"(rx1306_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1306_cur)
  rx1306_restart3636:
    repr_get_attr_obj rx1306_cstack, rx1306_cur, rx1306_curclass, "$!cstack"
  rx1306_fail3637:
    unless rx1306_bstack, rx1306_done3635
    pop $I19, rx1306_bstack
    if_null rx1306_cstack, rx1306_cstack_done3640
    unless rx1306_cstack, rx1306_cstack_done3640
    dec $I19
    set $P11, rx1306_cstack[$I19]
  rx1306_cstack_done3640:
    pop rx1306_rep, rx1306_bstack
    pop rx1306_pos, rx1306_bstack
    pop $I19, rx1306_bstack
    lt rx1306_pos, -1, rx1306_done3635
    lt rx1306_pos, 0, rx1306_fail3637
    eq $I19, 0, rx1306_fail3637
    nqp_islist $I20, rx1306_cstack
    unless $I20, rx1306_jump3638
    elements $I18, rx1306_bstack
    le $I18, 0, rx1306_cut3639
    dec $I18
    set $I18, rx1306_bstack[$I18]
  rx1306_cut3639:
    assign rx1306_cstack, $I18
  rx1306_jump3638:
    jump $I19
  rx1306_done3635:
    rx1306_cur."!cursor_fail"()
    .return (rx1306_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1359718901.265") :anon :lex :outer("cuid_232_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1309_tgt
    .local int rx1309_pos
    .local int rx1309_off
    .local int rx1309_eos
    .local int rx1309_rep
    .local pmc rx1309_cur
    .local pmc rx1309_curclass
    .local pmc rx1309_bstack
    .local pmc rx1309_cstack
    (rx1309_cur, rx1309_tgt, rx1309_pos, rx1309_curclass, rx1309_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1309_cur
    length rx1309_eos, rx1309_tgt
    eq $I19, 1, rx1309_restart3648
    gt rx1309_pos, rx1309_eos, rx1309_fail3649
    repr_get_attr_int $I11, self, rx1309_curclass, "$!from"
    ne $I11, -1, rxscan1310_done3655
    goto rxscan1310_scan3654
  rxscan1310_loop3653:
    inc rx1309_pos
    gt rx1309_pos, rx1309_eos, rx1309_fail3649
    repr_bind_attr_int rx1309_cur, rx1309_curclass, "$!from", rx1309_pos
  rxscan1310_scan3654:
    nqp_rxmark rx1309_bstack, rxscan1310_loop3653, rx1309_pos, 0
  rxscan1310_done3655:
    add $I11, rx1309_pos, 1
    gt $I11, rx1309_eos, rx1309_fail3649
    substr $S10, rx1309_tgt, rx1309_pos, 1
    ne $S10, ucs4:">", rx1309_fail3649
    add rx1309_pos, 1
    rx1309_cur."!cursor_pass"(rx1309_pos, 'backtrack'=>1)
    .return (rx1309_cur)
  rx1309_restart3648:
    repr_get_attr_obj rx1309_cstack, rx1309_cur, rx1309_curclass, "$!cstack"
  rx1309_fail3649:
    unless rx1309_bstack, rx1309_done3647
    pop $I19, rx1309_bstack
    if_null rx1309_cstack, rx1309_cstack_done3652
    unless rx1309_cstack, rx1309_cstack_done3652
    dec $I19
    set $P11, rx1309_cstack[$I19]
  rx1309_cstack_done3652:
    pop rx1309_rep, rx1309_bstack
    pop rx1309_pos, rx1309_bstack
    pop $I19, rx1309_bstack
    lt rx1309_pos, -1, rx1309_done3647
    lt rx1309_pos, 0, rx1309_fail3649
    eq $I19, 0, rx1309_fail3649
    nqp_islist $I20, rx1309_cstack
    unless $I20, rx1309_jump3650
    elements $I18, rx1309_bstack
    le $I18, 0, rx1309_cut3651
    dec $I18
    set $I18, rx1309_bstack[$I18]
  rx1309_cut3651:
    assign rx1309_cstack, $I18
  rx1309_jump3650:
    jump $I19
  rx1309_done3647:
    rx1309_cur."!cursor_fail"()
    .return (rx1309_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1359718901.265") :anon :lex :outer("cuid_232_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1311_tgt
    .local int rx1311_pos
    .local int rx1311_off
    .local int rx1311_eos
    .local int rx1311_rep
    .local pmc rx1311_cur
    .local pmc rx1311_curclass
    .local pmc rx1311_bstack
    .local pmc rx1311_cstack
    (rx1311_cur, rx1311_tgt, rx1311_pos, rx1311_curclass, rx1311_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1311_cur
    length rx1311_eos, rx1311_tgt
    eq $I19, 1, rx1311_restart3659
    gt rx1311_pos, rx1311_eos, rx1311_fail3660
    repr_get_attr_int $I11, self, rx1311_curclass, "$!from"
    ne $I11, -1, rxscan1312_done3666
    goto rxscan1312_scan3665
  rxscan1312_loop3664:
    inc rx1311_pos
    gt rx1311_pos, rx1311_eos, rx1311_fail3660
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!from", rx1311_pos
  rxscan1312_scan3665:
    nqp_rxmark rx1311_bstack, rxscan1312_loop3664, rx1311_pos, 0
  rxscan1312_done3666:
    add $I11, rx1311_pos, 1
    gt $I11, rx1311_eos, rx1311_fail3660
    substr $S10, rx1311_tgt, rx1311_pos, 1
    ne $S10, ucs4:"{", rx1311_fail3660
    add rx1311_pos, 1
    rx1311_cur."!cursor_pass"(rx1311_pos, 'backtrack'=>1)
    .return (rx1311_cur)
  rx1311_restart3659:
    repr_get_attr_obj rx1311_cstack, rx1311_cur, rx1311_curclass, "$!cstack"
  rx1311_fail3660:
    unless rx1311_bstack, rx1311_done3658
    pop $I19, rx1311_bstack
    if_null rx1311_cstack, rx1311_cstack_done3663
    unless rx1311_cstack, rx1311_cstack_done3663
    dec $I19
    set $P11, rx1311_cstack[$I19]
  rx1311_cstack_done3663:
    pop rx1311_rep, rx1311_bstack
    pop rx1311_pos, rx1311_bstack
    pop $I19, rx1311_bstack
    lt rx1311_pos, -1, rx1311_done3658
    lt rx1311_pos, 0, rx1311_fail3660
    eq $I19, 0, rx1311_fail3660
    nqp_islist $I20, rx1311_cstack
    unless $I20, rx1311_jump3661
    elements $I18, rx1311_bstack
    le $I18, 0, rx1311_cut3662
    dec $I18
    set $I18, rx1311_bstack[$I18]
  rx1311_cut3662:
    assign rx1311_cstack, $I18
  rx1311_jump3661:
    jump $I19
  rx1311_done3658:
    rx1311_cur."!cursor_fail"()
    .return (rx1311_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1410
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_236_1359718901.265' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_237_1359718901.265' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1314_tgt
    .local int rx1314_pos
    .local int rx1314_off
    .local int rx1314_eos
    .local int rx1314_rep
    .local pmc rx1314_cur
    .local pmc rx1314_curclass
    .local pmc rx1314_bstack
    .local pmc rx1314_cstack
    (rx1314_cur, rx1314_tgt, rx1314_pos, rx1314_curclass, rx1314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1314_cur
    length rx1314_eos, rx1314_tgt
    eq $I19, 1, rx1314_restart3670
    gt rx1314_pos, rx1314_eos, rx1314_fail3671
    repr_get_attr_int $I11, self, rx1314_curclass, "$!from"
    ne $I11, -1, rxscan1315_done3677
    goto rxscan1315_scan3676
  rxscan1315_loop3675:
    inc rx1314_pos
    gt rx1314_pos, rx1314_eos, rx1314_fail3671
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!from", rx1314_pos
  rxscan1315_scan3676:
    nqp_rxmark rx1314_bstack, rxscan1315_loop3675, rx1314_pos, 0
  rxscan1315_done3677:
    add $I11, rx1314_pos, 1
    gt $I11, rx1314_eos, rx1314_fail3671
    substr $S10, rx1314_tgt, rx1314_pos, 1
    ne $S10, ucs4:"!", rx1314_fail3671
    add rx1314_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1316_03679
    nqp_push_label $P11, alt1316_13690
    nqp_rxmark rx1314_bstack, alt1316_end3678, -1, 0
    rx1314_cur."!alt"(rx1314_pos, "alt_nfa__41_1359718904.607", $P11)
    goto rx1314_fail3671
  alt1316_03679:
    .const 'Sub' $P5001 = 'cuid_236_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!pos", rx1314_pos
    $P11 = rx1314_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1314_curclass, "$!pos"
    lt $I11, 0, rx1314_fail3671
    goto alt1316_end3678
  alt1316_13690:
    .const 'Sub' $P5002 = 'cuid_237_1359718901.265' 
    capture_lex $P5002
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!pos", rx1314_pos
    $P11 = rx1314_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1314_curclass, "$!pos"
    ge $I11, 0, rx1314_fail3671
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!pos", rx1314_pos
    $P11 = rx1314_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1314_curclass, "$!pos"
    lt $I11, 0, rx1314_fail3671
    nqp_rxmark rx1314_bstack, rxsubrule1321_pass3701, -1, 0
  rxsubrule1321_pass3701:
    rx1314_cstack = rx1314_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1314_pos, $P11, rx1314_curclass, "$!pos"
    goto alt1316_end3678
  alt1316_end3678:
    nqp_rxcommit rx1314_bstack, alt1316_end3678
    rx1314_cur."!cursor_pass"(rx1314_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1314_cur)
  rx1314_restart3670:
    repr_get_attr_obj rx1314_cstack, rx1314_cur, rx1314_curclass, "$!cstack"
  rx1314_fail3671:
    unless rx1314_bstack, rx1314_done3669
    pop $I19, rx1314_bstack
    if_null rx1314_cstack, rx1314_cstack_done3674
    unless rx1314_cstack, rx1314_cstack_done3674
    dec $I19
    set $P11, rx1314_cstack[$I19]
  rx1314_cstack_done3674:
    pop rx1314_rep, rx1314_bstack
    pop rx1314_pos, rx1314_bstack
    pop $I19, rx1314_bstack
    lt rx1314_pos, -1, rx1314_done3669
    lt rx1314_pos, 0, rx1314_fail3671
    eq $I19, 0, rx1314_fail3671
    nqp_islist $I20, rx1314_cstack
    unless $I20, rx1314_jump3672
    elements $I18, rx1314_bstack
    le $I18, 0, rx1314_cut3673
    dec $I18
    set $I18, rx1314_bstack[$I18]
  rx1314_cut3673:
    assign rx1314_cstack, $I18
  rx1314_jump3672:
    jump $I19
  rx1314_done3669:
    rx1314_cur."!cursor_fail"()
    .return (rx1314_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1359718901.265") :anon :lex :outer("cuid_235_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1317_tgt
    .local int rx1317_pos
    .local int rx1317_off
    .local int rx1317_eos
    .local int rx1317_rep
    .local pmc rx1317_cur
    .local pmc rx1317_curclass
    .local pmc rx1317_bstack
    .local pmc rx1317_cstack
    (rx1317_cur, rx1317_tgt, rx1317_pos, rx1317_curclass, rx1317_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1317_cur
    length rx1317_eos, rx1317_tgt
    eq $I19, 1, rx1317_restart3682
    gt rx1317_pos, rx1317_eos, rx1317_fail3683
    repr_get_attr_int $I11, self, rx1317_curclass, "$!from"
    ne $I11, -1, rxscan1318_done3689
    goto rxscan1318_scan3688
  rxscan1318_loop3687:
    inc rx1317_pos
    gt rx1317_pos, rx1317_eos, rx1317_fail3683
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!from", rx1317_pos
  rxscan1318_scan3688:
    nqp_rxmark rx1317_bstack, rxscan1318_loop3687, rx1317_pos, 0
  rxscan1318_done3689:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3683
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:">", rx1317_fail3683
    add rx1317_pos, 1
    rx1317_cur."!cursor_pass"(rx1317_pos, 'backtrack'=>1)
    .return (rx1317_cur)
  rx1317_restart3682:
    repr_get_attr_obj rx1317_cstack, rx1317_cur, rx1317_curclass, "$!cstack"
  rx1317_fail3683:
    unless rx1317_bstack, rx1317_done3681
    pop $I19, rx1317_bstack
    if_null rx1317_cstack, rx1317_cstack_done3686
    unless rx1317_cstack, rx1317_cstack_done3686
    dec $I19
    set $P11, rx1317_cstack[$I19]
  rx1317_cstack_done3686:
    pop rx1317_rep, rx1317_bstack
    pop rx1317_pos, rx1317_bstack
    pop $I19, rx1317_bstack
    lt rx1317_pos, -1, rx1317_done3681
    lt rx1317_pos, 0, rx1317_fail3683
    eq $I19, 0, rx1317_fail3683
    nqp_islist $I20, rx1317_cstack
    unless $I20, rx1317_jump3684
    elements $I18, rx1317_bstack
    le $I18, 0, rx1317_cut3685
    dec $I18
    set $I18, rx1317_bstack[$I18]
  rx1317_cut3685:
    assign rx1317_cstack, $I18
  rx1317_jump3684:
    jump $I19
  rx1317_done3681:
    rx1317_cur."!cursor_fail"()
    .return (rx1317_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1359718901.265") :anon :lex :outer("cuid_235_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1319_tgt
    .local int rx1319_pos
    .local int rx1319_off
    .local int rx1319_eos
    .local int rx1319_rep
    .local pmc rx1319_cur
    .local pmc rx1319_curclass
    .local pmc rx1319_bstack
    .local pmc rx1319_cstack
    (rx1319_cur, rx1319_tgt, rx1319_pos, rx1319_curclass, rx1319_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1319_cur
    length rx1319_eos, rx1319_tgt
    eq $I19, 1, rx1319_restart3693
    gt rx1319_pos, rx1319_eos, rx1319_fail3694
    repr_get_attr_int $I11, self, rx1319_curclass, "$!from"
    ne $I11, -1, rxscan1320_done3700
    goto rxscan1320_scan3699
  rxscan1320_loop3698:
    inc rx1319_pos
    gt rx1319_pos, rx1319_eos, rx1319_fail3694
    repr_bind_attr_int rx1319_cur, rx1319_curclass, "$!from", rx1319_pos
  rxscan1320_scan3699:
    nqp_rxmark rx1319_bstack, rxscan1320_loop3698, rx1319_pos, 0
  rxscan1320_done3700:
    add $I11, rx1319_pos, 1
    gt $I11, rx1319_eos, rx1319_fail3694
    substr $S10, rx1319_tgt, rx1319_pos, 1
    ne $S10, ucs4:"{", rx1319_fail3694
    add rx1319_pos, 1
    rx1319_cur."!cursor_pass"(rx1319_pos, 'backtrack'=>1)
    .return (rx1319_cur)
  rx1319_restart3693:
    repr_get_attr_obj rx1319_cstack, rx1319_cur, rx1319_curclass, "$!cstack"
  rx1319_fail3694:
    unless rx1319_bstack, rx1319_done3692
    pop $I19, rx1319_bstack
    if_null rx1319_cstack, rx1319_cstack_done3697
    unless rx1319_cstack, rx1319_cstack_done3697
    dec $I19
    set $P11, rx1319_cstack[$I19]
  rx1319_cstack_done3697:
    pop rx1319_rep, rx1319_bstack
    pop rx1319_pos, rx1319_bstack
    pop $I19, rx1319_bstack
    lt rx1319_pos, -1, rx1319_done3692
    lt rx1319_pos, 0, rx1319_fail3694
    eq $I19, 0, rx1319_fail3694
    nqp_islist $I20, rx1319_cstack
    unless $I20, rx1319_jump3695
    elements $I18, rx1319_bstack
    le $I18, 0, rx1319_cut3696
    dec $I18
    set $I18, rx1319_bstack[$I18]
  rx1319_cut3696:
    assign rx1319_cstack, $I18
  rx1319_jump3695:
    jump $I19
  rx1319_done3692:
    rx1319_cur."!cursor_fail"()
    .return (rx1319_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_238_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1412
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_239_1359718901.265' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1322_tgt
    .local int rx1322_pos
    .local int rx1322_off
    .local int rx1322_eos
    .local int rx1322_rep
    .local pmc rx1322_cur
    .local pmc rx1322_curclass
    .local pmc rx1322_bstack
    .local pmc rx1322_cstack
    (rx1322_cur, rx1322_tgt, rx1322_pos, rx1322_curclass, rx1322_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1322_cur
    length rx1322_eos, rx1322_tgt
    eq $I19, 1, rx1322_restart3704
    gt rx1322_pos, rx1322_eos, rx1322_fail3705
    repr_get_attr_int $I11, self, rx1322_curclass, "$!from"
    ne $I11, -1, rxscan1323_done3711
    goto rxscan1323_scan3710
  rxscan1323_loop3709:
    inc rx1322_pos
    gt rx1322_pos, rx1322_eos, rx1322_fail3705
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!from", rx1322_pos
  rxscan1323_scan3710:
    nqp_rxmark rx1322_bstack, rxscan1323_loop3709, rx1322_pos, 0
  rxscan1323_done3711:
    nqp_rxmark rx1322_bstack, rxcap1324_fail3713, rx1322_pos, 0
    ge rx1322_pos, rx1322_eos, rx1322_fail3705
    substr $S11, rx1322_tgt, rx1322_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1322_fail3705
    inc rx1322_pos
    .const 'Sub' $P5001 = 'cuid_239_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!pos", rx1322_pos
    $P11 = rx1322_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1322_curclass, "$!pos"
    lt $I11, 0, rx1322_fail3705
    nqp_rxpeek $I19, rx1322_bstack, rxcap1324_fail3713
    inc $I19
    set $I11, rx1322_bstack[$I19]
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!pos", rx1322_pos
    $P11 = rx1322_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1322_pos)
    rx1322_cstack = rx1322_cur."!cursor_capture"($P11, "zw")
    goto rxcap1324_done3712
  rxcap1324_fail3713:
    goto rx1322_fail3705
  rxcap1324_done3712:
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!pos", rx1322_pos
    $P11 = rx1322_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1322_curclass, "$!pos"
    lt $I11, 0, rx1322_fail3705
    nqp_rxmark rx1322_bstack, rxsubrule1327_pass3724, -1, 0
  rxsubrule1327_pass3724:
    rx1322_cstack = rx1322_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1322_pos, $P11, rx1322_curclass, "$!pos"
    rx1322_cur."!cursor_pass"(rx1322_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1322_cur)
  rx1322_restart3704:
    repr_get_attr_obj rx1322_cstack, rx1322_cur, rx1322_curclass, "$!cstack"
  rx1322_fail3705:
    unless rx1322_bstack, rx1322_done3703
    pop $I19, rx1322_bstack
    if_null rx1322_cstack, rx1322_cstack_done3708
    unless rx1322_cstack, rx1322_cstack_done3708
    dec $I19
    set $P11, rx1322_cstack[$I19]
  rx1322_cstack_done3708:
    pop rx1322_rep, rx1322_bstack
    pop rx1322_pos, rx1322_bstack
    pop $I19, rx1322_bstack
    lt rx1322_pos, -1, rx1322_done3703
    lt rx1322_pos, 0, rx1322_fail3705
    eq $I19, 0, rx1322_fail3705
    nqp_islist $I20, rx1322_cstack
    unless $I20, rx1322_jump3706
    elements $I18, rx1322_bstack
    le $I18, 0, rx1322_cut3707
    dec $I18
    set $I18, rx1322_bstack[$I18]
  rx1322_cut3707:
    assign rx1322_cstack, $I18
  rx1322_jump3706:
    jump $I19
  rx1322_done3703:
    rx1322_cur."!cursor_fail"()
    .return (rx1322_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1359718901.265") :anon :lex :outer("cuid_238_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1325_tgt
    .local int rx1325_pos
    .local int rx1325_off
    .local int rx1325_eos
    .local int rx1325_rep
    .local pmc rx1325_cur
    .local pmc rx1325_curclass
    .local pmc rx1325_bstack
    .local pmc rx1325_cstack
    (rx1325_cur, rx1325_tgt, rx1325_pos, rx1325_curclass, rx1325_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1325_cur
    length rx1325_eos, rx1325_tgt
    eq $I19, 1, rx1325_restart3716
    gt rx1325_pos, rx1325_eos, rx1325_fail3717
    repr_get_attr_int $I11, self, rx1325_curclass, "$!from"
    ne $I11, -1, rxscan1326_done3723
    goto rxscan1326_scan3722
  rxscan1326_loop3721:
    inc rx1325_pos
    gt rx1325_pos, rx1325_eos, rx1325_fail3717
    repr_bind_attr_int rx1325_cur, rx1325_curclass, "$!from", rx1325_pos
  rxscan1326_scan3722:
    nqp_rxmark rx1325_bstack, rxscan1326_loop3721, rx1325_pos, 0
  rxscan1326_done3723:
    add $I11, rx1325_pos, 1
    gt $I11, rx1325_eos, rx1325_fail3717
    substr $S10, rx1325_tgt, rx1325_pos, 1
    ne $S10, ucs4:"{", rx1325_fail3717
    add rx1325_pos, 1
    rx1325_cur."!cursor_pass"(rx1325_pos, 'backtrack'=>1)
    .return (rx1325_cur)
  rx1325_restart3716:
    repr_get_attr_obj rx1325_cstack, rx1325_cur, rx1325_curclass, "$!cstack"
  rx1325_fail3717:
    unless rx1325_bstack, rx1325_done3715
    pop $I19, rx1325_bstack
    if_null rx1325_cstack, rx1325_cstack_done3720
    unless rx1325_cstack, rx1325_cstack_done3720
    dec $I19
    set $P11, rx1325_cstack[$I19]
  rx1325_cstack_done3720:
    pop rx1325_rep, rx1325_bstack
    pop rx1325_pos, rx1325_bstack
    pop $I19, rx1325_bstack
    lt rx1325_pos, -1, rx1325_done3715
    lt rx1325_pos, 0, rx1325_fail3717
    eq $I19, 0, rx1325_fail3717
    nqp_islist $I20, rx1325_cstack
    unless $I20, rx1325_jump3718
    elements $I18, rx1325_bstack
    le $I18, 0, rx1325_cut3719
    dec $I18
    set $I18, rx1325_bstack[$I18]
  rx1325_cut3719:
    assign rx1325_cstack, $I18
  rx1325_jump3718:
    jump $I19
  rx1325_done3715:
    rx1325_cur."!cursor_fail"()
    .return (rx1325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_240_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1416
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_241_1359718901.265' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1328_tgt
    .local int rx1328_pos
    .local int rx1328_off
    .local int rx1328_eos
    .local int rx1328_rep
    .local pmc rx1328_cur
    .local pmc rx1328_curclass
    .local pmc rx1328_bstack
    .local pmc rx1328_cstack
    (rx1328_cur, rx1328_tgt, rx1328_pos, rx1328_curclass, rx1328_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1328_cur
    length rx1328_eos, rx1328_tgt
    eq $I19, 1, rx1328_restart3727
    gt rx1328_pos, rx1328_eos, rx1328_fail3728
    repr_get_attr_int $I11, self, rx1328_curclass, "$!from"
    ne $I11, -1, rxscan1329_done3734
    goto rxscan1329_scan3733
  rxscan1329_loop3732:
    inc rx1328_pos
    gt rx1328_pos, rx1328_eos, rx1328_fail3728
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!from", rx1328_pos
  rxscan1329_scan3733:
    nqp_rxmark rx1328_bstack, rxscan1329_loop3732, rx1328_pos, 0
  rxscan1329_done3734:
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3728
    nqp_rxmark rx1328_bstack, rxsubrule1330_pass3735, -1, 0
  rxsubrule1330_pass3735:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    nqp_rxmark rx1328_bstack, rxquantr1331_done3737, rx1328_pos, 0
  rxquantr1331_loop3736:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1332_03739
    nqp_push_label $P11, alt1332_13750
    nqp_push_label $P11, alt1332_23752
    nqp_push_label $P11, alt1332_33754
    nqp_push_label $P11, alt1332_43756
    nqp_rxmark rx1328_bstack, alt1332_end3738, -1, 0
    rx1328_cur."!alt"(rx1328_pos, "alt_nfa__42_1359718904.639", $P11)
    goto rx1328_fail3728
  alt1332_03739:
    .const 'Sub' $P5001 = 'cuid_241_1359718901.265' 
    capture_lex $P5001
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3728
    goto alt1332_end3738
  alt1332_13750:
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3728
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:"=", rx1328_fail3728
    add rx1328_pos, 1
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3728
    nqp_rxmark rx1328_bstack, rxsubrule1335_pass3751, -1, 0
  rxsubrule1335_pass3751:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    goto alt1332_end3738
  alt1332_23752:
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3728
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:":", rx1328_fail3728
    add rx1328_pos, 1
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3728
    nqp_rxmark rx1328_bstack, rxsubrule1336_pass3753, -1, 0
  rxsubrule1336_pass3753:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    goto alt1332_end3738
  alt1332_33754:
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3728
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:"(", rx1328_fail3728
    add rx1328_pos, 1
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3728
    nqp_rxmark rx1328_bstack, rxsubrule1337_pass3755, -1, 0
  rxsubrule1337_pass3755:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3728
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:")", rx1328_fail3728
    add rx1328_pos, 1
    goto alt1332_end3738
  alt1332_43756:
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3728
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!pos", rx1328_pos
    $P11 = rx1328_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1328_curclass, "$!pos"
    lt $I11, 0, rx1328_fail3728
    nqp_rxmark rx1328_bstack, rxsubrule1339_pass3758, -1, 0
  rxsubrule1339_pass3758:
    rx1328_cstack = rx1328_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1328_pos, $P11, rx1328_curclass, "$!pos"
    goto alt1332_end3738
  alt1332_end3738:
    nqp_rxpeek $I19, rx1328_bstack, rxquantr1331_done3737
    inc $I19
    inc $I19
    set rx1328_rep, rx1328_bstack[$I19]
    nqp_rxcommit rx1328_bstack, rxquantr1331_done3737
    inc rx1328_rep
  rxquantr1331_done3737:
    rx1328_cur."!cursor_pass"(rx1328_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1328_cur)
  rx1328_restart3727:
    repr_get_attr_obj rx1328_cstack, rx1328_cur, rx1328_curclass, "$!cstack"
  rx1328_fail3728:
    unless rx1328_bstack, rx1328_done3726
    pop $I19, rx1328_bstack
    if_null rx1328_cstack, rx1328_cstack_done3731
    unless rx1328_cstack, rx1328_cstack_done3731
    dec $I19
    set $P11, rx1328_cstack[$I19]
  rx1328_cstack_done3731:
    pop rx1328_rep, rx1328_bstack
    pop rx1328_pos, rx1328_bstack
    pop $I19, rx1328_bstack
    lt rx1328_pos, -1, rx1328_done3726
    lt rx1328_pos, 0, rx1328_fail3728
    eq $I19, 0, rx1328_fail3728
    nqp_islist $I20, rx1328_cstack
    unless $I20, rx1328_jump3729
    elements $I18, rx1328_bstack
    le $I18, 0, rx1328_cut3730
    dec $I18
    set $I18, rx1328_bstack[$I18]
  rx1328_cut3730:
    assign rx1328_cstack, $I18
  rx1328_jump3729:
    jump $I19
  rx1328_done3726:
    rx1328_cur."!cursor_fail"()
    .return (rx1328_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_241_1359718901.265") :anon :lex :outer("cuid_240_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1333_tgt
    .local int rx1333_pos
    .local int rx1333_off
    .local int rx1333_eos
    .local int rx1333_rep
    .local pmc rx1333_cur
    .local pmc rx1333_curclass
    .local pmc rx1333_bstack
    .local pmc rx1333_cstack
    (rx1333_cur, rx1333_tgt, rx1333_pos, rx1333_curclass, rx1333_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1333_cur
    length rx1333_eos, rx1333_tgt
    eq $I19, 1, rx1333_restart3742
    gt rx1333_pos, rx1333_eos, rx1333_fail3743
    repr_get_attr_int $I11, self, rx1333_curclass, "$!from"
    ne $I11, -1, rxscan1334_done3749
    goto rxscan1334_scan3748
  rxscan1334_loop3747:
    inc rx1333_pos
    gt rx1333_pos, rx1333_eos, rx1333_fail3743
    repr_bind_attr_int rx1333_cur, rx1333_curclass, "$!from", rx1333_pos
  rxscan1334_scan3748:
    nqp_rxmark rx1333_bstack, rxscan1334_loop3747, rx1333_pos, 0
  rxscan1334_done3749:
    add $I11, rx1333_pos, 1
    gt $I11, rx1333_eos, rx1333_fail3743
    substr $S10, rx1333_tgt, rx1333_pos, 1
    ne $S10, ucs4:">", rx1333_fail3743
    add rx1333_pos, 1
    rx1333_cur."!cursor_pass"(rx1333_pos, 'backtrack'=>1)
    .return (rx1333_cur)
  rx1333_restart3742:
    repr_get_attr_obj rx1333_cstack, rx1333_cur, rx1333_curclass, "$!cstack"
  rx1333_fail3743:
    unless rx1333_bstack, rx1333_done3741
    pop $I19, rx1333_bstack
    if_null rx1333_cstack, rx1333_cstack_done3746
    unless rx1333_cstack, rx1333_cstack_done3746
    dec $I19
    set $P11, rx1333_cstack[$I19]
  rx1333_cstack_done3746:
    pop rx1333_rep, rx1333_bstack
    pop rx1333_pos, rx1333_bstack
    pop $I19, rx1333_bstack
    lt rx1333_pos, -1, rx1333_done3741
    lt rx1333_pos, 0, rx1333_fail3743
    eq $I19, 0, rx1333_fail3743
    nqp_islist $I20, rx1333_cstack
    unless $I20, rx1333_jump3744
    elements $I18, rx1333_bstack
    le $I18, 0, rx1333_cut3745
    dec $I18
    set $I18, rx1333_bstack[$I18]
  rx1333_cut3745:
    assign rx1333_cstack, $I18
  rx1333_jump3744:
    jump $I19
  rx1333_done3741:
    rx1333_cur."!cursor_fail"()
    .return (rx1333_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_242_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1427
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1340_tgt
    .local int rx1340_pos
    .local int rx1340_off
    .local int rx1340_eos
    .local int rx1340_rep
    .local pmc rx1340_cur
    .local pmc rx1340_curclass
    .local pmc rx1340_bstack
    .local pmc rx1340_cstack
    (rx1340_cur, rx1340_tgt, rx1340_pos, rx1340_curclass, rx1340_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1340_cur
    length rx1340_eos, rx1340_tgt
    eq $I19, 1, rx1340_restart3761
    gt rx1340_pos, rx1340_eos, rx1340_fail3762
    repr_get_attr_int $I11, self, rx1340_curclass, "$!from"
    ne $I11, -1, rxscan1341_done3768
    goto rxscan1341_scan3767
  rxscan1341_loop3766:
    inc rx1340_pos
    gt rx1340_pos, rx1340_eos, rx1340_fail3762
    repr_bind_attr_int rx1340_cur, rx1340_curclass, "$!from", rx1340_pos
  rxscan1341_scan3767:
    nqp_rxmark rx1340_bstack, rxscan1341_loop3766, rx1340_pos, 0
  rxscan1341_done3768:
    ge rx1340_pos, rx1340_eos, rx1340_fail3762
    substr $S11, rx1340_tgt, rx1340_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1340_fail3762
    repr_bind_attr_int rx1340_cur, rx1340_curclass, "$!pos", rx1340_pos
    $P11 = rx1340_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1340_curclass, "$!pos"
    lt $I11, 0, rx1340_fail3762
    nqp_rxmark rx1340_bstack, rxsubrule1342_pass3769, -1, 0
  rxsubrule1342_pass3769:
    rx1340_cstack = rx1340_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1340_pos, $P11, rx1340_curclass, "$!pos"
    rx1340_cur."!cursor_pass"(rx1340_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1340_cur)
  rx1340_restart3761:
    repr_get_attr_obj rx1340_cstack, rx1340_cur, rx1340_curclass, "$!cstack"
  rx1340_fail3762:
    unless rx1340_bstack, rx1340_done3760
    pop $I19, rx1340_bstack
    if_null rx1340_cstack, rx1340_cstack_done3765
    unless rx1340_cstack, rx1340_cstack_done3765
    dec $I19
    set $P11, rx1340_cstack[$I19]
  rx1340_cstack_done3765:
    pop rx1340_rep, rx1340_bstack
    pop rx1340_pos, rx1340_bstack
    pop $I19, rx1340_bstack
    lt rx1340_pos, -1, rx1340_done3760
    lt rx1340_pos, 0, rx1340_fail3762
    eq $I19, 0, rx1340_fail3762
    nqp_islist $I20, rx1340_cstack
    unless $I20, rx1340_jump3763
    elements $I18, rx1340_bstack
    le $I18, 0, rx1340_cut3764
    dec $I18
    set $I18, rx1340_bstack[$I18]
  rx1340_cut3764:
    assign rx1340_cstack, $I18
  rx1340_jump3763:
    jump $I19
  rx1340_done3760:
    rx1340_cur."!cursor_fail"()
    .return (rx1340_cur) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_243_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1431
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1343_tgt
    .local int rx1343_pos
    .local int rx1343_off
    .local int rx1343_eos
    .local int rx1343_rep
    .local pmc rx1343_cur
    .local pmc rx1343_curclass
    .local pmc rx1343_bstack
    .local pmc rx1343_cstack
    (rx1343_cur, rx1343_tgt, rx1343_pos, rx1343_curclass, rx1343_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1343_cur
    length rx1343_eos, rx1343_tgt
    eq $I19, 1, rx1343_restart3772
    gt rx1343_pos, rx1343_eos, rx1343_fail3773
    repr_get_attr_int $I11, self, rx1343_curclass, "$!from"
    ne $I11, -1, rxscan1344_done3779
    goto rxscan1344_scan3778
  rxscan1344_loop3777:
    inc rx1343_pos
    gt rx1343_pos, rx1343_eos, rx1343_fail3773
    repr_bind_attr_int rx1343_cur, rx1343_curclass, "$!from", rx1343_pos
  rxscan1344_scan3778:
    nqp_rxmark rx1343_bstack, rxscan1344_loop3777, rx1343_pos, 0
  rxscan1344_done3779:
    repr_bind_attr_int rx1343_cur, rx1343_curclass, "$!pos", rx1343_pos
    $P11 = rx1343_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1343_curclass, "$!pos"
    lt $I11, 0, rx1343_fail3773
    nqp_rxmark rx1343_bstack, rxsubrule1345_pass3780, -1, 0
  rxsubrule1345_pass3780:
    rx1343_cstack = rx1343_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1343_pos, $P11, rx1343_curclass, "$!pos"
    rx1343_cur."!cursor_pass"(rx1343_pos, "codeblock", 'backtrack'=>1)
    .return (rx1343_cur)
  rx1343_restart3772:
    repr_get_attr_obj rx1343_cstack, rx1343_cur, rx1343_curclass, "$!cstack"
  rx1343_fail3773:
    unless rx1343_bstack, rx1343_done3771
    pop $I19, rx1343_bstack
    if_null rx1343_cstack, rx1343_cstack_done3776
    unless rx1343_cstack, rx1343_cstack_done3776
    dec $I19
    set $P11, rx1343_cstack[$I19]
  rx1343_cstack_done3776:
    pop rx1343_rep, rx1343_bstack
    pop rx1343_pos, rx1343_bstack
    pop $I19, rx1343_bstack
    lt rx1343_pos, -1, rx1343_done3771
    lt rx1343_pos, 0, rx1343_fail3773
    eq $I19, 0, rx1343_fail3773
    nqp_islist $I20, rx1343_cstack
    unless $I20, rx1343_jump3774
    elements $I18, rx1343_bstack
    le $I18, 0, rx1343_cut3775
    dec $I18
    set $I18, rx1343_bstack[$I18]
  rx1343_cut3775:
    assign rx1343_cstack, $I18
  rx1343_jump3774:
    jump $I19
  rx1343_done3771:
    rx1343_cur."!cursor_fail"()
    .return (rx1343_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_244_1359718901.265") :anon :lex :outer("cuid_410_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1435
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1346_tgt
    .local int rx1346_pos
    .local int rx1346_off
    .local int rx1346_eos
    .local int rx1346_rep
    .local pmc rx1346_cur
    .local pmc rx1346_curclass
    .local pmc rx1346_bstack
    .local pmc rx1346_cstack
    (rx1346_cur, rx1346_tgt, rx1346_pos, rx1346_curclass, rx1346_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1346_cur
    length rx1346_eos, rx1346_tgt
    eq $I19, 1, rx1346_restart3783
    gt rx1346_pos, rx1346_eos, rx1346_fail3784
    repr_get_attr_int $I11, self, rx1346_curclass, "$!from"
    ne $I11, -1, rxscan1347_done3790
    goto rxscan1347_scan3789
  rxscan1347_loop3788:
    inc rx1346_pos
    gt rx1346_pos, rx1346_eos, rx1346_fail3784
    repr_bind_attr_int rx1346_cur, rx1346_curclass, "$!from", rx1346_pos
  rxscan1347_scan3789:
    nqp_rxmark rx1346_bstack, rxscan1347_loop3788, rx1346_pos, 0
  rxscan1347_done3790:
    repr_bind_attr_int rx1346_cur, rx1346_curclass, "$!pos", rx1346_pos
    $P11 = rx1346_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1346_curclass, "$!pos"
    lt $I11, 0, rx1346_fail3784
    nqp_rxmark rx1346_bstack, rxsubrule1348_pass3791, -1, 0
  rxsubrule1348_pass3791:
    rx1346_cstack = rx1346_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1346_pos, $P11, rx1346_curclass, "$!pos"
    rx1346_cur."!cursor_pass"(rx1346_pos, "arg", 'backtrack'=>1)
    .return (rx1346_cur)
  rx1346_restart3783:
    repr_get_attr_obj rx1346_cstack, rx1346_cur, rx1346_curclass, "$!cstack"
  rx1346_fail3784:
    unless rx1346_bstack, rx1346_done3782
    pop $I19, rx1346_bstack
    if_null rx1346_cstack, rx1346_cstack_done3787
    unless rx1346_cstack, rx1346_cstack_done3787
    dec $I19
    set $P11, rx1346_cstack[$I19]
  rx1346_cstack_done3787:
    pop rx1346_rep, rx1346_bstack
    pop rx1346_pos, rx1346_bstack
    pop $I19, rx1346_bstack
    lt rx1346_pos, -1, rx1346_done3782
    lt rx1346_pos, 0, rx1346_fail3784
    eq $I19, 0, rx1346_fail3784
    nqp_islist $I20, rx1346_cstack
    unless $I20, rx1346_jump3785
    elements $I18, rx1346_bstack
    le $I18, 0, rx1346_cut3786
    dec $I18
    set $I18, rx1346_bstack[$I18]
  rx1346_cut3786:
    assign rx1346_cstack, $I18
  rx1346_jump3785:
    jump $I19
  rx1346_done3782:
    rx1346_cur."!cursor_fail"()
    .return (rx1346_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1446
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3793
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5003
  fallback3793:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3796
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5008
  fallback3796:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1349_end3795 
.annotate 'line', 1448
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
  unless1349_end3795:
.annotate 'line', 1451
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3797
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5014
  fallback3797:
.annotate 'line', 1454
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3798
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5019
  fallback3798:
.annotate 'line', 1457
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3799
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5024
  fallback3799:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "add_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1461
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3800
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5003
  fallback3800:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3803
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5008
  fallback3803:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1350_end3802 
.annotate 'line', 1463
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
  unless1350_end3802:
.annotate 'line', 1466
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3804
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5014
  fallback3804:
.annotate 'line', 1469
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3805
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5019
  fallback3805:
.annotate 'line', 1472
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3806
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5024
  fallback3806:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "sub_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1476
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3807
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5004
  fallback3807:
    set $P101, $P5003
.annotate 'line', 1478
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3808
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5009
  fallback3808:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3811
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback3811:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1351_end3810 
.annotate 'line', 1479
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
  unless1351_end3810:
.annotate 'line', 1482
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3812
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5021
  fallback3812:
.annotate 'line', 1484
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3813
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5026
  fallback3813:
.annotate 'line', 1486
    nqp_get_sc_object $P5030, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3814
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5031
  fallback3814:
    $P5032 = $P101."returns"()
    $P5033 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5032 :named("returns"))
    $P5034 = $P5022."new"($P5033, $P101, "bind" :named("op"))
.annotate 'line', 1489
    nqp_get_sc_object $P5038, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3815
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5039
  fallback3815:
.annotate 'line', 1492
    nqp_get_sc_object $P5043, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3816
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5044
  fallback3816:
.annotate 'line', 1494
    nqp_get_sc_object $P5048, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback3817
    nqp_get_sc_object $P5049, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5045, $P5049
  fallback3817:
    $P5050 = $P101."returns"()
    $P5051 = $P5045."new"($P102 :named("name"), "local" :named("scope"), $P5050 :named("returns"))
.annotate 'line', 1495
    nqp_get_sc_object $P5055, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3818
    nqp_get_sc_object $P5056, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5052, $P5056
  fallback3818:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5040."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5035."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5017."new"($P5034, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1500
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3819
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5004
  fallback3819:
    set $P101, $P5003
.annotate 'line', 1502
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3820
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5009
  fallback3820:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3823
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback3823:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1352_end3822 
.annotate 'line', 1503
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
  unless1352_end3822:
.annotate 'line', 1506
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3824
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5021
  fallback3824:
.annotate 'line', 1508
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3825
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5026
  fallback3825:
.annotate 'line', 1510
    nqp_get_sc_object $P5030, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3826
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5031
  fallback3826:
    $P5032 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5033 = $P5022."new"($P5032, $P101, "bind" :named("op"))
.annotate 'line', 1513
    nqp_get_sc_object $P5037, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3827
    nqp_get_sc_object $P5038, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5034, $P5038
  fallback3827:
.annotate 'line', 1516
    nqp_get_sc_object $P5042, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3828
    nqp_get_sc_object $P5043, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5043
  fallback3828:
.annotate 'line', 1518
    nqp_get_sc_object $P5047, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Var"]
    unless_null $P5044, fallback3829
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5048
  fallback3829:
    $P5049 = $P5044."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1519
    nqp_get_sc_object $P5053, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback3830
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5050, $P5054
  fallback3830:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5039."new"($P5049, $P5055, "sub_n" :named("op"))
    $P5057 = $P5034."new"($P101, $P5056, "bind" :named("op"))
    $P5058 = $P5017."new"($P5033, $P5057, 0 :named("resultchild"))
    $P5059 = _lex_param_0."as_post"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1524
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1525
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3831
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5002
  fallback3831:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1528
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1529
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3832
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5002
  fallback3832:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1532
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1533
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3833
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3833:
.annotate 'line', 1535
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3834
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback3834:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3835
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5012
  fallback3835:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1536
    nqp_get_sc_object $P5017, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3836
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5018
  fallback3836:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3837
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5020
  fallback3837:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1540
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$res", $P101 
    .lex "$ops", $P102 
    .lex "$arg_post", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
.annotate 'line', 1541
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback3838
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback3839
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5008
  fallback3839:
    unless_null $P5005, vivi_13533840
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_13533840:
    set $P5004, $P5005
  fallback3838:
    $P5010 = $P5004."fresh_i"()
    set $P101, $P5010
.annotate 'line', 1542
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback3841
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback3841:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 1543
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback3842
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5018
  fallback3842:
    $P5019 = _lex_param_0."as_post"($P5017)
    set $P103, $P5019
.annotate 'line', 1544
    $P5020 = $P103."result"()
    $P5021 = _lex_param_0."infer_type"($P5020)
    set $S5002, $P5021
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "i"
    unless $I5001 goto if1354_else3843 
.annotate 'line', 1545
    $P102."push"($P103)
.annotate 'line', 1546
    $P5022 = $P102."push_pirop"("not", $P101, $P103)
    goto if1354_end3844
  if1354_else3843:
.annotate 'line', 1548
.annotate 'line', 1549
    $P5023 = _lex_param_0."coerce"($P103, "P")
    set $P103, $P5023
.annotate 'line', 1550
    $P102."push"($P103)
.annotate 'line', 1551
    $P5024 = $P102."push_pirop"("isfalse", $P101, $P103)
  if1354_end3844:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_420_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1557
    .const 'Sub' $P5124 = 'cuid_419_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_423_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_426_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_427_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_430_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_432_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_433_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_434_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_436_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_437_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_442_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_245_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_246_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_247_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_248_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_249_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_250_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_251_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_252_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_253_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_254_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_255_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_256_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_257_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_258_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_259_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_260_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_261_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_262_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_263_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_264_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_265_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_266_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_267_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_268_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_269_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_270_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_271_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_272_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_273_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_274_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_275_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_276_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_277_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_278_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_279_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_280_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_281_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_282_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_283_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_284_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_285_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_286_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_287_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_288_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_289_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_290_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_291_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_292_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_293_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_294_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_295_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_296_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_297_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_298_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_299_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_300_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_301_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_302_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_303_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_304_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_305_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_306_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_307_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_308_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_309_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_310_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_311_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_312_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_313_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_314_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_315_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_316_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_317_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_318_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_319_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_320_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_321_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_322_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_323_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_324_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_325_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_326_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_327_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_328_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_329_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_330_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_331_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_332_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_333_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_334_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_335_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_336_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_337_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_338_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_339_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_340_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_341_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_342_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_343_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_344_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_345_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_346_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_347_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_348_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_349_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_350_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_351_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_352_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_353_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_354_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_355_1359718901.265' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_356_1359718901.265' 
    capture_lex $P5124 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_419_1359718901.265' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_423_1359718901.265' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_426_1359718901.265' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_427_1359718901.265' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_430_1359718901.265' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_432_1359718901.265' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_433_1359718901.265' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_434_1359718901.265' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_436_1359718901.265' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_437_1359718901.265' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_442_1359718901.265' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_245_1359718901.265' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_246_1359718901.265' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_247_1359718901.265' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_248_1359718901.265' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_249_1359718901.265' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_250_1359718901.265' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_251_1359718901.265' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_252_1359718901.265' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_253_1359718901.265' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_254_1359718901.265' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_255_1359718901.265' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_256_1359718901.265' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_257_1359718901.265' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_258_1359718901.265' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_259_1359718901.265' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_260_1359718901.265' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_261_1359718901.265' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_262_1359718901.265' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_263_1359718901.265' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_264_1359718901.265' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_265_1359718901.265' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_266_1359718901.265' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_267_1359718901.265' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_268_1359718901.265' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_269_1359718901.265' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_270_1359718901.265' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_271_1359718901.265' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_272_1359718901.265' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_273_1359718901.265' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_274_1359718901.265' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_275_1359718901.265' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_276_1359718901.265' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_277_1359718901.265' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_278_1359718901.265' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_279_1359718901.265' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_280_1359718901.265' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_281_1359718901.265' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_282_1359718901.265' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_283_1359718901.265' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_284_1359718901.265' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_285_1359718901.265' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_286_1359718901.265' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_287_1359718901.265' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_288_1359718901.265' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_289_1359718901.265' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_290_1359718901.265' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_291_1359718901.265' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_292_1359718901.265' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_293_1359718901.265' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_294_1359718901.265' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_295_1359718901.265' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_296_1359718901.265' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_297_1359718901.265' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_298_1359718901.265' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_299_1359718901.265' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_300_1359718901.265' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_301_1359718901.265' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_302_1359718901.265' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_303_1359718901.265' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_304_1359718901.265' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_305_1359718901.265' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_306_1359718901.265' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_307_1359718901.265' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_308_1359718901.265' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_309_1359718901.265' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_310_1359718901.265' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_311_1359718901.265' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_312_1359718901.265' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_313_1359718901.265' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_314_1359718901.265' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_315_1359718901.265' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_316_1359718901.265' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_317_1359718901.265' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_318_1359718901.265' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_319_1359718901.265' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_320_1359718901.265' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_321_1359718901.265' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_322_1359718901.265' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_323_1359718901.265' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_324_1359718901.265' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_325_1359718901.265' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_326_1359718901.265' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_327_1359718901.265' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_328_1359718901.265' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_329_1359718901.265' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_330_1359718901.265' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_331_1359718901.265' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_332_1359718901.265' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_333_1359718901.265' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_334_1359718901.265' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_335_1359718901.265' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_336_1359718901.265' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_337_1359718901.265' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_338_1359718901.265' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_339_1359718901.265' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_340_1359718901.265' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_341_1359718901.265' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_342_1359718901.265' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_343_1359718901.265' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_344_1359718901.265' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_345_1359718901.265' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_346_1359718901.265' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_347_1359718901.265' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_348_1359718901.265' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_349_1359718901.265' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_350_1359718901.265' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_351_1359718901.265' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_352_1359718901.265' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_353_1359718901.265' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_354_1359718901.265' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_355_1359718901.265' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_356_1359718901.265' 
    capture_lex $P5123
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_419_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1558
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1559
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3845
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5002
  fallback3845:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_423_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1563
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_422_1359718901.265' 
    capture_lex $P5004 
    .lex "$block", _lex_param_0 
.annotate 'line', 1564
    _lex_param_0."blocktype"("immediate")
.annotate 'line', 1565
    $P5001 = _lex_param_0."symtable"()
    if $P5001 goto unless1355_end3847 
    .const 'Sub' $P5002 = 'cuid_422_1359718901.265' 
    capture_lex $P5002
    $P5003 = $P5002()
  unless1355_end3847:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_422_1359718901.265") :anon :lex :outer("cuid_423_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1565
    .const 'Sub' $P5017 = 'cuid_421_1359718901.265' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1566
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3848
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback3848:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1567
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3849:
    unless $P5012, for_done3851
    shift $P5016, $P5012
  for_redo3850:
    .const 'Sub' $P5015 = 'cuid_421_1359718901.265' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3849
  for_done3851:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1359718901.265") :anon :lex :outer("cuid_422_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1567
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_426_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1573
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_425_1359718901.265' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1356_else3852 
.annotate 'line', 1574
.annotate 'line', 1575
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3854
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3854:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1356_end3853
  if1356_else3852:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1357_else3855 
.annotate 'line', 1577
.annotate 'line', 1578
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3857
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback3857:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1357_end3856
  if1357_else3855:
    .const 'Sub' $P5013 = 'cuid_425_1359718901.265' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1357_end3856:
    set $P5016, $P5015
  if1356_end3853:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1359718901.265") :anon :lex :outer("cuid_426_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1580
    .const 'Sub' $P5022 = 'cuid_424_1359718901.265' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_13623866
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1582
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_13603863
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1583
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3858
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback3858:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3859
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3860
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5011
  fallback3860:
    unless_null $P5008, vivi_13583861
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_13583861:
    set $P5007, $P5008
  fallback3859:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_13593862
  catch_handler_13603863:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_424_1359718901.265' 
    capture_lex $P10001
    $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10002
    goto skip_handler_13593862
  skip_handler_13593862:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_13613865
  catch_handler_13623866:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_13613865
  skip_handler_13613865:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1359718901.265") :anon :lex :outer("cuid_425_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1584
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3864
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3864:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_427_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1590
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1363_else3867 
.annotate 'line', 1591
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3869
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3869:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1363_end3868
  if1363_else3867:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1364_else3870 
.annotate 'line', 1592
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3872
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback3872:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1364_end3871
  if1364_else3870:
.annotate 'line', 1593
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3873
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5017
  fallback3873:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1364_end3871:
    set $P5020, $P5019
  if1363_end3868:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_430_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1605
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_429_1359718901.265' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3876
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3876:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1365_else3874 
    .const 'Sub' $P5006 = 'cuid_429_1359718901.265' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1365_end3875
  if1365_else3874:
.annotate 'line', 1610
.annotate 'line', 1611
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1365_end3875:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1359718901.265") :anon :lex :outer("cuid_430_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1606
    .const 'Sub' $P5009 = 'cuid_428_1359718901.265' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1608
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3877:
    unless $P5004, for_done3879
    shift $P5008, $P5004
  for_redo3878:
    .const 'Sub' $P5007 = 'cuid_428_1359718901.265' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3877
  for_done3879:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1359718901.265") :anon :lex :outer("cuid_429_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1608
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_432_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1796
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_431_1359718901.265' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1366_end3881 
.annotate 'line', 1798
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3882
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5006
  fallback3882:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3886:
    unless $P5003, for_done3888
    shift $P5008, $P5003
  for_redo3887:
    .const 'Sub' $P5007 = 'cuid_431_1359718901.265' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3886
  for_done3888:
    set $P5009, $P5001
  if1366_end3881:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1359718901.265") :anon :lex :outer("cuid_432_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1799
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3883
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3884
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3884:
    unless_null $P5002, vivi_13673885
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_13673885:
    set $P5001, $P5002
  fallback3883:
.annotate 'line', 1800
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_433_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1898
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3891
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3892
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3892:
    unless_null $P5002, vivi_13693893
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_13693893:
    set $P5001, $P5002
  fallback3891:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if1368_end3890 
.annotate 'line', 1899
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
  if1368_end3890:
.annotate 'line', 1902
    $P5010 = _lex_param_1."arity"()
    if $P5010 goto unless1370_end3895 
.annotate 'line', 1903
.annotate 'line', 1904
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback3896
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback3896:
.annotate 'line', 1905
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback3897
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5020
  fallback3897:
    $P5021 = $P5016."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1906
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback3898
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5026
  fallback3898:
    $P5027 = $P5022."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5028 = $P5011."new"($P5021, $P5027, "bind" :named("op"))
    _lex_param_1."unshift"($P5028)
.annotate 'line', 1909
    nqp_get_sc_object $P5032, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3899
    nqp_get_sc_object $P5033, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5029, $P5033
  fallback3899:
    $P5034 = $P5029."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    _lex_param_1."unshift"($P5034)
.annotate 'line', 1910
    _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1911
    _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1912
    $P5035 = _lex_param_1."arity"(1)
  unless1370_end3895:
.annotate 'line', 1914
    _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5036, "%*HANDLERS"
    unless_null $P5036, fallback3900
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%HANDLERS"]
    unless_null $P5037, fallback3901
    nqp_get_sc_object $P5041, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%HANDLERS"], $P5042
    set $P5037, $P5042
  fallback3901:
    unless_null $P5037, vivi_13713902
    die "Contextual %*HANDLERS not found"
    box $P5043, "Contextual %*HANDLERS not found"
    set $P5037, $P5043
  vivi_13713902:
    set $P5036, $P5037
  fallback3900:
    set $S5005, _lex_param_2
.annotate 'line', 1915
    nqp_get_sc_object $P5047, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Stmts"]
    unless_null $P5044, fallback3903
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5048
  fallback3903:
.annotate 'line', 1916
    nqp_get_sc_object $P5052, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Op"]
    unless_null $P5049, fallback3904
    nqp_get_sc_object $P5053, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5049, $P5053
  fallback3904:
.annotate 'line', 1918
    nqp_get_sc_object $P5057, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback3905
    nqp_get_sc_object $P5058, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5054, $P5058
  fallback3905:
    $P5059 = $P5054."new"("exception" :named("op"))
    $P5060 = $P5049."new"(_lex_param_1, $P5059, "call" :named("op"))
.annotate 'line', 1920
    nqp_get_sc_object $P5064, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback3906
    nqp_get_sc_object $P5065, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5061, $P5065
  fallback3906:
.annotate 'line', 1922
    nqp_get_sc_object $P5069, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3907
    nqp_get_sc_object $P5070, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5066, $P5070
  fallback3907:
    $P5071 = $P5066."new"("exception" :named("op"))
.annotate 'line', 1923
    nqp_get_sc_object $P5075, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback3908
    nqp_get_sc_object $P5076, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5072, $P5076
  fallback3908:
    $P5077 = $P5072."new"("handled" :named("value"))
.annotate 'line', 1924
    nqp_get_sc_object $P5081, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["IVal"]
    unless_null $P5078, fallback3909
    nqp_get_sc_object $P5082, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5078, $P5082
  fallback3909:
    $P5083 = $P5078."new"(1 :named("value"))
    $P5084 = $P5061."new"($P5071, $P5077, $P5083, "bindkey_i" :named("op"))
.annotate 'line', 1926
    $P5085 = "&default_for"("$")
    $P5086 = $P5044."new"($P5060, $P5084, $P5085)
    set $P5036[$S5005], $P5086
    .return ($P5086) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_434_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2529
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2530
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3910
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3911
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback3911:
    unless_null $P5003, vivi_13723912
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13723912:
    set $P5002, $P5003
  fallback3910:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2531
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3913
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5013
  fallback3913:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_436_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2535
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_435_1359718901.265' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3914
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5009
  fallback3914:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3930:
    unless $P5007, for_done3932
    shift $P5012, $P5007
  for_redo3931:
    .const 'Sub' $P5011 = 'cuid_435_1359718901.265' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3930
  for_done3932:
.annotate 'line', 2547
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3933
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3934
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5017
  fallback3934:
    unless_null $P5014, vivi_13793935
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13793935:
    set $P5013, $P5014
  fallback3933:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1359718901.265") :anon :lex :outer("cuid_436_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2538
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3921
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3921:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1375_end3920 
.annotate 'line', 2539
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1375_end3920:
    set $I5005, $I5003
    unless $I5003 goto if1374_end3918 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1374_end3918:
    box $P5021, $I5005
    set $P5020, $P5021
    unless $I5005 goto if1373_end3916 
.annotate 'line', 2540
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1376_else3922 
    null $P5011
    set $P5013, $P5011
    goto if1376_end3923
  if1376_else3922:
.annotate 'line', 2542
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1376_end3923:
    $P5008."push"($P5013)
.annotate 'line', 2543
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3926
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5016
  fallback3926:
    set $S5002, $P5015
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1377_else3924 
    set $I5012, 1
    goto if1377_end3925
  if1377_else3924:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3929
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5018
  fallback3929:
    set $S5003, $P5017
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1378_else3927 
    set $I5011, 2
    goto if1378_end3928
  if1378_else3927:
    set $I5011, 0
  if1378_end3928:
    set $I5012, $I5011
  if1377_end3925:
    $P5019 = $P5014."push"($I5012)
    set $P5020, $P5019
  if1373_end3916:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_437_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2550
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2551
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3936
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3936:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_442_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3023
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5072 = 'cuid_440_1359718901.265' 
    capture_lex $P5072 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3937
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1380_end3940 
.annotate 'line', 3025
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
  if1380_end3940:
.annotate 'line', 3029
    $P5005 = _lex_param_0."pop"()
    set $P101, $P5005
.annotate 'line', 3030
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["VarWithFallback"]
    unless_null $P5006, fallback3941
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback3941:
.annotate 'line', 3032
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback3942
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback3942:
    set $S5001, $P101
    $P5016 = $P5011."new"($S5001 :named("value"))
    $P5017 = $P5006."new"($P5016, "associative" :named("scope"))
    set $P102, $P5017
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1381_else3943 
.annotate 'line', 3037
.annotate 'line', 3038
    nqp_get_sc_object $P5021, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback3945
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5022
  fallback3945:
.annotate 'line', 3040
    nqp_get_sc_object $P5026, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback3946
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5027
  fallback3946:
    $P5028 = $P5023."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5029 = $P5018."new"($P5028, "who" :named("op"))
    $P102."unshift"($P5029)
.annotate 'line', 3042
    nqp_get_sc_object $P5033, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback3947
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5030, $P5034
  fallback3947:
.annotate 'line', 3044
    nqp_get_sc_object $P5038, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3948
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5039
  fallback3948:
.annotate 'line', 3046
    nqp_get_sc_object $P5043, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3949
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5044
  fallback3949:
.annotate 'line', 3048
    nqp_get_sc_object $P5048, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["WVal"]
    unless_null $P5045, fallback3950
    nqp_get_sc_object $P5049, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5045, $P5049
  fallback3950:
    find_dynamic_lex $P5050, "$*GLOBALish"
    unless_null $P5050, fallback3951
    nqp_get_sc_object $P5053, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$GLOBALish"]
    unless_null $P5051, fallback3952
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5051, $P5054
  fallback3952:
    unless_null $P5051, vivi_13823953
    die "Contextual $*GLOBALish not found"
    box $P5055, "Contextual $*GLOBALish not found"
    set $P5051, $P5055
  vivi_13823953:
    set $P5050, $P5051
  fallback3951:
    $P5056 = $P5045."new"($P5050 :named("value"))
    $P5057 = $P5040."new"($P5056, "who" :named("op"))
.annotate 'line', 3050
    nqp_get_sc_object $P5061, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3954
    nqp_get_sc_object $P5062, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5058, $P5062
  fallback3954:
    set $S5002, $P101
    $P5063 = $P5058."new"($S5002 :named("value"))
    $P5064 = $P5035."new"($P5057, $P5063, "atkey" :named("op"))
.annotate 'line', 3052
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5065 = "&default_for"($S5003)
    $P5066 = $P5030."new"($P5064, $P5065, "ifnull" :named("op"))
    $P5067 = $P102."fallback"($P5066)
    goto if1381_end3944
  if1381_else3943:
    .const 'Sub' $P5068 = 'cuid_440_1359718901.265' 
    capture_lex $P5068
    $P5069 = $P5068()
  if1381_end3944:
    find_lex $P5070, "RETURN"
    $P5071 = $P5070($P102)
    goto lexotic_3938
  lexotic_3937:
    .get_results ($P5071)
  lexotic_3938:
    .return ($P5071) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1359718901.265") :anon :lex :outer("cuid_442_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3058
    .const 'Sub' $P5066 = 'cuid_439_1359718901.265' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_441_1359718901.265' 
    capture_lex $P5066 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 3060
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3957
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3958
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback3958:
    unless_null $P5004, vivi_13843959
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13843959:
    set $P5003, $P5004
  fallback3957:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3960
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5011
  fallback3960:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1383_else3955 
    .const 'Sub' $P5013 = 'cuid_439_1359718901.265' 
    capture_lex $P5013
    $P5014 = $P5013()
    goto if1383_end3956
  if1383_else3955:
.annotate 'line', 3069
.annotate 'line', 3070
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3968
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5019
  fallback3968:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3969
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3970
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5024
  fallback3970:
    unless_null $P5021, vivi_13883971
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13883971:
    set $P5020, $P5021
  fallback3969:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
  if1383_end3956:
    find_lex $P5028, "@name"
    set $P5027, $P5028[0]
    unless_null $P5027, fallback3974
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5029
  fallback3974:
    set $S5001, $P5027
    iseq $I5001, $S5001, "GLOBAL"
    unless $I5001 goto if1389_end3973 
.annotate 'line', 3072
.annotate 'line', 3073
    find_lex $P5030, "@name"
    $P5031 = $P5030."shift"()
  if1389_end3973:
    find_lex $P5035, "@name"
    set $P5032, $P5035
    iter $P5034, $P5035
  for_next3977:
    unless $P5034, for_done3979
    shift $P5037, $P5034
  for_redo3978:
    .const 'Sub' $P5036 = 'cuid_441_1359718901.265' 
    capture_lex $P5036
    $P5032 = $P5036($P5037)
    goto for_next3977
  for_done3979:
.annotate 'line', 3080
    find_lex $P5038, "$lookup"
    nqp_get_sc_object $P5042, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3980
    nqp_get_sc_object $P5043, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5043
  fallback3980:
    $P5044 = $P5039."new"($P101, "who" :named("op"))
    $P5038."unshift"($P5044)
    find_lex $P5045, "$final_name"
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    box $P5046, $S5002
    set $P102, $P5046
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1391_end3984 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1391_end3984:
    unless $I5004 goto if1390_else3981 
.annotate 'line', 3082
.annotate 'line', 3083
    find_lex $P5047, "$lookup"
    nqp_get_sc_object $P5051, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3985
    nqp_get_sc_object $P5052, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5052
  fallback3985:
    find_lex $P5054, "$lookup"
    set $P5053, $P5054[0]
    unless_null $P5053, fallback3986
    nqp_get_sc_object $P5055, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5053, $P5055
  fallback3986:
    find_lex $P5057, "$lookup"
    set $P5056, $P5057[1]
    unless_null $P5056, fallback3987
    nqp_get_sc_object $P5058, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5056, $P5058
  fallback3987:
.annotate 'line', 3087
    $P5059 = "&default_for"($P102)
    $P5060 = $P5048."new"($P5053, $P5056, $P5059, "bindkey" :named("op"))
    $P5061 = $P5047."fallback"($P5060)
    set $P5065, $P5061
    goto if1390_end3982
  if1390_else3981:
.annotate 'line', 3090
.annotate 'line', 3091
    find_lex $P5062, "$lookup"
    $P5063 = "&default_for"($P102)
    $P5064 = $P5062."fallback"($P5063)
    set $P5065, $P5064
  if1390_end3982:
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1359718901.265") :anon :lex :outer("cuid_440_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3061
    .const 'Sub' $P5021 = 'cuid_438_1359718901.265' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13873966
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3062
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3063
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3961
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5008
  fallback3961:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3962
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3963
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5013
  fallback3963:
    unless_null $P5010, vivi_13853964
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13853964:
    set $P5009, $P5010
  fallback3962:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13863965
  catch_handler_13873966:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_438_1359718901.265' 
    capture_lex $P10001
    $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10002
    goto skip_handler_13863965
  skip_handler_13863965:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1359718901.265") :anon :lex :outer("cuid_439_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3064
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3065
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3967
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3967:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1359718901.265") :anon :lex :outer("cuid_440_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3075
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3076
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3975
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback3975:
    find_lex $P5006, "$path"
.annotate 'line', 3078
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3976
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback3976:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_245_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1596
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3988
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback3988:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3989
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback3989:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_246_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1598
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1599
    unless_null _lex_param_1, fallback3992
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback3992:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3993
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback3993:
    unless $P5001 goto if1392_else3990 
    unless_null _lex_param_1, fallback3994
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback3994:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3995
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback3995:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1600
    unless_null _lex_param_1, fallback3996
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback3996:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3997
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback3997:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3998
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback3998:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1601
    unless_null _lex_param_1, fallback3999
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5016
  fallback3999:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback4000
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5017
  fallback4000:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback4001
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5018
  fallback4001:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1392_end3991
  if1392_else3990:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1392_end3991:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_247_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1615
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$compunit", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
.annotate 'line', 1616
    unless_null _lex_param_1, fallback4002
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4002:
    set $P5004, _lex_param_1["statementlist"]
    unless_null $P5004, fallback4003
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4003:
    $P5007 = $P5004."ast"()
    set $P101, $P5007
.annotate 'line', 1617
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback4004
    nqp_get_sc_object $P5011, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback4005
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback4005:
    unless_null $P5009, vivi_13934006
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_13934006:
    set $P5008, $P5009
  fallback4004:
    $P5014 = $P5008."pop_lexpad"()
    set $P102, $P5014
    find_dynamic_lex $P5015, "$*HAS_YOU_ARE_HERE"
    unless_null $P5015, fallback4009
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$HAS_YOU_ARE_HERE"]
    unless_null $P5016, fallback4010
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5019
  fallback4010:
    unless_null $P5016, vivi_13954011
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5020, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5016, $P5020
  vivi_13954011:
    set $P5015, $P5016
  fallback4009:
    if $P5015 goto unless1394_end4008 
.annotate 'line', 1622
.annotate 'line', 1623
    nqp_decontainerize $P5021, _lex_param_0
    $P5022 = $P5021."CTXSAVE"()
    $P5023 = $P102."push"($P5022)
  unless1394_end4008:
.annotate 'line', 1630
    nqp_get_sc_object $P5027, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback4012
    nqp_get_sc_object $P5028, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5028
  fallback4012:
    $P5029 = $P5024."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P102."unshift"($P5029)
    find_dynamic_lex $P5030, "$*MAIN_SUB"
    unless_null $P5030, fallback4015
    nqp_get_sc_object $P5033, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$MAIN_SUB"]
    unless_null $P5031, fallback4016
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5031, $P5034
  fallback4016:
    unless_null $P5031, vivi_13974017
    die "Contextual $*MAIN_SUB not found"
    box $P5035, "Contextual $*MAIN_SUB not found"
    set $P5031, $P5035
  vivi_13974017:
    set $P5030, $P5031
  fallback4015:
    unless $P5030 goto if1396_end4014 
.annotate 'line', 1631
.annotate 'line', 1632
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4018
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5040
  fallback4018:
.annotate 'line', 1634
    nqp_get_sc_object $P5044, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback4019
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5041, $P5045
  fallback4019:
    $P5046 = $P5041."new"("lexical" :named("scope"), "@ARGS" :named("name"))
.annotate 'line', 1635
    nqp_get_sc_object $P5050, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Op"]
    unless_null $P5047, fallback4020
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5047, $P5051
  fallback4020:
.annotate 'line', 1636
    nqp_get_sc_object $P5055, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["BVal"]
    unless_null $P5052, fallback4021
    nqp_get_sc_object $P5056, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5052, $P5056
  fallback4021:
    find_dynamic_lex $P5057, "$*MAIN_SUB"
    unless_null $P5057, fallback4022
    nqp_get_sc_object $P5060, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$MAIN_SUB"]
    unless_null $P5058, fallback4023
    nqp_get_sc_object $P5061, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5058, $P5061
  fallback4023:
    unless_null $P5058, vivi_13984024
    die "Contextual $*MAIN_SUB not found"
    box $P5062, "Contextual $*MAIN_SUB not found"
    set $P5058, $P5062
  vivi_13984024:
    set $P5057, $P5058
  fallback4022:
    $P5063 = $P5052."new"($P5057 :named("value"))
.annotate 'line', 1637
    nqp_get_sc_object $P5067, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Var"]
    unless_null $P5064, fallback4025
    nqp_get_sc_object $P5068, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5064, $P5068
  fallback4025:
    $P5069 = $P5064."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5070 = $P5047."new"($P5063, $P5069, "call" :named("op"))
    $P5071 = $P5036."new"($P5046, $P5070, "if" :named("op"))
    $P5072 = $P101."push"($P5071)
  if1396_end4014:
.annotate 'line', 1643
    $P102."push"($P101)
.annotate 'line', 1646
    find_dynamic_lex $P5073, "$*W"
    unless_null $P5073, fallback4026
    nqp_get_sc_object $P5076, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5075, $P5076
    set $P5074, $P5075["$W"]
    unless_null $P5074, fallback4027
    nqp_get_sc_object $P5077, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5074, $P5077
  fallback4027:
    unless_null $P5074, vivi_13994028
    die "Contextual $*W not found"
    box $P5078, "Contextual $*W not found"
    set $P5074, $P5078
  vivi_13994028:
    set $P5073, $P5074
  fallback4026:
    $P5079 = $P5073."libs"()
    $P102."push"($P5079)
.annotate 'line', 1649
    nqp_get_sc_object $P5083, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["CompUnit"]
    unless_null $P5080, fallback4029
    nqp_get_sc_object $P5084, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5080, $P5084
  fallback4029:
.annotate 'line', 1653
    find_dynamic_lex $P5085, "$*W"
    unless_null $P5085, fallback4030
    nqp_get_sc_object $P5088, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$W"]
    unless_null $P5086, fallback4031
    nqp_get_sc_object $P5089, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5086, $P5089
  fallback4031:
    unless_null $P5086, vivi_14004032
    die "Contextual $*W not found"
    box $P5090, "Contextual $*W not found"
    set $P5086, $P5090
  vivi_14004032:
    set $P5085, $P5086
  fallback4030:
    $P5091 = $P5085."sc"()
.annotate 'line', 1654
    find_dynamic_lex $P5092, "$*W"
    unless_null $P5092, fallback4033
    nqp_get_sc_object $P5095, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$W"]
    unless_null $P5093, fallback4034
    nqp_get_sc_object $P5096, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5093, $P5096
  fallback4034:
    unless_null $P5093, vivi_14014035
    die "Contextual $*W not found"
    box $P5097, "Contextual $*W not found"
    set $P5093, $P5097
  vivi_14014035:
    set $P5092, $P5093
  fallback4033:
    $P5098 = $P5092."code_ref_blocks"()
.annotate 'line', 1655
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback4036
    nqp_get_sc_object $P5102, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback4037
    nqp_get_sc_object $P5103, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5100, $P5103
  fallback4037:
    unless_null $P5100, vivi_14024038
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_14024038:
    set $P5099, $P5100
  fallback4036:
    $P5105 = $P5099."is_precompilation_mode"()
.annotate 'line', 1656
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4039
    nqp_get_sc_object $P5109, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4040
    nqp_get_sc_object $P5110, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5107, $P5110
  fallback4040:
    unless_null $P5107, vivi_14034041
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_14034041:
    set $P5106, $P5107
  fallback4039:
    $P5112 = $P5106."load_dependency_tasks"()
.annotate 'line', 1657
    find_dynamic_lex $P5113, "$*W"
    unless_null $P5113, fallback4042
    nqp_get_sc_object $P5116, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$W"]
    unless_null $P5114, fallback4043
    nqp_get_sc_object $P5117, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5114, $P5117
  fallback4043:
    unless_null $P5114, vivi_14044044
    die "Contextual $*W not found"
    box $P5118, "Contextual $*W not found"
    set $P5114, $P5118
  vivi_14044044:
    set $P5113, $P5114
  fallback4042:
    $P5119 = $P5113."fixup_tasks"()
.annotate 'line', 1662
    nqp_get_sc_object $P5123, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5122, $P5123, "QAST"
    get_who $P5121, $P5122
    set $P5120, $P5121["Op"]
    unless_null $P5120, fallback4045
    nqp_get_sc_object $P5124, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5120, $P5124
  fallback4045:
.annotate 'line', 1664
    nqp_get_sc_object $P5128, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5127, $P5128, "QAST"
    get_who $P5126, $P5127
    set $P5125, $P5126["BVal"]
    unless_null $P5125, fallback4046
    nqp_get_sc_object $P5129, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5125, $P5129
  fallback4046:
    $P5130 = $P5125."new"($P102 :named("value"))
    $P5131 = $P5120."new"($P5130, "call" :named("op"))
.annotate 'line', 1669
    nqp_get_sc_object $P5135, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4047
    nqp_get_sc_object $P5136, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5132, $P5136
  fallback4047:
.annotate 'line', 1670
    nqp_get_sc_object $P5140, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5139, $P5140, "QAST"
    get_who $P5138, $P5139
    set $P5137, $P5138["Op"]
    unless_null $P5137, fallback4048
    nqp_get_sc_object $P5141, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5137, $P5141
  fallback4048:
.annotate 'line', 1672
    nqp_get_sc_object $P5145, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5144, $P5145, "QAST"
    get_who $P5143, $P5144
    set $P5142, $P5143["BVal"]
    unless_null $P5142, fallback4049
    nqp_get_sc_object $P5146, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5142, $P5146
  fallback4049:
    $P5147 = $P5142."new"($P102 :named("value"))
.annotate 'line', 1673
    nqp_get_sc_object $P5151, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5150, $P5151, "QAST"
    get_who $P5149, $P5150
    set $P5148, $P5149["Var"]
    unless_null $P5148, fallback4050
    nqp_get_sc_object $P5152, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5148, $P5152
  fallback4050:
    $P5153 = $P5148."new"("ARGS" :named("name"), "local" :named("scope"), "param" :named("decl"), 1 :named("slurpy"), 1 :named("flat"))
    $P5154 = $P5137."new"($P5147, $P5153, "call" :named("op"))
    $P5155 = $P5132."new"($P5154)
    $P5156 = $P5080."new"($P102, "nqp" :named("hll"), $P5091 :named("sc"), $P5098 :named("code_ref_blocks"), $P5105 :named("compilation_mode"), $P5112 :named("pre_deserialize"), $P5119 :named("post_deserialize"), $P5131 :named("load"), $P5155 :named("main"))
    set $P103, $P5156
.annotate 'line', 1682
    $P5157 = _lex_param_1."!make"($P103)
    .return ($P5157) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_248_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1685
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_443_1359718901.265' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1686
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback4051
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback4051:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback4054
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4054:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback4055
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4055:
    unless $P5008 goto if1405_else4052 
.annotate 'line', 1687
    unless_null _lex_param_1, fallback4056
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5015
  fallback4056:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback4057
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5016
  fallback4057:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next4070:
    unless $P5013, for_done4072
    shift $P5018, $P5013
  for_redo4071:
    .const 'Sub' $P5017 = 'cuid_443_1359718901.265' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next4070
  for_done4072:
    goto if1405_end4053
  if1405_else4052:
.annotate 'line', 1696
.annotate 'line', 1697
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
  if1405_end4053:
.annotate 'line', 1699
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1359718901.265") :anon :lex :outer("cuid_248_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1688
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1689
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback4060
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5004
  fallback4060:
    defined $I5001, $P5003
    unless $I5001 goto if1406_end4059 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback4061
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5006
  fallback4061:
    set $P101, $P5005
  if1406_end4059:
    set $P5007, $P101["bareblock"]
    unless_null $P5007, fallback4064
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5008
  fallback4064:
    unless $P5007 goto if1407_end4063 
.annotate 'line', 1691
    set $P5009, $P101[0]
    unless_null $P5009, fallback4065
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5010
  fallback4065:
    $P5011 = "&block_immediate"($P5009)
    set $P101, $P5011
  if1407_end4063:
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Node"]
    unless_null $P5012, fallback4068
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback4068:
    type_check $I5002, $P101, $P5012
    unless $I5002 goto if1408_end4067 
.annotate 'line', 1692
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmts"]
    unless_null $P5017, fallback4069
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5021
  fallback4069:
    $P5022 = $P5017."new"($P101)
    set $P101, $P5022
  if1408_end4067:
.annotate 'line', 1693
    find_lex $P5023, "$past"
    $P5024 = $P5023."push"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_249_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1702
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5018 = 'cuid_444_1359718901.265' 
    capture_lex $P5018 
    if haz_param_4, default4109
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_2, $P5017
  default4109:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback4075
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback4075:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback4076
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback4076:
    unless $P5002 goto if1409_else4073 
    .const 'Sub' $P5005 = 'cuid_444_1359718901.265' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto if1409_end4074
  if1409_else4073:
    unless_null _lex_param_1, fallback4105
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5008
  fallback4105:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback4106
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5009
  fallback4106:
    unless $P5007 goto if1413_else4103 
.annotate 'line', 1725
    unless_null _lex_param_1, fallback4107
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5011
  fallback4107:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback4108
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5012
  fallback4108:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1413_end4104
  if1413_else4103:
.annotate 'line', 1726
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1413_end4104:
  if1409_end4074:
.annotate 'line', 1727
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1359718901.265") :anon :lex :outer("cuid_249_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1704
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4077
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5006
  fallback4077:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback4078
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback4078:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback4079
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5008
  fallback4079:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4080
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5012
  fallback4080:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback4081
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5013
  fallback4081:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4082
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5014
  fallback4082:
    set $P102, $P5009
.annotate 'line', 1707
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4083
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5017
  fallback4083:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback4084
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5018
  fallback4084:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    unless $P101 goto if1410_end4086 
.annotate 'line', 1708
.annotate 'line', 1709
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4087
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5024
  fallback4087:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback4088
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5026
  fallback4088:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback4089
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5029, $P5030
  fallback4089:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
  if1410_end4086:
    set $P5077, $P102
    unless $P102 goto if1411_end4091 
.annotate 'line', 1711
    set $P5033, $P102["sym"]
    unless_null $P5033, fallback4094
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5033, $P5034
  fallback4094:
    set $S5002, $P5033
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1412_else4092 
.annotate 'line', 1712
.annotate 'line', 1713
    nqp_get_sc_object $P5038, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Block"]
    unless_null $P5035, fallback4095
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5039
  fallback4095:
.annotate 'line', 1714
    nqp_get_sc_object $P5043, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Var"]
    unless_null $P5040, fallback4096
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5044
  fallback4096:
    $P5045 = $P5040."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5046, "$past"
    $P5047 = $P5035."new"($P5045, $P5046, "immediate" :named("blocktype"))
    store_lex "$past", $P5047
.annotate 'line', 1716
    find_lex $P5048, "$past"
    $P5048."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1717
    find_lex $P5049, "$past"
    $P5049."arity"(1)
.annotate 'line', 1718
    nqp_get_sc_object $P5053, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4097
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5050, $P5054
  fallback4097:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback4098
    nqp_get_sc_object $P5056, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5056
  fallback4098:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback4099
    nqp_get_sc_object $P5060, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5059, $P5060
  fallback4099:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1412_end4093
  if1412_else4092:
.annotate 'line', 1720
.annotate 'line', 1721
    nqp_get_sc_object $P5066, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback4100
    nqp_get_sc_object $P5067, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5063, $P5067
  fallback4100:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback4101
    nqp_get_sc_object $P5069, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5068, $P5069
  fallback4101:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback4102
    nqp_get_sc_object $P5073, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5072, $P5073
  fallback4102:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1412_end4093:
    set $P5077, $P5076
  if1411_end4091:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_250_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1730
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1731
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4110
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback4110:
    unless_null _lex_param_1, fallback4111
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback4111:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback4112
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback4112:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback4113
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5011
  fallback4113:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback4114
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5012
  fallback4114:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_251_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1734
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1735
    unless_null _lex_param_1, fallback4115
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4115:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4116
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4116:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_252_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1738
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1739
    unless_null _lex_param_1, fallback4117
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4117:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4118
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4118:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_253_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1742
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5029 = 'cuid_446_1359718901.265' 
    capture_lex $P5029 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1743
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4119
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4120
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback4120:
    unless_null $P5003, vivi_14144121
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14144121:
    set $P5002, $P5003
  fallback4119:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4124
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5010
  fallback4124:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback4125
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5011
  fallback4125:
    unless $P5009 goto if1415_else4122 
    .const 'Sub' $P5012 = 'cuid_446_1359718901.265' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5028, $P5013
    goto if1415_end4123
  if1415_else4122:
.annotate 'line', 1758
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback4150
    nqp_get_sc_object $P5017, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback4151
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5018
  fallback4151:
    unless_null $P5015, vivi_14234152
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_14234152:
    set $P5014, $P5015
  fallback4150:
    unless $P5014 goto if1422_end4149 
.annotate 'line', 1759
.annotate 'line', 1760
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if1422_end4149:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1763
    unless_null _lex_param_1, fallback4153
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5024
  fallback4153:
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback4154
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5025
  fallback4154:
    $P5026 = $P5023."ast"()
    $P5027 = _lex_param_1."!make"($P5026)
    set $P5028, $P5027
  if1415_end4123:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1359718901.265") :anon :lex :outer("cuid_253_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1744
    .const 'Sub' $P5057 = 'cuid_445_1359718901.265' 
    capture_lex $P5057 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1745
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4126
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5004
  fallback4126:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback4127
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback4127:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback4130
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback4131
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback4131:
    unless_null $P5008, vivi_14174132
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_14174132:
    set $P5007, $P5008
  fallback4130:
    unless $P5007 goto if1416_end4129 
.annotate 'line', 1746
.annotate 'line', 1747
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback4133
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5019
  fallback4133:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback4134
    nqp_get_sc_object $P5027, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback4135
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback4135:
    unless_null $P5025, vivi_14184136
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_14184136:
    set $P5024, $P5025
  fallback4134:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next4137:
    unless $P5023, for_done4139
    shift $P5033, $P5023
  for_redo4138:
    .const 'Sub' $P5032 = 'cuid_445_1359718901.265' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next4137
  for_done4139:
  if1416_end4129:
.annotate 'line', 1753
    find_lex $P5034, "$BLOCK"
    $P5034."push"($P101)
.annotate 'line', 1754
    find_lex $P5035, "$BLOCK"
    find_lex $P5036, "$/"
    $P5035."node"($P5036)
    find_dynamic_lex $P5037, "%*HANDLERS"
    unless_null $P5037, fallback4142
    nqp_get_sc_object $P5040, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%HANDLERS"]
    unless_null $P5038, fallback4143
    nqp_get_sc_object $P5042, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%HANDLERS"], $P5043
    set $P5038, $P5043
  fallback4143:
    unless_null $P5038, vivi_14204144
    die "Contextual %*HANDLERS not found"
    box $P5044, "Contextual %*HANDLERS not found"
    set $P5038, $P5044
  vivi_14204144:
    set $P5037, $P5038
  fallback4142:
    unless $P5037 goto if1419_end4141 
    find_lex $P5045, "$BLOCK"
    find_dynamic_lex $P5046, "%*HANDLERS"
    unless_null $P5046, fallback4145
    nqp_get_sc_object $P5049, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%HANDLERS"]
    unless_null $P5047, fallback4146
    nqp_get_sc_object $P5051, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%HANDLERS"], $P5052
    set $P5047, $P5052
  fallback4146:
    unless_null $P5047, vivi_14214147
    die "Contextual %*HANDLERS not found"
    box $P5053, "Contextual %*HANDLERS not found"
    set $P5047, $P5053
  vivi_14214147:
    set $P5046, $P5047
  fallback4145:
    set $P5045["handlers"], $P5046
  if1419_end4141:
.annotate 'line', 1756
    find_dynamic_lex $P5054, "$/"
    find_lex $P5055, "$BLOCK"
    $P5056 = $P5054."!make"($P5055)
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1359718901.265") :anon :lex :outer("cuid_446_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1748
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1749
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5001."push"($P5002)
.annotate 'line', 1750
    find_lex $P5003, "$past"
    $P5004 = _lex_param_0."value"()
    $P5005 = $P5003."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_254_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1768
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4155
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4156
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback4156:
    unless_null $P5002, vivi_14244157
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14244157:
    set $P5001, $P5002
  fallback4155:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_255_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1771
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_447_1359718901.265' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback4160
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback4161
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback4161:
    unless_null $P5004, vivi_14264162
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_14264162:
    set $P5003, $P5004
  fallback4160:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback4163
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5011
  fallback4163:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4164
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5012
  fallback4164:
    defined $I5001, $P5001
    if $I5001 goto unless1425_end4159 
    .const 'Sub' $P5013 = 'cuid_447_1359718901.265' 
    capture_lex $P5013
    $P5014 = $P5013()
  unless1425_end4159:
.annotate 'line', 1793
    nqp_decontainerize $P5015, _lex_param_0
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4220
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4221
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5020
  fallback4221:
    unless_null $P5017, vivi_14434222
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14434222:
    set $P5016, $P5017
  fallback4220:
    $P5022 = $P5016."cur_lexpad"()
    $P5023 = $P5015."SET_BLOCK_OUTER_CTX"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1359718901.265") :anon :lex :outer("cuid_255_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1772
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1775
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4165
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4166
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback4166:
    unless_null $P5003, vivi_14274167
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14274167:
    set $P5002, $P5003
  fallback4165:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4169
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4170
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4170:
    unless_null $P5012, vivi_14284171
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_14284171:
    set $P5011, $P5012
  fallback4169:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4172
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5019
  fallback4172:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4173
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5020
  fallback4173:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4168
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4168:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4176
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4177
    nqp_get_sc_object $P5030, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4177:
    unless_null $P5026, vivi_14304178
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_14304178:
    set $P5025, $P5026
  fallback4176:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4179
    nqp_get_sc_object $P5033, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5033
  fallback4179:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4180
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5034
  fallback4180:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5112, $I5002
    set $P5111, $P5112
    if $I5002 goto unless1429_end4175 
.annotate 'line', 1780
.annotate 'line', 1781
    "&import_HOW_exports"($P101)
    find_dynamic_lex $P5037, "%*COMPILING"
    unless_null $P5037, fallback4183
    nqp_get_sc_object $P5040, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%COMPILING"]
    unless_null $P5038, fallback4184
    nqp_get_sc_object $P5042, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%COMPILING"], $P5043
    set $P5038, $P5043
  fallback4184:
    unless_null $P5038, vivi_14324185
    die "Contextual %*COMPILING not found"
    box $P5044, "Contextual %*COMPILING not found"
    set $P5038, $P5044
  vivi_14324185:
    set $P5037, $P5038
  fallback4183:
    set $P5036, $P5037["%?OPTIONS"]
    unless_null $P5036, fallback4186
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5045
  fallback4186:
    set $P5035, $P5036["old-regex-lib"]
    unless_null $P5035, fallback4187
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5046
  fallback4187:
    unless $P5035 goto if1431_end4182 
.annotate 'line', 1782
.annotate 'line', 1783
    find_dynamic_lex $P5047, "$*W"
    unless_null $P5047, fallback4188
    nqp_get_sc_object $P5050, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$W"]
    unless_null $P5048, fallback4189
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5051
  fallback4189:
    unless_null $P5048, vivi_14334190
    die "Contextual $*W not found"
    box $P5052, "Contextual $*W not found"
    set $P5048, $P5052
  vivi_14334190:
    set $P5047, $P5048
  fallback4188:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback4191
    nqp_get_sc_object $P5056, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback4192
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5054, $P5057
  fallback4192:
    unless_null $P5054, vivi_14344193
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_14344193:
    set $P5053, $P5054
  fallback4191:
    $P5059 = $P5047."load_module"("NQPRegex", $P5053)
  if1431_end4182:
    find_dynamic_lex $P5062, "%*COMPILING"
    unless_null $P5062, fallback4196
    nqp_get_sc_object $P5065, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["%COMPILING"]
    unless_null $P5063, fallback4197
    nqp_get_sc_object $P5067, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5066, $P5067
    new $P5068, 'Hash'
    set $P5066["%COMPILING"], $P5068
    set $P5063, $P5068
  fallback4197:
    unless_null $P5063, vivi_14364198
    die "Contextual %*COMPILING not found"
    box $P5069, "Contextual %*COMPILING not found"
    set $P5063, $P5069
  vivi_14364198:
    set $P5062, $P5063
  fallback4196:
    set $P5061, $P5062["%?OPTIONS"]
    unless_null $P5061, fallback4199
    nqp_get_sc_object $P5070, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5061, $P5070
  fallback4199:
    set $P5060, $P5061["no-regex-lib"]
    unless_null $P5060, fallback4200
    nqp_get_sc_object $P5071, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5060, $P5071
  fallback4200:
    set $P5110, $P5060
    if $P5060 goto unless1435_end4195 
.annotate 'line', 1785
.annotate 'line', 1786
    find_dynamic_lex $P5072, "$*W"
    unless_null $P5072, fallback4201
    nqp_get_sc_object $P5075, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$W"]
    unless_null $P5073, fallback4202
    nqp_get_sc_object $P5076, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5073, $P5076
  fallback4202:
    unless_null $P5073, vivi_14374203
    die "Contextual $*W not found"
    box $P5077, "Contextual $*W not found"
    set $P5073, $P5077
  vivi_14374203:
    set $P5072, $P5073
  fallback4201:
    find_dynamic_lex $P5078, "$*GLOBALish"
    unless_null $P5078, fallback4204
    nqp_get_sc_object $P5081, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$GLOBALish"]
    unless_null $P5079, fallback4205
    nqp_get_sc_object $P5082, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5079, $P5082
  fallback4205:
    unless_null $P5079, vivi_14384206
    die "Contextual $*GLOBALish not found"
    box $P5083, "Contextual $*GLOBALish not found"
    set $P5079, $P5083
  vivi_14384206:
    set $P5078, $P5079
  fallback4204:
    $P5072."load_module"("QRegex", $P5078)
    find_dynamic_lex $P5086, "%*COMPILING"
    unless_null $P5086, fallback4209
    nqp_get_sc_object $P5089, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["%COMPILING"]
    unless_null $P5087, fallback4210
    nqp_get_sc_object $P5091, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5090, $P5091
    new $P5092, 'Hash'
    set $P5090["%COMPILING"], $P5092
    set $P5087, $P5092
  fallback4210:
    unless_null $P5087, vivi_14404211
    die "Contextual %*COMPILING not found"
    box $P5093, "Contextual %*COMPILING not found"
    set $P5087, $P5093
  vivi_14404211:
    set $P5086, $P5087
  fallback4209:
    set $P5085, $P5086["%?OPTIONS"]
    unless_null $P5085, fallback4212
    nqp_get_sc_object $P5094, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5085, $P5094
  fallback4212:
    set $P5084, $P5085["old-regex-lib"]
    unless_null $P5084, fallback4213
    nqp_get_sc_object $P5095, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5084, $P5095
  fallback4213:
    set $P5109, $P5084
    if $P5084 goto unless1439_end4208 
.annotate 'line', 1787
.annotate 'line', 1788
    find_dynamic_lex $P5096, "$*W"
    unless_null $P5096, fallback4214
    nqp_get_sc_object $P5099, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$W"]
    unless_null $P5097, fallback4215
    nqp_get_sc_object $P5100, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5097, $P5100
  fallback4215:
    unless_null $P5097, vivi_14414216
    die "Contextual $*W not found"
    box $P5101, "Contextual $*W not found"
    set $P5097, $P5101
  vivi_14414216:
    set $P5096, $P5097
  fallback4214:
    find_dynamic_lex $P5102, "$*GLOBALish"
    unless_null $P5102, fallback4217
    nqp_get_sc_object $P5105, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5104, $P5105
    set $P5103, $P5104["$GLOBALish"]
    unless_null $P5103, fallback4218
    nqp_get_sc_object $P5106, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5103, $P5106
  fallback4218:
    unless_null $P5103, vivi_14424219
    die "Contextual $*GLOBALish not found"
    box $P5107, "Contextual $*GLOBALish not found"
    set $P5103, $P5107
  vivi_14424219:
    set $P5102, $P5103
  fallback4217:
    $P5108 = $P5096."load_module"("NQPP6QRegex", $P5102)
    set $P5109, $P5108
  unless1439_end4208:
    set $P5110, $P5109
  unless1435_end4195:
    set $P5111, $P5110
  unless1429_end4175:
    .return ($P5111) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_256_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1805
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1806
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_257_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1811
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1812
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4223
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4224
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback4224:
    unless_null $P5003, vivi_14444225
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14444225:
    set $P5002, $P5003
  fallback4223:
    unless_null _lex_param_1, fallback4226
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4226:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4227
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4227:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4228
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4229
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5015
  fallback4229:
    unless_null $P5012, vivi_14454230
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_14454230:
    set $P5011, $P5012
  fallback4228:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    unless $I5001 goto if1446_end4232 
.annotate 'line', 1813
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1448_end4236 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4237
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5020
  fallback4237:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1448_end4236:
    unless $I5004 goto if1447_end4234 
.annotate 'line', 1814
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4238
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4239
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5025
  fallback4239:
    unless_null $P5022, vivi_14494240
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14494240:
    set $P5021, $P5022
  fallback4238:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4241
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5030, $P5031
  fallback4241:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4242
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5032
  fallback4242:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
  if1447_end4234:
.annotate 'line', 1817
    $P5034 = "&import_HOW_exports"($P101)
  if1446_end4232:
.annotate 'line', 1819
    nqp_get_sc_object $P5038, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Stmts"]
    unless_null $P5035, fallback4243
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5039
  fallback4243:
    $P5040 = $P5035."new"()
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_258_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1822
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_448_1359718901.265' 
    capture_lex $P5030 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback4244
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5004
  fallback4244:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4245
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback4245:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1824
    unless_null _lex_param_1, fallback4246
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4246:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4247
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4247:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4248
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback4248:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4251
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5015
  fallback4251:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4252
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5016
  fallback4252:
    unless $P5014 goto if1450_end4250 
.annotate 'line', 1825
.annotate 'line', 1826
    unless_null _lex_param_1, fallback4253
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5019
  fallback4253:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4254
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5020
  fallback4254:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4255
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5021
  fallback4255:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
  if1450_end4250:
  while1451_test4256:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while1451_done4260 
  while1451_redo4258:
    .const 'Sub' $P5025 = 'cuid_448_1359718901.265' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1451_test4256 
  while1451_done4260:
.annotate 'line', 1835
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1359718901.265") :anon :lex :outer("cuid_258_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1829
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1832
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4261
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5006
  fallback4261:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4262
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback4262:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4263
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5009
  fallback4263:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1833
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_259_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1838
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1839
    unless_null _lex_param_1, fallback4264
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback4264:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4265
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback4265:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1840
    $P101."op"("unless")
.annotate 'line', 1841
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_260_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1844
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1845
    unless_null _lex_param_1, fallback4266
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback4266:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4267
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback4267:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1846
    unless_null _lex_param_1, fallback4268
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5008
  fallback4268:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4269
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5009
  fallback4269:
    set $S5001, $P5007
    $P101."op"($S5001)
    find_dynamic_lex $P5010, "$*CONTROL_USED"
    unless_null $P5010, fallback4272
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$CONTROL_USED"]
    unless_null $P5011, fallback4273
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5014
  fallback4273:
    unless_null $P5011, vivi_14534274
    die "Contextual $*CONTROL_USED not found"
    box $P5015, "Contextual $*CONTROL_USED not found"
    set $P5011, $P5015
  vivi_14534274:
    set $P5010, $P5011
  fallback4272:
    if $P5010 goto unless1452_end4271 
.annotate 'line', 1847
.annotate 'line', 1848
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["IVal"]
    unless_null $P5016, fallback4275
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5020
  fallback4275:
    $P5021 = $P5016."new"(1 :named("value"), "nohandler" :named("named"))
    $P5022 = $P101."push"($P5021)
  unless1452_end4271:
.annotate 'line', 1850
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_261_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1853
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback4276
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5004
  fallback4276:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4277
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback4277:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4280
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5008
  fallback4280:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4281
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5009
  fallback4281:
    unless $P5007 goto if1454_else4278 
.annotate 'line', 1856
.annotate 'line', 1857
    unless_null _lex_param_1, fallback4282
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5011
  fallback4282:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4283
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5012
  fallback4283:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1858
    $P5015 = $P102."op"($P101)
    goto if1454_end4279
  if1454_else4278:
.annotate 'line', 1860
.annotate 'line', 1861
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4284
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5020
  fallback4284:
    unless_null _lex_param_1, fallback4285
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5022
  fallback4285:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4286
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5023
  fallback4286:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4287
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5026
  fallback4287:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4288
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5027
  fallback4288:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
  if1454_end4279:
    find_dynamic_lex $P5031, "$*CONTROL_USED"
    unless_null $P5031, fallback4291
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$CONTROL_USED"]
    unless_null $P5032, fallback4292
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5035
  fallback4292:
    unless_null $P5032, vivi_14564293
    die "Contextual $*CONTROL_USED not found"
    box $P5036, "Contextual $*CONTROL_USED not found"
    set $P5032, $P5036
  vivi_14564293:
    set $P5031, $P5032
  fallback4291:
    if $P5031 goto unless1455_end4290 
.annotate 'line', 1864
.annotate 'line', 1865
    nqp_get_sc_object $P5040, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["IVal"]
    unless_null $P5037, fallback4294
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5037, $P5041
  fallback4294:
    $P5042 = $P5037."new"(1 :named("value"), "nohandler" :named("named"))
    $P5043 = $P102."push"($P5042)
  unless1455_end4290:
.annotate 'line', 1867
    $P5044 = _lex_param_1."!make"($P102)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_262_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1870
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 1871
    unless_null _lex_param_1, fallback4295
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5004
  fallback4295:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4296
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback4296:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1872
    $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4297
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5008
  fallback4297:
    set $P102, $P5007
.annotate 'line', 1874
    $P5009 = $P102."arity"()
    if $P5009 goto unless1457_end4299 
.annotate 'line', 1875
    set $P5010, $P102[0]
    unless_null $P5010, fallback4300
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5011
  fallback4300:
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4301
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback4301:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5010."push"($P5017)
.annotate 'line', 1876
    $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1877
    $P5018 = $P102."arity"(1)
  unless1457_end4299:
.annotate 'line', 1879
    $P102."blocktype"("immediate")
    find_dynamic_lex $P5019, "$*CONTROL_USED"
    unless_null $P5019, fallback4304
    nqp_get_sc_object $P5022, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$CONTROL_USED"]
    unless_null $P5020, fallback4305
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5023
  fallback4305:
    unless_null $P5020, vivi_14594306
    die "Contextual $*CONTROL_USED not found"
    box $P5024, "Contextual $*CONTROL_USED not found"
    set $P5020, $P5024
  vivi_14594306:
    set $P5019, $P5020
  fallback4304:
    if $P5019 goto unless1458_end4303 
.annotate 'line', 1880
.annotate 'line', 1881
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["IVal"]
    unless_null $P5025, fallback4307
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5029
  fallback4307:
    $P5030 = $P5025."new"(1 :named("value"), "nohandler" :named("named"))
    $P5031 = $P101."push"($P5030)
  unless1458_end4303:
.annotate 'line', 1883
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_263_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1886
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1887
    unless_null _lex_param_1, fallback4308
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback4308:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4309
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback4309:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1888
    "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1889
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_264_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1892
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1893
    unless_null _lex_param_1, fallback4310
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback4310:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4311
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback4311:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1894
    "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1895
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_265_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1930
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4312
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4313
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback4313:
    unless_null $P5002, vivi_14604314
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14604314:
    set $P5001, $P5002
  fallback4312:
    unless_null _lex_param_1, fallback4315
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5008
  fallback4315:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4316
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5009
  fallback4316:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_266_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1934
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4317
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4318
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback4318:
    unless_null $P5002, vivi_14614319
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14614319:
    set $P5001, $P5002
  fallback4317:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4320
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4320:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4321
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4321:
    $P5011 = $P5008."ast"()
    $P5007."push"($P5011)
.annotate 'line', 1935
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4322
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback4322:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_267_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1938
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4323
    .lex "RETURN", $P102
.annotate 'line', 1939
    unless_null _lex_param_1, fallback4325
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback4325:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4326
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback4326:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4329
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback4329:
    type_check $I5001, $P101, $P5006
    unless $I5001 goto if1462_end4328 
.annotate 'line', 1940
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4334
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5012
  fallback4334:
    set $P5015, $P5011
    unless $P5011 goto if1464_end4333 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4335
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5014
  fallback4335:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1464_end4333:
    unless $P5015 goto if1463_else4330 
.annotate 'line', 1941
.annotate 'line', 1942
    _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1463_end4331
  if1463_else4330:
.annotate 'line', 1945
.annotate 'line', 1946
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1463_end4331:
  if1462_end4328:
.annotate 'line', 1949
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4336
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback4336:
.annotate 'line', 1953
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Stmts"]
    unless_null $P5026, fallback4337
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5030
  fallback4337:
.annotate 'line', 1954
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback4338
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5031, $P5035
  fallback4338:
.annotate 'line', 1956
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4339
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5040
  fallback4339:
    $P5041 = $P5036."new"("exception" :named("op"))
.annotate 'line', 1957
    nqp_get_sc_object $P5045, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback4340
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5046
  fallback4340:
    $P5047 = $P5042."new"("handled" :named("value"))
.annotate 'line', 1958
    nqp_get_sc_object $P5051, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["IVal"]
    unless_null $P5048, fallback4341
    nqp_get_sc_object $P5052, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5052
  fallback4341:
    $P5053 = $P5048."new"(1 :named("value"))
    $P5054 = $P5031."new"($P5041, $P5047, $P5053, "bindkey_i" :named("op"))
.annotate 'line', 1960
    $P5055 = "&default_for"("$")
    $P5056 = $P5026."new"($P5054, $P5055)
    $P5057 = $P5021."new"($P101, "CATCH", $P5056, "handle" :named("op"))
    $P5058 = _lex_param_1."!make"($P5057)
    goto lexotic_4324
  lexotic_4323:
    .get_results ($P5058)
  lexotic_4324:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_268_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1964
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1965
    unless_null _lex_param_1, fallback4344
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4344:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4345
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4345:
    unless $P5001 goto if1465_else4342 
.annotate 'line', 1966
    unless_null _lex_param_1, fallback4346
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4346:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4347
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4347:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1465_end4343
  if1465_else4342:
.annotate 'line', 1967
    unless_null _lex_param_1, fallback4348
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5010
  fallback4348:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4349
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5011
  fallback4349:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1465_end4343:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_269_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1972
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4350
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4350:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4351
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4351:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_270_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1973
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4352
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4352:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4353
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4353:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_271_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1975
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4354
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4354:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4355
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4355:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_272_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4356
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4356:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4357
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4357:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_273_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4358
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4358:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4359
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4359:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_274_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1981
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4360
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4360:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4361
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4361:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_275_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4362
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4362:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4363
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4363:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_276_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1983
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4364
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4364:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4365
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4365:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_277_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1984
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4366
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4366:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4367
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4367:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_278_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1985
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4368
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4368:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4369
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4369:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_279_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1986
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4370
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4370:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4371
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4371:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_280_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1987
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4372
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4372:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4373
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4373:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_281_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1988
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1989
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4374
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback4374:
    unless_null _lex_param_1, fallback4375
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback4375:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4376
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback4376:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_282_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1992
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 1993
    unless_null _lex_param_1, fallback4377
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback4377:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4378
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback4378:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1994
    unless_null _lex_param_1, fallback4379
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback4379:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4380
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback4380:
    $P5009 = $P5006."Str"()
    $P101."named"($P5009)
.annotate 'line', 1995
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_283_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1998
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_449_1359718901.265' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4383
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4383:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4384
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4384:
    unless $P5001 goto if1466_else4381 
.annotate 'line', 1999
.annotate 'line', 2000
    unless_null _lex_param_1, fallback4385
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4385:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4386
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4386:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4387
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5010
  fallback4387:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4388
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5011
  fallback4388:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4389
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5012
  fallback4389:
    set $S5001, $P5008
    $P5007."named"($S5001)
.annotate 'line', 2001
    unless_null _lex_param_1, fallback4390
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5014
  fallback4390:
    set $P5013, _lex_param_1["variable"]
    unless_null $P5013, fallback4391
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5015
  fallback4391:
    $P5016 = $P5013."ast"()
    $P5017 = _lex_param_1."!make"($P5016)
    set $P5020, $P5017
    goto if1466_end4382
  if1466_else4381:
    .const 'Sub' $P5018 = 'cuid_449_1359718901.265' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1466_end4382:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1359718901.265") :anon :lex :outer("cuid_283_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2002
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4394
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5004
  fallback4394:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4395
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback4395:
    unless $P5002 goto if1467_else4392 
.annotate 'line', 2004
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4396
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5009
  fallback4396:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4397
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5010
  fallback4397:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4398
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5011
  fallback4398:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1467_end4393
  if1467_else4392:
.annotate 'line', 2005
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4399
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5017
  fallback4399:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4400
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5020
  fallback4400:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4401
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5021
  fallback4401:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1467_end4393:
    set $P101, $P5023
.annotate 'line', 2006
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4402
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5026
  fallback4402:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4403
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5027
  fallback4403:
    set $S5001, $P5024
    $P101."named"($S5001)
.annotate 'line', 2007
    find_dynamic_lex $P5028, "$/"
    $P5029 = $P5028."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_284_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2011
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_451_1359718901.265' 
    capture_lex $P5020 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback4406
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback4406:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4407
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback4407:
    unless $P5002 goto if1468_else4404 
.annotate 'line', 2013
.annotate 'line', 2014
    unless_null _lex_param_1, fallback4408
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5006
  fallback4408:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4409
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5007
  fallback4409:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 2015
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4410
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5013
  fallback4410:
.annotate 'line', 2016
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    goto if1468_end4405
  if1468_else4404:
    .const 'Sub' $P5017 = 'cuid_451_1359718901.265' 
    capture_lex $P5017
    $P5018 = $P5017()
  if1468_end4405:
.annotate 'line', 2091
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1359718901.265") :anon :lex :outer("cuid_284_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2019
    .const 'Sub' $P5058 = 'cuid_450_1359718901.265' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_454_1359718901.265' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_455_1359718901.265' 
    capture_lex $P5058 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2020
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4411
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback4411:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1469_else4412 
.annotate 'line', 2021
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4416
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5011
  fallback4416:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4417
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback4417:
    unless $P5009 goto if1470_end4415 
.annotate 'line', 2022
.annotate 'line', 2023
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
  if1470_end4415:
.annotate 'line', 2025
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5057, $P5017
    goto if1469_end4413
  if1469_else4412:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4420
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5021
  fallback4420:
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4421
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5022
  fallback4421:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4422
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5023
  fallback4422:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1471_else4418 
    .const 'Sub' $P5024 = 'cuid_450_1359718901.265' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5056, $P5025
    goto if1471_end4419
  if1471_else4418:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4433
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5029
  fallback4433:
    set $P5027, $P5028["twigil"]
    unless_null $P5027, fallback4434
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5030
  fallback4434:
    set $P5026, $P5027[0]
    unless_null $P5026, fallback4435
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5031
  fallback4435:
    set $S5003, $P5026
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1472_else4431 
    .const 'Sub' $P5032 = 'cuid_454_1359718901.265' 
    capture_lex $P5032
    $P5033 = $P5032()
    set $P5055, $P5033
    goto if1472_end4432
  if1472_else4431:
.annotate 'line', 2076
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4475
    nqp_get_sc_object $P5037, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4476
    nqp_get_sc_object $P5038, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5038
  fallback4476:
    unless_null $P5035, vivi_14854477
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_14854477:
    set $P5034, $P5035
  fallback4475:
    set $P5040, $P101[0]
    unless_null $P5040, fallback4478
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5041
  fallback4478:
    set $S5004, $P5040
    $P5042 = $P5034."is_package"($S5004)
    unless $P5042 goto if1484_else4473 
.annotate 'line', 2077
    find_lex $P5043, "$/"
    $P5044 = "&lexical_package_lookup"($P101, $P5043)
    store_lex "$past", $P5044
.annotate 'line', 2078
    find_lex $P5045, "$past"
    find_lex $P5047, "$/"
    unless_null $P5047, fallback4479
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5047, $P5048
  fallback4479:
    set $P5046, $P5047["sigil"]
    unless_null $P5046, fallback4480
    nqp_get_sc_object $P5049, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5046, $P5049
  fallback4480:
    $P5050 = "&default_for"($P5046)
    $P5051 = $P5045."fallback"($P5050)
    set $P5054, $P5051
    goto if1484_end4474
  if1484_else4473:
    .const 'Sub' $P5052 = 'cuid_455_1359718901.265' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1484_end4474:
    set $P5055, $P5054
  if1472_end4432:
    set $P5056, $P5055
  if1471_end4419:
    set $P5057, $P5056
  if1469_end4413:
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1359718901.265") :anon :lex :outer("cuid_451_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2027
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2028
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4423
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback4423:
.annotate 'line', 2030
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4424
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5011
  fallback4424:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4425
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback4425:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4426
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5015
  fallback4426:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4427
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5016
  fallback4427:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 2031
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4428
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5024
  fallback4428:
.annotate 'line', 2033
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4429
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5029
  fallback4429:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 2035
    nqp_get_sc_object $P5037, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4430
    nqp_get_sc_object $P5038, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5034, $P5038
  fallback4430:
.annotate 'line', 2036
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1359718901.265") :anon :lex :outer("cuid_451_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2040
    .const 'Sub' $P5064 = 'cuid_453_1359718901.265' 
    capture_lex $P5064 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 2041
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4438
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4439
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5010
  fallback4439:
    unless_null $P5007, vivi_14744440
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_14744440:
    set $P5006, $P5007
  fallback4438:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1473_else4436 
.annotate 'line', 2043
.annotate 'line', 2044
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4441
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback4441:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2045
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4442
    nqp_get_sc_object $P5021, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4443
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5022
  fallback4443:
    unless_null $P5019, vivi_14754444
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_14754444:
    set $P5018, $P5019
  fallback4442:
    $P5024 = $P102."set_compile_time_value"($P5018)
    goto if1473_end4437
  if1473_else4436:
.annotate 'line', 2047
.annotate 'line', 2048
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4445
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5029
  fallback4445:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4446
    nqp_get_sc_object $P5033, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4447
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5031, $P5034
  fallback4447:
    unless_null $P5031, vivi_14764448
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_14764448:
    set $P5030, $P5031
  fallback4446:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
  if1473_end4437:
.annotate 'line', 2050
    nqp_get_sc_object $P5040, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback4449
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5037, $P5041
  fallback4449:
.annotate 'line', 2052
    nqp_get_sc_object $P5045, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback4450
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5046
  fallback4450:
.annotate 'line', 2053
    nqp_get_sc_object $P5050, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback4451
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5047, $P5051
  fallback4451:
    $P5052 = $P5047."new"("self" :named("name"), "lexical" :named("scope"))
    $P5053 = $P5042."new"($P5052, "decont" :named("op"))
    $P5054 = $P5037."new"($P5053, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5054
    find_dynamic_lex $P5055, "$*IN_DECL"
    unless_null $P5055, fallback4454
    nqp_get_sc_object $P5058, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$IN_DECL"]
    unless_null $P5056, fallback4455
    nqp_get_sc_object $P5059, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5056, $P5059
  fallback4455:
    unless_null $P5056, vivi_14784456
    die "Contextual $*IN_DECL not found"
    box $P5060, "Contextual $*IN_DECL not found"
    set $P5056, $P5060
  vivi_14784456:
    set $P5055, $P5056
  fallback4454:
    set $P5063, $P5055
    if $P5055 goto unless1477_end4453 
    .const 'Sub' $P5061 = 'cuid_453_1359718901.265' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5063, $P5062
  unless1477_end4453:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1359718901.265") :anon :lex :outer("cuid_454_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2058
    .const 'Sub' $P5032 = 'cuid_452_1359718901.265' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2060
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4457
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4458
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5010
  fallback4458:
    unless_null $P5007, vivi_14794459
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14794459:
    set $P5006, $P5007
  fallback4457:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4460
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4461
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5016
  fallback4461:
    unless_null $P5013, vivi_14804462
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14804462:
    set $P5012, $P5013
  fallback4460:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4465
    push_eh $P5020
  for_next4466:
    unless $P5004, for_done4468
    shift $P5021, $P5004
  for_redo4467:
    .const 'Sub' $P5019 = 'cuid_452_1359718901.265' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4466
  for_handlers4465:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4466
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4467
  for_done4468:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1482_else4469 
.annotate 'line', 2066
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1483_end4472 
.annotate 'line', 2067
.annotate 'line', 2068
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1483_end4472:
    set $P5031, $P5025
    goto if1482_end4470
  if1482_else4469:
.annotate 'line', 2071
.annotate 'line', 2072
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1482_end4470:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1359718901.265") :anon :lex :outer("cuid_453_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2060
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2061
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1481_end4464 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1481_end4464:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1359718901.265") :anon :lex :outer("cuid_451_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2080
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2081
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4493
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4494
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5009
  fallback4494:
    unless_null $P5006, vivi_14924495
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14924495:
    set $P5005, $P5006
  fallback4493:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1491_end4492 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1491_end4492:
    set $I5005, $I5003
    if $I5003 goto unless1490_end4490 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1490_end4490:
    set $I5007, $I5005
    if $I5005 goto unless1489_end4488 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1489_end4488:
    set $I5009, $I5007
    if $I5007 goto unless1488_end4486 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4496
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5014
  fallback4496:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4497
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5015
  fallback4497:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4498
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5016
  fallback4498:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1488_end4486:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1487_end4484 
.annotate 'line', 2083
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4499
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4500
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5021
  fallback4500:
    unless_null $P5018, vivi_14934501
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14934501:
    set $P5017, $P5018
  fallback4499:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1487_end4484:
    unless $P5024 goto if1486_else4481 
.annotate 'line', 2084
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4502
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5030
  fallback4502:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1486_end4482
  if1486_else4481:
.annotate 'line', 2086
.annotate 'line', 2087
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1486_end4482:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_285_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2094
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4503
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4503:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4504
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4504:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_286_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2095
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4505
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4505:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4506
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4506:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_287_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2096
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4507
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4507:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4508
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4508:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_288_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2097
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4509
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4509:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4510
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4510:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_289_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2098
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4511
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4511:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4512
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4512:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_290_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2099
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4513
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4513:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4514
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4514:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_291_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2101
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 2104
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4515
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4516
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback4516:
    unless_null $P5004, vivi_14944517
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14944517:
    set $P5003, $P5004
  fallback4515:
    unless_null _lex_param_1, fallback4518
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5011
  fallback4518:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4519
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5012
  fallback4519:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4520
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5013
  fallback4520:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2105
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4521
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4522
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5019
  fallback4522:
    unless_null $P5016, vivi_14954523
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14954523:
    set $P5015, $P5016
  fallback4521:
    unless_null _lex_param_1, fallback4524
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5022
  fallback4524:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4525
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5023
  fallback4525:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4530
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4531
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5029
  fallback4531:
    unless_null $P5026, vivi_14984532
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14984532:
    set $P5025, $P5026
  fallback4530:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1497_end4529 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4533
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4534
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5035
  fallback4534:
    unless_null $P5032, vivi_14994535
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_14994535:
    set $P5031, $P5032
  fallback4533:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1497_end4529:
    unless $I5003 goto if1496_else4526 
.annotate 'line', 2108
.annotate 'line', 2109
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4536
    nqp_get_sc_object $P5040, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4537
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5041
  fallback4537:
    unless_null $P5038, vivi_15004538
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_15004538:
    set $P5037, $P5038
  fallback4536:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4539
    nqp_get_sc_object $P5046, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4540
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5047
  fallback4540:
    unless_null $P5044, vivi_15014541
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_15014541:
    set $P5043, $P5044
  fallback4539:
    unless_null _lex_param_1, fallback4542
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5051
  fallback4542:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4543
    nqp_get_sc_object $P5052, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5050, $P5052
  fallback4543:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4544
    nqp_get_sc_object $P5053, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5049, $P5053
  fallback4544:
    $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4547
    nqp_get_sc_object $P5056, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5056
  fallback4547:
    set $P5055, _lex_param_1["name"]
    unless_null $P5055, fallback4548
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5057
  fallback4548:
    set $P5054, $P5055["identifier"]
    unless_null $P5054, fallback4549
    nqp_get_sc_object $P5058, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5054, $P5058
  fallback4549:
    set $N5001, $P5054
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5081, $I5004
    set $P5080, $P5081
    unless $I5004 goto if1502_end4546 
.annotate 'line', 2110
.annotate 'line', 2111
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4550
    nqp_get_sc_object $P5062, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4551
    nqp_get_sc_object $P5063, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5060, $P5063
  fallback4551:
    unless_null $P5060, vivi_15034552
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_15034552:
    set $P5059, $P5060
  fallback4550:
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4553
    nqp_get_sc_object $P5068, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4554
    nqp_get_sc_object $P5069, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5066, $P5069
  fallback4554:
    unless_null $P5066, vivi_15044555
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15044555:
    set $P5065, $P5066
  fallback4553:
    $P5071 = $P5065."cur_lexpad"()
    unless_null _lex_param_1, fallback4556
    nqp_get_sc_object $P5075, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5075
  fallback4556:
    set $P5074, _lex_param_1["name"]
    unless_null $P5074, fallback4557
    nqp_get_sc_object $P5076, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5074, $P5076
  fallback4557:
    set $P5073, $P5074["identifier"]
    unless_null $P5073, fallback4558
    nqp_get_sc_object $P5077, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5073, $P5077
  fallback4558:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback4559
    nqp_get_sc_object $P5078, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5072, $P5078
  fallback4559:
    $P5079 = $P5059."install_lexical_symbol"($P5071, $P5072, $P102)
    set $P5080, $P5079
  if1502_end4546:
    goto if1496_end4527
  if1496_else4526:
    find_dynamic_lex $P5082, "$*SCOPE"
    unless_null $P5082, fallback4562
    nqp_get_sc_object $P5085, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$SCOPE"]
    unless_null $P5083, fallback4563
    nqp_get_sc_object $P5086, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5083, $P5086
  fallback4563:
    unless_null $P5083, vivi_15064564
    die "Contextual $*SCOPE not found"
    box $P5087, "Contextual $*SCOPE not found"
    set $P5083, $P5087
  vivi_15064564:
    set $P5082, $P5083
  fallback4562:
    set $S5004, $P5082
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1505_else4560 
.annotate 'line', 2114
    unless_null _lex_param_1, fallback4567
    nqp_get_sc_object $P5090, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5090
  fallback4567:
    set $P5089, _lex_param_1["name"]
    unless_null $P5089, fallback4568
    nqp_get_sc_object $P5091, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5089, $P5091
  fallback4568:
    set $P5088, $P5089["identifier"]
    unless_null $P5088, fallback4569
    nqp_get_sc_object $P5092, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5088, $P5092
  fallback4569:
    set $N5003, $P5088
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if1507_end4566 
.annotate 'line', 2115
.annotate 'line', 2116
    unless_null _lex_param_1, fallback4570
    nqp_get_sc_object $P5094, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5094
  fallback4570:
    set $P5093, _lex_param_1["name"]
    unless_null $P5093, fallback4571
    nqp_get_sc_object $P5095, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5093, $P5095
  fallback4571:
    $P5096 = $P5093."CURSOR"()
    $P5097 = $P5096."panic"("A my scoped package cannot have a multi-part name yet")
  if1507_end4566:
.annotate 'line', 2118
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4572
    nqp_get_sc_object $P5101, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4573
    nqp_get_sc_object $P5102, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5099, $P5102
  fallback4573:
    unless_null $P5099, vivi_15084574
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15084574:
    set $P5098, $P5099
  fallback4572:
    find_dynamic_lex $P5104, "$*W"
    unless_null $P5104, fallback4575
    nqp_get_sc_object $P5107, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$W"]
    unless_null $P5105, fallback4576
    nqp_get_sc_object $P5108, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5105, $P5108
  fallback4576:
    unless_null $P5105, vivi_15094577
    die "Contextual $*W not found"
    box $P5109, "Contextual $*W not found"
    set $P5105, $P5109
  vivi_15094577:
    set $P5104, $P5105
  fallback4575:
    $P5110 = $P5104."cur_lexpad"()
    unless_null _lex_param_1, fallback4578
    nqp_get_sc_object $P5114, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5114
  fallback4578:
    set $P5113, _lex_param_1["name"]
    unless_null $P5113, fallback4579
    nqp_get_sc_object $P5115, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5113, $P5115
  fallback4579:
    set $P5112, $P5113["identifier"]
    unless_null $P5112, fallback4580
    nqp_get_sc_object $P5116, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5112, $P5116
  fallback4580:
    set $P5111, $P5112[0]
    unless_null $P5111, fallback4581
    nqp_get_sc_object $P5117, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5111, $P5117
  fallback4581:
    $P5118 = $P5098."install_lexical_symbol"($P5110, $P5111, $P102)
    set $P5127, $P5118
    goto if1505_end4561
  if1505_else4560:
.annotate 'line', 2120
.annotate 'line', 2121
    $P5119 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5120, "$*SCOPE"
    unless_null $P5120, fallback4582
    nqp_get_sc_object $P5123, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["$SCOPE"]
    unless_null $P5121, fallback4583
    nqp_get_sc_object $P5124, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5121, $P5124
  fallback4583:
    unless_null $P5121, vivi_15104584
    die "Contextual $*SCOPE not found"
    box $P5125, "Contextual $*SCOPE not found"
    set $P5121, $P5125
  vivi_15104584:
    set $P5120, $P5121
  fallback4582:
    set $S5006, $P5120
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5126 = $P5119."panic"($S5005)
    set $P5127, $P5126
  if1505_end4561:
  if1496_end4527:
.annotate 'line', 2124
    nqp_get_sc_object $P5131, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["Stmts"]
    unless_null $P5128, fallback4585
    nqp_get_sc_object $P5132, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5128, $P5132
  fallback4585:
    $P5133 = $P5128."new"()
    $P5134 = _lex_param_1."!make"($P5133)
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_292_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2127
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5149 = 'cuid_457_1359718901.265' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_458_1359718901.265' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_459_1359718901.265' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_460_1359718901.265' 
    capture_lex $P5149 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
    unless_null _lex_param_1, fallback4586
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5008
  fallback4586:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4587
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5009
  fallback4587:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4588
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback4588:
    repr_clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2130
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4589
    nqp_get_sc_object $P5017, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4590
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4590:
    unless_null $P5015, vivi_15114591
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_15114591:
    set $P5014, $P5015
  fallback4589:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4592
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4593
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5026
  fallback4593:
    unless_null $P5023, vivi_15124594
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_15124594:
    set $P5022, $P5023
  fallback4592:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4595
    nqp_get_sc_object $P5028, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5028
  fallback4595:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4598
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5030
  fallback4598:
    set $P5029, _lex_param_1["blockoid"]
    unless_null $P5029, fallback4599
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5029, $P5031
  fallback4599:
    unless $P5029 goto if1513_else4596 
.annotate 'line', 2135
.annotate 'line', 2136
    unless_null _lex_param_1, fallback4600
    nqp_get_sc_object $P5033, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5033
  fallback4600:
    set $P5032, _lex_param_1["blockoid"]
    unless_null $P5032, fallback4601
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5034
  fallback4601:
    $P5035 = $P5032."ast"()
    set $P104, $P5035
    goto if1513_end4597
  if1513_else4596:
.annotate 'line', 2138
.annotate 'line', 2139
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4602
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4603
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5037, $P5040
  fallback4603:
    unless_null $P5037, vivi_15144604
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15144604:
    set $P5036, $P5037
  fallback4602:
    $P5042 = $P5036."pop_lexpad"()
    set $P104, $P5042
.annotate 'line', 2140
    unless_null _lex_param_1, fallback4605
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5044
  fallback4605:
    set $P5043, _lex_param_1["statementlist"]
    unless_null $P5043, fallback4606
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5043, $P5045
  fallback4606:
    $P5046 = $P5043."ast"()
    $P5047 = $P104."push"($P5046)
  if1513_end4597:
    can $I5001, $P103, "parametric"
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto if1516_end4610 
.annotate 'line', 2147
    $P5048 = $P103."parametric"($P103)
    set $P5049, $P5048
  if1516_end4610:
    unless $P5049 goto if1515_else4607 
    .const 'Sub' $P5051 = 'cuid_457_1359718901.265' 
    capture_lex $P5051
    $P5052 = $P5051()
    goto if1515_end4608
  if1515_else4607:
.annotate 'line', 2164
.annotate 'line', 2165
    $P104."blocktype"("immediate")
.annotate 'line', 2166
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4643
    nqp_get_sc_object $P5056, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4644
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5054, $P5057
  fallback4644:
    unless_null $P5054, vivi_15244645
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_15244645:
    set $P5053, $P5054
  fallback4643:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4646
    nqp_get_sc_object $P5062, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4647
    nqp_get_sc_object $P5063, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5060, $P5063
  fallback4647:
    unless_null $P5060, vivi_15254648
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_15254648:
    set $P5059, $P5060
  fallback4646:
    $P5053."install_lexical_symbol"($P104, "$?PACKAGE", $P5059)
.annotate 'line', 2167
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4649
    nqp_get_sc_object $P5068, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4650
    nqp_get_sc_object $P5069, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5066, $P5069
  fallback4650:
    unless_null $P5066, vivi_15264651
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15264651:
    set $P5065, $P5066
  fallback4649:
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4652
    nqp_get_sc_object $P5074, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4653
    nqp_get_sc_object $P5075, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5072, $P5075
  fallback4653:
    unless_null $P5072, vivi_15274654
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_15274654:
    set $P5071, $P5072
  fallback4652:
    $P5077 = $P5065."install_lexical_symbol"($P104, "$?CLASS", $P5071)
  if1515_end4608:
    unless_null _lex_param_1, fallback4657
    nqp_get_sc_object $P5079, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5079
  fallback4657:
    set $P5078, _lex_param_1["parent"]
    unless_null $P5078, fallback4658
    nqp_get_sc_object $P5080, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5078, $P5080
  fallback4658:
    unless $P5078 goto if1528_else4655 
    .const 'Sub' $P5081 = 'cuid_458_1359718901.265' 
    capture_lex $P5081
    $P5082 = $P5081()
    goto if1528_end4656
  if1528_else4655:
    can $I5002, $P103, "set_default_parent"
    box $P5086, $I5002
    set $P5085, $P5086
    unless $I5002 goto if1535_end4680 
    .const 'Sub' $P5083 = 'cuid_459_1359718901.265' 
    capture_lex $P5083
    $P5084 = $P5083()
    set $P5085, $P5084
  if1535_end4680:
  if1528_end4656:
    unless_null _lex_param_1, fallback4697
    nqp_get_sc_object $P5088, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5088
  fallback4697:
    set $P5087, _lex_param_1["role"]
    unless_null $P5087, fallback4698
    nqp_get_sc_object $P5089, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5087, $P5089
  fallback4698:
    unless $P5087 goto if1541_end4696 
.annotate 'line', 2192
    unless_null _lex_param_1, fallback4699
    nqp_get_sc_object $P5094, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5094
  fallback4699:
    set $P5093, _lex_param_1["role"]
    unless_null $P5093, fallback4700
    nqp_get_sc_object $P5095, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5093, $P5095
  fallback4700:
    set $P5090, $P5093
    iter $P5092, $P5093
  for_next4715:
    unless $P5092, for_done4717
    shift $P5097, $P5092
  for_redo4716:
    .const 'Sub' $P5096 = 'cuid_460_1359718901.265' 
    capture_lex $P5096
    $P5090 = $P5096($P5097)
    goto for_next4715
  for_done4717:
  if1541_end4696:
.annotate 'line', 2210
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4718
    nqp_get_sc_object $P5101, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4719
    nqp_get_sc_object $P5102, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5099, $P5102
  fallback4719:
    unless_null $P5099, vivi_15484720
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15484720:
    set $P5098, $P5099
  fallback4718:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback4721
    nqp_get_sc_object $P5107, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback4722
    nqp_get_sc_object $P5108, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5105, $P5108
  fallback4722:
    unless_null $P5105, vivi_15494723
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_15494723:
    set $P5104, $P5105
  fallback4721:
    $P5098."pkg_compose"($P5104)
    find_dynamic_lex $P5110, "$*PKGDECL"
    unless_null $P5110, fallback4728
    nqp_get_sc_object $P5113, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["$PKGDECL"]
    unless_null $P5111, fallback4729
    nqp_get_sc_object $P5114, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5111, $P5114
  fallback4729:
    unless_null $P5111, vivi_15524730
    die "Contextual $*PKGDECL not found"
    box $P5115, "Contextual $*PKGDECL not found"
    set $P5111, $P5115
  vivi_15524730:
    set $P5110, $P5111
  fallback4728:
    set $S5003, $P5110
    iseq $I5003, $S5003, "grammar"
    set $I5005, $I5003
    unless $I5003 goto if1551_end4727 
    find_dynamic_lex $P5116, "$*PACKAGE"
    unless_null $P5116, fallback4731
    nqp_get_sc_object $P5119, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["$PACKAGE"]
    unless_null $P5117, fallback4732
    nqp_get_sc_object $P5120, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5117, $P5120
  fallback4732:
    unless_null $P5117, vivi_15534733
    die "Contextual $*PACKAGE not found"
    box $P5121, "Contextual $*PACKAGE not found"
    set $P5117, $P5121
  vivi_15534733:
    set $P5116, $P5117
  fallback4731:
    can $I5004, $P5116, "!precompute_nfas"
    set $I5005, $I5004
  if1551_end4727:
    unless $I5005 goto if1550_end4725 
.annotate 'line', 2213
.annotate 'line', 2214
    find_dynamic_lex $P5122, "$*PACKAGE"
    unless_null $P5122, fallback4734
    nqp_get_sc_object $P5125, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["$PACKAGE"]
    unless_null $P5123, fallback4735
    nqp_get_sc_object $P5126, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5123, $P5126
  fallback4735:
    unless_null $P5123, vivi_15544736
    die "Contextual $*PACKAGE not found"
    box $P5127, "Contextual $*PACKAGE not found"
    set $P5123, $P5127
  vivi_15544736:
    set $P5122, $P5123
  fallback4734:
    $P5128 = $P5122."!precompute_nfas"()
  if1550_end4725:
    unless_null _lex_param_1, fallback4739
    nqp_get_sc_object $P5130, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5130
  fallback4739:
    set $P5129, _lex_param_1["export"]
    unless_null $P5129, fallback4740
    nqp_get_sc_object $P5131, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5129, $P5131
  fallback4740:
    unless $P5129 goto if1555_end4738 
.annotate 'line', 2218
    find_dynamic_lex $P5135, "$*EXPORT"
    unless_null $P5135, fallback4741
    nqp_get_sc_object $P5138, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["$EXPORT"]
    unless_null $P5136, fallback4742
    nqp_get_sc_object $P5139, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5136, $P5139
  fallback4742:
    unless_null $P5136, vivi_15564743
    die "Contextual $*EXPORT not found"
    box $P5140, "Contextual $*EXPORT not found"
    set $P5136, $P5140
  vivi_15564743:
    set $P5135, $P5136
  fallback4741:
    get_who $P5134, $P5135
    set $P5133, $P5134["DEFAULT"]
    unless_null $P5133, fallback4744
    nqp_get_sc_object $P5141, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5133, $P5141
  fallback4744:
    get_who $P5132, $P5133
    set $S5004, $P102
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4745
    nqp_get_sc_object $P5145, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4746
    nqp_get_sc_object $P5146, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5143, $P5146
  fallback4746:
    unless_null $P5143, vivi_15574747
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_15574747:
    set $P5142, $P5143
  fallback4745:
    set $P5132[$S5004], $P5142
  if1555_end4738:
.annotate 'line', 2222
    $P5148 = _lex_param_1."!make"($P104)
    .return ($P5148) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1359718901.265") :anon :lex :outer("cuid_292_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2147
    .const 'Sub' $P5081 = 'cuid_456_1359718901.265' 
    capture_lex $P5081 
    .lex "$params", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2148
    find_lex $P5002, "$past"
    $P5002."blocktype"("declaration")
.annotate 'line', 2149
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Stmts"]
    unless_null $P5003, fallback4611
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5007
  fallback4611:
.annotate 'line', 2150
    nqp_get_sc_object $P5011, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Var"]
    unless_null $P5008, fallback4612
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5012
  fallback4612:
    $P5013 = $P5008."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4615
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5017
  fallback4615:
    set $P5015, $P5016["role_params"]
    unless_null $P5015, fallback4616
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5018
  fallback4616:
    unless $P5015 goto if1517_end4614 
.annotate 'line', 2152
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4617
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5026
  fallback4617:
    set $P5024, $P5025["role_params"]
    unless_null $P5024, fallback4618
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5027
  fallback4618:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback4619
    nqp_get_sc_object $P5028, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5028
  fallback4619:
    set $P5022, $P5023["variable"]
    unless_null $P5022, fallback4620
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5029
  fallback4620:
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next4621:
    unless $P5021, for_done4623
    shift $P5031, $P5021
  for_redo4622:
    .const 'Sub' $P5030 = 'cuid_456_1359718901.265' 
    capture_lex $P5030
    $P5019 = $P5030($P5031)
    goto for_next4621
  for_done4623:
  if1517_end4614:
.annotate 'line', 2157
    find_lex $P5032, "$past"
    $P5032."unshift"($P101)
.annotate 'line', 2158
    find_lex $P5033, "$past"
    nqp_get_sc_object $P5037, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4624
    nqp_get_sc_object $P5038, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5034, $P5038
  fallback4624:
    $P5039 = $P5034."new"("curlexpad" :named("op"))
    $P5033."push"($P5039)
.annotate 'line', 2159
    find_lex $P5040, "$past"
    $P5040."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2160
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback4625
    nqp_get_sc_object $P5044, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback4626
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5045
  fallback4626:
    unless_null $P5042, vivi_15184627
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_15184627:
    set $P5041, $P5042
  fallback4625:
    find_dynamic_lex $P5047, "$*PACKAGE"
    unless_null $P5047, fallback4628
    nqp_get_sc_object $P5050, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$PACKAGE"]
    unless_null $P5048, fallback4629
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5051
  fallback4629:
    unless_null $P5048, vivi_15194630
    die "Contextual $*PACKAGE not found"
    box $P5052, "Contextual $*PACKAGE not found"
    set $P5048, $P5052
  vivi_15194630:
    set $P5047, $P5048
  fallback4628:
    find_lex $P5053, "$past"
    $P5041."pkg_set_body_block"($P5047, $P5053)
.annotate 'line', 2161
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4631
    nqp_get_sc_object $P5057, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4632
    nqp_get_sc_object $P5058, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5058
  fallback4632:
    unless_null $P5055, vivi_15204633
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15204633:
    set $P5054, $P5055
  fallback4631:
    find_lex $P5060, "$past"
    find_dynamic_lex $P5061, "$*PACKAGE"
    unless_null $P5061, fallback4634
    nqp_get_sc_object $P5064, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$PACKAGE"]
    unless_null $P5062, fallback4635
    nqp_get_sc_object $P5065, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5062, $P5065
  fallback4635:
    unless_null $P5062, vivi_15214636
    die "Contextual $*PACKAGE not found"
    box $P5066, "Contextual $*PACKAGE not found"
    set $P5062, $P5066
  vivi_15214636:
    set $P5061, $P5062
  fallback4634:
    $P5054."install_lexical_symbol"($P5060, "$?PACKAGE", $P5061)
.annotate 'line', 2162
    find_dynamic_lex $P5067, "$*W"
    unless_null $P5067, fallback4637
    nqp_get_sc_object $P5070, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["$W"]
    unless_null $P5068, fallback4638
    nqp_get_sc_object $P5071, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5068, $P5071
  fallback4638:
    unless_null $P5068, vivi_15224639
    die "Contextual $*W not found"
    box $P5072, "Contextual $*W not found"
    set $P5068, $P5072
  vivi_15224639:
    set $P5067, $P5068
  fallback4637:
    find_lex $P5073, "$past"
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4640
    nqp_get_sc_object $P5077, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4641
    nqp_get_sc_object $P5078, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5075, $P5078
  fallback4641:
    unless_null $P5075, vivi_15234642
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_15234642:
    set $P5074, $P5075
  fallback4640:
    $P5080 = $P5067."install_lexical_symbol"($P5073, "$?ROLE", $P5074)
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1359718901.265") :anon :lex :outer("cuid_457_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2153
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2154
    find_lex $P5001, "$params"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1359718901.265") :anon :lex :outer("cuid_292_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2171
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_15314667
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2174
.annotate 'line', 2175
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4659
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4660
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback4660:
    unless_null $P5004, vivi_15294661
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15294661:
    set $P5003, $P5004
  fallback4659:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4662
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5014
  fallback4662:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4663
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5015
  fallback4663:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4664
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5016
  fallback4664:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4665
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5017
  fallback4665:
    repr_clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_15304666
  catch_handler_15314667:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_15304666
  skip_handler_15304666:
    unless $P102 goto if1532_else4668 
.annotate 'line', 2178
.annotate 'line', 2179
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4670
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4671
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5026
  fallback4671:
    unless_null $P5023, vivi_15334672
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_15334672:
    set $P5022, $P5023
  fallback4670:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4673
    nqp_get_sc_object $P5031, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4674
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5029, $P5032
  fallback4674:
    unless_null $P5029, vivi_15344675
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_15344675:
    set $P5028, $P5029
  fallback4673:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1532_end4669
  if1532_else4668:
.annotate 'line', 2181
.annotate 'line', 2182
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4676
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5040
  fallback4676:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4677
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5041
  fallback4677:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4678
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5037, $P5042
  fallback4678:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1532_end4669:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1359718901.265") :anon :lex :outer("cuid_292_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2185
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4683
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4684
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback4684:
    unless_null $P5003, vivi_15374685
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_15374685:
    set $P5002, $P5003
  fallback4683:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1536_else4681 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1536_end4682
  if1536_else4681:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1536_end4682:
    set $P101, $P5012
.annotate 'line', 2187
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4686
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4687
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5017
  fallback4687:
    unless_null $P5014, vivi_15384688
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15384688:
    set $P5013, $P5014
  fallback4686:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4689
    nqp_get_sc_object $P5022, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4690
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5023
  fallback4690:
    unless_null $P5020, vivi_15394691
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_15394691:
    set $P5019, $P5020
  fallback4689:
.annotate 'line', 2188
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4692
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4693
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5029
  fallback4693:
    unless_null $P5026, vivi_15404694
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_15404694:
    set $P5025, $P5026
  fallback4692:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1359718901.265") :anon :lex :outer("cuid_292_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2193
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_15444706
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2196
.annotate 'line', 2197
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4701
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4702
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback4702:
    unless_null $P5004, vivi_15424703
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15424703:
    set $P5003, $P5004
  fallback4701:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4704
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5011
  fallback4704:
    repr_clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_15434705
  catch_handler_15444706:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_15434705
  skip_handler_15434705:
    unless $P102 goto if1545_else4707 
.annotate 'line', 2200
.annotate 'line', 2201
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4709
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4710
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5020
  fallback4710:
    unless_null $P5017, vivi_15464711
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15464711:
    set $P5016, $P5017
  fallback4709:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4712
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4713
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5026
  fallback4713:
    unless_null $P5023, vivi_15474714
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15474714:
    set $P5022, $P5023
  fallback4712:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1545_end4708
  if1545_else4707:
.annotate 'line', 2203
.annotate 'line', 2204
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1545_end4708:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_293_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2225
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_461_1359718901.265' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4748
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4748:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4749
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4749:
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next4753:
    unless $P5003, for_done4755
    shift $P5008, $P5003
  for_redo4754:
    .const 'Sub' $P5007 = 'cuid_461_1359718901.265' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next4753
  for_done4755:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1359718901.265") :anon :lex :outer("cuid_293_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2226
    .param pmc _lex_param_0 
    .lex "$var", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2227
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
.annotate 'line', 2228
    $P101."scope"("lexical")
.annotate 'line', 2229
    $P101."decl"("param")
.annotate 'line', 2230
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4750
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4751
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback4751:
    unless_null $P5004, vivi_15584752
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15584752:
    set $P5003, $P5004
  fallback4750:
    $P5009 = $P5003."cur_lexpad"()
    $P5010 = $P101."name"()
    $P5011 = $P5009."symbol"($P5010, "lexical" :named("scope"))
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_294_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2234
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4756
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4756:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4757
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4757:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_295_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2235
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4758
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4758:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4759
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4759:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_296_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2236
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4760
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4760:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4761
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4761:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_297_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2238
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2239
    unless_null _lex_param_1, fallback4764
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4764:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4765
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4765:
    unless $P5001 goto if1559_else4762 
    unless_null _lex_param_1, fallback4766
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4766:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4767
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4767:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1559_end4763
  if1559_else4762:
    unless_null _lex_param_1, fallback4770
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4770:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4771
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4771:
    unless $P5008 goto if1560_else4768 
.annotate 'line', 2240
    unless_null _lex_param_1, fallback4772
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5012
  fallback4772:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4773
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5013
  fallback4773:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1560_end4769
  if1560_else4768:
.annotate 'line', 2241
    unless_null _lex_param_1, fallback4774
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5016
  fallback4774:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4775
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5017
  fallback4775:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1560_end4769:
    set $P5020, $P5019
  if1559_end4763:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_298_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2244
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2245
    unless_null _lex_param_1, fallback4778
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4778:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4779
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4779:
    unless $P5001 goto if1561_else4776 
.annotate 'line', 2246
    unless_null _lex_param_1, fallback4780
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4780:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4781
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4781:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1561_end4777
  if1561_else4776:
.annotate 'line', 2247
    unless_null _lex_param_1, fallback4782
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4782:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4783
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4783:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1561_end4777:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_299_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2250
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4786
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4786:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4787
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4787:
    unless $P5001 goto if1562_else4784 
    unless_null _lex_param_1, fallback4788
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4788:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4789
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4789:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1562_end4785
  if1562_else4784:
    unless_null _lex_param_1, fallback4790
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4790:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4791
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4791:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1562_end4785:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_300_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2251
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4794
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4794:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4795
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4795:
    unless $P5001 goto if1563_else4792 
    unless_null _lex_param_1, fallback4796
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4796:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4797
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4797:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1563_end4793
  if1563_else4792:
    unless_null _lex_param_1, fallback4798
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4798:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4799
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4799:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1563_end4793:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_301_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2252
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4800
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4800:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4801
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4801:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_302_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2255
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5067 = 'cuid_462_1359718901.265' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_464_1359718901.265' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_465_1359718901.265' 
    capture_lex $P5067 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
.annotate 'line', 2256
    unless_null _lex_param_1, fallback4802
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5006
  fallback4802:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4803
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5007
  fallback4803:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4804
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5011
  fallback4804:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4805
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5012
  fallback4805:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4806
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5013
  fallback4806:
    set $P102, $P5009
.annotate 'line', 2258
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2259
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4807
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4808
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5019
  fallback4808:
    unless_null $P5016, vivi_15644809
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_15644809:
    set $P5015, $P5016
  fallback4807:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1566_end4813 
.annotate 'line', 2260
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1566_end4813:
    unless $P5023 goto if1565_end4811 
.annotate 'line', 2261
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
  if1565_end4811:
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4816
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4817
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5030
  fallback4817:
    unless_null $P5027, vivi_15684818
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_15684818:
    set $P5026, $P5027
  fallback4816:
    set $S5001, $P5026
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1567_else4814 
    .const 'Sub' $P5032 = 'cuid_462_1359718901.265' 
    capture_lex $P5032
    $P5033 = $P5032()
    goto if1567_end4815
  if1567_else4814:
    find_dynamic_lex $P5034, "$*SCOPE"
    unless_null $P5034, fallback4870
    nqp_get_sc_object $P5037, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$SCOPE"]
    unless_null $P5035, fallback4871
    nqp_get_sc_object $P5038, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5038
  fallback4871:
    unless_null $P5035, vivi_15864872
    die "Contextual $*SCOPE not found"
    box $P5039, "Contextual $*SCOPE not found"
    set $P5035, $P5039
  vivi_15864872:
    set $P5034, $P5035
  fallback4870:
    set $S5002, $P5034
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1585_else4868 
.annotate 'line', 2291
    unless_null _lex_param_1, fallback4875
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5041
  fallback4875:
    set $P5040, _lex_param_1["typename"]
    unless_null $P5040, fallback4876
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5042
  fallback4876:
    unless $P5040 goto if1587_end4874 
.annotate 'line', 2295
.annotate 'line', 2296
    $P5043 = _lex_param_1."CURSOR"()
    $P5044 = $P5043."panic"("Cannot put types on our-scoped variables")
  if1587_end4874:
    unless_null _lex_param_1, fallback4877
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5046
  fallback4877:
    set $P5045, _lex_param_1["variable"]
    unless_null $P5045, fallback4878
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5045, $P5047
  fallback4878:
    set $S5003, $P5045
    box $P5048, $S5003
    set $P103, $P5048
.annotate 'line', 2299
    new $P5049, 'ResizablePMCArray'
    push $P5049, $P103
    $P5050 = "&lexical_package_lookup"($P5049, _lex_param_1)
    set $P101, $P5050
.annotate 'line', 2300
    $P5051 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5054, $P5051
    goto if1585_end4869
  if1585_else4868:
    .const 'Sub' $P5052 = 'cuid_464_1359718901.265' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1585_end4869:
  if1567_end4815:
    unless_null _lex_param_1, fallback4898
    nqp_get_sc_object $P5056, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5056
  fallback4898:
    set $P5055, _lex_param_1["trait"]
    unless_null $P5055, fallback4899
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5057
  fallback4899:
    unless $P5055 goto if1592_end4897 
.annotate 'line', 2329
    unless_null _lex_param_1, fallback4900
    nqp_get_sc_object $P5062, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5062
  fallback4900:
    set $P5061, _lex_param_1["trait"]
    unless_null $P5061, fallback4901
    nqp_get_sc_object $P5063, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5061, $P5063
  fallback4901:
    set $P5058, $P5061
    iter $P5060, $P5061
  for_next4902:
    unless $P5060, for_done4904
    shift $P5065, $P5060
  for_redo4903:
    .const 'Sub' $P5064 = 'cuid_465_1359718901.265' 
    capture_lex $P5064
    $P5058 = $P5064($P5065)
    goto for_next4902
  for_done4904:
  if1592_end4897:
.annotate 'line', 2333
    $P5066 = _lex_param_1."!make"($P101)
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1359718901.265") :anon :lex :outer("cuid_302_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2263
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4821
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4822
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4822:
    unless_null $P5004, vivi_15704823
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_15704823:
    set $P5003, $P5004
  fallback4821:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4824
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4825
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5015
  fallback4825:
    unless_null $P5012, vivi_15714826
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_15714826:
    set $P5011, $P5012
  fallback4824:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless1569_end4820 
.annotate 'line', 2265
.annotate 'line', 2266
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4827
    nqp_get_sc_object $P5022, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4828
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5023
  fallback4828:
    unless_null $P5020, vivi_15724829
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_15724829:
    set $P5019, $P5020
  fallback4827:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
  unless1569_end4820:
    find_lex $P5026, "$name"
    set $P101["name"], $P5026
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4832
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5029
  fallback4832:
    set $P5027, $P5028["typename"]
    unless_null $P5027, fallback4833
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5030
  fallback4833:
    unless $P5027 goto if1573_end4831 
.annotate 'line', 2273
.annotate 'line', 2274
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4834
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4835
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5035
  fallback4835:
    unless_null $P5032, vivi_15744836
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15744836:
    set $P5031, $P5032
  fallback4834:
    new $P5037, 'ResizablePMCArray'
    find_lex $P5040, "$/"
    unless_null $P5040, fallback4837
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5041
  fallback4837:
    set $P5039, $P5040["typename"]
    unless_null $P5039, fallback4838
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5042
  fallback4838:
    set $P5038, $P5039[0]
    unless_null $P5038, fallback4839
    nqp_get_sc_object $P5043, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5043
  fallback4839:
    set $S5005, $P5038
    box $P5044, $S5005
    push $P5037, $P5044
    $P5045 = $P5031."find_sym"($P5037)
    set $P102["type"], $P5045
  if1573_end4831:
    find_lex $P5046, "$sigil"
    set $S5006, $P5046
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1576_end4843 
    find_lex $P5047, "$sigil"
    set $S5007, $P5047
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1576_end4843:
    unless $I5004 goto if1575_end4841 
.annotate 'line', 2276
    find_lex $P5049, "$/"
    unless_null $P5049, fallback4846
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5049, $P5050
  fallback4846:
    set $P5048, $P5049["typename"]
    unless_null $P5048, fallback4847
    nqp_get_sc_object $P5051, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5051
  fallback4847:
    unless $P5048 goto if1577_else4844 
.annotate 'line', 2277
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4848
    nqp_get_sc_object $P5053, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5052, $P5053
  fallback4848:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1577_end4845
  if1577_else4844:
.annotate 'line', 2280
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_15804853
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2281
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4849
    nqp_get_sc_object $P5057, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4850
    nqp_get_sc_object $P5058, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5058
  fallback4850:
    unless_null $P5055, vivi_15784851
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15784851:
    set $P5054, $P5055
  fallback4849:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_15794852
  catch_handler_15804853:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_15794852
  skip_handler_15794852:
    set $P5065, $P5064
  if1577_end4845:
  if1575_end4841:
.annotate 'line', 2286
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4854
    nqp_get_sc_object $P5069, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4855
    nqp_get_sc_object $P5070, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5067, $P5070
  fallback4855:
    unless_null $P5067, vivi_15814856
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15814856:
    set $P5066, $P5067
  fallback4854:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4857
    nqp_get_sc_object $P5075, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4858
    nqp_get_sc_object $P5076, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5073, $P5076
  fallback4858:
    unless_null $P5073, vivi_15824859
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_15824859:
    set $P5072, $P5073
  fallback4857:
    find_dynamic_lex $P5079, "%*HOW"
    unless_null $P5079, fallback4860
    nqp_get_sc_object $P5082, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["%HOW"]
    unless_null $P5080, fallback4861
    nqp_get_sc_object $P5084, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5083, $P5084
    new $P5085, 'Hash'
    set $P5083["%HOW"], $P5085
    set $P5080, $P5085
  fallback4861:
    unless_null $P5080, vivi_15834862
    die "Contextual %*HOW not found"
    box $P5086, "Contextual %*HOW not found"
    set $P5080, $P5086
  vivi_15834862:
    set $P5079, $P5080
  fallback4860:
    find_dynamic_lex $P5087, "$*PKGDECL"
    unless_null $P5087, fallback4863
    nqp_get_sc_object $P5090, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$PKGDECL"]
    unless_null $P5088, fallback4864
    nqp_get_sc_object $P5091, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5088, $P5091
  fallback4864:
    unless_null $P5088, vivi_15844865
    die "Contextual $*PKGDECL not found"
    box $P5092, "Contextual $*PKGDECL not found"
    set $P5088, $P5092
  vivi_15844865:
    set $P5087, $P5088
  fallback4863:
    set $S5009, $P5087
    concat $S5008, $S5009, "-attr"
    set $P5078, $P5079[$S5008]
    unless_null $P5078, fallback4866
    nqp_get_sc_object $P5093, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5078, $P5093
  fallback4866:
    $P5066."pkg_add_attribute"($P5072, $P5078, $P101, $P102)
.annotate 'line', 2289
    nqp_get_sc_object $P5097, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5096, $P5097, "QAST"
    get_who $P5095, $P5096
    set $P5094, $P5095["Stmts"]
    unless_null $P5094, fallback4867
    nqp_get_sc_object $P5098, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5094, $P5098
  fallback4867:
    $P5099 = $P5094."new"()
    store_lex "$past", $P5099
    .return ($P5099) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1359718901.265") :anon :lex :outer("cuid_302_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2302
    .const 'Sub' $P5054 = 'cuid_463_1359718901.265' 
    capture_lex $P5054 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4881
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5005
  fallback4881:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4882
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback4882:
    unless $P5003 goto if1588_else4879 
.annotate 'line', 2305
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    if $I5001 goto unless1589_end4884 
.annotate 'line', 2306
.annotate 'line', 2307
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
  unless1589_end4884:
.annotate 'line', 2309
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback4885
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$W"]
    unless_null $P5012, fallback4886
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5015
  fallback4886:
    unless_null $P5012, vivi_15904887
    die "Contextual $*W not found"
    box $P5016, "Contextual $*W not found"
    set $P5012, $P5016
  vivi_15904887:
    set $P5011, $P5012
  fallback4885:
    new $P5017, 'ResizablePMCArray'
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4888
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5021
  fallback4888:
    set $P5019, $P5020["typename"]
    unless_null $P5019, fallback4889
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5022
  fallback4889:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4890
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5023
  fallback4890:
    set $S5002, $P5018
    box $P5024, $S5002
    push $P5017, $P5024
    $P5025 = $P5011."find_sym"($P5017)
    set $P101, $P5025
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1591_else4891 
    .const 'Sub' $P5026 = 'cuid_463_1359718901.265' 
    capture_lex $P5026
    $P5027 = $P5026($I5002)
    set $P5031, $P5027
    goto if1591_end4892
  if1591_else4891:
.annotate 'line', 2313
.annotate 'line', 2314
    find_lex $P5028, "$/"
    $P5029 = $P5028."CURSOR"()
    $P5030 = $P5029."panic"("Only native types are currently supported/checked")
    set $P5031, $P5030
  if1591_end4892:
    goto if1588_end4880
  if1588_else4879:
.annotate 'line', 2317
.annotate 'line', 2318
    find_lex $P5032, "$sigil"
    $P5033 = "&default_for"($P5032)
    set $P102, $P5033
  if1588_end4880:
.annotate 'line', 2320
    find_lex $P5035, "$BLOCK"
    set $P5034, $P5035[0]
    unless_null $P5034, fallback4893
    nqp_get_sc_object $P5036, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5034, $P5036
  fallback4893:
    nqp_get_sc_object $P5040, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback4894
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5037, $P5041
  fallback4894:
    find_lex $P5042, "$/"
.annotate 'line', 2322
    nqp_get_sc_object $P5046, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback4895
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5043, $P5047
  fallback4895:
    find_lex $P5048, "$name"
    $P5049 = $P5043."new"($P5048 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5050 = $P5037."new"($P5049, $P102, "bind" :named("op"), $P5042 :named("node"))
    $P5034."push"($P5050)
.annotate 'line', 2325
    find_lex $P5051, "$BLOCK"
    find_lex $P5052, "$name"
    $P5053 = $P5051."symbol"($P5052, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1359718901.265") :anon :lex :outer("cuid_464_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2310
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2311
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1359718901.265") :anon :lex :outer("cuid_302_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2330
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_303_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2336
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4905
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4905:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4906
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4906:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_304_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2337
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4907
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback4907:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4908
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback4908:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_305_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2339
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_469_1359718901.265' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_472_1359718901.265' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback4911
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback4911:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4912
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback4912:
    unless $P5004 goto if1593_else4909 
.annotate 'line', 2343
.annotate 'line', 2344
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1593_end4910
  if1593_else4909:
.annotate 'line', 2346
.annotate 'line', 2347
    unless_null _lex_param_1, fallback4913
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback4913:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4914
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback4914:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2348
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4917
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4918
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5016
  fallback4918:
    unless_null $P5013, vivi_15954919
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15954919:
    set $P5012, $P5013
  fallback4917:
    set $P5021, $P5012
    unless $P5012 goto if1594_end4916 
.annotate 'line', 2349
.annotate 'line', 2350
    set $P5018, $P101[1]
    unless_null $P5018, fallback4920
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5019
  fallback4920:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1594_end4916:
  if1593_end4910:
    set $P102, $P101
    unless_null _lex_param_1, fallback4923
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5023
  fallback4923:
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4924
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5024
  fallback4924:
    unless $P5022 goto if1596_else4921 
    .const 'Sub' $P5025 = 'cuid_469_1359718901.265' 
    capture_lex $P5025
    $P5026 = $P5025()
    goto if1596_end4922
  if1596_else4921:
.annotate 'line', 2447
.annotate 'line', 2448
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback5036
    nqp_get_sc_object $P5030, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback5037
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5031
  fallback5037:
    unless_null $P5028, vivi_16315038
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16315038:
    set $P5027, $P5028
  fallback5036:
    $P5033 = $P5027."is_precompilation_mode"()
    set $P5041, $P5033
    unless $P5033 goto if1630_end5035 
.annotate 'line', 2449
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback5039
    nqp_get_sc_object $P5037, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback5040
    nqp_get_sc_object $P5038, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5038
  fallback5040:
    unless_null $P5035, vivi_16325041
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_16325041:
    set $P5034, $P5035
  fallback5039:
    $P5040 = $P5034."create_code"($P101, "<anon>", 0)
    set $P5041, $P5040
  if1630_end5035:
  if1596_end4922:
.annotate 'line', 2453
    nqp_get_sc_object $P5045, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback5042
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5046
  fallback5042:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2456
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5045
    nqp_get_sc_object $P5049, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5049
  fallback5045:
    set $P5048, _lex_param_1["trait"]
    unless_null $P5048, fallback5046
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5050
  fallback5046:
    set $P5059, $P5048
    unless $P5048 goto if1633_end5044 
.annotate 'line', 2459
    unless_null _lex_param_1, fallback5047
    nqp_get_sc_object $P5055, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5055
  fallback5047:
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback5048
    nqp_get_sc_object $P5056, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5054, $P5056
  fallback5048:
    set $P5051, $P5054
    iter $P5053, $P5054
  for_next5049:
    unless $P5053, for_done5051
    shift $P5058, $P5053
  for_redo5050:
    .const 'Sub' $P5057 = 'cuid_472_1359718901.265' 
    capture_lex $P5057
    $P5051 = $P5057($P5058)
    goto for_next5049
  for_done5051:
    set $P5059, $P5051
  if1633_end5044:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1359718901.265") :anon :lex :outer("cuid_305_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2355
    .const 'Sub' $P5078 = 'cuid_468_1359718901.265' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_470_1359718901.265' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_471_1359718901.265' 
    capture_lex $P5078 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4925
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5005
  fallback4925:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4926
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback4926:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4927
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5007
  fallback4927:
    set $S5002, $P5002
.annotate 'line', 2356
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4928
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5011
  fallback4928:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4929
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5012
  fallback4929:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4930
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5013
  fallback4930:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2357
    find_lex $P5016, "$past"
    $P5016."name"($P101)
    find_dynamic_lex $P5017, "$*SCOPE"
    unless_null $P5017, fallback4937
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$SCOPE"]
    unless_null $P5018, fallback4938
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5021
  fallback4938:
    unless_null $P5018, vivi_16004939
    die "Contextual $*SCOPE not found"
    box $P5022, "Contextual $*SCOPE not found"
    set $P5018, $P5022
  vivi_16004939:
    set $P5017, $P5018
  fallback4937:
    set $S5004, $P5017
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1599_end4936 
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4940
    nqp_get_sc_object $P5026, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4941
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5027
  fallback4941:
    unless_null $P5024, vivi_16014942
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_16014942:
    set $P5023, $P5024
  fallback4940:
    set $S5005, $P5023
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1599_end4936:
    set $I5005, $I5003
    if $I5003 goto unless1598_end4934 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4943
    nqp_get_sc_object $P5032, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4944
    nqp_get_sc_object $P5033, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5030, $P5033
  fallback4944:
    unless_null $P5030, vivi_16024945
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_16024945:
    set $P5029, $P5030
  fallback4943:
    set $S5006, $P5029
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1598_end4934:
    unless $I5005 goto if1597_else4931 
.annotate 'line', 2358
    find_dynamic_lex $P5035, "$*MULTINESS"
    unless_null $P5035, fallback4948
    nqp_get_sc_object $P5038, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$MULTINESS"]
    unless_null $P5036, fallback4949
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5039
  fallback4949:
    unless_null $P5036, vivi_16044950
    die "Contextual $*MULTINESS not found"
    box $P5040, "Contextual $*MULTINESS not found"
    set $P5036, $P5040
  vivi_16044950:
    set $P5035, $P5036
  fallback4948:
    set $S5007, $P5035
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1603_else4946 
    .const 'Sub' $P5041 = 'cuid_468_1359718901.265' 
    capture_lex $P5041
    $P5042 = $P5041()
    goto if1603_end4947
  if1603_else4946:
    find_dynamic_lex $P5043, "$*MULTINESS"
    unless_null $P5043, fallback4986
    nqp_get_sc_object $P5046, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$MULTINESS"]
    unless_null $P5044, fallback4987
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5047
  fallback4987:
    unless_null $P5044, vivi_16164988
    die "Contextual $*MULTINESS not found"
    box $P5048, "Contextual $*MULTINESS not found"
    set $P5044, $P5048
  vivi_16164988:
    set $P5043, $P5044
  fallback4986:
    set $S5008, $P5043
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1615_else4984 
    .const 'Sub' $P5049 = 'cuid_470_1359718901.265' 
    capture_lex $P5049
    $P5050 = $P5049()
    set $P5053, $P5050
    goto if1615_end4985
  if1615_else4984:
    .const 'Sub' $P5051 = 'cuid_471_1359718901.265' 
    capture_lex $P5051
    $P5052 = $P5051()
    set $P5053, $P5052
  if1615_end4985:
  if1603_end4947:
.annotate 'line', 2436
    nqp_get_sc_object $P5057, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback5023
    nqp_get_sc_object $P5058, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5054, $P5058
  fallback5023:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    goto if1597_end4932
  if1597_else4931:
.annotate 'line', 2438
.annotate 'line', 2439
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback5024
    nqp_get_sc_object $P5065, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback5025
    nqp_get_sc_object $P5066, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5063, $P5066
  fallback5025:
    unless_null $P5063, vivi_16265026
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_16265026:
    set $P5062, $P5063
  fallback5024:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
  if1597_end4932:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1628_end5030 
    find_dynamic_lex $P5069, "$*MULTINESS"
    unless_null $P5069, fallback5031
    nqp_get_sc_object $P5072, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$MULTINESS"]
    unless_null $P5070, fallback5032
    nqp_get_sc_object $P5073, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5070, $P5073
  fallback5032:
    unless_null $P5070, vivi_16295033
    die "Contextual $*MULTINESS not found"
    box $P5074, "Contextual $*MULTINESS not found"
    set $P5070, $P5074
  vivi_16295033:
    set $P5069, $P5070
  fallback5031:
    set $S5014, $P5069
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1628_end5030:
    box $P5077, $I5010
    set $P5076, $P5077
    unless $I5010 goto if1627_end5028 
.annotate 'line', 2443
    find_lex $P5075, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5075
    set $P5076, $P5075
  if1627_end5028:
    .return ($P5076) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1359718901.265") :anon :lex :outer("cuid_469_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2359
    .const 'Sub' $P5048 = 'cuid_467_1359718901.265' 
    capture_lex $P5048 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4953
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4954
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5009
  fallback4954:
    unless_null $P5006, vivi_16064955
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_16064955:
    set $P5005, $P5006
  fallback4953:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1605_end4952 
.annotate 'line', 2361
    box $P5011, "a multi can not be our-scoped"
    die $P5011
  if1605_end4952:
.annotate 'line', 2363
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4956
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4957
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5016
  fallback4957:
    unless_null $P5013, vivi_16074958
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_16074958:
    set $P5012, $P5013
  fallback4956:
    $P5018 = $P5012."cur_lexpad"()
    find_lex $P5019, "$name"
    set $S5003, $P5019
    concat $S5002, "&", $S5003
    $P5020 = $P5018."symbol"($S5002)
    set $P102, $P5020
    set $P5021, $P102["proto"]
    unless_null $P5021, fallback4961
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5022
  fallback4961:
    unless $P5021 goto if1608_else4959 
.annotate 'line', 2364
    set $P5023, $P102["value"]
    unless_null $P5023, fallback4962
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5024
  fallback4962:
    set $P101, $P5023
    goto if1608_end4960
  if1608_else4959:
    .const 'Sub' $P5025 = 'cuid_467_1359718901.265' 
    capture_lex $P5025
    $P5026 = $P5025()
  if1608_end4960:
.annotate 'line', 2393
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4977
    nqp_get_sc_object $P5030, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4978
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5031
  fallback4978:
    unless_null $P5028, vivi_16134979
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16134979:
    set $P5027, $P5028
  fallback4977:
    find_lex $P5033, "$past"
    find_lex $P5034, "$name"
    $P5035 = $P5027."create_code"($P5033, $P5034, 0)
    set $P103, $P5035
.annotate 'line', 2394
    find_lex $P5036, "$past"
    "&attach_multi_signature"($P103, $P5036)
.annotate 'line', 2397
    $P101."add_dispatchee"($P103)
.annotate 'line', 2400
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4980
    nqp_get_sc_object $P5040, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4981
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5041
  fallback4981:
    unless_null $P5038, vivi_16144982
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16144982:
    set $P5037, $P5038
  fallback4980:
    $P5043 = $P5037."cur_lexpad"()
    set $P104, $P5043
.annotate 'line', 2401
    set $P5044, $P104[0]
    unless_null $P5044, fallback4983
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5045
  fallback4983:
    find_lex $P5046, "$past"
    $P5047 = $P5044."push"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1359718901.265") :anon :lex :outer("cuid_468_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2369
    .const 'Sub' $P5018 = 'cuid_466_1359718901.265' 
    capture_lex $P5018 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2372
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4963
    nqp_get_sc_object $P5008, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4964
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5009
  fallback4964:
    unless_null $P5006, vivi_16094965
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_16094965:
    set $P5005, $P5006
  fallback4963:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4972:
    unless $P5004, for_done4974
    shift $P5013, $P5004
  for_redo4973:
    .const 'Sub' $P5012 = 'cuid_466_1359718901.265' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4972
  for_done4974:
    if $P101 goto unless1612_end4976 
.annotate 'line', 2384
.annotate 'line', 2385
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless1612_end4976:
    box $P5017, "Dispatcher derivation NYI"
    die $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1359718901.265") :anon :lex :outer("cuid_467_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2372
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2373
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4968
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5005
  fallback4968:
    unless $P5004 goto if1610_else4966 
.annotate 'line', 2374
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4969
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5007
  fallback4969:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1610_end4967
  if1610_else4966:
    set $P5012, $P101
    unless $P101 goto if1611_end4971 
.annotate 'line', 2378
.annotate 'line', 2379
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1611_end4971:
    set $P5013, $P5012
  if1610_end4967:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1359718901.265") :anon :lex :outer("cuid_469_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2403
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4991
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4992
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback4992:
    unless_null $P5004, vivi_16184993
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_16184993:
    set $P5003, $P5004
  fallback4991:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1617_end4990 
.annotate 'line', 2407
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
  if1617_end4990:
.annotate 'line', 2408
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4994
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4995
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5014
  fallback4995:
    unless_null $P5011, vivi_16194996
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16194996:
    set $P5010, $P5011
  fallback4994:
    find_lex $P5016, "$past"
    find_lex $P5017, "$name"
    $P5018 = $P5010."create_code"($P5016, $P5017, 1)
    set $P101, $P5018
.annotate 'line', 2409
    find_dynamic_lex $P5019, "$*W"
    unless_null $P5019, fallback4997
    nqp_get_sc_object $P5022, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$W"]
    unless_null $P5020, fallback4998
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5023
  fallback4998:
    unless_null $P5020, vivi_16204999
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5020, $P5024
  vivi_16204999:
    set $P5019, $P5020
  fallback4997:
    $P5025 = $P5019."cur_lexpad"()
    set $P102, $P5025
.annotate 'line', 2410
    set $P5026, $P102[0]
    unless_null $P5026, fallback5000
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5027
  fallback5000:
    nqp_get_sc_object $P5031, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Op"]
    unless_null $P5028, fallback5001
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5032
  fallback5001:
.annotate 'line', 2412
    nqp_get_sc_object $P5036, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback5002
    nqp_get_sc_object $P5037, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5033, $P5037
  fallback5002:
    find_lex $P5038, "$name"
    set $S5003, $P5038
    concat $S5002, "&", $S5003
    $P5039 = $P5033."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5040, "$past"
    $P5041 = $P5028."new"($P5039, $P5040, "bind" :named("op"))
    $P5026."push"($P5041)
.annotate 'line', 2415
    find_lex $P5042, "$name"
    set $S5005, $P5042
    concat $S5004, "&", $S5005
    $P5043 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1359718901.265") :anon :lex :outer("cuid_469_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2417
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2418
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5003
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5004
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback5004:
    unless_null $P5003, vivi_16215005
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16215005:
    set $P5002, $P5003
  fallback5003:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2419
    set $P5009, $P101[0]
    unless_null $P5009, fallback5006
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5010
  fallback5006:
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5007
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5007:
.annotate 'line', 2421
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5008
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5020
  fallback5008:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5009."push"($P5024)
.annotate 'line', 2424
    find_lex $P5025, "$name"
    set $S5004, $P5025
    concat $S5003, "&", $S5004
    $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback5011
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback5012
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5030
  fallback5012:
    unless_null $P5027, vivi_16235013
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_16235013:
    set $P5026, $P5027
  fallback5011:
    set $S5005, $P5026
    iseq $I5001, $S5005, "our"
    box $P5067, $I5001
    set $P5066, $P5067
    unless $I5001 goto if1622_end5010 
.annotate 'line', 2425
.annotate 'line', 2428
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback5014
    nqp_get_sc_object $P5035, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback5015
    nqp_get_sc_object $P5036, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5033, $P5036
  fallback5015:
    unless_null $P5033, vivi_16245016
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_16245016:
    set $P5032, $P5033
  fallback5014:
    find_dynamic_lex $P5038, "$*PACKAGE"
    unless_null $P5038, fallback5017
    nqp_get_sc_object $P5041, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$PACKAGE"]
    unless_null $P5039, fallback5018
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5042
  fallback5018:
    unless_null $P5039, vivi_16255019
    die "Contextual $*PACKAGE not found"
    box $P5043, "Contextual $*PACKAGE not found"
    set $P5039, $P5043
  vivi_16255019:
    set $P5038, $P5039
  fallback5017:
    find_lex $P5044, "$name"
    find_lex $P5045, "$past"
    $P5032."install_package_routine"($P5038, $P5044, $P5045)
.annotate 'line', 2429
    set $P5046, $P101[0]
    unless_null $P5046, fallback5020
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5046, $P5047
  fallback5020:
    nqp_get_sc_object $P5051, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback5021
    nqp_get_sc_object $P5052, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5048, $P5052
  fallback5021:
.annotate 'line', 2431
    new $P5053, 'ResizablePMCArray'
    find_lex $P5054, "$name"
    push $P5053, $P5054
    find_lex $P5055, "$/"
    $P5056 = "&lexical_package_lookup"($P5053, $P5055)
.annotate 'line', 2432
    nqp_get_sc_object $P5060, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback5022
    nqp_get_sc_object $P5061, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5057, $P5061
  fallback5022:
    find_lex $P5062, "$name"
    set $S5007, $P5062
    concat $S5006, "&", $S5007
    $P5063 = $P5057."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5064 = $P5048."new"($P5056, $P5063, "bind" :named("op"))
    $P5065 = $P5046."push"($P5064)
    set $P5066, $P5065
  if1622_end5010:
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1359718901.265") :anon :lex :outer("cuid_305_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2460
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_306_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2465
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_473_1359718901.265' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_474_1359718901.265' 
    capture_lex $P5091 
    .lex "$past", $P101 
    .lex "$name", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback5054
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback5054:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback5055
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback5055:
    unless $P5004 goto if1634_else5052 
.annotate 'line', 2469
.annotate 'line', 2470
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1634_end5053
  if1634_else5052:
.annotate 'line', 2472
.annotate 'line', 2473
    unless_null _lex_param_1, fallback5056
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback5056:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback5057
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback5057:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2474
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback5060
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback5061
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5016
  fallback5061:
    unless_null $P5013, vivi_16365062
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16365062:
    set $P5012, $P5013
  fallback5060:
    set $P5021, $P5012
    unless $P5012 goto if1635_end5059 
.annotate 'line', 2475
.annotate 'line', 2476
    set $P5018, $P101[1]
    unless_null $P5018, fallback5063
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5019
  fallback5063:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1635_end5059:
  if1634_end5053:
    set $P5022, $P101["signature_has_invocant"]
    unless_null $P5022, fallback5066
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5023
  fallback5066:
    if $P5022 goto unless1637_end5065 
.annotate 'line', 2481
.annotate 'line', 2482
    set $P5024, $P101[0]
    unless_null $P5024, fallback5067
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5025
  fallback5067:
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5068
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5030
  fallback5068:
    find_dynamic_lex $P5031, "$*PACKAGE"
    unless_null $P5031, fallback5069
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$PACKAGE"]
    unless_null $P5032, fallback5070
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5035
  fallback5070:
    unless_null $P5032, vivi_16385071
    die "Contextual $*PACKAGE not found"
    box $P5036, "Contextual $*PACKAGE not found"
    set $P5032, $P5036
  vivi_16385071:
    set $P5031, $P5032
  fallback5069:
    $P5037 = $P5026."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5031 :named("returns"))
    $P5038 = $P5024."unshift"($P5037)
  unless1637_end5065:
.annotate 'line', 2487
    $P101."symbol"("self", "lexical" :named("scope"))
    box $P5039, ""
    set $P102, $P5039
    unless_null _lex_param_1, fallback5074
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5041
  fallback5074:
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback5075
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5040, $P5042
  fallback5075:
    unless $P5040 goto if1639_else5072 
.annotate 'line', 2491
    unless_null _lex_param_1, fallback5076
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5044
  fallback5076:
    set $P5043, _lex_param_1["private"]
    unless_null $P5043, fallback5077
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5043, $P5045
  fallback5077:
    set $S5002, $P5043
.annotate 'line', 2492
    unless_null _lex_param_1, fallback5078
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5048
  fallback5078:
    set $P5047, _lex_param_1["deflongname"]
    unless_null $P5047, fallback5079
    nqp_get_sc_object $P5049, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5047, $P5049
  fallback5079:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback5080
    nqp_get_sc_object $P5050, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5046, $P5050
  fallback5080:
    $P5051 = $P5046."ast"()
    set $S5003, $P5051
    concat $S5001, $S5002, $S5003
    box $P5052, $S5001
    set $P102, $P5052
    goto if1639_end5073
  if1639_else5072:
    unless_null _lex_param_1, fallback5083
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5054
  fallback5083:
    set $P5053, _lex_param_1["latename"]
    unless_null $P5053, fallback5084
    nqp_get_sc_object $P5055, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5053, $P5055
  fallback5084:
    set $P5068, $P5053
    unless $P5053 goto if1640_end5082 
.annotate 'line', 2494
    find_dynamic_lex $P5056, "$*PKGDECL"
    unless_null $P5056, fallback5087
    nqp_get_sc_object $P5059, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PKGDECL"]
    unless_null $P5057, fallback5088
    nqp_get_sc_object $P5060, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5057, $P5060
  fallback5088:
    unless_null $P5057, vivi_16425089
    die "Contextual $*PKGDECL not found"
    box $P5061, "Contextual $*PKGDECL not found"
    set $P5057, $P5061
  vivi_16425089:
    set $P5056, $P5057
  fallback5087:
    set $S5004, $P5056
    isne $I5001, $S5004, "role"
    unless $I5001 goto if1641_end5086 
.annotate 'line', 2495
.annotate 'line', 2496
    $P5062 = _lex_param_1."CURSOR"()
    $P5063 = $P5062."panic"("Late-bound method name only valid in role")
  if1641_end5086:
    unless_null _lex_param_1, fallback5090
    nqp_get_sc_object $P5065, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5065
  fallback5090:
    set $P5064, _lex_param_1["latename"]
    unless_null $P5064, fallback5091
    nqp_get_sc_object $P5066, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5064, $P5066
  fallback5091:
    set $S5006, $P5064
    concat $S5005, "!!LATENAME!!", $S5006
    box $P5067, $S5005
    set $P102, $P5067
    set $P5068, $P102
  if1640_end5082:
  if1639_end5073:
    set $S5007, $P102
    isne $I5002, $S5007, ""
    unless $I5002 goto if1643_end5093 
    .const 'Sub' $P5069 = 'cuid_473_1359718901.265' 
    capture_lex $P5069
    $P5070 = $P5069()
  if1643_end5093:
.annotate 'line', 2519
    nqp_get_sc_object $P5074, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Op"]
    unless_null $P5071, fallback5127
    nqp_get_sc_object $P5075, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5071, $P5075
  fallback5127:
    $P5076 = $P5071."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5076
    set $P103["sink"], $P101
    set $P103["block_past"], $P101
    set $P5077, $P101["code_obj"]
    unless_null $P5077, fallback5128
    nqp_get_sc_object $P5078, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5077, $P5078
  fallback5128:
    set $P103["code_obj"], $P5077
.annotate 'line', 2523
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5131
    nqp_get_sc_object $P5080, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5080
  fallback5131:
    set $P5079, _lex_param_1["trait"]
    unless_null $P5079, fallback5132
    nqp_get_sc_object $P5081, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5079, $P5081
  fallback5132:
    set $P5090, $P5079
    unless $P5079 goto if1656_end5130 
.annotate 'line', 2524
    unless_null _lex_param_1, fallback5133
    nqp_get_sc_object $P5086, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5086
  fallback5133:
    set $P5085, _lex_param_1["trait"]
    unless_null $P5085, fallback5134
    nqp_get_sc_object $P5087, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5085, $P5087
  fallback5134:
    set $P5082, $P5085
    iter $P5084, $P5085
  for_next5135:
    unless $P5084, for_done5137
    shift $P5089, $P5084
  for_redo5136:
    .const 'Sub' $P5088 = 'cuid_474_1359718901.265' 
    capture_lex $P5088
    $P5082 = $P5088($P5089)
    goto for_next5135
  for_done5137:
    set $P5090, $P5082
  if1656_end5130:
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1359718901.265") :anon :lex :outer("cuid_306_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2500
    .lex "$meta_meth", $P101 
    .lex "$is_dispatcher", $P102 
    .lex "$code", $P103 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
.annotate 'line', 2502
    find_lex $P5004, "$past"
    find_lex $P5005, "$name"
    $P5004."name"($P5005)
    find_dynamic_lex $P5006, "$*MULTINESS"
    unless_null $P5006, fallback5096
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$MULTINESS"]
    unless_null $P5007, fallback5097
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5010
  fallback5097:
    unless_null $P5007, vivi_16455098
    die "Contextual $*MULTINESS not found"
    box $P5011, "Contextual $*MULTINESS not found"
    set $P5007, $P5011
  vivi_16455098:
    set $P5006, $P5007
  fallback5096:
    set $S5001, $P5006
    iseq $I5001, $S5001, "multi"
    unless $I5001 goto if1644_else5094 
    set $S5002, "add_multi_method"
    goto if1644_end5095
  if1644_else5094:
    set $S5002, "add_method"
  if1644_end5095:
    box $P5012, $S5002
    set $P101, $P5012
    find_dynamic_lex $P5013, "$*MULTINESS"
    unless_null $P5013, fallback5099
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$MULTINESS"]
    unless_null $P5014, fallback5100
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5017
  fallback5100:
    unless_null $P5014, vivi_16465101
    die "Contextual $*MULTINESS not found"
    box $P5018, "Contextual $*MULTINESS not found"
    set $P5014, $P5018
  vivi_16465101:
    set $P5013, $P5014
  fallback5099:
    set $S5003, $P5013
    iseq $I5002, $S5003, "proto"
    box $P5019, $I5002
    set $P102, $P5019
.annotate 'line', 2507
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5102
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5103
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5024
  fallback5103:
    unless_null $P5021, vivi_16475104
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16475104:
    set $P5020, $P5021
  fallback5102:
    find_lex $P5026, "$past"
    find_lex $P5027, "$name"
    $P5028 = $P5020."create_code"($P5026, $P5027, $P102)
    set $P103, $P5028
    find_dynamic_lex $P5029, "$*MULTINESS"
    unless_null $P5029, fallback5107
    nqp_get_sc_object $P5032, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$MULTINESS"]
    unless_null $P5030, fallback5108
    nqp_get_sc_object $P5033, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5030, $P5033
  fallback5108:
    unless_null $P5030, vivi_16495109
    die "Contextual $*MULTINESS not found"
    box $P5034, "Contextual $*MULTINESS not found"
    set $P5030, $P5034
  vivi_16495109:
    set $P5029, $P5030
  fallback5107:
    set $S5004, $P5029
    iseq $I5003, $S5004, "multi"
    unless $I5003 goto if1648_end5106 
.annotate 'line', 2508
    find_lex $P5035, "$past"
    $P5036 = "&attach_multi_signature"($P103, $P5035)
  if1648_end5106:
.annotate 'line', 2509
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5110
    nqp_get_sc_object $P5040, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5111
    nqp_get_sc_object $P5041, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5041
  fallback5111:
    unless_null $P5038, vivi_16505112
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16505112:
    set $P5037, $P5038
  fallback5110:
    find_dynamic_lex $P5043, "$*PACKAGE"
    unless_null $P5043, fallback5113
    nqp_get_sc_object $P5046, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$PACKAGE"]
    unless_null $P5044, fallback5114
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5047
  fallback5114:
    unless_null $P5044, vivi_16515115
    die "Contextual $*PACKAGE not found"
    box $P5048, "Contextual $*PACKAGE not found"
    set $P5044, $P5048
  vivi_16515115:
    set $P5043, $P5044
  fallback5113:
    find_lex $P5049, "$name"
    $P5037."pkg_add_method"($P5043, $P101, $P5049, $P103)
    find_lex $P5050, "$past"
    set $P5050["code_obj"], $P103
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback5118
    nqp_get_sc_object $P5054, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback5119
    nqp_get_sc_object $P5055, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5052, $P5055
  fallback5119:
    unless_null $P5052, vivi_16535120
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_16535120:
    set $P5051, $P5052
  fallback5118:
    set $S5005, $P5051
    iseq $I5004, $S5005, "our"
    box $P5073, $I5004
    set $P5072, $P5073
    unless $I5004 goto if1652_end5117 
.annotate 'line', 2513
.annotate 'line', 2514
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback5121
    nqp_get_sc_object $P5060, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback5122
    nqp_get_sc_object $P5061, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5058, $P5061
  fallback5122:
    unless_null $P5058, vivi_16545123
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_16545123:
    set $P5057, $P5058
  fallback5121:
    find_dynamic_lex $P5063, "$*PACKAGE"
    unless_null $P5063, fallback5124
    nqp_get_sc_object $P5066, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["$PACKAGE"]
    unless_null $P5064, fallback5125
    nqp_get_sc_object $P5067, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5064, $P5067
  fallback5125:
    unless_null $P5064, vivi_16555126
    die "Contextual $*PACKAGE not found"
    box $P5068, "Contextual $*PACKAGE not found"
    set $P5064, $P5068
  vivi_16555126:
    set $P5063, $P5064
  fallback5124:
    find_lex $P5069, "$name"
    find_lex $P5070, "$past"
    $P5071 = $P5057."install_package_routine"($P5063, $P5069, $P5070)
    set $P5072, $P5071
  if1652_end5117:
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1359718901.265") :anon :lex :outer("cuid_306_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2525
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_307_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2557
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_475_1359718901.265' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_476_1359718901.265' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 2558
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5138
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5139
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback5139:
    unless_null $P5004, vivi_16575140
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16575140:
    set $P5003, $P5004
  fallback5138:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback5141
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5011
  fallback5141:
    set $P102, $P5010
    unless_null _lex_param_1, fallback5144
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5013
  fallback5144:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback5145
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5014
  fallback5145:
    unless $P5012 goto if1658_end5143 
    .const 'Sub' $P5015 = 'cuid_475_1359718901.265' 
    capture_lex $P5015
    $P5016 = $P5015()
  if1658_end5143:
    unless_null _lex_param_1, fallback5152
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5021
  fallback5152:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback5153
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5022
  fallback5153:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next5154:
    unless $P5019, for_done5156
    shift $P5024, $P5019
  for_redo5155:
    .const 'Sub' $P5023 = 'cuid_476_1359718901.265' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next5154
  for_done5156:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1359718901.265") :anon :lex :outer("cuid_307_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2560
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2561
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5146
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5005
  fallback5146:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback5147
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback5147:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5148
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5007
  fallback5148:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2562
    find_lex $P5009, "$BLOCKINIT"
    $P5009."push"($P101)
.annotate 'line', 2563
    find_lex $P5010, "$BLOCKINIT"
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5149
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5149:
.annotate 'line', 2565
    nqp_get_sc_object $P5019, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5150
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5016, $P5020
  fallback5150:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2566
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback5151
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5026
  fallback5151:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5010."push"($P5029)
    find_lex $P5030, "$BLOCK"
    box $P5031, 1
    set $P5030["signature_has_invocant"], $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1359718901.265") :anon :lex :outer("cuid_307_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2570
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_308_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2573
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_478_1359718901.265' 
    capture_lex $P5092 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5157
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5004
  fallback5157:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback5158
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback5158:
    set $P101, $P5003
    unless_null _lex_param_1, fallback5161
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5161:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback5162
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5162:
    unless $P5006 goto if1659_else5159 
.annotate 'line', 2576
.annotate 'line', 2577
    unless_null _lex_param_1, fallback5163
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5010
  fallback5163:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback5164
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5011
  fallback5164:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1660_end5166 
.annotate 'line', 2578
.annotate 'line', 2579
    unless_null _lex_param_1, fallback5167
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5016
  fallback5167:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback5168
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5017
  fallback5168:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback5169
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5018
  fallback5169:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback5170
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5019
  fallback5170:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1660_end5166:
    goto if1659_end5160
  if1659_else5159:
.annotate 'line', 2582
.annotate 'line', 2583
    unless_null _lex_param_1, fallback5171
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5025
  fallback5171:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback5172
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5024, $P5026
  fallback5172:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1661_else5173 
.annotate 'line', 2584
.annotate 'line', 2585
    $P102."slurpy"(1)
.annotate 'line', 2586
    unless_null _lex_param_1, fallback5175
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5030
  fallback5175:
    set $P5029, _lex_param_1["param_var"]
    unless_null $P5029, fallback5176
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5029, $P5031
  fallback5176:
    set $P5028, $P5029["sigil"]
    unless_null $P5028, fallback5177
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5032
  fallback5177:
    set $S5003, $P5028
    iseq $I5003, $S5003, "%"
    $P5033 = $P102."named"($I5003)
    set $P5043, $P5033
    goto if1661_end5174
  if1661_else5173:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5042, $I5004
    set $P5041, $P5042
    unless $I5004 goto if1662_end5179 
.annotate 'line', 2588
.annotate 'line', 2589
    unless_null _lex_param_1, fallback5180
    nqp_get_sc_object $P5036, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5036
  fallback5180:
    set $P5035, _lex_param_1["param_var"]
    unless_null $P5035, fallback5181
    nqp_get_sc_object $P5037, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5035, $P5037
  fallback5181:
    set $P5034, $P5035["sigil"]
    unless_null $P5034, fallback5182
    nqp_get_sc_object $P5038, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5034, $P5038
  fallback5182:
    $P5039 = "&default_for"($P5034)
    $P5040 = $P102."default"($P5039)
    set $P5041, $P5040
  if1662_end5179:
    set $P5043, $P5041
  if1661_end5174:
  if1659_end5160:
    unless_null _lex_param_1, fallback5185
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5045
  fallback5185:
    set $P5044, _lex_param_1["default_value"]
    unless_null $P5044, fallback5186
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5046
  fallback5186:
    unless $P5044 goto if1663_end5184 
.annotate 'line', 2592
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    unless $I5005 goto if1664_end5188 
.annotate 'line', 2593
.annotate 'line', 2594
    $P5047 = _lex_param_1."CURSOR"()
    $P5048 = $P5047."panic"("Can't put default on slurpy parameter")
  if1664_end5188:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    unless $I5006 goto if1665_end5190 
.annotate 'line', 2596
.annotate 'line', 2597
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on required parameter")
  if1665_end5190:
.annotate 'line', 2599
    unless_null _lex_param_1, fallback5191
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5054
  fallback5191:
    set $P5053, _lex_param_1["default_value"]
    unless_null $P5053, fallback5192
    nqp_get_sc_object $P5055, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5053, $P5055
  fallback5192:
    set $P5052, $P5053[0]
    unless_null $P5052, fallback5193
    nqp_get_sc_object $P5056, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5052, $P5056
  fallback5193:
    set $P5051, $P5052["EXPR"]
    unless_null $P5051, fallback5194
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5051, $P5057
  fallback5194:
    $P5058 = $P5051."ast"()
    $P5059 = $P102."default"($P5058)
  if1663_end5184:
.annotate 'line', 2601
    $P5060 = $P102."default"()
    if $P5060 goto unless1666_end5196 
    find_dynamic_lex $P5061, "$*W"
    unless_null $P5061, fallback5197
    nqp_get_sc_object $P5064, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$W"]
    unless_null $P5062, fallback5198
    nqp_get_sc_object $P5065, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5062, $P5065
  fallback5198:
    unless_null $P5062, vivi_16675199
    die "Contextual $*W not found"
    box $P5066, "Contextual $*W not found"
    set $P5062, $P5066
  vivi_16675199:
    set $P5061, $P5062
  fallback5197:
    $P5067 = $P5061."cur_lexpad"()
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback5200
    nqp_get_sc_object $P5071, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback5201
    nqp_get_sc_object $P5072, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5069, $P5072
  fallback5201:
    unless_null $P5069, vivi_16685202
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_16685202:
    set $P5068, $P5069
  fallback5200:
    $P5074 = $P5068."cur_lexpad"()
    $P5075 = $P5074."arity"()
    set $N5002, $P5075
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5076 = $P5067."arity"($N5001)
  unless1666_end5196:
    unless_null _lex_param_1, fallback5205
    nqp_get_sc_object $P5078, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5078
  fallback5205:
    set $P5077, _lex_param_1["typename"]
    unless_null $P5077, fallback5206
    nqp_get_sc_object $P5079, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5077, $P5079
  fallback5206:
    unless $P5077 goto if1669_end5204 
    .const 'Sub' $P5080 = 'cuid_478_1359718901.265' 
    capture_lex $P5080
    $P5081 = $P5080()
  if1669_end5204:
    unless_null _lex_param_1, fallback5223
    nqp_get_sc_object $P5083, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5083
  fallback5223:
    set $P5082, _lex_param_1["definedness"]
    unless_null $P5082, fallback5224
    nqp_get_sc_object $P5084, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5082, $P5084
  fallback5224:
    unless $P5082 goto if1674_end5222 
.annotate 'line', 2616
    unless_null _lex_param_1, fallback5225
    nqp_get_sc_object $P5087, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5087
  fallback5225:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback5226
    nqp_get_sc_object $P5088, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5086, $P5088
  fallback5226:
    set $P5085, $P5086[0]
    unless_null $P5085, fallback5227
    nqp_get_sc_object $P5089, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5085, $P5089
  fallback5227:
    set $S5007, $P5085
    box $P5090, $S5007
    set $P102["definedness"], $P5090
  if1674_end5222:
.annotate 'line', 2620
    $P5091 = _lex_param_1."!make"($P102)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1359718901.265") :anon :lex :outer("cuid_308_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2604
    .const 'Sub' $P5015 = 'cuid_477_1359718901.265' 
    capture_lex $P5015 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2605
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5207
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5005
  fallback5207:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback5208
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback5208:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5209
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5007
  fallback5209:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2606
    find_lex $P5010, "$past"
    $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto if1670_end5211 
    .const 'Sub' $P5011 = 'cuid_477_1359718901.265' 
    capture_lex $P5011
    $P5012 = $P5011($P5014)
    set $P5013, $P5012
  if1670_end5211:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1359718901.265") :anon :lex :outer("cuid_478_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2607
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2608
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5212
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5213
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback5213:
    unless_null $P5002, vivi_16715214
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16715214:
    set $P5001, $P5002
  fallback5212:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2609
    find_lex $P5011, "$past"
    $P5012 = $P5011."default"()
    set $P5017, $P5012
    unless $P5012 goto if1673_end5218 
    find_lex $P5014, "$/"
    unless_null $P5014, fallback5219
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5015
  fallback5219:
    set $P5013, $P5014["default_value"]
    unless_null $P5013, fallback5220
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5016
  fallback5220:
    isfalse $I5001, $P5013
    box $P5018, $I5001
    set $P5017, $P5018
  if1673_end5218:
    set $P5022, $P5017
    unless $P5017 goto if1672_end5216 
.annotate 'line', 2610
    find_lex $P5019, "$past"
    $P5020 = "&default_value_for_prim"(_lex_param_0)
    $P5021 = $P5019."default"($P5020)
    set $P5022, $P5021
  if1672_end5216:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_309_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2623
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2625
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5228
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5008
  fallback5228:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2627
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5229
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5230
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5014
  fallback5230:
    unless_null $P5011, vivi_16755231
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16755231:
    set $P5010, $P5011
  fallback5229:
    $P5016 = $P5010."cur_lexpad"()
    $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2628
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_310_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2631
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2632
    unless_null _lex_param_1, fallback5232
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback5232:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5233
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback5233:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2633
    unless_null _lex_param_1, fallback5234
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5008
  fallback5234:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5235
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5009
  fallback5235:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5236
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5236:
    set $S5001, $P5006
    $P101."named"($S5001)
.annotate 'line', 2634
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_311_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2637
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_479_1359718901.265' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 2641
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5237
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5007
  fallback5237:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_16785243
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_479_1359718901.265' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_16775242
  catch_handler_16785243:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_16775242
  skip_handler_16775242:
    set $P5016, $P102
    if $P102 goto unless1679_end5245 
.annotate 'line', 2648
.annotate 'line', 2649
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1679_end5245:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1359718901.265") :anon :lex :outer("cuid_311_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2643
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2644
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5238
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5239
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback5239:
    unless_null $P5003, vivi_16765240
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16765240:
    set $P5002, $P5003
  fallback5238:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2645
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5241
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5241:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5010."!make"($P5016)
    box $P5017, 1
    store_lex "$found", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_312_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2653
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2654
    unless_null _lex_param_1, fallback5246
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5246:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5247
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5247:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_313_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2657
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_481_1359718901.265' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_483_1359718901.265' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_484_1359718901.265' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5250
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5250:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5251
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5251:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1680_else5248 
    .const 'Sub' $P5004 = 'cuid_481_1359718901.265' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5024, $P5005
    goto if1680_end5249
  if1680_else5248:
    unless_null _lex_param_1, fallback5275
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5275:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5276
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5276:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1686_else5273 
    .const 'Sub' $P5009 = 'cuid_483_1359718901.265' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5023, $P5010
    goto if1686_end5274
  if1686_else5273:
    unless_null _lex_param_1, fallback5292
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5012
  fallback5292:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5293
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5013
  fallback5293:
    set $S5003, $P5011
    iseq $I5003, $S5003, "export"
    unless $I5003 goto if1690_else5290 
.annotate 'line', 2683
.annotate 'line', 2684
    .const 'Sub' $P5015 = 'cuid_484_1359718901.265' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5022, $P5016
    goto if1690_end5291
  if1690_else5290:
.annotate 'line', 2691
.annotate 'line', 2692
    $P5017 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5305
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5019
  fallback5305:
    set $P5018, _lex_param_1["longname"]
    unless_null $P5018, fallback5306
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5020
  fallback5306:
    set $S5006, $P5018
    concat $S5005, "Trait '", $S5006
    concat $S5004, $S5005, "' not implemented"
    $P5021 = $P5017."panic"($S5004)
    set $P5022, $P5021
  if1690_end5291:
    set $P5023, $P5022
  if1686_end5274:
    set $P5024, $P5023
  if1680_end5249:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1359718901.265") :anon :lex :outer("cuid_313_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2658
    .const 'Sub' $P5039 = 'cuid_480_1359718901.265' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P104, $P5004
.annotate 'line', 2660
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5252
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5008
  fallback5252:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5253
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5009
  fallback5253:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5254
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5010
  fallback5254:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2662
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5257
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback5257:
    $P5017 = $P5012."ACCEPTS"($P101)
    if $P5017 goto unless1681_end5256 
.annotate 'line', 2661
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless1681_end5256:
.annotate 'line', 2663
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5258
    nqp_get_sc_object $P5025, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5259
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5026
  fallback5259:
    unless_null $P5023, vivi_16825260
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_16825260:
    set $P5022, $P5023
  fallback5258:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback5261
    nqp_get_sc_object $P5031, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback5262
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5029, $P5032
  fallback5262:
    unless_null $P5029, vivi_16835263
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_16835263:
    set $P5028, $P5029
  fallback5261:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2666
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_480_1359718901.265' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1359718901.265") :anon :lex :outer("cuid_481_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2666
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2667
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5264
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5265
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback5265:
    unless_null $P5002, vivi_16845266
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16845266:
    set $P5001, $P5002
  fallback5264:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2668
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5268
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5012
  fallback5268:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5267
.annotate 'line', 2669
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5269
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5270
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5017
  fallback5270:
    unless_null $P5014, vivi_16855271
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_16855271:
    set $P5013, $P5014
  fallback5269:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5272
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5021
  fallback5272:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5267:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1359718901.265") :anon :lex :outer("cuid_313_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2672
    .const 'Sub' $P5031 = 'cuid_482_1359718901.265' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
.annotate 'line', 2674
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5277
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5007
  fallback5277:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5278
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5008
  fallback5278:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5279
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5009
  fallback5279:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2676
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5282
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5282:
    $P5016 = $P5011."ACCEPTS"($P101)
    if $P5016 goto unless1687_end5281 
.annotate 'line', 2675
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless1687_end5281:
.annotate 'line', 2677
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback5283
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback5284
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5022, $P5025
  fallback5284:
    unless_null $P5022, vivi_16885285
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_16885285:
    set $P5021, $P5022
  fallback5283:
    set $P103, $P5021
.annotate 'line', 2679
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_482_1359718901.265' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1359718901.265") :anon :lex :outer("cuid_483_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2679
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2680
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5286
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5287
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback5287:
    unless_null $P5002, vivi_16895288
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16895288:
    set $P5001, $P5002
  fallback5286:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5289
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5010
  fallback5289:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_484_1359718901.265") :anon :lex :outer("cuid_313_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2684
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 2685
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2686
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5294
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5005
  fallback5294:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5295
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5296
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5014
  fallback5296:
    unless_null $P5011, vivi_16915297
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_16915297:
    set $P5010, $P5011
  fallback5295:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5298
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5016
  fallback5298:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5300
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5019
  fallback5300:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5299
.annotate 'line', 2688
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5301
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5302
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5024
  fallback5302:
    unless_null $P5021, vivi_16925303
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16925303:
    set $P5020, $P5021
  fallback5301:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5304
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5027
  fallback5304:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5299:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_314_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2696
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5074 = 'cuid_486_1359718901.265' 
    capture_lex $P5074 
    if haz_param_5, default5387
    nqp_get_sc_object $P5073, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_2, $P5073
  default5387:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5309
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5004
  fallback5309:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5310
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback5310:
    unless $P5003 goto if1693_else5307 
.annotate 'line', 2698
.annotate 'line', 2699
    unless_null _lex_param_1, fallback5311
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5311:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5312
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5312:
    $P5009 = $P5006."ast"()
    set $S5001, $P5009
    box $P5010, $S5001
    set $P101, $P5010
    goto if1693_end5308
  if1693_else5307:
.annotate 'line', 2701
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback5315
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback5316
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5015
  fallback5316:
    unless_null $P5012, vivi_16955317
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_16955317:
    set $P5011, $P5012
  fallback5315:
    set $S5002, $P5011
    isne $I5001, $S5002, "role"
    unless $I5001 goto if1694_end5314 
.annotate 'line', 2702
.annotate 'line', 2703
    $P5017 = _lex_param_1."CURSOR"()
    $P5018 = $P5017."panic"("Late-bound method name only valid in role")
  if1694_end5314:
    unless_null _lex_param_1, fallback5318
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5020
  fallback5318:
    set $P5019, _lex_param_1["latename"]
    unless_null $P5019, fallback5319
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5021
  fallback5319:
    set $S5004, $P5019
    concat $S5003, "!!LATENAME!!", $S5004
    box $P5022, $S5003
    set $P101, $P5022
  if1693_end5308:
    unless_null _lex_param_1, fallback5322
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5024
  fallback5322:
    set $P5023, _lex_param_1["proto"]
    unless_null $P5023, fallback5323
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5025
  fallback5323:
    unless $P5023 goto if1696_else5320 
.annotate 'line', 2708
.annotate 'line', 2709
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback5324
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5030
  fallback5324:
.annotate 'line', 2711
    nqp_get_sc_object $P5034, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5325
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5031, $P5035
  fallback5325:
.annotate 'line', 2712
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5326
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5040
  fallback5326:
    $P5041 = $P5036."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2713
    nqp_get_sc_object $P5045, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback5327
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5046
  fallback5327:
    $P5047 = $P5042."new"($P101 :named("value"))
    $P5048 = $P5031."new"($P5041, $P5047, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5049 = $P5026."new"($P5048, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    set $P102, $P5049
.annotate 'line', 2720
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback5328
    nqp_get_sc_object $P5053, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback5329
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5051, $P5054
  fallback5329:
    unless_null $P5051, vivi_16975330
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_16975330:
    set $P5050, $P5051
  fallback5328:
    find_dynamic_lex $P5056, "$*PACKAGE"
    unless_null $P5056, fallback5331
    nqp_get_sc_object $P5059, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PACKAGE"]
    unless_null $P5057, fallback5332
    nqp_get_sc_object $P5060, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5057, $P5060
  fallback5332:
    unless_null $P5057, vivi_16985333
    die "Contextual $*PACKAGE not found"
    box $P5061, "Contextual $*PACKAGE not found"
    set $P5057, $P5061
  vivi_16985333:
    set $P5056, $P5057
  fallback5331:
.annotate 'line', 2721
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5334
    nqp_get_sc_object $P5065, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5335
    nqp_get_sc_object $P5066, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5063, $P5066
  fallback5335:
    unless_null $P5063, vivi_16995336
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_16995336:
    set $P5062, $P5063
  fallback5334:
    $P5068 = $P5062."create_code"($P102, $P101, 0, "NQPRegex" :named("code_type_name"))
    $P5069 = $P5050."pkg_add_method"($P5056, "add_method", $P101, $P5068)
    goto if1696_end5321
  if1696_else5320:
    .const 'Sub' $P5070 = 'cuid_486_1359718901.265' 
    capture_lex $P5070
    $P5071 = $P5070()
  if1696_end5321:
.annotate 'line', 2760
    $P5072 = _lex_param_1."!make"($P102)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_486_1359718901.265") :anon :lex :outer("cuid_314_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2723
    .const 'Sub' $P5130 = 'cuid_485_1359718901.265' 
    capture_lex $P5130 
    .lex "$block", $P101 
    .lex "$code", $P102 
    .lex "$regex", $P103 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
.annotate 'line', 2724
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5337
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5338
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5008
  fallback5338:
    unless_null $P5005, vivi_17005339
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17005339:
    set $P5004, $P5005
  fallback5337:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2725
    set $P5011, $P101[0]
    unless_null $P5011, fallback5340
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5012
  fallback5340:
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5341
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5017
  fallback5341:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."unshift"($P5018)
.annotate 'line', 2726
    set $P5019, $P101[0]
    unless_null $P5019, fallback5342
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5020
  fallback5342:
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5343
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback5343:
.annotate 'line', 2728
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5344
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5030
  fallback5344:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2729
    nqp_get_sc_object $P5035, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5345
    nqp_get_sc_object $P5036, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5036
  fallback5345:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2730
    set $P5039, $P101[0]
    unless_null $P5039, fallback5346
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5040
  fallback5346:
    nqp_get_sc_object $P5044, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5347
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5041, $P5045
  fallback5347:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2731
    set $P5047, $P101[0]
    unless_null $P5047, fallback5348
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5047, $P5048
  fallback5348:
    nqp_get_sc_object $P5052, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5349
    nqp_get_sc_object $P5053, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5049, $P5053
  fallback5349:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2732
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2733
    $P101."symbol"("$/", "lexical" :named("scope"))
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback5350
    nqp_get_sc_object $P5059, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%RX"]
    unless_null $P5057, fallback5351
    nqp_get_sc_object $P5061, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%RX"], $P5062
    set $P5057, $P5062
  fallback5351:
    unless_null $P5057, vivi_17015352
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5057, $P5063
  vivi_17015352:
    set $P5056, $P5057
  fallback5350:
    set $P5055, $P5056["code"]
    unless_null $P5055, fallback5353
    nqp_get_sc_object $P5064, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5064
  fallback5353:
    set $P102, $P5055
.annotate 'line', 2735
    find_dynamic_lex $P5066, "%*LANG"
    unless_null $P5066, fallback5354
    nqp_get_sc_object $P5069, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%LANG"]
    unless_null $P5067, fallback5355
    nqp_get_sc_object $P5071, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%LANG"], $P5072
    set $P5067, $P5072
  fallback5355:
    unless_null $P5067, vivi_17025356
    die "Contextual %*LANG not found"
    box $P5073, "Contextual %*LANG not found"
    set $P5067, $P5073
  vivi_17025356:
    set $P5066, $P5067
  fallback5354:
    set $P5065, $P5066["Regex-actions"]
    unless_null $P5065, fallback5357
    nqp_get_sc_object $P5074, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5065, $P5074
  fallback5357:
    find_lex $P5076, "$/"
    unless_null $P5076, fallback5358
    nqp_get_sc_object $P5077, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5076, $P5077
  fallback5358:
    set $P5075, $P5076["p6regex"]
    unless_null $P5075, fallback5359
    nqp_get_sc_object $P5078, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5075, $P5078
  fallback5359:
    $P5079 = $P5075."ast"()
    $P5080 = $P5065."qbuildsub"($P5079, $P101, $P102 :named("code_obj"))
    set $P103, $P5080
.annotate 'line', 2736
    find_lex $P5081, "$name"
    $P103."name"($P5081)
    find_dynamic_lex $P5082, "$*PKGDECL"
    unless_null $P5082, fallback5364
    nqp_get_sc_object $P5085, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PKGDECL"]
    unless_null $P5083, fallback5365
    nqp_get_sc_object $P5086, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5083, $P5086
  fallback5365:
    unless_null $P5083, vivi_17055366
    die "Contextual $*PKGDECL not found"
    box $P5087, "Contextual $*PKGDECL not found"
    set $P5083, $P5087
  vivi_17055366:
    set $P5082, $P5083
  fallback5364:
    set $P5095, $P5082
    unless $P5082 goto if1704_end5363 
    find_dynamic_lex $P5089, "$*PACKAGE"
    unless_null $P5089, fallback5367
    nqp_get_sc_object $P5092, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$PACKAGE"]
    unless_null $P5090, fallback5368
    nqp_get_sc_object $P5093, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5090, $P5093
  fallback5368:
    unless_null $P5090, vivi_17065369
    die "Contextual $*PACKAGE not found"
    box $P5094, "Contextual $*PACKAGE not found"
    set $P5090, $P5094
  vivi_17065369:
    set $P5089, $P5090
  fallback5367:
    get_how $P5088, $P5089
    can $I5001, $P5088, "add_method"
    box $P5096, $I5001
    set $P5095, $P5096
  if1704_end5363:
    unless $P5095 goto if1703_end5361 
.annotate 'line', 2738
.annotate 'line', 2740
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback5370
    nqp_get_sc_object $P5100, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback5371
    nqp_get_sc_object $P5101, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5098, $P5101
  fallback5371:
    unless_null $P5098, vivi_17075372
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_17075372:
    set $P5097, $P5098
  fallback5370:
    find_dynamic_lex $P5103, "$*PACKAGE"
    unless_null $P5103, fallback5373
    nqp_get_sc_object $P5106, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$PACKAGE"]
    unless_null $P5104, fallback5374
    nqp_get_sc_object $P5107, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5104, $P5107
  fallback5374:
    unless_null $P5104, vivi_17085375
    die "Contextual $*PACKAGE not found"
    box $P5108, "Contextual $*PACKAGE not found"
    set $P5104, $P5108
  vivi_17085375:
    set $P5103, $P5104
  fallback5373:
    find_lex $P5109, "$name"
    $P5110 = $P5097."pkg_add_method"($P5103, "add_method", $P5109, $P102)
  if1703_end5361:
    find_dynamic_lex $P5111, "$*PKGDECL"
    unless_null $P5111, fallback5378
    nqp_get_sc_object $P5114, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5113, $P5114
    set $P5112, $P5113["$PKGDECL"]
    unless_null $P5112, fallback5379
    nqp_get_sc_object $P5115, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5112, $P5115
  fallback5379:
    unless_null $P5112, vivi_17105380
    die "Contextual $*PKGDECL not found"
    box $P5116, "Contextual $*PKGDECL not found"
    set $P5112, $P5116
  vivi_17105380:
    set $P5111, $P5112
  fallback5378:
    set $S5001, $P5111
    iseq $I5002, $S5001, "role"
    unless $I5002 goto if1709_end5377 
    .const 'Sub' $P5117 = 'cuid_485_1359718901.265' 
    capture_lex $P5117
    $P5118 = $P5117()
  if1709_end5377:
.annotate 'line', 2754
    nqp_get_sc_object $P5122, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback5386
    nqp_get_sc_object $P5123, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5119, $P5123
  fallback5386:
.annotate 'line', 2756
    new $P5124, 'ResizablePMCArray'
    box $P5125, "NQPRegexMethod"
    push $P5124, $P5125
    find_lex $P5126, "$/"
    $P5127 = "&lexical_package_lookup"($P5124, $P5126)
    $P5128 = $P5119."new"($P5127, $P103, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5128
    find_lex $P5129, "$past"
    set $P5129["sink"], $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_485_1359718901.265") :anon :lex :outer("cuid_486_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2745
    .lex "$gen_nfa", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2746
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QRegex"
    get_who $P5003, $P5004
    set $P5002, $P5003["NFA"]
    unless_null $P5002, fallback5381
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback5381:
    $P5007 = $P5002."new"()
    set $P101, $P5007
.annotate 'line', 2747
    find_lex $P5009, "$/"
    unless_null $P5009, fallback5382
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5010
  fallback5382:
    set $P5008, $P5009["p6regex"]
    unless_null $P5008, fallback5383
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5011
  fallback5383:
    $P5012 = $P5008."ast"()
    $P101."addnode"($P5012, 1 :named("vars_as_generic"))
.annotate 'line', 2748
    $P5013 = $P101."generic"()
    set $P5016, $P5013
    unless $P5013 goto if1711_end5385 
.annotate 'line', 2749
    find_lex $P5014, "$code"
    $P5015 = $P5014."SET_GENERIC_NFA"($P101)
    set $P5016, $P5015
  if1711_end5385:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_315_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2764
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5390
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback5390:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5391
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback5391:
    unless $P5002 goto if1712_else5388 
.annotate 'line', 2765
    unless_null _lex_param_1, fallback5392
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5392:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5393
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5393:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5394
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5009
  fallback5394:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1712_end5389
  if1712_else5388:
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5395
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5395:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1712_end5389:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5398
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5019
  fallback5398:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5399
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5020
  fallback5399:
    unless $P5018 goto if1713_else5396 
.annotate 'line', 2766
.annotate 'line', 2767
    unless_null _lex_param_1, fallback5400
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5022
  fallback5400:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5401
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5023
  fallback5401:
    $P5024 = $P5021."ast"()
    $P101."unshift"($P5024)
.annotate 'line', 2768
    $P5025 = $P101."op"("callmethod")
    goto if1713_end5397
  if1713_else5396:
    unless_null _lex_param_1, fallback5404
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5027
  fallback5404:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback5405
    nqp_get_sc_object $P5028, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5028
  fallback5405:
    set $S5001, $P5026
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1714_else5402 
.annotate 'line', 2770
.annotate 'line', 2771
    $P5029 = $P101."op"("how")
    set $P5049, $P5029
    goto if1714_end5403
  if1714_else5402:
    unless_null _lex_param_1, fallback5408
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5031
  fallback5408:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5409
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5030, $P5032
  fallback5409:
    set $S5002, $P5030
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1715_else5406 
.annotate 'line', 2773
.annotate 'line', 2774
    $P5033 = $P101."op"("what")
    set $P5048, $P5033
    goto if1715_end5407
  if1715_else5406:
    unless_null _lex_param_1, fallback5412
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5035
  fallback5412:
    set $P5034, _lex_param_1["longname"]
    unless_null $P5034, fallback5413
    nqp_get_sc_object $P5036, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5034, $P5036
  fallback5413:
    set $S5003, $P5034
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1716_else5410 
.annotate 'line', 2776
.annotate 'line', 2777
    $P5037 = $P101."op"("who")
    set $P5047, $P5037
    goto if1716_end5411
  if1716_else5410:
    unless_null _lex_param_1, fallback5416
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5039
  fallback5416:
    set $P5038, _lex_param_1["longname"]
    unless_null $P5038, fallback5417
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5040
  fallback5417:
    set $S5004, $P5038
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1717_else5414 
.annotate 'line', 2779
.annotate 'line', 2780
    $P5041 = $P101."op"("reprname")
    set $P5046, $P5041
    goto if1717_end5415
  if1717_else5414:
.annotate 'line', 2782
.annotate 'line', 2783
    unless_null _lex_param_1, fallback5418
    nqp_get_sc_object $P5043, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5043
  fallback5418:
    set $P5042, _lex_param_1["longname"]
    unless_null $P5042, fallback5419
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5044
  fallback5419:
    set $S5005, $P5042
    $P101."name"($S5005)
.annotate 'line', 2784
    $P5045 = $P101."op"("callmethod")
    set $P5046, $P5045
  if1717_end5415:
    set $P5047, $P5046
  if1716_end5411:
    set $P5048, $P5047
  if1715_end5407:
    set $P5049, $P5048
  if1714_end5403:
  if1713_end5397:
.annotate 'line', 2786
    $P5050 = _lex_param_1."!make"($P101)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_316_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2791
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2792
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5420
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5420:
.annotate 'line', 2793
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5421
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5421:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "decont" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_317_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2796
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2797
    unless_null _lex_param_1, fallback5422
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback5422:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5423
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback5423:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2798
    unless_null _lex_param_1, fallback5424
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5424:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5425
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5425:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P101."name"($S5001)
.annotate 'line', 2799
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_318_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2802
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_487_1359718901.265' 
    capture_lex $P5049 
    .const 'Sub' $P5049 = 'cuid_488_1359718901.265' 
    capture_lex $P5049 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 2805
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5428
    nqp_get_sc_object $P5006, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5429
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback5429:
    unless_null $P5004, vivi_17195430
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_17195430:
    set $P5003, $P5004
  fallback5428:
    unless_null _lex_param_1, fallback5431
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5010
  fallback5431:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5432
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5011
  fallback5432:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1718_else5426 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_17245445
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2806
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_17225440
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2807
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5433
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5017
  fallback5433:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5434
    nqp_get_sc_object $P5021, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5435
    nqp_get_sc_object $P5022, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5022
  fallback5435:
    unless_null $P5019, vivi_17205436
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_17205436:
    set $P5018, $P5019
  fallback5434:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5437
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5026
  fallback5437:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5438
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5027
  fallback5438:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_17215439
  catch_handler_17225440:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_487_1359718901.265' 
    capture_lex $P10001
    $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10002
    goto skip_handler_17215439
  skip_handler_17215439:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_17235444
  catch_handler_17245445:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_17235444
  skip_handler_17235444:
    goto if1718_end5427
  if1718_else5426:
    .const 'Sub' $P5036 = 'cuid_488_1359718901.265' 
    capture_lex $P5036
    $P5037 = $P5036()
  if1718_end5427:
    set $P102, $P101
    unless_null _lex_param_1, fallback5451
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5039
  fallback5451:
    set $P5038, _lex_param_1["args"]
    unless_null $P5038, fallback5452
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5040
  fallback5452:
    unless $P5038 goto if1725_end5450 
.annotate 'line', 2820
.annotate 'line', 2821
    unless_null _lex_param_1, fallback5453
    nqp_get_sc_object $P5043, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5043
  fallback5453:
    set $P5042, _lex_param_1["args"]
    unless_null $P5042, fallback5454
    nqp_get_sc_object $P5044, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5044
  fallback5454:
    set $P5041, $P5042[0]
    unless_null $P5041, fallback5455
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5041, $P5045
  fallback5455:
    $P5046 = $P5041."ast"()
    set $P102, $P5046
.annotate 'line', 2822
    $P5047 = $P102."unshift"($P101)
  if1725_end5450:
.annotate 'line', 2824
    $P5048 = _lex_param_1."!make"($P102)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_487_1359718901.265") :anon :lex :outer("cuid_318_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2808
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2809
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5441
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5441:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5442
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5008
  fallback5442:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5443
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5009
  fallback5443:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_488_1359718901.265") :anon :lex :outer("cuid_318_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2813
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5446
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5006
  fallback5446:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5447
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5007
  fallback5447:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5448
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5008
  fallback5448:
    repr_clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2815
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_319_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2827
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5458
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5004
  fallback5458:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5459
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback5459:
    unless $P5003 goto if1726_else5456 
.annotate 'line', 2828
    unless_null _lex_param_1, fallback5460
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5008
  fallback5460:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5461
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5009
  fallback5461:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5462
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5462:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1726_end5457
  if1726_else5456:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1726_end5457:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5463
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5016
  fallback5463:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5464
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5015, $P5017
  fallback5464:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2831
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5465
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback5465:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_320_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2834
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2835
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5466
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5466:
    unless_null _lex_param_1, fallback5467
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5467:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5468
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5468:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_321_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2838
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback5469
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback5469:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5470
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback5470:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5473
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback5473:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5474
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback5474:
    unless $P5008 goto if1727_else5471 
.annotate 'line', 2840
    unless_null _lex_param_1, fallback5475
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5013
  fallback5475:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5476
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5014
  fallback5476:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5477
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5477:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1727_end5472
  if1727_else5471:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1727_end5472:
    set $P102, $P5019
.annotate 'line', 2841
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5478
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5024
  fallback5478:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2842
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_322_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2845
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2846
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5479
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5479:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_323_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2849
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5480
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5480:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5481
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5481:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_324_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2851
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5052 = 'cuid_490_1359718901.265' 
    capture_lex $P5052 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
.annotate 'line', 2852
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5482
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5008
  fallback5482:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5485
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5011
  fallback5485:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5486
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5012
  fallback5486:
    unless $P5010 goto if1728_end5484 
    .const 'Sub' $P5013 = 'cuid_490_1359718901.265' 
    capture_lex $P5013
    $P5014 = $P5013()
  if1728_end5484:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2861
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
  while1732_test5499:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto while1732_done5503 
  while1732_redo5501:
.annotate 'line', 2862
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback5508
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5019
  fallback5508:
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5509
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5024
  fallback5509:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1734_end5507 
.annotate 'line', 2863
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback5510
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5026
  fallback5510:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1734_end5507:
    unless $I5006 goto if1733_end5505 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback5511
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5029, $P5030
  fallback5511:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback5512
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5031
  fallback5512:
    set $P101[$I5007], $P5028
.annotate 'line', 2865
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback5513
    nqp_get_sc_object $P5033, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5033
  fallback5513:
    $P5032."flat"(1)
    set $I5011, $P102
    set $P5034, $P101[$I5011]
    unless_null $P5034, fallback5518
    nqp_get_sc_object $P5035, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5034, $P5035
  fallback5518:
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5519
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5040
  fallback5519:
    type_check $I5010, $P5034, $P5036
    set $I5014, $I5010
    unless $I5010 goto if1736_end5517 
.annotate 'line', 2867
    set $I5013, $P102
    set $P5041, $P101[$I5013]
    unless_null $P5041, fallback5520
    nqp_get_sc_object $P5042, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5041, $P5042
  fallback5520:
    $P5043 = $P5041."name"()
    set $S5003, $P5043
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1736_end5517:
    box $P5048, $I5014
    set $P5047, $P5048
    unless $I5014 goto if1735_end5515 
.annotate 'line', 2866
    set $I5015, $P102
    set $P5044, $P101[$I5015]
    unless_null $P5044, fallback5521
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5045
  fallback5521:
    $P5046 = $P5044."named"(1)
    set $P5047, $P5046
  if1735_end5515:
  if1733_end5505:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5049, $N5004
    set $P102, $P5049
    set $P5049, tmp_2
    goto while1732_test5499 
  while1732_done5503:
.annotate 'line', 2871
    $P5051 = _lex_param_1."!make"($P101)
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_490_1359718901.265") :anon :lex :outer("cuid_324_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2853
    .const 'Sub' $P5023 = 'cuid_489_1359718901.265' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2854
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5487
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5004
  fallback5487:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5488
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5005
  fallback5488:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5495
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback5495:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1731_end5494 
.annotate 'line', 2855
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1731_end5494:
    set $I5005, $I5003
    unless $I5003 goto if1730_end5492 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1730_end5492:
    unless $I5005 goto if1729_else5489 
.annotate 'line', 2856
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5496:
    unless $P5016, for_done5498
    shift $P5019, $P5016
  for_redo5497:
    .const 'Sub' $P5018 = 'cuid_489_1359718901.265' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5496
  for_done5498:
    set $P5022, $P5014
    goto if1729_end5490
  if1729_else5489:
.annotate 'line', 2858
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1729_end5490:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_489_1359718901.265") :anon :lex :outer("cuid_490_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2856
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_325_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2874
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5522
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5522:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5523
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5523:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_326_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2876
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5524
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5524:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5525
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5525:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_327_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2878
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2879
    unless_null _lex_param_1, fallback5528
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5528:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5529
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5529:
    unless $P5001 goto if1737_else5526 
.annotate 'line', 2880
    unless_null _lex_param_1, fallback5530
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5006
  fallback5530:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5531
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5007
  fallback5531:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5532
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5008
  fallback5532:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1737_end5527
  if1737_else5526:
.annotate 'line', 2881
    nqp_get_sc_object $P5013, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5533
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5014
  fallback5533:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1737_end5527:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_328_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2884
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5536
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback5536:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5537
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback5537:
    unless $P5002 goto if1738_else5534 
.annotate 'line', 2886
.annotate 'line', 2887
    unless_null _lex_param_1, fallback5538
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5538:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5539
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5539:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5540
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5009
  fallback5540:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5545
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5545:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1740_end5544 
.annotate 'line', 2888
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1740_end5544:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1739_end5542 
.annotate 'line', 2889
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5546
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5021
  fallback5546:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1739_end5542:
    goto if1738_end5535
  if1738_else5534:
.annotate 'line', 2892
.annotate 'line', 2893
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5547
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5029
  fallback5547:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
  if1738_end5535:
.annotate 'line', 2895
    $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2896
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_329_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2899
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5548
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5548:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5549
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5549:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_330_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2900
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5550
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5550:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5551
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5551:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_331_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2902
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_491_1359718901.265' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5554
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback5554:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5555
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback5555:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5556
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5007
  fallback5556:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5557
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5008
  fallback5557:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5558
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5009
  fallback5558:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1741_else5552 
    .const 'Sub' $P5010 = 'cuid_491_1359718901.265' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1741_end5553
  if1741_else5552:
    unless_null _lex_param_1, fallback5564
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5015
  fallback5564:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5565
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5016
  fallback5565:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5566
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5017
  fallback5566:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5567
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5018
  fallback5567:
    unless $P5012 goto if1742_else5562 
.annotate 'line', 2908
.annotate 'line', 2909
    unless_null _lex_param_1, fallback5568
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5020
  fallback5568:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5569
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5021
  fallback5569:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1742_end5563
  if1742_else5562:
.annotate 'line', 2911
.annotate 'line', 2912
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1742_end5563:
    set $P5027, $P5026
  if1741_end5553:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_491_1359718901.265") :anon :lex :outer("cuid_331_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2903
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 2904
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5559
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5006
  fallback5559:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5560
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5009
  fallback5560:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5561
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5010
  fallback5561:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2906
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_332_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2916
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5572
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback5572:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5573
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback5573:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1743_else5570 
    set $S5004, "list"
    goto if1743_end5571
  if1743_else5570:
    unless_null _lex_param_1, fallback5576
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5006
  fallback5576:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5577
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5007
  fallback5577:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1744_else5574 
    set $S5003, "hash"
    goto if1744_end5575
  if1744_else5574:
    set $S5003, "item"
  if1744_end5575:
    set $S5004, $S5003
  if1743_end5571:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2920
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5578
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5013
  fallback5578:
    unless_null _lex_param_1, fallback5579
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5015
  fallback5579:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5580
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5016
  fallback5580:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_333_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2923
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5581
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5581:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5582
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5582:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_334_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2925
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2926
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5583
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5583:
    unless_null _lex_param_1, fallback5584
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5584:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5585
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5585:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_335_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2930
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5586
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5586:
    unless_null _lex_param_1, fallback5587
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5587:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5588
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5588:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_336_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2934
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5589
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5589:
    unless_null _lex_param_1, fallback5590
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5590:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5591
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5591:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_337_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2938
    unless_null _lex_param_1, fallback5592
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5592:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5593
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5593:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_338_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2941
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2942
    unless_null _lex_param_1, fallback5596
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5596:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5597
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5597:
    unless $P5001 goto if1745_else5594 
    unless_null _lex_param_1, fallback5598
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5005
  fallback5598:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5599
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5004, $P5006
  fallback5599:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1745_end5595
  if1745_else5594:
    unless_null _lex_param_1, fallback5600
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5009
  fallback5600:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5601
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5008, $P5010
  fallback5601:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1745_end5595:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_339_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2945
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5604
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback5604:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5605
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback5605:
    unless $P5002 goto if1746_else5602 
.annotate 'line', 2946
    unless_null _lex_param_1, fallback5606
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5006
  fallback5606:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5607
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5007
  fallback5607:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1746_end5603
  if1746_else5602:
    unless_null _lex_param_1, fallback5608
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5010
  fallback5608:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5609
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5009, $P5011
  fallback5609:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1746_end5603:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5612
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5015
  fallback5612:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5613
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5016
  fallback5613:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if1747_end5611 
.annotate 'line', 2947
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
  if1747_end5611:
.annotate 'line', 2948
    unless_null _lex_param_1, fallback5616
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5019
  fallback5616:
    set $P5018, _lex_param_1["dec_number"]
    unless_null $P5018, fallback5617
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5018, $P5020
  fallback5617:
    unless $P5018 goto if1748_else5614 
.annotate 'line', 2949
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["NVal"]
    unless_null $P5021, fallback5618
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback5618:
    $P5026 = $P5021."new"($P101 :named("value"))
    set $P5033, $P5026
    goto if1748_end5615
  if1748_else5614:
.annotate 'line', 2950
    nqp_get_sc_object $P5030, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["IVal"]
    unless_null $P5027, fallback5619
    nqp_get_sc_object $P5031, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5027, $P5031
  fallback5619:
    $P5032 = $P5027."new"($P101 :named("value"))
    set $P5033, $P5032
  if1748_end5615:
    $P5034 = _lex_param_1."!make"($P5033)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_340_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2953
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5620
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5620:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5621
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5621:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_341_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2954
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5622
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5622:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5623
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5623:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_342_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2955
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5624
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5624:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5625
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5625:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_343_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2956
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5626
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5626:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5627
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5627:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_344_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2957
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5628
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5628:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5629
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5629:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_345_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2958
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2959
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5630
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5630:
    unless_null _lex_param_1, fallback5631
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5631:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5632
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5632:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_346_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2962
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P103, $P5003
.annotate 'line', 2963
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5633
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5634
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5005, $P5008
  fallback5634:
    unless_null $P5005, vivi_17495635
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17495635:
    set $P5004, $P5005
  fallback5633:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2964
    set $P5011, $P101[0]
    unless_null $P5011, fallback5636
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5012
  fallback5636:
    nqp_get_sc_object $P5016, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5637
    nqp_get_sc_object $P5017, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5013, $P5017
  fallback5637:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."push"($P5018)
.annotate 'line', 2965
    set $P5019, $P101[0]
    unless_null $P5019, fallback5638
    nqp_get_sc_object $P5020, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5019, $P5020
  fallback5638:
    nqp_get_sc_object $P5024, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5639
    nqp_get_sc_object $P5025, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5021, $P5025
  fallback5639:
.annotate 'line', 2967
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5640
    nqp_get_sc_object $P5030, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5026, $P5030
  fallback5640:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2968
    nqp_get_sc_object $P5035, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5641
    nqp_get_sc_object $P5036, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5032, $P5036
  fallback5641:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2969
    set $P5039, $P101[0]
    unless_null $P5039, fallback5642
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5039, $P5040
  fallback5642:
    nqp_get_sc_object $P5044, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5643
    nqp_get_sc_object $P5045, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5041, $P5045
  fallback5643:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2970
    set $P5047, $P101[0]
    unless_null $P5047, fallback5644
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5047, $P5048
  fallback5644:
    nqp_get_sc_object $P5052, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5645
    nqp_get_sc_object $P5053, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5049, $P5053
  fallback5645:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2971
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2972
    $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2974
    find_dynamic_lex $P5056, "%*LANG"
    unless_null $P5056, fallback5646
    nqp_get_sc_object $P5059, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%LANG"]
    unless_null $P5057, fallback5647
    nqp_get_sc_object $P5061, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%LANG"], $P5062
    set $P5057, $P5062
  fallback5647:
    unless_null $P5057, vivi_17505648
    die "Contextual %*LANG not found"
    box $P5063, "Contextual %*LANG not found"
    set $P5057, $P5063
  vivi_17505648:
    set $P5056, $P5057
  fallback5646:
    set $P5055, $P5056["Regex-actions"]
    unless_null $P5055, fallback5649
    nqp_get_sc_object $P5064, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5055, $P5064
  fallback5649:
    unless_null _lex_param_1, fallback5650
    nqp_get_sc_object $P5066, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5066
  fallback5650:
    set $P5065, _lex_param_1["p6regex"]
    unless_null $P5065, fallback5651
    nqp_get_sc_object $P5067, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5065, $P5067
  fallback5651:
    $P5068 = $P5065."ast"()
    $P5069 = $P5055."qbuildsub"($P5068, $P101)
    set $P102, $P5069
.annotate 'line', 2975
    nqp_get_sc_object $P5073, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback5652
    nqp_get_sc_object $P5074, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5070, $P5074
  fallback5652:
.annotate 'line', 2977
    new $P5075, 'ResizablePMCArray'
    box $P5076, "NQPRegex"
    push $P5075, $P5076
    $P5077 = "&lexical_package_lookup"($P5075, _lex_param_1)
    $P5078 = $P5070."new"($P5077, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5078
    set $P103["sink"], $P102
.annotate 'line', 2982
    $P5079 = _lex_param_1."!make"($P103)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_347_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2985
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5653
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5653:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5654
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5654:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_348_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2986
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2987
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5655
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5655:
.annotate 'line', 2988
    unless_null _lex_param_1, fallback5656
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5656:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5657
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5657:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_349_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2991
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_350_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2995
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5658
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5658:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5659
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5659:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_351_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2997
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2998
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5660
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5660:
.annotate 'line', 3000
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5661
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5661:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_352_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3004
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3005
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5662
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5662:
.annotate 'line', 3006
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5663
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5663:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_353_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3013
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5664
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5664:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_354_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3014
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5665
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5665:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_355_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5666
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5666:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_356_1359718901.265") :anon :lex :outer("cuid_420_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3017
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3018
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5667
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5667:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_492_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3099
    .const 'Sub' $P5014 = 'cuid_357_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_358_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_359_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_360_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_361_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_362_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_363_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_364_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_365_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_366_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_367_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_368_1359718901.265' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_369_1359718901.265' 
    capture_lex $P5014 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_357_1359718901.265' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_358_1359718901.265' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_359_1359718901.265' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_360_1359718901.265' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_361_1359718901.265' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_362_1359718901.265' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_363_1359718901.265' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_364_1359718901.265' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_365_1359718901.265' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_366_1359718901.265' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_367_1359718901.265' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_368_1359718901.265' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_369_1359718901.265' 
    capture_lex $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_357_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3101
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 3102
    unless_null _lex_param_1, fallback5668
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5003
  fallback5668:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5669
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5002, $P5004
  fallback5669:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3103
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5670
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5670:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_358_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3107
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3108
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5671
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5671:
    unless_null _lex_param_1, fallback5672
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5672:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5673
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5673:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_359_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3112
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3113
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5674
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5674:
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5675
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5675:
.annotate 'line', 3114
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5676
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5676:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3115
    unless_null _lex_param_1, fallback5677
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5018
  fallback5677:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5678
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5019
  fallback5678:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_360_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3119
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3120
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5679
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5679:
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5680
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5680:
.annotate 'line', 3121
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5681
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5681:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3122
    unless_null _lex_param_1, fallback5682
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5018
  fallback5682:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5683
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5019
  fallback5683:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_361_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3126
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3127
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5684
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5684:
    unless_null _lex_param_1, fallback5685
    nqp_get_sc_object $P5007, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5007
  fallback5685:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5686
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5008
  fallback5686:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5687
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5011
  fallback5687:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5688
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5012
  fallback5688:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_362_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3132
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3133
    nqp_get_sc_object $P5004, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5689
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5005
  fallback5689:
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5690
    nqp_get_sc_object $P5010, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5006, $P5010
  fallback5690:
.annotate 'line', 3134
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5691
    nqp_get_sc_object $P5015, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5015
  fallback5691:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3135
    unless_null _lex_param_1, fallback5692
    nqp_get_sc_object $P5018, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5018
  fallback5692:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5693
    nqp_get_sc_object $P5019, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5019
  fallback5693:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_363_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3139
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
.annotate 'line', 3140
    unless_null _lex_param_1, fallback5694
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5004
  fallback5694:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5695
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback5695:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3141
    $P101."blocktype"("immediate")
.annotate 'line', 3143
    nqp_get_sc_object $P5010, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5696
    nqp_get_sc_object $P5011, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5011
  fallback5696:
.annotate 'line', 3144
    nqp_get_sc_object $P5015, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5697
    nqp_get_sc_object $P5016, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5012, $P5016
  fallback5697:
.annotate 'line', 3146
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5698
    nqp_get_sc_object $P5021, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5021
  fallback5698:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3147
    nqp_get_sc_object $P5026, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5699
    nqp_get_sc_object $P5027, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5023, $P5027
  fallback5699:
.annotate 'line', 3148
    nqp_get_sc_object $P5031, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5700
    nqp_get_sc_object $P5032, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5028, $P5032
  fallback5700:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3155
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_364_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3158
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_493_1359718901.265' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_494_1359718901.265' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5701
    nqp_get_sc_object $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5004
  fallback5701:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5702
    nqp_get_sc_object $P5005, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5005
  fallback5702:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5705
    nqp_get_sc_object $P5008, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5008
  fallback5705:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5706
    nqp_get_sc_object $P5009, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5007, $P5009
  fallback5706:
    unless $P5007 goto if1751_else5703 
.annotate 'line', 3161
.annotate 'line', 3162
    unless_null _lex_param_1, fallback5707
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5012
  fallback5707:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5708
    nqp_get_sc_object $P5013, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5011, $P5013
  fallback5708:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5709
    nqp_get_sc_object $P5014, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5010, $P5014
  fallback5709:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3163
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if1751_end5704
  if1751_else5703:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1752_else5710 
    .const 'Sub' $P5018 = 'cuid_493_1359718901.265' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if1752_end5711
  if1752_else5710:
.annotate 'line', 3173
.annotate 'line', 3174
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5728
    nqp_get_sc_object $P5024, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5020, $P5024
  fallback5728:
.annotate 'line', 3176
    nqp_get_sc_object $P5028, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5729
    nqp_get_sc_object $P5029, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5029
  fallback5729:
    nqp_get_sc_object $P5033, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5730
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5030, $P5034
  fallback5730:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5733
    nqp_get_sc_object $P5039, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5039
  fallback5733:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5734
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5038, $P5040
  fallback5734:
    unless $P5038 goto if1757_else5731 
.annotate 'line', 3177
.annotate 'line', 3178
    unless_null _lex_param_1, fallback5735
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5046
  fallback5735:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5736
    nqp_get_sc_object $P5047, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5045, $P5047
  fallback5736:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5737
    nqp_get_sc_object $P5048, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5044, $P5048
  fallback5737:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5739:
    unless $P5043, for_done5741
    shift $P5052, $P5043
  for_redo5740:
    .const 'Sub' $P5051 = 'cuid_494_1359718901.265' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5739
  for_done5741:
    set $P5082, $P5041
    goto if1757_end5732
  if1757_else5731:
    unless_null _lex_param_1, fallback5744
    nqp_get_sc_object $P5054, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5054
  fallback5744:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5745
    nqp_get_sc_object $P5055, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5053, $P5055
  fallback5745:
    set $P5081, $P5053
    unless $P5053 goto if1758_end5743 
.annotate 'line', 3180
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1759_else5746 
.annotate 'line', 3182
    set $P5056, $P102[0]
    unless_null $P5056, fallback5748
    nqp_get_sc_object $P5057, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5056, $P5057
  fallback5748:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback5749
    nqp_get_sc_object $P5062, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5062
  fallback5749:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback5750
    nqp_get_sc_object $P5063, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5061, $P5063
  fallback5750:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback5751
    nqp_get_sc_object $P5064, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5060, $P5064
  fallback5751:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if1759_end5747
  if1759_else5746:
.annotate 'line', 3183
    set $P5069, $P102[0]
    unless_null $P5069, fallback5752
    nqp_get_sc_object $P5070, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5069, $P5070
  fallback5752:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback5753
    nqp_get_sc_object $P5074, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5074
  fallback5753:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback5754
    nqp_get_sc_object $P5075, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5073, $P5075
  fallback5754:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5755
    nqp_get_sc_object $P5076, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5072, $P5076
  fallback5755:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if1759_end5747:
    set $P5081, $P5080
  if1758_end5743:
    set $P5082, $P5081
  if1757_end5732:
    set $P5083, $P5082
  if1752_end5711:
  if1751_end5704:
.annotate 'line', 3186
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_493_1359718901.265") :anon :lex :outer("cuid_364_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3165
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5712
    nqp_get_sc_object $P5007, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5713
    nqp_get_sc_object $P5009, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5713:
    unless_null $P5005, vivi_17535714
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_17535714:
    set $P5004, $P5005
  fallback5712:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5715
    nqp_get_sc_object $P5012, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5012
  fallback5715:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if1754_end5717 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5718
    nqp_get_sc_object $P5018, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5719
    nqp_get_sc_object $P5020, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5719:
    unless_null $P5016, vivi_17555720
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_17555720:
    set $P5015, $P5016
  fallback5718:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5721
    nqp_get_sc_object $P5023, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5014, $P5023
  fallback5721:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if1754_end5717:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback5722
    nqp_get_sc_object $P5029, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback5723
    nqp_get_sc_object $P5031, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback5723:
    unless_null $P5027, vivi_17565724
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_17565724:
    set $P5026, $P5027
  fallback5722:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback5725
    nqp_get_sc_object $P5034, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5025, $P5034
  fallback5725:
    set $S5005, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5035, $S5003
    set $P102, $P5035
.annotate 'line', 3170
    nqp_get_sc_object $P5039, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback5726
    nqp_get_sc_object $P5040, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5036, $P5040
  fallback5726:
    find_lex $P5041, "$/"
.annotate 'line', 3171
    nqp_get_sc_object $P5045, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback5727
    nqp_get_sc_object $P5046, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5042, $P5046
  fallback5727:
    find_lex $P5047, "$/"
    $P5048 = $P5042."new"($P102, "literal" :named("rxtype"), $P5047 :named("node"))
    $P5049 = $P5036."new"($P5048, "sym" :named("name"), "subcapture" :named("rxtype"), $P5041 :named("node"))
    store_lex "$qast", $P5049
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_494_1359718901.265") :anon :lex :outer("cuid_364_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3178
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5738
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5738:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_365_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3189
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3190
    unless_null _lex_param_1, fallback5756
    nqp_get_sc_object $P5002, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set _lex_param_1, $P5002
  fallback5756:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5757
    nqp_get_sc_object $P5003, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5001, $P5003
  fallback5757:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_366_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3193
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$code", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P101, $P5001
.annotate 'line', 3194
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5758
    nqp_get_sc_object $P5005, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5759
    nqp_get_sc_object $P5006, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5003, $P5006
  fallback5759:
    unless_null $P5003, vivi_17605760
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_17605760:
    set $P5002, $P5003
  fallback5758:
    $P5008 = $P5002."create_code"(_lex_param_1, "", 0, "NQPRegex" :named("code_type_name"))
    set $P101, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback5763
    nqp_get_sc_object $P5012, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%RX"]
    unless_null $P5010, fallback5764
    nqp_get_sc_object $P5014, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%RX"], $P5015
    set $P5010, $P5015
  fallback5764:
    unless_null $P5010, vivi_17625765
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5010, $P5016
  vivi_17625765:
    set $P5009, $P5010
  fallback5763:
    exists $I5001, $P5009["code"]
    unless $I5001 goto if1761_end5762 
.annotate 'line', 3195
.annotate 'line', 3196
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback5766
    nqp_get_sc_object $P5021, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback5767
    nqp_get_sc_object $P5023, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback5767:
    unless_null $P5019, vivi_17635768
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_17635768:
    set $P5018, $P5019
  fallback5766:
    set $P5017, $P5018["code"]
    unless_null $P5017, fallback5769
    nqp_get_sc_object $P5026, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    set $P5017, $P5026
  fallback5769:
    $P5027 = $P5017."ADD_NESTED_CODE"($P101)
  if1761_end5762:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_367_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3201
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 3202
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_368_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3205
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 3206
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_369_1359718901.265") :anon :lex :outer("cuid_492_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3209
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_495_1359718901.265' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next5770:
    unless $P5004, for_done5772
    shift $P5006, $P5004
  for_redo5771:
    .const 'Sub' $P5005 = 'cuid_495_1359718901.265' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next5770
  for_done5772:
.annotate 'line', 3214
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_495_1359718901.265") :anon :lex :outer("cuid_369_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3211
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3212
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_496_1359718901.265") :anon :lex :outer("cuid_371_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3219
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698", 22
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_498_1359718901.265") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_497_1359718901.265' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_371_1359718901.265" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1359718876.688"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "NQP"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "EFA180831C4C970C1DA6FC5C15BA3EF4B5D9CFB2-1359718873.698"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "at_pos"
    push $P5004, "at_key"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "slot_for_object"
    push $P5004, "72EB0CEEE110B04F66601526175C9117F069D82E-1359718880.624"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "push_lexpad"
    push $P5004, "pop_lexpad"
    push $P5004, "cur_lexpad"
    push $P5004, "get_legacy_block_list"
    push $P5004, "load_setting"
    push $P5004, "load_module"
    push $P5004, "import"
    push $P5004, "install_package_symbol"
    push $P5004, "install_lexical_symbol"
    push $P5004, "install_package_routine"
    push $P5004, "create_code"
    push $P5004, "pkg_create_mo"
    push $P5004, "pkg_add_attribute"
    push $P5004, "pkg_add_method"
    push $P5004, "set_routine_signature"
    push $P5004, "pkg_set_body_block"
    push $P5004, "pkg_add_parent_or_role"
    push $P5004, "pkg_add_parrot_vtable_handler_mapping"
    push $P5004, "pkg_compose"
    push $P5004, "run_begin_block"
    push $P5004, "libs"
    push $P5004, "add_initializations"
    push $P5004, "is_lexical"
    push $P5004, "is_package"
    push $P5004, "is_scope"
    push $P5004, "known_sym"
    push $P5004, "find_sym"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "@!BLOCKS"
    push $P5004, "%!code_objects_to_fix_up"
    push $P5004, "%!code_object_types"
    push $P5004, "%!code_object_fixup_list"
    push $P5004, "%!code_stub_sc_idx"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "TOP"
    push $P5004, "identifier"
    push $P5004, "name"
    push $P5004, "deflongname"
    push $P5004, "ENDSTMT"
    push $P5004, "unv"
    push $P5004, "pod_comment"
    push $P5004, "comp_unit"
    push $P5004, "statementlist"
    push $P5004, "statement"
    push $P5004, "eat_terminator"
    push $P5004, "xblock"
    push $P5004, "pblock"
    push $P5004, "lambda"
    push $P5004, "block"
    push $P5004, "blockoid"
    push $P5004, "newpad"
    push $P5004, "outerctx"
    push $P5004, "finishpad"
    push $P5004, "you_are_here"
    push $P5004, "terminator"
    push $P5004, "terminator:sym<;>"
    push $P5004, "terminator:sym<}>"
    push $P5004, "statement_control"
    push $P5004, "statement_control:sym<use>"
    push $P5004, "statement_control:sym<if>"
    push $P5004, "statement_control:sym<unless>"
    push $P5004, "statement_control:sym<while>"
    push $P5004, "statement_control:sym<repeat>"
    push $P5004, "statement_control:sym<for>"
    push $P5004, "statement_control:sym<CATCH>"
    push $P5004, "statement_control:sym<CONTROL>"
    push $P5004, "statement_prefix"
    push $P5004, "statement_prefix:sym<BEGIN>"
    push $P5004, "statement_prefix:sym<INIT>"
    push $P5004, "statement_prefix:sym<try>"
    push $P5004, "blorst"
    push $P5004, "statement_mod_cond"
    push $P5004, "statement_mod_cond:sym<if>"
    push $P5004, "statement_mod_cond:sym<unless>"
    push $P5004, "statement_mod_loop"
    push $P5004, "statement_mod_loop:sym<while>"
    push $P5004, "statement_mod_loop:sym<until>"
    push $P5004, "statement_mod_loop:sym<for>"
    push $P5004, "term:sym<fatarrow>"
    push $P5004, "term:sym<colonpair>"
    push $P5004, "term:sym<variable>"
    push $P5004, "term:sym<package_declarator>"
    push $P5004, "term:sym<scope_declarator>"
    push $P5004, "term:sym<routine_declarator>"
    push $P5004, "term:sym<multi_declarator>"
    push $P5004, "term:sym<regex_declarator>"
    push $P5004, "term:sym<statement_prefix>"
    push $P5004, "term:sym<lambda>"
    push $P5004, "fatarrow"
    push $P5004, "colonpair"
    push $P5004, "variable"
    push $P5004, "sigil"
    push $P5004, "twigil"
    push $P5004, "package_declarator"
    push $P5004, "package_declarator:sym<module>"
    push $P5004, "package_declarator:sym<knowhow>"
    push $P5004, "package_declarator:sym<class>"
    push $P5004, "package_declarator:sym<grammar>"
    push $P5004, "package_declarator:sym<role>"
    push $P5004, "package_declarator:sym<native>"
    push $P5004, "package_declarator:sym<stub>"
    push $P5004, "package_def"
    push $P5004, "role_params"
    push $P5004, "scope_declarator"
    push $P5004, "scope_declarator:sym<my>"
    push $P5004, "scope_declarator:sym<our>"
    push $P5004, "scope_declarator:sym<has>"
    push $P5004, "scoped"
    push $P5004, "typename"
    push $P5004, "declarator"
    push $P5004, "variable_declarator"
    push $P5004, "routine_declarator"
    push $P5004, "routine_declarator:sym<sub>"
    push $P5004, "routine_declarator:sym<method>"
    push $P5004, "routine_def"
    push $P5004, "method_def"
    push $P5004, "onlystar"
    push $P5004, "multi_declarator"
    push $P5004, "multi_declarator:sym<multi>"
    push $P5004, "multi_declarator:sym<proto>"
    push $P5004, "multi_declarator:sym<null>"
    push $P5004, "signature"
    push $P5004, "parameter"
    push $P5004, "param_var"
    push $P5004, "named_param"
    push $P5004, "default_value"
    push $P5004, "trait"
    push $P5004, "trait_mod"
    push $P5004, "trait_mod:sym<is>"
    push $P5004, "regex_declarator"
    push $P5004, "dotty"
    push $P5004, "term:sym<self>"
    push $P5004, "term:sym<identifier>"
    push $P5004, "term:sym<name>"
    push $P5004, "term:sym<pir::op>"
    push $P5004, "term:sym<pir::const>"
    push $P5004, "term:sym<nqp::op>"
    push $P5004, "term:sym<onlystar>"
    push $P5004, "args"
    push $P5004, "arglist"
    push $P5004, "term:sym<value>"
    push $P5004, "value"
    push $P5004, "number"
    push $P5004, "quote"
    push $P5004, "quote:sym<apos>"
    push $P5004, "quote:sym<dblq>"
    push $P5004, "quote:sym<q>"
    push $P5004, "quote:sym<qq>"
    push $P5004, "quote:sym<Q>"
    push $P5004, "quote:sym<Q:PIR>"
    push $P5004, "quote:sym</ />"
    push $P5004, "quote_escape:sym<$>"
    push $P5004, "quote_escape:sym<{ }>"
    push $P5004, "circumfix:sym<( )>"
    push $P5004, "circumfix:sym<[ ]>"
    push $P5004, "circumfix:sym<ang>"
    push $P5004, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5004, "circumfix:sym<{ }>"
    push $P5004, "circumfix:sym<sigil>"
    push $P5004, "semilist"
    push $P5004, "infixstopper"
    push $P5004, "postcircumfix:sym<[ ]>"
    push $P5004, "postcircumfix:sym<{ }>"
    push $P5004, "postcircumfix:sym<ang>"
    push $P5004, "postcircumfix:sym<( )>"
    push $P5004, "postfix:sym<.>"
    push $P5004, "prefix:sym<++>"
    push $P5004, "prefix:sym<-->"
    push $P5004, "postfix:sym<++>"
    push $P5004, "postfix:sym<-->"
    push $P5004, "infix:sym<**>"
    push $P5004, "prefix:sym<+>"
    push $P5004, "prefix:sym<~>"
    push $P5004, "prefix:sym<->"
    push $P5004, "prefix:sym<?>"
    push $P5004, "prefix:sym<!>"
    push $P5004, "prefix:sym<|>"
    push $P5004, "infix:sym<*>"
    push $P5004, "infix:sym</>"
    push $P5004, "infix:sym<%>"
    push $P5004, "infix:sym<+&>"
    push $P5004, "infix:sym<+>"
    push $P5004, "infix:sym<->"
    push $P5004, "infix:sym<+|>"
    push $P5004, "infix:sym<+^>"
    push $P5004, "infix:sym<~>"
    push $P5004, "infix:sym<==>"
    push $P5004, "infix:sym<!=>"
    push $P5004, "infix:sym<<=>"
    push $P5004, "infix:sym<>=>"
    push $P5004, "infix:sym<<>"
    push $P5004, "infix:sym<>>"
    push $P5004, "infix:sym<eq>"
    push $P5004, "infix:sym<ne>"
    push $P5004, "infix:sym<le>"
    push $P5004, "infix:sym<ge>"
    push $P5004, "infix:sym<lt>"
    push $P5004, "infix:sym<gt>"
    push $P5004, "infix:sym<=:=>"
    push $P5004, "infix:sym<~~>"
    push $P5004, "infix:sym<&&>"
    push $P5004, "infix:sym<||>"
    push $P5004, "infix:sym<//>"
    push $P5004, "infix:sym<?? !!>"
    push $P5004, "infix:sym<=>"
    push $P5004, "infix:sym<:=>"
    push $P5004, "infix:sym<::=>"
    push $P5004, "infix:sym<,>"
    push $P5004, "prefix:sym<return>"
    push $P5004, "prefix:sym<make>"
    push $P5004, "term:sym<last>"
    push $P5004, "term:sym<next>"
    push $P5004, "term:sym<redo>"
    push $P5004, "smartmatch"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "CAEFFDBF4CA043F89368BEED14A520FF69374EED-1359718897.311"
    push $P5004, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "arg"
    push $P5004, "nibbler"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<$( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "metachar:sym<:my>"
    push $P5004, "metachar:sym<{ }>"
    push $P5004, "metachar:sym<nqpvar>"
    push $P5004, "assertion:sym<{ }>"
    push $P5004, "assertion:sym<?{ }>"
    push $P5004, "assertion:sym<var>"
    push $P5004, "codeblock"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "alt_nfa__1_1359718902.455"
    push $P5004, "alt_nfa__2_1359718902.471"
    push $P5004, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5004, "alt_nfa__4_1359718902.489"
    push $P5004, "alt_nfa__3_1359718902.481"
    push $P5004, "alt_nfa__6_1359718902.568"
    push $P5004, "alt_nfa__5_1359718902.556"
    push $P5004, "alt_nfa__7_1359718902.652"
    push $P5004, "alt_nfa__9_1359718902.671"
    push $P5004, "alt_nfa__8_1359718902.658"
    push $P5004, "{"
    push $P5004, "alt_nfa__10_1359718902.698"
    push $P5004, "alt_nfa__11_1359718902.704"
    push $P5004, ";"
    push $P5004, "}"
    push $P5004, "sym"
    push $P5004, "else"
    push $P5004, "alt_nfa__12_1359718902.801"
    push $P5004, "wu"
    push $P5004, "alt_nfa__13_1359718902.822"
    push $P5004, "alt_nfa__14_1359718902.822"
    push $P5004, "alt_nfa__15_1359718902.822"
    push $P5004, "alt_nfa__16_1359718902.874"
    push $P5004, "cond"
    push $P5004, "alt_nfa__17_1359718902.944"
    push $P5004, "alt_nfa__18_1359718902.952"
    push $P5004, "key"
    push $P5004, "val"
    push $P5004, "not"
    push $P5004, "alt_nfa__19_1359718902.989"
    push $P5004, "desigilname"
    push $P5004, "<["
    push $P5004, "/_!"
    push $P5004, "alt_nfa__20_1359718903.004"
    push $P5004, "$@%&"
    push $P5004, "*!?"
    push $P5004, "metaclass"
    push $P5004, "repr"
    push $P5004, "export"
    push $P5004, "parent"
    push $P5004, "role"
    push $P5004, "alt_nfa__21_1359718903.256"
    push $P5004, "alt_nfa__22_1359718903.27"
    push $P5004, "alt_nfa__23_1359718903.416"
    push $P5004, "latename"
    push $P5004, "private"
    push $P5004, "alt_nfa__24_1359718903.451"
    push $P5004, "invocant"
    push $P5004, "alt_nfa__26_1359718903.527"
    push $P5004, "alt_nfa__25_1359718903.522"
    push $P5004, "definedness"
    push $P5004, "quant"
    push $P5004, "_DU"
    push $P5004, "alt_nfa__27_1359718903.552"
    push $P5004, "alt_nfa__28_1359718903.552"
    push $P5004, "alt_nfa__29_1359718903.552"
    push $P5004, "/!"
    push $P5004, "alt_nfa__30_1359718903.563"
    push $P5004, "longname"
    push $P5004, "proto"
    push $P5004, "p6regex"
    push $P5004, "alt_nfa__31_1359718903.678"
    push $P5004, "alt_nfa__32_1359718903.678"
    push $P5004, "alt_nfa__33_1359718903.678"
    push $P5004, "'\""
    push $P5004, "("
    push $P5004, "alt_nfa__34_1359718903.702"
    push $P5004, "alt_nfa__35_1359718903.702"
    push $P5004, "op"
    push $P5004, "const"
    push $P5004, "alt_nfa__36_1359718903.774"
    push $P5004, "alt_nfa__37_1359718903.783"
    push $P5004, "sign"
    push $P5004, "alt_nfa__38_1359718903.793"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "$"
    push $P5004, "<"
    push $P5004, utf8:"\x{ab}"
    push $P5004, "OPER"
    push $P5004, ">"
    push $P5004, "}/"
    push $P5004, "var"
    push $P5004, "$@&"
    push $P5004, "alt_nfa__39_1359718904.569"
    push $P5004, "alt_nfa__40_1359718904.593"
    push $P5004, "alt_nfa__41_1359718904.607"
    push $P5004, "zw"
    push $P5004, "?!"
    push $P5004, "alt_nfa__42_1359718904.639"
    push $P5004, "$@"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "093654D3D9FDEC05514F10E28C726DFF7AEC24D9-1359718870.312"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "NQP::World"
    push $P5004, "NQP::Grammar"
    push $P5004, "alt_nfa__1_1359718880.726"
    push $P5004, "alt_nfa__2_1359718880.755"
    push $P5004, "alt_nfa__3_1359718880.82"
    push $P5004, "alt_nfa__4_1359718880.82"
    push $P5004, "alt_nfa__5_1359718880.839"
    push $P5004, "alt_nfa__6_1359718880.911"
    push $P5004, "alt_nfa__7_1359718880.923"
    push $P5004, "alt_nfa__8_1359718880.961"
    push $P5004, "alt_nfa__9_1359718881"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "NQP::Regex"
    push $P5004, "alt_nfa__1_1359718897.433"
    push $P5004, "alt_nfa__2_1359718897.439"
    push $P5004, "alt_nfa__3_1359718897.461"
    push $P5004, "alt_nfa__4_1359718897.523"
    push $P5004, "alt_nfa__5_1359718897.54"
    push $P5004, "alt_nfa__6_1359718897.592"
    push $P5004, "alt_nfa__7_1359718897.618"
    push $P5004, "alt_nfa__8_1359718897.636"
    push $P5004, "alt_nfa__9_1359718897.706"
    push $P5004, "alt_nfa__10_1359718897.787"
    push $P5004, "alt_nfa__11_1359718897.794"
    push $P5004, "alt_nfa__12_1359718897.872"
    push $P5004, "alt_nfa__13_1359718897.931"
    push $P5004, "alt_nfa__14_1359718897.944"
    push $P5004, "alt_nfa__15_1359718898.012"
    push $P5004, "alt_nfa__16_1359718898.023"
    push $P5004, "alt_nfa__17_1359718898.053"
    push $P5004, "alt_nfa__18_1359718898.06"
    push $P5004, "alt_nfa__19_1359718898.121"
    push $P5004, "alt_nfa__20_1359718898.121"
    push $P5004, "alt_nfa__21_1359718898.121"
    push $P5004, "alt_nfa__23_1359718898.149"
    push $P5004, "alt_nfa__24_1359718898.15"
    push $P5004, "alt_nfa__22_1359718898.128"
    push $P5004, "NQP::Actions"
    push $P5004, "NQP::RegexActions"
    push $P5004, "NQP::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "2A5BD8D2F017911EBF2A5D1B91B7A8E3733D2938-1359718875.011"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "01A3C8E46D57D2D364E33140146691A8C18F7564-1359718885.288"
    push $P5004, "src\\stage2\\QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "RegexActions"
    push $P5004, "Ee"
    push $P5004, "01"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "xX"
    push $P5004, "cC"
    push $P5004, "&|~"
    .const 'Sub' $P5005 = 'cuid_497_1359718901.265' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1765_end5779 
    die "Repossession conflicts occurred during deserialization"
  if1765_end5779:
    .const "LexInfo" $P5001 = "cuid_371_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_371_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_371_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_371_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_371_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_371_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_2_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 34
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_374_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_374_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_374_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_374_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_32_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_223_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_224_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 228
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_391_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 35
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_391_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_391_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 35
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_391_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_227_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_230_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_233_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_243_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_244_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 249
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_410_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 229
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_410_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_410_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 229
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_410_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_245_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 355
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 356
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 357
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 358
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 359
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 360
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 361
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 362
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_420_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 250
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_420_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_420_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 250
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_420_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_357_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 364
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 365
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 366
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 367
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 368
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 369
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 370
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 371
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 372
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 373
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_367_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 374
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_368_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 375
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_369_1359718901.265" 
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 376
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_492_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 363
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_492_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_492_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 363
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_492_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_496_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 377
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_496_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_496_1359718901.265"
    nqp_get_sc_object $P5002, "59B5BC3FD21D9B67C76ECF5D086730CF50B210AD-1359718901.293", 377
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_496_1359718901.265"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_497_1359718901.265") :anon :lex :outer("cuid_498_1359718901.265")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_223_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_224_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_230_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_233_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_367_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_368_1359718901.265" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_369_1359718901.265" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_499_1359718901.265") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_371_1359718901.265" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_500_1359718901.265") :main
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_371_1359718901.265" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end