.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_367_1360232768.755") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5064 = 'cuid_366_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_368_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_370_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_387_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_406_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_407_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_408_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_409_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_410_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_411_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_412_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_413_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_414_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_416_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_489_1360232768.755' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_493_1360232768.755' 
    capture_lex $P5064 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "$nqpcomp", $P105 
    .lex "@clo", $P106 
    .lex "&MAIN", $P107 
    .lex "&hll-config", $P108 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P105, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P106, $P5003
    .const 'Sub' $P5004 = 'cuid_366_1360232768.755' 
    capture_lex $P5004
    set $P107, $P5004
    .const 'Sub' $P5005 = 'cuid_368_1360232768.755' 
    capture_lex $P5005
    set $P108, $P5005
    find_dynamic_lex $P5006, "$*CTXSAVE"
    set ctxsave, $P5006
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5009, $I5002
    set $P5008, $P5009
    unless $I5002 goto if11_end13 
    $P5007 = ctxsave."ctxsave"()
    set $P5008, $P5007
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_370_1360232768.755' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_387_1360232768.755' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_406_1360232768.755' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1438
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3764
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5020
  fallback3764:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1440
    $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1442
    .const 'Sub' $P5023 = 'cuid_407_1360232768.755' 
    capture_lex $P5023
    newclosure $P5022, $P5023
    $P104."add_hll_op"("nqp", "preinc", $P5022)
.annotate 'line', 1457
    .const 'Sub' $P5025 = 'cuid_408_1360232768.755' 
    capture_lex $P5025
    newclosure $P5024, $P5025
    $P104."add_hll_op"("nqp", "predec", $P5024)
.annotate 'line', 1472
    .const 'Sub' $P5027 = 'cuid_409_1360232768.755' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P104."add_hll_op"("nqp", "postinc", $P5026)
.annotate 'line', 1496
    .const 'Sub' $P5029 = 'cuid_410_1360232768.755' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P104."add_hll_op"("nqp", "postdec", $P5028)
.annotate 'line', 1520
    .const 'Sub' $P5031 = 'cuid_411_1360232768.755' 
    capture_lex $P5031
    newclosure $P5030, $P5031
    $P104."add_hll_op"("nqp", "numify", $P5030)
.annotate 'line', 1524
    .const 'Sub' $P5033 = 'cuid_412_1360232768.755' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P104."add_hll_op"("nqp", "stringify", $P5032)
.annotate 'line', 1528
    .const 'Sub' $P5035 = 'cuid_413_1360232768.755' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P104."add_hll_op"("nqp", "eqaddr", $P5034)
.annotate 'line', 1536
    .const 'Sub' $P5037 = 'cuid_414_1360232768.755' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P104."add_hll_op"("nqp", "falsey", $P5036)
    .const 'Sub' $P5038 = 'cuid_416_1360232768.755' 
    capture_lex $P5038
    $P5039 = $P5038()
    .const 'Sub' $P5040 = 'cuid_489_1360232768.755' 
    capture_lex $P5040
    $P5041 = $P5040()
    .const 'Sub' $P5042 = 'cuid_493_1360232768.755' 
    capture_lex $P5042
    $P5043 = $P5042()
.annotate 'line', 3218
    nqp_get_sc_object $P5047, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5046, $P5047, "NQP"
    get_who $P5045, $P5046
    set $P5044, $P5045["Compiler"]
    unless_null $P5044, fallback5749
    nqp_get_sc_object $P5048, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5048
  fallback5749:
    $P5049 = $P5044."new"()
    set $P105, $P5049
.annotate 'line', 3219
    $P105."language"("nqp")
.annotate 'line', 3220
    nqp_get_sc_object $P5053, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5052, $P5053, "NQP"
    get_who $P5051, $P5052
    set $P5050, $P5051["Grammar"]
    unless_null $P5050, fallback5750
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5050, $P5054
  fallback5750:
    $P105."parsegrammar"($P5050)
.annotate 'line', 3221
    nqp_get_sc_object $P5058, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Actions"]
    unless_null $P5055, fallback5751
    nqp_get_sc_object $P5059, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5059
  fallback5751:
    $P105."parseactions"($P5055)
.annotate 'line', 3222
    $P5060 = $P105."config"()
    "&hll-config"($P5060)
.annotate 'line', 3225
    $P5061 = $P105."commandline_options"()
    set $P106, $P5061
.annotate 'line', 3226
    $P106."push"("parsetrace")
.annotate 'line', 3227
    $P106."push"("setting=s")
.annotate 'line', 3228
    $P106."push"("setting-path=s")
.annotate 'line', 3229
    $P106."push"("module-path=s")
.annotate 'line', 3230
    $P106."push"("vmlibs=s")
.annotate 'line', 3231
    $P106."push"("no-regex-lib")
.annotate 'line', 3232
    $P106."push"("old-regex-lib")
.annotate 'line', 3233
    $P106."push"("dynext=s")
.annotate 'line', 3234
    $P106."push"("stable-sc")
    unless _lex_param_0 goto if1760_end5753 
    .const 'Sub' $P5062 = "cuid_366_1360232768.755" 
    $P5063 = $P5062(_lex_param_0 :flat)
  if1760_end5753:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_366_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3236
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 3238
    find_lex $P5001, "$nqpcomp"
    $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3241
    find_lex $P5002, "$nqpcomp"
    $P5003 = $P5002."nqpevent"()
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_368_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3245
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2013.01-52-g2c13753"
    set _lex_param_0["version"], $P5001
    box $P5002, "2013-02-07T10:26:08Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_370_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5031 = 'cuid_1_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_2_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_3_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_4_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_5_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_6_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_7_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_8_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_9_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_10_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_11_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_15_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_16_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_17_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_18_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_19_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_20_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_21_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_22_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_23_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_24_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_25_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_26_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_27_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_28_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_29_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_30_1360232768.755' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_31_1360232768.755' 
    capture_lex $P5031 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_1_1360232768.755' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_2_1360232768.755' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_3_1360232768.755' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_4_1360232768.755' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_5_1360232768.755' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_6_1360232768.755' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_7_1360232768.755' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_8_1360232768.755' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_9_1360232768.755' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_10_1360232768.755' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_11_1360232768.755' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_15_1360232768.755' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_16_1360232768.755' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_17_1360232768.755' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_18_1360232768.755' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_19_1360232768.755' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_20_1360232768.755' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_21_1360232768.755' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_22_1360232768.755' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_23_1360232768.755' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_24_1360232768.755' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_25_1360232768.755' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_26_1360232768.755' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_27_1360232768.755' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_28_1360232768.755' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_29_1360232768.755' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_30_1360232768.755' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_31_1360232768.755' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_1_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 30
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5032 = 'cuid_369_1360232768.755' 
    capture_lex $P5032 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_types", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_object_fixup_list", $P5012
    nqp_decontainerize $P5013, _lex_param_0
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    new $P5015, 'Hash'
    repr_bind_attr_obj $P5013, $P5014, "%!code_stub_sc_idx", $P5015
    find_dynamic_lex $P5018, "%*COMPILING"
    unless_null $P5018, fallback16
    nqp_get_sc_object $P5021, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%COMPILING"]
    unless_null $P5019, fallback17
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%COMPILING"], $P5024
    set $P5019, $P5024
  fallback17:
    unless_null $P5019, vivi_1318
    die "Contextual %*COMPILING not found"
    box $P5025, "Contextual %*COMPILING not found"
    set $P5019, $P5025
  vivi_1318:
    set $P5018, $P5019
  fallback16:
    set $P5017, $P5018["%?OPTIONS"]
    unless_null $P5017, fallback19
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5026
  fallback19:
    set $P5016, $P5017["dynext"]
    unless_null $P5016, fallback20
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5027
  fallback20:
    defined $I5001, $P5016
    box $P5031, $I5001
    set $P5030, $P5031
    unless $I5001 goto if12_end15 
    .const 'Sub' $P5028 = 'cuid_369_1360232768.755' 
    capture_lex $P5028
    $P5029 = $P5028()
    set $P5030, $P5029
  if12_end15:
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_369_1360232768.755") :anon :lex :outer("cuid_1_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 37
    .lex "$dynext_path", $P101 
    .lex "@dynext_paths", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    find_dynamic_lex $P5005, "%*COMPILING"
    unless_null $P5005, fallback21
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%COMPILING"]
    unless_null $P5006, fallback22
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%COMPILING"], $P5011
    set $P5006, $P5011
  fallback22:
    unless_null $P5006, vivi_1423
    die "Contextual %*COMPILING not found"
    box $P5012, "Contextual %*COMPILING not found"
    set $P5006, $P5012
  vivi_1423:
    set $P5005, $P5006
  fallback21:
    set $P5004, $P5005["%?OPTIONS"]
    unless_null $P5004, fallback24
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5013
  fallback24:
    set $P5003, $P5004["dynext"]
    unless_null $P5003, fallback25
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5014
  fallback25:
    set $P101, $P5003
    getinterp $P5017
    set $P5016, $P5017[.IGLOBALS_LIB_PATHS]
    unless_null $P5016, fallback26
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5018
  fallback26:
    set $P5015, $P5016[.PARROT_LIB_PATH_DYNEXT]
    unless_null $P5015, fallback27
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5019
  fallback27:
    set $P102, $P5015
.annotate 'line', 41
    $P5020 = $P102."push"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_2_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 48
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback28
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback28:
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback29
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback29:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    unless $N5001 goto if15_end31 
.annotate 'line', 49
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback32
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5024
  fallback32:
    set $P101["outer"], $P5017
  if15_end31:
    nqp_decontainerize $P5025, _lex_param_0
    nqp_get_sc_object $P5026, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5027, $P5025, $P5026, "@!BLOCKS"
    nqp_decontainerize $P5028, _lex_param_0
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5030, $P5028, $P5029, "@!BLOCKS"
    set $N5005, $P5030
    set $I5002, $N5005
    set $P5027[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_3_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 57
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 58
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_4_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback33
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5008
  fallback33:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_5_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 67
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    repr_clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 69
    $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_6_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 80
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_371_1360232768.755' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_34
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if16_end37 
    .const 'Sub' $P5001 = 'cuid_371_1360232768.755' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if16_end37:
    goto lexotic_35
  lexotic_34:
    .get_results ($P5003)
  lexotic_35:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1360232768.755") :anon :lex :outer("cuid_6_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 82
    .lex "$setting", $P101 
    .lex "$set_outer", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*COMPILING"
    unless_null $P5004, fallback38
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%COMPILING"]
    unless_null $P5005, fallback39
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%COMPILING"], $P5010
    set $P5005, $P5010
  fallback39:
    unless_null $P5005, vivi_1740
    die "Contextual %*COMPILING not found"
    box $P5011, "Contextual %*COMPILING not found"
    set $P5005, $P5011
  vivi_1740:
    set $P5004, $P5005
  fallback38:
    set $P5003, $P5004["%?OPTIONS"]
    unless_null $P5003, fallback41
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5012
  fallback41:
.annotate 'line', 87
    find_lex $P5013, "$loader"
    find_lex $P5014, "$setting_name"
    $P5015 = $P5013."load_setting"($P5014)
    set $P5003["outer_ctx"], $P5015
    set $P101, $P5015
.annotate 'line', 91
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback42
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5020
  fallback42:
.annotate 'line', 92
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback43
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback43:
.annotate 'line', 94
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["BVal"]
    unless_null $P5026, fallback44
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5030
  fallback44:
    find_dynamic_lex $P5031, "$*UNIT"
    unless_null $P5031, fallback45
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$UNIT"]
    unless_null $P5032, fallback46
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5035
  fallback46:
    unless_null $P5032, vivi_1847
    die "Contextual $*UNIT not found"
    box $P5036, "Contextual $*UNIT not found"
    set $P5032, $P5036
  vivi_1847:
    set $P5031, $P5032
  fallback45:
    $P5037 = $P5026."new"($P5031 :named("value"))
.annotate 'line', 95
    nqp_get_sc_object $P5041, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback48
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5042
  fallback48:
.annotate 'line', 97
    nqp_get_sc_object $P5046, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback49
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5043, $P5047
  fallback49:
.annotate 'line', 99
    nqp_get_sc_object $P5051, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["SVal"]
    unless_null $P5048, fallback50
    nqp_get_sc_object $P5052, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5052
  fallback50:
    $P5053 = $P5048."new"("ModuleLoader" :named("value"))
    $P5054 = $P5043."new"($P5053, "getcurhllsym" :named("op"))
.annotate 'line', 101
    nqp_get_sc_object $P5058, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback51
    nqp_get_sc_object $P5059, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5059
  fallback51:
    find_lex $P5060, "$setting_name"
    $P5061 = $P5055."new"($P5060 :named("value"))
    $P5062 = $P5038."new"($P5054, $P5061, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5063 = $P5021."new"($P5037, $P5062, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
.annotate 'line', 103
    nqp_get_sc_object $P5067, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Op"]
    unless_null $P5064, fallback52
    nqp_get_sc_object $P5068, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5064, $P5068
  fallback52:
.annotate 'line', 105
    nqp_get_sc_object $P5072, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["BVal"]
    unless_null $P5069, fallback53
    nqp_get_sc_object $P5073, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5069, $P5073
  fallback53:
    find_dynamic_lex $P5074, "$*UNIT"
    unless_null $P5074, fallback54
    nqp_get_sc_object $P5077, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$UNIT"]
    unless_null $P5075, fallback55
    nqp_get_sc_object $P5078, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5075, $P5078
  fallback55:
    unless_null $P5075, vivi_1956
    die "Contextual $*UNIT not found"
    box $P5079, "Contextual $*UNIT not found"
    set $P5075, $P5079
  vivi_1956:
    set $P5074, $P5075
  fallback54:
    $P5080 = $P5069."new"($P5074 :named("value"))
.annotate 'line', 106
    nqp_get_sc_object $P5084, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Op"]
    unless_null $P5081, fallback57
    nqp_get_sc_object $P5085, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5081, $P5085
  fallback57:
.annotate 'line', 108
    nqp_get_sc_object $P5089, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["Op"]
    unless_null $P5086, fallback58
    nqp_get_sc_object $P5090, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5086, $P5090
  fallback58:
.annotate 'line', 110
    nqp_get_sc_object $P5094, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["SVal"]
    unless_null $P5091, fallback59
    nqp_get_sc_object $P5095, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5091, $P5095
  fallback59:
    $P5096 = $P5091."new"("ModuleLoader" :named("value"))
    $P5097 = $P5086."new"($P5096, "getcurhllsym" :named("op"))
.annotate 'line', 112
    nqp_get_sc_object $P5101, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5100, $P5101, "QAST"
    get_who $P5099, $P5100
    set $P5098, $P5099["SVal"]
    unless_null $P5098, fallback60
    nqp_get_sc_object $P5102, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5098, $P5102
  fallback60:
    find_lex $P5103, "$setting_name"
    $P5104 = $P5098."new"($P5103 :named("value"))
    $P5105 = $P5081."new"($P5097, $P5104, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5106 = $P5064."new"($P5080, $P5105, "forceouterctx" :named("op"))
    $P5107 = $P5016."new"($P5063 :named("parrot"), $P5106 :named("jvm"))
    set $P102, $P5107
.annotate 'line', 114
    find_lex $P5109, "self"
    nqp_decontainerize $P5108, $P5109
    $P5110 = $P5108."is_precompilation_mode"()
    unless $P5110 goto if20_else61 
.annotate 'line', 115
    find_lex $P5112, "self"
    nqp_decontainerize $P5111, $P5112
    nqp_get_sc_object $P5116, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5115, $P5116, "QAST"
    get_who $P5114, $P5115
    set $P5113, $P5114["Stmts"]
    unless_null $P5113, fallback63
    nqp_get_sc_object $P5117, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5113, $P5117
  fallback63:
.annotate 'line', 116
    nqp_get_sc_object $P5121, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["Op"]
    unless_null $P5118, fallback64
    nqp_get_sc_object $P5122, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5118, $P5122
  fallback64:
.annotate 'line', 118
    nqp_get_sc_object $P5126, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5125, $P5126, "QAST"
    get_who $P5124, $P5125
    set $P5123, $P5124["VM"]
    unless_null $P5123, fallback65
    nqp_get_sc_object $P5127, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5123, $P5127
  fallback65:
.annotate 'line', 119
    nqp_get_sc_object $P5131, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["SVal"]
    unless_null $P5128, fallback66
    nqp_get_sc_object $P5132, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5128, $P5132
  fallback66:
    $P5133 = $P5128."new"("ModuleLoader.pbc" :named("value"))
.annotate 'line', 120
    nqp_get_sc_object $P5137, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5136, $P5137, "QAST"
    get_who $P5135, $P5136
    set $P5134, $P5135["SVal"]
    unless_null $P5134, fallback67
    nqp_get_sc_object $P5138, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5134, $P5138
  fallback67:
    $P5139 = $P5134."new"("ModuleLoader.class" :named("value"))
    $P5140 = $P5123."new"($P5133 :named("parrot"), $P5139 :named("jvm"))
    $P5141 = $P5118."new"($P5140, "loadbytecode" :named("op"))
    $P5142 = $P5113."new"($P5141, $P102)
    $P5143 = $P5111."add_load_dependency_task"($P5142 :named("deserialize_past"))
    goto if20_end62
  if20_else61:
.annotate 'line', 125
.annotate 'line', 126
    find_lex $P5145, "self"
    nqp_decontainerize $P5144, $P5145
    $P5146 = $P5144."add_fixup_task"($P102 :named("fixup_past"))
  if20_end62:
    getattribute $P5148, $P101, "lex_pad"
    find_lex $P5147, "RETURN"
    $P5149 = $P5147($P5148)
    .return ($P5149) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_7_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 135
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_68
    .lex "RETURN", $P102
.annotate 'line', 137
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 140
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    unless $P5005 goto if21_end71 
.annotate 'line', 141
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback72
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback72:
.annotate 'line', 142
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback73
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback73:
.annotate 'line', 144
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["VM"]
    unless_null $P5017, fallback74
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5021
  fallback74:
.annotate 'line', 145
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback75
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5026
  fallback75:
    $P5027 = $P5022."new"("ModuleLoader.pbc" :named("value"))
.annotate 'line', 146
    nqp_get_sc_object $P5031, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["SVal"]
    unless_null $P5028, fallback76
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5032
  fallback76:
    $P5033 = $P5028."new"("ModuleLoader.class" :named("value"))
    $P5034 = $P5017."new"($P5027 :named("parrot"), $P5033 :named("jvm"))
    $P5035 = $P5012."new"($P5034, "loadbytecode" :named("op"))
.annotate 'line', 148
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback77
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5040
  fallback77:
.annotate 'line', 150
    nqp_get_sc_object $P5044, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback78
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5041, $P5045
  fallback78:
.annotate 'line', 152
    nqp_get_sc_object $P5049, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["SVal"]
    unless_null $P5046, fallback79
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5046, $P5050
  fallback79:
    $P5051 = $P5046."new"("ModuleLoader" :named("value"))
    $P5052 = $P5041."new"($P5051, "getcurhllsym" :named("op"))
.annotate 'line', 154
    nqp_get_sc_object $P5056, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback80
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5053, $P5057
  fallback80:
    $P5058 = $P5053."new"(_lex_param_1 :named("value"))
    $P5059 = $P5036."new"($P5052, $P5058, "callmethod" :named("op"), "load_module" :named("name"))
    $P5060 = $P5007."new"($P5035, $P5059)
    $P5061 = $P5006."add_load_dependency_task"($P5060 :named("deserialize_past"))
  if21_end71:
    getattribute $P5063, $P101, "lex_pad"
    find_lex $P5062, "RETURN"
    $P5064 = $P5062($P5063)
    goto lexotic_69
  lexotic_68:
    .get_results ($P5064)
  lexotic_69:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_8_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 161
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_372_1360232768.755' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 162
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next81:
    unless $P5006, for_done83
    shift $P5008, $P5006
  for_redo82:
    .const 'Sub' $P5007 = 'cuid_372_1360232768.755' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next81
  for_done83:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1360232768.755") :anon :lex :outer("cuid_8_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 163
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 164
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 170
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_373_1360232768.755' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    repr_clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 172
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next84:
    unless $P5008, for_done86
    shift $P5010, $P5008
  for_redo85:
    .const 'Sub' $P5009 = 'cuid_373_1360232768.755' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next84
  for_done86:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1360232768.755") :anon :lex :outer("cuid_9_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 176
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 186
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 188
    _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 189
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback87
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5003
  fallback87:
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback88
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5008
  fallback88:
    $P5009 = $P5004."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5002."push"($P5009)
.annotate 'line', 192
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback89
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5014
  fallback89:
.annotate 'line', 195
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["SVal"]
    unless_null $P5015, fallback90
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5019
  fallback90:
    $P5020 = $P5015."new"(_lex_param_2 :named("value"))
.annotate 'line', 196
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback91
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback91:
    $P5026 = $P5021."new"(_lex_param_3 :named("value"))
    $P5027 = $P5010."new"(_lex_param_1, $P5020, $P5026, "setstaticlex" :named("op"))
    set $P101, $P5027
.annotate 'line', 198
    nqp_decontainerize $P5028, _lex_param_0
    $P5029 = $P5028."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 203
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 204
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback92
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback92:
.annotate 'line', 206
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback93
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback93:
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback94
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback94:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 207
    nqp_get_sc_object $P5022, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback95
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5023
  fallback95:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 208
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback96
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5029
  fallback96:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 210
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 215
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("code_type_name") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5098 = 'cuid_12_1360232768.755' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_13_1360232768.755' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_14_1360232768.755' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_377_1360232768.755' 
    capture_lex $P5098 
    if haz_param_1, default174
    box $P5097, "NQPRoutine"
    set _lex_param_4, $P5097
  default174:
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    .lex "$code_type_name", _lex_param_4 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_97
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5026, 'ExceptionHandler'
    set_label $P5026, catch_handler_25106
    $P5026.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5026
.annotate 'line', 219
.annotate 'line', 220
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    push $P5009, _lex_param_4
    $P5010 = $P5008."find_sym"($P5009)
    set $P101, $P5010
.annotate 'line', 221
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback99
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback100
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5016
  fallback100:
    unless_null $P5013, vivi_22101
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_22101:
    set $P5012, $P5013
  fallback99:
    get_how $P5011, $P5012
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback102
    nqp_get_sc_object $P5021, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback103
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5022
  fallback103:
    unless_null $P5019, vivi_23104
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_23104:
    set $P5018, $P5019
  fallback102:
    $P5024 = $P5011."name"($P5018)
    set $S5001, $P5024
    set $S5002, _lex_param_4
    isne $I5001, $S5001, $S5002
    box $P5025, $I5001
    set $P102, $P5025
    set $P5027, $P102
    pop_eh 
    goto skip_handler_24105
  catch_handler_25106:
    .get_results ($P5026) 
    set $I10001, 1
    set $P5026["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5026
    pop_upto_eh $P5026
    pop_eh 
    set $P5027, $P10001
    goto skip_handler_24105
  skip_handler_24105:
    .const 'Sub' $P5029 = 'cuid_12_1360232768.755' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    set $P103, $P5028
.annotate 'line', 264
    nqp_get_sc_object $P5033, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Stmts"]
    unless_null $P5030, fallback135
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5030, $P5034
  fallback135:
    $P5035 = $P5030."new"()
    set $P104, $P5035
    set $P5036, _lex_param_1["compile_time_dummy"]
    unless_null $P5036, fallback138
    nqp_get_sc_object $P5037, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5037
  fallback138:
    defined $I5002, $P5036
    unless $I5002 goto if29_else136 
.annotate 'line', 267
    set $P5038, _lex_param_1["compile_time_dummy"]
    unless_null $P5038, fallback139
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5039
  fallback139:
    set $P105, $P5038
    goto if29_end137
  if29_else136:
.annotate 'line', 270
    nqp_fresh_stub $P5040, $P103
    set $P105, $P5040
    set $S5003, _lex_param_2
    assign $P105, $S5003
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 277
    nqp_decontainerize $P5041, _lex_param_0
    $P5042 = $P5041."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5042
    nqp_decontainerize $P5043, _lex_param_0
    nqp_get_sc_object $P5044, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5045, $P5043, $P5044, "%!code_stub_sc_idx"
.annotate 'line', 278
    $P5046 = _lex_param_1."cuid"()
    set $S5004, $P5046
    set $P5045[$S5004], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5058, $P102
    unless $P102 goto if30_end141 
.annotate 'line', 284
    nqp_decontainerize $P5047, _lex_param_0
    nqp_get_sc_object $P5048, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5049, $P5047, $P5048, "%!code_object_fixup_list"
.annotate 'line', 285
    $P5050 = _lex_param_1."cuid"()
    set $S5005, $P5050
    set $P5049[$S5005], $P104
.annotate 'line', 286
    nqp_decontainerize $P5051, _lex_param_0
    $P5052 = $P5051."is_precompilation_mode"()
    unless $P5052 goto if31_else142 
    .const 'Sub' $P5054 = 'cuid_13_1360232768.755' 
    capture_lex $P5054
    newclosure $P5053, $P5054
    setprop $P105, "CLONE_CALLBACK", $P5053
    set $P5057, $P105
    goto if31_end143
  if31_else142:
.annotate 'line', 291
    .const 'Sub' $P5056 = 'cuid_14_1360232768.755' 
    capture_lex $P5056
    newclosure $P5055, $P5056
    setprop $P105, "CLONE_CALLBACK", $P5055
    set $P5057, $P105
  if31_end143:
    set $P5058, $P5057
  if30_end141:
  if29_end137:
.annotate 'line', 315
    nqp_decontainerize $P5059, _lex_param_0
    $P5059."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if32_else154 
    .const 'Sub' $P5060 = 'cuid_377_1360232768.755' 
    capture_lex $P5060
    $P5061 = $P5060()
    set $P5096, $P5061
    goto if32_end155
  if32_else154:
.annotate 'line', 355
.annotate 'line', 358
    nqp_get_sc_object $P5065, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["VM"]
    unless_null $P5062, fallback169
    nqp_get_sc_object $P5066, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5062, $P5066
  fallback169:
.annotate 'line', 360
    nqp_get_sc_object $P5070, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["VM"]
    unless_null $P5067, fallback170
    nqp_get_sc_object $P5071, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5067, $P5071
  fallback170:
.annotate 'line', 362
    nqp_get_sc_object $P5075, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback171
    nqp_get_sc_object $P5076, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5072, $P5076
  fallback171:
    nqp_decontainerize $P5077, _lex_param_0
    $P5078 = $P5077."handle"()
    $P5079 = $P5072."new"($P5078 :named("value"))
.annotate 'line', 363
    nqp_get_sc_object $P5083, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["IVal"]
    unless_null $P5080, fallback172
    nqp_get_sc_object $P5084, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5080, $P5084
  fallback172:
    $P5085 = $P5080."new"($P106 :named("value"))
    $P5086 = $P5067."new"($P5079, $P5085, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 365
    nqp_get_sc_object $P5090, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["BVal"]
    unless_null $P5087, fallback173
    nqp_get_sc_object $P5091, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5087, $P5091
  fallback173:
    $P5092 = $P5087."new"(_lex_param_1 :named("value"))
    $P5093 = $P5062."new"($P5086, $P5092, "assign vPP" :named("pirop"))
    $P104."push"($P5093)
    find_lex $P5094, "RETURN"
    $P5095 = $P5094($P105)
    set $P5096, $P5095
  if32_end155:
    goto lexotic_98
  lexotic_97:
    .get_results ($P5096)
  lexotic_98:
    .return ($P5096) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1360232768.755") :anon :lex :outer("cuid_15_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 228
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5029 = 'cuid_376_1360232768.755' 
    capture_lex $P5029 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P106, $P5006
.annotate 'line', 230
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5007."unshift"($P5010)
    compreg $P5011, "nqp"
    set $P101, $P5011
.annotate 'line', 232
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["CompUnit"]
    unless_null $P5012, fallback107
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback107:
    find_lex $P5017, "$past"
    $P5018 = $P5012."new"($P5017, "nqp" :named("hll"))
    $P5019 = $P101."post"($P5018)
    set $P102, $P5019
.annotate 'line', 233
    $P5020 = $P101."pir"($P102)
    set $P103, $P5020
.annotate 'line', 234
    $P5021 = $P101."evalpmc"($P103)
    set $P104, $P5021
    elements $I5001, $P104
    box $P5022, $I5001
    set $P105, $P5022
    box $P5023, 0
    set $P106, $P5023
  while26_test108:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto while26_done112 
  while26_redo110:
    .const 'Sub' $P5024 = 'cuid_376_1360232768.755' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5026, $P5025
    goto while26_test108 
  while26_done112:
.annotate 'line', 260
    $P5028 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1360232768.755") :anon :lex :outer("cuid_12_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 239
    .const 'Sub' $P5015 = 'cuid_375_1360232768.755' 
    capture_lex $P5015 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 240
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback113
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback113:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    unless $I5002 goto if27_end115 
    .const 'Sub' $P5011 = 'cuid_375_1360232768.755' 
    capture_lex $P5011
    $P5012 = $P5011()
  if27_end115:
    find_lex $P5013, "$i"
    set $N5002, $P5013
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5014, $N5001
    store_lex "$i", $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1360232768.755") :anon :lex :outer("cuid_376_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 241
    .const 'Sub' $P5067 = 'cuid_374_1360232768.755' 
    capture_lex $P5067 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 245
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback116
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5009
  fallback116:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5015, $P5012, $P5014, "%!code_object_types"
    find_lex $P5016, "$subid"
    set $S5002, $P5016
    set $P5011, $P5015[$S5002]
    unless_null $P5011, fallback117
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5017
  fallback117:
    find_lex $P5019, "$compiled"
    find_lex $P5020, "$i"
    set $I5001, $P5020
    set $P5018, $P5019[$I5001]
    unless_null $P5018, fallback118
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5021
  fallback118:
    setattribute $P101, $P5011, "$!do", $P5018
    find_lex $P5027, "self"
    nqp_decontainerize $P5026, $P5027
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5029, $P5026, $P5028, "%!code_objects_to_fix_up"
    find_lex $P5030, "$subid"
    set $S5003, $P5030
    set $P5025, $P5029[$S5003]
    unless_null $P5025, fallback119
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5031
  fallback119:
    set $P5022, $P5025
    iter $P5024, $P5025
  for_next122:
    unless $P5024, for_done124
    shift $P5033, $P5024
  for_redo123:
    .const 'Sub' $P5032 = 'cuid_374_1360232768.755' 
    capture_lex $P5032
    $P5022 = $P5032($P5033)
    goto for_next122
  for_done124:
    find_lex $P5035, "$compiled"
    find_lex $P5036, "$i"
    set $I5002, $P5036
    set $P5034, $P5035[$I5002]
    unless_null $P5034, fallback125
    nqp_get_sc_object $P5037, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5037
  fallback125:
    find_lex $P5039, "$compiled"
    find_lex $P5040, "$i"
    set $I5003, $P5040
    set $P5038, $P5039[$I5003]
    unless_null $P5038, fallback126
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5041
  fallback126:
    setprop $P5034, "STATIC_CODE_REF", $P5038
.annotate 'line', 251
    find_lex $P5043, "self"
    nqp_decontainerize $P5042, $P5043
    find_lex $P5046, "self"
    nqp_decontainerize $P5045, $P5046
    nqp_get_sc_object $P5047, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5048, $P5045, $P5047, "%!code_stub_sc_idx"
    find_lex $P5049, "$subid"
    set $S5004, $P5049
    set $P5044, $P5048[$S5004]
    unless_null $P5044, fallback127
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5050
  fallback127:
    find_lex $P5052, "$compiled"
    find_lex $P5053, "$i"
    set $I5004, $P5053
    set $P5051, $P5052[$I5004]
    unless_null $P5051, fallback128
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5051, $P5054
  fallback128:
    $P5042."update_root_code_ref"($P5044, $P5051)
    find_lex $P5057, "self"
    nqp_decontainerize $P5056, $P5057
    nqp_get_sc_object $P5058, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5059, $P5056, $P5058, "%!code_object_fixup_list"
    find_lex $P5060, "$subid"
    set $S5005, $P5060
    set $P5055, $P5059[$S5005]
    unless_null $P5055, fallback129
    nqp_get_sc_object $P5061, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5061
  fallback129:
    set $P102, $P5055
    new $P5065, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5065, while28_handlers133
    push_eh $P5065
  while28_test130:
    $P5062 = $P102."list"()
    set $N5001, $P5062
    box $P5066, $N5001
    set $P5064, $P5066
    unless $N5001 goto while28_done134 
  while28_redo132:
.annotate 'line', 255
    $P5063 = $P102."shift"()
    set $P5064, $P5063
    goto while28_test130 
  while28_handlers133:
    .get_results ($P5065)
    pop_upto_eh $P5065
    getattribute $P5065, $P5065, 'type'
    eq $P5065, .CONTROL_LOOP_NEXT, while28_test130
    eq $P5065, .CONTROL_LOOP_REDO, while28_redo132
  while28_done134:
    pop_eh 
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1360232768.755") :anon :lex :outer("cuid_375_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_object_types"
    find_lex $P5006, "$subid"
    set $S5001, $P5006
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback120
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5007
  fallback120:
    find_lex $P5010, "$compiled"
    find_lex $P5011, "$i"
    set $I5001, $P5011
    set $P5009, $P5010[$I5001]
    unless_null $P5009, fallback121
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback121:
    repr_clone $P5008, $P5009
    setattribute _lex_param_0, $P5001, "$!do", $P5008
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1360232768.755") :anon :lex :outer("cuid_15_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 287
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 288
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback144
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5008
  fallback144:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1360232768.755") :anon :lex :outer("cuid_15_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 292
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 294
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5001."add_object"(_lex_param_2)
.annotate 'line', 295
    find_lex $P5003, "$fixups"
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback145
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5008
  fallback145:
.annotate 'line', 297
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["WVal"]
    unless_null $P5009, fallback146
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5013
  fallback146:
    $P5014 = $P5009."new"(_lex_param_2 :named("value"))
.annotate 'line', 298
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback147
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5019
  fallback147:
    find_lex $P5020, "$code_type"
    $P5021 = $P5015."new"($P5020 :named("value"))
.annotate 'line', 299
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback148
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5026
  fallback148:
    $P5027 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 300
    nqp_get_sc_object $P5031, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["VM"]
    unless_null $P5028, fallback149
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5032
  fallback149:
.annotate 'line', 302
    nqp_get_sc_object $P5036, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback150
    nqp_get_sc_object $P5037, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5033, $P5037
  fallback150:
    nqp_get_sc_object $P5041, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["BVal"]
    unless_null $P5038, fallback151
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5042
  fallback151:
    find_lex $P5043, "$past"
    $P5044 = $P5038."new"($P5043 :named("value"))
    $P5045 = $P5033."new"($P5044, "clone" :named("op"))
.annotate 'line', 303
    nqp_get_sc_object $P5049, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback152
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5046, $P5050
  fallback152:
    $P5051 = $P5046."new"(_lex_param_2 :named("value"))
    $P5052 = $P5028."new"($P5045, $P5051, "set_sub_code_object 0PP" :named("pirop"))
    $P5053 = $P5004."new"($P5014, $P5021, $P5027, $P5052, "bindattr" :named("op"))
    $P5003."push"($P5053)
.annotate 'line', 308
    find_lex $P5056, "self"
    nqp_decontainerize $P5055, $P5056
    nqp_get_sc_object $P5057, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5058, $P5055, $P5057, "%!code_objects_to_fix_up"
    find_lex $P5059, "$past"
    $P5060 = $P5059."cuid"()
    set $S5001, $P5060
    set $P5054, $P5058[$S5001]
    unless_null $P5054, fallback153
    nqp_get_sc_object $P5061, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5054, $P5061
  fallback153:
    $P5062 = $P5054."push"(_lex_param_2)
    .return ($P5062) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1360232768.755") :anon :lex :outer("cuid_15_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 319
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    unless $P5007 goto if33_end157 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
  if33_end157:
.annotate 'line', 325
    find_lex $P5011, "self"
    nqp_decontainerize $P5010, $P5011
    $P5012 = $P5010."add_object"($P101)
    set $P102, $P5012
.annotate 'line', 328
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
.annotate 'line', 329
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback158
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5019
  fallback158:
.annotate 'line', 331
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["BVal"]
    unless_null $P5020, fallback159
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5024
  fallback159:
    find_lex $P5025, "$past"
    $P5026 = $P5020."new"($P5025 :named("value"))
.annotate 'line', 332
    nqp_get_sc_object $P5030, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback160
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5031
  fallback160:
    $P5032 = $P5027."new"($P101 :named("value"))
    $P5033 = $P5015."new"($P5026, $P5032, "setcodeobj" :named("op"))
    $P5013."add_fixup_task"($P5033 :named("deserialize_past"))
.annotate 'line', 336
    find_lex $P5034, "$fixups"
    nqp_get_sc_object $P5038, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback161
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5039
  fallback161:
.annotate 'line', 338
    nqp_get_sc_object $P5043, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["WVal"]
    unless_null $P5040, fallback162
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5044
  fallback162:
    $P5045 = $P5040."new"($P101 :named("value"))
.annotate 'line', 339
    nqp_get_sc_object $P5049, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback163
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5046, $P5050
  fallback163:
    find_lex $P5051, "$code_type"
    $P5052 = $P5046."new"($P5051 :named("value"))
.annotate 'line', 340
    nqp_get_sc_object $P5056, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback164
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5053, $P5057
  fallback164:
    $P5058 = $P5053."new"("$!do" :named("value"))
.annotate 'line', 341
    nqp_get_sc_object $P5062, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["BVal"]
    unless_null $P5059, fallback165
    nqp_get_sc_object $P5063, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5059, $P5063
  fallback165:
    find_lex $P5064, "$past"
    $P5065 = $P5059."new"($P5064 :named("value"))
    $P5066 = $P5035."new"($P5045, $P5052, $P5058, $P5065, "bindattr" :named("op"))
    $P5034."push"($P5066)
.annotate 'line', 343
    find_lex $P5067, "$fixups"
    nqp_get_sc_object $P5071, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5070, $P5071, "QAST"
    get_who $P5069, $P5070
    set $P5068, $P5069["Op"]
    unless_null $P5068, fallback166
    nqp_get_sc_object $P5072, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5068, $P5072
  fallback166:
.annotate 'line', 345
    nqp_get_sc_object $P5076, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["BVal"]
    unless_null $P5073, fallback167
    nqp_get_sc_object $P5077, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5073, $P5077
  fallback167:
    find_lex $P5078, "$past"
    $P5079 = $P5073."new"($P5078 :named("value"))
.annotate 'line', 346
    nqp_get_sc_object $P5083, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["WVal"]
    unless_null $P5080, fallback168
    nqp_get_sc_object $P5084, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5080, $P5084
  fallback168:
    $P5085 = $P5080."new"($P101 :named("value"))
    $P5086 = $P5068."new"($P5079, $P5085, "setcodeobj" :named("op"))
    $P5067."push"($P5086)
    find_lex $P5088, "self"
    nqp_decontainerize $P5087, $P5088
    nqp_get_sc_object $P5089, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5090, $P5087, $P5089, "%!code_objects_to_fix_up"
.annotate 'line', 350
    find_lex $P5091, "$past"
    $P5092 = $P5091."cuid"()
    set $S5001, $P5092
    new $P5093, 'ResizablePMCArray'
    push $P5093, $P101
    set $P5090[$S5001], $P5093
    find_lex $P5095, "self"
    nqp_decontainerize $P5094, $P5095
    nqp_get_sc_object $P5096, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5097, $P5094, $P5096, "%!code_object_types"
.annotate 'line', 351
    find_lex $P5098, "$past"
    $P5099 = $P5098."cuid"()
    set $S5002, $P5099
    find_lex $P5100, "$code_type"
    set $P5097[$S5002], $P5100
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 373
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_2, default181
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_2, $P5007
  default181:
    if haz_param_3, default182
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_3, $P5008
  default182:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_175
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    unless $I5001 goto if34_end178 
.annotate 'line', 376
    set $P101["name"], _lex_param_2
  if34_end178:
    defined $I5002, _lex_param_3
    unless $I5002 goto if35_end180 
.annotate 'line', 377
    set $P101["repr"], _lex_param_3
  if35_end180:
.annotate 'line', 378
    $P5003 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5003
.annotate 'line', 379
    nqp_decontainerize $P5004, _lex_param_0
    $P5004."add_object"($P102)
    find_lex $P5005, "RETURN"
    $P5006 = $P5005($P102)
    goto lexotic_176
  lexotic_175:
    .get_results ($P5006)
  lexotic_176:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 390
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 391
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 392
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 397
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 401
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
.annotate 'line', 402
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 403
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 411
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 413
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 416
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 420
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 421
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 424
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 425
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 429
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 430
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 434
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_379_1360232768.755' 
    capture_lex $P5040 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_183
    .lex "RETURN", $P106
.annotate 'line', 436
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback185
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback185:
.annotate 'line', 437
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback186
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback186:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while36_test187:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while36_done191 
  while36_redo189:
    .const 'Sub' $P5022 = 'cuid_379_1360232768.755' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while36_test187 
  while36_done191:
.annotate 'line', 460
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback208
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback209
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5035
  fallback209:
    unless_null $P5032, vivi_41210
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_41210:
    set $P5031, $P5032
  fallback208:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 463
    $P104()
    new $P5037, 'ResizablePMCArray'
    set_hll_global $P5037, "GLOBAL", $P105
.annotate 'line', 468
    $P101."shift"()
    find_lex $P5038, "RETURN"
    $P5039 = $P5038($P101)
    goto lexotic_184
  lexotic_183:
    .get_results ($P5039)
  lexotic_184:
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1360232768.755") :anon :lex :outer("cuid_24_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 442
    .const 'Sub' $P5017 = 'cuid_378_1360232768.755' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 444
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback192
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5010
  fallback192:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next205:
    unless $P5014, for_done207
    shift $P5016, $P5014
  for_redo206:
    .const 'Sub' $P5015 = 'cuid_378_1360232768.755' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next205
  for_done207:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1360232768.755") :anon :lex :outer("cuid_379_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 445
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 446
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback197
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5004
  fallback197:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if38_end196 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if38_end196:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if37_end194 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_40204
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 447
.annotate 'line', 448
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback198
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback198:
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback199
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5013
  fallback199:
.annotate 'line', 450
    nqp_get_sc_object $P5017, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback200
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5018
  fallback200:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 451
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback201
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback201:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback202
    nqp_get_sc_object $P5028, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5028
  fallback202:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_39203
  catch_handler_40204:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_39203
  skip_handler_39203:
    find_lex $P5034, "%seen"
.annotate 'line', 454
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if37_end194:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_25_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 473
    .param pmc _lex_param_0 
    .const 'Sub' $P5050 = 'cuid_380_1360232768.755' 
    capture_lex $P5050 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback213
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback214
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback214:
    unless_null $P5011, vivi_43215
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_43215:
    set $P5010, $P5011
  fallback213:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback216
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5018
  fallback216:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback217
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5019
  fallback217:
    unless $P5008 goto if42_end212 
.annotate 'line', 476
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback218
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback219
    nqp_get_sc_object $P5031, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback219:
    unless_null $P5027, vivi_44220
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_44220:
    set $P5026, $P5027
  fallback218:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback221
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5034
  fallback221:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback222
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5035
  fallback222:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next223:
    unless $P5022, for_done225
    shift $P5037, $P5022
  for_redo224:
    .const 'Sub' $P5036 = 'cuid_380_1360232768.755' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next223
  for_done225:
  if42_end212:
.annotate 'line', 481
    nqp_get_sc_object $P5041, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback226
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5042
  fallback226:
.annotate 'line', 483
    nqp_get_sc_object $P5046, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback227
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5043, $P5047
  fallback227:
    $P5048 = $P5043."new"("null" :named("op"))
    $P5049 = $P5038."new"($P101 :named("loadlibs"), $P5048 :named("jvm"))
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1360232768.755") :anon :lex :outer("cuid_25_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 477
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 478
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 487
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 488
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["VM"]
    unless_null $P5002, fallback228
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback228:
.annotate 'line', 489
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback229
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback229:
.annotate 'line', 490
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback230
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback230:
    $P5017 = $P5012."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 491
    nqp_get_sc_object $P5021, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["VM"]
    unless_null $P5018, fallback231
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5022
  fallback231:
    $P5023 = $P5018."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 492
    nqp_get_sc_object $P5027, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback232
    nqp_get_sc_object $P5028, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5028
  fallback232:
.annotate 'line', 494
    nqp_get_sc_object $P5032, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback233
    nqp_get_sc_object $P5033, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5029, $P5033
  fallback233:
    $P5034 = $P5029."new"("getinterp P" :named("pirop"))
.annotate 'line', 495
    nqp_get_sc_object $P5038, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["VM"]
    unless_null $P5035, fallback234
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5039
  fallback234:
    nqp_get_sc_object $P5043, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["SVal"]
    unless_null $P5040, fallback235
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5044
  fallback235:
    $P5045 = $P5040."new"("LexPad" :named("value"))
    $P5046 = $P5035."new"($P5045, "get_class Ps" :named("pirop"))
.annotate 'line', 496
    nqp_get_sc_object $P5050, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback236
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5047, $P5051
  fallback236:
    nqp_get_sc_object $P5055, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["SVal"]
    unless_null $P5052, fallback237
    nqp_get_sc_object $P5056, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5052, $P5056
  fallback237:
    $P5057 = $P5052."new"("NQPLexPad" :named("value"))
    $P5058 = $P5047."new"($P5057, "get_class Ps" :named("pirop"))
    $P5059 = $P5024."new"($P5034, $P5046, $P5058, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5060 = $P5007."new"($P5017, $P5023, $P5059)
.annotate 'line', 498
    nqp_get_sc_object $P5064, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback238
    nqp_get_sc_object $P5065, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5061, $P5065
  fallback238:
    $P5066 = $P5061."new"("null" :named("op"))
    $P5067 = $P5002."new"($P5060 :named("parrot"), $P5066 :named("jvm"))
    $P5068 = $P5001."add_load_dependency_task"($P5067 :named("deserialize_past"))
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 504
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 505
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 510
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 511
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 516
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_381_1360232768.755' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_239
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while45_test241:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while45_done245 
  while45_redo243:
    .const 'Sub' $P5006 = 'cuid_381_1360232768.755' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while45_test241 
  while45_done245:
    box $P5010, 0
    goto lexotic_240
  lexotic_239:
    .get_results ($P5010)
  lexotic_240:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1360232768.755") :anon :lex :outer("cuid_29_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 518
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 520
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback246
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5010
  fallback246:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if46_end248 
.annotate 'line', 521
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback249
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5015
  fallback249:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if46_end248:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 529
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5005, 'ExceptionHandler'
    set_label $P5005, catch_handler_48251
    $P5005.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5005
.annotate 'line', 531
.annotate 'line', 532
    nqp_decontainerize $P5003, _lex_param_0
    $P5003."find_sym"(_lex_param_2)
    box $P5004, 1
    set $P101, $P5004
    set $P5006, $P101
    pop_eh 
    goto skip_handler_47250
  catch_handler_48251:
    .get_results ($P5005) 
    set $I10001, 1
    set $P5005["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5005
    pop_upto_eh $P5005
    pop_eh 
    set $P5006, $P10001
    goto skip_handler_47250
  skip_handler_47250:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1360232768.755") :anon :lex :outer("cuid_370_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 541
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_383_1360232768.755' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_385_1360232768.755' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_386_1360232768.755' 
    capture_lex $P5018 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_252
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    if $N5001 goto unless49_end255 
.annotate 'line', 543
    box $P5002, "Cannot look up empty name"
    die $P5002
  unless49_end255:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    unless $I5001 goto if50_end257 
    .const 'Sub' $P5003 = 'cuid_383_1360232768.755' 
    capture_lex $P5003
    $P5004 = $P5003()
  if50_end257:
    find_dynamic_lex $P5005, "$*GLOBALish"
    unless_null $P5005, fallback270
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$GLOBALish"]
    unless_null $P5006, fallback271
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5009
  fallback271:
    unless_null $P5006, vivi_54272
    die "Contextual $*GLOBALish not found"
    box $P5010, "Contextual $*GLOBALish not found"
    set $P5006, $P5010
  vivi_54272:
    set $P5005, $P5006
  fallback270:
    set $P101, $P5005
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    unless $I5002 goto if55_end274 
    .const 'Sub' $P5011 = 'cuid_385_1360232768.755' 
    capture_lex $P5011
    $P5012 = $P5011()
  if55_end274:
    set $P5013, _lex_param_1
    iter $P5015, _lex_param_1
  for_next290:
    unless $P5015, for_done292
    shift $P5017, $P5015
  for_redo291:
    .const 'Sub' $P5016 = 'cuid_386_1360232768.755' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next290
  for_done292:
    goto lexotic_253
  lexotic_252:
    .get_results ($P101)
  lexotic_253:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1360232768.755") :anon :lex :outer("cuid_31_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 547
    .const 'Sub' $P5015 = 'cuid_382_1360232768.755' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback258
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback258:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while51_test259:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while51_done263 
  while51_redo261:
    .const 'Sub' $P5011 = 'cuid_382_1360232768.755' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while51_test259 
  while51_done263:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1360232768.755") :anon :lex :outer("cuid_383_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 550
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 552
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback264
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5010
  fallback264:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if52_end266 
.annotate 'line', 553
    exists $I5002, $P101["value"]
    unless $I5002 goto if53_else267 
.annotate 'line', 554
    set $P5014, $P101["value"]
    unless_null $P5014, fallback269
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5015
  fallback269:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if53_end268
  if53_else267:
.annotate 'line', 557
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if53_end268:
    set $P5020, $P5019
  if52_end266:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1360232768.755") :anon :lex :outer("cuid_31_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 568
    .const 'Sub' $P5015 = 'cuid_384_1360232768.755' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback275
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback275:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while56_test276:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while56_done280 
  while56_redo278:
    .const 'Sub' $P5011 = 'cuid_384_1360232768.755' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while56_test276 
  while56_done280:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1360232768.755") :anon :lex :outer("cuid_385_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 571
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 573
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback281
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5010
  fallback281:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if57_end283 
.annotate 'line', 574
    exists $I5002, $P101["value"]
    unless $I5002 goto if58_else284 
.annotate 'line', 575
    set $P5013, $P101["value"]
    unless_null $P5013, fallback286
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5014
  fallback286:
    store_lex "$result", $P5013
.annotate 'line', 577
    find_lex $P5015, "@name"
    $P5015."shift"()
    box $P5016, 0
    store_lex "$i", $P5016
    set $P5019, $P5016
    goto if58_end285
  if58_else284:
.annotate 'line', 580
    find_lex $P5017, "$first"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if58_end285:
    set $P5020, $P5019
  if57_end283:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1360232768.755") :anon :lex :outer("cuid_31_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 588
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if59_else287 
.annotate 'line', 589
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback289
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback289:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if59_end288
  if59_else287:
.annotate 'line', 592
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if59_end288:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 603
    .const 'Sub' $P5256 = 'cuid_32_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_33_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_34_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_35_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_36_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_37_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_38_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_40_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_42_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_43_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_44_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_46_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_47_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_48_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_49_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_50_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_51_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_52_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_53_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_54_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_55_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_56_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_57_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_58_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_59_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_60_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_61_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_62_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_64_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_65_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_66_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_67_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_68_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_69_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_70_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_71_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_72_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_73_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_74_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_75_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_76_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_77_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_78_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_79_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_80_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_81_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_82_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_83_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_84_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_85_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_86_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_87_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_90_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_91_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_92_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_93_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_94_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_95_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_96_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_97_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_98_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_99_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_100_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_101_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_102_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_103_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_104_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_105_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_106_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_107_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_108_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_109_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_110_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_111_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_112_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_113_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_114_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_115_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_116_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_117_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_118_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_119_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_120_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_121_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_122_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_123_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_124_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_126_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_127_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_128_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_129_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_130_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_131_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_132_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_133_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_134_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_135_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_136_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_137_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_138_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_139_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_140_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_141_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_142_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_143_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_144_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_145_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_146_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_147_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_148_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_149_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_150_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_151_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_152_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_153_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_154_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_155_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_156_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_157_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_158_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_159_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_160_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_161_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_162_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_163_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_164_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_165_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_166_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_167_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_168_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_169_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_170_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_171_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_172_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_173_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_174_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_175_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_176_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_177_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_178_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_179_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_180_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_181_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_182_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_183_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_184_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_185_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_186_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_187_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_188_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_189_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_190_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_191_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_192_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_193_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_194_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_195_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_196_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_197_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_198_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_199_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_200_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_201_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_202_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_203_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_204_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_205_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_206_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_207_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_208_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_209_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_210_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_211_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_212_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_213_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_214_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_215_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_217_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_219_1360232768.755' 
    capture_lex $P5256 
    .const 'Sub' $P5256 = 'cuid_221_1360232768.755' 
    capture_lex $P5256 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1265
.annotate 'line', 1266
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback293
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback293:
    $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1267
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "NQP"
    get_who $P5007, $P5008
    set $P5006, $P5007["Grammar"]
    unless_null $P5006, fallback294
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback294:
    $P5006."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1268
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "NQP"
    get_who $P5012, $P5013
    set $P5011, $P5012["Grammar"]
    unless_null $P5011, fallback295
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback295:
    $P5011."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1269
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Grammar"]
    unless_null $P5016, fallback296
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5020
  fallback296:
    $P5016."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1270
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "NQP"
    get_who $P5022, $P5023
    set $P5021, $P5022["Grammar"]
    unless_null $P5021, fallback297
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback297:
    $P5021."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1271
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Grammar"]
    unless_null $P5026, fallback298
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5030
  fallback298:
    $P5026."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1272
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback299
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5031, $P5035
  fallback299:
    $P5031."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1273
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5038, $P5039, "NQP"
    get_who $P5037, $P5038
    set $P5036, $P5037["Grammar"]
    unless_null $P5036, fallback300
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5040
  fallback300:
    $P5036."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1274
    nqp_get_sc_object $P5044, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5043, $P5044, "NQP"
    get_who $P5042, $P5043
    set $P5041, $P5042["Grammar"]
    unless_null $P5041, fallback301
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5041, $P5045
  fallback301:
    $P5041."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1275
    nqp_get_sc_object $P5049, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5048, $P5049, "NQP"
    get_who $P5047, $P5048
    set $P5046, $P5047["Grammar"]
    unless_null $P5046, fallback302
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5046, $P5050
  fallback302:
    $P5046."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1276
    nqp_get_sc_object $P5054, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback303
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5051, $P5055
  fallback303:
    $P5051."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1277
    nqp_get_sc_object $P5059, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5058, $P5059, "NQP"
    get_who $P5057, $P5058
    set $P5056, $P5057["Grammar"]
    unless_null $P5056, fallback304
    nqp_get_sc_object $P5060, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5056, $P5060
  fallback304:
    $P5056."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1278
    nqp_get_sc_object $P5064, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback305
    nqp_get_sc_object $P5065, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5061, $P5065
  fallback305:
    $P5061."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1279
    nqp_get_sc_object $P5069, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5068, $P5069, "NQP"
    get_who $P5067, $P5068
    set $P5066, $P5067["Grammar"]
    unless_null $P5066, fallback306
    nqp_get_sc_object $P5070, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5066, $P5070
  fallback306:
    $P5066."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1280
    nqp_get_sc_object $P5074, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5073, $P5074, "NQP"
    get_who $P5072, $P5073
    set $P5071, $P5072["Grammar"]
    unless_null $P5071, fallback307
    nqp_get_sc_object $P5075, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5071, $P5075
  fallback307:
    $P5071."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 603
    .const 'Sub' $P5076 = 'cuid_32_1360232768.755' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_33_1360232768.755' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_34_1360232768.755' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_35_1360232768.755' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_36_1360232768.755' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_37_1360232768.755' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_38_1360232768.755' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_40_1360232768.755' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_42_1360232768.755' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_43_1360232768.755' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_44_1360232768.755' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_46_1360232768.755' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_47_1360232768.755' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_48_1360232768.755' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_49_1360232768.755' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_50_1360232768.755' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_51_1360232768.755' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_52_1360232768.755' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_53_1360232768.755' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_54_1360232768.755' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_55_1360232768.755' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_56_1360232768.755' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_57_1360232768.755' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_58_1360232768.755' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_59_1360232768.755' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_60_1360232768.755' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_61_1360232768.755' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_62_1360232768.755' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_64_1360232768.755' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_65_1360232768.755' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_66_1360232768.755' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_67_1360232768.755' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_68_1360232768.755' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_69_1360232768.755' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_70_1360232768.755' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_71_1360232768.755' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_72_1360232768.755' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_73_1360232768.755' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_74_1360232768.755' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_75_1360232768.755' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_76_1360232768.755' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_77_1360232768.755' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_78_1360232768.755' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_79_1360232768.755' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_80_1360232768.755' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_81_1360232768.755' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_82_1360232768.755' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_83_1360232768.755' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_84_1360232768.755' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_85_1360232768.755' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_86_1360232768.755' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_87_1360232768.755' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_90_1360232768.755' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_91_1360232768.755' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_92_1360232768.755' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_93_1360232768.755' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_94_1360232768.755' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_95_1360232768.755' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_96_1360232768.755' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_97_1360232768.755' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_98_1360232768.755' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_99_1360232768.755' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_100_1360232768.755' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_101_1360232768.755' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_102_1360232768.755' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_103_1360232768.755' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_104_1360232768.755' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_105_1360232768.755' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_106_1360232768.755' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_107_1360232768.755' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_108_1360232768.755' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_109_1360232768.755' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_110_1360232768.755' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_111_1360232768.755' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_112_1360232768.755' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_113_1360232768.755' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_114_1360232768.755' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_115_1360232768.755' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_116_1360232768.755' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_117_1360232768.755' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_118_1360232768.755' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_119_1360232768.755' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_120_1360232768.755' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_121_1360232768.755' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_122_1360232768.755' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_123_1360232768.755' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_124_1360232768.755' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_126_1360232768.755' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_127_1360232768.755' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_128_1360232768.755' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_129_1360232768.755' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_130_1360232768.755' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_131_1360232768.755' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_132_1360232768.755' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_133_1360232768.755' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_134_1360232768.755' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_135_1360232768.755' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_136_1360232768.755' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_137_1360232768.755' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_138_1360232768.755' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_139_1360232768.755' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_140_1360232768.755' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_141_1360232768.755' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_142_1360232768.755' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_143_1360232768.755' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_144_1360232768.755' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_145_1360232768.755' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_146_1360232768.755' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_147_1360232768.755' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_148_1360232768.755' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_149_1360232768.755' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_150_1360232768.755' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_151_1360232768.755' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_152_1360232768.755' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_153_1360232768.755' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_154_1360232768.755' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_155_1360232768.755' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_156_1360232768.755' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_157_1360232768.755' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_158_1360232768.755' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_159_1360232768.755' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_160_1360232768.755' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_161_1360232768.755' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_162_1360232768.755' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_163_1360232768.755' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_164_1360232768.755' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_165_1360232768.755' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_166_1360232768.755' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_167_1360232768.755' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_168_1360232768.755' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_169_1360232768.755' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_170_1360232768.755' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_171_1360232768.755' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_172_1360232768.755' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_173_1360232768.755' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_174_1360232768.755' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_175_1360232768.755' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_176_1360232768.755' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_177_1360232768.755' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_178_1360232768.755' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_179_1360232768.755' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_180_1360232768.755' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_181_1360232768.755' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_182_1360232768.755' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_183_1360232768.755' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_184_1360232768.755' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_185_1360232768.755' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_186_1360232768.755' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_187_1360232768.755' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_188_1360232768.755' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_189_1360232768.755' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_190_1360232768.755' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_191_1360232768.755' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_192_1360232768.755' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_193_1360232768.755' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_194_1360232768.755' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_195_1360232768.755' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_196_1360232768.755' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_197_1360232768.755' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_198_1360232768.755' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_199_1360232768.755' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_200_1360232768.755' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_201_1360232768.755' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_202_1360232768.755' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_203_1360232768.755' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_204_1360232768.755' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_205_1360232768.755' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_206_1360232768.755' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_207_1360232768.755' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_208_1360232768.755' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_209_1360232768.755' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_210_1360232768.755' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_211_1360232768.755' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_212_1360232768.755' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_213_1360232768.755' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_214_1360232768.755' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_215_1360232768.755' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_217_1360232768.755' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_219_1360232768.755' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_221_1360232768.755' 
    capture_lex $P5255
    .return ($P5255) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_32_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 604
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P106, $P5006
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P107, $P5007
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P108, $P5008
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P109, $P5009
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P110, $P5010
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback311
    nqp_get_sc_object $P5022, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback312
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback312:
    unless_null $P5020, vivi_61313
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_61313:
    set $P101, $P5020
  fallback311:
    nqp_get_sc_object $P5030, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback314
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5031
  fallback314:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback315
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback316
    nqp_get_sc_object $P5036, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback316:
    unless_null $P5032, vivi_62317
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_62317:
    set $P101, $P5032
  fallback315:
    nqp_get_sc_object $P5042, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback318
    nqp_get_sc_object $P5043, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5043
  fallback318:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback319
    nqp_get_sc_object $P5046, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback320
    nqp_get_sc_object $P5048, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback320:
    unless_null $P5044, vivi_63321
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_63321:
    set $P101, $P5044
  fallback319:
    nqp_get_sc_object $P5054, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback322
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5051, $P5055
  fallback322:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback323
    nqp_get_sc_object $P5058, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback324
    nqp_get_sc_object $P5060, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback324:
    unless_null $P5056, vivi_64325
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_64325:
    set $P101, $P5056
  fallback323:
    nqp_get_sc_object $P5066, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback326
    nqp_get_sc_object $P5067, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5063, $P5067
  fallback326:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback330
    nqp_get_sc_object $P5077, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback331
    nqp_get_sc_object $P5079, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback331:
    unless_null $P5075, vivi_66332
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_66332:
    set $P102, $P5075
  fallback330:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback333
    nqp_get_sc_object $P5085, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback334
    nqp_get_sc_object $P5087, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback334:
    unless_null $P5083, vivi_67335
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_67335:
    set $P102, $P5083
  fallback333:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
.annotate 'line', 623
    nqp_decontainerize $P5092, _lex_param_0
    $P5093 = $P5092."target"()
    set $S5003, $P5093
    nqp_sha1 $S5002, $S5003
    find_dynamic_lex $P5096, "%*COMPILING"
    unless_null $P5096, fallback338
    nqp_get_sc_object $P5099, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["%COMPILING"]
    unless_null $P5097, fallback339
    nqp_get_sc_object $P5101, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5100, $P5101
    new $P5102, 'Hash'
    set $P5100["%COMPILING"], $P5102
    set $P5097, $P5102
  fallback339:
    unless_null $P5097, vivi_69340
    die "Contextual %*COMPILING not found"
    box $P5103, "Contextual %*COMPILING not found"
    set $P5097, $P5103
  vivi_69340:
    set $P5096, $P5097
  fallback338:
    set $P5095, $P5096["%?OPTIONS"]
    unless_null $P5095, fallback341
    nqp_get_sc_object $P5104, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5095, $P5104
  fallback341:
    set $P5094, $P5095["stable-sc"]
    unless_null $P5094, fallback342
    nqp_get_sc_object $P5105, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5094, $P5105
  fallback342:
    unless $P5094 goto if68_else336 
    set $S5006, ""
    goto if68_end337
  if68_else336:
    time $N5001
    set $S5005, $N5001
    concat $S5004, "-", $S5005
    set $S5006, $S5004
  if68_end337:
    concat $S5001, $S5002, $S5006
    box $P5106, $S5001
    set $P104, $P5106
    isnull $I5001, $P103
    unless $I5001 goto if70_else343 
.annotate 'line', 626
    nqp_get_sc_object $P5110, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback345
    nqp_get_sc_object $P5111, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5107, $P5111
  fallback345:
    $P5112 = $P5107."new"($P104 :named("handle"))
    set $P5119, $P5112
    goto if70_end344
  if70_else343:
.annotate 'line', 627
    nqp_get_sc_object $P5116, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5115, $P5116, "NQP"
    get_who $P5114, $P5115
    set $P5113, $P5114["World"]
    unless_null $P5113, fallback346
    nqp_get_sc_object $P5117, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5113, $P5117
  fallback346:
    $P5118 = $P5113."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5119, $P5118
  if70_end344:
    set $P105, $P5119
    box $P5120, ""
    set $P106, $P5120
    box $P5121, ""
    set $P107, $P5121
    box $P5122, ""
    set $P108, $P5122
    box $P5123, 0
    set $P109, $P5123
    box $P5124, 0
    set $P110, $P5124
    box $P5125, 0
    set $P111, $P5125
.annotate 'line', 636
    nqp_decontainerize $P5133, _lex_param_0
    $P5134 = $P5133."comp_unit"()
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_33_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 641
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx72_tgt
    .local int rx72_pos
    .local int rx72_off
    .local int rx72_eos
    .local int rx72_rep
    .local pmc rx72_cur
    .local pmc rx72_curclass
    .local pmc rx72_bstack
    .local pmc rx72_cstack
    (rx72_cur, rx72_tgt, rx72_pos, rx72_curclass, rx72_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx72_cur
    length rx72_eos, rx72_tgt
    eq $I19, 1, rx72_restart352
    gt rx72_pos, rx72_eos, rx72_fail353
    repr_get_attr_int $I11, self, rx72_curclass, "$!from"
    ne $I11, -1, rxscan73_done359
    goto rxscan73_scan358
  rxscan73_loop357:
    inc rx72_pos
    gt rx72_pos, rx72_eos, rx72_fail353
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!from", rx72_pos
  rxscan73_scan358:
    nqp_rxmark rx72_bstack, rxscan73_loop357, rx72_pos, 0
  rxscan73_done359:
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."ident"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail353
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    nqp_rxmark rx72_bstack, rxquantr75_done362, rx72_pos, 0
  rxquantr75_loop361:
  alt76_0364:
    nqp_rxmark rx72_bstack, alt76_1365, rx72_pos, 0
    add $I11, rx72_pos, 1
    gt $I11, rx72_eos, rx72_fail353
    substr $S10, rx72_tgt, rx72_pos, 1
    ne $S10, ucs4:"-", rx72_fail353
    add rx72_pos, 1
    goto alt76_end363
  alt76_1365:
    ge rx72_pos, rx72_eos, rx72_fail353
    substr $S11, rx72_tgt, rx72_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx72_fail353
    inc rx72_pos
  alt76_end363:
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."ident"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail353
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    nqp_rxpeek $I19, rx72_bstack, rxquantr75_done362
    inc $I19
    inc $I19
    set rx72_rep, rx72_bstack[$I19]
    nqp_rxcommit rx72_bstack, rxquantr75_done362
    inc rx72_rep
    nqp_rxmark rx72_bstack, rxquantr75_done362, rx72_pos, rx72_rep
    goto rxquantr75_loop361
  rxquantr75_done362:
    rx72_cur."!cursor_pass"(rx72_pos, "identifier", 'backtrack'=>1)
    .return (rx72_cur)
  rx72_restart352:
    repr_get_attr_obj rx72_cstack, rx72_cur, rx72_curclass, "$!cstack"
  rx72_fail353:
    unless rx72_bstack, rx72_done351
    pop $I19, rx72_bstack
    if_null rx72_cstack, rx72_cstack_done356
    unless rx72_cstack, rx72_cstack_done356
    dec $I19
    set $P11, rx72_cstack[$I19]
  rx72_cstack_done356:
    pop rx72_rep, rx72_bstack
    pop rx72_pos, rx72_bstack
    pop $I19, rx72_bstack
    lt rx72_pos, -1, rx72_done351
    lt rx72_pos, 0, rx72_fail353
    eq $I19, 0, rx72_fail353
    nqp_islist $I20, rx72_cstack
    unless $I20, rx72_jump354
    elements $I18, rx72_bstack
    le $I18, 0, rx72_cut355
    dec $I18
    set $I18, rx72_bstack[$I18]
  rx72_cut355:
    assign rx72_cstack, $I18
  rx72_jump354:
    jump $I19
  rx72_done351:
    rx72_cur."!cursor_fail"()
    .return (rx72_cur) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_34_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 643
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    (rx78_cur, rx78_tgt, rx78_pos, rx78_curclass, rx78_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart369
    gt rx78_pos, rx78_eos, rx78_fail370
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done376
    goto rxscan79_scan375
  rxscan79_loop374:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail370
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan375:
    nqp_rxmark rx78_bstack, rxscan79_loop374, rx78_pos, 0
  rxscan79_done376:
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail370
    nqp_rxmark rx78_bstack, rxsubrule80_pass377, -1, 0
  rxsubrule80_pass377:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    nqp_rxmark rx78_bstack, rxquantr81_done379, rx78_pos, 0
  rxquantr81_loop378:
    add $I11, rx78_pos, 2
    gt $I11, rx78_eos, rx78_fail370
    substr $S10, rx78_tgt, rx78_pos, 2
    ne $S10, ucs4:"::", rx78_fail370
    add rx78_pos, 2
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail370
    nqp_rxmark rx78_bstack, rxsubrule82_pass380, -1, 0
  rxsubrule82_pass380:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    nqp_rxpeek $I19, rx78_bstack, rxquantr81_done379
    inc $I19
    inc $I19
    set rx78_rep, rx78_bstack[$I19]
    nqp_rxcommit rx78_bstack, rxquantr81_done379
    inc rx78_rep
    nqp_rxmark rx78_bstack, rxquantr81_done379, rx78_pos, rx78_rep
    goto rxquantr81_loop378
  rxquantr81_done379:
    rx78_cur."!cursor_pass"(rx78_pos, "name", 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart369:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail370:
    unless rx78_bstack, rx78_done368
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done373
    unless rx78_cstack, rx78_cstack_done373
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done373:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done368
    lt rx78_pos, 0, rx78_fail370
    eq $I19, 0, rx78_fail370
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump371
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut372
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut372:
    assign rx78_cstack, $I18
  rx78_jump371:
    jump $I19
  rx78_done368:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_35_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 645
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx83_tgt
    .local int rx83_pos
    .local int rx83_off
    .local int rx83_eos
    .local int rx83_rep
    .local pmc rx83_cur
    .local pmc rx83_curclass
    .local pmc rx83_bstack
    .local pmc rx83_cstack
    (rx83_cur, rx83_tgt, rx83_pos, rx83_curclass, rx83_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx83_cur
    length rx83_eos, rx83_tgt
    eq $I19, 1, rx83_restart383
    gt rx83_pos, rx83_eos, rx83_fail384
    repr_get_attr_int $I11, self, rx83_curclass, "$!from"
    ne $I11, -1, rxscan84_done390
    goto rxscan84_scan389
  rxscan84_loop388:
    inc rx83_pos
    gt rx83_pos, rx83_eos, rx83_fail384
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!from", rx83_pos
  rxscan84_scan389:
    nqp_rxmark rx83_bstack, rxscan84_loop388, rx83_pos, 0
  rxscan84_done390:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
    nqp_rxmark rx83_bstack, rxsubrule85_pass391, -1, 0
  rxsubrule85_pass391:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    nqp_rxmark rx83_bstack, rxquantr86_done393, rx83_pos, 0
  rxquantr86_loop392:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
    goto rxsubrule87_pass394
  rxsubrule87_back395:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
  rxsubrule87_pass394:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule87_back395
    push rx83_bstack, $I11
    push rx83_bstack, 0
    push rx83_bstack, rx83_pos
    elements $I11, rx83_cstack
    push rx83_bstack, $I11
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    nqp_rxpeek $I19, rx83_bstack, rxquantr86_done393
    inc $I19
    inc $I19
    set rx83_rep, rx83_bstack[$I19]
    nqp_rxcommit rx83_bstack, rxquantr86_done393
    inc rx83_rep
  rxquantr86_done393:
    rx83_cur."!cursor_pass"(rx83_pos, "deflongname", 'backtrack'=>1)
    .return (rx83_cur)
  rx83_restart383:
    repr_get_attr_obj rx83_cstack, rx83_cur, rx83_curclass, "$!cstack"
  rx83_fail384:
    unless rx83_bstack, rx83_done382
    pop $I19, rx83_bstack
    if_null rx83_cstack, rx83_cstack_done387
    unless rx83_cstack, rx83_cstack_done387
    dec $I19
    set $P11, rx83_cstack[$I19]
  rx83_cstack_done387:
    pop rx83_rep, rx83_bstack
    pop rx83_pos, rx83_bstack
    pop $I19, rx83_bstack
    lt rx83_pos, -1, rx83_done382
    lt rx83_pos, 0, rx83_fail384
    eq $I19, 0, rx83_fail384
    nqp_islist $I20, rx83_cstack
    unless $I20, rx83_jump385
    elements $I18, rx83_bstack
    le $I18, 0, rx83_cut386
    dec $I18
    set $I18, rx83_bstack[$I18]
  rx83_cut386:
    assign rx83_cstack, $I18
  rx83_jump385:
    jump $I19
  rx83_done382:
    rx83_cur."!cursor_fail"()
    .return (rx83_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_36_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 649
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx88_tgt
    .local int rx88_pos
    .local int rx88_off
    .local int rx88_eos
    .local int rx88_rep
    .local pmc rx88_cur
    .local pmc rx88_curclass
    .local pmc rx88_bstack
    .local pmc rx88_cstack
    (rx88_cur, rx88_tgt, rx88_pos, rx88_curclass, rx88_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx88_cur
    length rx88_eos, rx88_tgt
    eq $I19, 1, rx88_restart398
    gt rx88_pos, rx88_eos, rx88_fail399
    repr_get_attr_int $I11, self, rx88_curclass, "$!from"
    ne $I11, -1, rxscan89_done405
    goto rxscan89_scan404
  rxscan89_loop403:
    inc rx88_pos
    gt rx88_pos, rx88_eos, rx88_fail399
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!from", rx88_pos
  rxscan89_scan404:
    nqp_rxmark rx88_bstack, rxscan89_loop403, rx88_pos, 0
  rxscan89_done405:
    nqp_rxmark rx88_bstack, rxquantr90_done407, rx88_pos, 0
  rxquantr90_loop406:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt91_0409
    nqp_push_label $P11, alt91_1414
    nqp_rxmark rx88_bstack, alt91_end408, -1, 0
    rx88_cur."!alt"(rx88_pos, "alt_nfa__1_1360232769.919", $P11)
    goto rx88_fail399
  alt91_0409:
    nqp_rxmark rx88_bstack, rxquantr92_done411, rx88_pos, 0
  rxquantr92_loop410:
    ge rx88_pos, rx88_eos, rx88_fail399
    substr $S11, rx88_tgt, rx88_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx88_fail399
    inc rx88_pos
    nqp_rxpeek $I19, rx88_bstack, rxquantr92_done411
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr92_done411
    inc rx88_rep
    nqp_rxmark rx88_bstack, rxquantr92_done411, rx88_pos, rx88_rep
    goto rxquantr92_loop410
  rxquantr92_done411:
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, rx88_pos
    if $I11, rxanchor93_done412
    ne rx88_pos, rx88_eos, rx88_fail399
    eq rx88_pos, 0, rxanchor93_done412
    sub $I11, rx88_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, $I11
    if $I11, rx88_fail399
  rxanchor93_done412:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."ws"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto alt91_end408
  alt91_1414:
    nqp_rxmark rx88_bstack, rxquantr95_done416, rx88_pos, 0
  rxquantr95_loop415:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."unv"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto rxsubrule96_pass417
  rxsubrule96_back418:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
  rxsubrule96_pass417:
    rx88_cstack = rx88_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule96_back418
    push rx88_bstack, $I11
    push rx88_bstack, 0
    push rx88_bstack, rx88_pos
    elements $I11, rx88_cstack
    push rx88_bstack, $I11
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    nqp_rxpeek $I19, rx88_bstack, rxquantr95_done416
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr95_done416
    inc rx88_rep
  rxquantr95_done416:
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, rx88_pos
    if $I11, rxanchor97_done419
    ne rx88_pos, rx88_eos, rx88_fail399
    eq rx88_pos, 0, rxanchor97_done419
    sub $I11, rx88_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, $I11
    if $I11, rx88_fail399
  rxanchor97_done419:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."ws"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto alt91_end408
  alt91_end408:
    nqp_rxpeek $I19, rx88_bstack, rxquantr90_done407
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr90_done407
    inc rx88_rep
  rxquantr90_done407:
    rx88_cur."!cursor_pass"(rx88_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx88_cur)
  rx88_restart398:
    repr_get_attr_obj rx88_cstack, rx88_cur, rx88_curclass, "$!cstack"
  rx88_fail399:
    unless rx88_bstack, rx88_done397
    pop $I19, rx88_bstack
    if_null rx88_cstack, rx88_cstack_done402
    unless rx88_cstack, rx88_cstack_done402
    dec $I19
    set $P11, rx88_cstack[$I19]
  rx88_cstack_done402:
    pop rx88_rep, rx88_bstack
    pop rx88_pos, rx88_bstack
    pop $I19, rx88_bstack
    lt rx88_pos, -1, rx88_done397
    lt rx88_pos, 0, rx88_fail399
    eq $I19, 0, rx88_fail399
    nqp_islist $I20, rx88_cstack
    unless $I20, rx88_jump400
    elements $I18, rx88_bstack
    le $I18, 0, rx88_cut401
    dec $I18
    set $I18, rx88_bstack[$I18]
  rx88_cut401:
    assign rx88_cstack, $I18
  rx88_jump400:
    jump $I19
  rx88_done397:
    rx88_cur."!cursor_fail"()
    .return (rx88_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_37_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 656
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx99_tgt
    .local int rx99_pos
    .local int rx99_off
    .local int rx99_eos
    .local int rx99_rep
    .local pmc rx99_cur
    .local pmc rx99_curclass
    .local pmc rx99_bstack
    .local pmc rx99_cstack
    (rx99_cur, rx99_tgt, rx99_pos, rx99_curclass, rx99_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx99_cur
    length rx99_eos, rx99_tgt
    eq $I19, 1, rx99_restart423
    gt rx99_pos, rx99_eos, rx99_fail424
    repr_get_attr_int $I11, self, rx99_curclass, "$!from"
    ne $I11, -1, rxscan100_done430
    goto rxscan100_scan429
  rxscan100_loop428:
    inc rx99_pos
    gt rx99_pos, rx99_eos, rx99_fail424
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!from", rx99_pos
  rxscan100_scan429:
    nqp_rxmark rx99_bstack, rxscan100_loop428, rx99_pos, 0
  rxscan100_done430:
  alt101_0432:
    nqp_rxmark rx99_bstack, alt101_1433, rx99_pos, 0
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
    goto alt101_end431
  alt101_1433:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."ww"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    ge $I11, 0, rx99_fail424
    nqp_rxmark rx99_bstack, rxquantr102_done435, rx99_pos, 0
  rxquantr102_loop434:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt103_0437
    nqp_push_label $P11, alt103_1440
    nqp_push_label $P11, alt103_2443
    nqp_push_label $P11, alt103_3446
    nqp_rxmark rx99_bstack, alt103_end436, -1, 0
    rx99_cur."!alt"(rx99_pos, "alt_nfa__2_1360232769.935", $P11)
    goto rx99_fail424
  alt103_0437:
    nqp_rxmark rx99_bstack, rxquantr104_done439, -1, 0
  rxquantr104_loop438:
    ge rx99_pos, rx99_eos, rx99_fail424
    substr $S11, rx99_tgt, rx99_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx99_fail424
    inc rx99_pos
    nqp_rxpeek $I19, rx99_bstack, rxquantr104_done439
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr104_done439
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr104_done439, rx99_pos, rx99_rep
    goto rxquantr104_loop438
  rxquantr104_done439:
    goto alt103_end436
  alt103_1440:
    add $I11, rx99_pos, 1
    gt $I11, rx99_eos, rx99_fail424
    substr $S10, rx99_tgt, rx99_pos, 1
    ne $S10, ucs4:"#", rx99_fail424
    add rx99_pos, 1
    nqp_rxmark rx99_bstack, rxquantr105_done442, rx99_pos, 0
  rxquantr105_loop441:
    ge rx99_pos, rx99_eos, rx99_fail424
    is_cclass $I11, .CCLASS_NEWLINE, rx99_tgt, rx99_pos
    if $I11, rx99_fail424
    add rx99_pos, 1
    nqp_rxpeek $I19, rx99_bstack, rxquantr105_done442
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr105_done442
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr105_done442, rx99_pos, rx99_rep
    goto rxquantr105_loop441
  rxquantr105_done442:
    goto alt103_end436
  alt103_2443:
    eq rx99_pos, 0, rxanchor106_done444
    ge rx99_pos, rx99_eos, rx99_fail424
    sub $I11, rx99_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx99_tgt, $I11
    unless $I11, rx99_fail424
  rxanchor106_done444:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    goto alt103_end436
  alt103_3446:
    nqp_rxmark rx99_bstack, rxquantr108_done448, -1, 0
  rxquantr108_loop447:
    ge rx99_pos, rx99_eos, rx99_fail424
    substr $S11, rx99_tgt, rx99_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx99_fail424
    inc rx99_pos
    nqp_rxpeek $I19, rx99_bstack, rxquantr108_done448
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr108_done448
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr108_done448, rx99_pos, rx99_rep
    goto rxquantr108_loop447
  rxquantr108_done448:
    goto alt103_end436
  alt103_end436:
    nqp_rxpeek $I19, rx99_bstack, rxquantr102_done435
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr102_done435
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr102_done435, rx99_pos, rx99_rep
    goto rxquantr102_loop434
  rxquantr102_done435:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
  alt101_end431:
    rx99_cur."!cursor_pass"(rx99_pos, "ws", 'backtrack'=>1)
    .return (rx99_cur)
  rx99_restart423:
    repr_get_attr_obj rx99_cstack, rx99_cur, rx99_curclass, "$!cstack"
  rx99_fail424:
    unless rx99_bstack, rx99_done422
    pop $I19, rx99_bstack
    if_null rx99_cstack, rx99_cstack_done427
    unless rx99_cstack, rx99_cstack_done427
    dec $I19
    set $P11, rx99_cstack[$I19]
  rx99_cstack_done427:
    pop rx99_rep, rx99_bstack
    pop rx99_pos, rx99_bstack
    pop $I19, rx99_bstack
    lt rx99_pos, -1, rx99_done422
    lt rx99_pos, 0, rx99_fail424
    eq $I19, 0, rx99_fail424
    nqp_islist $I20, rx99_cstack
    unless $I20, rx99_jump425
    elements $I18, rx99_bstack
    le $I18, 0, rx99_cut426
    dec $I18
    set $I18, rx99_bstack[$I18]
  rx99_cut426:
    assign rx99_cstack, $I18
  rx99_jump425:
    jump $I19
  rx99_done422:
    rx99_cur."!cursor_fail"()
    .return (rx99_cur) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_38_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 667
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1360232768.755' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    (rx109_cur, rx109_tgt, rx109_pos, rx109_curclass, rx109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart451
    gt rx109_pos, rx109_eos, rx109_fail452
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done458
    goto rxscan110_scan457
  rxscan110_loop456:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail452
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan457:
    nqp_rxmark rx109_bstack, rxscan110_loop456, rx109_pos, 0
  rxscan110_done458:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt111_0460
    nqp_push_label $P11, alt111_1478
    nqp_push_label $P11, alt111_2483
    nqp_rxmark rx109_bstack, alt111_end459, -1, 0
    rx109_cur."!alt"(rx109_pos, "alt_nfa__4_1360232769.953", $P11)
    goto rx109_fail452
  alt111_0460:
    eq rx109_pos, 0, rxanchor112_done461
    ge rx109_pos, rx109_eos, rx109_fail452
    sub $I11, rx109_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx109_tgt, $I11
    unless $I11, rx109_fail452
  rxanchor112_done461:
    .const 'Sub' $P5001 = 'cuid_39_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail452
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail452
    repr_get_attr_int rx109_pos, $P11, rx109_curclass, "$!pos"
    goto alt111_end459
  alt111_1478:
    nqp_rxmark rx109_bstack, rxquantr118_done480, rx109_pos, 0
  rxquantr118_loop479:
    ge rx109_pos, rx109_eos, rx109_fail452
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail452
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr118_done480
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr118_done480
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr118_done480, rx109_pos, rx109_rep
    goto rxquantr118_loop479
  rxquantr118_done480:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail452
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"#", rx109_fail452
    add rx109_pos, 1
    nqp_rxmark rx109_bstack, rxquantr119_done482, rx109_pos, 0
  rxquantr119_loop481:
    ge rx109_pos, rx109_eos, rx109_fail452
    is_cclass $I11, .CCLASS_NEWLINE, rx109_tgt, rx109_pos
    if $I11, rx109_fail452
    add rx109_pos, 1
    nqp_rxpeek $I19, rx109_bstack, rxquantr119_done482
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr119_done482
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr119_done482, rx109_pos, rx109_rep
    goto rxquantr119_loop481
  rxquantr119_done482:
    goto alt111_end459
  alt111_2483:
    nqp_rxmark rx109_bstack, rxquantr120_done485, -1, 0
  rxquantr120_loop484:
    ge rx109_pos, rx109_eos, rx109_fail452
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail452
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr120_done485
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr120_done485
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr120_done485, rx109_pos, rx109_rep
    goto rxquantr120_loop484
  rxquantr120_done485:
    goto alt111_end459
  alt111_end459:
    nqp_rxcommit rx109_bstack, alt111_end459
    rx109_cur."!cursor_pass"(rx109_pos, "unv", 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart451:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail452:
    unless rx109_bstack, rx109_done450
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done455
    unless rx109_cstack, rx109_cstack_done455
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done455:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done450
    lt rx109_pos, 0, rx109_fail452
    eq $I19, 0, rx109_fail452
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump453
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut454
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut454:
    assign rx109_cstack, $I18
  rx109_jump453:
    jump $I19
  rx109_done450:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1360232768.755") :anon :lex :outer("cuid_38_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    (rx113_cur, rx113_tgt, rx113_pos, rx113_curclass, rx113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart464
    gt rx113_pos, rx113_eos, rx113_fail465
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done471
    goto rxscan114_scan470
  rxscan114_loop469:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail465
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan470:
    nqp_rxmark rx113_bstack, rxscan114_loop469, rx113_pos, 0
  rxscan114_done471:
    nqp_rxmark rx113_bstack, rxquantr115_done473, rx113_pos, 0
  rxquantr115_loop472:
    ge rx113_pos, rx113_eos, rx113_fail465
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx113_fail465
    inc rx113_pos
    nqp_rxpeek $I19, rx113_bstack, rxquantr115_done473
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr115_done473
    inc rx113_rep
    nqp_rxmark rx113_bstack, rxquantr115_done473, rx113_pos, rx113_rep
    goto rxquantr115_loop472
  rxquantr115_done473:
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail465
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"=", rx113_fail465
    add rx113_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt116_0475
    nqp_push_label $P11, alt116_1476
    nqp_rxmark rx113_bstack, alt116_end474, -1, 0
    rx113_cur."!alt"(rx113_pos, "alt_nfa__3_1360232769.945", $P11)
    goto rx113_fail465
  alt116_0475:
    ge rx113_pos, rx113_eos, rx113_fail465
    is_cclass $I11, .CCLASS_WORD, rx113_tgt, rx113_pos
    unless $I11, rx113_fail465
    add rx113_pos, 1
    goto alt116_end474
  alt116_1476:
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail465
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"\\", rx113_fail465
    add rx113_pos, 1
    goto alt116_end474
  alt116_end474:
    nqp_rxcommit rx113_bstack, alt116_end474
    rx113_cur."!cursor_pass"(rx113_pos, 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart464:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail465:
    unless rx113_bstack, rx113_done463
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done468
    unless rx113_cstack, rx113_cstack_done468
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done468:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done463
    lt rx113_pos, 0, rx113_fail465
    eq $I19, 0, rx113_fail465
    nqp_islist $I20, rx113_cstack
    unless $I20, rx113_jump466
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut467
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut467:
    assign rx113_cstack, $I18
  rx113_jump466:
    jump $I19
  rx113_done463:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_40_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 676
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1360232768.755' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx121_tgt
    .local int rx121_pos
    .local int rx121_off
    .local int rx121_eos
    .local int rx121_rep
    .local pmc rx121_cur
    .local pmc rx121_curclass
    .local pmc rx121_bstack
    .local pmc rx121_cstack
    (rx121_cur, rx121_tgt, rx121_pos, rx121_curclass, rx121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx121_cur
    length rx121_eos, rx121_tgt
    eq $I19, 1, rx121_restart488
    gt rx121_pos, rx121_eos, rx121_fail489
    repr_get_attr_int $I11, self, rx121_curclass, "$!from"
    ne $I11, -1, rxscan122_done495
    goto rxscan122_scan494
  rxscan122_loop493:
    inc rx121_pos
    gt rx121_pos, rx121_eos, rx121_fail489
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!from", rx121_pos
  rxscan122_scan494:
    nqp_rxmark rx121_bstack, rxscan122_loop493, rx121_pos, 0
  rxscan122_done495:
    eq rx121_pos, 0, rxanchor123_done496
    ge rx121_pos, rx121_eos, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    unless $I11, rx121_fail489
  rxanchor123_done496:
    nqp_rxmark rx121_bstack, rxquantr124_done498, rx121_pos, 0
  rxquantr124_loop497:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr124_done498
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr124_done498
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr124_done498, rx121_pos, rx121_rep
    goto rxquantr124_loop497
  rxquantr124_done498:
    add $I11, rx121_pos, 1
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 1
    ne $S10, ucs4:"=", rx121_fail489
    add rx121_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt125_0500
    nqp_push_label $P11, alt125_1519
    nqp_push_label $P11, alt125_2538
    nqp_push_label $P11, alt125_3560
    nqp_push_label $P11, alt125_4585
    nqp_rxmark rx121_bstack, alt125_end499, -1, 0
    rx121_cur."!alt"(rx121_pos, "alt_nfa__6_1360232770.032", $P11)
    goto rx121_fail489
  alt125_0500:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    nqp_rxmark rx121_bstack, rxquantr126_done502, -1, 0
  rxquantr126_loop501:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr126_done502
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr126_done502
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr126_done502, rx121_pos, rx121_rep
    goto rxquantr126_loop501
  rxquantr126_done502:
    add $I11, rx121_pos, 3
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 3
    ne $S10, ucs4:"END", rx121_fail489
    add rx121_pos, 3
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
  alt128_0505:
    nqp_rxmark rx121_bstack, alt128_1516, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf129_loop506, rx121_pos, rx121_rep
    goto rxquantf129_done507
  rxquantf129_loop506:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf129_loop506, rx121_pos, rx121_rep
  rxquantf129_done507:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr130_done510, rx121_pos, 0
  rxquantr130_loop509:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr130_done510
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr130_done510
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr130_done510, rx121_pos, rx121_rep
    goto rxquantr130_loop509
  rxquantr130_done510:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    nqp_rxmark rx121_bstack, rxquantr131_done512, -1, 0
  rxquantr131_loop511:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr131_done512
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr131_done512
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr131_done512, rx121_pos, rx121_rep
    goto rxquantr131_loop511
  rxquantr131_done512:
    add $I11, rx121_pos, 3
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 3
    ne $S10, ucs4:"END", rx121_fail489
    add rx121_pos, 3
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr133_done515, rx121_pos, 0
  rxquantr133_loop514:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr133_done515
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr133_done515
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr133_done515, rx121_pos, rx121_rep
    goto rxquantr133_loop514
  rxquantr133_done515:
    goto alt128_end504
  alt128_1516:
    nqp_rxmark rx121_bstack, rxquantr134_done518, rx121_pos, 0
  rxquantr134_loop517:
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr134_done518
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr134_done518
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr134_done518, rx121_pos, rx121_rep
    goto rxquantr134_loop517
  rxquantr134_done518:
  alt128_end504:
    goto alt125_end499
  alt125_1519:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    nqp_rxmark rx121_bstack, rxquantr135_done521, -1, 0
  rxquantr135_loop520:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr135_done521
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr135_done521
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr135_done521, rx121_pos, rx121_rep
    goto rxquantr135_loop520
  rxquantr135_done521:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    nqp_rxmark rx121_bstack, rxsubrule136_pass522, -1, 0
  rxsubrule136_pass522:
    rx121_cstack = rx121_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt137_0524:
    nqp_rxmark rx121_bstack, alt137_1536, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf138_loop525, rx121_pos, rx121_rep
    goto rxquantf138_done526
  rxquantf138_loop525:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf138_loop525, rx121_pos, rx121_rep
  rxquantf138_done526:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr139_done529, rx121_pos, 0
  rxquantr139_loop528:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr139_done529
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr139_done529
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr139_done529, rx121_pos, rx121_rep
    goto rxquantr139_loop528
  rxquantr139_done529:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    nqp_rxmark rx121_bstack, rxquantr140_done531, -1, 0
  rxquantr140_loop530:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr140_done531
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr140_done531
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr140_done531, rx121_pos, rx121_rep
    goto rxquantr140_loop530
  rxquantr140_done531:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr143_done535, rx121_pos, 0
  rxquantr143_loop534:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr143_done535
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr143_done535
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr143_done535, rx121_pos, rx121_rep
    goto rxquantr143_loop534
  rxquantr143_done535:
    goto alt137_end523
  alt137_1536:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt137_end523:
    goto alt125_end499
  alt125_2538:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr146_done541, rx121_pos, 0
  rxquantr146_loop540:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr146_done541
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr146_done541
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr146_done541, rx121_pos, rx121_rep
    goto rxquantr146_loop540
  rxquantr146_done541:
  alt147_0543:
    nqp_rxmark rx121_bstack, alt147_1545, rx121_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rxanchor148_done544
    ne rx121_pos, rx121_eos, rx121_fail489
    eq rx121_pos, 0, rxanchor148_done544
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    if $I11, rx121_fail489
  rxanchor148_done544:
    goto alt147_end542
  alt147_1545:
    nqp_rxmark rx121_bstack, alt147_2546, rx121_pos, 0
    add $I11, rx121_pos, 1
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 1
    ne $S10, ucs4:"#", rx121_fail489
    add rx121_pos, 1
    goto alt147_end542
  alt147_2546:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt147_end542:
  alt150_0549:
    nqp_rxmark rx121_bstack, alt150_1558, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf151_loop550, rx121_pos, rx121_rep
    goto rxquantf151_done551
  rxquantf151_loop550:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf151_loop550, rx121_pos, rx121_rep
  rxquantf151_done551:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr152_done554, rx121_pos, 0
  rxquantr152_loop553:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr152_done554
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr152_done554
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr152_done554, rx121_pos, rx121_rep
    goto rxquantr152_loop553
  rxquantr152_done554:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr154_done557, rx121_pos, 0
  rxquantr154_loop556:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr154_done557
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr154_done557
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr154_done557, rx121_pos, rx121_rep
    goto rxquantr154_loop556
  rxquantr154_done557:
    goto alt150_end548
  alt150_1558:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt150_end548:
    goto alt125_end499
  alt125_3560:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    nqp_rxmark rx121_bstack, rxsubrule156_pass561, -1, 0
  rxsubrule156_pass561:
    rx121_cstack = rx121_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf157_loop562, rx121_pos, rx121_rep
    goto rxquantf157_done563
  rxquantf157_loop562:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf157_loop562, rx121_pos, rx121_rep
  rxquantf157_done563:
    eq rx121_pos, 0, rxanchor158_done565
    ge rx121_pos, rx121_eos, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    unless $I11, rx121_fail489
  rxanchor158_done565:
    .const 'Sub' $P5001 = 'cuid_41_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    goto alt125_end499
  alt125_4585:
  alt166_0587:
    nqp_rxmark rx121_bstack, alt166_1588, rx121_pos, 0
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_WHITESPACE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    add rx121_pos, 1
    goto alt166_end586
  alt166_1588:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt166_end586:
    nqp_rxmark rx121_bstack, rxquantr168_done591, rx121_pos, 0
  rxquantr168_loop590:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr168_done591
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr168_done591
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr168_done591, rx121_pos, rx121_rep
    goto rxquantr168_loop590
  rxquantr168_done591:
    goto alt125_end499
  alt125_end499:
    nqp_rxcommit rx121_bstack, alt125_end499
    rx121_cur."!cursor_pass"(rx121_pos, "pod_comment", 'backtrack'=>1)
    .return (rx121_cur)
  rx121_restart488:
    repr_get_attr_obj rx121_cstack, rx121_cur, rx121_curclass, "$!cstack"
  rx121_fail489:
    unless rx121_bstack, rx121_done487
    pop $I19, rx121_bstack
    if_null rx121_cstack, rx121_cstack_done492
    unless rx121_cstack, rx121_cstack_done492
    dec $I19
    set $P11, rx121_cstack[$I19]
  rx121_cstack_done492:
    pop rx121_rep, rx121_bstack
    pop rx121_pos, rx121_bstack
    pop $I19, rx121_bstack
    lt rx121_pos, -1, rx121_done487
    lt rx121_pos, 0, rx121_fail489
    eq $I19, 0, rx121_fail489
    nqp_islist $I20, rx121_cstack
    unless $I20, rx121_jump490
    elements $I18, rx121_bstack
    le $I18, 0, rx121_cut491
    dec $I18
    set $I18, rx121_bstack[$I18]
  rx121_cut491:
    assign rx121_cstack, $I18
  rx121_jump490:
    jump $I19
  rx121_done487:
    rx121_cur."!cursor_fail"()
    .return (rx121_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1360232768.755") :anon :lex :outer("cuid_40_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx159_tgt
    .local int rx159_pos
    .local int rx159_off
    .local int rx159_eos
    .local int rx159_rep
    .local pmc rx159_cur
    .local pmc rx159_curclass
    .local pmc rx159_bstack
    .local pmc rx159_cstack
    (rx159_cur, rx159_tgt, rx159_pos, rx159_curclass, rx159_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx159_cur
    length rx159_eos, rx159_tgt
    eq $I19, 1, rx159_restart568
    gt rx159_pos, rx159_eos, rx159_fail569
    repr_get_attr_int $I11, self, rx159_curclass, "$!from"
    ne $I11, -1, rxscan160_done575
    goto rxscan160_scan574
  rxscan160_loop573:
    inc rx159_pos
    gt rx159_pos, rx159_eos, rx159_fail569
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!from", rx159_pos
  rxscan160_scan574:
    nqp_rxmark rx159_bstack, rxscan160_loop573, rx159_pos, 0
  rxscan160_done575:
    nqp_rxmark rx159_bstack, rxquantr161_done577, rx159_pos, 0
  rxquantr161_loop576:
    ge rx159_pos, rx159_eos, rx159_fail569
    substr $S11, rx159_tgt, rx159_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx159_fail569
    inc rx159_pos
    nqp_rxpeek $I19, rx159_bstack, rxquantr161_done577
    inc $I19
    inc $I19
    set rx159_rep, rx159_bstack[$I19]
    nqp_rxcommit rx159_bstack, rxquantr161_done577
    inc rx159_rep
    nqp_rxmark rx159_bstack, rxquantr161_done577, rx159_pos, rx159_rep
    goto rxquantr161_loop576
  rxquantr161_done577:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt162_0579
    nqp_push_label $P11, alt162_1584
    nqp_rxmark rx159_bstack, alt162_end578, -1, 0
    rx159_cur."!alt"(rx159_pos, "alt_nfa__5_1360232770.02", $P11)
    goto rx159_fail569
  alt162_0579:
    add $I11, rx159_pos, 1
    gt $I11, rx159_eos, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 1
    ne $S10, ucs4:"=", rx159_fail569
    add rx159_pos, 1
    nqp_rxmark rx159_bstack, rxquantr163_done581, rx159_pos, 0
  rxquantr163_loop580:
    add $I11, rx159_pos, 3
    gt $I11, rx159_eos, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 3
    ne $S10, ucs4:"cut", rx159_fail569
    add rx159_pos, 3
    le rx159_pos, 0, rx159_fail569
    is_cclass $I11, .CCLASS_WORD, rx159_tgt, rx159_pos
    if $I11, rx159_fail569
    sub $I11, rx159_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx159_tgt, $I11
    unless $I11, rx159_fail569
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!pos", rx159_pos
    $P11 = rx159_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx159_curclass, "$!pos"
    lt $I11, 0, rx159_fail569
    repr_get_attr_int rx159_pos, $P11, rx159_curclass, "$!pos"
    nqp_rxpeek $I19, rx159_bstack, rxquantr163_done581
    inc $I19
    inc $I19
    set rx159_rep, rx159_bstack[$I19]
    nqp_rxcommit rx159_bstack, rxquantr163_done581
    inc rx159_rep
  rxquantr163_done581:
    goto alt162_end578
  alt162_1584:
    ge rx159_pos, rx159_eos, rx159_fail569
    is_cclass $I11, .CCLASS_NEWLINE, rx159_tgt, rx159_pos
    unless $I11, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx159_pos, $I11
    add rx159_pos, 1
    goto alt162_end578
  alt162_end578:
    nqp_rxcommit rx159_bstack, alt162_end578
    rx159_cur."!cursor_pass"(rx159_pos, 'backtrack'=>1)
    .return (rx159_cur)
  rx159_restart568:
    repr_get_attr_obj rx159_cstack, rx159_cur, rx159_curclass, "$!cstack"
  rx159_fail569:
    unless rx159_bstack, rx159_done567
    pop $I19, rx159_bstack
    if_null rx159_cstack, rx159_cstack_done572
    unless rx159_cstack, rx159_cstack_done572
    dec $I19
    set $P11, rx159_cstack[$I19]
  rx159_cstack_done572:
    pop rx159_rep, rx159_bstack
    pop rx159_pos, rx159_bstack
    pop $I19, rx159_bstack
    lt rx159_pos, -1, rx159_done567
    lt rx159_pos, 0, rx159_fail569
    eq $I19, 0, rx159_fail569
    nqp_islist $I20, rx159_cstack
    unless $I20, rx159_jump570
    elements $I18, rx159_bstack
    le $I18, 0, rx159_cut571
    dec $I18
    set $I18, rx159_bstack[$I18]
  rx159_cut571:
    assign rx159_cstack, $I18
  rx159_jump570:
    jump $I19
  rx159_done567:
    rx159_cur."!cursor_fail"()
    .return (rx159_cur) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_42_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 707
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_388_1360232768.755' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_389_1360232768.755' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_391_1360232768.755' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_392_1360232768.755' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P106, $P5006
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx169_tgt
    .local int rx169_pos
    .local int rx169_off
    .local int rx169_eos
    .local int rx169_rep
    .local pmc rx169_cur
    .local pmc rx169_curclass
    .local pmc rx169_bstack
    .local pmc rx169_cstack
    (rx169_cur, rx169_tgt, rx169_pos, rx169_curclass, rx169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx169_cur
    length rx169_eos, rx169_tgt
    eq $I19, 1, rx169_restart594
    gt rx169_pos, rx169_eos, rx169_fail595
    repr_get_attr_int $I11, self, rx169_curclass, "$!from"
    ne $I11, -1, rxscan170_done601
    goto rxscan170_scan600
  rxscan170_loop599:
    inc rx169_pos
    gt rx169_pos, rx169_eos, rx169_fail595
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!from", rx169_pos
  rxscan170_scan600:
    nqp_rxmark rx169_bstack, rxscan170_loop599, rx169_pos, 0
  rxscan170_done601:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P103, fallback602
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback603
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5013
  fallback603:
    unless_null $P5010, vivi_171604
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_171604:
    set $P103, $P5010
  fallback602:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
.annotate 'line', 712
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback605
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback606
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5019
  fallback606:
    unless_null $P5016, vivi_172607
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_172607:
    set $P5015, $P5016
  fallback605:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
.annotate 'line', 716
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback608
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback609
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5026
  fallback609:
    unless_null $P5023, vivi_173610
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_173610:
    set $P5022, $P5023
  fallback608:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback611
    nqp_get_sc_object $P5032, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback612
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback612:
    unless_null $P5030, vivi_174613
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_174613:
    set $P5029, $P5030
  fallback611:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback614
    nqp_get_sc_object $P5037, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5037
  fallback614:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_388_1360232768.755' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P105, fallback630
    nqp_get_sc_object $P5044, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback631
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5045
  fallback631:
    unless_null $P5042, vivi_180632
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_180632:
    set $P105, $P5042
  fallback630:
    set $P106, $P105
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_389_1360232768.755' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P107, fallback642
    nqp_get_sc_object $P5052, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback643
    nqp_get_sc_object $P5053, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5050, $P5053
  fallback643:
    unless_null $P5050, vivi_184644
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_184644:
    set $P107, $P5050
  fallback642:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_391_1360232768.755' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_392_1360232768.755' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    nqp_rxmark rx169_bstack, rxsubrule199_pass688, -1, 0
  rxsubrule199_pass688:
    rx169_cstack = rx169_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
  alt200_0690:
    nqp_rxmark rx169_bstack, alt200_1692, rx169_pos, 0
    lt rx169_pos, rx169_eos, rx169_fail595
    goto alt200_end689
  alt200_1692:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
  alt200_end689:
    rx169_cur."!cursor_pass"(rx169_pos, "comp_unit", 'backtrack'=>1)
    .return (rx169_cur)
  rx169_restart594:
    repr_get_attr_obj rx169_cstack, rx169_cur, rx169_curclass, "$!cstack"
  rx169_fail595:
    unless rx169_bstack, rx169_done593
    pop $I19, rx169_bstack
    if_null rx169_cstack, rx169_cstack_done598
    unless rx169_cstack, rx169_cstack_done598
    dec $I19
    set $P11, rx169_cstack[$I19]
  rx169_cstack_done598:
    pop rx169_rep, rx169_bstack
    pop rx169_pos, rx169_bstack
    pop $I19, rx169_bstack
    lt rx169_pos, -1, rx169_done593
    lt rx169_pos, 0, rx169_fail595
    eq $I19, 0, rx169_fail595
    nqp_islist $I20, rx169_cstack
    unless $I20, rx169_jump596
    elements $I18, rx169_bstack
    le $I18, 0, rx169_cut597
    dec $I18
    set $I18, rx169_bstack[$I18]
  rx169_cut597:
    assign rx169_cstack, $I18
  rx169_jump596:
    jump $I19
  rx169_done593:
    rx169_cur."!cursor_fail"()
    .return (rx169_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1360232768.755") :anon :lex :outer("cuid_42_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 717

.annotate 'line', 718
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback615
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback616
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback616:
    unless_null $P5003, vivi_175617
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_175617:
    set $P5002, $P5003
  fallback615:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback618
    nqp_get_sc_object $P5011, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback619
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback619:
    unless_null $P5009, vivi_176620
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_176620:
    set $P5008, $P5009
  fallback618:
    $P5001."compose"($P5008)
.annotate 'line', 719
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback621
    nqp_get_sc_object $P5017, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback622
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5018
  fallback622:
    unless_null $P5015, vivi_177623
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_177623:
    set $P5014, $P5015
  fallback621:
    find_dynamic_lex $P5020, "$*UNIT"
    unless_null $P5020, fallback624
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$UNIT"]
    unless_null $P5021, fallback625
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5024
  fallback625:
    unless_null $P5021, vivi_178626
    die "Contextual $*UNIT not found"
    box $P5025, "Contextual $*UNIT not found"
    set $P5021, $P5025
  vivi_178626:
    set $P5020, $P5021
  fallback624:
    find_dynamic_lex $P5026, "$*GLOBALish"
    unless_null $P5026, fallback627
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$GLOBALish"]
    unless_null $P5027, fallback628
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5030
  fallback628:
    unless_null $P5027, vivi_179629
    die "Contextual $*GLOBALish not found"
    box $P5031, "Contextual $*GLOBALish not found"
    set $P5027, $P5031
  vivi_179629:
    set $P5026, $P5027
  fallback627:
    $P5032 = $P5014."install_lexical_symbol"($P5020, "GLOBALish", $P5026)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1360232768.755") :anon :lex :outer("cuid_42_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 724

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback633
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback634
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback634:
    unless_null $P5002, vivi_181635
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_181635:
    set $P5001, $P5002
  fallback633:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback636
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback637
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5011
  fallback637:
    unless_null $P5008, vivi_182638
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_182638:
    set $P5007, $P5008
  fallback636:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback639
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback640
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5017
  fallback640:
    unless_null $P5014, vivi_183641
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_183641:
    set $P5013, $P5014
  fallback639:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1360232768.755") :anon :lex :outer("cuid_42_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 728
    .const 'Sub' $P5017 = 'cuid_390_1360232768.755' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback647
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback648
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback648:
    unless_null $P5004, vivi_186649
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_186649:
    set $P5003, $P5004
  fallback647:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback650
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5011
  fallback650:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback651
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5012
  fallback651:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless185_end646 
    .const 'Sub' $P5013 = 'cuid_390_1360232768.755' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless185_end646:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1360232768.755") :anon :lex :outer("cuid_391_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 729
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 730
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback652
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback653
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback653:
    unless_null $P5003, vivi_187654
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_187654:
    set $P5002, $P5003
  fallback652:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback655
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback656
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback656:
    unless_null $P5010, vivi_188657
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_188657:
    set $P5009, $P5010
  fallback655:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback658
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5017
  fallback658:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 731
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback659
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback660
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5024
  fallback660:
    unless_null $P5021, vivi_189661
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_189661:
    set $P5020, $P5021
  fallback659:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback662
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback663
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5030
  fallback663:
    unless_null $P5027, vivi_190664
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_190664:
    set $P5026, $P5027
  fallback662:
    $P5019."compose"($P5026)
.annotate 'line', 732
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback665
    nqp_get_sc_object $P5035, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback666
    nqp_get_sc_object $P5036, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5033, $P5036
  fallback666:
    unless_null $P5033, vivi_191667
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_191667:
    set $P5032, $P5033
  fallback665:
    find_dynamic_lex $P5038, "$*UNIT"
    unless_null $P5038, fallback668
    nqp_get_sc_object $P5041, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$UNIT"]
    unless_null $P5039, fallback669
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5042
  fallback669:
    unless_null $P5039, vivi_192670
    die "Contextual $*UNIT not found"
    box $P5043, "Contextual $*UNIT not found"
    set $P5039, $P5043
  vivi_192670:
    set $P5038, $P5039
  fallback668:
    find_dynamic_lex $P5044, "$*EXPORT"
    unless_null $P5044, fallback671
    nqp_get_sc_object $P5047, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$EXPORT"]
    unless_null $P5045, fallback672
    nqp_get_sc_object $P5048, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5045, $P5048
  fallback672:
    unless_null $P5045, vivi_193673
    die "Contextual $*EXPORT not found"
    box $P5049, "Contextual $*EXPORT not found"
    set $P5045, $P5049
  vivi_193673:
    set $P5044, $P5045
  fallback671:
    $P5032."install_lexical_symbol"($P5038, "EXPORT", $P5044)
.annotate 'line', 733
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback674
    nqp_get_sc_object $P5053, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback675
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5051, $P5054
  fallback675:
    unless_null $P5051, vivi_194676
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_194676:
    set $P5050, $P5051
  fallback674:
    find_dynamic_lex $P5057, "%*HOW"
    unless_null $P5057, fallback677
    nqp_get_sc_object $P5060, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%HOW"]
    unless_null $P5058, fallback678
    nqp_get_sc_object $P5062, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%HOW"], $P5063
    set $P5058, $P5063
  fallback678:
    unless_null $P5058, vivi_195679
    die "Contextual %*HOW not found"
    box $P5064, "Contextual %*HOW not found"
    set $P5058, $P5064
  vivi_195679:
    set $P5057, $P5058
  fallback677:
    set $P5056, $P5057["knowhow"]
    unless_null $P5056, fallback680
    nqp_get_sc_object $P5065, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5056, $P5065
  fallback680:
    $P5066 = $P5050."pkg_create_mo"($P5056, "DEFAULT" :named("name"))
    set $P101, $P5066
.annotate 'line', 734
    get_how $P5067, $P101
    $P5067."compose"($P101)
    find_dynamic_lex $P5069, "$*EXPORT"
    unless_null $P5069, fallback681
    nqp_get_sc_object $P5072, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$EXPORT"]
    unless_null $P5070, fallback682
    nqp_get_sc_object $P5073, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5070, $P5073
  fallback682:
    unless_null $P5070, vivi_196683
    die "Contextual $*EXPORT not found"
    box $P5074, "Contextual $*EXPORT not found"
    set $P5070, $P5074
  vivi_196683:
    set $P5069, $P5070
  fallback681:
    get_who $P5068, $P5069
    set $P5068["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1360232768.755") :anon :lex :outer("cuid_42_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 739

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback684
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback685
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback685:
    unless_null $P5002, vivi_197686
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_197686:
    set $P5001, $P5002
  fallback684:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_43_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 747
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx203_tgt
    .local int rx203_pos
    .local int rx203_off
    .local int rx203_eos
    .local int rx203_rep
    .local pmc rx203_cur
    .local pmc rx203_curclass
    .local pmc rx203_bstack
    .local pmc rx203_cstack
    (rx203_cur, rx203_tgt, rx203_pos, rx203_curclass, rx203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx203_cur
    length rx203_eos, rx203_tgt
    eq $I19, 1, rx203_restart696
    gt rx203_pos, rx203_eos, rx203_fail697
    repr_get_attr_int $I11, self, rx203_curclass, "$!from"
    ne $I11, -1, rxscan204_done703
    goto rxscan204_scan702
  rxscan204_loop701:
    inc rx203_pos
    gt rx203_pos, rx203_eos, rx203_fail697
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!from", rx203_pos
  rxscan204_scan702:
    nqp_rxmark rx203_bstack, rxscan204_loop701, rx203_pos, 0
  rxscan204_done703:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt205_0705
    nqp_push_label $P11, alt205_1709
    nqp_rxmark rx203_bstack, alt205_end704, -1, 0
    rx203_cur."!alt"(rx203_pos, "alt_nfa__7_1360232770.121", $P11)
    goto rx203_fail697
  alt205_0705:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    lt rx203_pos, rx203_eos, rx203_fail697
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    goto alt205_end704
  alt205_1709:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    nqp_rxmark rx203_bstack, rxquantr210_done712, rx203_pos, 0
  rxquantr210_loop711:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."statement"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    nqp_rxmark rx203_bstack, rxsubrule211_pass713, -1, 0
  rxsubrule211_pass713:
    rx203_cstack = rx203_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    nqp_rxpeek $I19, rx203_bstack, rxquantr210_done712
    inc $I19
    inc $I19
    set rx203_rep, rx203_bstack[$I19]
    nqp_rxcommit rx203_bstack, rxquantr210_done712
    inc rx203_rep
    nqp_rxmark rx203_bstack, rxquantr210_done712, rx203_pos, rx203_rep
    goto rxquantr210_loop711
  rxquantr210_done712:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    goto alt205_end704
  alt205_end704:
    rx203_cur."!cursor_pass"(rx203_pos, "statementlist", 'backtrack'=>1)
    .return (rx203_cur)
  rx203_restart696:
    repr_get_attr_obj rx203_cstack, rx203_cur, rx203_curclass, "$!cstack"
  rx203_fail697:
    unless rx203_bstack, rx203_done695
    pop $I19, rx203_bstack
    if_null rx203_cstack, rx203_cstack_done700
    unless rx203_cstack, rx203_cstack_done700
    dec $I19
    set $P11, rx203_cstack[$I19]
  rx203_cstack_done700:
    pop rx203_rep, rx203_bstack
    pop rx203_pos, rx203_bstack
    pop $I19, rx203_bstack
    lt rx203_pos, -1, rx203_done695
    lt rx203_pos, 0, rx203_fail697
    eq $I19, 0, rx203_fail697
    nqp_islist $I20, rx203_cstack
    unless $I20, rx203_jump698
    elements $I18, rx203_bstack
    le $I18, 0, rx203_cut699
    dec $I18
    set $I18, rx203_bstack[$I18]
  rx203_cut699:
    assign rx203_cstack, $I18
  rx203_jump698:
    jump $I19
  rx203_done695:
    rx203_cur."!cursor_fail"()
    .return (rx203_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_44_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 752
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_45_1360232768.755' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx215_tgt
    .local int rx215_pos
    .local int rx215_off
    .local int rx215_eos
    .local int rx215_rep
    .local pmc rx215_cur
    .local pmc rx215_curclass
    .local pmc rx215_bstack
    .local pmc rx215_cstack
    (rx215_cur, rx215_tgt, rx215_pos, rx215_curclass, rx215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx215_cur
    length rx215_eos, rx215_tgt
    eq $I19, 1, rx215_restart719
    gt rx215_pos, rx215_eos, rx215_fail720
    repr_get_attr_int $I11, self, rx215_curclass, "$!from"
    ne $I11, -1, rxscan216_done726
    goto rxscan216_scan725
  rxscan216_loop724:
    inc rx215_pos
    gt rx215_pos, rx215_eos, rx215_fail720
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!from", rx215_pos
  rxscan216_scan725:
    nqp_rxmark rx215_bstack, rxscan216_loop724, rx215_pos, 0
  rxscan216_done726:
    .const 'Sub' $P5001 = 'cuid_45_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    ge $I11, 0, rx215_fail720
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt222_0745
    nqp_push_label $P11, alt222_1747
    nqp_rxmark rx215_bstack, alt222_end744, -1, 0
    rx215_cur."!alt"(rx215_pos, "alt_nfa__9_1360232770.14", $P11)
    goto rx215_fail720
  alt222_0745:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule223_pass746, -1, 0
  rxsubrule223_pass746:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    goto alt222_end744
  alt222_1747:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule224_pass748, -1, 0
  rxsubrule224_pass748:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."ws"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxmark rx215_bstack, rxquantr226_done751, rx215_pos, 0
  rxquantr226_loop750:
  alt227_0753:
    nqp_rxmark rx215_bstack, alt227_1754, rx215_pos, 0
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    goto alt227_end752
  alt227_1754:
    nqp_rxmark rx215_bstack, alt227_2760, rx215_pos, 0
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule228_pass755, -1, 0
  rxsubrule228_pass755:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxmark rx215_bstack, rxquantr229_done757, rx215_pos, 0
  rxquantr229_loop756:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    goto rxsubrule230_pass758
  rxsubrule230_back759:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
  rxsubrule230_pass758:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule230_back759
    push rx215_bstack, $I11
    push rx215_bstack, 0
    push rx215_bstack, rx215_pos
    elements $I11, rx215_cstack
    push rx215_bstack, $I11
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxpeek $I19, rx215_bstack, rxquantr229_done757
    inc $I19
    inc $I19
    set rx215_rep, rx215_bstack[$I19]
    nqp_rxcommit rx215_bstack, rxquantr229_done757
    inc rx215_rep
  rxquantr229_done757:
    goto alt227_end752
  alt227_2760:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule231_pass761, -1, 0
  rxsubrule231_pass761:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
  alt227_end752:
    nqp_rxpeek $I19, rx215_bstack, rxquantr226_done751
    inc $I19
    inc $I19
    set rx215_rep, rx215_bstack[$I19]
    nqp_rxcommit rx215_bstack, rxquantr226_done751
    inc rx215_rep
  rxquantr226_done751:
    goto alt222_end744
  alt222_end744:
    nqp_rxcommit rx215_bstack, alt222_end744
    rx215_cur."!cursor_pass"(rx215_pos, "statement", 'backtrack'=>1)
    .return (rx215_cur)
  rx215_restart719:
    repr_get_attr_obj rx215_cstack, rx215_cur, rx215_curclass, "$!cstack"
  rx215_fail720:
    unless rx215_bstack, rx215_done718
    pop $I19, rx215_bstack
    if_null rx215_cstack, rx215_cstack_done723
    unless rx215_cstack, rx215_cstack_done723
    dec $I19
    set $P11, rx215_cstack[$I19]
  rx215_cstack_done723:
    pop rx215_rep, rx215_bstack
    pop rx215_pos, rx215_bstack
    pop $I19, rx215_bstack
    lt rx215_pos, -1, rx215_done718
    lt rx215_pos, 0, rx215_fail720
    eq $I19, 0, rx215_fail720
    nqp_islist $I20, rx215_cstack
    unless $I20, rx215_jump721
    elements $I18, rx215_bstack
    le $I18, 0, rx215_cut722
    dec $I18
    set $I18, rx215_bstack[$I18]
  rx215_cut722:
    assign rx215_cstack, $I18
  rx215_jump721:
    jump $I19
  rx215_done718:
    rx215_cur."!cursor_fail"()
    .return (rx215_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1360232768.755") :anon :lex :outer("cuid_44_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx217_tgt
    .local int rx217_pos
    .local int rx217_off
    .local int rx217_eos
    .local int rx217_rep
    .local pmc rx217_cur
    .local pmc rx217_curclass
    .local pmc rx217_bstack
    .local pmc rx217_cstack
    (rx217_cur, rx217_tgt, rx217_pos, rx217_curclass, rx217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx217_cur
    length rx217_eos, rx217_tgt
    eq $I19, 1, rx217_restart729
    gt rx217_pos, rx217_eos, rx217_fail730
    repr_get_attr_int $I11, self, rx217_curclass, "$!from"
    ne $I11, -1, rxscan218_done736
    goto rxscan218_scan735
  rxscan218_loop734:
    inc rx217_pos
    gt rx217_pos, rx217_eos, rx217_fail730
    repr_bind_attr_int rx217_cur, rx217_curclass, "$!from", rx217_pos
  rxscan218_scan735:
    nqp_rxmark rx217_bstack, rxscan218_loop734, rx217_pos, 0
  rxscan218_done736:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt219_0738
    nqp_push_label $P11, alt219_1742
    nqp_rxmark rx217_bstack, alt219_end737, -1, 0
    rx217_cur."!alt"(rx217_pos, "alt_nfa__8_1360232770.127", $P11)
    goto rx217_fail730
  alt219_0738:
  alt220_0740:
    nqp_rxmark rx217_bstack, alt220_1741, rx217_pos, 0
    add $I11, rx217_pos, 1
    gt $I11, rx217_eos, rx217_fail730
    substr $S10, rx217_tgt, rx217_pos, 1
    ne $S10, ucs4:"]", rx217_fail730
    add rx217_pos, 1
    goto alt220_end739
  alt220_1741:
    ge rx217_pos, rx217_eos, rx217_fail730
    substr $S11, rx217_tgt, rx217_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx217_fail730
    inc rx217_pos
  alt220_end739:
    goto alt219_end737
  alt219_1742:
    lt rx217_pos, rx217_eos, rx217_fail730
    goto alt219_end737
  alt219_end737:
    rx217_cur."!cursor_pass"(rx217_pos, 'backtrack'=>1)
    .return (rx217_cur)
  rx217_restart729:
    repr_get_attr_obj rx217_cstack, rx217_cur, rx217_curclass, "$!cstack"
  rx217_fail730:
    unless rx217_bstack, rx217_done728
    pop $I19, rx217_bstack
    if_null rx217_cstack, rx217_cstack_done733
    unless rx217_cstack, rx217_cstack_done733
    dec $I19
    set $P11, rx217_cstack[$I19]
  rx217_cstack_done733:
    pop rx217_rep, rx217_bstack
    pop rx217_pos, rx217_bstack
    pop $I19, rx217_bstack
    lt rx217_pos, -1, rx217_done728
    lt rx217_pos, 0, rx217_fail730
    eq $I19, 0, rx217_fail730
    nqp_islist $I20, rx217_cstack
    unless $I20, rx217_jump731
    elements $I18, rx217_bstack
    le $I18, 0, rx217_cut732
    dec $I18
    set $I18, rx217_bstack[$I18]
  rx217_cut732:
    assign rx217_cstack, $I18
  rx217_jump731:
    jump $I19
  rx217_done728:
    rx217_cur."!cursor_fail"()
    .return (rx217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_46_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 765
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    (rx232_cur, rx232_tgt, rx232_pos, rx232_curclass, rx232_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart764
    gt rx232_pos, rx232_eos, rx232_fail765
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done771
    goto rxscan233_scan770
  rxscan233_loop769:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail765
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan770:
    nqp_rxmark rx232_bstack, rxscan233_loop769, rx232_pos, 0
  rxscan233_done771:
  alt234_0773:
    nqp_rxmark rx232_bstack, alt234_1774, rx232_pos, 0
    add $I11, rx232_pos, 1
    gt $I11, rx232_eos, rx232_fail765
    substr $S10, rx232_tgt, rx232_pos, 1
    ne $S10, ucs4:";", rx232_fail765
    add rx232_pos, 1
    goto alt234_end772
  alt234_1774:
    nqp_rxmark rx232_bstack, alt234_2775, rx232_pos, 0
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail765
    goto alt234_end772
  alt234_2775:
    nqp_rxmark rx232_bstack, alt234_3776, rx232_pos, 0
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail765
    goto alt234_end772
  alt234_3776:
    lt rx232_pos, rx232_eos, rx232_fail765
  alt234_end772:
    rx232_cur."!cursor_pass"(rx232_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart764:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail765:
    unless rx232_bstack, rx232_done763
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done768
    unless rx232_cstack, rx232_cstack_done768
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done768:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done763
    lt rx232_pos, 0, rx232_fail765
    eq $I19, 0, rx232_fail765
    nqp_islist $I20, rx232_cstack
    unless $I20, rx232_jump766
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut767
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut767:
    assign rx232_cstack, $I18
  rx232_jump766:
    jump $I19
  rx232_done763:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_47_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx236_tgt
    .local int rx236_pos
    .local int rx236_off
    .local int rx236_eos
    .local int rx236_rep
    .local pmc rx236_cur
    .local pmc rx236_curclass
    .local pmc rx236_bstack
    .local pmc rx236_cstack
    (rx236_cur, rx236_tgt, rx236_pos, rx236_curclass, rx236_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx236_cur
    length rx236_eos, rx236_tgt
    eq $I19, 1, rx236_restart780
    gt rx236_pos, rx236_eos, rx236_fail781
    repr_get_attr_int $I11, self, rx236_curclass, "$!from"
    ne $I11, -1, rxscan237_done787
    goto rxscan237_scan786
  rxscan237_loop785:
    inc rx236_pos
    gt rx236_pos, rx236_eos, rx236_fail781
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!from", rx236_pos
  rxscan237_scan786:
    nqp_rxmark rx236_bstack, rxscan237_loop785, rx236_pos, 0
  rxscan237_done787:
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    nqp_rxmark rx236_bstack, rxsubrule238_pass788, -1, 0
  rxsubrule238_pass788:
    rx236_cstack = rx236_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."ws"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    nqp_rxmark rx236_bstack, rxsubrule240_pass790, -1, 0
  rxsubrule240_pass790:
    rx236_cstack = rx236_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    rx236_cur."!cursor_pass"(rx236_pos, "xblock", 'backtrack'=>1)
    .return (rx236_cur)
  rx236_restart780:
    repr_get_attr_obj rx236_cstack, rx236_cur, rx236_curclass, "$!cstack"
  rx236_fail781:
    unless rx236_bstack, rx236_done779
    pop $I19, rx236_bstack
    if_null rx236_cstack, rx236_cstack_done784
    unless rx236_cstack, rx236_cstack_done784
    dec $I19
    set $P11, rx236_cstack[$I19]
  rx236_cstack_done784:
    pop rx236_rep, rx236_bstack
    pop rx236_pos, rx236_bstack
    pop $I19, rx236_bstack
    lt rx236_pos, -1, rx236_done779
    lt rx236_pos, 0, rx236_fail781
    eq $I19, 0, rx236_fail781
    nqp_islist $I20, rx236_cstack
    unless $I20, rx236_jump782
    elements $I18, rx236_bstack
    le $I18, 0, rx236_cut783
    dec $I18
    set $I18, rx236_bstack[$I18]
  rx236_cut783:
    assign rx236_cstack, $I18
  rx236_jump782:
    jump $I19
  rx236_done779:
    rx236_cur."!cursor_fail"()
    .return (rx236_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_48_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx241_tgt
    .local int rx241_pos
    .local int rx241_off
    .local int rx241_eos
    .local int rx241_rep
    .local pmc rx241_cur
    .local pmc rx241_curclass
    .local pmc rx241_bstack
    .local pmc rx241_cstack
    (rx241_cur, rx241_tgt, rx241_pos, rx241_curclass, rx241_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx241_cur
    length rx241_eos, rx241_tgt
    eq $I19, 1, rx241_restart793
    gt rx241_pos, rx241_eos, rx241_fail794
    repr_get_attr_int $I11, self, rx241_curclass, "$!from"
    ne $I11, -1, rxscan242_done800
    goto rxscan242_scan799
  rxscan242_loop798:
    inc rx241_pos
    gt rx241_pos, rx241_eos, rx241_fail794
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!from", rx241_pos
  rxscan242_scan799:
    nqp_rxmark rx241_bstack, rxscan242_loop798, rx241_pos, 0
  rxscan242_done800:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt243_0802
    nqp_push_label $P11, alt243_1808
    nqp_push_label $P11, alt243_2811
    nqp_rxmark rx241_bstack, alt243_end801, -1, 0
    rx241_cur."!alt"(rx241_pos, "alt_nfa__10_1360232770.166", $P11)
    goto rx241_fail794
  alt243_0802:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."signature"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule246_pass805, -1, 0
  rxsubrule246_pass805:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule248_pass807, -1, 0
  rxsubrule248_pass807:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_1808:
    ge rx241_pos, rx241_eos, rx241_fail794
    substr $S11, rx241_tgt, rx241_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx241_fail794
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule250_pass810, -1, 0
  rxsubrule250_pass810:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_2811:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_end801:
    rx241_cur."!cursor_pass"(rx241_pos, "pblock", 'backtrack'=>1)
    .return (rx241_cur)
  rx241_restart793:
    repr_get_attr_obj rx241_cstack, rx241_cur, rx241_curclass, "$!cstack"
  rx241_fail794:
    unless rx241_bstack, rx241_done792
    pop $I19, rx241_bstack
    if_null rx241_cstack, rx241_cstack_done797
    unless rx241_cstack, rx241_cstack_done797
    dec $I19
    set $P11, rx241_cstack[$I19]
  rx241_cstack_done797:
    pop rx241_rep, rx241_bstack
    pop rx241_pos, rx241_bstack
    pop $I19, rx241_bstack
    lt rx241_pos, -1, rx241_done792
    lt rx241_pos, 0, rx241_fail794
    eq $I19, 0, rx241_fail794
    nqp_islist $I20, rx241_cstack
    unless $I20, rx241_jump795
    elements $I18, rx241_bstack
    le $I18, 0, rx241_cut796
    dec $I18
    set $I18, rx241_bstack[$I18]
  rx241_cut796:
    assign rx241_cstack, $I18
  rx241_jump795:
    jump $I19
  rx241_done792:
    rx241_cur."!cursor_fail"()
    .return (rx241_cur) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_49_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 787
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx252_tgt
    .local int rx252_pos
    .local int rx252_off
    .local int rx252_eos
    .local int rx252_rep
    .local pmc rx252_cur
    .local pmc rx252_curclass
    .local pmc rx252_bstack
    .local pmc rx252_cstack
    (rx252_cur, rx252_tgt, rx252_pos, rx252_curclass, rx252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx252_cur
    length rx252_eos, rx252_tgt
    eq $I19, 1, rx252_restart815
    gt rx252_pos, rx252_eos, rx252_fail816
    repr_get_attr_int $I11, self, rx252_curclass, "$!from"
    ne $I11, -1, rxscan253_done822
    goto rxscan253_scan821
  rxscan253_loop820:
    inc rx252_pos
    gt rx252_pos, rx252_eos, rx252_fail816
    repr_bind_attr_int rx252_cur, rx252_curclass, "$!from", rx252_pos
  rxscan253_scan821:
    nqp_rxmark rx252_bstack, rxscan253_loop820, rx252_pos, 0
  rxscan253_done822:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt254_0824
    nqp_push_label $P11, alt254_1825
    nqp_rxmark rx252_bstack, alt254_end823, -1, 0
    rx252_cur."!alt"(rx252_pos, "alt_nfa__11_1360232770.172", $P11)
    goto rx252_fail816
  alt254_0824:
    add $I11, rx252_pos, 2
    gt $I11, rx252_eos, rx252_fail816
    substr $S10, rx252_tgt, rx252_pos, 2
    ne $S10, ucs4:"->", rx252_fail816
    add rx252_pos, 2
    goto alt254_end823
  alt254_1825:
    add $I11, rx252_pos, 3
    gt $I11, rx252_eos, rx252_fail816
    substr $S10, rx252_tgt, rx252_pos, 3
    ne $S10, ucs4:"<->", rx252_fail816
    add rx252_pos, 3
    goto alt254_end823
  alt254_end823:
    rx252_cur."!cursor_pass"(rx252_pos, "lambda", 'backtrack'=>1)
    .return (rx252_cur)
  rx252_restart815:
    repr_get_attr_obj rx252_cstack, rx252_cur, rx252_curclass, "$!cstack"
  rx252_fail816:
    unless rx252_bstack, rx252_done814
    pop $I19, rx252_bstack
    if_null rx252_cstack, rx252_cstack_done819
    unless rx252_cstack, rx252_cstack_done819
    dec $I19
    set $P11, rx252_cstack[$I19]
  rx252_cstack_done819:
    pop rx252_rep, rx252_bstack
    pop rx252_pos, rx252_bstack
    pop $I19, rx252_bstack
    lt rx252_pos, -1, rx252_done814
    lt rx252_pos, 0, rx252_fail816
    eq $I19, 0, rx252_fail816
    nqp_islist $I20, rx252_cstack
    unless $I20, rx252_jump817
    elements $I18, rx252_bstack
    le $I18, 0, rx252_cut818
    dec $I18
    set $I18, rx252_bstack[$I18]
  rx252_cut818:
    assign rx252_cstack, $I18
  rx252_jump817:
    jump $I19
  rx252_done814:
    rx252_cur."!cursor_fail"()
    .return (rx252_cur) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_50_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 789
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx255_tgt
    .local int rx255_pos
    .local int rx255_off
    .local int rx255_eos
    .local int rx255_rep
    .local pmc rx255_cur
    .local pmc rx255_curclass
    .local pmc rx255_bstack
    .local pmc rx255_cstack
    (rx255_cur, rx255_tgt, rx255_pos, rx255_curclass, rx255_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx255_cur
    length rx255_eos, rx255_tgt
    eq $I19, 1, rx255_restart828
    gt rx255_pos, rx255_eos, rx255_fail829
    repr_get_attr_int $I11, self, rx255_curclass, "$!from"
    ne $I11, -1, rxscan256_done835
    goto rxscan256_scan834
  rxscan256_loop833:
    inc rx255_pos
    gt rx255_pos, rx255_eos, rx255_fail829
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!from", rx255_pos
  rxscan256_scan834:
    nqp_rxmark rx255_bstack, rxscan256_loop833, rx255_pos, 0
  rxscan256_done835:
  alt257_0837:
    nqp_rxmark rx255_bstack, alt257_1838, rx255_pos, 0
    ge rx255_pos, rx255_eos, rx255_fail829
    substr $S11, rx255_tgt, rx255_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx255_fail829
    goto alt257_end836
  alt257_1838:
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
  alt257_end836:
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    nqp_rxmark rx255_bstack, rxsubrule260_pass841, -1, 0
  rxsubrule260_pass841:
    rx255_cstack = rx255_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
    rx255_cur."!cursor_pass"(rx255_pos, "block", 'backtrack'=>1)
    .return (rx255_cur)
  rx255_restart828:
    repr_get_attr_obj rx255_cstack, rx255_cur, rx255_curclass, "$!cstack"
  rx255_fail829:
    unless rx255_bstack, rx255_done827
    pop $I19, rx255_bstack
    if_null rx255_cstack, rx255_cstack_done832
    unless rx255_cstack, rx255_cstack_done832
    dec $I19
    set $P11, rx255_cstack[$I19]
  rx255_cstack_done832:
    pop rx255_rep, rx255_bstack
    pop rx255_pos, rx255_bstack
    pop $I19, rx255_bstack
    lt rx255_pos, -1, rx255_done827
    lt rx255_pos, 0, rx255_fail829
    eq $I19, 0, rx255_fail829
    nqp_islist $I20, rx255_cstack
    unless $I20, rx255_jump830
    elements $I18, rx255_bstack
    le $I18, 0, rx255_cut831
    dec $I18
    set $I18, rx255_bstack[$I18]
  rx255_cut831:
    assign rx255_cstack, $I18
  rx255_jump830:
    jump $I19
  rx255_done827:
    rx255_cur."!cursor_fail"()
    .return (rx255_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_51_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 795
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart844
    gt rx261_pos, rx261_eos, rx261_fail845
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done851
    goto rxscan262_scan850
  rxscan262_loop849:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail845
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan850:
    nqp_rxmark rx261_bstack, rxscan262_loop849, rx261_pos, 0
  rxscan262_done851:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    store_lex unicode:"$\x{a2}", rx261_cur
    unless_null $P101, fallback852
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback853
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback853:
    unless_null $P5002, vivi_263854
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_263854:
    set $P101, $P5002
  fallback852:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt265_0857:
    nqp_rxmark rx261_bstack, alt265_1859, rx261_pos, 0
    add $I11, rx261_pos, 14
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx261_fail845
    add rx261_pos, 14
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    nqp_rxmark rx261_bstack, rxsubrule266_pass858, -1, 0
  rxsubrule266_pass858:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    goto alt265_end856
  alt265_1859:
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"{", rx261_fail845
    add rx261_pos, 1
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    nqp_rxmark rx261_bstack, rxsubrule267_pass860, -1, 0
  rxsubrule267_pass860:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt268_0862:
    nqp_rxmark rx261_bstack, alt268_1863, rx261_pos, 0
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"}", rx261_fail845
    add rx261_pos, 1
    goto alt268_end861
  alt268_1863:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    goto rxsubrule269_pass864
  rxsubrule269_back865:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
  rxsubrule269_pass864:
    rx261_cstack = rx261_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule269_back865
    push rx261_bstack, $I11
    push rx261_bstack, 0
    push rx261_bstack, rx261_pos
    elements $I11, rx261_cstack
    push rx261_bstack, $I11
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt268_end861:
  alt265_end856:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    rx261_cur."!cursor_pass"(rx261_pos, "blockoid", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart844:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail845:
    unless rx261_bstack, rx261_done843
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done848
    unless rx261_cstack, rx261_cstack_done848
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done848:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done843
    lt rx261_pos, 0, rx261_fail845
    eq $I19, 0, rx261_fail845
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump846
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut847
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut847:
    assign rx261_cstack, $I18
  rx261_jump846:
    jump $I19
  rx261_done843:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_52_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 805
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx270_tgt
    .local int rx270_pos
    .local int rx270_off
    .local int rx270_eos
    .local int rx270_rep
    .local pmc rx270_cur
    .local pmc rx270_curclass
    .local pmc rx270_bstack
    .local pmc rx270_cstack
    (rx270_cur, rx270_tgt, rx270_pos, rx270_curclass, rx270_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx270_cur
    length rx270_eos, rx270_tgt
    eq $I19, 1, rx270_restart868
    gt rx270_pos, rx270_eos, rx270_fail869
    repr_get_attr_int $I11, self, rx270_curclass, "$!from"
    ne $I11, -1, rxscan271_done875
    goto rxscan271_scan874
  rxscan271_loop873:
    inc rx270_pos
    gt rx270_pos, rx270_eos, rx270_fail869
    repr_bind_attr_int rx270_cur, rx270_curclass, "$!from", rx270_pos
  rxscan271_scan874:
    nqp_rxmark rx270_bstack, rxscan271_loop873, rx270_pos, 0
  rxscan271_done875:
    rx270_cur."!cursor_pass"(rx270_pos, "newpad", 'backtrack'=>1)
    .return (rx270_cur)
  rx270_restart868:
    repr_get_attr_obj rx270_cstack, rx270_cur, rx270_curclass, "$!cstack"
  rx270_fail869:
    unless rx270_bstack, rx270_done867
    pop $I19, rx270_bstack
    if_null rx270_cstack, rx270_cstack_done872
    unless rx270_cstack, rx270_cstack_done872
    dec $I19
    set $P11, rx270_cstack[$I19]
  rx270_cstack_done872:
    pop rx270_rep, rx270_bstack
    pop rx270_pos, rx270_bstack
    pop $I19, rx270_bstack
    lt rx270_pos, -1, rx270_done867
    lt rx270_pos, 0, rx270_fail869
    eq $I19, 0, rx270_fail869
    nqp_islist $I20, rx270_cstack
    unless $I20, rx270_jump870
    elements $I18, rx270_bstack
    le $I18, 0, rx270_cut871
    dec $I18
    set $I18, rx270_bstack[$I18]
  rx270_cut871:
    assign rx270_cstack, $I18
  rx270_jump870:
    jump $I19
  rx270_done867:
    rx270_cur."!cursor_fail"()
    .return (rx270_cur) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_53_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 806
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx273_tgt
    .local int rx273_pos
    .local int rx273_off
    .local int rx273_eos
    .local int rx273_rep
    .local pmc rx273_cur
    .local pmc rx273_curclass
    .local pmc rx273_bstack
    .local pmc rx273_cstack
    (rx273_cur, rx273_tgt, rx273_pos, rx273_curclass, rx273_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx273_cur
    length rx273_eos, rx273_tgt
    eq $I19, 1, rx273_restart879
    gt rx273_pos, rx273_eos, rx273_fail880
    repr_get_attr_int $I11, self, rx273_curclass, "$!from"
    ne $I11, -1, rxscan274_done886
    goto rxscan274_scan885
  rxscan274_loop884:
    inc rx273_pos
    gt rx273_pos, rx273_eos, rx273_fail880
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!from", rx273_pos
  rxscan274_scan885:
    nqp_rxmark rx273_bstack, rxscan274_loop884, rx273_pos, 0
  rxscan274_done886:
    rx273_cur."!cursor_pass"(rx273_pos, "outerctx", 'backtrack'=>1)
    .return (rx273_cur)
  rx273_restart879:
    repr_get_attr_obj rx273_cstack, rx273_cur, rx273_curclass, "$!cstack"
  rx273_fail880:
    unless rx273_bstack, rx273_done878
    pop $I19, rx273_bstack
    if_null rx273_cstack, rx273_cstack_done883
    unless rx273_cstack, rx273_cstack_done883
    dec $I19
    set $P11, rx273_cstack[$I19]
  rx273_cstack_done883:
    pop rx273_rep, rx273_bstack
    pop rx273_pos, rx273_bstack
    pop $I19, rx273_bstack
    lt rx273_pos, -1, rx273_done878
    lt rx273_pos, 0, rx273_fail880
    eq $I19, 0, rx273_fail880
    nqp_islist $I20, rx273_cstack
    unless $I20, rx273_jump881
    elements $I18, rx273_bstack
    le $I18, 0, rx273_cut882
    dec $I18
    set $I18, rx273_bstack[$I18]
  rx273_cut882:
    assign rx273_cstack, $I18
  rx273_jump881:
    jump $I19
  rx273_done878:
    rx273_cur."!cursor_fail"()
    .return (rx273_cur) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_54_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 807
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx276_tgt
    .local int rx276_pos
    .local int rx276_off
    .local int rx276_eos
    .local int rx276_rep
    .local pmc rx276_cur
    .local pmc rx276_curclass
    .local pmc rx276_bstack
    .local pmc rx276_cstack
    (rx276_cur, rx276_tgt, rx276_pos, rx276_curclass, rx276_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx276_cur
    length rx276_eos, rx276_tgt
    eq $I19, 1, rx276_restart890
    gt rx276_pos, rx276_eos, rx276_fail891
    repr_get_attr_int $I11, self, rx276_curclass, "$!from"
    ne $I11, -1, rxscan277_done897
    goto rxscan277_scan896
  rxscan277_loop895:
    inc rx276_pos
    gt rx276_pos, rx276_eos, rx276_fail891
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!from", rx276_pos
  rxscan277_scan896:
    nqp_rxmark rx276_bstack, rxscan277_loop895, rx276_pos, 0
  rxscan277_done897:
    rx276_cur."!cursor_pass"(rx276_pos, "finishpad", 'backtrack'=>1)
    .return (rx276_cur)
  rx276_restart890:
    repr_get_attr_obj rx276_cstack, rx276_cur, rx276_curclass, "$!cstack"
  rx276_fail891:
    unless rx276_bstack, rx276_done889
    pop $I19, rx276_bstack
    if_null rx276_cstack, rx276_cstack_done894
    unless rx276_cstack, rx276_cstack_done894
    dec $I19
    set $P11, rx276_cstack[$I19]
  rx276_cstack_done894:
    pop rx276_rep, rx276_bstack
    pop rx276_pos, rx276_bstack
    pop $I19, rx276_bstack
    lt rx276_pos, -1, rx276_done889
    lt rx276_pos, 0, rx276_fail891
    eq $I19, 0, rx276_fail891
    nqp_islist $I20, rx276_cstack
    unless $I20, rx276_jump892
    elements $I18, rx276_bstack
    le $I18, 0, rx276_cut893
    dec $I18
    set $I18, rx276_bstack[$I18]
  rx276_cut893:
    assign rx276_cstack, $I18
  rx276_jump892:
    jump $I19
  rx276_done889:
    rx276_cur."!cursor_fail"()
    .return (rx276_cur) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_55_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 808
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx279_tgt
    .local int rx279_pos
    .local int rx279_off
    .local int rx279_eos
    .local int rx279_rep
    .local pmc rx279_cur
    .local pmc rx279_curclass
    .local pmc rx279_bstack
    .local pmc rx279_cstack
    (rx279_cur, rx279_tgt, rx279_pos, rx279_curclass, rx279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx279_cur
    length rx279_eos, rx279_tgt
    eq $I19, 1, rx279_restart901
    gt rx279_pos, rx279_eos, rx279_fail902
    repr_get_attr_int $I11, self, rx279_curclass, "$!from"
    ne $I11, -1, rxscan280_done908
    goto rxscan280_scan907
  rxscan280_loop906:
    inc rx279_pos
    gt rx279_pos, rx279_eos, rx279_fail902
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!from", rx279_pos
  rxscan280_scan907:
    nqp_rxmark rx279_bstack, rxscan280_loop906, rx279_pos, 0
  rxscan280_done908:
    rx279_cur."!cursor_pass"(rx279_pos, "you_are_here", 'backtrack'=>1)
    .return (rx279_cur)
  rx279_restart901:
    repr_get_attr_obj rx279_cstack, rx279_cur, rx279_curclass, "$!cstack"
  rx279_fail902:
    unless rx279_bstack, rx279_done900
    pop $I19, rx279_bstack
    if_null rx279_cstack, rx279_cstack_done905
    unless rx279_cstack, rx279_cstack_done905
    dec $I19
    set $P11, rx279_cstack[$I19]
  rx279_cstack_done905:
    pop rx279_rep, rx279_bstack
    pop rx279_pos, rx279_bstack
    pop $I19, rx279_bstack
    lt rx279_pos, -1, rx279_done900
    lt rx279_pos, 0, rx279_fail902
    eq $I19, 0, rx279_fail902
    nqp_islist $I20, rx279_cstack
    unless $I20, rx279_jump903
    elements $I18, rx279_bstack
    le $I18, 0, rx279_cut904
    dec $I18
    set $I18, rx279_bstack[$I18]
  rx279_cut904:
    assign rx279_cstack, $I18
  rx279_jump903:
    jump $I19
  rx279_done900:
    rx279_cur."!cursor_fail"()
    .return (rx279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_56_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 810
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_57_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart912
    gt rx282_pos, rx282_eos, rx282_fail913
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done919
    goto rxscan283_scan918
  rxscan283_loop917:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail913
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan918:
    nqp_rxmark rx282_bstack, rxscan283_loop917, rx282_pos, 0
  rxscan283_done919:
    ge rx282_pos, rx282_eos, rx282_fail913
    substr $S11, rx282_tgt, rx282_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx282_fail913
    rx282_cur."!cursor_pass"(rx282_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart912:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail913:
    unless rx282_bstack, rx282_done911
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done916
    unless rx282_cstack, rx282_cstack_done916
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done916:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done911
    lt rx282_pos, 0, rx282_fail913
    eq $I19, 0, rx282_fail913
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump914
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut915
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut915:
    assign rx282_cstack, $I18
  rx282_jump914:
    jump $I19
  rx282_done911:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_58_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart922
    gt rx284_pos, rx284_eos, rx284_fail923
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done929
    goto rxscan285_scan928
  rxscan285_loop927:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail923
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan928:
    nqp_rxmark rx284_bstack, rxscan285_loop927, rx284_pos, 0
  rxscan285_done929:
    ge rx284_pos, rx284_eos, rx284_fail923
    substr $S11, rx284_tgt, rx284_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx284_fail923
    rx284_cur."!cursor_pass"(rx284_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart922:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail923:
    unless rx284_bstack, rx284_done921
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done926
    unless rx284_cstack, rx284_cstack_done926
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done926:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done921
    lt rx284_pos, 0, rx284_fail923
    eq $I19, 0, rx284_fail923
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump924
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut925
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut925:
    assign rx284_cstack, $I18
  rx284_jump924:
    jump $I19
  rx284_done921:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_59_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_60_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx286_tgt
    .local int rx286_pos
    .local int rx286_off
    .local int rx286_eos
    .local int rx286_rep
    .local pmc rx286_cur
    .local pmc rx286_curclass
    .local pmc rx286_bstack
    .local pmc rx286_cstack
    (rx286_cur, rx286_tgt, rx286_pos, rx286_curclass, rx286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx286_cur
    length rx286_eos, rx286_tgt
    eq $I19, 1, rx286_restart932
    gt rx286_pos, rx286_eos, rx286_fail933
    repr_get_attr_int $I11, self, rx286_curclass, "$!from"
    ne $I11, -1, rxscan287_done939
    goto rxscan287_scan938
  rxscan287_loop937:
    inc rx286_pos
    gt rx286_pos, rx286_eos, rx286_fail933
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!from", rx286_pos
  rxscan287_scan938:
    nqp_rxmark rx286_bstack, rxscan287_loop937, rx286_pos, 0
  rxscan287_done939:
    nqp_rxmark rx286_bstack, rxcap288_fail941, rx286_pos, 0
    add $I11, rx286_pos, 3
    gt $I11, rx286_eos, rx286_fail933
    substr $S10, rx286_tgt, rx286_pos, 3
    ne $S10, ucs4:"use", rx286_fail933
    add rx286_pos, 3
    nqp_rxpeek $I19, rx286_bstack, rxcap288_fail941
    inc $I19
    set $I11, rx286_bstack[$I19]
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx286_pos)
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "sym")
    goto rxcap288_done940
  rxcap288_fail941:
    goto rx286_fail933
  rxcap288_done940:
    ge rx286_pos, rx286_eos, rx286_fail933
    is_cclass $I11, .CCLASS_WHITESPACE, rx286_tgt, rx286_pos
    unless $I11, rx286_fail933
    add rx286_pos, 1
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."name"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    nqp_rxmark rx286_bstack, rxsubrule290_pass943, -1, 0
  rxsubrule290_pass943:
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    rx286_cur."!cursor_pass"(rx286_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx286_cur)
  rx286_restart932:
    repr_get_attr_obj rx286_cstack, rx286_cur, rx286_curclass, "$!cstack"
  rx286_fail933:
    unless rx286_bstack, rx286_done931
    pop $I19, rx286_bstack
    if_null rx286_cstack, rx286_cstack_done936
    unless rx286_cstack, rx286_cstack_done936
    dec $I19
    set $P11, rx286_cstack[$I19]
  rx286_cstack_done936:
    pop rx286_rep, rx286_bstack
    pop rx286_pos, rx286_bstack
    pop $I19, rx286_bstack
    lt rx286_pos, -1, rx286_done931
    lt rx286_pos, 0, rx286_fail933
    eq $I19, 0, rx286_fail933
    nqp_islist $I20, rx286_cstack
    unless $I20, rx286_jump934
    elements $I18, rx286_bstack
    le $I18, 0, rx286_cut935
    dec $I18
    set $I18, rx286_bstack[$I18]
  rx286_cut935:
    assign rx286_cstack, $I18
  rx286_jump934:
    jump $I19
  rx286_done931:
    rx286_cur."!cursor_fail"()
    .return (rx286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_61_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 823
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx292_tgt
    .local int rx292_pos
    .local int rx292_off
    .local int rx292_eos
    .local int rx292_rep
    .local pmc rx292_cur
    .local pmc rx292_curclass
    .local pmc rx292_bstack
    .local pmc rx292_cstack
    (rx292_cur, rx292_tgt, rx292_pos, rx292_curclass, rx292_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx292_cur
    length rx292_eos, rx292_tgt
    eq $I19, 1, rx292_restart947
    gt rx292_pos, rx292_eos, rx292_fail948
    repr_get_attr_int $I11, self, rx292_curclass, "$!from"
    ne $I11, -1, rxscan293_done954
    goto rxscan293_scan953
  rxscan293_loop952:
    inc rx292_pos
    gt rx292_pos, rx292_eos, rx292_fail948
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!from", rx292_pos
  rxscan293_scan953:
    nqp_rxmark rx292_bstack, rxscan293_loop952, rx292_pos, 0
  rxscan293_done954:
    nqp_rxmark rx292_bstack, rxcap294_fail956, rx292_pos, 0
    add $I11, rx292_pos, 2
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 2
    ne $S10, ucs4:"if", rx292_fail948
    add rx292_pos, 2
    nqp_rxpeek $I19, rx292_bstack, rxcap294_fail956
    inc $I19
    set $I11, rx292_bstack[$I19]
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx292_pos)
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "sym")
    goto rxcap294_done955
  rxcap294_fail956:
    goto rx292_fail948
  rxcap294_done955:
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule296_pass958, -1, 0
  rxsubrule296_pass958:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxmark rx292_bstack, rxquantr298_done961, rx292_pos, 0
  rxquantr298_loop960:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    add $I11, rx292_pos, 5
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 5
    ne $S10, ucs4:"elsif", rx292_fail948
    add rx292_pos, 5
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule301_pass964, -1, 0
  rxsubrule301_pass964:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxpeek $I19, rx292_bstack, rxquantr298_done961
    inc $I19
    inc $I19
    set rx292_rep, rx292_bstack[$I19]
    nqp_rxcommit rx292_bstack, rxquantr298_done961
    inc rx292_rep
    nqp_rxmark rx292_bstack, rxquantr298_done961, rx292_pos, rx292_rep
    goto rxquantr298_loop960
  rxquantr298_done961:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxmark rx292_bstack, rxquantr304_done968, rx292_pos, 0
  rxquantr304_loop967:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    add $I11, rx292_pos, 4
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 4
    ne $S10, ucs4:"else", rx292_fail948
    add rx292_pos, 4
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule307_pass971, -1, 0
  rxsubrule307_pass971:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxpeek $I19, rx292_bstack, rxquantr304_done968
    inc $I19
    inc $I19
    set rx292_rep, rx292_bstack[$I19]
    nqp_rxcommit rx292_bstack, rxquantr304_done968
    inc rx292_rep
  rxquantr304_done968:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    rx292_cur."!cursor_pass"(rx292_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx292_cur)
  rx292_restart947:
    repr_get_attr_obj rx292_cstack, rx292_cur, rx292_curclass, "$!cstack"
  rx292_fail948:
    unless rx292_bstack, rx292_done946
    pop $I19, rx292_bstack
    if_null rx292_cstack, rx292_cstack_done951
    unless rx292_cstack, rx292_cstack_done951
    dec $I19
    set $P11, rx292_cstack[$I19]
  rx292_cstack_done951:
    pop rx292_rep, rx292_bstack
    pop rx292_pos, rx292_bstack
    pop $I19, rx292_bstack
    lt rx292_pos, -1, rx292_done946
    lt rx292_pos, 0, rx292_fail948
    eq $I19, 0, rx292_fail948
    nqp_islist $I20, rx292_cstack
    unless $I20, rx292_jump949
    elements $I18, rx292_bstack
    le $I18, 0, rx292_cut950
    dec $I18
    set $I18, rx292_bstack[$I18]
  rx292_cut950:
    assign rx292_cstack, $I18
  rx292_jump949:
    jump $I19
  rx292_done946:
    rx292_cur."!cursor_fail"()
    .return (rx292_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_62_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_63_1360232768.755' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx310_tgt
    .local int rx310_pos
    .local int rx310_off
    .local int rx310_eos
    .local int rx310_rep
    .local pmc rx310_cur
    .local pmc rx310_curclass
    .local pmc rx310_bstack
    .local pmc rx310_cstack
    (rx310_cur, rx310_tgt, rx310_pos, rx310_curclass, rx310_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx310_cur
    length rx310_eos, rx310_tgt
    eq $I19, 1, rx310_restart976
    gt rx310_pos, rx310_eos, rx310_fail977
    repr_get_attr_int $I11, self, rx310_curclass, "$!from"
    ne $I11, -1, rxscan311_done983
    goto rxscan311_scan982
  rxscan311_loop981:
    inc rx310_pos
    gt rx310_pos, rx310_eos, rx310_fail977
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!from", rx310_pos
  rxscan311_scan982:
    nqp_rxmark rx310_bstack, rxscan311_loop981, rx310_pos, 0
  rxscan311_done983:
    nqp_rxmark rx310_bstack, rxcap312_fail985, rx310_pos, 0
    add $I11, rx310_pos, 6
    gt $I11, rx310_eos, rx310_fail977
    substr $S10, rx310_tgt, rx310_pos, 6
    ne $S10, ucs4:"unless", rx310_fail977
    add rx310_pos, 6
    nqp_rxpeek $I19, rx310_bstack, rxcap312_fail985
    inc $I19
    set $I11, rx310_bstack[$I19]
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx310_pos)
    rx310_cstack = rx310_cur."!cursor_capture"($P11, "sym")
    goto rxcap312_done984
  rxcap312_fail985:
    goto rx310_fail977
  rxcap312_done984:
    ge rx310_pos, rx310_eos, rx310_fail977
    is_cclass $I11, .CCLASS_WHITESPACE, rx310_tgt, rx310_pos
    unless $I11, rx310_fail977
    add rx310_pos, 1
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    nqp_rxmark rx310_bstack, rxsubrule314_pass987, -1, 0
  rxsubrule314_pass987:
    rx310_cstack = rx310_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
  alt316_0990:
    nqp_rxmark rx310_bstack, alt316_11003, rx310_pos, 0
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_63_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    ge $I11, 0, rx310_fail977
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    goto alt316_end989
  alt316_11003:
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
  alt316_end989:
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    rx310_cur."!cursor_pass"(rx310_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx310_cur)
  rx310_restart976:
    repr_get_attr_obj rx310_cstack, rx310_cur, rx310_curclass, "$!cstack"
  rx310_fail977:
    unless rx310_bstack, rx310_done975
    pop $I19, rx310_bstack
    if_null rx310_cstack, rx310_cstack_done980
    unless rx310_cstack, rx310_cstack_done980
    dec $I19
    set $P11, rx310_cstack[$I19]
  rx310_cstack_done980:
    pop rx310_rep, rx310_bstack
    pop rx310_pos, rx310_bstack
    pop $I19, rx310_bstack
    lt rx310_pos, -1, rx310_done975
    lt rx310_pos, 0, rx310_fail977
    eq $I19, 0, rx310_fail977
    nqp_islist $I20, rx310_cstack
    unless $I20, rx310_jump978
    elements $I18, rx310_bstack
    le $I18, 0, rx310_cut979
    dec $I18
    set $I18, rx310_bstack[$I18]
  rx310_cut979:
    assign rx310_cstack, $I18
  rx310_jump978:
    jump $I19
  rx310_done975:
    rx310_cur."!cursor_fail"()
    .return (rx310_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_63_1360232768.755") :anon :lex :outer("cuid_62_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx318_tgt
    .local int rx318_pos
    .local int rx318_off
    .local int rx318_eos
    .local int rx318_rep
    .local pmc rx318_cur
    .local pmc rx318_curclass
    .local pmc rx318_bstack
    .local pmc rx318_cstack
    (rx318_cur, rx318_tgt, rx318_pos, rx318_curclass, rx318_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx318_cur
    length rx318_eos, rx318_tgt
    eq $I19, 1, rx318_restart994
    gt rx318_pos, rx318_eos, rx318_fail995
    repr_get_attr_int $I11, self, rx318_curclass, "$!from"
    ne $I11, -1, rxscan319_done1001
    goto rxscan319_scan1000
  rxscan319_loop999:
    inc rx318_pos
    gt rx318_pos, rx318_eos, rx318_fail995
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!from", rx318_pos
  rxscan319_scan1000:
    nqp_rxmark rx318_bstack, rxscan319_loop999, rx318_pos, 0
  rxscan319_done1001:
    add $I11, rx318_pos, 4
    gt $I11, rx318_eos, rx318_fail995
    substr $S10, rx318_tgt, rx318_pos, 4
    ne $S10, ucs4:"else", rx318_fail995
    add rx318_pos, 4
    rx318_cur."!cursor_pass"(rx318_pos, 'backtrack'=>1)
    .return (rx318_cur)
  rx318_restart994:
    repr_get_attr_obj rx318_cstack, rx318_cur, rx318_curclass, "$!cstack"
  rx318_fail995:
    unless rx318_bstack, rx318_done993
    pop $I19, rx318_bstack
    if_null rx318_cstack, rx318_cstack_done998
    unless rx318_cstack, rx318_cstack_done998
    dec $I19
    set $P11, rx318_cstack[$I19]
  rx318_cstack_done998:
    pop rx318_rep, rx318_bstack
    pop rx318_pos, rx318_bstack
    pop $I19, rx318_bstack
    lt rx318_pos, -1, rx318_done993
    lt rx318_pos, 0, rx318_fail995
    eq $I19, 0, rx318_fail995
    nqp_islist $I20, rx318_cstack
    unless $I20, rx318_jump996
    elements $I18, rx318_bstack
    le $I18, 0, rx318_cut997
    dec $I18
    set $I18, rx318_bstack[$I18]
  rx318_cut997:
    assign rx318_cstack, $I18
  rx318_jump996:
    jump $I19
  rx318_done993:
    rx318_cur."!cursor_fail"()
    .return (rx318_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_64_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 836
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx325_tgt
    .local int rx325_pos
    .local int rx325_off
    .local int rx325_eos
    .local int rx325_rep
    .local pmc rx325_cur
    .local pmc rx325_curclass
    .local pmc rx325_bstack
    .local pmc rx325_cstack
    (rx325_cur, rx325_tgt, rx325_pos, rx325_curclass, rx325_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx325_cur
    length rx325_eos, rx325_tgt
    eq $I19, 1, rx325_restart1010
    gt rx325_pos, rx325_eos, rx325_fail1011
    repr_get_attr_int $I11, self, rx325_curclass, "$!from"
    ne $I11, -1, rxscan326_done1017
    goto rxscan326_scan1016
  rxscan326_loop1015:
    inc rx325_pos
    gt rx325_pos, rx325_eos, rx325_fail1011
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!from", rx325_pos
  rxscan326_scan1016:
    nqp_rxmark rx325_bstack, rxscan326_loop1015, rx325_pos, 0
  rxscan326_done1017:
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    store_lex unicode:"$\x{a2}", rx325_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx325_bstack, rxcap327_fail1019, rx325_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt328_01021
    nqp_push_label $P11, alt328_11022
    nqp_rxmark rx325_bstack, alt328_end1020, -1, 0
    rx325_cur."!alt"(rx325_pos, "alt_nfa__12_1360232770.269", $P11)
    goto rx325_fail1011
  alt328_01021:
    add $I11, rx325_pos, 5
    gt $I11, rx325_eos, rx325_fail1011
    substr $S10, rx325_tgt, rx325_pos, 5
    ne $S10, ucs4:"while", rx325_fail1011
    add rx325_pos, 5
    goto alt328_end1020
  alt328_11022:
    add $I11, rx325_pos, 5
    gt $I11, rx325_eos, rx325_fail1011
    substr $S10, rx325_tgt, rx325_pos, 5
    ne $S10, ucs4:"until", rx325_fail1011
    add rx325_pos, 5
    goto alt328_end1020
  alt328_end1020:
    nqp_rxcommit rx325_bstack, alt328_end1020
    nqp_rxpeek $I19, rx325_bstack, rxcap327_fail1019
    inc $I19
    set $I11, rx325_bstack[$I19]
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx325_pos)
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "sym")
    goto rxcap327_done1018
  rxcap327_fail1019:
    goto rx325_fail1011
  rxcap327_done1018:
    ge rx325_pos, rx325_eos, rx325_fail1011
    is_cclass $I11, .CCLASS_WHITESPACE, rx325_tgt, rx325_pos
    unless $I11, rx325_fail1011
    add rx325_pos, 1
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."ws"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    nqp_rxmark rx325_bstack, rxsubrule330_pass1024, -1, 0
  rxsubrule330_pass1024:
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."ws"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    rx325_cur."!cursor_pass"(rx325_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx325_cur)
  rx325_restart1010:
    repr_get_attr_obj rx325_cstack, rx325_cur, rx325_curclass, "$!cstack"
  rx325_fail1011:
    unless rx325_bstack, rx325_done1009
    pop $I19, rx325_bstack
    if_null rx325_cstack, rx325_cstack_done1014
    unless rx325_cstack, rx325_cstack_done1014
    dec $I19
    set $P11, rx325_cstack[$I19]
  rx325_cstack_done1014:
    pop rx325_rep, rx325_bstack
    pop rx325_pos, rx325_bstack
    pop $I19, rx325_bstack
    lt rx325_pos, -1, rx325_done1009
    lt rx325_pos, 0, rx325_fail1011
    eq $I19, 0, rx325_fail1011
    nqp_islist $I20, rx325_cstack
    unless $I20, rx325_jump1012
    elements $I18, rx325_bstack
    le $I18, 0, rx325_cut1013
    dec $I18
    set $I18, rx325_bstack[$I18]
  rx325_cut1013:
    assign rx325_cstack, $I18
  rx325_jump1012:
    jump $I19
  rx325_done1009:
    rx325_cur."!cursor_fail"()
    .return (rx325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_65_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 842
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx332_tgt
    .local int rx332_pos
    .local int rx332_off
    .local int rx332_eos
    .local int rx332_rep
    .local pmc rx332_cur
    .local pmc rx332_curclass
    .local pmc rx332_bstack
    .local pmc rx332_cstack
    (rx332_cur, rx332_tgt, rx332_pos, rx332_curclass, rx332_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx332_cur
    length rx332_eos, rx332_tgt
    eq $I19, 1, rx332_restart1028
    gt rx332_pos, rx332_eos, rx332_fail1029
    repr_get_attr_int $I11, self, rx332_curclass, "$!from"
    ne $I11, -1, rxscan333_done1035
    goto rxscan333_scan1034
  rxscan333_loop1033:
    inc rx332_pos
    gt rx332_pos, rx332_eos, rx332_fail1029
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!from", rx332_pos
  rxscan333_scan1034:
    nqp_rxmark rx332_bstack, rxscan333_loop1033, rx332_pos, 0
  rxscan333_done1035:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    store_lex unicode:"$\x{a2}", rx332_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx332_bstack, rxcap334_fail1037, rx332_pos, 0
    add $I11, rx332_pos, 6
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 6
    ne $S10, ucs4:"repeat", rx332_fail1029
    add rx332_pos, 6
    nqp_rxpeek $I19, rx332_bstack, rxcap334_fail1037
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "sym")
    goto rxcap334_done1036
  rxcap334_fail1037:
    goto rx332_fail1029
  rxcap334_done1036:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt336_01040
    nqp_push_label $P11, alt336_11050
    nqp_rxmark rx332_bstack, alt336_end1039, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__15_1360232770.29", $P11)
    goto rx332_fail1029
  alt336_01040:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    nqp_rxmark rx332_bstack, rxcap338_fail1043, rx332_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt339_01045
    nqp_push_label $P11, alt339_11046
    nqp_rxmark rx332_bstack, alt339_end1044, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__13_1360232770.289", $P11)
    goto rx332_fail1029
  alt339_01045:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"while", rx332_fail1029
    add rx332_pos, 5
    goto alt339_end1044
  alt339_11046:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"until", rx332_fail1029
    add rx332_pos, 5
    goto alt339_end1044
  alt339_end1044:
    nqp_rxcommit rx332_bstack, alt339_end1044
    nqp_rxpeek $I19, rx332_bstack, rxcap338_fail1043
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "wu")
    goto rxcap338_done1042
  rxcap338_fail1043:
    goto rx332_fail1029
  rxcap338_done1042:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule341_pass1048, -1, 0
  rxsubrule341_pass1048:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    goto alt336_end1039
  alt336_11050:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule344_pass1052, -1, 0
  rxsubrule344_pass1052:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    nqp_rxmark rx332_bstack, rxcap346_fail1055, rx332_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt347_01057
    nqp_push_label $P11, alt347_11058
    nqp_rxmark rx332_bstack, alt347_end1056, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__14_1360232770.289", $P11)
    goto rx332_fail1029
  alt347_01057:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"while", rx332_fail1029
    add rx332_pos, 5
    goto alt347_end1056
  alt347_11058:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"until", rx332_fail1029
    add rx332_pos, 5
    goto alt347_end1056
  alt347_end1056:
    nqp_rxcommit rx332_bstack, alt347_end1056
    nqp_rxpeek $I19, rx332_bstack, rxcap346_fail1055
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "wu")
    goto rxcap346_done1054
  rxcap346_fail1055:
    goto rx332_fail1029
  rxcap346_done1054:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule349_pass1060, -1, 0
  rxsubrule349_pass1060:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    goto alt336_end1039
  alt336_end1039:
    nqp_rxcommit rx332_bstack, alt336_end1039
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    rx332_cur."!cursor_pass"(rx332_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx332_cur)
  rx332_restart1028:
    repr_get_attr_obj rx332_cstack, rx332_cur, rx332_curclass, "$!cstack"
  rx332_fail1029:
    unless rx332_bstack, rx332_done1027
    pop $I19, rx332_bstack
    if_null rx332_cstack, rx332_cstack_done1032
    unless rx332_cstack, rx332_cstack_done1032
    dec $I19
    set $P11, rx332_cstack[$I19]
  rx332_cstack_done1032:
    pop rx332_rep, rx332_bstack
    pop rx332_pos, rx332_bstack
    pop $I19, rx332_bstack
    lt rx332_pos, -1, rx332_done1027
    lt rx332_pos, 0, rx332_fail1029
    eq $I19, 0, rx332_fail1029
    nqp_islist $I20, rx332_cstack
    unless $I20, rx332_jump1030
    elements $I18, rx332_bstack
    le $I18, 0, rx332_cut1031
    dec $I18
    set $I18, rx332_bstack[$I18]
  rx332_cut1031:
    assign rx332_cstack, $I18
  rx332_jump1030:
    jump $I19
  rx332_done1027:
    rx332_cur."!cursor_fail"()
    .return (rx332_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_66_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    (rx352_cur, rx352_tgt, rx352_pos, rx352_curclass, rx352_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart1065
    gt rx352_pos, rx352_eos, rx352_fail1066
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done1072
    goto rxscan353_scan1071
  rxscan353_loop1070:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail1066
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan1071:
    nqp_rxmark rx352_bstack, rxscan353_loop1070, rx352_pos, 0
  rxscan353_done1072:
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    store_lex unicode:"$\x{a2}", rx352_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx352_bstack, rxcap354_fail1074, rx352_pos, 0
    add $I11, rx352_pos, 3
    gt $I11, rx352_eos, rx352_fail1066
    substr $S10, rx352_tgt, rx352_pos, 3
    ne $S10, ucs4:"for", rx352_fail1066
    add rx352_pos, 3
    nqp_rxpeek $I19, rx352_bstack, rxcap354_fail1074
    inc $I19
    set $I11, rx352_bstack[$I19]
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx352_pos)
    rx352_cstack = rx352_cur."!cursor_capture"($P11, "sym")
    goto rxcap354_done1073
  rxcap354_fail1074:
    goto rx352_fail1066
  rxcap354_done1073:
    ge rx352_pos, rx352_eos, rx352_fail1066
    is_cclass $I11, .CCLASS_WHITESPACE, rx352_tgt, rx352_pos
    unless $I11, rx352_fail1066
    add rx352_pos, 1
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."ws"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    nqp_rxmark rx352_bstack, rxsubrule356_pass1076, -1, 0
  rxsubrule356_pass1076:
    rx352_cstack = rx352_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."ws"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    rx352_cur."!cursor_pass"(rx352_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart1065:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail1066:
    unless rx352_bstack, rx352_done1064
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done1069
    unless rx352_cstack, rx352_cstack_done1069
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done1069:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done1064
    lt rx352_pos, 0, rx352_fail1066
    eq $I19, 0, rx352_fail1066
    nqp_islist $I20, rx352_cstack
    unless $I20, rx352_jump1067
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut1068
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut1068:
    assign rx352_cstack, $I18
  rx352_jump1067:
    jump $I19
  rx352_done1064:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_67_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx358_tgt
    .local int rx358_pos
    .local int rx358_off
    .local int rx358_eos
    .local int rx358_rep
    .local pmc rx358_cur
    .local pmc rx358_curclass
    .local pmc rx358_bstack
    .local pmc rx358_cstack
    (rx358_cur, rx358_tgt, rx358_pos, rx358_curclass, rx358_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx358_cur
    length rx358_eos, rx358_tgt
    eq $I19, 1, rx358_restart1080
    gt rx358_pos, rx358_eos, rx358_fail1081
    repr_get_attr_int $I11, self, rx358_curclass, "$!from"
    ne $I11, -1, rxscan359_done1087
    goto rxscan359_scan1086
  rxscan359_loop1085:
    inc rx358_pos
    gt rx358_pos, rx358_eos, rx358_fail1081
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!from", rx358_pos
  rxscan359_scan1086:
    nqp_rxmark rx358_bstack, rxscan359_loop1085, rx358_pos, 0
  rxscan359_done1087:
    nqp_rxmark rx358_bstack, rxcap360_fail1089, rx358_pos, 0
    add $I11, rx358_pos, 5
    gt $I11, rx358_eos, rx358_fail1081
    substr $S10, rx358_tgt, rx358_pos, 5
    ne $S10, ucs4:"CATCH", rx358_fail1081
    add rx358_pos, 5
    nqp_rxpeek $I19, rx358_bstack, rxcap360_fail1089
    inc $I19
    set $I11, rx358_bstack[$I19]
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx358_pos)
    rx358_cstack = rx358_cur."!cursor_capture"($P11, "sym")
    goto rxcap360_done1088
  rxcap360_fail1089:
    goto rx358_fail1081
  rxcap360_done1088:
    ge rx358_pos, rx358_eos, rx358_fail1081
    is_cclass $I11, .CCLASS_WHITESPACE, rx358_tgt, rx358_pos
    unless $I11, rx358_fail1081
    add rx358_pos, 1
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."ws"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."block"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    nqp_rxmark rx358_bstack, rxsubrule362_pass1091, -1, 0
  rxsubrule362_pass1091:
    rx358_cstack = rx358_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."ws"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    rx358_cur."!cursor_pass"(rx358_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx358_cur)
  rx358_restart1080:
    repr_get_attr_obj rx358_cstack, rx358_cur, rx358_curclass, "$!cstack"
  rx358_fail1081:
    unless rx358_bstack, rx358_done1079
    pop $I19, rx358_bstack
    if_null rx358_cstack, rx358_cstack_done1084
    unless rx358_cstack, rx358_cstack_done1084
    dec $I19
    set $P11, rx358_cstack[$I19]
  rx358_cstack_done1084:
    pop rx358_rep, rx358_bstack
    pop rx358_pos, rx358_bstack
    pop $I19, rx358_bstack
    lt rx358_pos, -1, rx358_done1079
    lt rx358_pos, 0, rx358_fail1081
    eq $I19, 0, rx358_fail1081
    nqp_islist $I20, rx358_cstack
    unless $I20, rx358_jump1082
    elements $I18, rx358_bstack
    le $I18, 0, rx358_cut1083
    dec $I18
    set $I18, rx358_bstack[$I18]
  rx358_cut1083:
    assign rx358_cstack, $I18
  rx358_jump1082:
    jump $I19
  rx358_done1079:
    rx358_cur."!cursor_fail"()
    .return (rx358_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_68_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 862
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx364_tgt
    .local int rx364_pos
    .local int rx364_off
    .local int rx364_eos
    .local int rx364_rep
    .local pmc rx364_cur
    .local pmc rx364_curclass
    .local pmc rx364_bstack
    .local pmc rx364_cstack
    (rx364_cur, rx364_tgt, rx364_pos, rx364_curclass, rx364_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx364_cur
    length rx364_eos, rx364_tgt
    eq $I19, 1, rx364_restart1095
    gt rx364_pos, rx364_eos, rx364_fail1096
    repr_get_attr_int $I11, self, rx364_curclass, "$!from"
    ne $I11, -1, rxscan365_done1102
    goto rxscan365_scan1101
  rxscan365_loop1100:
    inc rx364_pos
    gt rx364_pos, rx364_eos, rx364_fail1096
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!from", rx364_pos
  rxscan365_scan1101:
    nqp_rxmark rx364_bstack, rxscan365_loop1100, rx364_pos, 0
  rxscan365_done1102:
    nqp_rxmark rx364_bstack, rxcap366_fail1104, rx364_pos, 0
    add $I11, rx364_pos, 7
    gt $I11, rx364_eos, rx364_fail1096
    substr $S10, rx364_tgt, rx364_pos, 7
    ne $S10, ucs4:"CONTROL", rx364_fail1096
    add rx364_pos, 7
    nqp_rxpeek $I19, rx364_bstack, rxcap366_fail1104
    inc $I19
    set $I11, rx364_bstack[$I19]
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx364_pos)
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "sym")
    goto rxcap366_done1103
  rxcap366_fail1104:
    goto rx364_fail1096
  rxcap366_done1103:
    ge rx364_pos, rx364_eos, rx364_fail1096
    is_cclass $I11, .CCLASS_WHITESPACE, rx364_tgt, rx364_pos
    unless $I11, rx364_fail1096
    add rx364_pos, 1
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."ws"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."block"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    nqp_rxmark rx364_bstack, rxsubrule368_pass1106, -1, 0
  rxsubrule368_pass1106:
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."ws"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    rx364_cur."!cursor_pass"(rx364_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx364_cur)
  rx364_restart1095:
    repr_get_attr_obj rx364_cstack, rx364_cur, rx364_curclass, "$!cstack"
  rx364_fail1096:
    unless rx364_bstack, rx364_done1094
    pop $I19, rx364_bstack
    if_null rx364_cstack, rx364_cstack_done1099
    unless rx364_cstack, rx364_cstack_done1099
    dec $I19
    set $P11, rx364_cstack[$I19]
  rx364_cstack_done1099:
    pop rx364_rep, rx364_bstack
    pop rx364_pos, rx364_bstack
    pop $I19, rx364_bstack
    lt rx364_pos, -1, rx364_done1094
    lt rx364_pos, 0, rx364_fail1096
    eq $I19, 0, rx364_fail1096
    nqp_islist $I20, rx364_cstack
    unless $I20, rx364_jump1097
    elements $I18, rx364_bstack
    le $I18, 0, rx364_cut1098
    dec $I18
    set $I18, rx364_bstack[$I18]
  rx364_cut1098:
    assign rx364_cstack, $I18
  rx364_jump1097:
    jump $I19
  rx364_done1094:
    rx364_cur."!cursor_fail"()
    .return (rx364_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_69_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 867
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_70_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    (rx370_cur, rx370_tgt, rx370_pos, rx370_curclass, rx370_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart1110
    gt rx370_pos, rx370_eos, rx370_fail1111
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done1117
    goto rxscan371_scan1116
  rxscan371_loop1115:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail1111
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan1116:
    nqp_rxmark rx370_bstack, rxscan371_loop1115, rx370_pos, 0
  rxscan371_done1117:
    nqp_rxmark rx370_bstack, rxcap372_fail1119, rx370_pos, 0
    add $I11, rx370_pos, 5
    gt $I11, rx370_eos, rx370_fail1111
    substr $S10, rx370_tgt, rx370_pos, 5
    ne $S10, ucs4:"BEGIN", rx370_fail1111
    add rx370_pos, 5
    nqp_rxpeek $I19, rx370_bstack, rxcap372_fail1119
    inc $I19
    set $I11, rx370_bstack[$I19]
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx370_pos)
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "sym")
    goto rxcap372_done1118
  rxcap372_fail1119:
    goto rx370_fail1111
  rxcap372_done1118:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail1111
    nqp_rxmark rx370_bstack, rxsubrule373_pass1120, -1, 0
  rxsubrule373_pass1120:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    rx370_cur."!cursor_pass"(rx370_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart1110:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail1111:
    unless rx370_bstack, rx370_done1109
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done1114
    unless rx370_cstack, rx370_cstack_done1114
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done1114:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done1109
    lt rx370_pos, 0, rx370_fail1111
    eq $I19, 0, rx370_fail1111
    nqp_islist $I20, rx370_cstack
    unless $I20, rx370_jump1112
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut1113
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut1113:
    assign rx370_cstack, $I18
  rx370_jump1112:
    jump $I19
  rx370_done1109:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_71_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    (rx374_cur, rx374_tgt, rx374_pos, rx374_curclass, rx374_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1123
    gt rx374_pos, rx374_eos, rx374_fail1124
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1130
    goto rxscan375_scan1129
  rxscan375_loop1128:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1124
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1129:
    nqp_rxmark rx374_bstack, rxscan375_loop1128, rx374_pos, 0
  rxscan375_done1130:
    nqp_rxmark rx374_bstack, rxcap376_fail1132, rx374_pos, 0
    add $I11, rx374_pos, 4
    gt $I11, rx374_eos, rx374_fail1124
    substr $S10, rx374_tgt, rx374_pos, 4
    ne $S10, ucs4:"INIT", rx374_fail1124
    add rx374_pos, 4
    nqp_rxpeek $I19, rx374_bstack, rxcap376_fail1132
    inc $I19
    set $I11, rx374_bstack[$I19]
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx374_pos)
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "sym")
    goto rxcap376_done1131
  rxcap376_fail1132:
    goto rx374_fail1124
  rxcap376_done1131:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1124
    nqp_rxmark rx374_bstack, rxsubrule377_pass1133, -1, 0
  rxsubrule377_pass1133:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    rx374_cur."!cursor_pass"(rx374_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1123:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1124:
    unless rx374_bstack, rx374_done1122
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1127
    unless rx374_cstack, rx374_cstack_done1127
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1127:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1122
    lt rx374_pos, 0, rx374_fail1124
    eq $I19, 0, rx374_fail1124
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1125
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1126
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1126:
    assign rx374_cstack, $I18
  rx374_jump1125:
    jump $I19
  rx374_done1122:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_72_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx378_tgt
    .local int rx378_pos
    .local int rx378_off
    .local int rx378_eos
    .local int rx378_rep
    .local pmc rx378_cur
    .local pmc rx378_curclass
    .local pmc rx378_bstack
    .local pmc rx378_cstack
    (rx378_cur, rx378_tgt, rx378_pos, rx378_curclass, rx378_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx378_cur
    length rx378_eos, rx378_tgt
    eq $I19, 1, rx378_restart1136
    gt rx378_pos, rx378_eos, rx378_fail1137
    repr_get_attr_int $I11, self, rx378_curclass, "$!from"
    ne $I11, -1, rxscan379_done1143
    goto rxscan379_scan1142
  rxscan379_loop1141:
    inc rx378_pos
    gt rx378_pos, rx378_eos, rx378_fail1137
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!from", rx378_pos
  rxscan379_scan1142:
    nqp_rxmark rx378_bstack, rxscan379_loop1141, rx378_pos, 0
  rxscan379_done1143:
    nqp_rxmark rx378_bstack, rxcap380_fail1145, rx378_pos, 0
    add $I11, rx378_pos, 3
    gt $I11, rx378_eos, rx378_fail1137
    substr $S10, rx378_tgt, rx378_pos, 3
    ne $S10, ucs4:"try", rx378_fail1137
    add rx378_pos, 3
    nqp_rxpeek $I19, rx378_bstack, rxcap380_fail1145
    inc $I19
    set $I11, rx378_bstack[$I19]
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx378_pos)
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "sym")
    goto rxcap380_done1144
  rxcap380_fail1145:
    goto rx378_fail1137
  rxcap380_done1144:
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1137
    nqp_rxmark rx378_bstack, rxsubrule381_pass1146, -1, 0
  rxsubrule381_pass1146:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    rx378_cur."!cursor_pass"(rx378_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx378_cur)
  rx378_restart1136:
    repr_get_attr_obj rx378_cstack, rx378_cur, rx378_curclass, "$!cstack"
  rx378_fail1137:
    unless rx378_bstack, rx378_done1135
    pop $I19, rx378_bstack
    if_null rx378_cstack, rx378_cstack_done1140
    unless rx378_cstack, rx378_cstack_done1140
    dec $I19
    set $P11, rx378_cstack[$I19]
  rx378_cstack_done1140:
    pop rx378_rep, rx378_bstack
    pop rx378_pos, rx378_bstack
    pop $I19, rx378_bstack
    lt rx378_pos, -1, rx378_done1135
    lt rx378_pos, 0, rx378_fail1137
    eq $I19, 0, rx378_fail1137
    nqp_islist $I20, rx378_cstack
    unless $I20, rx378_jump1138
    elements $I18, rx378_bstack
    le $I18, 0, rx378_cut1139
    dec $I18
    set $I18, rx378_bstack[$I18]
  rx378_cut1139:
    assign rx378_cstack, $I18
  rx378_jump1138:
    jump $I19
  rx378_done1135:
    rx378_cur."!cursor_fail"()
    .return (rx378_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_73_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 876
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx382_tgt
    .local int rx382_pos
    .local int rx382_off
    .local int rx382_eos
    .local int rx382_rep
    .local pmc rx382_cur
    .local pmc rx382_curclass
    .local pmc rx382_bstack
    .local pmc rx382_cstack
    (rx382_cur, rx382_tgt, rx382_pos, rx382_curclass, rx382_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx382_cur
    length rx382_eos, rx382_tgt
    eq $I19, 1, rx382_restart1149
    gt rx382_pos, rx382_eos, rx382_fail1150
    repr_get_attr_int $I11, self, rx382_curclass, "$!from"
    ne $I11, -1, rxscan383_done1156
    goto rxscan383_scan1155
  rxscan383_loop1154:
    inc rx382_pos
    gt rx382_pos, rx382_eos, rx382_fail1150
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!from", rx382_pos
  rxscan383_scan1155:
    nqp_rxmark rx382_bstack, rxscan383_loop1154, rx382_pos, 0
  rxscan383_done1156:
    ge rx382_pos, rx382_eos, rx382_fail1150
    is_cclass $I11, .CCLASS_WHITESPACE, rx382_tgt, rx382_pos
    unless $I11, rx382_fail1150
    add rx382_pos, 1
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."ws"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt385_01159
    nqp_push_label $P11, alt385_11161
    nqp_rxmark rx382_bstack, alt385_end1158, -1, 0
    rx382_cur."!alt"(rx382_pos, "alt_nfa__16_1360232770.338", $P11)
    goto rx382_fail1150
  alt385_01159:
    ge rx382_pos, rx382_eos, rx382_fail1150
    substr $S11, rx382_tgt, rx382_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx382_fail1150
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."block"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    nqp_rxmark rx382_bstack, rxsubrule386_pass1160, -1, 0
  rxsubrule386_pass1160:
    rx382_cstack = rx382_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    goto alt385_end1158
  alt385_11161:
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."statement"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    nqp_rxmark rx382_bstack, rxsubrule387_pass1162, -1, 0
  rxsubrule387_pass1162:
    rx382_cstack = rx382_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    goto alt385_end1158
  alt385_end1158:
    nqp_rxcommit rx382_bstack, alt385_end1158
    rx382_cur."!cursor_pass"(rx382_pos, "blorst", 'backtrack'=>1)
    .return (rx382_cur)
  rx382_restart1149:
    repr_get_attr_obj rx382_cstack, rx382_cur, rx382_curclass, "$!cstack"
  rx382_fail1150:
    unless rx382_bstack, rx382_done1148
    pop $I19, rx382_bstack
    if_null rx382_cstack, rx382_cstack_done1153
    unless rx382_cstack, rx382_cstack_done1153
    dec $I19
    set $P11, rx382_cstack[$I19]
  rx382_cstack_done1153:
    pop rx382_rep, rx382_bstack
    pop rx382_pos, rx382_bstack
    pop $I19, rx382_bstack
    lt rx382_pos, -1, rx382_done1148
    lt rx382_pos, 0, rx382_fail1150
    eq $I19, 0, rx382_fail1150
    nqp_islist $I20, rx382_cstack
    unless $I20, rx382_jump1151
    elements $I18, rx382_bstack
    le $I18, 0, rx382_cut1152
    dec $I18
    set $I18, rx382_bstack[$I18]
  rx382_cut1152:
    assign rx382_cstack, $I18
  rx382_jump1151:
    jump $I19
  rx382_done1148:
    rx382_cur."!cursor_fail"()
    .return (rx382_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_74_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 882
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_75_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 884
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx388_tgt
    .local int rx388_pos
    .local int rx388_off
    .local int rx388_eos
    .local int rx388_rep
    .local pmc rx388_cur
    .local pmc rx388_curclass
    .local pmc rx388_bstack
    .local pmc rx388_cstack
    (rx388_cur, rx388_tgt, rx388_pos, rx388_curclass, rx388_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx388_cur
    length rx388_eos, rx388_tgt
    eq $I19, 1, rx388_restart1165
    gt rx388_pos, rx388_eos, rx388_fail1166
    repr_get_attr_int $I11, self, rx388_curclass, "$!from"
    ne $I11, -1, rxscan389_done1172
    goto rxscan389_scan1171
  rxscan389_loop1170:
    inc rx388_pos
    gt rx388_pos, rx388_eos, rx388_fail1166
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!from", rx388_pos
  rxscan389_scan1171:
    nqp_rxmark rx388_bstack, rxscan389_loop1170, rx388_pos, 0
  rxscan389_done1172:
    nqp_rxmark rx388_bstack, rxcap390_fail1174, rx388_pos, 0
    add $I11, rx388_pos, 2
    gt $I11, rx388_eos, rx388_fail1166
    substr $S10, rx388_tgt, rx388_pos, 2
    ne $S10, ucs4:"if", rx388_fail1166
    add rx388_pos, 2
    nqp_rxpeek $I19, rx388_bstack, rxcap390_fail1174
    inc $I19
    set $I11, rx388_bstack[$I19]
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx388_pos)
    rx388_cstack = rx388_cur."!cursor_capture"($P11, "sym")
    goto rxcap390_done1173
  rxcap390_fail1174:
    goto rx388_fail1166
  rxcap390_done1173:
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."ws"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    nqp_rxmark rx388_bstack, rxsubrule392_pass1176, -1, 0
  rxsubrule392_pass1176:
    rx388_cstack = rx388_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."ws"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    rx388_cur."!cursor_pass"(rx388_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx388_cur)
  rx388_restart1165:
    repr_get_attr_obj rx388_cstack, rx388_cur, rx388_curclass, "$!cstack"
  rx388_fail1166:
    unless rx388_bstack, rx388_done1164
    pop $I19, rx388_bstack
    if_null rx388_cstack, rx388_cstack_done1169
    unless rx388_cstack, rx388_cstack_done1169
    dec $I19
    set $P11, rx388_cstack[$I19]
  rx388_cstack_done1169:
    pop rx388_rep, rx388_bstack
    pop rx388_pos, rx388_bstack
    pop $I19, rx388_bstack
    lt rx388_pos, -1, rx388_done1164
    lt rx388_pos, 0, rx388_fail1166
    eq $I19, 0, rx388_fail1166
    nqp_islist $I20, rx388_cstack
    unless $I20, rx388_jump1167
    elements $I18, rx388_bstack
    le $I18, 0, rx388_cut1168
    dec $I18
    set $I18, rx388_bstack[$I18]
  rx388_cut1168:
    assign rx388_cstack, $I18
  rx388_jump1167:
    jump $I19
  rx388_done1164:
    rx388_cur."!cursor_fail"()
    .return (rx388_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_76_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx394_tgt
    .local int rx394_pos
    .local int rx394_off
    .local int rx394_eos
    .local int rx394_rep
    .local pmc rx394_cur
    .local pmc rx394_curclass
    .local pmc rx394_bstack
    .local pmc rx394_cstack
    (rx394_cur, rx394_tgt, rx394_pos, rx394_curclass, rx394_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx394_cur
    length rx394_eos, rx394_tgt
    eq $I19, 1, rx394_restart1180
    gt rx394_pos, rx394_eos, rx394_fail1181
    repr_get_attr_int $I11, self, rx394_curclass, "$!from"
    ne $I11, -1, rxscan395_done1187
    goto rxscan395_scan1186
  rxscan395_loop1185:
    inc rx394_pos
    gt rx394_pos, rx394_eos, rx394_fail1181
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!from", rx394_pos
  rxscan395_scan1186:
    nqp_rxmark rx394_bstack, rxscan395_loop1185, rx394_pos, 0
  rxscan395_done1187:
    nqp_rxmark rx394_bstack, rxcap396_fail1189, rx394_pos, 0
    add $I11, rx394_pos, 6
    gt $I11, rx394_eos, rx394_fail1181
    substr $S10, rx394_tgt, rx394_pos, 6
    ne $S10, ucs4:"unless", rx394_fail1181
    add rx394_pos, 6
    nqp_rxpeek $I19, rx394_bstack, rxcap396_fail1189
    inc $I19
    set $I11, rx394_bstack[$I19]
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx394_pos)
    rx394_cstack = rx394_cur."!cursor_capture"($P11, "sym")
    goto rxcap396_done1188
  rxcap396_fail1189:
    goto rx394_fail1181
  rxcap396_done1188:
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."ws"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    nqp_rxmark rx394_bstack, rxsubrule398_pass1191, -1, 0
  rxsubrule398_pass1191:
    rx394_cstack = rx394_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."ws"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    rx394_cur."!cursor_pass"(rx394_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx394_cur)
  rx394_restart1180:
    repr_get_attr_obj rx394_cstack, rx394_cur, rx394_curclass, "$!cstack"
  rx394_fail1181:
    unless rx394_bstack, rx394_done1179
    pop $I19, rx394_bstack
    if_null rx394_cstack, rx394_cstack_done1184
    unless rx394_cstack, rx394_cstack_done1184
    dec $I19
    set $P11, rx394_cstack[$I19]
  rx394_cstack_done1184:
    pop rx394_rep, rx394_bstack
    pop rx394_pos, rx394_bstack
    pop $I19, rx394_bstack
    lt rx394_pos, -1, rx394_done1179
    lt rx394_pos, 0, rx394_fail1181
    eq $I19, 0, rx394_fail1181
    nqp_islist $I20, rx394_cstack
    unless $I20, rx394_jump1182
    elements $I18, rx394_bstack
    le $I18, 0, rx394_cut1183
    dec $I18
    set $I18, rx394_bstack[$I18]
  rx394_cut1183:
    assign rx394_cstack, $I18
  rx394_jump1182:
    jump $I19
  rx394_done1179:
    rx394_cur."!cursor_fail"()
    .return (rx394_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_77_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 887
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_78_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    (rx400_cur, rx400_tgt, rx400_pos, rx400_curclass, rx400_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1195
    gt rx400_pos, rx400_eos, rx400_fail1196
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1202
    goto rxscan401_scan1201
  rxscan401_loop1200:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1196
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1201:
    nqp_rxmark rx400_bstack, rxscan401_loop1200, rx400_pos, 0
  rxscan401_done1202:
    nqp_rxmark rx400_bstack, rxcap402_fail1204, rx400_pos, 0
    add $I11, rx400_pos, 5
    gt $I11, rx400_eos, rx400_fail1196
    substr $S10, rx400_tgt, rx400_pos, 5
    ne $S10, ucs4:"while", rx400_fail1196
    add rx400_pos, 5
    nqp_rxpeek $I19, rx400_bstack, rxcap402_fail1204
    inc $I19
    set $I11, rx400_bstack[$I19]
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx400_pos)
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "sym")
    goto rxcap402_done1203
  rxcap402_fail1204:
    goto rx400_fail1196
  rxcap402_done1203:
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."ws"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    nqp_rxmark rx400_bstack, rxsubrule404_pass1206, -1, 0
  rxsubrule404_pass1206:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."ws"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    rx400_cur."!cursor_pass"(rx400_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1195:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1196:
    unless rx400_bstack, rx400_done1194
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1199
    unless rx400_cstack, rx400_cstack_done1199
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1199:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1194
    lt rx400_pos, 0, rx400_fail1196
    eq $I19, 0, rx400_fail1196
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1197
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1198
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1198:
    assign rx400_cstack, $I18
  rx400_jump1197:
    jump $I19
  rx400_done1194:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_79_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    (rx406_cur, rx406_tgt, rx406_pos, rx406_curclass, rx406_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1210
    gt rx406_pos, rx406_eos, rx406_fail1211
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1217
    goto rxscan407_scan1216
  rxscan407_loop1215:
    inc rx406_pos
    gt rx406_pos, rx406_eos, rx406_fail1211
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1216:
    nqp_rxmark rx406_bstack, rxscan407_loop1215, rx406_pos, 0
  rxscan407_done1217:
    nqp_rxmark rx406_bstack, rxcap408_fail1219, rx406_pos, 0
    add $I11, rx406_pos, 5
    gt $I11, rx406_eos, rx406_fail1211
    substr $S10, rx406_tgt, rx406_pos, 5
    ne $S10, ucs4:"until", rx406_fail1211
    add rx406_pos, 5
    nqp_rxpeek $I19, rx406_bstack, rxcap408_fail1219
    inc $I19
    set $I11, rx406_bstack[$I19]
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx406_pos)
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "sym")
    goto rxcap408_done1218
  rxcap408_fail1219:
    goto rx406_fail1211
  rxcap408_done1218:
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."ws"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    nqp_rxmark rx406_bstack, rxsubrule410_pass1221, -1, 0
  rxsubrule410_pass1221:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."ws"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    rx406_cur."!cursor_pass"(rx406_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1210:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1211:
    unless rx406_bstack, rx406_done1209
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1214
    unless rx406_cstack, rx406_cstack_done1214
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1214:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1209
    lt rx406_pos, 0, rx406_fail1211
    eq $I19, 0, rx406_fail1211
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1212
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1213
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1213:
    assign rx406_cstack, $I18
  rx406_jump1212:
    jump $I19
  rx406_done1209:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_80_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx412_tgt
    .local int rx412_pos
    .local int rx412_off
    .local int rx412_eos
    .local int rx412_rep
    .local pmc rx412_cur
    .local pmc rx412_curclass
    .local pmc rx412_bstack
    .local pmc rx412_cstack
    (rx412_cur, rx412_tgt, rx412_pos, rx412_curclass, rx412_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx412_cur
    length rx412_eos, rx412_tgt
    eq $I19, 1, rx412_restart1225
    gt rx412_pos, rx412_eos, rx412_fail1226
    repr_get_attr_int $I11, self, rx412_curclass, "$!from"
    ne $I11, -1, rxscan413_done1232
    goto rxscan413_scan1231
  rxscan413_loop1230:
    inc rx412_pos
    gt rx412_pos, rx412_eos, rx412_fail1226
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!from", rx412_pos
  rxscan413_scan1231:
    nqp_rxmark rx412_bstack, rxscan413_loop1230, rx412_pos, 0
  rxscan413_done1232:
    nqp_rxmark rx412_bstack, rxcap414_fail1234, rx412_pos, 0
    add $I11, rx412_pos, 3
    gt $I11, rx412_eos, rx412_fail1226
    substr $S10, rx412_tgt, rx412_pos, 3
    ne $S10, ucs4:"for", rx412_fail1226
    add rx412_pos, 3
    nqp_rxpeek $I19, rx412_bstack, rxcap414_fail1234
    inc $I19
    set $I11, rx412_bstack[$I19]
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx412_pos)
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "sym")
    goto rxcap414_done1233
  rxcap414_fail1234:
    goto rx412_fail1226
  rxcap414_done1233:
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."ws"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    nqp_rxmark rx412_bstack, rxsubrule416_pass1236, -1, 0
  rxsubrule416_pass1236:
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."ws"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    rx412_cur."!cursor_pass"(rx412_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx412_cur)
  rx412_restart1225:
    repr_get_attr_obj rx412_cstack, rx412_cur, rx412_curclass, "$!cstack"
  rx412_fail1226:
    unless rx412_bstack, rx412_done1224
    pop $I19, rx412_bstack
    if_null rx412_cstack, rx412_cstack_done1229
    unless rx412_cstack, rx412_cstack_done1229
    dec $I19
    set $P11, rx412_cstack[$I19]
  rx412_cstack_done1229:
    pop rx412_rep, rx412_bstack
    pop rx412_pos, rx412_bstack
    pop $I19, rx412_bstack
    lt rx412_pos, -1, rx412_done1224
    lt rx412_pos, 0, rx412_fail1226
    eq $I19, 0, rx412_fail1226
    nqp_islist $I20, rx412_cstack
    unless $I20, rx412_jump1227
    elements $I18, rx412_bstack
    le $I18, 0, rx412_cut1228
    dec $I18
    set $I18, rx412_bstack[$I18]
  rx412_cut1228:
    assign rx412_cstack, $I18
  rx412_jump1227:
    jump $I19
  rx412_done1224:
    rx412_cur."!cursor_fail"()
    .return (rx412_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_81_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx418_tgt
    .local int rx418_pos
    .local int rx418_off
    .local int rx418_eos
    .local int rx418_rep
    .local pmc rx418_cur
    .local pmc rx418_curclass
    .local pmc rx418_bstack
    .local pmc rx418_cstack
    (rx418_cur, rx418_tgt, rx418_pos, rx418_curclass, rx418_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx418_cur
    length rx418_eos, rx418_tgt
    eq $I19, 1, rx418_restart1240
    gt rx418_pos, rx418_eos, rx418_fail1241
    repr_get_attr_int $I11, self, rx418_curclass, "$!from"
    ne $I11, -1, rxscan419_done1247
    goto rxscan419_scan1246
  rxscan419_loop1245:
    inc rx418_pos
    gt rx418_pos, rx418_eos, rx418_fail1241
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!from", rx418_pos
  rxscan419_scan1246:
    nqp_rxmark rx418_bstack, rxscan419_loop1245, rx418_pos, 0
  rxscan419_done1247:
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    $P11 = rx418_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx418_curclass, "$!pos"
    lt $I11, 0, rx418_fail1241
    nqp_rxmark rx418_bstack, rxsubrule420_pass1248, -1, 0
  rxsubrule420_pass1248:
    rx418_cstack = rx418_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx418_pos, $P11, rx418_curclass, "$!pos"
    rx418_cur."!cursor_pass"(rx418_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx418_cur)
  rx418_restart1240:
    repr_get_attr_obj rx418_cstack, rx418_cur, rx418_curclass, "$!cstack"
  rx418_fail1241:
    unless rx418_bstack, rx418_done1239
    pop $I19, rx418_bstack
    if_null rx418_cstack, rx418_cstack_done1244
    unless rx418_cstack, rx418_cstack_done1244
    dec $I19
    set $P11, rx418_cstack[$I19]
  rx418_cstack_done1244:
    pop rx418_rep, rx418_bstack
    pop rx418_pos, rx418_bstack
    pop $I19, rx418_bstack
    lt rx418_pos, -1, rx418_done1239
    lt rx418_pos, 0, rx418_fail1241
    eq $I19, 0, rx418_fail1241
    nqp_islist $I20, rx418_cstack
    unless $I20, rx418_jump1242
    elements $I18, rx418_bstack
    le $I18, 0, rx418_cut1243
    dec $I18
    set $I18, rx418_bstack[$I18]
  rx418_cut1243:
    assign rx418_cstack, $I18
  rx418_jump1242:
    jump $I19
  rx418_done1239:
    rx418_cur."!cursor_fail"()
    .return (rx418_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_82_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx421_tgt
    .local int rx421_pos
    .local int rx421_off
    .local int rx421_eos
    .local int rx421_rep
    .local pmc rx421_cur
    .local pmc rx421_curclass
    .local pmc rx421_bstack
    .local pmc rx421_cstack
    (rx421_cur, rx421_tgt, rx421_pos, rx421_curclass, rx421_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx421_cur
    length rx421_eos, rx421_tgt
    eq $I19, 1, rx421_restart1251
    gt rx421_pos, rx421_eos, rx421_fail1252
    repr_get_attr_int $I11, self, rx421_curclass, "$!from"
    ne $I11, -1, rxscan422_done1258
    goto rxscan422_scan1257
  rxscan422_loop1256:
    inc rx421_pos
    gt rx421_pos, rx421_eos, rx421_fail1252
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!from", rx421_pos
  rxscan422_scan1257:
    nqp_rxmark rx421_bstack, rxscan422_loop1256, rx421_pos, 0
  rxscan422_done1258:
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!pos", rx421_pos
    $P11 = rx421_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx421_curclass, "$!pos"
    lt $I11, 0, rx421_fail1252
    nqp_rxmark rx421_bstack, rxsubrule423_pass1259, -1, 0
  rxsubrule423_pass1259:
    rx421_cstack = rx421_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx421_pos, $P11, rx421_curclass, "$!pos"
    rx421_cur."!cursor_pass"(rx421_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx421_cur)
  rx421_restart1251:
    repr_get_attr_obj rx421_cstack, rx421_cur, rx421_curclass, "$!cstack"
  rx421_fail1252:
    unless rx421_bstack, rx421_done1250
    pop $I19, rx421_bstack
    if_null rx421_cstack, rx421_cstack_done1255
    unless rx421_cstack, rx421_cstack_done1255
    dec $I19
    set $P11, rx421_cstack[$I19]
  rx421_cstack_done1255:
    pop rx421_rep, rx421_bstack
    pop rx421_pos, rx421_bstack
    pop $I19, rx421_bstack
    lt rx421_pos, -1, rx421_done1250
    lt rx421_pos, 0, rx421_fail1252
    eq $I19, 0, rx421_fail1252
    nqp_islist $I20, rx421_cstack
    unless $I20, rx421_jump1253
    elements $I18, rx421_bstack
    le $I18, 0, rx421_cut1254
    dec $I18
    set $I18, rx421_bstack[$I18]
  rx421_cut1254:
    assign rx421_cstack, $I18
  rx421_jump1253:
    jump $I19
  rx421_done1250:
    rx421_cur."!cursor_fail"()
    .return (rx421_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_83_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx424_tgt
    .local int rx424_pos
    .local int rx424_off
    .local int rx424_eos
    .local int rx424_rep
    .local pmc rx424_cur
    .local pmc rx424_curclass
    .local pmc rx424_bstack
    .local pmc rx424_cstack
    (rx424_cur, rx424_tgt, rx424_pos, rx424_curclass, rx424_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx424_cur
    length rx424_eos, rx424_tgt
    eq $I19, 1, rx424_restart1262
    gt rx424_pos, rx424_eos, rx424_fail1263
    repr_get_attr_int $I11, self, rx424_curclass, "$!from"
    ne $I11, -1, rxscan425_done1269
    goto rxscan425_scan1268
  rxscan425_loop1267:
    inc rx424_pos
    gt rx424_pos, rx424_eos, rx424_fail1263
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!from", rx424_pos
  rxscan425_scan1268:
    nqp_rxmark rx424_bstack, rxscan425_loop1267, rx424_pos, 0
  rxscan425_done1269:
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."variable"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail1263
    nqp_rxmark rx424_bstack, rxsubrule426_pass1270, -1, 0
  rxsubrule426_pass1270:
    rx424_cstack = rx424_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    rx424_cur."!cursor_pass"(rx424_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx424_cur)
  rx424_restart1262:
    repr_get_attr_obj rx424_cstack, rx424_cur, rx424_curclass, "$!cstack"
  rx424_fail1263:
    unless rx424_bstack, rx424_done1261
    pop $I19, rx424_bstack
    if_null rx424_cstack, rx424_cstack_done1266
    unless rx424_cstack, rx424_cstack_done1266
    dec $I19
    set $P11, rx424_cstack[$I19]
  rx424_cstack_done1266:
    pop rx424_rep, rx424_bstack
    pop rx424_pos, rx424_bstack
    pop $I19, rx424_bstack
    lt rx424_pos, -1, rx424_done1261
    lt rx424_pos, 0, rx424_fail1263
    eq $I19, 0, rx424_fail1263
    nqp_islist $I20, rx424_cstack
    unless $I20, rx424_jump1264
    elements $I18, rx424_bstack
    le $I18, 0, rx424_cut1265
    dec $I18
    set $I18, rx424_bstack[$I18]
  rx424_cut1265:
    assign rx424_cstack, $I18
  rx424_jump1264:
    jump $I19
  rx424_done1261:
    rx424_cur."!cursor_fail"()
    .return (rx424_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_84_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx427_tgt
    .local int rx427_pos
    .local int rx427_off
    .local int rx427_eos
    .local int rx427_rep
    .local pmc rx427_cur
    .local pmc rx427_curclass
    .local pmc rx427_bstack
    .local pmc rx427_cstack
    (rx427_cur, rx427_tgt, rx427_pos, rx427_curclass, rx427_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx427_cur
    length rx427_eos, rx427_tgt
    eq $I19, 1, rx427_restart1273
    gt rx427_pos, rx427_eos, rx427_fail1274
    repr_get_attr_int $I11, self, rx427_curclass, "$!from"
    ne $I11, -1, rxscan428_done1280
    goto rxscan428_scan1279
  rxscan428_loop1278:
    inc rx427_pos
    gt rx427_pos, rx427_eos, rx427_fail1274
    repr_bind_attr_int rx427_cur, rx427_curclass, "$!from", rx427_pos
  rxscan428_scan1279:
    nqp_rxmark rx427_bstack, rxscan428_loop1278, rx427_pos, 0
  rxscan428_done1280:
    repr_bind_attr_int rx427_cur, rx427_curclass, "$!pos", rx427_pos
    $P11 = rx427_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx427_curclass, "$!pos"
    lt $I11, 0, rx427_fail1274
    nqp_rxmark rx427_bstack, rxsubrule429_pass1281, -1, 0
  rxsubrule429_pass1281:
    rx427_cstack = rx427_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx427_pos, $P11, rx427_curclass, "$!pos"
    rx427_cur."!cursor_pass"(rx427_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx427_cur)
  rx427_restart1273:
    repr_get_attr_obj rx427_cstack, rx427_cur, rx427_curclass, "$!cstack"
  rx427_fail1274:
    unless rx427_bstack, rx427_done1272
    pop $I19, rx427_bstack
    if_null rx427_cstack, rx427_cstack_done1277
    unless rx427_cstack, rx427_cstack_done1277
    dec $I19
    set $P11, rx427_cstack[$I19]
  rx427_cstack_done1277:
    pop rx427_rep, rx427_bstack
    pop rx427_pos, rx427_bstack
    pop $I19, rx427_bstack
    lt rx427_pos, -1, rx427_done1272
    lt rx427_pos, 0, rx427_fail1274
    eq $I19, 0, rx427_fail1274
    nqp_islist $I20, rx427_cstack
    unless $I20, rx427_jump1275
    elements $I18, rx427_bstack
    le $I18, 0, rx427_cut1276
    dec $I18
    set $I18, rx427_bstack[$I18]
  rx427_cut1276:
    assign rx427_cstack, $I18
  rx427_jump1275:
    jump $I19
  rx427_done1272:
    rx427_cur."!cursor_fail"()
    .return (rx427_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_85_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx430_tgt
    .local int rx430_pos
    .local int rx430_off
    .local int rx430_eos
    .local int rx430_rep
    .local pmc rx430_cur
    .local pmc rx430_curclass
    .local pmc rx430_bstack
    .local pmc rx430_cstack
    (rx430_cur, rx430_tgt, rx430_pos, rx430_curclass, rx430_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx430_cur
    length rx430_eos, rx430_tgt
    eq $I19, 1, rx430_restart1284
    gt rx430_pos, rx430_eos, rx430_fail1285
    repr_get_attr_int $I11, self, rx430_curclass, "$!from"
    ne $I11, -1, rxscan431_done1291
    goto rxscan431_scan1290
  rxscan431_loop1289:
    inc rx430_pos
    gt rx430_pos, rx430_eos, rx430_fail1285
    repr_bind_attr_int rx430_cur, rx430_curclass, "$!from", rx430_pos
  rxscan431_scan1290:
    nqp_rxmark rx430_bstack, rxscan431_loop1289, rx430_pos, 0
  rxscan431_done1291:
    repr_bind_attr_int rx430_cur, rx430_curclass, "$!pos", rx430_pos
    $P11 = rx430_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx430_curclass, "$!pos"
    lt $I11, 0, rx430_fail1285
    nqp_rxmark rx430_bstack, rxsubrule432_pass1292, -1, 0
  rxsubrule432_pass1292:
    rx430_cstack = rx430_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx430_pos, $P11, rx430_curclass, "$!pos"
    rx430_cur."!cursor_pass"(rx430_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx430_cur)
  rx430_restart1284:
    repr_get_attr_obj rx430_cstack, rx430_cur, rx430_curclass, "$!cstack"
  rx430_fail1285:
    unless rx430_bstack, rx430_done1283
    pop $I19, rx430_bstack
    if_null rx430_cstack, rx430_cstack_done1288
    unless rx430_cstack, rx430_cstack_done1288
    dec $I19
    set $P11, rx430_cstack[$I19]
  rx430_cstack_done1288:
    pop rx430_rep, rx430_bstack
    pop rx430_pos, rx430_bstack
    pop $I19, rx430_bstack
    lt rx430_pos, -1, rx430_done1283
    lt rx430_pos, 0, rx430_fail1285
    eq $I19, 0, rx430_fail1285
    nqp_islist $I20, rx430_cstack
    unless $I20, rx430_jump1286
    elements $I18, rx430_bstack
    le $I18, 0, rx430_cut1287
    dec $I18
    set $I18, rx430_bstack[$I18]
  rx430_cut1287:
    assign rx430_cstack, $I18
  rx430_jump1286:
    jump $I19
  rx430_done1283:
    rx430_cur."!cursor_fail"()
    .return (rx430_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_86_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx433_tgt
    .local int rx433_pos
    .local int rx433_off
    .local int rx433_eos
    .local int rx433_rep
    .local pmc rx433_cur
    .local pmc rx433_curclass
    .local pmc rx433_bstack
    .local pmc rx433_cstack
    (rx433_cur, rx433_tgt, rx433_pos, rx433_curclass, rx433_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx433_cur
    length rx433_eos, rx433_tgt
    eq $I19, 1, rx433_restart1295
    gt rx433_pos, rx433_eos, rx433_fail1296
    repr_get_attr_int $I11, self, rx433_curclass, "$!from"
    ne $I11, -1, rxscan434_done1302
    goto rxscan434_scan1301
  rxscan434_loop1300:
    inc rx433_pos
    gt rx433_pos, rx433_eos, rx433_fail1296
    repr_bind_attr_int rx433_cur, rx433_curclass, "$!from", rx433_pos
  rxscan434_scan1301:
    nqp_rxmark rx433_bstack, rxscan434_loop1300, rx433_pos, 0
  rxscan434_done1302:
    repr_bind_attr_int rx433_cur, rx433_curclass, "$!pos", rx433_pos
    $P11 = rx433_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx433_curclass, "$!pos"
    lt $I11, 0, rx433_fail1296
    nqp_rxmark rx433_bstack, rxsubrule435_pass1303, -1, 0
  rxsubrule435_pass1303:
    rx433_cstack = rx433_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx433_pos, $P11, rx433_curclass, "$!pos"
    rx433_cur."!cursor_pass"(rx433_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx433_cur)
  rx433_restart1295:
    repr_get_attr_obj rx433_cstack, rx433_cur, rx433_curclass, "$!cstack"
  rx433_fail1296:
    unless rx433_bstack, rx433_done1294
    pop $I19, rx433_bstack
    if_null rx433_cstack, rx433_cstack_done1299
    unless rx433_cstack, rx433_cstack_done1299
    dec $I19
    set $P11, rx433_cstack[$I19]
  rx433_cstack_done1299:
    pop rx433_rep, rx433_bstack
    pop rx433_pos, rx433_bstack
    pop $I19, rx433_bstack
    lt rx433_pos, -1, rx433_done1294
    lt rx433_pos, 0, rx433_fail1296
    eq $I19, 0, rx433_fail1296
    nqp_islist $I20, rx433_cstack
    unless $I20, rx433_jump1297
    elements $I18, rx433_bstack
    le $I18, 0, rx433_cut1298
    dec $I18
    set $I18, rx433_bstack[$I18]
  rx433_cut1298:
    assign rx433_cstack, $I18
  rx433_jump1297:
    jump $I19
  rx433_done1294:
    rx433_cur."!cursor_fail"()
    .return (rx433_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_87_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_88_1360232768.755' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_89_1360232768.755' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx436_tgt
    .local int rx436_pos
    .local int rx436_off
    .local int rx436_eos
    .local int rx436_rep
    .local pmc rx436_cur
    .local pmc rx436_curclass
    .local pmc rx436_bstack
    .local pmc rx436_cstack
    (rx436_cur, rx436_tgt, rx436_pos, rx436_curclass, rx436_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx436_cur
    length rx436_eos, rx436_tgt
    eq $I19, 1, rx436_restart1306
    gt rx436_pos, rx436_eos, rx436_fail1307
    repr_get_attr_int $I11, self, rx436_curclass, "$!from"
    ne $I11, -1, rxscan437_done1313
    goto rxscan437_scan1312
  rxscan437_loop1311:
    inc rx436_pos
    gt rx436_pos, rx436_eos, rx436_fail1307
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!from", rx436_pos
  rxscan437_scan1312:
    nqp_rxmark rx436_bstack, rxscan437_loop1311, rx436_pos, 0
  rxscan437_done1313:
    .const 'Sub' $P5001 = 'cuid_88_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1307
    .const 'Sub' $P5002 = 'cuid_89_1360232768.755' 
    capture_lex $P5002
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    ge $I11, 0, rx436_fail1307
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1307
    nqp_rxmark rx436_bstack, rxsubrule445_pass1343, -1, 0
  rxsubrule445_pass1343:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    rx436_cur."!cursor_pass"(rx436_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx436_cur)
  rx436_restart1306:
    repr_get_attr_obj rx436_cstack, rx436_cur, rx436_curclass, "$!cstack"
  rx436_fail1307:
    unless rx436_bstack, rx436_done1305
    pop $I19, rx436_bstack
    if_null rx436_cstack, rx436_cstack_done1310
    unless rx436_cstack, rx436_cstack_done1310
    dec $I19
    set $P11, rx436_cstack[$I19]
  rx436_cstack_done1310:
    pop rx436_rep, rx436_bstack
    pop rx436_pos, rx436_bstack
    pop $I19, rx436_bstack
    lt rx436_pos, -1, rx436_done1305
    lt rx436_pos, 0, rx436_fail1307
    eq $I19, 0, rx436_fail1307
    nqp_islist $I20, rx436_cstack
    unless $I20, rx436_jump1308
    elements $I18, rx436_bstack
    le $I18, 0, rx436_cut1309
    dec $I18
    set $I18, rx436_bstack[$I18]
  rx436_cut1309:
    assign rx436_cstack, $I18
  rx436_jump1308:
    jump $I19
  rx436_done1305:
    rx436_cur."!cursor_fail"()
    .return (rx436_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1360232768.755") :anon :lex :outer("cuid_87_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx438_tgt
    .local int rx438_pos
    .local int rx438_off
    .local int rx438_eos
    .local int rx438_rep
    .local pmc rx438_cur
    .local pmc rx438_curclass
    .local pmc rx438_bstack
    .local pmc rx438_cstack
    (rx438_cur, rx438_tgt, rx438_pos, rx438_curclass, rx438_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx438_cur
    length rx438_eos, rx438_tgt
    eq $I19, 1, rx438_restart1316
    gt rx438_pos, rx438_eos, rx438_fail1317
    repr_get_attr_int $I11, self, rx438_curclass, "$!from"
    ne $I11, -1, rxscan439_done1323
    goto rxscan439_scan1322
  rxscan439_loop1321:
    inc rx438_pos
    gt rx438_pos, rx438_eos, rx438_fail1317
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!from", rx438_pos
  rxscan439_scan1322:
    nqp_rxmark rx438_bstack, rxscan439_loop1321, rx438_pos, 0
  rxscan439_done1323:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt440_01325
    nqp_push_label $P11, alt440_11326
    nqp_push_label $P11, alt440_21327
    nqp_rxmark rx438_bstack, alt440_end1324, -1, 0
    rx438_cur."!alt"(rx438_pos, "alt_nfa__17_1360232770.408", $P11)
    goto rx438_fail1317
  alt440_01325:
    add $I11, rx438_pos, 5
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 5
    ne $S10, ucs4:"multi", rx438_fail1317
    add rx438_pos, 5
    goto alt440_end1324
  alt440_11326:
    add $I11, rx438_pos, 5
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 5
    ne $S10, ucs4:"proto", rx438_fail1317
    add rx438_pos, 5
    goto alt440_end1324
  alt440_21327:
    add $I11, rx438_pos, 4
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 4
    ne $S10, ucs4:"only", rx438_fail1317
    add rx438_pos, 4
    goto alt440_end1324
  alt440_end1324:
    rx438_cur."!cursor_pass"(rx438_pos, 'backtrack'=>1)
    .return (rx438_cur)
  rx438_restart1316:
    repr_get_attr_obj rx438_cstack, rx438_cur, rx438_curclass, "$!cstack"
  rx438_fail1317:
    unless rx438_bstack, rx438_done1315
    pop $I19, rx438_bstack
    if_null rx438_cstack, rx438_cstack_done1320
    unless rx438_cstack, rx438_cstack_done1320
    dec $I19
    set $P11, rx438_cstack[$I19]
  rx438_cstack_done1320:
    pop rx438_rep, rx438_bstack
    pop rx438_pos, rx438_bstack
    pop $I19, rx438_bstack
    lt rx438_pos, -1, rx438_done1315
    lt rx438_pos, 0, rx438_fail1317
    eq $I19, 0, rx438_fail1317
    nqp_islist $I20, rx438_cstack
    unless $I20, rx438_jump1318
    elements $I18, rx438_bstack
    le $I18, 0, rx438_cut1319
    dec $I18
    set $I18, rx438_bstack[$I18]
  rx438_cut1319:
    assign rx438_cstack, $I18
  rx438_jump1318:
    jump $I19
  rx438_done1315:
    rx438_cur."!cursor_fail"()
    .return (rx438_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1360232768.755") :anon :lex :outer("cuid_87_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx441_tgt
    .local int rx441_pos
    .local int rx441_off
    .local int rx441_eos
    .local int rx441_rep
    .local pmc rx441_cur
    .local pmc rx441_curclass
    .local pmc rx441_bstack
    .local pmc rx441_cstack
    (rx441_cur, rx441_tgt, rx441_pos, rx441_curclass, rx441_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx441_cur
    length rx441_eos, rx441_tgt
    eq $I19, 1, rx441_restart1330
    gt rx441_pos, rx441_eos, rx441_fail1331
    repr_get_attr_int $I11, self, rx441_curclass, "$!from"
    ne $I11, -1, rxscan442_done1337
    goto rxscan442_scan1336
  rxscan442_loop1335:
    inc rx441_pos
    gt rx441_pos, rx441_eos, rx441_fail1331
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!from", rx441_pos
  rxscan442_scan1336:
    nqp_rxmark rx441_bstack, rxscan442_loop1335, rx441_pos, 0
  rxscan442_done1337:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"proto", rx441_fail1331
    add rx441_pos, 5
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur."ws"()
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1331
    repr_get_attr_int rx441_pos, $P11, rx441_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt444_01340
    nqp_push_label $P11, alt444_11341
    nqp_push_label $P11, alt444_21342
    nqp_rxmark rx441_bstack, alt444_end1339, -1, 0
    rx441_cur."!alt"(rx441_pos, "alt_nfa__18_1360232770.416", $P11)
    goto rx441_fail1331
  alt444_01340:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"regex", rx441_fail1331
    add rx441_pos, 5
    goto alt444_end1339
  alt444_11341:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"token", rx441_fail1331
    add rx441_pos, 5
    goto alt444_end1339
  alt444_21342:
    add $I11, rx441_pos, 4
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 4
    ne $S10, ucs4:"rule", rx441_fail1331
    add rx441_pos, 4
    goto alt444_end1339
  alt444_end1339:
    nqp_rxcommit rx441_bstack, alt444_end1339
    rx441_cur."!cursor_pass"(rx441_pos, 'backtrack'=>1)
    .return (rx441_cur)
  rx441_restart1330:
    repr_get_attr_obj rx441_cstack, rx441_cur, rx441_curclass, "$!cstack"
  rx441_fail1331:
    unless rx441_bstack, rx441_done1329
    pop $I19, rx441_bstack
    if_null rx441_cstack, rx441_cstack_done1334
    unless rx441_cstack, rx441_cstack_done1334
    dec $I19
    set $P11, rx441_cstack[$I19]
  rx441_cstack_done1334:
    pop rx441_rep, rx441_bstack
    pop rx441_pos, rx441_bstack
    pop $I19, rx441_bstack
    lt rx441_pos, -1, rx441_done1329
    lt rx441_pos, 0, rx441_fail1331
    eq $I19, 0, rx441_fail1331
    nqp_islist $I20, rx441_cstack
    unless $I20, rx441_jump1332
    elements $I18, rx441_bstack
    le $I18, 0, rx441_cut1333
    dec $I18
    set $I18, rx441_bstack[$I18]
  rx441_cut1333:
    assign rx441_cstack, $I18
  rx441_jump1332:
    jump $I19
  rx441_done1329:
    rx441_cur."!cursor_fail"()
    .return (rx441_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_90_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 906
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx446_tgt
    .local int rx446_pos
    .local int rx446_off
    .local int rx446_eos
    .local int rx446_rep
    .local pmc rx446_cur
    .local pmc rx446_curclass
    .local pmc rx446_bstack
    .local pmc rx446_cstack
    (rx446_cur, rx446_tgt, rx446_pos, rx446_curclass, rx446_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx446_cur
    length rx446_eos, rx446_tgt
    eq $I19, 1, rx446_restart1346
    gt rx446_pos, rx446_eos, rx446_fail1347
    repr_get_attr_int $I11, self, rx446_curclass, "$!from"
    ne $I11, -1, rxscan447_done1353
    goto rxscan447_scan1352
  rxscan447_loop1351:
    inc rx446_pos
    gt rx446_pos, rx446_eos, rx446_fail1347
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!from", rx446_pos
  rxscan447_scan1352:
    nqp_rxmark rx446_bstack, rxscan447_loop1351, rx446_pos, 0
  rxscan447_done1353:
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!pos", rx446_pos
    $P11 = rx446_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx446_curclass, "$!pos"
    lt $I11, 0, rx446_fail1347
    nqp_rxmark rx446_bstack, rxsubrule448_pass1354, -1, 0
  rxsubrule448_pass1354:
    rx446_cstack = rx446_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx446_pos, $P11, rx446_curclass, "$!pos"
    rx446_cur."!cursor_pass"(rx446_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx446_cur)
  rx446_restart1346:
    repr_get_attr_obj rx446_cstack, rx446_cur, rx446_curclass, "$!cstack"
  rx446_fail1347:
    unless rx446_bstack, rx446_done1345
    pop $I19, rx446_bstack
    if_null rx446_cstack, rx446_cstack_done1350
    unless rx446_cstack, rx446_cstack_done1350
    dec $I19
    set $P11, rx446_cstack[$I19]
  rx446_cstack_done1350:
    pop rx446_rep, rx446_bstack
    pop rx446_pos, rx446_bstack
    pop $I19, rx446_bstack
    lt rx446_pos, -1, rx446_done1345
    lt rx446_pos, 0, rx446_fail1347
    eq $I19, 0, rx446_fail1347
    nqp_islist $I20, rx446_cstack
    unless $I20, rx446_jump1348
    elements $I18, rx446_bstack
    le $I18, 0, rx446_cut1349
    dec $I18
    set $I18, rx446_bstack[$I18]
  rx446_cut1349:
    assign rx446_cstack, $I18
  rx446_jump1348:
    jump $I19
  rx446_done1345:
    rx446_cur."!cursor_fail"()
    .return (rx446_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_91_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 907
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx449_tgt
    .local int rx449_pos
    .local int rx449_off
    .local int rx449_eos
    .local int rx449_rep
    .local pmc rx449_cur
    .local pmc rx449_curclass
    .local pmc rx449_bstack
    .local pmc rx449_cstack
    (rx449_cur, rx449_tgt, rx449_pos, rx449_curclass, rx449_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx449_cur
    length rx449_eos, rx449_tgt
    eq $I19, 1, rx449_restart1357
    gt rx449_pos, rx449_eos, rx449_fail1358
    repr_get_attr_int $I11, self, rx449_curclass, "$!from"
    ne $I11, -1, rxscan450_done1364
    goto rxscan450_scan1363
  rxscan450_loop1362:
    inc rx449_pos
    gt rx449_pos, rx449_eos, rx449_fail1358
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!from", rx449_pos
  rxscan450_scan1363:
    nqp_rxmark rx449_bstack, rxscan450_loop1362, rx449_pos, 0
  rxscan450_done1364:
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!pos", rx449_pos
    $P11 = rx449_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx449_curclass, "$!pos"
    lt $I11, 0, rx449_fail1358
    nqp_rxmark rx449_bstack, rxsubrule451_pass1365, -1, 0
  rxsubrule451_pass1365:
    rx449_cstack = rx449_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx449_pos, $P11, rx449_curclass, "$!pos"
    rx449_cur."!cursor_pass"(rx449_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx449_cur)
  rx449_restart1357:
    repr_get_attr_obj rx449_cstack, rx449_cur, rx449_curclass, "$!cstack"
  rx449_fail1358:
    unless rx449_bstack, rx449_done1356
    pop $I19, rx449_bstack
    if_null rx449_cstack, rx449_cstack_done1361
    unless rx449_cstack, rx449_cstack_done1361
    dec $I19
    set $P11, rx449_cstack[$I19]
  rx449_cstack_done1361:
    pop rx449_rep, rx449_bstack
    pop rx449_pos, rx449_bstack
    pop $I19, rx449_bstack
    lt rx449_pos, -1, rx449_done1356
    lt rx449_pos, 0, rx449_fail1358
    eq $I19, 0, rx449_fail1358
    nqp_islist $I20, rx449_cstack
    unless $I20, rx449_jump1359
    elements $I18, rx449_bstack
    le $I18, 0, rx449_cut1360
    dec $I18
    set $I18, rx449_bstack[$I18]
  rx449_cut1360:
    assign rx449_cstack, $I18
  rx449_jump1359:
    jump $I19
  rx449_done1356:
    rx449_cur."!cursor_fail"()
    .return (rx449_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_92_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 908
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx452_tgt
    .local int rx452_pos
    .local int rx452_off
    .local int rx452_eos
    .local int rx452_rep
    .local pmc rx452_cur
    .local pmc rx452_curclass
    .local pmc rx452_bstack
    .local pmc rx452_cstack
    (rx452_cur, rx452_tgt, rx452_pos, rx452_curclass, rx452_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx452_cur
    length rx452_eos, rx452_tgt
    eq $I19, 1, rx452_restart1368
    gt rx452_pos, rx452_eos, rx452_fail1369
    repr_get_attr_int $I11, self, rx452_curclass, "$!from"
    ne $I11, -1, rxscan453_done1375
    goto rxscan453_scan1374
  rxscan453_loop1373:
    inc rx452_pos
    gt rx452_pos, rx452_eos, rx452_fail1369
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!from", rx452_pos
  rxscan453_scan1374:
    nqp_rxmark rx452_bstack, rxscan453_loop1373, rx452_pos, 0
  rxscan453_done1375:
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!pos", rx452_pos
    $P11 = rx452_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx452_curclass, "$!pos"
    lt $I11, 0, rx452_fail1369
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!pos", rx452_pos
    $P11 = rx452_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx452_curclass, "$!pos"
    lt $I11, 0, rx452_fail1369
    nqp_rxmark rx452_bstack, rxsubrule454_pass1376, -1, 0
  rxsubrule454_pass1376:
    rx452_cstack = rx452_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx452_pos, $P11, rx452_curclass, "$!pos"
    rx452_cur."!cursor_pass"(rx452_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx452_cur)
  rx452_restart1368:
    repr_get_attr_obj rx452_cstack, rx452_cur, rx452_curclass, "$!cstack"
  rx452_fail1369:
    unless rx452_bstack, rx452_done1367
    pop $I19, rx452_bstack
    if_null rx452_cstack, rx452_cstack_done1372
    unless rx452_cstack, rx452_cstack_done1372
    dec $I19
    set $P11, rx452_cstack[$I19]
  rx452_cstack_done1372:
    pop rx452_rep, rx452_bstack
    pop rx452_pos, rx452_bstack
    pop $I19, rx452_bstack
    lt rx452_pos, -1, rx452_done1367
    lt rx452_pos, 0, rx452_fail1369
    eq $I19, 0, rx452_fail1369
    nqp_islist $I20, rx452_cstack
    unless $I20, rx452_jump1370
    elements $I18, rx452_bstack
    le $I18, 0, rx452_cut1371
    dec $I18
    set $I18, rx452_bstack[$I18]
  rx452_cut1371:
    assign rx452_cstack, $I18
  rx452_jump1370:
    jump $I19
  rx452_done1367:
    rx452_cur."!cursor_fail"()
    .return (rx452_cur) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_93_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx455_tgt
    .local int rx455_pos
    .local int rx455_off
    .local int rx455_eos
    .local int rx455_rep
    .local pmc rx455_cur
    .local pmc rx455_curclass
    .local pmc rx455_bstack
    .local pmc rx455_cstack
    (rx455_cur, rx455_tgt, rx455_pos, rx455_curclass, rx455_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx455_cur
    length rx455_eos, rx455_tgt
    eq $I19, 1, rx455_restart1379
    gt rx455_pos, rx455_eos, rx455_fail1380
    repr_get_attr_int $I11, self, rx455_curclass, "$!from"
    ne $I11, -1, rxscan456_done1386
    goto rxscan456_scan1385
  rxscan456_loop1384:
    inc rx455_pos
    gt rx455_pos, rx455_eos, rx455_fail1380
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!from", rx455_pos
  rxscan456_scan1385:
    nqp_rxmark rx455_bstack, rxscan456_loop1384, rx455_pos, 0
  rxscan456_done1386:
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    nqp_rxmark rx455_bstack, rxsubrule457_pass1387, -1, 0
  rxsubrule457_pass1387:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    nqp_rxmark rx455_bstack, rxquantr458_done1389, rx455_pos, 0
  rxquantr458_loop1388:
    ge rx455_pos, rx455_eos, rx455_fail1380
    substr $S11, rx455_tgt, rx455_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx455_fail1380
    inc rx455_pos
    nqp_rxpeek $I19, rx455_bstack, rxquantr458_done1389
    inc $I19
    inc $I19
    set rx455_rep, rx455_bstack[$I19]
    nqp_rxcommit rx455_bstack, rxquantr458_done1389
    inc rx455_rep
    nqp_rxmark rx455_bstack, rxquantr458_done1389, rx455_pos, rx455_rep
    goto rxquantr458_loop1388
  rxquantr458_done1389:
    add $I11, rx455_pos, 2
    gt $I11, rx455_eos, rx455_fail1380
    substr $S10, rx455_tgt, rx455_pos, 2
    ne $S10, ucs4:"=>", rx455_fail1380
    add rx455_pos, 2
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."ws"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    nqp_rxmark rx455_bstack, rxsubrule460_pass1391, -1, 0
  rxsubrule460_pass1391:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    rx455_cur."!cursor_pass"(rx455_pos, "fatarrow", 'backtrack'=>1)
    .return (rx455_cur)
  rx455_restart1379:
    repr_get_attr_obj rx455_cstack, rx455_cur, rx455_curclass, "$!cstack"
  rx455_fail1380:
    unless rx455_bstack, rx455_done1378
    pop $I19, rx455_bstack
    if_null rx455_cstack, rx455_cstack_done1383
    unless rx455_cstack, rx455_cstack_done1383
    dec $I19
    set $P11, rx455_cstack[$I19]
  rx455_cstack_done1383:
    pop rx455_rep, rx455_bstack
    pop rx455_pos, rx455_bstack
    pop $I19, rx455_bstack
    lt rx455_pos, -1, rx455_done1378
    lt rx455_pos, 0, rx455_fail1380
    eq $I19, 0, rx455_fail1380
    nqp_islist $I20, rx455_cstack
    unless $I20, rx455_jump1381
    elements $I18, rx455_bstack
    le $I18, 0, rx455_cut1382
    dec $I18
    set $I18, rx455_bstack[$I18]
  rx455_cut1382:
    assign rx455_cstack, $I18
  rx455_jump1381:
    jump $I19
  rx455_done1378:
    rx455_cur."!cursor_fail"()
    .return (rx455_cur) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_94_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    (rx461_cur, rx461_tgt, rx461_pos, rx461_curclass, rx461_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1394
    gt rx461_pos, rx461_eos, rx461_fail1395
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1401
    goto rxscan462_scan1400
  rxscan462_loop1399:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1395
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1400:
    nqp_rxmark rx461_bstack, rxscan462_loop1399, rx461_pos, 0
  rxscan462_done1401:
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1395
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:":", rx461_fail1395
    add rx461_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt463_01403
    nqp_push_label $P11, alt463_11407
    nqp_push_label $P11, alt463_21413
    nqp_push_label $P11, alt463_31415
    nqp_rxmark rx461_bstack, alt463_end1402, -1, 0
    rx461_cur."!alt"(rx461_pos, "alt_nfa__19_1360232770.454", $P11)
    goto rx461_fail1395
  alt463_01403:
    nqp_rxmark rx461_bstack, rxcap464_fail1405, rx461_pos, 0
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1395
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:"!", rx461_fail1395
    add rx461_pos, 1
    nqp_rxpeek $I19, rx461_bstack, rxcap464_fail1405
    inc $I19
    set $I11, rx461_bstack[$I19]
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx461_pos)
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "not")
    goto rxcap464_done1404
  rxcap464_fail1405:
    goto rx461_fail1395
  rxcap464_done1404:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule465_pass1406, -1, 0
  rxsubrule465_pass1406:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_11407:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule466_pass1408, -1, 0
  rxsubrule466_pass1408:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    nqp_rxmark rx461_bstack, rxquantr467_done1410, rx461_pos, 0
  rxquantr467_loop1409:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    goto rxsubrule468_pass1411
  rxsubrule468_back1412:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
  rxsubrule468_pass1411:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule468_back1412
    push rx461_bstack, $I11
    push rx461_bstack, 0
    push rx461_bstack, rx461_pos
    elements $I11, rx461_cstack
    push rx461_bstack, $I11
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    nqp_rxpeek $I19, rx461_bstack, rxquantr467_done1410
    inc $I19
    inc $I19
    set rx461_rep, rx461_bstack[$I19]
    nqp_rxcommit rx461_bstack, rxquantr467_done1410
    inc rx461_rep
  rxquantr467_done1410:
    goto alt463_end1402
  alt463_21413:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule469_pass1414, -1, 0
  rxsubrule469_pass1414:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_31415:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."variable"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule470_pass1416, -1, 0
  rxsubrule470_pass1416:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_end1402:
    nqp_rxcommit rx461_bstack, alt463_end1402
    rx461_cur."!cursor_pass"(rx461_pos, "colonpair", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1394:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1395:
    unless rx461_bstack, rx461_done1393
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1398
    unless rx461_cstack, rx461_cstack_done1398
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1398:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1393
    lt rx461_pos, 0, rx461_fail1395
    eq $I19, 0, rx461_fail1395
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1396
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1397
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1397:
    assign rx461_cstack, $I18
  rx461_jump1396:
    jump $I19
  rx461_done1393:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_95_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 924
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx471_tgt
    .local int rx471_pos
    .local int rx471_off
    .local int rx471_eos
    .local int rx471_rep
    .local pmc rx471_cur
    .local pmc rx471_curclass
    .local pmc rx471_bstack
    .local pmc rx471_cstack
    (rx471_cur, rx471_tgt, rx471_pos, rx471_curclass, rx471_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx471_cur
    length rx471_eos, rx471_tgt
    eq $I19, 1, rx471_restart1419
    gt rx471_pos, rx471_eos, rx471_fail1420
    repr_get_attr_int $I11, self, rx471_curclass, "$!from"
    ne $I11, -1, rxscan472_done1426
    goto rxscan472_scan1425
  rxscan472_loop1424:
    inc rx471_pos
    gt rx471_pos, rx471_eos, rx471_fail1420
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!from", rx471_pos
  rxscan472_scan1425:
    nqp_rxmark rx471_bstack, rxscan472_loop1424, rx471_pos, 0
  rxscan472_done1426:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt473_01428
    nqp_push_label $P11, alt473_11435
    nqp_push_label $P11, alt473_21438
    nqp_push_label $P11, alt473_31446
    nqp_rxmark rx471_bstack, alt473_end1427, -1, 0
    rx471_cur."!alt"(rx471_pos, "alt_nfa__20_1360232770.472", $P11)
    goto rx471_fail1420
  alt473_01428:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule474_pass1429, -1, 0
  rxsubrule474_pass1429:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    nqp_rxmark rx471_bstack, rxquantr475_done1431, rx471_pos, 0
  rxquantr475_loop1430:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    goto rxsubrule476_pass1432
  rxsubrule476_back1433:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
  rxsubrule476_pass1432:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule476_back1433
    push rx471_bstack, $I11
    push rx471_bstack, 0
    push rx471_bstack, rx471_pos
    elements $I11, rx471_cstack
    push rx471_bstack, $I11
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    nqp_rxpeek $I19, rx471_bstack, rxquantr475_done1431
    inc $I19
    inc $I19
    set rx471_rep, rx471_bstack[$I19]
    nqp_rxcommit rx471_bstack, rxquantr475_done1431
    inc rx471_rep
  rxquantr475_done1431:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."name"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule477_pass1434, -1, 0
  rxsubrule477_pass1434:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    goto alt473_end1427
  alt473_11435:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule478_pass1436, -1, 0
  rxsubrule478_pass1436:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    ge rx471_pos, rx471_eos, rx471_fail1420
    substr $S11, rx471_tgt, rx471_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx471_fail1420
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule479_pass1437, -1, 0
  rxsubrule479_pass1437:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    goto alt473_end1427
  alt473_21438:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule480_pass1439, -1, 0
  rxsubrule480_pass1439:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1420
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:"(", rx471_fail1420
    add rx471_pos, 1
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule481_pass1440, -1, 0
  rxsubrule481_pass1440:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
  alt482_01442:
    nqp_rxmark rx471_bstack, alt482_11443, rx471_pos, 0
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1420
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:")", rx471_fail1420
    add rx471_pos, 1
    goto alt482_end1441
  alt482_11443:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    goto rxsubrule483_pass1444
  rxsubrule483_back1445:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
  rxsubrule483_pass1444:
    rx471_cstack = rx471_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule483_back1445
    push rx471_bstack, $I11
    push rx471_bstack, 0
    push rx471_bstack, rx471_pos
    elements $I11, rx471_cstack
    push rx471_bstack, $I11
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
  alt482_end1441:
    goto alt473_end1427
  alt473_31446:
    nqp_rxmark rx471_bstack, rxcap484_fail1448, rx471_pos, 0
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1420
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:"$", rx471_fail1420
    add rx471_pos, 1
    nqp_rxpeek $I19, rx471_bstack, rxcap484_fail1448
    inc $I19
    set $I11, rx471_bstack[$I19]
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx471_pos)
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    goto rxcap484_done1447
  rxcap484_fail1448:
    goto rx471_fail1420
  rxcap484_done1447:
    nqp_rxmark rx471_bstack, rxcap485_fail1450, rx471_pos, 0
    ge rx471_pos, rx471_eos, rx471_fail1420
    substr $S11, rx471_tgt, rx471_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx471_fail1420
    inc rx471_pos
    nqp_rxpeek $I19, rx471_bstack, rxcap485_fail1450
    inc $I19
    set $I11, rx471_bstack[$I19]
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx471_pos)
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap485_done1449
  rxcap485_fail1450:
    goto rx471_fail1420
  rxcap485_done1449:
    goto alt473_end1427
  alt473_end1427:
    rx471_cur."!cursor_pass"(rx471_pos, "variable", 'backtrack'=>1)
    .return (rx471_cur)
  rx471_restart1419:
    repr_get_attr_obj rx471_cstack, rx471_cur, rx471_curclass, "$!cstack"
  rx471_fail1420:
    unless rx471_bstack, rx471_done1418
    pop $I19, rx471_bstack
    if_null rx471_cstack, rx471_cstack_done1423
    unless rx471_cstack, rx471_cstack_done1423
    dec $I19
    set $P11, rx471_cstack[$I19]
  rx471_cstack_done1423:
    pop rx471_rep, rx471_bstack
    pop rx471_pos, rx471_bstack
    pop $I19, rx471_bstack
    lt rx471_pos, -1, rx471_done1418
    lt rx471_pos, 0, rx471_fail1420
    eq $I19, 0, rx471_fail1420
    nqp_islist $I20, rx471_cstack
    unless $I20, rx471_jump1421
    elements $I18, rx471_bstack
    le $I18, 0, rx471_cut1422
    dec $I18
    set $I18, rx471_bstack[$I18]
  rx471_cut1422:
    assign rx471_cstack, $I18
  rx471_jump1421:
    jump $I19
  rx471_done1418:
    rx471_cur."!cursor_fail"()
    .return (rx471_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_96_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 931
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_97_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 932
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx486_tgt
    .local int rx486_pos
    .local int rx486_off
    .local int rx486_eos
    .local int rx486_rep
    .local pmc rx486_cur
    .local pmc rx486_curclass
    .local pmc rx486_bstack
    .local pmc rx486_cstack
    (rx486_cur, rx486_tgt, rx486_pos, rx486_curclass, rx486_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx486_cur
    length rx486_eos, rx486_tgt
    eq $I19, 1, rx486_restart1453
    gt rx486_pos, rx486_eos, rx486_fail1454
    repr_get_attr_int $I11, self, rx486_curclass, "$!from"
    ne $I11, -1, rxscan487_done1460
    goto rxscan487_scan1459
  rxscan487_loop1458:
    inc rx486_pos
    gt rx486_pos, rx486_eos, rx486_fail1454
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!from", rx486_pos
  rxscan487_scan1459:
    nqp_rxmark rx486_bstack, rxscan487_loop1458, rx486_pos, 0
  rxscan487_done1460:
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    store_lex unicode:"$\x{a2}", rx486_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1461
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1462
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback1462:
    unless_null $P5004, vivi_4881463
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4881463:
    set $P5003, $P5004
  fallback1461:
    set $P101, $P5003
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    store_lex unicode:"$\x{a2}", rx486_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx486_bstack, rxcap489_fail1465, rx486_pos, 0
    add $I11, rx486_pos, 6
    gt $I11, rx486_eos, rx486_fail1454
    substr $S10, rx486_tgt, rx486_pos, 6
    ne $S10, ucs4:"module", rx486_fail1454
    add rx486_pos, 6
    nqp_rxpeek $I19, rx486_bstack, rxcap489_fail1465
    inc $I19
    set $I11, rx486_bstack[$I19]
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx486_pos)
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "sym")
    goto rxcap489_done1464
  rxcap489_fail1465:
    goto rx486_fail1454
  rxcap489_done1464:
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx486_curclass, "$!pos"
    lt $I11, 0, rx486_fail1454
    nqp_rxmark rx486_bstack, rxsubrule490_pass1466, -1, 0
  rxsubrule490_pass1466:
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx486_pos, $P11, rx486_curclass, "$!pos"
    rx486_cur."!cursor_pass"(rx486_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx486_cur)
  rx486_restart1453:
    repr_get_attr_obj rx486_cstack, rx486_cur, rx486_curclass, "$!cstack"
  rx486_fail1454:
    unless rx486_bstack, rx486_done1452
    pop $I19, rx486_bstack
    if_null rx486_cstack, rx486_cstack_done1457
    unless rx486_cstack, rx486_cstack_done1457
    dec $I19
    set $P11, rx486_cstack[$I19]
  rx486_cstack_done1457:
    pop rx486_rep, rx486_bstack
    pop rx486_pos, rx486_bstack
    pop $I19, rx486_bstack
    lt rx486_pos, -1, rx486_done1452
    lt rx486_pos, 0, rx486_fail1454
    eq $I19, 0, rx486_fail1454
    nqp_islist $I20, rx486_cstack
    unless $I20, rx486_jump1455
    elements $I18, rx486_bstack
    le $I18, 0, rx486_cut1456
    dec $I18
    set $I18, rx486_bstack[$I18]
  rx486_cut1456:
    assign rx486_cstack, $I18
  rx486_jump1455:
    jump $I19
  rx486_done1452:
    rx486_cur."!cursor_fail"()
    .return (rx486_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_98_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 937
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx491_tgt
    .local int rx491_pos
    .local int rx491_off
    .local int rx491_eos
    .local int rx491_rep
    .local pmc rx491_cur
    .local pmc rx491_curclass
    .local pmc rx491_bstack
    .local pmc rx491_cstack
    (rx491_cur, rx491_tgt, rx491_pos, rx491_curclass, rx491_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx491_cur
    length rx491_eos, rx491_tgt
    eq $I19, 1, rx491_restart1469
    gt rx491_pos, rx491_eos, rx491_fail1470
    repr_get_attr_int $I11, self, rx491_curclass, "$!from"
    ne $I11, -1, rxscan492_done1476
    goto rxscan492_scan1475
  rxscan492_loop1474:
    inc rx491_pos
    gt rx491_pos, rx491_eos, rx491_fail1470
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!from", rx491_pos
  rxscan492_scan1475:
    nqp_rxmark rx491_bstack, rxscan492_loop1474, rx491_pos, 0
  rxscan492_done1476:
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    store_lex unicode:"$\x{a2}", rx491_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1477
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1478
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback1478:
    unless_null $P5004, vivi_4931479
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4931479:
    set $P5003, $P5004
  fallback1477:
    set $P101, $P5003
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    store_lex unicode:"$\x{a2}", rx491_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx491_bstack, rxcap494_fail1481, rx491_pos, 0
    add $I11, rx491_pos, 7
    gt $I11, rx491_eos, rx491_fail1470
    substr $S10, rx491_tgt, rx491_pos, 7
    ne $S10, ucs4:"knowhow", rx491_fail1470
    add rx491_pos, 7
    nqp_rxpeek $I19, rx491_bstack, rxcap494_fail1481
    inc $I19
    set $I11, rx491_bstack[$I19]
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx491_pos)
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "sym")
    goto rxcap494_done1480
  rxcap494_fail1481:
    goto rx491_fail1470
  rxcap494_done1480:
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1470
    nqp_rxmark rx491_bstack, rxsubrule495_pass1482, -1, 0
  rxsubrule495_pass1482:
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    rx491_cur."!cursor_pass"(rx491_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx491_cur)
  rx491_restart1469:
    repr_get_attr_obj rx491_cstack, rx491_cur, rx491_curclass, "$!cstack"
  rx491_fail1470:
    unless rx491_bstack, rx491_done1468
    pop $I19, rx491_bstack
    if_null rx491_cstack, rx491_cstack_done1473
    unless rx491_cstack, rx491_cstack_done1473
    dec $I19
    set $P11, rx491_cstack[$I19]
  rx491_cstack_done1473:
    pop rx491_rep, rx491_bstack
    pop rx491_pos, rx491_bstack
    pop $I19, rx491_bstack
    lt rx491_pos, -1, rx491_done1468
    lt rx491_pos, 0, rx491_fail1470
    eq $I19, 0, rx491_fail1470
    nqp_islist $I20, rx491_cstack
    unless $I20, rx491_jump1471
    elements $I18, rx491_bstack
    le $I18, 0, rx491_cut1472
    dec $I18
    set $I18, rx491_bstack[$I18]
  rx491_cut1472:
    assign rx491_cstack, $I18
  rx491_jump1471:
    jump $I19
  rx491_done1468:
    rx491_cur."!cursor_fail"()
    .return (rx491_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_99_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 942
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx496_tgt
    .local int rx496_pos
    .local int rx496_off
    .local int rx496_eos
    .local int rx496_rep
    .local pmc rx496_cur
    .local pmc rx496_curclass
    .local pmc rx496_bstack
    .local pmc rx496_cstack
    (rx496_cur, rx496_tgt, rx496_pos, rx496_curclass, rx496_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx496_cur
    length rx496_eos, rx496_tgt
    eq $I19, 1, rx496_restart1485
    gt rx496_pos, rx496_eos, rx496_fail1486
    repr_get_attr_int $I11, self, rx496_curclass, "$!from"
    ne $I11, -1, rxscan497_done1492
    goto rxscan497_scan1491
  rxscan497_loop1490:
    inc rx496_pos
    gt rx496_pos, rx496_eos, rx496_fail1486
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!from", rx496_pos
  rxscan497_scan1491:
    nqp_rxmark rx496_bstack, rxscan497_loop1490, rx496_pos, 0
  rxscan497_done1492:
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    store_lex unicode:"$\x{a2}", rx496_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1493
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1494
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback1494:
    unless_null $P5004, vivi_4981495
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4981495:
    set $P5003, $P5004
  fallback1493:
    set $P101, $P5003
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    store_lex unicode:"$\x{a2}", rx496_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx496_bstack, rxcap499_fail1497, rx496_pos, 0
    add $I11, rx496_pos, 5
    gt $I11, rx496_eos, rx496_fail1486
    substr $S10, rx496_tgt, rx496_pos, 5
    ne $S10, ucs4:"class", rx496_fail1486
    add rx496_pos, 5
    nqp_rxpeek $I19, rx496_bstack, rxcap499_fail1497
    inc $I19
    set $I11, rx496_bstack[$I19]
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    $P11 = rx496_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx496_pos)
    rx496_cstack = rx496_cur."!cursor_capture"($P11, "sym")
    goto rxcap499_done1496
  rxcap499_fail1497:
    goto rx496_fail1486
  rxcap499_done1496:
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!pos", rx496_pos
    $P11 = rx496_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx496_curclass, "$!pos"
    lt $I11, 0, rx496_fail1486
    nqp_rxmark rx496_bstack, rxsubrule500_pass1498, -1, 0
  rxsubrule500_pass1498:
    rx496_cstack = rx496_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx496_pos, $P11, rx496_curclass, "$!pos"
    rx496_cur."!cursor_pass"(rx496_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx496_cur)
  rx496_restart1485:
    repr_get_attr_obj rx496_cstack, rx496_cur, rx496_curclass, "$!cstack"
  rx496_fail1486:
    unless rx496_bstack, rx496_done1484
    pop $I19, rx496_bstack
    if_null rx496_cstack, rx496_cstack_done1489
    unless rx496_cstack, rx496_cstack_done1489
    dec $I19
    set $P11, rx496_cstack[$I19]
  rx496_cstack_done1489:
    pop rx496_rep, rx496_bstack
    pop rx496_pos, rx496_bstack
    pop $I19, rx496_bstack
    lt rx496_pos, -1, rx496_done1484
    lt rx496_pos, 0, rx496_fail1486
    eq $I19, 0, rx496_fail1486
    nqp_islist $I20, rx496_cstack
    unless $I20, rx496_jump1487
    elements $I18, rx496_bstack
    le $I18, 0, rx496_cut1488
    dec $I18
    set $I18, rx496_bstack[$I18]
  rx496_cut1488:
    assign rx496_cstack, $I18
  rx496_jump1487:
    jump $I19
  rx496_done1484:
    rx496_cur."!cursor_fail"()
    .return (rx496_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_100_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 947
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx501_tgt
    .local int rx501_pos
    .local int rx501_off
    .local int rx501_eos
    .local int rx501_rep
    .local pmc rx501_cur
    .local pmc rx501_curclass
    .local pmc rx501_bstack
    .local pmc rx501_cstack
    (rx501_cur, rx501_tgt, rx501_pos, rx501_curclass, rx501_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx501_cur
    length rx501_eos, rx501_tgt
    eq $I19, 1, rx501_restart1501
    gt rx501_pos, rx501_eos, rx501_fail1502
    repr_get_attr_int $I11, self, rx501_curclass, "$!from"
    ne $I11, -1, rxscan502_done1508
    goto rxscan502_scan1507
  rxscan502_loop1506:
    inc rx501_pos
    gt rx501_pos, rx501_eos, rx501_fail1502
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!from", rx501_pos
  rxscan502_scan1507:
    nqp_rxmark rx501_bstack, rxscan502_loop1506, rx501_pos, 0
  rxscan502_done1508:
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    store_lex unicode:"$\x{a2}", rx501_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1509
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1510
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback1510:
    unless_null $P5004, vivi_5031511
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5031511:
    set $P5003, $P5004
  fallback1509:
    set $P101, $P5003
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    store_lex unicode:"$\x{a2}", rx501_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx501_bstack, rxcap504_fail1513, rx501_pos, 0
    add $I11, rx501_pos, 7
    gt $I11, rx501_eos, rx501_fail1502
    substr $S10, rx501_tgt, rx501_pos, 7
    ne $S10, ucs4:"grammar", rx501_fail1502
    add rx501_pos, 7
    nqp_rxpeek $I19, rx501_bstack, rxcap504_fail1513
    inc $I19
    set $I11, rx501_bstack[$I19]
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx501_pos)
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "sym")
    goto rxcap504_done1512
  rxcap504_fail1513:
    goto rx501_fail1502
  rxcap504_done1512:
    repr_bind_attr_int rx501_cur, rx501_curclass, "$!pos", rx501_pos
    $P11 = rx501_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx501_curclass, "$!pos"
    lt $I11, 0, rx501_fail1502
    nqp_rxmark rx501_bstack, rxsubrule505_pass1514, -1, 0
  rxsubrule505_pass1514:
    rx501_cstack = rx501_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx501_pos, $P11, rx501_curclass, "$!pos"
    rx501_cur."!cursor_pass"(rx501_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx501_cur)
  rx501_restart1501:
    repr_get_attr_obj rx501_cstack, rx501_cur, rx501_curclass, "$!cstack"
  rx501_fail1502:
    unless rx501_bstack, rx501_done1500
    pop $I19, rx501_bstack
    if_null rx501_cstack, rx501_cstack_done1505
    unless rx501_cstack, rx501_cstack_done1505
    dec $I19
    set $P11, rx501_cstack[$I19]
  rx501_cstack_done1505:
    pop rx501_rep, rx501_bstack
    pop rx501_pos, rx501_bstack
    pop $I19, rx501_bstack
    lt rx501_pos, -1, rx501_done1500
    lt rx501_pos, 0, rx501_fail1502
    eq $I19, 0, rx501_fail1502
    nqp_islist $I20, rx501_cstack
    unless $I20, rx501_jump1503
    elements $I18, rx501_bstack
    le $I18, 0, rx501_cut1504
    dec $I18
    set $I18, rx501_bstack[$I18]
  rx501_cut1504:
    assign rx501_cstack, $I18
  rx501_jump1503:
    jump $I19
  rx501_done1500:
    rx501_cur."!cursor_fail"()
    .return (rx501_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_101_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 952
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx506_tgt
    .local int rx506_pos
    .local int rx506_off
    .local int rx506_eos
    .local int rx506_rep
    .local pmc rx506_cur
    .local pmc rx506_curclass
    .local pmc rx506_bstack
    .local pmc rx506_cstack
    (rx506_cur, rx506_tgt, rx506_pos, rx506_curclass, rx506_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx506_cur
    length rx506_eos, rx506_tgt
    eq $I19, 1, rx506_restart1517
    gt rx506_pos, rx506_eos, rx506_fail1518
    repr_get_attr_int $I11, self, rx506_curclass, "$!from"
    ne $I11, -1, rxscan507_done1524
    goto rxscan507_scan1523
  rxscan507_loop1522:
    inc rx506_pos
    gt rx506_pos, rx506_eos, rx506_fail1518
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!from", rx506_pos
  rxscan507_scan1523:
    nqp_rxmark rx506_bstack, rxscan507_loop1522, rx506_pos, 0
  rxscan507_done1524:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    store_lex unicode:"$\x{a2}", rx506_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1525
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1526
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback1526:
    unless_null $P5004, vivi_5081527
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5081527:
    set $P5003, $P5004
  fallback1525:
    set $P101, $P5003
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    store_lex unicode:"$\x{a2}", rx506_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx506_bstack, rxcap509_fail1529, rx506_pos, 0
    add $I11, rx506_pos, 4
    gt $I11, rx506_eos, rx506_fail1518
    substr $S10, rx506_tgt, rx506_pos, 4
    ne $S10, ucs4:"role", rx506_fail1518
    add rx506_pos, 4
    nqp_rxpeek $I19, rx506_bstack, rxcap509_fail1529
    inc $I19
    set $I11, rx506_bstack[$I19]
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx506_pos)
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "sym")
    goto rxcap509_done1528
  rxcap509_fail1529:
    goto rx506_fail1518
  rxcap509_done1528:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1518
    nqp_rxmark rx506_bstack, rxsubrule510_pass1530, -1, 0
  rxsubrule510_pass1530:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    rx506_cur."!cursor_pass"(rx506_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx506_cur)
  rx506_restart1517:
    repr_get_attr_obj rx506_cstack, rx506_cur, rx506_curclass, "$!cstack"
  rx506_fail1518:
    unless rx506_bstack, rx506_done1516
    pop $I19, rx506_bstack
    if_null rx506_cstack, rx506_cstack_done1521
    unless rx506_cstack, rx506_cstack_done1521
    dec $I19
    set $P11, rx506_cstack[$I19]
  rx506_cstack_done1521:
    pop rx506_rep, rx506_bstack
    pop rx506_pos, rx506_bstack
    pop $I19, rx506_bstack
    lt rx506_pos, -1, rx506_done1516
    lt rx506_pos, 0, rx506_fail1518
    eq $I19, 0, rx506_fail1518
    nqp_islist $I20, rx506_cstack
    unless $I20, rx506_jump1519
    elements $I18, rx506_bstack
    le $I18, 0, rx506_cut1520
    dec $I18
    set $I18, rx506_bstack[$I18]
  rx506_cut1520:
    assign rx506_cstack, $I18
  rx506_jump1519:
    jump $I19
  rx506_done1516:
    rx506_cur."!cursor_fail"()
    .return (rx506_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_102_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 957
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx511_tgt
    .local int rx511_pos
    .local int rx511_off
    .local int rx511_eos
    .local int rx511_rep
    .local pmc rx511_cur
    .local pmc rx511_curclass
    .local pmc rx511_bstack
    .local pmc rx511_cstack
    (rx511_cur, rx511_tgt, rx511_pos, rx511_curclass, rx511_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx511_cur
    length rx511_eos, rx511_tgt
    eq $I19, 1, rx511_restart1533
    gt rx511_pos, rx511_eos, rx511_fail1534
    repr_get_attr_int $I11, self, rx511_curclass, "$!from"
    ne $I11, -1, rxscan512_done1540
    goto rxscan512_scan1539
  rxscan512_loop1538:
    inc rx511_pos
    gt rx511_pos, rx511_eos, rx511_fail1534
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!from", rx511_pos
  rxscan512_scan1539:
    nqp_rxmark rx511_bstack, rxscan512_loop1538, rx511_pos, 0
  rxscan512_done1540:
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    store_lex unicode:"$\x{a2}", rx511_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1541
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1542
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback1542:
    unless_null $P5004, vivi_5131543
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5131543:
    set $P5003, $P5004
  fallback1541:
    set $P101, $P5003
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    store_lex unicode:"$\x{a2}", rx511_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx511_bstack, rxcap514_fail1545, rx511_pos, 0
    add $I11, rx511_pos, 6
    gt $I11, rx511_eos, rx511_fail1534
    substr $S10, rx511_tgt, rx511_pos, 6
    ne $S10, ucs4:"native", rx511_fail1534
    add rx511_pos, 6
    nqp_rxpeek $I19, rx511_bstack, rxcap514_fail1545
    inc $I19
    set $I11, rx511_bstack[$I19]
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    $P11 = rx511_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx511_pos)
    rx511_cstack = rx511_cur."!cursor_capture"($P11, "sym")
    goto rxcap514_done1544
  rxcap514_fail1545:
    goto rx511_fail1534
  rxcap514_done1544:
    repr_bind_attr_int rx511_cur, rx511_curclass, "$!pos", rx511_pos
    $P11 = rx511_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx511_curclass, "$!pos"
    lt $I11, 0, rx511_fail1534
    nqp_rxmark rx511_bstack, rxsubrule515_pass1546, -1, 0
  rxsubrule515_pass1546:
    rx511_cstack = rx511_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx511_pos, $P11, rx511_curclass, "$!pos"
    rx511_cur."!cursor_pass"(rx511_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx511_cur)
  rx511_restart1533:
    repr_get_attr_obj rx511_cstack, rx511_cur, rx511_curclass, "$!cstack"
  rx511_fail1534:
    unless rx511_bstack, rx511_done1532
    pop $I19, rx511_bstack
    if_null rx511_cstack, rx511_cstack_done1537
    unless rx511_cstack, rx511_cstack_done1537
    dec $I19
    set $P11, rx511_cstack[$I19]
  rx511_cstack_done1537:
    pop rx511_rep, rx511_bstack
    pop rx511_pos, rx511_bstack
    pop $I19, rx511_bstack
    lt rx511_pos, -1, rx511_done1532
    lt rx511_pos, 0, rx511_fail1534
    eq $I19, 0, rx511_fail1534
    nqp_islist $I20, rx511_cstack
    unless $I20, rx511_jump1535
    elements $I18, rx511_bstack
    le $I18, 0, rx511_cut1536
    dec $I18
    set $I18, rx511_bstack[$I18]
  rx511_cut1536:
    assign rx511_cstack, $I18
  rx511_jump1535:
    jump $I19
  rx511_done1532:
    rx511_cur."!cursor_fail"()
    .return (rx511_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_103_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 962
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx516_tgt
    .local int rx516_pos
    .local int rx516_off
    .local int rx516_eos
    .local int rx516_rep
    .local pmc rx516_cur
    .local pmc rx516_curclass
    .local pmc rx516_bstack
    .local pmc rx516_cstack
    (rx516_cur, rx516_tgt, rx516_pos, rx516_curclass, rx516_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx516_cur
    length rx516_eos, rx516_tgt
    eq $I19, 1, rx516_restart1549
    gt rx516_pos, rx516_eos, rx516_fail1550
    repr_get_attr_int $I11, self, rx516_curclass, "$!from"
    ne $I11, -1, rxscan517_done1556
    goto rxscan517_scan1555
  rxscan517_loop1554:
    inc rx516_pos
    gt rx516_pos, rx516_eos, rx516_fail1550
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!from", rx516_pos
  rxscan517_scan1555:
    nqp_rxmark rx516_bstack, rxscan517_loop1554, rx516_pos, 0
  rxscan517_done1556:
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    store_lex unicode:"$\x{a2}", rx516_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1557
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1558
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback1558:
    unless_null $P5004, vivi_5181559
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5181559:
    set $P5003, $P5004
  fallback1557:
    set $P101, $P5003
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    store_lex unicode:"$\x{a2}", rx516_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx516_bstack, rxcap519_fail1561, rx516_pos, 0
    add $I11, rx516_pos, 4
    gt $I11, rx516_eos, rx516_fail1550
    substr $S10, rx516_tgt, rx516_pos, 4
    ne $S10, ucs4:"stub", rx516_fail1550
    add rx516_pos, 4
    nqp_rxpeek $I19, rx516_bstack, rxcap519_fail1561
    inc $I19
    set $I11, rx516_bstack[$I19]
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx516_pos)
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "sym")
    goto rxcap519_done1560
  rxcap519_fail1561:
    goto rx516_fail1550
  rxcap519_done1560:
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."name"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    nqp_rxmark rx516_bstack, rxsubrule521_pass1563, -1, 0
  rxsubrule521_pass1563:
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    add $I11, rx516_pos, 9
    gt $I11, rx516_eos, rx516_fail1550
    substr $S10, rx516_tgt, rx516_pos, 9
    ne $S10, ucs4:"metaclass", rx516_fail1550
    add rx516_pos, 9
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."name"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    nqp_rxmark rx516_bstack, rxsubrule524_pass1566, -1, 0
  rxsubrule524_pass1566:
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    add $I11, rx516_pos, 1
    gt $I11, rx516_eos, rx516_fail1550
    substr $S10, rx516_tgt, rx516_pos, 1
    ne $S10, ucs4:"{", rx516_fail1550
    add rx516_pos, 1
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    add $I11, rx516_pos, 3
    gt $I11, rx516_eos, rx516_fail1550
    substr $S10, rx516_tgt, rx516_pos, 3
    ne $S10, ucs4:"...", rx516_fail1550
    add rx516_pos, 3
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    add $I11, rx516_pos, 1
    gt $I11, rx516_eos, rx516_fail1550
    substr $S10, rx516_tgt, rx516_pos, 1
    ne $S10, ucs4:"}", rx516_fail1550
    add rx516_pos, 1
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."ws"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail1550
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    rx516_cur."!cursor_pass"(rx516_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx516_cur)
  rx516_restart1549:
    repr_get_attr_obj rx516_cstack, rx516_cur, rx516_curclass, "$!cstack"
  rx516_fail1550:
    unless rx516_bstack, rx516_done1548
    pop $I19, rx516_bstack
    if_null rx516_cstack, rx516_cstack_done1553
    unless rx516_cstack, rx516_cstack_done1553
    dec $I19
    set $P11, rx516_cstack[$I19]
  rx516_cstack_done1553:
    pop rx516_rep, rx516_bstack
    pop rx516_pos, rx516_bstack
    pop $I19, rx516_bstack
    lt rx516_pos, -1, rx516_done1548
    lt rx516_pos, 0, rx516_fail1550
    eq $I19, 0, rx516_fail1550
    nqp_islist $I20, rx516_cstack
    unless $I20, rx516_jump1551
    elements $I18, rx516_bstack
    le $I18, 0, rx516_cut1552
    dec $I18
    set $I18, rx516_bstack[$I18]
  rx516_cut1552:
    assign rx516_cstack, $I18
  rx516_jump1551:
    jump $I19
  rx516_done1548:
    rx516_cur."!cursor_fail"()
    .return (rx516_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_104_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 970
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_393_1360232768.755' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_394_1360232768.755' 
    capture_lex $P5021 
    .lex "$*PACKAGE", $P101 
    .lex "$OUTER", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx529_tgt
    .local int rx529_pos
    .local int rx529_off
    .local int rx529_eos
    .local int rx529_rep
    .local pmc rx529_cur
    .local pmc rx529_curclass
    .local pmc rx529_bstack
    .local pmc rx529_cstack
    (rx529_cur, rx529_tgt, rx529_pos, rx529_curclass, rx529_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx529_cur
    length rx529_eos, rx529_tgt
    eq $I19, 1, rx529_restart1573
    gt rx529_pos, rx529_eos, rx529_fail1574
    repr_get_attr_int $I11, self, rx529_curclass, "$!from"
    ne $I11, -1, rxscan530_done1580
    goto rxscan530_scan1579
  rxscan530_loop1578:
    inc rx529_pos
    gt rx529_pos, rx529_eos, rx529_fail1574
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!from", rx529_pos
  rxscan530_scan1579:
    nqp_rxmark rx529_bstack, rxscan530_loop1578, rx529_pos, 0
  rxscan530_done1580:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
    unless_null $P101, fallback1582
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PACKAGE"]
    unless_null $P5003, fallback1583
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback1583:
    unless_null $P5003, vivi_5321584
    die "Contextual $*PACKAGE not found"
    box $P5007, "Contextual $*PACKAGE not found"
    set $P5003, $P5007
  vivi_5321584:
    set $P101, $P5003
  fallback1582:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
.annotate 'line', 972
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1586
    nqp_get_sc_object $P5011, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback1587
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback1587:
    unless_null $P5009, vivi_5341588
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_5341588:
    set $P5008, $P5009
  fallback1586:
    $P5014 = $P5008."cur_lexpad"()
    set $P102, $P5014
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."name"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    nqp_rxmark rx529_bstack, rxsubrule536_pass1590, -1, 0
  rxsubrule536_pass1590:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr540_done1595, rx529_pos, 0
  rxquantr540_loop1594:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_393_1360232768.755' 
    capture_lex $P5016
    $P5017 = $P5016()
    unless $P5017, rx529_fail1574
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:"[", rx529_fail1574
    add rx529_pos, 1
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."role_params"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    nqp_rxmark rx529_bstack, rxsubrule545_pass1602, -1, 0
  rxsubrule545_pass1602:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "role_params")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt546_01604:
    nqp_rxmark rx529_bstack, alt546_11605, rx529_pos, 0
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:"]", rx529_fail1574
    add rx529_pos, 1
    goto alt546_end1603
  alt546_11605:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."FAILGOAL"("']'")
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    goto rxsubrule547_pass1606
  rxsubrule547_back1607:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
  rxsubrule547_pass1606:
    rx529_cstack = rx529_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule547_back1607
    push rx529_bstack, $I11
    push rx529_bstack, 0
    push rx529_bstack, rx529_pos
    elements $I11, rx529_cstack
    push rx529_bstack, $I11
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt546_end1603:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr540_done1595
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr540_done1595
    inc rx529_rep
  rxquantr540_done1595:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr550_done1611, rx529_pos, 0
  rxquantr550_loop1610:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 2
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 2
    ne $S10, ucs4:"is", rx529_fail1574
    add rx529_pos, 2
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 5
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 5
    ne $S10, ucs4:"repr(", rx529_fail1574
    add rx529_pos, 5
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    nqp_rxmark rx529_bstack, rxsubrule554_pass1615, -1, 0
  rxsubrule554_pass1615:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:")", rx529_fail1574
    add rx529_pos, 1
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr550_done1611
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr550_done1611
    inc rx529_rep
  rxquantr550_done1611:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
    $P5018 = $P103."MATCH"()
    set $P104, $P5018
    .const 'Sub' $P5019 = 'cuid_394_1360232768.755' 
    capture_lex $P5019
    $P5020 = $P5019()
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr579_done1705, rx529_pos, 0
  rxquantr579_loop1704:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxcap581_fail1708, rx529_pos, 0
    add $I11, rx529_pos, 9
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 9
    ne $S10, ucs4:"is export", rx529_fail1574
    add rx529_pos, 9
    nqp_rxpeek $I19, rx529_bstack, rxcap581_fail1708
    inc $I19
    set $I11, rx529_bstack[$I19]
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx529_pos)
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "export")
    goto rxcap581_done1707
  rxcap581_fail1708:
    goto rx529_fail1574
  rxcap581_done1707:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr579_done1705
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr579_done1705
    inc rx529_rep
  rxquantr579_done1705:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr584_done1712, rx529_pos, 0
  rxquantr584_loop1711:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 2
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 2
    ne $S10, ucs4:"is", rx529_fail1574
    add rx529_pos, 2
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."name"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    nqp_rxmark rx529_bstack, rxsubrule587_pass1715, -1, 0
  rxsubrule587_pass1715:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr584_done1712
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr584_done1712
    inc rx529_rep
  rxquantr584_done1712:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxquantr590_done1719, rx529_pos, 0
  rxquantr590_loop1718:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 4
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 4
    ne $S10, ucs4:"does", rx529_fail1574
    add rx529_pos, 4
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."name"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    nqp_rxmark rx529_bstack, rxsubrule593_pass1722, -1, 0
  rxsubrule593_pass1722:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr590_done1719
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr590_done1719
    inc rx529_rep
    nqp_rxmark rx529_bstack, rxquantr590_done1719, rx529_pos, rx529_rep
    goto rxquantr590_loop1718
  rxquantr590_done1719:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt596_01726:
    nqp_rxmark rx529_bstack, alt596_11741, rx529_pos, 0
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail1574
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:";", rx529_fail1574
    add rx529_pos, 1
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    nqp_rxmark rx529_bstack, rxsubrule599_pass1729, -1, 0
  rxsubrule599_pass1729:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt601_01732:
    nqp_rxmark rx529_bstack, alt601_11736, rx529_pos, 0
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    lt rx529_pos, rx529_eos, rx529_fail1574
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    goto alt601_end1731
  alt601_11736:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt601_end1731:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    goto alt596_end1725
  alt596_11741:
    nqp_rxmark rx529_bstack, alt596_21746, rx529_pos, 0
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    ge rx529_pos, rx529_eos, rx529_fail1574
    substr $S11, rx529_tgt, rx529_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx529_fail1574
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    nqp_rxmark rx529_bstack, rxsubrule611_pass1744, -1, 0
  rxsubrule611_pass1744:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    goto alt596_end1725
  alt596_21746:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt596_end1725:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail1574
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    rx529_cur."!cursor_pass"(rx529_pos, "package_def", 'backtrack'=>1)
    .return (rx529_cur)
  rx529_restart1573:
    repr_get_attr_obj rx529_cstack, rx529_cur, rx529_curclass, "$!cstack"
  rx529_fail1574:
    unless rx529_bstack, rx529_done1572
    pop $I19, rx529_bstack
    if_null rx529_cstack, rx529_cstack_done1577
    unless rx529_cstack, rx529_cstack_done1577
    dec $I19
    set $P11, rx529_cstack[$I19]
  rx529_cstack_done1577:
    pop rx529_rep, rx529_bstack
    pop rx529_pos, rx529_bstack
    pop $I19, rx529_bstack
    lt rx529_pos, -1, rx529_done1572
    lt rx529_pos, 0, rx529_fail1574
    eq $I19, 0, rx529_fail1574
    nqp_islist $I20, rx529_cstack
    unless $I20, rx529_jump1575
    elements $I18, rx529_bstack
    le $I18, 0, rx529_cut1576
    dec $I18
    set $I18, rx529_bstack[$I18]
  rx529_cut1576:
    assign rx529_cstack, $I18
  rx529_jump1575:
    jump $I19
  rx529_done1572:
    rx529_cur."!cursor_fail"()
    .return (rx529_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1360232768.755") :anon :lex :outer("cuid_104_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 976

    find_dynamic_lex $P5001, "$*PKGDECL"
    unless_null $P5001, fallback1597
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PKGDECL"]
    unless_null $P5002, fallback1598
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback1598:
    unless_null $P5002, vivi_5421599
    die "Contextual $*PKGDECL not found"
    box $P5006, "Contextual $*PKGDECL not found"
    set $P5002, $P5006
  vivi_5421599:
    set $P5001, $P5002
  fallback1597:
    set $S5001, $P5001
    iseq $I5001, $S5001, "role"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1360232768.755") :anon :lex :outer("cuid_104_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 979
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1619
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5004
  fallback1619:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1620
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback1620:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1623
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5009
  fallback1623:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1624
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5010
  fallback1624:
    unless $P5007 goto if558_end1622 
.annotate 'line', 984
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1625
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5017
  fallback1625:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1626
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5018
  fallback1626:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1627
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5019
  fallback1627:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1628
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5020
  fallback1628:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1629
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5021
  fallback1629:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1630
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5022
  fallback1630:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
  if558_end1622:
.annotate 'line', 987
    find_dynamic_lex $P5024, "$*W"
    unless_null $P5024, fallback1631
    nqp_get_sc_object $P5027, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$W"]
    unless_null $P5025, fallback1632
    nqp_get_sc_object $P5028, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5028
  fallback1632:
    unless_null $P5025, vivi_5591633
    die "Contextual $*W not found"
    box $P5029, "Contextual $*W not found"
    set $P5025, $P5029
  vivi_5591633:
    set $P5024, $P5025
  fallback1631:
    find_dynamic_lex $P5031, "%*HOW"
    unless_null $P5031, fallback1634
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%HOW"]
    unless_null $P5032, fallback1635
    nqp_get_sc_object $P5036, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%HOW"], $P5037
    set $P5032, $P5037
  fallback1635:
    unless_null $P5032, vivi_5601636
    die "Contextual %*HOW not found"
    box $P5038, "Contextual %*HOW not found"
    set $P5032, $P5038
  vivi_5601636:
    set $P5031, $P5032
  fallback1634:
    find_dynamic_lex $P5039, "$*PKGDECL"
    unless_null $P5039, fallback1637
    nqp_get_sc_object $P5042, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$PKGDECL"]
    unless_null $P5040, fallback1638
    nqp_get_sc_object $P5043, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5043
  fallback1638:
    unless_null $P5040, vivi_5611639
    die "Contextual $*PKGDECL not found"
    box $P5044, "Contextual $*PKGDECL not found"
    set $P5040, $P5044
  vivi_5611639:
    set $P5039, $P5040
  fallback1637:
    set $S5003, $P5039
    set $P5030, $P5031[$S5003]
    unless_null $P5030, fallback1640
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5030, $P5045
  fallback1640:
    $P5046 = $P5024."pkg_create_mo"($P5030, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5046
    find_dynamic_lex $P5047, "$*SCOPE"
    unless_null $P5047, fallback1645
    nqp_get_sc_object $P5050, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$SCOPE"]
    unless_null $P5048, fallback1646
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5051
  fallback1646:
    unless_null $P5048, vivi_5641647
    die "Contextual $*SCOPE not found"
    box $P5052, "Contextual $*SCOPE not found"
    set $P5048, $P5052
  vivi_5641647:
    set $P5047, $P5048
  fallback1645:
    set $S5004, $P5047
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless563_end1644 
    find_dynamic_lex $P5053, "$*SCOPE"
    unless_null $P5053, fallback1648
    nqp_get_sc_object $P5056, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$SCOPE"]
    unless_null $P5054, fallback1649
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5054, $P5057
  fallback1649:
    unless_null $P5054, vivi_5651650
    die "Contextual $*SCOPE not found"
    box $P5058, "Contextual $*SCOPE not found"
    set $P5054, $P5058
  vivi_5651650:
    set $P5053, $P5054
  fallback1648:
    set $S5005, $P5053
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless563_end1644:
    unless $I5003 goto if562_else1641 
.annotate 'line', 990
.annotate 'line', 991
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback1651
    nqp_get_sc_object $P5062, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback1652
    nqp_get_sc_object $P5063, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5060, $P5063
  fallback1652:
    unless_null $P5060, vivi_5661653
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_5661653:
    set $P5059, $P5060
  fallback1651:
    find_dynamic_lex $P5065, "$*OUTERPACKAGE"
    unless_null $P5065, fallback1654
    nqp_get_sc_object $P5068, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$OUTERPACKAGE"]
    unless_null $P5066, fallback1655
    nqp_get_sc_object $P5069, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5066, $P5069
  fallback1655:
    unless_null $P5066, vivi_5671656
    die "Contextual $*OUTERPACKAGE not found"
    box $P5070, "Contextual $*OUTERPACKAGE not found"
    set $P5066, $P5070
  vivi_5671656:
    set $P5065, $P5066
  fallback1654:
    find_lex $P5073, "$/"
    unless_null $P5073, fallback1657
    nqp_get_sc_object $P5074, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5073, $P5074
  fallback1657:
    set $P5072, $P5073["name"]
    unless_null $P5072, fallback1658
    nqp_get_sc_object $P5075, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5072, $P5075
  fallback1658:
    set $P5071, $P5072["identifier"]
    unless_null $P5071, fallback1659
    nqp_get_sc_object $P5076, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5071, $P5076
  fallback1659:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback1660
    nqp_get_sc_object $P5080, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback1661
    nqp_get_sc_object $P5081, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5078, $P5081
  fallback1661:
    unless_null $P5078, vivi_5681662
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_5681662:
    set $P5077, $P5078
  fallback1660:
    $P5059."install_package_symbol"($P5065, $P5071, $P5077)
    find_lex $P5085, "$/"
    unless_null $P5085, fallback1665
    nqp_get_sc_object $P5086, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5085, $P5086
  fallback1665:
    set $P5084, $P5085["name"]
    unless_null $P5084, fallback1666
    nqp_get_sc_object $P5087, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5084, $P5087
  fallback1666:
    set $P5083, $P5084["identifier"]
    unless_null $P5083, fallback1667
    nqp_get_sc_object $P5088, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5083, $P5088
  fallback1667:
    set $N5001, $P5083
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5112, $I5004
    set $P5111, $P5112
    unless $I5004 goto if569_end1664 
.annotate 'line', 992
.annotate 'line', 993
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback1668
    nqp_get_sc_object $P5092, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback1669
    nqp_get_sc_object $P5093, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5090, $P5093
  fallback1669:
    unless_null $P5090, vivi_5701670
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_5701670:
    set $P5089, $P5090
  fallback1668:
    find_lex $P5095, "$OUTER"
    find_lex $P5099, "$/"
    unless_null $P5099, fallback1671
    nqp_get_sc_object $P5100, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5099, $P5100
  fallback1671:
    set $P5098, $P5099["name"]
    unless_null $P5098, fallback1672
    nqp_get_sc_object $P5101, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5098, $P5101
  fallback1672:
    set $P5097, $P5098["identifier"]
    unless_null $P5097, fallback1673
    nqp_get_sc_object $P5102, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5097, $P5102
  fallback1673:
    set $P5096, $P5097[0]
    unless_null $P5096, fallback1674
    nqp_get_sc_object $P5103, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5096, $P5103
  fallback1674:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback1675
    nqp_get_sc_object $P5107, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback1676
    nqp_get_sc_object $P5108, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5105, $P5108
  fallback1676:
    unless_null $P5105, vivi_5711677
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_5711677:
    set $P5104, $P5105
  fallback1675:
    $P5110 = $P5089."install_lexical_symbol"($P5095, $P5096, $P5104)
    set $P5111, $P5110
  if569_end1664:
    set $P5163, $P5111
    goto if562_end1642
  if562_else1641:
    find_dynamic_lex $P5113, "$*SCOPE"
    unless_null $P5113, fallback1680
    nqp_get_sc_object $P5116, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$SCOPE"]
    unless_null $P5114, fallback1681
    nqp_get_sc_object $P5117, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5114, $P5117
  fallback1681:
    unless_null $P5114, vivi_5731682
    die "Contextual $*SCOPE not found"
    box $P5118, "Contextual $*SCOPE not found"
    set $P5114, $P5118
  vivi_5731682:
    set $P5113, $P5114
  fallback1680:
    set $S5006, $P5113
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if572_else1678 
.annotate 'line', 996
    find_lex $P5121, "$/"
    unless_null $P5121, fallback1685
    nqp_get_sc_object $P5122, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5121, $P5122
  fallback1685:
    set $P5120, $P5121["name"]
    unless_null $P5120, fallback1686
    nqp_get_sc_object $P5123, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5120, $P5123
  fallback1686:
    set $P5119, $P5120["identifier"]
    unless_null $P5119, fallback1687
    nqp_get_sc_object $P5124, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5119, $P5124
  fallback1687:
    set $N5003, $P5119
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if574_end1684 
.annotate 'line', 997
.annotate 'line', 998
    find_lex $P5126, "$/"
    unless_null $P5126, fallback1688
    nqp_get_sc_object $P5127, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5126, $P5127
  fallback1688:
    set $P5125, $P5126["name"]
    unless_null $P5125, fallback1689
    nqp_get_sc_object $P5128, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5125, $P5128
  fallback1689:
    $P5129 = $P5125."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
  if574_end1684:
.annotate 'line', 1000
    find_dynamic_lex $P5131, "$*W"
    unless_null $P5131, fallback1690
    nqp_get_sc_object $P5134, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5133, $P5134
    set $P5132, $P5133["$W"]
    unless_null $P5132, fallback1691
    nqp_get_sc_object $P5135, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5132, $P5135
  fallback1691:
    unless_null $P5132, vivi_5751692
    die "Contextual $*W not found"
    box $P5136, "Contextual $*W not found"
    set $P5132, $P5136
  vivi_5751692:
    set $P5131, $P5132
  fallback1690:
    find_lex $P5137, "$OUTER"
    find_lex $P5141, "$/"
    unless_null $P5141, fallback1693
    nqp_get_sc_object $P5142, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5141, $P5142
  fallback1693:
    set $P5140, $P5141["name"]
    unless_null $P5140, fallback1694
    nqp_get_sc_object $P5143, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5140, $P5143
  fallback1694:
    set $P5139, $P5140["identifier"]
    unless_null $P5139, fallback1695
    nqp_get_sc_object $P5144, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5139, $P5144
  fallback1695:
    set $P5138, $P5139[0]
    unless_null $P5138, fallback1696
    nqp_get_sc_object $P5145, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5138, $P5145
  fallback1696:
    find_dynamic_lex $P5146, "$*PACKAGE"
    unless_null $P5146, fallback1697
    nqp_get_sc_object $P5149, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$PACKAGE"]
    unless_null $P5147, fallback1698
    nqp_get_sc_object $P5150, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5147, $P5150
  fallback1698:
    unless_null $P5147, vivi_5761699
    die "Contextual $*PACKAGE not found"
    box $P5151, "Contextual $*PACKAGE not found"
    set $P5147, $P5151
  vivi_5761699:
    set $P5146, $P5147
  fallback1697:
    $P5152 = $P5131."install_lexical_symbol"($P5137, $P5138, $P5146)
    set $P5162, $P5152
    goto if572_end1679
  if572_else1678:
.annotate 'line', 1002
.annotate 'line', 1003
    find_lex $P5153, "$/"
    $P5154 = $P5153."CURSOR"()
    find_dynamic_lex $P5155, "$*SCOPE"
    unless_null $P5155, fallback1700
    nqp_get_sc_object $P5158, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5157, $P5158
    set $P5156, $P5157["$SCOPE"]
    unless_null $P5156, fallback1701
    nqp_get_sc_object $P5159, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5156, $P5159
  fallback1701:
    unless_null $P5156, vivi_5771702
    die "Contextual $*SCOPE not found"
    box $P5160, "Contextual $*SCOPE not found"
    set $P5156, $P5160
  vivi_5771702:
    set $P5155, $P5156
  fallback1700:
    set $S5008, $P5155
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5161 = $P5154."panic"($S5007)
    set $P5162, $P5161
  if572_end1679:
    set $P5163, $P5162
  if562_end1642:
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_105_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1017
    .param pmc _lex_param_0 
    .lex "$*SCOPE", $P101 
    .lex "$*IN_DECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx617_tgt
    .local int rx617_pos
    .local int rx617_off
    .local int rx617_eos
    .local int rx617_rep
    .local pmc rx617_cur
    .local pmc rx617_curclass
    .local pmc rx617_bstack
    .local pmc rx617_cstack
    (rx617_cur, rx617_tgt, rx617_pos, rx617_curclass, rx617_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx617_cur
    length rx617_eos, rx617_tgt
    eq $I19, 1, rx617_restart1753
    gt rx617_pos, rx617_eos, rx617_fail1754
    repr_get_attr_int $I11, self, rx617_curclass, "$!from"
    ne $I11, -1, rxscan618_done1760
    goto rxscan618_scan1759
  rxscan618_loop1758:
    inc rx617_pos
    gt rx617_pos, rx617_eos, rx617_fail1754
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!from", rx617_pos
  rxscan618_scan1759:
    nqp_rxmark rx617_bstack, rxscan618_loop1758, rx617_pos, 0
  rxscan618_done1760:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    store_lex unicode:"$\x{a2}", rx617_cur
    box $P5003, "my"
    set $P101, $P5003
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    store_lex unicode:"$\x{a2}", rx617_cur
    box $P5004, "variable"
    set $P102, $P5004
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    nqp_rxmark rx617_bstack, rxquantr622_done1765, -1, 0
  rxquantr622_loop1764:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."variable"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    nqp_rxmark rx617_bstack, rxsubrule624_pass1767, -1, 0
  rxsubrule624_pass1767:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    nqp_rxpeek $I19, rx617_bstack, rxquantr622_done1765
    inc $I19
    inc $I19
    set rx617_rep, rx617_bstack[$I19]
    nqp_rxcommit rx617_bstack, rxquantr622_done1765
    inc rx617_rep
    nqp_rxmark rx617_bstack, rxquantr622_done1765, rx617_pos, rx617_rep
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    add $I11, rx617_pos, 1
    gt $I11, rx617_eos, rx617_fail1754
    substr $S10, rx617_tgt, rx617_pos, 1
    ne $S10, ucs4:",", rx617_fail1754
    add rx617_pos, 1
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    goto rxquantr622_loop1764
  rxquantr622_done1765:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1754
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    rx617_cur."!cursor_pass"(rx617_pos, "role_params", 'backtrack'=>1)
    .return (rx617_cur)
  rx617_restart1753:
    repr_get_attr_obj rx617_cstack, rx617_cur, rx617_curclass, "$!cstack"
  rx617_fail1754:
    unless rx617_bstack, rx617_done1752
    pop $I19, rx617_bstack
    if_null rx617_cstack, rx617_cstack_done1757
    unless rx617_cstack, rx617_cstack_done1757
    dec $I19
    set $P11, rx617_cstack[$I19]
  rx617_cstack_done1757:
    pop rx617_rep, rx617_bstack
    pop rx617_pos, rx617_bstack
    pop $I19, rx617_bstack
    lt rx617_pos, -1, rx617_done1752
    lt rx617_pos, 0, rx617_fail1754
    eq $I19, 0, rx617_fail1754
    nqp_islist $I20, rx617_cstack
    unless $I20, rx617_jump1755
    elements $I18, rx617_bstack
    le $I18, 0, rx617_cut1756
    dec $I18
    set $I18, rx617_bstack[$I18]
  rx617_cut1756:
    assign rx617_cstack, $I18
  rx617_jump1755:
    jump $I19
  rx617_done1752:
    rx617_cur."!cursor_fail"()
    .return (rx617_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_106_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_107_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1024
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx629_tgt
    .local int rx629_pos
    .local int rx629_off
    .local int rx629_eos
    .local int rx629_rep
    .local pmc rx629_cur
    .local pmc rx629_curclass
    .local pmc rx629_bstack
    .local pmc rx629_cstack
    (rx629_cur, rx629_tgt, rx629_pos, rx629_curclass, rx629_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx629_cur
    length rx629_eos, rx629_tgt
    eq $I19, 1, rx629_restart1774
    gt rx629_pos, rx629_eos, rx629_fail1775
    repr_get_attr_int $I11, self, rx629_curclass, "$!from"
    ne $I11, -1, rxscan630_done1781
    goto rxscan630_scan1780
  rxscan630_loop1779:
    inc rx629_pos
    gt rx629_pos, rx629_eos, rx629_fail1775
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!from", rx629_pos
  rxscan630_scan1780:
    nqp_rxmark rx629_bstack, rxscan630_loop1779, rx629_pos, 0
  rxscan630_done1781:
    nqp_rxmark rx629_bstack, rxcap631_fail1783, rx629_pos, 0
    add $I11, rx629_pos, 2
    gt $I11, rx629_eos, rx629_fail1775
    substr $S10, rx629_tgt, rx629_pos, 2
    ne $S10, ucs4:"my", rx629_fail1775
    add rx629_pos, 2
    nqp_rxpeek $I19, rx629_bstack, rxcap631_fail1783
    inc $I19
    set $I11, rx629_bstack[$I19]
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!pos", rx629_pos
    $P11 = rx629_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx629_pos)
    rx629_cstack = rx629_cur."!cursor_capture"($P11, "sym")
    goto rxcap631_done1782
  rxcap631_fail1783:
    goto rx629_fail1775
  rxcap631_done1782:
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!pos", rx629_pos
    $P11 = rx629_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx629_curclass, "$!pos"
    lt $I11, 0, rx629_fail1775
    nqp_rxmark rx629_bstack, rxsubrule632_pass1784, -1, 0
  rxsubrule632_pass1784:
    rx629_cstack = rx629_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx629_pos, $P11, rx629_curclass, "$!pos"
    rx629_cur."!cursor_pass"(rx629_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx629_cur)
  rx629_restart1774:
    repr_get_attr_obj rx629_cstack, rx629_cur, rx629_curclass, "$!cstack"
  rx629_fail1775:
    unless rx629_bstack, rx629_done1773
    pop $I19, rx629_bstack
    if_null rx629_cstack, rx629_cstack_done1778
    unless rx629_cstack, rx629_cstack_done1778
    dec $I19
    set $P11, rx629_cstack[$I19]
  rx629_cstack_done1778:
    pop rx629_rep, rx629_bstack
    pop rx629_pos, rx629_bstack
    pop $I19, rx629_bstack
    lt rx629_pos, -1, rx629_done1773
    lt rx629_pos, 0, rx629_fail1775
    eq $I19, 0, rx629_fail1775
    nqp_islist $I20, rx629_cstack
    unless $I20, rx629_jump1776
    elements $I18, rx629_bstack
    le $I18, 0, rx629_cut1777
    dec $I18
    set $I18, rx629_bstack[$I18]
  rx629_cut1777:
    assign rx629_cstack, $I18
  rx629_jump1776:
    jump $I19
  rx629_done1773:
    rx629_cur."!cursor_fail"()
    .return (rx629_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_108_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1025
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx633_tgt
    .local int rx633_pos
    .local int rx633_off
    .local int rx633_eos
    .local int rx633_rep
    .local pmc rx633_cur
    .local pmc rx633_curclass
    .local pmc rx633_bstack
    .local pmc rx633_cstack
    (rx633_cur, rx633_tgt, rx633_pos, rx633_curclass, rx633_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx633_cur
    length rx633_eos, rx633_tgt
    eq $I19, 1, rx633_restart1787
    gt rx633_pos, rx633_eos, rx633_fail1788
    repr_get_attr_int $I11, self, rx633_curclass, "$!from"
    ne $I11, -1, rxscan634_done1794
    goto rxscan634_scan1793
  rxscan634_loop1792:
    inc rx633_pos
    gt rx633_pos, rx633_eos, rx633_fail1788
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!from", rx633_pos
  rxscan634_scan1793:
    nqp_rxmark rx633_bstack, rxscan634_loop1792, rx633_pos, 0
  rxscan634_done1794:
    nqp_rxmark rx633_bstack, rxcap635_fail1796, rx633_pos, 0
    add $I11, rx633_pos, 3
    gt $I11, rx633_eos, rx633_fail1788
    substr $S10, rx633_tgt, rx633_pos, 3
    ne $S10, ucs4:"our", rx633_fail1788
    add rx633_pos, 3
    nqp_rxpeek $I19, rx633_bstack, rxcap635_fail1796
    inc $I19
    set $I11, rx633_bstack[$I19]
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!pos", rx633_pos
    $P11 = rx633_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx633_pos)
    rx633_cstack = rx633_cur."!cursor_capture"($P11, "sym")
    goto rxcap635_done1795
  rxcap635_fail1796:
    goto rx633_fail1788
  rxcap635_done1795:
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!pos", rx633_pos
    $P11 = rx633_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx633_curclass, "$!pos"
    lt $I11, 0, rx633_fail1788
    nqp_rxmark rx633_bstack, rxsubrule636_pass1797, -1, 0
  rxsubrule636_pass1797:
    rx633_cstack = rx633_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx633_pos, $P11, rx633_curclass, "$!pos"
    rx633_cur."!cursor_pass"(rx633_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx633_cur)
  rx633_restart1787:
    repr_get_attr_obj rx633_cstack, rx633_cur, rx633_curclass, "$!cstack"
  rx633_fail1788:
    unless rx633_bstack, rx633_done1786
    pop $I19, rx633_bstack
    if_null rx633_cstack, rx633_cstack_done1791
    unless rx633_cstack, rx633_cstack_done1791
    dec $I19
    set $P11, rx633_cstack[$I19]
  rx633_cstack_done1791:
    pop rx633_rep, rx633_bstack
    pop rx633_pos, rx633_bstack
    pop $I19, rx633_bstack
    lt rx633_pos, -1, rx633_done1786
    lt rx633_pos, 0, rx633_fail1788
    eq $I19, 0, rx633_fail1788
    nqp_islist $I20, rx633_cstack
    unless $I20, rx633_jump1789
    elements $I18, rx633_bstack
    le $I18, 0, rx633_cut1790
    dec $I18
    set $I18, rx633_bstack[$I18]
  rx633_cut1790:
    assign rx633_cstack, $I18
  rx633_jump1789:
    jump $I19
  rx633_done1786:
    rx633_cur."!cursor_fail"()
    .return (rx633_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_109_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1026
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx637_tgt
    .local int rx637_pos
    .local int rx637_off
    .local int rx637_eos
    .local int rx637_rep
    .local pmc rx637_cur
    .local pmc rx637_curclass
    .local pmc rx637_bstack
    .local pmc rx637_cstack
    (rx637_cur, rx637_tgt, rx637_pos, rx637_curclass, rx637_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx637_cur
    length rx637_eos, rx637_tgt
    eq $I19, 1, rx637_restart1800
    gt rx637_pos, rx637_eos, rx637_fail1801
    repr_get_attr_int $I11, self, rx637_curclass, "$!from"
    ne $I11, -1, rxscan638_done1807
    goto rxscan638_scan1806
  rxscan638_loop1805:
    inc rx637_pos
    gt rx637_pos, rx637_eos, rx637_fail1801
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!from", rx637_pos
  rxscan638_scan1806:
    nqp_rxmark rx637_bstack, rxscan638_loop1805, rx637_pos, 0
  rxscan638_done1807:
    nqp_rxmark rx637_bstack, rxcap639_fail1809, rx637_pos, 0
    add $I11, rx637_pos, 3
    gt $I11, rx637_eos, rx637_fail1801
    substr $S10, rx637_tgt, rx637_pos, 3
    ne $S10, ucs4:"has", rx637_fail1801
    add rx637_pos, 3
    nqp_rxpeek $I19, rx637_bstack, rxcap639_fail1809
    inc $I19
    set $I11, rx637_bstack[$I19]
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx637_pos)
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "sym")
    goto rxcap639_done1808
  rxcap639_fail1809:
    goto rx637_fail1801
  rxcap639_done1808:
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1801
    nqp_rxmark rx637_bstack, rxsubrule640_pass1810, -1, 0
  rxsubrule640_pass1810:
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    rx637_cur."!cursor_pass"(rx637_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx637_cur)
  rx637_restart1800:
    repr_get_attr_obj rx637_cstack, rx637_cur, rx637_curclass, "$!cstack"
  rx637_fail1801:
    unless rx637_bstack, rx637_done1799
    pop $I19, rx637_bstack
    if_null rx637_cstack, rx637_cstack_done1804
    unless rx637_cstack, rx637_cstack_done1804
    dec $I19
    set $P11, rx637_cstack[$I19]
  rx637_cstack_done1804:
    pop rx637_rep, rx637_bstack
    pop rx637_pos, rx637_bstack
    pop $I19, rx637_bstack
    lt rx637_pos, -1, rx637_done1799
    lt rx637_pos, 0, rx637_fail1801
    eq $I19, 0, rx637_fail1801
    nqp_islist $I20, rx637_cstack
    unless $I20, rx637_jump1802
    elements $I18, rx637_bstack
    le $I18, 0, rx637_cut1803
    dec $I18
    set $I18, rx637_bstack[$I18]
  rx637_cut1803:
    assign rx637_cstack, $I18
  rx637_jump1802:
    jump $I19
  rx637_done1799:
    rx637_cur."!cursor_fail"()
    .return (rx637_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_110_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1028
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx641_tgt
    .local int rx641_pos
    .local int rx641_off
    .local int rx641_eos
    .local int rx641_rep
    .local pmc rx641_cur
    .local pmc rx641_curclass
    .local pmc rx641_bstack
    .local pmc rx641_cstack
    (rx641_cur, rx641_tgt, rx641_pos, rx641_curclass, rx641_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx641_cur
    length rx641_eos, rx641_tgt
    eq $I19, 1, rx641_restart1813
    gt rx641_pos, rx641_eos, rx641_fail1814
    repr_get_attr_int $I11, self, rx641_curclass, "$!from"
    ne $I11, -1, rxscan642_done1820
    goto rxscan642_scan1819
  rxscan642_loop1818:
    inc rx641_pos
    gt rx641_pos, rx641_eos, rx641_fail1814
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!from", rx641_pos
  rxscan642_scan1819:
    nqp_rxmark rx641_bstack, rxscan642_loop1818, rx641_pos, 0
  rxscan642_done1820:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt643_01822
    nqp_push_label $P11, alt643_11826
    nqp_push_label $P11, alt643_21830
    nqp_rxmark rx641_bstack, alt643_end1821, -1, 0
    rx641_cur."!alt"(rx641_pos, "alt_nfa__21_1360232770.717", $P11)
    goto rx641_fail1814
  alt643_01822:
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    nqp_rxmark rx641_bstack, rxsubrule645_pass1824, -1, 0
  rxsubrule645_pass1824:
    rx641_cstack = rx641_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    goto alt643_end1821
  alt643_11826:
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    nqp_rxmark rx641_bstack, rxsubrule648_pass1828, -1, 0
  rxsubrule648_pass1828:
    rx641_cstack = rx641_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    goto alt643_end1821
  alt643_21830:
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    nqp_rxmark rx641_bstack, rxsubrule651_pass1832, -1, 0
  rxsubrule651_pass1832:
    rx641_cstack = rx641_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."ws"()
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1814
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    goto alt643_end1821
  alt643_end1821:
    rx641_cur."!cursor_pass"(rx641_pos, "scoped", 'backtrack'=>1)
    .return (rx641_cur)
  rx641_restart1813:
    repr_get_attr_obj rx641_cstack, rx641_cur, rx641_curclass, "$!cstack"
  rx641_fail1814:
    unless rx641_bstack, rx641_done1812
    pop $I19, rx641_bstack
    if_null rx641_cstack, rx641_cstack_done1817
    unless rx641_cstack, rx641_cstack_done1817
    dec $I19
    set $P11, rx641_cstack[$I19]
  rx641_cstack_done1817:
    pop rx641_rep, rx641_bstack
    pop rx641_pos, rx641_bstack
    pop $I19, rx641_bstack
    lt rx641_pos, -1, rx641_done1812
    lt rx641_pos, 0, rx641_fail1814
    eq $I19, 0, rx641_fail1814
    nqp_islist $I20, rx641_cstack
    unless $I20, rx641_jump1815
    elements $I18, rx641_bstack
    le $I18, 0, rx641_cut1816
    dec $I18
    set $I18, rx641_bstack[$I18]
  rx641_cut1816:
    assign rx641_cstack, $I18
  rx641_jump1815:
    jump $I19
  rx641_done1812:
    rx641_cur."!cursor_fail"()
    .return (rx641_cur) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_111_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1034
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_395_1360232768.755' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx653_tgt
    .local int rx653_pos
    .local int rx653_off
    .local int rx653_eos
    .local int rx653_rep
    .local pmc rx653_cur
    .local pmc rx653_curclass
    .local pmc rx653_bstack
    .local pmc rx653_cstack
    (rx653_cur, rx653_tgt, rx653_pos, rx653_curclass, rx653_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx653_cur
    length rx653_eos, rx653_tgt
    eq $I19, 1, rx653_restart1836
    gt rx653_pos, rx653_eos, rx653_fail1837
    repr_get_attr_int $I11, self, rx653_curclass, "$!from"
    ne $I11, -1, rxscan654_done1843
    goto rxscan654_scan1842
  rxscan654_loop1841:
    inc rx653_pos
    gt rx653_pos, rx653_eos, rx653_fail1837
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!from", rx653_pos
  rxscan654_scan1842:
    nqp_rxmark rx653_bstack, rxscan654_loop1841, rx653_pos, 0
  rxscan654_done1843:
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!pos", rx653_pos
    $P11 = rx653_cur."name"()
    repr_get_attr_int $I11, $P11, rx653_curclass, "$!pos"
    lt $I11, 0, rx653_fail1837
    nqp_rxmark rx653_bstack, rxsubrule655_pass1844, -1, 0
  rxsubrule655_pass1844:
    rx653_cstack = rx653_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx653_pos, $P11, rx653_curclass, "$!pos"
    repr_bind_attr_int rx653_cur, rx653_curclass, "$!pos", rx653_pos
    store_lex unicode:"$\x{a2}", rx653_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_395_1360232768.755' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx653_fail1837
    rx653_cur."!cursor_pass"(rx653_pos, "typename", 'backtrack'=>1)
    .return (rx653_cur)
  rx653_restart1836:
    repr_get_attr_obj rx653_cstack, rx653_cur, rx653_curclass, "$!cstack"
  rx653_fail1837:
    unless rx653_bstack, rx653_done1835
    pop $I19, rx653_bstack
    if_null rx653_cstack, rx653_cstack_done1840
    unless rx653_cstack, rx653_cstack_done1840
    dec $I19
    set $P11, rx653_cstack[$I19]
  rx653_cstack_done1840:
    pop rx653_rep, rx653_bstack
    pop rx653_pos, rx653_bstack
    pop $I19, rx653_bstack
    lt rx653_pos, -1, rx653_done1835
    lt rx653_pos, 0, rx653_fail1837
    eq $I19, 0, rx653_fail1837
    nqp_islist $I20, rx653_cstack
    unless $I20, rx653_jump1838
    elements $I18, rx653_bstack
    le $I18, 0, rx653_cut1839
    dec $I18
    set $I18, rx653_bstack[$I18]
  rx653_cut1839:
    assign rx653_cstack, $I18
  rx653_jump1838:
    jump $I19
  rx653_done1835:
    rx653_cur."!cursor_fail"()
    .return (rx653_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1360232768.755") :anon :lex :outer("cuid_111_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1845
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1846
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback1846:
    unless_null $P5002, vivi_6561847
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6561847:
    set $P5001, $P5002
  fallback1845:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1848
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5011
  fallback1848:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1849
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback1849:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1850
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5013
  fallback1850:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_112_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1039
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx657_tgt
    .local int rx657_pos
    .local int rx657_off
    .local int rx657_eos
    .local int rx657_rep
    .local pmc rx657_cur
    .local pmc rx657_curclass
    .local pmc rx657_bstack
    .local pmc rx657_cstack
    (rx657_cur, rx657_tgt, rx657_pos, rx657_curclass, rx657_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx657_cur
    length rx657_eos, rx657_tgt
    eq $I19, 1, rx657_restart1853
    gt rx657_pos, rx657_eos, rx657_fail1854
    repr_get_attr_int $I11, self, rx657_curclass, "$!from"
    ne $I11, -1, rxscan658_done1860
    goto rxscan658_scan1859
  rxscan658_loop1858:
    inc rx657_pos
    gt rx657_pos, rx657_eos, rx657_fail1854
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!from", rx657_pos
  rxscan658_scan1859:
    nqp_rxmark rx657_bstack, rxscan658_loop1858, rx657_pos, 0
  rxscan658_done1860:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt659_01862
    nqp_push_label $P11, alt659_11864
    nqp_rxmark rx657_bstack, alt659_end1861, -1, 0
    rx657_cur."!alt"(rx657_pos, "alt_nfa__22_1360232770.73", $P11)
    goto rx657_fail1854
  alt659_01862:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1854
    nqp_rxmark rx657_bstack, rxsubrule660_pass1863, -1, 0
  rxsubrule660_pass1863:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    goto alt659_end1861
  alt659_11864:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1854
    nqp_rxmark rx657_bstack, rxsubrule661_pass1865, -1, 0
  rxsubrule661_pass1865:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    goto alt659_end1861
  alt659_end1861:
    rx657_cur."!cursor_pass"(rx657_pos, "declarator", 'backtrack'=>1)
    .return (rx657_cur)
  rx657_restart1853:
    repr_get_attr_obj rx657_cstack, rx657_cur, rx657_curclass, "$!cstack"
  rx657_fail1854:
    unless rx657_bstack, rx657_done1852
    pop $I19, rx657_bstack
    if_null rx657_cstack, rx657_cstack_done1857
    unless rx657_cstack, rx657_cstack_done1857
    dec $I19
    set $P11, rx657_cstack[$I19]
  rx657_cstack_done1857:
    pop rx657_rep, rx657_bstack
    pop rx657_pos, rx657_bstack
    pop $I19, rx657_bstack
    lt rx657_pos, -1, rx657_done1852
    lt rx657_pos, 0, rx657_fail1854
    eq $I19, 0, rx657_fail1854
    nqp_islist $I20, rx657_cstack
    unless $I20, rx657_jump1855
    elements $I18, rx657_bstack
    le $I18, 0, rx657_cut1856
    dec $I18
    set $I18, rx657_bstack[$I18]
  rx657_cut1856:
    assign rx657_cstack, $I18
  rx657_jump1855:
    jump $I19
  rx657_done1852:
    rx657_cur."!cursor_fail"()
    .return (rx657_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_113_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1044
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_396_1360232768.755' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx662_tgt
    .local int rx662_pos
    .local int rx662_off
    .local int rx662_eos
    .local int rx662_rep
    .local pmc rx662_cur
    .local pmc rx662_curclass
    .local pmc rx662_bstack
    .local pmc rx662_cstack
    (rx662_cur, rx662_tgt, rx662_pos, rx662_curclass, rx662_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx662_cur
    length rx662_eos, rx662_tgt
    eq $I19, 1, rx662_restart1868
    gt rx662_pos, rx662_eos, rx662_fail1869
    repr_get_attr_int $I11, self, rx662_curclass, "$!from"
    ne $I11, -1, rxscan663_done1875
    goto rxscan663_scan1874
  rxscan663_loop1873:
    inc rx662_pos
    gt rx662_pos, rx662_eos, rx662_fail1869
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!from", rx662_pos
  rxscan663_scan1874:
    nqp_rxmark rx662_bstack, rxscan663_loop1873, rx662_pos, 0
  rxscan663_done1875:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    nqp_rxmark rx662_bstack, rxquantr665_done1878, rx662_pos, 0
  rxquantr665_loop1877:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."typename"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    goto rxsubrule666_pass1879
  rxsubrule666_back1880:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
  rxsubrule666_pass1879:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule666_back1880
    push rx662_bstack, $I11
    push rx662_bstack, 0
    push rx662_bstack, rx662_pos
    elements $I11, rx662_cstack
    push rx662_bstack, $I11
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    nqp_rxpeek $I19, rx662_bstack, rxquantr665_done1878
    inc $I19
    inc $I19
    set rx662_rep, rx662_bstack[$I19]
    nqp_rxcommit rx662_bstack, rxquantr665_done1878
    inc rx662_rep
  rxquantr665_done1878:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    store_lex unicode:"$\x{a2}", rx662_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."variable"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    nqp_rxmark rx662_bstack, rxsubrule669_pass1883, -1, 0
  rxsubrule669_pass1883:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    store_lex unicode:"$\x{a2}", rx662_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_396_1360232768.755' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    nqp_rxmark rx662_bstack, rxquantr672_done1887, rx662_pos, 0
  rxquantr672_loop1886:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."trait"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    goto rxsubrule673_pass1888
  rxsubrule673_back1889:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
  rxsubrule673_pass1888:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule673_back1889
    push rx662_bstack, $I11
    push rx662_bstack, 0
    push rx662_bstack, rx662_pos
    elements $I11, rx662_cstack
    push rx662_bstack, $I11
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    nqp_rxpeek $I19, rx662_bstack, rxquantr672_done1887
    inc $I19
    inc $I19
    set rx662_rep, rx662_bstack[$I19]
    nqp_rxcommit rx662_bstack, rxquantr672_done1887
    inc rx662_rep
    nqp_rxmark rx662_bstack, rxquantr672_done1887, rx662_pos, rx662_rep
    goto rxquantr672_loop1886
  rxquantr672_done1887:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail1869
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    rx662_cur."!cursor_pass"(rx662_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx662_cur)
  rx662_restart1868:
    repr_get_attr_obj rx662_cstack, rx662_cur, rx662_curclass, "$!cstack"
  rx662_fail1869:
    unless rx662_bstack, rx662_done1867
    pop $I19, rx662_bstack
    if_null rx662_cstack, rx662_cstack_done1872
    unless rx662_cstack, rx662_cstack_done1872
    dec $I19
    set $P11, rx662_cstack[$I19]
  rx662_cstack_done1872:
    pop rx662_rep, rx662_bstack
    pop rx662_pos, rx662_bstack
    pop $I19, rx662_bstack
    lt rx662_pos, -1, rx662_done1867
    lt rx662_pos, 0, rx662_fail1869
    eq $I19, 0, rx662_fail1869
    nqp_islist $I20, rx662_cstack
    unless $I20, rx662_jump1870
    elements $I18, rx662_bstack
    le $I18, 0, rx662_cut1871
    dec $I18
    set $I18, rx662_bstack[$I18]
  rx662_cut1871:
    assign rx662_cstack, $I18
  rx662_jump1870:
    jump $I19
  rx662_done1867:
    rx662_cur."!cursor_fail"()
    .return (rx662_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1360232768.755") :anon :lex :outer("cuid_113_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1048

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_114_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1052
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_115_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1053
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx675_tgt
    .local int rx675_pos
    .local int rx675_off
    .local int rx675_eos
    .local int rx675_rep
    .local pmc rx675_cur
    .local pmc rx675_curclass
    .local pmc rx675_bstack
    .local pmc rx675_cstack
    (rx675_cur, rx675_tgt, rx675_pos, rx675_curclass, rx675_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx675_cur
    length rx675_eos, rx675_tgt
    eq $I19, 1, rx675_restart1893
    gt rx675_pos, rx675_eos, rx675_fail1894
    repr_get_attr_int $I11, self, rx675_curclass, "$!from"
    ne $I11, -1, rxscan676_done1900
    goto rxscan676_scan1899
  rxscan676_loop1898:
    inc rx675_pos
    gt rx675_pos, rx675_eos, rx675_fail1894
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!from", rx675_pos
  rxscan676_scan1899:
    nqp_rxmark rx675_bstack, rxscan676_loop1898, rx675_pos, 0
  rxscan676_done1900:
    nqp_rxmark rx675_bstack, rxcap677_fail1902, rx675_pos, 0
    add $I11, rx675_pos, 3
    gt $I11, rx675_eos, rx675_fail1894
    substr $S10, rx675_tgt, rx675_pos, 3
    ne $S10, ucs4:"sub", rx675_fail1894
    add rx675_pos, 3
    nqp_rxpeek $I19, rx675_bstack, rxcap677_fail1902
    inc $I19
    set $I11, rx675_bstack[$I19]
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!pos", rx675_pos
    $P11 = rx675_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx675_pos)
    rx675_cstack = rx675_cur."!cursor_capture"($P11, "sym")
    goto rxcap677_done1901
  rxcap677_fail1902:
    goto rx675_fail1894
  rxcap677_done1901:
    repr_bind_attr_int rx675_cur, rx675_curclass, "$!pos", rx675_pos
    $P11 = rx675_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx675_curclass, "$!pos"
    lt $I11, 0, rx675_fail1894
    nqp_rxmark rx675_bstack, rxsubrule678_pass1903, -1, 0
  rxsubrule678_pass1903:
    rx675_cstack = rx675_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx675_pos, $P11, rx675_curclass, "$!pos"
    rx675_cur."!cursor_pass"(rx675_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx675_cur)
  rx675_restart1893:
    repr_get_attr_obj rx675_cstack, rx675_cur, rx675_curclass, "$!cstack"
  rx675_fail1894:
    unless rx675_bstack, rx675_done1892
    pop $I19, rx675_bstack
    if_null rx675_cstack, rx675_cstack_done1897
    unless rx675_cstack, rx675_cstack_done1897
    dec $I19
    set $P11, rx675_cstack[$I19]
  rx675_cstack_done1897:
    pop rx675_rep, rx675_bstack
    pop rx675_pos, rx675_bstack
    pop $I19, rx675_bstack
    lt rx675_pos, -1, rx675_done1892
    lt rx675_pos, 0, rx675_fail1894
    eq $I19, 0, rx675_fail1894
    nqp_islist $I20, rx675_cstack
    unless $I20, rx675_jump1895
    elements $I18, rx675_bstack
    le $I18, 0, rx675_cut1896
    dec $I18
    set $I18, rx675_bstack[$I18]
  rx675_cut1896:
    assign rx675_cstack, $I18
  rx675_jump1895:
    jump $I19
  rx675_done1892:
    rx675_cur."!cursor_fail"()
    .return (rx675_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_116_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1054
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx679_tgt
    .local int rx679_pos
    .local int rx679_off
    .local int rx679_eos
    .local int rx679_rep
    .local pmc rx679_cur
    .local pmc rx679_curclass
    .local pmc rx679_bstack
    .local pmc rx679_cstack
    (rx679_cur, rx679_tgt, rx679_pos, rx679_curclass, rx679_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx679_cur
    length rx679_eos, rx679_tgt
    eq $I19, 1, rx679_restart1906
    gt rx679_pos, rx679_eos, rx679_fail1907
    repr_get_attr_int $I11, self, rx679_curclass, "$!from"
    ne $I11, -1, rxscan680_done1913
    goto rxscan680_scan1912
  rxscan680_loop1911:
    inc rx679_pos
    gt rx679_pos, rx679_eos, rx679_fail1907
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!from", rx679_pos
  rxscan680_scan1912:
    nqp_rxmark rx679_bstack, rxscan680_loop1911, rx679_pos, 0
  rxscan680_done1913:
    nqp_rxmark rx679_bstack, rxcap681_fail1915, rx679_pos, 0
    add $I11, rx679_pos, 6
    gt $I11, rx679_eos, rx679_fail1907
    substr $S10, rx679_tgt, rx679_pos, 6
    ne $S10, ucs4:"method", rx679_fail1907
    add rx679_pos, 6
    nqp_rxpeek $I19, rx679_bstack, rxcap681_fail1915
    inc $I19
    set $I11, rx679_bstack[$I19]
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx679_pos)
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "sym")
    goto rxcap681_done1914
  rxcap681_fail1915:
    goto rx679_fail1907
  rxcap681_done1914:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1907
    nqp_rxmark rx679_bstack, rxsubrule682_pass1916, -1, 0
  rxsubrule682_pass1916:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    rx679_cur."!cursor_pass"(rx679_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx679_cur)
  rx679_restart1906:
    repr_get_attr_obj rx679_cstack, rx679_cur, rx679_curclass, "$!cstack"
  rx679_fail1907:
    unless rx679_bstack, rx679_done1905
    pop $I19, rx679_bstack
    if_null rx679_cstack, rx679_cstack_done1910
    unless rx679_cstack, rx679_cstack_done1910
    dec $I19
    set $P11, rx679_cstack[$I19]
  rx679_cstack_done1910:
    pop rx679_rep, rx679_bstack
    pop rx679_pos, rx679_bstack
    pop $I19, rx679_bstack
    lt rx679_pos, -1, rx679_done1905
    lt rx679_pos, 0, rx679_fail1907
    eq $I19, 0, rx679_fail1907
    nqp_islist $I20, rx679_cstack
    unless $I20, rx679_jump1908
    elements $I18, rx679_bstack
    le $I18, 0, rx679_cut1909
    dec $I18
    set $I18, rx679_bstack[$I18]
  rx679_cut1909:
    assign rx679_cstack, $I18
  rx679_jump1908:
    jump $I19
  rx679_done1905:
    rx679_cur."!cursor_fail"()
    .return (rx679_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_117_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1056
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx683_tgt
    .local int rx683_pos
    .local int rx683_off
    .local int rx683_eos
    .local int rx683_rep
    .local pmc rx683_cur
    .local pmc rx683_curclass
    .local pmc rx683_bstack
    .local pmc rx683_cstack
    (rx683_cur, rx683_tgt, rx683_pos, rx683_curclass, rx683_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx683_cur
    length rx683_eos, rx683_tgt
    eq $I19, 1, rx683_restart1919
    gt rx683_pos, rx683_eos, rx683_fail1920
    repr_get_attr_int $I11, self, rx683_curclass, "$!from"
    ne $I11, -1, rxscan684_done1926
    goto rxscan684_scan1925
  rxscan684_loop1924:
    inc rx683_pos
    gt rx683_pos, rx683_eos, rx683_fail1920
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!from", rx683_pos
  rxscan684_scan1925:
    nqp_rxmark rx683_bstack, rxscan684_loop1924, rx683_pos, 0
  rxscan684_done1926:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    store_lex unicode:"$\x{a2}", rx683_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxmark rx683_bstack, rxquantr687_done1930, rx683_pos, 0
  rxquantr687_loop1929:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxmark rx683_bstack, rxcap689_fail1933, rx683_pos, 0
    nqp_rxmark rx683_bstack, rxquantr690_done1935, rx683_pos, 0
  rxquantr690_loop1934:
    add $I11, rx683_pos, 1
    gt $I11, rx683_eos, rx683_fail1920
    substr $S10, rx683_tgt, rx683_pos, 1
    ne $S10, ucs4:"&", rx683_fail1920
    add rx683_pos, 1
    nqp_rxpeek $I19, rx683_bstack, rxquantr690_done1935
    inc $I19
    inc $I19
    set rx683_rep, rx683_bstack[$I19]
    nqp_rxcommit rx683_bstack, rxquantr690_done1935
    inc rx683_rep
  rxquantr690_done1935:
    nqp_rxpeek $I19, rx683_bstack, rxcap689_fail1933
    inc $I19
    set $I11, rx683_bstack[$I19]
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx683_pos)
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "sigil")
    goto rxcap689_done1932
  rxcap689_fail1933:
    goto rx683_fail1920
  rxcap689_done1932:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    nqp_rxmark rx683_bstack, rxsubrule691_pass1936, -1, 0
  rxsubrule691_pass1936:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxpeek $I19, rx683_bstack, rxquantr687_done1930
    inc $I19
    inc $I19
    set rx683_rep, rx683_bstack[$I19]
    nqp_rxcommit rx683_bstack, rxquantr687_done1930
    inc rx683_rep
  rxquantr687_done1930:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
  alt696_01942:
    nqp_rxmark rx683_bstack, alt696_11948, rx683_pos, 0
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    add $I11, rx683_pos, 1
    gt $I11, rx683_eos, rx683_fail1920
    substr $S10, rx683_tgt, rx683_pos, 1
    ne $S10, ucs4:"(", rx683_fail1920
    add rx683_pos, 1
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."signature"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    nqp_rxmark rx683_bstack, rxsubrule699_pass1945, -1, 0
  rxsubrule699_pass1945:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    add $I11, rx683_pos, 1
    gt $I11, rx683_eos, rx683_fail1920
    substr $S10, rx683_tgt, rx683_pos, 1
    ne $S10, ucs4:")", rx683_fail1920
    add rx683_pos, 1
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    goto alt696_end1941
  alt696_11948:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
  alt696_end1941:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxmark rx683_bstack, rxquantr706_done1954, rx683_pos, 0
  rxquantr706_loop1953:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."trait"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    goto rxsubrule707_pass1955
  rxsubrule707_back1956:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
  rxsubrule707_pass1955:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule707_back1956
    push rx683_bstack, $I11
    push rx683_bstack, 0
    push rx683_bstack, rx683_pos
    elements $I11, rx683_cstack
    push rx683_bstack, $I11
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    nqp_rxpeek $I19, rx683_bstack, rxquantr706_done1954
    inc $I19
    inc $I19
    set rx683_rep, rx683_bstack[$I19]
    nqp_rxcommit rx683_bstack, rxquantr706_done1954
    inc rx683_rep
    nqp_rxmark rx683_bstack, rxquantr706_done1954, rx683_pos, rx683_rep
    goto rxquantr706_loop1953
  rxquantr706_done1954:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt709_01959
    nqp_push_label $P11, alt709_11963
    nqp_rxmark rx683_bstack, alt709_end1958, -1, 0
    rx683_cur."!alt"(rx683_pos, "alt_nfa__23_1360232770.876", $P11)
    goto rx683_fail1920
  alt709_01959:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    nqp_rxmark rx683_bstack, rxsubrule711_pass1961, -1, 0
  rxsubrule711_pass1961:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    goto alt709_end1958
  alt709_11963:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    nqp_rxmark rx683_bstack, rxsubrule714_pass1965, -1, 0
  rxsubrule714_pass1965:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    goto alt709_end1958
  alt709_end1958:
    nqp_rxcommit rx683_bstack, alt709_end1958
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."ws"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1920
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    rx683_cur."!cursor_pass"(rx683_pos, "routine_def", 'backtrack'=>1)
    .return (rx683_cur)
  rx683_restart1919:
    repr_get_attr_obj rx683_cstack, rx683_cur, rx683_curclass, "$!cstack"
  rx683_fail1920:
    unless rx683_bstack, rx683_done1918
    pop $I19, rx683_bstack
    if_null rx683_cstack, rx683_cstack_done1923
    unless rx683_cstack, rx683_cstack_done1923
    dec $I19
    set $P11, rx683_cstack[$I19]
  rx683_cstack_done1923:
    pop rx683_rep, rx683_bstack
    pop rx683_pos, rx683_bstack
    pop $I19, rx683_bstack
    lt rx683_pos, -1, rx683_done1918
    lt rx683_pos, 0, rx683_fail1920
    eq $I19, 0, rx683_fail1920
    nqp_islist $I20, rx683_cstack
    unless $I20, rx683_jump1921
    elements $I18, rx683_bstack
    le $I18, 0, rx683_cut1922
    dec $I18
    set $I18, rx683_bstack[$I18]
  rx683_cut1922:
    assign rx683_cstack, $I18
  rx683_jump1921:
    jump $I19
  rx683_done1918:
    rx683_cur."!cursor_fail"()
    .return (rx683_cur) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_118_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1069
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_397_1360232768.755' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx717_tgt
    .local int rx717_pos
    .local int rx717_off
    .local int rx717_eos
    .local int rx717_rep
    .local pmc rx717_cur
    .local pmc rx717_curclass
    .local pmc rx717_bstack
    .local pmc rx717_cstack
    (rx717_cur, rx717_tgt, rx717_pos, rx717_curclass, rx717_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx717_cur
    length rx717_eos, rx717_tgt
    eq $I19, 1, rx717_restart1970
    gt rx717_pos, rx717_eos, rx717_fail1971
    repr_get_attr_int $I11, self, rx717_curclass, "$!from"
    ne $I11, -1, rxscan718_done1977
    goto rxscan718_scan1976
  rxscan718_loop1975:
    inc rx717_pos
    gt rx717_pos, rx717_eos, rx717_fail1971
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!from", rx717_pos
  rxscan718_scan1976:
    nqp_rxmark rx717_bstack, rxscan718_loop1975, rx717_pos, 0
  rxscan718_done1977:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    store_lex unicode:"$\x{a2}", rx717_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    store_lex unicode:"$\x{a2}", rx717_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
  alt722_01982:
    nqp_rxmark rx717_bstack, alt722_11988, rx717_pos, 0
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 3
    gt $I11, rx717_eos, rx717_fail1971
    substr $S10, rx717_tgt, rx717_pos, 3
    ne $S10, ucs4:"::(", rx717_fail1971
    add rx717_pos, 3
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."variable"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    nqp_rxmark rx717_bstack, rxsubrule725_pass1985, -1, 0
  rxsubrule725_pass1985:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1971
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:")", rx717_fail1971
    add rx717_pos, 1
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt722_end1981
  alt722_11988:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxmark rx717_bstack, rxcap729_fail1991, rx717_pos, 0
    nqp_rxmark rx717_bstack, rxquantr730_done1993, rx717_pos, 0
  rxquantr730_loop1992:
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1971
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:"!", rx717_fail1971
    add rx717_pos, 1
    nqp_rxpeek $I19, rx717_bstack, rxquantr730_done1993
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr730_done1993
    inc rx717_rep
  rxquantr730_done1993:
    nqp_rxpeek $I19, rx717_bstack, rxcap729_fail1991
    inc $I19
    set $I11, rx717_bstack[$I19]
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx717_pos)
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "private")
    goto rxcap729_done1990
  rxcap729_fail1991:
    goto rx717_fail1971
  rxcap729_done1990:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxmark rx717_bstack, rxquantr732_done1996, rx717_pos, 0
  rxquantr732_loop1995:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    goto rxsubrule733_pass1997
  rxsubrule733_back1998:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
  rxsubrule733_pass1997:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule733_back1998
    push rx717_bstack, $I11
    push rx717_bstack, 0
    push rx717_bstack, rx717_pos
    elements $I11, rx717_cstack
    push rx717_bstack, $I11
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxpeek $I19, rx717_bstack, rxquantr732_done1996
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr732_done1996
    inc rx717_rep
  rxquantr732_done1996:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
  alt722_end1981:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
  alt738_02004:
    nqp_rxmark rx717_bstack, alt738_12010, rx717_pos, 0
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1971
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:"(", rx717_fail1971
    add rx717_pos, 1
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."signature"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    nqp_rxmark rx717_bstack, rxsubrule741_pass2007, -1, 0
  rxsubrule741_pass2007:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1971
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:")", rx717_fail1971
    add rx717_pos, 1
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt738_end2003
  alt738_12010:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
  alt738_end2003:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    store_lex unicode:"$\x{a2}", rx717_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_397_1360232768.755' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxmark rx717_bstack, rxquantr749_done2017, rx717_pos, 0
  rxquantr749_loop2016:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."trait"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    goto rxsubrule750_pass2018
  rxsubrule750_back2019:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
  rxsubrule750_pass2018:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule750_back2019
    push rx717_bstack, $I11
    push rx717_bstack, 0
    push rx717_bstack, rx717_pos
    elements $I11, rx717_cstack
    push rx717_bstack, $I11
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    nqp_rxpeek $I19, rx717_bstack, rxquantr749_done2017
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr749_done2017
    inc rx717_rep
    nqp_rxmark rx717_bstack, rxquantr749_done2017, rx717_pos, rx717_rep
    goto rxquantr749_loop2016
  rxquantr749_done2017:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt752_02022
    nqp_push_label $P11, alt752_12026
    nqp_rxmark rx717_bstack, alt752_end2021, -1, 0
    rx717_cur."!alt"(rx717_pos, "alt_nfa__24_1360232770.91", $P11)
    goto rx717_fail1971
  alt752_02022:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    nqp_rxmark rx717_bstack, rxsubrule754_pass2024, -1, 0
  rxsubrule754_pass2024:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt752_end2021
  alt752_12026:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    nqp_rxmark rx717_bstack, rxsubrule757_pass2028, -1, 0
  rxsubrule757_pass2028:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt752_end2021
  alt752_end2021:
    nqp_rxcommit rx717_bstack, alt752_end2021
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1971
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    rx717_cur."!cursor_pass"(rx717_pos, "method_def", 'backtrack'=>1)
    .return (rx717_cur)
  rx717_restart1970:
    repr_get_attr_obj rx717_cstack, rx717_cur, rx717_curclass, "$!cstack"
  rx717_fail1971:
    unless rx717_bstack, rx717_done1969
    pop $I19, rx717_bstack
    if_null rx717_cstack, rx717_cstack_done1974
    unless rx717_cstack, rx717_cstack_done1974
    dec $I19
    set $P11, rx717_cstack[$I19]
  rx717_cstack_done1974:
    pop rx717_rep, rx717_bstack
    pop rx717_pos, rx717_bstack
    pop $I19, rx717_bstack
    lt rx717_pos, -1, rx717_done1969
    lt rx717_pos, 0, rx717_fail1971
    eq $I19, 0, rx717_fail1971
    nqp_islist $I20, rx717_cstack
    unless $I20, rx717_jump1972
    elements $I18, rx717_bstack
    le $I18, 0, rx717_cut1973
    dec $I18
    set $I18, rx717_bstack[$I18]
  rx717_cut1973:
    assign rx717_cstack, $I18
  rx717_jump1972:
    jump $I19
  rx717_done1969:
    rx717_cur."!cursor_fail"()
    .return (rx717_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1360232768.755") :anon :lex :outer("cuid_118_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1079

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_119_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1087
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_398_1360232768.755' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx760_tgt
    .local int rx760_pos
    .local int rx760_off
    .local int rx760_eos
    .local int rx760_rep
    .local pmc rx760_cur
    .local pmc rx760_curclass
    .local pmc rx760_bstack
    .local pmc rx760_cstack
    (rx760_cur, rx760_tgt, rx760_pos, rx760_curclass, rx760_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx760_cur
    length rx760_eos, rx760_tgt
    eq $I19, 1, rx760_restart2033
    gt rx760_pos, rx760_eos, rx760_fail2034
    repr_get_attr_int $I11, self, rx760_curclass, "$!from"
    ne $I11, -1, rxscan761_done2040
    goto rxscan761_scan2039
  rxscan761_loop2038:
    inc rx760_pos
    gt rx760_pos, rx760_eos, rx760_fail2034
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!from", rx760_pos
  rxscan761_scan2039:
    nqp_rxmark rx760_bstack, rxscan761_loop2038, rx760_pos, 0
  rxscan761_done2040:
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    store_lex unicode:"$\x{a2}", rx760_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_398_1360232768.755' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx760_fail2034
    add $I11, rx760_pos, 1
    gt $I11, rx760_eos, rx760_fail2034
    substr $S10, rx760_tgt, rx760_pos, 1
    ne $S10, ucs4:"{", rx760_fail2034
    add rx760_pos, 1
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    $P11 = rx760_cur."ws"()
    repr_get_attr_int $I11, $P11, rx760_curclass, "$!pos"
    lt $I11, 0, rx760_fail2034
    repr_get_attr_int rx760_pos, $P11, rx760_curclass, "$!pos"
    add $I11, rx760_pos, 1
    gt $I11, rx760_eos, rx760_fail2034
    substr $S10, rx760_tgt, rx760_pos, 1
    ne $S10, ucs4:"*", rx760_fail2034
    add rx760_pos, 1
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    $P11 = rx760_cur."ws"()
    repr_get_attr_int $I11, $P11, rx760_curclass, "$!pos"
    lt $I11, 0, rx760_fail2034
    repr_get_attr_int rx760_pos, $P11, rx760_curclass, "$!pos"
    add $I11, rx760_pos, 1
    gt $I11, rx760_eos, rx760_fail2034
    substr $S10, rx760_tgt, rx760_pos, 1
    ne $S10, ucs4:"}", rx760_fail2034
    add rx760_pos, 1
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    $P11 = rx760_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx760_curclass, "$!pos"
    lt $I11, 0, rx760_fail2034
    repr_bind_attr_int rx760_cur, rx760_curclass, "$!pos", rx760_pos
    $P11 = rx760_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx760_curclass, "$!pos"
    lt $I11, 0, rx760_fail2034
    repr_get_attr_int rx760_pos, $P11, rx760_curclass, "$!pos"
    rx760_cur."!cursor_pass"(rx760_pos, "onlystar", 'backtrack'=>1)
    .return (rx760_cur)
  rx760_restart2033:
    repr_get_attr_obj rx760_cstack, rx760_cur, rx760_curclass, "$!cstack"
  rx760_fail2034:
    unless rx760_bstack, rx760_done2032
    pop $I19, rx760_bstack
    if_null rx760_cstack, rx760_cstack_done2037
    unless rx760_cstack, rx760_cstack_done2037
    dec $I19
    set $P11, rx760_cstack[$I19]
  rx760_cstack_done2037:
    pop rx760_rep, rx760_bstack
    pop rx760_pos, rx760_bstack
    pop $I19, rx760_bstack
    lt rx760_pos, -1, rx760_done2032
    lt rx760_pos, 0, rx760_fail2034
    eq $I19, 0, rx760_fail2034
    nqp_islist $I20, rx760_cstack
    unless $I20, rx760_jump2035
    elements $I18, rx760_bstack
    le $I18, 0, rx760_cut2036
    dec $I18
    set $I18, rx760_bstack[$I18]
  rx760_cut2036:
    assign rx760_cstack, $I18
  rx760_jump2035:
    jump $I19
  rx760_done2032:
    rx760_cur."!cursor_fail"()
    .return (rx760_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1360232768.755") :anon :lex :outer("cuid_119_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1088

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2041
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2042
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback2042:
    unless_null $P5002, vivi_7622043
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7622043:
    set $P5001, $P5002
  fallback2041:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_120_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1094
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_121_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx766_tgt
    .local int rx766_pos
    .local int rx766_off
    .local int rx766_eos
    .local int rx766_rep
    .local pmc rx766_cur
    .local pmc rx766_curclass
    .local pmc rx766_bstack
    .local pmc rx766_cstack
    (rx766_cur, rx766_tgt, rx766_pos, rx766_curclass, rx766_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx766_cur
    length rx766_eos, rx766_tgt
    eq $I19, 1, rx766_restart2049
    gt rx766_pos, rx766_eos, rx766_fail2050
    repr_get_attr_int $I11, self, rx766_curclass, "$!from"
    ne $I11, -1, rxscan767_done2056
    goto rxscan767_scan2055
  rxscan767_loop2054:
    inc rx766_pos
    gt rx766_pos, rx766_eos, rx766_fail2050
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!from", rx766_pos
  rxscan767_scan2055:
    nqp_rxmark rx766_bstack, rxscan767_loop2054, rx766_pos, 0
  rxscan767_done2056:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    store_lex unicode:"$\x{a2}", rx766_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx766_bstack, rxcap768_fail2058, rx766_pos, 0
    add $I11, rx766_pos, 5
    gt $I11, rx766_eos, rx766_fail2050
    substr $S10, rx766_tgt, rx766_pos, 5
    ne $S10, ucs4:"multi", rx766_fail2050
    add rx766_pos, 5
    nqp_rxpeek $I19, rx766_bstack, rxcap768_fail2058
    inc $I19
    set $I11, rx766_bstack[$I19]
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx766_pos)
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "sym")
    goto rxcap768_done2057
  rxcap768_fail2058:
    goto rx766_fail2050
  rxcap768_done2057:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2050
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
  alt770_02061:
    nqp_rxmark rx766_bstack, alt770_12063, rx766_pos, 0
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2050
    nqp_rxmark rx766_bstack, rxsubrule771_pass2062, -1, 0
  rxsubrule771_pass2062:
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    goto alt770_end2060
  alt770_12063:
    nqp_rxmark rx766_bstack, alt770_22065, rx766_pos, 0
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2050
    nqp_rxmark rx766_bstack, rxsubrule772_pass2064, -1, 0
  rxsubrule772_pass2064:
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    goto alt770_end2060
  alt770_22065:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2050
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
  alt770_end2060:
    rx766_cur."!cursor_pass"(rx766_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx766_cur)
  rx766_restart2049:
    repr_get_attr_obj rx766_cstack, rx766_cur, rx766_curclass, "$!cstack"
  rx766_fail2050:
    unless rx766_bstack, rx766_done2048
    pop $I19, rx766_bstack
    if_null rx766_cstack, rx766_cstack_done2053
    unless rx766_cstack, rx766_cstack_done2053
    dec $I19
    set $P11, rx766_cstack[$I19]
  rx766_cstack_done2053:
    pop rx766_rep, rx766_bstack
    pop rx766_pos, rx766_bstack
    pop $I19, rx766_bstack
    lt rx766_pos, -1, rx766_done2048
    lt rx766_pos, 0, rx766_fail2050
    eq $I19, 0, rx766_fail2050
    nqp_islist $I20, rx766_cstack
    unless $I20, rx766_jump2051
    elements $I18, rx766_bstack
    le $I18, 0, rx766_cut2052
    dec $I18
    set $I18, rx766_bstack[$I18]
  rx766_cut2052:
    assign rx766_cstack, $I18
  rx766_jump2051:
    jump $I19
  rx766_done2048:
    rx766_cur."!cursor_fail"()
    .return (rx766_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_122_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1100
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx774_tgt
    .local int rx774_pos
    .local int rx774_off
    .local int rx774_eos
    .local int rx774_rep
    .local pmc rx774_cur
    .local pmc rx774_curclass
    .local pmc rx774_bstack
    .local pmc rx774_cstack
    (rx774_cur, rx774_tgt, rx774_pos, rx774_curclass, rx774_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx774_cur
    length rx774_eos, rx774_tgt
    eq $I19, 1, rx774_restart2069
    gt rx774_pos, rx774_eos, rx774_fail2070
    repr_get_attr_int $I11, self, rx774_curclass, "$!from"
    ne $I11, -1, rxscan775_done2076
    goto rxscan775_scan2075
  rxscan775_loop2074:
    inc rx774_pos
    gt rx774_pos, rx774_eos, rx774_fail2070
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!from", rx774_pos
  rxscan775_scan2075:
    nqp_rxmark rx774_bstack, rxscan775_loop2074, rx774_pos, 0
  rxscan775_done2076:
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    store_lex unicode:"$\x{a2}", rx774_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx774_bstack, rxcap776_fail2078, rx774_pos, 0
    add $I11, rx774_pos, 5
    gt $I11, rx774_eos, rx774_fail2070
    substr $S10, rx774_tgt, rx774_pos, 5
    ne $S10, ucs4:"proto", rx774_fail2070
    add rx774_pos, 5
    nqp_rxpeek $I19, rx774_bstack, rxcap776_fail2078
    inc $I19
    set $I11, rx774_bstack[$I19]
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx774_pos)
    rx774_cstack = rx774_cur."!cursor_capture"($P11, "sym")
    goto rxcap776_done2077
  rxcap776_fail2078:
    goto rx774_fail2070
  rxcap776_done2077:
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."ws"()
    repr_get_attr_int $I11, $P11, rx774_curclass, "$!pos"
    lt $I11, 0, rx774_fail2070
    repr_get_attr_int rx774_pos, $P11, rx774_curclass, "$!pos"
  alt778_02081:
    nqp_rxmark rx774_bstack, alt778_12083, rx774_pos, 0
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx774_curclass, "$!pos"
    lt $I11, 0, rx774_fail2070
    nqp_rxmark rx774_bstack, rxsubrule779_pass2082, -1, 0
  rxsubrule779_pass2082:
    rx774_cstack = rx774_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx774_pos, $P11, rx774_curclass, "$!pos"
    goto alt778_end2080
  alt778_12083:
    nqp_rxmark rx774_bstack, alt778_22085, rx774_pos, 0
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx774_curclass, "$!pos"
    lt $I11, 0, rx774_fail2070
    nqp_rxmark rx774_bstack, rxsubrule780_pass2084, -1, 0
  rxsubrule780_pass2084:
    rx774_cstack = rx774_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx774_pos, $P11, rx774_curclass, "$!pos"
    goto alt778_end2080
  alt778_22085:
    repr_bind_attr_int rx774_cur, rx774_curclass, "$!pos", rx774_pos
    $P11 = rx774_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx774_curclass, "$!pos"
    lt $I11, 0, rx774_fail2070
    repr_get_attr_int rx774_pos, $P11, rx774_curclass, "$!pos"
  alt778_end2080:
    rx774_cur."!cursor_pass"(rx774_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx774_cur)
  rx774_restart2069:
    repr_get_attr_obj rx774_cstack, rx774_cur, rx774_curclass, "$!cstack"
  rx774_fail2070:
    unless rx774_bstack, rx774_done2068
    pop $I19, rx774_bstack
    if_null rx774_cstack, rx774_cstack_done2073
    unless rx774_cstack, rx774_cstack_done2073
    dec $I19
    set $P11, rx774_cstack[$I19]
  rx774_cstack_done2073:
    pop rx774_rep, rx774_bstack
    pop rx774_pos, rx774_bstack
    pop $I19, rx774_bstack
    lt rx774_pos, -1, rx774_done2068
    lt rx774_pos, 0, rx774_fail2070
    eq $I19, 0, rx774_fail2070
    nqp_islist $I20, rx774_cstack
    unless $I20, rx774_jump2071
    elements $I18, rx774_bstack
    le $I18, 0, rx774_cut2072
    dec $I18
    set $I18, rx774_bstack[$I18]
  rx774_cut2072:
    assign rx774_cstack, $I18
  rx774_jump2071:
    jump $I19
  rx774_done2068:
    rx774_cur."!cursor_fail"()
    .return (rx774_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_123_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx782_tgt
    .local int rx782_pos
    .local int rx782_off
    .local int rx782_eos
    .local int rx782_rep
    .local pmc rx782_cur
    .local pmc rx782_curclass
    .local pmc rx782_bstack
    .local pmc rx782_cstack
    (rx782_cur, rx782_tgt, rx782_pos, rx782_curclass, rx782_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx782_cur
    length rx782_eos, rx782_tgt
    eq $I19, 1, rx782_restart2089
    gt rx782_pos, rx782_eos, rx782_fail2090
    repr_get_attr_int $I11, self, rx782_curclass, "$!from"
    ne $I11, -1, rxscan783_done2096
    goto rxscan783_scan2095
  rxscan783_loop2094:
    inc rx782_pos
    gt rx782_pos, rx782_eos, rx782_fail2090
    repr_bind_attr_int rx782_cur, rx782_curclass, "$!from", rx782_pos
  rxscan783_scan2095:
    nqp_rxmark rx782_bstack, rxscan783_loop2094, rx782_pos, 0
  rxscan783_done2096:
    repr_bind_attr_int rx782_cur, rx782_curclass, "$!pos", rx782_pos
    store_lex unicode:"$\x{a2}", rx782_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx782_cur, rx782_curclass, "$!pos", rx782_pos
    $P11 = rx782_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx782_curclass, "$!pos"
    lt $I11, 0, rx782_fail2090
    nqp_rxmark rx782_bstack, rxsubrule784_pass2097, -1, 0
  rxsubrule784_pass2097:
    rx782_cstack = rx782_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx782_pos, $P11, rx782_curclass, "$!pos"
    rx782_cur."!cursor_pass"(rx782_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx782_cur)
  rx782_restart2089:
    repr_get_attr_obj rx782_cstack, rx782_cur, rx782_curclass, "$!cstack"
  rx782_fail2090:
    unless rx782_bstack, rx782_done2088
    pop $I19, rx782_bstack
    if_null rx782_cstack, rx782_cstack_done2093
    unless rx782_cstack, rx782_cstack_done2093
    dec $I19
    set $P11, rx782_cstack[$I19]
  rx782_cstack_done2093:
    pop rx782_rep, rx782_bstack
    pop rx782_pos, rx782_bstack
    pop $I19, rx782_bstack
    lt rx782_pos, -1, rx782_done2088
    lt rx782_pos, 0, rx782_fail2090
    eq $I19, 0, rx782_fail2090
    nqp_islist $I20, rx782_cstack
    unless $I20, rx782_jump2091
    elements $I18, rx782_bstack
    le $I18, 0, rx782_cut2092
    dec $I18
    set $I18, rx782_bstack[$I18]
  rx782_cut2092:
    assign rx782_cstack, $I18
  rx782_jump2091:
    jump $I19
  rx782_done2088:
    rx782_cur."!cursor_fail"()
    .return (rx782_cur) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_124_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1110
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_399_1360232768.755' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_125_1360232768.755' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx785_tgt
    .local int rx785_pos
    .local int rx785_off
    .local int rx785_eos
    .local int rx785_rep
    .local pmc rx785_cur
    .local pmc rx785_curclass
    .local pmc rx785_bstack
    .local pmc rx785_cstack
    (rx785_cur, rx785_tgt, rx785_pos, rx785_curclass, rx785_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx785_cur
    length rx785_eos, rx785_tgt
    eq $I19, 1, rx785_restart2100
    gt rx785_pos, rx785_eos, rx785_fail2101
    repr_get_attr_int $I11, self, rx785_curclass, "$!from"
    ne $I11, -1, rxscan786_done2107
    goto rxscan786_scan2106
  rxscan786_loop2105:
    inc rx785_pos
    gt rx785_pos, rx785_eos, rx785_fail2101
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!from", rx785_pos
  rxscan786_scan2106:
    nqp_rxmark rx785_bstack, rxscan786_loop2105, rx785_pos, 0
  rxscan786_done2107:
    nqp_rxmark rx785_bstack, rxquantr787_done2109, rx785_pos, 0
  rxquantr787_loop2108:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    store_lex unicode:"$\x{a2}", rx785_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_399_1360232768.755' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx785_fail2101
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2101
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2101
    nqp_rxmark rx785_bstack, rxsubrule790_pass2114, -1, 0
  rxsubrule790_pass2114:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2101
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2101
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:":", rx785_fail2101
    add rx785_pos, 1
    nqp_rxpeek $I19, rx785_bstack, rxquantr787_done2109
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr787_done2109
    inc rx785_rep
  rxquantr787_done2109:
    nqp_rxmark rx785_bstack, rxquantr792_done2117, rx785_pos, 0
  rxquantr792_loop2116:
    nqp_rxmark rx785_bstack, rxquantr793_done2119, rx785_pos, 0
  rxquantr793_loop2118:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2101
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2101
    nqp_rxmark rx785_bstack, rxsubrule795_pass2121, -1, 0
  rxsubrule795_pass2121:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2101
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt797_02124
    nqp_push_label $P11, alt797_12125
    nqp_rxmark rx785_bstack, alt797_end2123, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__26_1360232770.984", $P11)
    goto rx785_fail2101
  alt797_02124:
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2101
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:",", rx785_fail2101
    add rx785_pos, 1
    goto alt797_end2123
  alt797_12125:
    .const 'Sub' $P5004 = 'cuid_125_1360232768.755' 
    capture_lex $P5004
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2101
    nqp_rxmark rx785_bstack, rxsubrule802_pass2141, -1, 0
  rxsubrule802_pass2141:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt797_end2123
  alt797_end2123:
    nqp_rxcommit rx785_bstack, alt797_end2123
    nqp_rxpeek $I19, rx785_bstack, rxquantr793_done2119
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr793_done2119
    inc rx785_rep
    nqp_rxmark rx785_bstack, rxquantr793_done2119, rx785_pos, rx785_rep
    goto rxquantr793_loop2118
  rxquantr793_done2119:
    nqp_rxpeek $I19, rx785_bstack, rxquantr792_done2117
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr792_done2117
    inc rx785_rep
  rxquantr792_done2117:
    rx785_cur."!cursor_pass"(rx785_pos, "signature", 'backtrack'=>1)
    .return (rx785_cur)
  rx785_restart2100:
    repr_get_attr_obj rx785_cstack, rx785_cur, rx785_curclass, "$!cstack"
  rx785_fail2101:
    unless rx785_bstack, rx785_done2099
    pop $I19, rx785_bstack
    if_null rx785_cstack, rx785_cstack_done2104
    unless rx785_cstack, rx785_cstack_done2104
    dec $I19
    set $P11, rx785_cstack[$I19]
  rx785_cstack_done2104:
    pop rx785_rep, rx785_bstack
    pop rx785_pos, rx785_bstack
    pop $I19, rx785_bstack
    lt rx785_pos, -1, rx785_done2099
    lt rx785_pos, 0, rx785_fail2101
    eq $I19, 0, rx785_fail2101
    nqp_islist $I20, rx785_cstack
    unless $I20, rx785_jump2102
    elements $I18, rx785_bstack
    le $I18, 0, rx785_cut2103
    dec $I18
    set $I18, rx785_bstack[$I18]
  rx785_cut2103:
    assign rx785_cstack, $I18
  rx785_jump2102:
    jump $I19
  rx785_done2099:
    rx785_cur."!cursor_fail"()
    .return (rx785_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1360232768.755") :anon :lex :outer("cuid_124_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1111

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2110
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2111
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback2111:
    unless_null $P5002, vivi_7882112
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7882112:
    set $P5001, $P5002
  fallback2110:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_125_1360232768.755") :anon :lex :outer("cuid_124_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx798_tgt
    .local int rx798_pos
    .local int rx798_off
    .local int rx798_eos
    .local int rx798_rep
    .local pmc rx798_cur
    .local pmc rx798_curclass
    .local pmc rx798_bstack
    .local pmc rx798_cstack
    (rx798_cur, rx798_tgt, rx798_pos, rx798_curclass, rx798_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx798_cur
    length rx798_eos, rx798_tgt
    eq $I19, 1, rx798_restart2128
    gt rx798_pos, rx798_eos, rx798_fail2129
    repr_get_attr_int $I11, self, rx798_curclass, "$!from"
    ne $I11, -1, rxscan799_done2135
    goto rxscan799_scan2134
  rxscan799_loop2133:
    inc rx798_pos
    gt rx798_pos, rx798_eos, rx798_fail2129
    repr_bind_attr_int rx798_cur, rx798_curclass, "$!from", rx798_pos
  rxscan799_scan2134:
    nqp_rxmark rx798_bstack, rxscan799_loop2133, rx798_pos, 0
  rxscan799_done2135:
    nqp_rxmark rx798_bstack, rxquantr800_done2137, rx798_pos, 0
  rxquantr800_loop2136:
    ge rx798_pos, rx798_eos, rx798_fail2129
    is_cclass $I11, .CCLASS_WHITESPACE, rx798_tgt, rx798_pos
    unless $I11, rx798_fail2129
    add rx798_pos, 1
    nqp_rxpeek $I19, rx798_bstack, rxquantr800_done2137
    inc $I19
    inc $I19
    set rx798_rep, rx798_bstack[$I19]
    nqp_rxcommit rx798_bstack, rxquantr800_done2137
    inc rx798_rep
    nqp_rxmark rx798_bstack, rxquantr800_done2137, rx798_pos, rx798_rep
    goto rxquantr800_loop2136
  rxquantr800_done2137:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt801_02139
    nqp_push_label $P11, alt801_12140
    nqp_rxmark rx798_bstack, alt801_end2138, -1, 0
    rx798_cur."!alt"(rx798_pos, "alt_nfa__25_1360232770.979", $P11)
    goto rx798_fail2129
  alt801_02139:
    add $I11, rx798_pos, 1
    gt $I11, rx798_eos, rx798_fail2129
    substr $S10, rx798_tgt, rx798_pos, 1
    ne $S10, ucs4:")", rx798_fail2129
    add rx798_pos, 1
    goto alt801_end2138
  alt801_12140:
    add $I11, rx798_pos, 1
    gt $I11, rx798_eos, rx798_fail2129
    substr $S10, rx798_tgt, rx798_pos, 1
    ne $S10, ucs4:"{", rx798_fail2129
    add rx798_pos, 1
    goto alt801_end2138
  alt801_end2138:
    nqp_rxcommit rx798_bstack, alt801_end2138
    rx798_cur."!cursor_pass"(rx798_pos, 'backtrack'=>1)
    .return (rx798_cur)
  rx798_restart2128:
    repr_get_attr_obj rx798_cstack, rx798_cur, rx798_curclass, "$!cstack"
  rx798_fail2129:
    unless rx798_bstack, rx798_done2127
    pop $I19, rx798_bstack
    if_null rx798_cstack, rx798_cstack_done2132
    unless rx798_cstack, rx798_cstack_done2132
    dec $I19
    set $P11, rx798_cstack[$I19]
  rx798_cstack_done2132:
    pop rx798_rep, rx798_bstack
    pop rx798_pos, rx798_bstack
    pop $I19, rx798_bstack
    lt rx798_pos, -1, rx798_done2127
    lt rx798_pos, 0, rx798_fail2129
    eq $I19, 0, rx798_fail2129
    nqp_islist $I20, rx798_cstack
    unless $I20, rx798_jump2130
    elements $I18, rx798_bstack
    le $I18, 0, rx798_cut2131
    dec $I18
    set $I18, rx798_bstack[$I18]
  rx798_cut2131:
    assign rx798_cstack, $I18
  rx798_jump2130:
    jump $I19
  rx798_done2127:
    rx798_cur."!cursor_fail"()
    .return (rx798_cur) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_126_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1115
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx803_tgt
    .local int rx803_pos
    .local int rx803_off
    .local int rx803_eos
    .local int rx803_rep
    .local pmc rx803_cur
    .local pmc rx803_curclass
    .local pmc rx803_bstack
    .local pmc rx803_cstack
    (rx803_cur, rx803_tgt, rx803_pos, rx803_curclass, rx803_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx803_cur
    length rx803_eos, rx803_tgt
    eq $I19, 1, rx803_restart2144
    gt rx803_pos, rx803_eos, rx803_fail2145
    repr_get_attr_int $I11, self, rx803_curclass, "$!from"
    ne $I11, -1, rxscan804_done2151
    goto rxscan804_scan2150
  rxscan804_loop2149:
    inc rx803_pos
    gt rx803_pos, rx803_eos, rx803_fail2145
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!from", rx803_pos
  rxscan804_scan2150:
    nqp_rxmark rx803_bstack, rxscan804_loop2149, rx803_pos, 0
  rxscan804_done2151:
    nqp_rxmark rx803_bstack, rxquantr805_done2153, rx803_pos, 0
  rxquantr805_loop2152:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."typename"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2145
    nqp_rxmark rx803_bstack, rxsubrule806_pass2154, -1, 0
  rxsubrule806_pass2154:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    nqp_rxmark rx803_bstack, rxquantr807_done2156, rx803_pos, 0
  rxquantr807_loop2155:
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2145
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:":", rx803_fail2145
    add rx803_pos, 1
    nqp_rxmark rx803_bstack, rxcap808_fail2158, rx803_pos, 0
    ge rx803_pos, rx803_eos, rx803_fail2145
    substr $S11, rx803_tgt, rx803_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx803_fail2145
    inc rx803_pos
    nqp_rxpeek $I19, rx803_bstack, rxcap808_fail2158
    inc $I19
    set $I11, rx803_bstack[$I19]
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx803_pos)
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "definedness")
    goto rxcap808_done2157
  rxcap808_fail2158:
    goto rx803_fail2145
  rxcap808_done2157:
    nqp_rxpeek $I19, rx803_bstack, rxquantr807_done2156
    inc $I19
    inc $I19
    set rx803_rep, rx803_bstack[$I19]
    nqp_rxcommit rx803_bstack, rxquantr807_done2156
    inc rx803_rep
  rxquantr807_done2156:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."ws"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2145
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    nqp_rxpeek $I19, rx803_bstack, rxquantr805_done2153
    inc $I19
    inc $I19
    set rx803_rep, rx803_bstack[$I19]
    nqp_rxcommit rx803_bstack, rxquantr805_done2153
    inc rx803_rep
    nqp_rxmark rx803_bstack, rxquantr805_done2153, rx803_pos, rx803_rep
    goto rxquantr805_loop2152
  rxquantr805_done2153:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt810_02161
    nqp_push_label $P11, alt810_12165
    nqp_rxmark rx803_bstack, alt810_end2160, -1, 0
    rx803_cur."!alt"(rx803_pos, "alt_nfa__29_1360232771.01", $P11)
    goto rx803_fail2145
  alt810_02161:
    nqp_rxmark rx803_bstack, rxcap811_fail2163, rx803_pos, 0
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2145
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:"*", rx803_fail2145
    add rx803_pos, 1
    nqp_rxpeek $I19, rx803_bstack, rxcap811_fail2163
    inc $I19
    set $I11, rx803_bstack[$I19]
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx803_pos)
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "quant")
    goto rxcap811_done2162
  rxcap811_fail2163:
    goto rx803_fail2145
  rxcap811_done2162:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2145
    nqp_rxmark rx803_bstack, rxsubrule812_pass2164, -1, 0
  rxsubrule812_pass2164:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    goto alt810_end2160
  alt810_12165:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt813_02167
    nqp_push_label $P11, alt813_12169
    nqp_rxmark rx803_bstack, alt813_end2166, -1, 0
    rx803_cur."!alt"(rx803_pos, "alt_nfa__27_1360232771.009", $P11)
    goto rx803_fail2145
  alt813_02167:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2145
    nqp_rxmark rx803_bstack, rxsubrule814_pass2168, -1, 0
  rxsubrule814_pass2168:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    goto alt813_end2166
  alt813_12169:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2145
    nqp_rxmark rx803_bstack, rxsubrule815_pass2170, -1, 0
  rxsubrule815_pass2170:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    goto alt813_end2166
  alt813_end2166:
    nqp_rxcommit rx803_bstack, alt813_end2166
    nqp_rxmark rx803_bstack, rxcap816_fail2172, rx803_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt817_02174
    nqp_push_label $P11, alt817_12175
    nqp_push_label $P11, alt817_22176
    nqp_rxmark rx803_bstack, alt817_end2173, -1, 0
    rx803_cur."!alt"(rx803_pos, "alt_nfa__28_1360232771.01", $P11)
    goto rx803_fail2145
  alt817_02174:
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2145
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:"?", rx803_fail2145
    add rx803_pos, 1
    goto alt817_end2173
  alt817_12175:
    add $I11, rx803_pos, 1
    gt $I11, rx803_eos, rx803_fail2145
    substr $S10, rx803_tgt, rx803_pos, 1
    ne $S10, ucs4:"!", rx803_fail2145
    add rx803_pos, 1
    goto alt817_end2173
  alt817_22176:
    goto alt817_end2173
  alt817_end2173:
    nqp_rxcommit rx803_bstack, alt817_end2173
    nqp_rxpeek $I19, rx803_bstack, rxcap816_fail2172
    inc $I19
    set $I11, rx803_bstack[$I19]
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx803_pos)
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "quant")
    goto rxcap816_done2171
  rxcap816_fail2172:
    goto rx803_fail2145
  rxcap816_done2171:
    goto alt810_end2160
  alt810_end2160:
    nqp_rxcommit rx803_bstack, alt810_end2160
    nqp_rxmark rx803_bstack, rxquantr819_done2179, rx803_pos, 0
  rxquantr819_loop2178:
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2145
    goto rxsubrule820_pass2180
  rxsubrule820_back2181:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail2145
  rxsubrule820_pass2180:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule820_back2181
    push rx803_bstack, $I11
    push rx803_bstack, 0
    push rx803_bstack, rx803_pos
    elements $I11, rx803_cstack
    push rx803_bstack, $I11
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    nqp_rxpeek $I19, rx803_bstack, rxquantr819_done2179
    inc $I19
    inc $I19
    set rx803_rep, rx803_bstack[$I19]
    nqp_rxcommit rx803_bstack, rxquantr819_done2179
    inc rx803_rep
  rxquantr819_done2179:
    rx803_cur."!cursor_pass"(rx803_pos, "parameter", 'backtrack'=>1)
    .return (rx803_cur)
  rx803_restart2144:
    repr_get_attr_obj rx803_cstack, rx803_cur, rx803_curclass, "$!cstack"
  rx803_fail2145:
    unless rx803_bstack, rx803_done2143
    pop $I19, rx803_bstack
    if_null rx803_cstack, rx803_cstack_done2148
    unless rx803_cstack, rx803_cstack_done2148
    dec $I19
    set $P11, rx803_cstack[$I19]
  rx803_cstack_done2148:
    pop rx803_rep, rx803_bstack
    pop rx803_pos, rx803_bstack
    pop $I19, rx803_bstack
    lt rx803_pos, -1, rx803_done2143
    lt rx803_pos, 0, rx803_fail2145
    eq $I19, 0, rx803_fail2145
    nqp_islist $I20, rx803_cstack
    unless $I20, rx803_jump2146
    elements $I18, rx803_bstack
    le $I18, 0, rx803_cut2147
    dec $I18
    set $I18, rx803_bstack[$I18]
  rx803_cut2147:
    assign rx803_cstack, $I18
  rx803_jump2146:
    jump $I19
  rx803_done2143:
    rx803_cur."!cursor_fail"()
    .return (rx803_cur) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_127_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1124
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx821_tgt
    .local int rx821_pos
    .local int rx821_off
    .local int rx821_eos
    .local int rx821_rep
    .local pmc rx821_cur
    .local pmc rx821_curclass
    .local pmc rx821_bstack
    .local pmc rx821_cstack
    (rx821_cur, rx821_tgt, rx821_pos, rx821_curclass, rx821_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx821_cur
    length rx821_eos, rx821_tgt
    eq $I19, 1, rx821_restart2184
    gt rx821_pos, rx821_eos, rx821_fail2185
    repr_get_attr_int $I11, self, rx821_curclass, "$!from"
    ne $I11, -1, rxscan822_done2191
    goto rxscan822_scan2190
  rxscan822_loop2189:
    inc rx821_pos
    gt rx821_pos, rx821_eos, rx821_fail2185
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!from", rx821_pos
  rxscan822_scan2190:
    nqp_rxmark rx821_bstack, rxscan822_loop2189, rx821_pos, 0
  rxscan822_done2191:
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!pos", rx821_pos
    $P11 = rx821_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx821_curclass, "$!pos"
    lt $I11, 0, rx821_fail2185
    nqp_rxmark rx821_bstack, rxsubrule823_pass2192, -1, 0
  rxsubrule823_pass2192:
    rx821_cstack = rx821_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx821_pos, $P11, rx821_curclass, "$!pos"
    nqp_rxmark rx821_bstack, rxquantr824_done2194, rx821_pos, 0
  rxquantr824_loop2193:
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!pos", rx821_pos
    $P11 = rx821_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx821_curclass, "$!pos"
    lt $I11, 0, rx821_fail2185
    goto rxsubrule825_pass2195
  rxsubrule825_back2196:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx821_curclass, "$!pos"
    lt $I11, 0, rx821_fail2185
  rxsubrule825_pass2195:
    rx821_cstack = rx821_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule825_back2196
    push rx821_bstack, $I11
    push rx821_bstack, 0
    push rx821_bstack, rx821_pos
    elements $I11, rx821_cstack
    push rx821_bstack, $I11
    repr_get_attr_int rx821_pos, $P11, rx821_curclass, "$!pos"
    nqp_rxpeek $I19, rx821_bstack, rxquantr824_done2194
    inc $I19
    inc $I19
    set rx821_rep, rx821_bstack[$I19]
    nqp_rxcommit rx821_bstack, rxquantr824_done2194
    inc rx821_rep
  rxquantr824_done2194:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt826_02198
    nqp_push_label $P11, alt826_12200
    nqp_rxmark rx821_bstack, alt826_end2197, -1, 0
    rx821_cur."!alt"(rx821_pos, "alt_nfa__30_1360232771.02", $P11)
    goto rx821_fail2185
  alt826_02198:
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!pos", rx821_pos
    $P11 = rx821_cur."ident"()
    repr_get_attr_int $I11, $P11, rx821_curclass, "$!pos"
    lt $I11, 0, rx821_fail2185
    nqp_rxmark rx821_bstack, rxsubrule827_pass2199, -1, 0
  rxsubrule827_pass2199:
    rx821_cstack = rx821_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx821_pos, $P11, rx821_curclass, "$!pos"
    goto alt826_end2197
  alt826_12200:
    nqp_rxmark rx821_bstack, rxcap828_fail2202, rx821_pos, 0
    ge rx821_pos, rx821_eos, rx821_fail2185
    substr $S11, rx821_tgt, rx821_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx821_fail2185
    inc rx821_pos
    nqp_rxpeek $I19, rx821_bstack, rxcap828_fail2202
    inc $I19
    set $I11, rx821_bstack[$I19]
    repr_bind_attr_int rx821_cur, rx821_curclass, "$!pos", rx821_pos
    $P11 = rx821_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx821_pos)
    rx821_cstack = rx821_cur."!cursor_capture"($P11, "name")
    goto rxcap828_done2201
  rxcap828_fail2202:
    goto rx821_fail2185
  rxcap828_done2201:
    goto alt826_end2197
  alt826_end2197:
    nqp_rxcommit rx821_bstack, alt826_end2197
    rx821_cur."!cursor_pass"(rx821_pos, "param_var", 'backtrack'=>1)
    .return (rx821_cur)
  rx821_restart2184:
    repr_get_attr_obj rx821_cstack, rx821_cur, rx821_curclass, "$!cstack"
  rx821_fail2185:
    unless rx821_bstack, rx821_done2183
    pop $I19, rx821_bstack
    if_null rx821_cstack, rx821_cstack_done2188
    unless rx821_cstack, rx821_cstack_done2188
    dec $I19
    set $P11, rx821_cstack[$I19]
  rx821_cstack_done2188:
    pop rx821_rep, rx821_bstack
    pop rx821_pos, rx821_bstack
    pop $I19, rx821_bstack
    lt rx821_pos, -1, rx821_done2183
    lt rx821_pos, 0, rx821_fail2185
    eq $I19, 0, rx821_fail2185
    nqp_islist $I20, rx821_cstack
    unless $I20, rx821_jump2186
    elements $I18, rx821_bstack
    le $I18, 0, rx821_cut2187
    dec $I18
    set $I18, rx821_bstack[$I18]
  rx821_cut2187:
    assign rx821_cstack, $I18
  rx821_jump2186:
    jump $I19
  rx821_done2183:
    rx821_cur."!cursor_fail"()
    .return (rx821_cur) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_128_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1129
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx829_tgt
    .local int rx829_pos
    .local int rx829_off
    .local int rx829_eos
    .local int rx829_rep
    .local pmc rx829_cur
    .local pmc rx829_curclass
    .local pmc rx829_bstack
    .local pmc rx829_cstack
    (rx829_cur, rx829_tgt, rx829_pos, rx829_curclass, rx829_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx829_cur
    length rx829_eos, rx829_tgt
    eq $I19, 1, rx829_restart2205
    gt rx829_pos, rx829_eos, rx829_fail2206
    repr_get_attr_int $I11, self, rx829_curclass, "$!from"
    ne $I11, -1, rxscan830_done2212
    goto rxscan830_scan2211
  rxscan830_loop2210:
    inc rx829_pos
    gt rx829_pos, rx829_eos, rx829_fail2206
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!from", rx829_pos
  rxscan830_scan2211:
    nqp_rxmark rx829_bstack, rxscan830_loop2210, rx829_pos, 0
  rxscan830_done2212:
    add $I11, rx829_pos, 1
    gt $I11, rx829_eos, rx829_fail2206
    substr $S10, rx829_tgt, rx829_pos, 1
    ne $S10, ucs4:":", rx829_fail2206
    add rx829_pos, 1
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!pos", rx829_pos
    $P11 = rx829_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx829_curclass, "$!pos"
    lt $I11, 0, rx829_fail2206
    nqp_rxmark rx829_bstack, rxsubrule831_pass2213, -1, 0
  rxsubrule831_pass2213:
    rx829_cstack = rx829_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx829_pos, $P11, rx829_curclass, "$!pos"
    rx829_cur."!cursor_pass"(rx829_pos, "named_param", 'backtrack'=>1)
    .return (rx829_cur)
  rx829_restart2205:
    repr_get_attr_obj rx829_cstack, rx829_cur, rx829_curclass, "$!cstack"
  rx829_fail2206:
    unless rx829_bstack, rx829_done2204
    pop $I19, rx829_bstack
    if_null rx829_cstack, rx829_cstack_done2209
    unless rx829_cstack, rx829_cstack_done2209
    dec $I19
    set $P11, rx829_cstack[$I19]
  rx829_cstack_done2209:
    pop rx829_rep, rx829_bstack
    pop rx829_pos, rx829_bstack
    pop $I19, rx829_bstack
    lt rx829_pos, -1, rx829_done2204
    lt rx829_pos, 0, rx829_fail2206
    eq $I19, 0, rx829_fail2206
    nqp_islist $I20, rx829_cstack
    unless $I20, rx829_jump2207
    elements $I18, rx829_bstack
    le $I18, 0, rx829_cut2208
    dec $I18
    set $I18, rx829_bstack[$I18]
  rx829_cut2208:
    assign rx829_cstack, $I18
  rx829_jump2207:
    jump $I19
  rx829_done2204:
    rx829_cur."!cursor_fail"()
    .return (rx829_cur) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_129_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx832_tgt
    .local int rx832_pos
    .local int rx832_off
    .local int rx832_eos
    .local int rx832_rep
    .local pmc rx832_cur
    .local pmc rx832_curclass
    .local pmc rx832_bstack
    .local pmc rx832_cstack
    (rx832_cur, rx832_tgt, rx832_pos, rx832_curclass, rx832_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx832_cur
    length rx832_eos, rx832_tgt
    eq $I19, 1, rx832_restart2216
    gt rx832_pos, rx832_eos, rx832_fail2217
    repr_get_attr_int $I11, self, rx832_curclass, "$!from"
    ne $I11, -1, rxscan833_done2223
    goto rxscan833_scan2222
  rxscan833_loop2221:
    inc rx832_pos
    gt rx832_pos, rx832_eos, rx832_fail2217
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!from", rx832_pos
  rxscan833_scan2222:
    nqp_rxmark rx832_bstack, rxscan833_loop2221, rx832_pos, 0
  rxscan833_done2223:
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."ws"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2217
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    add $I11, rx832_pos, 1
    gt $I11, rx832_eos, rx832_fail2217
    substr $S10, rx832_tgt, rx832_pos, 1
    ne $S10, ucs4:"=", rx832_fail2217
    add rx832_pos, 1
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."ws"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2217
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2217
    nqp_rxmark rx832_bstack, rxsubrule836_pass2226, -1, 0
  rxsubrule836_pass2226:
    rx832_cstack = rx832_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."ws"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2217
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    rx832_cur."!cursor_pass"(rx832_pos, "default_value", 'backtrack'=>1)
    .return (rx832_cur)
  rx832_restart2216:
    repr_get_attr_obj rx832_cstack, rx832_cur, rx832_curclass, "$!cstack"
  rx832_fail2217:
    unless rx832_bstack, rx832_done2215
    pop $I19, rx832_bstack
    if_null rx832_cstack, rx832_cstack_done2220
    unless rx832_cstack, rx832_cstack_done2220
    dec $I19
    set $P11, rx832_cstack[$I19]
  rx832_cstack_done2220:
    pop rx832_rep, rx832_bstack
    pop rx832_pos, rx832_bstack
    pop $I19, rx832_bstack
    lt rx832_pos, -1, rx832_done2215
    lt rx832_pos, 0, rx832_fail2217
    eq $I19, 0, rx832_fail2217
    nqp_islist $I20, rx832_cstack
    unless $I20, rx832_jump2218
    elements $I18, rx832_bstack
    le $I18, 0, rx832_cut2219
    dec $I18
    set $I18, rx832_bstack[$I18]
  rx832_cut2219:
    assign rx832_cstack, $I18
  rx832_jump2218:
    jump $I19
  rx832_done2215:
    rx832_cur."!cursor_fail"()
    .return (rx832_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_130_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx838_tgt
    .local int rx838_pos
    .local int rx838_off
    .local int rx838_eos
    .local int rx838_rep
    .local pmc rx838_cur
    .local pmc rx838_curclass
    .local pmc rx838_bstack
    .local pmc rx838_cstack
    (rx838_cur, rx838_tgt, rx838_pos, rx838_curclass, rx838_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx838_cur
    length rx838_eos, rx838_tgt
    eq $I19, 1, rx838_restart2230
    gt rx838_pos, rx838_eos, rx838_fail2231
    repr_get_attr_int $I11, self, rx838_curclass, "$!from"
    ne $I11, -1, rxscan839_done2237
    goto rxscan839_scan2236
  rxscan839_loop2235:
    inc rx838_pos
    gt rx838_pos, rx838_eos, rx838_fail2231
    repr_bind_attr_int rx838_cur, rx838_curclass, "$!from", rx838_pos
  rxscan839_scan2236:
    nqp_rxmark rx838_bstack, rxscan839_loop2235, rx838_pos, 0
  rxscan839_done2237:
    repr_bind_attr_int rx838_cur, rx838_curclass, "$!pos", rx838_pos
    $P11 = rx838_cur."ws"()
    repr_get_attr_int $I11, $P11, rx838_curclass, "$!pos"
    lt $I11, 0, rx838_fail2231
    repr_get_attr_int rx838_pos, $P11, rx838_curclass, "$!pos"
    repr_bind_attr_int rx838_cur, rx838_curclass, "$!pos", rx838_pos
    $P11 = rx838_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx838_curclass, "$!pos"
    lt $I11, 0, rx838_fail2231
    nqp_rxmark rx838_bstack, rxsubrule841_pass2239, -1, 0
  rxsubrule841_pass2239:
    rx838_cstack = rx838_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx838_pos, $P11, rx838_curclass, "$!pos"
    repr_bind_attr_int rx838_cur, rx838_curclass, "$!pos", rx838_pos
    $P11 = rx838_cur."ws"()
    repr_get_attr_int $I11, $P11, rx838_curclass, "$!pos"
    lt $I11, 0, rx838_fail2231
    repr_get_attr_int rx838_pos, $P11, rx838_curclass, "$!pos"
    rx838_cur."!cursor_pass"(rx838_pos, "trait", 'backtrack'=>1)
    .return (rx838_cur)
  rx838_restart2230:
    repr_get_attr_obj rx838_cstack, rx838_cur, rx838_curclass, "$!cstack"
  rx838_fail2231:
    unless rx838_bstack, rx838_done2229
    pop $I19, rx838_bstack
    if_null rx838_cstack, rx838_cstack_done2234
    unless rx838_cstack, rx838_cstack_done2234
    dec $I19
    set $P11, rx838_cstack[$I19]
  rx838_cstack_done2234:
    pop rx838_rep, rx838_bstack
    pop rx838_pos, rx838_bstack
    pop $I19, rx838_bstack
    lt rx838_pos, -1, rx838_done2229
    lt rx838_pos, 0, rx838_fail2231
    eq $I19, 0, rx838_fail2231
    nqp_islist $I20, rx838_cstack
    unless $I20, rx838_jump2232
    elements $I18, rx838_bstack
    le $I18, 0, rx838_cut2233
    dec $I18
    set $I18, rx838_bstack[$I18]
  rx838_cut2233:
    assign rx838_cstack, $I18
  rx838_jump2232:
    jump $I19
  rx838_done2229:
    rx838_cur."!cursor_fail"()
    .return (rx838_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_131_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1137
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_132_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1138
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx843_tgt
    .local int rx843_pos
    .local int rx843_off
    .local int rx843_eos
    .local int rx843_rep
    .local pmc rx843_cur
    .local pmc rx843_curclass
    .local pmc rx843_bstack
    .local pmc rx843_cstack
    (rx843_cur, rx843_tgt, rx843_pos, rx843_curclass, rx843_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx843_cur
    length rx843_eos, rx843_tgt
    eq $I19, 1, rx843_restart2243
    gt rx843_pos, rx843_eos, rx843_fail2244
    repr_get_attr_int $I11, self, rx843_curclass, "$!from"
    ne $I11, -1, rxscan844_done2250
    goto rxscan844_scan2249
  rxscan844_loop2248:
    inc rx843_pos
    gt rx843_pos, rx843_eos, rx843_fail2244
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!from", rx843_pos
  rxscan844_scan2249:
    nqp_rxmark rx843_bstack, rxscan844_loop2248, rx843_pos, 0
  rxscan844_done2250:
    nqp_rxmark rx843_bstack, rxcap845_fail2252, rx843_pos, 0
    add $I11, rx843_pos, 2
    gt $I11, rx843_eos, rx843_fail2244
    substr $S10, rx843_tgt, rx843_pos, 2
    ne $S10, ucs4:"is", rx843_fail2244
    add rx843_pos, 2
    nqp_rxpeek $I19, rx843_bstack, rxcap845_fail2252
    inc $I19
    set $I11, rx843_bstack[$I19]
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx843_pos)
    rx843_cstack = rx843_cur."!cursor_capture"($P11, "sym")
    goto rxcap845_done2251
  rxcap845_fail2252:
    goto rx843_fail2244
  rxcap845_done2251:
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."ws"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2244
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2244
    nqp_rxmark rx843_bstack, rxsubrule847_pass2254, -1, 0
  rxsubrule847_pass2254:
    rx843_cstack = rx843_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    nqp_rxmark rx843_bstack, rxquantr848_done2256, rx843_pos, 0
  rxquantr848_loop2255:
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2244
    goto rxsubrule849_pass2257
  rxsubrule849_back2258:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2244
  rxsubrule849_pass2257:
    rx843_cstack = rx843_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule849_back2258
    push rx843_bstack, $I11
    push rx843_bstack, 0
    push rx843_bstack, rx843_pos
    elements $I11, rx843_cstack
    push rx843_bstack, $I11
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    nqp_rxpeek $I19, rx843_bstack, rxquantr848_done2256
    inc $I19
    inc $I19
    set rx843_rep, rx843_bstack[$I19]
    nqp_rxcommit rx843_bstack, rxquantr848_done2256
    inc rx843_rep
  rxquantr848_done2256:
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!pos", rx843_pos
    $P11 = rx843_cur."ws"()
    repr_get_attr_int $I11, $P11, rx843_curclass, "$!pos"
    lt $I11, 0, rx843_fail2244
    repr_get_attr_int rx843_pos, $P11, rx843_curclass, "$!pos"
    rx843_cur."!cursor_pass"(rx843_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx843_cur)
  rx843_restart2243:
    repr_get_attr_obj rx843_cstack, rx843_cur, rx843_curclass, "$!cstack"
  rx843_fail2244:
    unless rx843_bstack, rx843_done2242
    pop $I19, rx843_bstack
    if_null rx843_cstack, rx843_cstack_done2247
    unless rx843_cstack, rx843_cstack_done2247
    dec $I19
    set $P11, rx843_cstack[$I19]
  rx843_cstack_done2247:
    pop rx843_rep, rx843_bstack
    pop rx843_pos, rx843_bstack
    pop $I19, rx843_bstack
    lt rx843_pos, -1, rx843_done2242
    lt rx843_pos, 0, rx843_fail2244
    eq $I19, 0, rx843_fail2244
    nqp_islist $I20, rx843_cstack
    unless $I20, rx843_jump2245
    elements $I18, rx843_bstack
    le $I18, 0, rx843_cut2246
    dec $I18
    set $I18, rx843_bstack[$I18]
  rx843_cut2246:
    assign rx843_cstack, $I18
  rx843_jump2245:
    jump $I19
  rx843_done2242:
    rx843_cur."!cursor_fail"()
    .return (rx843_cur) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_133_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1140
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_400_1360232768.755' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx851_tgt
    .local int rx851_pos
    .local int rx851_off
    .local int rx851_eos
    .local int rx851_rep
    .local pmc rx851_cur
    .local pmc rx851_curclass
    .local pmc rx851_bstack
    .local pmc rx851_cstack
    (rx851_cur, rx851_tgt, rx851_pos, rx851_curclass, rx851_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx851_cur
    length rx851_eos, rx851_tgt
    eq $I19, 1, rx851_restart2262
    gt rx851_pos, rx851_eos, rx851_fail2263
    repr_get_attr_int $I11, self, rx851_curclass, "$!from"
    ne $I11, -1, rxscan852_done2269
    goto rxscan852_scan2268
  rxscan852_loop2267:
    inc rx851_pos
    gt rx851_pos, rx851_eos, rx851_fail2263
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!from", rx851_pos
  rxscan852_scan2268:
    nqp_rxmark rx851_bstack, rxscan852_loop2267, rx851_pos, 0
  rxscan852_done2269:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt853_02271
    nqp_push_label $P11, alt853_12311
    nqp_rxmark rx851_bstack, alt853_end2270, -1, 0
    rx851_cur."!alt"(rx851_pos, "alt_nfa__33_1360232771.133", $P11)
    goto rx851_fail2263
  alt853_02271:
    nqp_rxmark rx851_bstack, rxcap854_fail2273, rx851_pos, 0
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"proto", rx851_fail2263
    add rx851_pos, 5
    nqp_rxpeek $I19, rx851_bstack, rxcap854_fail2273
    inc $I19
    set $I11, rx851_bstack[$I19]
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx851_pos)
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "proto")
    goto rxcap854_done2272
  rxcap854_fail2273:
    goto rx851_fail2263
  rxcap854_done2272:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt856_02276
    nqp_push_label $P11, alt856_12277
    nqp_push_label $P11, alt856_22278
    nqp_rxmark rx851_bstack, alt856_end2275, -1, 0
    rx851_cur."!alt"(rx851_pos, "alt_nfa__31_1360232771.132", $P11)
    goto rx851_fail2263
  alt856_02276:
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"regex", rx851_fail2263
    add rx851_pos, 5
    goto alt856_end2275
  alt856_12277:
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"token", rx851_fail2263
    add rx851_pos, 5
    goto alt856_end2275
  alt856_22278:
    add $I11, rx851_pos, 4
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 4
    ne $S10, ucs4:"rule", rx851_fail2263
    add rx851_pos, 4
    goto alt856_end2275
  alt856_end2275:
    nqp_rxcommit rx851_bstack, alt856_end2275
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt858_02281:
    nqp_rxmark rx851_bstack, alt858_12287, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 3
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 3
    ne $S10, ucs4:"::(", rx851_fail2263
    add rx851_pos, 3
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."variable"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    nqp_rxmark rx851_bstack, rxsubrule861_pass2284, -1, 0
  rxsubrule861_pass2284:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:")", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt858_end2280
  alt858_12287:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    nqp_rxmark rx851_bstack, rxsubrule865_pass2289, -1, 0
  rxsubrule865_pass2289:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt858_end2280:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt868_02293:
    nqp_rxmark rx851_bstack, alt868_12296, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 3
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 3
    ne $S10, ucs4:"{*}", rx851_fail2263
    add rx851_pos, 3
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt868_end2292
  alt868_12296:
    nqp_rxmark rx851_bstack, alt868_22301, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"{", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"<...>", rx851_fail2263
    add rx851_pos, 5
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"}", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt868_end2292
  alt868_22301:
    nqp_rxmark rx851_bstack, alt868_32306, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"{", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 3
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 3
    ne $S10, ucs4:"<*>", rx851_fail2263
    add rx851_pos, 3
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"}", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt868_end2292
  alt868_32306:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt868_end2292:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt853_end2270
  alt853_12311:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    nqp_rxmark rx851_bstack, rxcap884_fail2314, rx851_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt885_02316
    nqp_push_label $P11, alt885_12317
    nqp_push_label $P11, alt885_22318
    nqp_rxmark rx851_bstack, alt885_end2315, -1, 0
    rx851_cur."!alt"(rx851_pos, "alt_nfa__32_1360232771.132", $P11)
    goto rx851_fail2263
  alt885_02316:
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"regex", rx851_fail2263
    add rx851_pos, 5
    goto alt885_end2315
  alt885_12317:
    add $I11, rx851_pos, 5
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 5
    ne $S10, ucs4:"token", rx851_fail2263
    add rx851_pos, 5
    goto alt885_end2315
  alt885_22318:
    add $I11, rx851_pos, 4
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 4
    ne $S10, ucs4:"rule", rx851_fail2263
    add rx851_pos, 4
    goto alt885_end2315
  alt885_end2315:
    nqp_rxcommit rx851_bstack, alt885_end2315
    nqp_rxpeek $I19, rx851_bstack, rxcap884_fail2314
    inc $I19
    set $I11, rx851_bstack[$I19]
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx851_pos)
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "sym")
    goto rxcap884_done2313
  rxcap884_fail2314:
    goto rx851_fail2263
  rxcap884_done2313:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt888_02322:
    nqp_rxmark rx851_bstack, alt888_12328, rx851_pos, 0
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 3
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 3
    ne $S10, ucs4:"::(", rx851_fail2263
    add rx851_pos, 3
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."variable"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    nqp_rxmark rx851_bstack, rxsubrule891_pass2325, -1, 0
  rxsubrule891_pass2325:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:")", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt888_end2321
  alt888_12328:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    nqp_rxmark rx851_bstack, rxsubrule895_pass2330, -1, 0
  rxsubrule895_pass2330:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
  alt888_end2321:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    nqp_rxmark rx851_bstack, rxquantr900_done2336, rx851_pos, 0
  rxquantr900_loop2335:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"(", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."signature"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    nqp_rxmark rx851_bstack, rxsubrule903_pass2339, -1, 0
  rxsubrule903_pass2339:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:")", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    nqp_rxpeek $I19, rx851_bstack, rxquantr900_done2336
    inc $I19
    inc $I19
    set rx851_rep, rx851_bstack[$I19]
    nqp_rxcommit rx851_bstack, rxquantr900_done2336
    inc rx851_rep
  rxquantr900_done2336:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    store_lex unicode:"$\x{a2}", rx851_cur
    unless_null $P101, fallback2343
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2344
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2344:
    unless_null $P5002, vivi_9072345
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9072345:
    set $P101, $P5002
  fallback2343:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    store_lex unicode:"$\x{a2}", rx851_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_400_1360232768.755' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"{", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    nqp_rxmark rx851_bstack, rxsubrule919_pass2386, -1, 0
  rxsubrule919_pass2386:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    add $I11, rx851_pos, 1
    gt $I11, rx851_eos, rx851_fail2263
    substr $S10, rx851_tgt, rx851_pos, 1
    ne $S10, ucs4:"}", rx851_fail2263
    add rx851_pos, 1
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."ws"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2263
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    goto alt853_end2270
  alt853_end2270:
    nqp_rxcommit rx851_bstack, alt853_end2270
    rx851_cur."!cursor_pass"(rx851_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx851_cur)
  rx851_restart2262:
    repr_get_attr_obj rx851_cstack, rx851_cur, rx851_curclass, "$!cstack"
  rx851_fail2263:
    unless rx851_bstack, rx851_done2261
    pop $I19, rx851_bstack
    if_null rx851_cstack, rx851_cstack_done2266
    unless rx851_cstack, rx851_cstack_done2266
    dec $I19
    set $P11, rx851_cstack[$I19]
  rx851_cstack_done2266:
    pop rx851_rep, rx851_bstack
    pop rx851_pos, rx851_bstack
    pop $I19, rx851_bstack
    lt rx851_pos, -1, rx851_done2261
    lt rx851_pos, 0, rx851_fail2263
    eq $I19, 0, rx851_fail2263
    nqp_islist $I20, rx851_cstack
    unless $I20, rx851_jump2264
    elements $I18, rx851_bstack
    le $I18, 0, rx851_cut2265
    dec $I18
    set $I18, rx851_bstack[$I18]
  rx851_cut2265:
    assign rx851_cstack, $I18
  rx851_jump2264:
    jump $I19
  rx851_done2261:
    rx851_cur."!cursor_fail"()
    .return (rx851_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1360232768.755") :anon :lex :outer("cuid_133_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1161

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2347
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2348
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2348:
    unless_null $P5002, vivi_9092349
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9092349:
    set $P5001, $P5002
  fallback2347:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2350
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5011
  fallback2350:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2351
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback2351:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2352
    nqp_get_sc_object $P5017, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2353
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2353:
    unless_null $P5015, vivi_9102354
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_9102354:
    set $P5014, $P5015
  fallback2352:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2357
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5024
  fallback2357:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2358
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5025
  fallback2358:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless911_end2356 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2359
    nqp_get_sc_object $P5028, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5028
  fallback2359:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2360
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5029
  fallback2360:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless911_end2356:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2361
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2362
    nqp_get_sc_object $P5036, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2362:
    unless_null $P5032, vivi_9122363
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_9122363:
    set $P5031, $P5032
  fallback2361:
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2366
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5041
  fallback2366:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2367
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5042
  fallback2367:
    unless $P5039 goto if913_else2364 
.annotate 'line', 1164
    find_lex $P5044, "$/"
    unless_null $P5044, fallback2368
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5045
  fallback2368:
    set $P5043, $P5044["deflongname"]
    unless_null $P5043, fallback2369
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5043, $P5046
  fallback2369:
    $P5047 = $P5043."ast"()
    set $P5052, $P5047
    goto if913_end2365
  if913_else2364:
    find_lex $P5049, "$/"
    unless_null $P5049, fallback2370
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5049, $P5050
  fallback2370:
    set $P5048, $P5049["latename"]
    unless_null $P5048, fallback2371
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5051
  fallback2371:
    set $S5005, $P5048
    concat $S5004, "!!LATENAME!!", $S5005
    box $P5053, $S5004
    set $P5052, $P5053
  if913_end2365:
    set $P5031["name"], $P5052
    find_dynamic_lex $P5054, "%*RX"
    unless_null $P5054, fallback2372
    nqp_get_sc_object $P5057, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%RX"]
    unless_null $P5055, fallback2373
    nqp_get_sc_object $P5059, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%RX"], $P5060
    set $P5055, $P5060
  fallback2373:
    unless_null $P5055, vivi_9142374
    die "Contextual %*RX not found"
    box $P5061, "Contextual %*RX not found"
    set $P5055, $P5061
  vivi_9142374:
    set $P5054, $P5055
  fallback2372:
.annotate 'line', 1165
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback2375
    nqp_get_sc_object $P5065, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback2376
    nqp_get_sc_object $P5066, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5063, $P5066
  fallback2376:
    unless_null $P5063, vivi_9152377
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_9152377:
    set $P5062, $P5063
  fallback2375:
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback2378
    nqp_get_sc_object $P5071, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback2379
    nqp_get_sc_object $P5072, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5069, $P5072
  fallback2379:
    unless_null $P5069, vivi_9162380
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_9162380:
    set $P5068, $P5069
  fallback2378:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5076, "%*RX"
    unless_null $P5076, fallback2381
    nqp_get_sc_object $P5079, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["%RX"]
    unless_null $P5077, fallback2382
    nqp_get_sc_object $P5081, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5080, $P5081
    new $P5082, 'Hash'
    set $P5080["%RX"], $P5082
    set $P5077, $P5082
  fallback2382:
    unless_null $P5077, vivi_9172383
    die "Contextual %*RX not found"
    box $P5083, "Contextual %*RX not found"
    set $P5077, $P5083
  vivi_9172383:
    set $P5076, $P5077
  fallback2381:
    set $P5075, $P5076["name"]
    unless_null $P5075, fallback2384
    nqp_get_sc_object $P5084, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5075, $P5084
  fallback2384:
    $P5085 = $P5062."create_code"($P5074, $P5075, 0, "NQPRegex" :named("code_type_name"))
    set $P5054["code"], $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_134_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1171
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx921_tgt
    .local int rx921_pos
    .local int rx921_off
    .local int rx921_eos
    .local int rx921_rep
    .local pmc rx921_cur
    .local pmc rx921_curclass
    .local pmc rx921_bstack
    .local pmc rx921_cstack
    (rx921_cur, rx921_tgt, rx921_pos, rx921_curclass, rx921_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx921_cur
    length rx921_eos, rx921_tgt
    eq $I19, 1, rx921_restart2390
    gt rx921_pos, rx921_eos, rx921_fail2391
    repr_get_attr_int $I11, self, rx921_curclass, "$!from"
    ne $I11, -1, rxscan922_done2397
    goto rxscan922_scan2396
  rxscan922_loop2395:
    inc rx921_pos
    gt rx921_pos, rx921_eos, rx921_fail2391
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!from", rx921_pos
  rxscan922_scan2396:
    nqp_rxmark rx921_bstack, rxscan922_loop2395, rx921_pos, 0
  rxscan922_done2397:
    add $I11, rx921_pos, 1
    gt $I11, rx921_eos, rx921_fail2391
    substr $S10, rx921_tgt, rx921_pos, 1
    ne $S10, ucs4:".", rx921_fail2391
    add rx921_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt923_02399
    nqp_push_label $P11, alt923_12401
    nqp_rxmark rx921_bstack, alt923_end2398, -1, 0
    rx921_cur."!alt"(rx921_pos, "alt_nfa__34_1360232771.156", $P11)
    goto rx921_fail2391
  alt923_02399:
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2391
    nqp_rxmark rx921_bstack, rxsubrule924_pass2400, -1, 0
  rxsubrule924_pass2400:
    rx921_cstack = rx921_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
    goto alt923_end2398
  alt923_12401:
    ge rx921_pos, rx921_eos, rx921_fail2391
    substr $S11, rx921_tgt, rx921_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx921_fail2391
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."quote"()
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2391
    nqp_rxmark rx921_bstack, rxsubrule925_pass2402, -1, 0
  rxsubrule925_pass2402:
    rx921_cstack = rx921_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
  alt926_02404:
    nqp_rxmark rx921_bstack, alt926_12405, rx921_pos, 0
    ge rx921_pos, rx921_eos, rx921_fail2391
    substr $S11, rx921_tgt, rx921_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx921_fail2391
    goto alt926_end2403
  alt926_12405:
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2391
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
  alt926_end2403:
    goto alt923_end2398
  alt923_end2398:
    nqp_rxcommit rx921_bstack, alt923_end2398
    nqp_rxmark rx921_bstack, rxquantr928_done2408, rx921_pos, 0
  rxquantr928_loop2407:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt929_02410
    nqp_push_label $P11, alt929_12412
    nqp_rxmark rx921_bstack, alt929_end2409, -1, 0
    rx921_cur."!alt"(rx921_pos, "alt_nfa__35_1360232771.157", $P11)
    goto rx921_fail2391
  alt929_02410:
    ge rx921_pos, rx921_eos, rx921_fail2391
    substr $S11, rx921_tgt, rx921_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx921_fail2391
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."args"()
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2391
    nqp_rxmark rx921_bstack, rxsubrule930_pass2411, -1, 0
  rxsubrule930_pass2411:
    rx921_cstack = rx921_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
    goto alt929_end2409
  alt929_12412:
    add $I11, rx921_pos, 1
    gt $I11, rx921_eos, rx921_fail2391
    substr $S10, rx921_tgt, rx921_pos, 1
    ne $S10, ucs4:":", rx921_fail2391
    add rx921_pos, 1
    ge rx921_pos, rx921_eos, rx921_fail2391
    is_cclass $I11, .CCLASS_WHITESPACE, rx921_tgt, rx921_pos
    unless $I11, rx921_fail2391
    add rx921_pos, 1
    repr_bind_attr_int rx921_cur, rx921_curclass, "$!pos", rx921_pos
    $P11 = rx921_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx921_curclass, "$!pos"
    lt $I11, 0, rx921_fail2391
    nqp_rxmark rx921_bstack, rxsubrule931_pass2413, -1, 0
  rxsubrule931_pass2413:
    rx921_cstack = rx921_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx921_pos, $P11, rx921_curclass, "$!pos"
    goto alt929_end2409
  alt929_end2409:
    nqp_rxpeek $I19, rx921_bstack, rxquantr928_done2408
    inc $I19
    inc $I19
    set rx921_rep, rx921_bstack[$I19]
    nqp_rxcommit rx921_bstack, rxquantr928_done2408
    inc rx921_rep
  rxquantr928_done2408:
    rx921_cur."!cursor_pass"(rx921_pos, "dotty", 'backtrack'=>1)
    .return (rx921_cur)
  rx921_restart2390:
    repr_get_attr_obj rx921_cstack, rx921_cur, rx921_curclass, "$!cstack"
  rx921_fail2391:
    unless rx921_bstack, rx921_done2389
    pop $I19, rx921_bstack
    if_null rx921_cstack, rx921_cstack_done2394
    unless rx921_cstack, rx921_cstack_done2394
    dec $I19
    set $P11, rx921_cstack[$I19]
  rx921_cstack_done2394:
    pop rx921_rep, rx921_bstack
    pop rx921_pos, rx921_bstack
    pop $I19, rx921_bstack
    lt rx921_pos, -1, rx921_done2389
    lt rx921_pos, 0, rx921_fail2391
    eq $I19, 0, rx921_fail2391
    nqp_islist $I20, rx921_cstack
    unless $I20, rx921_jump2392
    elements $I18, rx921_bstack
    le $I18, 0, rx921_cut2393
    dec $I18
    set $I18, rx921_bstack[$I18]
  rx921_cut2393:
    assign rx921_cstack, $I18
  rx921_jump2392:
    jump $I19
  rx921_done2389:
    rx921_cur."!cursor_fail"()
    .return (rx921_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_135_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1184
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx932_tgt
    .local int rx932_pos
    .local int rx932_off
    .local int rx932_eos
    .local int rx932_rep
    .local pmc rx932_cur
    .local pmc rx932_curclass
    .local pmc rx932_bstack
    .local pmc rx932_cstack
    (rx932_cur, rx932_tgt, rx932_pos, rx932_curclass, rx932_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx932_cur
    length rx932_eos, rx932_tgt
    eq $I19, 1, rx932_restart2416
    gt rx932_pos, rx932_eos, rx932_fail2417
    repr_get_attr_int $I11, self, rx932_curclass, "$!from"
    ne $I11, -1, rxscan933_done2423
    goto rxscan933_scan2422
  rxscan933_loop2421:
    inc rx932_pos
    gt rx932_pos, rx932_eos, rx932_fail2417
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!from", rx932_pos
  rxscan933_scan2422:
    nqp_rxmark rx932_bstack, rxscan933_loop2421, rx932_pos, 0
  rxscan933_done2423:
    nqp_rxmark rx932_bstack, rxcap934_fail2425, rx932_pos, 0
    add $I11, rx932_pos, 4
    gt $I11, rx932_eos, rx932_fail2417
    substr $S10, rx932_tgt, rx932_pos, 4
    ne $S10, ucs4:"self", rx932_fail2417
    add rx932_pos, 4
    nqp_rxpeek $I19, rx932_bstack, rxcap934_fail2425
    inc $I19
    set $I11, rx932_bstack[$I19]
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx932_pos)
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "sym")
    goto rxcap934_done2424
  rxcap934_fail2425:
    goto rx932_fail2417
  rxcap934_done2424:
    le rx932_pos, 0, rx932_fail2417
    is_cclass $I11, .CCLASS_WORD, rx932_tgt, rx932_pos
    if $I11, rx932_fail2417
    sub $I11, rx932_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx932_tgt, $I11
    unless $I11, rx932_fail2417
    rx932_cur."!cursor_pass"(rx932_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx932_cur)
  rx932_restart2416:
    repr_get_attr_obj rx932_cstack, rx932_cur, rx932_curclass, "$!cstack"
  rx932_fail2417:
    unless rx932_bstack, rx932_done2415
    pop $I19, rx932_bstack
    if_null rx932_cstack, rx932_cstack_done2420
    unless rx932_cstack, rx932_cstack_done2420
    dec $I19
    set $P11, rx932_cstack[$I19]
  rx932_cstack_done2420:
    pop rx932_rep, rx932_bstack
    pop rx932_pos, rx932_bstack
    pop $I19, rx932_bstack
    lt rx932_pos, -1, rx932_done2415
    lt rx932_pos, 0, rx932_fail2417
    eq $I19, 0, rx932_fail2417
    nqp_islist $I20, rx932_cstack
    unless $I20, rx932_jump2418
    elements $I18, rx932_bstack
    le $I18, 0, rx932_cut2419
    dec $I18
    set $I18, rx932_bstack[$I18]
  rx932_cut2419:
    assign rx932_cstack, $I18
  rx932_jump2418:
    jump $I19
  rx932_done2415:
    rx932_cur."!cursor_fail"()
    .return (rx932_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_136_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx936_tgt
    .local int rx936_pos
    .local int rx936_off
    .local int rx936_eos
    .local int rx936_rep
    .local pmc rx936_cur
    .local pmc rx936_curclass
    .local pmc rx936_bstack
    .local pmc rx936_cstack
    (rx936_cur, rx936_tgt, rx936_pos, rx936_curclass, rx936_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx936_cur
    length rx936_eos, rx936_tgt
    eq $I19, 1, rx936_restart2429
    gt rx936_pos, rx936_eos, rx936_fail2430
    repr_get_attr_int $I11, self, rx936_curclass, "$!from"
    ne $I11, -1, rxscan937_done2436
    goto rxscan937_scan2435
  rxscan937_loop2434:
    inc rx936_pos
    gt rx936_pos, rx936_eos, rx936_fail2430
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!from", rx936_pos
  rxscan937_scan2435:
    nqp_rxmark rx936_bstack, rxscan937_loop2434, rx936_pos, 0
  rxscan937_done2436:
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2430
    nqp_rxmark rx936_bstack, rxsubrule938_pass2437, -1, 0
  rxsubrule938_pass2437:
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx936_pos, $P11, rx936_curclass, "$!pos"
    ge rx936_pos, rx936_eos, rx936_fail2430
    substr $S11, rx936_tgt, rx936_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx936_fail2430
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."args"()
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2430
    nqp_rxmark rx936_bstack, rxsubrule939_pass2438, -1, 0
  rxsubrule939_pass2438:
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx936_pos, $P11, rx936_curclass, "$!pos"
    rx936_cur."!cursor_pass"(rx936_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx936_cur)
  rx936_restart2429:
    repr_get_attr_obj rx936_cstack, rx936_cur, rx936_curclass, "$!cstack"
  rx936_fail2430:
    unless rx936_bstack, rx936_done2428
    pop $I19, rx936_bstack
    if_null rx936_cstack, rx936_cstack_done2433
    unless rx936_cstack, rx936_cstack_done2433
    dec $I19
    set $P11, rx936_cstack[$I19]
  rx936_cstack_done2433:
    pop rx936_rep, rx936_bstack
    pop rx936_pos, rx936_bstack
    pop $I19, rx936_bstack
    lt rx936_pos, -1, rx936_done2428
    lt rx936_pos, 0, rx936_fail2430
    eq $I19, 0, rx936_fail2430
    nqp_islist $I20, rx936_cstack
    unless $I20, rx936_jump2431
    elements $I18, rx936_bstack
    le $I18, 0, rx936_cut2432
    dec $I18
    set $I18, rx936_bstack[$I18]
  rx936_cut2432:
    assign rx936_cstack, $I18
  rx936_jump2431:
    jump $I19
  rx936_done2428:
    rx936_cur."!cursor_fail"()
    .return (rx936_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_137_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx940_tgt
    .local int rx940_pos
    .local int rx940_off
    .local int rx940_eos
    .local int rx940_rep
    .local pmc rx940_cur
    .local pmc rx940_curclass
    .local pmc rx940_bstack
    .local pmc rx940_cstack
    (rx940_cur, rx940_tgt, rx940_pos, rx940_curclass, rx940_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx940_cur
    length rx940_eos, rx940_tgt
    eq $I19, 1, rx940_restart2441
    gt rx940_pos, rx940_eos, rx940_fail2442
    repr_get_attr_int $I11, self, rx940_curclass, "$!from"
    ne $I11, -1, rxscan941_done2448
    goto rxscan941_scan2447
  rxscan941_loop2446:
    inc rx940_pos
    gt rx940_pos, rx940_eos, rx940_fail2442
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!from", rx940_pos
  rxscan941_scan2447:
    nqp_rxmark rx940_bstack, rxscan941_loop2446, rx940_pos, 0
  rxscan941_done2448:
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!pos", rx940_pos
    $P11 = rx940_cur."name"()
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail2442
    nqp_rxmark rx940_bstack, rxsubrule942_pass2449, -1, 0
  rxsubrule942_pass2449:
    rx940_cstack = rx940_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx940_pos, $P11, rx940_curclass, "$!pos"
    nqp_rxmark rx940_bstack, rxquantr943_done2451, rx940_pos, 0
  rxquantr943_loop2450:
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!pos", rx940_pos
    $P11 = rx940_cur."args"()
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail2442
    goto rxsubrule944_pass2452
  rxsubrule944_back2453:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail2442
  rxsubrule944_pass2452:
    rx940_cstack = rx940_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule944_back2453
    push rx940_bstack, $I11
    push rx940_bstack, 0
    push rx940_bstack, rx940_pos
    elements $I11, rx940_cstack
    push rx940_bstack, $I11
    repr_get_attr_int rx940_pos, $P11, rx940_curclass, "$!pos"
    nqp_rxpeek $I19, rx940_bstack, rxquantr943_done2451
    inc $I19
    inc $I19
    set rx940_rep, rx940_bstack[$I19]
    nqp_rxcommit rx940_bstack, rxquantr943_done2451
    inc rx940_rep
  rxquantr943_done2451:
    rx940_cur."!cursor_pass"(rx940_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx940_cur)
  rx940_restart2441:
    repr_get_attr_obj rx940_cstack, rx940_cur, rx940_curclass, "$!cstack"
  rx940_fail2442:
    unless rx940_bstack, rx940_done2440
    pop $I19, rx940_bstack
    if_null rx940_cstack, rx940_cstack_done2445
    unless rx940_cstack, rx940_cstack_done2445
    dec $I19
    set $P11, rx940_cstack[$I19]
  rx940_cstack_done2445:
    pop rx940_rep, rx940_bstack
    pop rx940_pos, rx940_bstack
    pop $I19, rx940_bstack
    lt rx940_pos, -1, rx940_done2440
    lt rx940_pos, 0, rx940_fail2442
    eq $I19, 0, rx940_fail2442
    nqp_islist $I20, rx940_cstack
    unless $I20, rx940_jump2443
    elements $I18, rx940_bstack
    le $I18, 0, rx940_cut2444
    dec $I18
    set $I18, rx940_bstack[$I18]
  rx940_cut2444:
    assign rx940_cstack, $I18
  rx940_jump2443:
    jump $I19
  rx940_done2440:
    rx940_cur."!cursor_fail"()
    .return (rx940_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_138_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx945_tgt
    .local int rx945_pos
    .local int rx945_off
    .local int rx945_eos
    .local int rx945_rep
    .local pmc rx945_cur
    .local pmc rx945_curclass
    .local pmc rx945_bstack
    .local pmc rx945_cstack
    (rx945_cur, rx945_tgt, rx945_pos, rx945_curclass, rx945_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx945_cur
    length rx945_eos, rx945_tgt
    eq $I19, 1, rx945_restart2456
    gt rx945_pos, rx945_eos, rx945_fail2457
    repr_get_attr_int $I11, self, rx945_curclass, "$!from"
    ne $I11, -1, rxscan946_done2463
    goto rxscan946_scan2462
  rxscan946_loop2461:
    inc rx945_pos
    gt rx945_pos, rx945_eos, rx945_fail2457
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!from", rx945_pos
  rxscan946_scan2462:
    nqp_rxmark rx945_bstack, rxscan946_loop2461, rx945_pos, 0
  rxscan946_done2463:
    add $I11, rx945_pos, 5
    gt $I11, rx945_eos, rx945_fail2457
    substr $S10, rx945_tgt, rx945_pos, 5
    ne $S10, ucs4:"pir::", rx945_fail2457
    add rx945_pos, 5
    nqp_rxmark rx945_bstack, rxcap947_fail2465, rx945_pos, 0
    nqp_rxmark rx945_bstack, rxquantr948_done2467, -1, 0
  rxquantr948_loop2466:
    ge rx945_pos, rx945_eos, rx945_fail2457
    is_cclass $I11, .CCLASS_WORD, rx945_tgt, rx945_pos
    unless $I11, rx945_fail2457
    add rx945_pos, 1
    nqp_rxpeek $I19, rx945_bstack, rxquantr948_done2467
    inc $I19
    inc $I19
    set rx945_rep, rx945_bstack[$I19]
    nqp_rxcommit rx945_bstack, rxquantr948_done2467
    inc rx945_rep
    nqp_rxmark rx945_bstack, rxquantr948_done2467, rx945_pos, rx945_rep
    goto rxquantr948_loop2466
  rxquantr948_done2467:
    nqp_rxpeek $I19, rx945_bstack, rxcap947_fail2465
    inc $I19
    set $I11, rx945_bstack[$I19]
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!pos", rx945_pos
    $P11 = rx945_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx945_pos)
    rx945_cstack = rx945_cur."!cursor_capture"($P11, "op")
    goto rxcap947_done2464
  rxcap947_fail2465:
    goto rx945_fail2457
  rxcap947_done2464:
    nqp_rxmark rx945_bstack, rxquantr949_done2469, rx945_pos, 0
  rxquantr949_loop2468:
    repr_bind_attr_int rx945_cur, rx945_curclass, "$!pos", rx945_pos
    $P11 = rx945_cur."args"()
    repr_get_attr_int $I11, $P11, rx945_curclass, "$!pos"
    lt $I11, 0, rx945_fail2457
    goto rxsubrule950_pass2470
  rxsubrule950_back2471:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx945_curclass, "$!pos"
    lt $I11, 0, rx945_fail2457
  rxsubrule950_pass2470:
    rx945_cstack = rx945_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule950_back2471
    push rx945_bstack, $I11
    push rx945_bstack, 0
    push rx945_bstack, rx945_pos
    elements $I11, rx945_cstack
    push rx945_bstack, $I11
    repr_get_attr_int rx945_pos, $P11, rx945_curclass, "$!pos"
    nqp_rxpeek $I19, rx945_bstack, rxquantr949_done2469
    inc $I19
    inc $I19
    set rx945_rep, rx945_bstack[$I19]
    nqp_rxcommit rx945_bstack, rxquantr949_done2469
    inc rx945_rep
  rxquantr949_done2469:
    rx945_cur."!cursor_pass"(rx945_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx945_cur)
  rx945_restart2456:
    repr_get_attr_obj rx945_cstack, rx945_cur, rx945_curclass, "$!cstack"
  rx945_fail2457:
    unless rx945_bstack, rx945_done2455
    pop $I19, rx945_bstack
    if_null rx945_cstack, rx945_cstack_done2460
    unless rx945_cstack, rx945_cstack_done2460
    dec $I19
    set $P11, rx945_cstack[$I19]
  rx945_cstack_done2460:
    pop rx945_rep, rx945_bstack
    pop rx945_pos, rx945_bstack
    pop $I19, rx945_bstack
    lt rx945_pos, -1, rx945_done2455
    lt rx945_pos, 0, rx945_fail2457
    eq $I19, 0, rx945_fail2457
    nqp_islist $I20, rx945_cstack
    unless $I20, rx945_jump2458
    elements $I18, rx945_bstack
    le $I18, 0, rx945_cut2459
    dec $I18
    set $I18, rx945_bstack[$I18]
  rx945_cut2459:
    assign rx945_cstack, $I18
  rx945_jump2458:
    jump $I19
  rx945_done2455:
    rx945_cur."!cursor_fail"()
    .return (rx945_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_139_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx951_tgt
    .local int rx951_pos
    .local int rx951_off
    .local int rx951_eos
    .local int rx951_rep
    .local pmc rx951_cur
    .local pmc rx951_curclass
    .local pmc rx951_bstack
    .local pmc rx951_cstack
    (rx951_cur, rx951_tgt, rx951_pos, rx951_curclass, rx951_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx951_cur
    length rx951_eos, rx951_tgt
    eq $I19, 1, rx951_restart2474
    gt rx951_pos, rx951_eos, rx951_fail2475
    repr_get_attr_int $I11, self, rx951_curclass, "$!from"
    ne $I11, -1, rxscan952_done2481
    goto rxscan952_scan2480
  rxscan952_loop2479:
    inc rx951_pos
    gt rx951_pos, rx951_eos, rx951_fail2475
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!from", rx951_pos
  rxscan952_scan2480:
    nqp_rxmark rx951_bstack, rxscan952_loop2479, rx951_pos, 0
  rxscan952_done2481:
    add $I11, rx951_pos, 12
    gt $I11, rx951_eos, rx951_fail2475
    substr $S10, rx951_tgt, rx951_pos, 12
    ne $S10, ucs4:"pir::const::", rx951_fail2475
    add rx951_pos, 12
    nqp_rxmark rx951_bstack, rxcap953_fail2483, rx951_pos, 0
    nqp_rxmark rx951_bstack, rxquantr954_done2485, -1, 0
  rxquantr954_loop2484:
    ge rx951_pos, rx951_eos, rx951_fail2475
    is_cclass $I11, .CCLASS_WORD, rx951_tgt, rx951_pos
    unless $I11, rx951_fail2475
    add rx951_pos, 1
    nqp_rxpeek $I19, rx951_bstack, rxquantr954_done2485
    inc $I19
    inc $I19
    set rx951_rep, rx951_bstack[$I19]
    nqp_rxcommit rx951_bstack, rxquantr954_done2485
    inc rx951_rep
    nqp_rxmark rx951_bstack, rxquantr954_done2485, rx951_pos, rx951_rep
    goto rxquantr954_loop2484
  rxquantr954_done2485:
    nqp_rxpeek $I19, rx951_bstack, rxcap953_fail2483
    inc $I19
    set $I11, rx951_bstack[$I19]
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx951_pos)
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "const")
    goto rxcap953_done2482
  rxcap953_fail2483:
    goto rx951_fail2475
  rxcap953_done2482:
    rx951_cur."!cursor_pass"(rx951_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx951_cur)
  rx951_restart2474:
    repr_get_attr_obj rx951_cstack, rx951_cur, rx951_curclass, "$!cstack"
  rx951_fail2475:
    unless rx951_bstack, rx951_done2473
    pop $I19, rx951_bstack
    if_null rx951_cstack, rx951_cstack_done2478
    unless rx951_cstack, rx951_cstack_done2478
    dec $I19
    set $P11, rx951_cstack[$I19]
  rx951_cstack_done2478:
    pop rx951_rep, rx951_bstack
    pop rx951_pos, rx951_bstack
    pop $I19, rx951_bstack
    lt rx951_pos, -1, rx951_done2473
    lt rx951_pos, 0, rx951_fail2475
    eq $I19, 0, rx951_fail2475
    nqp_islist $I20, rx951_cstack
    unless $I20, rx951_jump2476
    elements $I18, rx951_bstack
    le $I18, 0, rx951_cut2477
    dec $I18
    set $I18, rx951_bstack[$I18]
  rx951_cut2477:
    assign rx951_cstack, $I18
  rx951_jump2476:
    jump $I19
  rx951_done2473:
    rx951_cur."!cursor_fail"()
    .return (rx951_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_140_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx955_tgt
    .local int rx955_pos
    .local int rx955_off
    .local int rx955_eos
    .local int rx955_rep
    .local pmc rx955_cur
    .local pmc rx955_curclass
    .local pmc rx955_bstack
    .local pmc rx955_cstack
    (rx955_cur, rx955_tgt, rx955_pos, rx955_curclass, rx955_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx955_cur
    length rx955_eos, rx955_tgt
    eq $I19, 1, rx955_restart2488
    gt rx955_pos, rx955_eos, rx955_fail2489
    repr_get_attr_int $I11, self, rx955_curclass, "$!from"
    ne $I11, -1, rxscan956_done2495
    goto rxscan956_scan2494
  rxscan956_loop2493:
    inc rx955_pos
    gt rx955_pos, rx955_eos, rx955_fail2489
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!from", rx955_pos
  rxscan956_scan2494:
    nqp_rxmark rx955_bstack, rxscan956_loop2493, rx955_pos, 0
  rxscan956_done2495:
    add $I11, rx955_pos, 5
    gt $I11, rx955_eos, rx955_fail2489
    substr $S10, rx955_tgt, rx955_pos, 5
    ne $S10, ucs4:"nqp::", rx955_fail2489
    add rx955_pos, 5
    nqp_rxmark rx955_bstack, rxcap957_fail2497, rx955_pos, 0
    nqp_rxmark rx955_bstack, rxquantr958_done2499, -1, 0
  rxquantr958_loop2498:
    ge rx955_pos, rx955_eos, rx955_fail2489
    is_cclass $I11, .CCLASS_WORD, rx955_tgt, rx955_pos
    unless $I11, rx955_fail2489
    add rx955_pos, 1
    nqp_rxpeek $I19, rx955_bstack, rxquantr958_done2499
    inc $I19
    inc $I19
    set rx955_rep, rx955_bstack[$I19]
    nqp_rxcommit rx955_bstack, rxquantr958_done2499
    inc rx955_rep
    nqp_rxmark rx955_bstack, rxquantr958_done2499, rx955_pos, rx955_rep
    goto rxquantr958_loop2498
  rxquantr958_done2499:
    nqp_rxpeek $I19, rx955_bstack, rxcap957_fail2497
    inc $I19
    set $I11, rx955_bstack[$I19]
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx955_pos)
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "op")
    goto rxcap957_done2496
  rxcap957_fail2497:
    goto rx955_fail2489
  rxcap957_done2496:
    nqp_rxmark rx955_bstack, rxquantr959_done2501, rx955_pos, 0
  rxquantr959_loop2500:
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."args"()
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail2489
    goto rxsubrule960_pass2502
  rxsubrule960_back2503:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail2489
  rxsubrule960_pass2502:
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule960_back2503
    push rx955_bstack, $I11
    push rx955_bstack, 0
    push rx955_bstack, rx955_pos
    elements $I11, rx955_cstack
    push rx955_bstack, $I11
    repr_get_attr_int rx955_pos, $P11, rx955_curclass, "$!pos"
    nqp_rxpeek $I19, rx955_bstack, rxquantr959_done2501
    inc $I19
    inc $I19
    set rx955_rep, rx955_bstack[$I19]
    nqp_rxcommit rx955_bstack, rxquantr959_done2501
    inc rx955_rep
  rxquantr959_done2501:
    rx955_cur."!cursor_pass"(rx955_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx955_cur)
  rx955_restart2488:
    repr_get_attr_obj rx955_cstack, rx955_cur, rx955_curclass, "$!cstack"
  rx955_fail2489:
    unless rx955_bstack, rx955_done2487
    pop $I19, rx955_bstack
    if_null rx955_cstack, rx955_cstack_done2492
    unless rx955_cstack, rx955_cstack_done2492
    dec $I19
    set $P11, rx955_cstack[$I19]
  rx955_cstack_done2492:
    pop rx955_rep, rx955_bstack
    pop rx955_pos, rx955_bstack
    pop $I19, rx955_bstack
    lt rx955_pos, -1, rx955_done2487
    lt rx955_pos, 0, rx955_fail2489
    eq $I19, 0, rx955_fail2489
    nqp_islist $I20, rx955_cstack
    unless $I20, rx955_jump2490
    elements $I18, rx955_bstack
    le $I18, 0, rx955_cut2491
    dec $I18
    set $I18, rx955_bstack[$I18]
  rx955_cut2491:
    assign rx955_cstack, $I18
  rx955_jump2490:
    jump $I19
  rx955_done2487:
    rx955_cur."!cursor_fail"()
    .return (rx955_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_141_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_401_1360232768.755' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx961_tgt
    .local int rx961_pos
    .local int rx961_off
    .local int rx961_eos
    .local int rx961_rep
    .local pmc rx961_cur
    .local pmc rx961_curclass
    .local pmc rx961_bstack
    .local pmc rx961_cstack
    (rx961_cur, rx961_tgt, rx961_pos, rx961_curclass, rx961_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx961_cur
    length rx961_eos, rx961_tgt
    eq $I19, 1, rx961_restart2506
    gt rx961_pos, rx961_eos, rx961_fail2507
    repr_get_attr_int $I11, self, rx961_curclass, "$!from"
    ne $I11, -1, rxscan962_done2513
    goto rxscan962_scan2512
  rxscan962_loop2511:
    inc rx961_pos
    gt rx961_pos, rx961_eos, rx961_fail2507
    repr_bind_attr_int rx961_cur, rx961_curclass, "$!from", rx961_pos
  rxscan962_scan2512:
    nqp_rxmark rx961_bstack, rxscan962_loop2511, rx961_pos, 0
  rxscan962_done2513:
    add $I11, rx961_pos, 3
    gt $I11, rx961_eos, rx961_fail2507
    substr $S10, rx961_tgt, rx961_pos, 3
    ne $S10, ucs4:"{*}", rx961_fail2507
    add rx961_pos, 3
    repr_bind_attr_int rx961_cur, rx961_curclass, "$!pos", rx961_pos
    $P11 = rx961_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx961_curclass, "$!pos"
    lt $I11, 0, rx961_fail2507
  alt963_02515:
    nqp_rxmark rx961_bstack, alt963_12519, rx961_pos, 0
    repr_bind_attr_int rx961_cur, rx961_curclass, "$!pos", rx961_pos
    store_lex unicode:"$\x{a2}", rx961_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_401_1360232768.755' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx961_fail2507
    goto alt963_end2514
  alt963_12519:
    repr_bind_attr_int rx961_cur, rx961_curclass, "$!pos", rx961_pos
    $P11 = rx961_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx961_curclass, "$!pos"
    lt $I11, 0, rx961_fail2507
    repr_get_attr_int rx961_pos, $P11, rx961_curclass, "$!pos"
  alt963_end2514:
    rx961_cur."!cursor_pass"(rx961_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx961_cur)
  rx961_restart2506:
    repr_get_attr_obj rx961_cstack, rx961_cur, rx961_curclass, "$!cstack"
  rx961_fail2507:
    unless rx961_bstack, rx961_done2505
    pop $I19, rx961_bstack
    if_null rx961_cstack, rx961_cstack_done2510
    unless rx961_cstack, rx961_cstack_done2510
    dec $I19
    set $P11, rx961_cstack[$I19]
  rx961_cstack_done2510:
    pop rx961_rep, rx961_bstack
    pop rx961_pos, rx961_bstack
    pop $I19, rx961_bstack
    lt rx961_pos, -1, rx961_done2505
    lt rx961_pos, 0, rx961_fail2507
    eq $I19, 0, rx961_fail2507
    nqp_islist $I20, rx961_cstack
    unless $I20, rx961_jump2508
    elements $I18, rx961_bstack
    le $I18, 0, rx961_cut2509
    dec $I18
    set $I18, rx961_bstack[$I18]
  rx961_cut2509:
    assign rx961_cstack, $I18
  rx961_jump2508:
    jump $I19
  rx961_done2505:
    rx961_cur."!cursor_fail"()
    .return (rx961_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1360232768.755") :anon :lex :outer("cuid_141_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1208

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2516
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2517
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback2517:
    unless_null $P5002, vivi_9642518
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_9642518:
    set $P5001, $P5002
  fallback2516:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_142_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1211
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx966_tgt
    .local int rx966_pos
    .local int rx966_off
    .local int rx966_eos
    .local int rx966_rep
    .local pmc rx966_cur
    .local pmc rx966_curclass
    .local pmc rx966_bstack
    .local pmc rx966_cstack
    (rx966_cur, rx966_tgt, rx966_pos, rx966_curclass, rx966_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx966_cur
    length rx966_eos, rx966_tgt
    eq $I19, 1, rx966_restart2523
    gt rx966_pos, rx966_eos, rx966_fail2524
    repr_get_attr_int $I11, self, rx966_curclass, "$!from"
    ne $I11, -1, rxscan967_done2530
    goto rxscan967_scan2529
  rxscan967_loop2528:
    inc rx966_pos
    gt rx966_pos, rx966_eos, rx966_fail2524
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!from", rx966_pos
  rxscan967_scan2529:
    nqp_rxmark rx966_bstack, rxscan967_loop2528, rx966_pos, 0
  rxscan967_done2530:
    add $I11, rx966_pos, 1
    gt $I11, rx966_eos, rx966_fail2524
    substr $S10, rx966_tgt, rx966_pos, 1
    ne $S10, ucs4:"(", rx966_fail2524
    add rx966_pos, 1
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!pos", rx966_pos
    $P11 = rx966_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx966_curclass, "$!pos"
    lt $I11, 0, rx966_fail2524
    nqp_rxmark rx966_bstack, rxsubrule968_pass2531, -1, 0
  rxsubrule968_pass2531:
    rx966_cstack = rx966_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx966_pos, $P11, rx966_curclass, "$!pos"
    add $I11, rx966_pos, 1
    gt $I11, rx966_eos, rx966_fail2524
    substr $S10, rx966_tgt, rx966_pos, 1
    ne $S10, ucs4:")", rx966_fail2524
    add rx966_pos, 1
    rx966_cur."!cursor_pass"(rx966_pos, "args", 'backtrack'=>1)
    .return (rx966_cur)
  rx966_restart2523:
    repr_get_attr_obj rx966_cstack, rx966_cur, rx966_curclass, "$!cstack"
  rx966_fail2524:
    unless rx966_bstack, rx966_done2522
    pop $I19, rx966_bstack
    if_null rx966_cstack, rx966_cstack_done2527
    unless rx966_cstack, rx966_cstack_done2527
    dec $I19
    set $P11, rx966_cstack[$I19]
  rx966_cstack_done2527:
    pop rx966_rep, rx966_bstack
    pop rx966_pos, rx966_bstack
    pop $I19, rx966_bstack
    lt rx966_pos, -1, rx966_done2522
    lt rx966_pos, 0, rx966_fail2524
    eq $I19, 0, rx966_fail2524
    nqp_islist $I20, rx966_cstack
    unless $I20, rx966_jump2525
    elements $I18, rx966_bstack
    le $I18, 0, rx966_cut2526
    dec $I18
    set $I18, rx966_bstack[$I18]
  rx966_cut2526:
    assign rx966_cstack, $I18
  rx966_jump2525:
    jump $I19
  rx966_done2522:
    rx966_cur."!cursor_fail"()
    .return (rx966_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_143_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1215
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx969_tgt
    .local int rx969_pos
    .local int rx969_off
    .local int rx969_eos
    .local int rx969_rep
    .local pmc rx969_cur
    .local pmc rx969_curclass
    .local pmc rx969_bstack
    .local pmc rx969_cstack
    (rx969_cur, rx969_tgt, rx969_pos, rx969_curclass, rx969_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx969_cur
    length rx969_eos, rx969_tgt
    eq $I19, 1, rx969_restart2534
    gt rx969_pos, rx969_eos, rx969_fail2535
    repr_get_attr_int $I11, self, rx969_curclass, "$!from"
    ne $I11, -1, rxscan970_done2541
    goto rxscan970_scan2540
  rxscan970_loop2539:
    inc rx969_pos
    gt rx969_pos, rx969_eos, rx969_fail2535
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!from", rx969_pos
  rxscan970_scan2540:
    nqp_rxmark rx969_bstack, rxscan970_loop2539, rx969_pos, 0
  rxscan970_done2541:
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!pos", rx969_pos
    $P11 = rx969_cur."ws"()
    repr_get_attr_int $I11, $P11, rx969_curclass, "$!pos"
    lt $I11, 0, rx969_fail2535
    repr_get_attr_int rx969_pos, $P11, rx969_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt972_02544
    nqp_push_label $P11, alt972_12546
    nqp_rxmark rx969_bstack, alt972_end2543, -1, 0
    rx969_cur."!alt"(rx969_pos, "alt_nfa__36_1360232771.226", $P11)
    goto rx969_fail2535
  alt972_02544:
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!pos", rx969_pos
    $P11 = rx969_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx969_curclass, "$!pos"
    lt $I11, 0, rx969_fail2535
    nqp_rxmark rx969_bstack, rxsubrule973_pass2545, -1, 0
  rxsubrule973_pass2545:
    rx969_cstack = rx969_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx969_pos, $P11, rx969_curclass, "$!pos"
    goto alt972_end2543
  alt972_12546:
    goto alt972_end2543
  alt972_end2543:
    nqp_rxcommit rx969_bstack, alt972_end2543
    rx969_cur."!cursor_pass"(rx969_pos, "arglist", 'backtrack'=>1)
    .return (rx969_cur)
  rx969_restart2534:
    repr_get_attr_obj rx969_cstack, rx969_cur, rx969_curclass, "$!cstack"
  rx969_fail2535:
    unless rx969_bstack, rx969_done2533
    pop $I19, rx969_bstack
    if_null rx969_cstack, rx969_cstack_done2538
    unless rx969_cstack, rx969_cstack_done2538
    dec $I19
    set $P11, rx969_cstack[$I19]
  rx969_cstack_done2538:
    pop rx969_rep, rx969_bstack
    pop rx969_pos, rx969_bstack
    pop $I19, rx969_bstack
    lt rx969_pos, -1, rx969_done2533
    lt rx969_pos, 0, rx969_fail2535
    eq $I19, 0, rx969_fail2535
    nqp_islist $I20, rx969_cstack
    unless $I20, rx969_jump2536
    elements $I18, rx969_bstack
    le $I18, 0, rx969_cut2537
    dec $I18
    set $I18, rx969_bstack[$I18]
  rx969_cut2537:
    assign rx969_cstack, $I18
  rx969_jump2536:
    jump $I19
  rx969_done2533:
    rx969_cur."!cursor_fail"()
    .return (rx969_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_144_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx975_tgt
    .local int rx975_pos
    .local int rx975_off
    .local int rx975_eos
    .local int rx975_rep
    .local pmc rx975_cur
    .local pmc rx975_curclass
    .local pmc rx975_bstack
    .local pmc rx975_cstack
    (rx975_cur, rx975_tgt, rx975_pos, rx975_curclass, rx975_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx975_cur
    length rx975_eos, rx975_tgt
    eq $I19, 1, rx975_restart2550
    gt rx975_pos, rx975_eos, rx975_fail2551
    repr_get_attr_int $I11, self, rx975_curclass, "$!from"
    ne $I11, -1, rxscan976_done2557
    goto rxscan976_scan2556
  rxscan976_loop2555:
    inc rx975_pos
    gt rx975_pos, rx975_eos, rx975_fail2551
    repr_bind_attr_int rx975_cur, rx975_curclass, "$!from", rx975_pos
  rxscan976_scan2556:
    nqp_rxmark rx975_bstack, rxscan976_loop2555, rx975_pos, 0
  rxscan976_done2557:
    repr_bind_attr_int rx975_cur, rx975_curclass, "$!pos", rx975_pos
    $P11 = rx975_cur."value"()
    repr_get_attr_int $I11, $P11, rx975_curclass, "$!pos"
    lt $I11, 0, rx975_fail2551
    nqp_rxmark rx975_bstack, rxsubrule977_pass2558, -1, 0
  rxsubrule977_pass2558:
    rx975_cstack = rx975_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx975_pos, $P11, rx975_curclass, "$!pos"
    rx975_cur."!cursor_pass"(rx975_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx975_cur)
  rx975_restart2550:
    repr_get_attr_obj rx975_cstack, rx975_cur, rx975_curclass, "$!cstack"
  rx975_fail2551:
    unless rx975_bstack, rx975_done2549
    pop $I19, rx975_bstack
    if_null rx975_cstack, rx975_cstack_done2554
    unless rx975_cstack, rx975_cstack_done2554
    dec $I19
    set $P11, rx975_cstack[$I19]
  rx975_cstack_done2554:
    pop rx975_rep, rx975_bstack
    pop rx975_pos, rx975_bstack
    pop $I19, rx975_bstack
    lt rx975_pos, -1, rx975_done2549
    lt rx975_pos, 0, rx975_fail2551
    eq $I19, 0, rx975_fail2551
    nqp_islist $I20, rx975_cstack
    unless $I20, rx975_jump2552
    elements $I18, rx975_bstack
    le $I18, 0, rx975_cut2553
    dec $I18
    set $I18, rx975_bstack[$I18]
  rx975_cut2553:
    assign rx975_cstack, $I18
  rx975_jump2552:
    jump $I19
  rx975_done2549:
    rx975_cur."!cursor_fail"()
    .return (rx975_cur) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_145_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx978_tgt
    .local int rx978_pos
    .local int rx978_off
    .local int rx978_eos
    .local int rx978_rep
    .local pmc rx978_cur
    .local pmc rx978_curclass
    .local pmc rx978_bstack
    .local pmc rx978_cstack
    (rx978_cur, rx978_tgt, rx978_pos, rx978_curclass, rx978_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx978_cur
    length rx978_eos, rx978_tgt
    eq $I19, 1, rx978_restart2561
    gt rx978_pos, rx978_eos, rx978_fail2562
    repr_get_attr_int $I11, self, rx978_curclass, "$!from"
    ne $I11, -1, rxscan979_done2568
    goto rxscan979_scan2567
  rxscan979_loop2566:
    inc rx978_pos
    gt rx978_pos, rx978_eos, rx978_fail2562
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!from", rx978_pos
  rxscan979_scan2567:
    nqp_rxmark rx978_bstack, rxscan979_loop2566, rx978_pos, 0
  rxscan979_done2568:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt980_02570
    nqp_push_label $P11, alt980_12572
    nqp_rxmark rx978_bstack, alt980_end2569, -1, 0
    rx978_cur."!alt"(rx978_pos, "alt_nfa__37_1360232771.235", $P11)
    goto rx978_fail2562
  alt980_02570:
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!pos", rx978_pos
    $P11 = rx978_cur."quote"()
    repr_get_attr_int $I11, $P11, rx978_curclass, "$!pos"
    lt $I11, 0, rx978_fail2562
    nqp_rxmark rx978_bstack, rxsubrule981_pass2571, -1, 0
  rxsubrule981_pass2571:
    rx978_cstack = rx978_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx978_pos, $P11, rx978_curclass, "$!pos"
    goto alt980_end2569
  alt980_12572:
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!pos", rx978_pos
    $P11 = rx978_cur."number"()
    repr_get_attr_int $I11, $P11, rx978_curclass, "$!pos"
    lt $I11, 0, rx978_fail2562
    nqp_rxmark rx978_bstack, rxsubrule982_pass2573, -1, 0
  rxsubrule982_pass2573:
    rx978_cstack = rx978_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx978_pos, $P11, rx978_curclass, "$!pos"
    goto alt980_end2569
  alt980_end2569:
    rx978_cur."!cursor_pass"(rx978_pos, "value", 'backtrack'=>1)
    .return (rx978_cur)
  rx978_restart2561:
    repr_get_attr_obj rx978_cstack, rx978_cur, rx978_curclass, "$!cstack"
  rx978_fail2562:
    unless rx978_bstack, rx978_done2560
    pop $I19, rx978_bstack
    if_null rx978_cstack, rx978_cstack_done2565
    unless rx978_cstack, rx978_cstack_done2565
    dec $I19
    set $P11, rx978_cstack[$I19]
  rx978_cstack_done2565:
    pop rx978_rep, rx978_bstack
    pop rx978_pos, rx978_bstack
    pop $I19, rx978_bstack
    lt rx978_pos, -1, rx978_done2560
    lt rx978_pos, 0, rx978_fail2562
    eq $I19, 0, rx978_fail2562
    nqp_islist $I20, rx978_cstack
    unless $I20, rx978_jump2563
    elements $I18, rx978_bstack
    le $I18, 0, rx978_cut2564
    dec $I18
    set $I18, rx978_bstack[$I18]
  rx978_cut2564:
    assign rx978_cstack, $I18
  rx978_jump2563:
    jump $I19
  rx978_done2560:
    rx978_cur."!cursor_fail"()
    .return (rx978_cur) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_146_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx983_tgt
    .local int rx983_pos
    .local int rx983_off
    .local int rx983_eos
    .local int rx983_rep
    .local pmc rx983_cur
    .local pmc rx983_curclass
    .local pmc rx983_bstack
    .local pmc rx983_cstack
    (rx983_cur, rx983_tgt, rx983_pos, rx983_curclass, rx983_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx983_cur
    length rx983_eos, rx983_tgt
    eq $I19, 1, rx983_restart2576
    gt rx983_pos, rx983_eos, rx983_fail2577
    repr_get_attr_int $I11, self, rx983_curclass, "$!from"
    ne $I11, -1, rxscan984_done2583
    goto rxscan984_scan2582
  rxscan984_loop2581:
    inc rx983_pos
    gt rx983_pos, rx983_eos, rx983_fail2577
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!from", rx983_pos
  rxscan984_scan2582:
    nqp_rxmark rx983_bstack, rxscan984_loop2581, rx983_pos, 0
  rxscan984_done2583:
    nqp_rxmark rx983_bstack, rxcap985_fail2585, rx983_pos, 0
    nqp_rxmark rx983_bstack, rxquantr986_done2587, rx983_pos, 0
  rxquantr986_loop2586:
  alt987_02589:
    nqp_rxmark rx983_bstack, alt987_12590, rx983_pos, 0
    add $I11, rx983_pos, 1
    gt $I11, rx983_eos, rx983_fail2577
    substr $S10, rx983_tgt, rx983_pos, 1
    ne $S10, ucs4:"-", rx983_fail2577
    add rx983_pos, 1
    goto alt987_end2588
  alt987_12590:
    ge rx983_pos, rx983_eos, rx983_fail2577
    substr $S11, rx983_tgt, rx983_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx983_fail2577
    inc rx983_pos
  alt987_end2588:
    nqp_rxpeek $I19, rx983_bstack, rxquantr986_done2587
    inc $I19
    inc $I19
    set rx983_rep, rx983_bstack[$I19]
    nqp_rxcommit rx983_bstack, rxquantr986_done2587
    inc rx983_rep
  rxquantr986_done2587:
    nqp_rxpeek $I19, rx983_bstack, rxcap985_fail2585
    inc $I19
    set $I11, rx983_bstack[$I19]
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx983_pos)
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "sign")
    goto rxcap985_done2584
  rxcap985_fail2585:
    goto rx983_fail2577
  rxcap985_done2584:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt988_02592
    nqp_push_label $P11, alt988_12594
    nqp_rxmark rx983_bstack, alt988_end2591, -1, 0
    rx983_cur."!alt"(rx983_pos, "alt_nfa__38_1360232771.245", $P11)
    goto rx983_fail2577
  alt988_02592:
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx983_curclass, "$!pos"
    lt $I11, 0, rx983_fail2577
    nqp_rxmark rx983_bstack, rxsubrule989_pass2593, -1, 0
  rxsubrule989_pass2593:
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx983_pos, $P11, rx983_curclass, "$!pos"
    goto alt988_end2591
  alt988_12594:
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."integer"()
    repr_get_attr_int $I11, $P11, rx983_curclass, "$!pos"
    lt $I11, 0, rx983_fail2577
    nqp_rxmark rx983_bstack, rxsubrule990_pass2595, -1, 0
  rxsubrule990_pass2595:
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx983_pos, $P11, rx983_curclass, "$!pos"
    goto alt988_end2591
  alt988_end2591:
    nqp_rxcommit rx983_bstack, alt988_end2591
    rx983_cur."!cursor_pass"(rx983_pos, "number", 'backtrack'=>1)
    .return (rx983_cur)
  rx983_restart2576:
    repr_get_attr_obj rx983_cstack, rx983_cur, rx983_curclass, "$!cstack"
  rx983_fail2577:
    unless rx983_bstack, rx983_done2575
    pop $I19, rx983_bstack
    if_null rx983_cstack, rx983_cstack_done2580
    unless rx983_cstack, rx983_cstack_done2580
    dec $I19
    set $P11, rx983_cstack[$I19]
  rx983_cstack_done2580:
    pop rx983_rep, rx983_bstack
    pop rx983_pos, rx983_bstack
    pop $I19, rx983_bstack
    lt rx983_pos, -1, rx983_done2575
    lt rx983_pos, 0, rx983_fail2577
    eq $I19, 0, rx983_fail2577
    nqp_islist $I20, rx983_cstack
    unless $I20, rx983_jump2578
    elements $I18, rx983_bstack
    le $I18, 0, rx983_cut2579
    dec $I18
    set $I18, rx983_bstack[$I18]
  rx983_cut2579:
    assign rx983_cstack, $I18
  rx983_jump2578:
    jump $I19
  rx983_done2575:
    rx983_cur."!cursor_fail"()
    .return (rx983_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_147_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1236
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_148_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1237
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx991_tgt
    .local int rx991_pos
    .local int rx991_off
    .local int rx991_eos
    .local int rx991_rep
    .local pmc rx991_cur
    .local pmc rx991_curclass
    .local pmc rx991_bstack
    .local pmc rx991_cstack
    (rx991_cur, rx991_tgt, rx991_pos, rx991_curclass, rx991_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx991_cur
    length rx991_eos, rx991_tgt
    eq $I19, 1, rx991_restart2598
    gt rx991_pos, rx991_eos, rx991_fail2599
    repr_get_attr_int $I11, self, rx991_curclass, "$!from"
    ne $I11, -1, rxscan992_done2605
    goto rxscan992_scan2604
  rxscan992_loop2603:
    inc rx991_pos
    gt rx991_pos, rx991_eos, rx991_fail2599
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!from", rx991_pos
  rxscan992_scan2604:
    nqp_rxmark rx991_bstack, rxscan992_loop2603, rx991_pos, 0
  rxscan992_done2605:
    ge rx991_pos, rx991_eos, rx991_fail2599
    substr $S11, rx991_tgt, rx991_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx991_fail2599
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail2599
    nqp_rxmark rx991_bstack, rxsubrule993_pass2606, -1, 0
  rxsubrule993_pass2606:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    rx991_cur."!cursor_pass"(rx991_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx991_cur)
  rx991_restart2598:
    repr_get_attr_obj rx991_cstack, rx991_cur, rx991_curclass, "$!cstack"
  rx991_fail2599:
    unless rx991_bstack, rx991_done2597
    pop $I19, rx991_bstack
    if_null rx991_cstack, rx991_cstack_done2602
    unless rx991_cstack, rx991_cstack_done2602
    dec $I19
    set $P11, rx991_cstack[$I19]
  rx991_cstack_done2602:
    pop rx991_rep, rx991_bstack
    pop rx991_pos, rx991_bstack
    pop $I19, rx991_bstack
    lt rx991_pos, -1, rx991_done2597
    lt rx991_pos, 0, rx991_fail2599
    eq $I19, 0, rx991_fail2599
    nqp_islist $I20, rx991_cstack
    unless $I20, rx991_jump2600
    elements $I18, rx991_bstack
    le $I18, 0, rx991_cut2601
    dec $I18
    set $I18, rx991_bstack[$I18]
  rx991_cut2601:
    assign rx991_cstack, $I18
  rx991_jump2600:
    jump $I19
  rx991_done2597:
    rx991_cur."!cursor_fail"()
    .return (rx991_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_149_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx994_tgt
    .local int rx994_pos
    .local int rx994_off
    .local int rx994_eos
    .local int rx994_rep
    .local pmc rx994_cur
    .local pmc rx994_curclass
    .local pmc rx994_bstack
    .local pmc rx994_cstack
    (rx994_cur, rx994_tgt, rx994_pos, rx994_curclass, rx994_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx994_cur
    length rx994_eos, rx994_tgt
    eq $I19, 1, rx994_restart2609
    gt rx994_pos, rx994_eos, rx994_fail2610
    repr_get_attr_int $I11, self, rx994_curclass, "$!from"
    ne $I11, -1, rxscan995_done2616
    goto rxscan995_scan2615
  rxscan995_loop2614:
    inc rx994_pos
    gt rx994_pos, rx994_eos, rx994_fail2610
    repr_bind_attr_int rx994_cur, rx994_curclass, "$!from", rx994_pos
  rxscan995_scan2615:
    nqp_rxmark rx994_bstack, rxscan995_loop2614, rx994_pos, 0
  rxscan995_done2616:
    ge rx994_pos, rx994_eos, rx994_fail2610
    substr $S11, rx994_tgt, rx994_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx994_fail2610
    repr_bind_attr_int rx994_cur, rx994_curclass, "$!pos", rx994_pos
    $P11 = rx994_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx994_curclass, "$!pos"
    lt $I11, 0, rx994_fail2610
    nqp_rxmark rx994_bstack, rxsubrule996_pass2617, -1, 0
  rxsubrule996_pass2617:
    rx994_cstack = rx994_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx994_pos, $P11, rx994_curclass, "$!pos"
    rx994_cur."!cursor_pass"(rx994_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx994_cur)
  rx994_restart2609:
    repr_get_attr_obj rx994_cstack, rx994_cur, rx994_curclass, "$!cstack"
  rx994_fail2610:
    unless rx994_bstack, rx994_done2608
    pop $I19, rx994_bstack
    if_null rx994_cstack, rx994_cstack_done2613
    unless rx994_cstack, rx994_cstack_done2613
    dec $I19
    set $P11, rx994_cstack[$I19]
  rx994_cstack_done2613:
    pop rx994_rep, rx994_bstack
    pop rx994_pos, rx994_bstack
    pop $I19, rx994_bstack
    lt rx994_pos, -1, rx994_done2608
    lt rx994_pos, 0, rx994_fail2610
    eq $I19, 0, rx994_fail2610
    nqp_islist $I20, rx994_cstack
    unless $I20, rx994_jump2611
    elements $I18, rx994_bstack
    le $I18, 0, rx994_cut2612
    dec $I18
    set $I18, rx994_bstack[$I18]
  rx994_cut2612:
    assign rx994_cstack, $I18
  rx994_jump2611:
    jump $I19
  rx994_done2608:
    rx994_cur."!cursor_fail"()
    .return (rx994_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_150_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx997_tgt
    .local int rx997_pos
    .local int rx997_off
    .local int rx997_eos
    .local int rx997_rep
    .local pmc rx997_cur
    .local pmc rx997_curclass
    .local pmc rx997_bstack
    .local pmc rx997_cstack
    (rx997_cur, rx997_tgt, rx997_pos, rx997_curclass, rx997_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx997_cur
    length rx997_eos, rx997_tgt
    eq $I19, 1, rx997_restart2620
    gt rx997_pos, rx997_eos, rx997_fail2621
    repr_get_attr_int $I11, self, rx997_curclass, "$!from"
    ne $I11, -1, rxscan998_done2627
    goto rxscan998_scan2626
  rxscan998_loop2625:
    inc rx997_pos
    gt rx997_pos, rx997_eos, rx997_fail2621
    repr_bind_attr_int rx997_cur, rx997_curclass, "$!from", rx997_pos
  rxscan998_scan2626:
    nqp_rxmark rx997_bstack, rxscan998_loop2625, rx997_pos, 0
  rxscan998_done2627:
    nqp_rxmark rx997_bstack, rxcap999_fail2629, rx997_pos, 0
    add $I11, rx997_pos, 1
    gt $I11, rx997_eos, rx997_fail2621
    substr $S10, rx997_tgt, rx997_pos, 1
    ne $S10, ucs4:"q", rx997_fail2621
    add rx997_pos, 1
    nqp_rxpeek $I19, rx997_bstack, rxcap999_fail2629
    inc $I19
    set $I11, rx997_bstack[$I19]
    repr_bind_attr_int rx997_cur, rx997_curclass, "$!pos", rx997_pos
    $P11 = rx997_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx997_pos)
    rx997_cstack = rx997_cur."!cursor_capture"($P11, "sym")
    goto rxcap999_done2628
  rxcap999_fail2629:
    goto rx997_fail2621
  rxcap999_done2628:
    le rx997_pos, 0, rx997_fail2621
    is_cclass $I11, .CCLASS_WORD, rx997_tgt, rx997_pos
    if $I11, rx997_fail2621
    sub $I11, rx997_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx997_tgt, $I11
    unless $I11, rx997_fail2621
    ge rx997_pos, rx997_eos, rx997_fail2621
    substr $S11, rx997_tgt, rx997_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx997_fail2621
    repr_bind_attr_int rx997_cur, rx997_curclass, "$!pos", rx997_pos
    $P11 = rx997_cur."ws"()
    repr_get_attr_int $I11, $P11, rx997_curclass, "$!pos"
    lt $I11, 0, rx997_fail2621
    repr_get_attr_int rx997_pos, $P11, rx997_curclass, "$!pos"
    repr_bind_attr_int rx997_cur, rx997_curclass, "$!pos", rx997_pos
    $P11 = rx997_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx997_curclass, "$!pos"
    lt $I11, 0, rx997_fail2621
    nqp_rxmark rx997_bstack, rxsubrule1002_pass2632, -1, 0
  rxsubrule1002_pass2632:
    rx997_cstack = rx997_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx997_pos, $P11, rx997_curclass, "$!pos"
    rx997_cur."!cursor_pass"(rx997_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx997_cur)
  rx997_restart2620:
    repr_get_attr_obj rx997_cstack, rx997_cur, rx997_curclass, "$!cstack"
  rx997_fail2621:
    unless rx997_bstack, rx997_done2619
    pop $I19, rx997_bstack
    if_null rx997_cstack, rx997_cstack_done2624
    unless rx997_cstack, rx997_cstack_done2624
    dec $I19
    set $P11, rx997_cstack[$I19]
  rx997_cstack_done2624:
    pop rx997_rep, rx997_bstack
    pop rx997_pos, rx997_bstack
    pop $I19, rx997_bstack
    lt rx997_pos, -1, rx997_done2619
    lt rx997_pos, 0, rx997_fail2621
    eq $I19, 0, rx997_fail2621
    nqp_islist $I20, rx997_cstack
    unless $I20, rx997_jump2622
    elements $I18, rx997_bstack
    le $I18, 0, rx997_cut2623
    dec $I18
    set $I18, rx997_bstack[$I18]
  rx997_cut2623:
    assign rx997_cstack, $I18
  rx997_jump2622:
    jump $I19
  rx997_done2619:
    rx997_cur."!cursor_fail"()
    .return (rx997_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_151_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1003_tgt
    .local int rx1003_pos
    .local int rx1003_off
    .local int rx1003_eos
    .local int rx1003_rep
    .local pmc rx1003_cur
    .local pmc rx1003_curclass
    .local pmc rx1003_bstack
    .local pmc rx1003_cstack
    (rx1003_cur, rx1003_tgt, rx1003_pos, rx1003_curclass, rx1003_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1003_cur
    length rx1003_eos, rx1003_tgt
    eq $I19, 1, rx1003_restart2635
    gt rx1003_pos, rx1003_eos, rx1003_fail2636
    repr_get_attr_int $I11, self, rx1003_curclass, "$!from"
    ne $I11, -1, rxscan1004_done2642
    goto rxscan1004_scan2641
  rxscan1004_loop2640:
    inc rx1003_pos
    gt rx1003_pos, rx1003_eos, rx1003_fail2636
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!from", rx1003_pos
  rxscan1004_scan2641:
    nqp_rxmark rx1003_bstack, rxscan1004_loop2640, rx1003_pos, 0
  rxscan1004_done2642:
    nqp_rxmark rx1003_bstack, rxcap1005_fail2644, rx1003_pos, 0
    add $I11, rx1003_pos, 2
    gt $I11, rx1003_eos, rx1003_fail2636
    substr $S10, rx1003_tgt, rx1003_pos, 2
    ne $S10, ucs4:"qq", rx1003_fail2636
    add rx1003_pos, 2
    nqp_rxpeek $I19, rx1003_bstack, rxcap1005_fail2644
    inc $I19
    set $I11, rx1003_bstack[$I19]
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1003_pos)
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "sym")
    goto rxcap1005_done2643
  rxcap1005_fail2644:
    goto rx1003_fail2636
  rxcap1005_done2643:
    le rx1003_pos, 0, rx1003_fail2636
    is_cclass $I11, .CCLASS_WORD, rx1003_tgt, rx1003_pos
    if $I11, rx1003_fail2636
    sub $I11, rx1003_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1003_tgt, $I11
    unless $I11, rx1003_fail2636
    ge rx1003_pos, rx1003_eos, rx1003_fail2636
    substr $S11, rx1003_tgt, rx1003_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1003_fail2636
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2636
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2636
    nqp_rxmark rx1003_bstack, rxsubrule1008_pass2647, -1, 0
  rxsubrule1008_pass2647:
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    rx1003_cur."!cursor_pass"(rx1003_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx1003_cur)
  rx1003_restart2635:
    repr_get_attr_obj rx1003_cstack, rx1003_cur, rx1003_curclass, "$!cstack"
  rx1003_fail2636:
    unless rx1003_bstack, rx1003_done2634
    pop $I19, rx1003_bstack
    if_null rx1003_cstack, rx1003_cstack_done2639
    unless rx1003_cstack, rx1003_cstack_done2639
    dec $I19
    set $P11, rx1003_cstack[$I19]
  rx1003_cstack_done2639:
    pop rx1003_rep, rx1003_bstack
    pop rx1003_pos, rx1003_bstack
    pop $I19, rx1003_bstack
    lt rx1003_pos, -1, rx1003_done2634
    lt rx1003_pos, 0, rx1003_fail2636
    eq $I19, 0, rx1003_fail2636
    nqp_islist $I20, rx1003_cstack
    unless $I20, rx1003_jump2637
    elements $I18, rx1003_bstack
    le $I18, 0, rx1003_cut2638
    dec $I18
    set $I18, rx1003_bstack[$I18]
  rx1003_cut2638:
    assign rx1003_cstack, $I18
  rx1003_jump2637:
    jump $I19
  rx1003_done2634:
    rx1003_cur."!cursor_fail"()
    .return (rx1003_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_152_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1009_tgt
    .local int rx1009_pos
    .local int rx1009_off
    .local int rx1009_eos
    .local int rx1009_rep
    .local pmc rx1009_cur
    .local pmc rx1009_curclass
    .local pmc rx1009_bstack
    .local pmc rx1009_cstack
    (rx1009_cur, rx1009_tgt, rx1009_pos, rx1009_curclass, rx1009_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1009_cur
    length rx1009_eos, rx1009_tgt
    eq $I19, 1, rx1009_restart2650
    gt rx1009_pos, rx1009_eos, rx1009_fail2651
    repr_get_attr_int $I11, self, rx1009_curclass, "$!from"
    ne $I11, -1, rxscan1010_done2657
    goto rxscan1010_scan2656
  rxscan1010_loop2655:
    inc rx1009_pos
    gt rx1009_pos, rx1009_eos, rx1009_fail2651
    repr_bind_attr_int rx1009_cur, rx1009_curclass, "$!from", rx1009_pos
  rxscan1010_scan2656:
    nqp_rxmark rx1009_bstack, rxscan1010_loop2655, rx1009_pos, 0
  rxscan1010_done2657:
    nqp_rxmark rx1009_bstack, rxcap1011_fail2659, rx1009_pos, 0
    add $I11, rx1009_pos, 1
    gt $I11, rx1009_eos, rx1009_fail2651
    substr $S10, rx1009_tgt, rx1009_pos, 1
    ne $S10, ucs4:"Q", rx1009_fail2651
    add rx1009_pos, 1
    nqp_rxpeek $I19, rx1009_bstack, rxcap1011_fail2659
    inc $I19
    set $I11, rx1009_bstack[$I19]
    repr_bind_attr_int rx1009_cur, rx1009_curclass, "$!pos", rx1009_pos
    $P11 = rx1009_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1009_pos)
    rx1009_cstack = rx1009_cur."!cursor_capture"($P11, "sym")
    goto rxcap1011_done2658
  rxcap1011_fail2659:
    goto rx1009_fail2651
  rxcap1011_done2658:
    le rx1009_pos, 0, rx1009_fail2651
    is_cclass $I11, .CCLASS_WORD, rx1009_tgt, rx1009_pos
    if $I11, rx1009_fail2651
    sub $I11, rx1009_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1009_tgt, $I11
    unless $I11, rx1009_fail2651
    ge rx1009_pos, rx1009_eos, rx1009_fail2651
    substr $S11, rx1009_tgt, rx1009_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1009_fail2651
    repr_bind_attr_int rx1009_cur, rx1009_curclass, "$!pos", rx1009_pos
    $P11 = rx1009_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1009_curclass, "$!pos"
    lt $I11, 0, rx1009_fail2651
    repr_get_attr_int rx1009_pos, $P11, rx1009_curclass, "$!pos"
    repr_bind_attr_int rx1009_cur, rx1009_curclass, "$!pos", rx1009_pos
    $P11 = rx1009_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1009_curclass, "$!pos"
    lt $I11, 0, rx1009_fail2651
    nqp_rxmark rx1009_bstack, rxsubrule1014_pass2662, -1, 0
  rxsubrule1014_pass2662:
    rx1009_cstack = rx1009_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1009_pos, $P11, rx1009_curclass, "$!pos"
    rx1009_cur."!cursor_pass"(rx1009_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx1009_cur)
  rx1009_restart2650:
    repr_get_attr_obj rx1009_cstack, rx1009_cur, rx1009_curclass, "$!cstack"
  rx1009_fail2651:
    unless rx1009_bstack, rx1009_done2649
    pop $I19, rx1009_bstack
    if_null rx1009_cstack, rx1009_cstack_done2654
    unless rx1009_cstack, rx1009_cstack_done2654
    dec $I19
    set $P11, rx1009_cstack[$I19]
  rx1009_cstack_done2654:
    pop rx1009_rep, rx1009_bstack
    pop rx1009_pos, rx1009_bstack
    pop $I19, rx1009_bstack
    lt rx1009_pos, -1, rx1009_done2649
    lt rx1009_pos, 0, rx1009_fail2651
    eq $I19, 0, rx1009_fail2651
    nqp_islist $I20, rx1009_cstack
    unless $I20, rx1009_jump2652
    elements $I18, rx1009_bstack
    le $I18, 0, rx1009_cut2653
    dec $I18
    set $I18, rx1009_bstack[$I18]
  rx1009_cut2653:
    assign rx1009_cstack, $I18
  rx1009_jump2652:
    jump $I19
  rx1009_done2649:
    rx1009_cur."!cursor_fail"()
    .return (rx1009_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_153_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1015_tgt
    .local int rx1015_pos
    .local int rx1015_off
    .local int rx1015_eos
    .local int rx1015_rep
    .local pmc rx1015_cur
    .local pmc rx1015_curclass
    .local pmc rx1015_bstack
    .local pmc rx1015_cstack
    (rx1015_cur, rx1015_tgt, rx1015_pos, rx1015_curclass, rx1015_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1015_cur
    length rx1015_eos, rx1015_tgt
    eq $I19, 1, rx1015_restart2665
    gt rx1015_pos, rx1015_eos, rx1015_fail2666
    repr_get_attr_int $I11, self, rx1015_curclass, "$!from"
    ne $I11, -1, rxscan1016_done2672
    goto rxscan1016_scan2671
  rxscan1016_loop2670:
    inc rx1015_pos
    gt rx1015_pos, rx1015_eos, rx1015_fail2666
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!from", rx1015_pos
  rxscan1016_scan2671:
    nqp_rxmark rx1015_bstack, rxscan1016_loop2670, rx1015_pos, 0
  rxscan1016_done2672:
    nqp_rxmark rx1015_bstack, rxcap1017_fail2674, rx1015_pos, 0
    add $I11, rx1015_pos, 5
    gt $I11, rx1015_eos, rx1015_fail2666
    substr $S10, rx1015_tgt, rx1015_pos, 5
    ne $S10, ucs4:"Q:PIR", rx1015_fail2666
    add rx1015_pos, 5
    nqp_rxpeek $I19, rx1015_bstack, rxcap1017_fail2674
    inc $I19
    set $I11, rx1015_bstack[$I19]
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!pos", rx1015_pos
    $P11 = rx1015_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1015_pos)
    rx1015_cstack = rx1015_cur."!cursor_capture"($P11, "sym")
    goto rxcap1017_done2673
  rxcap1017_fail2674:
    goto rx1015_fail2666
  rxcap1017_done2673:
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!pos", rx1015_pos
    $P11 = rx1015_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1015_curclass, "$!pos"
    lt $I11, 0, rx1015_fail2666
    repr_get_attr_int rx1015_pos, $P11, rx1015_curclass, "$!pos"
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!pos", rx1015_pos
    $P11 = rx1015_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1015_curclass, "$!pos"
    lt $I11, 0, rx1015_fail2666
    nqp_rxmark rx1015_bstack, rxsubrule1019_pass2676, -1, 0
  rxsubrule1019_pass2676:
    rx1015_cstack = rx1015_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1015_pos, $P11, rx1015_curclass, "$!pos"
    rx1015_cur."!cursor_pass"(rx1015_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx1015_cur)
  rx1015_restart2665:
    repr_get_attr_obj rx1015_cstack, rx1015_cur, rx1015_curclass, "$!cstack"
  rx1015_fail2666:
    unless rx1015_bstack, rx1015_done2664
    pop $I19, rx1015_bstack
    if_null rx1015_cstack, rx1015_cstack_done2669
    unless rx1015_cstack, rx1015_cstack_done2669
    dec $I19
    set $P11, rx1015_cstack[$I19]
  rx1015_cstack_done2669:
    pop rx1015_rep, rx1015_bstack
    pop rx1015_pos, rx1015_bstack
    pop $I19, rx1015_bstack
    lt rx1015_pos, -1, rx1015_done2664
    lt rx1015_pos, 0, rx1015_fail2666
    eq $I19, 0, rx1015_fail2666
    nqp_islist $I20, rx1015_cstack
    unless $I20, rx1015_jump2667
    elements $I18, rx1015_bstack
    le $I18, 0, rx1015_cut2668
    dec $I18
    set $I18, rx1015_bstack[$I18]
  rx1015_cut2668:
    assign rx1015_cstack, $I18
  rx1015_jump2667:
    jump $I19
  rx1015_done2664:
    rx1015_cur."!cursor_fail"()
    .return (rx1015_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_154_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx1020_tgt
    .local int rx1020_pos
    .local int rx1020_off
    .local int rx1020_eos
    .local int rx1020_rep
    .local pmc rx1020_cur
    .local pmc rx1020_curclass
    .local pmc rx1020_bstack
    .local pmc rx1020_cstack
    (rx1020_cur, rx1020_tgt, rx1020_pos, rx1020_curclass, rx1020_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1020_cur
    length rx1020_eos, rx1020_tgt
    eq $I19, 1, rx1020_restart2679
    gt rx1020_pos, rx1020_eos, rx1020_fail2680
    repr_get_attr_int $I11, self, rx1020_curclass, "$!from"
    ne $I11, -1, rxscan1021_done2686
    goto rxscan1021_scan2685
  rxscan1021_loop2684:
    inc rx1020_pos
    gt rx1020_pos, rx1020_eos, rx1020_fail2680
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!from", rx1020_pos
  rxscan1021_scan2685:
    nqp_rxmark rx1020_bstack, rxscan1021_loop2684, rx1020_pos, 0
  rxscan1021_done2686:
    add $I11, rx1020_pos, 1
    gt $I11, rx1020_eos, rx1020_fail2680
    substr $S10, rx1020_tgt, rx1020_pos, 1
    ne $S10, ucs4:"/", rx1020_fail2680
    add rx1020_pos, 1
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2680
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    store_lex unicode:"$\x{a2}", rx1020_cur
    unless_null $P101, fallback2688
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2689
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2689:
    unless_null $P5002, vivi_10232690
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_10232690:
    set $P101, $P5002
  fallback2688:
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2680
    nqp_rxmark rx1020_bstack, rxsubrule1024_pass2691, -1, 0
  rxsubrule1024_pass2691:
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    add $I11, rx1020_pos, 1
    gt $I11, rx1020_eos, rx1020_fail2680
    substr $S10, rx1020_tgt, rx1020_pos, 1
    ne $S10, ucs4:"/", rx1020_fail2680
    add rx1020_pos, 1
    rx1020_cur."!cursor_pass"(rx1020_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx1020_cur)
  rx1020_restart2679:
    repr_get_attr_obj rx1020_cstack, rx1020_cur, rx1020_curclass, "$!cstack"
  rx1020_fail2680:
    unless rx1020_bstack, rx1020_done2678
    pop $I19, rx1020_bstack
    if_null rx1020_cstack, rx1020_cstack_done2683
    unless rx1020_cstack, rx1020_cstack_done2683
    dec $I19
    set $P11, rx1020_cstack[$I19]
  rx1020_cstack_done2683:
    pop rx1020_rep, rx1020_bstack
    pop rx1020_pos, rx1020_bstack
    pop $I19, rx1020_bstack
    lt rx1020_pos, -1, rx1020_done2678
    lt rx1020_pos, 0, rx1020_fail2680
    eq $I19, 0, rx1020_fail2680
    nqp_islist $I20, rx1020_cstack
    unless $I20, rx1020_jump2681
    elements $I18, rx1020_bstack
    le $I18, 0, rx1020_cut2682
    dec $I18
    set $I18, rx1020_bstack[$I18]
  rx1020_cut2682:
    assign rx1020_cstack, $I18
  rx1020_jump2681:
    jump $I19
  rx1020_done2678:
    rx1020_cur."!cursor_fail"()
    .return (rx1020_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_155_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1251
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1025_tgt
    .local int rx1025_pos
    .local int rx1025_off
    .local int rx1025_eos
    .local int rx1025_rep
    .local pmc rx1025_cur
    .local pmc rx1025_curclass
    .local pmc rx1025_bstack
    .local pmc rx1025_cstack
    (rx1025_cur, rx1025_tgt, rx1025_pos, rx1025_curclass, rx1025_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1025_cur
    length rx1025_eos, rx1025_tgt
    eq $I19, 1, rx1025_restart2694
    gt rx1025_pos, rx1025_eos, rx1025_fail2695
    repr_get_attr_int $I11, self, rx1025_curclass, "$!from"
    ne $I11, -1, rxscan1026_done2701
    goto rxscan1026_scan2700
  rxscan1026_loop2699:
    inc rx1025_pos
    gt rx1025_pos, rx1025_eos, rx1025_fail2695
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!from", rx1025_pos
  rxscan1026_scan2700:
    nqp_rxmark rx1025_bstack, rxscan1026_loop2699, rx1025_pos, 0
  rxscan1026_done2701:
    ge rx1025_pos, rx1025_eos, rx1025_fail2695
    substr $S11, rx1025_tgt, rx1025_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx1025_fail2695
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!pos", rx1025_pos
    $P11 = rx1025_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx1025_curclass, "$!pos"
    lt $I11, 0, rx1025_fail2695
    repr_bind_attr_int rx1025_cur, rx1025_curclass, "$!pos", rx1025_pos
    $P11 = rx1025_cur."variable"()
    repr_get_attr_int $I11, $P11, rx1025_curclass, "$!pos"
    lt $I11, 0, rx1025_fail2695
    nqp_rxmark rx1025_bstack, rxsubrule1027_pass2702, -1, 0
  rxsubrule1027_pass2702:
    rx1025_cstack = rx1025_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx1025_pos, $P11, rx1025_curclass, "$!pos"
    rx1025_cur."!cursor_pass"(rx1025_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx1025_cur)
  rx1025_restart2694:
    repr_get_attr_obj rx1025_cstack, rx1025_cur, rx1025_curclass, "$!cstack"
  rx1025_fail2695:
    unless rx1025_bstack, rx1025_done2693
    pop $I19, rx1025_bstack
    if_null rx1025_cstack, rx1025_cstack_done2698
    unless rx1025_cstack, rx1025_cstack_done2698
    dec $I19
    set $P11, rx1025_cstack[$I19]
  rx1025_cstack_done2698:
    pop rx1025_rep, rx1025_bstack
    pop rx1025_pos, rx1025_bstack
    pop $I19, rx1025_bstack
    lt rx1025_pos, -1, rx1025_done2693
    lt rx1025_pos, 0, rx1025_fail2695
    eq $I19, 0, rx1025_fail2695
    nqp_islist $I20, rx1025_cstack
    unless $I20, rx1025_jump2696
    elements $I18, rx1025_bstack
    le $I18, 0, rx1025_cut2697
    dec $I18
    set $I18, rx1025_bstack[$I18]
  rx1025_cut2697:
    assign rx1025_cstack, $I18
  rx1025_jump2696:
    jump $I19
  rx1025_done2693:
    rx1025_cur."!cursor_fail"()
    .return (rx1025_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_156_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1252
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1028_tgt
    .local int rx1028_pos
    .local int rx1028_off
    .local int rx1028_eos
    .local int rx1028_rep
    .local pmc rx1028_cur
    .local pmc rx1028_curclass
    .local pmc rx1028_bstack
    .local pmc rx1028_cstack
    (rx1028_cur, rx1028_tgt, rx1028_pos, rx1028_curclass, rx1028_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1028_cur
    length rx1028_eos, rx1028_tgt
    eq $I19, 1, rx1028_restart2705
    gt rx1028_pos, rx1028_eos, rx1028_fail2706
    repr_get_attr_int $I11, self, rx1028_curclass, "$!from"
    ne $I11, -1, rxscan1029_done2712
    goto rxscan1029_scan2711
  rxscan1029_loop2710:
    inc rx1028_pos
    gt rx1028_pos, rx1028_eos, rx1028_fail2706
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!from", rx1028_pos
  rxscan1029_scan2711:
    nqp_rxmark rx1028_bstack, rxscan1029_loop2710, rx1028_pos, 0
  rxscan1029_done2712:
    ge rx1028_pos, rx1028_eos, rx1028_fail2706
    substr $S11, rx1028_tgt, rx1028_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1028_fail2706
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!pos", rx1028_pos
    $P11 = rx1028_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx1028_curclass, "$!pos"
    lt $I11, 0, rx1028_fail2706
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!pos", rx1028_pos
    $P11 = rx1028_cur."block"()
    repr_get_attr_int $I11, $P11, rx1028_curclass, "$!pos"
    lt $I11, 0, rx1028_fail2706
    nqp_rxmark rx1028_bstack, rxsubrule1030_pass2713, -1, 0
  rxsubrule1030_pass2713:
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1028_pos, $P11, rx1028_curclass, "$!pos"
    rx1028_cur."!cursor_pass"(rx1028_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx1028_cur)
  rx1028_restart2705:
    repr_get_attr_obj rx1028_cstack, rx1028_cur, rx1028_curclass, "$!cstack"
  rx1028_fail2706:
    unless rx1028_bstack, rx1028_done2704
    pop $I19, rx1028_bstack
    if_null rx1028_cstack, rx1028_cstack_done2709
    unless rx1028_cstack, rx1028_cstack_done2709
    dec $I19
    set $P11, rx1028_cstack[$I19]
  rx1028_cstack_done2709:
    pop rx1028_rep, rx1028_bstack
    pop rx1028_pos, rx1028_bstack
    pop $I19, rx1028_bstack
    lt rx1028_pos, -1, rx1028_done2704
    lt rx1028_pos, 0, rx1028_fail2706
    eq $I19, 0, rx1028_fail2706
    nqp_islist $I20, rx1028_cstack
    unless $I20, rx1028_jump2707
    elements $I18, rx1028_bstack
    le $I18, 0, rx1028_cut2708
    dec $I18
    set $I18, rx1028_bstack[$I18]
  rx1028_cut2708:
    assign rx1028_cstack, $I18
  rx1028_jump2707:
    jump $I19
  rx1028_done2704:
    rx1028_cur."!cursor_fail"()
    .return (rx1028_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_157_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1253
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1031_tgt
    .local int rx1031_pos
    .local int rx1031_off
    .local int rx1031_eos
    .local int rx1031_rep
    .local pmc rx1031_cur
    .local pmc rx1031_curclass
    .local pmc rx1031_bstack
    .local pmc rx1031_cstack
    (rx1031_cur, rx1031_tgt, rx1031_pos, rx1031_curclass, rx1031_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1031_cur
    length rx1031_eos, rx1031_tgt
    eq $I19, 1, rx1031_restart2716
    gt rx1031_pos, rx1031_eos, rx1031_fail2717
    repr_get_attr_int $I11, self, rx1031_curclass, "$!from"
    ne $I11, -1, rxscan1032_done2723
    goto rxscan1032_scan2722
  rxscan1032_loop2721:
    inc rx1031_pos
    gt rx1031_pos, rx1031_eos, rx1031_fail2717
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!from", rx1031_pos
  rxscan1032_scan2722:
    nqp_rxmark rx1031_bstack, rxscan1032_loop2721, rx1031_pos, 0
  rxscan1032_done2723:
    add $I11, rx1031_pos, 2
    gt $I11, rx1031_eos, rx1031_fail2717
    substr $S10, rx1031_tgt, rx1031_pos, 2
    ne $S10, ucs4:"\\e", rx1031_fail2717
    add rx1031_pos, 2
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2717
    rx1031_cur."!cursor_pass"(rx1031_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx1031_cur)
  rx1031_restart2716:
    repr_get_attr_obj rx1031_cstack, rx1031_cur, rx1031_curclass, "$!cstack"
  rx1031_fail2717:
    unless rx1031_bstack, rx1031_done2715
    pop $I19, rx1031_bstack
    if_null rx1031_cstack, rx1031_cstack_done2720
    unless rx1031_cstack, rx1031_cstack_done2720
    dec $I19
    set $P11, rx1031_cstack[$I19]
  rx1031_cstack_done2720:
    pop rx1031_rep, rx1031_bstack
    pop rx1031_pos, rx1031_bstack
    pop $I19, rx1031_bstack
    lt rx1031_pos, -1, rx1031_done2715
    lt rx1031_pos, 0, rx1031_fail2717
    eq $I19, 0, rx1031_fail2717
    nqp_islist $I20, rx1031_cstack
    unless $I20, rx1031_jump2718
    elements $I18, rx1031_bstack
    le $I18, 0, rx1031_cut2719
    dec $I18
    set $I18, rx1031_bstack[$I18]
  rx1031_cut2719:
    assign rx1031_cstack, $I18
  rx1031_jump2718:
    jump $I19
  rx1031_done2715:
    rx1031_cur."!cursor_fail"()
    .return (rx1031_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_158_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1033_tgt
    .local int rx1033_pos
    .local int rx1033_off
    .local int rx1033_eos
    .local int rx1033_rep
    .local pmc rx1033_cur
    .local pmc rx1033_curclass
    .local pmc rx1033_bstack
    .local pmc rx1033_cstack
    (rx1033_cur, rx1033_tgt, rx1033_pos, rx1033_curclass, rx1033_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1033_cur
    length rx1033_eos, rx1033_tgt
    eq $I19, 1, rx1033_restart2726
    gt rx1033_pos, rx1033_eos, rx1033_fail2727
    repr_get_attr_int $I11, self, rx1033_curclass, "$!from"
    ne $I11, -1, rxscan1034_done2733
    goto rxscan1034_scan2732
  rxscan1034_loop2731:
    inc rx1033_pos
    gt rx1033_pos, rx1033_eos, rx1033_fail2727
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!from", rx1033_pos
  rxscan1034_scan2732:
    nqp_rxmark rx1033_bstack, rxscan1034_loop2731, rx1033_pos, 0
  rxscan1034_done2733:
    add $I11, rx1033_pos, 1
    gt $I11, rx1033_eos, rx1033_fail2727
    substr $S10, rx1033_tgt, rx1033_pos, 1
    ne $S10, ucs4:"(", rx1033_fail2727
    add rx1033_pos, 1
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!pos", rx1033_pos
    $P11 = rx1033_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1033_curclass, "$!pos"
    lt $I11, 0, rx1033_fail2727
    repr_get_attr_int rx1033_pos, $P11, rx1033_curclass, "$!pos"
    nqp_rxmark rx1033_bstack, rxquantr1036_done2736, rx1033_pos, 0
  rxquantr1036_loop2735:
    repr_bind_attr_int rx1033_cur, rx1033_curclass, "$!pos", rx1033_pos
    $P11 = rx1033_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1033_curclass, "$!pos"
    lt $I11, 0, rx1033_fail2727
    goto rxsubrule1037_pass2737
  rxsubrule1037_back2738:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1033_curclass, "$!pos"
    lt $I11, 0, rx1033_fail2727
  rxsubrule1037_pass2737:
    rx1033_cstack = rx1033_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1037_back2738
    push rx1033_bstack, $I11
    push rx1033_bstack, 0
    push rx1033_bstack, rx1033_pos
    elements $I11, rx1033_cstack
    push rx1033_bstack, $I11
    repr_get_attr_int rx1033_pos, $P11, rx1033_curclass, "$!pos"
    nqp_rxpeek $I19, rx1033_bstack, rxquantr1036_done2736
    inc $I19
    inc $I19
    set rx1033_rep, rx1033_bstack[$I19]
    nqp_rxcommit rx1033_bstack, rxquantr1036_done2736
    inc rx1033_rep
  rxquantr1036_done2736:
    add $I11, rx1033_pos, 1
    gt $I11, rx1033_eos, rx1033_fail2727
    substr $S10, rx1033_tgt, rx1033_pos, 1
    ne $S10, ucs4:")", rx1033_fail2727
    add rx1033_pos, 1
    rx1033_cur."!cursor_pass"(rx1033_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1033_cur)
  rx1033_restart2726:
    repr_get_attr_obj rx1033_cstack, rx1033_cur, rx1033_curclass, "$!cstack"
  rx1033_fail2727:
    unless rx1033_bstack, rx1033_done2725
    pop $I19, rx1033_bstack
    if_null rx1033_cstack, rx1033_cstack_done2730
    unless rx1033_cstack, rx1033_cstack_done2730
    dec $I19
    set $P11, rx1033_cstack[$I19]
  rx1033_cstack_done2730:
    pop rx1033_rep, rx1033_bstack
    pop rx1033_pos, rx1033_bstack
    pop $I19, rx1033_bstack
    lt rx1033_pos, -1, rx1033_done2725
    lt rx1033_pos, 0, rx1033_fail2727
    eq $I19, 0, rx1033_fail2727
    nqp_islist $I20, rx1033_cstack
    unless $I20, rx1033_jump2728
    elements $I18, rx1033_bstack
    le $I18, 0, rx1033_cut2729
    dec $I18
    set $I18, rx1033_bstack[$I18]
  rx1033_cut2729:
    assign rx1033_cstack, $I18
  rx1033_jump2728:
    jump $I19
  rx1033_done2725:
    rx1033_cur."!cursor_fail"()
    .return (rx1033_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_159_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1038_tgt
    .local int rx1038_pos
    .local int rx1038_off
    .local int rx1038_eos
    .local int rx1038_rep
    .local pmc rx1038_cur
    .local pmc rx1038_curclass
    .local pmc rx1038_bstack
    .local pmc rx1038_cstack
    (rx1038_cur, rx1038_tgt, rx1038_pos, rx1038_curclass, rx1038_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1038_cur
    length rx1038_eos, rx1038_tgt
    eq $I19, 1, rx1038_restart2741
    gt rx1038_pos, rx1038_eos, rx1038_fail2742
    repr_get_attr_int $I11, self, rx1038_curclass, "$!from"
    ne $I11, -1, rxscan1039_done2748
    goto rxscan1039_scan2747
  rxscan1039_loop2746:
    inc rx1038_pos
    gt rx1038_pos, rx1038_eos, rx1038_fail2742
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!from", rx1038_pos
  rxscan1039_scan2747:
    nqp_rxmark rx1038_bstack, rxscan1039_loop2746, rx1038_pos, 0
  rxscan1039_done2748:
    add $I11, rx1038_pos, 1
    gt $I11, rx1038_eos, rx1038_fail2742
    substr $S10, rx1038_tgt, rx1038_pos, 1
    ne $S10, ucs4:"[", rx1038_fail2742
    add rx1038_pos, 1
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2742
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    nqp_rxmark rx1038_bstack, rxquantr1041_done2751, rx1038_pos, 0
  rxquantr1041_loop2750:
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2742
    goto rxsubrule1042_pass2752
  rxsubrule1042_back2753:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2742
  rxsubrule1042_pass2752:
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1042_back2753
    push rx1038_bstack, $I11
    push rx1038_bstack, 0
    push rx1038_bstack, rx1038_pos
    elements $I11, rx1038_cstack
    push rx1038_bstack, $I11
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    nqp_rxpeek $I19, rx1038_bstack, rxquantr1041_done2751
    inc $I19
    inc $I19
    set rx1038_rep, rx1038_bstack[$I19]
    nqp_rxcommit rx1038_bstack, rxquantr1041_done2751
    inc rx1038_rep
  rxquantr1041_done2751:
    add $I11, rx1038_pos, 1
    gt $I11, rx1038_eos, rx1038_fail2742
    substr $S10, rx1038_tgt, rx1038_pos, 1
    ne $S10, ucs4:"]", rx1038_fail2742
    add rx1038_pos, 1
    rx1038_cur."!cursor_pass"(rx1038_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1038_cur)
  rx1038_restart2741:
    repr_get_attr_obj rx1038_cstack, rx1038_cur, rx1038_curclass, "$!cstack"
  rx1038_fail2742:
    unless rx1038_bstack, rx1038_done2740
    pop $I19, rx1038_bstack
    if_null rx1038_cstack, rx1038_cstack_done2745
    unless rx1038_cstack, rx1038_cstack_done2745
    dec $I19
    set $P11, rx1038_cstack[$I19]
  rx1038_cstack_done2745:
    pop rx1038_rep, rx1038_bstack
    pop rx1038_pos, rx1038_bstack
    pop $I19, rx1038_bstack
    lt rx1038_pos, -1, rx1038_done2740
    lt rx1038_pos, 0, rx1038_fail2742
    eq $I19, 0, rx1038_fail2742
    nqp_islist $I20, rx1038_cstack
    unless $I20, rx1038_jump2743
    elements $I18, rx1038_bstack
    le $I18, 0, rx1038_cut2744
    dec $I18
    set $I18, rx1038_bstack[$I18]
  rx1038_cut2744:
    assign rx1038_cstack, $I18
  rx1038_jump2743:
    jump $I19
  rx1038_done2740:
    rx1038_cur."!cursor_fail"()
    .return (rx1038_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_160_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1257
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1043_tgt
    .local int rx1043_pos
    .local int rx1043_off
    .local int rx1043_eos
    .local int rx1043_rep
    .local pmc rx1043_cur
    .local pmc rx1043_curclass
    .local pmc rx1043_bstack
    .local pmc rx1043_cstack
    (rx1043_cur, rx1043_tgt, rx1043_pos, rx1043_curclass, rx1043_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1043_cur
    length rx1043_eos, rx1043_tgt
    eq $I19, 1, rx1043_restart2756
    gt rx1043_pos, rx1043_eos, rx1043_fail2757
    repr_get_attr_int $I11, self, rx1043_curclass, "$!from"
    ne $I11, -1, rxscan1044_done2763
    goto rxscan1044_scan2762
  rxscan1044_loop2761:
    inc rx1043_pos
    gt rx1043_pos, rx1043_eos, rx1043_fail2757
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!from", rx1043_pos
  rxscan1044_scan2762:
    nqp_rxmark rx1043_bstack, rxscan1044_loop2761, rx1043_pos, 0
  rxscan1044_done2763:
    ge rx1043_pos, rx1043_eos, rx1043_fail2757
    substr $S11, rx1043_tgt, rx1043_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1043_fail2757
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!pos", rx1043_pos
    $P11 = rx1043_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx1043_curclass, "$!pos"
    lt $I11, 0, rx1043_fail2757
    nqp_rxmark rx1043_bstack, rxsubrule1045_pass2764, -1, 0
  rxsubrule1045_pass2764:
    rx1043_cstack = rx1043_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1043_pos, $P11, rx1043_curclass, "$!pos"
    rx1043_cur."!cursor_pass"(rx1043_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1043_cur)
  rx1043_restart2756:
    repr_get_attr_obj rx1043_cstack, rx1043_cur, rx1043_curclass, "$!cstack"
  rx1043_fail2757:
    unless rx1043_bstack, rx1043_done2755
    pop $I19, rx1043_bstack
    if_null rx1043_cstack, rx1043_cstack_done2760
    unless rx1043_cstack, rx1043_cstack_done2760
    dec $I19
    set $P11, rx1043_cstack[$I19]
  rx1043_cstack_done2760:
    pop rx1043_rep, rx1043_bstack
    pop rx1043_pos, rx1043_bstack
    pop $I19, rx1043_bstack
    lt rx1043_pos, -1, rx1043_done2755
    lt rx1043_pos, 0, rx1043_fail2757
    eq $I19, 0, rx1043_fail2757
    nqp_islist $I20, rx1043_cstack
    unless $I20, rx1043_jump2758
    elements $I18, rx1043_bstack
    le $I18, 0, rx1043_cut2759
    dec $I18
    set $I18, rx1043_bstack[$I18]
  rx1043_cut2759:
    assign rx1043_cstack, $I18
  rx1043_jump2758:
    jump $I19
  rx1043_done2755:
    rx1043_cur."!cursor_fail"()
    .return (rx1043_cur) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_161_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1046_tgt
    .local int rx1046_pos
    .local int rx1046_off
    .local int rx1046_eos
    .local int rx1046_rep
    .local pmc rx1046_cur
    .local pmc rx1046_curclass
    .local pmc rx1046_bstack
    .local pmc rx1046_cstack
    (rx1046_cur, rx1046_tgt, rx1046_pos, rx1046_curclass, rx1046_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1046_cur
    length rx1046_eos, rx1046_tgt
    eq $I19, 1, rx1046_restart2767
    gt rx1046_pos, rx1046_eos, rx1046_fail2768
    repr_get_attr_int $I11, self, rx1046_curclass, "$!from"
    ne $I11, -1, rxscan1047_done2774
    goto rxscan1047_scan2773
  rxscan1047_loop2772:
    inc rx1046_pos
    gt rx1046_pos, rx1046_eos, rx1046_fail2768
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!from", rx1046_pos
  rxscan1047_scan2773:
    nqp_rxmark rx1046_bstack, rxscan1047_loop2772, rx1046_pos, 0
  rxscan1047_done2774:
    ge rx1046_pos, rx1046_eos, rx1046_fail2768
    substr $S11, rx1046_tgt, rx1046_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx1046_fail2768
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!pos", rx1046_pos
    $P11 = rx1046_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx1046_curclass, "$!pos"
    lt $I11, 0, rx1046_fail2768
    nqp_rxmark rx1046_bstack, rxsubrule1048_pass2775, -1, 0
  rxsubrule1048_pass2775:
    rx1046_cstack = rx1046_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1046_pos, $P11, rx1046_curclass, "$!pos"
    rx1046_cur."!cursor_pass"(rx1046_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx1046_cur)
  rx1046_restart2767:
    repr_get_attr_obj rx1046_cstack, rx1046_cur, rx1046_curclass, "$!cstack"
  rx1046_fail2768:
    unless rx1046_bstack, rx1046_done2766
    pop $I19, rx1046_bstack
    if_null rx1046_cstack, rx1046_cstack_done2771
    unless rx1046_cstack, rx1046_cstack_done2771
    dec $I19
    set $P11, rx1046_cstack[$I19]
  rx1046_cstack_done2771:
    pop rx1046_rep, rx1046_bstack
    pop rx1046_pos, rx1046_bstack
    pop $I19, rx1046_bstack
    lt rx1046_pos, -1, rx1046_done2766
    lt rx1046_pos, 0, rx1046_fail2768
    eq $I19, 0, rx1046_fail2768
    nqp_islist $I20, rx1046_cstack
    unless $I20, rx1046_jump2769
    elements $I18, rx1046_bstack
    le $I18, 0, rx1046_cut2770
    dec $I18
    set $I18, rx1046_bstack[$I18]
  rx1046_cut2770:
    assign rx1046_cstack, $I18
  rx1046_jump2769:
    jump $I19
  rx1046_done2766:
    rx1046_cur."!cursor_fail"()
    .return (rx1046_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_162_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1259
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1049_tgt
    .local int rx1049_pos
    .local int rx1049_off
    .local int rx1049_eos
    .local int rx1049_rep
    .local pmc rx1049_cur
    .local pmc rx1049_curclass
    .local pmc rx1049_bstack
    .local pmc rx1049_cstack
    (rx1049_cur, rx1049_tgt, rx1049_pos, rx1049_curclass, rx1049_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1049_cur
    length rx1049_eos, rx1049_tgt
    eq $I19, 1, rx1049_restart2778
    gt rx1049_pos, rx1049_eos, rx1049_fail2779
    repr_get_attr_int $I11, self, rx1049_curclass, "$!from"
    ne $I11, -1, rxscan1050_done2785
    goto rxscan1050_scan2784
  rxscan1050_loop2783:
    inc rx1049_pos
    gt rx1049_pos, rx1049_eos, rx1049_fail2779
    repr_bind_attr_int rx1049_cur, rx1049_curclass, "$!from", rx1049_pos
  rxscan1050_scan2784:
    nqp_rxmark rx1049_bstack, rxscan1050_loop2783, rx1049_pos, 0
  rxscan1050_done2785:
    ge rx1049_pos, rx1049_eos, rx1049_fail2779
    substr $S11, rx1049_tgt, rx1049_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1049_fail2779
    repr_bind_attr_int rx1049_cur, rx1049_curclass, "$!pos", rx1049_pos
    $P11 = rx1049_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx1049_curclass, "$!pos"
    lt $I11, 0, rx1049_fail2779
    nqp_rxmark rx1049_bstack, rxsubrule1051_pass2786, -1, 0
  rxsubrule1051_pass2786:
    rx1049_cstack = rx1049_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx1049_pos, $P11, rx1049_curclass, "$!pos"
    rx1049_cur."!cursor_pass"(rx1049_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1049_cur)
  rx1049_restart2778:
    repr_get_attr_obj rx1049_cstack, rx1049_cur, rx1049_curclass, "$!cstack"
  rx1049_fail2779:
    unless rx1049_bstack, rx1049_done2777
    pop $I19, rx1049_bstack
    if_null rx1049_cstack, rx1049_cstack_done2782
    unless rx1049_cstack, rx1049_cstack_done2782
    dec $I19
    set $P11, rx1049_cstack[$I19]
  rx1049_cstack_done2782:
    pop rx1049_rep, rx1049_bstack
    pop rx1049_pos, rx1049_bstack
    pop $I19, rx1049_bstack
    lt rx1049_pos, -1, rx1049_done2777
    lt rx1049_pos, 0, rx1049_fail2779
    eq $I19, 0, rx1049_fail2779
    nqp_islist $I20, rx1049_cstack
    unless $I20, rx1049_jump2780
    elements $I18, rx1049_bstack
    le $I18, 0, rx1049_cut2781
    dec $I18
    set $I18, rx1049_bstack[$I18]
  rx1049_cut2781:
    assign rx1049_cstack, $I18
  rx1049_jump2780:
    jump $I19
  rx1049_done2777:
    rx1049_cur."!cursor_fail"()
    .return (rx1049_cur) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_163_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1052_tgt
    .local int rx1052_pos
    .local int rx1052_off
    .local int rx1052_eos
    .local int rx1052_rep
    .local pmc rx1052_cur
    .local pmc rx1052_curclass
    .local pmc rx1052_bstack
    .local pmc rx1052_cstack
    (rx1052_cur, rx1052_tgt, rx1052_pos, rx1052_curclass, rx1052_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1052_cur
    length rx1052_eos, rx1052_tgt
    eq $I19, 1, rx1052_restart2789
    gt rx1052_pos, rx1052_eos, rx1052_fail2790
    repr_get_attr_int $I11, self, rx1052_curclass, "$!from"
    ne $I11, -1, rxscan1053_done2796
    goto rxscan1053_scan2795
  rxscan1053_loop2794:
    inc rx1052_pos
    gt rx1052_pos, rx1052_eos, rx1052_fail2790
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!from", rx1052_pos
  rxscan1053_scan2795:
    nqp_rxmark rx1052_bstack, rxscan1053_loop2794, rx1052_pos, 0
  rxscan1053_done2796:
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2790
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."statement"()
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2790
    nqp_rxmark rx1052_bstack, rxsubrule1055_pass2798, -1, 0
  rxsubrule1055_pass2798:
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2790
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
    rx1052_cur."!cursor_pass"(rx1052_pos, "semilist", 'backtrack'=>1)
    .return (rx1052_cur)
  rx1052_restart2789:
    repr_get_attr_obj rx1052_cstack, rx1052_cur, rx1052_curclass, "$!cstack"
  rx1052_fail2790:
    unless rx1052_bstack, rx1052_done2788
    pop $I19, rx1052_bstack
    if_null rx1052_cstack, rx1052_cstack_done2793
    unless rx1052_cstack, rx1052_cstack_done2793
    dec $I19
    set $P11, rx1052_cstack[$I19]
  rx1052_cstack_done2793:
    pop rx1052_rep, rx1052_bstack
    pop rx1052_pos, rx1052_bstack
    pop $I19, rx1052_bstack
    lt rx1052_pos, -1, rx1052_done2788
    lt rx1052_pos, 0, rx1052_fail2790
    eq $I19, 0, rx1052_fail2790
    nqp_islist $I20, rx1052_cstack
    unless $I20, rx1052_jump2791
    elements $I18, rx1052_bstack
    le $I18, 0, rx1052_cut2792
    dec $I18
    set $I18, rx1052_bstack[$I18]
  rx1052_cut2792:
    assign rx1052_cstack, $I18
  rx1052_jump2791:
    jump $I19
  rx1052_done2788:
    rx1052_cur."!cursor_fail"()
    .return (rx1052_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_164_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1284
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1057_tgt
    .local int rx1057_pos
    .local int rx1057_off
    .local int rx1057_eos
    .local int rx1057_rep
    .local pmc rx1057_cur
    .local pmc rx1057_curclass
    .local pmc rx1057_bstack
    .local pmc rx1057_cstack
    (rx1057_cur, rx1057_tgt, rx1057_pos, rx1057_curclass, rx1057_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1057_cur
    length rx1057_eos, rx1057_tgt
    eq $I19, 1, rx1057_restart2802
    gt rx1057_pos, rx1057_eos, rx1057_fail2803
    repr_get_attr_int $I11, self, rx1057_curclass, "$!from"
    ne $I11, -1, rxscan1058_done2809
    goto rxscan1058_scan2808
  rxscan1058_loop2807:
    inc rx1057_pos
    gt rx1057_pos, rx1057_eos, rx1057_fail2803
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!from", rx1057_pos
  rxscan1058_scan2808:
    nqp_rxmark rx1057_bstack, rxscan1058_loop2807, rx1057_pos, 0
  rxscan1058_done2809:
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!pos", rx1057_pos
    $P11 = rx1057_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx1057_curclass, "$!pos"
    ge $I11, 0, rx1057_fail2803
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!pos", rx1057_pos
    $P11 = rx1057_cur."infix"()
    repr_get_attr_int $I11, $P11, rx1057_curclass, "$!pos"
    lt $I11, 0, rx1057_fail2803
    nqp_rxmark rx1057_bstack, rxsubrule1059_pass2810, -1, 0
  rxsubrule1059_pass2810:
    rx1057_cstack = rx1057_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx1057_pos, $P11, rx1057_curclass, "$!pos"
    rx1057_cur."!cursor_pass"(rx1057_pos, "infixish", 'backtrack'=>1)
    .return (rx1057_cur)
  rx1057_restart2802:
    repr_get_attr_obj rx1057_cstack, rx1057_cur, rx1057_curclass, "$!cstack"
  rx1057_fail2803:
    unless rx1057_bstack, rx1057_done2801
    pop $I19, rx1057_bstack
    if_null rx1057_cstack, rx1057_cstack_done2806
    unless rx1057_cstack, rx1057_cstack_done2806
    dec $I19
    set $P11, rx1057_cstack[$I19]
  rx1057_cstack_done2806:
    pop rx1057_rep, rx1057_bstack
    pop rx1057_pos, rx1057_bstack
    pop $I19, rx1057_bstack
    lt rx1057_pos, -1, rx1057_done2801
    lt rx1057_pos, 0, rx1057_fail2803
    eq $I19, 0, rx1057_fail2803
    nqp_islist $I20, rx1057_cstack
    unless $I20, rx1057_jump2804
    elements $I18, rx1057_bstack
    le $I18, 0, rx1057_cut2805
    dec $I18
    set $I18, rx1057_bstack[$I18]
  rx1057_cut2805:
    assign rx1057_cstack, $I18
  rx1057_jump2804:
    jump $I19
  rx1057_done2801:
    rx1057_cur."!cursor_fail"()
    .return (rx1057_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_165_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1060_tgt
    .local int rx1060_pos
    .local int rx1060_off
    .local int rx1060_eos
    .local int rx1060_rep
    .local pmc rx1060_cur
    .local pmc rx1060_curclass
    .local pmc rx1060_bstack
    .local pmc rx1060_cstack
    (rx1060_cur, rx1060_tgt, rx1060_pos, rx1060_curclass, rx1060_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1060_cur
    length rx1060_eos, rx1060_tgt
    eq $I19, 1, rx1060_restart2813
    gt rx1060_pos, rx1060_eos, rx1060_fail2814
    repr_get_attr_int $I11, self, rx1060_curclass, "$!from"
    ne $I11, -1, rxscan1061_done2820
    goto rxscan1061_scan2819
  rxscan1061_loop2818:
    inc rx1060_pos
    gt rx1060_pos, rx1060_eos, rx1060_fail2814
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!from", rx1060_pos
  rxscan1061_scan2819:
    nqp_rxmark rx1060_bstack, rxscan1061_loop2818, rx1060_pos, 0
  rxscan1061_done2820:
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!pos", rx1060_pos
    $P11 = rx1060_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1060_curclass, "$!pos"
    lt $I11, 0, rx1060_fail2814
    rx1060_cur."!cursor_pass"(rx1060_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1060_cur)
  rx1060_restart2813:
    repr_get_attr_obj rx1060_cstack, rx1060_cur, rx1060_curclass, "$!cstack"
  rx1060_fail2814:
    unless rx1060_bstack, rx1060_done2812
    pop $I19, rx1060_bstack
    if_null rx1060_cstack, rx1060_cstack_done2817
    unless rx1060_cstack, rx1060_cstack_done2817
    dec $I19
    set $P11, rx1060_cstack[$I19]
  rx1060_cstack_done2817:
    pop rx1060_rep, rx1060_bstack
    pop rx1060_pos, rx1060_bstack
    pop $I19, rx1060_bstack
    lt rx1060_pos, -1, rx1060_done2812
    lt rx1060_pos, 0, rx1060_fail2814
    eq $I19, 0, rx1060_fail2814
    nqp_islist $I20, rx1060_cstack
    unless $I20, rx1060_jump2815
    elements $I18, rx1060_bstack
    le $I18, 0, rx1060_cut2816
    dec $I18
    set $I18, rx1060_bstack[$I18]
  rx1060_cut2816:
    assign rx1060_cstack, $I18
  rx1060_jump2815:
    jump $I19
  rx1060_done2812:
    rx1060_cur."!cursor_fail"()
    .return (rx1060_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_166_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1287
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1062_tgt
    .local int rx1062_pos
    .local int rx1062_off
    .local int rx1062_eos
    .local int rx1062_rep
    .local pmc rx1062_cur
    .local pmc rx1062_curclass
    .local pmc rx1062_bstack
    .local pmc rx1062_cstack
    (rx1062_cur, rx1062_tgt, rx1062_pos, rx1062_curclass, rx1062_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1062_cur
    length rx1062_eos, rx1062_tgt
    eq $I19, 1, rx1062_restart2823
    gt rx1062_pos, rx1062_eos, rx1062_fail2824
    repr_get_attr_int $I11, self, rx1062_curclass, "$!from"
    ne $I11, -1, rxscan1063_done2830
    goto rxscan1063_scan2829
  rxscan1063_loop2828:
    inc rx1062_pos
    gt rx1062_pos, rx1062_eos, rx1062_fail2824
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!from", rx1062_pos
  rxscan1063_scan2829:
    nqp_rxmark rx1062_bstack, rxscan1063_loop2828, rx1062_pos, 0
  rxscan1063_done2830:
    add $I11, rx1062_pos, 1
    gt $I11, rx1062_eos, rx1062_fail2824
    substr $S10, rx1062_tgt, rx1062_pos, 1
    ne $S10, ucs4:"[", rx1062_fail2824
    add rx1062_pos, 1
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    lt $I11, 0, rx1062_fail2824
    repr_get_attr_int rx1062_pos, $P11, rx1062_curclass, "$!pos"
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    lt $I11, 0, rx1062_fail2824
    nqp_rxmark rx1062_bstack, rxsubrule1065_pass2832, -1, 0
  rxsubrule1065_pass2832:
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1062_pos, $P11, rx1062_curclass, "$!pos"
    add $I11, rx1062_pos, 1
    gt $I11, rx1062_eos, rx1062_fail2824
    substr $S10, rx1062_tgt, rx1062_pos, 1
    ne $S10, ucs4:"]", rx1062_fail2824
    add rx1062_pos, 1
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    lt $I11, 0, rx1062_fail2824
    nqp_rxmark rx1062_bstack, rxsubrule1066_pass2833, -1, 0
  rxsubrule1066_pass2833:
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1062_pos, $P11, rx1062_curclass, "$!pos"
    rx1062_cur."!cursor_pass"(rx1062_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1062_cur)
  rx1062_restart2823:
    repr_get_attr_obj rx1062_cstack, rx1062_cur, rx1062_curclass, "$!cstack"
  rx1062_fail2824:
    unless rx1062_bstack, rx1062_done2822
    pop $I19, rx1062_bstack
    if_null rx1062_cstack, rx1062_cstack_done2827
    unless rx1062_cstack, rx1062_cstack_done2827
    dec $I19
    set $P11, rx1062_cstack[$I19]
  rx1062_cstack_done2827:
    pop rx1062_rep, rx1062_bstack
    pop rx1062_pos, rx1062_bstack
    pop $I19, rx1062_bstack
    lt rx1062_pos, -1, rx1062_done2822
    lt rx1062_pos, 0, rx1062_fail2824
    eq $I19, 0, rx1062_fail2824
    nqp_islist $I20, rx1062_cstack
    unless $I20, rx1062_jump2825
    elements $I18, rx1062_bstack
    le $I18, 0, rx1062_cut2826
    dec $I18
    set $I18, rx1062_bstack[$I18]
  rx1062_cut2826:
    assign rx1062_cstack, $I18
  rx1062_jump2825:
    jump $I19
  rx1062_done2822:
    rx1062_cur."!cursor_fail"()
    .return (rx1062_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_167_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1067_tgt
    .local int rx1067_pos
    .local int rx1067_off
    .local int rx1067_eos
    .local int rx1067_rep
    .local pmc rx1067_cur
    .local pmc rx1067_curclass
    .local pmc rx1067_bstack
    .local pmc rx1067_cstack
    (rx1067_cur, rx1067_tgt, rx1067_pos, rx1067_curclass, rx1067_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1067_cur
    length rx1067_eos, rx1067_tgt
    eq $I19, 1, rx1067_restart2836
    gt rx1067_pos, rx1067_eos, rx1067_fail2837
    repr_get_attr_int $I11, self, rx1067_curclass, "$!from"
    ne $I11, -1, rxscan1068_done2843
    goto rxscan1068_scan2842
  rxscan1068_loop2841:
    inc rx1067_pos
    gt rx1067_pos, rx1067_eos, rx1067_fail2837
    repr_bind_attr_int rx1067_cur, rx1067_curclass, "$!from", rx1067_pos
  rxscan1068_scan2842:
    nqp_rxmark rx1067_bstack, rxscan1068_loop2841, rx1067_pos, 0
  rxscan1068_done2843:
    add $I11, rx1067_pos, 1
    gt $I11, rx1067_eos, rx1067_fail2837
    substr $S10, rx1067_tgt, rx1067_pos, 1
    ne $S10, ucs4:"{", rx1067_fail2837
    add rx1067_pos, 1
    repr_bind_attr_int rx1067_cur, rx1067_curclass, "$!pos", rx1067_pos
    $P11 = rx1067_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1067_curclass, "$!pos"
    lt $I11, 0, rx1067_fail2837
    repr_get_attr_int rx1067_pos, $P11, rx1067_curclass, "$!pos"
    repr_bind_attr_int rx1067_cur, rx1067_curclass, "$!pos", rx1067_pos
    $P11 = rx1067_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1067_curclass, "$!pos"
    lt $I11, 0, rx1067_fail2837
    nqp_rxmark rx1067_bstack, rxsubrule1070_pass2845, -1, 0
  rxsubrule1070_pass2845:
    rx1067_cstack = rx1067_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1067_pos, $P11, rx1067_curclass, "$!pos"
    add $I11, rx1067_pos, 1
    gt $I11, rx1067_eos, rx1067_fail2837
    substr $S10, rx1067_tgt, rx1067_pos, 1
    ne $S10, ucs4:"}", rx1067_fail2837
    add rx1067_pos, 1
    repr_bind_attr_int rx1067_cur, rx1067_curclass, "$!pos", rx1067_pos
    $P11 = rx1067_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1067_curclass, "$!pos"
    lt $I11, 0, rx1067_fail2837
    nqp_rxmark rx1067_bstack, rxsubrule1071_pass2846, -1, 0
  rxsubrule1071_pass2846:
    rx1067_cstack = rx1067_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1067_pos, $P11, rx1067_curclass, "$!pos"
    rx1067_cur."!cursor_pass"(rx1067_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1067_cur)
  rx1067_restart2836:
    repr_get_attr_obj rx1067_cstack, rx1067_cur, rx1067_curclass, "$!cstack"
  rx1067_fail2837:
    unless rx1067_bstack, rx1067_done2835
    pop $I19, rx1067_bstack
    if_null rx1067_cstack, rx1067_cstack_done2840
    unless rx1067_cstack, rx1067_cstack_done2840
    dec $I19
    set $P11, rx1067_cstack[$I19]
  rx1067_cstack_done2840:
    pop rx1067_rep, rx1067_bstack
    pop rx1067_pos, rx1067_bstack
    pop $I19, rx1067_bstack
    lt rx1067_pos, -1, rx1067_done2835
    lt rx1067_pos, 0, rx1067_fail2837
    eq $I19, 0, rx1067_fail2837
    nqp_islist $I20, rx1067_cstack
    unless $I20, rx1067_jump2838
    elements $I18, rx1067_bstack
    le $I18, 0, rx1067_cut2839
    dec $I18
    set $I18, rx1067_bstack[$I18]
  rx1067_cut2839:
    assign rx1067_cstack, $I18
  rx1067_jump2838:
    jump $I19
  rx1067_done2835:
    rx1067_cur."!cursor_fail"()
    .return (rx1067_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_168_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1072_tgt
    .local int rx1072_pos
    .local int rx1072_off
    .local int rx1072_eos
    .local int rx1072_rep
    .local pmc rx1072_cur
    .local pmc rx1072_curclass
    .local pmc rx1072_bstack
    .local pmc rx1072_cstack
    (rx1072_cur, rx1072_tgt, rx1072_pos, rx1072_curclass, rx1072_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1072_cur
    length rx1072_eos, rx1072_tgt
    eq $I19, 1, rx1072_restart2849
    gt rx1072_pos, rx1072_eos, rx1072_fail2850
    repr_get_attr_int $I11, self, rx1072_curclass, "$!from"
    ne $I11, -1, rxscan1073_done2856
    goto rxscan1073_scan2855
  rxscan1073_loop2854:
    inc rx1072_pos
    gt rx1072_pos, rx1072_eos, rx1072_fail2850
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!from", rx1072_pos
  rxscan1073_scan2855:
    nqp_rxmark rx1072_bstack, rxscan1073_loop2854, rx1072_pos, 0
  rxscan1073_done2856:
    ge rx1072_pos, rx1072_eos, rx1072_fail2850
    substr $S11, rx1072_tgt, rx1072_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1072_fail2850
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail2850
    nqp_rxmark rx1072_bstack, rxsubrule1074_pass2857, -1, 0
  rxsubrule1074_pass2857:
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail2850
    nqp_rxmark rx1072_bstack, rxsubrule1075_pass2858, -1, 0
  rxsubrule1075_pass2858:
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    rx1072_cur."!cursor_pass"(rx1072_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1072_cur)
  rx1072_restart2849:
    repr_get_attr_obj rx1072_cstack, rx1072_cur, rx1072_curclass, "$!cstack"
  rx1072_fail2850:
    unless rx1072_bstack, rx1072_done2848
    pop $I19, rx1072_bstack
    if_null rx1072_cstack, rx1072_cstack_done2853
    unless rx1072_cstack, rx1072_cstack_done2853
    dec $I19
    set $P11, rx1072_cstack[$I19]
  rx1072_cstack_done2853:
    pop rx1072_rep, rx1072_bstack
    pop rx1072_pos, rx1072_bstack
    pop $I19, rx1072_bstack
    lt rx1072_pos, -1, rx1072_done2848
    lt rx1072_pos, 0, rx1072_fail2850
    eq $I19, 0, rx1072_fail2850
    nqp_islist $I20, rx1072_cstack
    unless $I20, rx1072_jump2851
    elements $I18, rx1072_bstack
    le $I18, 0, rx1072_cut2852
    dec $I18
    set $I18, rx1072_bstack[$I18]
  rx1072_cut2852:
    assign rx1072_cstack, $I18
  rx1072_jump2851:
    jump $I19
  rx1072_done2848:
    rx1072_cur."!cursor_fail"()
    .return (rx1072_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_169_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart2861
    gt rx1076_pos, rx1076_eos, rx1076_fail2862
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done2868
    goto rxscan1077_scan2867
  rxscan1077_loop2866:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail2862
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan2867:
    nqp_rxmark rx1076_bstack, rxscan1077_loop2866, rx1076_pos, 0
  rxscan1077_done2868:
    add $I11, rx1076_pos, 1
    gt $I11, rx1076_eos, rx1076_fail2862
    substr $S10, rx1076_tgt, rx1076_pos, 1
    ne $S10, ucs4:"(", rx1076_fail2862
    add rx1076_pos, 1
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2862
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2862
    nqp_rxmark rx1076_bstack, rxsubrule1079_pass2870, -1, 0
  rxsubrule1079_pass2870:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    add $I11, rx1076_pos, 1
    gt $I11, rx1076_eos, rx1076_fail2862
    substr $S10, rx1076_tgt, rx1076_pos, 1
    ne $S10, ucs4:")", rx1076_fail2862
    add rx1076_pos, 1
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2862
    nqp_rxmark rx1076_bstack, rxsubrule1080_pass2871, -1, 0
  rxsubrule1080_pass2871:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    rx1076_cur."!cursor_pass"(rx1076_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart2861:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail2862:
    unless rx1076_bstack, rx1076_done2860
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done2865
    unless rx1076_cstack, rx1076_cstack_done2865
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done2865:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done2860
    lt rx1076_pos, 0, rx1076_fail2862
    eq $I19, 0, rx1076_fail2862
    nqp_islist $I20, rx1076_cstack
    unless $I20, rx1076_jump2863
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut2864
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut2864:
    assign rx1076_cstack, $I18
  rx1076_jump2863:
    jump $I19
  rx1076_done2860:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_170_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1081_tgt
    .local int rx1081_pos
    .local int rx1081_off
    .local int rx1081_eos
    .local int rx1081_rep
    .local pmc rx1081_cur
    .local pmc rx1081_curclass
    .local pmc rx1081_bstack
    .local pmc rx1081_cstack
    (rx1081_cur, rx1081_tgt, rx1081_pos, rx1081_curclass, rx1081_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1081_cur
    length rx1081_eos, rx1081_tgt
    eq $I19, 1, rx1081_restart2874
    gt rx1081_pos, rx1081_eos, rx1081_fail2875
    repr_get_attr_int $I11, self, rx1081_curclass, "$!from"
    ne $I11, -1, rxscan1082_done2881
    goto rxscan1082_scan2880
  rxscan1082_loop2879:
    inc rx1081_pos
    gt rx1081_pos, rx1081_eos, rx1081_fail2875
    repr_bind_attr_int rx1081_cur, rx1081_curclass, "$!from", rx1081_pos
  rxscan1082_scan2880:
    nqp_rxmark rx1081_bstack, rxscan1082_loop2879, rx1081_pos, 0
  rxscan1082_done2881:
    repr_bind_attr_int rx1081_cur, rx1081_curclass, "$!pos", rx1081_pos
    $P11 = rx1081_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1081_curclass, "$!pos"
    lt $I11, 0, rx1081_fail2875
    nqp_rxmark rx1081_bstack, rxsubrule1083_pass2882, -1, 0
  rxsubrule1083_pass2882:
    rx1081_cstack = rx1081_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1081_pos, $P11, rx1081_curclass, "$!pos"
    repr_bind_attr_int rx1081_cur, rx1081_curclass, "$!pos", rx1081_pos
    $P11 = rx1081_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1081_curclass, "$!pos"
    lt $I11, 0, rx1081_fail2875
    nqp_rxmark rx1081_bstack, rxsubrule1084_pass2883, -1, 0
  rxsubrule1084_pass2883:
    rx1081_cstack = rx1081_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1081_pos, $P11, rx1081_curclass, "$!pos"
    rx1081_cur."!cursor_pass"(rx1081_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1081_cur)
  rx1081_restart2874:
    repr_get_attr_obj rx1081_cstack, rx1081_cur, rx1081_curclass, "$!cstack"
  rx1081_fail2875:
    unless rx1081_bstack, rx1081_done2873
    pop $I19, rx1081_bstack
    if_null rx1081_cstack, rx1081_cstack_done2878
    unless rx1081_cstack, rx1081_cstack_done2878
    dec $I19
    set $P11, rx1081_cstack[$I19]
  rx1081_cstack_done2878:
    pop rx1081_rep, rx1081_bstack
    pop rx1081_pos, rx1081_bstack
    pop $I19, rx1081_bstack
    lt rx1081_pos, -1, rx1081_done2873
    lt rx1081_pos, 0, rx1081_fail2875
    eq $I19, 0, rx1081_fail2875
    nqp_islist $I20, rx1081_cstack
    unless $I20, rx1081_jump2876
    elements $I18, rx1081_bstack
    le $I18, 0, rx1081_cut2877
    dec $I18
    set $I18, rx1081_bstack[$I18]
  rx1081_cut2877:
    assign rx1081_cstack, $I18
  rx1081_jump2876:
    jump $I19
  rx1081_done2873:
    rx1081_cur."!cursor_fail"()
    .return (rx1081_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_171_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1085_tgt
    .local int rx1085_pos
    .local int rx1085_off
    .local int rx1085_eos
    .local int rx1085_rep
    .local pmc rx1085_cur
    .local pmc rx1085_curclass
    .local pmc rx1085_bstack
    .local pmc rx1085_cstack
    (rx1085_cur, rx1085_tgt, rx1085_pos, rx1085_curclass, rx1085_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1085_cur
    length rx1085_eos, rx1085_tgt
    eq $I19, 1, rx1085_restart2886
    gt rx1085_pos, rx1085_eos, rx1085_fail2887
    repr_get_attr_int $I11, self, rx1085_curclass, "$!from"
    ne $I11, -1, rxscan1086_done2893
    goto rxscan1086_scan2892
  rxscan1086_loop2891:
    inc rx1085_pos
    gt rx1085_pos, rx1085_eos, rx1085_fail2887
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!from", rx1085_pos
  rxscan1086_scan2892:
    nqp_rxmark rx1085_bstack, rxscan1086_loop2891, rx1085_pos, 0
  rxscan1086_done2893:
    nqp_rxmark rx1085_bstack, rxcap1087_fail2895, rx1085_pos, 0
    add $I11, rx1085_pos, 2
    gt $I11, rx1085_eos, rx1085_fail2887
    substr $S10, rx1085_tgt, rx1085_pos, 2
    ne $S10, ucs4:"++", rx1085_fail2887
    add rx1085_pos, 2
    nqp_rxpeek $I19, rx1085_bstack, rxcap1087_fail2895
    inc $I19
    set $I11, rx1085_bstack[$I19]
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1085_pos)
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "sym")
    goto rxcap1087_done2894
  rxcap1087_fail2895:
    goto rx1085_fail2887
  rxcap1087_done2894:
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2887
    nqp_rxmark rx1085_bstack, rxsubrule1088_pass2896, -1, 0
  rxsubrule1088_pass2896:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    rx1085_cur."!cursor_pass"(rx1085_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1085_cur)
  rx1085_restart2886:
    repr_get_attr_obj rx1085_cstack, rx1085_cur, rx1085_curclass, "$!cstack"
  rx1085_fail2887:
    unless rx1085_bstack, rx1085_done2885
    pop $I19, rx1085_bstack
    if_null rx1085_cstack, rx1085_cstack_done2890
    unless rx1085_cstack, rx1085_cstack_done2890
    dec $I19
    set $P11, rx1085_cstack[$I19]
  rx1085_cstack_done2890:
    pop rx1085_rep, rx1085_bstack
    pop rx1085_pos, rx1085_bstack
    pop $I19, rx1085_bstack
    lt rx1085_pos, -1, rx1085_done2885
    lt rx1085_pos, 0, rx1085_fail2887
    eq $I19, 0, rx1085_fail2887
    nqp_islist $I20, rx1085_cstack
    unless $I20, rx1085_jump2888
    elements $I18, rx1085_bstack
    le $I18, 0, rx1085_cut2889
    dec $I18
    set $I18, rx1085_bstack[$I18]
  rx1085_cut2889:
    assign rx1085_cstack, $I18
  rx1085_jump2888:
    jump $I19
  rx1085_done2885:
    rx1085_cur."!cursor_fail"()
    .return (rx1085_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_172_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1089_tgt
    .local int rx1089_pos
    .local int rx1089_off
    .local int rx1089_eos
    .local int rx1089_rep
    .local pmc rx1089_cur
    .local pmc rx1089_curclass
    .local pmc rx1089_bstack
    .local pmc rx1089_cstack
    (rx1089_cur, rx1089_tgt, rx1089_pos, rx1089_curclass, rx1089_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1089_cur
    length rx1089_eos, rx1089_tgt
    eq $I19, 1, rx1089_restart2899
    gt rx1089_pos, rx1089_eos, rx1089_fail2900
    repr_get_attr_int $I11, self, rx1089_curclass, "$!from"
    ne $I11, -1, rxscan1090_done2906
    goto rxscan1090_scan2905
  rxscan1090_loop2904:
    inc rx1089_pos
    gt rx1089_pos, rx1089_eos, rx1089_fail2900
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!from", rx1089_pos
  rxscan1090_scan2905:
    nqp_rxmark rx1089_bstack, rxscan1090_loop2904, rx1089_pos, 0
  rxscan1090_done2906:
    nqp_rxmark rx1089_bstack, rxcap1091_fail2908, rx1089_pos, 0
    add $I11, rx1089_pos, 2
    gt $I11, rx1089_eos, rx1089_fail2900
    substr $S10, rx1089_tgt, rx1089_pos, 2
    ne $S10, ucs4:"--", rx1089_fail2900
    add rx1089_pos, 2
    nqp_rxpeek $I19, rx1089_bstack, rxcap1091_fail2908
    inc $I19
    set $I11, rx1089_bstack[$I19]
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1089_pos)
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "sym")
    goto rxcap1091_done2907
  rxcap1091_fail2908:
    goto rx1089_fail2900
  rxcap1091_done2907:
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1089_curclass, "$!pos"
    lt $I11, 0, rx1089_fail2900
    nqp_rxmark rx1089_bstack, rxsubrule1092_pass2909, -1, 0
  rxsubrule1092_pass2909:
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1089_pos, $P11, rx1089_curclass, "$!pos"
    rx1089_cur."!cursor_pass"(rx1089_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1089_cur)
  rx1089_restart2899:
    repr_get_attr_obj rx1089_cstack, rx1089_cur, rx1089_curclass, "$!cstack"
  rx1089_fail2900:
    unless rx1089_bstack, rx1089_done2898
    pop $I19, rx1089_bstack
    if_null rx1089_cstack, rx1089_cstack_done2903
    unless rx1089_cstack, rx1089_cstack_done2903
    dec $I19
    set $P11, rx1089_cstack[$I19]
  rx1089_cstack_done2903:
    pop rx1089_rep, rx1089_bstack
    pop rx1089_pos, rx1089_bstack
    pop $I19, rx1089_bstack
    lt rx1089_pos, -1, rx1089_done2898
    lt rx1089_pos, 0, rx1089_fail2900
    eq $I19, 0, rx1089_fail2900
    nqp_islist $I20, rx1089_cstack
    unless $I20, rx1089_jump2901
    elements $I18, rx1089_bstack
    le $I18, 0, rx1089_cut2902
    dec $I18
    set $I18, rx1089_bstack[$I18]
  rx1089_cut2902:
    assign rx1089_cstack, $I18
  rx1089_jump2901:
    jump $I19
  rx1089_done2898:
    rx1089_cur."!cursor_fail"()
    .return (rx1089_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_173_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1093_tgt
    .local int rx1093_pos
    .local int rx1093_off
    .local int rx1093_eos
    .local int rx1093_rep
    .local pmc rx1093_cur
    .local pmc rx1093_curclass
    .local pmc rx1093_bstack
    .local pmc rx1093_cstack
    (rx1093_cur, rx1093_tgt, rx1093_pos, rx1093_curclass, rx1093_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1093_cur
    length rx1093_eos, rx1093_tgt
    eq $I19, 1, rx1093_restart2912
    gt rx1093_pos, rx1093_eos, rx1093_fail2913
    repr_get_attr_int $I11, self, rx1093_curclass, "$!from"
    ne $I11, -1, rxscan1094_done2919
    goto rxscan1094_scan2918
  rxscan1094_loop2917:
    inc rx1093_pos
    gt rx1093_pos, rx1093_eos, rx1093_fail2913
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!from", rx1093_pos
  rxscan1094_scan2918:
    nqp_rxmark rx1093_bstack, rxscan1094_loop2917, rx1093_pos, 0
  rxscan1094_done2919:
    nqp_rxmark rx1093_bstack, rxcap1095_fail2921, rx1093_pos, 0
    add $I11, rx1093_pos, 2
    gt $I11, rx1093_eos, rx1093_fail2913
    substr $S10, rx1093_tgt, rx1093_pos, 2
    ne $S10, ucs4:"++", rx1093_fail2913
    add rx1093_pos, 2
    nqp_rxpeek $I19, rx1093_bstack, rxcap1095_fail2921
    inc $I19
    set $I11, rx1093_bstack[$I19]
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1093_pos)
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "sym")
    goto rxcap1095_done2920
  rxcap1095_fail2921:
    goto rx1093_fail2913
  rxcap1095_done2920:
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1093_curclass, "$!pos"
    lt $I11, 0, rx1093_fail2913
    nqp_rxmark rx1093_bstack, rxsubrule1096_pass2922, -1, 0
  rxsubrule1096_pass2922:
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1093_pos, $P11, rx1093_curclass, "$!pos"
    rx1093_cur."!cursor_pass"(rx1093_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1093_cur)
  rx1093_restart2912:
    repr_get_attr_obj rx1093_cstack, rx1093_cur, rx1093_curclass, "$!cstack"
  rx1093_fail2913:
    unless rx1093_bstack, rx1093_done2911
    pop $I19, rx1093_bstack
    if_null rx1093_cstack, rx1093_cstack_done2916
    unless rx1093_cstack, rx1093_cstack_done2916
    dec $I19
    set $P11, rx1093_cstack[$I19]
  rx1093_cstack_done2916:
    pop rx1093_rep, rx1093_bstack
    pop rx1093_pos, rx1093_bstack
    pop $I19, rx1093_bstack
    lt rx1093_pos, -1, rx1093_done2911
    lt rx1093_pos, 0, rx1093_fail2913
    eq $I19, 0, rx1093_fail2913
    nqp_islist $I20, rx1093_cstack
    unless $I20, rx1093_jump2914
    elements $I18, rx1093_bstack
    le $I18, 0, rx1093_cut2915
    dec $I18
    set $I18, rx1093_bstack[$I18]
  rx1093_cut2915:
    assign rx1093_cstack, $I18
  rx1093_jump2914:
    jump $I19
  rx1093_done2911:
    rx1093_cur."!cursor_fail"()
    .return (rx1093_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_174_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1097_tgt
    .local int rx1097_pos
    .local int rx1097_off
    .local int rx1097_eos
    .local int rx1097_rep
    .local pmc rx1097_cur
    .local pmc rx1097_curclass
    .local pmc rx1097_bstack
    .local pmc rx1097_cstack
    (rx1097_cur, rx1097_tgt, rx1097_pos, rx1097_curclass, rx1097_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1097_cur
    length rx1097_eos, rx1097_tgt
    eq $I19, 1, rx1097_restart2925
    gt rx1097_pos, rx1097_eos, rx1097_fail2926
    repr_get_attr_int $I11, self, rx1097_curclass, "$!from"
    ne $I11, -1, rxscan1098_done2932
    goto rxscan1098_scan2931
  rxscan1098_loop2930:
    inc rx1097_pos
    gt rx1097_pos, rx1097_eos, rx1097_fail2926
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!from", rx1097_pos
  rxscan1098_scan2931:
    nqp_rxmark rx1097_bstack, rxscan1098_loop2930, rx1097_pos, 0
  rxscan1098_done2932:
    nqp_rxmark rx1097_bstack, rxcap1099_fail2934, rx1097_pos, 0
    add $I11, rx1097_pos, 2
    gt $I11, rx1097_eos, rx1097_fail2926
    substr $S10, rx1097_tgt, rx1097_pos, 2
    ne $S10, ucs4:"--", rx1097_fail2926
    add rx1097_pos, 2
    nqp_rxpeek $I19, rx1097_bstack, rxcap1099_fail2934
    inc $I19
    set $I11, rx1097_bstack[$I19]
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1097_pos)
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "sym")
    goto rxcap1099_done2933
  rxcap1099_fail2934:
    goto rx1097_fail2926
  rxcap1099_done2933:
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1097_curclass, "$!pos"
    lt $I11, 0, rx1097_fail2926
    nqp_rxmark rx1097_bstack, rxsubrule1100_pass2935, -1, 0
  rxsubrule1100_pass2935:
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1097_pos, $P11, rx1097_curclass, "$!pos"
    rx1097_cur."!cursor_pass"(rx1097_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1097_cur)
  rx1097_restart2925:
    repr_get_attr_obj rx1097_cstack, rx1097_cur, rx1097_curclass, "$!cstack"
  rx1097_fail2926:
    unless rx1097_bstack, rx1097_done2924
    pop $I19, rx1097_bstack
    if_null rx1097_cstack, rx1097_cstack_done2929
    unless rx1097_cstack, rx1097_cstack_done2929
    dec $I19
    set $P11, rx1097_cstack[$I19]
  rx1097_cstack_done2929:
    pop rx1097_rep, rx1097_bstack
    pop rx1097_pos, rx1097_bstack
    pop $I19, rx1097_bstack
    lt rx1097_pos, -1, rx1097_done2924
    lt rx1097_pos, 0, rx1097_fail2926
    eq $I19, 0, rx1097_fail2926
    nqp_islist $I20, rx1097_cstack
    unless $I20, rx1097_jump2927
    elements $I18, rx1097_bstack
    le $I18, 0, rx1097_cut2928
    dec $I18
    set $I18, rx1097_bstack[$I18]
  rx1097_cut2928:
    assign rx1097_cstack, $I18
  rx1097_jump2927:
    jump $I19
  rx1097_done2924:
    rx1097_cur."!cursor_fail"()
    .return (rx1097_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_175_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1101_tgt
    .local int rx1101_pos
    .local int rx1101_off
    .local int rx1101_eos
    .local int rx1101_rep
    .local pmc rx1101_cur
    .local pmc rx1101_curclass
    .local pmc rx1101_bstack
    .local pmc rx1101_cstack
    (rx1101_cur, rx1101_tgt, rx1101_pos, rx1101_curclass, rx1101_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1101_cur
    length rx1101_eos, rx1101_tgt
    eq $I19, 1, rx1101_restart2938
    gt rx1101_pos, rx1101_eos, rx1101_fail2939
    repr_get_attr_int $I11, self, rx1101_curclass, "$!from"
    ne $I11, -1, rxscan1102_done2945
    goto rxscan1102_scan2944
  rxscan1102_loop2943:
    inc rx1101_pos
    gt rx1101_pos, rx1101_eos, rx1101_fail2939
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!from", rx1101_pos
  rxscan1102_scan2944:
    nqp_rxmark rx1101_bstack, rxscan1102_loop2943, rx1101_pos, 0
  rxscan1102_done2945:
    nqp_rxmark rx1101_bstack, rxcap1103_fail2947, rx1101_pos, 0
    add $I11, rx1101_pos, 2
    gt $I11, rx1101_eos, rx1101_fail2939
    substr $S10, rx1101_tgt, rx1101_pos, 2
    ne $S10, ucs4:"**", rx1101_fail2939
    add rx1101_pos, 2
    nqp_rxpeek $I19, rx1101_bstack, rxcap1103_fail2947
    inc $I19
    set $I11, rx1101_bstack[$I19]
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1101_pos)
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "sym")
    goto rxcap1103_done2946
  rxcap1103_fail2947:
    goto rx1101_fail2939
  rxcap1103_done2946:
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1101_curclass, "$!pos"
    lt $I11, 0, rx1101_fail2939
    nqp_rxmark rx1101_bstack, rxsubrule1104_pass2948, -1, 0
  rxsubrule1104_pass2948:
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1101_pos, $P11, rx1101_curclass, "$!pos"
    rx1101_cur."!cursor_pass"(rx1101_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1101_cur)
  rx1101_restart2938:
    repr_get_attr_obj rx1101_cstack, rx1101_cur, rx1101_curclass, "$!cstack"
  rx1101_fail2939:
    unless rx1101_bstack, rx1101_done2937
    pop $I19, rx1101_bstack
    if_null rx1101_cstack, rx1101_cstack_done2942
    unless rx1101_cstack, rx1101_cstack_done2942
    dec $I19
    set $P11, rx1101_cstack[$I19]
  rx1101_cstack_done2942:
    pop rx1101_rep, rx1101_bstack
    pop rx1101_pos, rx1101_bstack
    pop $I19, rx1101_bstack
    lt rx1101_pos, -1, rx1101_done2937
    lt rx1101_pos, 0, rx1101_fail2939
    eq $I19, 0, rx1101_fail2939
    nqp_islist $I20, rx1101_cstack
    unless $I20, rx1101_jump2940
    elements $I18, rx1101_bstack
    le $I18, 0, rx1101_cut2941
    dec $I18
    set $I18, rx1101_bstack[$I18]
  rx1101_cut2941:
    assign rx1101_cstack, $I18
  rx1101_jump2940:
    jump $I19
  rx1101_done2937:
    rx1101_cur."!cursor_fail"()
    .return (rx1101_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_176_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1105_tgt
    .local int rx1105_pos
    .local int rx1105_off
    .local int rx1105_eos
    .local int rx1105_rep
    .local pmc rx1105_cur
    .local pmc rx1105_curclass
    .local pmc rx1105_bstack
    .local pmc rx1105_cstack
    (rx1105_cur, rx1105_tgt, rx1105_pos, rx1105_curclass, rx1105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1105_cur
    length rx1105_eos, rx1105_tgt
    eq $I19, 1, rx1105_restart2951
    gt rx1105_pos, rx1105_eos, rx1105_fail2952
    repr_get_attr_int $I11, self, rx1105_curclass, "$!from"
    ne $I11, -1, rxscan1106_done2958
    goto rxscan1106_scan2957
  rxscan1106_loop2956:
    inc rx1105_pos
    gt rx1105_pos, rx1105_eos, rx1105_fail2952
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!from", rx1105_pos
  rxscan1106_scan2957:
    nqp_rxmark rx1105_bstack, rxscan1106_loop2956, rx1105_pos, 0
  rxscan1106_done2958:
    nqp_rxmark rx1105_bstack, rxcap1107_fail2960, rx1105_pos, 0
    add $I11, rx1105_pos, 1
    gt $I11, rx1105_eos, rx1105_fail2952
    substr $S10, rx1105_tgt, rx1105_pos, 1
    ne $S10, ucs4:"+", rx1105_fail2952
    add rx1105_pos, 1
    nqp_rxpeek $I19, rx1105_bstack, rxcap1107_fail2960
    inc $I19
    set $I11, rx1105_bstack[$I19]
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1105_pos)
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "sym")
    goto rxcap1107_done2959
  rxcap1107_fail2960:
    goto rx1105_fail2952
  rxcap1107_done2959:
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1105_curclass, "$!pos"
    lt $I11, 0, rx1105_fail2952
    nqp_rxmark rx1105_bstack, rxsubrule1108_pass2961, -1, 0
  rxsubrule1108_pass2961:
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1105_pos, $P11, rx1105_curclass, "$!pos"
    rx1105_cur."!cursor_pass"(rx1105_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1105_cur)
  rx1105_restart2951:
    repr_get_attr_obj rx1105_cstack, rx1105_cur, rx1105_curclass, "$!cstack"
  rx1105_fail2952:
    unless rx1105_bstack, rx1105_done2950
    pop $I19, rx1105_bstack
    if_null rx1105_cstack, rx1105_cstack_done2955
    unless rx1105_cstack, rx1105_cstack_done2955
    dec $I19
    set $P11, rx1105_cstack[$I19]
  rx1105_cstack_done2955:
    pop rx1105_rep, rx1105_bstack
    pop rx1105_pos, rx1105_bstack
    pop $I19, rx1105_bstack
    lt rx1105_pos, -1, rx1105_done2950
    lt rx1105_pos, 0, rx1105_fail2952
    eq $I19, 0, rx1105_fail2952
    nqp_islist $I20, rx1105_cstack
    unless $I20, rx1105_jump2953
    elements $I18, rx1105_bstack
    le $I18, 0, rx1105_cut2954
    dec $I18
    set $I18, rx1105_bstack[$I18]
  rx1105_cut2954:
    assign rx1105_cstack, $I18
  rx1105_jump2953:
    jump $I19
  rx1105_done2950:
    rx1105_cur."!cursor_fail"()
    .return (rx1105_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_177_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1109_tgt
    .local int rx1109_pos
    .local int rx1109_off
    .local int rx1109_eos
    .local int rx1109_rep
    .local pmc rx1109_cur
    .local pmc rx1109_curclass
    .local pmc rx1109_bstack
    .local pmc rx1109_cstack
    (rx1109_cur, rx1109_tgt, rx1109_pos, rx1109_curclass, rx1109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1109_cur
    length rx1109_eos, rx1109_tgt
    eq $I19, 1, rx1109_restart2964
    gt rx1109_pos, rx1109_eos, rx1109_fail2965
    repr_get_attr_int $I11, self, rx1109_curclass, "$!from"
    ne $I11, -1, rxscan1110_done2971
    goto rxscan1110_scan2970
  rxscan1110_loop2969:
    inc rx1109_pos
    gt rx1109_pos, rx1109_eos, rx1109_fail2965
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!from", rx1109_pos
  rxscan1110_scan2970:
    nqp_rxmark rx1109_bstack, rxscan1110_loop2969, rx1109_pos, 0
  rxscan1110_done2971:
    nqp_rxmark rx1109_bstack, rxcap1111_fail2973, rx1109_pos, 0
    add $I11, rx1109_pos, 1
    gt $I11, rx1109_eos, rx1109_fail2965
    substr $S10, rx1109_tgt, rx1109_pos, 1
    ne $S10, ucs4:"~", rx1109_fail2965
    add rx1109_pos, 1
    nqp_rxpeek $I19, rx1109_bstack, rxcap1111_fail2973
    inc $I19
    set $I11, rx1109_bstack[$I19]
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1109_pos)
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "sym")
    goto rxcap1111_done2972
  rxcap1111_fail2973:
    goto rx1109_fail2965
  rxcap1111_done2972:
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1109_curclass, "$!pos"
    lt $I11, 0, rx1109_fail2965
    nqp_rxmark rx1109_bstack, rxsubrule1112_pass2974, -1, 0
  rxsubrule1112_pass2974:
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1109_pos, $P11, rx1109_curclass, "$!pos"
    rx1109_cur."!cursor_pass"(rx1109_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1109_cur)
  rx1109_restart2964:
    repr_get_attr_obj rx1109_cstack, rx1109_cur, rx1109_curclass, "$!cstack"
  rx1109_fail2965:
    unless rx1109_bstack, rx1109_done2963
    pop $I19, rx1109_bstack
    if_null rx1109_cstack, rx1109_cstack_done2968
    unless rx1109_cstack, rx1109_cstack_done2968
    dec $I19
    set $P11, rx1109_cstack[$I19]
  rx1109_cstack_done2968:
    pop rx1109_rep, rx1109_bstack
    pop rx1109_pos, rx1109_bstack
    pop $I19, rx1109_bstack
    lt rx1109_pos, -1, rx1109_done2963
    lt rx1109_pos, 0, rx1109_fail2965
    eq $I19, 0, rx1109_fail2965
    nqp_islist $I20, rx1109_cstack
    unless $I20, rx1109_jump2966
    elements $I18, rx1109_bstack
    le $I18, 0, rx1109_cut2967
    dec $I18
    set $I18, rx1109_bstack[$I18]
  rx1109_cut2967:
    assign rx1109_cstack, $I18
  rx1109_jump2966:
    jump $I19
  rx1109_done2963:
    rx1109_cur."!cursor_fail"()
    .return (rx1109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_178_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1113_tgt
    .local int rx1113_pos
    .local int rx1113_off
    .local int rx1113_eos
    .local int rx1113_rep
    .local pmc rx1113_cur
    .local pmc rx1113_curclass
    .local pmc rx1113_bstack
    .local pmc rx1113_cstack
    (rx1113_cur, rx1113_tgt, rx1113_pos, rx1113_curclass, rx1113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1113_cur
    length rx1113_eos, rx1113_tgt
    eq $I19, 1, rx1113_restart2977
    gt rx1113_pos, rx1113_eos, rx1113_fail2978
    repr_get_attr_int $I11, self, rx1113_curclass, "$!from"
    ne $I11, -1, rxscan1114_done2984
    goto rxscan1114_scan2983
  rxscan1114_loop2982:
    inc rx1113_pos
    gt rx1113_pos, rx1113_eos, rx1113_fail2978
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!from", rx1113_pos
  rxscan1114_scan2983:
    nqp_rxmark rx1113_bstack, rxscan1114_loop2982, rx1113_pos, 0
  rxscan1114_done2984:
    nqp_rxmark rx1113_bstack, rxcap1115_fail2986, rx1113_pos, 0
    add $I11, rx1113_pos, 1
    gt $I11, rx1113_eos, rx1113_fail2978
    substr $S10, rx1113_tgt, rx1113_pos, 1
    ne $S10, ucs4:"-", rx1113_fail2978
    add rx1113_pos, 1
    nqp_rxpeek $I19, rx1113_bstack, rxcap1115_fail2986
    inc $I19
    set $I11, rx1113_bstack[$I19]
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1113_pos)
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "sym")
    goto rxcap1115_done2985
  rxcap1115_fail2986:
    goto rx1113_fail2978
  rxcap1115_done2985:
    ge rx1113_pos, rx1113_eos, rx1113_fail2978
    substr $S11, rx1113_tgt, rx1113_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1113_fail2978
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."number"()
    repr_get_attr_int $I11, $P11, rx1113_curclass, "$!pos"
    ge $I11, 0, rx1113_fail2978
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1113_curclass, "$!pos"
    lt $I11, 0, rx1113_fail2978
    nqp_rxmark rx1113_bstack, rxsubrule1116_pass2987, -1, 0
  rxsubrule1116_pass2987:
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1113_pos, $P11, rx1113_curclass, "$!pos"
    rx1113_cur."!cursor_pass"(rx1113_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1113_cur)
  rx1113_restart2977:
    repr_get_attr_obj rx1113_cstack, rx1113_cur, rx1113_curclass, "$!cstack"
  rx1113_fail2978:
    unless rx1113_bstack, rx1113_done2976
    pop $I19, rx1113_bstack
    if_null rx1113_cstack, rx1113_cstack_done2981
    unless rx1113_cstack, rx1113_cstack_done2981
    dec $I19
    set $P11, rx1113_cstack[$I19]
  rx1113_cstack_done2981:
    pop rx1113_rep, rx1113_bstack
    pop rx1113_pos, rx1113_bstack
    pop $I19, rx1113_bstack
    lt rx1113_pos, -1, rx1113_done2976
    lt rx1113_pos, 0, rx1113_fail2978
    eq $I19, 0, rx1113_fail2978
    nqp_islist $I20, rx1113_cstack
    unless $I20, rx1113_jump2979
    elements $I18, rx1113_bstack
    le $I18, 0, rx1113_cut2980
    dec $I18
    set $I18, rx1113_bstack[$I18]
  rx1113_cut2980:
    assign rx1113_cstack, $I18
  rx1113_jump2979:
    jump $I19
  rx1113_done2976:
    rx1113_cur."!cursor_fail"()
    .return (rx1113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_179_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1117_tgt
    .local int rx1117_pos
    .local int rx1117_off
    .local int rx1117_eos
    .local int rx1117_rep
    .local pmc rx1117_cur
    .local pmc rx1117_curclass
    .local pmc rx1117_bstack
    .local pmc rx1117_cstack
    (rx1117_cur, rx1117_tgt, rx1117_pos, rx1117_curclass, rx1117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1117_cur
    length rx1117_eos, rx1117_tgt
    eq $I19, 1, rx1117_restart2990
    gt rx1117_pos, rx1117_eos, rx1117_fail2991
    repr_get_attr_int $I11, self, rx1117_curclass, "$!from"
    ne $I11, -1, rxscan1118_done2997
    goto rxscan1118_scan2996
  rxscan1118_loop2995:
    inc rx1117_pos
    gt rx1117_pos, rx1117_eos, rx1117_fail2991
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!from", rx1117_pos
  rxscan1118_scan2996:
    nqp_rxmark rx1117_bstack, rxscan1118_loop2995, rx1117_pos, 0
  rxscan1118_done2997:
    nqp_rxmark rx1117_bstack, rxcap1119_fail2999, rx1117_pos, 0
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail2991
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:"?", rx1117_fail2991
    add rx1117_pos, 1
    nqp_rxpeek $I19, rx1117_bstack, rxcap1119_fail2999
    inc $I19
    set $I11, rx1117_bstack[$I19]
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1117_pos)
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "sym")
    goto rxcap1119_done2998
  rxcap1119_fail2999:
    goto rx1117_fail2991
  rxcap1119_done2998:
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail2991
    nqp_rxmark rx1117_bstack, rxsubrule1120_pass3000, -1, 0
  rxsubrule1120_pass3000:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    rx1117_cur."!cursor_pass"(rx1117_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1117_cur)
  rx1117_restart2990:
    repr_get_attr_obj rx1117_cstack, rx1117_cur, rx1117_curclass, "$!cstack"
  rx1117_fail2991:
    unless rx1117_bstack, rx1117_done2989
    pop $I19, rx1117_bstack
    if_null rx1117_cstack, rx1117_cstack_done2994
    unless rx1117_cstack, rx1117_cstack_done2994
    dec $I19
    set $P11, rx1117_cstack[$I19]
  rx1117_cstack_done2994:
    pop rx1117_rep, rx1117_bstack
    pop rx1117_pos, rx1117_bstack
    pop $I19, rx1117_bstack
    lt rx1117_pos, -1, rx1117_done2989
    lt rx1117_pos, 0, rx1117_fail2991
    eq $I19, 0, rx1117_fail2991
    nqp_islist $I20, rx1117_cstack
    unless $I20, rx1117_jump2992
    elements $I18, rx1117_bstack
    le $I18, 0, rx1117_cut2993
    dec $I18
    set $I18, rx1117_bstack[$I18]
  rx1117_cut2993:
    assign rx1117_cstack, $I18
  rx1117_jump2992:
    jump $I19
  rx1117_done2989:
    rx1117_cur."!cursor_fail"()
    .return (rx1117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_180_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1121_tgt
    .local int rx1121_pos
    .local int rx1121_off
    .local int rx1121_eos
    .local int rx1121_rep
    .local pmc rx1121_cur
    .local pmc rx1121_curclass
    .local pmc rx1121_bstack
    .local pmc rx1121_cstack
    (rx1121_cur, rx1121_tgt, rx1121_pos, rx1121_curclass, rx1121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1121_cur
    length rx1121_eos, rx1121_tgt
    eq $I19, 1, rx1121_restart3003
    gt rx1121_pos, rx1121_eos, rx1121_fail3004
    repr_get_attr_int $I11, self, rx1121_curclass, "$!from"
    ne $I11, -1, rxscan1122_done3010
    goto rxscan1122_scan3009
  rxscan1122_loop3008:
    inc rx1121_pos
    gt rx1121_pos, rx1121_eos, rx1121_fail3004
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!from", rx1121_pos
  rxscan1122_scan3009:
    nqp_rxmark rx1121_bstack, rxscan1122_loop3008, rx1121_pos, 0
  rxscan1122_done3010:
    nqp_rxmark rx1121_bstack, rxcap1123_fail3012, rx1121_pos, 0
    add $I11, rx1121_pos, 1
    gt $I11, rx1121_eos, rx1121_fail3004
    substr $S10, rx1121_tgt, rx1121_pos, 1
    ne $S10, ucs4:"!", rx1121_fail3004
    add rx1121_pos, 1
    nqp_rxpeek $I19, rx1121_bstack, rxcap1123_fail3012
    inc $I19
    set $I11, rx1121_bstack[$I19]
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1121_pos)
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "sym")
    goto rxcap1123_done3011
  rxcap1123_fail3012:
    goto rx1121_fail3004
  rxcap1123_done3011:
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."O"("%symbolic_unary, :op<falsey>")
    repr_get_attr_int $I11, $P11, rx1121_curclass, "$!pos"
    lt $I11, 0, rx1121_fail3004
    nqp_rxmark rx1121_bstack, rxsubrule1124_pass3013, -1, 0
  rxsubrule1124_pass3013:
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1121_pos, $P11, rx1121_curclass, "$!pos"
    rx1121_cur."!cursor_pass"(rx1121_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1121_cur)
  rx1121_restart3003:
    repr_get_attr_obj rx1121_cstack, rx1121_cur, rx1121_curclass, "$!cstack"
  rx1121_fail3004:
    unless rx1121_bstack, rx1121_done3002
    pop $I19, rx1121_bstack
    if_null rx1121_cstack, rx1121_cstack_done3007
    unless rx1121_cstack, rx1121_cstack_done3007
    dec $I19
    set $P11, rx1121_cstack[$I19]
  rx1121_cstack_done3007:
    pop rx1121_rep, rx1121_bstack
    pop rx1121_pos, rx1121_bstack
    pop $I19, rx1121_bstack
    lt rx1121_pos, -1, rx1121_done3002
    lt rx1121_pos, 0, rx1121_fail3004
    eq $I19, 0, rx1121_fail3004
    nqp_islist $I20, rx1121_cstack
    unless $I20, rx1121_jump3005
    elements $I18, rx1121_bstack
    le $I18, 0, rx1121_cut3006
    dec $I18
    set $I18, rx1121_bstack[$I18]
  rx1121_cut3006:
    assign rx1121_cstack, $I18
  rx1121_jump3005:
    jump $I19
  rx1121_done3002:
    rx1121_cur."!cursor_fail"()
    .return (rx1121_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_181_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1125_tgt
    .local int rx1125_pos
    .local int rx1125_off
    .local int rx1125_eos
    .local int rx1125_rep
    .local pmc rx1125_cur
    .local pmc rx1125_curclass
    .local pmc rx1125_bstack
    .local pmc rx1125_cstack
    (rx1125_cur, rx1125_tgt, rx1125_pos, rx1125_curclass, rx1125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1125_cur
    length rx1125_eos, rx1125_tgt
    eq $I19, 1, rx1125_restart3016
    gt rx1125_pos, rx1125_eos, rx1125_fail3017
    repr_get_attr_int $I11, self, rx1125_curclass, "$!from"
    ne $I11, -1, rxscan1126_done3023
    goto rxscan1126_scan3022
  rxscan1126_loop3021:
    inc rx1125_pos
    gt rx1125_pos, rx1125_eos, rx1125_fail3017
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!from", rx1125_pos
  rxscan1126_scan3022:
    nqp_rxmark rx1125_bstack, rxscan1126_loop3021, rx1125_pos, 0
  rxscan1126_done3023:
    nqp_rxmark rx1125_bstack, rxcap1127_fail3025, rx1125_pos, 0
    add $I11, rx1125_pos, 1
    gt $I11, rx1125_eos, rx1125_fail3017
    substr $S10, rx1125_tgt, rx1125_pos, 1
    ne $S10, ucs4:"|", rx1125_fail3017
    add rx1125_pos, 1
    nqp_rxpeek $I19, rx1125_bstack, rxcap1127_fail3025
    inc $I19
    set $I11, rx1125_bstack[$I19]
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1125_pos)
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "sym")
    goto rxcap1127_done3024
  rxcap1127_fail3025:
    goto rx1125_fail3017
  rxcap1127_done3024:
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1125_curclass, "$!pos"
    lt $I11, 0, rx1125_fail3017
    nqp_rxmark rx1125_bstack, rxsubrule1128_pass3026, -1, 0
  rxsubrule1128_pass3026:
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1125_pos, $P11, rx1125_curclass, "$!pos"
    rx1125_cur."!cursor_pass"(rx1125_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1125_cur)
  rx1125_restart3016:
    repr_get_attr_obj rx1125_cstack, rx1125_cur, rx1125_curclass, "$!cstack"
  rx1125_fail3017:
    unless rx1125_bstack, rx1125_done3015
    pop $I19, rx1125_bstack
    if_null rx1125_cstack, rx1125_cstack_done3020
    unless rx1125_cstack, rx1125_cstack_done3020
    dec $I19
    set $P11, rx1125_cstack[$I19]
  rx1125_cstack_done3020:
    pop rx1125_rep, rx1125_bstack
    pop rx1125_pos, rx1125_bstack
    pop $I19, rx1125_bstack
    lt rx1125_pos, -1, rx1125_done3015
    lt rx1125_pos, 0, rx1125_fail3017
    eq $I19, 0, rx1125_fail3017
    nqp_islist $I20, rx1125_cstack
    unless $I20, rx1125_jump3018
    elements $I18, rx1125_bstack
    le $I18, 0, rx1125_cut3019
    dec $I18
    set $I18, rx1125_bstack[$I18]
  rx1125_cut3019:
    assign rx1125_cstack, $I18
  rx1125_jump3018:
    jump $I19
  rx1125_done3015:
    rx1125_cur."!cursor_fail"()
    .return (rx1125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_182_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1129_tgt
    .local int rx1129_pos
    .local int rx1129_off
    .local int rx1129_eos
    .local int rx1129_rep
    .local pmc rx1129_cur
    .local pmc rx1129_curclass
    .local pmc rx1129_bstack
    .local pmc rx1129_cstack
    (rx1129_cur, rx1129_tgt, rx1129_pos, rx1129_curclass, rx1129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1129_cur
    length rx1129_eos, rx1129_tgt
    eq $I19, 1, rx1129_restart3029
    gt rx1129_pos, rx1129_eos, rx1129_fail3030
    repr_get_attr_int $I11, self, rx1129_curclass, "$!from"
    ne $I11, -1, rxscan1130_done3036
    goto rxscan1130_scan3035
  rxscan1130_loop3034:
    inc rx1129_pos
    gt rx1129_pos, rx1129_eos, rx1129_fail3030
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!from", rx1129_pos
  rxscan1130_scan3035:
    nqp_rxmark rx1129_bstack, rxscan1130_loop3034, rx1129_pos, 0
  rxscan1130_done3036:
    nqp_rxmark rx1129_bstack, rxcap1131_fail3038, rx1129_pos, 0
    add $I11, rx1129_pos, 1
    gt $I11, rx1129_eos, rx1129_fail3030
    substr $S10, rx1129_tgt, rx1129_pos, 1
    ne $S10, ucs4:"*", rx1129_fail3030
    add rx1129_pos, 1
    nqp_rxpeek $I19, rx1129_bstack, rxcap1131_fail3038
    inc $I19
    set $I11, rx1129_bstack[$I19]
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1129_pos)
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "sym")
    goto rxcap1131_done3037
  rxcap1131_fail3038:
    goto rx1129_fail3030
  rxcap1131_done3037:
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1129_curclass, "$!pos"
    lt $I11, 0, rx1129_fail3030
    nqp_rxmark rx1129_bstack, rxsubrule1132_pass3039, -1, 0
  rxsubrule1132_pass3039:
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1129_pos, $P11, rx1129_curclass, "$!pos"
    rx1129_cur."!cursor_pass"(rx1129_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1129_cur)
  rx1129_restart3029:
    repr_get_attr_obj rx1129_cstack, rx1129_cur, rx1129_curclass, "$!cstack"
  rx1129_fail3030:
    unless rx1129_bstack, rx1129_done3028
    pop $I19, rx1129_bstack
    if_null rx1129_cstack, rx1129_cstack_done3033
    unless rx1129_cstack, rx1129_cstack_done3033
    dec $I19
    set $P11, rx1129_cstack[$I19]
  rx1129_cstack_done3033:
    pop rx1129_rep, rx1129_bstack
    pop rx1129_pos, rx1129_bstack
    pop $I19, rx1129_bstack
    lt rx1129_pos, -1, rx1129_done3028
    lt rx1129_pos, 0, rx1129_fail3030
    eq $I19, 0, rx1129_fail3030
    nqp_islist $I20, rx1129_cstack
    unless $I20, rx1129_jump3031
    elements $I18, rx1129_bstack
    le $I18, 0, rx1129_cut3032
    dec $I18
    set $I18, rx1129_bstack[$I18]
  rx1129_cut3032:
    assign rx1129_cstack, $I18
  rx1129_jump3031:
    jump $I19
  rx1129_done3028:
    rx1129_cur."!cursor_fail"()
    .return (rx1129_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_183_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1133_tgt
    .local int rx1133_pos
    .local int rx1133_off
    .local int rx1133_eos
    .local int rx1133_rep
    .local pmc rx1133_cur
    .local pmc rx1133_curclass
    .local pmc rx1133_bstack
    .local pmc rx1133_cstack
    (rx1133_cur, rx1133_tgt, rx1133_pos, rx1133_curclass, rx1133_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1133_cur
    length rx1133_eos, rx1133_tgt
    eq $I19, 1, rx1133_restart3042
    gt rx1133_pos, rx1133_eos, rx1133_fail3043
    repr_get_attr_int $I11, self, rx1133_curclass, "$!from"
    ne $I11, -1, rxscan1134_done3049
    goto rxscan1134_scan3048
  rxscan1134_loop3047:
    inc rx1133_pos
    gt rx1133_pos, rx1133_eos, rx1133_fail3043
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!from", rx1133_pos
  rxscan1134_scan3048:
    nqp_rxmark rx1133_bstack, rxscan1134_loop3047, rx1133_pos, 0
  rxscan1134_done3049:
    nqp_rxmark rx1133_bstack, rxcap1135_fail3051, rx1133_pos, 0
    add $I11, rx1133_pos, 1
    gt $I11, rx1133_eos, rx1133_fail3043
    substr $S10, rx1133_tgt, rx1133_pos, 1
    ne $S10, ucs4:"/", rx1133_fail3043
    add rx1133_pos, 1
    nqp_rxpeek $I19, rx1133_bstack, rxcap1135_fail3051
    inc $I19
    set $I11, rx1133_bstack[$I19]
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1133_pos)
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "sym")
    goto rxcap1135_done3050
  rxcap1135_fail3051:
    goto rx1133_fail3043
  rxcap1135_done3050:
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1133_curclass, "$!pos"
    lt $I11, 0, rx1133_fail3043
    nqp_rxmark rx1133_bstack, rxsubrule1136_pass3052, -1, 0
  rxsubrule1136_pass3052:
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1133_pos, $P11, rx1133_curclass, "$!pos"
    rx1133_cur."!cursor_pass"(rx1133_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1133_cur)
  rx1133_restart3042:
    repr_get_attr_obj rx1133_cstack, rx1133_cur, rx1133_curclass, "$!cstack"
  rx1133_fail3043:
    unless rx1133_bstack, rx1133_done3041
    pop $I19, rx1133_bstack
    if_null rx1133_cstack, rx1133_cstack_done3046
    unless rx1133_cstack, rx1133_cstack_done3046
    dec $I19
    set $P11, rx1133_cstack[$I19]
  rx1133_cstack_done3046:
    pop rx1133_rep, rx1133_bstack
    pop rx1133_pos, rx1133_bstack
    pop $I19, rx1133_bstack
    lt rx1133_pos, -1, rx1133_done3041
    lt rx1133_pos, 0, rx1133_fail3043
    eq $I19, 0, rx1133_fail3043
    nqp_islist $I20, rx1133_cstack
    unless $I20, rx1133_jump3044
    elements $I18, rx1133_bstack
    le $I18, 0, rx1133_cut3045
    dec $I18
    set $I18, rx1133_bstack[$I18]
  rx1133_cut3045:
    assign rx1133_cstack, $I18
  rx1133_jump3044:
    jump $I19
  rx1133_done3041:
    rx1133_cur."!cursor_fail"()
    .return (rx1133_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_184_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1137_tgt
    .local int rx1137_pos
    .local int rx1137_off
    .local int rx1137_eos
    .local int rx1137_rep
    .local pmc rx1137_cur
    .local pmc rx1137_curclass
    .local pmc rx1137_bstack
    .local pmc rx1137_cstack
    (rx1137_cur, rx1137_tgt, rx1137_pos, rx1137_curclass, rx1137_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1137_cur
    length rx1137_eos, rx1137_tgt
    eq $I19, 1, rx1137_restart3055
    gt rx1137_pos, rx1137_eos, rx1137_fail3056
    repr_get_attr_int $I11, self, rx1137_curclass, "$!from"
    ne $I11, -1, rxscan1138_done3062
    goto rxscan1138_scan3061
  rxscan1138_loop3060:
    inc rx1137_pos
    gt rx1137_pos, rx1137_eos, rx1137_fail3056
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!from", rx1137_pos
  rxscan1138_scan3061:
    nqp_rxmark rx1137_bstack, rxscan1138_loop3060, rx1137_pos, 0
  rxscan1138_done3062:
    nqp_rxmark rx1137_bstack, rxcap1139_fail3064, rx1137_pos, 0
    add $I11, rx1137_pos, 1
    gt $I11, rx1137_eos, rx1137_fail3056
    substr $S10, rx1137_tgt, rx1137_pos, 1
    ne $S10, ucs4:"%", rx1137_fail3056
    add rx1137_pos, 1
    nqp_rxpeek $I19, rx1137_bstack, rxcap1139_fail3064
    inc $I19
    set $I11, rx1137_bstack[$I19]
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1137_pos)
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "sym")
    goto rxcap1139_done3063
  rxcap1139_fail3064:
    goto rx1137_fail3056
  rxcap1139_done3063:
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1137_curclass, "$!pos"
    lt $I11, 0, rx1137_fail3056
    nqp_rxmark rx1137_bstack, rxsubrule1140_pass3065, -1, 0
  rxsubrule1140_pass3065:
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1137_pos, $P11, rx1137_curclass, "$!pos"
    rx1137_cur."!cursor_pass"(rx1137_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1137_cur)
  rx1137_restart3055:
    repr_get_attr_obj rx1137_cstack, rx1137_cur, rx1137_curclass, "$!cstack"
  rx1137_fail3056:
    unless rx1137_bstack, rx1137_done3054
    pop $I19, rx1137_bstack
    if_null rx1137_cstack, rx1137_cstack_done3059
    unless rx1137_cstack, rx1137_cstack_done3059
    dec $I19
    set $P11, rx1137_cstack[$I19]
  rx1137_cstack_done3059:
    pop rx1137_rep, rx1137_bstack
    pop rx1137_pos, rx1137_bstack
    pop $I19, rx1137_bstack
    lt rx1137_pos, -1, rx1137_done3054
    lt rx1137_pos, 0, rx1137_fail3056
    eq $I19, 0, rx1137_fail3056
    nqp_islist $I20, rx1137_cstack
    unless $I20, rx1137_jump3057
    elements $I18, rx1137_bstack
    le $I18, 0, rx1137_cut3058
    dec $I18
    set $I18, rx1137_bstack[$I18]
  rx1137_cut3058:
    assign rx1137_cstack, $I18
  rx1137_jump3057:
    jump $I19
  rx1137_done3054:
    rx1137_cur."!cursor_fail"()
    .return (rx1137_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_185_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1141_tgt
    .local int rx1141_pos
    .local int rx1141_off
    .local int rx1141_eos
    .local int rx1141_rep
    .local pmc rx1141_cur
    .local pmc rx1141_curclass
    .local pmc rx1141_bstack
    .local pmc rx1141_cstack
    (rx1141_cur, rx1141_tgt, rx1141_pos, rx1141_curclass, rx1141_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1141_cur
    length rx1141_eos, rx1141_tgt
    eq $I19, 1, rx1141_restart3068
    gt rx1141_pos, rx1141_eos, rx1141_fail3069
    repr_get_attr_int $I11, self, rx1141_curclass, "$!from"
    ne $I11, -1, rxscan1142_done3075
    goto rxscan1142_scan3074
  rxscan1142_loop3073:
    inc rx1141_pos
    gt rx1141_pos, rx1141_eos, rx1141_fail3069
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!from", rx1141_pos
  rxscan1142_scan3074:
    nqp_rxmark rx1141_bstack, rxscan1142_loop3073, rx1141_pos, 0
  rxscan1142_done3075:
    nqp_rxmark rx1141_bstack, rxcap1143_fail3077, rx1141_pos, 0
    add $I11, rx1141_pos, 2
    gt $I11, rx1141_eos, rx1141_fail3069
    substr $S10, rx1141_tgt, rx1141_pos, 2
    ne $S10, ucs4:"+&", rx1141_fail3069
    add rx1141_pos, 2
    nqp_rxpeek $I19, rx1141_bstack, rxcap1143_fail3077
    inc $I19
    set $I11, rx1141_bstack[$I19]
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1141_pos)
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "sym")
    goto rxcap1143_done3076
  rxcap1143_fail3077:
    goto rx1141_fail3069
  rxcap1143_done3076:
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1141_curclass, "$!pos"
    lt $I11, 0, rx1141_fail3069
    nqp_rxmark rx1141_bstack, rxsubrule1144_pass3078, -1, 0
  rxsubrule1144_pass3078:
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1141_pos, $P11, rx1141_curclass, "$!pos"
    rx1141_cur."!cursor_pass"(rx1141_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1141_cur)
  rx1141_restart3068:
    repr_get_attr_obj rx1141_cstack, rx1141_cur, rx1141_curclass, "$!cstack"
  rx1141_fail3069:
    unless rx1141_bstack, rx1141_done3067
    pop $I19, rx1141_bstack
    if_null rx1141_cstack, rx1141_cstack_done3072
    unless rx1141_cstack, rx1141_cstack_done3072
    dec $I19
    set $P11, rx1141_cstack[$I19]
  rx1141_cstack_done3072:
    pop rx1141_rep, rx1141_bstack
    pop rx1141_pos, rx1141_bstack
    pop $I19, rx1141_bstack
    lt rx1141_pos, -1, rx1141_done3067
    lt rx1141_pos, 0, rx1141_fail3069
    eq $I19, 0, rx1141_fail3069
    nqp_islist $I20, rx1141_cstack
    unless $I20, rx1141_jump3070
    elements $I18, rx1141_bstack
    le $I18, 0, rx1141_cut3071
    dec $I18
    set $I18, rx1141_bstack[$I18]
  rx1141_cut3071:
    assign rx1141_cstack, $I18
  rx1141_jump3070:
    jump $I19
  rx1141_done3067:
    rx1141_cur."!cursor_fail"()
    .return (rx1141_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_186_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1145_tgt
    .local int rx1145_pos
    .local int rx1145_off
    .local int rx1145_eos
    .local int rx1145_rep
    .local pmc rx1145_cur
    .local pmc rx1145_curclass
    .local pmc rx1145_bstack
    .local pmc rx1145_cstack
    (rx1145_cur, rx1145_tgt, rx1145_pos, rx1145_curclass, rx1145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1145_cur
    length rx1145_eos, rx1145_tgt
    eq $I19, 1, rx1145_restart3081
    gt rx1145_pos, rx1145_eos, rx1145_fail3082
    repr_get_attr_int $I11, self, rx1145_curclass, "$!from"
    ne $I11, -1, rxscan1146_done3088
    goto rxscan1146_scan3087
  rxscan1146_loop3086:
    inc rx1145_pos
    gt rx1145_pos, rx1145_eos, rx1145_fail3082
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!from", rx1145_pos
  rxscan1146_scan3087:
    nqp_rxmark rx1145_bstack, rxscan1146_loop3086, rx1145_pos, 0
  rxscan1146_done3088:
    nqp_rxmark rx1145_bstack, rxcap1147_fail3090, rx1145_pos, 0
    add $I11, rx1145_pos, 1
    gt $I11, rx1145_eos, rx1145_fail3082
    substr $S10, rx1145_tgt, rx1145_pos, 1
    ne $S10, ucs4:"+", rx1145_fail3082
    add rx1145_pos, 1
    nqp_rxpeek $I19, rx1145_bstack, rxcap1147_fail3090
    inc $I19
    set $I11, rx1145_bstack[$I19]
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1145_pos)
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "sym")
    goto rxcap1147_done3089
  rxcap1147_fail3090:
    goto rx1145_fail3082
  rxcap1147_done3089:
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1145_curclass, "$!pos"
    lt $I11, 0, rx1145_fail3082
    nqp_rxmark rx1145_bstack, rxsubrule1148_pass3091, -1, 0
  rxsubrule1148_pass3091:
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1145_pos, $P11, rx1145_curclass, "$!pos"
    rx1145_cur."!cursor_pass"(rx1145_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1145_cur)
  rx1145_restart3081:
    repr_get_attr_obj rx1145_cstack, rx1145_cur, rx1145_curclass, "$!cstack"
  rx1145_fail3082:
    unless rx1145_bstack, rx1145_done3080
    pop $I19, rx1145_bstack
    if_null rx1145_cstack, rx1145_cstack_done3085
    unless rx1145_cstack, rx1145_cstack_done3085
    dec $I19
    set $P11, rx1145_cstack[$I19]
  rx1145_cstack_done3085:
    pop rx1145_rep, rx1145_bstack
    pop rx1145_pos, rx1145_bstack
    pop $I19, rx1145_bstack
    lt rx1145_pos, -1, rx1145_done3080
    lt rx1145_pos, 0, rx1145_fail3082
    eq $I19, 0, rx1145_fail3082
    nqp_islist $I20, rx1145_cstack
    unless $I20, rx1145_jump3083
    elements $I18, rx1145_bstack
    le $I18, 0, rx1145_cut3084
    dec $I18
    set $I18, rx1145_bstack[$I18]
  rx1145_cut3084:
    assign rx1145_cstack, $I18
  rx1145_jump3083:
    jump $I19
  rx1145_done3080:
    rx1145_cur."!cursor_fail"()
    .return (rx1145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_187_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1149_tgt
    .local int rx1149_pos
    .local int rx1149_off
    .local int rx1149_eos
    .local int rx1149_rep
    .local pmc rx1149_cur
    .local pmc rx1149_curclass
    .local pmc rx1149_bstack
    .local pmc rx1149_cstack
    (rx1149_cur, rx1149_tgt, rx1149_pos, rx1149_curclass, rx1149_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1149_cur
    length rx1149_eos, rx1149_tgt
    eq $I19, 1, rx1149_restart3094
    gt rx1149_pos, rx1149_eos, rx1149_fail3095
    repr_get_attr_int $I11, self, rx1149_curclass, "$!from"
    ne $I11, -1, rxscan1150_done3101
    goto rxscan1150_scan3100
  rxscan1150_loop3099:
    inc rx1149_pos
    gt rx1149_pos, rx1149_eos, rx1149_fail3095
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!from", rx1149_pos
  rxscan1150_scan3100:
    nqp_rxmark rx1149_bstack, rxscan1150_loop3099, rx1149_pos, 0
  rxscan1150_done3101:
    nqp_rxmark rx1149_bstack, rxcap1151_fail3103, rx1149_pos, 0
    add $I11, rx1149_pos, 1
    gt $I11, rx1149_eos, rx1149_fail3095
    substr $S10, rx1149_tgt, rx1149_pos, 1
    ne $S10, ucs4:"-", rx1149_fail3095
    add rx1149_pos, 1
    nqp_rxpeek $I19, rx1149_bstack, rxcap1151_fail3103
    inc $I19
    set $I11, rx1149_bstack[$I19]
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1149_pos)
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "sym")
    goto rxcap1151_done3102
  rxcap1151_fail3103:
    goto rx1149_fail3095
  rxcap1151_done3102:
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1149_curclass, "$!pos"
    lt $I11, 0, rx1149_fail3095
    nqp_rxmark rx1149_bstack, rxsubrule1152_pass3104, -1, 0
  rxsubrule1152_pass3104:
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1149_pos, $P11, rx1149_curclass, "$!pos"
    rx1149_cur."!cursor_pass"(rx1149_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1149_cur)
  rx1149_restart3094:
    repr_get_attr_obj rx1149_cstack, rx1149_cur, rx1149_curclass, "$!cstack"
  rx1149_fail3095:
    unless rx1149_bstack, rx1149_done3093
    pop $I19, rx1149_bstack
    if_null rx1149_cstack, rx1149_cstack_done3098
    unless rx1149_cstack, rx1149_cstack_done3098
    dec $I19
    set $P11, rx1149_cstack[$I19]
  rx1149_cstack_done3098:
    pop rx1149_rep, rx1149_bstack
    pop rx1149_pos, rx1149_bstack
    pop $I19, rx1149_bstack
    lt rx1149_pos, -1, rx1149_done3093
    lt rx1149_pos, 0, rx1149_fail3095
    eq $I19, 0, rx1149_fail3095
    nqp_islist $I20, rx1149_cstack
    unless $I20, rx1149_jump3096
    elements $I18, rx1149_bstack
    le $I18, 0, rx1149_cut3097
    dec $I18
    set $I18, rx1149_bstack[$I18]
  rx1149_cut3097:
    assign rx1149_cstack, $I18
  rx1149_jump3096:
    jump $I19
  rx1149_done3093:
    rx1149_cur."!cursor_fail"()
    .return (rx1149_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_188_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1153_tgt
    .local int rx1153_pos
    .local int rx1153_off
    .local int rx1153_eos
    .local int rx1153_rep
    .local pmc rx1153_cur
    .local pmc rx1153_curclass
    .local pmc rx1153_bstack
    .local pmc rx1153_cstack
    (rx1153_cur, rx1153_tgt, rx1153_pos, rx1153_curclass, rx1153_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1153_cur
    length rx1153_eos, rx1153_tgt
    eq $I19, 1, rx1153_restart3107
    gt rx1153_pos, rx1153_eos, rx1153_fail3108
    repr_get_attr_int $I11, self, rx1153_curclass, "$!from"
    ne $I11, -1, rxscan1154_done3114
    goto rxscan1154_scan3113
  rxscan1154_loop3112:
    inc rx1153_pos
    gt rx1153_pos, rx1153_eos, rx1153_fail3108
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!from", rx1153_pos
  rxscan1154_scan3113:
    nqp_rxmark rx1153_bstack, rxscan1154_loop3112, rx1153_pos, 0
  rxscan1154_done3114:
    nqp_rxmark rx1153_bstack, rxcap1155_fail3116, rx1153_pos, 0
    add $I11, rx1153_pos, 2
    gt $I11, rx1153_eos, rx1153_fail3108
    substr $S10, rx1153_tgt, rx1153_pos, 2
    ne $S10, ucs4:"+|", rx1153_fail3108
    add rx1153_pos, 2
    nqp_rxpeek $I19, rx1153_bstack, rxcap1155_fail3116
    inc $I19
    set $I11, rx1153_bstack[$I19]
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1153_pos)
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "sym")
    goto rxcap1155_done3115
  rxcap1155_fail3116:
    goto rx1153_fail3108
  rxcap1155_done3115:
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1153_curclass, "$!pos"
    lt $I11, 0, rx1153_fail3108
    nqp_rxmark rx1153_bstack, rxsubrule1156_pass3117, -1, 0
  rxsubrule1156_pass3117:
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1153_pos, $P11, rx1153_curclass, "$!pos"
    rx1153_cur."!cursor_pass"(rx1153_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1153_cur)
  rx1153_restart3107:
    repr_get_attr_obj rx1153_cstack, rx1153_cur, rx1153_curclass, "$!cstack"
  rx1153_fail3108:
    unless rx1153_bstack, rx1153_done3106
    pop $I19, rx1153_bstack
    if_null rx1153_cstack, rx1153_cstack_done3111
    unless rx1153_cstack, rx1153_cstack_done3111
    dec $I19
    set $P11, rx1153_cstack[$I19]
  rx1153_cstack_done3111:
    pop rx1153_rep, rx1153_bstack
    pop rx1153_pos, rx1153_bstack
    pop $I19, rx1153_bstack
    lt rx1153_pos, -1, rx1153_done3106
    lt rx1153_pos, 0, rx1153_fail3108
    eq $I19, 0, rx1153_fail3108
    nqp_islist $I20, rx1153_cstack
    unless $I20, rx1153_jump3109
    elements $I18, rx1153_bstack
    le $I18, 0, rx1153_cut3110
    dec $I18
    set $I18, rx1153_bstack[$I18]
  rx1153_cut3110:
    assign rx1153_cstack, $I18
  rx1153_jump3109:
    jump $I19
  rx1153_done3106:
    rx1153_cur."!cursor_fail"()
    .return (rx1153_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_189_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1157_tgt
    .local int rx1157_pos
    .local int rx1157_off
    .local int rx1157_eos
    .local int rx1157_rep
    .local pmc rx1157_cur
    .local pmc rx1157_curclass
    .local pmc rx1157_bstack
    .local pmc rx1157_cstack
    (rx1157_cur, rx1157_tgt, rx1157_pos, rx1157_curclass, rx1157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1157_cur
    length rx1157_eos, rx1157_tgt
    eq $I19, 1, rx1157_restart3120
    gt rx1157_pos, rx1157_eos, rx1157_fail3121
    repr_get_attr_int $I11, self, rx1157_curclass, "$!from"
    ne $I11, -1, rxscan1158_done3127
    goto rxscan1158_scan3126
  rxscan1158_loop3125:
    inc rx1157_pos
    gt rx1157_pos, rx1157_eos, rx1157_fail3121
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!from", rx1157_pos
  rxscan1158_scan3126:
    nqp_rxmark rx1157_bstack, rxscan1158_loop3125, rx1157_pos, 0
  rxscan1158_done3127:
    nqp_rxmark rx1157_bstack, rxcap1159_fail3129, rx1157_pos, 0
    add $I11, rx1157_pos, 2
    gt $I11, rx1157_eos, rx1157_fail3121
    substr $S10, rx1157_tgt, rx1157_pos, 2
    ne $S10, ucs4:"+^", rx1157_fail3121
    add rx1157_pos, 2
    nqp_rxpeek $I19, rx1157_bstack, rxcap1159_fail3129
    inc $I19
    set $I11, rx1157_bstack[$I19]
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1157_pos)
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "sym")
    goto rxcap1159_done3128
  rxcap1159_fail3129:
    goto rx1157_fail3121
  rxcap1159_done3128:
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1157_curclass, "$!pos"
    lt $I11, 0, rx1157_fail3121
    nqp_rxmark rx1157_bstack, rxsubrule1160_pass3130, -1, 0
  rxsubrule1160_pass3130:
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1157_pos, $P11, rx1157_curclass, "$!pos"
    rx1157_cur."!cursor_pass"(rx1157_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1157_cur)
  rx1157_restart3120:
    repr_get_attr_obj rx1157_cstack, rx1157_cur, rx1157_curclass, "$!cstack"
  rx1157_fail3121:
    unless rx1157_bstack, rx1157_done3119
    pop $I19, rx1157_bstack
    if_null rx1157_cstack, rx1157_cstack_done3124
    unless rx1157_cstack, rx1157_cstack_done3124
    dec $I19
    set $P11, rx1157_cstack[$I19]
  rx1157_cstack_done3124:
    pop rx1157_rep, rx1157_bstack
    pop rx1157_pos, rx1157_bstack
    pop $I19, rx1157_bstack
    lt rx1157_pos, -1, rx1157_done3119
    lt rx1157_pos, 0, rx1157_fail3121
    eq $I19, 0, rx1157_fail3121
    nqp_islist $I20, rx1157_cstack
    unless $I20, rx1157_jump3122
    elements $I18, rx1157_bstack
    le $I18, 0, rx1157_cut3123
    dec $I18
    set $I18, rx1157_bstack[$I18]
  rx1157_cut3123:
    assign rx1157_cstack, $I18
  rx1157_jump3122:
    jump $I19
  rx1157_done3119:
    rx1157_cur."!cursor_fail"()
    .return (rx1157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_190_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_curclass
    .local pmc rx1161_bstack
    .local pmc rx1161_cstack
    (rx1161_cur, rx1161_tgt, rx1161_pos, rx1161_curclass, rx1161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1161_cur
    length rx1161_eos, rx1161_tgt
    eq $I19, 1, rx1161_restart3133
    gt rx1161_pos, rx1161_eos, rx1161_fail3134
    repr_get_attr_int $I11, self, rx1161_curclass, "$!from"
    ne $I11, -1, rxscan1162_done3140
    goto rxscan1162_scan3139
  rxscan1162_loop3138:
    inc rx1161_pos
    gt rx1161_pos, rx1161_eos, rx1161_fail3134
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!from", rx1161_pos
  rxscan1162_scan3139:
    nqp_rxmark rx1161_bstack, rxscan1162_loop3138, rx1161_pos, 0
  rxscan1162_done3140:
    nqp_rxmark rx1161_bstack, rxcap1163_fail3142, rx1161_pos, 0
    add $I11, rx1161_pos, 1
    gt $I11, rx1161_eos, rx1161_fail3134
    substr $S10, rx1161_tgt, rx1161_pos, 1
    ne $S10, ucs4:"~", rx1161_fail3134
    add rx1161_pos, 1
    nqp_rxpeek $I19, rx1161_bstack, rxcap1163_fail3142
    inc $I19
    set $I11, rx1161_bstack[$I19]
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1161_pos)
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "sym")
    goto rxcap1163_done3141
  rxcap1163_fail3142:
    goto rx1161_fail3134
  rxcap1163_done3141:
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1161_curclass, "$!pos"
    lt $I11, 0, rx1161_fail3134
    nqp_rxmark rx1161_bstack, rxsubrule1164_pass3143, -1, 0
  rxsubrule1164_pass3143:
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1161_pos, $P11, rx1161_curclass, "$!pos"
    rx1161_cur."!cursor_pass"(rx1161_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1161_cur)
  rx1161_restart3133:
    repr_get_attr_obj rx1161_cstack, rx1161_cur, rx1161_curclass, "$!cstack"
  rx1161_fail3134:
    unless rx1161_bstack, rx1161_done3132
    pop $I19, rx1161_bstack
    if_null rx1161_cstack, rx1161_cstack_done3137
    unless rx1161_cstack, rx1161_cstack_done3137
    dec $I19
    set $P11, rx1161_cstack[$I19]
  rx1161_cstack_done3137:
    pop rx1161_rep, rx1161_bstack
    pop rx1161_pos, rx1161_bstack
    pop $I19, rx1161_bstack
    lt rx1161_pos, -1, rx1161_done3132
    lt rx1161_pos, 0, rx1161_fail3134
    eq $I19, 0, rx1161_fail3134
    nqp_islist $I20, rx1161_cstack
    unless $I20, rx1161_jump3135
    elements $I18, rx1161_bstack
    le $I18, 0, rx1161_cut3136
    dec $I18
    set $I18, rx1161_bstack[$I18]
  rx1161_cut3136:
    assign rx1161_cstack, $I18
  rx1161_jump3135:
    jump $I19
  rx1161_done3132:
    rx1161_cur."!cursor_fail"()
    .return (rx1161_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_191_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1165_tgt
    .local int rx1165_pos
    .local int rx1165_off
    .local int rx1165_eos
    .local int rx1165_rep
    .local pmc rx1165_cur
    .local pmc rx1165_curclass
    .local pmc rx1165_bstack
    .local pmc rx1165_cstack
    (rx1165_cur, rx1165_tgt, rx1165_pos, rx1165_curclass, rx1165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1165_cur
    length rx1165_eos, rx1165_tgt
    eq $I19, 1, rx1165_restart3146
    gt rx1165_pos, rx1165_eos, rx1165_fail3147
    repr_get_attr_int $I11, self, rx1165_curclass, "$!from"
    ne $I11, -1, rxscan1166_done3153
    goto rxscan1166_scan3152
  rxscan1166_loop3151:
    inc rx1165_pos
    gt rx1165_pos, rx1165_eos, rx1165_fail3147
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!from", rx1165_pos
  rxscan1166_scan3152:
    nqp_rxmark rx1165_bstack, rxscan1166_loop3151, rx1165_pos, 0
  rxscan1166_done3153:
    nqp_rxmark rx1165_bstack, rxcap1167_fail3155, rx1165_pos, 0
    add $I11, rx1165_pos, 2
    gt $I11, rx1165_eos, rx1165_fail3147
    substr $S10, rx1165_tgt, rx1165_pos, 2
    ne $S10, ucs4:"==", rx1165_fail3147
    add rx1165_pos, 2
    nqp_rxpeek $I19, rx1165_bstack, rxcap1167_fail3155
    inc $I19
    set $I11, rx1165_bstack[$I19]
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1165_pos)
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "sym")
    goto rxcap1167_done3154
  rxcap1167_fail3155:
    goto rx1165_fail3147
  rxcap1167_done3154:
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1165_curclass, "$!pos"
    lt $I11, 0, rx1165_fail3147
    nqp_rxmark rx1165_bstack, rxsubrule1168_pass3156, -1, 0
  rxsubrule1168_pass3156:
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1165_pos, $P11, rx1165_curclass, "$!pos"
    rx1165_cur."!cursor_pass"(rx1165_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1165_cur)
  rx1165_restart3146:
    repr_get_attr_obj rx1165_cstack, rx1165_cur, rx1165_curclass, "$!cstack"
  rx1165_fail3147:
    unless rx1165_bstack, rx1165_done3145
    pop $I19, rx1165_bstack
    if_null rx1165_cstack, rx1165_cstack_done3150
    unless rx1165_cstack, rx1165_cstack_done3150
    dec $I19
    set $P11, rx1165_cstack[$I19]
  rx1165_cstack_done3150:
    pop rx1165_rep, rx1165_bstack
    pop rx1165_pos, rx1165_bstack
    pop $I19, rx1165_bstack
    lt rx1165_pos, -1, rx1165_done3145
    lt rx1165_pos, 0, rx1165_fail3147
    eq $I19, 0, rx1165_fail3147
    nqp_islist $I20, rx1165_cstack
    unless $I20, rx1165_jump3148
    elements $I18, rx1165_bstack
    le $I18, 0, rx1165_cut3149
    dec $I18
    set $I18, rx1165_bstack[$I18]
  rx1165_cut3149:
    assign rx1165_cstack, $I18
  rx1165_jump3148:
    jump $I19
  rx1165_done3145:
    rx1165_cur."!cursor_fail"()
    .return (rx1165_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_192_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_curclass
    .local pmc rx1169_bstack
    .local pmc rx1169_cstack
    (rx1169_cur, rx1169_tgt, rx1169_pos, rx1169_curclass, rx1169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1169_cur
    length rx1169_eos, rx1169_tgt
    eq $I19, 1, rx1169_restart3159
    gt rx1169_pos, rx1169_eos, rx1169_fail3160
    repr_get_attr_int $I11, self, rx1169_curclass, "$!from"
    ne $I11, -1, rxscan1170_done3166
    goto rxscan1170_scan3165
  rxscan1170_loop3164:
    inc rx1169_pos
    gt rx1169_pos, rx1169_eos, rx1169_fail3160
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!from", rx1169_pos
  rxscan1170_scan3165:
    nqp_rxmark rx1169_bstack, rxscan1170_loop3164, rx1169_pos, 0
  rxscan1170_done3166:
    nqp_rxmark rx1169_bstack, rxcap1171_fail3168, rx1169_pos, 0
    add $I11, rx1169_pos, 2
    gt $I11, rx1169_eos, rx1169_fail3160
    substr $S10, rx1169_tgt, rx1169_pos, 2
    ne $S10, ucs4:"!=", rx1169_fail3160
    add rx1169_pos, 2
    nqp_rxpeek $I19, rx1169_bstack, rxcap1171_fail3168
    inc $I19
    set $I11, rx1169_bstack[$I19]
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1169_pos)
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "sym")
    goto rxcap1171_done3167
  rxcap1171_fail3168:
    goto rx1169_fail3160
  rxcap1171_done3167:
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1169_curclass, "$!pos"
    lt $I11, 0, rx1169_fail3160
    nqp_rxmark rx1169_bstack, rxsubrule1172_pass3169, -1, 0
  rxsubrule1172_pass3169:
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1169_pos, $P11, rx1169_curclass, "$!pos"
    rx1169_cur."!cursor_pass"(rx1169_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1169_cur)
  rx1169_restart3159:
    repr_get_attr_obj rx1169_cstack, rx1169_cur, rx1169_curclass, "$!cstack"
  rx1169_fail3160:
    unless rx1169_bstack, rx1169_done3158
    pop $I19, rx1169_bstack
    if_null rx1169_cstack, rx1169_cstack_done3163
    unless rx1169_cstack, rx1169_cstack_done3163
    dec $I19
    set $P11, rx1169_cstack[$I19]
  rx1169_cstack_done3163:
    pop rx1169_rep, rx1169_bstack
    pop rx1169_pos, rx1169_bstack
    pop $I19, rx1169_bstack
    lt rx1169_pos, -1, rx1169_done3158
    lt rx1169_pos, 0, rx1169_fail3160
    eq $I19, 0, rx1169_fail3160
    nqp_islist $I20, rx1169_cstack
    unless $I20, rx1169_jump3161
    elements $I18, rx1169_bstack
    le $I18, 0, rx1169_cut3162
    dec $I18
    set $I18, rx1169_bstack[$I18]
  rx1169_cut3162:
    assign rx1169_cstack, $I18
  rx1169_jump3161:
    jump $I19
  rx1169_done3158:
    rx1169_cur."!cursor_fail"()
    .return (rx1169_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_193_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1173_tgt
    .local int rx1173_pos
    .local int rx1173_off
    .local int rx1173_eos
    .local int rx1173_rep
    .local pmc rx1173_cur
    .local pmc rx1173_curclass
    .local pmc rx1173_bstack
    .local pmc rx1173_cstack
    (rx1173_cur, rx1173_tgt, rx1173_pos, rx1173_curclass, rx1173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1173_cur
    length rx1173_eos, rx1173_tgt
    eq $I19, 1, rx1173_restart3172
    gt rx1173_pos, rx1173_eos, rx1173_fail3173
    repr_get_attr_int $I11, self, rx1173_curclass, "$!from"
    ne $I11, -1, rxscan1174_done3179
    goto rxscan1174_scan3178
  rxscan1174_loop3177:
    inc rx1173_pos
    gt rx1173_pos, rx1173_eos, rx1173_fail3173
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!from", rx1173_pos
  rxscan1174_scan3178:
    nqp_rxmark rx1173_bstack, rxscan1174_loop3177, rx1173_pos, 0
  rxscan1174_done3179:
    nqp_rxmark rx1173_bstack, rxcap1175_fail3181, rx1173_pos, 0
    add $I11, rx1173_pos, 2
    gt $I11, rx1173_eos, rx1173_fail3173
    substr $S10, rx1173_tgt, rx1173_pos, 2
    ne $S10, ucs4:"<=", rx1173_fail3173
    add rx1173_pos, 2
    nqp_rxpeek $I19, rx1173_bstack, rxcap1175_fail3181
    inc $I19
    set $I11, rx1173_bstack[$I19]
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1173_pos)
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "sym")
    goto rxcap1175_done3180
  rxcap1175_fail3181:
    goto rx1173_fail3173
  rxcap1175_done3180:
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1173_curclass, "$!pos"
    lt $I11, 0, rx1173_fail3173
    nqp_rxmark rx1173_bstack, rxsubrule1176_pass3182, -1, 0
  rxsubrule1176_pass3182:
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1173_pos, $P11, rx1173_curclass, "$!pos"
    rx1173_cur."!cursor_pass"(rx1173_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1173_cur)
  rx1173_restart3172:
    repr_get_attr_obj rx1173_cstack, rx1173_cur, rx1173_curclass, "$!cstack"
  rx1173_fail3173:
    unless rx1173_bstack, rx1173_done3171
    pop $I19, rx1173_bstack
    if_null rx1173_cstack, rx1173_cstack_done3176
    unless rx1173_cstack, rx1173_cstack_done3176
    dec $I19
    set $P11, rx1173_cstack[$I19]
  rx1173_cstack_done3176:
    pop rx1173_rep, rx1173_bstack
    pop rx1173_pos, rx1173_bstack
    pop $I19, rx1173_bstack
    lt rx1173_pos, -1, rx1173_done3171
    lt rx1173_pos, 0, rx1173_fail3173
    eq $I19, 0, rx1173_fail3173
    nqp_islist $I20, rx1173_cstack
    unless $I20, rx1173_jump3174
    elements $I18, rx1173_bstack
    le $I18, 0, rx1173_cut3175
    dec $I18
    set $I18, rx1173_bstack[$I18]
  rx1173_cut3175:
    assign rx1173_cstack, $I18
  rx1173_jump3174:
    jump $I19
  rx1173_done3171:
    rx1173_cur."!cursor_fail"()
    .return (rx1173_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_194_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_curclass
    .local pmc rx1177_bstack
    .local pmc rx1177_cstack
    (rx1177_cur, rx1177_tgt, rx1177_pos, rx1177_curclass, rx1177_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1177_cur
    length rx1177_eos, rx1177_tgt
    eq $I19, 1, rx1177_restart3185
    gt rx1177_pos, rx1177_eos, rx1177_fail3186
    repr_get_attr_int $I11, self, rx1177_curclass, "$!from"
    ne $I11, -1, rxscan1178_done3192
    goto rxscan1178_scan3191
  rxscan1178_loop3190:
    inc rx1177_pos
    gt rx1177_pos, rx1177_eos, rx1177_fail3186
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!from", rx1177_pos
  rxscan1178_scan3191:
    nqp_rxmark rx1177_bstack, rxscan1178_loop3190, rx1177_pos, 0
  rxscan1178_done3192:
    nqp_rxmark rx1177_bstack, rxcap1179_fail3194, rx1177_pos, 0
    add $I11, rx1177_pos, 2
    gt $I11, rx1177_eos, rx1177_fail3186
    substr $S10, rx1177_tgt, rx1177_pos, 2
    ne $S10, ucs4:">=", rx1177_fail3186
    add rx1177_pos, 2
    nqp_rxpeek $I19, rx1177_bstack, rxcap1179_fail3194
    inc $I19
    set $I11, rx1177_bstack[$I19]
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1177_pos)
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "sym")
    goto rxcap1179_done3193
  rxcap1179_fail3194:
    goto rx1177_fail3186
  rxcap1179_done3193:
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1177_curclass, "$!pos"
    lt $I11, 0, rx1177_fail3186
    nqp_rxmark rx1177_bstack, rxsubrule1180_pass3195, -1, 0
  rxsubrule1180_pass3195:
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1177_pos, $P11, rx1177_curclass, "$!pos"
    rx1177_cur."!cursor_pass"(rx1177_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1177_cur)
  rx1177_restart3185:
    repr_get_attr_obj rx1177_cstack, rx1177_cur, rx1177_curclass, "$!cstack"
  rx1177_fail3186:
    unless rx1177_bstack, rx1177_done3184
    pop $I19, rx1177_bstack
    if_null rx1177_cstack, rx1177_cstack_done3189
    unless rx1177_cstack, rx1177_cstack_done3189
    dec $I19
    set $P11, rx1177_cstack[$I19]
  rx1177_cstack_done3189:
    pop rx1177_rep, rx1177_bstack
    pop rx1177_pos, rx1177_bstack
    pop $I19, rx1177_bstack
    lt rx1177_pos, -1, rx1177_done3184
    lt rx1177_pos, 0, rx1177_fail3186
    eq $I19, 0, rx1177_fail3186
    nqp_islist $I20, rx1177_cstack
    unless $I20, rx1177_jump3187
    elements $I18, rx1177_bstack
    le $I18, 0, rx1177_cut3188
    dec $I18
    set $I18, rx1177_bstack[$I18]
  rx1177_cut3188:
    assign rx1177_cstack, $I18
  rx1177_jump3187:
    jump $I19
  rx1177_done3184:
    rx1177_cur."!cursor_fail"()
    .return (rx1177_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_195_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_curclass
    .local pmc rx1181_bstack
    .local pmc rx1181_cstack
    (rx1181_cur, rx1181_tgt, rx1181_pos, rx1181_curclass, rx1181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1181_cur
    length rx1181_eos, rx1181_tgt
    eq $I19, 1, rx1181_restart3198
    gt rx1181_pos, rx1181_eos, rx1181_fail3199
    repr_get_attr_int $I11, self, rx1181_curclass, "$!from"
    ne $I11, -1, rxscan1182_done3205
    goto rxscan1182_scan3204
  rxscan1182_loop3203:
    inc rx1181_pos
    gt rx1181_pos, rx1181_eos, rx1181_fail3199
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!from", rx1181_pos
  rxscan1182_scan3204:
    nqp_rxmark rx1181_bstack, rxscan1182_loop3203, rx1181_pos, 0
  rxscan1182_done3205:
    nqp_rxmark rx1181_bstack, rxcap1183_fail3207, rx1181_pos, 0
    add $I11, rx1181_pos, 1
    gt $I11, rx1181_eos, rx1181_fail3199
    substr $S10, rx1181_tgt, rx1181_pos, 1
    ne $S10, ucs4:"<", rx1181_fail3199
    add rx1181_pos, 1
    nqp_rxpeek $I19, rx1181_bstack, rxcap1183_fail3207
    inc $I19
    set $I11, rx1181_bstack[$I19]
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1181_pos)
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "sym")
    goto rxcap1183_done3206
  rxcap1183_fail3207:
    goto rx1181_fail3199
  rxcap1183_done3206:
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1181_curclass, "$!pos"
    lt $I11, 0, rx1181_fail3199
    nqp_rxmark rx1181_bstack, rxsubrule1184_pass3208, -1, 0
  rxsubrule1184_pass3208:
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1181_pos, $P11, rx1181_curclass, "$!pos"
    rx1181_cur."!cursor_pass"(rx1181_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1181_cur)
  rx1181_restart3198:
    repr_get_attr_obj rx1181_cstack, rx1181_cur, rx1181_curclass, "$!cstack"
  rx1181_fail3199:
    unless rx1181_bstack, rx1181_done3197
    pop $I19, rx1181_bstack
    if_null rx1181_cstack, rx1181_cstack_done3202
    unless rx1181_cstack, rx1181_cstack_done3202
    dec $I19
    set $P11, rx1181_cstack[$I19]
  rx1181_cstack_done3202:
    pop rx1181_rep, rx1181_bstack
    pop rx1181_pos, rx1181_bstack
    pop $I19, rx1181_bstack
    lt rx1181_pos, -1, rx1181_done3197
    lt rx1181_pos, 0, rx1181_fail3199
    eq $I19, 0, rx1181_fail3199
    nqp_islist $I20, rx1181_cstack
    unless $I20, rx1181_jump3200
    elements $I18, rx1181_bstack
    le $I18, 0, rx1181_cut3201
    dec $I18
    set $I18, rx1181_bstack[$I18]
  rx1181_cut3201:
    assign rx1181_cstack, $I18
  rx1181_jump3200:
    jump $I19
  rx1181_done3197:
    rx1181_cur."!cursor_fail"()
    .return (rx1181_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_196_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1185_tgt
    .local int rx1185_pos
    .local int rx1185_off
    .local int rx1185_eos
    .local int rx1185_rep
    .local pmc rx1185_cur
    .local pmc rx1185_curclass
    .local pmc rx1185_bstack
    .local pmc rx1185_cstack
    (rx1185_cur, rx1185_tgt, rx1185_pos, rx1185_curclass, rx1185_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1185_cur
    length rx1185_eos, rx1185_tgt
    eq $I19, 1, rx1185_restart3211
    gt rx1185_pos, rx1185_eos, rx1185_fail3212
    repr_get_attr_int $I11, self, rx1185_curclass, "$!from"
    ne $I11, -1, rxscan1186_done3218
    goto rxscan1186_scan3217
  rxscan1186_loop3216:
    inc rx1185_pos
    gt rx1185_pos, rx1185_eos, rx1185_fail3212
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!from", rx1185_pos
  rxscan1186_scan3217:
    nqp_rxmark rx1185_bstack, rxscan1186_loop3216, rx1185_pos, 0
  rxscan1186_done3218:
    nqp_rxmark rx1185_bstack, rxcap1187_fail3220, rx1185_pos, 0
    add $I11, rx1185_pos, 1
    gt $I11, rx1185_eos, rx1185_fail3212
    substr $S10, rx1185_tgt, rx1185_pos, 1
    ne $S10, ucs4:">", rx1185_fail3212
    add rx1185_pos, 1
    nqp_rxpeek $I19, rx1185_bstack, rxcap1187_fail3220
    inc $I19
    set $I11, rx1185_bstack[$I19]
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1185_pos)
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "sym")
    goto rxcap1187_done3219
  rxcap1187_fail3220:
    goto rx1185_fail3212
  rxcap1187_done3219:
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1185_curclass, "$!pos"
    lt $I11, 0, rx1185_fail3212
    nqp_rxmark rx1185_bstack, rxsubrule1188_pass3221, -1, 0
  rxsubrule1188_pass3221:
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1185_pos, $P11, rx1185_curclass, "$!pos"
    rx1185_cur."!cursor_pass"(rx1185_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1185_cur)
  rx1185_restart3211:
    repr_get_attr_obj rx1185_cstack, rx1185_cur, rx1185_curclass, "$!cstack"
  rx1185_fail3212:
    unless rx1185_bstack, rx1185_done3210
    pop $I19, rx1185_bstack
    if_null rx1185_cstack, rx1185_cstack_done3215
    unless rx1185_cstack, rx1185_cstack_done3215
    dec $I19
    set $P11, rx1185_cstack[$I19]
  rx1185_cstack_done3215:
    pop rx1185_rep, rx1185_bstack
    pop rx1185_pos, rx1185_bstack
    pop $I19, rx1185_bstack
    lt rx1185_pos, -1, rx1185_done3210
    lt rx1185_pos, 0, rx1185_fail3212
    eq $I19, 0, rx1185_fail3212
    nqp_islist $I20, rx1185_cstack
    unless $I20, rx1185_jump3213
    elements $I18, rx1185_bstack
    le $I18, 0, rx1185_cut3214
    dec $I18
    set $I18, rx1185_bstack[$I18]
  rx1185_cut3214:
    assign rx1185_cstack, $I18
  rx1185_jump3213:
    jump $I19
  rx1185_done3210:
    rx1185_cur."!cursor_fail"()
    .return (rx1185_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_197_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1189_tgt
    .local int rx1189_pos
    .local int rx1189_off
    .local int rx1189_eos
    .local int rx1189_rep
    .local pmc rx1189_cur
    .local pmc rx1189_curclass
    .local pmc rx1189_bstack
    .local pmc rx1189_cstack
    (rx1189_cur, rx1189_tgt, rx1189_pos, rx1189_curclass, rx1189_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1189_cur
    length rx1189_eos, rx1189_tgt
    eq $I19, 1, rx1189_restart3224
    gt rx1189_pos, rx1189_eos, rx1189_fail3225
    repr_get_attr_int $I11, self, rx1189_curclass, "$!from"
    ne $I11, -1, rxscan1190_done3231
    goto rxscan1190_scan3230
  rxscan1190_loop3229:
    inc rx1189_pos
    gt rx1189_pos, rx1189_eos, rx1189_fail3225
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!from", rx1189_pos
  rxscan1190_scan3230:
    nqp_rxmark rx1189_bstack, rxscan1190_loop3229, rx1189_pos, 0
  rxscan1190_done3231:
    nqp_rxmark rx1189_bstack, rxcap1191_fail3233, rx1189_pos, 0
    add $I11, rx1189_pos, 2
    gt $I11, rx1189_eos, rx1189_fail3225
    substr $S10, rx1189_tgt, rx1189_pos, 2
    ne $S10, ucs4:"eq", rx1189_fail3225
    add rx1189_pos, 2
    nqp_rxpeek $I19, rx1189_bstack, rxcap1191_fail3233
    inc $I19
    set $I11, rx1189_bstack[$I19]
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1189_pos)
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "sym")
    goto rxcap1191_done3232
  rxcap1191_fail3233:
    goto rx1189_fail3225
  rxcap1191_done3232:
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1189_curclass, "$!pos"
    lt $I11, 0, rx1189_fail3225
    nqp_rxmark rx1189_bstack, rxsubrule1192_pass3234, -1, 0
  rxsubrule1192_pass3234:
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1189_pos, $P11, rx1189_curclass, "$!pos"
    rx1189_cur."!cursor_pass"(rx1189_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1189_cur)
  rx1189_restart3224:
    repr_get_attr_obj rx1189_cstack, rx1189_cur, rx1189_curclass, "$!cstack"
  rx1189_fail3225:
    unless rx1189_bstack, rx1189_done3223
    pop $I19, rx1189_bstack
    if_null rx1189_cstack, rx1189_cstack_done3228
    unless rx1189_cstack, rx1189_cstack_done3228
    dec $I19
    set $P11, rx1189_cstack[$I19]
  rx1189_cstack_done3228:
    pop rx1189_rep, rx1189_bstack
    pop rx1189_pos, rx1189_bstack
    pop $I19, rx1189_bstack
    lt rx1189_pos, -1, rx1189_done3223
    lt rx1189_pos, 0, rx1189_fail3225
    eq $I19, 0, rx1189_fail3225
    nqp_islist $I20, rx1189_cstack
    unless $I20, rx1189_jump3226
    elements $I18, rx1189_bstack
    le $I18, 0, rx1189_cut3227
    dec $I18
    set $I18, rx1189_bstack[$I18]
  rx1189_cut3227:
    assign rx1189_cstack, $I18
  rx1189_jump3226:
    jump $I19
  rx1189_done3223:
    rx1189_cur."!cursor_fail"()
    .return (rx1189_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_198_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1193_tgt
    .local int rx1193_pos
    .local int rx1193_off
    .local int rx1193_eos
    .local int rx1193_rep
    .local pmc rx1193_cur
    .local pmc rx1193_curclass
    .local pmc rx1193_bstack
    .local pmc rx1193_cstack
    (rx1193_cur, rx1193_tgt, rx1193_pos, rx1193_curclass, rx1193_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1193_cur
    length rx1193_eos, rx1193_tgt
    eq $I19, 1, rx1193_restart3237
    gt rx1193_pos, rx1193_eos, rx1193_fail3238
    repr_get_attr_int $I11, self, rx1193_curclass, "$!from"
    ne $I11, -1, rxscan1194_done3244
    goto rxscan1194_scan3243
  rxscan1194_loop3242:
    inc rx1193_pos
    gt rx1193_pos, rx1193_eos, rx1193_fail3238
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!from", rx1193_pos
  rxscan1194_scan3243:
    nqp_rxmark rx1193_bstack, rxscan1194_loop3242, rx1193_pos, 0
  rxscan1194_done3244:
    nqp_rxmark rx1193_bstack, rxcap1195_fail3246, rx1193_pos, 0
    add $I11, rx1193_pos, 2
    gt $I11, rx1193_eos, rx1193_fail3238
    substr $S10, rx1193_tgt, rx1193_pos, 2
    ne $S10, ucs4:"ne", rx1193_fail3238
    add rx1193_pos, 2
    nqp_rxpeek $I19, rx1193_bstack, rxcap1195_fail3246
    inc $I19
    set $I11, rx1193_bstack[$I19]
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1193_pos)
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "sym")
    goto rxcap1195_done3245
  rxcap1195_fail3246:
    goto rx1193_fail3238
  rxcap1195_done3245:
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1193_curclass, "$!pos"
    lt $I11, 0, rx1193_fail3238
    nqp_rxmark rx1193_bstack, rxsubrule1196_pass3247, -1, 0
  rxsubrule1196_pass3247:
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1193_pos, $P11, rx1193_curclass, "$!pos"
    rx1193_cur."!cursor_pass"(rx1193_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1193_cur)
  rx1193_restart3237:
    repr_get_attr_obj rx1193_cstack, rx1193_cur, rx1193_curclass, "$!cstack"
  rx1193_fail3238:
    unless rx1193_bstack, rx1193_done3236
    pop $I19, rx1193_bstack
    if_null rx1193_cstack, rx1193_cstack_done3241
    unless rx1193_cstack, rx1193_cstack_done3241
    dec $I19
    set $P11, rx1193_cstack[$I19]
  rx1193_cstack_done3241:
    pop rx1193_rep, rx1193_bstack
    pop rx1193_pos, rx1193_bstack
    pop $I19, rx1193_bstack
    lt rx1193_pos, -1, rx1193_done3236
    lt rx1193_pos, 0, rx1193_fail3238
    eq $I19, 0, rx1193_fail3238
    nqp_islist $I20, rx1193_cstack
    unless $I20, rx1193_jump3239
    elements $I18, rx1193_bstack
    le $I18, 0, rx1193_cut3240
    dec $I18
    set $I18, rx1193_bstack[$I18]
  rx1193_cut3240:
    assign rx1193_cstack, $I18
  rx1193_jump3239:
    jump $I19
  rx1193_done3236:
    rx1193_cur."!cursor_fail"()
    .return (rx1193_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_199_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1197_tgt
    .local int rx1197_pos
    .local int rx1197_off
    .local int rx1197_eos
    .local int rx1197_rep
    .local pmc rx1197_cur
    .local pmc rx1197_curclass
    .local pmc rx1197_bstack
    .local pmc rx1197_cstack
    (rx1197_cur, rx1197_tgt, rx1197_pos, rx1197_curclass, rx1197_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1197_cur
    length rx1197_eos, rx1197_tgt
    eq $I19, 1, rx1197_restart3250
    gt rx1197_pos, rx1197_eos, rx1197_fail3251
    repr_get_attr_int $I11, self, rx1197_curclass, "$!from"
    ne $I11, -1, rxscan1198_done3257
    goto rxscan1198_scan3256
  rxscan1198_loop3255:
    inc rx1197_pos
    gt rx1197_pos, rx1197_eos, rx1197_fail3251
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!from", rx1197_pos
  rxscan1198_scan3256:
    nqp_rxmark rx1197_bstack, rxscan1198_loop3255, rx1197_pos, 0
  rxscan1198_done3257:
    nqp_rxmark rx1197_bstack, rxcap1199_fail3259, rx1197_pos, 0
    add $I11, rx1197_pos, 2
    gt $I11, rx1197_eos, rx1197_fail3251
    substr $S10, rx1197_tgt, rx1197_pos, 2
    ne $S10, ucs4:"le", rx1197_fail3251
    add rx1197_pos, 2
    nqp_rxpeek $I19, rx1197_bstack, rxcap1199_fail3259
    inc $I19
    set $I11, rx1197_bstack[$I19]
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1197_pos)
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "sym")
    goto rxcap1199_done3258
  rxcap1199_fail3259:
    goto rx1197_fail3251
  rxcap1199_done3258:
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1197_curclass, "$!pos"
    lt $I11, 0, rx1197_fail3251
    nqp_rxmark rx1197_bstack, rxsubrule1200_pass3260, -1, 0
  rxsubrule1200_pass3260:
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1197_pos, $P11, rx1197_curclass, "$!pos"
    rx1197_cur."!cursor_pass"(rx1197_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1197_cur)
  rx1197_restart3250:
    repr_get_attr_obj rx1197_cstack, rx1197_cur, rx1197_curclass, "$!cstack"
  rx1197_fail3251:
    unless rx1197_bstack, rx1197_done3249
    pop $I19, rx1197_bstack
    if_null rx1197_cstack, rx1197_cstack_done3254
    unless rx1197_cstack, rx1197_cstack_done3254
    dec $I19
    set $P11, rx1197_cstack[$I19]
  rx1197_cstack_done3254:
    pop rx1197_rep, rx1197_bstack
    pop rx1197_pos, rx1197_bstack
    pop $I19, rx1197_bstack
    lt rx1197_pos, -1, rx1197_done3249
    lt rx1197_pos, 0, rx1197_fail3251
    eq $I19, 0, rx1197_fail3251
    nqp_islist $I20, rx1197_cstack
    unless $I20, rx1197_jump3252
    elements $I18, rx1197_bstack
    le $I18, 0, rx1197_cut3253
    dec $I18
    set $I18, rx1197_bstack[$I18]
  rx1197_cut3253:
    assign rx1197_cstack, $I18
  rx1197_jump3252:
    jump $I19
  rx1197_done3249:
    rx1197_cur."!cursor_fail"()
    .return (rx1197_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_200_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_curclass
    .local pmc rx1201_bstack
    .local pmc rx1201_cstack
    (rx1201_cur, rx1201_tgt, rx1201_pos, rx1201_curclass, rx1201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1201_cur
    length rx1201_eos, rx1201_tgt
    eq $I19, 1, rx1201_restart3263
    gt rx1201_pos, rx1201_eos, rx1201_fail3264
    repr_get_attr_int $I11, self, rx1201_curclass, "$!from"
    ne $I11, -1, rxscan1202_done3270
    goto rxscan1202_scan3269
  rxscan1202_loop3268:
    inc rx1201_pos
    gt rx1201_pos, rx1201_eos, rx1201_fail3264
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!from", rx1201_pos
  rxscan1202_scan3269:
    nqp_rxmark rx1201_bstack, rxscan1202_loop3268, rx1201_pos, 0
  rxscan1202_done3270:
    nqp_rxmark rx1201_bstack, rxcap1203_fail3272, rx1201_pos, 0
    add $I11, rx1201_pos, 2
    gt $I11, rx1201_eos, rx1201_fail3264
    substr $S10, rx1201_tgt, rx1201_pos, 2
    ne $S10, ucs4:"ge", rx1201_fail3264
    add rx1201_pos, 2
    nqp_rxpeek $I19, rx1201_bstack, rxcap1203_fail3272
    inc $I19
    set $I11, rx1201_bstack[$I19]
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1201_pos)
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "sym")
    goto rxcap1203_done3271
  rxcap1203_fail3272:
    goto rx1201_fail3264
  rxcap1203_done3271:
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1201_curclass, "$!pos"
    lt $I11, 0, rx1201_fail3264
    nqp_rxmark rx1201_bstack, rxsubrule1204_pass3273, -1, 0
  rxsubrule1204_pass3273:
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1201_pos, $P11, rx1201_curclass, "$!pos"
    rx1201_cur."!cursor_pass"(rx1201_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1201_cur)
  rx1201_restart3263:
    repr_get_attr_obj rx1201_cstack, rx1201_cur, rx1201_curclass, "$!cstack"
  rx1201_fail3264:
    unless rx1201_bstack, rx1201_done3262
    pop $I19, rx1201_bstack
    if_null rx1201_cstack, rx1201_cstack_done3267
    unless rx1201_cstack, rx1201_cstack_done3267
    dec $I19
    set $P11, rx1201_cstack[$I19]
  rx1201_cstack_done3267:
    pop rx1201_rep, rx1201_bstack
    pop rx1201_pos, rx1201_bstack
    pop $I19, rx1201_bstack
    lt rx1201_pos, -1, rx1201_done3262
    lt rx1201_pos, 0, rx1201_fail3264
    eq $I19, 0, rx1201_fail3264
    nqp_islist $I20, rx1201_cstack
    unless $I20, rx1201_jump3265
    elements $I18, rx1201_bstack
    le $I18, 0, rx1201_cut3266
    dec $I18
    set $I18, rx1201_bstack[$I18]
  rx1201_cut3266:
    assign rx1201_cstack, $I18
  rx1201_jump3265:
    jump $I19
  rx1201_done3262:
    rx1201_cur."!cursor_fail"()
    .return (rx1201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_201_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1205_tgt
    .local int rx1205_pos
    .local int rx1205_off
    .local int rx1205_eos
    .local int rx1205_rep
    .local pmc rx1205_cur
    .local pmc rx1205_curclass
    .local pmc rx1205_bstack
    .local pmc rx1205_cstack
    (rx1205_cur, rx1205_tgt, rx1205_pos, rx1205_curclass, rx1205_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1205_cur
    length rx1205_eos, rx1205_tgt
    eq $I19, 1, rx1205_restart3276
    gt rx1205_pos, rx1205_eos, rx1205_fail3277
    repr_get_attr_int $I11, self, rx1205_curclass, "$!from"
    ne $I11, -1, rxscan1206_done3283
    goto rxscan1206_scan3282
  rxscan1206_loop3281:
    inc rx1205_pos
    gt rx1205_pos, rx1205_eos, rx1205_fail3277
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!from", rx1205_pos
  rxscan1206_scan3282:
    nqp_rxmark rx1205_bstack, rxscan1206_loop3281, rx1205_pos, 0
  rxscan1206_done3283:
    nqp_rxmark rx1205_bstack, rxcap1207_fail3285, rx1205_pos, 0
    add $I11, rx1205_pos, 2
    gt $I11, rx1205_eos, rx1205_fail3277
    substr $S10, rx1205_tgt, rx1205_pos, 2
    ne $S10, ucs4:"lt", rx1205_fail3277
    add rx1205_pos, 2
    nqp_rxpeek $I19, rx1205_bstack, rxcap1207_fail3285
    inc $I19
    set $I11, rx1205_bstack[$I19]
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1205_pos)
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "sym")
    goto rxcap1207_done3284
  rxcap1207_fail3285:
    goto rx1205_fail3277
  rxcap1207_done3284:
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1205_curclass, "$!pos"
    lt $I11, 0, rx1205_fail3277
    nqp_rxmark rx1205_bstack, rxsubrule1208_pass3286, -1, 0
  rxsubrule1208_pass3286:
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1205_pos, $P11, rx1205_curclass, "$!pos"
    rx1205_cur."!cursor_pass"(rx1205_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1205_cur)
  rx1205_restart3276:
    repr_get_attr_obj rx1205_cstack, rx1205_cur, rx1205_curclass, "$!cstack"
  rx1205_fail3277:
    unless rx1205_bstack, rx1205_done3275
    pop $I19, rx1205_bstack
    if_null rx1205_cstack, rx1205_cstack_done3280
    unless rx1205_cstack, rx1205_cstack_done3280
    dec $I19
    set $P11, rx1205_cstack[$I19]
  rx1205_cstack_done3280:
    pop rx1205_rep, rx1205_bstack
    pop rx1205_pos, rx1205_bstack
    pop $I19, rx1205_bstack
    lt rx1205_pos, -1, rx1205_done3275
    lt rx1205_pos, 0, rx1205_fail3277
    eq $I19, 0, rx1205_fail3277
    nqp_islist $I20, rx1205_cstack
    unless $I20, rx1205_jump3278
    elements $I18, rx1205_bstack
    le $I18, 0, rx1205_cut3279
    dec $I18
    set $I18, rx1205_bstack[$I18]
  rx1205_cut3279:
    assign rx1205_cstack, $I18
  rx1205_jump3278:
    jump $I19
  rx1205_done3275:
    rx1205_cur."!cursor_fail"()
    .return (rx1205_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_202_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1209_tgt
    .local int rx1209_pos
    .local int rx1209_off
    .local int rx1209_eos
    .local int rx1209_rep
    .local pmc rx1209_cur
    .local pmc rx1209_curclass
    .local pmc rx1209_bstack
    .local pmc rx1209_cstack
    (rx1209_cur, rx1209_tgt, rx1209_pos, rx1209_curclass, rx1209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1209_cur
    length rx1209_eos, rx1209_tgt
    eq $I19, 1, rx1209_restart3289
    gt rx1209_pos, rx1209_eos, rx1209_fail3290
    repr_get_attr_int $I11, self, rx1209_curclass, "$!from"
    ne $I11, -1, rxscan1210_done3296
    goto rxscan1210_scan3295
  rxscan1210_loop3294:
    inc rx1209_pos
    gt rx1209_pos, rx1209_eos, rx1209_fail3290
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!from", rx1209_pos
  rxscan1210_scan3295:
    nqp_rxmark rx1209_bstack, rxscan1210_loop3294, rx1209_pos, 0
  rxscan1210_done3296:
    nqp_rxmark rx1209_bstack, rxcap1211_fail3298, rx1209_pos, 0
    add $I11, rx1209_pos, 2
    gt $I11, rx1209_eos, rx1209_fail3290
    substr $S10, rx1209_tgt, rx1209_pos, 2
    ne $S10, ucs4:"gt", rx1209_fail3290
    add rx1209_pos, 2
    nqp_rxpeek $I19, rx1209_bstack, rxcap1211_fail3298
    inc $I19
    set $I11, rx1209_bstack[$I19]
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1209_pos)
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "sym")
    goto rxcap1211_done3297
  rxcap1211_fail3298:
    goto rx1209_fail3290
  rxcap1211_done3297:
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1209_curclass, "$!pos"
    lt $I11, 0, rx1209_fail3290
    nqp_rxmark rx1209_bstack, rxsubrule1212_pass3299, -1, 0
  rxsubrule1212_pass3299:
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1209_pos, $P11, rx1209_curclass, "$!pos"
    rx1209_cur."!cursor_pass"(rx1209_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1209_cur)
  rx1209_restart3289:
    repr_get_attr_obj rx1209_cstack, rx1209_cur, rx1209_curclass, "$!cstack"
  rx1209_fail3290:
    unless rx1209_bstack, rx1209_done3288
    pop $I19, rx1209_bstack
    if_null rx1209_cstack, rx1209_cstack_done3293
    unless rx1209_cstack, rx1209_cstack_done3293
    dec $I19
    set $P11, rx1209_cstack[$I19]
  rx1209_cstack_done3293:
    pop rx1209_rep, rx1209_bstack
    pop rx1209_pos, rx1209_bstack
    pop $I19, rx1209_bstack
    lt rx1209_pos, -1, rx1209_done3288
    lt rx1209_pos, 0, rx1209_fail3290
    eq $I19, 0, rx1209_fail3290
    nqp_islist $I20, rx1209_cstack
    unless $I20, rx1209_jump3291
    elements $I18, rx1209_bstack
    le $I18, 0, rx1209_cut3292
    dec $I18
    set $I18, rx1209_bstack[$I18]
  rx1209_cut3292:
    assign rx1209_cstack, $I18
  rx1209_jump3291:
    jump $I19
  rx1209_done3288:
    rx1209_cur."!cursor_fail"()
    .return (rx1209_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_203_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1213_tgt
    .local int rx1213_pos
    .local int rx1213_off
    .local int rx1213_eos
    .local int rx1213_rep
    .local pmc rx1213_cur
    .local pmc rx1213_curclass
    .local pmc rx1213_bstack
    .local pmc rx1213_cstack
    (rx1213_cur, rx1213_tgt, rx1213_pos, rx1213_curclass, rx1213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1213_cur
    length rx1213_eos, rx1213_tgt
    eq $I19, 1, rx1213_restart3302
    gt rx1213_pos, rx1213_eos, rx1213_fail3303
    repr_get_attr_int $I11, self, rx1213_curclass, "$!from"
    ne $I11, -1, rxscan1214_done3309
    goto rxscan1214_scan3308
  rxscan1214_loop3307:
    inc rx1213_pos
    gt rx1213_pos, rx1213_eos, rx1213_fail3303
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!from", rx1213_pos
  rxscan1214_scan3308:
    nqp_rxmark rx1213_bstack, rxscan1214_loop3307, rx1213_pos, 0
  rxscan1214_done3309:
    nqp_rxmark rx1213_bstack, rxcap1215_fail3311, rx1213_pos, 0
    add $I11, rx1213_pos, 3
    gt $I11, rx1213_eos, rx1213_fail3303
    substr $S10, rx1213_tgt, rx1213_pos, 3
    ne $S10, ucs4:"=:=", rx1213_fail3303
    add rx1213_pos, 3
    nqp_rxpeek $I19, rx1213_bstack, rxcap1215_fail3311
    inc $I19
    set $I11, rx1213_bstack[$I19]
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1213_pos)
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "sym")
    goto rxcap1215_done3310
  rxcap1215_fail3311:
    goto rx1213_fail3303
  rxcap1215_done3310:
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1213_curclass, "$!pos"
    lt $I11, 0, rx1213_fail3303
    nqp_rxmark rx1213_bstack, rxsubrule1216_pass3312, -1, 0
  rxsubrule1216_pass3312:
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1213_pos, $P11, rx1213_curclass, "$!pos"
    rx1213_cur."!cursor_pass"(rx1213_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1213_cur)
  rx1213_restart3302:
    repr_get_attr_obj rx1213_cstack, rx1213_cur, rx1213_curclass, "$!cstack"
  rx1213_fail3303:
    unless rx1213_bstack, rx1213_done3301
    pop $I19, rx1213_bstack
    if_null rx1213_cstack, rx1213_cstack_done3306
    unless rx1213_cstack, rx1213_cstack_done3306
    dec $I19
    set $P11, rx1213_cstack[$I19]
  rx1213_cstack_done3306:
    pop rx1213_rep, rx1213_bstack
    pop rx1213_pos, rx1213_bstack
    pop $I19, rx1213_bstack
    lt rx1213_pos, -1, rx1213_done3301
    lt rx1213_pos, 0, rx1213_fail3303
    eq $I19, 0, rx1213_fail3303
    nqp_islist $I20, rx1213_cstack
    unless $I20, rx1213_jump3304
    elements $I18, rx1213_bstack
    le $I18, 0, rx1213_cut3305
    dec $I18
    set $I18, rx1213_bstack[$I18]
  rx1213_cut3305:
    assign rx1213_cstack, $I18
  rx1213_jump3304:
    jump $I19
  rx1213_done3301:
    rx1213_cur."!cursor_fail"()
    .return (rx1213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_204_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1217_tgt
    .local int rx1217_pos
    .local int rx1217_off
    .local int rx1217_eos
    .local int rx1217_rep
    .local pmc rx1217_cur
    .local pmc rx1217_curclass
    .local pmc rx1217_bstack
    .local pmc rx1217_cstack
    (rx1217_cur, rx1217_tgt, rx1217_pos, rx1217_curclass, rx1217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1217_cur
    length rx1217_eos, rx1217_tgt
    eq $I19, 1, rx1217_restart3315
    gt rx1217_pos, rx1217_eos, rx1217_fail3316
    repr_get_attr_int $I11, self, rx1217_curclass, "$!from"
    ne $I11, -1, rxscan1218_done3322
    goto rxscan1218_scan3321
  rxscan1218_loop3320:
    inc rx1217_pos
    gt rx1217_pos, rx1217_eos, rx1217_fail3316
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!from", rx1217_pos
  rxscan1218_scan3321:
    nqp_rxmark rx1217_bstack, rxscan1218_loop3320, rx1217_pos, 0
  rxscan1218_done3322:
    nqp_rxmark rx1217_bstack, rxcap1219_fail3324, rx1217_pos, 0
    add $I11, rx1217_pos, 2
    gt $I11, rx1217_eos, rx1217_fail3316
    substr $S10, rx1217_tgt, rx1217_pos, 2
    ne $S10, ucs4:"~~", rx1217_fail3316
    add rx1217_pos, 2
    nqp_rxpeek $I19, rx1217_bstack, rxcap1219_fail3324
    inc $I19
    set $I11, rx1217_bstack[$I19]
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1217_pos)
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "sym")
    goto rxcap1219_done3323
  rxcap1219_fail3324:
    goto rx1217_fail3316
  rxcap1219_done3323:
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1217_curclass, "$!pos"
    lt $I11, 0, rx1217_fail3316
    nqp_rxmark rx1217_bstack, rxsubrule1220_pass3325, -1, 0
  rxsubrule1220_pass3325:
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1217_pos, $P11, rx1217_curclass, "$!pos"
    rx1217_cur."!cursor_pass"(rx1217_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1217_cur)
  rx1217_restart3315:
    repr_get_attr_obj rx1217_cstack, rx1217_cur, rx1217_curclass, "$!cstack"
  rx1217_fail3316:
    unless rx1217_bstack, rx1217_done3314
    pop $I19, rx1217_bstack
    if_null rx1217_cstack, rx1217_cstack_done3319
    unless rx1217_cstack, rx1217_cstack_done3319
    dec $I19
    set $P11, rx1217_cstack[$I19]
  rx1217_cstack_done3319:
    pop rx1217_rep, rx1217_bstack
    pop rx1217_pos, rx1217_bstack
    pop $I19, rx1217_bstack
    lt rx1217_pos, -1, rx1217_done3314
    lt rx1217_pos, 0, rx1217_fail3316
    eq $I19, 0, rx1217_fail3316
    nqp_islist $I20, rx1217_cstack
    unless $I20, rx1217_jump3317
    elements $I18, rx1217_bstack
    le $I18, 0, rx1217_cut3318
    dec $I18
    set $I18, rx1217_bstack[$I18]
  rx1217_cut3318:
    assign rx1217_cstack, $I18
  rx1217_jump3317:
    jump $I19
  rx1217_done3314:
    rx1217_cur."!cursor_fail"()
    .return (rx1217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_205_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3328
    gt rx1221_pos, rx1221_eos, rx1221_fail3329
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3335
    goto rxscan1222_scan3334
  rxscan1222_loop3333:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3329
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3334:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3333, rx1221_pos, 0
  rxscan1222_done3335:
    nqp_rxmark rx1221_bstack, rxcap1223_fail3337, rx1221_pos, 0
    add $I11, rx1221_pos, 2
    gt $I11, rx1221_eos, rx1221_fail3329
    substr $S10, rx1221_tgt, rx1221_pos, 2
    ne $S10, ucs4:"&&", rx1221_fail3329
    add rx1221_pos, 2
    nqp_rxpeek $I19, rx1221_bstack, rxcap1223_fail3337
    inc $I19
    set $I11, rx1221_bstack[$I19]
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1221_pos)
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "sym")
    goto rxcap1223_done3336
  rxcap1223_fail3337:
    goto rx1221_fail3329
  rxcap1223_done3336:
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3329
    nqp_rxmark rx1221_bstack, rxsubrule1224_pass3338, -1, 0
  rxsubrule1224_pass3338:
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1221_pos, $P11, rx1221_curclass, "$!pos"
    rx1221_cur."!cursor_pass"(rx1221_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3328:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3329:
    unless rx1221_bstack, rx1221_done3327
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3332
    unless rx1221_cstack, rx1221_cstack_done3332
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3332:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3327
    lt rx1221_pos, 0, rx1221_fail3329
    eq $I19, 0, rx1221_fail3329
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3330
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3331
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3331:
    assign rx1221_cstack, $I18
  rx1221_jump3330:
    jump $I19
  rx1221_done3327:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_206_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1225_tgt
    .local int rx1225_pos
    .local int rx1225_off
    .local int rx1225_eos
    .local int rx1225_rep
    .local pmc rx1225_cur
    .local pmc rx1225_curclass
    .local pmc rx1225_bstack
    .local pmc rx1225_cstack
    (rx1225_cur, rx1225_tgt, rx1225_pos, rx1225_curclass, rx1225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1225_cur
    length rx1225_eos, rx1225_tgt
    eq $I19, 1, rx1225_restart3341
    gt rx1225_pos, rx1225_eos, rx1225_fail3342
    repr_get_attr_int $I11, self, rx1225_curclass, "$!from"
    ne $I11, -1, rxscan1226_done3348
    goto rxscan1226_scan3347
  rxscan1226_loop3346:
    inc rx1225_pos
    gt rx1225_pos, rx1225_eos, rx1225_fail3342
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!from", rx1225_pos
  rxscan1226_scan3347:
    nqp_rxmark rx1225_bstack, rxscan1226_loop3346, rx1225_pos, 0
  rxscan1226_done3348:
    nqp_rxmark rx1225_bstack, rxcap1227_fail3350, rx1225_pos, 0
    add $I11, rx1225_pos, 2
    gt $I11, rx1225_eos, rx1225_fail3342
    substr $S10, rx1225_tgt, rx1225_pos, 2
    ne $S10, ucs4:"||", rx1225_fail3342
    add rx1225_pos, 2
    nqp_rxpeek $I19, rx1225_bstack, rxcap1227_fail3350
    inc $I19
    set $I11, rx1225_bstack[$I19]
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1225_pos)
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "sym")
    goto rxcap1227_done3349
  rxcap1227_fail3350:
    goto rx1225_fail3342
  rxcap1227_done3349:
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1225_curclass, "$!pos"
    lt $I11, 0, rx1225_fail3342
    nqp_rxmark rx1225_bstack, rxsubrule1228_pass3351, -1, 0
  rxsubrule1228_pass3351:
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1225_pos, $P11, rx1225_curclass, "$!pos"
    rx1225_cur."!cursor_pass"(rx1225_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1225_cur)
  rx1225_restart3341:
    repr_get_attr_obj rx1225_cstack, rx1225_cur, rx1225_curclass, "$!cstack"
  rx1225_fail3342:
    unless rx1225_bstack, rx1225_done3340
    pop $I19, rx1225_bstack
    if_null rx1225_cstack, rx1225_cstack_done3345
    unless rx1225_cstack, rx1225_cstack_done3345
    dec $I19
    set $P11, rx1225_cstack[$I19]
  rx1225_cstack_done3345:
    pop rx1225_rep, rx1225_bstack
    pop rx1225_pos, rx1225_bstack
    pop $I19, rx1225_bstack
    lt rx1225_pos, -1, rx1225_done3340
    lt rx1225_pos, 0, rx1225_fail3342
    eq $I19, 0, rx1225_fail3342
    nqp_islist $I20, rx1225_cstack
    unless $I20, rx1225_jump3343
    elements $I18, rx1225_bstack
    le $I18, 0, rx1225_cut3344
    dec $I18
    set $I18, rx1225_bstack[$I18]
  rx1225_cut3344:
    assign rx1225_cstack, $I18
  rx1225_jump3343:
    jump $I19
  rx1225_done3340:
    rx1225_cur."!cursor_fail"()
    .return (rx1225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_207_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1229_tgt
    .local int rx1229_pos
    .local int rx1229_off
    .local int rx1229_eos
    .local int rx1229_rep
    .local pmc rx1229_cur
    .local pmc rx1229_curclass
    .local pmc rx1229_bstack
    .local pmc rx1229_cstack
    (rx1229_cur, rx1229_tgt, rx1229_pos, rx1229_curclass, rx1229_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1229_cur
    length rx1229_eos, rx1229_tgt
    eq $I19, 1, rx1229_restart3354
    gt rx1229_pos, rx1229_eos, rx1229_fail3355
    repr_get_attr_int $I11, self, rx1229_curclass, "$!from"
    ne $I11, -1, rxscan1230_done3361
    goto rxscan1230_scan3360
  rxscan1230_loop3359:
    inc rx1229_pos
    gt rx1229_pos, rx1229_eos, rx1229_fail3355
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!from", rx1229_pos
  rxscan1230_scan3360:
    nqp_rxmark rx1229_bstack, rxscan1230_loop3359, rx1229_pos, 0
  rxscan1230_done3361:
    nqp_rxmark rx1229_bstack, rxcap1231_fail3363, rx1229_pos, 0
    add $I11, rx1229_pos, 2
    gt $I11, rx1229_eos, rx1229_fail3355
    substr $S10, rx1229_tgt, rx1229_pos, 2
    ne $S10, ucs4:"//", rx1229_fail3355
    add rx1229_pos, 2
    nqp_rxpeek $I19, rx1229_bstack, rxcap1231_fail3363
    inc $I19
    set $I11, rx1229_bstack[$I19]
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1229_pos)
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "sym")
    goto rxcap1231_done3362
  rxcap1231_fail3363:
    goto rx1229_fail3355
  rxcap1231_done3362:
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1229_curclass, "$!pos"
    lt $I11, 0, rx1229_fail3355
    nqp_rxmark rx1229_bstack, rxsubrule1232_pass3364, -1, 0
  rxsubrule1232_pass3364:
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1229_pos, $P11, rx1229_curclass, "$!pos"
    rx1229_cur."!cursor_pass"(rx1229_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1229_cur)
  rx1229_restart3354:
    repr_get_attr_obj rx1229_cstack, rx1229_cur, rx1229_curclass, "$!cstack"
  rx1229_fail3355:
    unless rx1229_bstack, rx1229_done3353
    pop $I19, rx1229_bstack
    if_null rx1229_cstack, rx1229_cstack_done3358
    unless rx1229_cstack, rx1229_cstack_done3358
    dec $I19
    set $P11, rx1229_cstack[$I19]
  rx1229_cstack_done3358:
    pop rx1229_rep, rx1229_bstack
    pop rx1229_pos, rx1229_bstack
    pop $I19, rx1229_bstack
    lt rx1229_pos, -1, rx1229_done3353
    lt rx1229_pos, 0, rx1229_fail3355
    eq $I19, 0, rx1229_fail3355
    nqp_islist $I20, rx1229_cstack
    unless $I20, rx1229_jump3356
    elements $I18, rx1229_bstack
    le $I18, 0, rx1229_cut3357
    dec $I18
    set $I18, rx1229_bstack[$I18]
  rx1229_cut3357:
    assign rx1229_cstack, $I18
  rx1229_jump3356:
    jump $I19
  rx1229_done3353:
    rx1229_cur."!cursor_fail"()
    .return (rx1229_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_208_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1356
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1233_tgt
    .local int rx1233_pos
    .local int rx1233_off
    .local int rx1233_eos
    .local int rx1233_rep
    .local pmc rx1233_cur
    .local pmc rx1233_curclass
    .local pmc rx1233_bstack
    .local pmc rx1233_cstack
    (rx1233_cur, rx1233_tgt, rx1233_pos, rx1233_curclass, rx1233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1233_cur
    length rx1233_eos, rx1233_tgt
    eq $I19, 1, rx1233_restart3367
    gt rx1233_pos, rx1233_eos, rx1233_fail3368
    repr_get_attr_int $I11, self, rx1233_curclass, "$!from"
    ne $I11, -1, rxscan1234_done3374
    goto rxscan1234_scan3373
  rxscan1234_loop3372:
    inc rx1233_pos
    gt rx1233_pos, rx1233_eos, rx1233_fail3368
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!from", rx1233_pos
  rxscan1234_scan3373:
    nqp_rxmark rx1233_bstack, rxscan1234_loop3372, rx1233_pos, 0
  rxscan1234_done3374:
    add $I11, rx1233_pos, 2
    gt $I11, rx1233_eos, rx1233_fail3368
    substr $S10, rx1233_tgt, rx1233_pos, 2
    ne $S10, ucs4:"??", rx1233_fail3368
    add rx1233_pos, 2
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1233_curclass, "$!pos"
    lt $I11, 0, rx1233_fail3368
    repr_get_attr_int rx1233_pos, $P11, rx1233_curclass, "$!pos"
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1233_curclass, "$!pos"
    lt $I11, 0, rx1233_fail3368
    nqp_rxmark rx1233_bstack, rxsubrule1236_pass3376, -1, 0
  rxsubrule1236_pass3376:
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1233_pos, $P11, rx1233_curclass, "$!pos"
    add $I11, rx1233_pos, 2
    gt $I11, rx1233_eos, rx1233_fail3368
    substr $S10, rx1233_tgt, rx1233_pos, 2
    ne $S10, ucs4:"!!", rx1233_fail3368
    add rx1233_pos, 2
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1233_curclass, "$!pos"
    lt $I11, 0, rx1233_fail3368
    nqp_rxmark rx1233_bstack, rxsubrule1237_pass3377, -1, 0
  rxsubrule1237_pass3377:
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1233_pos, $P11, rx1233_curclass, "$!pos"
    rx1233_cur."!cursor_pass"(rx1233_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1233_cur)
  rx1233_restart3367:
    repr_get_attr_obj rx1233_cstack, rx1233_cur, rx1233_curclass, "$!cstack"
  rx1233_fail3368:
    unless rx1233_bstack, rx1233_done3366
    pop $I19, rx1233_bstack
    if_null rx1233_cstack, rx1233_cstack_done3371
    unless rx1233_cstack, rx1233_cstack_done3371
    dec $I19
    set $P11, rx1233_cstack[$I19]
  rx1233_cstack_done3371:
    pop rx1233_rep, rx1233_bstack
    pop rx1233_pos, rx1233_bstack
    pop $I19, rx1233_bstack
    lt rx1233_pos, -1, rx1233_done3366
    lt rx1233_pos, 0, rx1233_fail3368
    eq $I19, 0, rx1233_fail3368
    nqp_islist $I20, rx1233_cstack
    unless $I20, rx1233_jump3369
    elements $I18, rx1233_bstack
    le $I18, 0, rx1233_cut3370
    dec $I18
    set $I18, rx1233_bstack[$I18]
  rx1233_cut3370:
    assign rx1233_cstack, $I18
  rx1233_jump3369:
    jump $I19
  rx1233_done3366:
    rx1233_cur."!cursor_fail"()
    .return (rx1233_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_209_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1238_tgt
    .local int rx1238_pos
    .local int rx1238_off
    .local int rx1238_eos
    .local int rx1238_rep
    .local pmc rx1238_cur
    .local pmc rx1238_curclass
    .local pmc rx1238_bstack
    .local pmc rx1238_cstack
    (rx1238_cur, rx1238_tgt, rx1238_pos, rx1238_curclass, rx1238_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1238_cur
    length rx1238_eos, rx1238_tgt
    eq $I19, 1, rx1238_restart3380
    gt rx1238_pos, rx1238_eos, rx1238_fail3381
    repr_get_attr_int $I11, self, rx1238_curclass, "$!from"
    ne $I11, -1, rxscan1239_done3387
    goto rxscan1239_scan3386
  rxscan1239_loop3385:
    inc rx1238_pos
    gt rx1238_pos, rx1238_eos, rx1238_fail3381
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!from", rx1238_pos
  rxscan1239_scan3386:
    nqp_rxmark rx1238_bstack, rxscan1239_loop3385, rx1238_pos, 0
  rxscan1239_done3387:
    nqp_rxmark rx1238_bstack, rxcap1240_fail3389, rx1238_pos, 0
    add $I11, rx1238_pos, 1
    gt $I11, rx1238_eos, rx1238_fail3381
    substr $S10, rx1238_tgt, rx1238_pos, 1
    ne $S10, ucs4:"=", rx1238_fail3381
    add rx1238_pos, 1
    nqp_rxpeek $I19, rx1238_bstack, rxcap1240_fail3389
    inc $I19
    set $I11, rx1238_bstack[$I19]
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1238_pos)
    rx1238_cstack = rx1238_cur."!cursor_capture"($P11, "sym")
    goto rxcap1240_done3388
  rxcap1240_fail3389:
    goto rx1238_fail3381
  rxcap1240_done3388:
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    lt $I11, 0, rx1238_fail3381
    repr_get_attr_int rx1238_pos, $P11, rx1238_curclass, "$!pos"
    rx1238_cur."!cursor_pass"(rx1238_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1238_cur)
  rx1238_restart3380:
    repr_get_attr_obj rx1238_cstack, rx1238_cur, rx1238_curclass, "$!cstack"
  rx1238_fail3381:
    unless rx1238_bstack, rx1238_done3379
    pop $I19, rx1238_bstack
    if_null rx1238_cstack, rx1238_cstack_done3384
    unless rx1238_cstack, rx1238_cstack_done3384
    dec $I19
    set $P11, rx1238_cstack[$I19]
  rx1238_cstack_done3384:
    pop rx1238_rep, rx1238_bstack
    pop rx1238_pos, rx1238_bstack
    pop $I19, rx1238_bstack
    lt rx1238_pos, -1, rx1238_done3379
    lt rx1238_pos, 0, rx1238_fail3381
    eq $I19, 0, rx1238_fail3381
    nqp_islist $I20, rx1238_cstack
    unless $I20, rx1238_jump3382
    elements $I18, rx1238_bstack
    le $I18, 0, rx1238_cut3383
    dec $I18
    set $I18, rx1238_bstack[$I18]
  rx1238_cut3383:
    assign rx1238_cstack, $I18
  rx1238_jump3382:
    jump $I19
  rx1238_done3379:
    rx1238_cur."!cursor_fail"()
    .return (rx1238_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_210_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1367
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_curclass
    .local pmc rx1242_bstack
    .local pmc rx1242_cstack
    (rx1242_cur, rx1242_tgt, rx1242_pos, rx1242_curclass, rx1242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1242_cur
    length rx1242_eos, rx1242_tgt
    eq $I19, 1, rx1242_restart3393
    gt rx1242_pos, rx1242_eos, rx1242_fail3394
    repr_get_attr_int $I11, self, rx1242_curclass, "$!from"
    ne $I11, -1, rxscan1243_done3400
    goto rxscan1243_scan3399
  rxscan1243_loop3398:
    inc rx1242_pos
    gt rx1242_pos, rx1242_eos, rx1242_fail3394
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!from", rx1242_pos
  rxscan1243_scan3399:
    nqp_rxmark rx1242_bstack, rxscan1243_loop3398, rx1242_pos, 0
  rxscan1243_done3400:
    nqp_rxmark rx1242_bstack, rxcap1244_fail3402, rx1242_pos, 0
    add $I11, rx1242_pos, 2
    gt $I11, rx1242_eos, rx1242_fail3394
    substr $S10, rx1242_tgt, rx1242_pos, 2
    ne $S10, ucs4:":=", rx1242_fail3394
    add rx1242_pos, 2
    nqp_rxpeek $I19, rx1242_bstack, rxcap1244_fail3402
    inc $I19
    set $I11, rx1242_bstack[$I19]
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1242_pos)
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "sym")
    goto rxcap1244_done3401
  rxcap1244_fail3402:
    goto rx1242_fail3394
  rxcap1244_done3401:
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1242_curclass, "$!pos"
    lt $I11, 0, rx1242_fail3394
    nqp_rxmark rx1242_bstack, rxsubrule1245_pass3403, -1, 0
  rxsubrule1245_pass3403:
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1242_pos, $P11, rx1242_curclass, "$!pos"
    rx1242_cur."!cursor_pass"(rx1242_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1242_cur)
  rx1242_restart3393:
    repr_get_attr_obj rx1242_cstack, rx1242_cur, rx1242_curclass, "$!cstack"
  rx1242_fail3394:
    unless rx1242_bstack, rx1242_done3392
    pop $I19, rx1242_bstack
    if_null rx1242_cstack, rx1242_cstack_done3397
    unless rx1242_cstack, rx1242_cstack_done3397
    dec $I19
    set $P11, rx1242_cstack[$I19]
  rx1242_cstack_done3397:
    pop rx1242_rep, rx1242_bstack
    pop rx1242_pos, rx1242_bstack
    pop $I19, rx1242_bstack
    lt rx1242_pos, -1, rx1242_done3392
    lt rx1242_pos, 0, rx1242_fail3394
    eq $I19, 0, rx1242_fail3394
    nqp_islist $I20, rx1242_cstack
    unless $I20, rx1242_jump3395
    elements $I18, rx1242_bstack
    le $I18, 0, rx1242_cut3396
    dec $I18
    set $I18, rx1242_bstack[$I18]
  rx1242_cut3396:
    assign rx1242_cstack, $I18
  rx1242_jump3395:
    jump $I19
  rx1242_done3392:
    rx1242_cur."!cursor_fail"()
    .return (rx1242_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_211_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1368
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1246_tgt
    .local int rx1246_pos
    .local int rx1246_off
    .local int rx1246_eos
    .local int rx1246_rep
    .local pmc rx1246_cur
    .local pmc rx1246_curclass
    .local pmc rx1246_bstack
    .local pmc rx1246_cstack
    (rx1246_cur, rx1246_tgt, rx1246_pos, rx1246_curclass, rx1246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1246_cur
    length rx1246_eos, rx1246_tgt
    eq $I19, 1, rx1246_restart3406
    gt rx1246_pos, rx1246_eos, rx1246_fail3407
    repr_get_attr_int $I11, self, rx1246_curclass, "$!from"
    ne $I11, -1, rxscan1247_done3413
    goto rxscan1247_scan3412
  rxscan1247_loop3411:
    inc rx1246_pos
    gt rx1246_pos, rx1246_eos, rx1246_fail3407
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!from", rx1246_pos
  rxscan1247_scan3412:
    nqp_rxmark rx1246_bstack, rxscan1247_loop3411, rx1246_pos, 0
  rxscan1247_done3413:
    nqp_rxmark rx1246_bstack, rxcap1248_fail3415, rx1246_pos, 0
    add $I11, rx1246_pos, 3
    gt $I11, rx1246_eos, rx1246_fail3407
    substr $S10, rx1246_tgt, rx1246_pos, 3
    ne $S10, ucs4:"::=", rx1246_fail3407
    add rx1246_pos, 3
    nqp_rxpeek $I19, rx1246_bstack, rxcap1248_fail3415
    inc $I19
    set $I11, rx1246_bstack[$I19]
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1246_pos)
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "sym")
    goto rxcap1248_done3414
  rxcap1248_fail3415:
    goto rx1246_fail3407
  rxcap1248_done3414:
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3407
    nqp_rxmark rx1246_bstack, rxsubrule1249_pass3416, -1, 0
  rxsubrule1249_pass3416:
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1246_pos, $P11, rx1246_curclass, "$!pos"
    rx1246_cur."!cursor_pass"(rx1246_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1246_cur)
  rx1246_restart3406:
    repr_get_attr_obj rx1246_cstack, rx1246_cur, rx1246_curclass, "$!cstack"
  rx1246_fail3407:
    unless rx1246_bstack, rx1246_done3405
    pop $I19, rx1246_bstack
    if_null rx1246_cstack, rx1246_cstack_done3410
    unless rx1246_cstack, rx1246_cstack_done3410
    dec $I19
    set $P11, rx1246_cstack[$I19]
  rx1246_cstack_done3410:
    pop rx1246_rep, rx1246_bstack
    pop rx1246_pos, rx1246_bstack
    pop $I19, rx1246_bstack
    lt rx1246_pos, -1, rx1246_done3405
    lt rx1246_pos, 0, rx1246_fail3407
    eq $I19, 0, rx1246_fail3407
    nqp_islist $I20, rx1246_cstack
    unless $I20, rx1246_jump3408
    elements $I18, rx1246_bstack
    le $I18, 0, rx1246_cut3409
    dec $I18
    set $I18, rx1246_bstack[$I18]
  rx1246_cut3409:
    assign rx1246_cstack, $I18
  rx1246_jump3408:
    jump $I19
  rx1246_done3405:
    rx1246_cur."!cursor_fail"()
    .return (rx1246_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_212_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1250_tgt
    .local int rx1250_pos
    .local int rx1250_off
    .local int rx1250_eos
    .local int rx1250_rep
    .local pmc rx1250_cur
    .local pmc rx1250_curclass
    .local pmc rx1250_bstack
    .local pmc rx1250_cstack
    (rx1250_cur, rx1250_tgt, rx1250_pos, rx1250_curclass, rx1250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1250_cur
    length rx1250_eos, rx1250_tgt
    eq $I19, 1, rx1250_restart3419
    gt rx1250_pos, rx1250_eos, rx1250_fail3420
    repr_get_attr_int $I11, self, rx1250_curclass, "$!from"
    ne $I11, -1, rxscan1251_done3426
    goto rxscan1251_scan3425
  rxscan1251_loop3424:
    inc rx1250_pos
    gt rx1250_pos, rx1250_eos, rx1250_fail3420
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!from", rx1250_pos
  rxscan1251_scan3425:
    nqp_rxmark rx1250_bstack, rxscan1251_loop3424, rx1250_pos, 0
  rxscan1251_done3426:
    nqp_rxmark rx1250_bstack, rxcap1252_fail3428, rx1250_pos, 0
    add $I11, rx1250_pos, 1
    gt $I11, rx1250_eos, rx1250_fail3420
    substr $S10, rx1250_tgt, rx1250_pos, 1
    ne $S10, ucs4:",", rx1250_fail3420
    add rx1250_pos, 1
    nqp_rxpeek $I19, rx1250_bstack, rxcap1252_fail3428
    inc $I19
    set $I11, rx1250_bstack[$I19]
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1250_pos)
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "sym")
    goto rxcap1252_done3427
  rxcap1252_fail3428:
    goto rx1250_fail3420
  rxcap1252_done3427:
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1250_curclass, "$!pos"
    lt $I11, 0, rx1250_fail3420
    nqp_rxmark rx1250_bstack, rxsubrule1253_pass3429, -1, 0
  rxsubrule1253_pass3429:
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1250_pos, $P11, rx1250_curclass, "$!pos"
    rx1250_cur."!cursor_pass"(rx1250_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1250_cur)
  rx1250_restart3419:
    repr_get_attr_obj rx1250_cstack, rx1250_cur, rx1250_curclass, "$!cstack"
  rx1250_fail3420:
    unless rx1250_bstack, rx1250_done3418
    pop $I19, rx1250_bstack
    if_null rx1250_cstack, rx1250_cstack_done3423
    unless rx1250_cstack, rx1250_cstack_done3423
    dec $I19
    set $P11, rx1250_cstack[$I19]
  rx1250_cstack_done3423:
    pop rx1250_rep, rx1250_bstack
    pop rx1250_pos, rx1250_bstack
    pop $I19, rx1250_bstack
    lt rx1250_pos, -1, rx1250_done3418
    lt rx1250_pos, 0, rx1250_fail3420
    eq $I19, 0, rx1250_fail3420
    nqp_islist $I20, rx1250_cstack
    unless $I20, rx1250_jump3421
    elements $I18, rx1250_bstack
    le $I18, 0, rx1250_cut3422
    dec $I18
    set $I18, rx1250_bstack[$I18]
  rx1250_cut3422:
    assign rx1250_cstack, $I18
  rx1250_jump3421:
    jump $I19
  rx1250_done3418:
    rx1250_cur."!cursor_fail"()
    .return (rx1250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_213_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_402_1360232768.755' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1254_tgt
    .local int rx1254_pos
    .local int rx1254_off
    .local int rx1254_eos
    .local int rx1254_rep
    .local pmc rx1254_cur
    .local pmc rx1254_curclass
    .local pmc rx1254_bstack
    .local pmc rx1254_cstack
    (rx1254_cur, rx1254_tgt, rx1254_pos, rx1254_curclass, rx1254_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1254_cur
    length rx1254_eos, rx1254_tgt
    eq $I19, 1, rx1254_restart3432
    gt rx1254_pos, rx1254_eos, rx1254_fail3433
    repr_get_attr_int $I11, self, rx1254_curclass, "$!from"
    ne $I11, -1, rxscan1255_done3439
    goto rxscan1255_scan3438
  rxscan1255_loop3437:
    inc rx1254_pos
    gt rx1254_pos, rx1254_eos, rx1254_fail3433
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!from", rx1254_pos
  rxscan1255_scan3438:
    nqp_rxmark rx1254_bstack, rxscan1255_loop3437, rx1254_pos, 0
  rxscan1255_done3439:
    nqp_rxmark rx1254_bstack, rxcap1256_fail3441, rx1254_pos, 0
    add $I11, rx1254_pos, 6
    gt $I11, rx1254_eos, rx1254_fail3433
    substr $S10, rx1254_tgt, rx1254_pos, 6
    ne $S10, ucs4:"return", rx1254_fail3433
    add rx1254_pos, 6
    nqp_rxpeek $I19, rx1254_bstack, rxcap1256_fail3441
    inc $I19
    set $I11, rx1254_bstack[$I19]
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1254_pos)
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "sym")
    goto rxcap1256_done3440
  rxcap1256_fail3441:
    goto rx1254_fail3433
  rxcap1256_done3440:
    ge rx1254_pos, rx1254_eos, rx1254_fail3433
    is_cclass $I11, .CCLASS_WHITESPACE, rx1254_tgt, rx1254_pos
    unless $I11, rx1254_fail3433
    add rx1254_pos, 1
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1254_curclass, "$!pos"
    lt $I11, 0, rx1254_fail3433
    nqp_rxmark rx1254_bstack, rxsubrule1257_pass3442, -1, 0
  rxsubrule1257_pass3442:
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1254_pos, $P11, rx1254_curclass, "$!pos"
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    store_lex unicode:"$\x{a2}", rx1254_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_402_1360232768.755' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1254_cur."!cursor_pass"(rx1254_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1254_cur)
  rx1254_restart3432:
    repr_get_attr_obj rx1254_cstack, rx1254_cur, rx1254_curclass, "$!cstack"
  rx1254_fail3433:
    unless rx1254_bstack, rx1254_done3431
    pop $I19, rx1254_bstack
    if_null rx1254_cstack, rx1254_cstack_done3436
    unless rx1254_cstack, rx1254_cstack_done3436
    dec $I19
    set $P11, rx1254_cstack[$I19]
  rx1254_cstack_done3436:
    pop rx1254_rep, rx1254_bstack
    pop rx1254_pos, rx1254_bstack
    pop $I19, rx1254_bstack
    lt rx1254_pos, -1, rx1254_done3431
    lt rx1254_pos, 0, rx1254_fail3433
    eq $I19, 0, rx1254_fail3433
    nqp_islist $I20, rx1254_cstack
    unless $I20, rx1254_jump3434
    elements $I18, rx1254_bstack
    le $I18, 0, rx1254_cut3435
    dec $I18
    set $I18, rx1254_bstack[$I18]
  rx1254_cut3435:
    assign rx1254_cstack, $I18
  rx1254_jump3434:
    jump $I19
  rx1254_done3431:
    rx1254_cur."!cursor_fail"()
    .return (rx1254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1360232768.755") :anon :lex :outer("cuid_213_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_214_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1258_tgt
    .local int rx1258_pos
    .local int rx1258_off
    .local int rx1258_eos
    .local int rx1258_rep
    .local pmc rx1258_cur
    .local pmc rx1258_curclass
    .local pmc rx1258_bstack
    .local pmc rx1258_cstack
    (rx1258_cur, rx1258_tgt, rx1258_pos, rx1258_curclass, rx1258_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1258_cur
    length rx1258_eos, rx1258_tgt
    eq $I19, 1, rx1258_restart3445
    gt rx1258_pos, rx1258_eos, rx1258_fail3446
    repr_get_attr_int $I11, self, rx1258_curclass, "$!from"
    ne $I11, -1, rxscan1259_done3452
    goto rxscan1259_scan3451
  rxscan1259_loop3450:
    inc rx1258_pos
    gt rx1258_pos, rx1258_eos, rx1258_fail3446
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!from", rx1258_pos
  rxscan1259_scan3451:
    nqp_rxmark rx1258_bstack, rxscan1259_loop3450, rx1258_pos, 0
  rxscan1259_done3452:
    nqp_rxmark rx1258_bstack, rxcap1260_fail3454, rx1258_pos, 0
    add $I11, rx1258_pos, 4
    gt $I11, rx1258_eos, rx1258_fail3446
    substr $S10, rx1258_tgt, rx1258_pos, 4
    ne $S10, ucs4:"make", rx1258_fail3446
    add rx1258_pos, 4
    nqp_rxpeek $I19, rx1258_bstack, rxcap1260_fail3454
    inc $I19
    set $I11, rx1258_bstack[$I19]
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1258_pos)
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "sym")
    goto rxcap1260_done3453
  rxcap1260_fail3454:
    goto rx1258_fail3446
  rxcap1260_done3453:
    ge rx1258_pos, rx1258_eos, rx1258_fail3446
    is_cclass $I11, .CCLASS_WHITESPACE, rx1258_tgt, rx1258_pos
    unless $I11, rx1258_fail3446
    add rx1258_pos, 1
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1258_curclass, "$!pos"
    lt $I11, 0, rx1258_fail3446
    nqp_rxmark rx1258_bstack, rxsubrule1261_pass3455, -1, 0
  rxsubrule1261_pass3455:
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1258_pos, $P11, rx1258_curclass, "$!pos"
    rx1258_cur."!cursor_pass"(rx1258_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1258_cur)
  rx1258_restart3445:
    repr_get_attr_obj rx1258_cstack, rx1258_cur, rx1258_curclass, "$!cstack"
  rx1258_fail3446:
    unless rx1258_bstack, rx1258_done3444
    pop $I19, rx1258_bstack
    if_null rx1258_cstack, rx1258_cstack_done3449
    unless rx1258_cstack, rx1258_cstack_done3449
    dec $I19
    set $P11, rx1258_cstack[$I19]
  rx1258_cstack_done3449:
    pop rx1258_rep, rx1258_bstack
    pop rx1258_pos, rx1258_bstack
    pop $I19, rx1258_bstack
    lt rx1258_pos, -1, rx1258_done3444
    lt rx1258_pos, 0, rx1258_fail3446
    eq $I19, 0, rx1258_fail3446
    nqp_islist $I20, rx1258_cstack
    unless $I20, rx1258_jump3447
    elements $I18, rx1258_bstack
    le $I18, 0, rx1258_cut3448
    dec $I18
    set $I18, rx1258_bstack[$I18]
  rx1258_cut3448:
    assign rx1258_cstack, $I18
  rx1258_jump3447:
    jump $I19
  rx1258_done3444:
    rx1258_cur."!cursor_fail"()
    .return (rx1258_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_215_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_216_1360232768.755' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_403_1360232768.755' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1262_tgt
    .local int rx1262_pos
    .local int rx1262_off
    .local int rx1262_eos
    .local int rx1262_rep
    .local pmc rx1262_cur
    .local pmc rx1262_curclass
    .local pmc rx1262_bstack
    .local pmc rx1262_cstack
    (rx1262_cur, rx1262_tgt, rx1262_pos, rx1262_curclass, rx1262_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1262_cur
    length rx1262_eos, rx1262_tgt
    eq $I19, 1, rx1262_restart3458
    gt rx1262_pos, rx1262_eos, rx1262_fail3459
    repr_get_attr_int $I11, self, rx1262_curclass, "$!from"
    ne $I11, -1, rxscan1263_done3465
    goto rxscan1263_scan3464
  rxscan1263_loop3463:
    inc rx1262_pos
    gt rx1262_pos, rx1262_eos, rx1262_fail3459
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!from", rx1262_pos
  rxscan1263_scan3464:
    nqp_rxmark rx1262_bstack, rxscan1263_loop3463, rx1262_pos, 0
  rxscan1263_done3465:
    nqp_rxmark rx1262_bstack, rxcap1264_fail3467, rx1262_pos, 0
    add $I11, rx1262_pos, 4
    gt $I11, rx1262_eos, rx1262_fail3459
    substr $S10, rx1262_tgt, rx1262_pos, 4
    ne $S10, ucs4:"last", rx1262_fail3459
    add rx1262_pos, 4
    nqp_rxpeek $I19, rx1262_bstack, rxcap1264_fail3467
    inc $I19
    set $I11, rx1262_bstack[$I19]
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1262_pos)
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "sym")
    goto rxcap1264_done3466
  rxcap1264_fail3467:
    goto rx1262_fail3459
  rxcap1264_done3466:
    .const 'Sub' $P5001 = 'cuid_216_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1262_curclass, "$!pos"
    ge $I11, 0, rx1262_fail3459
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    store_lex unicode:"$\x{a2}", rx1262_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_403_1360232768.755' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1262_cur."!cursor_pass"(rx1262_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1262_cur)
  rx1262_restart3458:
    repr_get_attr_obj rx1262_cstack, rx1262_cur, rx1262_curclass, "$!cstack"
  rx1262_fail3459:
    unless rx1262_bstack, rx1262_done3457
    pop $I19, rx1262_bstack
    if_null rx1262_cstack, rx1262_cstack_done3462
    unless rx1262_cstack, rx1262_cstack_done3462
    dec $I19
    set $P11, rx1262_cstack[$I19]
  rx1262_cstack_done3462:
    pop rx1262_rep, rx1262_bstack
    pop rx1262_pos, rx1262_bstack
    pop $I19, rx1262_bstack
    lt rx1262_pos, -1, rx1262_done3457
    lt rx1262_pos, 0, rx1262_fail3459
    eq $I19, 0, rx1262_fail3459
    nqp_islist $I20, rx1262_cstack
    unless $I20, rx1262_jump3460
    elements $I18, rx1262_bstack
    le $I18, 0, rx1262_cut3461
    dec $I18
    set $I18, rx1262_bstack[$I18]
  rx1262_cut3461:
    assign rx1262_cstack, $I18
  rx1262_jump3460:
    jump $I19
  rx1262_done3457:
    rx1262_cur."!cursor_fail"()
    .return (rx1262_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1360232768.755") :anon :lex :outer("cuid_215_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1265_tgt
    .local int rx1265_pos
    .local int rx1265_off
    .local int rx1265_eos
    .local int rx1265_rep
    .local pmc rx1265_cur
    .local pmc rx1265_curclass
    .local pmc rx1265_bstack
    .local pmc rx1265_cstack
    (rx1265_cur, rx1265_tgt, rx1265_pos, rx1265_curclass, rx1265_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1265_cur
    length rx1265_eos, rx1265_tgt
    eq $I19, 1, rx1265_restart3470
    gt rx1265_pos, rx1265_eos, rx1265_fail3471
    repr_get_attr_int $I11, self, rx1265_curclass, "$!from"
    ne $I11, -1, rxscan1266_done3477
    goto rxscan1266_scan3476
  rxscan1266_loop3475:
    inc rx1265_pos
    gt rx1265_pos, rx1265_eos, rx1265_fail3471
    repr_bind_attr_int rx1265_cur, rx1265_curclass, "$!from", rx1265_pos
  rxscan1266_scan3476:
    nqp_rxmark rx1265_bstack, rxscan1266_loop3475, rx1265_pos, 0
  rxscan1266_done3477:
    repr_bind_attr_int rx1265_cur, rx1265_curclass, "$!pos", rx1265_pos
    $P11 = rx1265_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1265_curclass, "$!pos"
    lt $I11, 0, rx1265_fail3471
    nqp_rxmark rx1265_bstack, rxsubrule1267_pass3478, -1, 0
  rxsubrule1267_pass3478:
    rx1265_cstack = rx1265_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1265_pos, $P11, rx1265_curclass, "$!pos"
    rx1265_cur."!cursor_pass"(rx1265_pos, 'backtrack'=>1)
    .return (rx1265_cur)
  rx1265_restart3470:
    repr_get_attr_obj rx1265_cstack, rx1265_cur, rx1265_curclass, "$!cstack"
  rx1265_fail3471:
    unless rx1265_bstack, rx1265_done3469
    pop $I19, rx1265_bstack
    if_null rx1265_cstack, rx1265_cstack_done3474
    unless rx1265_cstack, rx1265_cstack_done3474
    dec $I19
    set $P11, rx1265_cstack[$I19]
  rx1265_cstack_done3474:
    pop rx1265_rep, rx1265_bstack
    pop rx1265_pos, rx1265_bstack
    pop $I19, rx1265_bstack
    lt rx1265_pos, -1, rx1265_done3469
    lt rx1265_pos, 0, rx1265_fail3471
    eq $I19, 0, rx1265_fail3471
    nqp_islist $I20, rx1265_cstack
    unless $I20, rx1265_jump3472
    elements $I18, rx1265_bstack
    le $I18, 0, rx1265_cut3473
    dec $I18
    set $I18, rx1265_bstack[$I18]
  rx1265_cut3473:
    assign rx1265_cstack, $I18
  rx1265_jump3472:
    jump $I19
  rx1265_done3469:
    rx1265_cur."!cursor_fail"()
    .return (rx1265_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1360232768.755") :anon :lex :outer("cuid_215_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_217_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_218_1360232768.755' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_404_1360232768.755' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1268_tgt
    .local int rx1268_pos
    .local int rx1268_off
    .local int rx1268_eos
    .local int rx1268_rep
    .local pmc rx1268_cur
    .local pmc rx1268_curclass
    .local pmc rx1268_bstack
    .local pmc rx1268_cstack
    (rx1268_cur, rx1268_tgt, rx1268_pos, rx1268_curclass, rx1268_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1268_cur
    length rx1268_eos, rx1268_tgt
    eq $I19, 1, rx1268_restart3481
    gt rx1268_pos, rx1268_eos, rx1268_fail3482
    repr_get_attr_int $I11, self, rx1268_curclass, "$!from"
    ne $I11, -1, rxscan1269_done3488
    goto rxscan1269_scan3487
  rxscan1269_loop3486:
    inc rx1268_pos
    gt rx1268_pos, rx1268_eos, rx1268_fail3482
    repr_bind_attr_int rx1268_cur, rx1268_curclass, "$!from", rx1268_pos
  rxscan1269_scan3487:
    nqp_rxmark rx1268_bstack, rxscan1269_loop3486, rx1268_pos, 0
  rxscan1269_done3488:
    nqp_rxmark rx1268_bstack, rxcap1270_fail3490, rx1268_pos, 0
    add $I11, rx1268_pos, 4
    gt $I11, rx1268_eos, rx1268_fail3482
    substr $S10, rx1268_tgt, rx1268_pos, 4
    ne $S10, ucs4:"next", rx1268_fail3482
    add rx1268_pos, 4
    nqp_rxpeek $I19, rx1268_bstack, rxcap1270_fail3490
    inc $I19
    set $I11, rx1268_bstack[$I19]
    repr_bind_attr_int rx1268_cur, rx1268_curclass, "$!pos", rx1268_pos
    $P11 = rx1268_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1268_pos)
    rx1268_cstack = rx1268_cur."!cursor_capture"($P11, "sym")
    goto rxcap1270_done3489
  rxcap1270_fail3490:
    goto rx1268_fail3482
  rxcap1270_done3489:
    .const 'Sub' $P5001 = 'cuid_218_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1268_cur, rx1268_curclass, "$!pos", rx1268_pos
    $P11 = rx1268_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1268_curclass, "$!pos"
    ge $I11, 0, rx1268_fail3482
    repr_bind_attr_int rx1268_cur, rx1268_curclass, "$!pos", rx1268_pos
    store_lex unicode:"$\x{a2}", rx1268_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_404_1360232768.755' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1268_cur."!cursor_pass"(rx1268_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1268_cur)
  rx1268_restart3481:
    repr_get_attr_obj rx1268_cstack, rx1268_cur, rx1268_curclass, "$!cstack"
  rx1268_fail3482:
    unless rx1268_bstack, rx1268_done3480
    pop $I19, rx1268_bstack
    if_null rx1268_cstack, rx1268_cstack_done3485
    unless rx1268_cstack, rx1268_cstack_done3485
    dec $I19
    set $P11, rx1268_cstack[$I19]
  rx1268_cstack_done3485:
    pop rx1268_rep, rx1268_bstack
    pop rx1268_pos, rx1268_bstack
    pop $I19, rx1268_bstack
    lt rx1268_pos, -1, rx1268_done3480
    lt rx1268_pos, 0, rx1268_fail3482
    eq $I19, 0, rx1268_fail3482
    nqp_islist $I20, rx1268_cstack
    unless $I20, rx1268_jump3483
    elements $I18, rx1268_bstack
    le $I18, 0, rx1268_cut3484
    dec $I18
    set $I18, rx1268_bstack[$I18]
  rx1268_cut3484:
    assign rx1268_cstack, $I18
  rx1268_jump3483:
    jump $I19
  rx1268_done3480:
    rx1268_cur."!cursor_fail"()
    .return (rx1268_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1360232768.755") :anon :lex :outer("cuid_217_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1271_tgt
    .local int rx1271_pos
    .local int rx1271_off
    .local int rx1271_eos
    .local int rx1271_rep
    .local pmc rx1271_cur
    .local pmc rx1271_curclass
    .local pmc rx1271_bstack
    .local pmc rx1271_cstack
    (rx1271_cur, rx1271_tgt, rx1271_pos, rx1271_curclass, rx1271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1271_cur
    length rx1271_eos, rx1271_tgt
    eq $I19, 1, rx1271_restart3493
    gt rx1271_pos, rx1271_eos, rx1271_fail3494
    repr_get_attr_int $I11, self, rx1271_curclass, "$!from"
    ne $I11, -1, rxscan1272_done3500
    goto rxscan1272_scan3499
  rxscan1272_loop3498:
    inc rx1271_pos
    gt rx1271_pos, rx1271_eos, rx1271_fail3494
    repr_bind_attr_int rx1271_cur, rx1271_curclass, "$!from", rx1271_pos
  rxscan1272_scan3499:
    nqp_rxmark rx1271_bstack, rxscan1272_loop3498, rx1271_pos, 0
  rxscan1272_done3500:
    repr_bind_attr_int rx1271_cur, rx1271_curclass, "$!pos", rx1271_pos
    $P11 = rx1271_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1271_curclass, "$!pos"
    lt $I11, 0, rx1271_fail3494
    nqp_rxmark rx1271_bstack, rxsubrule1273_pass3501, -1, 0
  rxsubrule1273_pass3501:
    rx1271_cstack = rx1271_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1271_pos, $P11, rx1271_curclass, "$!pos"
    rx1271_cur."!cursor_pass"(rx1271_pos, 'backtrack'=>1)
    .return (rx1271_cur)
  rx1271_restart3493:
    repr_get_attr_obj rx1271_cstack, rx1271_cur, rx1271_curclass, "$!cstack"
  rx1271_fail3494:
    unless rx1271_bstack, rx1271_done3492
    pop $I19, rx1271_bstack
    if_null rx1271_cstack, rx1271_cstack_done3497
    unless rx1271_cstack, rx1271_cstack_done3497
    dec $I19
    set $P11, rx1271_cstack[$I19]
  rx1271_cstack_done3497:
    pop rx1271_rep, rx1271_bstack
    pop rx1271_pos, rx1271_bstack
    pop $I19, rx1271_bstack
    lt rx1271_pos, -1, rx1271_done3492
    lt rx1271_pos, 0, rx1271_fail3494
    eq $I19, 0, rx1271_fail3494
    nqp_islist $I20, rx1271_cstack
    unless $I20, rx1271_jump3495
    elements $I18, rx1271_bstack
    le $I18, 0, rx1271_cut3496
    dec $I18
    set $I18, rx1271_bstack[$I18]
  rx1271_cut3496:
    assign rx1271_cstack, $I18
  rx1271_jump3495:
    jump $I19
  rx1271_done3492:
    rx1271_cur."!cursor_fail"()
    .return (rx1271_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1360232768.755") :anon :lex :outer("cuid_217_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_219_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_220_1360232768.755' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_405_1360232768.755' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1274_tgt
    .local int rx1274_pos
    .local int rx1274_off
    .local int rx1274_eos
    .local int rx1274_rep
    .local pmc rx1274_cur
    .local pmc rx1274_curclass
    .local pmc rx1274_bstack
    .local pmc rx1274_cstack
    (rx1274_cur, rx1274_tgt, rx1274_pos, rx1274_curclass, rx1274_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1274_cur
    length rx1274_eos, rx1274_tgt
    eq $I19, 1, rx1274_restart3504
    gt rx1274_pos, rx1274_eos, rx1274_fail3505
    repr_get_attr_int $I11, self, rx1274_curclass, "$!from"
    ne $I11, -1, rxscan1275_done3511
    goto rxscan1275_scan3510
  rxscan1275_loop3509:
    inc rx1274_pos
    gt rx1274_pos, rx1274_eos, rx1274_fail3505
    repr_bind_attr_int rx1274_cur, rx1274_curclass, "$!from", rx1274_pos
  rxscan1275_scan3510:
    nqp_rxmark rx1274_bstack, rxscan1275_loop3509, rx1274_pos, 0
  rxscan1275_done3511:
    nqp_rxmark rx1274_bstack, rxcap1276_fail3513, rx1274_pos, 0
    add $I11, rx1274_pos, 4
    gt $I11, rx1274_eos, rx1274_fail3505
    substr $S10, rx1274_tgt, rx1274_pos, 4
    ne $S10, ucs4:"redo", rx1274_fail3505
    add rx1274_pos, 4
    nqp_rxpeek $I19, rx1274_bstack, rxcap1276_fail3513
    inc $I19
    set $I11, rx1274_bstack[$I19]
    repr_bind_attr_int rx1274_cur, rx1274_curclass, "$!pos", rx1274_pos
    $P11 = rx1274_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1274_pos)
    rx1274_cstack = rx1274_cur."!cursor_capture"($P11, "sym")
    goto rxcap1276_done3512
  rxcap1276_fail3513:
    goto rx1274_fail3505
  rxcap1276_done3512:
    .const 'Sub' $P5001 = 'cuid_220_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1274_cur, rx1274_curclass, "$!pos", rx1274_pos
    $P11 = rx1274_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1274_curclass, "$!pos"
    ge $I11, 0, rx1274_fail3505
    repr_bind_attr_int rx1274_cur, rx1274_curclass, "$!pos", rx1274_pos
    store_lex unicode:"$\x{a2}", rx1274_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_405_1360232768.755' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1274_cur."!cursor_pass"(rx1274_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1274_cur)
  rx1274_restart3504:
    repr_get_attr_obj rx1274_cstack, rx1274_cur, rx1274_curclass, "$!cstack"
  rx1274_fail3505:
    unless rx1274_bstack, rx1274_done3503
    pop $I19, rx1274_bstack
    if_null rx1274_cstack, rx1274_cstack_done3508
    unless rx1274_cstack, rx1274_cstack_done3508
    dec $I19
    set $P11, rx1274_cstack[$I19]
  rx1274_cstack_done3508:
    pop rx1274_rep, rx1274_bstack
    pop rx1274_pos, rx1274_bstack
    pop $I19, rx1274_bstack
    lt rx1274_pos, -1, rx1274_done3503
    lt rx1274_pos, 0, rx1274_fail3505
    eq $I19, 0, rx1274_fail3505
    nqp_islist $I20, rx1274_cstack
    unless $I20, rx1274_jump3506
    elements $I18, rx1274_bstack
    le $I18, 0, rx1274_cut3507
    dec $I18
    set $I18, rx1274_bstack[$I18]
  rx1274_cut3507:
    assign rx1274_cstack, $I18
  rx1274_jump3506:
    jump $I19
  rx1274_done3503:
    rx1274_cur."!cursor_fail"()
    .return (rx1274_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1360232768.755") :anon :lex :outer("cuid_219_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1277_tgt
    .local int rx1277_pos
    .local int rx1277_off
    .local int rx1277_eos
    .local int rx1277_rep
    .local pmc rx1277_cur
    .local pmc rx1277_curclass
    .local pmc rx1277_bstack
    .local pmc rx1277_cstack
    (rx1277_cur, rx1277_tgt, rx1277_pos, rx1277_curclass, rx1277_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1277_cur
    length rx1277_eos, rx1277_tgt
    eq $I19, 1, rx1277_restart3516
    gt rx1277_pos, rx1277_eos, rx1277_fail3517
    repr_get_attr_int $I11, self, rx1277_curclass, "$!from"
    ne $I11, -1, rxscan1278_done3523
    goto rxscan1278_scan3522
  rxscan1278_loop3521:
    inc rx1277_pos
    gt rx1277_pos, rx1277_eos, rx1277_fail3517
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!from", rx1277_pos
  rxscan1278_scan3522:
    nqp_rxmark rx1277_bstack, rxscan1278_loop3521, rx1277_pos, 0
  rxscan1278_done3523:
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!pos", rx1277_pos
    $P11 = rx1277_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1277_curclass, "$!pos"
    lt $I11, 0, rx1277_fail3517
    nqp_rxmark rx1277_bstack, rxsubrule1279_pass3524, -1, 0
  rxsubrule1279_pass3524:
    rx1277_cstack = rx1277_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1277_pos, $P11, rx1277_curclass, "$!pos"
    rx1277_cur."!cursor_pass"(rx1277_pos, 'backtrack'=>1)
    .return (rx1277_cur)
  rx1277_restart3516:
    repr_get_attr_obj rx1277_cstack, rx1277_cur, rx1277_curclass, "$!cstack"
  rx1277_fail3517:
    unless rx1277_bstack, rx1277_done3515
    pop $I19, rx1277_bstack
    if_null rx1277_cstack, rx1277_cstack_done3520
    unless rx1277_cstack, rx1277_cstack_done3520
    dec $I19
    set $P11, rx1277_cstack[$I19]
  rx1277_cstack_done3520:
    pop rx1277_rep, rx1277_bstack
    pop rx1277_pos, rx1277_bstack
    pop $I19, rx1277_bstack
    lt rx1277_pos, -1, rx1277_done3515
    lt rx1277_pos, 0, rx1277_fail3517
    eq $I19, 0, rx1277_fail3517
    nqp_islist $I20, rx1277_cstack
    unless $I20, rx1277_jump3518
    elements $I18, rx1277_bstack
    le $I18, 0, rx1277_cut3519
    dec $I18
    set $I18, rx1277_bstack[$I18]
  rx1277_cut3519:
    assign rx1277_cstack, $I18
  rx1277_jump3518:
    jump $I19
  rx1277_done3515:
    rx1277_cur."!cursor_fail"()
    .return (rx1277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1360232768.755") :anon :lex :outer("cuid_219_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_221_1360232768.755") :anon :lex :outer("cuid_387_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3525
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5003
  fallback3525:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3526
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5005
  fallback3526:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384
    .const 'Sub' $P5013 = 'cuid_222_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_223_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_225_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_226_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_228_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_229_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_232_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_235_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_237_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_239_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_240_1360232768.755' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_241_1360232768.755' 
    capture_lex $P5013 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_222_1360232768.755' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_223_1360232768.755' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_225_1360232768.755' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_226_1360232768.755' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_228_1360232768.755' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_229_1360232768.755' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_232_1360232768.755' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_235_1360232768.755' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_237_1360232768.755' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_239_1360232768.755' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_240_1360232768.755' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_241_1360232768.755' 
    capture_lex $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_222_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1385
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1280_tgt
    .local int rx1280_pos
    .local int rx1280_off
    .local int rx1280_eos
    .local int rx1280_rep
    .local pmc rx1280_cur
    .local pmc rx1280_curclass
    .local pmc rx1280_bstack
    .local pmc rx1280_cstack
    (rx1280_cur, rx1280_tgt, rx1280_pos, rx1280_curclass, rx1280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1280_cur
    length rx1280_eos, rx1280_tgt
    eq $I19, 1, rx1280_restart3529
    gt rx1280_pos, rx1280_eos, rx1280_fail3530
    repr_get_attr_int $I11, self, rx1280_curclass, "$!from"
    ne $I11, -1, rxscan1281_done3536
    goto rxscan1281_scan3535
  rxscan1281_loop3534:
    inc rx1280_pos
    gt rx1280_pos, rx1280_eos, rx1280_fail3530
    repr_bind_attr_int rx1280_cur, rx1280_curclass, "$!from", rx1280_pos
  rxscan1281_scan3535:
    nqp_rxmark rx1280_bstack, rxscan1281_loop3534, rx1280_pos, 0
  rxscan1281_done3536:
    ge rx1280_pos, rx1280_eos, rx1280_fail3530
    substr $S11, rx1280_tgt, rx1280_pos, 1
    index $I11, ucs4:"}/", $S11
    lt $I11, 0, rx1280_fail3530
    inc rx1280_pos
    rx1280_cur."!cursor_pass"(rx1280_pos, "rxstopper", 'backtrack'=>1)
    .return (rx1280_cur)
  rx1280_restart3529:
    repr_get_attr_obj rx1280_cstack, rx1280_cur, rx1280_curclass, "$!cstack"
  rx1280_fail3530:
    unless rx1280_bstack, rx1280_done3528
    pop $I19, rx1280_bstack
    if_null rx1280_cstack, rx1280_cstack_done3533
    unless rx1280_cstack, rx1280_cstack_done3533
    dec $I19
    set $P11, rx1280_cstack[$I19]
  rx1280_cstack_done3533:
    pop rx1280_rep, rx1280_bstack
    pop rx1280_pos, rx1280_bstack
    pop $I19, rx1280_bstack
    lt rx1280_pos, -1, rx1280_done3528
    lt rx1280_pos, 0, rx1280_fail3530
    eq $I19, 0, rx1280_fail3530
    nqp_islist $I20, rx1280_cstack
    unless $I20, rx1280_jump3531
    elements $I18, rx1280_bstack
    le $I18, 0, rx1280_cut3532
    dec $I18
    set $I18, rx1280_bstack[$I18]
  rx1280_cut3532:
    assign rx1280_cstack, $I18
  rx1280_jump3531:
    jump $I19
  rx1280_done3528:
    rx1280_cur."!cursor_fail"()
    .return (rx1280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_223_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_224_1360232768.755' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1282_tgt
    .local int rx1282_pos
    .local int rx1282_off
    .local int rx1282_eos
    .local int rx1282_rep
    .local pmc rx1282_cur
    .local pmc rx1282_curclass
    .local pmc rx1282_bstack
    .local pmc rx1282_cstack
    (rx1282_cur, rx1282_tgt, rx1282_pos, rx1282_curclass, rx1282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1282_cur
    length rx1282_eos, rx1282_tgt
    eq $I19, 1, rx1282_restart3539
    gt rx1282_pos, rx1282_eos, rx1282_fail3540
    repr_get_attr_int $I11, self, rx1282_curclass, "$!from"
    ne $I11, -1, rxscan1283_done3546
    goto rxscan1283_scan3545
  rxscan1283_loop3544:
    inc rx1282_pos
    gt rx1282_pos, rx1282_eos, rx1282_fail3540
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!from", rx1282_pos
  rxscan1283_scan3545:
    nqp_rxmark rx1282_bstack, rxscan1283_loop3544, rx1282_pos, 0
  rxscan1283_done3546:
    add $I11, rx1282_pos, 1
    gt $I11, rx1282_eos, rx1282_fail3540
    substr $S10, rx1282_tgt, rx1282_pos, 1
    ne $S10, ucs4:":", rx1282_fail3540
    add rx1282_pos, 1
    .const 'Sub' $P5001 = 'cuid_224_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!pos", rx1282_pos
    $P11 = rx1282_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1282_curclass, "$!pos"
    lt $I11, 0, rx1282_fail3540
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!pos", rx1282_pos
    $P11 = rx1282_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1282_curclass, "$!pos"
    lt $I11, 0, rx1282_fail3540
    nqp_rxmark rx1282_bstack, rxsubrule1286_pass3557, -1, 0
  rxsubrule1286_pass3557:
    rx1282_cstack = rx1282_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1282_pos, $P11, rx1282_curclass, "$!pos"
    repr_bind_attr_int rx1282_cur, rx1282_curclass, "$!pos", rx1282_pos
    $P11 = rx1282_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1282_curclass, "$!pos"
    lt $I11, 0, rx1282_fail3540
    repr_get_attr_int rx1282_pos, $P11, rx1282_curclass, "$!pos"
    add $I11, rx1282_pos, 1
    gt $I11, rx1282_eos, rx1282_fail3540
    substr $S10, rx1282_tgt, rx1282_pos, 1
    ne $S10, ucs4:";", rx1282_fail3540
    add rx1282_pos, 1
    rx1282_cur."!cursor_pass"(rx1282_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1282_cur)
  rx1282_restart3539:
    repr_get_attr_obj rx1282_cstack, rx1282_cur, rx1282_curclass, "$!cstack"
  rx1282_fail3540:
    unless rx1282_bstack, rx1282_done3538
    pop $I19, rx1282_bstack
    if_null rx1282_cstack, rx1282_cstack_done3543
    unless rx1282_cstack, rx1282_cstack_done3543
    dec $I19
    set $P11, rx1282_cstack[$I19]
  rx1282_cstack_done3543:
    pop rx1282_rep, rx1282_bstack
    pop rx1282_pos, rx1282_bstack
    pop $I19, rx1282_bstack
    lt rx1282_pos, -1, rx1282_done3538
    lt rx1282_pos, 0, rx1282_fail3540
    eq $I19, 0, rx1282_fail3540
    nqp_islist $I20, rx1282_cstack
    unless $I20, rx1282_jump3541
    elements $I18, rx1282_bstack
    le $I18, 0, rx1282_cut3542
    dec $I18
    set $I18, rx1282_bstack[$I18]
  rx1282_cut3542:
    assign rx1282_cstack, $I18
  rx1282_jump3541:
    jump $I19
  rx1282_done3538:
    rx1282_cur."!cursor_fail"()
    .return (rx1282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1360232768.755") :anon :lex :outer("cuid_223_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1284_tgt
    .local int rx1284_pos
    .local int rx1284_off
    .local int rx1284_eos
    .local int rx1284_rep
    .local pmc rx1284_cur
    .local pmc rx1284_curclass
    .local pmc rx1284_bstack
    .local pmc rx1284_cstack
    (rx1284_cur, rx1284_tgt, rx1284_pos, rx1284_curclass, rx1284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1284_cur
    length rx1284_eos, rx1284_tgt
    eq $I19, 1, rx1284_restart3549
    gt rx1284_pos, rx1284_eos, rx1284_fail3550
    repr_get_attr_int $I11, self, rx1284_curclass, "$!from"
    ne $I11, -1, rxscan1285_done3556
    goto rxscan1285_scan3555
  rxscan1285_loop3554:
    inc rx1284_pos
    gt rx1284_pos, rx1284_eos, rx1284_fail3550
    repr_bind_attr_int rx1284_cur, rx1284_curclass, "$!from", rx1284_pos
  rxscan1285_scan3555:
    nqp_rxmark rx1284_bstack, rxscan1285_loop3554, rx1284_pos, 0
  rxscan1285_done3556:
    add $I11, rx1284_pos, 2
    gt $I11, rx1284_eos, rx1284_fail3550
    substr $S10, rx1284_tgt, rx1284_pos, 2
    ne $S10, ucs4:"my", rx1284_fail3550
    add rx1284_pos, 2
    rx1284_cur."!cursor_pass"(rx1284_pos, 'backtrack'=>1)
    .return (rx1284_cur)
  rx1284_restart3549:
    repr_get_attr_obj rx1284_cstack, rx1284_cur, rx1284_curclass, "$!cstack"
  rx1284_fail3550:
    unless rx1284_bstack, rx1284_done3548
    pop $I19, rx1284_bstack
    if_null rx1284_cstack, rx1284_cstack_done3553
    unless rx1284_cstack, rx1284_cstack_done3553
    dec $I19
    set $P11, rx1284_cstack[$I19]
  rx1284_cstack_done3553:
    pop rx1284_rep, rx1284_bstack
    pop rx1284_pos, rx1284_bstack
    pop $I19, rx1284_bstack
    lt rx1284_pos, -1, rx1284_done3548
    lt rx1284_pos, 0, rx1284_fail3550
    eq $I19, 0, rx1284_fail3550
    nqp_islist $I20, rx1284_cstack
    unless $I20, rx1284_jump3551
    elements $I18, rx1284_bstack
    le $I18, 0, rx1284_cut3552
    dec $I18
    set $I18, rx1284_bstack[$I18]
  rx1284_cut3552:
    assign rx1284_cstack, $I18
  rx1284_jump3551:
    jump $I19
  rx1284_done3548:
    rx1284_cur."!cursor_fail"()
    .return (rx1284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_225_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1393
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1288_tgt
    .local int rx1288_pos
    .local int rx1288_off
    .local int rx1288_eos
    .local int rx1288_rep
    .local pmc rx1288_cur
    .local pmc rx1288_curclass
    .local pmc rx1288_bstack
    .local pmc rx1288_cstack
    (rx1288_cur, rx1288_tgt, rx1288_pos, rx1288_curclass, rx1288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1288_cur
    length rx1288_eos, rx1288_tgt
    eq $I19, 1, rx1288_restart3561
    gt rx1288_pos, rx1288_eos, rx1288_fail3562
    repr_get_attr_int $I11, self, rx1288_curclass, "$!from"
    ne $I11, -1, rxscan1289_done3568
    goto rxscan1289_scan3567
  rxscan1289_loop3566:
    inc rx1288_pos
    gt rx1288_pos, rx1288_eos, rx1288_fail3562
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!from", rx1288_pos
  rxscan1289_scan3567:
    nqp_rxmark rx1288_bstack, rxscan1289_loop3566, rx1288_pos, 0
  rxscan1289_done3568:
    ge rx1288_pos, rx1288_eos, rx1288_fail3562
    substr $S11, rx1288_tgt, rx1288_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1288_fail3562
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!pos", rx1288_pos
    $P11 = rx1288_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1288_curclass, "$!pos"
    lt $I11, 0, rx1288_fail3562
    nqp_rxmark rx1288_bstack, rxsubrule1290_pass3569, -1, 0
  rxsubrule1290_pass3569:
    rx1288_cstack = rx1288_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1288_pos, $P11, rx1288_curclass, "$!pos"
    rx1288_cur."!cursor_pass"(rx1288_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1288_cur)
  rx1288_restart3561:
    repr_get_attr_obj rx1288_cstack, rx1288_cur, rx1288_curclass, "$!cstack"
  rx1288_fail3562:
    unless rx1288_bstack, rx1288_done3560
    pop $I19, rx1288_bstack
    if_null rx1288_cstack, rx1288_cstack_done3565
    unless rx1288_cstack, rx1288_cstack_done3565
    dec $I19
    set $P11, rx1288_cstack[$I19]
  rx1288_cstack_done3565:
    pop rx1288_rep, rx1288_bstack
    pop rx1288_pos, rx1288_bstack
    pop $I19, rx1288_bstack
    lt rx1288_pos, -1, rx1288_done3560
    lt rx1288_pos, 0, rx1288_fail3562
    eq $I19, 0, rx1288_fail3562
    nqp_islist $I20, rx1288_cstack
    unless $I20, rx1288_jump3563
    elements $I18, rx1288_bstack
    le $I18, 0, rx1288_cut3564
    dec $I18
    set $I18, rx1288_bstack[$I18]
  rx1288_cut3564:
    assign rx1288_cstack, $I18
  rx1288_jump3563:
    jump $I19
  rx1288_done3560:
    rx1288_cur."!cursor_fail"()
    .return (rx1288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_226_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1397
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1360232768.755' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1291_tgt
    .local int rx1291_pos
    .local int rx1291_off
    .local int rx1291_eos
    .local int rx1291_rep
    .local pmc rx1291_cur
    .local pmc rx1291_curclass
    .local pmc rx1291_bstack
    .local pmc rx1291_cstack
    (rx1291_cur, rx1291_tgt, rx1291_pos, rx1291_curclass, rx1291_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1291_cur
    length rx1291_eos, rx1291_tgt
    eq $I19, 1, rx1291_restart3572
    gt rx1291_pos, rx1291_eos, rx1291_fail3573
    repr_get_attr_int $I11, self, rx1291_curclass, "$!from"
    ne $I11, -1, rxscan1292_done3579
    goto rxscan1292_scan3578
  rxscan1292_loop3577:
    inc rx1291_pos
    gt rx1291_pos, rx1291_eos, rx1291_fail3573
    repr_bind_attr_int rx1291_cur, rx1291_curclass, "$!from", rx1291_pos
  rxscan1292_scan3578:
    nqp_rxmark rx1291_bstack, rxscan1292_loop3577, rx1291_pos, 0
  rxscan1292_done3579:
    .const 'Sub' $P5001 = 'cuid_227_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1291_cur, rx1291_curclass, "$!pos", rx1291_pos
    $P11 = rx1291_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1291_curclass, "$!pos"
    lt $I11, 0, rx1291_fail3573
    repr_bind_attr_int rx1291_cur, rx1291_curclass, "$!pos", rx1291_pos
    $P11 = rx1291_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1291_curclass, "$!pos"
    lt $I11, 0, rx1291_fail3573
    nqp_rxmark rx1291_bstack, rxsubrule1297_pass3594, -1, 0
  rxsubrule1297_pass3594:
    rx1291_cstack = rx1291_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1291_pos, $P11, rx1291_curclass, "$!pos"
    rx1291_cur."!cursor_pass"(rx1291_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1291_cur)
  rx1291_restart3572:
    repr_get_attr_obj rx1291_cstack, rx1291_cur, rx1291_curclass, "$!cstack"
  rx1291_fail3573:
    unless rx1291_bstack, rx1291_done3571
    pop $I19, rx1291_bstack
    if_null rx1291_cstack, rx1291_cstack_done3576
    unless rx1291_cstack, rx1291_cstack_done3576
    dec $I19
    set $P11, rx1291_cstack[$I19]
  rx1291_cstack_done3576:
    pop rx1291_rep, rx1291_bstack
    pop rx1291_pos, rx1291_bstack
    pop $I19, rx1291_bstack
    lt rx1291_pos, -1, rx1291_done3571
    lt rx1291_pos, 0, rx1291_fail3573
    eq $I19, 0, rx1291_fail3573
    nqp_islist $I20, rx1291_cstack
    unless $I20, rx1291_jump3574
    elements $I18, rx1291_bstack
    le $I18, 0, rx1291_cut3575
    dec $I18
    set $I18, rx1291_bstack[$I18]
  rx1291_cut3575:
    assign rx1291_cstack, $I18
  rx1291_jump3574:
    jump $I19
  rx1291_done3571:
    rx1291_cur."!cursor_fail"()
    .return (rx1291_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1360232768.755") :anon :lex :outer("cuid_226_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1293_tgt
    .local int rx1293_pos
    .local int rx1293_off
    .local int rx1293_eos
    .local int rx1293_rep
    .local pmc rx1293_cur
    .local pmc rx1293_curclass
    .local pmc rx1293_bstack
    .local pmc rx1293_cstack
    (rx1293_cur, rx1293_tgt, rx1293_pos, rx1293_curclass, rx1293_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1293_cur
    length rx1293_eos, rx1293_tgt
    eq $I19, 1, rx1293_restart3582
    gt rx1293_pos, rx1293_eos, rx1293_fail3583
    repr_get_attr_int $I11, self, rx1293_curclass, "$!from"
    ne $I11, -1, rxscan1294_done3589
    goto rxscan1294_scan3588
  rxscan1294_loop3587:
    inc rx1293_pos
    gt rx1293_pos, rx1293_eos, rx1293_fail3583
    repr_bind_attr_int rx1293_cur, rx1293_curclass, "$!from", rx1293_pos
  rxscan1294_scan3588:
    nqp_rxmark rx1293_bstack, rxscan1294_loop3587, rx1293_pos, 0
  rxscan1294_done3589:
    repr_bind_attr_int rx1293_cur, rx1293_curclass, "$!pos", rx1293_pos
    $P11 = rx1293_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx1293_curclass, "$!pos"
    lt $I11, 0, rx1293_fail3583
    nqp_rxmark rx1293_bstack, rxsubrule1295_pass3590, -1, 0
  rxsubrule1295_pass3590:
    rx1293_cstack = rx1293_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx1293_pos, $P11, rx1293_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1296_03592
    nqp_push_label $P11, alt1296_13593
    nqp_rxmark rx1293_bstack, alt1296_end3591, -1, 0
    rx1293_cur."!alt"(rx1293_pos, "alt_nfa__39_1360232772.004", $P11)
    goto rx1293_fail3583
  alt1296_03592:
    ge rx1293_pos, rx1293_eos, rx1293_fail3583
    is_cclass $I11, .CCLASS_WORD, rx1293_tgt, rx1293_pos
    if $I11, rx1293_fail3583
    add rx1293_pos, 1
    ge rx1293_pos, rx1293_eos, rx1293_fail3583
    is_cclass $I11, .CCLASS_WORD, rx1293_tgt, rx1293_pos
    unless $I11, rx1293_fail3583
    add rx1293_pos, 1
    goto alt1296_end3591
  alt1296_13593:
    ge rx1293_pos, rx1293_eos, rx1293_fail3583
    is_cclass $I11, .CCLASS_WORD, rx1293_tgt, rx1293_pos
    unless $I11, rx1293_fail3583
    add rx1293_pos, 1
    goto alt1296_end3591
  alt1296_end3591:
    nqp_rxcommit rx1293_bstack, alt1296_end3591
    rx1293_cur."!cursor_pass"(rx1293_pos, 'backtrack'=>1)
    .return (rx1293_cur)
  rx1293_restart3582:
    repr_get_attr_obj rx1293_cstack, rx1293_cur, rx1293_curclass, "$!cstack"
  rx1293_fail3583:
    unless rx1293_bstack, rx1293_done3581
    pop $I19, rx1293_bstack
    if_null rx1293_cstack, rx1293_cstack_done3586
    unless rx1293_cstack, rx1293_cstack_done3586
    dec $I19
    set $P11, rx1293_cstack[$I19]
  rx1293_cstack_done3586:
    pop rx1293_rep, rx1293_bstack
    pop rx1293_pos, rx1293_bstack
    pop $I19, rx1293_bstack
    lt rx1293_pos, -1, rx1293_done3581
    lt rx1293_pos, 0, rx1293_fail3583
    eq $I19, 0, rx1293_fail3583
    nqp_islist $I20, rx1293_cstack
    unless $I20, rx1293_jump3584
    elements $I18, rx1293_bstack
    le $I18, 0, rx1293_cut3585
    dec $I18
    set $I18, rx1293_bstack[$I18]
  rx1293_cut3585:
    assign rx1293_cstack, $I18
  rx1293_jump3584:
    jump $I19
  rx1293_done3581:
    rx1293_cur."!cursor_fail"()
    .return (rx1293_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_228_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1401
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1298_tgt
    .local int rx1298_pos
    .local int rx1298_off
    .local int rx1298_eos
    .local int rx1298_rep
    .local pmc rx1298_cur
    .local pmc rx1298_curclass
    .local pmc rx1298_bstack
    .local pmc rx1298_cstack
    (rx1298_cur, rx1298_tgt, rx1298_pos, rx1298_curclass, rx1298_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1298_cur
    length rx1298_eos, rx1298_tgt
    eq $I19, 1, rx1298_restart3597
    gt rx1298_pos, rx1298_eos, rx1298_fail3598
    repr_get_attr_int $I11, self, rx1298_curclass, "$!from"
    ne $I11, -1, rxscan1299_done3604
    goto rxscan1299_scan3603
  rxscan1299_loop3602:
    inc rx1298_pos
    gt rx1298_pos, rx1298_eos, rx1298_fail3598
    repr_bind_attr_int rx1298_cur, rx1298_curclass, "$!from", rx1298_pos
  rxscan1299_scan3603:
    nqp_rxmark rx1298_bstack, rxscan1299_loop3602, rx1298_pos, 0
  rxscan1299_done3604:
    ge rx1298_pos, rx1298_eos, rx1298_fail3598
    substr $S11, rx1298_tgt, rx1298_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1298_fail3598
    repr_bind_attr_int rx1298_cur, rx1298_curclass, "$!pos", rx1298_pos
    $P11 = rx1298_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1298_curclass, "$!pos"
    lt $I11, 0, rx1298_fail3598
    nqp_rxmark rx1298_bstack, rxsubrule1300_pass3605, -1, 0
  rxsubrule1300_pass3605:
    rx1298_cstack = rx1298_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1298_pos, $P11, rx1298_curclass, "$!pos"
    rx1298_cur."!cursor_pass"(rx1298_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1298_cur)
  rx1298_restart3597:
    repr_get_attr_obj rx1298_cstack, rx1298_cur, rx1298_curclass, "$!cstack"
  rx1298_fail3598:
    unless rx1298_bstack, rx1298_done3596
    pop $I19, rx1298_bstack
    if_null rx1298_cstack, rx1298_cstack_done3601
    unless rx1298_cstack, rx1298_cstack_done3601
    dec $I19
    set $P11, rx1298_cstack[$I19]
  rx1298_cstack_done3601:
    pop rx1298_rep, rx1298_bstack
    pop rx1298_pos, rx1298_bstack
    pop $I19, rx1298_bstack
    lt rx1298_pos, -1, rx1298_done3596
    lt rx1298_pos, 0, rx1298_fail3598
    eq $I19, 0, rx1298_fail3598
    nqp_islist $I20, rx1298_cstack
    unless $I20, rx1298_jump3599
    elements $I18, rx1298_bstack
    le $I18, 0, rx1298_cut3600
    dec $I18
    set $I18, rx1298_bstack[$I18]
  rx1298_cut3600:
    assign rx1298_cstack, $I18
  rx1298_jump3599:
    jump $I19
  rx1298_done3596:
    rx1298_cur."!cursor_fail"()
    .return (rx1298_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_229_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1405
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_230_1360232768.755' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_231_1360232768.755' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1301_tgt
    .local int rx1301_pos
    .local int rx1301_off
    .local int rx1301_eos
    .local int rx1301_rep
    .local pmc rx1301_cur
    .local pmc rx1301_curclass
    .local pmc rx1301_bstack
    .local pmc rx1301_cstack
    (rx1301_cur, rx1301_tgt, rx1301_pos, rx1301_curclass, rx1301_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1301_cur
    length rx1301_eos, rx1301_tgt
    eq $I19, 1, rx1301_restart3608
    gt rx1301_pos, rx1301_eos, rx1301_fail3609
    repr_get_attr_int $I11, self, rx1301_curclass, "$!from"
    ne $I11, -1, rxscan1302_done3615
    goto rxscan1302_scan3614
  rxscan1302_loop3613:
    inc rx1301_pos
    gt rx1301_pos, rx1301_eos, rx1301_fail3609
    repr_bind_attr_int rx1301_cur, rx1301_curclass, "$!from", rx1301_pos
  rxscan1302_scan3614:
    nqp_rxmark rx1301_bstack, rxscan1302_loop3613, rx1301_pos, 0
  rxscan1302_done3615:
    add $I11, rx1301_pos, 1
    gt $I11, rx1301_eos, rx1301_fail3609
    substr $S10, rx1301_tgt, rx1301_pos, 1
    ne $S10, ucs4:"?", rx1301_fail3609
    add rx1301_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1303_03617
    nqp_push_label $P11, alt1303_13628
    nqp_rxmark rx1301_bstack, alt1303_end3616, -1, 0
    rx1301_cur."!alt"(rx1301_pos, "alt_nfa__40_1360232772.026", $P11)
    goto rx1301_fail3609
  alt1303_03617:
    .const 'Sub' $P5001 = 'cuid_230_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1301_cur, rx1301_curclass, "$!pos", rx1301_pos
    $P11 = rx1301_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1301_curclass, "$!pos"
    lt $I11, 0, rx1301_fail3609
    goto alt1303_end3616
  alt1303_13628:
    .const 'Sub' $P5002 = 'cuid_231_1360232768.755' 
    capture_lex $P5002
    repr_bind_attr_int rx1301_cur, rx1301_curclass, "$!pos", rx1301_pos
    $P11 = rx1301_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1301_curclass, "$!pos"
    ge $I11, 0, rx1301_fail3609
    repr_bind_attr_int rx1301_cur, rx1301_curclass, "$!pos", rx1301_pos
    $P11 = rx1301_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1301_curclass, "$!pos"
    lt $I11, 0, rx1301_fail3609
    nqp_rxmark rx1301_bstack, rxsubrule1308_pass3639, -1, 0
  rxsubrule1308_pass3639:
    rx1301_cstack = rx1301_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1301_pos, $P11, rx1301_curclass, "$!pos"
    goto alt1303_end3616
  alt1303_end3616:
    nqp_rxcommit rx1301_bstack, alt1303_end3616
    rx1301_cur."!cursor_pass"(rx1301_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1301_cur)
  rx1301_restart3608:
    repr_get_attr_obj rx1301_cstack, rx1301_cur, rx1301_curclass, "$!cstack"
  rx1301_fail3609:
    unless rx1301_bstack, rx1301_done3607
    pop $I19, rx1301_bstack
    if_null rx1301_cstack, rx1301_cstack_done3612
    unless rx1301_cstack, rx1301_cstack_done3612
    dec $I19
    set $P11, rx1301_cstack[$I19]
  rx1301_cstack_done3612:
    pop rx1301_rep, rx1301_bstack
    pop rx1301_pos, rx1301_bstack
    pop $I19, rx1301_bstack
    lt rx1301_pos, -1, rx1301_done3607
    lt rx1301_pos, 0, rx1301_fail3609
    eq $I19, 0, rx1301_fail3609
    nqp_islist $I20, rx1301_cstack
    unless $I20, rx1301_jump3610
    elements $I18, rx1301_bstack
    le $I18, 0, rx1301_cut3611
    dec $I18
    set $I18, rx1301_bstack[$I18]
  rx1301_cut3611:
    assign rx1301_cstack, $I18
  rx1301_jump3610:
    jump $I19
  rx1301_done3607:
    rx1301_cur."!cursor_fail"()
    .return (rx1301_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1360232768.755") :anon :lex :outer("cuid_229_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1304_tgt
    .local int rx1304_pos
    .local int rx1304_off
    .local int rx1304_eos
    .local int rx1304_rep
    .local pmc rx1304_cur
    .local pmc rx1304_curclass
    .local pmc rx1304_bstack
    .local pmc rx1304_cstack
    (rx1304_cur, rx1304_tgt, rx1304_pos, rx1304_curclass, rx1304_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1304_cur
    length rx1304_eos, rx1304_tgt
    eq $I19, 1, rx1304_restart3620
    gt rx1304_pos, rx1304_eos, rx1304_fail3621
    repr_get_attr_int $I11, self, rx1304_curclass, "$!from"
    ne $I11, -1, rxscan1305_done3627
    goto rxscan1305_scan3626
  rxscan1305_loop3625:
    inc rx1304_pos
    gt rx1304_pos, rx1304_eos, rx1304_fail3621
    repr_bind_attr_int rx1304_cur, rx1304_curclass, "$!from", rx1304_pos
  rxscan1305_scan3626:
    nqp_rxmark rx1304_bstack, rxscan1305_loop3625, rx1304_pos, 0
  rxscan1305_done3627:
    add $I11, rx1304_pos, 1
    gt $I11, rx1304_eos, rx1304_fail3621
    substr $S10, rx1304_tgt, rx1304_pos, 1
    ne $S10, ucs4:">", rx1304_fail3621
    add rx1304_pos, 1
    rx1304_cur."!cursor_pass"(rx1304_pos, 'backtrack'=>1)
    .return (rx1304_cur)
  rx1304_restart3620:
    repr_get_attr_obj rx1304_cstack, rx1304_cur, rx1304_curclass, "$!cstack"
  rx1304_fail3621:
    unless rx1304_bstack, rx1304_done3619
    pop $I19, rx1304_bstack
    if_null rx1304_cstack, rx1304_cstack_done3624
    unless rx1304_cstack, rx1304_cstack_done3624
    dec $I19
    set $P11, rx1304_cstack[$I19]
  rx1304_cstack_done3624:
    pop rx1304_rep, rx1304_bstack
    pop rx1304_pos, rx1304_bstack
    pop $I19, rx1304_bstack
    lt rx1304_pos, -1, rx1304_done3619
    lt rx1304_pos, 0, rx1304_fail3621
    eq $I19, 0, rx1304_fail3621
    nqp_islist $I20, rx1304_cstack
    unless $I20, rx1304_jump3622
    elements $I18, rx1304_bstack
    le $I18, 0, rx1304_cut3623
    dec $I18
    set $I18, rx1304_bstack[$I18]
  rx1304_cut3623:
    assign rx1304_cstack, $I18
  rx1304_jump3622:
    jump $I19
  rx1304_done3619:
    rx1304_cur."!cursor_fail"()
    .return (rx1304_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1360232768.755") :anon :lex :outer("cuid_229_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1306_tgt
    .local int rx1306_pos
    .local int rx1306_off
    .local int rx1306_eos
    .local int rx1306_rep
    .local pmc rx1306_cur
    .local pmc rx1306_curclass
    .local pmc rx1306_bstack
    .local pmc rx1306_cstack
    (rx1306_cur, rx1306_tgt, rx1306_pos, rx1306_curclass, rx1306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1306_cur
    length rx1306_eos, rx1306_tgt
    eq $I19, 1, rx1306_restart3631
    gt rx1306_pos, rx1306_eos, rx1306_fail3632
    repr_get_attr_int $I11, self, rx1306_curclass, "$!from"
    ne $I11, -1, rxscan1307_done3638
    goto rxscan1307_scan3637
  rxscan1307_loop3636:
    inc rx1306_pos
    gt rx1306_pos, rx1306_eos, rx1306_fail3632
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!from", rx1306_pos
  rxscan1307_scan3637:
    nqp_rxmark rx1306_bstack, rxscan1307_loop3636, rx1306_pos, 0
  rxscan1307_done3638:
    add $I11, rx1306_pos, 1
    gt $I11, rx1306_eos, rx1306_fail3632
    substr $S10, rx1306_tgt, rx1306_pos, 1
    ne $S10, ucs4:"{", rx1306_fail3632
    add rx1306_pos, 1
    rx1306_cur."!cursor_pass"(rx1306_pos, 'backtrack'=>1)
    .return (rx1306_cur)
  rx1306_restart3631:
    repr_get_attr_obj rx1306_cstack, rx1306_cur, rx1306_curclass, "$!cstack"
  rx1306_fail3632:
    unless rx1306_bstack, rx1306_done3630
    pop $I19, rx1306_bstack
    if_null rx1306_cstack, rx1306_cstack_done3635
    unless rx1306_cstack, rx1306_cstack_done3635
    dec $I19
    set $P11, rx1306_cstack[$I19]
  rx1306_cstack_done3635:
    pop rx1306_rep, rx1306_bstack
    pop rx1306_pos, rx1306_bstack
    pop $I19, rx1306_bstack
    lt rx1306_pos, -1, rx1306_done3630
    lt rx1306_pos, 0, rx1306_fail3632
    eq $I19, 0, rx1306_fail3632
    nqp_islist $I20, rx1306_cstack
    unless $I20, rx1306_jump3633
    elements $I18, rx1306_bstack
    le $I18, 0, rx1306_cut3634
    dec $I18
    set $I18, rx1306_bstack[$I18]
  rx1306_cut3634:
    assign rx1306_cstack, $I18
  rx1306_jump3633:
    jump $I19
  rx1306_done3630:
    rx1306_cur."!cursor_fail"()
    .return (rx1306_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_232_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1406
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1360232768.755' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1360232768.755' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1309_tgt
    .local int rx1309_pos
    .local int rx1309_off
    .local int rx1309_eos
    .local int rx1309_rep
    .local pmc rx1309_cur
    .local pmc rx1309_curclass
    .local pmc rx1309_bstack
    .local pmc rx1309_cstack
    (rx1309_cur, rx1309_tgt, rx1309_pos, rx1309_curclass, rx1309_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1309_cur
    length rx1309_eos, rx1309_tgt
    eq $I19, 1, rx1309_restart3642
    gt rx1309_pos, rx1309_eos, rx1309_fail3643
    repr_get_attr_int $I11, self, rx1309_curclass, "$!from"
    ne $I11, -1, rxscan1310_done3649
    goto rxscan1310_scan3648
  rxscan1310_loop3647:
    inc rx1309_pos
    gt rx1309_pos, rx1309_eos, rx1309_fail3643
    repr_bind_attr_int rx1309_cur, rx1309_curclass, "$!from", rx1309_pos
  rxscan1310_scan3648:
    nqp_rxmark rx1309_bstack, rxscan1310_loop3647, rx1309_pos, 0
  rxscan1310_done3649:
    add $I11, rx1309_pos, 1
    gt $I11, rx1309_eos, rx1309_fail3643
    substr $S10, rx1309_tgt, rx1309_pos, 1
    ne $S10, ucs4:"!", rx1309_fail3643
    add rx1309_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1311_03651
    nqp_push_label $P11, alt1311_13662
    nqp_rxmark rx1309_bstack, alt1311_end3650, -1, 0
    rx1309_cur."!alt"(rx1309_pos, "alt_nfa__41_1360232772.038", $P11)
    goto rx1309_fail3643
  alt1311_03651:
    .const 'Sub' $P5001 = 'cuid_233_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1309_cur, rx1309_curclass, "$!pos", rx1309_pos
    $P11 = rx1309_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1309_curclass, "$!pos"
    lt $I11, 0, rx1309_fail3643
    goto alt1311_end3650
  alt1311_13662:
    .const 'Sub' $P5002 = 'cuid_234_1360232768.755' 
    capture_lex $P5002
    repr_bind_attr_int rx1309_cur, rx1309_curclass, "$!pos", rx1309_pos
    $P11 = rx1309_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1309_curclass, "$!pos"
    ge $I11, 0, rx1309_fail3643
    repr_bind_attr_int rx1309_cur, rx1309_curclass, "$!pos", rx1309_pos
    $P11 = rx1309_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1309_curclass, "$!pos"
    lt $I11, 0, rx1309_fail3643
    nqp_rxmark rx1309_bstack, rxsubrule1316_pass3673, -1, 0
  rxsubrule1316_pass3673:
    rx1309_cstack = rx1309_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1309_pos, $P11, rx1309_curclass, "$!pos"
    goto alt1311_end3650
  alt1311_end3650:
    nqp_rxcommit rx1309_bstack, alt1311_end3650
    rx1309_cur."!cursor_pass"(rx1309_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1309_cur)
  rx1309_restart3642:
    repr_get_attr_obj rx1309_cstack, rx1309_cur, rx1309_curclass, "$!cstack"
  rx1309_fail3643:
    unless rx1309_bstack, rx1309_done3641
    pop $I19, rx1309_bstack
    if_null rx1309_cstack, rx1309_cstack_done3646
    unless rx1309_cstack, rx1309_cstack_done3646
    dec $I19
    set $P11, rx1309_cstack[$I19]
  rx1309_cstack_done3646:
    pop rx1309_rep, rx1309_bstack
    pop rx1309_pos, rx1309_bstack
    pop $I19, rx1309_bstack
    lt rx1309_pos, -1, rx1309_done3641
    lt rx1309_pos, 0, rx1309_fail3643
    eq $I19, 0, rx1309_fail3643
    nqp_islist $I20, rx1309_cstack
    unless $I20, rx1309_jump3644
    elements $I18, rx1309_bstack
    le $I18, 0, rx1309_cut3645
    dec $I18
    set $I18, rx1309_bstack[$I18]
  rx1309_cut3645:
    assign rx1309_cstack, $I18
  rx1309_jump3644:
    jump $I19
  rx1309_done3641:
    rx1309_cur."!cursor_fail"()
    .return (rx1309_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1360232768.755") :anon :lex :outer("cuid_232_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1312_tgt
    .local int rx1312_pos
    .local int rx1312_off
    .local int rx1312_eos
    .local int rx1312_rep
    .local pmc rx1312_cur
    .local pmc rx1312_curclass
    .local pmc rx1312_bstack
    .local pmc rx1312_cstack
    (rx1312_cur, rx1312_tgt, rx1312_pos, rx1312_curclass, rx1312_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1312_cur
    length rx1312_eos, rx1312_tgt
    eq $I19, 1, rx1312_restart3654
    gt rx1312_pos, rx1312_eos, rx1312_fail3655
    repr_get_attr_int $I11, self, rx1312_curclass, "$!from"
    ne $I11, -1, rxscan1313_done3661
    goto rxscan1313_scan3660
  rxscan1313_loop3659:
    inc rx1312_pos
    gt rx1312_pos, rx1312_eos, rx1312_fail3655
    repr_bind_attr_int rx1312_cur, rx1312_curclass, "$!from", rx1312_pos
  rxscan1313_scan3660:
    nqp_rxmark rx1312_bstack, rxscan1313_loop3659, rx1312_pos, 0
  rxscan1313_done3661:
    add $I11, rx1312_pos, 1
    gt $I11, rx1312_eos, rx1312_fail3655
    substr $S10, rx1312_tgt, rx1312_pos, 1
    ne $S10, ucs4:">", rx1312_fail3655
    add rx1312_pos, 1
    rx1312_cur."!cursor_pass"(rx1312_pos, 'backtrack'=>1)
    .return (rx1312_cur)
  rx1312_restart3654:
    repr_get_attr_obj rx1312_cstack, rx1312_cur, rx1312_curclass, "$!cstack"
  rx1312_fail3655:
    unless rx1312_bstack, rx1312_done3653
    pop $I19, rx1312_bstack
    if_null rx1312_cstack, rx1312_cstack_done3658
    unless rx1312_cstack, rx1312_cstack_done3658
    dec $I19
    set $P11, rx1312_cstack[$I19]
  rx1312_cstack_done3658:
    pop rx1312_rep, rx1312_bstack
    pop rx1312_pos, rx1312_bstack
    pop $I19, rx1312_bstack
    lt rx1312_pos, -1, rx1312_done3653
    lt rx1312_pos, 0, rx1312_fail3655
    eq $I19, 0, rx1312_fail3655
    nqp_islist $I20, rx1312_cstack
    unless $I20, rx1312_jump3656
    elements $I18, rx1312_bstack
    le $I18, 0, rx1312_cut3657
    dec $I18
    set $I18, rx1312_bstack[$I18]
  rx1312_cut3657:
    assign rx1312_cstack, $I18
  rx1312_jump3656:
    jump $I19
  rx1312_done3653:
    rx1312_cur."!cursor_fail"()
    .return (rx1312_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1360232768.755") :anon :lex :outer("cuid_232_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1314_tgt
    .local int rx1314_pos
    .local int rx1314_off
    .local int rx1314_eos
    .local int rx1314_rep
    .local pmc rx1314_cur
    .local pmc rx1314_curclass
    .local pmc rx1314_bstack
    .local pmc rx1314_cstack
    (rx1314_cur, rx1314_tgt, rx1314_pos, rx1314_curclass, rx1314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1314_cur
    length rx1314_eos, rx1314_tgt
    eq $I19, 1, rx1314_restart3665
    gt rx1314_pos, rx1314_eos, rx1314_fail3666
    repr_get_attr_int $I11, self, rx1314_curclass, "$!from"
    ne $I11, -1, rxscan1315_done3672
    goto rxscan1315_scan3671
  rxscan1315_loop3670:
    inc rx1314_pos
    gt rx1314_pos, rx1314_eos, rx1314_fail3666
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!from", rx1314_pos
  rxscan1315_scan3671:
    nqp_rxmark rx1314_bstack, rxscan1315_loop3670, rx1314_pos, 0
  rxscan1315_done3672:
    add $I11, rx1314_pos, 1
    gt $I11, rx1314_eos, rx1314_fail3666
    substr $S10, rx1314_tgt, rx1314_pos, 1
    ne $S10, ucs4:"{", rx1314_fail3666
    add rx1314_pos, 1
    rx1314_cur."!cursor_pass"(rx1314_pos, 'backtrack'=>1)
    .return (rx1314_cur)
  rx1314_restart3665:
    repr_get_attr_obj rx1314_cstack, rx1314_cur, rx1314_curclass, "$!cstack"
  rx1314_fail3666:
    unless rx1314_bstack, rx1314_done3664
    pop $I19, rx1314_bstack
    if_null rx1314_cstack, rx1314_cstack_done3669
    unless rx1314_cstack, rx1314_cstack_done3669
    dec $I19
    set $P11, rx1314_cstack[$I19]
  rx1314_cstack_done3669:
    pop rx1314_rep, rx1314_bstack
    pop rx1314_pos, rx1314_bstack
    pop $I19, rx1314_bstack
    lt rx1314_pos, -1, rx1314_done3664
    lt rx1314_pos, 0, rx1314_fail3666
    eq $I19, 0, rx1314_fail3666
    nqp_islist $I20, rx1314_cstack
    unless $I20, rx1314_jump3667
    elements $I18, rx1314_bstack
    le $I18, 0, rx1314_cut3668
    dec $I18
    set $I18, rx1314_bstack[$I18]
  rx1314_cut3668:
    assign rx1314_cstack, $I18
  rx1314_jump3667:
    jump $I19
  rx1314_done3664:
    rx1314_cur."!cursor_fail"()
    .return (rx1314_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_235_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1408
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_236_1360232768.755' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1317_tgt
    .local int rx1317_pos
    .local int rx1317_off
    .local int rx1317_eos
    .local int rx1317_rep
    .local pmc rx1317_cur
    .local pmc rx1317_curclass
    .local pmc rx1317_bstack
    .local pmc rx1317_cstack
    (rx1317_cur, rx1317_tgt, rx1317_pos, rx1317_curclass, rx1317_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1317_cur
    length rx1317_eos, rx1317_tgt
    eq $I19, 1, rx1317_restart3676
    gt rx1317_pos, rx1317_eos, rx1317_fail3677
    repr_get_attr_int $I11, self, rx1317_curclass, "$!from"
    ne $I11, -1, rxscan1318_done3683
    goto rxscan1318_scan3682
  rxscan1318_loop3681:
    inc rx1317_pos
    gt rx1317_pos, rx1317_eos, rx1317_fail3677
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!from", rx1317_pos
  rxscan1318_scan3682:
    nqp_rxmark rx1317_bstack, rxscan1318_loop3681, rx1317_pos, 0
  rxscan1318_done3683:
    nqp_rxmark rx1317_bstack, rxcap1319_fail3685, rx1317_pos, 0
    ge rx1317_pos, rx1317_eos, rx1317_fail3677
    substr $S11, rx1317_tgt, rx1317_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1317_fail3677
    inc rx1317_pos
    .const 'Sub' $P5001 = 'cuid_236_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3677
    nqp_rxpeek $I19, rx1317_bstack, rxcap1319_fail3685
    inc $I19
    set $I11, rx1317_bstack[$I19]
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1317_pos)
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "zw")
    goto rxcap1319_done3684
  rxcap1319_fail3685:
    goto rx1317_fail3677
  rxcap1319_done3684:
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3677
    nqp_rxmark rx1317_bstack, rxsubrule1322_pass3696, -1, 0
  rxsubrule1322_pass3696:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    rx1317_cur."!cursor_pass"(rx1317_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1317_cur)
  rx1317_restart3676:
    repr_get_attr_obj rx1317_cstack, rx1317_cur, rx1317_curclass, "$!cstack"
  rx1317_fail3677:
    unless rx1317_bstack, rx1317_done3675
    pop $I19, rx1317_bstack
    if_null rx1317_cstack, rx1317_cstack_done3680
    unless rx1317_cstack, rx1317_cstack_done3680
    dec $I19
    set $P11, rx1317_cstack[$I19]
  rx1317_cstack_done3680:
    pop rx1317_rep, rx1317_bstack
    pop rx1317_pos, rx1317_bstack
    pop $I19, rx1317_bstack
    lt rx1317_pos, -1, rx1317_done3675
    lt rx1317_pos, 0, rx1317_fail3677
    eq $I19, 0, rx1317_fail3677
    nqp_islist $I20, rx1317_cstack
    unless $I20, rx1317_jump3678
    elements $I18, rx1317_bstack
    le $I18, 0, rx1317_cut3679
    dec $I18
    set $I18, rx1317_bstack[$I18]
  rx1317_cut3679:
    assign rx1317_cstack, $I18
  rx1317_jump3678:
    jump $I19
  rx1317_done3675:
    rx1317_cur."!cursor_fail"()
    .return (rx1317_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1360232768.755") :anon :lex :outer("cuid_235_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1320_tgt
    .local int rx1320_pos
    .local int rx1320_off
    .local int rx1320_eos
    .local int rx1320_rep
    .local pmc rx1320_cur
    .local pmc rx1320_curclass
    .local pmc rx1320_bstack
    .local pmc rx1320_cstack
    (rx1320_cur, rx1320_tgt, rx1320_pos, rx1320_curclass, rx1320_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1320_cur
    length rx1320_eos, rx1320_tgt
    eq $I19, 1, rx1320_restart3688
    gt rx1320_pos, rx1320_eos, rx1320_fail3689
    repr_get_attr_int $I11, self, rx1320_curclass, "$!from"
    ne $I11, -1, rxscan1321_done3695
    goto rxscan1321_scan3694
  rxscan1321_loop3693:
    inc rx1320_pos
    gt rx1320_pos, rx1320_eos, rx1320_fail3689
    repr_bind_attr_int rx1320_cur, rx1320_curclass, "$!from", rx1320_pos
  rxscan1321_scan3694:
    nqp_rxmark rx1320_bstack, rxscan1321_loop3693, rx1320_pos, 0
  rxscan1321_done3695:
    add $I11, rx1320_pos, 1
    gt $I11, rx1320_eos, rx1320_fail3689
    substr $S10, rx1320_tgt, rx1320_pos, 1
    ne $S10, ucs4:"{", rx1320_fail3689
    add rx1320_pos, 1
    rx1320_cur."!cursor_pass"(rx1320_pos, 'backtrack'=>1)
    .return (rx1320_cur)
  rx1320_restart3688:
    repr_get_attr_obj rx1320_cstack, rx1320_cur, rx1320_curclass, "$!cstack"
  rx1320_fail3689:
    unless rx1320_bstack, rx1320_done3687
    pop $I19, rx1320_bstack
    if_null rx1320_cstack, rx1320_cstack_done3692
    unless rx1320_cstack, rx1320_cstack_done3692
    dec $I19
    set $P11, rx1320_cstack[$I19]
  rx1320_cstack_done3692:
    pop rx1320_rep, rx1320_bstack
    pop rx1320_pos, rx1320_bstack
    pop $I19, rx1320_bstack
    lt rx1320_pos, -1, rx1320_done3687
    lt rx1320_pos, 0, rx1320_fail3689
    eq $I19, 0, rx1320_fail3689
    nqp_islist $I20, rx1320_cstack
    unless $I20, rx1320_jump3690
    elements $I18, rx1320_bstack
    le $I18, 0, rx1320_cut3691
    dec $I18
    set $I18, rx1320_bstack[$I18]
  rx1320_cut3691:
    assign rx1320_cstack, $I18
  rx1320_jump3690:
    jump $I19
  rx1320_done3687:
    rx1320_cur."!cursor_fail"()
    .return (rx1320_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_237_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1412
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_238_1360232768.755' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1323_tgt
    .local int rx1323_pos
    .local int rx1323_off
    .local int rx1323_eos
    .local int rx1323_rep
    .local pmc rx1323_cur
    .local pmc rx1323_curclass
    .local pmc rx1323_bstack
    .local pmc rx1323_cstack
    (rx1323_cur, rx1323_tgt, rx1323_pos, rx1323_curclass, rx1323_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1323_cur
    length rx1323_eos, rx1323_tgt
    eq $I19, 1, rx1323_restart3699
    gt rx1323_pos, rx1323_eos, rx1323_fail3700
    repr_get_attr_int $I11, self, rx1323_curclass, "$!from"
    ne $I11, -1, rxscan1324_done3706
    goto rxscan1324_scan3705
  rxscan1324_loop3704:
    inc rx1323_pos
    gt rx1323_pos, rx1323_eos, rx1323_fail3700
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!from", rx1323_pos
  rxscan1324_scan3705:
    nqp_rxmark rx1323_bstack, rxscan1324_loop3704, rx1323_pos, 0
  rxscan1324_done3706:
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!pos", rx1323_pos
    $P11 = rx1323_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1323_curclass, "$!pos"
    lt $I11, 0, rx1323_fail3700
    nqp_rxmark rx1323_bstack, rxsubrule1325_pass3707, -1, 0
  rxsubrule1325_pass3707:
    rx1323_cstack = rx1323_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1323_pos, $P11, rx1323_curclass, "$!pos"
    nqp_rxmark rx1323_bstack, rxquantr1326_done3709, rx1323_pos, 0
  rxquantr1326_loop3708:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1327_03711
    nqp_push_label $P11, alt1327_13722
    nqp_push_label $P11, alt1327_23724
    nqp_push_label $P11, alt1327_33726
    nqp_push_label $P11, alt1327_43728
    nqp_rxmark rx1323_bstack, alt1327_end3710, -1, 0
    rx1323_cur."!alt"(rx1323_pos, "alt_nfa__42_1360232772.069", $P11)
    goto rx1323_fail3700
  alt1327_03711:
    .const 'Sub' $P5001 = 'cuid_238_1360232768.755' 
    capture_lex $P5001
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!pos", rx1323_pos
    $P11 = rx1323_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1323_curclass, "$!pos"
    lt $I11, 0, rx1323_fail3700
    goto alt1327_end3710
  alt1327_13722:
    add $I11, rx1323_pos, 1
    gt $I11, rx1323_eos, rx1323_fail3700
    substr $S10, rx1323_tgt, rx1323_pos, 1
    ne $S10, ucs4:"=", rx1323_fail3700
    add rx1323_pos, 1
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!pos", rx1323_pos
    $P11 = rx1323_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1323_curclass, "$!pos"
    lt $I11, 0, rx1323_fail3700
    nqp_rxmark rx1323_bstack, rxsubrule1330_pass3723, -1, 0
  rxsubrule1330_pass3723:
    rx1323_cstack = rx1323_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1323_pos, $P11, rx1323_curclass, "$!pos"
    goto alt1327_end3710
  alt1327_23724:
    add $I11, rx1323_pos, 1
    gt $I11, rx1323_eos, rx1323_fail3700
    substr $S10, rx1323_tgt, rx1323_pos, 1
    ne $S10, ucs4:":", rx1323_fail3700
    add rx1323_pos, 1
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!pos", rx1323_pos
    $P11 = rx1323_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1323_curclass, "$!pos"
    lt $I11, 0, rx1323_fail3700
    nqp_rxmark rx1323_bstack, rxsubrule1331_pass3725, -1, 0
  rxsubrule1331_pass3725:
    rx1323_cstack = rx1323_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1323_pos, $P11, rx1323_curclass, "$!pos"
    goto alt1327_end3710
  alt1327_33726:
    add $I11, rx1323_pos, 1
    gt $I11, rx1323_eos, rx1323_fail3700
    substr $S10, rx1323_tgt, rx1323_pos, 1
    ne $S10, ucs4:"(", rx1323_fail3700
    add rx1323_pos, 1
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!pos", rx1323_pos
    $P11 = rx1323_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1323_curclass, "$!pos"
    lt $I11, 0, rx1323_fail3700
    nqp_rxmark rx1323_bstack, rxsubrule1332_pass3727, -1, 0
  rxsubrule1332_pass3727:
    rx1323_cstack = rx1323_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1323_pos, $P11, rx1323_curclass, "$!pos"
    add $I11, rx1323_pos, 1
    gt $I11, rx1323_eos, rx1323_fail3700
    substr $S10, rx1323_tgt, rx1323_pos, 1
    ne $S10, ucs4:")", rx1323_fail3700
    add rx1323_pos, 1
    goto alt1327_end3710
  alt1327_43728:
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!pos", rx1323_pos
    $P11 = rx1323_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1323_curclass, "$!pos"
    lt $I11, 0, rx1323_fail3700
    repr_get_attr_int rx1323_pos, $P11, rx1323_curclass, "$!pos"
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!pos", rx1323_pos
    $P11 = rx1323_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1323_curclass, "$!pos"
    lt $I11, 0, rx1323_fail3700
    nqp_rxmark rx1323_bstack, rxsubrule1334_pass3730, -1, 0
  rxsubrule1334_pass3730:
    rx1323_cstack = rx1323_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1323_pos, $P11, rx1323_curclass, "$!pos"
    goto alt1327_end3710
  alt1327_end3710:
    nqp_rxpeek $I19, rx1323_bstack, rxquantr1326_done3709
    inc $I19
    inc $I19
    set rx1323_rep, rx1323_bstack[$I19]
    nqp_rxcommit rx1323_bstack, rxquantr1326_done3709
    inc rx1323_rep
  rxquantr1326_done3709:
    rx1323_cur."!cursor_pass"(rx1323_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1323_cur)
  rx1323_restart3699:
    repr_get_attr_obj rx1323_cstack, rx1323_cur, rx1323_curclass, "$!cstack"
  rx1323_fail3700:
    unless rx1323_bstack, rx1323_done3698
    pop $I19, rx1323_bstack
    if_null rx1323_cstack, rx1323_cstack_done3703
    unless rx1323_cstack, rx1323_cstack_done3703
    dec $I19
    set $P11, rx1323_cstack[$I19]
  rx1323_cstack_done3703:
    pop rx1323_rep, rx1323_bstack
    pop rx1323_pos, rx1323_bstack
    pop $I19, rx1323_bstack
    lt rx1323_pos, -1, rx1323_done3698
    lt rx1323_pos, 0, rx1323_fail3700
    eq $I19, 0, rx1323_fail3700
    nqp_islist $I20, rx1323_cstack
    unless $I20, rx1323_jump3701
    elements $I18, rx1323_bstack
    le $I18, 0, rx1323_cut3702
    dec $I18
    set $I18, rx1323_bstack[$I18]
  rx1323_cut3702:
    assign rx1323_cstack, $I18
  rx1323_jump3701:
    jump $I19
  rx1323_done3698:
    rx1323_cur."!cursor_fail"()
    .return (rx1323_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1360232768.755") :anon :lex :outer("cuid_237_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1328_tgt
    .local int rx1328_pos
    .local int rx1328_off
    .local int rx1328_eos
    .local int rx1328_rep
    .local pmc rx1328_cur
    .local pmc rx1328_curclass
    .local pmc rx1328_bstack
    .local pmc rx1328_cstack
    (rx1328_cur, rx1328_tgt, rx1328_pos, rx1328_curclass, rx1328_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1328_cur
    length rx1328_eos, rx1328_tgt
    eq $I19, 1, rx1328_restart3714
    gt rx1328_pos, rx1328_eos, rx1328_fail3715
    repr_get_attr_int $I11, self, rx1328_curclass, "$!from"
    ne $I11, -1, rxscan1329_done3721
    goto rxscan1329_scan3720
  rxscan1329_loop3719:
    inc rx1328_pos
    gt rx1328_pos, rx1328_eos, rx1328_fail3715
    repr_bind_attr_int rx1328_cur, rx1328_curclass, "$!from", rx1328_pos
  rxscan1329_scan3720:
    nqp_rxmark rx1328_bstack, rxscan1329_loop3719, rx1328_pos, 0
  rxscan1329_done3721:
    add $I11, rx1328_pos, 1
    gt $I11, rx1328_eos, rx1328_fail3715
    substr $S10, rx1328_tgt, rx1328_pos, 1
    ne $S10, ucs4:">", rx1328_fail3715
    add rx1328_pos, 1
    rx1328_cur."!cursor_pass"(rx1328_pos, 'backtrack'=>1)
    .return (rx1328_cur)
  rx1328_restart3714:
    repr_get_attr_obj rx1328_cstack, rx1328_cur, rx1328_curclass, "$!cstack"
  rx1328_fail3715:
    unless rx1328_bstack, rx1328_done3713
    pop $I19, rx1328_bstack
    if_null rx1328_cstack, rx1328_cstack_done3718
    unless rx1328_cstack, rx1328_cstack_done3718
    dec $I19
    set $P11, rx1328_cstack[$I19]
  rx1328_cstack_done3718:
    pop rx1328_rep, rx1328_bstack
    pop rx1328_pos, rx1328_bstack
    pop $I19, rx1328_bstack
    lt rx1328_pos, -1, rx1328_done3713
    lt rx1328_pos, 0, rx1328_fail3715
    eq $I19, 0, rx1328_fail3715
    nqp_islist $I20, rx1328_cstack
    unless $I20, rx1328_jump3716
    elements $I18, rx1328_bstack
    le $I18, 0, rx1328_cut3717
    dec $I18
    set $I18, rx1328_bstack[$I18]
  rx1328_cut3717:
    assign rx1328_cstack, $I18
  rx1328_jump3716:
    jump $I19
  rx1328_done3713:
    rx1328_cur."!cursor_fail"()
    .return (rx1328_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_239_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1423
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1335_tgt
    .local int rx1335_pos
    .local int rx1335_off
    .local int rx1335_eos
    .local int rx1335_rep
    .local pmc rx1335_cur
    .local pmc rx1335_curclass
    .local pmc rx1335_bstack
    .local pmc rx1335_cstack
    (rx1335_cur, rx1335_tgt, rx1335_pos, rx1335_curclass, rx1335_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1335_cur
    length rx1335_eos, rx1335_tgt
    eq $I19, 1, rx1335_restart3733
    gt rx1335_pos, rx1335_eos, rx1335_fail3734
    repr_get_attr_int $I11, self, rx1335_curclass, "$!from"
    ne $I11, -1, rxscan1336_done3740
    goto rxscan1336_scan3739
  rxscan1336_loop3738:
    inc rx1335_pos
    gt rx1335_pos, rx1335_eos, rx1335_fail3734
    repr_bind_attr_int rx1335_cur, rx1335_curclass, "$!from", rx1335_pos
  rxscan1336_scan3739:
    nqp_rxmark rx1335_bstack, rxscan1336_loop3738, rx1335_pos, 0
  rxscan1336_done3740:
    ge rx1335_pos, rx1335_eos, rx1335_fail3734
    substr $S11, rx1335_tgt, rx1335_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1335_fail3734
    repr_bind_attr_int rx1335_cur, rx1335_curclass, "$!pos", rx1335_pos
    $P11 = rx1335_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1335_curclass, "$!pos"
    lt $I11, 0, rx1335_fail3734
    nqp_rxmark rx1335_bstack, rxsubrule1337_pass3741, -1, 0
  rxsubrule1337_pass3741:
    rx1335_cstack = rx1335_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1335_pos, $P11, rx1335_curclass, "$!pos"
    rx1335_cur."!cursor_pass"(rx1335_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1335_cur)
  rx1335_restart3733:
    repr_get_attr_obj rx1335_cstack, rx1335_cur, rx1335_curclass, "$!cstack"
  rx1335_fail3734:
    unless rx1335_bstack, rx1335_done3732
    pop $I19, rx1335_bstack
    if_null rx1335_cstack, rx1335_cstack_done3737
    unless rx1335_cstack, rx1335_cstack_done3737
    dec $I19
    set $P11, rx1335_cstack[$I19]
  rx1335_cstack_done3737:
    pop rx1335_rep, rx1335_bstack
    pop rx1335_pos, rx1335_bstack
    pop $I19, rx1335_bstack
    lt rx1335_pos, -1, rx1335_done3732
    lt rx1335_pos, 0, rx1335_fail3734
    eq $I19, 0, rx1335_fail3734
    nqp_islist $I20, rx1335_cstack
    unless $I20, rx1335_jump3735
    elements $I18, rx1335_bstack
    le $I18, 0, rx1335_cut3736
    dec $I18
    set $I18, rx1335_bstack[$I18]
  rx1335_cut3736:
    assign rx1335_cstack, $I18
  rx1335_jump3735:
    jump $I19
  rx1335_done3732:
    rx1335_cur."!cursor_fail"()
    .return (rx1335_cur) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_240_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1427
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1338_tgt
    .local int rx1338_pos
    .local int rx1338_off
    .local int rx1338_eos
    .local int rx1338_rep
    .local pmc rx1338_cur
    .local pmc rx1338_curclass
    .local pmc rx1338_bstack
    .local pmc rx1338_cstack
    (rx1338_cur, rx1338_tgt, rx1338_pos, rx1338_curclass, rx1338_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1338_cur
    length rx1338_eos, rx1338_tgt
    eq $I19, 1, rx1338_restart3744
    gt rx1338_pos, rx1338_eos, rx1338_fail3745
    repr_get_attr_int $I11, self, rx1338_curclass, "$!from"
    ne $I11, -1, rxscan1339_done3751
    goto rxscan1339_scan3750
  rxscan1339_loop3749:
    inc rx1338_pos
    gt rx1338_pos, rx1338_eos, rx1338_fail3745
    repr_bind_attr_int rx1338_cur, rx1338_curclass, "$!from", rx1338_pos
  rxscan1339_scan3750:
    nqp_rxmark rx1338_bstack, rxscan1339_loop3749, rx1338_pos, 0
  rxscan1339_done3751:
    repr_bind_attr_int rx1338_cur, rx1338_curclass, "$!pos", rx1338_pos
    $P11 = rx1338_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1338_curclass, "$!pos"
    lt $I11, 0, rx1338_fail3745
    nqp_rxmark rx1338_bstack, rxsubrule1340_pass3752, -1, 0
  rxsubrule1340_pass3752:
    rx1338_cstack = rx1338_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1338_pos, $P11, rx1338_curclass, "$!pos"
    rx1338_cur."!cursor_pass"(rx1338_pos, "codeblock", 'backtrack'=>1)
    .return (rx1338_cur)
  rx1338_restart3744:
    repr_get_attr_obj rx1338_cstack, rx1338_cur, rx1338_curclass, "$!cstack"
  rx1338_fail3745:
    unless rx1338_bstack, rx1338_done3743
    pop $I19, rx1338_bstack
    if_null rx1338_cstack, rx1338_cstack_done3748
    unless rx1338_cstack, rx1338_cstack_done3748
    dec $I19
    set $P11, rx1338_cstack[$I19]
  rx1338_cstack_done3748:
    pop rx1338_rep, rx1338_bstack
    pop rx1338_pos, rx1338_bstack
    pop $I19, rx1338_bstack
    lt rx1338_pos, -1, rx1338_done3743
    lt rx1338_pos, 0, rx1338_fail3745
    eq $I19, 0, rx1338_fail3745
    nqp_islist $I20, rx1338_cstack
    unless $I20, rx1338_jump3746
    elements $I18, rx1338_bstack
    le $I18, 0, rx1338_cut3747
    dec $I18
    set $I18, rx1338_bstack[$I18]
  rx1338_cut3747:
    assign rx1338_cstack, $I18
  rx1338_jump3746:
    jump $I19
  rx1338_done3743:
    rx1338_cur."!cursor_fail"()
    .return (rx1338_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_241_1360232768.755") :anon :lex :outer("cuid_406_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1431
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1341_tgt
    .local int rx1341_pos
    .local int rx1341_off
    .local int rx1341_eos
    .local int rx1341_rep
    .local pmc rx1341_cur
    .local pmc rx1341_curclass
    .local pmc rx1341_bstack
    .local pmc rx1341_cstack
    (rx1341_cur, rx1341_tgt, rx1341_pos, rx1341_curclass, rx1341_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1341_cur
    length rx1341_eos, rx1341_tgt
    eq $I19, 1, rx1341_restart3755
    gt rx1341_pos, rx1341_eos, rx1341_fail3756
    repr_get_attr_int $I11, self, rx1341_curclass, "$!from"
    ne $I11, -1, rxscan1342_done3762
    goto rxscan1342_scan3761
  rxscan1342_loop3760:
    inc rx1341_pos
    gt rx1341_pos, rx1341_eos, rx1341_fail3756
    repr_bind_attr_int rx1341_cur, rx1341_curclass, "$!from", rx1341_pos
  rxscan1342_scan3761:
    nqp_rxmark rx1341_bstack, rxscan1342_loop3760, rx1341_pos, 0
  rxscan1342_done3762:
    repr_bind_attr_int rx1341_cur, rx1341_curclass, "$!pos", rx1341_pos
    $P11 = rx1341_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1341_curclass, "$!pos"
    lt $I11, 0, rx1341_fail3756
    nqp_rxmark rx1341_bstack, rxsubrule1343_pass3763, -1, 0
  rxsubrule1343_pass3763:
    rx1341_cstack = rx1341_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1341_pos, $P11, rx1341_curclass, "$!pos"
    rx1341_cur."!cursor_pass"(rx1341_pos, "arg", 'backtrack'=>1)
    .return (rx1341_cur)
  rx1341_restart3755:
    repr_get_attr_obj rx1341_cstack, rx1341_cur, rx1341_curclass, "$!cstack"
  rx1341_fail3756:
    unless rx1341_bstack, rx1341_done3754
    pop $I19, rx1341_bstack
    if_null rx1341_cstack, rx1341_cstack_done3759
    unless rx1341_cstack, rx1341_cstack_done3759
    dec $I19
    set $P11, rx1341_cstack[$I19]
  rx1341_cstack_done3759:
    pop rx1341_rep, rx1341_bstack
    pop rx1341_pos, rx1341_bstack
    pop $I19, rx1341_bstack
    lt rx1341_pos, -1, rx1341_done3754
    lt rx1341_pos, 0, rx1341_fail3756
    eq $I19, 0, rx1341_fail3756
    nqp_islist $I20, rx1341_cstack
    unless $I20, rx1341_jump3757
    elements $I18, rx1341_bstack
    le $I18, 0, rx1341_cut3758
    dec $I18
    set $I18, rx1341_bstack[$I18]
  rx1341_cut3758:
    assign rx1341_cstack, $I18
  rx1341_jump3757:
    jump $I19
  rx1341_done3754:
    rx1341_cur."!cursor_fail"()
    .return (rx1341_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1442
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3765
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5003
  fallback3765:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3768
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5008
  fallback3768:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1344_end3767 
.annotate 'line', 1444
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
  unless1344_end3767:
.annotate 'line', 1447
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3769
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5014
  fallback3769:
.annotate 'line', 1450
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3770
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5019
  fallback3770:
.annotate 'line', 1453
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3771
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5024
  fallback3771:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "add_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1457
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3772
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5003
  fallback3772:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3775
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5008
  fallback3775:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1345_end3774 
.annotate 'line', 1459
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
  unless1345_end3774:
.annotate 'line', 1462
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3776
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5014
  fallback3776:
.annotate 'line', 1465
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3777
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5019
  fallback3777:
.annotate 'line', 1468
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3778
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5024
  fallback3778:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "sub_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1472
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3779
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5004
  fallback3779:
    set $P101, $P5003
.annotate 'line', 1474
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3780
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5009
  fallback3780:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3783
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback3783:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1346_end3782 
.annotate 'line', 1475
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
  unless1346_end3782:
.annotate 'line', 1478
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3784
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5021
  fallback3784:
.annotate 'line', 1480
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3785
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5026
  fallback3785:
.annotate 'line', 1482
    nqp_get_sc_object $P5030, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3786
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5031
  fallback3786:
    $P5032 = $P101."returns"()
    $P5033 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5032 :named("returns"))
    $P5034 = $P5022."new"($P5033, $P101, "bind" :named("op"))
.annotate 'line', 1485
    nqp_get_sc_object $P5038, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3787
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5039
  fallback3787:
.annotate 'line', 1488
    nqp_get_sc_object $P5043, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3788
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5044
  fallback3788:
.annotate 'line', 1490
    nqp_get_sc_object $P5048, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback3789
    nqp_get_sc_object $P5049, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5045, $P5049
  fallback3789:
    $P5050 = $P101."returns"()
    $P5051 = $P5045."new"($P102 :named("name"), "local" :named("scope"), $P5050 :named("returns"))
.annotate 'line', 1491
    nqp_get_sc_object $P5055, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3790
    nqp_get_sc_object $P5056, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5052, $P5056
  fallback3790:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5040."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5035."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5017."new"($P5034, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1496
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3791
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5004
  fallback3791:
    set $P101, $P5003
.annotate 'line', 1498
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3792
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5009
  fallback3792:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3795
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback3795:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1347_end3794 
.annotate 'line', 1499
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
  unless1347_end3794:
.annotate 'line', 1502
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3796
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5021
  fallback3796:
.annotate 'line', 1504
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3797
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5026
  fallback3797:
.annotate 'line', 1506
    nqp_get_sc_object $P5030, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3798
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5031
  fallback3798:
    $P5032 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5033 = $P5022."new"($P5032, $P101, "bind" :named("op"))
.annotate 'line', 1509
    nqp_get_sc_object $P5037, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3799
    nqp_get_sc_object $P5038, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5038
  fallback3799:
.annotate 'line', 1512
    nqp_get_sc_object $P5042, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3800
    nqp_get_sc_object $P5043, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5043
  fallback3800:
.annotate 'line', 1514
    nqp_get_sc_object $P5047, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Var"]
    unless_null $P5044, fallback3801
    nqp_get_sc_object $P5048, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5048
  fallback3801:
    $P5049 = $P5044."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1515
    nqp_get_sc_object $P5053, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback3802
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5050, $P5054
  fallback3802:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5039."new"($P5049, $P5055, "sub_n" :named("op"))
    $P5057 = $P5034."new"($P101, $P5056, "bind" :named("op"))
    $P5058 = $P5017."new"($P5033, $P5057, 0 :named("resultchild"))
    $P5059 = _lex_param_0."as_post"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1520
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1521
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3803
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5002
  fallback3803:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1524
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1525
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3804
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5002
  fallback3804:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1528
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1529
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3805
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3805:
.annotate 'line', 1531
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3806
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback3806:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3807
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5012
  fallback3807:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1532
    nqp_get_sc_object $P5017, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3808
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5018
  fallback3808:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3809
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5020
  fallback3809:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1536
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$res", $P101 
    .lex "$ops", $P102 
    .lex "$arg_post", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
.annotate 'line', 1537
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback3810
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback3811
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5008
  fallback3811:
    unless_null $P5005, vivi_13483812
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_13483812:
    set $P5004, $P5005
  fallback3810:
    $P5010 = $P5004."fresh_i"()
    set $P101, $P5010
.annotate 'line', 1538
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback3813
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback3813:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 1539
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback3814
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5018
  fallback3814:
    $P5019 = _lex_param_0."as_post"($P5017)
    set $P103, $P5019
.annotate 'line', 1540
    $P5020 = $P103."result"()
    $P5021 = _lex_param_0."infer_type"($P5020)
    set $S5002, $P5021
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "i"
    unless $I5001 goto if1349_else3815 
.annotate 'line', 1541
    $P102."push"($P103)
.annotate 'line', 1542
    $P5022 = $P102."push_pirop"("not", $P101, $P103)
    goto if1349_end3816
  if1349_else3815:
.annotate 'line', 1544
.annotate 'line', 1545
    $P5023 = _lex_param_0."coerce"($P103, "P")
    set $P103, $P5023
.annotate 'line', 1546
    $P102."push"($P103)
.annotate 'line', 1547
    $P5024 = $P102."push_pirop"("isfalse", $P101, $P103)
  if1349_end3816:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1553
    .const 'Sub' $P5123 = 'cuid_415_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_419_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_422_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_423_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_426_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_428_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_429_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_430_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_432_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_433_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_438_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_242_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_243_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_244_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_245_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_246_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_247_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_248_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_249_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_250_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_251_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_252_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_253_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_254_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_255_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_256_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_257_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_258_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_259_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_260_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_261_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_262_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_263_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_264_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_265_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_266_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_267_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_268_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_269_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_270_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_271_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_272_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_273_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_274_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_275_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_276_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_277_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_278_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_279_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_280_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_281_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_282_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_283_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_284_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_285_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_286_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_287_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_288_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_289_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_290_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_291_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_292_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_293_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_294_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_295_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_296_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_297_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_298_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_299_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_300_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_301_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_302_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_303_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_304_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_305_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_306_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_307_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_308_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_309_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_310_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_311_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_312_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_313_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_314_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_315_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_316_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_317_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_318_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_319_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_320_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_321_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_322_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_323_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_324_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_325_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_326_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_327_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_328_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_329_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_330_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_331_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_332_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_333_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_334_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_335_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_336_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_337_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_338_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_339_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_340_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_341_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_342_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_343_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_344_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_345_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_346_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_347_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_348_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_349_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_350_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_351_1360232768.755' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_352_1360232768.755' 
    capture_lex $P5123 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_415_1360232768.755' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_419_1360232768.755' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_422_1360232768.755' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_423_1360232768.755' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_426_1360232768.755' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_428_1360232768.755' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_429_1360232768.755' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_430_1360232768.755' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_432_1360232768.755' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_433_1360232768.755' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_438_1360232768.755' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_242_1360232768.755' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_243_1360232768.755' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_244_1360232768.755' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_245_1360232768.755' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_246_1360232768.755' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_247_1360232768.755' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_248_1360232768.755' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_249_1360232768.755' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_250_1360232768.755' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_251_1360232768.755' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_252_1360232768.755' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_253_1360232768.755' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_254_1360232768.755' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_255_1360232768.755' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_256_1360232768.755' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_257_1360232768.755' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_258_1360232768.755' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_259_1360232768.755' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_260_1360232768.755' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_261_1360232768.755' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_262_1360232768.755' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_263_1360232768.755' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_264_1360232768.755' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_265_1360232768.755' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_266_1360232768.755' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_267_1360232768.755' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_268_1360232768.755' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_269_1360232768.755' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_270_1360232768.755' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_271_1360232768.755' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_272_1360232768.755' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_273_1360232768.755' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_274_1360232768.755' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_275_1360232768.755' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_276_1360232768.755' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_277_1360232768.755' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_278_1360232768.755' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_279_1360232768.755' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_280_1360232768.755' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_281_1360232768.755' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_282_1360232768.755' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_283_1360232768.755' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_284_1360232768.755' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_285_1360232768.755' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_286_1360232768.755' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_287_1360232768.755' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_288_1360232768.755' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_289_1360232768.755' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_290_1360232768.755' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_291_1360232768.755' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_292_1360232768.755' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_293_1360232768.755' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_294_1360232768.755' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_295_1360232768.755' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_296_1360232768.755' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_297_1360232768.755' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_298_1360232768.755' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_299_1360232768.755' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_300_1360232768.755' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_301_1360232768.755' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_302_1360232768.755' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_303_1360232768.755' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_304_1360232768.755' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_305_1360232768.755' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_306_1360232768.755' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_307_1360232768.755' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_308_1360232768.755' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_309_1360232768.755' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_310_1360232768.755' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_311_1360232768.755' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_312_1360232768.755' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_313_1360232768.755' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_314_1360232768.755' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_315_1360232768.755' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_316_1360232768.755' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_317_1360232768.755' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_318_1360232768.755' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_319_1360232768.755' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_320_1360232768.755' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_321_1360232768.755' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_322_1360232768.755' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_323_1360232768.755' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_324_1360232768.755' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_325_1360232768.755' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_326_1360232768.755' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_327_1360232768.755' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_328_1360232768.755' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_329_1360232768.755' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_330_1360232768.755' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_331_1360232768.755' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_332_1360232768.755' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_333_1360232768.755' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_334_1360232768.755' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_335_1360232768.755' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_336_1360232768.755' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_337_1360232768.755' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_338_1360232768.755' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_339_1360232768.755' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_340_1360232768.755' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_341_1360232768.755' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_342_1360232768.755' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_343_1360232768.755' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_344_1360232768.755' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_345_1360232768.755' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_346_1360232768.755' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_347_1360232768.755' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_348_1360232768.755' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_349_1360232768.755' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_350_1360232768.755' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_351_1360232768.755' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_352_1360232768.755' 
    capture_lex $P5122
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_415_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1554
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1555
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3817
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5002
  fallback3817:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_419_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1559
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_418_1360232768.755' 
    capture_lex $P5004 
    .lex "$block", _lex_param_0 
.annotate 'line', 1560
    _lex_param_0."blocktype"("immediate")
.annotate 'line', 1561
    $P5001 = _lex_param_0."symtable"()
    if $P5001 goto unless1350_end3819 
    .const 'Sub' $P5002 = 'cuid_418_1360232768.755' 
    capture_lex $P5002
    $P5003 = $P5002()
  unless1350_end3819:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1360232768.755") :anon :lex :outer("cuid_419_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1561
    .const 'Sub' $P5017 = 'cuid_417_1360232768.755' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1562
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3820
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback3820:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1563
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3821:
    unless $P5012, for_done3823
    shift $P5016, $P5012
  for_redo3822:
    .const 'Sub' $P5015 = 'cuid_417_1360232768.755' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3821
  for_done3823:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1360232768.755") :anon :lex :outer("cuid_418_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1563
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_422_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1569
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_421_1360232768.755' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1351_else3824 
.annotate 'line', 1570
.annotate 'line', 1571
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3826
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3826:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1351_end3825
  if1351_else3824:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1352_else3827 
.annotate 'line', 1573
.annotate 'line', 1574
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3829
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback3829:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1352_end3828
  if1352_else3827:
    .const 'Sub' $P5013 = 'cuid_421_1360232768.755' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1352_end3828:
    set $P5016, $P5015
  if1351_end3825:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1360232768.755") :anon :lex :outer("cuid_422_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1576
    .const 'Sub' $P5022 = 'cuid_420_1360232768.755' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_13573838
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1578
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_13553835
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1579
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3830
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback3830:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3831
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3832
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5011
  fallback3832:
    unless_null $P5008, vivi_13533833
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_13533833:
    set $P5007, $P5008
  fallback3831:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_13543834
  catch_handler_13553835:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_420_1360232768.755' 
    capture_lex $P10001
    $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10002
    goto skip_handler_13543834
  skip_handler_13543834:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_13563837
  catch_handler_13573838:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_13563837
  skip_handler_13563837:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_420_1360232768.755") :anon :lex :outer("cuid_421_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1580
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3836
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3836:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_423_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1586
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1358_else3839 
.annotate 'line', 1587
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3841
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3841:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1358_end3840
  if1358_else3839:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1359_else3842 
.annotate 'line', 1588
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3844
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback3844:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1359_end3843
  if1359_else3842:
.annotate 'line', 1589
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3845
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5017
  fallback3845:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1359_end3843:
    set $P5020, $P5019
  if1358_end3840:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_426_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1601
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_425_1360232768.755' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3848
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3848:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1360_else3846 
    .const 'Sub' $P5006 = 'cuid_425_1360232768.755' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1360_end3847
  if1360_else3846:
.annotate 'line', 1606
.annotate 'line', 1607
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1360_end3847:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1360232768.755") :anon :lex :outer("cuid_426_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1602
    .const 'Sub' $P5009 = 'cuid_424_1360232768.755' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1604
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3849:
    unless $P5004, for_done3851
    shift $P5008, $P5004
  for_redo3850:
    .const 'Sub' $P5007 = 'cuid_424_1360232768.755' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3849
  for_done3851:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1360232768.755") :anon :lex :outer("cuid_425_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1604
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_428_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1792
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_427_1360232768.755' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1361_end3853 
.annotate 'line', 1794
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3854
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5006
  fallback3854:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3858:
    unless $P5003, for_done3860
    shift $P5008, $P5003
  for_redo3859:
    .const 'Sub' $P5007 = 'cuid_427_1360232768.755' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3858
  for_done3860:
    set $P5009, $P5001
  if1361_end3853:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_427_1360232768.755") :anon :lex :outer("cuid_428_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1795
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3855
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3856
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3856:
    unless_null $P5002, vivi_13623857
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_13623857:
    set $P5001, $P5002
  fallback3855:
.annotate 'line', 1796
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_429_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1894
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3863
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3864
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3864:
    unless_null $P5002, vivi_13643865
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_13643865:
    set $P5001, $P5002
  fallback3863:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if1363_end3862 
.annotate 'line', 1895
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
  if1363_end3862:
.annotate 'line', 1898
    $P5010 = _lex_param_1."arity"()
    if $P5010 goto unless1365_end3867 
.annotate 'line', 1899
.annotate 'line', 1900
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback3868
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback3868:
.annotate 'line', 1901
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback3869
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5020
  fallback3869:
    $P5021 = $P5016."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1902
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback3870
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5026
  fallback3870:
    $P5027 = $P5022."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5028 = $P5011."new"($P5021, $P5027, "bind" :named("op"))
    _lex_param_1."unshift"($P5028)
.annotate 'line', 1905
    nqp_get_sc_object $P5032, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3871
    nqp_get_sc_object $P5033, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5029, $P5033
  fallback3871:
    $P5034 = $P5029."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    _lex_param_1."unshift"($P5034)
.annotate 'line', 1906
    _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1907
    _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1908
    $P5035 = _lex_param_1."arity"(1)
  unless1365_end3867:
.annotate 'line', 1910
    _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5036, "%*HANDLERS"
    unless_null $P5036, fallback3872
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%HANDLERS"]
    unless_null $P5037, fallback3873
    nqp_get_sc_object $P5041, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%HANDLERS"], $P5042
    set $P5037, $P5042
  fallback3873:
    unless_null $P5037, vivi_13663874
    die "Contextual %*HANDLERS not found"
    box $P5043, "Contextual %*HANDLERS not found"
    set $P5037, $P5043
  vivi_13663874:
    set $P5036, $P5037
  fallback3872:
    set $S5005, _lex_param_2
.annotate 'line', 1911
    nqp_get_sc_object $P5047, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Stmts"]
    unless_null $P5044, fallback3875
    nqp_get_sc_object $P5048, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5048
  fallback3875:
.annotate 'line', 1912
    nqp_get_sc_object $P5052, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Op"]
    unless_null $P5049, fallback3876
    nqp_get_sc_object $P5053, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5049, $P5053
  fallback3876:
.annotate 'line', 1914
    nqp_get_sc_object $P5057, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback3877
    nqp_get_sc_object $P5058, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5054, $P5058
  fallback3877:
    $P5059 = $P5054."new"("exception" :named("op"))
    $P5060 = $P5049."new"(_lex_param_1, $P5059, "call" :named("op"))
.annotate 'line', 1916
    nqp_get_sc_object $P5064, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback3878
    nqp_get_sc_object $P5065, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5061, $P5065
  fallback3878:
.annotate 'line', 1918
    nqp_get_sc_object $P5069, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3879
    nqp_get_sc_object $P5070, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5066, $P5070
  fallback3879:
    $P5071 = $P5066."new"("exception" :named("op"))
.annotate 'line', 1919
    nqp_get_sc_object $P5075, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback3880
    nqp_get_sc_object $P5076, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5072, $P5076
  fallback3880:
    $P5077 = $P5072."new"("handled" :named("value"))
.annotate 'line', 1920
    nqp_get_sc_object $P5081, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["IVal"]
    unless_null $P5078, fallback3881
    nqp_get_sc_object $P5082, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5078, $P5082
  fallback3881:
    $P5083 = $P5078."new"(1 :named("value"))
    $P5084 = $P5061."new"($P5071, $P5077, $P5083, "bindkey_i" :named("op"))
.annotate 'line', 1922
    $P5085 = "&default_for"("$")
    $P5086 = $P5044."new"($P5060, $P5084, $P5085)
    set $P5036[$S5005], $P5086
    .return ($P5086) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_430_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2531
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2532
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3882
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3883
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback3883:
    unless_null $P5003, vivi_13673884
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13673884:
    set $P5002, $P5003
  fallback3882:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2533
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3885
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5013
  fallback3885:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_432_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2537
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_431_1360232768.755' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3886
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5009
  fallback3886:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3902:
    unless $P5007, for_done3904
    shift $P5012, $P5007
  for_redo3903:
    .const 'Sub' $P5011 = 'cuid_431_1360232768.755' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3902
  for_done3904:
.annotate 'line', 2549
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3905
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3906
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5017
  fallback3906:
    unless_null $P5014, vivi_13743907
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13743907:
    set $P5013, $P5014
  fallback3905:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1360232768.755") :anon :lex :outer("cuid_432_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2540
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3893
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3893:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1370_end3892 
.annotate 'line', 2541
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1370_end3892:
    set $I5005, $I5003
    unless $I5003 goto if1369_end3890 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1369_end3890:
    box $P5021, $I5005
    set $P5020, $P5021
    unless $I5005 goto if1368_end3888 
.annotate 'line', 2542
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1371_else3894 
    null $P5011
    set $P5013, $P5011
    goto if1371_end3895
  if1371_else3894:
.annotate 'line', 2544
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1371_end3895:
    $P5008."push"($P5013)
.annotate 'line', 2545
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3898
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5016
  fallback3898:
    set $S5002, $P5015
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1372_else3896 
    set $I5012, 1
    goto if1372_end3897
  if1372_else3896:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3901
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5018
  fallback3901:
    set $S5003, $P5017
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1373_else3899 
    set $I5011, 2
    goto if1373_end3900
  if1373_else3899:
    set $I5011, 0
  if1373_end3900:
    set $I5012, $I5011
  if1372_end3897:
    $P5019 = $P5014."push"($I5012)
    set $P5020, $P5019
  if1368_end3888:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_433_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2552
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2553
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3908
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3908:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_438_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3018
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5072 = 'cuid_436_1360232768.755' 
    capture_lex $P5072 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3909
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1375_end3912 
.annotate 'line', 3020
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
  if1375_end3912:
.annotate 'line', 3024
    $P5005 = _lex_param_0."pop"()
    set $P101, $P5005
.annotate 'line', 3025
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["VarWithFallback"]
    unless_null $P5006, fallback3913
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback3913:
.annotate 'line', 3027
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback3914
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback3914:
    set $S5001, $P101
    $P5016 = $P5011."new"($S5001 :named("value"))
    $P5017 = $P5006."new"($P5016, "associative" :named("scope"))
    set $P102, $P5017
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1376_else3915 
.annotate 'line', 3032
.annotate 'line', 3033
    nqp_get_sc_object $P5021, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback3917
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5022
  fallback3917:
.annotate 'line', 3035
    nqp_get_sc_object $P5026, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback3918
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5027
  fallback3918:
    $P5028 = $P5023."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5029 = $P5018."new"($P5028, "who" :named("op"))
    $P102."unshift"($P5029)
.annotate 'line', 3037
    nqp_get_sc_object $P5033, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback3919
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5030, $P5034
  fallback3919:
.annotate 'line', 3039
    nqp_get_sc_object $P5038, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3920
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5039
  fallback3920:
.annotate 'line', 3041
    nqp_get_sc_object $P5043, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3921
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5044
  fallback3921:
.annotate 'line', 3043
    nqp_get_sc_object $P5048, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["WVal"]
    unless_null $P5045, fallback3922
    nqp_get_sc_object $P5049, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5045, $P5049
  fallback3922:
    find_dynamic_lex $P5050, "$*GLOBALish"
    unless_null $P5050, fallback3923
    nqp_get_sc_object $P5053, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$GLOBALish"]
    unless_null $P5051, fallback3924
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5051, $P5054
  fallback3924:
    unless_null $P5051, vivi_13773925
    die "Contextual $*GLOBALish not found"
    box $P5055, "Contextual $*GLOBALish not found"
    set $P5051, $P5055
  vivi_13773925:
    set $P5050, $P5051
  fallback3923:
    $P5056 = $P5045."new"($P5050 :named("value"))
    $P5057 = $P5040."new"($P5056, "who" :named("op"))
.annotate 'line', 3045
    nqp_get_sc_object $P5061, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3926
    nqp_get_sc_object $P5062, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5058, $P5062
  fallback3926:
    set $S5002, $P101
    $P5063 = $P5058."new"($S5002 :named("value"))
    $P5064 = $P5035."new"($P5057, $P5063, "atkey" :named("op"))
.annotate 'line', 3047
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5065 = "&default_for"($S5003)
    $P5066 = $P5030."new"($P5064, $P5065, "ifnull" :named("op"))
    $P5067 = $P102."fallback"($P5066)
    goto if1376_end3916
  if1376_else3915:
    .const 'Sub' $P5068 = 'cuid_436_1360232768.755' 
    capture_lex $P5068
    $P5069 = $P5068()
  if1376_end3916:
    find_lex $P5070, "RETURN"
    $P5071 = $P5070($P102)
    goto lexotic_3910
  lexotic_3909:
    .get_results ($P5071)
  lexotic_3910:
    .return ($P5071) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1360232768.755") :anon :lex :outer("cuid_438_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3053
    .const 'Sub' $P5066 = 'cuid_435_1360232768.755' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_437_1360232768.755' 
    capture_lex $P5066 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 3055
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3929
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3930
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback3930:
    unless_null $P5004, vivi_13793931
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13793931:
    set $P5003, $P5004
  fallback3929:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3932
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5011
  fallback3932:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1378_else3927 
    .const 'Sub' $P5013 = 'cuid_435_1360232768.755' 
    capture_lex $P5013
    $P5014 = $P5013()
    goto if1378_end3928
  if1378_else3927:
.annotate 'line', 3064
.annotate 'line', 3065
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3940
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5019
  fallback3940:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3941
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3942
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5024
  fallback3942:
    unless_null $P5021, vivi_13833943
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13833943:
    set $P5020, $P5021
  fallback3941:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
  if1378_end3928:
    find_lex $P5028, "@name"
    set $P5027, $P5028[0]
    unless_null $P5027, fallback3946
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5029
  fallback3946:
    set $S5001, $P5027
    iseq $I5001, $S5001, "GLOBAL"
    unless $I5001 goto if1384_end3945 
.annotate 'line', 3067
.annotate 'line', 3068
    find_lex $P5030, "@name"
    $P5031 = $P5030."shift"()
  if1384_end3945:
    find_lex $P5035, "@name"
    set $P5032, $P5035
    iter $P5034, $P5035
  for_next3949:
    unless $P5034, for_done3951
    shift $P5037, $P5034
  for_redo3950:
    .const 'Sub' $P5036 = 'cuid_437_1360232768.755' 
    capture_lex $P5036
    $P5032 = $P5036($P5037)
    goto for_next3949
  for_done3951:
.annotate 'line', 3075
    find_lex $P5038, "$lookup"
    nqp_get_sc_object $P5042, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3952
    nqp_get_sc_object $P5043, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5043
  fallback3952:
    $P5044 = $P5039."new"($P101, "who" :named("op"))
    $P5038."unshift"($P5044)
    find_lex $P5045, "$final_name"
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    box $P5046, $S5002
    set $P102, $P5046
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1386_end3956 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1386_end3956:
    unless $I5004 goto if1385_else3953 
.annotate 'line', 3077
.annotate 'line', 3078
    find_lex $P5047, "$lookup"
    nqp_get_sc_object $P5051, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3957
    nqp_get_sc_object $P5052, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5052
  fallback3957:
    find_lex $P5054, "$lookup"
    set $P5053, $P5054[0]
    unless_null $P5053, fallback3958
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5053, $P5055
  fallback3958:
    find_lex $P5057, "$lookup"
    set $P5056, $P5057[1]
    unless_null $P5056, fallback3959
    nqp_get_sc_object $P5058, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5056, $P5058
  fallback3959:
.annotate 'line', 3082
    $P5059 = "&default_for"($P102)
    $P5060 = $P5048."new"($P5053, $P5056, $P5059, "bindkey" :named("op"))
    $P5061 = $P5047."fallback"($P5060)
    set $P5065, $P5061
    goto if1385_end3954
  if1385_else3953:
.annotate 'line', 3085
.annotate 'line', 3086
    find_lex $P5062, "$lookup"
    $P5063 = "&default_for"($P102)
    $P5064 = $P5062."fallback"($P5063)
    set $P5065, $P5064
  if1385_end3954:
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1360232768.755") :anon :lex :outer("cuid_436_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3056
    .const 'Sub' $P5021 = 'cuid_434_1360232768.755' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13823938
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3057
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3058
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3933
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5008
  fallback3933:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3934
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3935
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5013
  fallback3935:
    unless_null $P5010, vivi_13803936
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13803936:
    set $P5009, $P5010
  fallback3934:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13813937
  catch_handler_13823938:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_434_1360232768.755' 
    capture_lex $P10001
    $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10002
    goto skip_handler_13813937
  skip_handler_13813937:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1360232768.755") :anon :lex :outer("cuid_435_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3059
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3060
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3939
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3939:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1360232768.755") :anon :lex :outer("cuid_436_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3070
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3071
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3947
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback3947:
    find_lex $P5006, "$path"
.annotate 'line', 3073
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3948
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback3948:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_242_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1592
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3960
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback3960:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3961
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback3961:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_243_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1594
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1595
    unless_null _lex_param_1, fallback3964
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback3964:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3965
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback3965:
    unless $P5001 goto if1387_else3962 
    unless_null _lex_param_1, fallback3966
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback3966:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3967
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback3967:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1596
    unless_null _lex_param_1, fallback3968
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback3968:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3969
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback3969:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3970
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback3970:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1597
    unless_null _lex_param_1, fallback3971
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5016
  fallback3971:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3972
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5017
  fallback3972:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3973
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5018
  fallback3973:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1387_end3963
  if1387_else3962:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1387_end3963:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_244_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1611
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$compunit", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
.annotate 'line', 1612
    unless_null _lex_param_1, fallback3974
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback3974:
    set $P5004, _lex_param_1["statementlist"]
    unless_null $P5004, fallback3975
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback3975:
    $P5007 = $P5004."ast"()
    set $P101, $P5007
.annotate 'line', 1613
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback3976
    nqp_get_sc_object $P5011, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback3977
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback3977:
    unless_null $P5009, vivi_13883978
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_13883978:
    set $P5008, $P5009
  fallback3976:
    $P5014 = $P5008."pop_lexpad"()
    set $P102, $P5014
    find_dynamic_lex $P5015, "$*HAS_YOU_ARE_HERE"
    unless_null $P5015, fallback3981
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$HAS_YOU_ARE_HERE"]
    unless_null $P5016, fallback3982
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5019
  fallback3982:
    unless_null $P5016, vivi_13903983
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5020, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5016, $P5020
  vivi_13903983:
    set $P5015, $P5016
  fallback3981:
    if $P5015 goto unless1389_end3980 
.annotate 'line', 1618
.annotate 'line', 1619
    nqp_decontainerize $P5021, _lex_param_0
    $P5022 = $P5021."CTXSAVE"()
    $P5023 = $P102."push"($P5022)
  unless1389_end3980:
.annotate 'line', 1626
    nqp_get_sc_object $P5027, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3984
    nqp_get_sc_object $P5028, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5028
  fallback3984:
    $P5029 = $P5024."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P102."unshift"($P5029)
    find_dynamic_lex $P5030, "$*MAIN_SUB"
    unless_null $P5030, fallback3987
    nqp_get_sc_object $P5033, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$MAIN_SUB"]
    unless_null $P5031, fallback3988
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5031, $P5034
  fallback3988:
    unless_null $P5031, vivi_13923989
    die "Contextual $*MAIN_SUB not found"
    box $P5035, "Contextual $*MAIN_SUB not found"
    set $P5031, $P5035
  vivi_13923989:
    set $P5030, $P5031
  fallback3987:
    unless $P5030 goto if1391_end3986 
.annotate 'line', 1627
.annotate 'line', 1628
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3990
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5040
  fallback3990:
.annotate 'line', 1630
    nqp_get_sc_object $P5044, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback3991
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5041, $P5045
  fallback3991:
    $P5046 = $P5041."new"("lexical" :named("scope"), "@ARGS" :named("name"))
.annotate 'line', 1631
    nqp_get_sc_object $P5050, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Op"]
    unless_null $P5047, fallback3992
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5047, $P5051
  fallback3992:
.annotate 'line', 1632
    nqp_get_sc_object $P5055, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["BVal"]
    unless_null $P5052, fallback3993
    nqp_get_sc_object $P5056, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5052, $P5056
  fallback3993:
    find_dynamic_lex $P5057, "$*MAIN_SUB"
    unless_null $P5057, fallback3994
    nqp_get_sc_object $P5060, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$MAIN_SUB"]
    unless_null $P5058, fallback3995
    nqp_get_sc_object $P5061, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5058, $P5061
  fallback3995:
    unless_null $P5058, vivi_13933996
    die "Contextual $*MAIN_SUB not found"
    box $P5062, "Contextual $*MAIN_SUB not found"
    set $P5058, $P5062
  vivi_13933996:
    set $P5057, $P5058
  fallback3994:
    $P5063 = $P5052."new"($P5057 :named("value"))
.annotate 'line', 1633
    nqp_get_sc_object $P5067, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Var"]
    unless_null $P5064, fallback3997
    nqp_get_sc_object $P5068, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5064, $P5068
  fallback3997:
    $P5069 = $P5064."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5070 = $P5047."new"($P5063, $P5069, "call" :named("op"))
    $P5071 = $P5036."new"($P5046, $P5070, "if" :named("op"))
    $P5072 = $P101."push"($P5071)
  if1391_end3986:
.annotate 'line', 1639
    $P102."push"($P101)
.annotate 'line', 1642
    find_dynamic_lex $P5073, "$*W"
    unless_null $P5073, fallback3998
    nqp_get_sc_object $P5076, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5075, $P5076
    set $P5074, $P5075["$W"]
    unless_null $P5074, fallback3999
    nqp_get_sc_object $P5077, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5074, $P5077
  fallback3999:
    unless_null $P5074, vivi_13944000
    die "Contextual $*W not found"
    box $P5078, "Contextual $*W not found"
    set $P5074, $P5078
  vivi_13944000:
    set $P5073, $P5074
  fallback3998:
    $P5079 = $P5073."libs"()
    $P102."push"($P5079)
.annotate 'line', 1645
    nqp_get_sc_object $P5083, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["CompUnit"]
    unless_null $P5080, fallback4001
    nqp_get_sc_object $P5084, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5080, $P5084
  fallback4001:
.annotate 'line', 1649
    find_dynamic_lex $P5085, "$*W"
    unless_null $P5085, fallback4002
    nqp_get_sc_object $P5088, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$W"]
    unless_null $P5086, fallback4003
    nqp_get_sc_object $P5089, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5086, $P5089
  fallback4003:
    unless_null $P5086, vivi_13954004
    die "Contextual $*W not found"
    box $P5090, "Contextual $*W not found"
    set $P5086, $P5090
  vivi_13954004:
    set $P5085, $P5086
  fallback4002:
    $P5091 = $P5085."sc"()
.annotate 'line', 1650
    find_dynamic_lex $P5092, "$*W"
    unless_null $P5092, fallback4005
    nqp_get_sc_object $P5095, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$W"]
    unless_null $P5093, fallback4006
    nqp_get_sc_object $P5096, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5093, $P5096
  fallback4006:
    unless_null $P5093, vivi_13964007
    die "Contextual $*W not found"
    box $P5097, "Contextual $*W not found"
    set $P5093, $P5097
  vivi_13964007:
    set $P5092, $P5093
  fallback4005:
    $P5098 = $P5092."code_ref_blocks"()
.annotate 'line', 1651
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback4008
    nqp_get_sc_object $P5102, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback4009
    nqp_get_sc_object $P5103, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5100, $P5103
  fallback4009:
    unless_null $P5100, vivi_13974010
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_13974010:
    set $P5099, $P5100
  fallback4008:
    $P5105 = $P5099."is_precompilation_mode"()
.annotate 'line', 1652
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4011
    nqp_get_sc_object $P5109, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4012
    nqp_get_sc_object $P5110, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5107, $P5110
  fallback4012:
    unless_null $P5107, vivi_13984013
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_13984013:
    set $P5106, $P5107
  fallback4011:
    $P5112 = $P5106."load_dependency_tasks"()
.annotate 'line', 1653
    find_dynamic_lex $P5113, "$*W"
    unless_null $P5113, fallback4014
    nqp_get_sc_object $P5116, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$W"]
    unless_null $P5114, fallback4015
    nqp_get_sc_object $P5117, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5114, $P5117
  fallback4015:
    unless_null $P5114, vivi_13994016
    die "Contextual $*W not found"
    box $P5118, "Contextual $*W not found"
    set $P5114, $P5118
  vivi_13994016:
    set $P5113, $P5114
  fallback4014:
    $P5119 = $P5113."fixup_tasks"()
.annotate 'line', 1658
    nqp_get_sc_object $P5123, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5122, $P5123, "QAST"
    get_who $P5121, $P5122
    set $P5120, $P5121["Op"]
    unless_null $P5120, fallback4017
    nqp_get_sc_object $P5124, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5120, $P5124
  fallback4017:
.annotate 'line', 1660
    nqp_get_sc_object $P5128, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5127, $P5128, "QAST"
    get_who $P5126, $P5127
    set $P5125, $P5126["BVal"]
    unless_null $P5125, fallback4018
    nqp_get_sc_object $P5129, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5125, $P5129
  fallback4018:
    $P5130 = $P5125."new"($P102 :named("value"))
    $P5131 = $P5120."new"($P5130, "call" :named("op"))
.annotate 'line', 1665
    nqp_get_sc_object $P5135, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4019
    nqp_get_sc_object $P5136, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5132, $P5136
  fallback4019:
.annotate 'line', 1666
    nqp_get_sc_object $P5140, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5139, $P5140, "QAST"
    get_who $P5138, $P5139
    set $P5137, $P5138["Op"]
    unless_null $P5137, fallback4020
    nqp_get_sc_object $P5141, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5137, $P5141
  fallback4020:
.annotate 'line', 1668
    nqp_get_sc_object $P5145, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5144, $P5145, "QAST"
    get_who $P5143, $P5144
    set $P5142, $P5143["BVal"]
    unless_null $P5142, fallback4021
    nqp_get_sc_object $P5146, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5142, $P5146
  fallback4021:
    $P5147 = $P5142."new"($P102 :named("value"))
.annotate 'line', 1669
    nqp_get_sc_object $P5151, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5150, $P5151, "QAST"
    get_who $P5149, $P5150
    set $P5148, $P5149["Var"]
    unless_null $P5148, fallback4022
    nqp_get_sc_object $P5152, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5148, $P5152
  fallback4022:
    $P5153 = $P5148."new"("ARGS" :named("name"), "local" :named("scope"), "param" :named("decl"), 1 :named("slurpy"), 1 :named("flat"))
    $P5154 = $P5137."new"($P5147, $P5153, "call" :named("op"))
    $P5155 = $P5132."new"($P5154)
    $P5156 = $P5080."new"($P102, "nqp" :named("hll"), $P5091 :named("sc"), $P5098 :named("code_ref_blocks"), $P5105 :named("compilation_mode"), $P5112 :named("pre_deserialize"), $P5119 :named("post_deserialize"), $P5131 :named("load"), $P5155 :named("main"))
    set $P103, $P5156
.annotate 'line', 1678
    $P5157 = _lex_param_1."!make"($P103)
    .return ($P5157) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_245_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1681
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_439_1360232768.755' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1682
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback4023
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback4023:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback4026
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4026:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback4027
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4027:
    unless $P5008 goto if1400_else4024 
.annotate 'line', 1683
    unless_null _lex_param_1, fallback4028
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5015
  fallback4028:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback4029
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5016
  fallback4029:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next4042:
    unless $P5013, for_done4044
    shift $P5018, $P5013
  for_redo4043:
    .const 'Sub' $P5017 = 'cuid_439_1360232768.755' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next4042
  for_done4044:
    goto if1400_end4025
  if1400_else4024:
.annotate 'line', 1692
.annotate 'line', 1693
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
  if1400_end4025:
.annotate 'line', 1695
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1360232768.755") :anon :lex :outer("cuid_245_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1684
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1685
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback4032
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5004
  fallback4032:
    defined $I5001, $P5003
    unless $I5001 goto if1401_end4031 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback4033
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5006
  fallback4033:
    set $P101, $P5005
  if1401_end4031:
    set $P5007, $P101["bareblock"]
    unless_null $P5007, fallback4036
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5008
  fallback4036:
    unless $P5007 goto if1402_end4035 
.annotate 'line', 1687
    set $P5009, $P101[0]
    unless_null $P5009, fallback4037
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5010
  fallback4037:
    $P5011 = "&block_immediate"($P5009)
    set $P101, $P5011
  if1402_end4035:
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Node"]
    unless_null $P5012, fallback4040
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback4040:
    type_check $I5002, $P101, $P5012
    unless $I5002 goto if1403_end4039 
.annotate 'line', 1688
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmts"]
    unless_null $P5017, fallback4041
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5021
  fallback4041:
    $P5022 = $P5017."new"($P101)
    set $P101, $P5022
  if1403_end4039:
.annotate 'line', 1689
    find_lex $P5023, "$past"
    $P5024 = $P5023."push"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_246_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1698
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5018 = 'cuid_440_1360232768.755' 
    capture_lex $P5018 
    if haz_param_4, default4081
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_2, $P5017
  default4081:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback4047
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback4047:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback4048
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback4048:
    unless $P5002 goto if1404_else4045 
    .const 'Sub' $P5005 = 'cuid_440_1360232768.755' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto if1404_end4046
  if1404_else4045:
    unless_null _lex_param_1, fallback4077
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5008
  fallback4077:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback4078
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5009
  fallback4078:
    unless $P5007 goto if1408_else4075 
.annotate 'line', 1721
    unless_null _lex_param_1, fallback4079
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5011
  fallback4079:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback4080
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5012
  fallback4080:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1408_end4076
  if1408_else4075:
.annotate 'line', 1722
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1408_end4076:
  if1404_end4046:
.annotate 'line', 1723
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1360232768.755") :anon :lex :outer("cuid_246_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1700
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4049
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5006
  fallback4049:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback4050
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback4050:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback4051
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5008
  fallback4051:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4052
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5012
  fallback4052:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback4053
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5013
  fallback4053:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4054
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5014
  fallback4054:
    set $P102, $P5009
.annotate 'line', 1703
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4055
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5017
  fallback4055:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback4056
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5018
  fallback4056:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    unless $P101 goto if1405_end4058 
.annotate 'line', 1704
.annotate 'line', 1705
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4059
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5024
  fallback4059:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback4060
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5026
  fallback4060:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback4061
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5029, $P5030
  fallback4061:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
  if1405_end4058:
    set $P5077, $P102
    unless $P102 goto if1406_end4063 
.annotate 'line', 1707
    set $P5033, $P102["sym"]
    unless_null $P5033, fallback4066
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5033, $P5034
  fallback4066:
    set $S5002, $P5033
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1407_else4064 
.annotate 'line', 1708
.annotate 'line', 1709
    nqp_get_sc_object $P5038, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Block"]
    unless_null $P5035, fallback4067
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5039
  fallback4067:
.annotate 'line', 1710
    nqp_get_sc_object $P5043, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Var"]
    unless_null $P5040, fallback4068
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5044
  fallback4068:
    $P5045 = $P5040."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5046, "$past"
    $P5047 = $P5035."new"($P5045, $P5046, "immediate" :named("blocktype"))
    store_lex "$past", $P5047
.annotate 'line', 1712
    find_lex $P5048, "$past"
    $P5048."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1713
    find_lex $P5049, "$past"
    $P5049."arity"(1)
.annotate 'line', 1714
    nqp_get_sc_object $P5053, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4069
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5050, $P5054
  fallback4069:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback4070
    nqp_get_sc_object $P5056, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5056
  fallback4070:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback4071
    nqp_get_sc_object $P5060, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5059, $P5060
  fallback4071:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1407_end4065
  if1407_else4064:
.annotate 'line', 1716
.annotate 'line', 1717
    nqp_get_sc_object $P5066, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback4072
    nqp_get_sc_object $P5067, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5063, $P5067
  fallback4072:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback4073
    nqp_get_sc_object $P5069, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5068, $P5069
  fallback4073:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback4074
    nqp_get_sc_object $P5073, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5072, $P5073
  fallback4074:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1407_end4065:
    set $P5077, $P5076
  if1406_end4063:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_247_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1726
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1727
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4082
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback4082:
    unless_null _lex_param_1, fallback4083
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback4083:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback4084
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback4084:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback4085
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5011
  fallback4085:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback4086
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5012
  fallback4086:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_248_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1730
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1731
    unless_null _lex_param_1, fallback4087
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4087:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4088
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4088:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_249_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1734
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1735
    unless_null _lex_param_1, fallback4089
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4089:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4090
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4090:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_250_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1738
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5029 = 'cuid_442_1360232768.755' 
    capture_lex $P5029 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1739
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4091
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4092
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback4092:
    unless_null $P5003, vivi_14094093
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14094093:
    set $P5002, $P5003
  fallback4091:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4096
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5010
  fallback4096:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback4097
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5011
  fallback4097:
    unless $P5009 goto if1410_else4094 
    .const 'Sub' $P5012 = 'cuid_442_1360232768.755' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5028, $P5013
    goto if1410_end4095
  if1410_else4094:
.annotate 'line', 1754
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback4122
    nqp_get_sc_object $P5017, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback4123
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5018
  fallback4123:
    unless_null $P5015, vivi_14184124
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_14184124:
    set $P5014, $P5015
  fallback4122:
    unless $P5014 goto if1417_end4121 
.annotate 'line', 1755
.annotate 'line', 1756
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if1417_end4121:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1759
    unless_null _lex_param_1, fallback4125
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5024
  fallback4125:
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback4126
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5025
  fallback4126:
    $P5026 = $P5023."ast"()
    $P5027 = _lex_param_1."!make"($P5026)
    set $P5028, $P5027
  if1410_end4095:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1360232768.755") :anon :lex :outer("cuid_250_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1740
    .const 'Sub' $P5057 = 'cuid_441_1360232768.755' 
    capture_lex $P5057 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1741
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4098
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5004
  fallback4098:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback4099
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback4099:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback4102
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback4103
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback4103:
    unless_null $P5008, vivi_14124104
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_14124104:
    set $P5007, $P5008
  fallback4102:
    unless $P5007 goto if1411_end4101 
.annotate 'line', 1742
.annotate 'line', 1743
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback4105
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5019
  fallback4105:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback4106
    nqp_get_sc_object $P5027, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback4107
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback4107:
    unless_null $P5025, vivi_14134108
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_14134108:
    set $P5024, $P5025
  fallback4106:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next4109:
    unless $P5023, for_done4111
    shift $P5033, $P5023
  for_redo4110:
    .const 'Sub' $P5032 = 'cuid_441_1360232768.755' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next4109
  for_done4111:
  if1411_end4101:
.annotate 'line', 1749
    find_lex $P5034, "$BLOCK"
    $P5034."push"($P101)
.annotate 'line', 1750
    find_lex $P5035, "$BLOCK"
    find_lex $P5036, "$/"
    $P5035."node"($P5036)
    find_dynamic_lex $P5037, "%*HANDLERS"
    unless_null $P5037, fallback4114
    nqp_get_sc_object $P5040, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%HANDLERS"]
    unless_null $P5038, fallback4115
    nqp_get_sc_object $P5042, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%HANDLERS"], $P5043
    set $P5038, $P5043
  fallback4115:
    unless_null $P5038, vivi_14154116
    die "Contextual %*HANDLERS not found"
    box $P5044, "Contextual %*HANDLERS not found"
    set $P5038, $P5044
  vivi_14154116:
    set $P5037, $P5038
  fallback4114:
    unless $P5037 goto if1414_end4113 
    find_lex $P5045, "$BLOCK"
    find_dynamic_lex $P5046, "%*HANDLERS"
    unless_null $P5046, fallback4117
    nqp_get_sc_object $P5049, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%HANDLERS"]
    unless_null $P5047, fallback4118
    nqp_get_sc_object $P5051, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%HANDLERS"], $P5052
    set $P5047, $P5052
  fallback4118:
    unless_null $P5047, vivi_14164119
    die "Contextual %*HANDLERS not found"
    box $P5053, "Contextual %*HANDLERS not found"
    set $P5047, $P5053
  vivi_14164119:
    set $P5046, $P5047
  fallback4117:
    set $P5045["handlers"], $P5046
  if1414_end4113:
.annotate 'line', 1752
    find_dynamic_lex $P5054, "$/"
    find_lex $P5055, "$BLOCK"
    $P5056 = $P5054."!make"($P5055)
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1360232768.755") :anon :lex :outer("cuid_442_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1744
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1745
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5001."push"($P5002)
.annotate 'line', 1746
    find_lex $P5003, "$past"
    $P5004 = _lex_param_0."value"()
    $P5005 = $P5003."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_251_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1763
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1764
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4127
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4128
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback4128:
    unless_null $P5002, vivi_14194129
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14194129:
    set $P5001, $P5002
  fallback4127:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_252_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_443_1360232768.755' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback4132
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback4133
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback4133:
    unless_null $P5004, vivi_14214134
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_14214134:
    set $P5003, $P5004
  fallback4132:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback4135
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5011
  fallback4135:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4136
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5012
  fallback4136:
    defined $I5001, $P5001
    if $I5001 goto unless1420_end4131 
    .const 'Sub' $P5013 = 'cuid_443_1360232768.755' 
    capture_lex $P5013
    $P5014 = $P5013()
  unless1420_end4131:
.annotate 'line', 1789
    nqp_decontainerize $P5015, _lex_param_0
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4192
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4193
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5020
  fallback4193:
    unless_null $P5017, vivi_14384194
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14384194:
    set $P5016, $P5017
  fallback4192:
    $P5022 = $P5016."cur_lexpad"()
    $P5023 = $P5015."SET_BLOCK_OUTER_CTX"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1360232768.755") :anon :lex :outer("cuid_252_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1768
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1771
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4137
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4138
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback4138:
    unless_null $P5003, vivi_14224139
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14224139:
    set $P5002, $P5003
  fallback4137:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4141
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4142
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4142:
    unless_null $P5012, vivi_14234143
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_14234143:
    set $P5011, $P5012
  fallback4141:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4144
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5019
  fallback4144:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4145
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5020
  fallback4145:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4140
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4140:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4148
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4149
    nqp_get_sc_object $P5030, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4149:
    unless_null $P5026, vivi_14254150
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_14254150:
    set $P5025, $P5026
  fallback4148:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4151
    nqp_get_sc_object $P5033, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5033
  fallback4151:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4152
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5034
  fallback4152:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5112, $I5002
    set $P5111, $P5112
    if $I5002 goto unless1424_end4147 
.annotate 'line', 1776
.annotate 'line', 1777
    "&import_HOW_exports"($P101)
    find_dynamic_lex $P5037, "%*COMPILING"
    unless_null $P5037, fallback4155
    nqp_get_sc_object $P5040, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%COMPILING"]
    unless_null $P5038, fallback4156
    nqp_get_sc_object $P5042, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%COMPILING"], $P5043
    set $P5038, $P5043
  fallback4156:
    unless_null $P5038, vivi_14274157
    die "Contextual %*COMPILING not found"
    box $P5044, "Contextual %*COMPILING not found"
    set $P5038, $P5044
  vivi_14274157:
    set $P5037, $P5038
  fallback4155:
    set $P5036, $P5037["%?OPTIONS"]
    unless_null $P5036, fallback4158
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5045
  fallback4158:
    set $P5035, $P5036["old-regex-lib"]
    unless_null $P5035, fallback4159
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5046
  fallback4159:
    unless $P5035 goto if1426_end4154 
.annotate 'line', 1778
.annotate 'line', 1779
    find_dynamic_lex $P5047, "$*W"
    unless_null $P5047, fallback4160
    nqp_get_sc_object $P5050, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$W"]
    unless_null $P5048, fallback4161
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5051
  fallback4161:
    unless_null $P5048, vivi_14284162
    die "Contextual $*W not found"
    box $P5052, "Contextual $*W not found"
    set $P5048, $P5052
  vivi_14284162:
    set $P5047, $P5048
  fallback4160:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback4163
    nqp_get_sc_object $P5056, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback4164
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5054, $P5057
  fallback4164:
    unless_null $P5054, vivi_14294165
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_14294165:
    set $P5053, $P5054
  fallback4163:
    $P5059 = $P5047."load_module"("NQPRegex", $P5053)
  if1426_end4154:
    find_dynamic_lex $P5062, "%*COMPILING"
    unless_null $P5062, fallback4168
    nqp_get_sc_object $P5065, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["%COMPILING"]
    unless_null $P5063, fallback4169
    nqp_get_sc_object $P5067, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5066, $P5067
    new $P5068, 'Hash'
    set $P5066["%COMPILING"], $P5068
    set $P5063, $P5068
  fallback4169:
    unless_null $P5063, vivi_14314170
    die "Contextual %*COMPILING not found"
    box $P5069, "Contextual %*COMPILING not found"
    set $P5063, $P5069
  vivi_14314170:
    set $P5062, $P5063
  fallback4168:
    set $P5061, $P5062["%?OPTIONS"]
    unless_null $P5061, fallback4171
    nqp_get_sc_object $P5070, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5061, $P5070
  fallback4171:
    set $P5060, $P5061["no-regex-lib"]
    unless_null $P5060, fallback4172
    nqp_get_sc_object $P5071, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5060, $P5071
  fallback4172:
    set $P5110, $P5060
    if $P5060 goto unless1430_end4167 
.annotate 'line', 1781
.annotate 'line', 1782
    find_dynamic_lex $P5072, "$*W"
    unless_null $P5072, fallback4173
    nqp_get_sc_object $P5075, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$W"]
    unless_null $P5073, fallback4174
    nqp_get_sc_object $P5076, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5073, $P5076
  fallback4174:
    unless_null $P5073, vivi_14324175
    die "Contextual $*W not found"
    box $P5077, "Contextual $*W not found"
    set $P5073, $P5077
  vivi_14324175:
    set $P5072, $P5073
  fallback4173:
    find_dynamic_lex $P5078, "$*GLOBALish"
    unless_null $P5078, fallback4176
    nqp_get_sc_object $P5081, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$GLOBALish"]
    unless_null $P5079, fallback4177
    nqp_get_sc_object $P5082, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5079, $P5082
  fallback4177:
    unless_null $P5079, vivi_14334178
    die "Contextual $*GLOBALish not found"
    box $P5083, "Contextual $*GLOBALish not found"
    set $P5079, $P5083
  vivi_14334178:
    set $P5078, $P5079
  fallback4176:
    $P5072."load_module"("QRegex", $P5078)
    find_dynamic_lex $P5086, "%*COMPILING"
    unless_null $P5086, fallback4181
    nqp_get_sc_object $P5089, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["%COMPILING"]
    unless_null $P5087, fallback4182
    nqp_get_sc_object $P5091, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5090, $P5091
    new $P5092, 'Hash'
    set $P5090["%COMPILING"], $P5092
    set $P5087, $P5092
  fallback4182:
    unless_null $P5087, vivi_14354183
    die "Contextual %*COMPILING not found"
    box $P5093, "Contextual %*COMPILING not found"
    set $P5087, $P5093
  vivi_14354183:
    set $P5086, $P5087
  fallback4181:
    set $P5085, $P5086["%?OPTIONS"]
    unless_null $P5085, fallback4184
    nqp_get_sc_object $P5094, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5085, $P5094
  fallback4184:
    set $P5084, $P5085["old-regex-lib"]
    unless_null $P5084, fallback4185
    nqp_get_sc_object $P5095, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5084, $P5095
  fallback4185:
    set $P5109, $P5084
    if $P5084 goto unless1434_end4180 
.annotate 'line', 1783
.annotate 'line', 1784
    find_dynamic_lex $P5096, "$*W"
    unless_null $P5096, fallback4186
    nqp_get_sc_object $P5099, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$W"]
    unless_null $P5097, fallback4187
    nqp_get_sc_object $P5100, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5097, $P5100
  fallback4187:
    unless_null $P5097, vivi_14364188
    die "Contextual $*W not found"
    box $P5101, "Contextual $*W not found"
    set $P5097, $P5101
  vivi_14364188:
    set $P5096, $P5097
  fallback4186:
    find_dynamic_lex $P5102, "$*GLOBALish"
    unless_null $P5102, fallback4189
    nqp_get_sc_object $P5105, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5104, $P5105
    set $P5103, $P5104["$GLOBALish"]
    unless_null $P5103, fallback4190
    nqp_get_sc_object $P5106, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5103, $P5106
  fallback4190:
    unless_null $P5103, vivi_14374191
    die "Contextual $*GLOBALish not found"
    box $P5107, "Contextual $*GLOBALish not found"
    set $P5103, $P5107
  vivi_14374191:
    set $P5102, $P5103
  fallback4189:
    $P5108 = $P5096."load_module"("NQPP6QRegex", $P5102)
    set $P5109, $P5108
  unless1434_end4180:
    set $P5110, $P5109
  unless1430_end4167:
    set $P5111, $P5110
  unless1424_end4147:
    .return ($P5111) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_253_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1801
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1802
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_254_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1807
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1808
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4195
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4196
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback4196:
    unless_null $P5003, vivi_14394197
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14394197:
    set $P5002, $P5003
  fallback4195:
    unless_null _lex_param_1, fallback4198
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4198:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4199
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4199:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4200
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4201
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5015
  fallback4201:
    unless_null $P5012, vivi_14404202
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_14404202:
    set $P5011, $P5012
  fallback4200:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    unless $I5001 goto if1441_end4204 
.annotate 'line', 1809
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1443_end4208 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4209
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5020
  fallback4209:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1443_end4208:
    unless $I5004 goto if1442_end4206 
.annotate 'line', 1810
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4210
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4211
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5025
  fallback4211:
    unless_null $P5022, vivi_14444212
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14444212:
    set $P5021, $P5022
  fallback4210:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4213
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5030, $P5031
  fallback4213:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4214
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5032
  fallback4214:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
  if1442_end4206:
.annotate 'line', 1813
    $P5034 = "&import_HOW_exports"($P101)
  if1441_end4204:
.annotate 'line', 1815
    nqp_get_sc_object $P5038, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Stmts"]
    unless_null $P5035, fallback4215
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5039
  fallback4215:
    $P5040 = $P5035."new"()
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_255_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1818
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_444_1360232768.755' 
    capture_lex $P5030 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback4216
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5004
  fallback4216:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4217
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback4217:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1820
    unless_null _lex_param_1, fallback4218
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4218:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4219
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4219:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4220
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback4220:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4223
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5015
  fallback4223:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4224
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5016
  fallback4224:
    unless $P5014 goto if1445_end4222 
.annotate 'line', 1821
.annotate 'line', 1822
    unless_null _lex_param_1, fallback4225
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5019
  fallback4225:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4226
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5020
  fallback4226:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4227
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5021
  fallback4227:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
  if1445_end4222:
  while1446_test4228:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while1446_done4232 
  while1446_redo4230:
    .const 'Sub' $P5025 = 'cuid_444_1360232768.755' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1446_test4228 
  while1446_done4232:
.annotate 'line', 1831
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1360232768.755") :anon :lex :outer("cuid_255_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1825
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1828
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4233
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5006
  fallback4233:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4234
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback4234:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4235
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5009
  fallback4235:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1829
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_256_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1834
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1835
    unless_null _lex_param_1, fallback4236
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback4236:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4237
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback4237:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1836
    $P101."op"("unless")
.annotate 'line', 1837
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_257_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1840
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1841
    unless_null _lex_param_1, fallback4238
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback4238:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4239
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback4239:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1842
    unless_null _lex_param_1, fallback4240
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5008
  fallback4240:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4241
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5009
  fallback4241:
    set $S5001, $P5007
    $P101."op"($S5001)
    find_dynamic_lex $P5010, "$*CONTROL_USED"
    unless_null $P5010, fallback4244
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$CONTROL_USED"]
    unless_null $P5011, fallback4245
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5014
  fallback4245:
    unless_null $P5011, vivi_14484246
    die "Contextual $*CONTROL_USED not found"
    box $P5015, "Contextual $*CONTROL_USED not found"
    set $P5011, $P5015
  vivi_14484246:
    set $P5010, $P5011
  fallback4244:
    if $P5010 goto unless1447_end4243 
.annotate 'line', 1843
.annotate 'line', 1844
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["IVal"]
    unless_null $P5016, fallback4247
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5020
  fallback4247:
    $P5021 = $P5016."new"(1 :named("value"), "nohandler" :named("named"))
    $P5022 = $P101."push"($P5021)
  unless1447_end4243:
.annotate 'line', 1846
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_258_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1849
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback4248
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5004
  fallback4248:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4249
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback4249:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4252
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5008
  fallback4252:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4253
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5009
  fallback4253:
    unless $P5007 goto if1449_else4250 
.annotate 'line', 1852
.annotate 'line', 1853
    unless_null _lex_param_1, fallback4254
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5011
  fallback4254:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4255
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5012
  fallback4255:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1854
    $P5015 = $P102."op"($P101)
    goto if1449_end4251
  if1449_else4250:
.annotate 'line', 1856
.annotate 'line', 1857
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4256
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5020
  fallback4256:
    unless_null _lex_param_1, fallback4257
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5022
  fallback4257:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4258
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5023
  fallback4258:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4259
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5026
  fallback4259:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4260
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5027
  fallback4260:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
  if1449_end4251:
    find_dynamic_lex $P5031, "$*CONTROL_USED"
    unless_null $P5031, fallback4263
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$CONTROL_USED"]
    unless_null $P5032, fallback4264
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5035
  fallback4264:
    unless_null $P5032, vivi_14514265
    die "Contextual $*CONTROL_USED not found"
    box $P5036, "Contextual $*CONTROL_USED not found"
    set $P5032, $P5036
  vivi_14514265:
    set $P5031, $P5032
  fallback4263:
    if $P5031 goto unless1450_end4262 
.annotate 'line', 1860
.annotate 'line', 1861
    nqp_get_sc_object $P5040, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["IVal"]
    unless_null $P5037, fallback4266
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5037, $P5041
  fallback4266:
    $P5042 = $P5037."new"(1 :named("value"), "nohandler" :named("named"))
    $P5043 = $P102."push"($P5042)
  unless1450_end4262:
.annotate 'line', 1863
    $P5044 = _lex_param_1."!make"($P102)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_259_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1866
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 1867
    unless_null _lex_param_1, fallback4267
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5004
  fallback4267:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4268
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback4268:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1868
    $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4269
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5008
  fallback4269:
    set $P102, $P5007
.annotate 'line', 1870
    $P5009 = $P102."arity"()
    if $P5009 goto unless1452_end4271 
.annotate 'line', 1871
    set $P5010, $P102[0]
    unless_null $P5010, fallback4272
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5011
  fallback4272:
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4273
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback4273:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5010."push"($P5017)
.annotate 'line', 1872
    $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1873
    $P5018 = $P102."arity"(1)
  unless1452_end4271:
.annotate 'line', 1875
    $P102."blocktype"("immediate")
    find_dynamic_lex $P5019, "$*CONTROL_USED"
    unless_null $P5019, fallback4276
    nqp_get_sc_object $P5022, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$CONTROL_USED"]
    unless_null $P5020, fallback4277
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5023
  fallback4277:
    unless_null $P5020, vivi_14544278
    die "Contextual $*CONTROL_USED not found"
    box $P5024, "Contextual $*CONTROL_USED not found"
    set $P5020, $P5024
  vivi_14544278:
    set $P5019, $P5020
  fallback4276:
    if $P5019 goto unless1453_end4275 
.annotate 'line', 1876
.annotate 'line', 1877
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["IVal"]
    unless_null $P5025, fallback4279
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5029
  fallback4279:
    $P5030 = $P5025."new"(1 :named("value"), "nohandler" :named("named"))
    $P5031 = $P101."push"($P5030)
  unless1453_end4275:
.annotate 'line', 1879
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_260_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1882
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1883
    unless_null _lex_param_1, fallback4280
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback4280:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4281
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback4281:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1884
    "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1885
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_261_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1888
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1889
    unless_null _lex_param_1, fallback4282
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback4282:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4283
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback4283:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1890
    "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1891
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_262_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1925
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1926
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4284
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4285
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback4285:
    unless_null $P5002, vivi_14554286
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14554286:
    set $P5001, $P5002
  fallback4284:
    unless_null _lex_param_1, fallback4287
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5008
  fallback4287:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4288
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5009
  fallback4288:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_263_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1930
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4289
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4290
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback4290:
    unless_null $P5002, vivi_14564291
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14564291:
    set $P5001, $P5002
  fallback4289:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4292
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4292:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4293
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4293:
    $P5011 = $P5008."ast"()
    $P5007."push"($P5011)
.annotate 'line', 1931
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4294
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback4294:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_264_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1934
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4295
    .lex "RETURN", $P102
.annotate 'line', 1935
    unless_null _lex_param_1, fallback4297
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback4297:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4298
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback4298:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4301
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback4301:
    type_check $I5001, $P101, $P5006
    unless $I5001 goto if1457_end4300 
.annotate 'line', 1936
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4306
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5012
  fallback4306:
    set $P5015, $P5011
    unless $P5011 goto if1459_end4305 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4307
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5014
  fallback4307:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1459_end4305:
    unless $P5015 goto if1458_else4302 
.annotate 'line', 1937
.annotate 'line', 1938
    _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1458_end4303
  if1458_else4302:
.annotate 'line', 1941
.annotate 'line', 1942
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1458_end4303:
  if1457_end4300:
.annotate 'line', 1945
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4308
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback4308:
.annotate 'line', 1949
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Stmts"]
    unless_null $P5026, fallback4309
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5030
  fallback4309:
.annotate 'line', 1950
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback4310
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5031, $P5035
  fallback4310:
.annotate 'line', 1952
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4311
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5040
  fallback4311:
    $P5041 = $P5036."new"("exception" :named("op"))
.annotate 'line', 1953
    nqp_get_sc_object $P5045, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback4312
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5046
  fallback4312:
    $P5047 = $P5042."new"("handled" :named("value"))
.annotate 'line', 1954
    nqp_get_sc_object $P5051, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["IVal"]
    unless_null $P5048, fallback4313
    nqp_get_sc_object $P5052, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5052
  fallback4313:
    $P5053 = $P5048."new"(1 :named("value"))
    $P5054 = $P5031."new"($P5041, $P5047, $P5053, "bindkey_i" :named("op"))
.annotate 'line', 1956
    $P5055 = "&default_for"("$")
    $P5056 = $P5026."new"($P5054, $P5055)
    $P5057 = $P5021."new"($P101, "CATCH", $P5056, "handle" :named("op"))
    $P5058 = _lex_param_1."!make"($P5057)
    goto lexotic_4296
  lexotic_4295:
    .get_results ($P5058)
  lexotic_4296:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_265_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1960
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1961
    unless_null _lex_param_1, fallback4316
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4316:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4317
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4317:
    unless $P5001 goto if1460_else4314 
.annotate 'line', 1962
    unless_null _lex_param_1, fallback4318
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback4318:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4319
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback4319:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1460_end4315
  if1460_else4314:
.annotate 'line', 1963
    unless_null _lex_param_1, fallback4320
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5010
  fallback4320:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4321
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5011
  fallback4321:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1460_end4315:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_266_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1968
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4322
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4322:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4323
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4323:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_267_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1969
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4324
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4324:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4325
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4325:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_268_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1971
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4326
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4326:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4327
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4327:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_269_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1972
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4328
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4328:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4329
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4329:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_270_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4330
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4330:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4331
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4331:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_271_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1977
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4332
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4332:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4333
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4333:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_272_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1978
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4334
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4334:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4335
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4335:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_273_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1979
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4336
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4336:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4337
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4337:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_274_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4338
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4338:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4339
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4339:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_275_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1981
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4340
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4340:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4341
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4341:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_276_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4342
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4342:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4343
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4343:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_277_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1983
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4344
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4344:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4345
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4345:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_278_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1984
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1985
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4346
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback4346:
    unless_null _lex_param_1, fallback4347
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback4347:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4348
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback4348:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_279_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1988
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 1989
    unless_null _lex_param_1, fallback4349
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback4349:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4350
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback4350:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1990
    unless_null _lex_param_1, fallback4351
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback4351:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4352
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback4352:
    $P5009 = $P5006."Str"()
    $P101."named"($P5009)
.annotate 'line', 1991
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_280_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1994
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_445_1360232768.755' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4355
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4355:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4356
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4356:
    unless $P5001 goto if1461_else4353 
.annotate 'line', 1995
.annotate 'line', 1996
    unless_null _lex_param_1, fallback4357
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback4357:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4358
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback4358:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4359
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5010
  fallback4359:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4360
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5011
  fallback4360:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4361
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5012
  fallback4361:
    set $S5001, $P5008
    $P5007."named"($S5001)
.annotate 'line', 1997
    unless_null _lex_param_1, fallback4362
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5014
  fallback4362:
    set $P5013, _lex_param_1["variable"]
    unless_null $P5013, fallback4363
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5015
  fallback4363:
    $P5016 = $P5013."ast"()
    $P5017 = _lex_param_1."!make"($P5016)
    set $P5020, $P5017
    goto if1461_end4354
  if1461_else4353:
    .const 'Sub' $P5018 = 'cuid_445_1360232768.755' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1461_end4354:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1360232768.755") :anon :lex :outer("cuid_280_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1998
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4366
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5004
  fallback4366:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4367
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback4367:
    unless $P5002 goto if1462_else4364 
.annotate 'line', 2000
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4368
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5009
  fallback4368:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4369
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5010
  fallback4369:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4370
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5011
  fallback4370:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1462_end4365
  if1462_else4364:
.annotate 'line', 2001
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4371
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5017
  fallback4371:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4372
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5020
  fallback4372:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4373
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5021
  fallback4373:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1462_end4365:
    set $P101, $P5023
.annotate 'line', 2002
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4374
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5026
  fallback4374:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4375
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5027
  fallback4375:
    set $S5001, $P5024
    $P101."named"($S5001)
.annotate 'line', 2003
    find_dynamic_lex $P5028, "$/"
    $P5029 = $P5028."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_281_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2007
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_447_1360232768.755' 
    capture_lex $P5020 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback4378
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback4378:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4379
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback4379:
    unless $P5002 goto if1463_else4376 
.annotate 'line', 2009
.annotate 'line', 2010
    unless_null _lex_param_1, fallback4380
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5006
  fallback4380:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4381
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5007
  fallback4381:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 2011
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4382
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5013
  fallback4382:
.annotate 'line', 2012
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    goto if1463_end4377
  if1463_else4376:
    .const 'Sub' $P5017 = 'cuid_447_1360232768.755' 
    capture_lex $P5017
    $P5018 = $P5017()
  if1463_end4377:
.annotate 'line', 2093
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1360232768.755") :anon :lex :outer("cuid_281_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2015
    .const 'Sub' $P5065 = 'cuid_446_1360232768.755' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_450_1360232768.755' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_451_1360232768.755' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_452_1360232768.755' 
    capture_lex $P5065 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2016
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4383
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback4383:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1464_else4384 
.annotate 'line', 2017
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4388
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5011
  fallback4388:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4389
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback4389:
    unless $P5009 goto if1465_end4387 
.annotate 'line', 2018
.annotate 'line', 2019
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
  if1465_end4387:
.annotate 'line', 2021
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5064, $P5017
    goto if1464_end4385
  if1464_else4384:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4392
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5021
  fallback4392:
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4393
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5022
  fallback4393:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4394
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5023
  fallback4394:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1466_else4390 
    .const 'Sub' $P5024 = 'cuid_446_1360232768.755' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5063, $P5025
    goto if1466_end4391
  if1466_else4390:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4405
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5029
  fallback4405:
    set $P5027, $P5028["twigil"]
    unless_null $P5027, fallback4406
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5030
  fallback4406:
    set $P5026, $P5027[0]
    unless_null $P5026, fallback4407
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5031
  fallback4407:
    set $S5003, $P5026
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1467_else4403 
    .const 'Sub' $P5032 = 'cuid_450_1360232768.755' 
    capture_lex $P5032
    $P5033 = $P5032()
    set $P5062, $P5033
    goto if1467_end4404
  if1467_else4403:
    find_lex $P5035, "$/"
    unless_null $P5035, fallback4447
    nqp_get_sc_object $P5036, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5036
  fallback4447:
    set $P5034, $P5035["semilist"]
    unless_null $P5034, fallback4448
    nqp_get_sc_object $P5037, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5037
  fallback4448:
    unless $P5034 goto if1479_else4445 
    .const 'Sub' $P5038 = 'cuid_451_1360232768.755' 
    capture_lex $P5038
    $P5039 = $P5038()
    set $P5061, $P5039
    goto if1479_end4446
  if1479_else4445:
.annotate 'line', 2078
    find_dynamic_lex $P5040, "$*W"
    unless_null $P5040, fallback4462
    nqp_get_sc_object $P5043, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["$W"]
    unless_null $P5041, fallback4463
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5041, $P5044
  fallback4463:
    unless_null $P5041, vivi_14834464
    die "Contextual $*W not found"
    box $P5045, "Contextual $*W not found"
    set $P5041, $P5045
  vivi_14834464:
    set $P5040, $P5041
  fallback4462:
    set $P5046, $P101[0]
    unless_null $P5046, fallback4465
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5046, $P5047
  fallback4465:
    set $S5004, $P5046
    $P5048 = $P5040."is_package"($S5004)
    unless $P5048 goto if1482_else4460 
.annotate 'line', 2079
    find_lex $P5049, "$/"
    $P5050 = "&lexical_package_lookup"($P101, $P5049)
    store_lex "$past", $P5050
.annotate 'line', 2080
    find_lex $P5051, "$past"
    find_lex $P5053, "$/"
    unless_null $P5053, fallback4466
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5053, $P5054
  fallback4466:
    set $P5052, $P5053["sigil"]
    unless_null $P5052, fallback4467
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5052, $P5055
  fallback4467:
    $P5056 = "&default_for"($P5052)
    $P5057 = $P5051."fallback"($P5056)
    set $P5060, $P5057
    goto if1482_end4461
  if1482_else4460:
    .const 'Sub' $P5058 = 'cuid_452_1360232768.755' 
    capture_lex $P5058
    $P5059 = $P5058()
    set $P5060, $P5059
  if1482_end4461:
    set $P5061, $P5060
  if1479_end4446:
    set $P5062, $P5061
  if1467_end4404:
    set $P5063, $P5062
  if1466_end4391:
    set $P5064, $P5063
  if1464_end4385:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1360232768.755") :anon :lex :outer("cuid_447_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2023
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2024
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4395
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback4395:
.annotate 'line', 2026
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4396
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5011
  fallback4396:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4397
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback4397:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4398
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5015
  fallback4398:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4399
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5016
  fallback4399:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 2027
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4400
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5024
  fallback4400:
.annotate 'line', 2029
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4401
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5029
  fallback4401:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 2031
    nqp_get_sc_object $P5037, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4402
    nqp_get_sc_object $P5038, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5038
  fallback4402:
.annotate 'line', 2032
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1360232768.755") :anon :lex :outer("cuid_447_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2036
    .const 'Sub' $P5064 = 'cuid_449_1360232768.755' 
    capture_lex $P5064 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 2037
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4410
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4411
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5010
  fallback4411:
    unless_null $P5007, vivi_14694412
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_14694412:
    set $P5006, $P5007
  fallback4410:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1468_else4408 
.annotate 'line', 2039
.annotate 'line', 2040
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4413
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback4413:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2041
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4414
    nqp_get_sc_object $P5021, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4415
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5022
  fallback4415:
    unless_null $P5019, vivi_14704416
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_14704416:
    set $P5018, $P5019
  fallback4414:
    $P5024 = $P102."set_compile_time_value"($P5018)
    goto if1468_end4409
  if1468_else4408:
.annotate 'line', 2043
.annotate 'line', 2044
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4417
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5029
  fallback4417:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4418
    nqp_get_sc_object $P5033, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4419
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5031, $P5034
  fallback4419:
    unless_null $P5031, vivi_14714420
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_14714420:
    set $P5030, $P5031
  fallback4418:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
  if1468_end4409:
.annotate 'line', 2046
    nqp_get_sc_object $P5040, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback4421
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5037, $P5041
  fallback4421:
.annotate 'line', 2048
    nqp_get_sc_object $P5045, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback4422
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5046
  fallback4422:
.annotate 'line', 2049
    nqp_get_sc_object $P5050, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback4423
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5047, $P5051
  fallback4423:
    $P5052 = $P5047."new"("self" :named("name"), "lexical" :named("scope"))
    $P5053 = $P5042."new"($P5052, "decont" :named("op"))
    $P5054 = $P5037."new"($P5053, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5054
    find_dynamic_lex $P5055, "$*IN_DECL"
    unless_null $P5055, fallback4426
    nqp_get_sc_object $P5058, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$IN_DECL"]
    unless_null $P5056, fallback4427
    nqp_get_sc_object $P5059, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5056, $P5059
  fallback4427:
    unless_null $P5056, vivi_14734428
    die "Contextual $*IN_DECL not found"
    box $P5060, "Contextual $*IN_DECL not found"
    set $P5056, $P5060
  vivi_14734428:
    set $P5055, $P5056
  fallback4426:
    set $P5063, $P5055
    if $P5055 goto unless1472_end4425 
    .const 'Sub' $P5061 = 'cuid_449_1360232768.755' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5063, $P5062
  unless1472_end4425:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1360232768.755") :anon :lex :outer("cuid_450_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2054
    .const 'Sub' $P5032 = 'cuid_448_1360232768.755' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2056
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4429
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4430
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5010
  fallback4430:
    unless_null $P5007, vivi_14744431
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14744431:
    set $P5006, $P5007
  fallback4429:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4432
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4433
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5016
  fallback4433:
    unless_null $P5013, vivi_14754434
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14754434:
    set $P5012, $P5013
  fallback4432:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4437
    push_eh $P5020
  for_next4438:
    unless $P5004, for_done4440
    shift $P5021, $P5004
  for_redo4439:
    .const 'Sub' $P5019 = 'cuid_448_1360232768.755' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4438
  for_handlers4437:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4438
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4439
  for_done4440:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1477_else4441 
.annotate 'line', 2062
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1478_end4444 
.annotate 'line', 2063
.annotate 'line', 2064
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1478_end4444:
    set $P5031, $P5025
    goto if1477_end4442
  if1477_else4441:
.annotate 'line', 2067
.annotate 'line', 2068
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1477_end4442:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1360232768.755") :anon :lex :outer("cuid_449_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2056
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2057
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1476_end4436 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1476_end4436:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1360232768.755") :anon :lex :outer("cuid_447_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2072
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4451
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5004
  fallback4451:
    set $P5002, $P5003["sigil"]
    unless_null $P5002, fallback4452
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback4452:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1480_else4449 
    set $S5004, "list"
    goto if1480_end4450
  if1480_else4449:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback4455
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5008
  fallback4455:
    set $P5006, $P5007["sigil"]
    unless_null $P5006, fallback4456
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5009
  fallback4456:
    set $S5002, $P5006
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1481_else4453 
    set $S5003, "hash"
    goto if1481_end4454
  if1481_else4453:
    set $S5003, "item"
  if1481_end4454:
    set $S5004, $S5003
  if1480_end4450:
    box $P5010, $S5004
    set $P101, $P5010
.annotate 'line', 2076
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4457
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback4457:
    find_lex $P5017, "$/"
    unless_null $P5017, fallback4458
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5018
  fallback4458:
    set $P5016, $P5017["semilist"]
    unless_null $P5016, fallback4459
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5019
  fallback4459:
    $P5020 = $P5016."ast"()
    $P5021 = $P5011."new"($P5020, "callmethod" :named("op"), $P101 :named("name"))
    store_lex "$past", $P5021
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1360232768.755") :anon :lex :outer("cuid_447_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2082
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2083
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4480
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4481
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5009
  fallback4481:
    unless_null $P5006, vivi_14904482
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14904482:
    set $P5005, $P5006
  fallback4480:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1489_end4479 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1489_end4479:
    set $I5005, $I5003
    if $I5003 goto unless1488_end4477 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1488_end4477:
    set $I5007, $I5005
    if $I5005 goto unless1487_end4475 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1487_end4475:
    set $I5009, $I5007
    if $I5007 goto unless1486_end4473 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4483
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5014
  fallback4483:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4484
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5015
  fallback4484:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4485
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5016
  fallback4485:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1486_end4473:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1485_end4471 
.annotate 'line', 2085
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4486
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4487
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5021
  fallback4487:
    unless_null $P5018, vivi_14914488
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14914488:
    set $P5017, $P5018
  fallback4486:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1485_end4471:
    unless $P5024 goto if1484_else4468 
.annotate 'line', 2086
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4489
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5030
  fallback4489:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1484_end4469
  if1484_else4468:
.annotate 'line', 2088
.annotate 'line', 2089
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1484_end4469:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_282_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2096
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4490
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4490:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4491
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4491:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_283_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2097
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4492
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4492:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4493
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4493:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_284_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2098
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4494
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4494:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4495
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4495:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_285_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2099
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4496
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4496:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4497
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4497:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_286_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2100
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4498
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4498:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4499
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4499:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_287_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2101
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4500
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4500:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4501
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4501:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_288_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2103
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 2106
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4502
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4503
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback4503:
    unless_null $P5004, vivi_14924504
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14924504:
    set $P5003, $P5004
  fallback4502:
    unless_null _lex_param_1, fallback4505
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5011
  fallback4505:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4506
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5012
  fallback4506:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4507
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5013
  fallback4507:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2107
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4508
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4509
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5019
  fallback4509:
    unless_null $P5016, vivi_14934510
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14934510:
    set $P5015, $P5016
  fallback4508:
    unless_null _lex_param_1, fallback4511
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5022
  fallback4511:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4512
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5023
  fallback4512:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4517
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4518
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5029
  fallback4518:
    unless_null $P5026, vivi_14964519
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14964519:
    set $P5025, $P5026
  fallback4517:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1495_end4516 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4520
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4521
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5035
  fallback4521:
    unless_null $P5032, vivi_14974522
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_14974522:
    set $P5031, $P5032
  fallback4520:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1495_end4516:
    unless $I5003 goto if1494_else4513 
.annotate 'line', 2110
.annotate 'line', 2111
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4523
    nqp_get_sc_object $P5040, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4524
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5041
  fallback4524:
    unless_null $P5038, vivi_14984525
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_14984525:
    set $P5037, $P5038
  fallback4523:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4526
    nqp_get_sc_object $P5046, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4527
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5047
  fallback4527:
    unless_null $P5044, vivi_14994528
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_14994528:
    set $P5043, $P5044
  fallback4526:
    unless_null _lex_param_1, fallback4529
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5051
  fallback4529:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4530
    nqp_get_sc_object $P5052, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5050, $P5052
  fallback4530:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4531
    nqp_get_sc_object $P5053, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5049, $P5053
  fallback4531:
    $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4534
    nqp_get_sc_object $P5056, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5056
  fallback4534:
    set $P5055, _lex_param_1["name"]
    unless_null $P5055, fallback4535
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5057
  fallback4535:
    set $P5054, $P5055["identifier"]
    unless_null $P5054, fallback4536
    nqp_get_sc_object $P5058, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5054, $P5058
  fallback4536:
    set $N5001, $P5054
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5081, $I5004
    set $P5080, $P5081
    unless $I5004 goto if1500_end4533 
.annotate 'line', 2112
.annotate 'line', 2113
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4537
    nqp_get_sc_object $P5062, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4538
    nqp_get_sc_object $P5063, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5060, $P5063
  fallback4538:
    unless_null $P5060, vivi_15014539
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_15014539:
    set $P5059, $P5060
  fallback4537:
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4540
    nqp_get_sc_object $P5068, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4541
    nqp_get_sc_object $P5069, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5066, $P5069
  fallback4541:
    unless_null $P5066, vivi_15024542
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15024542:
    set $P5065, $P5066
  fallback4540:
    $P5071 = $P5065."cur_lexpad"()
    unless_null _lex_param_1, fallback4543
    nqp_get_sc_object $P5075, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5075
  fallback4543:
    set $P5074, _lex_param_1["name"]
    unless_null $P5074, fallback4544
    nqp_get_sc_object $P5076, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5074, $P5076
  fallback4544:
    set $P5073, $P5074["identifier"]
    unless_null $P5073, fallback4545
    nqp_get_sc_object $P5077, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5073, $P5077
  fallback4545:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback4546
    nqp_get_sc_object $P5078, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5072, $P5078
  fallback4546:
    $P5079 = $P5059."install_lexical_symbol"($P5071, $P5072, $P102)
    set $P5080, $P5079
  if1500_end4533:
    goto if1494_end4514
  if1494_else4513:
    find_dynamic_lex $P5082, "$*SCOPE"
    unless_null $P5082, fallback4549
    nqp_get_sc_object $P5085, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$SCOPE"]
    unless_null $P5083, fallback4550
    nqp_get_sc_object $P5086, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5083, $P5086
  fallback4550:
    unless_null $P5083, vivi_15044551
    die "Contextual $*SCOPE not found"
    box $P5087, "Contextual $*SCOPE not found"
    set $P5083, $P5087
  vivi_15044551:
    set $P5082, $P5083
  fallback4549:
    set $S5004, $P5082
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1503_else4547 
.annotate 'line', 2116
    unless_null _lex_param_1, fallback4554
    nqp_get_sc_object $P5090, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5090
  fallback4554:
    set $P5089, _lex_param_1["name"]
    unless_null $P5089, fallback4555
    nqp_get_sc_object $P5091, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5089, $P5091
  fallback4555:
    set $P5088, $P5089["identifier"]
    unless_null $P5088, fallback4556
    nqp_get_sc_object $P5092, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5088, $P5092
  fallback4556:
    set $N5003, $P5088
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if1505_end4553 
.annotate 'line', 2117
.annotate 'line', 2118
    unless_null _lex_param_1, fallback4557
    nqp_get_sc_object $P5094, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5094
  fallback4557:
    set $P5093, _lex_param_1["name"]
    unless_null $P5093, fallback4558
    nqp_get_sc_object $P5095, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5093, $P5095
  fallback4558:
    $P5096 = $P5093."CURSOR"()
    $P5097 = $P5096."panic"("A my scoped package cannot have a multi-part name yet")
  if1505_end4553:
.annotate 'line', 2120
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4559
    nqp_get_sc_object $P5101, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4560
    nqp_get_sc_object $P5102, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5099, $P5102
  fallback4560:
    unless_null $P5099, vivi_15064561
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15064561:
    set $P5098, $P5099
  fallback4559:
    find_dynamic_lex $P5104, "$*W"
    unless_null $P5104, fallback4562
    nqp_get_sc_object $P5107, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$W"]
    unless_null $P5105, fallback4563
    nqp_get_sc_object $P5108, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5105, $P5108
  fallback4563:
    unless_null $P5105, vivi_15074564
    die "Contextual $*W not found"
    box $P5109, "Contextual $*W not found"
    set $P5105, $P5109
  vivi_15074564:
    set $P5104, $P5105
  fallback4562:
    $P5110 = $P5104."cur_lexpad"()
    unless_null _lex_param_1, fallback4565
    nqp_get_sc_object $P5114, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5114
  fallback4565:
    set $P5113, _lex_param_1["name"]
    unless_null $P5113, fallback4566
    nqp_get_sc_object $P5115, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5113, $P5115
  fallback4566:
    set $P5112, $P5113["identifier"]
    unless_null $P5112, fallback4567
    nqp_get_sc_object $P5116, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5112, $P5116
  fallback4567:
    set $P5111, $P5112[0]
    unless_null $P5111, fallback4568
    nqp_get_sc_object $P5117, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5111, $P5117
  fallback4568:
    $P5118 = $P5098."install_lexical_symbol"($P5110, $P5111, $P102)
    set $P5127, $P5118
    goto if1503_end4548
  if1503_else4547:
.annotate 'line', 2122
.annotate 'line', 2123
    $P5119 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5120, "$*SCOPE"
    unless_null $P5120, fallback4569
    nqp_get_sc_object $P5123, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["$SCOPE"]
    unless_null $P5121, fallback4570
    nqp_get_sc_object $P5124, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5121, $P5124
  fallback4570:
    unless_null $P5121, vivi_15084571
    die "Contextual $*SCOPE not found"
    box $P5125, "Contextual $*SCOPE not found"
    set $P5121, $P5125
  vivi_15084571:
    set $P5120, $P5121
  fallback4569:
    set $S5006, $P5120
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5126 = $P5119."panic"($S5005)
    set $P5127, $P5126
  if1503_end4548:
  if1494_end4514:
.annotate 'line', 2126
    nqp_get_sc_object $P5131, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["Stmts"]
    unless_null $P5128, fallback4572
    nqp_get_sc_object $P5132, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5128, $P5132
  fallback4572:
    $P5133 = $P5128."new"()
    $P5134 = _lex_param_1."!make"($P5133)
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_289_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2129
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5149 = 'cuid_454_1360232768.755' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_455_1360232768.755' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_456_1360232768.755' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_457_1360232768.755' 
    capture_lex $P5149 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
    unless_null _lex_param_1, fallback4573
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5008
  fallback4573:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4574
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5009
  fallback4574:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4575
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback4575:
    repr_clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2132
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4576
    nqp_get_sc_object $P5017, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4577
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4577:
    unless_null $P5015, vivi_15094578
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_15094578:
    set $P5014, $P5015
  fallback4576:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4579
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4580
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5026
  fallback4580:
    unless_null $P5023, vivi_15104581
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_15104581:
    set $P5022, $P5023
  fallback4579:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4582
    nqp_get_sc_object $P5028, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5028
  fallback4582:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4585
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5030
  fallback4585:
    set $P5029, _lex_param_1["blockoid"]
    unless_null $P5029, fallback4586
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5029, $P5031
  fallback4586:
    unless $P5029 goto if1511_else4583 
.annotate 'line', 2137
.annotate 'line', 2138
    unless_null _lex_param_1, fallback4587
    nqp_get_sc_object $P5033, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5033
  fallback4587:
    set $P5032, _lex_param_1["blockoid"]
    unless_null $P5032, fallback4588
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5034
  fallback4588:
    $P5035 = $P5032."ast"()
    set $P104, $P5035
    goto if1511_end4584
  if1511_else4583:
.annotate 'line', 2140
.annotate 'line', 2141
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4589
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4590
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5037, $P5040
  fallback4590:
    unless_null $P5037, vivi_15124591
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15124591:
    set $P5036, $P5037
  fallback4589:
    $P5042 = $P5036."pop_lexpad"()
    set $P104, $P5042
.annotate 'line', 2142
    unless_null _lex_param_1, fallback4592
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5044
  fallback4592:
    set $P5043, _lex_param_1["statementlist"]
    unless_null $P5043, fallback4593
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5043, $P5045
  fallback4593:
    $P5046 = $P5043."ast"()
    $P5047 = $P104."push"($P5046)
  if1511_end4584:
    can $I5001, $P103, "parametric"
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto if1514_end4597 
.annotate 'line', 2149
    $P5048 = $P103."parametric"($P103)
    set $P5049, $P5048
  if1514_end4597:
    unless $P5049 goto if1513_else4594 
    .const 'Sub' $P5051 = 'cuid_454_1360232768.755' 
    capture_lex $P5051
    $P5052 = $P5051()
    goto if1513_end4595
  if1513_else4594:
.annotate 'line', 2166
.annotate 'line', 2167
    $P104."blocktype"("immediate")
.annotate 'line', 2168
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4630
    nqp_get_sc_object $P5056, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4631
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5054, $P5057
  fallback4631:
    unless_null $P5054, vivi_15224632
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_15224632:
    set $P5053, $P5054
  fallback4630:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4633
    nqp_get_sc_object $P5062, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4634
    nqp_get_sc_object $P5063, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5060, $P5063
  fallback4634:
    unless_null $P5060, vivi_15234635
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_15234635:
    set $P5059, $P5060
  fallback4633:
    $P5053."install_lexical_symbol"($P104, "$?PACKAGE", $P5059)
.annotate 'line', 2169
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4636
    nqp_get_sc_object $P5068, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4637
    nqp_get_sc_object $P5069, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5066, $P5069
  fallback4637:
    unless_null $P5066, vivi_15244638
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15244638:
    set $P5065, $P5066
  fallback4636:
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4639
    nqp_get_sc_object $P5074, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4640
    nqp_get_sc_object $P5075, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5072, $P5075
  fallback4640:
    unless_null $P5072, vivi_15254641
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_15254641:
    set $P5071, $P5072
  fallback4639:
    $P5077 = $P5065."install_lexical_symbol"($P104, "$?CLASS", $P5071)
  if1513_end4595:
    unless_null _lex_param_1, fallback4644
    nqp_get_sc_object $P5079, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5079
  fallback4644:
    set $P5078, _lex_param_1["parent"]
    unless_null $P5078, fallback4645
    nqp_get_sc_object $P5080, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5078, $P5080
  fallback4645:
    unless $P5078 goto if1526_else4642 
    .const 'Sub' $P5081 = 'cuid_455_1360232768.755' 
    capture_lex $P5081
    $P5082 = $P5081()
    goto if1526_end4643
  if1526_else4642:
    can $I5002, $P103, "set_default_parent"
    box $P5086, $I5002
    set $P5085, $P5086
    unless $I5002 goto if1533_end4667 
    .const 'Sub' $P5083 = 'cuid_456_1360232768.755' 
    capture_lex $P5083
    $P5084 = $P5083()
    set $P5085, $P5084
  if1533_end4667:
  if1526_end4643:
    unless_null _lex_param_1, fallback4684
    nqp_get_sc_object $P5088, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5088
  fallback4684:
    set $P5087, _lex_param_1["role"]
    unless_null $P5087, fallback4685
    nqp_get_sc_object $P5089, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5087, $P5089
  fallback4685:
    unless $P5087 goto if1539_end4683 
.annotate 'line', 2194
    unless_null _lex_param_1, fallback4686
    nqp_get_sc_object $P5094, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5094
  fallback4686:
    set $P5093, _lex_param_1["role"]
    unless_null $P5093, fallback4687
    nqp_get_sc_object $P5095, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5093, $P5095
  fallback4687:
    set $P5090, $P5093
    iter $P5092, $P5093
  for_next4702:
    unless $P5092, for_done4704
    shift $P5097, $P5092
  for_redo4703:
    .const 'Sub' $P5096 = 'cuid_457_1360232768.755' 
    capture_lex $P5096
    $P5090 = $P5096($P5097)
    goto for_next4702
  for_done4704:
  if1539_end4683:
.annotate 'line', 2212
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4705
    nqp_get_sc_object $P5101, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4706
    nqp_get_sc_object $P5102, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5099, $P5102
  fallback4706:
    unless_null $P5099, vivi_15464707
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15464707:
    set $P5098, $P5099
  fallback4705:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback4708
    nqp_get_sc_object $P5107, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback4709
    nqp_get_sc_object $P5108, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5105, $P5108
  fallback4709:
    unless_null $P5105, vivi_15474710
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_15474710:
    set $P5104, $P5105
  fallback4708:
    $P5098."pkg_compose"($P5104)
    find_dynamic_lex $P5110, "$*PKGDECL"
    unless_null $P5110, fallback4715
    nqp_get_sc_object $P5113, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["$PKGDECL"]
    unless_null $P5111, fallback4716
    nqp_get_sc_object $P5114, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5111, $P5114
  fallback4716:
    unless_null $P5111, vivi_15504717
    die "Contextual $*PKGDECL not found"
    box $P5115, "Contextual $*PKGDECL not found"
    set $P5111, $P5115
  vivi_15504717:
    set $P5110, $P5111
  fallback4715:
    set $S5003, $P5110
    iseq $I5003, $S5003, "grammar"
    set $I5005, $I5003
    unless $I5003 goto if1549_end4714 
    find_dynamic_lex $P5116, "$*PACKAGE"
    unless_null $P5116, fallback4718
    nqp_get_sc_object $P5119, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["$PACKAGE"]
    unless_null $P5117, fallback4719
    nqp_get_sc_object $P5120, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5117, $P5120
  fallback4719:
    unless_null $P5117, vivi_15514720
    die "Contextual $*PACKAGE not found"
    box $P5121, "Contextual $*PACKAGE not found"
    set $P5117, $P5121
  vivi_15514720:
    set $P5116, $P5117
  fallback4718:
    can $I5004, $P5116, "!precompute_nfas"
    set $I5005, $I5004
  if1549_end4714:
    unless $I5005 goto if1548_end4712 
.annotate 'line', 2215
.annotate 'line', 2216
    find_dynamic_lex $P5122, "$*PACKAGE"
    unless_null $P5122, fallback4721
    nqp_get_sc_object $P5125, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["$PACKAGE"]
    unless_null $P5123, fallback4722
    nqp_get_sc_object $P5126, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5123, $P5126
  fallback4722:
    unless_null $P5123, vivi_15524723
    die "Contextual $*PACKAGE not found"
    box $P5127, "Contextual $*PACKAGE not found"
    set $P5123, $P5127
  vivi_15524723:
    set $P5122, $P5123
  fallback4721:
    $P5128 = $P5122."!precompute_nfas"()
  if1548_end4712:
    unless_null _lex_param_1, fallback4726
    nqp_get_sc_object $P5130, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5130
  fallback4726:
    set $P5129, _lex_param_1["export"]
    unless_null $P5129, fallback4727
    nqp_get_sc_object $P5131, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5129, $P5131
  fallback4727:
    unless $P5129 goto if1553_end4725 
.annotate 'line', 2220
    find_dynamic_lex $P5135, "$*EXPORT"
    unless_null $P5135, fallback4728
    nqp_get_sc_object $P5138, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["$EXPORT"]
    unless_null $P5136, fallback4729
    nqp_get_sc_object $P5139, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5136, $P5139
  fallback4729:
    unless_null $P5136, vivi_15544730
    die "Contextual $*EXPORT not found"
    box $P5140, "Contextual $*EXPORT not found"
    set $P5136, $P5140
  vivi_15544730:
    set $P5135, $P5136
  fallback4728:
    get_who $P5134, $P5135
    set $P5133, $P5134["DEFAULT"]
    unless_null $P5133, fallback4731
    nqp_get_sc_object $P5141, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5133, $P5141
  fallback4731:
    get_who $P5132, $P5133
    set $S5004, $P102
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4732
    nqp_get_sc_object $P5145, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4733
    nqp_get_sc_object $P5146, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5143, $P5146
  fallback4733:
    unless_null $P5143, vivi_15554734
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_15554734:
    set $P5142, $P5143
  fallback4732:
    set $P5132[$S5004], $P5142
  if1553_end4725:
.annotate 'line', 2224
    $P5148 = _lex_param_1."!make"($P104)
    .return ($P5148) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1360232768.755") :anon :lex :outer("cuid_289_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2149
    .const 'Sub' $P5081 = 'cuid_453_1360232768.755' 
    capture_lex $P5081 
    .lex "$params", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2150
    find_lex $P5002, "$past"
    $P5002."blocktype"("declaration")
.annotate 'line', 2151
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Stmts"]
    unless_null $P5003, fallback4598
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5007
  fallback4598:
.annotate 'line', 2152
    nqp_get_sc_object $P5011, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Var"]
    unless_null $P5008, fallback4599
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5012
  fallback4599:
    $P5013 = $P5008."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4602
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5017
  fallback4602:
    set $P5015, $P5016["role_params"]
    unless_null $P5015, fallback4603
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5018
  fallback4603:
    unless $P5015 goto if1515_end4601 
.annotate 'line', 2154
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4604
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5026
  fallback4604:
    set $P5024, $P5025["role_params"]
    unless_null $P5024, fallback4605
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5027
  fallback4605:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback4606
    nqp_get_sc_object $P5028, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5028
  fallback4606:
    set $P5022, $P5023["variable"]
    unless_null $P5022, fallback4607
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5029
  fallback4607:
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next4608:
    unless $P5021, for_done4610
    shift $P5031, $P5021
  for_redo4609:
    .const 'Sub' $P5030 = 'cuid_453_1360232768.755' 
    capture_lex $P5030
    $P5019 = $P5030($P5031)
    goto for_next4608
  for_done4610:
  if1515_end4601:
.annotate 'line', 2159
    find_lex $P5032, "$past"
    $P5032."unshift"($P101)
.annotate 'line', 2160
    find_lex $P5033, "$past"
    nqp_get_sc_object $P5037, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4611
    nqp_get_sc_object $P5038, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5038
  fallback4611:
    $P5039 = $P5034."new"("curlexpad" :named("op"))
    $P5033."push"($P5039)
.annotate 'line', 2161
    find_lex $P5040, "$past"
    $P5040."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2162
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback4612
    nqp_get_sc_object $P5044, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback4613
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5045
  fallback4613:
    unless_null $P5042, vivi_15164614
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_15164614:
    set $P5041, $P5042
  fallback4612:
    find_dynamic_lex $P5047, "$*PACKAGE"
    unless_null $P5047, fallback4615
    nqp_get_sc_object $P5050, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$PACKAGE"]
    unless_null $P5048, fallback4616
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5051
  fallback4616:
    unless_null $P5048, vivi_15174617
    die "Contextual $*PACKAGE not found"
    box $P5052, "Contextual $*PACKAGE not found"
    set $P5048, $P5052
  vivi_15174617:
    set $P5047, $P5048
  fallback4615:
    find_lex $P5053, "$past"
    $P5041."pkg_set_body_block"($P5047, $P5053)
.annotate 'line', 2163
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4618
    nqp_get_sc_object $P5057, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4619
    nqp_get_sc_object $P5058, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5058
  fallback4619:
    unless_null $P5055, vivi_15184620
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15184620:
    set $P5054, $P5055
  fallback4618:
    find_lex $P5060, "$past"
    find_dynamic_lex $P5061, "$*PACKAGE"
    unless_null $P5061, fallback4621
    nqp_get_sc_object $P5064, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$PACKAGE"]
    unless_null $P5062, fallback4622
    nqp_get_sc_object $P5065, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5062, $P5065
  fallback4622:
    unless_null $P5062, vivi_15194623
    die "Contextual $*PACKAGE not found"
    box $P5066, "Contextual $*PACKAGE not found"
    set $P5062, $P5066
  vivi_15194623:
    set $P5061, $P5062
  fallback4621:
    $P5054."install_lexical_symbol"($P5060, "$?PACKAGE", $P5061)
.annotate 'line', 2164
    find_dynamic_lex $P5067, "$*W"
    unless_null $P5067, fallback4624
    nqp_get_sc_object $P5070, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["$W"]
    unless_null $P5068, fallback4625
    nqp_get_sc_object $P5071, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5068, $P5071
  fallback4625:
    unless_null $P5068, vivi_15204626
    die "Contextual $*W not found"
    box $P5072, "Contextual $*W not found"
    set $P5068, $P5072
  vivi_15204626:
    set $P5067, $P5068
  fallback4624:
    find_lex $P5073, "$past"
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4627
    nqp_get_sc_object $P5077, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4628
    nqp_get_sc_object $P5078, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5075, $P5078
  fallback4628:
    unless_null $P5075, vivi_15214629
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_15214629:
    set $P5074, $P5075
  fallback4627:
    $P5080 = $P5067."install_lexical_symbol"($P5073, "$?ROLE", $P5074)
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1360232768.755") :anon :lex :outer("cuid_454_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2155
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2156
    find_lex $P5001, "$params"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1360232768.755") :anon :lex :outer("cuid_289_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2173
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_15294654
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2176
.annotate 'line', 2177
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4646
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4647
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback4647:
    unless_null $P5004, vivi_15274648
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15274648:
    set $P5003, $P5004
  fallback4646:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4649
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5014
  fallback4649:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4650
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5015
  fallback4650:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4651
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5016
  fallback4651:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4652
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5017
  fallback4652:
    repr_clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_15284653
  catch_handler_15294654:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_15284653
  skip_handler_15284653:
    unless $P102 goto if1530_else4655 
.annotate 'line', 2180
.annotate 'line', 2181
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4657
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4658
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5026
  fallback4658:
    unless_null $P5023, vivi_15314659
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_15314659:
    set $P5022, $P5023
  fallback4657:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4660
    nqp_get_sc_object $P5031, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4661
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5029, $P5032
  fallback4661:
    unless_null $P5029, vivi_15324662
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_15324662:
    set $P5028, $P5029
  fallback4660:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1530_end4656
  if1530_else4655:
.annotate 'line', 2183
.annotate 'line', 2184
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4663
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5040
  fallback4663:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4664
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5041
  fallback4664:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4665
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5037, $P5042
  fallback4665:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1530_end4656:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1360232768.755") :anon :lex :outer("cuid_289_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2187
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4670
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4671
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback4671:
    unless_null $P5003, vivi_15354672
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_15354672:
    set $P5002, $P5003
  fallback4670:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1534_else4668 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1534_end4669
  if1534_else4668:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1534_end4669:
    set $P101, $P5012
.annotate 'line', 2189
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4673
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4674
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5017
  fallback4674:
    unless_null $P5014, vivi_15364675
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15364675:
    set $P5013, $P5014
  fallback4673:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4676
    nqp_get_sc_object $P5022, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4677
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5023
  fallback4677:
    unless_null $P5020, vivi_15374678
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_15374678:
    set $P5019, $P5020
  fallback4676:
.annotate 'line', 2190
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4679
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4680
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5029
  fallback4680:
    unless_null $P5026, vivi_15384681
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_15384681:
    set $P5025, $P5026
  fallback4679:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1360232768.755") :anon :lex :outer("cuid_289_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2195
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_15424693
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2198
.annotate 'line', 2199
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4688
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4689
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback4689:
    unless_null $P5004, vivi_15404690
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15404690:
    set $P5003, $P5004
  fallback4688:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4691
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5011
  fallback4691:
    repr_clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_15414692
  catch_handler_15424693:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_15414692
  skip_handler_15414692:
    unless $P102 goto if1543_else4694 
.annotate 'line', 2202
.annotate 'line', 2203
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4696
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4697
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5020
  fallback4697:
    unless_null $P5017, vivi_15444698
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15444698:
    set $P5016, $P5017
  fallback4696:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4699
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4700
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5026
  fallback4700:
    unless_null $P5023, vivi_15454701
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15454701:
    set $P5022, $P5023
  fallback4699:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1543_end4695
  if1543_else4694:
.annotate 'line', 2205
.annotate 'line', 2206
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1543_end4695:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_290_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2227
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_458_1360232768.755' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4735
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback4735:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4736
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback4736:
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next4740:
    unless $P5003, for_done4742
    shift $P5008, $P5003
  for_redo4741:
    .const 'Sub' $P5007 = 'cuid_458_1360232768.755' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next4740
  for_done4742:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1360232768.755") :anon :lex :outer("cuid_290_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2228
    .param pmc _lex_param_0 
    .lex "$var", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2229
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
.annotate 'line', 2230
    $P101."scope"("lexical")
.annotate 'line', 2231
    $P101."decl"("param")
.annotate 'line', 2232
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4737
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4738
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback4738:
    unless_null $P5004, vivi_15564739
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15564739:
    set $P5003, $P5004
  fallback4737:
    $P5009 = $P5003."cur_lexpad"()
    $P5010 = $P101."name"()
    $P5011 = $P5009."symbol"($P5010, "lexical" :named("scope"))
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_291_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2236
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4743
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4743:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4744
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4744:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_292_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2237
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4745
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4745:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4746
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4746:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_293_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2238
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4747
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4747:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4748
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4748:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_294_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2240
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2241
    unless_null _lex_param_1, fallback4751
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4751:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4752
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4752:
    unless $P5001 goto if1557_else4749 
    unless_null _lex_param_1, fallback4753
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback4753:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4754
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback4754:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1557_end4750
  if1557_else4749:
    unless_null _lex_param_1, fallback4757
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4757:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4758
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4758:
    unless $P5008 goto if1558_else4755 
.annotate 'line', 2242
    unless_null _lex_param_1, fallback4759
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5012
  fallback4759:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4760
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5013
  fallback4760:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1558_end4756
  if1558_else4755:
.annotate 'line', 2243
    unless_null _lex_param_1, fallback4761
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5016
  fallback4761:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4762
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5017
  fallback4762:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1558_end4756:
    set $P5020, $P5019
  if1557_end4750:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_295_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2246
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2247
    unless_null _lex_param_1, fallback4765
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4765:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4766
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4766:
    unless $P5001 goto if1559_else4763 
.annotate 'line', 2248
    unless_null _lex_param_1, fallback4767
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback4767:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4768
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback4768:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1559_end4764
  if1559_else4763:
.annotate 'line', 2249
    unless_null _lex_param_1, fallback4769
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4769:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4770
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4770:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1559_end4764:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_296_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2252
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4773
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4773:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4774
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4774:
    unless $P5001 goto if1560_else4771 
    unless_null _lex_param_1, fallback4775
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback4775:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4776
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback4776:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1560_end4772
  if1560_else4771:
    unless_null _lex_param_1, fallback4777
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4777:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4778
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4778:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1560_end4772:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_297_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2253
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4781
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4781:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4782
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4782:
    unless $P5001 goto if1561_else4779 
    unless_null _lex_param_1, fallback4783
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback4783:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4784
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback4784:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1561_end4780
  if1561_else4779:
    unless_null _lex_param_1, fallback4785
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4785:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4786
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4786:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1561_end4780:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_298_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2254
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4787
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4787:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4788
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4788:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_299_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2257
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5067 = 'cuid_459_1360232768.755' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_461_1360232768.755' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_462_1360232768.755' 
    capture_lex $P5067 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
.annotate 'line', 2258
    unless_null _lex_param_1, fallback4789
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5006
  fallback4789:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4790
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5007
  fallback4790:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4791
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5011
  fallback4791:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4792
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5012
  fallback4792:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4793
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5013
  fallback4793:
    set $P102, $P5009
.annotate 'line', 2260
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2261
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4794
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4795
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5019
  fallback4795:
    unless_null $P5016, vivi_15624796
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_15624796:
    set $P5015, $P5016
  fallback4794:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1564_end4800 
.annotate 'line', 2262
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1564_end4800:
    unless $P5023 goto if1563_end4798 
.annotate 'line', 2263
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
  if1563_end4798:
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4803
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4804
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5030
  fallback4804:
    unless_null $P5027, vivi_15664805
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_15664805:
    set $P5026, $P5027
  fallback4803:
    set $S5001, $P5026
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1565_else4801 
    .const 'Sub' $P5032 = 'cuid_459_1360232768.755' 
    capture_lex $P5032
    $P5033 = $P5032()
    goto if1565_end4802
  if1565_else4801:
    find_dynamic_lex $P5034, "$*SCOPE"
    unless_null $P5034, fallback4857
    nqp_get_sc_object $P5037, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$SCOPE"]
    unless_null $P5035, fallback4858
    nqp_get_sc_object $P5038, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5038
  fallback4858:
    unless_null $P5035, vivi_15844859
    die "Contextual $*SCOPE not found"
    box $P5039, "Contextual $*SCOPE not found"
    set $P5035, $P5039
  vivi_15844859:
    set $P5034, $P5035
  fallback4857:
    set $S5002, $P5034
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1583_else4855 
.annotate 'line', 2293
    unless_null _lex_param_1, fallback4862
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5041
  fallback4862:
    set $P5040, _lex_param_1["typename"]
    unless_null $P5040, fallback4863
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5042
  fallback4863:
    unless $P5040 goto if1585_end4861 
.annotate 'line', 2297
.annotate 'line', 2298
    $P5043 = _lex_param_1."CURSOR"()
    $P5044 = $P5043."panic"("Cannot put types on our-scoped variables")
  if1585_end4861:
    unless_null _lex_param_1, fallback4864
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5046
  fallback4864:
    set $P5045, _lex_param_1["variable"]
    unless_null $P5045, fallback4865
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5045, $P5047
  fallback4865:
    set $S5003, $P5045
    box $P5048, $S5003
    set $P103, $P5048
.annotate 'line', 2301
    new $P5049, 'ResizablePMCArray'
    push $P5049, $P103
    $P5050 = "&lexical_package_lookup"($P5049, _lex_param_1)
    set $P101, $P5050
.annotate 'line', 2302
    $P5051 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5054, $P5051
    goto if1583_end4856
  if1583_else4855:
    .const 'Sub' $P5052 = 'cuid_461_1360232768.755' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1583_end4856:
  if1565_end4802:
    unless_null _lex_param_1, fallback4885
    nqp_get_sc_object $P5056, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5056
  fallback4885:
    set $P5055, _lex_param_1["trait"]
    unless_null $P5055, fallback4886
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5057
  fallback4886:
    unless $P5055 goto if1590_end4884 
.annotate 'line', 2331
    unless_null _lex_param_1, fallback4887
    nqp_get_sc_object $P5062, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5062
  fallback4887:
    set $P5061, _lex_param_1["trait"]
    unless_null $P5061, fallback4888
    nqp_get_sc_object $P5063, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5061, $P5063
  fallback4888:
    set $P5058, $P5061
    iter $P5060, $P5061
  for_next4889:
    unless $P5060, for_done4891
    shift $P5065, $P5060
  for_redo4890:
    .const 'Sub' $P5064 = 'cuid_462_1360232768.755' 
    capture_lex $P5064
    $P5058 = $P5064($P5065)
    goto for_next4889
  for_done4891:
  if1590_end4884:
.annotate 'line', 2335
    $P5066 = _lex_param_1."!make"($P101)
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1360232768.755") :anon :lex :outer("cuid_299_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2265
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4808
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4809
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4809:
    unless_null $P5004, vivi_15684810
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_15684810:
    set $P5003, $P5004
  fallback4808:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4811
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4812
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5015
  fallback4812:
    unless_null $P5012, vivi_15694813
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_15694813:
    set $P5011, $P5012
  fallback4811:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless1567_end4807 
.annotate 'line', 2267
.annotate 'line', 2268
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4814
    nqp_get_sc_object $P5022, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4815
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5023
  fallback4815:
    unless_null $P5020, vivi_15704816
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_15704816:
    set $P5019, $P5020
  fallback4814:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
  unless1567_end4807:
    find_lex $P5026, "$name"
    set $P101["name"], $P5026
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4819
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5029
  fallback4819:
    set $P5027, $P5028["typename"]
    unless_null $P5027, fallback4820
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5030
  fallback4820:
    unless $P5027 goto if1571_end4818 
.annotate 'line', 2275
.annotate 'line', 2276
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4821
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4822
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5035
  fallback4822:
    unless_null $P5032, vivi_15724823
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15724823:
    set $P5031, $P5032
  fallback4821:
    new $P5037, 'ResizablePMCArray'
    find_lex $P5040, "$/"
    unless_null $P5040, fallback4824
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5041
  fallback4824:
    set $P5039, $P5040["typename"]
    unless_null $P5039, fallback4825
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5042
  fallback4825:
    set $P5038, $P5039[0]
    unless_null $P5038, fallback4826
    nqp_get_sc_object $P5043, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5043
  fallback4826:
    set $S5005, $P5038
    box $P5044, $S5005
    push $P5037, $P5044
    $P5045 = $P5031."find_sym"($P5037)
    set $P102["type"], $P5045
  if1571_end4818:
    find_lex $P5046, "$sigil"
    set $S5006, $P5046
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1574_end4830 
    find_lex $P5047, "$sigil"
    set $S5007, $P5047
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1574_end4830:
    unless $I5004 goto if1573_end4828 
.annotate 'line', 2278
    find_lex $P5049, "$/"
    unless_null $P5049, fallback4833
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5049, $P5050
  fallback4833:
    set $P5048, $P5049["typename"]
    unless_null $P5048, fallback4834
    nqp_get_sc_object $P5051, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5051
  fallback4834:
    unless $P5048 goto if1575_else4831 
.annotate 'line', 2279
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4835
    nqp_get_sc_object $P5053, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5052, $P5053
  fallback4835:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1575_end4832
  if1575_else4831:
.annotate 'line', 2282
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_15784840
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2283
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4836
    nqp_get_sc_object $P5057, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4837
    nqp_get_sc_object $P5058, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5058
  fallback4837:
    unless_null $P5055, vivi_15764838
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15764838:
    set $P5054, $P5055
  fallback4836:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_15774839
  catch_handler_15784840:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_15774839
  skip_handler_15774839:
    set $P5065, $P5064
  if1575_end4832:
  if1573_end4828:
.annotate 'line', 2288
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4841
    nqp_get_sc_object $P5069, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4842
    nqp_get_sc_object $P5070, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5067, $P5070
  fallback4842:
    unless_null $P5067, vivi_15794843
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15794843:
    set $P5066, $P5067
  fallback4841:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4844
    nqp_get_sc_object $P5075, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4845
    nqp_get_sc_object $P5076, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5073, $P5076
  fallback4845:
    unless_null $P5073, vivi_15804846
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_15804846:
    set $P5072, $P5073
  fallback4844:
    find_dynamic_lex $P5079, "%*HOW"
    unless_null $P5079, fallback4847
    nqp_get_sc_object $P5082, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["%HOW"]
    unless_null $P5080, fallback4848
    nqp_get_sc_object $P5084, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5083, $P5084
    new $P5085, 'Hash'
    set $P5083["%HOW"], $P5085
    set $P5080, $P5085
  fallback4848:
    unless_null $P5080, vivi_15814849
    die "Contextual %*HOW not found"
    box $P5086, "Contextual %*HOW not found"
    set $P5080, $P5086
  vivi_15814849:
    set $P5079, $P5080
  fallback4847:
    find_dynamic_lex $P5087, "$*PKGDECL"
    unless_null $P5087, fallback4850
    nqp_get_sc_object $P5090, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$PKGDECL"]
    unless_null $P5088, fallback4851
    nqp_get_sc_object $P5091, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5088, $P5091
  fallback4851:
    unless_null $P5088, vivi_15824852
    die "Contextual $*PKGDECL not found"
    box $P5092, "Contextual $*PKGDECL not found"
    set $P5088, $P5092
  vivi_15824852:
    set $P5087, $P5088
  fallback4850:
    set $S5009, $P5087
    concat $S5008, $S5009, "-attr"
    set $P5078, $P5079[$S5008]
    unless_null $P5078, fallback4853
    nqp_get_sc_object $P5093, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5078, $P5093
  fallback4853:
    $P5066."pkg_add_attribute"($P5072, $P5078, $P101, $P102)
.annotate 'line', 2291
    nqp_get_sc_object $P5097, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5096, $P5097, "QAST"
    get_who $P5095, $P5096
    set $P5094, $P5095["Stmts"]
    unless_null $P5094, fallback4854
    nqp_get_sc_object $P5098, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5094, $P5098
  fallback4854:
    $P5099 = $P5094."new"()
    store_lex "$past", $P5099
    .return ($P5099) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1360232768.755") :anon :lex :outer("cuid_299_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2304
    .const 'Sub' $P5054 = 'cuid_460_1360232768.755' 
    capture_lex $P5054 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4868
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5005
  fallback4868:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4869
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback4869:
    unless $P5003 goto if1586_else4866 
.annotate 'line', 2307
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    if $I5001 goto unless1587_end4871 
.annotate 'line', 2308
.annotate 'line', 2309
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
  unless1587_end4871:
.annotate 'line', 2311
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback4872
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$W"]
    unless_null $P5012, fallback4873
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5015
  fallback4873:
    unless_null $P5012, vivi_15884874
    die "Contextual $*W not found"
    box $P5016, "Contextual $*W not found"
    set $P5012, $P5016
  vivi_15884874:
    set $P5011, $P5012
  fallback4872:
    new $P5017, 'ResizablePMCArray'
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4875
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5021
  fallback4875:
    set $P5019, $P5020["typename"]
    unless_null $P5019, fallback4876
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5022
  fallback4876:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4877
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5023
  fallback4877:
    set $S5002, $P5018
    box $P5024, $S5002
    push $P5017, $P5024
    $P5025 = $P5011."find_sym"($P5017)
    set $P101, $P5025
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1589_else4878 
    .const 'Sub' $P5026 = 'cuid_460_1360232768.755' 
    capture_lex $P5026
    $P5027 = $P5026($I5002)
    set $P5031, $P5027
    goto if1589_end4879
  if1589_else4878:
.annotate 'line', 2315
.annotate 'line', 2316
    find_lex $P5028, "$/"
    $P5029 = $P5028."CURSOR"()
    $P5030 = $P5029."panic"("Only native types are currently supported/checked")
    set $P5031, $P5030
  if1589_end4879:
    goto if1586_end4867
  if1586_else4866:
.annotate 'line', 2319
.annotate 'line', 2320
    find_lex $P5032, "$sigil"
    $P5033 = "&default_for"($P5032)
    set $P102, $P5033
  if1586_end4867:
.annotate 'line', 2322
    find_lex $P5035, "$BLOCK"
    set $P5034, $P5035[0]
    unless_null $P5034, fallback4880
    nqp_get_sc_object $P5036, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5036
  fallback4880:
    nqp_get_sc_object $P5040, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback4881
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5037, $P5041
  fallback4881:
    find_lex $P5042, "$/"
.annotate 'line', 2324
    nqp_get_sc_object $P5046, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback4882
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5043, $P5047
  fallback4882:
    find_lex $P5048, "$name"
    $P5049 = $P5043."new"($P5048 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5050 = $P5037."new"($P5049, $P102, "bind" :named("op"), $P5042 :named("node"))
    $P5034."push"($P5050)
.annotate 'line', 2327
    find_lex $P5051, "$BLOCK"
    find_lex $P5052, "$name"
    $P5053 = $P5051."symbol"($P5052, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1360232768.755") :anon :lex :outer("cuid_461_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2312
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2313
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1360232768.755") :anon :lex :outer("cuid_299_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2332
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_300_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2338
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4892
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4892:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4893
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4893:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_301_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2339
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4894
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback4894:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4895
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback4895:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_302_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2341
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_466_1360232768.755' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_469_1360232768.755' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback4898
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback4898:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4899
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback4899:
    unless $P5004 goto if1591_else4896 
.annotate 'line', 2345
.annotate 'line', 2346
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1591_end4897
  if1591_else4896:
.annotate 'line', 2348
.annotate 'line', 2349
    unless_null _lex_param_1, fallback4900
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback4900:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4901
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback4901:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2350
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4904
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4905
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5016
  fallback4905:
    unless_null $P5013, vivi_15934906
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15934906:
    set $P5012, $P5013
  fallback4904:
    set $P5021, $P5012
    unless $P5012 goto if1592_end4903 
.annotate 'line', 2351
.annotate 'line', 2352
    set $P5018, $P101[1]
    unless_null $P5018, fallback4907
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5019
  fallback4907:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1592_end4903:
  if1591_end4897:
    set $P102, $P101
    unless_null _lex_param_1, fallback4910
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5023
  fallback4910:
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4911
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5024
  fallback4911:
    unless $P5022 goto if1594_else4908 
    .const 'Sub' $P5025 = 'cuid_466_1360232768.755' 
    capture_lex $P5025
    $P5026 = $P5025()
    goto if1594_end4909
  if1594_else4908:
.annotate 'line', 2449
.annotate 'line', 2450
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback5023
    nqp_get_sc_object $P5030, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback5024
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5031
  fallback5024:
    unless_null $P5028, vivi_16295025
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16295025:
    set $P5027, $P5028
  fallback5023:
    $P5033 = $P5027."is_precompilation_mode"()
    set $P5041, $P5033
    unless $P5033 goto if1628_end5022 
.annotate 'line', 2451
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback5026
    nqp_get_sc_object $P5037, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback5027
    nqp_get_sc_object $P5038, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5038
  fallback5027:
    unless_null $P5035, vivi_16305028
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_16305028:
    set $P5034, $P5035
  fallback5026:
    $P5040 = $P5034."create_code"($P101, "<anon>", 0)
    set $P5041, $P5040
  if1628_end5022:
  if1594_end4909:
.annotate 'line', 2455
    nqp_get_sc_object $P5045, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback5029
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5046
  fallback5029:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2458
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5032
    nqp_get_sc_object $P5049, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5049
  fallback5032:
    set $P5048, _lex_param_1["trait"]
    unless_null $P5048, fallback5033
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5050
  fallback5033:
    set $P5059, $P5048
    unless $P5048 goto if1631_end5031 
.annotate 'line', 2461
    unless_null _lex_param_1, fallback5034
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5055
  fallback5034:
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback5035
    nqp_get_sc_object $P5056, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5054, $P5056
  fallback5035:
    set $P5051, $P5054
    iter $P5053, $P5054
  for_next5036:
    unless $P5053, for_done5038
    shift $P5058, $P5053
  for_redo5037:
    .const 'Sub' $P5057 = 'cuid_469_1360232768.755' 
    capture_lex $P5057
    $P5051 = $P5057($P5058)
    goto for_next5036
  for_done5038:
    set $P5059, $P5051
  if1631_end5031:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1360232768.755") :anon :lex :outer("cuid_302_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2357
    .const 'Sub' $P5078 = 'cuid_465_1360232768.755' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_467_1360232768.755' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_468_1360232768.755' 
    capture_lex $P5078 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4912
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5005
  fallback4912:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4913
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback4913:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4914
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5007
  fallback4914:
    set $S5002, $P5002
.annotate 'line', 2358
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4915
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5011
  fallback4915:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4916
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5012
  fallback4916:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4917
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5013
  fallback4917:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2359
    find_lex $P5016, "$past"
    $P5016."name"($P101)
    find_dynamic_lex $P5017, "$*SCOPE"
    unless_null $P5017, fallback4924
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$SCOPE"]
    unless_null $P5018, fallback4925
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5021
  fallback4925:
    unless_null $P5018, vivi_15984926
    die "Contextual $*SCOPE not found"
    box $P5022, "Contextual $*SCOPE not found"
    set $P5018, $P5022
  vivi_15984926:
    set $P5017, $P5018
  fallback4924:
    set $S5004, $P5017
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1597_end4923 
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4927
    nqp_get_sc_object $P5026, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4928
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5027
  fallback4928:
    unless_null $P5024, vivi_15994929
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_15994929:
    set $P5023, $P5024
  fallback4927:
    set $S5005, $P5023
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1597_end4923:
    set $I5005, $I5003
    if $I5003 goto unless1596_end4921 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4930
    nqp_get_sc_object $P5032, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4931
    nqp_get_sc_object $P5033, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5030, $P5033
  fallback4931:
    unless_null $P5030, vivi_16004932
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_16004932:
    set $P5029, $P5030
  fallback4930:
    set $S5006, $P5029
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1596_end4921:
    unless $I5005 goto if1595_else4918 
.annotate 'line', 2360
    find_dynamic_lex $P5035, "$*MULTINESS"
    unless_null $P5035, fallback4935
    nqp_get_sc_object $P5038, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$MULTINESS"]
    unless_null $P5036, fallback4936
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5039
  fallback4936:
    unless_null $P5036, vivi_16024937
    die "Contextual $*MULTINESS not found"
    box $P5040, "Contextual $*MULTINESS not found"
    set $P5036, $P5040
  vivi_16024937:
    set $P5035, $P5036
  fallback4935:
    set $S5007, $P5035
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1601_else4933 
    .const 'Sub' $P5041 = 'cuid_465_1360232768.755' 
    capture_lex $P5041
    $P5042 = $P5041()
    goto if1601_end4934
  if1601_else4933:
    find_dynamic_lex $P5043, "$*MULTINESS"
    unless_null $P5043, fallback4973
    nqp_get_sc_object $P5046, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$MULTINESS"]
    unless_null $P5044, fallback4974
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5047
  fallback4974:
    unless_null $P5044, vivi_16144975
    die "Contextual $*MULTINESS not found"
    box $P5048, "Contextual $*MULTINESS not found"
    set $P5044, $P5048
  vivi_16144975:
    set $P5043, $P5044
  fallback4973:
    set $S5008, $P5043
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1613_else4971 
    .const 'Sub' $P5049 = 'cuid_467_1360232768.755' 
    capture_lex $P5049
    $P5050 = $P5049()
    set $P5053, $P5050
    goto if1613_end4972
  if1613_else4971:
    .const 'Sub' $P5051 = 'cuid_468_1360232768.755' 
    capture_lex $P5051
    $P5052 = $P5051()
    set $P5053, $P5052
  if1613_end4972:
  if1601_end4934:
.annotate 'line', 2438
    nqp_get_sc_object $P5057, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback5010
    nqp_get_sc_object $P5058, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5054, $P5058
  fallback5010:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    goto if1595_end4919
  if1595_else4918:
.annotate 'line', 2440
.annotate 'line', 2441
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback5011
    nqp_get_sc_object $P5065, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback5012
    nqp_get_sc_object $P5066, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5063, $P5066
  fallback5012:
    unless_null $P5063, vivi_16245013
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_16245013:
    set $P5062, $P5063
  fallback5011:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
  if1595_end4919:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1626_end5017 
    find_dynamic_lex $P5069, "$*MULTINESS"
    unless_null $P5069, fallback5018
    nqp_get_sc_object $P5072, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$MULTINESS"]
    unless_null $P5070, fallback5019
    nqp_get_sc_object $P5073, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5070, $P5073
  fallback5019:
    unless_null $P5070, vivi_16275020
    die "Contextual $*MULTINESS not found"
    box $P5074, "Contextual $*MULTINESS not found"
    set $P5070, $P5074
  vivi_16275020:
    set $P5069, $P5070
  fallback5018:
    set $S5014, $P5069
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1626_end5017:
    box $P5077, $I5010
    set $P5076, $P5077
    unless $I5010 goto if1625_end5015 
.annotate 'line', 2445
    find_lex $P5075, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5075
    set $P5076, $P5075
  if1625_end5015:
    .return ($P5076) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1360232768.755") :anon :lex :outer("cuid_466_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2361
    .const 'Sub' $P5048 = 'cuid_464_1360232768.755' 
    capture_lex $P5048 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4940
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4941
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5009
  fallback4941:
    unless_null $P5006, vivi_16044942
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_16044942:
    set $P5005, $P5006
  fallback4940:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1603_end4939 
.annotate 'line', 2363
    box $P5011, "a multi can not be our-scoped"
    die $P5011
  if1603_end4939:
.annotate 'line', 2365
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4943
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4944
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5016
  fallback4944:
    unless_null $P5013, vivi_16054945
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_16054945:
    set $P5012, $P5013
  fallback4943:
    $P5018 = $P5012."cur_lexpad"()
    find_lex $P5019, "$name"
    set $S5003, $P5019
    concat $S5002, "&", $S5003
    $P5020 = $P5018."symbol"($S5002)
    set $P102, $P5020
    set $P5021, $P102["proto"]
    unless_null $P5021, fallback4948
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5022
  fallback4948:
    unless $P5021 goto if1606_else4946 
.annotate 'line', 2366
    set $P5023, $P102["value"]
    unless_null $P5023, fallback4949
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5024
  fallback4949:
    set $P101, $P5023
    goto if1606_end4947
  if1606_else4946:
    .const 'Sub' $P5025 = 'cuid_464_1360232768.755' 
    capture_lex $P5025
    $P5026 = $P5025()
  if1606_end4947:
.annotate 'line', 2395
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4964
    nqp_get_sc_object $P5030, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4965
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5031
  fallback4965:
    unless_null $P5028, vivi_16114966
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16114966:
    set $P5027, $P5028
  fallback4964:
    find_lex $P5033, "$past"
    find_lex $P5034, "$name"
    $P5035 = $P5027."create_code"($P5033, $P5034, 0)
    set $P103, $P5035
.annotate 'line', 2396
    find_lex $P5036, "$past"
    "&attach_multi_signature"($P103, $P5036)
.annotate 'line', 2399
    $P101."add_dispatchee"($P103)
.annotate 'line', 2402
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4967
    nqp_get_sc_object $P5040, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4968
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5041
  fallback4968:
    unless_null $P5038, vivi_16124969
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16124969:
    set $P5037, $P5038
  fallback4967:
    $P5043 = $P5037."cur_lexpad"()
    set $P104, $P5043
.annotate 'line', 2403
    set $P5044, $P104[0]
    unless_null $P5044, fallback4970
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5045
  fallback4970:
    find_lex $P5046, "$past"
    $P5047 = $P5044."push"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1360232768.755") :anon :lex :outer("cuid_465_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2371
    .const 'Sub' $P5018 = 'cuid_463_1360232768.755' 
    capture_lex $P5018 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2374
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4950
    nqp_get_sc_object $P5008, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4951
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5009
  fallback4951:
    unless_null $P5006, vivi_16074952
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_16074952:
    set $P5005, $P5006
  fallback4950:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4959:
    unless $P5004, for_done4961
    shift $P5013, $P5004
  for_redo4960:
    .const 'Sub' $P5012 = 'cuid_463_1360232768.755' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4959
  for_done4961:
    if $P101 goto unless1610_end4963 
.annotate 'line', 2386
.annotate 'line', 2387
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless1610_end4963:
    box $P5017, "Dispatcher derivation NYI"
    die $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1360232768.755") :anon :lex :outer("cuid_464_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2374
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2375
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4955
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5005
  fallback4955:
    unless $P5004 goto if1608_else4953 
.annotate 'line', 2376
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4956
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5007
  fallback4956:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1608_end4954
  if1608_else4953:
    set $P5012, $P101
    unless $P101 goto if1609_end4958 
.annotate 'line', 2380
.annotate 'line', 2381
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1609_end4958:
    set $P5013, $P5012
  if1608_end4954:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1360232768.755") :anon :lex :outer("cuid_466_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2405
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4978
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4979
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback4979:
    unless_null $P5004, vivi_16164980
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_16164980:
    set $P5003, $P5004
  fallback4978:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1615_end4977 
.annotate 'line', 2409
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
  if1615_end4977:
.annotate 'line', 2410
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4981
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4982
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5014
  fallback4982:
    unless_null $P5011, vivi_16174983
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16174983:
    set $P5010, $P5011
  fallback4981:
    find_lex $P5016, "$past"
    find_lex $P5017, "$name"
    $P5018 = $P5010."create_code"($P5016, $P5017, 1)
    set $P101, $P5018
.annotate 'line', 2411
    find_dynamic_lex $P5019, "$*W"
    unless_null $P5019, fallback4984
    nqp_get_sc_object $P5022, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$W"]
    unless_null $P5020, fallback4985
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5023
  fallback4985:
    unless_null $P5020, vivi_16184986
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5020, $P5024
  vivi_16184986:
    set $P5019, $P5020
  fallback4984:
    $P5025 = $P5019."cur_lexpad"()
    set $P102, $P5025
.annotate 'line', 2412
    set $P5026, $P102[0]
    unless_null $P5026, fallback4987
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5027
  fallback4987:
    nqp_get_sc_object $P5031, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Op"]
    unless_null $P5028, fallback4988
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5032
  fallback4988:
.annotate 'line', 2414
    nqp_get_sc_object $P5036, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback4989
    nqp_get_sc_object $P5037, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5033, $P5037
  fallback4989:
    find_lex $P5038, "$name"
    set $S5003, $P5038
    concat $S5002, "&", $S5003
    $P5039 = $P5033."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5040, "$past"
    $P5041 = $P5028."new"($P5039, $P5040, "bind" :named("op"))
    $P5026."push"($P5041)
.annotate 'line', 2417
    find_lex $P5042, "$name"
    set $S5005, $P5042
    concat $S5004, "&", $S5005
    $P5043 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1360232768.755") :anon :lex :outer("cuid_466_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2419
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2420
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4990
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4991
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback4991:
    unless_null $P5003, vivi_16194992
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16194992:
    set $P5002, $P5003
  fallback4990:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2421
    set $P5009, $P101[0]
    unless_null $P5009, fallback4993
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5010
  fallback4993:
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4994
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback4994:
.annotate 'line', 2423
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4995
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5020
  fallback4995:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5009."push"($P5024)
.annotate 'line', 2426
    find_lex $P5025, "$name"
    set $S5004, $P5025
    concat $S5003, "&", $S5004
    $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4998
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4999
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5030
  fallback4999:
    unless_null $P5027, vivi_16215000
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_16215000:
    set $P5026, $P5027
  fallback4998:
    set $S5005, $P5026
    iseq $I5001, $S5005, "our"
    box $P5067, $I5001
    set $P5066, $P5067
    unless $I5001 goto if1620_end4997 
.annotate 'line', 2427
.annotate 'line', 2430
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback5001
    nqp_get_sc_object $P5035, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback5002
    nqp_get_sc_object $P5036, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5033, $P5036
  fallback5002:
    unless_null $P5033, vivi_16225003
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_16225003:
    set $P5032, $P5033
  fallback5001:
    find_dynamic_lex $P5038, "$*PACKAGE"
    unless_null $P5038, fallback5004
    nqp_get_sc_object $P5041, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$PACKAGE"]
    unless_null $P5039, fallback5005
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5042
  fallback5005:
    unless_null $P5039, vivi_16235006
    die "Contextual $*PACKAGE not found"
    box $P5043, "Contextual $*PACKAGE not found"
    set $P5039, $P5043
  vivi_16235006:
    set $P5038, $P5039
  fallback5004:
    find_lex $P5044, "$name"
    find_lex $P5045, "$past"
    $P5032."install_package_routine"($P5038, $P5044, $P5045)
.annotate 'line', 2431
    set $P5046, $P101[0]
    unless_null $P5046, fallback5007
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5046, $P5047
  fallback5007:
    nqp_get_sc_object $P5051, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback5008
    nqp_get_sc_object $P5052, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5048, $P5052
  fallback5008:
.annotate 'line', 2433
    new $P5053, 'ResizablePMCArray'
    find_lex $P5054, "$name"
    push $P5053, $P5054
    find_lex $P5055, "$/"
    $P5056 = "&lexical_package_lookup"($P5053, $P5055)
.annotate 'line', 2434
    nqp_get_sc_object $P5060, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback5009
    nqp_get_sc_object $P5061, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5057, $P5061
  fallback5009:
    find_lex $P5062, "$name"
    set $S5007, $P5062
    concat $S5006, "&", $S5007
    $P5063 = $P5057."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5064 = $P5048."new"($P5056, $P5063, "bind" :named("op"))
    $P5065 = $P5046."push"($P5064)
    set $P5066, $P5065
  if1620_end4997:
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1360232768.755") :anon :lex :outer("cuid_302_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2462
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_303_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2467
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_470_1360232768.755' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_471_1360232768.755' 
    capture_lex $P5091 
    .lex "$past", $P101 
    .lex "$name", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback5041
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback5041:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback5042
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback5042:
    unless $P5004 goto if1632_else5039 
.annotate 'line', 2471
.annotate 'line', 2472
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1632_end5040
  if1632_else5039:
.annotate 'line', 2474
.annotate 'line', 2475
    unless_null _lex_param_1, fallback5043
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback5043:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback5044
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback5044:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2476
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback5047
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback5048
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5016
  fallback5048:
    unless_null $P5013, vivi_16345049
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16345049:
    set $P5012, $P5013
  fallback5047:
    set $P5021, $P5012
    unless $P5012 goto if1633_end5046 
.annotate 'line', 2477
.annotate 'line', 2478
    set $P5018, $P101[1]
    unless_null $P5018, fallback5050
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5019
  fallback5050:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1633_end5046:
  if1632_end5040:
    set $P5022, $P101["signature_has_invocant"]
    unless_null $P5022, fallback5053
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5023
  fallback5053:
    if $P5022 goto unless1635_end5052 
.annotate 'line', 2483
.annotate 'line', 2484
    set $P5024, $P101[0]
    unless_null $P5024, fallback5054
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5025
  fallback5054:
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5055
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5030
  fallback5055:
    find_dynamic_lex $P5031, "$*PACKAGE"
    unless_null $P5031, fallback5056
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$PACKAGE"]
    unless_null $P5032, fallback5057
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5035
  fallback5057:
    unless_null $P5032, vivi_16365058
    die "Contextual $*PACKAGE not found"
    box $P5036, "Contextual $*PACKAGE not found"
    set $P5032, $P5036
  vivi_16365058:
    set $P5031, $P5032
  fallback5056:
    $P5037 = $P5026."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5031 :named("returns"))
    $P5038 = $P5024."unshift"($P5037)
  unless1635_end5052:
.annotate 'line', 2489
    $P101."symbol"("self", "lexical" :named("scope"))
    box $P5039, ""
    set $P102, $P5039
    unless_null _lex_param_1, fallback5061
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5041
  fallback5061:
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback5062
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5040, $P5042
  fallback5062:
    unless $P5040 goto if1637_else5059 
.annotate 'line', 2493
    unless_null _lex_param_1, fallback5063
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5044
  fallback5063:
    set $P5043, _lex_param_1["private"]
    unless_null $P5043, fallback5064
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5043, $P5045
  fallback5064:
    set $S5002, $P5043
.annotate 'line', 2494
    unless_null _lex_param_1, fallback5065
    nqp_get_sc_object $P5048, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5048
  fallback5065:
    set $P5047, _lex_param_1["deflongname"]
    unless_null $P5047, fallback5066
    nqp_get_sc_object $P5049, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5047, $P5049
  fallback5066:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback5067
    nqp_get_sc_object $P5050, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5046, $P5050
  fallback5067:
    $P5051 = $P5046."ast"()
    set $S5003, $P5051
    concat $S5001, $S5002, $S5003
    box $P5052, $S5001
    set $P102, $P5052
    goto if1637_end5060
  if1637_else5059:
    unless_null _lex_param_1, fallback5070
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5054
  fallback5070:
    set $P5053, _lex_param_1["latename"]
    unless_null $P5053, fallback5071
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5053, $P5055
  fallback5071:
    set $P5068, $P5053
    unless $P5053 goto if1638_end5069 
.annotate 'line', 2496
    find_dynamic_lex $P5056, "$*PKGDECL"
    unless_null $P5056, fallback5074
    nqp_get_sc_object $P5059, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PKGDECL"]
    unless_null $P5057, fallback5075
    nqp_get_sc_object $P5060, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5057, $P5060
  fallback5075:
    unless_null $P5057, vivi_16405076
    die "Contextual $*PKGDECL not found"
    box $P5061, "Contextual $*PKGDECL not found"
    set $P5057, $P5061
  vivi_16405076:
    set $P5056, $P5057
  fallback5074:
    set $S5004, $P5056
    isne $I5001, $S5004, "role"
    unless $I5001 goto if1639_end5073 
.annotate 'line', 2497
.annotate 'line', 2498
    $P5062 = _lex_param_1."CURSOR"()
    $P5063 = $P5062."panic"("Late-bound method name only valid in role")
  if1639_end5073:
    unless_null _lex_param_1, fallback5077
    nqp_get_sc_object $P5065, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5065
  fallback5077:
    set $P5064, _lex_param_1["latename"]
    unless_null $P5064, fallback5078
    nqp_get_sc_object $P5066, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5064, $P5066
  fallback5078:
    set $S5006, $P5064
    concat $S5005, "!!LATENAME!!", $S5006
    box $P5067, $S5005
    set $P102, $P5067
    set $P5068, $P102
  if1638_end5069:
  if1637_end5060:
    set $S5007, $P102
    isne $I5002, $S5007, ""
    unless $I5002 goto if1641_end5080 
    .const 'Sub' $P5069 = 'cuid_470_1360232768.755' 
    capture_lex $P5069
    $P5070 = $P5069()
  if1641_end5080:
.annotate 'line', 2521
    nqp_get_sc_object $P5074, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Op"]
    unless_null $P5071, fallback5114
    nqp_get_sc_object $P5075, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5071, $P5075
  fallback5114:
    $P5076 = $P5071."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5076
    set $P103["sink"], $P101
    set $P103["block_past"], $P101
    set $P5077, $P101["code_obj"]
    unless_null $P5077, fallback5115
    nqp_get_sc_object $P5078, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5077, $P5078
  fallback5115:
    set $P103["code_obj"], $P5077
.annotate 'line', 2525
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5118
    nqp_get_sc_object $P5080, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5080
  fallback5118:
    set $P5079, _lex_param_1["trait"]
    unless_null $P5079, fallback5119
    nqp_get_sc_object $P5081, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5079, $P5081
  fallback5119:
    set $P5090, $P5079
    unless $P5079 goto if1654_end5117 
.annotate 'line', 2526
    unless_null _lex_param_1, fallback5120
    nqp_get_sc_object $P5086, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5086
  fallback5120:
    set $P5085, _lex_param_1["trait"]
    unless_null $P5085, fallback5121
    nqp_get_sc_object $P5087, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5085, $P5087
  fallback5121:
    set $P5082, $P5085
    iter $P5084, $P5085
  for_next5122:
    unless $P5084, for_done5124
    shift $P5089, $P5084
  for_redo5123:
    .const 'Sub' $P5088 = 'cuid_471_1360232768.755' 
    capture_lex $P5088
    $P5082 = $P5088($P5089)
    goto for_next5122
  for_done5124:
    set $P5090, $P5082
  if1654_end5117:
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1360232768.755") :anon :lex :outer("cuid_303_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2502
    .lex "$meta_meth", $P101 
    .lex "$is_dispatcher", $P102 
    .lex "$code", $P103 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
.annotate 'line', 2504
    find_lex $P5004, "$past"
    find_lex $P5005, "$name"
    $P5004."name"($P5005)
    find_dynamic_lex $P5006, "$*MULTINESS"
    unless_null $P5006, fallback5083
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$MULTINESS"]
    unless_null $P5007, fallback5084
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5010
  fallback5084:
    unless_null $P5007, vivi_16435085
    die "Contextual $*MULTINESS not found"
    box $P5011, "Contextual $*MULTINESS not found"
    set $P5007, $P5011
  vivi_16435085:
    set $P5006, $P5007
  fallback5083:
    set $S5001, $P5006
    iseq $I5001, $S5001, "multi"
    unless $I5001 goto if1642_else5081 
    set $S5002, "add_multi_method"
    goto if1642_end5082
  if1642_else5081:
    set $S5002, "add_method"
  if1642_end5082:
    box $P5012, $S5002
    set $P101, $P5012
    find_dynamic_lex $P5013, "$*MULTINESS"
    unless_null $P5013, fallback5086
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$MULTINESS"]
    unless_null $P5014, fallback5087
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5017
  fallback5087:
    unless_null $P5014, vivi_16445088
    die "Contextual $*MULTINESS not found"
    box $P5018, "Contextual $*MULTINESS not found"
    set $P5014, $P5018
  vivi_16445088:
    set $P5013, $P5014
  fallback5086:
    set $S5003, $P5013
    iseq $I5002, $S5003, "proto"
    box $P5019, $I5002
    set $P102, $P5019
.annotate 'line', 2509
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5089
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5090
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5024
  fallback5090:
    unless_null $P5021, vivi_16455091
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16455091:
    set $P5020, $P5021
  fallback5089:
    find_lex $P5026, "$past"
    find_lex $P5027, "$name"
    $P5028 = $P5020."create_code"($P5026, $P5027, $P102)
    set $P103, $P5028
    find_dynamic_lex $P5029, "$*MULTINESS"
    unless_null $P5029, fallback5094
    nqp_get_sc_object $P5032, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$MULTINESS"]
    unless_null $P5030, fallback5095
    nqp_get_sc_object $P5033, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5030, $P5033
  fallback5095:
    unless_null $P5030, vivi_16475096
    die "Contextual $*MULTINESS not found"
    box $P5034, "Contextual $*MULTINESS not found"
    set $P5030, $P5034
  vivi_16475096:
    set $P5029, $P5030
  fallback5094:
    set $S5004, $P5029
    iseq $I5003, $S5004, "multi"
    unless $I5003 goto if1646_end5093 
.annotate 'line', 2510
    find_lex $P5035, "$past"
    $P5036 = "&attach_multi_signature"($P103, $P5035)
  if1646_end5093:
.annotate 'line', 2511
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5097
    nqp_get_sc_object $P5040, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5098
    nqp_get_sc_object $P5041, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5041
  fallback5098:
    unless_null $P5038, vivi_16485099
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16485099:
    set $P5037, $P5038
  fallback5097:
    find_dynamic_lex $P5043, "$*PACKAGE"
    unless_null $P5043, fallback5100
    nqp_get_sc_object $P5046, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$PACKAGE"]
    unless_null $P5044, fallback5101
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5047
  fallback5101:
    unless_null $P5044, vivi_16495102
    die "Contextual $*PACKAGE not found"
    box $P5048, "Contextual $*PACKAGE not found"
    set $P5044, $P5048
  vivi_16495102:
    set $P5043, $P5044
  fallback5100:
    find_lex $P5049, "$name"
    $P5037."pkg_add_method"($P5043, $P101, $P5049, $P103)
    find_lex $P5050, "$past"
    set $P5050["code_obj"], $P103
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback5105
    nqp_get_sc_object $P5054, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback5106
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5052, $P5055
  fallback5106:
    unless_null $P5052, vivi_16515107
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_16515107:
    set $P5051, $P5052
  fallback5105:
    set $S5005, $P5051
    iseq $I5004, $S5005, "our"
    box $P5073, $I5004
    set $P5072, $P5073
    unless $I5004 goto if1650_end5104 
.annotate 'line', 2515
.annotate 'line', 2516
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback5108
    nqp_get_sc_object $P5060, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback5109
    nqp_get_sc_object $P5061, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5058, $P5061
  fallback5109:
    unless_null $P5058, vivi_16525110
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_16525110:
    set $P5057, $P5058
  fallback5108:
    find_dynamic_lex $P5063, "$*PACKAGE"
    unless_null $P5063, fallback5111
    nqp_get_sc_object $P5066, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["$PACKAGE"]
    unless_null $P5064, fallback5112
    nqp_get_sc_object $P5067, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5064, $P5067
  fallback5112:
    unless_null $P5064, vivi_16535113
    die "Contextual $*PACKAGE not found"
    box $P5068, "Contextual $*PACKAGE not found"
    set $P5064, $P5068
  vivi_16535113:
    set $P5063, $P5064
  fallback5111:
    find_lex $P5069, "$name"
    find_lex $P5070, "$past"
    $P5071 = $P5057."install_package_routine"($P5063, $P5069, $P5070)
    set $P5072, $P5071
  if1650_end5104:
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1360232768.755") :anon :lex :outer("cuid_303_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2527
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_304_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2559
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_472_1360232768.755' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_473_1360232768.755' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 2560
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5125
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5126
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback5126:
    unless_null $P5004, vivi_16555127
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16555127:
    set $P5003, $P5004
  fallback5125:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback5128
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5011
  fallback5128:
    set $P102, $P5010
    unless_null _lex_param_1, fallback5131
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5013
  fallback5131:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback5132
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5014
  fallback5132:
    unless $P5012 goto if1656_end5130 
    .const 'Sub' $P5015 = 'cuid_472_1360232768.755' 
    capture_lex $P5015
    $P5016 = $P5015()
  if1656_end5130:
    unless_null _lex_param_1, fallback5139
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5021
  fallback5139:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback5140
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5022
  fallback5140:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next5141:
    unless $P5019, for_done5143
    shift $P5024, $P5019
  for_redo5142:
    .const 'Sub' $P5023 = 'cuid_473_1360232768.755' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next5141
  for_done5143:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1360232768.755") :anon :lex :outer("cuid_304_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2562
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2563
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5133
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5005
  fallback5133:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback5134
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback5134:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5135
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5007
  fallback5135:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2564
    find_lex $P5009, "$BLOCKINIT"
    $P5009."push"($P101)
.annotate 'line', 2565
    find_lex $P5010, "$BLOCKINIT"
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5136
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5136:
.annotate 'line', 2567
    nqp_get_sc_object $P5019, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5137
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5016, $P5020
  fallback5137:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2568
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback5138
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5026
  fallback5138:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5010."push"($P5029)
    find_lex $P5030, "$BLOCK"
    box $P5031, 1
    set $P5030["signature_has_invocant"], $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1360232768.755") :anon :lex :outer("cuid_304_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2572
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_305_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2575
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_475_1360232768.755' 
    capture_lex $P5092 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5144
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5004
  fallback5144:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback5145
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback5145:
    set $P101, $P5003
    unless_null _lex_param_1, fallback5148
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5148:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback5149
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5149:
    unless $P5006 goto if1657_else5146 
.annotate 'line', 2578
.annotate 'line', 2579
    unless_null _lex_param_1, fallback5150
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5010
  fallback5150:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback5151
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5011
  fallback5151:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1658_end5153 
.annotate 'line', 2580
.annotate 'line', 2581
    unless_null _lex_param_1, fallback5154
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5016
  fallback5154:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback5155
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5017
  fallback5155:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback5156
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5018
  fallback5156:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback5157
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5019
  fallback5157:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1658_end5153:
    goto if1657_end5147
  if1657_else5146:
.annotate 'line', 2584
.annotate 'line', 2585
    unless_null _lex_param_1, fallback5158
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5025
  fallback5158:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback5159
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5024, $P5026
  fallback5159:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1659_else5160 
.annotate 'line', 2586
.annotate 'line', 2587
    $P102."slurpy"(1)
.annotate 'line', 2588
    unless_null _lex_param_1, fallback5162
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5030
  fallback5162:
    set $P5029, _lex_param_1["param_var"]
    unless_null $P5029, fallback5163
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5029, $P5031
  fallback5163:
    set $P5028, $P5029["sigil"]
    unless_null $P5028, fallback5164
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5032
  fallback5164:
    set $S5003, $P5028
    iseq $I5003, $S5003, "%"
    $P5033 = $P102."named"($I5003)
    set $P5043, $P5033
    goto if1659_end5161
  if1659_else5160:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5042, $I5004
    set $P5041, $P5042
    unless $I5004 goto if1660_end5166 
.annotate 'line', 2590
.annotate 'line', 2591
    unless_null _lex_param_1, fallback5167
    nqp_get_sc_object $P5036, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5036
  fallback5167:
    set $P5035, _lex_param_1["param_var"]
    unless_null $P5035, fallback5168
    nqp_get_sc_object $P5037, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5035, $P5037
  fallback5168:
    set $P5034, $P5035["sigil"]
    unless_null $P5034, fallback5169
    nqp_get_sc_object $P5038, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5038
  fallback5169:
    $P5039 = "&default_for"($P5034)
    $P5040 = $P102."default"($P5039)
    set $P5041, $P5040
  if1660_end5166:
    set $P5043, $P5041
  if1659_end5161:
  if1657_end5147:
    unless_null _lex_param_1, fallback5172
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5045
  fallback5172:
    set $P5044, _lex_param_1["default_value"]
    unless_null $P5044, fallback5173
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5046
  fallback5173:
    unless $P5044 goto if1661_end5171 
.annotate 'line', 2594
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    unless $I5005 goto if1662_end5175 
.annotate 'line', 2595
.annotate 'line', 2596
    $P5047 = _lex_param_1."CURSOR"()
    $P5048 = $P5047."panic"("Can't put default on slurpy parameter")
  if1662_end5175:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    unless $I5006 goto if1663_end5177 
.annotate 'line', 2598
.annotate 'line', 2599
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on required parameter")
  if1663_end5177:
.annotate 'line', 2601
    unless_null _lex_param_1, fallback5178
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5054
  fallback5178:
    set $P5053, _lex_param_1["default_value"]
    unless_null $P5053, fallback5179
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5053, $P5055
  fallback5179:
    set $P5052, $P5053[0]
    unless_null $P5052, fallback5180
    nqp_get_sc_object $P5056, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5052, $P5056
  fallback5180:
    set $P5051, $P5052["EXPR"]
    unless_null $P5051, fallback5181
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5051, $P5057
  fallback5181:
    $P5058 = $P5051."ast"()
    $P5059 = $P102."default"($P5058)
  if1661_end5171:
.annotate 'line', 2603
    $P5060 = $P102."default"()
    if $P5060 goto unless1664_end5183 
    find_dynamic_lex $P5061, "$*W"
    unless_null $P5061, fallback5184
    nqp_get_sc_object $P5064, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$W"]
    unless_null $P5062, fallback5185
    nqp_get_sc_object $P5065, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5062, $P5065
  fallback5185:
    unless_null $P5062, vivi_16655186
    die "Contextual $*W not found"
    box $P5066, "Contextual $*W not found"
    set $P5062, $P5066
  vivi_16655186:
    set $P5061, $P5062
  fallback5184:
    $P5067 = $P5061."cur_lexpad"()
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback5187
    nqp_get_sc_object $P5071, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback5188
    nqp_get_sc_object $P5072, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5069, $P5072
  fallback5188:
    unless_null $P5069, vivi_16665189
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_16665189:
    set $P5068, $P5069
  fallback5187:
    $P5074 = $P5068."cur_lexpad"()
    $P5075 = $P5074."arity"()
    set $N5002, $P5075
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5076 = $P5067."arity"($N5001)
  unless1664_end5183:
    unless_null _lex_param_1, fallback5192
    nqp_get_sc_object $P5078, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5078
  fallback5192:
    set $P5077, _lex_param_1["typename"]
    unless_null $P5077, fallback5193
    nqp_get_sc_object $P5079, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5077, $P5079
  fallback5193:
    unless $P5077 goto if1667_end5191 
    .const 'Sub' $P5080 = 'cuid_475_1360232768.755' 
    capture_lex $P5080
    $P5081 = $P5080()
  if1667_end5191:
    unless_null _lex_param_1, fallback5210
    nqp_get_sc_object $P5083, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5083
  fallback5210:
    set $P5082, _lex_param_1["definedness"]
    unless_null $P5082, fallback5211
    nqp_get_sc_object $P5084, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5082, $P5084
  fallback5211:
    unless $P5082 goto if1672_end5209 
.annotate 'line', 2618
    unless_null _lex_param_1, fallback5212
    nqp_get_sc_object $P5087, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5087
  fallback5212:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback5213
    nqp_get_sc_object $P5088, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5086, $P5088
  fallback5213:
    set $P5085, $P5086[0]
    unless_null $P5085, fallback5214
    nqp_get_sc_object $P5089, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5085, $P5089
  fallback5214:
    set $S5007, $P5085
    box $P5090, $S5007
    set $P102["definedness"], $P5090
  if1672_end5209:
.annotate 'line', 2622
    $P5091 = _lex_param_1."!make"($P102)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1360232768.755") :anon :lex :outer("cuid_305_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2606
    .const 'Sub' $P5015 = 'cuid_474_1360232768.755' 
    capture_lex $P5015 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2607
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5194
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5005
  fallback5194:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback5195
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback5195:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5196
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5007
  fallback5196:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2608
    find_lex $P5010, "$past"
    $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto if1668_end5198 
    .const 'Sub' $P5011 = 'cuid_474_1360232768.755' 
    capture_lex $P5011
    $P5012 = $P5011($P5014)
    set $P5013, $P5012
  if1668_end5198:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1360232768.755") :anon :lex :outer("cuid_475_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2609
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2610
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5199
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5200
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback5200:
    unless_null $P5002, vivi_16695201
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16695201:
    set $P5001, $P5002
  fallback5199:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2611
    find_lex $P5011, "$past"
    $P5012 = $P5011."default"()
    set $P5017, $P5012
    unless $P5012 goto if1671_end5205 
    find_lex $P5014, "$/"
    unless_null $P5014, fallback5206
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5015
  fallback5206:
    set $P5013, $P5014["default_value"]
    unless_null $P5013, fallback5207
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5016
  fallback5207:
    isfalse $I5001, $P5013
    box $P5018, $I5001
    set $P5017, $P5018
  if1671_end5205:
    set $P5022, $P5017
    unless $P5017 goto if1670_end5203 
.annotate 'line', 2612
    find_lex $P5019, "$past"
    $P5020 = "&default_value_for_prim"(_lex_param_0)
    $P5021 = $P5019."default"($P5020)
    set $P5022, $P5021
  if1670_end5203:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_306_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2625
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2627
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5215
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5008
  fallback5215:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2629
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5216
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5217
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5014
  fallback5217:
    unless_null $P5011, vivi_16735218
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16735218:
    set $P5010, $P5011
  fallback5216:
    $P5016 = $P5010."cur_lexpad"()
    $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2630
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_307_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2633
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2634
    unless_null _lex_param_1, fallback5219
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback5219:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5220
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback5220:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2635
    unless_null _lex_param_1, fallback5221
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5008
  fallback5221:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5222
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5009
  fallback5222:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5223
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5223:
    set $S5001, $P5006
    $P101."named"($S5001)
.annotate 'line', 2636
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_308_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2639
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_476_1360232768.755' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 2643
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5224
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5007
  fallback5224:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_16765230
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_476_1360232768.755' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_16755229
  catch_handler_16765230:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_16755229
  skip_handler_16755229:
    set $P5016, $P102
    if $P102 goto unless1677_end5232 
.annotate 'line', 2650
.annotate 'line', 2651
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1677_end5232:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1360232768.755") :anon :lex :outer("cuid_308_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2645
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2646
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5225
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5226
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback5226:
    unless_null $P5003, vivi_16745227
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16745227:
    set $P5002, $P5003
  fallback5225:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2647
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5228
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5228:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5010."!make"($P5016)
    box $P5017, 1
    store_lex "$found", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_309_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2655
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2656
    unless_null _lex_param_1, fallback5233
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5233:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5234
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5234:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_310_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2659
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_478_1360232768.755' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_480_1360232768.755' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_481_1360232768.755' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5237
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5237:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5238
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5238:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1678_else5235 
    .const 'Sub' $P5004 = 'cuid_478_1360232768.755' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5024, $P5005
    goto if1678_end5236
  if1678_else5235:
    unless_null _lex_param_1, fallback5262
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5262:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5263
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5263:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1684_else5260 
    .const 'Sub' $P5009 = 'cuid_480_1360232768.755' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5023, $P5010
    goto if1684_end5261
  if1684_else5260:
    unless_null _lex_param_1, fallback5279
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5012
  fallback5279:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5280
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5013
  fallback5280:
    set $S5003, $P5011
    iseq $I5003, $S5003, "export"
    unless $I5003 goto if1688_else5277 
.annotate 'line', 2685
.annotate 'line', 2686
    .const 'Sub' $P5015 = 'cuid_481_1360232768.755' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5022, $P5016
    goto if1688_end5278
  if1688_else5277:
.annotate 'line', 2693
.annotate 'line', 2694
    $P5017 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5292
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5019
  fallback5292:
    set $P5018, _lex_param_1["longname"]
    unless_null $P5018, fallback5293
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5020
  fallback5293:
    set $S5006, $P5018
    concat $S5005, "Trait '", $S5006
    concat $S5004, $S5005, "' not implemented"
    $P5021 = $P5017."panic"($S5004)
    set $P5022, $P5021
  if1688_end5278:
    set $P5023, $P5022
  if1684_end5261:
    set $P5024, $P5023
  if1678_end5236:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1360232768.755") :anon :lex :outer("cuid_310_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2660
    .const 'Sub' $P5039 = 'cuid_477_1360232768.755' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P104, $P5004
.annotate 'line', 2662
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5239
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5008
  fallback5239:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5240
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5009
  fallback5240:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5241
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5010
  fallback5241:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2664
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5244
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback5244:
    $P5017 = $P5012."ACCEPTS"($P101)
    if $P5017 goto unless1679_end5243 
.annotate 'line', 2663
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless1679_end5243:
.annotate 'line', 2665
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5245
    nqp_get_sc_object $P5025, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5246
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5026
  fallback5246:
    unless_null $P5023, vivi_16805247
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_16805247:
    set $P5022, $P5023
  fallback5245:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback5248
    nqp_get_sc_object $P5031, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback5249
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5029, $P5032
  fallback5249:
    unless_null $P5029, vivi_16815250
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_16815250:
    set $P5028, $P5029
  fallback5248:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2668
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_477_1360232768.755' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1360232768.755") :anon :lex :outer("cuid_478_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2668
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2669
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5251
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5252
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback5252:
    unless_null $P5002, vivi_16825253
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16825253:
    set $P5001, $P5002
  fallback5251:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2670
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5255
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5012
  fallback5255:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5254
.annotate 'line', 2671
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5256
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5257
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5017
  fallback5257:
    unless_null $P5014, vivi_16835258
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_16835258:
    set $P5013, $P5014
  fallback5256:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5259
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5021
  fallback5259:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5254:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1360232768.755") :anon :lex :outer("cuid_310_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2674
    .const 'Sub' $P5031 = 'cuid_479_1360232768.755' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
.annotate 'line', 2676
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5264
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5007
  fallback5264:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5265
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5008
  fallback5265:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5266
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5009
  fallback5266:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2678
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5269
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5269:
    $P5016 = $P5011."ACCEPTS"($P101)
    if $P5016 goto unless1685_end5268 
.annotate 'line', 2677
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless1685_end5268:
.annotate 'line', 2679
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback5270
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback5271
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5022, $P5025
  fallback5271:
    unless_null $P5022, vivi_16865272
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_16865272:
    set $P5021, $P5022
  fallback5270:
    set $P103, $P5021
.annotate 'line', 2681
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_479_1360232768.755' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1360232768.755") :anon :lex :outer("cuid_480_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2681
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2682
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5273
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5274
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback5274:
    unless_null $P5002, vivi_16875275
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16875275:
    set $P5001, $P5002
  fallback5273:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5276
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5010
  fallback5276:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1360232768.755") :anon :lex :outer("cuid_310_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2686
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 2687
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2688
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5281
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5005
  fallback5281:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5282
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5283
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5014
  fallback5283:
    unless_null $P5011, vivi_16895284
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_16895284:
    set $P5010, $P5011
  fallback5282:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5285
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5016
  fallback5285:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5287
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5019
  fallback5287:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5286
.annotate 'line', 2690
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5288
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5289
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5024
  fallback5289:
    unless_null $P5021, vivi_16905290
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16905290:
    set $P5020, $P5021
  fallback5288:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5291
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5027
  fallback5291:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5286:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_311_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2698
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5074 = 'cuid_483_1360232768.755' 
    capture_lex $P5074 
    if haz_param_5, default5374
    nqp_get_sc_object $P5073, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_2, $P5073
  default5374:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5296
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5004
  fallback5296:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5297
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback5297:
    unless $P5003 goto if1691_else5294 
.annotate 'line', 2700
.annotate 'line', 2701
    unless_null _lex_param_1, fallback5298
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5298:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5299
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5299:
    $P5009 = $P5006."ast"()
    set $S5001, $P5009
    box $P5010, $S5001
    set $P101, $P5010
    goto if1691_end5295
  if1691_else5294:
.annotate 'line', 2703
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback5302
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback5303
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5015
  fallback5303:
    unless_null $P5012, vivi_16935304
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_16935304:
    set $P5011, $P5012
  fallback5302:
    set $S5002, $P5011
    isne $I5001, $S5002, "role"
    unless $I5001 goto if1692_end5301 
.annotate 'line', 2704
.annotate 'line', 2705
    $P5017 = _lex_param_1."CURSOR"()
    $P5018 = $P5017."panic"("Late-bound method name only valid in role")
  if1692_end5301:
    unless_null _lex_param_1, fallback5305
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5020
  fallback5305:
    set $P5019, _lex_param_1["latename"]
    unless_null $P5019, fallback5306
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5021
  fallback5306:
    set $S5004, $P5019
    concat $S5003, "!!LATENAME!!", $S5004
    box $P5022, $S5003
    set $P101, $P5022
  if1691_end5295:
    unless_null _lex_param_1, fallback5309
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5024
  fallback5309:
    set $P5023, _lex_param_1["proto"]
    unless_null $P5023, fallback5310
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5025
  fallback5310:
    unless $P5023 goto if1694_else5307 
.annotate 'line', 2710
.annotate 'line', 2711
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback5311
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5030
  fallback5311:
.annotate 'line', 2713
    nqp_get_sc_object $P5034, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5312
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5031, $P5035
  fallback5312:
.annotate 'line', 2714
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5313
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5040
  fallback5313:
    $P5041 = $P5036."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2715
    nqp_get_sc_object $P5045, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback5314
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5046
  fallback5314:
    $P5047 = $P5042."new"($P101 :named("value"))
    $P5048 = $P5031."new"($P5041, $P5047, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5049 = $P5026."new"($P5048, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    set $P102, $P5049
.annotate 'line', 2722
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback5315
    nqp_get_sc_object $P5053, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback5316
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5051, $P5054
  fallback5316:
    unless_null $P5051, vivi_16955317
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_16955317:
    set $P5050, $P5051
  fallback5315:
    find_dynamic_lex $P5056, "$*PACKAGE"
    unless_null $P5056, fallback5318
    nqp_get_sc_object $P5059, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PACKAGE"]
    unless_null $P5057, fallback5319
    nqp_get_sc_object $P5060, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5057, $P5060
  fallback5319:
    unless_null $P5057, vivi_16965320
    die "Contextual $*PACKAGE not found"
    box $P5061, "Contextual $*PACKAGE not found"
    set $P5057, $P5061
  vivi_16965320:
    set $P5056, $P5057
  fallback5318:
.annotate 'line', 2723
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5321
    nqp_get_sc_object $P5065, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5322
    nqp_get_sc_object $P5066, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5063, $P5066
  fallback5322:
    unless_null $P5063, vivi_16975323
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_16975323:
    set $P5062, $P5063
  fallback5321:
    $P5068 = $P5062."create_code"($P102, $P101, 0, "NQPRegex" :named("code_type_name"))
    $P5069 = $P5050."pkg_add_method"($P5056, "add_method", $P101, $P5068)
    goto if1694_end5308
  if1694_else5307:
    .const 'Sub' $P5070 = 'cuid_483_1360232768.755' 
    capture_lex $P5070
    $P5071 = $P5070()
  if1694_end5308:
.annotate 'line', 2762
    $P5072 = _lex_param_1."!make"($P102)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1360232768.755") :anon :lex :outer("cuid_311_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2725
    .const 'Sub' $P5130 = 'cuid_482_1360232768.755' 
    capture_lex $P5130 
    .lex "$block", $P101 
    .lex "$code", $P102 
    .lex "$regex", $P103 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
.annotate 'line', 2726
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5324
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5325
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5008
  fallback5325:
    unless_null $P5005, vivi_16985326
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16985326:
    set $P5004, $P5005
  fallback5324:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2727
    set $P5011, $P101[0]
    unless_null $P5011, fallback5327
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5012
  fallback5327:
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5328
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5017
  fallback5328:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."unshift"($P5018)
.annotate 'line', 2728
    set $P5019, $P101[0]
    unless_null $P5019, fallback5329
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5020
  fallback5329:
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5330
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback5330:
.annotate 'line', 2730
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5331
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5030
  fallback5331:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2731
    nqp_get_sc_object $P5035, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5332
    nqp_get_sc_object $P5036, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5036
  fallback5332:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2732
    set $P5039, $P101[0]
    unless_null $P5039, fallback5333
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5040
  fallback5333:
    nqp_get_sc_object $P5044, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5334
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5041, $P5045
  fallback5334:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2733
    set $P5047, $P101[0]
    unless_null $P5047, fallback5335
    nqp_get_sc_object $P5048, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5047, $P5048
  fallback5335:
    nqp_get_sc_object $P5052, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5336
    nqp_get_sc_object $P5053, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5049, $P5053
  fallback5336:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2734
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2735
    $P101."symbol"("$/", "lexical" :named("scope"))
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback5337
    nqp_get_sc_object $P5059, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%RX"]
    unless_null $P5057, fallback5338
    nqp_get_sc_object $P5061, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%RX"], $P5062
    set $P5057, $P5062
  fallback5338:
    unless_null $P5057, vivi_16995339
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5057, $P5063
  vivi_16995339:
    set $P5056, $P5057
  fallback5337:
    set $P5055, $P5056["code"]
    unless_null $P5055, fallback5340
    nqp_get_sc_object $P5064, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5064
  fallback5340:
    set $P102, $P5055
.annotate 'line', 2737
    find_dynamic_lex $P5066, "%*LANG"
    unless_null $P5066, fallback5341
    nqp_get_sc_object $P5069, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%LANG"]
    unless_null $P5067, fallback5342
    nqp_get_sc_object $P5071, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%LANG"], $P5072
    set $P5067, $P5072
  fallback5342:
    unless_null $P5067, vivi_17005343
    die "Contextual %*LANG not found"
    box $P5073, "Contextual %*LANG not found"
    set $P5067, $P5073
  vivi_17005343:
    set $P5066, $P5067
  fallback5341:
    set $P5065, $P5066["Regex-actions"]
    unless_null $P5065, fallback5344
    nqp_get_sc_object $P5074, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5065, $P5074
  fallback5344:
    find_lex $P5076, "$/"
    unless_null $P5076, fallback5345
    nqp_get_sc_object $P5077, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5076, $P5077
  fallback5345:
    set $P5075, $P5076["p6regex"]
    unless_null $P5075, fallback5346
    nqp_get_sc_object $P5078, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5075, $P5078
  fallback5346:
    $P5079 = $P5075."ast"()
    $P5080 = $P5065."qbuildsub"($P5079, $P101, $P102 :named("code_obj"))
    set $P103, $P5080
.annotate 'line', 2738
    find_lex $P5081, "$name"
    $P103."name"($P5081)
    find_dynamic_lex $P5082, "$*PKGDECL"
    unless_null $P5082, fallback5351
    nqp_get_sc_object $P5085, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PKGDECL"]
    unless_null $P5083, fallback5352
    nqp_get_sc_object $P5086, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5083, $P5086
  fallback5352:
    unless_null $P5083, vivi_17035353
    die "Contextual $*PKGDECL not found"
    box $P5087, "Contextual $*PKGDECL not found"
    set $P5083, $P5087
  vivi_17035353:
    set $P5082, $P5083
  fallback5351:
    set $P5095, $P5082
    unless $P5082 goto if1702_end5350 
    find_dynamic_lex $P5089, "$*PACKAGE"
    unless_null $P5089, fallback5354
    nqp_get_sc_object $P5092, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$PACKAGE"]
    unless_null $P5090, fallback5355
    nqp_get_sc_object $P5093, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5090, $P5093
  fallback5355:
    unless_null $P5090, vivi_17045356
    die "Contextual $*PACKAGE not found"
    box $P5094, "Contextual $*PACKAGE not found"
    set $P5090, $P5094
  vivi_17045356:
    set $P5089, $P5090
  fallback5354:
    get_how $P5088, $P5089
    can $I5001, $P5088, "add_method"
    box $P5096, $I5001
    set $P5095, $P5096
  if1702_end5350:
    unless $P5095 goto if1701_end5348 
.annotate 'line', 2740
.annotate 'line', 2742
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback5357
    nqp_get_sc_object $P5100, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback5358
    nqp_get_sc_object $P5101, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5098, $P5101
  fallback5358:
    unless_null $P5098, vivi_17055359
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_17055359:
    set $P5097, $P5098
  fallback5357:
    find_dynamic_lex $P5103, "$*PACKAGE"
    unless_null $P5103, fallback5360
    nqp_get_sc_object $P5106, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$PACKAGE"]
    unless_null $P5104, fallback5361
    nqp_get_sc_object $P5107, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5104, $P5107
  fallback5361:
    unless_null $P5104, vivi_17065362
    die "Contextual $*PACKAGE not found"
    box $P5108, "Contextual $*PACKAGE not found"
    set $P5104, $P5108
  vivi_17065362:
    set $P5103, $P5104
  fallback5360:
    find_lex $P5109, "$name"
    $P5110 = $P5097."pkg_add_method"($P5103, "add_method", $P5109, $P102)
  if1701_end5348:
    find_dynamic_lex $P5111, "$*PKGDECL"
    unless_null $P5111, fallback5365
    nqp_get_sc_object $P5114, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5113, $P5114
    set $P5112, $P5113["$PKGDECL"]
    unless_null $P5112, fallback5366
    nqp_get_sc_object $P5115, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5112, $P5115
  fallback5366:
    unless_null $P5112, vivi_17085367
    die "Contextual $*PKGDECL not found"
    box $P5116, "Contextual $*PKGDECL not found"
    set $P5112, $P5116
  vivi_17085367:
    set $P5111, $P5112
  fallback5365:
    set $S5001, $P5111
    iseq $I5002, $S5001, "role"
    unless $I5002 goto if1707_end5364 
    .const 'Sub' $P5117 = 'cuid_482_1360232768.755' 
    capture_lex $P5117
    $P5118 = $P5117()
  if1707_end5364:
.annotate 'line', 2756
    nqp_get_sc_object $P5122, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback5373
    nqp_get_sc_object $P5123, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5119, $P5123
  fallback5373:
.annotate 'line', 2758
    new $P5124, 'ResizablePMCArray'
    box $P5125, "NQPRegexMethod"
    push $P5124, $P5125
    find_lex $P5126, "$/"
    $P5127 = "&lexical_package_lookup"($P5124, $P5126)
    $P5128 = $P5119."new"($P5127, $P103, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5128
    find_lex $P5129, "$past"
    set $P5129["sink"], $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1360232768.755") :anon :lex :outer("cuid_483_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2747
    .lex "$gen_nfa", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2748
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QRegex"
    get_who $P5003, $P5004
    set $P5002, $P5003["NFA"]
    unless_null $P5002, fallback5368
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback5368:
    $P5007 = $P5002."new"()
    set $P101, $P5007
.annotate 'line', 2749
    find_lex $P5009, "$/"
    unless_null $P5009, fallback5369
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5010
  fallback5369:
    set $P5008, $P5009["p6regex"]
    unless_null $P5008, fallback5370
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5011
  fallback5370:
    $P5012 = $P5008."ast"()
    $P101."addnode"($P5012, 1 :named("vars_as_generic"))
.annotate 'line', 2750
    $P5013 = $P101."generic"()
    set $P5016, $P5013
    unless $P5013 goto if1709_end5372 
.annotate 'line', 2751
    find_lex $P5014, "$code"
    $P5015 = $P5014."SET_GENERIC_NFA"($P101)
    set $P5016, $P5015
  if1709_end5372:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_312_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2766
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5377
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback5377:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5378
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback5378:
    unless $P5002 goto if1710_else5375 
.annotate 'line', 2767
    unless_null _lex_param_1, fallback5379
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5379:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5380
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5380:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5381
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5009
  fallback5381:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1710_end5376
  if1710_else5375:
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5382
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5382:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1710_end5376:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5385
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5019
  fallback5385:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5386
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5020
  fallback5386:
    unless $P5018 goto if1711_else5383 
.annotate 'line', 2768
.annotate 'line', 2769
    unless_null _lex_param_1, fallback5387
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5022
  fallback5387:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5388
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5023
  fallback5388:
    $P5024 = $P5021."ast"()
    $P101."unshift"($P5024)
.annotate 'line', 2770
    $P5025 = $P101."op"("callmethod")
    goto if1711_end5384
  if1711_else5383:
    unless_null _lex_param_1, fallback5391
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5027
  fallback5391:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback5392
    nqp_get_sc_object $P5028, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5028
  fallback5392:
    set $S5001, $P5026
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1712_else5389 
.annotate 'line', 2772
.annotate 'line', 2773
    $P5029 = $P101."op"("how")
    set $P5049, $P5029
    goto if1712_end5390
  if1712_else5389:
    unless_null _lex_param_1, fallback5395
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5031
  fallback5395:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5396
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5030, $P5032
  fallback5396:
    set $S5002, $P5030
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1713_else5393 
.annotate 'line', 2775
.annotate 'line', 2776
    $P5033 = $P101."op"("what")
    set $P5048, $P5033
    goto if1713_end5394
  if1713_else5393:
    unless_null _lex_param_1, fallback5399
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5035
  fallback5399:
    set $P5034, _lex_param_1["longname"]
    unless_null $P5034, fallback5400
    nqp_get_sc_object $P5036, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5036
  fallback5400:
    set $S5003, $P5034
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1714_else5397 
.annotate 'line', 2778
.annotate 'line', 2779
    $P5037 = $P101."op"("who")
    set $P5047, $P5037
    goto if1714_end5398
  if1714_else5397:
    unless_null _lex_param_1, fallback5403
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5039
  fallback5403:
    set $P5038, _lex_param_1["longname"]
    unless_null $P5038, fallback5404
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5040
  fallback5404:
    set $S5004, $P5038
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1715_else5401 
.annotate 'line', 2781
.annotate 'line', 2782
    $P5041 = $P101."op"("reprname")
    set $P5046, $P5041
    goto if1715_end5402
  if1715_else5401:
.annotate 'line', 2784
.annotate 'line', 2785
    unless_null _lex_param_1, fallback5405
    nqp_get_sc_object $P5043, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5043
  fallback5405:
    set $P5042, _lex_param_1["longname"]
    unless_null $P5042, fallback5406
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5044
  fallback5406:
    set $S5005, $P5042
    $P101."name"($S5005)
.annotate 'line', 2786
    $P5045 = $P101."op"("callmethod")
    set $P5046, $P5045
  if1715_end5402:
    set $P5047, $P5046
  if1714_end5398:
    set $P5048, $P5047
  if1713_end5394:
    set $P5049, $P5048
  if1712_end5390:
  if1711_end5384:
.annotate 'line', 2788
    $P5050 = _lex_param_1."!make"($P101)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_313_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2793
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2794
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5407
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5407:
.annotate 'line', 2795
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5408
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5408:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "decont" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_314_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2798
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2799
    unless_null _lex_param_1, fallback5409
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback5409:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5410
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback5410:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2800
    unless_null _lex_param_1, fallback5411
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5411:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5412
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5412:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P101."name"($S5001)
.annotate 'line', 2801
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_315_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2804
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_484_1360232768.755' 
    capture_lex $P5049 
    .const 'Sub' $P5049 = 'cuid_485_1360232768.755' 
    capture_lex $P5049 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 2807
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5415
    nqp_get_sc_object $P5006, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5416
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback5416:
    unless_null $P5004, vivi_17175417
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_17175417:
    set $P5003, $P5004
  fallback5415:
    unless_null _lex_param_1, fallback5418
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5010
  fallback5418:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5419
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5011
  fallback5419:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1716_else5413 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_17225432
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2808
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_17205427
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2809
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5420
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5017
  fallback5420:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5421
    nqp_get_sc_object $P5021, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5422
    nqp_get_sc_object $P5022, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5022
  fallback5422:
    unless_null $P5019, vivi_17185423
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_17185423:
    set $P5018, $P5019
  fallback5421:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5424
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5026
  fallback5424:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5425
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5027
  fallback5425:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_17195426
  catch_handler_17205427:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_484_1360232768.755' 
    capture_lex $P10001
    $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10002
    goto skip_handler_17195426
  skip_handler_17195426:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_17215431
  catch_handler_17225432:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_17215431
  skip_handler_17215431:
    goto if1716_end5414
  if1716_else5413:
    .const 'Sub' $P5036 = 'cuid_485_1360232768.755' 
    capture_lex $P5036
    $P5037 = $P5036()
  if1716_end5414:
    set $P102, $P101
    unless_null _lex_param_1, fallback5438
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5039
  fallback5438:
    set $P5038, _lex_param_1["args"]
    unless_null $P5038, fallback5439
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5040
  fallback5439:
    unless $P5038 goto if1723_end5437 
.annotate 'line', 2822
.annotate 'line', 2823
    unless_null _lex_param_1, fallback5440
    nqp_get_sc_object $P5043, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5043
  fallback5440:
    set $P5042, _lex_param_1["args"]
    unless_null $P5042, fallback5441
    nqp_get_sc_object $P5044, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5044
  fallback5441:
    set $P5041, $P5042[0]
    unless_null $P5041, fallback5442
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5041, $P5045
  fallback5442:
    $P5046 = $P5041."ast"()
    set $P102, $P5046
.annotate 'line', 2824
    $P5047 = $P102."unshift"($P101)
  if1723_end5437:
.annotate 'line', 2826
    $P5048 = _lex_param_1."!make"($P102)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_484_1360232768.755") :anon :lex :outer("cuid_315_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2810
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2811
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5428
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5428:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5429
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5008
  fallback5429:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5430
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5009
  fallback5430:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_485_1360232768.755") :anon :lex :outer("cuid_315_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2815
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5433
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5006
  fallback5433:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5434
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5007
  fallback5434:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5435
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5008
  fallback5435:
    repr_clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2817
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_316_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2829
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5445
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5004
  fallback5445:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5446
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback5446:
    unless $P5003 goto if1724_else5443 
.annotate 'line', 2830
    unless_null _lex_param_1, fallback5447
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5008
  fallback5447:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5448
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5009
  fallback5448:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5449
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5449:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1724_end5444
  if1724_else5443:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1724_end5444:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5450
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5016
  fallback5450:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5451
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5015, $P5017
  fallback5451:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2833
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5452
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback5452:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_317_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2836
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2837
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5453
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5453:
    unless_null _lex_param_1, fallback5454
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5454:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5455
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5455:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_318_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2840
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback5456
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback5456:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5457
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback5457:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5460
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback5460:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5461
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback5461:
    unless $P5008 goto if1725_else5458 
.annotate 'line', 2842
    unless_null _lex_param_1, fallback5462
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5013
  fallback5462:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5463
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5014
  fallback5463:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5464
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5464:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1725_end5459
  if1725_else5458:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1725_end5459:
    set $P102, $P5019
.annotate 'line', 2843
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5465
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5024
  fallback5465:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2844
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_319_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2847
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2848
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5466
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5466:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_320_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2851
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5467
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5467:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5468
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5468:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_321_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2853
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5052 = 'cuid_487_1360232768.755' 
    capture_lex $P5052 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
.annotate 'line', 2854
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5469
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5008
  fallback5469:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5472
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5011
  fallback5472:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5473
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5012
  fallback5473:
    unless $P5010 goto if1726_end5471 
    .const 'Sub' $P5013 = 'cuid_487_1360232768.755' 
    capture_lex $P5013
    $P5014 = $P5013()
  if1726_end5471:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2863
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
  while1730_test5486:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto while1730_done5490 
  while1730_redo5488:
.annotate 'line', 2864
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback5495
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5019
  fallback5495:
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5496
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5024
  fallback5496:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1732_end5494 
.annotate 'line', 2865
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback5497
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5026
  fallback5497:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1732_end5494:
    unless $I5006 goto if1731_end5492 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback5498
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5029, $P5030
  fallback5498:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback5499
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5031
  fallback5499:
    set $P101[$I5007], $P5028
.annotate 'line', 2867
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback5500
    nqp_get_sc_object $P5033, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5033
  fallback5500:
    $P5032."flat"(1)
    set $I5011, $P102
    set $P5034, $P101[$I5011]
    unless_null $P5034, fallback5505
    nqp_get_sc_object $P5035, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5034, $P5035
  fallback5505:
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5506
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5040
  fallback5506:
    type_check $I5010, $P5034, $P5036
    set $I5014, $I5010
    unless $I5010 goto if1734_end5504 
.annotate 'line', 2869
    set $I5013, $P102
    set $P5041, $P101[$I5013]
    unless_null $P5041, fallback5507
    nqp_get_sc_object $P5042, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5041, $P5042
  fallback5507:
    $P5043 = $P5041."name"()
    set $S5003, $P5043
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1734_end5504:
    box $P5048, $I5014
    set $P5047, $P5048
    unless $I5014 goto if1733_end5502 
.annotate 'line', 2868
    set $I5015, $P102
    set $P5044, $P101[$I5015]
    unless_null $P5044, fallback5508
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5045
  fallback5508:
    $P5046 = $P5044."named"(1)
    set $P5047, $P5046
  if1733_end5502:
  if1731_end5492:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5049, $N5004
    set $P102, $P5049
    set $P5049, tmp_2
    goto while1730_test5486 
  while1730_done5490:
.annotate 'line', 2873
    $P5051 = _lex_param_1."!make"($P101)
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_487_1360232768.755") :anon :lex :outer("cuid_321_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2855
    .const 'Sub' $P5023 = 'cuid_486_1360232768.755' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2856
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5474
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5004
  fallback5474:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5475
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5005
  fallback5475:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5482
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback5482:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1729_end5481 
.annotate 'line', 2857
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1729_end5481:
    set $I5005, $I5003
    unless $I5003 goto if1728_end5479 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1728_end5479:
    unless $I5005 goto if1727_else5476 
.annotate 'line', 2858
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5483:
    unless $P5016, for_done5485
    shift $P5019, $P5016
  for_redo5484:
    .const 'Sub' $P5018 = 'cuid_486_1360232768.755' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5483
  for_done5485:
    set $P5022, $P5014
    goto if1727_end5477
  if1727_else5476:
.annotate 'line', 2860
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1727_end5477:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_486_1360232768.755") :anon :lex :outer("cuid_487_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2858
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_322_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2876
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5509
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5509:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5510
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5510:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_323_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2878
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5511
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5511:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5512
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5512:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_324_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2880
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2881
    unless_null _lex_param_1, fallback5515
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5515:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5516
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5516:
    unless $P5001 goto if1735_else5513 
.annotate 'line', 2882
    unless_null _lex_param_1, fallback5517
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5006
  fallback5517:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5518
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5007
  fallback5518:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5519
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5008
  fallback5519:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1735_end5514
  if1735_else5513:
.annotate 'line', 2883
    nqp_get_sc_object $P5013, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5520
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5014
  fallback5520:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1735_end5514:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_325_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2886
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5523
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback5523:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5524
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback5524:
    unless $P5002 goto if1736_else5521 
.annotate 'line', 2888
.annotate 'line', 2889
    unless_null _lex_param_1, fallback5525
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5525:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5526
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5526:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5527
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5009
  fallback5527:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5532
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5532:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1738_end5531 
.annotate 'line', 2890
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1738_end5531:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1737_end5529 
.annotate 'line', 2891
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5533
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5021
  fallback5533:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1737_end5529:
    goto if1736_end5522
  if1736_else5521:
.annotate 'line', 2894
.annotate 'line', 2895
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5534
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5029
  fallback5534:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
  if1736_end5522:
.annotate 'line', 2897
    $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2898
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_326_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2901
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5535
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5535:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5536
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5536:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_327_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2902
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5537
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5537:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5538
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5538:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_328_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2904
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_488_1360232768.755' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5541
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback5541:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5542
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback5542:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5543
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5007
  fallback5543:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5544
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5008
  fallback5544:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5545
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5009
  fallback5545:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1739_else5539 
    .const 'Sub' $P5010 = 'cuid_488_1360232768.755' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1739_end5540
  if1739_else5539:
    unless_null _lex_param_1, fallback5551
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5015
  fallback5551:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5552
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5016
  fallback5552:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5553
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5017
  fallback5553:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5554
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5018
  fallback5554:
    unless $P5012 goto if1740_else5549 
.annotate 'line', 2910
.annotate 'line', 2911
    unless_null _lex_param_1, fallback5555
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5020
  fallback5555:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5556
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5021
  fallback5556:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1740_end5550
  if1740_else5549:
.annotate 'line', 2913
.annotate 'line', 2914
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1740_end5550:
    set $P5027, $P5026
  if1739_end5540:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_488_1360232768.755") :anon :lex :outer("cuid_328_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2905
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 2906
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5546
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5006
  fallback5546:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5547
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5009
  fallback5547:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5548
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5010
  fallback5548:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2908
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_329_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2918
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5557
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5557:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5558
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5558:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_330_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2920
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2921
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5559
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5559:
    unless_null _lex_param_1, fallback5560
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5560:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5561
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5561:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_331_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2924
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2925
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5562
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5562:
    unless_null _lex_param_1, fallback5563
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5563:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5564
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5564:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_332_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2928
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2929
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5565
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5565:
    unless_null _lex_param_1, fallback5566
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5566:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5567
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5567:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_333_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2932
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2933
    unless_null _lex_param_1, fallback5568
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5568:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5569
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5569:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_334_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2936
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2937
    unless_null _lex_param_1, fallback5572
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5572:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5573
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5573:
    unless $P5001 goto if1741_else5570 
    unless_null _lex_param_1, fallback5574
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5005
  fallback5574:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5575
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5004, $P5006
  fallback5575:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1741_end5571
  if1741_else5570:
    unless_null _lex_param_1, fallback5576
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5009
  fallback5576:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5577
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5008, $P5010
  fallback5577:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1741_end5571:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_335_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2940
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5580
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback5580:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5581
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback5581:
    unless $P5002 goto if1742_else5578 
.annotate 'line', 2941
    unless_null _lex_param_1, fallback5582
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5006
  fallback5582:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5583
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5007
  fallback5583:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1742_end5579
  if1742_else5578:
    unless_null _lex_param_1, fallback5584
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5010
  fallback5584:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5585
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5009, $P5011
  fallback5585:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1742_end5579:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5588
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5015
  fallback5588:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5589
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5016
  fallback5589:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if1743_end5587 
.annotate 'line', 2942
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
  if1743_end5587:
.annotate 'line', 2943
    unless_null _lex_param_1, fallback5592
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5019
  fallback5592:
    set $P5018, _lex_param_1["dec_number"]
    unless_null $P5018, fallback5593
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5018, $P5020
  fallback5593:
    unless $P5018 goto if1744_else5590 
.annotate 'line', 2944
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["NVal"]
    unless_null $P5021, fallback5594
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback5594:
    $P5026 = $P5021."new"($P101 :named("value"))
    set $P5033, $P5026
    goto if1744_end5591
  if1744_else5590:
.annotate 'line', 2945
    nqp_get_sc_object $P5030, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["IVal"]
    unless_null $P5027, fallback5595
    nqp_get_sc_object $P5031, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5027, $P5031
  fallback5595:
    $P5032 = $P5027."new"($P101 :named("value"))
    set $P5033, $P5032
  if1744_end5591:
    $P5034 = _lex_param_1."!make"($P5033)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_336_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2948
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5596
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5596:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5597
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5597:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_337_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2949
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5598
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5598:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5599
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5599:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_338_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2950
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5600
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5600:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5601
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5601:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_339_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2951
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5602
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5602:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5603
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5603:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_340_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2952
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5604
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5604:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5605
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5605:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_341_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2953
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2954
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5606
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5606:
    unless_null _lex_param_1, fallback5607
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5607:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5608
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5608:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_342_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2957
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P103, $P5003
.annotate 'line', 2958
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5609
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5610
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5005, $P5008
  fallback5610:
    unless_null $P5005, vivi_17455611
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17455611:
    set $P5004, $P5005
  fallback5609:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2959
    set $P5011, $P101[0]
    unless_null $P5011, fallback5612
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5012
  fallback5612:
    nqp_get_sc_object $P5016, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5613
    nqp_get_sc_object $P5017, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5013, $P5017
  fallback5613:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."push"($P5018)
.annotate 'line', 2960
    set $P5019, $P101[0]
    unless_null $P5019, fallback5614
    nqp_get_sc_object $P5020, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5019, $P5020
  fallback5614:
    nqp_get_sc_object $P5024, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5615
    nqp_get_sc_object $P5025, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5021, $P5025
  fallback5615:
.annotate 'line', 2962
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5616
    nqp_get_sc_object $P5030, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5026, $P5030
  fallback5616:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2963
    nqp_get_sc_object $P5035, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5617
    nqp_get_sc_object $P5036, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5032, $P5036
  fallback5617:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2964
    set $P5039, $P101[0]
    unless_null $P5039, fallback5618
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5039, $P5040
  fallback5618:
    nqp_get_sc_object $P5044, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5619
    nqp_get_sc_object $P5045, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5041, $P5045
  fallback5619:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2965
    set $P5047, $P101[0]
    unless_null $P5047, fallback5620
    nqp_get_sc_object $P5048, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5047, $P5048
  fallback5620:
    nqp_get_sc_object $P5052, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5621
    nqp_get_sc_object $P5053, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5049, $P5053
  fallback5621:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2966
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2967
    $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2969
    find_dynamic_lex $P5056, "%*LANG"
    unless_null $P5056, fallback5622
    nqp_get_sc_object $P5059, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%LANG"]
    unless_null $P5057, fallback5623
    nqp_get_sc_object $P5061, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%LANG"], $P5062
    set $P5057, $P5062
  fallback5623:
    unless_null $P5057, vivi_17465624
    die "Contextual %*LANG not found"
    box $P5063, "Contextual %*LANG not found"
    set $P5057, $P5063
  vivi_17465624:
    set $P5056, $P5057
  fallback5622:
    set $P5055, $P5056["Regex-actions"]
    unless_null $P5055, fallback5625
    nqp_get_sc_object $P5064, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5055, $P5064
  fallback5625:
    unless_null _lex_param_1, fallback5626
    nqp_get_sc_object $P5066, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5066
  fallback5626:
    set $P5065, _lex_param_1["p6regex"]
    unless_null $P5065, fallback5627
    nqp_get_sc_object $P5067, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5065, $P5067
  fallback5627:
    $P5068 = $P5065."ast"()
    $P5069 = $P5055."qbuildsub"($P5068, $P101)
    set $P102, $P5069
.annotate 'line', 2970
    nqp_get_sc_object $P5073, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback5628
    nqp_get_sc_object $P5074, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5070, $P5074
  fallback5628:
.annotate 'line', 2972
    new $P5075, 'ResizablePMCArray'
    box $P5076, "NQPRegex"
    push $P5075, $P5076
    $P5077 = "&lexical_package_lookup"($P5075, _lex_param_1)
    $P5078 = $P5070."new"($P5077, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5078
    set $P103["sink"], $P102
.annotate 'line', 2977
    $P5079 = _lex_param_1."!make"($P103)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_343_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5629
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5629:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5630
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5630:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_344_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2981
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2982
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5631
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5631:
.annotate 'line', 2983
    unless_null _lex_param_1, fallback5632
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5632:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5633
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5633:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_345_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2986
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_346_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2990
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5634
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5634:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5635
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5635:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_347_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2992
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2993
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5636
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5636:
.annotate 'line', 2995
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5637
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5637:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_348_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2999
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3000
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5638
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5638:
.annotate 'line', 3001
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5639
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5639:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_349_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3008
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5640
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5640:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_350_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3009
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5641
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5641:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_351_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3010
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5642
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5642:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_352_1360232768.755") :anon :lex :outer("cuid_416_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3012
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3013
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5643
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5643:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_489_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3094
    .const 'Sub' $P5014 = 'cuid_353_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_354_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_355_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_356_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_357_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_358_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_359_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_360_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_361_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_362_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_363_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_364_1360232768.755' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_365_1360232768.755' 
    capture_lex $P5014 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_353_1360232768.755' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_354_1360232768.755' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_355_1360232768.755' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_356_1360232768.755' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_357_1360232768.755' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_358_1360232768.755' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_359_1360232768.755' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_360_1360232768.755' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_361_1360232768.755' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_362_1360232768.755' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_363_1360232768.755' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_364_1360232768.755' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_365_1360232768.755' 
    capture_lex $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_353_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3096
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 3097
    unless_null _lex_param_1, fallback5644
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5003
  fallback5644:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5645
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5002, $P5004
  fallback5645:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3098
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5646
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5646:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_354_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3102
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3103
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5647
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5647:
    unless_null _lex_param_1, fallback5648
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5648:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5649
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5649:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_355_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3107
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3108
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5650
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5650:
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5651
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5651:
.annotate 'line', 3109
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5652
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5652:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3110
    unless_null _lex_param_1, fallback5653
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5018
  fallback5653:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5654
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5019
  fallback5654:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_356_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3114
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3115
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5655
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5655:
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5656
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5656:
.annotate 'line', 3116
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5657
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5657:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3117
    unless_null _lex_param_1, fallback5658
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5018
  fallback5658:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5659
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5019
  fallback5659:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_357_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3122
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5660
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5660:
    unless_null _lex_param_1, fallback5661
    nqp_get_sc_object $P5007, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5007
  fallback5661:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5662
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5008
  fallback5662:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5663
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5011
  fallback5663:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5664
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5012
  fallback5664:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_358_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3127
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3128
    nqp_get_sc_object $P5004, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5665
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5005
  fallback5665:
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5666
    nqp_get_sc_object $P5010, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5006, $P5010
  fallback5666:
.annotate 'line', 3129
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5667
    nqp_get_sc_object $P5015, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5015
  fallback5667:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3130
    unless_null _lex_param_1, fallback5668
    nqp_get_sc_object $P5018, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5018
  fallback5668:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5669
    nqp_get_sc_object $P5019, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5019
  fallback5669:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_359_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3134
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
.annotate 'line', 3135
    unless_null _lex_param_1, fallback5670
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5004
  fallback5670:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5671
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback5671:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3136
    $P101."blocktype"("immediate")
.annotate 'line', 3138
    nqp_get_sc_object $P5010, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5672
    nqp_get_sc_object $P5011, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5011
  fallback5672:
.annotate 'line', 3139
    nqp_get_sc_object $P5015, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5673
    nqp_get_sc_object $P5016, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5012, $P5016
  fallback5673:
.annotate 'line', 3141
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5674
    nqp_get_sc_object $P5021, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5021
  fallback5674:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3142
    nqp_get_sc_object $P5026, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5675
    nqp_get_sc_object $P5027, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5023, $P5027
  fallback5675:
.annotate 'line', 3143
    nqp_get_sc_object $P5031, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5676
    nqp_get_sc_object $P5032, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5028, $P5032
  fallback5676:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3150
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_360_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3153
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_490_1360232768.755' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_491_1360232768.755' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5677
    nqp_get_sc_object $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5004
  fallback5677:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5678
    nqp_get_sc_object $P5005, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5005
  fallback5678:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5681
    nqp_get_sc_object $P5008, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5008
  fallback5681:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5682
    nqp_get_sc_object $P5009, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5007, $P5009
  fallback5682:
    unless $P5007 goto if1747_else5679 
.annotate 'line', 3156
.annotate 'line', 3157
    unless_null _lex_param_1, fallback5683
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5012
  fallback5683:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5684
    nqp_get_sc_object $P5013, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5011, $P5013
  fallback5684:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5685
    nqp_get_sc_object $P5014, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5010, $P5014
  fallback5685:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3158
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if1747_end5680
  if1747_else5679:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1748_else5686 
    .const 'Sub' $P5018 = 'cuid_490_1360232768.755' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if1748_end5687
  if1748_else5686:
.annotate 'line', 3168
.annotate 'line', 3169
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5704
    nqp_get_sc_object $P5024, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5020, $P5024
  fallback5704:
.annotate 'line', 3171
    nqp_get_sc_object $P5028, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5705
    nqp_get_sc_object $P5029, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5029
  fallback5705:
    nqp_get_sc_object $P5033, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5706
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5030, $P5034
  fallback5706:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5709
    nqp_get_sc_object $P5039, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5039
  fallback5709:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5710
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5038, $P5040
  fallback5710:
    unless $P5038 goto if1753_else5707 
.annotate 'line', 3172
.annotate 'line', 3173
    unless_null _lex_param_1, fallback5711
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5046
  fallback5711:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5712
    nqp_get_sc_object $P5047, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5045, $P5047
  fallback5712:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5713
    nqp_get_sc_object $P5048, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5044, $P5048
  fallback5713:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5715:
    unless $P5043, for_done5717
    shift $P5052, $P5043
  for_redo5716:
    .const 'Sub' $P5051 = 'cuid_491_1360232768.755' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5715
  for_done5717:
    set $P5082, $P5041
    goto if1753_end5708
  if1753_else5707:
    unless_null _lex_param_1, fallback5720
    nqp_get_sc_object $P5054, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5054
  fallback5720:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5721
    nqp_get_sc_object $P5055, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5053, $P5055
  fallback5721:
    set $P5081, $P5053
    unless $P5053 goto if1754_end5719 
.annotate 'line', 3175
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1755_else5722 
.annotate 'line', 3177
    set $P5056, $P102[0]
    unless_null $P5056, fallback5724
    nqp_get_sc_object $P5057, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5056, $P5057
  fallback5724:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback5725
    nqp_get_sc_object $P5062, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5062
  fallback5725:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback5726
    nqp_get_sc_object $P5063, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5061, $P5063
  fallback5726:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback5727
    nqp_get_sc_object $P5064, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5060, $P5064
  fallback5727:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if1755_end5723
  if1755_else5722:
.annotate 'line', 3178
    set $P5069, $P102[0]
    unless_null $P5069, fallback5728
    nqp_get_sc_object $P5070, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5069, $P5070
  fallback5728:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback5729
    nqp_get_sc_object $P5074, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5074
  fallback5729:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback5730
    nqp_get_sc_object $P5075, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5073, $P5075
  fallback5730:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5731
    nqp_get_sc_object $P5076, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5072, $P5076
  fallback5731:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if1755_end5723:
    set $P5081, $P5080
  if1754_end5719:
    set $P5082, $P5081
  if1753_end5708:
    set $P5083, $P5082
  if1748_end5687:
  if1747_end5680:
.annotate 'line', 3181
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_490_1360232768.755") :anon :lex :outer("cuid_360_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3160
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5688
    nqp_get_sc_object $P5007, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5689
    nqp_get_sc_object $P5009, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5689:
    unless_null $P5005, vivi_17495690
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_17495690:
    set $P5004, $P5005
  fallback5688:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5691
    nqp_get_sc_object $P5012, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5012
  fallback5691:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if1750_end5693 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5694
    nqp_get_sc_object $P5018, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5695
    nqp_get_sc_object $P5020, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5695:
    unless_null $P5016, vivi_17515696
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_17515696:
    set $P5015, $P5016
  fallback5694:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5697
    nqp_get_sc_object $P5023, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5014, $P5023
  fallback5697:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if1750_end5693:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback5698
    nqp_get_sc_object $P5029, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback5699
    nqp_get_sc_object $P5031, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback5699:
    unless_null $P5027, vivi_17525700
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_17525700:
    set $P5026, $P5027
  fallback5698:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback5701
    nqp_get_sc_object $P5034, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5025, $P5034
  fallback5701:
    set $S5005, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5035, $S5003
    set $P102, $P5035
.annotate 'line', 3165
    nqp_get_sc_object $P5039, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback5702
    nqp_get_sc_object $P5040, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5036, $P5040
  fallback5702:
    find_lex $P5041, "$/"
.annotate 'line', 3166
    nqp_get_sc_object $P5045, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback5703
    nqp_get_sc_object $P5046, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5042, $P5046
  fallback5703:
    find_lex $P5047, "$/"
    $P5048 = $P5042."new"($P102, "literal" :named("rxtype"), $P5047 :named("node"))
    $P5049 = $P5036."new"($P5048, "sym" :named("name"), "subcapture" :named("rxtype"), $P5041 :named("node"))
    store_lex "$qast", $P5049
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_491_1360232768.755") :anon :lex :outer("cuid_360_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3173
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5714
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5714:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_361_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3184
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3185
    unless_null _lex_param_1, fallback5732
    nqp_get_sc_object $P5002, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set _lex_param_1, $P5002
  fallback5732:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5733
    nqp_get_sc_object $P5003, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5001, $P5003
  fallback5733:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_362_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3188
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$code", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P101, $P5001
.annotate 'line', 3189
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5734
    nqp_get_sc_object $P5005, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5735
    nqp_get_sc_object $P5006, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5003, $P5006
  fallback5735:
    unless_null $P5003, vivi_17565736
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_17565736:
    set $P5002, $P5003
  fallback5734:
    $P5008 = $P5002."create_code"(_lex_param_1, "", 0, "NQPRegex" :named("code_type_name"))
    set $P101, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback5739
    nqp_get_sc_object $P5012, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%RX"]
    unless_null $P5010, fallback5740
    nqp_get_sc_object $P5014, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%RX"], $P5015
    set $P5010, $P5015
  fallback5740:
    unless_null $P5010, vivi_17585741
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5010, $P5016
  vivi_17585741:
    set $P5009, $P5010
  fallback5739:
    exists $I5001, $P5009["code"]
    unless $I5001 goto if1757_end5738 
.annotate 'line', 3190
.annotate 'line', 3191
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback5742
    nqp_get_sc_object $P5021, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback5743
    nqp_get_sc_object $P5023, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback5743:
    unless_null $P5019, vivi_17595744
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_17595744:
    set $P5018, $P5019
  fallback5742:
    set $P5017, $P5018["code"]
    unless_null $P5017, fallback5745
    nqp_get_sc_object $P5026, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    set $P5017, $P5026
  fallback5745:
    $P5027 = $P5017."ADD_NESTED_CODE"($P101)
  if1757_end5738:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_363_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3196
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 3197
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_364_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3200
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 3201
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_365_1360232768.755") :anon :lex :outer("cuid_489_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3204
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_492_1360232768.755' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next5746:
    unless $P5004, for_done5748
    shift $P5006, $P5004
  for_redo5747:
    .const 'Sub' $P5005 = 'cuid_492_1360232768.755' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next5746
  for_done5748:
.annotate 'line', 3209
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_492_1360232768.755") :anon :lex :outer("cuid_365_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3206
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3207
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_493_1360232768.755") :anon :lex :outer("cuid_367_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3214
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_495_1360232768.755") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_494_1360232768.755' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_367_1360232768.755" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1360232743.961"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "NQP"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "BA90852D9309BD10AA449854DBAFD1DA5F2ED417-1360232740.462"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "at_pos"
    push $P5004, "at_key"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "slot_for_object"
    push $P5004, "E33C00EDF3CF5C518D4B72791DC8AEB1617FF369-1360232747.82"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "push_lexpad"
    push $P5004, "pop_lexpad"
    push $P5004, "cur_lexpad"
    push $P5004, "get_legacy_block_list"
    push $P5004, "load_setting"
    push $P5004, "load_module"
    push $P5004, "import"
    push $P5004, "install_package_symbol"
    push $P5004, "install_lexical_symbol"
    push $P5004, "install_package_routine"
    push $P5004, "create_code"
    push $P5004, "pkg_create_mo"
    push $P5004, "pkg_add_attribute"
    push $P5004, "pkg_add_method"
    push $P5004, "set_routine_signature"
    push $P5004, "pkg_set_body_block"
    push $P5004, "pkg_add_parent_or_role"
    push $P5004, "pkg_add_parrot_vtable_handler_mapping"
    push $P5004, "pkg_compose"
    push $P5004, "run_begin_block"
    push $P5004, "libs"
    push $P5004, "add_initializations"
    push $P5004, "is_lexical"
    push $P5004, "is_package"
    push $P5004, "is_scope"
    push $P5004, "known_sym"
    push $P5004, "find_sym"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "@!BLOCKS"
    push $P5004, "%!code_objects_to_fix_up"
    push $P5004, "%!code_object_types"
    push $P5004, "%!code_object_fixup_list"
    push $P5004, "%!code_stub_sc_idx"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "sigil"
    push $P5004, "twigil"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "TOP"
    push $P5004, "identifier"
    push $P5004, "name"
    push $P5004, "deflongname"
    push $P5004, "ENDSTMT"
    push $P5004, "unv"
    push $P5004, "pod_comment"
    push $P5004, "comp_unit"
    push $P5004, "statementlist"
    push $P5004, "statement"
    push $P5004, "eat_terminator"
    push $P5004, "xblock"
    push $P5004, "pblock"
    push $P5004, "lambda"
    push $P5004, "block"
    push $P5004, "blockoid"
    push $P5004, "newpad"
    push $P5004, "outerctx"
    push $P5004, "finishpad"
    push $P5004, "you_are_here"
    push $P5004, "terminator"
    push $P5004, "terminator:sym<;>"
    push $P5004, "terminator:sym<}>"
    push $P5004, "statement_control"
    push $P5004, "statement_control:sym<use>"
    push $P5004, "statement_control:sym<if>"
    push $P5004, "statement_control:sym<unless>"
    push $P5004, "statement_control:sym<while>"
    push $P5004, "statement_control:sym<repeat>"
    push $P5004, "statement_control:sym<for>"
    push $P5004, "statement_control:sym<CATCH>"
    push $P5004, "statement_control:sym<CONTROL>"
    push $P5004, "statement_prefix"
    push $P5004, "statement_prefix:sym<BEGIN>"
    push $P5004, "statement_prefix:sym<INIT>"
    push $P5004, "statement_prefix:sym<try>"
    push $P5004, "blorst"
    push $P5004, "statement_mod_cond"
    push $P5004, "statement_mod_cond:sym<if>"
    push $P5004, "statement_mod_cond:sym<unless>"
    push $P5004, "statement_mod_loop"
    push $P5004, "statement_mod_loop:sym<while>"
    push $P5004, "statement_mod_loop:sym<until>"
    push $P5004, "statement_mod_loop:sym<for>"
    push $P5004, "term:sym<fatarrow>"
    push $P5004, "term:sym<colonpair>"
    push $P5004, "term:sym<variable>"
    push $P5004, "term:sym<package_declarator>"
    push $P5004, "term:sym<scope_declarator>"
    push $P5004, "term:sym<routine_declarator>"
    push $P5004, "term:sym<multi_declarator>"
    push $P5004, "term:sym<regex_declarator>"
    push $P5004, "term:sym<statement_prefix>"
    push $P5004, "term:sym<lambda>"
    push $P5004, "fatarrow"
    push $P5004, "colonpair"
    push $P5004, "variable"
    push $P5004, "package_declarator"
    push $P5004, "package_declarator:sym<module>"
    push $P5004, "package_declarator:sym<knowhow>"
    push $P5004, "package_declarator:sym<class>"
    push $P5004, "package_declarator:sym<grammar>"
    push $P5004, "package_declarator:sym<role>"
    push $P5004, "package_declarator:sym<native>"
    push $P5004, "package_declarator:sym<stub>"
    push $P5004, "package_def"
    push $P5004, "role_params"
    push $P5004, "scope_declarator"
    push $P5004, "scope_declarator:sym<my>"
    push $P5004, "scope_declarator:sym<our>"
    push $P5004, "scope_declarator:sym<has>"
    push $P5004, "scoped"
    push $P5004, "typename"
    push $P5004, "declarator"
    push $P5004, "variable_declarator"
    push $P5004, "routine_declarator"
    push $P5004, "routine_declarator:sym<sub>"
    push $P5004, "routine_declarator:sym<method>"
    push $P5004, "routine_def"
    push $P5004, "method_def"
    push $P5004, "onlystar"
    push $P5004, "multi_declarator"
    push $P5004, "multi_declarator:sym<multi>"
    push $P5004, "multi_declarator:sym<proto>"
    push $P5004, "multi_declarator:sym<null>"
    push $P5004, "signature"
    push $P5004, "parameter"
    push $P5004, "param_var"
    push $P5004, "named_param"
    push $P5004, "default_value"
    push $P5004, "trait"
    push $P5004, "trait_mod"
    push $P5004, "trait_mod:sym<is>"
    push $P5004, "regex_declarator"
    push $P5004, "dotty"
    push $P5004, "term:sym<self>"
    push $P5004, "term:sym<identifier>"
    push $P5004, "term:sym<name>"
    push $P5004, "term:sym<pir::op>"
    push $P5004, "term:sym<pir::const>"
    push $P5004, "term:sym<nqp::op>"
    push $P5004, "term:sym<onlystar>"
    push $P5004, "args"
    push $P5004, "arglist"
    push $P5004, "term:sym<value>"
    push $P5004, "value"
    push $P5004, "number"
    push $P5004, "quote"
    push $P5004, "quote:sym<apos>"
    push $P5004, "quote:sym<dblq>"
    push $P5004, "quote:sym<q>"
    push $P5004, "quote:sym<qq>"
    push $P5004, "quote:sym<Q>"
    push $P5004, "quote:sym<Q:PIR>"
    push $P5004, "quote:sym</ />"
    push $P5004, "quote_escape:sym<$>"
    push $P5004, "quote_escape:sym<{ }>"
    push $P5004, "circumfix:sym<( )>"
    push $P5004, "circumfix:sym<[ ]>"
    push $P5004, "circumfix:sym<ang>"
    push $P5004, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5004, "circumfix:sym<{ }>"
    push $P5004, "semilist"
    push $P5004, "infixstopper"
    push $P5004, "postcircumfix:sym<[ ]>"
    push $P5004, "postcircumfix:sym<{ }>"
    push $P5004, "postcircumfix:sym<ang>"
    push $P5004, "postcircumfix:sym<( )>"
    push $P5004, "postfix:sym<.>"
    push $P5004, "prefix:sym<++>"
    push $P5004, "prefix:sym<-->"
    push $P5004, "postfix:sym<++>"
    push $P5004, "postfix:sym<-->"
    push $P5004, "infix:sym<**>"
    push $P5004, "prefix:sym<+>"
    push $P5004, "prefix:sym<~>"
    push $P5004, "prefix:sym<->"
    push $P5004, "prefix:sym<?>"
    push $P5004, "prefix:sym<!>"
    push $P5004, "prefix:sym<|>"
    push $P5004, "infix:sym<*>"
    push $P5004, "infix:sym</>"
    push $P5004, "infix:sym<%>"
    push $P5004, "infix:sym<+&>"
    push $P5004, "infix:sym<+>"
    push $P5004, "infix:sym<->"
    push $P5004, "infix:sym<+|>"
    push $P5004, "infix:sym<+^>"
    push $P5004, "infix:sym<~>"
    push $P5004, "infix:sym<==>"
    push $P5004, "infix:sym<!=>"
    push $P5004, "infix:sym<<=>"
    push $P5004, "infix:sym<>=>"
    push $P5004, "infix:sym<<>"
    push $P5004, "infix:sym<>>"
    push $P5004, "infix:sym<eq>"
    push $P5004, "infix:sym<ne>"
    push $P5004, "infix:sym<le>"
    push $P5004, "infix:sym<ge>"
    push $P5004, "infix:sym<lt>"
    push $P5004, "infix:sym<gt>"
    push $P5004, "infix:sym<=:=>"
    push $P5004, "infix:sym<~~>"
    push $P5004, "infix:sym<&&>"
    push $P5004, "infix:sym<||>"
    push $P5004, "infix:sym<//>"
    push $P5004, "infix:sym<?? !!>"
    push $P5004, "infix:sym<=>"
    push $P5004, "infix:sym<:=>"
    push $P5004, "infix:sym<::=>"
    push $P5004, "infix:sym<,>"
    push $P5004, "prefix:sym<return>"
    push $P5004, "prefix:sym<make>"
    push $P5004, "term:sym<last>"
    push $P5004, "term:sym<next>"
    push $P5004, "term:sym<redo>"
    push $P5004, "smartmatch"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "C2CD81D83DF37D8B79F9D773DC26EB5ED1B4DAE5-1360232764.769"
    push $P5004, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "arg"
    push $P5004, "nibbler"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "metachar:sym<:my>"
    push $P5004, "metachar:sym<{ }>"
    push $P5004, "metachar:sym<nqpvar>"
    push $P5004, "assertion:sym<{ }>"
    push $P5004, "assertion:sym<?{ }>"
    push $P5004, "assertion:sym<var>"
    push $P5004, "codeblock"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "alt_nfa__1_1360232769.919"
    push $P5004, "alt_nfa__2_1360232769.935"
    push $P5004, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5004, "alt_nfa__4_1360232769.953"
    push $P5004, "alt_nfa__3_1360232769.945"
    push $P5004, "alt_nfa__6_1360232770.032"
    push $P5004, "alt_nfa__5_1360232770.02"
    push $P5004, "alt_nfa__7_1360232770.121"
    push $P5004, "alt_nfa__9_1360232770.14"
    push $P5004, "alt_nfa__8_1360232770.127"
    push $P5004, "{"
    push $P5004, "alt_nfa__10_1360232770.166"
    push $P5004, "alt_nfa__11_1360232770.172"
    push $P5004, ";"
    push $P5004, "}"
    push $P5004, "sym"
    push $P5004, "else"
    push $P5004, "alt_nfa__12_1360232770.269"
    push $P5004, "wu"
    push $P5004, "alt_nfa__13_1360232770.289"
    push $P5004, "alt_nfa__14_1360232770.289"
    push $P5004, "alt_nfa__15_1360232770.29"
    push $P5004, "alt_nfa__16_1360232770.338"
    push $P5004, "cond"
    push $P5004, "alt_nfa__17_1360232770.408"
    push $P5004, "alt_nfa__18_1360232770.416"
    push $P5004, "key"
    push $P5004, "val"
    push $P5004, "not"
    push $P5004, "alt_nfa__19_1360232770.454"
    push $P5004, "desigilname"
    push $P5004, "<"
    push $P5004, "/_!"
    push $P5004, "alt_nfa__20_1360232770.472"
    push $P5004, "metaclass"
    push $P5004, "repr"
    push $P5004, "export"
    push $P5004, "parent"
    push $P5004, "role"
    push $P5004, "alt_nfa__21_1360232770.717"
    push $P5004, "alt_nfa__22_1360232770.73"
    push $P5004, "alt_nfa__23_1360232770.876"
    push $P5004, "latename"
    push $P5004, "private"
    push $P5004, "alt_nfa__24_1360232770.91"
    push $P5004, "invocant"
    push $P5004, "alt_nfa__26_1360232770.984"
    push $P5004, "alt_nfa__25_1360232770.979"
    push $P5004, "definedness"
    push $P5004, "quant"
    push $P5004, "_DU"
    push $P5004, "alt_nfa__27_1360232771.009"
    push $P5004, "alt_nfa__28_1360232771.01"
    push $P5004, "alt_nfa__29_1360232771.01"
    push $P5004, "/!"
    push $P5004, "alt_nfa__30_1360232771.02"
    push $P5004, "longname"
    push $P5004, "proto"
    push $P5004, "p6regex"
    push $P5004, "alt_nfa__31_1360232771.132"
    push $P5004, "alt_nfa__32_1360232771.132"
    push $P5004, "alt_nfa__33_1360232771.133"
    push $P5004, "'\""
    push $P5004, "("
    push $P5004, "alt_nfa__34_1360232771.156"
    push $P5004, "alt_nfa__35_1360232771.157"
    push $P5004, "op"
    push $P5004, "const"
    push $P5004, "alt_nfa__36_1360232771.226"
    push $P5004, "alt_nfa__37_1360232771.235"
    push $P5004, "sign"
    push $P5004, "alt_nfa__38_1360232771.245"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "$"
    push $P5004, utf8:"\x{ab}"
    push $P5004, "OPER"
    push $P5004, ">"
    push $P5004, "}/"
    push $P5004, "var"
    push $P5004, "alt_nfa__39_1360232772.004"
    push $P5004, "alt_nfa__40_1360232772.026"
    push $P5004, "alt_nfa__41_1360232772.038"
    push $P5004, "zw"
    push $P5004, "?!"
    push $P5004, "alt_nfa__42_1360232772.069"
    push $P5004, "$@"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "5B238366E69846B41C75C202885BB967F7243DAC-1360232736.738"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "NQP::World"
    push $P5004, "NQP::Grammar"
    push $P5004, "alt_nfa__1_1360232747.921"
    push $P5004, "alt_nfa__2_1360232747.95"
    push $P5004, "alt_nfa__3_1360232748.021"
    push $P5004, "alt_nfa__4_1360232748.022"
    push $P5004, "alt_nfa__5_1360232748.04"
    push $P5004, "alt_nfa__6_1360232748.111"
    push $P5004, "alt_nfa__7_1360232748.123"
    push $P5004, "alt_nfa__8_1360232748.159"
    push $P5004, "alt_nfa__9_1360232748.196"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "NQP::Regex"
    push $P5004, "alt_nfa__1_1360232764.892"
    push $P5004, "alt_nfa__2_1360232764.898"
    push $P5004, "alt_nfa__3_1360232764.921"
    push $P5004, "alt_nfa__4_1360232764.985"
    push $P5004, "alt_nfa__5_1360232765.002"
    push $P5004, "alt_nfa__6_1360232765.056"
    push $P5004, "alt_nfa__7_1360232765.081"
    push $P5004, "alt_nfa__8_1360232765.101"
    push $P5004, "alt_nfa__9_1360232765.17"
    push $P5004, "alt_nfa__10_1360232765.244"
    push $P5004, "alt_nfa__11_1360232765.251"
    push $P5004, "alt_nfa__12_1360232765.331"
    push $P5004, "alt_nfa__13_1360232765.39"
    push $P5004, "alt_nfa__14_1360232765.403"
    push $P5004, "alt_nfa__15_1360232765.473"
    push $P5004, "alt_nfa__16_1360232765.484"
    push $P5004, "alt_nfa__17_1360232765.516"
    push $P5004, "alt_nfa__18_1360232765.524"
    push $P5004, "alt_nfa__19_1360232765.585"
    push $P5004, "alt_nfa__20_1360232765.585"
    push $P5004, "alt_nfa__21_1360232765.585"
    push $P5004, "alt_nfa__23_1360232765.615"
    push $P5004, "alt_nfa__24_1360232765.616"
    push $P5004, "alt_nfa__22_1360232765.593"
    push $P5004, "NQP::Actions"
    push $P5004, "NQP::RegexActions"
    push $P5004, "NQP::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "2A5BD8D2F017911EBF2A5D1B91B7A8E3733D2938-1360232742.29"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "01A3C8E46D57D2D364E33140146691A8C18F7564-1360232752.776"
    push $P5004, "src\\stage2\\QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "RegexActions"
    push $P5004, "$@%&"
    push $P5004, "*!?"
    push $P5004, "Ee"
    push $P5004, "01"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "xX"
    push $P5004, "cC"
    push $P5004, "&|~"
    .const 'Sub' $P5005 = 'cuid_494_1360232768.755' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1761_end5755 
    die "Repossession conflicts occurred during deserialization"
  if1761_end5755:
    .const "LexInfo" $P5001 = "cuid_367_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_367_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_367_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_367_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_367_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_367_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_2_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 34
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_370_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_370_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_370_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_370_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_32_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 225
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_387_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 35
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_387_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_387_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 35
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_387_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_222_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_223_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 228
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_224_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_225_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_227_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_230_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_233_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 246
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_406_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 226
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_406_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_406_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 226
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_406_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_242_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_243_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_244_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_245_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 355
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 356
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 357
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 358
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_416_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 247
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_416_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_416_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 247
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_416_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_353_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 360
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 361
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 362
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 363
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_357_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 364
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 365
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 366
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 367
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 368
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 369
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 370
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 371
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1360232768.755" 
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 372
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_489_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 359
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_489_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_489_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 359
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_489_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_493_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 373
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_493_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_493_1360232768.755"
    nqp_get_sc_object $P5002, "58F539F8A90ED2A55E051526D0D78C51D804AE57-1360232768.783", 373
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_493_1360232768.755"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_494_1360232768.755") :anon :lex :outer("cuid_495_1360232768.755")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_223_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_224_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_230_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_233_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1360232768.755" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1360232768.755" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_496_1360232768.755") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_367_1360232768.755" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_497_1360232768.755") :main
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_367_1360232768.755" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end