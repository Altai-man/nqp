.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("368_1338064451.944")
    .param pmc param_1002 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P4004 = "848_1338064451.944" 
    capture_lex $P4004
    .const 'Sub' $P3995 = "846_1338064451.944" 
    capture_lex $P3995
    .const 'Sub' $P3958 = "845_1338064451.944" 
    capture_lex $P3958
    .const 'Sub' $P2733 = "786_1338064451.944" 
    capture_lex $P2733
    .const 'Sub' $P2629 = "749_1338064451.944" 
    capture_lex $P2629
    .const 'Sub' $P1447 = "398_1338064451.944" 
    capture_lex $P1447
    .const 'Sub' $P1036 = "372_1338064451.944" 
    capture_lex $P1036
    .const 'Sub' $P1030 = "371_1338064451.944" 
    capture_lex $P1030
    .const 'Sub' $P1006 = "369_1338064451.944" 
    capture_lex $P1006
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 2911
    .const 'Sub' $P1006 = "369_1338064451.944" 
    newclosure $P1028, $P1006
    set $P1005, $P1028
    .lex "MAIN", $P1005
.annotate 'line', 2942
    .const 'Sub' $P1030 = "371_1338064451.944" 
    newclosure $P1034, $P1030
    set $P1029, $P1034
    .lex "hll-config", $P1029
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 7
    .const 'Sub' $P1036 = "372_1338064451.944" 
    capture_lex $P1036
    $P1036()
.annotate 'line', 632
    .const 'Sub' $P1447 = "398_1338064451.944" 
    capture_lex $P1447
    $P1447()
.annotate 'line', 1374
    .const 'Sub' $P2629 = "749_1338064451.944" 
    capture_lex $P2629
    $P2629()
.annotate 'line', 1420
    .const 'Sub' $P2733 = "786_1338064451.944" 
    capture_lex $P2733
    $P2733()
.annotate 'line', 2853
    .const 'Sub' $P3958 = "845_1338064451.944" 
    capture_lex $P3958
    $P3958()
.annotate 'line', 2908
    .const 'Sub' $P3995 = "846_1338064451.944" 
    capture_lex $P3995
    $P3995()
.annotate 'line', 1
    set $P103, $P1005
    set $P103, $P1029
    set $P104, param_1002
    if $P104, if_3998
    set $P103, $P104
    goto if_3998_end
  if_3998:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P105, "ModuleLoader"
    getinterp $P106
    set $P107, $P106["context"]
    $P105."set_mainline_module"($P107)
    .const '' $P3999 = "369_1338064451.944" 
    set $P108, param_1002
    $P109 = $P3999($P108 :flat)
    set $P103, $P109
  if_3998_end:
    .return ($P103)
    .const 'Sub' $P4001 = "847_1338064451.944" 
    .return ($P4001)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post849") :outer("368_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "368_1338064451.944" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P111
    get_class $P112, "LexPad"
    get_class $P113, "NQPLexPad"
    $P111."hll_map"($P112, $P113)
    nqp_create_sc $P114, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867"
    .local pmc cur_sc
    set cur_sc, $P114
    cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P116 = $P115."load_setting"("NQPCORE")
    block."set_outer_ctx"($P116)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("NQPP6QRegex")
    set $S100, "AQAAAEAAAAAHAAAAeAAAAAwAAADYAAAARj0AAHMBAAB2VAAAzn8AAAAAAADOfwAAAAAAAM5/AADOfwAAAAAAAAQAAAAFAAAADwAAABAAAAAVAAAAFgAAAKcBAACoAQAAjwMAAAAAAACRAwAAkgMAAPwEAAD9BAAAAQAAAAAAAAANAAAAGAEAAFUAAAD6BQAAgQEAAK4XAABNAgAAHCQAAOgCAABYLQAATwMAANIzAADxBAAAcDgAAPQEAAAmOQAA+gQAAAY6AAAABQAAyjoAAA8FAACqOwAAAAAAAF4BAAAAAAAAAAAAAAoACQAAAAIAAAACAAAAAABfAQAAAwAAAAIAAQAAABcAAAAGAAAAAgABAAAAPgAAAAcAAAACAAEAAABMAAAACAAAAAIAAQAAAFIAAAAJAAAAAgABAAAAVwAAAAoAAAACAAAAAABgAQAACwAAAAIAAAAAAGEBAAAMAAAAAgAAAAAAYgEAAAoAAAAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAAAAAAAABAAAAAAAAAAIAAAAAAAAAAAADAAAAAABjAQAAAAAAAAEAAAAKAAAAAAAKADcAAAAOAAAAAgACAAAACAAAABEAAAACAAIAAAAJAAAAEgAAAAIAAgAAAAoAAAATAAAAAgACAAAACwAAABQAAAACAAMAAACdAAAAFwAAAAIAAgAAAA0AAAAYAAAAAgACAAAAEAAAABkAAAACAAIAAAASAAAAGgAAAAIAAgAAABMAAAAbAAAAAgADAAAAngAAABwAAAACAAMAAACfAAAAHQAAAAIAAwAAAKAAAAAeAAAAAgADAAAAoQAAAB8AAAACAAMAAACiAAAAIAAAAAIAAwAAAKMAAAAhAAAAAgADAAAApAAAACIAAAACAAMAAAClAAAAIwAAAAIAAwAAAKYAAAAkAAAAAgADAAAApwAAACUAAAACAAMAAACoAAAAJgAAAAIAAwAAAKkAAAAnAAAAAgADAAAAqgAAACgAAAACAAMAAACrAAAAKQAAAAIAAwAAAKwAAAAqAAAAAgADAAAArQAAACsAAAACAAMAAACuAAAALAAAAAIAAwAAAK8AAAAtAAAAAgADAAAAsAAAAC4AAAACAAAAAAACAAAALwAAAAIAAAAAAAMAAAAwAAAAAgAAAAAABAAAADEAAAACAAAAAAAFAAAAMgAAAAIAAAAAAAYAAAAzAAAAAgAAAAAABwAAADQAAAACAAAAAAAIAAAANQAAAAIAAAAAAAkAAAA2AAAAAgAAAAAACgAAADcAAAACAAAAAAAOAAAAOAAAAAIAAAAAAA8AAAA5AAAAAgAAAAAAEAAAADoAAAACAAAAAAARAAAAOwAAAAIAAAAAABIAAAA8AAAAAgAAAAAAEwAAAD0AAAACAAAAAAAUAAAAPgAAAAIAAAAAABUAAAA/AAAAAgAAAAAAFgAAAEAAAAACAAAAAAAXAAAAQQAAAAIAAAAAABgAAABCAAAAAgAAAAAAGQAAAEMAAAACAAAAAAAaAAAARAAAAAIAAAAAABsAAABFAAAAAgAAAAAAHAAAAEYAAAACAAAAAAAdAAAARwAAAAIAAAAAAB4AAABIAAAAAgAAAAAAHwAAAAAAAAAAAAAAAwAAAAAAAAACAAAAAAABAAAAAgADAAAAnAAAAAIAAgAAAAcAAAAEAAAAAAAAAAEAAAAAAAAABQAAAAAAAAADAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAAAAAAAADAAAAAAAAAAIAAgAAAAcAAAADAAIAAwAAAJwAAAAKAAgAAABJAAAABAAAAAAAAAAAAEoAAAAEAAEAAAAAAAAASwAAAAQAAgAAAAAAAABMAAAABAADAAAAAAAAAE0AAAAEAAQAAAAAAAAATgAAAAQABQAAAAAAAABPAAAABAAGAAAAAAAAAFAAAAAEAAcAAAAAAAAAAgAAAAAAAQAAAAoABAAAAFEAAAAEAAgAAAAAAAAAUgAAAAQACQAAAAAAAABTAAAABAAKAAAAAAAAAFQAAAAEAAsAAAAAAAAAAAAAAGQBAAAAAAAAIAAAAAoAAAAAAAoAIQEAAFYAAAACAAIAAAAIAAAAVwAAAAIAAgAAAAkAAABYAAAAAgACAAAACgAAAFkAAAACAAIAAAALAAAAWgAAAAIAAgAAAAwAAABbAAAAAgACAAAADQAAAFwAAAACAAIAAAAQAAAAXQAAAAIAAgAAABIAAABeAAAAAgACAAAAEwAAAF8AAAACAAEAAABNAAAAYAAAAAIAAQAAAE4AAABhAAAAAgABAAAATwAAAGIAAAACAAEAAABQAAAAYwAAAAIAAQAAAFEAAABkAAAAAgABAAAAYQAAAGUAAAACAAEAAABiAAAAZgAAAAIAAQAAAGMAAABnAAAAAgABAAAAZAAAAGgAAAACAAEAAABlAAAAaQAAAAIAAQAAAGYAAABqAAAAAgABAAAAZwAAAGsAAAACAAEAAABoAAAAbAAAAAIAAQAAAGkAAABtAAAAAgABAAAAagAAAG4AAAACAAEAAABrAAAAbwAAAAIAAQAAAGwAAABwAAAAAgABAAAAbQAAAHEAAAACAAEAAABuAAAAcgAAAAIAAQAAAG8AAABzAAAAAgABAAAAcAAAAHQAAAACAAEAAABxAAAAdQAAAAIAAQAAAHIAAAB2AAAAAgABAAAAcwAAAHcAAAACAAEAAAB0AAAAeAAAAAIAAQAAAHUAAAB5AAAAAgABAAAAdgAAAHoAAAACAAAAAAAmAAAAewAAAAIAAQAAAHgAAAB8AAAAAgABAAAAeQAAAH0AAAACAAEAAAB6AAAAfgAAAAIAAQAAAHsAAAB/AAAAAgABAAAAfAAAAIAAAAACAAEAAAB9AAAAgQAAAAIAAQAAAH4AAACCAAAAAgABAAAAfwAAAIMAAAACAAEAAACAAAAAhAAAAAIAAQAAAIEAAACFAAAAAgABAAAAggAAAIYAAAACAAEAAACDAAAAhwAAAAIAAQAAAIQAAACIAAAAAgABAAAAhQAAAIkAAAACAAMAAAACAAAAigAAAAIAAwAAAAMAAACLAAAAAgADAAAABAAAAIwAAAACAAMAAAAFAAAAjQAAAAIAAwAAAAYAAACOAAAAAgADAAAABwAAAI8AAAACAAMAAAAIAAAAkAAAAAIAAwAAAAkAAACRAAAAAgAAAAAAoQAAAJIAAAACAAMAAAALAAAAkwAAAAIAAwAAAAwAAACUAAAAAgADAAAADQAAAJUAAAACAAMAAAAOAAAAlgAAAAIAAwAAAA8AAACXAAAAAgADAAAAEAAAAJgAAAACAAMAAAARAAAAmQAAAAIAAwAAABIAAACaAAAAAgADAAAAEwAAAJsAAAACAAMAAAAUAAAAnAAAAAIAAwAAABUAAACdAAAAAgADAAAAFgAAAJ4AAAACAAMAAAAXAAAAnwAAAAIAAwAAABgAAACgAAAAAgADAAAAGQAAAKEAAAACAAMAAAAaAAAAogAAAAIAAwAAABsAAACjAAAAAgADAAAAHAAAAKQAAAACAAMAAAAdAAAApQAAAAIAAwAAAB4AAACmAAAAAgADAAAAHwAAAKcAAAACAAMAAAAgAAAAqAAAAAIAAwAAACEAAACpAAAAAgADAAAAIgAAAKoAAAACAAMAAAAjAAAAqwAAAAIAAwAAACQAAACsAAAAAgAAAAAAmQAAAK0AAAACAAMAAAAmAAAArgAAAAIAAwAAACcAAACvAAAAAgADAAAAKAAAALAAAAACAAMAAAApAAAAsQAAAAIAAwAAACoAAACyAAAAAgADAAAAKwAAALMAAAACAAMAAAAsAAAAtAAAAAIAAwAAAC0AAAC1AAAAAgADAAAALgAAALYAAAACAAMAAAAvAAAAtwAAAAIAAwAAADAAAAC4AAAAAgADAAAAMQAAALkAAAACAAMAAAAyAAAAugAAAAIAAwAAADMAAAC7AAAAAgADAAAANAAAALwAAAACAAMAAAA1AAAAvQAAAAIAAwAAADYAAAC+AAAAAgADAAAANwAAAL8AAAACAAMAAAA4AAAAwAAAAAIAAwAAADkAAADBAAAAAgADAAAAOgAAAMIAAAACAAMAAAA7AAAAwwAAAAIAAAAAACEAAADEAAAAAgAAAAAAIgAAAMUAAAACAAAAAAAjAAAAxgAAAAIAAAAAACQAAADHAAAAAgAAAAAAJQAAAMgAAAACAAAAAAAnAAAAyQAAAAIAAAAAACgAAADKAAAAAgAAAAAAKQAAAMsAAAACAAAAAAAqAAAAzAAAAAIAAAAAACsAAADNAAAAAgAAAAAALAAAAM4AAAACAAAAAAAtAAAAzwAAAAIAAAAAAC4AAADQAAAAAgAAAAAALwAAANEAAAACAAAAAAAwAAAA0gAAAAIAAAAAADEAAADTAAAAAgAAAAAAMgAAANQAAAACAAAAAAAzAAAA1QAAAAIAAAAAADQAAADWAAAAAgAAAAAANQAAANcAAAACAAAAAAA2AAAA2AAAAAIAAAAAADcAAADZAAAAAgAAAAAAOAAAANoAAAACAAAAAAA5AAAA2wAAAAIAAAAAADoAAADcAAAAAgAAAAAAOwAAAN0AAAACAAAAAAA8AAAA3gAAAAIAAAAAAD0AAADfAAAAAgAAAAAAPgAAAOAAAAACAAAAAAA/AAAA4QAAAAIAAAAAAEAAAADiAAAAAgAAAAAAQQAAAOMAAAACAAAAAABCAAAA5AAAAAIAAAAAAEMAAADlAAAAAgAAAAAARAAAAOYAAAACAAAAAABFAAAA5wAAAAIAAAAAAEYAAADoAAAAAgAAAAAARwAAAOkAAAACAAAAAABIAAAA6gAAAAIAAAAAAEkAAADrAAAAAgAAAAAASgAAAOwAAAACAAAAAABLAAAA7QAAAAIAAAAAAEwAAADuAAAAAgAAAAAATQAAAO8AAAACAAAAAABOAAAA8AAAAAIAAAAAAE8AAADxAAAAAgAAAAAAUAAAAPIAAAACAAAAAABRAAAA8wAAAAIAAAAAAFIAAAD0AAAAAgAAAAAAUwAAAPUAAAACAAAAAABUAAAA9gAAAAIAAAAAAFUAAAD3AAAAAgAAAAAAVgAAAPgAAAACAAAAAABXAAAA+QAAAAIAAAAAAFgAAAD6AAAAAgAAAAAAWQAAAPsAAAACAAAAAABaAAAA/AAAAAIAAAAAAFsAAAD9AAAAAgAAAAAAXAAAAP4AAAACAAAAAABdAAAA/wAAAAIAAAAAAF4AAAAAAQAAAgAAAAAAXwAAAAEBAAACAAAAAABgAAAAAgEAAAIAAAAAAGEAAAADAQAAAgAAAAAAYgAAAAQBAAACAAAAAABjAAAABQEAAAIAAAAAAGQAAAAGAQAAAgAAAAAAZQAAAAcBAAACAAAAAABmAAAACAEAAAIAAAAAAGcAAAAJAQAAAgAAAAAAaAAAAAoBAAACAAAAAABpAAAACwEAAAIAAAAAAGoAAAAMAQAAAgAAAAAAawAAAA0BAAACAAAAAABsAAAADgEAAAIAAAAAAG0AAAAPAQAAAgAAAAAAbgAAABABAAACAAAAAABvAAAAEQEAAAIAAAAAAHAAAAASAQAAAgAAAAAAcQAAABMBAAACAAAAAAByAAAAFAEAAAIAAAAAAHMAAAAVAQAAAgAAAAAAdAAAABYBAAACAAAAAAB1AAAAFwEAAAIAAAAAAHYAAAAYAQAAAgAAAAAAdwAAABkBAAACAAAAAAB4AAAAGgEAAAIAAAAAAHkAAAAbAQAAAgAAAAAAegAAABwBAAACAAAAAAB7AAAAHQEAAAIAAAAAAHwAAAAeAQAAAgAAAAAAfQAAAB8BAAACAAAAAAB+AAAAIAEAAAIAAAAAAH8AAAAhAQAAAgAAAAAAgAAAACIBAAACAAAAAACBAAAAIwEAAAIAAAAAAIIAAAAkAQAAAgAAAAAAgwAAACUBAAACAAAAAACEAAAAJgEAAAIAAAAAAIUAAAAnAQAAAgAAAAAAhgAAACgBAAACAAAAAACHAAAAKQEAAAIAAAAAAIgAAAAqAQAAAgAAAAAAiQAAACsBAAACAAAAAACKAAAALAEAAAIAAAAAAIsAAAAtAQAAAgAAAAAAjAAAAC4BAAACAAAAAACNAAAALwEAAAIAAAAAAI4AAAAwAQAAAgAAAAAAjwAAADEBAAACAAAAAACQAAAAMgEAAAIAAAAAAJEAAAAzAQAAAgAAAAAAkgAAADQBAAACAAAAAACTAAAANQEAAAIAAAAAAJQAAAA2AQAAAgAAAAAAlQAAADcBAAACAAAAAACWAAAAOAEAAAIAAAAAAJcAAAA5AQAAAgAAAAAAmAAAADoBAAACAAAAAACaAAAAOwEAAAIAAAAAAJsAAAA8AQAAAgAAAAAAnAAAAD0BAAACAAAAAACdAAAAPgEAAAIAAAAAAJ4AAAA/AQAAAgAAAAAAnwAAAEABAAACAAAAAACgAAAAQQEAAAIAAAAAAKIAAABCAQAAAgAAAAAAowAAAEMBAAACAAAAAACkAAAARAEAAAIAAAAAAKUAAABFAQAAAgAAAAAApgAAAEYBAAACAAAAAACnAAAARwEAAAIAAAAAAKgAAABIAQAAAgAAAAAAqQAAAEkBAAACAAAAAACqAAAASgEAAAIAAAAAAKsAAABLAQAAAgAAAAAArAAAAEwBAAACAAAAAACtAAAATQEAAAIAAAAAAK4AAABOAQAAAgAAAAAArwAAAE8BAAACAAAAAACwAAAAUAEAAAIAAAAAALEAAABRAQAAAgAAAAAAsgAAAFIBAAACAAAAAACzAAAAUwEAAAIAAAAAALQAAABUAQAAAgAAAAAAtQAAAFUBAAACAAAAAAC2AAAAVgEAAAIAAAAAALcAAABXAQAAAgAAAAAAuAAAAFgBAAACAAAAAAC5AAAAWQEAAAIAAAAAALoAAABaAQAAAgAAAAAAuwAAAFsBAAACAAAAAAC8AAAAXAEAAAIAAAAAAL0AAABdAQAAAgAAAAAAvgAAAF4BAAACAAAAAAC/AAAAXwEAAAIAAAAAAMAAAABgAQAAAgAAAAAAwQAAAGEBAAACAAAAAADCAAAAYgEAAAIAAAAAAMMAAABjAQAAAgAAAAAAxAAAAGQBAAACAAAAAADFAAAAZQEAAAIAAAAAAMYAAABmAQAAAgAAAAAAxwAAAGcBAAACAAAAAADIAAAAaAEAAAIAAAAAAMkAAABpAQAAAgAAAAAAygAAAGoBAAACAAAAAADLAAAAawEAAAIAAAAAAMwAAABsAQAAAgAAAAAAzQAAAG0BAAACAAAAAADOAAAAbgEAAAIAAAAAAM8AAABvAQAAAgAAAAAA0AAAAHABAAACAAAAAADRAAAAcQEAAAIAAAAAANIAAAByAQAAAgAAAAAA0wAAAHMBAAACAAAAAADUAAAAdAEAAAIAAAAAANUAAAB1AQAAAgAAAAAA1gAAAHYBAAACAAAAAADXAAAAAAAAAAAAAAAEAAAAAAAAAAIAAAAAACAAAAACAAMAAAABAAAAAgABAAAATAAAAAIAAgAAAAcAAAAEAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAACAAEAAABOAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAACAAAABAAAAAEAAAAAAAAAAgAAAAIAAAABAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAABAAAAAAAAAACAAIAAAAHAAAAAwACAAEAAABMAAAACgAKAAAAdwEAAAQAAAAAAAAAAAB4AQAABAABAAAAAAAAAHkBAAAEAAIAAAAAAAAAegEAAAQAAwAAAAAAAAB7AQAABAAEAAAAAAAAAHwBAAAEAAUAAAAAAAAAfQEAAAQABgAAAAAAAAB+AQAABAAHAAAAAAAAAH8BAAAEAAgAAAAAAAAAgAEAAAQACQAAAAAAAAACAAMAAAABAAAAAwACAAAAAAAgAAAAAwAAAAAAZQEAAAAAAADYAAAACgAAAAAACgC/AAAAggEAAAIAAgAAAAgAAACDAQAAAgACAAAACQAAAIQBAAACAAIAAAAKAAAAhQEAAAIAAgAAAAsAAACGAQAAAgACAAAADAAAAIcBAAACAAIAAAANAAAAiAEAAAIAAgAAABAAAACJAQAAAgACAAAAEgAAAIoBAAACAAIAAAATAAAAiwEAAAIAAQAAAE0AAACMAQAAAgABAAAATgAAAI0BAAACAAEAAABPAAAAjgEAAAIAAQAAAFAAAACPAQAAAgABAAAAUQAAAJABAAACAAEAAABhAAAAkQEAAAIAAQAAAGIAAACSAQAAAgABAAAAYwAAAJMBAAACAAEAAABkAAAAlAEAAAIAAQAAAGUAAACVAQAAAgABAAAAZgAAAJYBAAACAAEAAABnAAAAlwEAAAIAAQAAAGgAAACYAQAAAgABAAAAaQAAAJkBAAACAAEAAABqAAAAmgEAAAIAAQAAAGsAAACbAQAAAgABAAAAbAAAAJwBAAACAAEAAABtAAAAnQEAAAIAAQAAAG4AAACeAQAAAgABAAAAbwAAAJ8BAAACAAEAAABwAAAAoAEAAAIAAQAAAHEAAAChAQAAAgABAAAAcgAAAKIBAAACAAEAAABzAAAAowEAAAIAAQAAAHQAAACkAQAAAgABAAAAdQAAAKUBAAACAAEAAAB2AAAApgEAAAIABAAAAAMAAACpAQAAAgABAAAAeAAAAKoBAAACAAEAAAB5AAAAqwEAAAIAAQAAAHoAAACsAQAAAgABAAAAewAAAK0BAAACAAEAAAB8AAAArgEAAAIAAQAAAH0AAACvAQAAAgABAAAAfgAAALABAAACAAEAAAB/AAAAsQEAAAIAAQAAAIAAAACyAQAAAgABAAAAgQAAALMBAAACAAEAAACCAAAAtAEAAAIAAQAAAIMAAAC1AQAAAgABAAAAhAAAALYBAAACAAEAAACFAAAAtwEAAAIABAAAAA4AAAC4AQAAAgADAAAAAwAAALkBAAACAAMAAAAEAAAAugEAAAIAAwAAAAUAAAC7AQAAAgADAAAABgAAALwBAAACAAMAAAAHAAAAvQEAAAIAAwAAAAgAAAC+AQAAAgADAAAACQAAAL8BAAACAAMAAAAKAAAAwAEAAAIAAwAAAAsAAADBAQAAAgADAAAADAAAAMIBAAACAAMAAAANAAAAwwEAAAIAAwAAAA4AAADEAQAAAgADAAAADwAAAMUBAAACAAMAAAAQAAAAxgEAAAIAAwAAABEAAADHAQAAAgADAAAAEgAAAMgBAAACAAMAAAATAAAAyQEAAAIAAwAAABQAAADKAQAAAgADAAAAFQAAAMsBAAACAAMAAAAWAAAAzAEAAAIAAwAAABcAAADNAQAAAgADAAAAGAAAAM4BAAACAAMAAAAZAAAAzwEAAAIAAwAAABoAAADQAQAAAgADAAAAGwAAANEBAAACAAMAAAAcAAAA0gEAAAIAAwAAAB0AAADTAQAAAgADAAAAHgAAANQBAAACAAMAAAAfAAAA1QEAAAIAAwAAACAAAADWAQAAAgADAAAAIQAAANcBAAACAAMAAAAiAAAA2AEAAAIAAwAAACMAAADZAQAAAgADAAAAJAAAANoBAAACAAMAAAAlAAAA2wEAAAIAAwAAACYAAADcAQAAAgADAAAAJwAAAN0BAAACAAMAAAAoAAAA3gEAAAIAAwAAACkAAADfAQAAAgADAAAAKgAAAOABAAACAAMAAAArAAAA4QEAAAIAAwAAACwAAADiAQAAAgADAAAALQAAAOMBAAACAAMAAAAuAAAA5AEAAAIAAwAAAC8AAADlAQAAAgADAAAAMAAAAOYBAAACAAMAAAAxAAAA5wEAAAIAAwAAADIAAADoAQAAAgADAAAAMwAAAOkBAAACAAMAAAA0AAAA6gEAAAIAAwAAADUAAADrAQAAAgADAAAANgAAAOwBAAACAAMAAAA3AAAA7QEAAAIAAwAAADgAAADuAQAAAgADAAAAOQAAAO8BAAACAAMAAAA6AAAA8AEAAAIAAwAAADsAAADxAQAAAgAEAAAAAgAAAPIBAAACAAQAAAAEAAAA8wEAAAIABAAAAAUAAAD0AQAAAgAEAAAABgAAAPUBAAACAAQAAAAHAAAA9gEAAAIABAAAAAgAAAD3AQAAAgAEAAAACQAAAPgBAAACAAQAAAAKAAAA+QEAAAIABAAAAAsAAAD6AQAAAgAEAAAADAAAAPsBAAACAAQAAAANAAAA/AEAAAIABAAAAA8AAAD9AQAAAgAEAAAAEAAAAP4BAAACAAQAAAARAAAA/wEAAAIABAAAABIAAAAAAgAAAgAEAAAAEwAAAAECAAACAAQAAAAUAAAAAgIAAAIABAAAABUAAAADAgAAAgAEAAAAFgAAAAQCAAACAAQAAAAXAAAABQIAAAIABAAAABgAAAAGAgAAAgAEAAAAGQAAAAcCAAACAAQAAAAaAAAACAIAAAIABAAAABsAAAAJAgAAAgAEAAAAHAAAAAoCAAACAAQAAAAdAAAACwIAAAIABAAAAB4AAAAMAgAAAgAEAAAAHwAAAA0CAAACAAQAAAAgAAAADgIAAAIABAAAACEAAAAPAgAAAgAEAAAAIgAAABACAAACAAQAAAAjAAAAEQIAAAIABAAAACQAAAASAgAAAgAEAAAAJQAAABMCAAACAAQAAAAmAAAAFAIAAAIABAAAACcAAAAVAgAAAgAEAAAAKAAAABYCAAACAAQAAAApAAAAFwIAAAIABAAAACoAAAAYAgAAAgAEAAAAKwAAABkCAAACAAQAAAAsAAAAGgIAAAIABAAAAC0AAAAbAgAAAgAEAAAALgAAABwCAAACAAQAAAAvAAAAHQIAAAIABAAAADAAAAAeAgAAAgAEAAAAMQAAAB8CAAACAAQAAAAyAAAAIAIAAAIABAAAADMAAAAhAgAAAgAEAAAANAAAACICAAACAAQAAAA1AAAAIwIAAAIABAAAADYAAAAkAgAAAgAEAAAANwAAACUCAAACAAQAAAA4AAAAJgIAAAIABAAAADkAAAAnAgAAAgAEAAAAOgAAACgCAAACAAQAAAA7AAAAKQIAAAIABAAAADwAAAAqAgAAAgAEAAAAPQAAACsCAAACAAQAAAA+AAAALAIAAAIABAAAAD8AAAAtAgAAAgAEAAAAQAAAAC4CAAACAAQAAABBAAAALwIAAAIABAAAAEIAAAAwAgAAAgAAAAAA3QAAADECAAACAAAAAADeAAAAMgIAAAIABAAAAEUAAAAzAgAAAgAEAAAARgAAADQCAAACAAAAAADgAAAANQIAAAIABAAAAEgAAAA2AgAAAgAEAAAASQAAADcCAAACAAQAAABKAAAAOAIAAAIABAAAAEsAAAA5AgAAAgAEAAAATAAAADoCAAACAAQAAABNAAAAOwIAAAIABAAAAE4AAAA8AgAAAgAAAAAA2QAAAD0CAAACAAAAAADaAAAAPgIAAAIAAAAAANsAAAA/AgAAAgAAAAAA3AAAAEACAAACAAAAAADfAAAAQQIAAAIAAAAAAOEAAABCAgAAAgAAAAAA4gAAAAAAAAAAAAAABQAAAAAAAAACAAAAAADYAAAAAgAEAAAAAQAAAAIAAwAAAAEAAAACAAEAAABMAAAAAgACAAAABwAAAAQAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAIAAQAAAE4AAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAIAAAAEAAAAAQAAAAAAAAACAAAAAgAAAAEAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAAAAAAAAFAAAAAAAAAAIAAgAAAAcAAAADAAIAAQAAAEwAAAAKAAoAAABDAgAABAAAAAAAAAAAAEQCAAAEAAEAAAAAAAAARQIAAAQAAgAAAAAAAABGAgAABAADAAAAAAAAAEcCAAAEAAQAAAAAAAAASAIAAAQABQAAAAAAAABJAgAABAAGAAAAAAAAAEoCAAAEAAcAAAAAAAAASwIAAAQACAAAAAAAAABMAgAABAAJAAAAAAAAAAIAAwAAAAEAAAADAAIABAAAAAEAAAADAAIAAAAAANgAAAADAAAAAABmAQAAAAAAAOMAAAAKAAAAAAAKAJoAAABOAgAAAgACAAAACAAAAE8CAAACAAIAAAAJAAAAUAIAAAIAAgAAAAoAAABRAgAAAgACAAAACwAAAFICAAACAAIAAAAMAAAAUwIAAAIAAgAAAA0AAABUAgAAAgACAAAAEAAAAFUCAAACAAIAAAASAAAAVgIAAAIAAgAAABMAAABXAgAAAgADAAAAPQAAAFgCAAACAAMAAAA+AAAAWQIAAAIAAwAAAD8AAABaAgAAAgADAAAAQAAAAFsCAAACAAMAAABBAAAAXAIAAAIAAwAAAEIAAABdAgAAAgADAAAAQwAAAF4CAAACAAMAAABEAAAAXwIAAAIAAwAAAEUAAABgAgAAAgADAAAARgAAAGECAAACAAMAAABHAAAAYgIAAAIAAwAAAEgAAABjAgAAAgADAAAASQAAAGQCAAACAAMAAABKAAAAZQIAAAIAAwAAAEsAAABmAgAAAgADAAAATAAAAGcCAAACAAMAAABNAAAAaAIAAAIAAwAAAE4AAABpAgAAAgADAAAATwAAAGoCAAACAAMAAABQAAAAawIAAAIAAwAAAFEAAABsAgAAAgADAAAAUgAAAG0CAAACAAMAAABTAAAAbgIAAAIAAwAAAFQAAABvAgAAAgAAAAAATAEAAHACAAACAAMAAABWAAAAcQIAAAIAAwAAAFcAAAByAgAAAgADAAAAWAAAAHMCAAACAAMAAABZAAAAdAIAAAIAAwAAAFoAAAB1AgAAAgADAAAAWwAAAHYCAAACAAMAAABcAAAAdwIAAAIAAwAAAF0AAAB4AgAAAgAAAAAA5AAAAHkCAAACAAAAAADlAAAAegIAAAIAAAAAAOYAAAB7AgAAAgAAAAAA5wAAAHwCAAACAAAAAADoAAAAfQIAAAIAAAAAAOkAAAB+AgAAAgAAAAAA6gAAAH8CAAACAAAAAADrAAAAgAIAAAIAAAAAAOwAAACBAgAAAgAAAAAA7QAAAIICAAACAAAAAADuAAAAgwIAAAIAAAAAAO8AAACEAgAAAgAAAAAA8AAAAIUCAAACAAAAAADxAAAAhgIAAAIAAAAAAPIAAACHAgAAAgAAAAAA8wAAAIgCAAACAAAAAAD0AAAAiQIAAAIAAAAAAPUAAACKAgAAAgAAAAAA9gAAAIsCAAACAAAAAAD3AAAAjAIAAAIAAAAAAPgAAACNAgAAAgAAAAAA+QAAAI4CAAACAAAAAAD6AAAAjwIAAAIAAAAAAPsAAACQAgAAAgAAAAAA/AAAAJECAAACAAAAAAD9AAAAkgIAAAIAAAAAAP4AAACTAgAAAgAAAAAA/wAAAJQCAAACAAAAAAAAAQAAlQIAAAIAAAAAAAEBAACWAgAAAgAAAAAAAgEAAJcCAAACAAAAAAADAQAAmAIAAAIAAAAAAAQBAACZAgAAAgAAAAAABQEAAJoCAAACAAAAAAAGAQAAmwIAAAIAAAAAAAcBAACcAgAAAgAAAAAACAEAAJ0CAAACAAAAAAAJAQAAngIAAAIAAAAAAAoBAACfAgAAAgAAAAAACwEAAKACAAACAAAAAAAMAQAAoQIAAAIAAAAAAA0BAACiAgAAAgAAAAAADgEAAKMCAAACAAAAAAAPAQAApAIAAAIAAAAAABABAAClAgAAAgAAAAAAEQEAAKYCAAACAAAAAAASAQAApwIAAAIAAAAAABMBAACoAgAAAgAAAAAAFAEAAKkCAAACAAAAAAAVAQAAqgIAAAIAAAAAABYBAACrAgAAAgAAAAAAFwEAAKwCAAACAAAAAAAYAQAArQIAAAIAAAAAABkBAACuAgAAAgAAAAAAGgEAAK8CAAACAAAAAAAbAQAAsAIAAAIAAAAAABwBAACxAgAAAgAAAAAAHQEAALICAAACAAAAAAAeAQAAswIAAAIAAAAAAB8BAAC0AgAAAgAAAAAAIAEAALUCAAACAAAAAAAhAQAAtgIAAAIAAAAAACIBAAC3AgAAAgAAAAAAIwEAALgCAAACAAAAAAAkAQAAuQIAAAIAAAAAACUBAAC6AgAAAgAAAAAAJgEAALsCAAACAAAAAAAnAQAAvAIAAAIAAAAAACgBAAC9AgAAAgAAAAAAKQEAAL4CAAACAAAAAAAqAQAAvwIAAAIAAAAAACsBAADAAgAAAgAAAAAALAEAAMECAAACAAAAAAAtAQAAwgIAAAIAAAAAAC4BAADDAgAAAgAAAAAALwEAAMQCAAACAAAAAAAwAQAAxQIAAAIAAAAAADEBAADGAgAAAgAAAAAAMgEAAMcCAAACAAAAAAAzAQAAyAIAAAIAAAAAADQBAADJAgAAAgAAAAAANQEAAMoCAAACAAAAAAA2AQAAywIAAAIAAAAAADcBAADMAgAAAgAAAAAAOAEAAM0CAAACAAAAAAA5AQAAzgIAAAIAAAAAADoBAADPAgAAAgAAAAAAOwEAANACAAACAAAAAAA8AQAA0QIAAAIAAAAAAD0BAADSAgAAAgAAAAAAPgEAANMCAAACAAAAAAA/AQAA1AIAAAIAAAAAAEABAADVAgAAAgAAAAAAQQEAANYCAAACAAAAAABCAQAA1wIAAAIAAAAAAEMBAADYAgAAAgAAAAAARAEAANkCAAACAAAAAABFAQAA2gIAAAIAAAAAAEYBAADbAgAAAgAAAAAARwEAANwCAAACAAAAAABIAQAA3QIAAAIAAAAAAEkBAADeAgAAAgAAAAAASgEAAN8CAAACAAAAAABLAQAA4AIAAAIAAAAAAE0BAADhAgAAAgAAAAAATgEAAOICAAACAAAAAABPAQAA4wIAAAIAAAAAAFABAADkAgAAAgAAAAAAUQEAAOUCAAACAAAAAABSAQAA5gIAAAIAAAAAAFMBAADnAgAAAgAAAAAAVAEAAAAAAAAAAAAAAwAAAAAAAAACAAAAAADjAAAAAgADAAAAPAAAAAIAAgAAAAcAAAAEAAAAAAAAAAEAAAAAAAAABQAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAAAAAAAADAAAAAAAAAAIAAgAAAAcAAAADAAIAAwAAADwAAAADAAIAAAAAAOMAAAADAAAAAABnAQAAAAAAAFUBAAAKAAAAAAAKAGYAAADpAgAAAgACAAAACAAAAOoCAAACAAIAAAAJAAAA6wIAAAIAAgAAAAoAAADsAgAAAgACAAAACwAAAO0CAAACAAIAAAAMAAAA7gIAAAIAAgAAAA0AAADvAgAAAgACAAAAEAAAAPACAAACAAIAAAASAAAA8QIAAAIAAgAAABMAAADyAgAAAgADAAAAPQAAAPMCAAACAAMAAAA+AAAA9AIAAAIAAwAAAD8AAAD1AgAAAgADAAAAQAAAAPYCAAACAAMAAABBAAAA9wIAAAIABAAAAFYAAAD4AgAAAgADAAAAQwAAAPkCAAACAAMAAABEAAAA+gIAAAIAAwAAAEUAAAD7AgAAAgADAAAARgAAAPwCAAACAAMAAABHAAAA/QIAAAIAAwAAAEgAAAD+AgAAAgADAAAASQAAAP8CAAACAAMAAABKAAAAAAMAAAIAAwAAAEsAAAABAwAAAgADAAAATAAAAAIDAAACAAMAAABNAAAAAwMAAAIAAwAAAE4AAAAEAwAAAgADAAAATwAAAAUDAAACAAMAAABQAAAABgMAAAIAAwAAAFEAAAAHAwAAAgADAAAAUgAAAAgDAAACAAMAAABTAAAACQMAAAIAAwAAAFQAAAAKAwAAAgADAAAAVQAAAAsDAAACAAMAAABWAAAADAMAAAIAAwAAAFcAAAANAwAAAgADAAAAWAAAAA4DAAACAAMAAABZAAAADwMAAAIAAwAAAFoAAAAQAwAAAgADAAAAWwAAABEDAAACAAMAAABcAAAAEgMAAAIAAwAAAF0AAAATAwAAAgAEAAAAUAAAABQDAAACAAQAAABRAAAAFQMAAAIABAAAAFIAAAAWAwAAAgAEAAAAUwAAABcDAAACAAQAAABUAAAAGAMAAAIABAAAAFUAAAAZAwAAAgAEAAAAVwAAABoDAAACAAQAAABYAAAAGwMAAAIABAAAAFkAAAAcAwAAAgAEAAAAWgAAAB0DAAACAAQAAABbAAAAHgMAAAIABAAAAFwAAAAfAwAAAgAEAAAAXQAAACADAAACAAQAAABeAAAAIQMAAAIABAAAAF8AAAAiAwAAAgAEAAAAYAAAACMDAAACAAQAAABhAAAAJAMAAAIABAAAAGIAAAAlAwAAAgAEAAAAYwAAACYDAAACAAQAAABkAAAAJwMAAAIABAAAAGUAAAAoAwAAAgAEAAAAZgAAACkDAAACAAQAAABnAAAAKgMAAAIABAAAAGgAAAArAwAAAgAEAAAAaQAAACwDAAACAAQAAABqAAAALQMAAAIABAAAAGsAAAAuAwAAAgAEAAAAbAAAAC8DAAACAAQAAABtAAAAMAMAAAIABAAAAG4AAAAxAwAAAgAEAAAAbwAAADIDAAACAAQAAABwAAAAMwMAAAIABAAAAHEAAAA0AwAAAgAEAAAAcgAAADUDAAACAAQAAABzAAAANgMAAAIABAAAAHQAAAA3AwAAAgAEAAAAdQAAADgDAAACAAQAAAB2AAAAOQMAAAIABAAAAHcAAAA6AwAAAgAEAAAAeAAAADsDAAACAAQAAAB5AAAAPAMAAAIABAAAAHoAAAA9AwAAAgAEAAAAewAAAD4DAAACAAQAAAB8AAAAPwMAAAIABAAAAH0AAABAAwAAAgAEAAAAfgAAAEEDAAACAAQAAAB/AAAAQgMAAAIABAAAAIAAAABDAwAAAgAEAAAAgQAAAEQDAAACAAQAAACCAAAARQMAAAIABAAAAIMAAABGAwAAAgAEAAAAhAAAAEcDAAACAAQAAACFAAAASAMAAAIAAAAAAFYBAABJAwAAAgAAAAAAVwEAAEoDAAACAAAAAABYAQAASwMAAAIAAAAAAFkBAABMAwAAAgAAAAAAWgEAAE0DAAACAAAAAABbAQAATgMAAAIAAAAAAFwBAAAAAAAAAAAAAAQAAAAAAAAAAgAAAAAAVQEAAAIABAAAAE8AAAACAAMAAAA8AAAAAgACAAAABwAAAAQAAAAAAAAAAQAAAAAAAAAFAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////8AAAAAAAAAAAQAAAAAAAAAAgACAAAABwAAAAMAAgADAAAAPAAAAAMAAgAEAAAATwAAAAMAAgAAAAAAVQEAAAMAAAAAAGgBAAAAAAAAXQEAAAoAAAAAAAoANAAAAFADAAACAAIAAAAIAAAAUQMAAAIAAgAAAAkAAABSAwAAAgACAAAACgAAAFMDAAACAAIAAAALAAAAVAMAAAIAAwAAAF8AAABVAwAAAgACAAAADQAAAFYDAAACAAIAAAAQAAAAVwMAAAIAAgAAABIAAABYAwAAAgACAAAAEwAAAFkDAAACAAMAAABgAAAAWgMAAAIAAwAAAGEAAABbAwAAAgADAAAAYgAAAFwDAAACAAMAAABjAAAAXQMAAAIAAwAAAGQAAABeAwAAAgADAAAAZQAAAF8DAAACAAMAAABmAAAAYAMAAAIAAwAAAGcAAABhAwAAAgADAAAAaAAAAGIDAAACAAMAAABpAAAAYwMAAAIAAwAAAGoAAABkAwAAAgADAAAAawAAAGUDAAACAAMAAABsAAAAZgMAAAIAAwAAAG0AAABnAwAAAgADAAAAbgAAAGgDAAACAAMAAABvAAAAaQMAAAIAAwAAAHAAAABqAwAAAgADAAAAcQAAAGsDAAACAAMAAAByAAAAbAMAAAIAAwAAAHMAAABtAwAAAgADAAAAdAAAAG4DAAACAAMAAAB1AAAAbwMAAAIAAwAAAHYAAABwAwAAAgADAAAAdwAAAHEDAAACAAMAAAB4AAAAcgMAAAIAAwAAAHkAAABzAwAAAgADAAAAegAAAHQDAAACAAMAAAB7AAAAdQMAAAIAAwAAAHwAAAB2AwAAAgADAAAAfQAAAHcDAAACAAMAAAB+AAAAeAMAAAIAAwAAAH8AAAB5AwAAAgADAAAAgAAAAHoDAAACAAMAAACBAAAAewMAAAIAAwAAAIIAAAB8AwAAAgADAAAAgwAAAH0DAAACAAMAAACEAAAAfgMAAAIAAwAAAIUAAAB/AwAAAgADAAAAhgAAAIADAAACAAMAAACHAAAAgQMAAAIAAwAAAIgAAACCAwAAAgADAAAAiQAAAIMDAAACAAMAAACKAAAAAAAAAAAAAAADAAAAAAAAAAIAAAAAAF0BAAACAAMAAABeAAAAAgACAAAABwAAAAQAAAAAAAAAAQAAAAAAAAAFAAAAAAAAAAMAAAAAAAAAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAAAAAAAADAAAAAAAAAAIAAgAAAAcAAAADAAIAAwAAAF4AAAAKAAsAAACEAwAABAAAAAAAAAAAAIUDAAAEAAEAAAAAAAAAhgMAAAQAAgAAAAAAAACHAwAABAADAAAAAAAAAIgDAAAEAAQAAAAAAAAAiQMAAAQABQAAAAAAAACKAwAABAAGAAAAAAAAAIsDAAAEAAcAAAAAAAAAjAMAAAQACAAAAAAAAACNAwAABAAJAAAAAAAAAI4DAAAEAAoAAAAAAAAAAgAAAAAAXQEAAAMAAAAAAG0BAAAAAAAAXwEAAAoAAgAAAPIEAAACAAEAAAABAAAA8wQAAAIAAAAAAG4BAAAKAAAAAAAAAAAAAAAAAAEAAAAAAAAAAgAAAAAAXwEAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAQAAAAAAAAACAAAAAABfAQAAAwAAAAAAbwEAAAAAAABgAQAACgAFAAAA9QQAAAIAAwAAAAEAAAD2BAAAAgADAAAAPAAAAPcEAAACAAMAAABeAAAA+AQAAAIAAwAAANUAAAD5BAAAAgADAAAAnAAAAAoAAAAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAABgAQAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAAAAAAAABAAAAAAAAAAIAAAAAAGABAAADAAAAAABwAQAAAAAAAGEBAAAKAAMAAAD7BAAAAgAHAAAAAQAAAP4EAAACAAcAAAAHAAAA/wQAAAIABwAAAA4AAAAKAAAAAAAAAAAAAAAAAAEAAAAAAAAAAgAAAAAAYQEAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAQAAAAAAAAACAAAAAABhAQAAAwAAAAAAcQEAAAAAAABiAQAACgAGAAAAAQUAAAIAAAAAAAEAAAACBQAAAgAAAAAAIAAAAAMFAAACAAAAAADYAAAABAUAAAIAAAAAAOMAAAAFBQAAAgAAAAAAVQEAAAYFAAACAAAAAABdAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAAAAAAAABAAAAAAAAAAIAAAAAAGIBAAADAAAAAAByAQAAAAAAAG4BAAAKAAMAAAAQBQAAAgAEAAAAAQAAABEFAAACAAQAAABPAAAAEgUAAAIABAAAAIYAAAAKAAAAAAAAAAAAAAAAAAEAAAAAAAAAAgAAAAAAbgEAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAQAAAAAAAAACAAAAAABuAQAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAIAAAAFAAAAAAAAAAEAAAACAAAABQAAABAAAAABAAAAAgAAAAUAAAAgAAAAAQAAAAIAAAAFAAAAMAAAAAEAAAACAAAABQAAAEAAAAABAAAAAgAAAAUAAABQAAAAAQAAAAIAAAAFAAAAYAAAAAEAAAACAAAABQAAAHAAAAABAAAAAgAAAAUAAACAAAAAAQAAAAIAAAAFAAAAkAAAAAEAAAACAAAABQAAAKAAAAABAAAAAgAAAAUAAACwAAAAAQAAAAIAAAAFAAAAwAAAAAEAAAACAAAABQAAANAAAAABAAAAAgAAAAUAAADgAAAAAQAAAAIAAAAFAAAA8AAAAAEAAAACAAAABQAAAAABAAABAAAAAgAAAAUAAAAQAQAAAQAAAAIAAAAFAAAAIAEAAAEAAAACAAAABQAAADABAAABAAAAAgAAAAUAAABAAQAAAQAAAAIAAAAFAAAAUAEAAAEAAAACAAAABQAAAGABAAABAAAAAgAAAAUAAABwAQAAAQAAAAIAAAAFAAAAgAEAAAEAAAACAAAABQAAAJABAAABAAAAAgAAAAUAAACgAQAAAQAAAAIAAAAFAAAAsAEAAAEAAAACAAAABQAAAMABAAABAAAAAgAAAAUAAADQAQAAAQAAAAAAAAACAAAA4AEAAAAAAAACAAAABQAAAOABAAABAAAAAgAAAAUAAADwAQAAAQAAAAIAAAAFAAAAAAIAAAEAAAACAAAABQAAABACAAABAAAAAgAAAAUAAAAgAgAAAQAAAAIAAAAFAAAAMAIAAAEAAAACAAAABQAAAEACAAABAAAAAgAAAAUAAABQAgAAAQAAAAIAAAAFAAAAYAIAAAEAAAACAAAABQAAAHACAAABAAAAAgAAAAUAAACAAgAAAQAAAAIAAAAFAAAAkAIAAAEAAAACAAAABQAAAKACAAABAAAAAgAAAAUAAACwAgAAAQAAAAIAAAAFAAAAwAIAAAEAAAACAAAABQAAANACAAABAAAAAgAAAAUAAADgAgAAAQAAAAIAAAAFAAAA8AIAAAEAAAACAAAABQAAAAADAAABAAAAAgAAAAUAAAAQAwAAAQAAAAIAAAAFAAAAIAMAAAEAAAACAAAABQAAADADAAABAAAAAgAAAAUAAABAAwAAAQAAAAIAAAAFAAAAUAMAAAEAAAACAAAABQAAAGADAAABAAAAAgAAAAUAAABwAwAAAQAAAAIAAAAFAAAAgAMAAAEAAAACAAAABQAAAJADAAABAAAAAgAAAAUAAACgAwAAAQAAAAIAAAAFAAAAsAMAAAEAAAACAAAABQAAAMADAAABAAAAAgAAAAUAAADQAwAAAQAAAAIAAAAFAAAA4AMAAAEAAAACAAAABQAAAPADAAABAAAAAgAAAAUAAAAABAAAAQAAAAIAAAAFAAAAEAQAAAEAAAACAAAABQAAACAEAAABAAAAAgAAAAUAAAAwBAAAAQAAAAIAAAAFAAAAQAQAAAEAAAACAAAABQAAAFAEAAABAAAAAgAAAAUAAABgBAAAAQAAAAIAAAAFAAAAcAQAAAEAAAACAAAABQAAAIAEAAABAAAAAgAAAAUAAACQBAAAAQAAAAIAAAAFAAAAoAQAAAEAAAACAAAABQAAALAEAAABAAAAAgAAAAUAAADABAAAAQAAAAIAAAAFAAAA0AQAAAEAAAACAAAABQAAAOAEAAABAAAAAgAAAAUAAADwBAAAAQAAAAIAAAAFAAAAAAUAAAEAAAACAAAABQAAABAFAAABAAAAAgAAAAUAAAAgBQAAAQAAAAIAAAAFAAAAMAUAAAEAAAACAAAABQAAAEAFAAABAAAAAgAAAAUAAABQBQAAAQAAAAIAAAAFAAAAYAUAAAEAAAACAAAABQAAAHAFAAABAAAAAgAAAAUAAACABQAAAQAAAAIAAAAFAAAAkAUAAAEAAAACAAAABQAAAKAFAAABAAAAAgAAAAUAAACwBQAAAQAAAAIAAAAFAAAAwAUAAAEAAAACAAAABQAAANAFAAABAAAAAgAAAAUAAADgBQAAAQAAAAIAAAAFAAAA8AUAAAEAAAACAAAABQAAAAAGAAABAAAAAgAAAAUAAAAQBgAAAQAAAAIAAAAFAAAAIAYAAAEAAAACAAAABQAAADAGAAABAAAAAgAAAAUAAABABgAAAQAAAAIAAAAFAAAAUAYAAAEAAAACAAAABQAAAGAGAAABAAAAAgAAAAUAAABwBgAAAQAAAAIAAAAFAAAAgAYAAAEAAAACAAAABQAAAJAGAAABAAAAAgAAAAUAAACgBgAAAQAAAAIAAAAFAAAAsAYAAAEAAAACAAAABQAAAMAGAAABAAAAAgAAAAUAAADQBgAAAQAAAAIAAAAFAAAA4AYAAAEAAAACAAAABQAAAPAGAAABAAAAAgAAAAUAAAAABwAAAQAAAAIAAAAFAAAAEAcAAAEAAAACAAAABQAAACAHAAABAAAAAgAAAAUAAAAwBwAAAQAAAAIAAAAFAAAAQAcAAAEAAAACAAAABQAAAFAHAAABAAAAAgAAAAUAAABgBwAAAQAAAAIAAAAFAAAAcAcAAAEAAAACAAAABQAAAIAHAAABAAAAAgAAAAUAAACQBwAAAQAAAAIAAAAFAAAAoAcAAAEAAAACAAAABQAAALAHAAABAAAAAgAAAAUAAADABwAAAQAAAAIAAAAFAAAA0AcAAAEAAAACAAAABQAAAOAHAAABAAAAAgAAAAUAAADwBwAAAQAAAAIAAAAFAAAAAAgAAAEAAAACAAAABQAAABAIAAABAAAAAgAAAAUAAAAgCAAAAQAAAAIAAAAFAAAAMAgAAAEAAAACAAAABQAAAEAIAAABAAAAAgAAAAUAAABQCAAAAQAAAAIAAAAFAAAAYAgAAAEAAAACAAAABQAAAHAIAAABAAAAAgAAAAUAAACACAAAAQAAAAIAAAAFAAAAkAgAAAEAAAACAAAABQAAAKAIAAABAAAAAgAAAAUAAACwCAAAAQAAAAIAAAAFAAAAwAgAAAEAAAACAAAABQAAANAIAAABAAAAAgAAAAUAAADgCAAAAQAAAAIAAAAFAAAA8AgAAAEAAAACAAAABQAAAAAJAAABAAAAAgAAAAUAAAAQCQAAAQAAAAIAAAAFAAAAIAkAAAEAAAACAAAABQAAADAJAAABAAAAAgAAAAUAAABACQAAAQAAAAIAAAAFAAAAUAkAAAEAAAACAAAABQAAAGAJAAABAAAAAgAAAAUAAABwCQAAAQAAAAIAAAAFAAAAgAkAAAEAAAACAAAABQAAAJAJAAABAAAAAgAAAAUAAACgCQAAAQAAAAIAAAAFAAAAsAkAAAEAAAACAAAABQAAAMAJAAABAAAAAgAAAAUAAADQCQAAAQAAAAIAAAAFAAAA4AkAAAEAAAACAAAABQAAAPAJAAABAAAAAgAAAAUAAAAACgAAAQAAAAIAAAAFAAAAEAoAAAEAAAACAAAABQAAACAKAAABAAAAAgAAAAUAAAAwCgAAAQAAAAIAAAAFAAAAQAoAAAEAAAACAAAABQAAAFAKAAABAAAAAgAAAAUAAABgCgAAAQAAAAIAAAAFAAAAcAoAAAEAAAACAAAABQAAAIAKAAABAAAAAgAAAAUAAACQCgAAAQAAAAIAAAAFAAAAoAoAAAEAAAACAAAABQAAALAKAAABAAAAAgAAAAUAAADACgAAAQAAAAIAAAAFAAAA0AoAAAEAAAACAAAABQAAAOAKAAABAAAAAgAAAAUAAADwCgAAAQAAAAIAAAAFAAAAAAsAAAEAAAACAAAABQAAABALAAABAAAAAgAAAAUAAAAgCwAAAQAAAAIAAAAFAAAAMAsAAAEAAAACAAAABQAAAEALAAABAAAAAgAAAAUAAABQCwAAAQAAAAIAAAAFAAAAYAsAAAEAAAACAAAABQAAAHALAAABAAAAAgAAAAUAAACACwAAAQAAAAIAAAAFAAAAkAsAAAEAAAACAAAABQAAAKALAAABAAAAAgAAAAUAAACwCwAAAQAAAAIAAAAFAAAAwAsAAAEAAAACAAAABQAAANALAAABAAAAAgAAAAUAAADgCwAAAQAAAAIAAAAFAAAA8AsAAAEAAAACAAAABQAAAAAMAAABAAAAAgAAAAUAAAAQDAAAAQAAAAIAAAAFAAAAIAwAAAEAAAACAAAABQAAADAMAAABAAAAAgAAAAUAAABADAAAAQAAAAIAAAAFAAAAUAwAAAEAAAACAAAABQAAAGAMAAABAAAAAgAAAAUAAABwDAAAAQAAAAIAAAAFAAAAgAwAAAEAAAACAAAABQAAAJAMAAABAAAAAgAAAAUAAACgDAAAAQAAAAIAAAAFAAAAsAwAAAEAAAACAAAABQAAAMAMAAABAAAAAgAAAAUAAADQDAAAAQAAAAIAAAAFAAAA4AwAAAEAAAACAAAABQAAAPAMAAABAAAAAgAAAAUAAAAADQAAAQAAAAIAAAAFAAAAEA0AAAEAAAACAAAABQAAACANAAABAAAAAgAAAAUAAAAwDQAAAQAAAAIAAAAFAAAAQA0AAAEAAAAAAAAAAwAAAFANAAAAAAAAAgAAAAUAAABQDQAAAQAAAAIAAAAFAAAAYA0AAAEAAAACAAAABQAAAHANAAABAAAAAgAAAAUAAACADQAAAQAAAAIAAAAFAAAAkA0AAAEAAAACAAAABQAAAKANAAABAAAAAgAAAAUAAACwDQAAAQAAAAIAAAAFAAAAwA0AAAEAAAACAAAABQAAANANAAABAAAAAgAAAAUAAADgDQAAAQAAAAAAAAAEAAAA8A0AAAAAAAACAAAABQAAAPANAAABAAAAAgAAAAUAAAAADgAAAQAAAAIAAAAFAAAAEA4AAAEAAAACAAAABQAAACAOAAABAAAAAgAAAAUAAAAwDgAAAQAAAAIAAAAFAAAAQA4AAAEAAAACAAAABQAAAFAOAAABAAAAAgAAAAUAAABgDgAAAQAAAAIAAAAFAAAAcA4AAAEAAAACAAAABQAAAIAOAAABAAAAAgAAAAUAAACQDgAAAQAAAAIAAAAFAAAAoA4AAAEAAAACAAAABQAAALAOAAABAAAAAgAAAAUAAADADgAAAQAAAAIAAAAFAAAA0A4AAAEAAAACAAAABQAAAOAOAAABAAAAAgAAAAUAAADwDgAAAQAAAAIAAAAFAAAAAA8AAAEAAAACAAAABQAAABAPAAABAAAAAgAAAAUAAAAgDwAAAQAAAAIAAAAFAAAAMA8AAAEAAAACAAAABQAAAEAPAAABAAAAAgAAAAUAAABQDwAAAQAAAAIAAAAFAAAAYA8AAAEAAAACAAAABQAAAHAPAAABAAAAAgAAAAUAAACADwAAAQAAAAIAAAAFAAAAkA8AAAEAAAACAAAABQAAAKAPAAABAAAAAgAAAAUAAACwDwAAAQAAAAIAAAAFAAAAwA8AAAEAAAACAAAABQAAANAPAAABAAAAAgAAAAUAAADgDwAAAQAAAAIAAAAFAAAA8A8AAAEAAAACAAAABQAAAAAQAAABAAAAAgAAAAUAAAAQEAAAAQAAAAIAAAAFAAAAIBAAAAEAAAACAAAABQAAADAQAAABAAAAAgAAAAUAAABAEAAAAQAAAAIAAAAFAAAAUBAAAAEAAAACAAAABQAAAGAQAAABAAAAAgAAAAUAAABwEAAAAQAAAAIAAAAFAAAAgBAAAAEAAAACAAAABQAAAJAQAAABAAAAAgAAAAUAAACgEAAAAQAAAAIAAAAFAAAAsBAAAAEAAAACAAAABQAAAMAQAAABAAAAAgAAAAUAAADQEAAAAQAAAAIAAAAFAAAA4BAAAAEAAAACAAAABQAAAPAQAAABAAAAAgAAAAUAAAAAEQAAAQAAAAIAAAAFAAAAEBEAAAEAAAACAAAABQAAACARAAABAAAAAgAAAAUAAAAwEQAAAQAAAAIAAAAFAAAAQBEAAAEAAAACAAAABQAAAFARAAABAAAAAgAAAAUAAABgEQAAAQAAAAIAAAAFAAAAcBEAAAEAAAACAAAABQAAAIARAAABAAAAAgAAAAUAAACQEQAAAQAAAAIAAAAFAAAAoBEAAAEAAAACAAAABQAAALARAAABAAAAAgAAAAUAAADAEQAAAQAAAAIAAAAFAAAA0BEAAAEAAAACAAAABQAAAOARAAABAAAAAgAAAAUAAADwEQAAAQAAAAIAAAAFAAAAABIAAAEAAAACAAAABQAAABASAAABAAAAAgAAAAUAAAAgEgAAAQAAAAIAAAAFAAAAMBIAAAEAAAACAAAABQAAAEASAAABAAAAAgAAAAUAAABQEgAAAQAAAAIAAAAFAAAAYBIAAAEAAAACAAAABQAAAHASAAABAAAAAgAAAAUAAACAEgAAAQAAAAIAAAAFAAAAkBIAAAEAAAACAAAABQAAAKASAAABAAAAAgAAAAUAAACwEgAAAQAAAAIAAAAFAAAAwBIAAAEAAAACAAAABQAAANASAAABAAAAAgAAAAUAAADgEgAAAQAAAAIAAAAFAAAA8BIAAAEAAAACAAAABQAAAAATAAABAAAAAgAAAAUAAAAQEwAAAQAAAAIAAAAFAAAAIBMAAAEAAAACAAAABQAAADATAAABAAAAAgAAAAUAAABAEwAAAQAAAAIAAAAFAAAAUBMAAAEAAAACAAAABQAAAGATAAABAAAAAgAAAAUAAABwEwAAAQAAAAIAAAAFAAAAgBMAAAEAAAACAAAABQAAAJATAAABAAAAAgAAAAUAAACgEwAAAQAAAAIAAAAFAAAAsBMAAAEAAAACAAAABQAAAMATAAABAAAAAgAAAAUAAADQEwAAAQAAAAIAAAAFAAAA4BMAAAEAAAACAAAABQAAAPATAAABAAAAAgAAAAUAAAAAFAAAAQAAAAIAAAAFAAAAEBQAAAEAAAACAAAABQAAACAUAAABAAAAAgAAAAUAAAAwFAAAAQAAAAIAAAAFAAAAQBQAAAEAAAACAAAABQAAAFAUAAABAAAAAgAAAAUAAABgFAAAAQAAAAIAAAAFAAAAcBQAAAEAAAACAAAABQAAAIAUAAABAAAAAgAAAAUAAACQFAAAAQAAAAIAAAAFAAAAoBQAAAEAAAACAAAABQAAALAUAAABAAAAAgAAAAUAAADAFAAAAQAAAAIAAAAFAAAA0BQAAAEAAAACAAAABQAAAOAUAAABAAAAAgAAAAUAAADwFAAAAQAAAAAAAAAFAAAAABUAAAAAAAACAAAABQAAAAAVAAABAAAAAgAAAAUAAAAQFQAAAQAAAAIAAAAFAAAAIBUAAAEAAAACAAAABQAAADAVAAABAAAAAgAAAAUAAABAFQAAAQAAAAIAAAAFAAAAUBUAAAEAAAACAAAABQAAAGAVAAABAAAAAAAAAAYAAABwFQAAAAAAAAUAAAAAAAAAcBUAAAEAAAAAAAAABwAAAIAVAAAAAAAAAAAAAAgAAACAFQAAAAAAAAAAAAAJAAAAgBUAAAAAAAAAAAAACgAAAIAVAAAAAAAABgAAAAYAAACAFQAAAQAAAAYAAAAGAAAAlhcAAAEAAAAGAAAABgAAAAIiAAABAAAABgAAAAYAAAACIwAAAQAAAAYAAAAGAAAAkCkAAAEAAAAGAAAABgAAAFwqAAABAAAABgAAAAgAAAC4KgAAAQAAAAYAAAAIAAAAzCoAAAEAAAAGAAAACAAAAOAqAAABAAAABgAAAAgAAAD0KgAAAQAAAAUAAAAAAAAACCsAAAEAAAAAAAAACwAAABgrAAAAAAAABQAAAAAAAAAYKwAAAQAAAAUAAAAAAAAAKCsAAAEAAAAFAAAAAAAAADgrAAABAAAABQAAAAAAAABIKwAAAQAAAAsAAAAAAAAAAAABAAEAAQALAAAAAAABAAAAAQABAAEACwAAAAAAAgAAAAEAAQABAAsAAAAAAAMAAAABAAEAAQALAAAAAAAEAAAAAQABAAEACwAAAAAABQAAAAEAAQABAAsAAAAAAAYAAAABAAEAAQALAAAAAAAHAAAAAQABAAEACwAAAAAACAAAAAEAAQABAAsAAAAAAAkAAAABAAEAAQALAAAAAAAKAAAAAQABAAEACwAAAAAACwAAAAEAAQABAAsAAAAAAAwAAAABAAEAAQALAAAAAAANAAAAAQABAAEACwAAAAAADgAAAAEAAQABAAsAAAAAAA8AAAABAAEAAQALAAAAAAAQAAAAAQABAAEACwAAAAAAEQAAAAEAAQABAAsAAAAAABIAAAABAAEAAQALAAAAAAATAAAAAQABAAEACwAAAAAAFAAAAAEAAQABAAsAAAAAABUAAAABAAEAAQALAAAAAAAWAAAAAQABAAEACwAAAAAAFwAAAAEAAQABAAsAAAAAABgAAAABAAEAAQALAAAAAAAZAAAAAQABAAEACwAAAAAAGgAAAAEAAQABAAsAAAAAABsAAAABAAEAAQALAAAAAAAcAAAAAQABAAEACwAAAAAAHQAAAAEAAQABAAsAAAAAAB4AAAABAAEAAQALAAAAAAAfAAAAAQABAAEACwAAAAAAIAAAAAEAAQABAAsAAAAAACEAAAABAAEAAQALAAAAAAAiAAAAAQABAAEACwAAAAAAIwAAAAEAAQABAAsAAAAAACQAAAABAAEAAQALAAAAAAAlAAAAAQABAAEACwAAAAAAJgAAAAEAAQABAAsAAAAAACcAAAABAAEAAQALAAAAAAAoAAAAAQABAAEACwAAAAAAKQAAAAEAAQABAAsAAAAAACoAAAABAAEAAQALAAAAAAArAAAAAQABAAEACwAAAAAALAAAAAEAAQABAAsAAAAAAC0AAAABAAEAAQALAAAAAAAuAAAAAQABAAEACwAAAAAALwAAAAEAAQABAAsAAAAAADAAAAABAAEAAQALAAAAAAAxAAAAAQABAAEACwAAAAAAMgAAAAEAAQABAAsAAAAAADMAAAABAAEAAQALAAAAAAA0AAAAAQABAAEACwAAAAAANQAAAAEAAQABAAsAAAAAADYAAAABAAEAAQALAAAAAAA3AAAAAQABAAEACwAAAAAAOAAAAAEAAQABAAsAAAAAADkAAAABAAEAAQALAAAAAAA6AAAAAQABAAEACwAAAAAAOwAAAAEAAQABAAsAAAAAADwAAAABAAEAAQALAAAAAAA9AAAAAQABAAEACwAAAAAAPgAAAAEAAQABAAsAAAAAAD8AAAABAAEAAQALAAAAAABAAAAAAQABAAEACwAAAAAAQQAAAAEAAQABAAsAAAAAAEIAAAABAAEAAQALAAAAAABDAAAAAQABAAEACwAAAAAARAAAAAEAAQABAAsAAAAAAEUAAAABAAEAAQALAAAAAABGAAAAAQABAAEACwAAAAAARwAAAAEAAQABAAsAAAAAAEgAAAABAAEAAQALAAAAAABJAAAAAQABAAEACwAAAAAASgAAAAEAAQABAAsAAAAAAEsAAAABAAEAAQALAAAAAABMAAAAAQABAAEACwAAAAAATQAAAAEAAQABAAsAAAAAAE4AAAABAAEAAQALAAAAAABPAAAAAQABAAEACwAAAAAAUAAAAAEAAQABAAsAAAAAAFEAAAABAAEAAQALAAAAAABSAAAAAQABAAEACwAAAAAAUwAAAAEAAQABAAsAAAAAAFQAAAABAAEAAQALAAAAAABVAAAAAQABAAEACwAAAAAAVgAAAAEAAQABAAsAAAAAAFcAAAABAAEAAQALAAAAAABYAAAAAQABAAEACwAAAAAAWQAAAAEAAQABAAsAAAAAAFoAAAABAAEAAQALAAAAAABbAAAAAQABAAEACwAAAAAAXAAAAAEAAQABAAsAAAAAAF0AAAABAAEAAQALAAAAAABeAAAAAQABAAEACwAAAAAAXwAAAAEAAQABAAsAAAAAAGAAAAABAAEAAQALAAAAAABhAAAAAQABAAEACwAAAAAAYgAAAAEAAQABAAsAAAAAAGMAAAABAAEAAQALAAAAAABkAAAAAQABAAEACwAAAAAAZQAAAAEAAQABAAsAAAAAAGYAAAABAAEAAQALAAAAAABnAAAAAQABAAEACwAAAAAAaAAAAAEAAQABAAsAAAAAAGkAAAABAAEAAQALAAAAAABqAAAAAQABAAEACwAAAAAAawAAAAEAAQABAAsAAAAAAGwAAAABAAEAAQALAAAAAABtAAAAAQABAAEACwAAAAAAbgAAAAEAAQABAAsAAAAAAG8AAAABAAEAAQALAAAAAABwAAAAAQABAAEACwAAAAAAcQAAAAEAAQABAAsAAAAAAHIAAAABAAEAAQALAAAAAABzAAAAAQABAAEACwAAAAAAdAAAAAEAAQABAAsAAAAAAHUAAAABAAEAAQALAAAAAAB2AAAAAQABAAEACwAAAAAAdwAAAAEAAQABAAsAAAAAAHgAAAABAAEAAQALAAAAAAB5AAAAAQABAAEACwAAAAAAegAAAAEAAQABAAsAAAAAAHsAAAABAAEAAQALAAAAAAB8AAAAAQABAAEACwAAAAAAfQAAAAEAAQABAAsAAAAAAH4AAAABAAEAAQALAAAAAAB/AAAAAQABAAEACwAAAAAAgAAAAAEAAQABAAsAAAAAAIEAAAABAAEAAQALAAAAAACCAAAAAQABAAEACwAAAAAAgwAAAAEAAQABAAsAAAAAAIQAAAABAAEAAQALAAAAAACFAAAAAQABAAEACwAAAAAAhgAAAAEAAQABAAsAAAAAAIcAAAABAAEAAQALAAAAAACIAAAAAQABAAEACwAAAAAAiQAAAAEAAQABAAsAAAAAAIoAAAABAAEAAQALAAAAAACLAAAAAQABAAEACwAAAAAAjAAAAAEAAQABAAsAAAAAAI0AAAABAAEAAQALAAAAAACOAAAAAQABAAEACwAAAAAAjwAAAAEAAQABAAsAAAAAAJAAAAABAAEAAQALAAAAAACRAAAAAQABAAEACwAAAAAAkgAAAAEAAQABAAsAAAAAAJMAAAABAAEAAQALAAAAAACUAAAAAQABAAEACwAAAAAAlQAAAAEAAQABAAsAAAAAAJYAAAABAAEAAQALAAAAAACXAAAAAQABAAEACwAAAAAAmAAAAAEAAQABAAsAAAAAAJkAAAABAAEAAQALAAAAAACaAAAAAQABAAEACwAAAAAAmwAAAAEAAQABAAsAAAAAAJwAAAABAAEAAQALAAAAAACdAAAAAQABAAEACwAAAAAAngAAAAEAAQABAAsAAAAAAJ8AAAABAAEAAQALAAAAAACgAAAAAQABAAEACwAAAAAAoQAAAAEAAQABAAsAAAAAAKIAAAABAAEAAQALAAAAAACjAAAAAQABAAEACwAAAAAApAAAAAEAAQABAAsAAAAAAKUAAAABAAEAAQALAAAAAACmAAAAAQABAAEACwAAAAAApwAAAAEAAQABAAsAAAAAAKgAAAABAAEAAQALAAAAAACpAAAAAQABAAEACwAAAAAAqgAAAAEAAQABAAsAAAAAAKsAAAABAAEAAQALAAAAAACsAAAAAQABAAEACwAAAAAArQAAAAEAAQABAAsAAAAAAK4AAAABAAEAAQALAAAAAACvAAAAAQABAAEACwAAAAAAsAAAAAEAAQABAAsAAAAAALEAAAABAAEAAQALAAAAAACyAAAAAQABAAEACwAAAAAAswAAAAEAAQABAAsAAAAAALQAAAABAAEAAQALAAAAAAC1AAAAAQABAAEACwAAAAAAtgAAAAEAAQABAAsAAAAAALcAAAABAAEAAQALAAAAAAC4AAAAAQABAAEACwAAAAAAuQAAAAEAAQABAAsAAAAAALoAAAABAAEAAQALAAAAAAC7AAAAAQABAAEACwAAAAAAvAAAAAEAAQABAAsAAAAAAL0AAAABAAEAAQALAAAAAAC+AAAAAQABAAEACwAAAAAAvwAAAAEAAQABAAsAAAAAAMAAAAABAAEAAQALAAAAAADBAAAAAQABAAEACwAAAAAAwgAAAAEAAQABAAsAAAAAAMMAAAABAAEAAQALAAAAAADEAAAAAQABAAEACwAAAAAAxQAAAAEAAQABAAsAAAAAAMYAAAABAAEAAQALAAAAAADHAAAAAQABAAEACwAAAAAAyAAAAAEAAQABAAsAAAAAAMkAAAABAAEAAQALAAAAAADKAAAAAQABAAEACwAAAAAAywAAAAEAAQABAAsAAAAAAMwAAAABAAEAAQALAAAAAADNAAAAAQABAAEACwAAAAAAzgAAAAEAAQABAAsAAAAAAM8AAAABAAEAAQALAAAAAADQAAAAAQABAAEACwAAAAAA0QAAAAEAAQABAAsAAAAAANIAAAABAAEAAQALAAAAAADTAAAAAQABAAEACwAAAAAA1AAAAAEAAQABAAsAAAAAANUAAAABAAEAAQALAAAAAADWAAAAAQABAAEACwAAAAAA1wAAAAEAAQABAAsAAAAAANgAAAABAAEAAQALAAAAAADZAAAAAQABAAEACwAAAAAA2gAAAAEAAQABAAsAAAAAANsAAAABAAEAAQALAAAAAADcAAAAAQABAAEACwAAAAAA3QAAAAEAAQABAAsAAAAAAN4AAAABAAEAAQALAAAAAADfAAAAAQABAAEACwAAAAAA4AAAAAEAAQABAAsAAAAAAOEAAAABAAEAAQALAAAAAADiAAAAAQABAAEACwAAAAAA4wAAAAEAAQABAAsAAAAAAOQAAAABAAEAAQALAAAAAADlAAAAAQABAAEACwAAAAAA5gAAAAEAAQABAAsAAAAAAOcAAAABAAEAAQALAAAAAADoAAAAAQABAAEACwAAAAAA6QAAAAEAAQABAAsAAAAAAOoAAAABAAEAAQALAAAAAADrAAAAAQABAAEACwAAAAAA7AAAAAEAAQABAAsAAAAAAO0AAAABAAEAAQALAAAAAADuAAAAAQABAAEACwAAAAAA7wAAAAEAAQABAAsAAAAAAPAAAAABAAEAAQALAAAAAADxAAAAAQABAAEACwAAAAAA8gAAAAEAAQABAAsAAAAAAPMAAAABAAEAAQALAAAAAAD0AAAAAQABAAEACwAAAAAA9QAAAAEAAQABAAsAAAAAAPYAAAABAAEAAQALAAAAAAD3AAAAAQABAAEACwAAAAAA+AAAAAEAAQABAAsAAAAAAPkAAAABAAEAAQALAAAAAAD6AAAAAQABAAEACwAAAAAA+wAAAAEAAQABAAsAAAAAAPwAAAABAAEAAQALAAAAAAD9AAAAAQABAAEACwAAAAAA/gAAAAEAAQABAAsAAAAAAP8AAAABAAEAAQALAAAAAAAAAQAAAQABAAEACwAAAAAAAQEAAAEAAQABAAsAAAAAAAIBAAABAAEAAQALAAAAAAADAQAAAQABAAEACwAAAAAABAEAAAEAAQABAAsAAAAAAAUBAAABAAEAAQALAAAAAAAGAQAAAQABAAEACwAAAAAABwEAAAEAAQABAAsAAAAAAAgBAAABAAEAAQALAAAAAAAJAQAAAQABAAEACwAAAAAACgEAAAEAAQABAAsAAAAAAAsBAAABAAEAAQALAAAAAAAMAQAAAQABAAEACwAAAAAADQEAAAEAAQABAAsAAAAAAA4BAAABAAEAAQALAAAAAAAPAQAAAQABAAEACwAAAAAAEAEAAAEAAQABAAsAAAAAABEBAAABAAEAAQALAAAAAAASAQAAAQABAAEACwAAAAAAEwEAAAEAAQABAAsAAAAAABQBAAABAAEAAQALAAAAAAAVAQAAAQABAAEACwAAAAAAFgEAAAEAAQABAAsAAAAAABcBAAABAAEAAQALAAAAAAAYAQAAAQABAAEACwAAAAAAGQEAAAEAAQABAAsAAAAAABoBAAABAAEAAQALAAAAAAAbAQAAAQABAAEACwAAAAAAHAEAAAEAAQABAAsAAAAAAB0BAAABAAEAAQALAAAAAAAeAQAAAQABAAEACwAAAAAAHwEAAAEAAQABAAsAAAAAACABAAABAAEAAQALAAAAAAAhAQAAAQABAAEACwAAAAAAIgEAAAEAAQABAAsAAAAAACMBAAABAAEAAQALAAAAAAAkAQAAAQABAAEACwAAAAAAJQEAAAEAAQABAAsAAAAAACYBAAABAAEAAQALAAAAAAAnAQAAAQABAAEACwAAAAAAKAEAAAEAAQABAAsAAAAAACkBAAABAAEAAQALAAAAAAAqAQAAAQABAAEACwAAAAAAKwEAAAEAAQABAAsAAAAAACwBAAABAAEAAQALAAAAAAAtAQAAAQABAAEACwAAAAAALgEAAAEAAQABAAsAAAAAAC8BAAABAAEAAQALAAAAAAAwAQAAAQABAAEACwAAAAAAMQEAAAEAAQABAAsAAAAAADIBAAABAAEAAQALAAAAAAAzAQAAAQABAAEACwAAAAAANAEAAAEAAQABAAsAAAAAADUBAAABAAEAAQALAAAAAAA2AQAAAQABAAEACwAAAAAANwEAAAEAAQABAAsAAAAAADgBAAABAAEAAQALAAAAAAA5AQAAAQABAAEACwAAAAAAOgEAAAEAAQABAAsAAAAAADsBAAABAAEAAQALAAAAAAA8AQAAAQABAAEACwAAAAAAPQEAAAEAAQABAAsAAAAAAD4BAAABAAEAAQALAAAAAAA/AQAAAQABAAEACwAAAAAAQAEAAAEAAQABAAsAAAAAAEEBAAABAAEAAQALAAAAAABCAQAAAQABAAEACwAAAAAAQwEAAAEAAQABAAsAAAAAAEQBAAABAAEAAQALAAAAAABFAQAAAQABAAEACwAAAAAARgEAAAEAAQABAAsAAAAAAEcBAAABAAEAAQALAAAAAABIAQAAAQABAAEACwAAAAAASQEAAAEAAQABAAsAAAAAAEoBAAABAAEAAQALAAAAAABLAQAAAQABAAEACwAAAAAATAEAAAEAAQABAAsAAAAAAE0BAAABAAEAAQALAAAAAABOAQAAAQABAAEACwAAAAAATwEAAAEAAQABAAsAAAAAAFABAAABAAEAAQALAAAAAABRAQAAAQABAAEACwAAAAAAUgEAAAEAAQABAAsAAAAAAFMBAAABAAEAAQALAAAAAABUAQAAAQABAAEACwAAAAAAVQEAAAEAAQABAAsAAAAAAFYBAAABAAEAAQCQAwAABwAAAAAACgAAAAAABgCTAwAACgAEAAAAlAMAAAIAAAAAAGkBAACVAwAAAgAAAAAAagEAAJYDAAACAAAAAABrAQAAlwMAAAIAAAAAAGwBAAAKABsAAACYAwAAAgAAAAAAAgAAAJkDAAACAAAAAAADAAAAmgMAAAIAAAAAAAQAAACbAwAAAgAAAAAABQAAAJwDAAACAAAAAAAGAAAAnQMAAAIAAAAAAAcAAACeAwAAAgAAAAAACAAAAJ8DAAACAAAAAAAJAAAAoAMAAAIAAAAAAAoAAAChAwAAAgAAAAAADgAAAKIDAAACAAAAAAAPAAAAowMAAAIAAAAAABAAAACkAwAAAgAAAAAAEQAAAKUDAAACAAAAAAASAAAApgMAAAIAAAAAABMAAACnAwAAAgAAAAAAFAAAAKgDAAACAAAAAAAVAAAAqQMAAAIAAAAAABYAAACqAwAAAgAAAAAAFwAAAKsDAAACAAAAAAAYAAAArAMAAAIAAAAAABkAAACtAwAAAgAAAAAAGgAAAK4DAAACAAAAAAAbAAAArwMAAAIAAAAAABwAAACwAwAAAgAAAAAAHQAAALEDAAACAAAAAAAeAAAAsgMAAAIAAAAAAB8AAAABAAcAAQAAAAIAAwAAAJwAAAABAAEAAQABAAQAAQAAAAAAAAAHAAMAAAACAAAAAAABAAAAAgADAAAAnAAAAAIAAgAAAAcAAAABAAEAAQABAAEABgCzAwAAAQAKALcAAAC0AwAAAgAAAAAAIQAAALUDAAACAAAAAAAiAAAAtgMAAAIAAAAAACMAAAC3AwAAAgAAAAAAJAAAALgDAAACAAAAAAAlAAAAuQMAAAIAAAAAACYAAAC6AwAAAgAAAAAAJwAAALsDAAACAAAAAAAoAAAAvAMAAAIAAAAAACkAAAC9AwAAAgAAAAAAKgAAAL4DAAACAAAAAAArAAAAvwMAAAIAAAAAACwAAADAAwAAAgAAAAAALQAAAMEDAAACAAAAAAAuAAAAwgMAAAIAAAAAAC8AAADDAwAAAgAAAAAAMAAAAMQDAAACAAAAAAAxAAAAxQMAAAIAAAAAADIAAADGAwAAAgAAAAAAMwAAAMcDAAACAAAAAAA0AAAAyAMAAAIAAAAAADUAAADJAwAAAgAAAAAANgAAAMoDAAACAAAAAAA3AAAAywMAAAIAAAAAADgAAADMAwAAAgAAAAAAOQAAAM0DAAACAAAAAAA6AAAAzgMAAAIAAAAAADsAAADPAwAAAgAAAAAAPAAAANADAAACAAAAAAA9AAAA0QMAAAIAAAAAAD4AAADSAwAAAgAAAAAAPwAAANMDAAACAAAAAABAAAAA1AMAAAIAAAAAAEEAAADVAwAAAgAAAAAAQgAAANYDAAACAAAAAABDAAAA1wMAAAIAAAAAAEQAAADYAwAAAgAAAAAARQAAANkDAAACAAAAAABGAAAA2gMAAAIAAAAAAEcAAADbAwAAAgAAAAAASAAAANwDAAACAAAAAABJAAAA3QMAAAIAAAAAAEoAAADeAwAAAgAAAAAASwAAAN8DAAACAAAAAABMAAAA4AMAAAIAAAAAAE0AAADhAwAAAgAAAAAATgAAAOIDAAACAAAAAABPAAAA4wMAAAIAAAAAAFAAAADkAwAAAgAAAAAAUQAAAOUDAAACAAAAAABSAAAA5gMAAAIAAAAAAFMAAADnAwAAAgAAAAAAVAAAAOgDAAACAAAAAABVAAAA6QMAAAIAAAAAAFYAAADqAwAAAgAAAAAAVwAAAOsDAAACAAAAAABYAAAA7AMAAAIAAAAAAFkAAADtAwAAAgAAAAAAWgAAAO4DAAACAAAAAABbAAAA7wMAAAIAAAAAAFwAAADwAwAAAgAAAAAAXQAAAPEDAAACAAAAAABeAAAA8gMAAAIAAAAAAF8AAADzAwAAAgAAAAAAYAAAAPQDAAACAAAAAABhAAAA9QMAAAIAAAAAAGIAAAD2AwAAAgAAAAAAYwAAAPcDAAACAAAAAABkAAAA+AMAAAIAAAAAAGUAAAD5AwAAAgAAAAAAZgAAAPoDAAACAAAAAABnAAAA+wMAAAIAAAAAAGgAAAD8AwAAAgAAAAAAaQAAAP0DAAACAAAAAABqAAAA/gMAAAIAAAAAAGsAAAD/AwAAAgAAAAAAbAAAAAAEAAACAAAAAABtAAAAAQQAAAIAAAAAAG4AAAACBAAAAgAAAAAAbwAAAAMEAAACAAAAAABwAAAABAQAAAIAAAAAAHEAAAAFBAAAAgAAAAAAcgAAAAYEAAACAAAAAABzAAAABwQAAAIAAAAAAHQAAAAIBAAAAgAAAAAAdQAAAAkEAAACAAAAAAB2AAAACgQAAAIAAAAAAHcAAAALBAAAAgAAAAAAeAAAAAwEAAACAAAAAAB5AAAADQQAAAIAAAAAAHoAAAAOBAAAAgAAAAAAewAAAA8EAAACAAAAAAB8AAAAEAQAAAIAAAAAAH0AAAARBAAAAgAAAAAAfgAAABIEAAACAAAAAAB/AAAAEwQAAAIAAAAAAIAAAAAUBAAAAgAAAAAAgQAAABUEAAACAAAAAACCAAAAFgQAAAIAAAAAAIMAAAAXBAAAAgAAAAAAhAAAABgEAAACAAAAAACFAAAAGQQAAAIAAAAAAIYAAAAaBAAAAgAAAAAAhwAAABsEAAACAAAAAACIAAAAHAQAAAIAAAAAAIkAAAAdBAAAAgAAAAAAigAAAB4EAAACAAAAAACLAAAAHwQAAAIAAAAAAIwAAAAgBAAAAgAAAAAAjQAAACEEAAACAAAAAACOAAAAIgQAAAIAAAAAAI8AAAAjBAAAAgAAAAAAkAAAACQEAAACAAAAAACRAAAAJQQAAAIAAAAAAJIAAAAmBAAAAgAAAAAAkwAAACcEAAACAAAAAACUAAAAKAQAAAIAAAAAAJUAAAApBAAAAgAAAAAAlgAAACoEAAACAAAAAACXAAAAKwQAAAIAAAAAAJgAAAAsBAAAAgAAAAAAmQAAAC0EAAACAAAAAACaAAAALgQAAAIAAAAAAJsAAAAvBAAAAgAAAAAAnAAAADAEAAACAAAAAACdAAAAMQQAAAIAAAAAAJ4AAAAyBAAAAgAAAAAAnwAAADMEAAACAAAAAACgAAAANAQAAAIAAAAAAKEAAAA1BAAAAgAAAAAAogAAADYEAAACAAAAAACjAAAANwQAAAIAAAAAAKQAAAA4BAAAAgAAAAAApQAAADkEAAACAAAAAACmAAAAOgQAAAIAAAAAAKcAAAA7BAAAAgAAAAAAqAAAADwEAAACAAAAAACpAAAAPQQAAAIAAAAAAKoAAAA+BAAAAgAAAAAAqwAAAD8EAAACAAAAAACsAAAAQAQAAAIAAAAAAK0AAABBBAAAAgAAAAAArgAAAEIEAAACAAAAAACvAAAAQwQAAAIAAAAAALAAAABEBAAAAgAAAAAAsQAAAEUEAAACAAAAAACyAAAARgQAAAIAAAAAALMAAABHBAAAAgAAAAAAtAAAAEgEAAACAAAAAAC1AAAASQQAAAIAAAAAALYAAABKBAAAAgAAAAAAtwAAAEsEAAACAAAAAAC4AAAATAQAAAIAAAAAALkAAABNBAAAAgAAAAAAugAAAE4EAAACAAAAAAC7AAAATwQAAAIAAAAAALwAAABQBAAAAgAAAAAAvQAAAFEEAAACAAAAAAC+AAAAUgQAAAIAAAAAAL8AAABTBAAAAgAAAAAAwAAAAFQEAAACAAAAAADBAAAAVQQAAAIAAAAAAMIAAABWBAAAAgAAAAAAwwAAAFcEAAACAAAAAADEAAAAWAQAAAIAAAAAAMUAAABZBAAAAgAAAAAAxgAAAFoEAAACAAAAAADHAAAAWwQAAAIAAAAAAMgAAABcBAAAAgAAAAAAyQAAAF0EAAACAAAAAADKAAAAXgQAAAIAAAAAAMsAAABfBAAAAgAAAAAAzAAAAGAEAAACAAAAAADNAAAAYQQAAAIAAAAAAM4AAABiBAAAAgAAAAAAzwAAAGMEAAACAAAAAADQAAAAZAQAAAIAAAAAANEAAABlBAAAAgAAAAAA0gAAAGYEAAACAAAAAADTAAAAZwQAAAIAAAAAANQAAABoBAAAAgAAAAAA1QAAAGkEAAACAAAAAADWAAAAagQAAAIAAAAAANcAAAABAAcAAQAAAAIAAwAAAAEAAAABAAEAAQABAAQAAQAAAAAAAAAHAAQAAAACAAAAAAAgAAAAAgADAAAAAQAAAAIAAQAAAEwAAAACAAIAAAAHAAAAAQABAAEAAQABAAYAawQAAAEACgAKAAAAbAQAAAIAAAAAANkAAABtBAAAAgAAAAAA2gAAAG4EAAACAAAAAADbAAAAbwQAAAIAAAAAANwAAABwBAAAAgAAAAAA3QAAAHEEAAACAAAAAADeAAAAcgQAAAIAAAAAAN8AAABzBAAAAgAAAAAA4AAAAHQEAAACAAAAAADhAAAAdQQAAAIAAAAAAOIAAAABAAcAAQAAAAIABAAAAAEAAAABAAEAAQABAAQAAQAAAAAAAAAHAAUAAAACAAAAAADYAAAAAgAEAAAAAQAAAAIAAwAAAAEAAAACAAEAAABMAAAAAgACAAAABwAAAAEAAQABAAEAAQAGAHYEAAABAAoAcQAAAHcEAAACAAAAAADkAAAAeAQAAAIAAAAAAOUAAAB5BAAAAgAAAAAA5gAAAHoEAAACAAAAAADnAAAAewQAAAIAAAAAAOgAAAB8BAAAAgAAAAAA6QAAAH0EAAACAAAAAADqAAAAfgQAAAIAAAAAAOsAAAB/BAAAAgAAAAAA7AAAAIAEAAACAAAAAADtAAAAgQQAAAIAAAAAAO4AAACCBAAAAgAAAAAA7wAAAIMEAAACAAAAAADwAAAAhAQAAAIAAAAAAPEAAACFBAAAAgAAAAAA8gAAAIYEAAACAAAAAADzAAAAhwQAAAIAAAAAAPQAAACIBAAAAgAAAAAA9QAAAIkEAAACAAAAAAD2AAAAigQAAAIAAAAAAPcAAACLBAAAAgAAAAAA+AAAAIwEAAACAAAAAAD5AAAAjQQAAAIAAAAAAPoAAACOBAAAAgAAAAAA+wAAAI8EAAACAAAAAAD8AAAAkAQAAAIAAAAAAP0AAACRBAAAAgAAAAAA/gAAAJIEAAACAAAAAAD/AAAAkwQAAAIAAAAAAAABAACUBAAAAgAAAAAAAQEAAJUEAAACAAAAAAACAQAAlgQAAAIAAAAAAAMBAACXBAAAAgAAAAAABAEAAJgEAAACAAAAAAAFAQAAmQQAAAIAAAAAAAYBAACaBAAAAgAAAAAABwEAAJsEAAACAAAAAAAIAQAAnAQAAAIAAAAAAAkBAACdBAAAAgAAAAAACgEAAJ4EAAACAAAAAAALAQAAnwQAAAIAAAAAAAwBAACgBAAAAgAAAAAADQEAAKEEAAACAAAAAAAOAQAAogQAAAIAAAAAAA8BAACjBAAAAgAAAAAAEAEAAKQEAAACAAAAAAARAQAApQQAAAIAAAAAABIBAACmBAAAAgAAAAAAEwEAAKcEAAACAAAAAAAUAQAAqAQAAAIAAAAAABUBAACpBAAAAgAAAAAAFgEAAKoEAAACAAAAAAAXAQAAqwQAAAIAAAAAABgBAACsBAAAAgAAAAAAGQEAAK0EAAACAAAAAAAaAQAArgQAAAIAAAAAABsBAACvBAAAAgAAAAAAHAEAALAEAAACAAAAAAAdAQAAsQQAAAIAAAAAAB4BAACyBAAAAgAAAAAAHwEAALMEAAACAAAAAAAgAQAAtAQAAAIAAAAAACEBAAC1BAAAAgAAAAAAIgEAALYEAAACAAAAAAAjAQAAtwQAAAIAAAAAACQBAAC4BAAAAgAAAAAAJQEAALkEAAACAAAAAAAmAQAAugQAAAIAAAAAACcBAAC7BAAAAgAAAAAAKAEAALwEAAACAAAAAAApAQAAvQQAAAIAAAAAACoBAAC+BAAAAgAAAAAAKwEAAL8EAAACAAAAAAAsAQAAwAQAAAIAAAAAAC0BAADBBAAAAgAAAAAALgEAAMIEAAACAAAAAAAvAQAAwwQAAAIAAAAAADABAADEBAAAAgAAAAAAMQEAAMUEAAACAAAAAAAyAQAAxgQAAAIAAAAAADMBAADHBAAAAgAAAAAANAEAAMgEAAACAAAAAAA1AQAAyQQAAAIAAAAAADYBAADKBAAAAgAAAAAANwEAAMsEAAACAAAAAAA4AQAAzAQAAAIAAAAAADkBAADNBAAAAgAAAAAAOgEAAM4EAAACAAAAAAA7AQAAzwQAAAIAAAAAADwBAADQBAAAAgAAAAAAPQEAANEEAAACAAAAAAA+AQAA0gQAAAIAAAAAAD8BAADTBAAAAgAAAAAAQAEAANQEAAACAAAAAABBAQAA1QQAAAIAAAAAAEIBAADWBAAAAgAAAAAAQwEAANcEAAACAAAAAABEAQAA2AQAAAIAAAAAAEUBAADZBAAAAgAAAAAARgEAANoEAAACAAAAAABHAQAA2wQAAAIAAAAAAEgBAADcBAAAAgAAAAAASQEAAN0EAAACAAAAAABKAQAA3gQAAAIAAAAAAEsBAADfBAAAAgAAAAAATAEAAOAEAAACAAAAAABNAQAA4QQAAAIAAAAAAE4BAADiBAAAAgAAAAAATwEAAOMEAAACAAAAAABQAQAA5AQAAAIAAAAAAFEBAADlBAAAAgAAAAAAUgEAAOYEAAACAAAAAABTAQAA5wQAAAIAAAAAAFQBAAABAAcAAQAAAAIAAwAAADwAAAABAAEAAQABAAQAAQAAAAAAAAAHAAMAAAACAAAAAADjAAAAAgADAAAAPAAAAAIAAgAAAAcAAAABAAEAAQABAAEABgDoBAAAAQAKAAcAAADpBAAAAgAAAAAAVgEAAOoEAAACAAAAAABXAQAA6wQAAAIAAAAAAFgBAADsBAAAAgAAAAAAWQEAAO0EAAACAAAAAABaAQAA7gQAAAIAAAAAAFsBAADvBAAAAgAAAAAAXAEAAAEABwABAAAAAgAEAAAATwAAAAEAAQABAAEABAABAAAAAAAAAAcABAAAAAIAAAAAAFUBAAACAAQAAABPAAAAAgADAAAAPAAAAAIAAgAAAAcAAAABAAEAAQABAAEABgDwBAAAAQABAAEABwABAAAAAgADAAAAXgAAAAEAAQABAAEABAABAAAAAAAAAAcAAwAAAAIAAAAAAF0BAAACAAMAAABeAAAAAgACAAAABwAAAAEAAQABAAEAAQAGAAcFAAADAAQAAAAAAAAAAAADAAYACAUAAAMABAAAAAAAAAAAAAMABgAJBQAAAwAEAAAAAAAAAAAAAwAGAAoFAAADAAQAAAAAAAAAAAADAAsFAAAHAAAAAAAKAAAAAAAMBQAABwAAAAAACgAAAAAADQUAAAcAAAAAAAoAAAAAAA4FAAAHAAAAAAAKAAAAAAATBQAABwAAAAAACgAAAAAA"
    new $P115, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P115
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "152819621F18B86657DB412D206298CA3534F307-1338064436.189"
    push string_heap, "src\\stage2\\QRegex.nqp"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "HLL"
    push string_heap, "QAST"
    push string_heap, "NQP"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "2DEE75AFD50ED67BDF162F6BA56A80FA8956D48C-1338064435.275"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "1B4BCF3CBDD2B9FEC4F38EAB1F0132580EC97417-1338064439.301"
    push string_heap, "src\\stage2\\gen\\NQPHLL.pm"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "push_lexpad"
    push string_heap, "pop_lexpad"
    push string_heap, "cur_lexpad"
    push string_heap, "get_legacy_block_list"
    push string_heap, "load_setting"
    push string_heap, "load_module"
    push string_heap, "install_package_symbol"
    push string_heap, "install_lexical_symbol"
    push string_heap, "install_package_routine"
    push string_heap, "create_code"
    push string_heap, "pkg_create_mo"
    push string_heap, "pkg_add_attribute"
    push string_heap, "pkg_add_method"
    push string_heap, "set_routine_signature"
    push string_heap, "set_routine_signature_on_parrot_sub"
    push string_heap, "pkg_set_body_block"
    push string_heap, "pkg_add_parent_or_role"
    push string_heap, "pkg_add_parrot_vtable_handler_mapping"
    push string_heap, "pkg_compose"
    push string_heap, "run_begin_block"
    push string_heap, "set_nqp_language_defaults"
    push string_heap, "to_past"
    push string_heap, "is_lexical"
    push string_heap, "is_package"
    push string_heap, "is_scope"
    push string_heap, "known_sym"
    push string_heap, "find_sym"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "TOP"
    push string_heap, "identifier"
    push string_heap, "name"
    push string_heap, "deflongname"
    push string_heap, "ENDSTMT"
    push string_heap, "unv"
    push string_heap, "pod_comment"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "eat_terminator"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "lambda"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "finishpad"
    push string_heap, "you_are_here"
    push string_heap, "terminator"
    push string_heap, "terminator:sym<;>"
    push string_heap, "terminator:sym<}>"
    push string_heap, "statement_control"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "statement_mod_loop:sym<for>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "sigil"
    push string_heap, "twigil"
    push string_heap, "package_declarator"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "typename"
    push string_heap, "declarator"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "onlystar"
    push string_heap, "multi_declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "default_value"
    push string_heap, "trait"
    push string_heap, "trait_mod"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<value>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "infixstopper"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "prefix:sym<++>"
    push string_heap, "prefix:sym<-->"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "infix:sym<**>"
    push string_heap, "prefix:sym<+>"
    push string_heap, "prefix:sym<~>"
    push string_heap, "prefix:sym<->"
    push string_heap, "prefix:sym<?>"
    push string_heap, "prefix:sym<!>"
    push string_heap, "prefix:sym<|>"
    push string_heap, "infix:sym<*>"
    push string_heap, "infix:sym</>"
    push string_heap, "infix:sym<%>"
    push string_heap, "infix:sym<+&>"
    push string_heap, "infix:sym<+>"
    push string_heap, "infix:sym<->"
    push string_heap, "infix:sym<+|>"
    push string_heap, "infix:sym<+^>"
    push string_heap, "infix:sym<~>"
    push string_heap, "infix:sym<==>"
    push string_heap, "infix:sym<!=>"
    push string_heap, "infix:sym<<=>"
    push string_heap, "infix:sym<>=>"
    push string_heap, "infix:sym<<>"
    push string_heap, "infix:sym<>>"
    push string_heap, "infix:sym<eq>"
    push string_heap, "infix:sym<ne>"
    push string_heap, "infix:sym<le>"
    push string_heap, "infix:sym<ge>"
    push string_heap, "infix:sym<lt>"
    push string_heap, "infix:sym<gt>"
    push string_heap, "infix:sym<=:=>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "infix:sym<&&>"
    push string_heap, "infix:sym<||>"
    push string_heap, "infix:sym<//>"
    push string_heap, "infix:sym<?? !!>"
    push string_heap, "infix:sym<=>"
    push string_heap, "infix:sym<:=>"
    push string_heap, "infix:sym<::=>"
    push string_heap, "infix:sym<,>"
    push string_heap, "prefix:sym<return>"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<redo>"
    push string_heap, "smartmatch"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "F742782F4A44649B939DB960B477BB6FBC4FAD4D-1338064447.783"
    push string_heap, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "obs"
    push string_heap, "normspace"
    push string_heap, "identifier"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termaltseq"
    push string_heap, "termconjseq"
    push string_heap, "termalt"
    push string_heap, "termconj"
    push string_heap, "quantified_atom"
    push string_heap, "separator"
    push string_heap, "atom"
    push string_heap, "quantifier"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<{N,M}>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "backmod"
    push string_heap, "metachar"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<:::>"
    push string_heap, "metachar:sym<::>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<mod>"
    push string_heap, "metachar:sym<quantifier>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "metachar:sym<{*}>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<PIR>"
    push string_heap, "backslash"
    push string_heap, "backslash:sym<s>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<A>"
    push string_heap, "backslash:sym<z>"
    push string_heap, "backslash:sym<Z>"
    push string_heap, "backslash:sym<Q>"
    push string_heap, "backslash:sym<unrec>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<|>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "mod_ident"
    push string_heap, "mod_ident:sym<ignorecase>"
    push string_heap, "mod_ident:sym<ratchet>"
    push string_heap, "mod_ident:sym<sigspace>"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "TOP"
    push string_heap, "deflongname"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "you_are_here"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "typename"
    push string_heap, "trait"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<value>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<redo>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termaltseq"
    push string_heap, "termconjseq"
    push string_heap, "termalt"
    push string_heap, "termconj"
    push string_heap, "quantified_atom"
    push string_heap, "separator"
    push string_heap, "atom"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "backslash:sym<s>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<|>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "subrule_alias"
    push string_heap, "flip_ast"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "import"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "user-progname"
    push string_heap, "cli-options"
    push string_heap, "cli-arguments"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "$!user_progname"
    push string_heap, "@!cli-arguments"
    push string_heap, "%!cli-options"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "5B6BCDEB97207A8A1AF979F9510A88333D9459D9-1338064432.041"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "NQP::World"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "push_lexpad"
    push string_heap, "pop_lexpad"
    push string_heap, "cur_lexpad"
    push string_heap, "get_legacy_block_list"
    push string_heap, "load_setting"
    push string_heap, "load_module"
    push string_heap, "install_package_symbol"
    push string_heap, "install_lexical_symbol"
    push string_heap, "install_package_routine"
    push string_heap, "create_code"
    push string_heap, "pkg_create_mo"
    push string_heap, "pkg_add_attribute"
    push string_heap, "pkg_add_method"
    push string_heap, "set_routine_signature"
    push string_heap, "set_routine_signature_on_parrot_sub"
    push string_heap, "pkg_set_body_block"
    push string_heap, "pkg_add_parent_or_role"
    push string_heap, "pkg_add_parrot_vtable_handler_mapping"
    push string_heap, "pkg_compose"
    push string_heap, "run_begin_block"
    push string_heap, "set_nqp_language_defaults"
    push string_heap, "to_past"
    push string_heap, "is_lexical"
    push string_heap, "is_package"
    push string_heap, "is_scope"
    push string_heap, "known_sym"
    push string_heap, "find_sym"
    push string_heap, "NQP::Grammar"
    push string_heap, "TOP"
    push string_heap, "identifier"
    push string_heap, "name"
    push string_heap, "deflongname"
    push string_heap, "ENDSTMT"
    push string_heap, "ws"
    push string_heap, "unv"
    push string_heap, "pod_comment"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "eat_terminator"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "lambda"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "finishpad"
    push string_heap, "you_are_here"
    push string_heap, "terminator"
    push string_heap, "terminator:sym<;>"
    push string_heap, "terminator:sym<}>"
    push string_heap, "statement_control"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "statement_mod_loop:sym<for>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "sigil"
    push string_heap, "twigil"
    push string_heap, "package_declarator"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "typename"
    push string_heap, "declarator"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "onlystar"
    push string_heap, "multi_declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "default_value"
    push string_heap, "trait"
    push string_heap, "trait_mod"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<value>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "infixish"
    push string_heap, "infixstopper"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "prefix:sym<++>"
    push string_heap, "prefix:sym<-->"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "infix:sym<**>"
    push string_heap, "prefix:sym<+>"
    push string_heap, "prefix:sym<~>"
    push string_heap, "prefix:sym<->"
    push string_heap, "prefix:sym<?>"
    push string_heap, "prefix:sym<!>"
    push string_heap, "prefix:sym<|>"
    push string_heap, "infix:sym<*>"
    push string_heap, "infix:sym</>"
    push string_heap, "infix:sym<%>"
    push string_heap, "infix:sym<+&>"
    push string_heap, "infix:sym<+>"
    push string_heap, "infix:sym<->"
    push string_heap, "infix:sym<+|>"
    push string_heap, "infix:sym<+^>"
    push string_heap, "infix:sym<~>"
    push string_heap, "infix:sym<==>"
    push string_heap, "infix:sym<!=>"
    push string_heap, "infix:sym<<=>"
    push string_heap, "infix:sym<>=>"
    push string_heap, "infix:sym<<>"
    push string_heap, "infix:sym<>>"
    push string_heap, "infix:sym<eq>"
    push string_heap, "infix:sym<ne>"
    push string_heap, "infix:sym<le>"
    push string_heap, "infix:sym<ge>"
    push string_heap, "infix:sym<lt>"
    push string_heap, "infix:sym<gt>"
    push string_heap, "infix:sym<=:=>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "infix:sym<&&>"
    push string_heap, "infix:sym<||>"
    push string_heap, "infix:sym<//>"
    push string_heap, "infix:sym<?? !!>"
    push string_heap, "infix:sym<=>"
    push string_heap, "infix:sym<:=>"
    push string_heap, "infix:sym<::=>"
    push string_heap, "infix:sym<,>"
    push string_heap, "prefix:sym<return>"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<redo>"
    push string_heap, "smartmatch"
    push string_heap, "NQP::Regex"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "NQP::Actions"
    push string_heap, "TOP"
    push string_heap, "deflongname"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "you_are_here"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "typename"
    push string_heap, "trait"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<value>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<redo>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "NQP::RegexActions"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "NQP::Compiler"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "P6Regex"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "CommandLine"
    push string_heap, "World"
    push string_heap, "P6opaque"
    push string_heap, "Node"
    push string_heap, "F5FDAA09D866B2026EBA9586B919320AC111E8C1-1338064444.992"
    push string_heap, "src\\stage2\\QAST.nqp"
    push string_heap, "Regex"
    push string_heap, "Compiler"
    push string_heap, "P6opaque"
    push string_heap, "World"
    push string_heap, "Grammar"
    push string_heap, "Regex"
    push string_heap, "Actions"
    push string_heap, "RegexActions"
    push string_heap, "Compiler"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "QRegex"
    push string_heap, "HLL"
    push string_heap, "QAST"
    push string_heap, "NQP"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "P6Regex"
    .const 'Sub' $P4004 = "848_1338064451.944" 
    capture_lex $P4004
    $P117 = $P4004()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P117
    .const 'LexInfo' $P4348 = "368_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 0
    $P4348."set_static_lexpad_value"("GLOBALish", $P118)
    .const 'LexInfo' $P4349 = "368_1338064451.944" 
    $P4349."finish_static_lexpad"()
    .const 'LexInfo' $P4350 = "368_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 0
    $P4350."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4351 = "368_1338064451.944" 
    $P4351."finish_static_lexpad"()
    .const '' $P4352 = "10_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 2
    set_sub_code_object $P4352, $P118
    .const '' $P4353 = "11_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 3
    set_sub_code_object $P4353, $P118
    .const '' $P4354 = "12_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 4
    set_sub_code_object $P4354, $P118
    .const '' $P4355 = "13_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 5
    set_sub_code_object $P4355, $P118
    .const '' $P4356 = "14_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 6
    set_sub_code_object $P4356, $P118
    .const '' $P4357 = "15_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 7
    set_sub_code_object $P4357, $P118
    .const '' $P4358 = "16_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 8
    set_sub_code_object $P4358, $P118
    .const '' $P4359 = "17_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 9
    set_sub_code_object $P4359, $P118
    .const '' $P4360 = "18_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 10
    set_sub_code_object $P4360, $P118
    .const '' $P4361 = "19_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 11
    set_sub_code_object $P4361, $P118
    .const '' $P4362 = "20_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 12
    set_sub_code_object $P4362, $P118
    .const '' $P4363 = "21_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 13
    set_sub_code_object $P4363, $P118
    .const '' $P4364 = "22_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 14
    set_sub_code_object $P4364, $P118
    .const '' $P4365 = "23_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 15
    set_sub_code_object $P4365, $P118
    .const '' $P4366 = "24_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 16
    set_sub_code_object $P4366, $P118
    .const '' $P4367 = "25_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 17
    set_sub_code_object $P4367, $P118
    .const '' $P4368 = "26_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 18
    set_sub_code_object $P4368, $P118
    .const '' $P4369 = "27_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 19
    set_sub_code_object $P4369, $P118
    .const '' $P4370 = "28_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 20
    set_sub_code_object $P4370, $P118
    .const '' $P4371 = "29_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 21
    set_sub_code_object $P4371, $P118
    .const '' $P4372 = "30_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 22
    set_sub_code_object $P4372, $P118
    .const '' $P4373 = "31_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 23
    set_sub_code_object $P4373, $P118
    .const '' $P4374 = "32_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 24
    set_sub_code_object $P4374, $P118
    .const '' $P4375 = "33_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 25
    set_sub_code_object $P4375, $P118
    .const '' $P4376 = "34_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 26
    set_sub_code_object $P4376, $P118
    .const '' $P4377 = "35_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 27
    set_sub_code_object $P4377, $P118
    .const '' $P4378 = "36_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 28
    set_sub_code_object $P4378, $P118
    .const '' $P4379 = "37_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 29
    set_sub_code_object $P4379, $P118
    .const '' $P4380 = "38_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 30
    set_sub_code_object $P4380, $P118
    .const '' $P4381 = "39_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 31
    set_sub_code_object $P4381, $P118
    .const 'LexInfo' $P4382 = "372_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    $P4382."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4383 = "372_1338064451.944" 
    $P4383."finish_static_lexpad"()
    .const 'LexInfo' $P4384 = "372_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    $P4384."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4385 = "372_1338064451.944" 
    $P4385."finish_static_lexpad"()
    .const '' $P4386 = "40_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 33
    set_sub_code_object $P4386, $P118
    .const '' $P4387 = "41_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 34
    set_sub_code_object $P4387, $P118
    .const '' $P4388 = "42_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 35
    set_sub_code_object $P4388, $P118
    .const '' $P4389 = "43_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 36
    set_sub_code_object $P4389, $P118
    .const '' $P4390 = "44_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 37
    set_sub_code_object $P4390, $P118
    .const '' $P4391 = "45_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 38
    set_sub_code_object $P4391, $P118
    .const '' $P4392 = "47_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 39
    set_sub_code_object $P4392, $P118
    .const '' $P4393 = "49_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 40
    set_sub_code_object $P4393, $P118
    .const '' $P4394 = "50_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 41
    set_sub_code_object $P4394, $P118
    .const '' $P4395 = "51_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 42
    set_sub_code_object $P4395, $P118
    .const '' $P4396 = "53_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 43
    set_sub_code_object $P4396, $P118
    .const '' $P4397 = "54_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 44
    set_sub_code_object $P4397, $P118
    .const '' $P4398 = "55_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 45
    set_sub_code_object $P4398, $P118
    .const '' $P4399 = "56_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 46
    set_sub_code_object $P4399, $P118
    .const '' $P4400 = "57_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 47
    set_sub_code_object $P4400, $P118
    .const '' $P4401 = "58_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 48
    set_sub_code_object $P4401, $P118
    .const '' $P4402 = "59_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 49
    set_sub_code_object $P4402, $P118
    .const '' $P4403 = "60_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 50
    set_sub_code_object $P4403, $P118
    .const '' $P4404 = "61_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 51
    set_sub_code_object $P4404, $P118
    .const '' $P4405 = "62_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 52
    set_sub_code_object $P4405, $P118
    .const '' $P4406 = "63_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 53
    set_sub_code_object $P4406, $P118
    .const '' $P4407 = "64_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 54
    set_sub_code_object $P4407, $P118
    .const '' $P4408 = "65_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 55
    set_sub_code_object $P4408, $P118
    .const '' $P4409 = "66_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 56
    set_sub_code_object $P4409, $P118
    .const '' $P4410 = "67_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 57
    set_sub_code_object $P4410, $P118
    .const '' $P4411 = "68_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 58
    set_sub_code_object $P4411, $P118
    .const '' $P4412 = "69_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 59
    set_sub_code_object $P4412, $P118
    .const '' $P4413 = "70_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 60
    set_sub_code_object $P4413, $P118
    .const '' $P4414 = "72_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 61
    set_sub_code_object $P4414, $P118
    .const '' $P4415 = "73_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 62
    set_sub_code_object $P4415, $P118
    .const '' $P4416 = "74_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 63
    set_sub_code_object $P4416, $P118
    .const '' $P4417 = "75_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 64
    set_sub_code_object $P4417, $P118
    .const '' $P4418 = "76_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 65
    set_sub_code_object $P4418, $P118
    .const '' $P4419 = "77_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 66
    set_sub_code_object $P4419, $P118
    .const '' $P4420 = "78_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 67
    set_sub_code_object $P4420, $P118
    .const '' $P4421 = "79_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 68
    set_sub_code_object $P4421, $P118
    .const '' $P4422 = "80_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 69
    set_sub_code_object $P4422, $P118
    .const '' $P4423 = "81_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 70
    set_sub_code_object $P4423, $P118
    .const '' $P4424 = "82_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 71
    set_sub_code_object $P4424, $P118
    .const '' $P4425 = "83_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 72
    set_sub_code_object $P4425, $P118
    .const '' $P4426 = "84_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 73
    set_sub_code_object $P4426, $P118
    .const '' $P4427 = "85_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 74
    set_sub_code_object $P4427, $P118
    .const '' $P4428 = "86_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 75
    set_sub_code_object $P4428, $P118
    .const '' $P4429 = "87_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 76
    set_sub_code_object $P4429, $P118
    .const '' $P4430 = "88_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 77
    set_sub_code_object $P4430, $P118
    .const '' $P4431 = "89_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 78
    set_sub_code_object $P4431, $P118
    .const '' $P4432 = "90_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 79
    set_sub_code_object $P4432, $P118
    .const '' $P4433 = "91_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 80
    set_sub_code_object $P4433, $P118
    .const '' $P4434 = "92_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 81
    set_sub_code_object $P4434, $P118
    .const '' $P4435 = "93_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 82
    set_sub_code_object $P4435, $P118
    .const '' $P4436 = "94_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 83
    set_sub_code_object $P4436, $P118
    .const '' $P4437 = "95_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 84
    set_sub_code_object $P4437, $P118
    .const '' $P4438 = "98_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 85
    set_sub_code_object $P4438, $P118
    .const '' $P4439 = "99_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 86
    set_sub_code_object $P4439, $P118
    .const '' $P4440 = "100_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 87
    set_sub_code_object $P4440, $P118
    .const '' $P4441 = "101_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 88
    set_sub_code_object $P4441, $P118
    .const '' $P4442 = "102_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 89
    set_sub_code_object $P4442, $P118
    .const '' $P4443 = "103_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 90
    set_sub_code_object $P4443, $P118
    .const '' $P4444 = "104_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 91
    set_sub_code_object $P4444, $P118
    .const '' $P4445 = "105_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 92
    set_sub_code_object $P4445, $P118
    .const '' $P4446 = "106_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 93
    set_sub_code_object $P4446, $P118
    .const '' $P4447 = "107_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 94
    set_sub_code_object $P4447, $P118
    .const '' $P4448 = "108_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 95
    set_sub_code_object $P4448, $P118
    .const '' $P4449 = "109_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 96
    set_sub_code_object $P4449, $P118
    .const '' $P4450 = "110_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 97
    set_sub_code_object $P4450, $P118
    .const '' $P4451 = "111_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 98
    set_sub_code_object $P4451, $P118
    .const '' $P4452 = "112_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 99
    set_sub_code_object $P4452, $P118
    .const '' $P4453 = "113_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 100
    set_sub_code_object $P4453, $P118
    .const '' $P4454 = "114_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 101
    set_sub_code_object $P4454, $P118
    .const '' $P4455 = "115_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 102
    set_sub_code_object $P4455, $P118
    .const '' $P4456 = "116_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 103
    set_sub_code_object $P4456, $P118
    .const '' $P4457 = "117_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 104
    set_sub_code_object $P4457, $P118
    .const '' $P4458 = "118_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 105
    set_sub_code_object $P4458, $P118
    .const '' $P4459 = "119_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 106
    set_sub_code_object $P4459, $P118
    .const '' $P4460 = "120_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 107
    set_sub_code_object $P4460, $P118
    .const '' $P4461 = "121_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 108
    set_sub_code_object $P4461, $P118
    .const '' $P4462 = "122_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 109
    set_sub_code_object $P4462, $P118
    .const '' $P4463 = "123_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 110
    set_sub_code_object $P4463, $P118
    .const '' $P4464 = "124_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 111
    set_sub_code_object $P4464, $P118
    .const '' $P4465 = "125_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 112
    set_sub_code_object $P4465, $P118
    .const '' $P4466 = "126_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 113
    set_sub_code_object $P4466, $P118
    .const '' $P4467 = "127_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 114
    set_sub_code_object $P4467, $P118
    .const '' $P4468 = "128_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 115
    set_sub_code_object $P4468, $P118
    .const '' $P4469 = "129_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 116
    set_sub_code_object $P4469, $P118
    .const '' $P4470 = "130_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 117
    set_sub_code_object $P4470, $P118
    .const '' $P4471 = "131_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 118
    set_sub_code_object $P4471, $P118
    .const '' $P4472 = "132_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 119
    set_sub_code_object $P4472, $P118
    .const '' $P4473 = "133_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 120
    set_sub_code_object $P4473, $P118
    .const '' $P4474 = "135_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 121
    set_sub_code_object $P4474, $P118
    .const '' $P4475 = "136_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 122
    set_sub_code_object $P4475, $P118
    .const '' $P4476 = "137_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 123
    set_sub_code_object $P4476, $P118
    .const '' $P4477 = "138_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 124
    set_sub_code_object $P4477, $P118
    .const '' $P4478 = "139_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 125
    set_sub_code_object $P4478, $P118
    .const '' $P4479 = "140_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 126
    set_sub_code_object $P4479, $P118
    .const '' $P4480 = "141_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 127
    set_sub_code_object $P4480, $P118
    .const '' $P4481 = "142_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 128
    set_sub_code_object $P4481, $P118
    .const '' $P4482 = "143_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 129
    set_sub_code_object $P4482, $P118
    .const '' $P4483 = "144_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 130
    set_sub_code_object $P4483, $P118
    .const '' $P4484 = "145_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 131
    set_sub_code_object $P4484, $P118
    .const '' $P4485 = "146_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 132
    set_sub_code_object $P4485, $P118
    .const '' $P4486 = "147_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 133
    set_sub_code_object $P4486, $P118
    .const '' $P4487 = "148_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 134
    set_sub_code_object $P4487, $P118
    .const '' $P4488 = "149_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 135
    set_sub_code_object $P4488, $P118
    .const '' $P4489 = "150_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 136
    set_sub_code_object $P4489, $P118
    .const '' $P4490 = "151_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 137
    set_sub_code_object $P4490, $P118
    .const '' $P4491 = "152_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 138
    set_sub_code_object $P4491, $P118
    .const '' $P4492 = "153_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 139
    set_sub_code_object $P4492, $P118
    .const '' $P4493 = "154_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 140
    set_sub_code_object $P4493, $P118
    .const '' $P4494 = "155_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 141
    set_sub_code_object $P4494, $P118
    .const '' $P4495 = "156_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 142
    set_sub_code_object $P4495, $P118
    .const '' $P4496 = "157_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 143
    set_sub_code_object $P4496, $P118
    .const '' $P4497 = "158_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 144
    set_sub_code_object $P4497, $P118
    .const '' $P4498 = "159_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 145
    set_sub_code_object $P4498, $P118
    .const '' $P4499 = "160_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 146
    set_sub_code_object $P4499, $P118
    .const '' $P4500 = "161_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 147
    set_sub_code_object $P4500, $P118
    .const '' $P4501 = "162_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 148
    set_sub_code_object $P4501, $P118
    .const '' $P4502 = "163_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 149
    set_sub_code_object $P4502, $P118
    .const '' $P4503 = "164_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 150
    set_sub_code_object $P4503, $P118
    .const '' $P4504 = "165_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 151
    set_sub_code_object $P4504, $P118
    .const '' $P4505 = "166_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 152
    set_sub_code_object $P4505, $P118
    .const '' $P4506 = "167_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 153
    set_sub_code_object $P4506, $P118
    .const '' $P4507 = "168_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 154
    set_sub_code_object $P4507, $P118
    .const '' $P4508 = "169_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 155
    set_sub_code_object $P4508, $P118
    .const '' $P4509 = "170_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 156
    set_sub_code_object $P4509, $P118
    .const '' $P4510 = "171_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 157
    set_sub_code_object $P4510, $P118
    .const '' $P4511 = "172_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 158
    set_sub_code_object $P4511, $P118
    .const '' $P4512 = "173_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 159
    set_sub_code_object $P4512, $P118
    .const '' $P4513 = "174_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 160
    set_sub_code_object $P4513, $P118
    .const '' $P4514 = "175_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 161
    set_sub_code_object $P4514, $P118
    .const '' $P4515 = "176_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 162
    set_sub_code_object $P4515, $P118
    .const '' $P4516 = "177_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 163
    set_sub_code_object $P4516, $P118
    .const '' $P4517 = "178_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 164
    set_sub_code_object $P4517, $P118
    .const '' $P4518 = "179_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 165
    set_sub_code_object $P4518, $P118
    .const '' $P4519 = "180_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 166
    set_sub_code_object $P4519, $P118
    .const '' $P4520 = "181_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 167
    set_sub_code_object $P4520, $P118
    .const '' $P4521 = "182_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 168
    set_sub_code_object $P4521, $P118
    .const '' $P4522 = "183_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 169
    set_sub_code_object $P4522, $P118
    .const '' $P4523 = "184_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 170
    set_sub_code_object $P4523, $P118
    .const '' $P4524 = "185_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 171
    set_sub_code_object $P4524, $P118
    .const '' $P4525 = "186_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 172
    set_sub_code_object $P4525, $P118
    .const '' $P4526 = "187_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 173
    set_sub_code_object $P4526, $P118
    .const '' $P4527 = "188_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 174
    set_sub_code_object $P4527, $P118
    .const '' $P4528 = "189_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 175
    set_sub_code_object $P4528, $P118
    .const '' $P4529 = "190_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 176
    set_sub_code_object $P4529, $P118
    .const '' $P4530 = "191_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 177
    set_sub_code_object $P4530, $P118
    .const '' $P4531 = "192_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 178
    set_sub_code_object $P4531, $P118
    .const '' $P4532 = "193_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 179
    set_sub_code_object $P4532, $P118
    .const '' $P4533 = "194_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 180
    set_sub_code_object $P4533, $P118
    .const '' $P4534 = "195_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 181
    set_sub_code_object $P4534, $P118
    .const '' $P4535 = "196_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 182
    set_sub_code_object $P4535, $P118
    .const '' $P4536 = "197_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 183
    set_sub_code_object $P4536, $P118
    .const '' $P4537 = "198_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 184
    set_sub_code_object $P4537, $P118
    .const '' $P4538 = "199_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 185
    set_sub_code_object $P4538, $P118
    .const '' $P4539 = "200_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 186
    set_sub_code_object $P4539, $P118
    .const '' $P4540 = "201_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 187
    set_sub_code_object $P4540, $P118
    .const '' $P4541 = "202_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 188
    set_sub_code_object $P4541, $P118
    .const '' $P4542 = "203_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 189
    set_sub_code_object $P4542, $P118
    .const '' $P4543 = "204_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 190
    set_sub_code_object $P4543, $P118
    .const '' $P4544 = "205_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 191
    set_sub_code_object $P4544, $P118
    .const '' $P4545 = "206_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 192
    set_sub_code_object $P4545, $P118
    .const '' $P4546 = "207_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 193
    set_sub_code_object $P4546, $P118
    .const '' $P4547 = "208_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 194
    set_sub_code_object $P4547, $P118
    .const '' $P4548 = "209_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 195
    set_sub_code_object $P4548, $P118
    .const '' $P4549 = "210_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 196
    set_sub_code_object $P4549, $P118
    .const '' $P4550 = "211_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 197
    set_sub_code_object $P4550, $P118
    .const '' $P4551 = "212_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 198
    set_sub_code_object $P4551, $P118
    .const '' $P4552 = "213_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 199
    set_sub_code_object $P4552, $P118
    .const '' $P4553 = "214_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 200
    set_sub_code_object $P4553, $P118
    .const '' $P4554 = "215_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 201
    set_sub_code_object $P4554, $P118
    .const '' $P4555 = "216_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 202
    set_sub_code_object $P4555, $P118
    .const '' $P4556 = "217_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 203
    set_sub_code_object $P4556, $P118
    .const '' $P4557 = "218_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 204
    set_sub_code_object $P4557, $P118
    .const '' $P4558 = "219_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 205
    set_sub_code_object $P4558, $P118
    .const '' $P4559 = "220_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 206
    set_sub_code_object $P4559, $P118
    .const '' $P4560 = "221_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 207
    set_sub_code_object $P4560, $P118
    .const '' $P4561 = "222_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 208
    set_sub_code_object $P4561, $P118
    .const '' $P4562 = "223_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 209
    set_sub_code_object $P4562, $P118
    .const '' $P4563 = "224_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 210
    set_sub_code_object $P4563, $P118
    .const '' $P4564 = "225_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 211
    set_sub_code_object $P4564, $P118
    .const '' $P4565 = "226_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 212
    set_sub_code_object $P4565, $P118
    .const '' $P4566 = "227_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 213
    set_sub_code_object $P4566, $P118
    .const '' $P4567 = "228_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 214
    set_sub_code_object $P4567, $P118
    .const '' $P4568 = "229_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 215
    set_sub_code_object $P4568, $P118
    .const 'LexInfo' $P4569 = "398_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 32
    $P4569."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4570 = "398_1338064451.944" 
    $P4570."finish_static_lexpad"()
    .const 'LexInfo' $P4571 = "398_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 32
    $P4571."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4572 = "398_1338064451.944" 
    $P4572."finish_static_lexpad"()
    .const '' $P4573 = "231_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 217
    set_sub_code_object $P4573, $P118
    .const '' $P4574 = "232_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 218
    set_sub_code_object $P4574, $P118
    .const '' $P4575 = "234_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 219
    set_sub_code_object $P4575, $P118
    .const '' $P4576 = "235_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 220
    set_sub_code_object $P4576, $P118
    .const '' $P4577 = "238_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 221
    set_sub_code_object $P4577, $P118
    .const '' $P4578 = "241_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 222
    set_sub_code_object $P4578, $P118
    .const '' $P4579 = "243_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 223
    set_sub_code_object $P4579, $P118
    .const '' $P4580 = "245_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 224
    set_sub_code_object $P4580, $P118
    .const '' $P4581 = "246_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 225
    set_sub_code_object $P4581, $P118
    .const '' $P4582 = "247_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 226
    set_sub_code_object $P4582, $P118
    .const 'LexInfo' $P4583 = "749_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 216
    $P4583."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4584 = "749_1338064451.944" 
    $P4584."finish_static_lexpad"()
    .const 'LexInfo' $P4585 = "749_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 216
    $P4585."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4586 = "749_1338064451.944" 
    $P4586."finish_static_lexpad"()
    .const '' $P4587 = "248_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 228
    set_sub_code_object $P4587, $P118
    .const '' $P4588 = "249_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 229
    set_sub_code_object $P4588, $P118
    .const '' $P4589 = "250_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 230
    set_sub_code_object $P4589, $P118
    .const '' $P4590 = "251_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 231
    set_sub_code_object $P4590, $P118
    .const '' $P4591 = "252_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 232
    set_sub_code_object $P4591, $P118
    .const '' $P4592 = "253_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 233
    set_sub_code_object $P4592, $P118
    .const '' $P4593 = "254_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 234
    set_sub_code_object $P4593, $P118
    .const '' $P4594 = "255_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 235
    set_sub_code_object $P4594, $P118
    .const '' $P4595 = "256_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 236
    set_sub_code_object $P4595, $P118
    .const '' $P4596 = "257_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 237
    set_sub_code_object $P4596, $P118
    .const '' $P4597 = "258_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 238
    set_sub_code_object $P4597, $P118
    .const '' $P4598 = "259_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 239
    set_sub_code_object $P4598, $P118
    .const '' $P4599 = "260_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 240
    set_sub_code_object $P4599, $P118
    .const '' $P4600 = "261_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 241
    set_sub_code_object $P4600, $P118
    .const '' $P4601 = "262_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 242
    set_sub_code_object $P4601, $P118
    .const '' $P4602 = "263_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 243
    set_sub_code_object $P4602, $P118
    .const '' $P4603 = "264_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 244
    set_sub_code_object $P4603, $P118
    .const '' $P4604 = "265_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 245
    set_sub_code_object $P4604, $P118
    .const '' $P4605 = "266_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 246
    set_sub_code_object $P4605, $P118
    .const '' $P4606 = "267_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 247
    set_sub_code_object $P4606, $P118
    .const '' $P4607 = "268_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 248
    set_sub_code_object $P4607, $P118
    .const '' $P4608 = "269_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 249
    set_sub_code_object $P4608, $P118
    .const '' $P4609 = "270_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 250
    set_sub_code_object $P4609, $P118
    .const '' $P4610 = "271_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 251
    set_sub_code_object $P4610, $P118
    .const '' $P4611 = "272_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 252
    set_sub_code_object $P4611, $P118
    .const '' $P4612 = "273_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 253
    set_sub_code_object $P4612, $P118
    .const '' $P4613 = "274_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 254
    set_sub_code_object $P4613, $P118
    .const '' $P4614 = "275_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 255
    set_sub_code_object $P4614, $P118
    .const '' $P4615 = "276_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 256
    set_sub_code_object $P4615, $P118
    .const '' $P4616 = "277_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 257
    set_sub_code_object $P4616, $P118
    .const '' $P4617 = "278_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 258
    set_sub_code_object $P4617, $P118
    .const '' $P4618 = "279_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 259
    set_sub_code_object $P4618, $P118
    .const '' $P4619 = "280_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 260
    set_sub_code_object $P4619, $P118
    .const '' $P4620 = "281_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 261
    set_sub_code_object $P4620, $P118
    .const '' $P4621 = "282_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 262
    set_sub_code_object $P4621, $P118
    .const '' $P4622 = "283_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 263
    set_sub_code_object $P4622, $P118
    .const '' $P4623 = "284_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 264
    set_sub_code_object $P4623, $P118
    .const '' $P4624 = "285_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 265
    set_sub_code_object $P4624, $P118
    .const '' $P4625 = "286_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 266
    set_sub_code_object $P4625, $P118
    .const '' $P4626 = "287_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 267
    set_sub_code_object $P4626, $P118
    .const '' $P4627 = "288_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 268
    set_sub_code_object $P4627, $P118
    .const '' $P4628 = "289_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 269
    set_sub_code_object $P4628, $P118
    .const '' $P4629 = "290_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 270
    set_sub_code_object $P4629, $P118
    .const '' $P4630 = "291_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 271
    set_sub_code_object $P4630, $P118
    .const '' $P4631 = "292_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 272
    set_sub_code_object $P4631, $P118
    .const '' $P4632 = "293_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 273
    set_sub_code_object $P4632, $P118
    .const '' $P4633 = "294_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 274
    set_sub_code_object $P4633, $P118
    .const '' $P4634 = "295_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 275
    set_sub_code_object $P4634, $P118
    .const '' $P4635 = "296_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 276
    set_sub_code_object $P4635, $P118
    .const '' $P4636 = "297_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 277
    set_sub_code_object $P4636, $P118
    .const '' $P4637 = "298_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 278
    set_sub_code_object $P4637, $P118
    .const '' $P4638 = "299_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 279
    set_sub_code_object $P4638, $P118
    .const '' $P4639 = "300_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 280
    set_sub_code_object $P4639, $P118
    .const '' $P4640 = "301_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 281
    set_sub_code_object $P4640, $P118
    .const '' $P4641 = "302_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 282
    set_sub_code_object $P4641, $P118
    .const '' $P4642 = "303_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 283
    set_sub_code_object $P4642, $P118
    .const '' $P4643 = "304_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 284
    set_sub_code_object $P4643, $P118
    .const '' $P4644 = "305_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 285
    set_sub_code_object $P4644, $P118
    .const '' $P4645 = "306_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 286
    set_sub_code_object $P4645, $P118
    .const '' $P4646 = "307_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 287
    set_sub_code_object $P4646, $P118
    .const '' $P4647 = "308_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 288
    set_sub_code_object $P4647, $P118
    .const '' $P4648 = "309_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 289
    set_sub_code_object $P4648, $P118
    .const '' $P4649 = "310_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 290
    set_sub_code_object $P4649, $P118
    .const '' $P4650 = "311_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 291
    set_sub_code_object $P4650, $P118
    .const '' $P4651 = "312_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 292
    set_sub_code_object $P4651, $P118
    .const '' $P4652 = "313_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 293
    set_sub_code_object $P4652, $P118
    .const '' $P4653 = "314_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 294
    set_sub_code_object $P4653, $P118
    .const '' $P4654 = "315_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 295
    set_sub_code_object $P4654, $P118
    .const '' $P4655 = "316_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 296
    set_sub_code_object $P4655, $P118
    .const '' $P4656 = "317_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 297
    set_sub_code_object $P4656, $P118
    .const '' $P4657 = "318_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 298
    set_sub_code_object $P4657, $P118
    .const '' $P4658 = "319_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 299
    set_sub_code_object $P4658, $P118
    .const '' $P4659 = "320_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 300
    set_sub_code_object $P4659, $P118
    .const '' $P4660 = "321_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 301
    set_sub_code_object $P4660, $P118
    .const '' $P4661 = "322_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 302
    set_sub_code_object $P4661, $P118
    .const '' $P4662 = "323_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 303
    set_sub_code_object $P4662, $P118
    .const '' $P4663 = "324_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 304
    set_sub_code_object $P4663, $P118
    .const '' $P4664 = "325_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 305
    set_sub_code_object $P4664, $P118
    .const '' $P4665 = "326_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 306
    set_sub_code_object $P4665, $P118
    .const '' $P4666 = "327_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 307
    set_sub_code_object $P4666, $P118
    .const '' $P4667 = "328_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 308
    set_sub_code_object $P4667, $P118
    .const '' $P4668 = "329_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 309
    set_sub_code_object $P4668, $P118
    .const '' $P4669 = "330_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 310
    set_sub_code_object $P4669, $P118
    .const '' $P4670 = "331_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 311
    set_sub_code_object $P4670, $P118
    .const '' $P4671 = "332_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 312
    set_sub_code_object $P4671, $P118
    .const '' $P4672 = "333_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 313
    set_sub_code_object $P4672, $P118
    .const '' $P4673 = "334_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 314
    set_sub_code_object $P4673, $P118
    .const '' $P4674 = "335_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 315
    set_sub_code_object $P4674, $P118
    .const '' $P4675 = "336_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 316
    set_sub_code_object $P4675, $P118
    .const '' $P4676 = "337_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 317
    set_sub_code_object $P4676, $P118
    .const '' $P4677 = "338_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 318
    set_sub_code_object $P4677, $P118
    .const '' $P4678 = "339_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 319
    set_sub_code_object $P4678, $P118
    .const '' $P4679 = "340_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 320
    set_sub_code_object $P4679, $P118
    .const '' $P4680 = "341_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 321
    set_sub_code_object $P4680, $P118
    .const '' $P4681 = "342_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 322
    set_sub_code_object $P4681, $P118
    .const '' $P4682 = "343_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 323
    set_sub_code_object $P4682, $P118
    .const '' $P4683 = "344_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 324
    set_sub_code_object $P4683, $P118
    .const '' $P4684 = "345_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 325
    set_sub_code_object $P4684, $P118
    .const '' $P4685 = "346_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 326
    set_sub_code_object $P4685, $P118
    .const '' $P4686 = "347_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 327
    set_sub_code_object $P4686, $P118
    .const '' $P4687 = "348_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 328
    set_sub_code_object $P4687, $P118
    .const '' $P4688 = "349_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 329
    set_sub_code_object $P4688, $P118
    .const '' $P4689 = "350_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 330
    set_sub_code_object $P4689, $P118
    .const '' $P4690 = "351_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 331
    set_sub_code_object $P4690, $P118
    .const '' $P4691 = "352_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 332
    set_sub_code_object $P4691, $P118
    .const '' $P4692 = "353_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 333
    set_sub_code_object $P4692, $P118
    .const '' $P4693 = "354_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 334
    set_sub_code_object $P4693, $P118
    .const '' $P4694 = "355_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 335
    set_sub_code_object $P4694, $P118
    .const '' $P4695 = "356_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 336
    set_sub_code_object $P4695, $P118
    .const '' $P4696 = "357_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 337
    set_sub_code_object $P4696, $P118
    .const '' $P4697 = "358_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 338
    set_sub_code_object $P4697, $P118
    .const '' $P4698 = "359_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 339
    set_sub_code_object $P4698, $P118
    .const '' $P4699 = "360_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 340
    set_sub_code_object $P4699, $P118
    .const 'LexInfo' $P4700 = "786_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 227
    $P4700."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4701 = "786_1338064451.944" 
    $P4701."finish_static_lexpad"()
    .const 'LexInfo' $P4702 = "786_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 227
    $P4702."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4703 = "786_1338064451.944" 
    $P4703."finish_static_lexpad"()
    .const '' $P4704 = "361_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 342
    set_sub_code_object $P4704, $P118
    .const '' $P4705 = "362_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 343
    set_sub_code_object $P4705, $P118
    .const '' $P4706 = "363_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 344
    set_sub_code_object $P4706, $P118
    .const '' $P4707 = "364_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 345
    set_sub_code_object $P4707, $P118
    .const '' $P4708 = "365_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 346
    set_sub_code_object $P4708, $P118
    .const '' $P4709 = "366_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 347
    set_sub_code_object $P4709, $P118
    .const '' $P4710 = "367_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 348
    set_sub_code_object $P4710, $P118
    .const 'LexInfo' $P4711 = "845_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 341
    $P4711."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4712 = "845_1338064451.944" 
    $P4712."finish_static_lexpad"()
    .const 'LexInfo' $P4713 = "845_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 341
    $P4713."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4714 = "845_1338064451.944" 
    $P4714."finish_static_lexpad"()
    .const 'LexInfo' $P4715 = "846_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 349
    $P4715."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4716 = "846_1338064451.944" 
    $P4716."finish_static_lexpad"()
    .const 'LexInfo' $P4717 = "846_1338064451.944" 
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 349
    $P4717."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4718 = "846_1338064451.944" 
    $P4718."finish_static_lexpad"()
    nqp_get_sc_object $P118, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 0
    set_hll_global "GLOBAL", $P118
.end


.HLL "nqp"

.namespace []
.sub "_block4003"  :anon :subid("848_1338064451.944") :outer("368_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P4005 = "10_1338064451.944" 
    .const 'Sub' $P4006 = "11_1338064451.944" 
    .const 'Sub' $P4007 = "12_1338064451.944" 
    .const 'Sub' $P4008 = "13_1338064451.944" 
    .const 'Sub' $P4009 = "14_1338064451.944" 
    .const 'Sub' $P4010 = "15_1338064451.944" 
    .const 'Sub' $P4011 = "16_1338064451.944" 
    .const 'Sub' $P4012 = "17_1338064451.944" 
    .const 'Sub' $P4013 = "18_1338064451.944" 
    .const 'Sub' $P4014 = "19_1338064451.944" 
    .const 'Sub' $P4015 = "20_1338064451.944" 
    .const 'Sub' $P4016 = "21_1338064451.944" 
    .const 'Sub' $P4017 = "22_1338064451.944" 
    .const 'Sub' $P4018 = "23_1338064451.944" 
    .const 'Sub' $P4019 = "24_1338064451.944" 
    .const 'Sub' $P4020 = "25_1338064451.944" 
    .const 'Sub' $P4021 = "26_1338064451.944" 
    .const 'Sub' $P4022 = "27_1338064451.944" 
    .const 'Sub' $P4023 = "28_1338064451.944" 
    .const 'Sub' $P4024 = "29_1338064451.944" 
    .const 'Sub' $P4025 = "30_1338064451.944" 
    .const 'Sub' $P4026 = "31_1338064451.944" 
    .const 'Sub' $P4027 = "32_1338064451.944" 
    .const 'Sub' $P4028 = "33_1338064451.944" 
    .const 'Sub' $P4029 = "34_1338064451.944" 
    .const 'Sub' $P4030 = "35_1338064451.944" 
    .const 'Sub' $P4031 = "36_1338064451.944" 
    .const 'Sub' $P4032 = "37_1338064451.944" 
    .const 'Sub' $P4033 = "38_1338064451.944" 
    .const 'Sub' $P4034 = "39_1338064451.944" 
    .const 'Sub' $P4035 = "40_1338064451.944" 
    .const 'Sub' $P4036 = "41_1338064451.944" 
    .const 'Sub' $P4037 = "42_1338064451.944" 
    .const 'Sub' $P4038 = "43_1338064451.944" 
    .const 'Sub' $P4039 = "44_1338064451.944" 
    .const 'Sub' $P4040 = "45_1338064451.944" 
    .const 'Sub' $P4041 = "47_1338064451.944" 
    .const 'Sub' $P4042 = "49_1338064451.944" 
    .const 'Sub' $P4043 = "50_1338064451.944" 
    .const 'Sub' $P4044 = "51_1338064451.944" 
    .const 'Sub' $P4045 = "53_1338064451.944" 
    .const 'Sub' $P4046 = "54_1338064451.944" 
    .const 'Sub' $P4047 = "55_1338064451.944" 
    .const 'Sub' $P4048 = "56_1338064451.944" 
    .const 'Sub' $P4049 = "57_1338064451.944" 
    .const 'Sub' $P4050 = "58_1338064451.944" 
    .const 'Sub' $P4051 = "59_1338064451.944" 
    .const 'Sub' $P4052 = "60_1338064451.944" 
    .const 'Sub' $P4053 = "61_1338064451.944" 
    .const 'Sub' $P4054 = "62_1338064451.944" 
    .const 'Sub' $P4055 = "63_1338064451.944" 
    .const 'Sub' $P4056 = "64_1338064451.944" 
    .const 'Sub' $P4057 = "65_1338064451.944" 
    .const 'Sub' $P4058 = "66_1338064451.944" 
    .const 'Sub' $P4059 = "67_1338064451.944" 
    .const 'Sub' $P4060 = "68_1338064451.944" 
    .const 'Sub' $P4061 = "69_1338064451.944" 
    .const 'Sub' $P4062 = "70_1338064451.944" 
    .const 'Sub' $P4063 = "72_1338064451.944" 
    .const 'Sub' $P4064 = "73_1338064451.944" 
    .const 'Sub' $P4065 = "74_1338064451.944" 
    .const 'Sub' $P4066 = "75_1338064451.944" 
    .const 'Sub' $P4067 = "76_1338064451.944" 
    .const 'Sub' $P4068 = "77_1338064451.944" 
    .const 'Sub' $P4069 = "78_1338064451.944" 
    .const 'Sub' $P4070 = "79_1338064451.944" 
    .const 'Sub' $P4071 = "80_1338064451.944" 
    .const 'Sub' $P4072 = "81_1338064451.944" 
    .const 'Sub' $P4073 = "82_1338064451.944" 
    .const 'Sub' $P4074 = "83_1338064451.944" 
    .const 'Sub' $P4075 = "84_1338064451.944" 
    .const 'Sub' $P4076 = "85_1338064451.944" 
    .const 'Sub' $P4077 = "86_1338064451.944" 
    .const 'Sub' $P4078 = "87_1338064451.944" 
    .const 'Sub' $P4079 = "88_1338064451.944" 
    .const 'Sub' $P4080 = "89_1338064451.944" 
    .const 'Sub' $P4081 = "90_1338064451.944" 
    .const 'Sub' $P4082 = "91_1338064451.944" 
    .const 'Sub' $P4083 = "92_1338064451.944" 
    .const 'Sub' $P4084 = "93_1338064451.944" 
    .const 'Sub' $P4085 = "94_1338064451.944" 
    .const 'Sub' $P4086 = "95_1338064451.944" 
    .const 'Sub' $P4087 = "98_1338064451.944" 
    .const 'Sub' $P4088 = "99_1338064451.944" 
    .const 'Sub' $P4089 = "100_1338064451.944" 
    .const 'Sub' $P4090 = "101_1338064451.944" 
    .const 'Sub' $P4091 = "102_1338064451.944" 
    .const 'Sub' $P4092 = "103_1338064451.944" 
    .const 'Sub' $P4093 = "104_1338064451.944" 
    .const 'Sub' $P4094 = "105_1338064451.944" 
    .const 'Sub' $P4095 = "106_1338064451.944" 
    .const 'Sub' $P4096 = "107_1338064451.944" 
    .const 'Sub' $P4097 = "108_1338064451.944" 
    .const 'Sub' $P4098 = "109_1338064451.944" 
    .const 'Sub' $P4099 = "110_1338064451.944" 
    .const 'Sub' $P4100 = "111_1338064451.944" 
    .const 'Sub' $P4101 = "112_1338064451.944" 
    .const 'Sub' $P4102 = "113_1338064451.944" 
    .const 'Sub' $P4103 = "114_1338064451.944" 
    .const 'Sub' $P4104 = "115_1338064451.944" 
    .const 'Sub' $P4105 = "116_1338064451.944" 
    .const 'Sub' $P4106 = "117_1338064451.944" 
    .const 'Sub' $P4107 = "118_1338064451.944" 
    .const 'Sub' $P4108 = "119_1338064451.944" 
    .const 'Sub' $P4109 = "120_1338064451.944" 
    .const 'Sub' $P4110 = "121_1338064451.944" 
    .const 'Sub' $P4111 = "122_1338064451.944" 
    .const 'Sub' $P4112 = "123_1338064451.944" 
    .const 'Sub' $P4113 = "124_1338064451.944" 
    .const 'Sub' $P4114 = "125_1338064451.944" 
    .const 'Sub' $P4115 = "126_1338064451.944" 
    .const 'Sub' $P4116 = "127_1338064451.944" 
    .const 'Sub' $P4117 = "128_1338064451.944" 
    .const 'Sub' $P4118 = "129_1338064451.944" 
    .const 'Sub' $P4119 = "130_1338064451.944" 
    .const 'Sub' $P4120 = "131_1338064451.944" 
    .const 'Sub' $P4121 = "132_1338064451.944" 
    .const 'Sub' $P4122 = "133_1338064451.944" 
    .const 'Sub' $P4123 = "135_1338064451.944" 
    .const 'Sub' $P4124 = "136_1338064451.944" 
    .const 'Sub' $P4125 = "137_1338064451.944" 
    .const 'Sub' $P4126 = "138_1338064451.944" 
    .const 'Sub' $P4127 = "139_1338064451.944" 
    .const 'Sub' $P4128 = "140_1338064451.944" 
    .const 'Sub' $P4129 = "141_1338064451.944" 
    .const 'Sub' $P4130 = "142_1338064451.944" 
    .const 'Sub' $P4131 = "143_1338064451.944" 
    .const 'Sub' $P4132 = "144_1338064451.944" 
    .const 'Sub' $P4133 = "145_1338064451.944" 
    .const 'Sub' $P4134 = "146_1338064451.944" 
    .const 'Sub' $P4135 = "147_1338064451.944" 
    .const 'Sub' $P4136 = "148_1338064451.944" 
    .const 'Sub' $P4137 = "149_1338064451.944" 
    .const 'Sub' $P4138 = "150_1338064451.944" 
    .const 'Sub' $P4139 = "151_1338064451.944" 
    .const 'Sub' $P4140 = "152_1338064451.944" 
    .const 'Sub' $P4141 = "153_1338064451.944" 
    .const 'Sub' $P4142 = "154_1338064451.944" 
    .const 'Sub' $P4143 = "155_1338064451.944" 
    .const 'Sub' $P4144 = "156_1338064451.944" 
    .const 'Sub' $P4145 = "157_1338064451.944" 
    .const 'Sub' $P4146 = "158_1338064451.944" 
    .const 'Sub' $P4147 = "159_1338064451.944" 
    .const 'Sub' $P4148 = "160_1338064451.944" 
    .const 'Sub' $P4149 = "161_1338064451.944" 
    .const 'Sub' $P4150 = "162_1338064451.944" 
    .const 'Sub' $P4151 = "163_1338064451.944" 
    .const 'Sub' $P4152 = "164_1338064451.944" 
    .const 'Sub' $P4153 = "165_1338064451.944" 
    .const 'Sub' $P4154 = "166_1338064451.944" 
    .const 'Sub' $P4155 = "167_1338064451.944" 
    .const 'Sub' $P4156 = "168_1338064451.944" 
    .const 'Sub' $P4157 = "169_1338064451.944" 
    .const 'Sub' $P4158 = "170_1338064451.944" 
    .const 'Sub' $P4159 = "171_1338064451.944" 
    .const 'Sub' $P4160 = "172_1338064451.944" 
    .const 'Sub' $P4161 = "173_1338064451.944" 
    .const 'Sub' $P4162 = "174_1338064451.944" 
    .const 'Sub' $P4163 = "175_1338064451.944" 
    .const 'Sub' $P4164 = "176_1338064451.944" 
    .const 'Sub' $P4165 = "177_1338064451.944" 
    .const 'Sub' $P4166 = "178_1338064451.944" 
    .const 'Sub' $P4167 = "179_1338064451.944" 
    .const 'Sub' $P4168 = "180_1338064451.944" 
    .const 'Sub' $P4169 = "181_1338064451.944" 
    .const 'Sub' $P4170 = "182_1338064451.944" 
    .const 'Sub' $P4171 = "183_1338064451.944" 
    .const 'Sub' $P4172 = "184_1338064451.944" 
    .const 'Sub' $P4173 = "185_1338064451.944" 
    .const 'Sub' $P4174 = "186_1338064451.944" 
    .const 'Sub' $P4175 = "187_1338064451.944" 
    .const 'Sub' $P4176 = "188_1338064451.944" 
    .const 'Sub' $P4177 = "189_1338064451.944" 
    .const 'Sub' $P4178 = "190_1338064451.944" 
    .const 'Sub' $P4179 = "191_1338064451.944" 
    .const 'Sub' $P4180 = "192_1338064451.944" 
    .const 'Sub' $P4181 = "193_1338064451.944" 
    .const 'Sub' $P4182 = "194_1338064451.944" 
    .const 'Sub' $P4183 = "195_1338064451.944" 
    .const 'Sub' $P4184 = "196_1338064451.944" 
    .const 'Sub' $P4185 = "197_1338064451.944" 
    .const 'Sub' $P4186 = "198_1338064451.944" 
    .const 'Sub' $P4187 = "199_1338064451.944" 
    .const 'Sub' $P4188 = "200_1338064451.944" 
    .const 'Sub' $P4189 = "201_1338064451.944" 
    .const 'Sub' $P4190 = "202_1338064451.944" 
    .const 'Sub' $P4191 = "203_1338064451.944" 
    .const 'Sub' $P4192 = "204_1338064451.944" 
    .const 'Sub' $P4193 = "205_1338064451.944" 
    .const 'Sub' $P4194 = "206_1338064451.944" 
    .const 'Sub' $P4195 = "207_1338064451.944" 
    .const 'Sub' $P4196 = "208_1338064451.944" 
    .const 'Sub' $P4197 = "209_1338064451.944" 
    .const 'Sub' $P4198 = "210_1338064451.944" 
    .const 'Sub' $P4199 = "211_1338064451.944" 
    .const 'Sub' $P4200 = "212_1338064451.944" 
    .const 'Sub' $P4201 = "213_1338064451.944" 
    .const 'Sub' $P4202 = "214_1338064451.944" 
    .const 'Sub' $P4203 = "215_1338064451.944" 
    .const 'Sub' $P4204 = "216_1338064451.944" 
    .const 'Sub' $P4205 = "217_1338064451.944" 
    .const 'Sub' $P4206 = "218_1338064451.944" 
    .const 'Sub' $P4207 = "219_1338064451.944" 
    .const 'Sub' $P4208 = "220_1338064451.944" 
    .const 'Sub' $P4209 = "221_1338064451.944" 
    .const 'Sub' $P4210 = "222_1338064451.944" 
    .const 'Sub' $P4211 = "223_1338064451.944" 
    .const 'Sub' $P4212 = "224_1338064451.944" 
    .const 'Sub' $P4213 = "225_1338064451.944" 
    .const 'Sub' $P4214 = "226_1338064451.944" 
    .const 'Sub' $P4215 = "227_1338064451.944" 
    .const 'Sub' $P4216 = "228_1338064451.944" 
    .const 'Sub' $P4217 = "229_1338064451.944" 
    .const 'Sub' $P4218 = "231_1338064451.944" 
    .const 'Sub' $P4219 = "232_1338064451.944" 
    .const 'Sub' $P4220 = "234_1338064451.944" 
    .const 'Sub' $P4221 = "235_1338064451.944" 
    .const 'Sub' $P4222 = "238_1338064451.944" 
    .const 'Sub' $P4223 = "241_1338064451.944" 
    .const 'Sub' $P4224 = "243_1338064451.944" 
    .const 'Sub' $P4225 = "245_1338064451.944" 
    .const 'Sub' $P4226 = "246_1338064451.944" 
    .const 'Sub' $P4227 = "247_1338064451.944" 
    .const 'Sub' $P4228 = "248_1338064451.944" 
    .const 'Sub' $P4229 = "249_1338064451.944" 
    .const 'Sub' $P4230 = "250_1338064451.944" 
    .const 'Sub' $P4231 = "251_1338064451.944" 
    .const 'Sub' $P4232 = "252_1338064451.944" 
    .const 'Sub' $P4233 = "253_1338064451.944" 
    .const 'Sub' $P4234 = "254_1338064451.944" 
    .const 'Sub' $P4235 = "255_1338064451.944" 
    .const 'Sub' $P4236 = "256_1338064451.944" 
    .const 'Sub' $P4237 = "257_1338064451.944" 
    .const 'Sub' $P4238 = "258_1338064451.944" 
    .const 'Sub' $P4239 = "259_1338064451.944" 
    .const 'Sub' $P4240 = "260_1338064451.944" 
    .const 'Sub' $P4241 = "261_1338064451.944" 
    .const 'Sub' $P4242 = "262_1338064451.944" 
    .const 'Sub' $P4243 = "263_1338064451.944" 
    .const 'Sub' $P4244 = "264_1338064451.944" 
    .const 'Sub' $P4245 = "265_1338064451.944" 
    .const 'Sub' $P4246 = "266_1338064451.944" 
    .const 'Sub' $P4247 = "267_1338064451.944" 
    .const 'Sub' $P4248 = "268_1338064451.944" 
    .const 'Sub' $P4249 = "269_1338064451.944" 
    .const 'Sub' $P4250 = "270_1338064451.944" 
    .const 'Sub' $P4251 = "271_1338064451.944" 
    .const 'Sub' $P4252 = "272_1338064451.944" 
    .const 'Sub' $P4253 = "273_1338064451.944" 
    .const 'Sub' $P4254 = "274_1338064451.944" 
    .const 'Sub' $P4255 = "275_1338064451.944" 
    .const 'Sub' $P4256 = "276_1338064451.944" 
    .const 'Sub' $P4257 = "277_1338064451.944" 
    .const 'Sub' $P4258 = "278_1338064451.944" 
    .const 'Sub' $P4259 = "279_1338064451.944" 
    .const 'Sub' $P4260 = "280_1338064451.944" 
    .const 'Sub' $P4261 = "281_1338064451.944" 
    .const 'Sub' $P4262 = "282_1338064451.944" 
    .const 'Sub' $P4263 = "283_1338064451.944" 
    .const 'Sub' $P4264 = "284_1338064451.944" 
    .const 'Sub' $P4265 = "285_1338064451.944" 
    .const 'Sub' $P4266 = "286_1338064451.944" 
    .const 'Sub' $P4267 = "287_1338064451.944" 
    .const 'Sub' $P4268 = "288_1338064451.944" 
    .const 'Sub' $P4269 = "289_1338064451.944" 
    .const 'Sub' $P4270 = "290_1338064451.944" 
    .const 'Sub' $P4271 = "291_1338064451.944" 
    .const 'Sub' $P4272 = "292_1338064451.944" 
    .const 'Sub' $P4273 = "293_1338064451.944" 
    .const 'Sub' $P4274 = "294_1338064451.944" 
    .const 'Sub' $P4275 = "295_1338064451.944" 
    .const 'Sub' $P4276 = "296_1338064451.944" 
    .const 'Sub' $P4277 = "297_1338064451.944" 
    .const 'Sub' $P4278 = "298_1338064451.944" 
    .const 'Sub' $P4279 = "299_1338064451.944" 
    .const 'Sub' $P4280 = "300_1338064451.944" 
    .const 'Sub' $P4281 = "301_1338064451.944" 
    .const 'Sub' $P4282 = "302_1338064451.944" 
    .const 'Sub' $P4283 = "303_1338064451.944" 
    .const 'Sub' $P4284 = "304_1338064451.944" 
    .const 'Sub' $P4285 = "305_1338064451.944" 
    .const 'Sub' $P4286 = "306_1338064451.944" 
    .const 'Sub' $P4287 = "307_1338064451.944" 
    .const 'Sub' $P4288 = "308_1338064451.944" 
    .const 'Sub' $P4289 = "309_1338064451.944" 
    .const 'Sub' $P4290 = "310_1338064451.944" 
    .const 'Sub' $P4291 = "311_1338064451.944" 
    .const 'Sub' $P4292 = "312_1338064451.944" 
    .const 'Sub' $P4293 = "313_1338064451.944" 
    .const 'Sub' $P4294 = "314_1338064451.944" 
    .const 'Sub' $P4295 = "315_1338064451.944" 
    .const 'Sub' $P4296 = "316_1338064451.944" 
    .const 'Sub' $P4297 = "317_1338064451.944" 
    .const 'Sub' $P4298 = "318_1338064451.944" 
    .const 'Sub' $P4299 = "319_1338064451.944" 
    .const 'Sub' $P4300 = "320_1338064451.944" 
    .const 'Sub' $P4301 = "321_1338064451.944" 
    .const 'Sub' $P4302 = "322_1338064451.944" 
    .const 'Sub' $P4303 = "323_1338064451.944" 
    .const 'Sub' $P4304 = "324_1338064451.944" 
    .const 'Sub' $P4305 = "325_1338064451.944" 
    .const 'Sub' $P4306 = "326_1338064451.944" 
    .const 'Sub' $P4307 = "327_1338064451.944" 
    .const 'Sub' $P4308 = "328_1338064451.944" 
    .const 'Sub' $P4309 = "329_1338064451.944" 
    .const 'Sub' $P4310 = "330_1338064451.944" 
    .const 'Sub' $P4311 = "331_1338064451.944" 
    .const 'Sub' $P4312 = "332_1338064451.944" 
    .const 'Sub' $P4313 = "333_1338064451.944" 
    .const 'Sub' $P4314 = "334_1338064451.944" 
    .const 'Sub' $P4315 = "335_1338064451.944" 
    .const 'Sub' $P4316 = "336_1338064451.944" 
    .const 'Sub' $P4317 = "337_1338064451.944" 
    .const 'Sub' $P4318 = "338_1338064451.944" 
    .const 'Sub' $P4319 = "339_1338064451.944" 
    .const 'Sub' $P4320 = "340_1338064451.944" 
    .const 'Sub' $P4321 = "341_1338064451.944" 
    .const 'Sub' $P4322 = "342_1338064451.944" 
    .const 'Sub' $P4323 = "343_1338064451.944" 
    .const 'Sub' $P4324 = "344_1338064451.944" 
    .const 'Sub' $P4325 = "345_1338064451.944" 
    .const 'Sub' $P4326 = "346_1338064451.944" 
    .const 'Sub' $P4327 = "347_1338064451.944" 
    .const 'Sub' $P4328 = "348_1338064451.944" 
    .const 'Sub' $P4329 = "349_1338064451.944" 
    .const 'Sub' $P4330 = "350_1338064451.944" 
    .const 'Sub' $P4331 = "351_1338064451.944" 
    .const 'Sub' $P4332 = "352_1338064451.944" 
    .const 'Sub' $P4333 = "353_1338064451.944" 
    .const 'Sub' $P4334 = "354_1338064451.944" 
    .const 'Sub' $P4335 = "355_1338064451.944" 
    .const 'Sub' $P4336 = "356_1338064451.944" 
    .const 'Sub' $P4337 = "357_1338064451.944" 
    .const 'Sub' $P4338 = "358_1338064451.944" 
    .const 'Sub' $P4339 = "359_1338064451.944" 
    .const 'Sub' $P4340 = "360_1338064451.944" 
    .const 'Sub' $P4341 = "361_1338064451.944" 
    .const 'Sub' $P4342 = "362_1338064451.944" 
    .const 'Sub' $P4343 = "363_1338064451.944" 
    .const 'Sub' $P4344 = "364_1338064451.944" 
    .const 'Sub' $P4345 = "365_1338064451.944" 
    .const 'Sub' $P4346 = "366_1338064451.944" 
    .const 'Sub' $P4347 = "367_1338064451.944" 
    new $P116, "ResizablePMCArray"
    push $P116, $P4005
    push $P116, $P4006
    push $P116, $P4007
    push $P116, $P4008
    push $P116, $P4009
    push $P116, $P4010
    push $P116, $P4011
    push $P116, $P4012
    push $P116, $P4013
    push $P116, $P4014
    push $P116, $P4015
    push $P116, $P4016
    push $P116, $P4017
    push $P116, $P4018
    push $P116, $P4019
    push $P116, $P4020
    push $P116, $P4021
    push $P116, $P4022
    push $P116, $P4023
    push $P116, $P4024
    push $P116, $P4025
    push $P116, $P4026
    push $P116, $P4027
    push $P116, $P4028
    push $P116, $P4029
    push $P116, $P4030
    push $P116, $P4031
    push $P116, $P4032
    push $P116, $P4033
    push $P116, $P4034
    push $P116, $P4035
    push $P116, $P4036
    push $P116, $P4037
    push $P116, $P4038
    push $P116, $P4039
    push $P116, $P4040
    push $P116, $P4041
    push $P116, $P4042
    push $P116, $P4043
    push $P116, $P4044
    push $P116, $P4045
    push $P116, $P4046
    push $P116, $P4047
    push $P116, $P4048
    push $P116, $P4049
    push $P116, $P4050
    push $P116, $P4051
    push $P116, $P4052
    push $P116, $P4053
    push $P116, $P4054
    push $P116, $P4055
    push $P116, $P4056
    push $P116, $P4057
    push $P116, $P4058
    push $P116, $P4059
    push $P116, $P4060
    push $P116, $P4061
    push $P116, $P4062
    push $P116, $P4063
    push $P116, $P4064
    push $P116, $P4065
    push $P116, $P4066
    push $P116, $P4067
    push $P116, $P4068
    push $P116, $P4069
    push $P116, $P4070
    push $P116, $P4071
    push $P116, $P4072
    push $P116, $P4073
    push $P116, $P4074
    push $P116, $P4075
    push $P116, $P4076
    push $P116, $P4077
    push $P116, $P4078
    push $P116, $P4079
    push $P116, $P4080
    push $P116, $P4081
    push $P116, $P4082
    push $P116, $P4083
    push $P116, $P4084
    push $P116, $P4085
    push $P116, $P4086
    push $P116, $P4087
    push $P116, $P4088
    push $P116, $P4089
    push $P116, $P4090
    push $P116, $P4091
    push $P116, $P4092
    push $P116, $P4093
    push $P116, $P4094
    push $P116, $P4095
    push $P116, $P4096
    push $P116, $P4097
    push $P116, $P4098
    push $P116, $P4099
    push $P116, $P4100
    push $P116, $P4101
    push $P116, $P4102
    push $P116, $P4103
    push $P116, $P4104
    push $P116, $P4105
    push $P116, $P4106
    push $P116, $P4107
    push $P116, $P4108
    push $P116, $P4109
    push $P116, $P4110
    push $P116, $P4111
    push $P116, $P4112
    push $P116, $P4113
    push $P116, $P4114
    push $P116, $P4115
    push $P116, $P4116
    push $P116, $P4117
    push $P116, $P4118
    push $P116, $P4119
    push $P116, $P4120
    push $P116, $P4121
    push $P116, $P4122
    push $P116, $P4123
    push $P116, $P4124
    push $P116, $P4125
    push $P116, $P4126
    push $P116, $P4127
    push $P116, $P4128
    push $P116, $P4129
    push $P116, $P4130
    push $P116, $P4131
    push $P116, $P4132
    push $P116, $P4133
    push $P116, $P4134
    push $P116, $P4135
    push $P116, $P4136
    push $P116, $P4137
    push $P116, $P4138
    push $P116, $P4139
    push $P116, $P4140
    push $P116, $P4141
    push $P116, $P4142
    push $P116, $P4143
    push $P116, $P4144
    push $P116, $P4145
    push $P116, $P4146
    push $P116, $P4147
    push $P116, $P4148
    push $P116, $P4149
    push $P116, $P4150
    push $P116, $P4151
    push $P116, $P4152
    push $P116, $P4153
    push $P116, $P4154
    push $P116, $P4155
    push $P116, $P4156
    push $P116, $P4157
    push $P116, $P4158
    push $P116, $P4159
    push $P116, $P4160
    push $P116, $P4161
    push $P116, $P4162
    push $P116, $P4163
    push $P116, $P4164
    push $P116, $P4165
    push $P116, $P4166
    push $P116, $P4167
    push $P116, $P4168
    push $P116, $P4169
    push $P116, $P4170
    push $P116, $P4171
    push $P116, $P4172
    push $P116, $P4173
    push $P116, $P4174
    push $P116, $P4175
    push $P116, $P4176
    push $P116, $P4177
    push $P116, $P4178
    push $P116, $P4179
    push $P116, $P4180
    push $P116, $P4181
    push $P116, $P4182
    push $P116, $P4183
    push $P116, $P4184
    push $P116, $P4185
    push $P116, $P4186
    push $P116, $P4187
    push $P116, $P4188
    push $P116, $P4189
    push $P116, $P4190
    push $P116, $P4191
    push $P116, $P4192
    push $P116, $P4193
    push $P116, $P4194
    push $P116, $P4195
    push $P116, $P4196
    push $P116, $P4197
    push $P116, $P4198
    push $P116, $P4199
    push $P116, $P4200
    push $P116, $P4201
    push $P116, $P4202
    push $P116, $P4203
    push $P116, $P4204
    push $P116, $P4205
    push $P116, $P4206
    push $P116, $P4207
    push $P116, $P4208
    push $P116, $P4209
    push $P116, $P4210
    push $P116, $P4211
    push $P116, $P4212
    push $P116, $P4213
    push $P116, $P4214
    push $P116, $P4215
    push $P116, $P4216
    push $P116, $P4217
    push $P116, $P4218
    push $P116, $P4219
    push $P116, $P4220
    push $P116, $P4221
    push $P116, $P4222
    push $P116, $P4223
    push $P116, $P4224
    push $P116, $P4225
    push $P116, $P4226
    push $P116, $P4227
    push $P116, $P4228
    push $P116, $P4229
    push $P116, $P4230
    push $P116, $P4231
    push $P116, $P4232
    push $P116, $P4233
    push $P116, $P4234
    push $P116, $P4235
    push $P116, $P4236
    push $P116, $P4237
    push $P116, $P4238
    push $P116, $P4239
    push $P116, $P4240
    push $P116, $P4241
    push $P116, $P4242
    push $P116, $P4243
    push $P116, $P4244
    push $P116, $P4245
    push $P116, $P4246
    push $P116, $P4247
    push $P116, $P4248
    push $P116, $P4249
    push $P116, $P4250
    push $P116, $P4251
    push $P116, $P4252
    push $P116, $P4253
    push $P116, $P4254
    push $P116, $P4255
    push $P116, $P4256
    push $P116, $P4257
    push $P116, $P4258
    push $P116, $P4259
    push $P116, $P4260
    push $P116, $P4261
    push $P116, $P4262
    push $P116, $P4263
    push $P116, $P4264
    push $P116, $P4265
    push $P116, $P4266
    push $P116, $P4267
    push $P116, $P4268
    push $P116, $P4269
    push $P116, $P4270
    push $P116, $P4271
    push $P116, $P4272
    push $P116, $P4273
    push $P116, $P4274
    push $P116, $P4275
    push $P116, $P4276
    push $P116, $P4277
    push $P116, $P4278
    push $P116, $P4279
    push $P116, $P4280
    push $P116, $P4281
    push $P116, $P4282
    push $P116, $P4283
    push $P116, $P4284
    push $P116, $P4285
    push $P116, $P4286
    push $P116, $P4287
    push $P116, $P4288
    push $P116, $P4289
    push $P116, $P4290
    push $P116, $P4291
    push $P116, $P4292
    push $P116, $P4293
    push $P116, $P4294
    push $P116, $P4295
    push $P116, $P4296
    push $P116, $P4297
    push $P116, $P4298
    push $P116, $P4299
    push $P116, $P4300
    push $P116, $P4301
    push $P116, $P4302
    push $P116, $P4303
    push $P116, $P4304
    push $P116, $P4305
    push $P116, $P4306
    push $P116, $P4307
    push $P116, $P4308
    push $P116, $P4309
    push $P116, $P4310
    push $P116, $P4311
    push $P116, $P4312
    push $P116, $P4313
    push $P116, $P4314
    push $P116, $P4315
    push $P116, $P4316
    push $P116, $P4317
    push $P116, $P4318
    push $P116, $P4319
    push $P116, $P4320
    push $P116, $P4321
    push $P116, $P4322
    push $P116, $P4323
    push $P116, $P4324
    push $P116, $P4325
    push $P116, $P4326
    push $P116, $P4327
    push $P116, $P4328
    push $P116, $P4329
    push $P116, $P4330
    push $P116, $P4331
    push $P116, $P4332
    push $P116, $P4333
    push $P116, $P4334
    push $P116, $P4335
    push $P116, $P4336
    push $P116, $P4337
    push $P116, $P4338
    push $P116, $P4339
    push $P116, $P4340
    push $P116, $P4341
    push $P116, $P4342
    push $P116, $P4343
    push $P116, $P4344
    push $P116, $P4345
    push $P116, $P4346
    push $P116, $P4347
    .return ($P116)
.end


.HLL "nqp"

.namespace []
.sub "MAIN"  :subid("369_1338064451.944") :outer("368_1338064451.944")
    .param pmc param_1007
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2911
    .const 'Sub' $P1019 = "370_1338064451.944" 
    capture_lex $P1019
    .lex "@ARGS", param_1007
.annotate 'line', 2913
    new $P100, "Undef"
    set $P1008, $P100
    .lex "$nqpcomp", $P1008
.annotate 'line', 2920
    $P1010 = root_new ['parrot';'ResizablePMCArray']
    set $P1009, $P1010
    .lex "@clo", $P1009
.annotate 'line', 2913
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "NQP"
    get_who $P103, $P102
    set $P104, $P103["Compiler"]
    $P105 = $P104."new"()
    set $P1008, $P105
.annotate 'line', 2914
    set $P101, $P1008
    unless_null $P101, vivify_850
    new $P101, "Undef"
  vivify_850:
    $P101."language"("nqp")
.annotate 'line', 2915
    set $P101, $P1008
    unless_null $P101, vivify_851
    new $P101, "Undef"
  vivify_851:
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Grammar"]
    $P101."parsegrammar"($P105)
.annotate 'line', 2916
    set $P101, $P1008
    unless_null $P101, vivify_852
    new $P101, "Undef"
  vivify_852:
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Actions"]
    $P101."parseactions"($P105)
.annotate 'line', 2917
    set $P101, $P1008
    unless_null $P101, vivify_853
    new $P101, "Undef"
  vivify_853:
    $P102 = $P101."config"()
    "hll-config"($P102)
.annotate 'line', 2920
    set $P101, $P1008
    unless_null $P101, vivify_854
    new $P101, "Undef"
  vivify_854:
    $P102 = $P101."commandline_options"()
    set $P1009, $P102
.annotate 'line', 2921
    set $P1011, $P1009
    unless_null $P1011, vivify_855
    $P1011 = root_new ['parrot';'ResizablePMCArray']
  vivify_855:
    $P1011."push"("parsetrace")
.annotate 'line', 2922
    set $P1012, $P1009
    unless_null $P1012, vivify_856
    $P1012 = root_new ['parrot';'ResizablePMCArray']
  vivify_856:
    $P1012."push"("setting=s")
.annotate 'line', 2923
    set $P1013, $P1009
    unless_null $P1013, vivify_857
    $P1013 = root_new ['parrot';'ResizablePMCArray']
  vivify_857:
    $P1013."push"("setting-path=s")
.annotate 'line', 2924
    set $P1014, $P1009
    unless_null $P1014, vivify_858
    $P1014 = root_new ['parrot';'ResizablePMCArray']
  vivify_858:
    $P1014."push"("module-path=s")
.annotate 'line', 2925
    set $P1015, $P1009
    unless_null $P1015, vivify_859
    $P1015 = root_new ['parrot';'ResizablePMCArray']
  vivify_859:
    $P1015."push"("vmlibs=s")
.annotate 'line', 2926
    set $P1016, $P1009
    unless_null $P1016, vivify_860
    $P1016 = root_new ['parrot';'ResizablePMCArray']
  vivify_860:
    $P1016."push"("no-regex-lib")
.annotate 'line', 2927
    set $P1017, $P1009
    unless_null $P1017, vivify_861
    $P1017 = root_new ['parrot';'ResizablePMCArray']
  vivify_861:
    $P1017."push"("old-regex-lib")
.annotate 'line', 2931
    .const 'Sub' $P1019 = "370_1338064451.944" 
    capture_lex $P1019
    $P1019()
.annotate 'line', 2936
    set $P101, $P1008
    unless_null $P101, vivify_862
    new $P101, "Undef"
  vivify_862:
    set $P1027, param_1007
    unless_null $P1027, vivify_863
    $P1027 = root_new ['parrot';'ResizablePMCArray']
  vivify_863:
    $P101."command_line"($P1027, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 2938
    set $P101, $P1008
    unless_null $P101, vivify_864
    new $P101, "Undef"
  vivify_864:
    $P102 = $P101."nqpevent"()
.annotate 'line', 2911
    .return ($P102)
.end


.HLL "nqp"

.namespace []
.include "except_types.pasm"
.sub "_block1018"  :anon :subid("370_1338064451.944") :outer("369_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2931
    new $P1022, 'ExceptionHandler'
    set_label $P1022, control_1021
    $P1022."handle_types_except"(.CONTROL_ALL)
    push_eh $P1022
.annotate 'line', 2932
    get_hll_global $P101, "ModuleLoader"
    find_lex $P102, "GLOBALish"
    $P103 = $P101."load_module"("PASTRegex", $P102)
.annotate 'line', 2931
    pop_eh 
    goto skip_handler_1020
  control_1021:
    peek_exception $P1023
    .local pmc exception 
    .get_results (exception) 
    new $P1025, 'Integer'
    set $P1025, 1
    set exception["handled"], $P1025
    set $I1026, exception["handled"]
    eq $I1026, 1, handled_1024
    rethrow exception
  handled_1024:
    finalize $P1023
    .return (exception)
  skip_handler_1020:
    .return ($P103)
.end


.HLL "nqp"

.namespace []
.sub "hll-config"  :subid("371_1338064451.944") :outer("368_1338064451.944")
    .param pmc param_1031
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2942
    .lex "$config", param_1031
.annotate 'line', 2943
    new $P101, "String"
    assign $P101, "2012.05-102-g7019f29"
    set $P1032, param_1031
    unless_null $P1032, vivify_865
    $P1032 = root_new ['parrot';'Hash']
    set param_1031, $P1032
  vivify_865:
    set $P1032["version"], $P101
.annotate 'line', 2944
    new $P101, "String"
    assign $P101, "2012-05-26T20:34:11Z"
    set $P1033, param_1031
    unless_null $P1033, vivify_866
    $P1033 = root_new ['parrot';'Hash']
    set param_1031, $P1033
  vivify_866:
    set $P1033["build-date"], $P101
.annotate 'line', 2942
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1035"  :subid("372_1338064451.944") :outer("368_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 7
    .const 'Sub' $P1391 = "39_1338064451.944" 
    capture_lex $P1391
    .const 'Sub' $P1376 = "38_1338064451.944" 
    capture_lex $P1376
    .const 'Sub' $P1359 = "37_1338064451.944" 
    capture_lex $P1359
    .const 'Sub' $P1356 = "36_1338064451.944" 
    capture_lex $P1356
    .const 'Sub' $P1353 = "35_1338064451.944" 
    capture_lex $P1353
    .const 'Sub' $P1325 = "34_1338064451.944" 
    capture_lex $P1325
    .const 'Sub' $P1311 = "33_1338064451.944" 
    capture_lex $P1311
    .const 'Sub' $P1273 = "32_1338064451.944" 
    capture_lex $P1273
    .const 'Sub' $P1270 = "31_1338064451.944" 
    capture_lex $P1270
    .const 'Sub' $P1265 = "30_1338064451.944" 
    capture_lex $P1265
    .const 'Sub' $P1260 = "29_1338064451.944" 
    capture_lex $P1260
    .const 'Sub' $P1255 = "28_1338064451.944" 
    capture_lex $P1255
    .const 'Sub' $P1240 = "27_1338064451.944" 
    capture_lex $P1240
    .const 'Sub' $P1232 = "26_1338064451.944" 
    capture_lex $P1232
    .const 'Sub' $P1226 = "25_1338064451.944" 
    capture_lex $P1226
    .const 'Sub' $P1217 = "24_1338064451.944" 
    capture_lex $P1217
    .const 'Sub' $P1200 = "23_1338064451.944" 
    capture_lex $P1200
    .const 'Sub' $P1111 = "22_1338064451.944" 
    capture_lex $P1111
    .const 'Sub' $P1105 = "18_1338064451.944" 
    capture_lex $P1105
    .const 'Sub' $P1098 = "17_1338064451.944" 
    capture_lex $P1098
    .const 'Sub' $P1084 = "16_1338064451.944" 
    capture_lex $P1084
    .const 'Sub' $P1076 = "15_1338064451.944" 
    capture_lex $P1076
    .const 'Sub' $P1065 = "14_1338064451.944" 
    capture_lex $P1065
    .const 'Sub' $P1058 = "13_1338064451.944" 
    capture_lex $P1058
    .const 'Sub' $P1054 = "12_1338064451.944" 
    capture_lex $P1054
    .const 'Sub' $P1051 = "11_1338064451.944" 
    capture_lex $P1051
    .const 'Sub' $P1040 = "10_1338064451.944" 
    capture_lex $P1040
.annotate 'line', 58
    new $P103, "Undef"
    set $P1037, $P103
    .lex "$loader", $P1037
    .lex "$?PACKAGE", $P1038
    .lex "$?CLASS", $P1039
    get_hll_global $P104, "ModuleLoader"
    set $P1037, $P104
.annotate 'line', 570
    .const 'Sub' $P1391 = "39_1338064451.944" 
    newclosure $P1445, $P1391
.annotate 'line', 7
    .return ($P1445)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "push_lexpad" :anon :subid("10_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1041
    .param pmc param_1042
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .lex "self", param_1041
    .lex "$/", param_1042
.annotate 'line', 29
    new $P104, "Undef"
    set $P1043, $P104
    .lex "$pad", $P1043
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Block"]
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Stmts"]
    $P113 = $P112."new"()
    set $P114, param_1042
    unless_null $P114, vivify_867
    new $P114, "Undef"
  vivify_867:
    $P115 = $P108."new"($P113, $P114 :named("node"))
    set $P1043, $P115
.annotate 'line', 30
    set $P105, param_1041
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1045, $P106, $P107, "@!BLOCKS", 8
    unless_null $P1045, vivify_868
    $P1045 = root_new ['parrot';'ResizablePMCArray']
  vivify_868:
    set $N100, $P1045
    unless $N100, if_1044_end
.annotate 'line', 31
    set $P108, param_1041
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1046, $P109, $P110, "@!BLOCKS", 8
    unless_null $P1046, vivify_869
    $P1046 = root_new ['parrot';'ResizablePMCArray']
  vivify_869:
    set $N101, $P1046
    new $P111, 'Float'
    set $P111, $N101
    sub $P112, $P111, 1
    set $I100, $P112
    set $P113, param_1041
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1047, $P114, $P115, "@!BLOCKS", 8
    unless_null $P1047, vivify_870
    $P1047 = root_new ['parrot';'ResizablePMCArray']
  vivify_870:
    set $P116, $P1047[$I100]
    unless_null $P116, vivify_871
    new $P116, "Undef"
  vivify_871:
    set $P1048, $P1043
    unless_null $P1048, vivify_872
    $P1048 = root_new ['parrot';'Hash']
    set $P1043, $P1048
  vivify_872:
    set $P1048["outer"], $P116
  if_1044_end:
.annotate 'line', 33
    set $P105, $P1043
    unless_null $P105, vivify_873
    new $P105, "Undef"
  vivify_873:
    set $P106, param_1041
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1049, $P107, $P108, "@!BLOCKS", 8
    unless_null $P1049, vivify_874
    $P1049 = root_new ['parrot';'ResizablePMCArray']
  vivify_874:
    set $N100, $P1049
    set $I100, $N100
    set $P109, param_1041
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1050, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1050, vivify_875
    $P1050 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P110, $P111, "@!BLOCKS", 8, $P1050
  vivify_875:
    set $P1050[$I100], $P105
.annotate 'line', 27
    set $P105, $P1043
    unless_null $P105, vivify_876
    new $P105, "Undef"
  vivify_876:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pop_lexpad" :anon :subid("11_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1052
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 38
    .lex "self", param_1052
.annotate 'line', 39
    set $P104, param_1052
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1053, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1053, vivify_877
    $P1053 = root_new ['parrot';'ResizablePMCArray']
  vivify_877:
    $P107 = $P1053."pop"()
.annotate 'line', 38
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "cur_lexpad" :anon :subid("12_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1055
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 43
    .lex "self", param_1055
.annotate 'line', 44
    set $P104, param_1055
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1056, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1056, vivify_878
    $P1056 = root_new ['parrot';'ResizablePMCArray']
  vivify_878:
    set $N100, $P1056
    new $P107, 'Float'
    set $P107, $N100
    sub $P108, $P107, 1
    set $I100, $P108
.annotate 'line', 43
    set $P109, param_1055
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1057, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1057, vivify_879
    $P1057 = root_new ['parrot';'ResizablePMCArray']
  vivify_879:
    set $P112, $P1057[$I100]
    unless_null $P112, vivify_880
    new $P112, "Undef"
  vivify_880:
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "get_legacy_block_list" :anon :subid("13_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1059
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 48
    .lex "self", param_1059
.annotate 'line', 49
    $P1061 = root_new ['parrot';'ResizablePMCArray']
    set $P1060, $P1061
    .lex "@x", $P1060
    set $P104, param_1059
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1062, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1062, vivify_881
    $P1062 = root_new ['parrot';'ResizablePMCArray']
  vivify_881:
    clone $P107, $P1062
    set $P1060, $P107
.annotate 'line', 50
    set $P1063, $P1060
    unless_null $P1063, vivify_882
    $P1063 = root_new ['parrot';'ResizablePMCArray']
  vivify_882:
    $P1063."reverse"()
.annotate 'line', 48
    set $P1064, $P1060
    unless_null $P1064, vivify_883
    $P1064 = root_new ['parrot';'ResizablePMCArray']
  vivify_883:
    .return ($P1064)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_setting" :anon :subid("14_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1068
    .param pmc param_1069
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 61
    .const 'Sub' $P1072 = "373_1338064451.944" 
    capture_lex $P1072
    new $P1067, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1067, control_1066
    push_eh $P1067
    .lex "self", param_1068
    .lex "$setting_name", param_1069
.annotate 'line', 63
    set $P105, param_1069
    unless_null $P105, vivify_884
    new $P105, "Undef"
  vivify_884:
    set $S100, $P105
    isne $I100, $S100, "NULL"
    if $I100, if_1070
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1070_end
  if_1070:
    .const 'Sub' $P1072 = "373_1338064451.944" 
    capture_lex $P1072
    $P107 = $P1072()
    set $P104, $P107
  if_1070_end:
.annotate 'line', 61
    .return ($P104)
  control_1066:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1071"  :anon :subid("373_1338064451.944") :outer("14_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 67
    new $P106, "Undef"
    set $P1073, $P106
    .lex "$setting", $P1073
.annotate 'line', 68
    find_lex $P107, "$loader"
    unless_null $P107, vivify_885
    new $P107, "Undef"
  vivify_885:
    find_lex $P108, "$setting_name"
    unless_null $P108, vivify_886
    new $P108, "Undef"
  vivify_886:
    $P109 = $P107."load_setting"($P108)
    find_dynamic_lex $P112, "%*COMPILING"
    unless_null $P112, vivify_887
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["%COMPILING"]
    unless_null $P112, vivify_888
    die "Contextual %*COMPILING not found"
  vivify_888:
    store_dynamic_lex "%*COMPILING", $P112
  vivify_887:
    set $P1074, $P112["%?OPTIONS"]
    unless_null $P1074, vivify_889
    $P1074 = root_new ['parrot';'Hash']
    set $P112["%?OPTIONS"], $P1074
  vivify_889:
    set $P1074["outer_ctx"], $P109
    set $P1073, $P109
.annotate 'line', 71
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    $P109 = $P108."is_precompilation_mode"()
    if $P109, if_1075
.annotate 'line', 89
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 91
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 92
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 94
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    new $P129, "ResizablePMCArray"
    $P130 = $P128."new"("ModuleLoader" :named("name"), $P129 :named("namespace"), "package" :named("scope"))
    find_lex $P131, "$setting_name"
    unless_null $P131, vivify_890
    new $P131, "Undef"
  vivify_890:
    $P132 = $P124."new"($P130, $P131, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 92
    $P133 = $P115."new"($P120, $P132, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 89
    $P111."add_fixup_task"($P133 :named("fixup_past"))
.annotate 'line', 87
    goto if_1075_end
  if_1075:
.annotate 'line', 72
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
.annotate 'line', 73
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    $P120 = $P119."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 76
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 78
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 79
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
.annotate 'line', 81
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    new $P138, "ResizablePMCArray"
    $P139 = $P137."new"("ModuleLoader" :named("name"), $P138 :named("namespace"), "package" :named("scope"))
    find_lex $P140, "$setting_name"
    unless_null $P140, vivify_891
    new $P140, "Undef"
  vivify_891:
    $P141 = $P133."new"($P139, $P140, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 79
    $P142 = $P124."new"($P129, $P141, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 76
    $P143 = $P115."new"($P120, $P142)
.annotate 'line', 72
    $P111."add_load_dependency_task"($P143 :named("deserialize_past"))
  if_1075_end:
.annotate 'line', 100
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P108, $P1073
    unless_null $P108, vivify_892
    new $P108, "Undef"
  vivify_892:
    getattribute $P109, $P108, "lex_pad"
    setattribute $P107, 'payload', $P109
    throw $P107
.annotate 'line', 63
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_module" :anon :subid("15_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1079
    .param pmc param_1080
    .param pmc param_1081
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 106
    new $P1078, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1078, control_1077
    push_eh $P1078
    .lex "self", param_1079
    .lex "$module_name", param_1080
    .lex "$cur_GLOBALish", param_1081
.annotate 'line', 108
    new $P104, "Undef"
    set $P1082, $P104
    .lex "$module", $P1082
    find_lex $P105, "$loader"
    unless_null $P105, vivify_893
    new $P105, "Undef"
  vivify_893:
    set $P106, param_1080
    unless_null $P106, vivify_894
    new $P106, "Undef"
  vivify_894:
    set $P107, param_1081
    unless_null $P107, vivify_895
    new $P107, "Undef"
  vivify_895:
    $P108 = $P105."load_module"($P106, $P107)
    set $P1082, $P108
.annotate 'line', 111
    set $P105, param_1079
    nqp_decontainerize $P106, $P105
    $P107 = $P106."is_precompilation_mode"()
    unless $P107, if_1083_end
.annotate 'line', 112
    set $P108, param_1079
    nqp_decontainerize $P109, $P108
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
.annotate 'line', 113
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    $P118 = $P117."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 116
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Op"]
.annotate 'line', 118
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    new $P127, "ResizablePMCArray"
    $P128 = $P126."new"("ModuleLoader" :named("name"), $P127 :named("namespace"), "package" :named("scope"))
    set $P129, param_1080
    unless_null $P129, vivify_896
    new $P129, "Undef"
  vivify_896:
    $P130 = $P122."new"($P128, $P129, "callmethod" :named("pasttype"), "load_module" :named("name"))
.annotate 'line', 116
    $P131 = $P113."new"($P118, $P130)
.annotate 'line', 112
    $P109."add_load_dependency_task"($P131 :named("deserialize_past"))
  if_1083_end:
.annotate 'line', 123
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P1082
    unless_null $P106, vivify_897
    new $P106, "Undef"
  vivify_897:
    getattribute $P107, $P106, "lex_pad"
    setattribute $P105, 'payload', $P107
    throw $P105
.annotate 'line', 106
    .return ()
  control_1077:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "install_package_symbol" :anon :subid("16_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1085
    .param pmc param_1086
    .param pmc param_1087
    .param pmc param_1088
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 128
    .const 'Sub' $P1095 = "374_1338064451.944" 
    capture_lex $P1095
    .lex "self", param_1085
    .lex "$package", param_1086
    .lex "@sym", param_1087
    .lex "$obj", param_1088
.annotate 'line', 130
    new $P104, "Undef"
    set $P1089, $P104
    .lex "$name", $P1089
.annotate 'line', 133
    new $P105, "Undef"
    set $P1090, $P105
    .lex "$target", $P1090
.annotate 'line', 129
    set $P1091, param_1087
    unless_null $P1091, vivify_898
    $P1091 = root_new ['parrot';'ResizablePMCArray']
  vivify_898:
    clone $P106, $P1091
    set param_1087, $P106
.annotate 'line', 130
    set $P1092, param_1087
    unless_null $P1092, vivify_899
    $P1092 = root_new ['parrot';'ResizablePMCArray']
  vivify_899:
    $P106 = $P1092."pop"()
    set $S100, $P106
    new $P107, 'String'
    set $P107, $S100
    set $P1089, $P107
.annotate 'line', 133
    set $P106, param_1086
    unless_null $P106, vivify_900
    new $P106, "Undef"
  vivify_900:
    set $P1090, $P106
.annotate 'line', 134
    set $P1093, param_1087
    unless_null $P1093, vivify_901
    $P1093 = root_new ['parrot';'ResizablePMCArray']
  vivify_901:
    defined $I100, $P1093
    unless $I100, for_undef_902
    iter $P106, $P1093
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1097_handler
    push_eh $P108
  loop1097_test:
    unless $P106, loop1097_done
    shift $P107, $P106
  loop1097_redo:
    .const 'Sub' $P1095 = "374_1338064451.944" 
    capture_lex $P1095
    $P1095($P107)
  loop1097_next:
    goto loop1097_test
  loop1097_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1097_next
    eq $P109, .CONTROL_LOOP_REDO, loop1097_redo
  loop1097_done:
    pop_eh 
  for_undef_902:
.annotate 'line', 137
    set $P106, param_1088
    unless_null $P106, vivify_905
    new $P106, "Undef"
  vivify_905:
    set $P107, $P1089
    unless_null $P107, vivify_906
    new $P107, "Undef"
  vivify_906:
    set $P108, $P1090
    unless_null $P108, vivify_907
    new $P108, "Undef"
    set $P1090, $P108
  vivify_907:
    get_who $P109, $P108
    set $P109[$P107], $P106
.annotate 'line', 128
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1094"  :anon :subid("374_1338064451.944") :outer("16_1338064451.944")
    .param pmc param_1096
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 134
    .lex "$_", param_1096
.annotate 'line', 135
    find_lex $P108, "$target"
    unless_null $P108, vivify_903
    new $P108, "Undef"
  vivify_903:
    find_lex $P109, "$_"
    unless_null $P109, vivify_904
    new $P109, "Undef"
  vivify_904:
    set $S100, $P109
    nqp_get_package_through_who $P110, $P108, $S100
    store_lex "$target", $P110
.annotate 'line', 134
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_lexical_symbol" :anon :subid("17_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1099
    .param pmc param_1100
    .param pmc param_1101
    .param pmc param_1102
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 144
    .lex "self", param_1099
    .lex "$block", param_1100
    .lex "$name", param_1101
    .lex "$obj", param_1102
.annotate 'line', 151
    new $P104, "Undef"
    set $P1103, $P104
    .lex "$fixup", $P1103
.annotate 'line', 146
    set $P105, param_1100
    unless_null $P105, vivify_908
    new $P105, "Undef"
  vivify_908:
    set $P106, param_1101
    unless_null $P106, vivify_909
    new $P106, "Undef"
  vivify_909:
    set $P107, param_1102
    unless_null $P107, vivify_910
    new $P107, "Undef"
  vivify_910:
    $P105."symbol"($P106, "lexical" :named("scope"), $P107 :named("value"))
.annotate 'line', 147
    set $P1104, param_1100
    unless_null $P1104, vivify_911
    $P1104 = root_new ['parrot';'ResizablePMCArray']
  vivify_911:
    set $P105, $P1104[0]
    unless_null $P105, vivify_912
    new $P105, "Undef"
  vivify_912:
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Var"]
    set $P110, param_1101
    unless_null $P110, vivify_913
    new $P110, "Undef"
  vivify_913:
    $P111 = $P109."new"("lexical" :named("scope"), $P110 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"))
    $P105."push"($P111)
.annotate 'line', 151
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Stmts"]
.annotate 'line', 152
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 154
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Val"]
    set $P117, param_1100
    unless_null $P117, vivify_914
    new $P117, "Undef"
  vivify_914:
    $P118 = $P116."new"($P117 :named("value"), "LexInfo" :named("returns"))
.annotate 'line', 155
    set $P119, param_1101
    unless_null $P119, vivify_915
    new $P119, "Undef"
  vivify_915:
    set $S100, $P119
    set $P120, param_1099
    nqp_decontainerize $P121, $P120
    set $P122, param_1102
    unless_null $P122, vivify_916
    new $P122, "Undef"
  vivify_916:
    $P123 = $P121."get_slot_past_for_object"($P122)
    $P124 = $P112."new"($P118, $S100, $P123, "callmethod" :named("pasttype"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 159
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 161
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Val"]
    set $P133, param_1100
    unless_null $P133, vivify_917
    new $P133, "Undef"
  vivify_917:
    $P134 = $P132."new"($P133 :named("value"), "LexInfo" :named("returns"))
    $P135 = $P128."new"($P134, "callmethod" :named("pasttype"), "finish_static_lexpad" :named("name"))
.annotate 'line', 159
    $P136 = $P108."new"($P124, $P135)
.annotate 'line', 151
    set $P1103, $P136
.annotate 'line', 164
    set $P105, param_1099
    nqp_decontainerize $P106, $P105
    set $P107, $P1103
    unless_null $P107, vivify_918
    new $P107, "Undef"
  vivify_918:
    set $P108, $P1103
    unless_null $P108, vivify_919
    new $P108, "Undef"
  vivify_919:
    $P109 = $P106."add_fixup_task"($P107 :named("deserialize_past"), $P108 :named("fixup_past"))
.annotate 'line', 144
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_package_routine" :anon :subid("18_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1106
    .param pmc param_1107
    .param pmc param_1108
    .param pmc param_1109
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 169
    .lex "self", param_1106
    .lex "$package", param_1107
    .lex "$name", param_1108
    .lex "$past_block", param_1109
.annotate 'line', 170
    new $P104, "Undef"
    set $P1110, $P104
    .lex "$fixup", $P1110
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Op"]
.annotate 'line', 172
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Var"]
.annotate 'line', 174
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
    set $P117, param_1106
    nqp_decontainerize $P118, $P117
    set $P119, param_1107
    unless_null $P119, vivify_920
    new $P119, "Undef"
  vivify_920:
    $P120 = $P118."get_slot_past_for_object"($P119)
    $P121 = $P116."new"($P120, "get_who PP" :named("pirop"))
.annotate 'line', 175
    set $P122, param_1108
    unless_null $P122, vivify_921
    new $P122, "Undef"
  vivify_921:
    set $S100, $P122
    $P123 = $P112."new"($P121, $S100, "keyed" :named("scope"))
.annotate 'line', 177
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Val"]
    set $P128, param_1109
    unless_null $P128, vivify_922
    new $P128, "Undef"
  vivify_922:
    $P129 = $P127."new"($P128 :named("value"))
    $P130 = $P108."new"($P123, $P129, "bind_6model" :named("pasttype"))
.annotate 'line', 170
    set $P1110, $P130
.annotate 'line', 179
    set $P105, param_1106
    nqp_decontainerize $P106, $P105
    set $P107, $P1110
    unless_null $P107, vivify_923
    new $P107, "Undef"
  vivify_923:
    set $P108, $P1110
    unless_null $P108, vivify_924
    new $P108, "Undef"
  vivify_924:
    $P109 = $P106."add_fixup_task"($P107 :named("deserialize_past"), $P108 :named("fixup_past"))
.annotate 'line', 169
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "create_code" :anon :subid("22_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1114
    .param pmc param_1115
    .param pmc param_1116
    .param pmc param_1117
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 184
    .const 'Sub' $P1195 = "379_1338064451.944" 
    capture_lex $P1195
    .const 'Sub' $P1187 = "21_1338064451.944" 
    capture_lex $P1187
    .const 'Sub' $P1180 = "20_1338064451.944" 
    capture_lex $P1180
    .const 'Sub' $P1134 = "19_1338064451.944" 
    capture_lex $P1134
    .const 'Sub' $P1125 = "375_1338064451.944" 
    capture_lex $P1125
    new $P1113, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1113, control_1112
    push_eh $P1113
    .lex "self", param_1114
    .lex "$past", param_1115
    .lex "$name", param_1116
    .lex "$is_dispatcher", param_1117
.annotate 'line', 186
    new $P104, "Undef"
    set $P1118, $P104
    .lex "$code_type", $P1118
.annotate 'line', 187
    new $P105, "Undef"
    set $P1119, $P105
    .lex "$have_code_type", $P1119
.annotate 'line', 197
    new $P106, "Undef"
    set $P1120, $P106
    .lex "$stub_code", $P1120
.annotate 'line', 233
    new $P107, "Undef"
    set $P1121, $P107
    .lex "$fixups", $P1121
.annotate 'line', 234
    new $P108, "Undef"
    set $P1122, $P108
    .lex "$dummy", $P1122
.annotate 'line', 235
    new $P109, "Undef"
    set $P1123, $P109
    .lex "$code_ref_idx", $P1123
.annotate 'line', 184
    set $P110, $P1118
    unless_null $P110, vivify_925
    new $P110, "Undef"
  vivify_925:
.annotate 'line', 187
    new $P110, "Float"
    assign $P110, 0
    set $P1119, $P110
.annotate 'line', 188
    .const 'Sub' $P1125 = "375_1338064451.944" 
    capture_lex $P1125
    $P1125()
.annotate 'line', 197
    .const 'Sub' $P1134 = "19_1338064451.944" 
    newclosure $P1170, $P1134
    set $P1120, $P1170
.annotate 'line', 233
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1121, $P114
.annotate 'line', 184
    set $P110, $P1122
    unless_null $P110, vivify_983
    new $P110, "Undef"
  vivify_983:
    set $P110, $P1123
    unless_null $P110, vivify_984
    new $P110, "Undef"
  vivify_984:
.annotate 'line', 236
    set $P1172, param_1115
    unless_null $P1172, vivify_985
    $P1172 = root_new ['parrot';'Hash']
  vivify_985:
    set $P110, $P1172["compile_time_dummy"]
    unless_null $P110, vivify_986
    new $P110, "Undef"
  vivify_986:
    defined $I100, $P110
    if $I100, if_1171
.annotate 'line', 241
    set $P111, $P1120
    unless_null $P111, vivify_987
    new $P111, "Undef"
  vivify_987:
    nqp_fresh_stub $P112, $P111
    set $P1122, $P112
.annotate 'line', 242
    set $P111, $P1122
    unless_null $P111, vivify_988
    new $P111, "Undef"
  vivify_988:
    set $P112, param_1116
    unless_null $P112, vivify_989
    new $P112, "Undef"
  vivify_989:
    set $S100, $P112
    assign $P111, $S100
.annotate 'line', 245
    set $P111, $P1122
    unless_null $P111, vivify_990
    new $P111, "Undef"
  vivify_990:
    set $P112, $P1122
    unless_null $P112, vivify_991
    new $P112, "Undef"
  vivify_991:
    setprop $P111, "STATIC_CODE_REF", $P112
.annotate 'line', 246
    set $P111, param_1114
    nqp_decontainerize $P112, $P111
    set $P113, $P1122
    unless_null $P113, vivify_992
    new $P113, "Undef"
  vivify_992:
    set $P114, param_1115
    unless_null $P114, vivify_993
    new $P114, "Undef"
  vivify_993:
    $P115 = $P112."add_root_code_ref"($P113, $P114)
    set $P1123, $P115
.annotate 'line', 247
    set $P111, $P1123
    unless_null $P111, vivify_994
    new $P111, "Undef"
  vivify_994:
    set $P112, param_1115
    unless_null $P112, vivify_995
    new $P112, "Undef"
  vivify_995:
    $P113 = $P112."subid"()
    set $P114, param_1114
    nqp_decontainerize $P115, $P114
    nqp_get_sc_object $P116, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1174, $P115, $P116, "%!code_stub_sc_idx", 11
    unless_null $P1174, vivify_996
    $P1174 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P115, $P116, "%!code_stub_sc_idx", 11, $P1174
  vivify_996:
    set $P1174[$P113], $P111
.annotate 'line', 248
    set $P111, $P1122
    unless_null $P111, vivify_997
    new $P111, "Undef"
  vivify_997:
    set $P1175, param_1115
    unless_null $P1175, vivify_998
    $P1175 = root_new ['parrot';'Hash']
    set param_1115, $P1175
  vivify_998:
    set $P1175["compile_time_dummy"], $P111
.annotate 'line', 251
    set $P111, $P1122
    unless_null $P111, vivify_999
    new $P111, "Undef"
  vivify_999:
    set $P112, param_1115
    unless_null $P112, vivify_1000
    new $P112, "Undef"
  vivify_1000:
    setprop $P111, "PAST", $P112
.annotate 'line', 256
    set $P111, $P1119
    unless_null $P111, vivify_1001
    new $P111, "Undef"
  vivify_1001:
    unless $P111, if_1176_end
.annotate 'line', 257
    set $P112, $P1121
    unless_null $P112, vivify_1002
    new $P112, "Undef"
  vivify_1002:
    set $P113, param_1115
    unless_null $P113, vivify_1003
    new $P113, "Undef"
  vivify_1003:
    $P114 = $P113."subid"()
    set $P115, param_1114
    nqp_decontainerize $P116, $P115
    nqp_get_sc_object $P117, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1177, $P116, $P117, "%!code_object_fixup_list", 10
    unless_null $P1177, vivify_1004
    $P1177 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P116, $P117, "%!code_object_fixup_list", 10, $P1177
  vivify_1004:
    set $P1177[$P114], $P112
.annotate 'line', 258
    set $P112, param_1114
    nqp_decontainerize $P113, $P112
    $P114 = $P113."is_precompilation_mode"()
    if $P114, if_1178
.annotate 'line', 264
    set $P115, $P1122
    unless_null $P115, vivify_1005
    new $P115, "Undef"
  vivify_1005:
    .const 'Sub' $P1187 = "21_1338064451.944" 
    newclosure $P1192, $P1187
    setprop $P115, "CLONE_CALLBACK", $P1192
.annotate 'line', 263
    goto if_1178_end
  if_1178:
.annotate 'line', 259
    set $P115, $P1122
    unless_null $P115, vivify_1016
    new $P115, "Undef"
  vivify_1016:
    .const 'Sub' $P1180 = "20_1338064451.944" 
    newclosure $P1185, $P1180
    setprop $P115, "CLONE_CALLBACK", $P1185
  if_1178_end:
  if_1176_end:
.annotate 'line', 239
    goto if_1171_end
  if_1171:
.annotate 'line', 237
    set $P1173, param_1115
    unless_null $P1173, vivify_1021
    $P1173 = root_new ['parrot';'Hash']
  vivify_1021:
    set $P111, $P1173["compile_time_dummy"]
    unless_null $P111, vivify_1022
    new $P111, "Undef"
  vivify_1022:
    set $P1122, $P111
  if_1171_end:
.annotate 'line', 287
    set $P110, param_1114
    nqp_decontainerize $P111, $P110
    set $P112, $P1121
    unless_null $P112, vivify_1023
    new $P112, "Undef"
  vivify_1023:
    $P111."add_fixup_task"($P112 :named("fixup_past"))
.annotate 'line', 291
    set $P111, $P1119
    unless_null $P111, vivify_1024
    new $P111, "Undef"
  vivify_1024:
    if $P111, if_1193
.annotate 'line', 329
    set $P116, $P1121
    unless_null $P116, vivify_1025
    new $P116, "Undef"
  vivify_1025:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Op"]
.annotate 'line', 331
    set $P121, param_1114
    nqp_decontainerize $P122, $P121
    set $P123, $P1123
    unless_null $P123, vivify_1026
    new $P123, "Undef"
  vivify_1026:
    $P124 = $P122."get_slot_past_for_code_ref_at"($P123)
.annotate 'line', 332
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Val"]
    set $P129, param_1115
    unless_null $P129, vivify_1027
    new $P129, "Undef"
  vivify_1027:
    $P130 = $P128."new"($P129 :named("value"))
    $P131 = $P120."new"($P124, $P130, "assign vPP" :named("pirop"))
.annotate 'line', 329
    $P116."push"($P131)
.annotate 'line', 334
    new $P116, "Exception"
    set $P116['type'], .CONTROL_RETURN
    set $P117, $P1122
    unless_null $P117, vivify_1028
    new $P117, "Undef"
  vivify_1028:
    setattribute $P116, 'payload', $P117
    throw $P116
.annotate 'line', 326
    goto if_1193_end
  if_1193:
.annotate 'line', 291
    .const 'Sub' $P1195 = "379_1338064451.944" 
    capture_lex $P1195
    $P115 = $P1195()
    set $P110, $P115
  if_1193_end:
.annotate 'line', 184
    .return ($P110)
  control_1112:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P111, exception, "payload"
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1124"  :anon :subid("375_1338064451.944") :outer("22_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 188
    new $P1128, 'ExceptionHandler'
    set_label $P1128, control_1127
    $P1128."handle_types_except"(.CONTROL_ALL)
    push_eh $P1128
.annotate 'line', 189
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, "NQPRoutine"
    $P113 = $P111."find_sym"($P112)
    store_lex "$code_type", $P113
.annotate 'line', 190
    find_dynamic_lex $P112, "$*PACKAGE"
    unless_null $P112, vivify_926
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$PACKAGE"]
    unless_null $P112, vivify_927
    die "Contextual $*PACKAGE not found"
  vivify_927:
  vivify_926:
    get_how $P113, $P112
    find_dynamic_lex $P116, "$*PACKAGE"
    unless_null $P116, vivify_928
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$PACKAGE"]
    unless_null $P116, vivify_929
    die "Contextual $*PACKAGE not found"
  vivify_929:
  vivify_928:
    $S100 = $P113."name"($P116)
    isne $I100, $S100, "NQPRoutine"
    new $P117, 'Integer'
    set $P117, $I100
    store_lex "$have_code_type", $P117
.annotate 'line', 188
    pop_eh 
    goto skip_handler_1126
  control_1127:
    peek_exception $P1129
    .local pmc exception 
    .get_results (exception) 
    new $P1131, 'Integer'
    set $P1131, 1
    set exception["handled"], $P1131
    set $I1132, exception["handled"]
    eq $I1132, 1, handled_1130
    rethrow exception
  handled_1130:
    finalize $P1129
    .return (exception)
  skip_handler_1126:
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1133"  :anon :subid("19_1338064451.944") :outer("22_1338064451.944")
    .param pmc param_1135 :slurpy
    .param pmc param_1136 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 197
    .const 'Sub' $P1144 = "376_1338064451.944" 
    capture_lex $P1144
    .lex "@args", param_1135
    .lex "%named", param_1136
.annotate 'line', 200
    new $P110, "Undef"
    set $P1137, $P110
    .lex "$nqpcomp", $P1137
.annotate 'line', 201
    new $P111, "Undef"
    set $P1138, $P111
    .lex "$post", $P1138
.annotate 'line', 202
    new $P112, "Undef"
    set $P1139, $P112
    .lex "$pir", $P1139
.annotate 'line', 203
    new $P113, "Undef"
    set $P1140, $P113
    .lex "$compiled", $P1140
.annotate 'line', 206
    new $P114, "Undef"
    set $P1141, $P114
    .lex "$c", $P1141
.annotate 'line', 207
    new $P115, "Undef"
    set $P1142, $P115
    .lex "$i", $P1142
.annotate 'line', 199
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$past"
    unless_null $P118, vivify_930
    new $P118, "Undef"
  vivify_930:
    $P117."set_nqp_language_defaults"($P118)
.annotate 'line', 200
    compreg $P116, "nqp"
    set $P1137, $P116
.annotate 'line', 201
    set $P116, $P1137
    unless_null $P116, vivify_931
    new $P116, "Undef"
  vivify_931:
    find_lex $P117, "$past"
    unless_null $P117, vivify_932
    new $P117, "Undef"
  vivify_932:
    $P118 = $P116."post"($P117)
    set $P1138, $P118
.annotate 'line', 202
    set $P116, $P1137
    unless_null $P116, vivify_933
    new $P116, "Undef"
  vivify_933:
    set $P117, $P1138
    unless_null $P117, vivify_934
    new $P117, "Undef"
  vivify_934:
    $P118 = $P116."pir"($P117)
    set $P1139, $P118
.annotate 'line', 203
    set $P116, $P1137
    unless_null $P116, vivify_935
    new $P116, "Undef"
  vivify_935:
    set $P117, $P1139
    unless_null $P117, vivify_936
    new $P117, "Undef"
  vivify_936:
    $P118 = $P116."evalpmc"($P117)
    set $P1140, $P118
.annotate 'line', 206
    set $P116, $P1140
    unless_null $P116, vivify_937
    new $P116, "Undef"
  vivify_937:
    elements $I100, $P116
    new $P117, 'Integer'
    set $P117, $I100
    set $P1141, $P117
.annotate 'line', 207
    new $P116, "Float"
    assign $P116, 0
    set $P1142, $P116
.annotate 'line', 208
    new $P119, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P119, loop1167_handler
    push_eh $P119
  loop1167_test:
    set $P116, $P1142
    unless_null $P116, vivify_938
    new $P116, "Undef"
  vivify_938:
    set $N100, $P116
    set $P117, $P1141
    unless_null $P117, vivify_939
    new $P117, "Undef"
  vivify_939:
    set $N101, $P117
    islt $I100, $N100, $N101
    unless $I100, loop1167_done
  loop1167_redo:
    .const 'Sub' $P1144 = "376_1338064451.944" 
    capture_lex $P1144
    $P1144()
  loop1167_next:
    goto loop1167_test
  loop1167_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop1167_next
    eq $P121, .CONTROL_LOOP_REDO, loop1167_redo
  loop1167_done:
    pop_eh 
.annotate 'line', 229
    set $P116, $P1140
    unless_null $P116, vivify_980
    new $P116, "Undef"
  vivify_980:
    set $P1168, param_1135
    unless_null $P1168, vivify_981
    $P1168 = root_new ['parrot';'ResizablePMCArray']
  vivify_981:
    set $P1169, param_1136
    unless_null $P1169, vivify_982
    $P1169 = root_new ['parrot';'Hash']
  vivify_982:
    $P117 = $P116($P1168 :flat, $P1169 :flat)
.annotate 'line', 197
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1143"  :anon :subid("376_1338064451.944") :outer("19_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 208
    .const 'Sub' $P1150 = "377_1338064451.944" 
    capture_lex $P1150
.annotate 'line', 209
    new $P118, "Undef"
    set $P1145, $P118
    .lex "$subid", $P1145
    find_lex $P119, "$i"
    unless_null $P119, vivify_940
    new $P119, "Undef"
  vivify_940:
    set $I101, $P119
    find_lex $P1146, "$compiled"
    unless_null $P1146, vivify_941
    $P1146 = root_new ['parrot';'ResizablePMCArray']
  vivify_941:
    set $P120, $P1146[$I101]
    unless_null $P120, vivify_942
    new $P120, "Undef"
  vivify_942:
    $P121 = $P120."get_subid"()
    set $P1145, $P121
.annotate 'line', 210
    set $P122, $P1145
    unless_null $P122, vivify_943
    new $P122, "Undef"
  vivify_943:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    nqp_get_sc_object $P121, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1148, $P120, $P121, "%!code_objects_to_fix_up", 9
    unless_null $P1148, vivify_944
    $P1148 = root_new ['parrot';'Hash']
  vivify_944:
    exists $I101, $P1148[$P122]
    unless $I101, if_1147_end
    .const 'Sub' $P1150 = "377_1338064451.944" 
    capture_lex $P1150
    $P1150()
  if_1147_end:
.annotate 'line', 226
    find_lex $P119, "$i"
    unless_null $P119, vivify_979
    new $P119, "Undef"
  vivify_979:
    add $P120, $P119, 1
    store_lex "$i", $P120
.annotate 'line', 208
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1149"  :anon :subid("377_1338064451.944") :outer("376_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 210
    .const 'Sub' $P1157 = "378_1338064451.944" 
    capture_lex $P1157
.annotate 'line', 214
    new $P123, "Undef"
    set $P1151, $P123
    .lex "$static", $P1151
.annotate 'line', 223
    new $P124, "Undef"
    set $P1152, $P124
    .lex "$fixup_stmts", $P1152
.annotate 'line', 214
    find_lex $P125, "$subid"
    unless_null $P125, vivify_945
    new $P125, "Undef"
  vivify_945:
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1153, $P127, $P128, "%!code_objects_to_fix_up", 9
    unless_null $P1153, vivify_946
    $P1153 = root_new ['parrot';'Hash']
  vivify_946:
    set $P129, $P1153[$P125]
    unless_null $P129, vivify_947
    new $P129, "Undef"
  vivify_947:
    $P130 = $P129."shift"()
    set $P1151, $P130
.annotate 'line', 215
    set $P125, $P1151
    unless_null $P125, vivify_948
    new $P125, "Undef"
  vivify_948:
    find_lex $P126, "$code_type"
    unless_null $P126, vivify_949
    new $P126, "Undef"
  vivify_949:
    find_lex $P127, "$i"
    unless_null $P127, vivify_950
    new $P127, "Undef"
  vivify_950:
    set $I102, $P127
    find_lex $P1154, "$compiled"
    unless_null $P1154, vivify_951
    $P1154 = root_new ['parrot';'ResizablePMCArray']
  vivify_951:
    set $P128, $P1154[$I102]
    unless_null $P128, vivify_952
    new $P128, "Undef"
  vivify_952:
    setattribute $P125, $P126, "$!do", $P128
.annotate 'line', 216
    find_lex $P126, "$subid"
    unless_null $P126, vivify_953
    new $P126, "Undef"
  vivify_953:
    find_lex $P127, "self"
    nqp_decontainerize $P128, $P127
    nqp_get_sc_object $P129, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1155, $P128, $P129, "%!code_objects_to_fix_up", 9
    unless_null $P1155, vivify_954
    $P1155 = root_new ['parrot';'Hash']
  vivify_954:
    set $P130, $P1155[$P126]
    unless_null $P130, vivify_955
    new $P130, "Undef"
  vivify_955:
    defined $I102, $P130
    unless $I102, for_undef_956
    iter $P125, $P130
    new $P132, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P132, loop1160_handler
    push_eh $P132
  loop1160_test:
    unless $P125, loop1160_done
    shift $P131, $P125
  loop1160_redo:
    .const 'Sub' $P1157 = "378_1338064451.944" 
    capture_lex $P1157
    $P1157($P131)
  loop1160_next:
    goto loop1160_test
  loop1160_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P133, exception, 'type'
    eq $P133, .CONTROL_LOOP_NEXT, loop1160_next
    eq $P133, .CONTROL_LOOP_REDO, loop1160_redo
  loop1160_done:
    pop_eh 
  for_undef_956:
.annotate 'line', 219
    find_lex $P125, "$i"
    unless_null $P125, vivify_962
    new $P125, "Undef"
  vivify_962:
    set $I102, $P125
    find_lex $P1161, "$compiled"
    unless_null $P1161, vivify_963
    $P1161 = root_new ['parrot';'ResizablePMCArray']
  vivify_963:
    set $P126, $P1161[$I102]
    unless_null $P126, vivify_964
    new $P126, "Undef"
  vivify_964:
    find_lex $P127, "$i"
    unless_null $P127, vivify_965
    new $P127, "Undef"
  vivify_965:
    set $I103, $P127
    find_lex $P1162, "$compiled"
    unless_null $P1162, vivify_966
    $P1162 = root_new ['parrot';'ResizablePMCArray']
  vivify_966:
    set $P128, $P1162[$I103]
    unless_null $P128, vivify_967
    new $P128, "Undef"
  vivify_967:
    setprop $P126, "STATIC_CODE_REF", $P128
.annotate 'line', 220
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$subid"
    unless_null $P127, vivify_968
    new $P127, "Undef"
  vivify_968:
    find_lex $P128, "self"
    nqp_decontainerize $P129, $P128
    nqp_get_sc_object $P130, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1163, $P129, $P130, "%!code_stub_sc_idx", 11
    unless_null $P1163, vivify_969
    $P1163 = root_new ['parrot';'Hash']
  vivify_969:
    set $P131, $P1163[$P127]
    unless_null $P131, vivify_970
    new $P131, "Undef"
  vivify_970:
    find_lex $P132, "$i"
    unless_null $P132, vivify_971
    new $P132, "Undef"
  vivify_971:
    set $I102, $P132
    find_lex $P1164, "$compiled"
    unless_null $P1164, vivify_972
    $P1164 = root_new ['parrot';'ResizablePMCArray']
  vivify_972:
    set $P133, $P1164[$I102]
    unless_null $P133, vivify_973
    new $P133, "Undef"
  vivify_973:
    $P126."update_root_code_ref"($P131, $P133)
.annotate 'line', 223
    find_lex $P125, "$subid"
    unless_null $P125, vivify_974
    new $P125, "Undef"
  vivify_974:
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1165, $P127, $P128, "%!code_object_fixup_list", 10
    unless_null $P1165, vivify_975
    $P1165 = root_new ['parrot';'Hash']
  vivify_975:
    set $P129, $P1165[$P125]
    unless_null $P129, vivify_976
    new $P129, "Undef"
  vivify_976:
    set $P1152, $P129
.annotate 'line', 224
    new $P128, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P128, loop1166_handler
    push_eh $P128
  loop1166_test:
    set $P125, $P1152
    unless_null $P125, vivify_977
    new $P125, "Undef"
  vivify_977:
    $P126 = $P125."list"()
    set $N102, $P126
    unless $N102, loop1166_done
  loop1166_redo:
    set $P127, $P1152
    unless_null $P127, vivify_978
    new $P127, "Undef"
  vivify_978:
    $P127."shift"()
  loop1166_next:
    goto loop1166_test
  loop1166_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop1166_next
    eq $P129, .CONTROL_LOOP_REDO, loop1166_redo
  loop1166_done:
    pop_eh 
.annotate 'line', 210
    .return ($N102)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1156"  :anon :subid("378_1338064451.944") :outer("377_1338064451.944")
    .param pmc param_1158
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 216
    .lex "$_", param_1158
.annotate 'line', 217
    find_lex $P132, "$_"
    unless_null $P132, vivify_957
    new $P132, "Undef"
  vivify_957:
    find_lex $P133, "$code_type"
    unless_null $P133, vivify_958
    new $P133, "Undef"
  vivify_958:
    find_lex $P134, "$i"
    unless_null $P134, vivify_959
    new $P134, "Undef"
  vivify_959:
    set $I103, $P134
    find_lex $P1159, "$compiled"
    unless_null $P1159, vivify_960
    $P1159 = root_new ['parrot';'ResizablePMCArray']
  vivify_960:
    set $P135, $P1159[$I103]
    unless_null $P135, vivify_961
    new $P135, "Undef"
  vivify_961:
    clone $P136, $P135
    setattribute $P132, $P133, "$!do", $P136
.annotate 'line', 216
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1186"  :anon :subid("21_1338064451.944") :outer("22_1338064451.944")
    .param pmc param_1188
    .param pmc param_1189
    .param pmc param_1190
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 264
    .lex "$orig", param_1188
    .lex "$clone", param_1189
    .lex "$code_obj", param_1190
.annotate 'line', 266
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    set $P118, param_1190
    unless_null $P118, vivify_1006
    new $P118, "Undef"
  vivify_1006:
    $P117."add_object"($P118)
.annotate 'line', 267
    find_lex $P116, "$fixups"
    unless_null $P116, vivify_1007
    new $P116, "Undef"
  vivify_1007:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Op"]
.annotate 'line', 269
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    set $P123, param_1190
    unless_null $P123, vivify_1008
    new $P123, "Undef"
  vivify_1008:
    $P124 = $P122."get_ref"($P123)
.annotate 'line', 270
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$code_type"
    unless_null $P127, vivify_1009
    new $P127, "Undef"
  vivify_1009:
    $P128 = $P126."get_ref"($P127)
.annotate 'line', 272
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Op"]
.annotate 'line', 274
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Val"]
    find_lex $P141, "$past"
    unless_null $P141, vivify_1010
    new $P141, "Undef"
  vivify_1010:
    $P142 = $P140."new"($P141 :named("value"))
    $P143 = $P136."new"($P142, "clone PP" :named("pirop"))
.annotate 'line', 275
    find_lex $P144, "self"
    nqp_decontainerize $P145, $P144
    set $P146, param_1190
    unless_null $P146, vivify_1011
    new $P146, "Undef"
  vivify_1011:
    $P147 = $P145."get_ref"($P146)
    $P148 = $P132."new"($P143, $P147, "set_sub_code_object 0PP" :named("pirop"))
.annotate 'line', 272
    $P149 = $P120."new"($P124, $P128, "$!do", $P148, "setattribute vPPsP" :named("pirop"))
.annotate 'line', 267
    $P116."push"($P149)
.annotate 'line', 280
    find_lex $P116, "$past"
    unless_null $P116, vivify_1012
    new $P116, "Undef"
  vivify_1012:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1191, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1191, vivify_1013
    $P1191 = root_new ['parrot';'Hash']
  vivify_1013:
    set $P121, $P1191[$P117]
    unless_null $P121, vivify_1014
    new $P121, "Undef"
  vivify_1014:
    set $P122, param_1190
    unless_null $P122, vivify_1015
    new $P122, "Undef"
  vivify_1015:
    $P123 = $P121."push"($P122)
.annotate 'line', 264
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1179"  :anon :subid("20_1338064451.944") :outer("22_1338064451.944")
    .param pmc param_1181
    .param pmc param_1182
    .param pmc param_1183
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 259
    .lex "$orig", param_1181
    .lex "$clone", param_1182
    .lex "$code_obj", param_1183
.annotate 'line', 260
    find_lex $P116, "$past"
    unless_null $P116, vivify_1017
    new $P116, "Undef"
  vivify_1017:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1184, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1184, vivify_1018
    $P1184 = root_new ['parrot';'Hash']
  vivify_1018:
    set $P121, $P1184[$P117]
    unless_null $P121, vivify_1019
    new $P121, "Undef"
  vivify_1019:
    set $P122, param_1183
    unless_null $P122, vivify_1020
    new $P122, "Undef"
  vivify_1020:
    $P123 = $P121."push"($P122)
.annotate 'line', 259
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1194"  :anon :subid("379_1338064451.944") :outer("22_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 293
    new $P112, "Undef"
    set $P1196, $P112
    .lex "$code_obj", $P1196
.annotate 'line', 297
    new $P113, "Undef"
    set $P1197, $P113
    .lex "$slot", $P1197
.annotate 'line', 293
    find_lex $P114, "$code_type"
    unless_null $P114, vivify_1029
    new $P114, "Undef"
  vivify_1029:
    repr_instance_of $P115, $P114
    set $P1196, $P115
.annotate 'line', 294
    set $P114, $P1196
    unless_null $P114, vivify_1030
    new $P114, "Undef"
  vivify_1030:
    find_lex $P115, "$code_type"
    unless_null $P115, vivify_1031
    new $P115, "Undef"
  vivify_1031:
    find_lex $P116, "$dummy"
    unless_null $P116, vivify_1032
    new $P116, "Undef"
  vivify_1032:
    setattribute $P114, $P115, "$!do", $P116
.annotate 'line', 295
    find_lex $P114, "$is_dispatcher"
    unless_null $P114, vivify_1033
    new $P114, "Undef"
  vivify_1033:
    unless $P114, if_1198_end
    set $P115, $P1196
    unless_null $P115, vivify_1034
    new $P115, "Undef"
  vivify_1034:
    find_lex $P116, "$code_type"
    unless_null $P116, vivify_1035
    new $P116, "Undef"
  vivify_1035:
    new $P117, "ResizablePMCArray"
    setattribute $P115, $P116, "$!dispatchees", $P117
  if_1198_end:
.annotate 'line', 297
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P116, $P1196
    unless_null $P116, vivify_1036
    new $P116, "Undef"
  vivify_1036:
    $P117 = $P115."add_object"($P116)
    set $P1197, $P117
.annotate 'line', 300
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
.annotate 'line', 301
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
.annotate 'line', 303
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Val"]
    find_lex $P124, "$past"
    unless_null $P124, vivify_1037
    new $P124, "Undef"
  vivify_1037:
    $P125 = $P123."new"($P124 :named("value"))
.annotate 'line', 304
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    set $P128, $P1196
    unless_null $P128, vivify_1038
    new $P128, "Undef"
  vivify_1038:
    $P129 = $P127."get_ref"($P128)
    $P130 = $P119."new"($P125, $P129, "set_sub_code_object vPP" :named("pirop"))
.annotate 'line', 300
    $P115."add_fixup_task"($P130 :named("deserialize_past"))
.annotate 'line', 308
    find_lex $P114, "$fixups"
    unless_null $P114, vivify_1039
    new $P114, "Undef"
  vivify_1039:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
.annotate 'line', 310
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P1196
    unless_null $P121, vivify_1040
    new $P121, "Undef"
  vivify_1040:
    $P122 = $P120."get_ref"($P121)
.annotate 'line', 311
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$code_type"
    unless_null $P125, vivify_1041
    new $P125, "Undef"
  vivify_1041:
    $P126 = $P124."get_ref"($P125)
.annotate 'line', 313
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P130, $P129["Val"]
    find_lex $P131, "$past"
    unless_null $P131, vivify_1042
    new $P131, "Undef"
  vivify_1042:
    $P132 = $P130."new"($P131 :named("value"))
    $P133 = $P118."new"($P122, $P126, "$!do", $P132, "setattribute vPPsP" :named("pirop"))
.annotate 'line', 308
    $P114."push"($P133)
.annotate 'line', 315
    find_lex $P114, "$fixups"
    unless_null $P114, vivify_1043
    new $P114, "Undef"
  vivify_1043:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
.annotate 'line', 317
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Val"]
    find_lex $P123, "$past"
    unless_null $P123, vivify_1044
    new $P123, "Undef"
  vivify_1044:
    $P124 = $P122."new"($P123 :named("value"))
.annotate 'line', 318
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    set $P127, $P1196
    unless_null $P127, vivify_1045
    new $P127, "Undef"
  vivify_1045:
    $P128 = $P126."get_ref"($P127)
    $P129 = $P118."new"($P124, $P128, "set_sub_code_object vPP" :named("pirop"))
.annotate 'line', 315
    $P114."push"($P129)
.annotate 'line', 322
    set $P114, $P1196
    unless_null $P114, vivify_1046
    new $P114, "Undef"
  vivify_1046:
    new $P115, "ResizablePMCArray"
    push $P115, $P114
    find_lex $P116, "$past"
    unless_null $P116, vivify_1047
    new $P116, "Undef"
  vivify_1047:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1199, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1199, vivify_1048
    $P1199 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P119, $P120, "%!code_objects_to_fix_up", 9, $P1199
  vivify_1048:
    set $P1199[$P117], $P115
.annotate 'line', 291
    set $P114, $P1196
    unless_null $P114, vivify_1049
    new $P114, "Undef"
  vivify_1049:
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "pkg_create_mo" :anon :subid("23_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1203
    .param pmc param_1204
    .param pmc param_1205 :optional :named("name")
    .param int has_param_1205 :opt_flag
    .param pmc param_1206 :optional :named("repr")
    .param int has_param_1206 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 340
    new $P1202, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1202, control_1201
    push_eh $P1202
    .lex "self", param_1203
    .lex "$how", param_1204
    if has_param_1205, optparam_1050
    new $P104, "Undef"
    set param_1205, $P104
  optparam_1050:
    .lex "$name", param_1205
    if has_param_1206, optparam_1051
    new $P105, "Undef"
    set param_1206, $P105
  optparam_1051:
    .lex "$repr", param_1206
.annotate 'line', 342
    $P1208 = root_new ['parrot';'Hash']
    set $P1207, $P1208
    .lex "%args", $P1207
.annotate 'line', 345
    new $P106, "Undef"
    set $P1209, $P106
    .lex "$mo", $P1209
.annotate 'line', 346
    new $P107, "Undef"
    set $P1210, $P107
    .lex "$slot", $P1210
.annotate 'line', 340
    set $P1211, $P1207
    unless_null $P1211, vivify_1052
    $P1211 = root_new ['parrot';'Hash']
  vivify_1052:
.annotate 'line', 343
    set $P108, param_1205
    unless_null $P108, vivify_1053
    new $P108, "Undef"
  vivify_1053:
    defined $I100, $P108
    unless $I100, if_1212_end
    set $P109, param_1205
    unless_null $P109, vivify_1054
    new $P109, "Undef"
  vivify_1054:
    set $P1213, $P1207
    unless_null $P1213, vivify_1055
    $P1213 = root_new ['parrot';'Hash']
    set $P1207, $P1213
  vivify_1055:
    set $P1213["name"], $P109
  if_1212_end:
.annotate 'line', 344
    set $P108, param_1206
    unless_null $P108, vivify_1056
    new $P108, "Undef"
  vivify_1056:
    defined $I100, $P108
    unless $I100, if_1214_end
    set $P109, param_1206
    unless_null $P109, vivify_1057
    new $P109, "Undef"
  vivify_1057:
    set $P1215, $P1207
    unless_null $P1215, vivify_1058
    $P1215 = root_new ['parrot';'Hash']
    set $P1207, $P1215
  vivify_1058:
    set $P1215["repr"], $P109
  if_1214_end:
.annotate 'line', 345
    set $P108, param_1204
    unless_null $P108, vivify_1059
    new $P108, "Undef"
  vivify_1059:
    set $P1216, $P1207
    unless_null $P1216, vivify_1060
    $P1216 = root_new ['parrot';'Hash']
  vivify_1060:
    $P109 = $P108."new_type"($P1216 :flat)
    set $P1209, $P109
.annotate 'line', 346
    set $P108, param_1203
    nqp_decontainerize $P109, $P108
    set $P110, $P1209
    unless_null $P110, vivify_1061
    new $P110, "Undef"
  vivify_1061:
    $P111 = $P109."add_object"($P110)
    set $P1210, $P111
.annotate 'line', 349
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1209
    unless_null $P109, vivify_1062
    new $P109, "Undef"
  vivify_1062:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 340
    .return ()
  control_1201:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_attribute" :anon :subid("24_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1218
    .param pmc param_1219
    .param pmc param_1220
    .param pmc param_1221
    .param pmc param_1222
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 357
    .lex "self", param_1218
    .lex "$obj", param_1219
    .lex "$meta_attr", param_1220
    .lex "%lit_args", param_1221
    .lex "%obj_args", param_1222
.annotate 'line', 358
    new $P104, "Undef"
    set $P1223, $P104
    .lex "$attr", $P1223
    set $P105, param_1220
    unless_null $P105, vivify_1063
    new $P105, "Undef"
  vivify_1063:
    set $P1224, param_1221
    unless_null $P1224, vivify_1064
    $P1224 = root_new ['parrot';'Hash']
  vivify_1064:
    set $P1225, param_1222
    unless_null $P1225, vivify_1065
    $P1225 = root_new ['parrot';'Hash']
  vivify_1065:
    $P106 = $P105."new"($P1224 :flat, $P1225 :flat)
    set $P1223, $P106
.annotate 'line', 359
    set $P105, param_1219
    unless_null $P105, vivify_1066
    new $P105, "Undef"
  vivify_1066:
    get_how $P106, $P105
    set $P107, param_1219
    unless_null $P107, vivify_1067
    new $P107, "Undef"
  vivify_1067:
    set $P108, $P1223
    unless_null $P108, vivify_1068
    new $P108, "Undef"
  vivify_1068:
    $P109 = $P106."add_attribute"($P107, $P108)
.annotate 'line', 357
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_method" :anon :subid("25_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1227
    .param pmc param_1228
    .param pmc param_1229
    .param pmc param_1230
    .param pmc param_1231
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 363
    .lex "self", param_1227
    .lex "$obj", param_1228
    .lex "$meta_method_name", param_1229
    .lex "$name", param_1230
    .lex "$code", param_1231
.annotate 'line', 364
    set $P104, param_1228
    unless_null $P104, vivify_1069
    new $P104, "Undef"
  vivify_1069:
    get_how $P105, $P104
    set $P106, param_1228
    unless_null $P106, vivify_1070
    new $P106, "Undef"
  vivify_1070:
    set $P107, param_1230
    unless_null $P107, vivify_1071
    new $P107, "Undef"
  vivify_1071:
    set $P108, param_1231
    unless_null $P108, vivify_1072
    new $P108, "Undef"
  vivify_1072:
    set $P109, param_1229
    unless_null $P109, vivify_1073
    new $P109, "Undef"
  vivify_1073:
    set $S100, $P109
    $P110 = $P105.$S100($P106, $P107, $P108)
.annotate 'line', 363
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature" :anon :subid("26_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1233
    .param pmc param_1234
    .param pmc param_1235
    .param pmc param_1236
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 368
    .lex "self", param_1233
    .lex "$code_obj", param_1234
    .lex "$types", param_1235
    .lex "$definednesses", param_1236
.annotate 'line', 369
    new $P104, "Undef"
    set $P1237, $P104
    .lex "$sig_type", $P1237
.annotate 'line', 370
    new $P105, "Undef"
    set $P1238, $P105
    .lex "$code_type", $P1238
.annotate 'line', 371
    new $P106, "Undef"
    set $P1239, $P106
    .lex "$sig_obj", $P1239
.annotate 'line', 369
    set $P107, param_1233
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPSignature"
    $P110 = $P108."find_sym"($P109)
    set $P1237, $P110
.annotate 'line', 370
    set $P107, param_1233
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPRoutine"
    $P110 = $P108."find_sym"($P109)
    set $P1238, $P110
.annotate 'line', 371
    set $P107, $P1237
    unless_null $P107, vivify_1074
    new $P107, "Undef"
  vivify_1074:
    repr_instance_of $P108, $P107
    set $P1239, $P108
.annotate 'line', 372
    set $P107, $P1239
    unless_null $P107, vivify_1075
    new $P107, "Undef"
  vivify_1075:
    set $P108, $P1237
    unless_null $P108, vivify_1076
    new $P108, "Undef"
  vivify_1076:
    set $P109, param_1235
    unless_null $P109, vivify_1077
    new $P109, "Undef"
  vivify_1077:
    setattribute $P107, $P108, "$!types", $P109
.annotate 'line', 373
    set $P107, $P1239
    unless_null $P107, vivify_1078
    new $P107, "Undef"
  vivify_1078:
    set $P108, $P1237
    unless_null $P108, vivify_1079
    new $P108, "Undef"
  vivify_1079:
    set $P109, param_1236
    unless_null $P109, vivify_1080
    new $P109, "Undef"
  vivify_1080:
    setattribute $P107, $P108, "$!definednesses", $P109
.annotate 'line', 374
    set $P107, param_1234
    unless_null $P107, vivify_1081
    new $P107, "Undef"
  vivify_1081:
    set $P108, $P1238
    unless_null $P108, vivify_1082
    new $P108, "Undef"
  vivify_1082:
    set $P109, $P1239
    unless_null $P109, vivify_1083
    new $P109, "Undef"
  vivify_1083:
    setattribute $P107, $P108, "$!signature", $P109
.annotate 'line', 368
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature_on_parrot_sub" :anon :subid("27_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1241
    .param pmc param_1242
    .param pmc param_1243
    .param pmc param_1244
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 378
    .const 'Sub' $P1250 = "380_1338064451.944" 
    capture_lex $P1250
    .lex "self", param_1241
    .lex "$routine", param_1242
    .lex "$types", param_1243
    .lex "$definednesses", param_1244
.annotate 'line', 380
    new $P104, "Undef"
    set $P1245, $P104
    .lex "$sig_type", $P1245
.annotate 'line', 381
    new $P105, "Undef"
    set $P1246, $P105
    .lex "$sig_obj", $P1246
.annotate 'line', 384
    new $P106, "Undef"
    set $P1247, $P106
    .lex "$slot", $P1247
.annotate 'line', 380
    set $P107, param_1241
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPSignature"
    $P110 = $P108."find_sym"($P109)
    set $P1245, $P110
.annotate 'line', 381
    set $P107, $P1245
    unless_null $P107, vivify_1084
    new $P107, "Undef"
  vivify_1084:
    repr_instance_of $P108, $P107
    set $P1246, $P108
.annotate 'line', 382
    set $P107, $P1246
    unless_null $P107, vivify_1085
    new $P107, "Undef"
  vivify_1085:
    set $P108, $P1245
    unless_null $P108, vivify_1086
    new $P108, "Undef"
  vivify_1086:
    set $P109, param_1243
    unless_null $P109, vivify_1087
    new $P109, "Undef"
  vivify_1087:
    setattribute $P107, $P108, "$!types", $P109
.annotate 'line', 383
    set $P107, $P1246
    unless_null $P107, vivify_1088
    new $P107, "Undef"
  vivify_1088:
    set $P108, $P1245
    unless_null $P108, vivify_1089
    new $P108, "Undef"
  vivify_1089:
    set $P109, param_1244
    unless_null $P109, vivify_1090
    new $P109, "Undef"
  vivify_1090:
    setattribute $P107, $P108, "$!definednesses", $P109
.annotate 'line', 384
    set $P107, param_1241
    nqp_decontainerize $P108, $P107
    set $P109, $P1246
    unless_null $P109, vivify_1091
    new $P109, "Undef"
  vivify_1091:
    $P110 = $P108."add_object"($P109)
    set $P1247, $P110
.annotate 'line', 386
    set $P108, param_1241
    nqp_decontainerize $P109, $P108
    $P110 = $P109."is_precompilation_mode"()
    if $P110, if_1248
.annotate 'line', 393
    .const 'Sub' $P1250 = "380_1338064451.944" 
    capture_lex $P1250
    $P112 = $P1250()
    set $P107, $P112
.annotate 'line', 386
    goto if_1248_end
  if_1248:
.annotate 'line', 387
    set $P111, param_1241
    nqp_decontainerize $P112, $P111
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
.annotate 'line', 389
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Val"]
    set $P121, param_1242
    unless_null $P121, vivify_1101
    new $P121, "Undef"
  vivify_1101:
    $P122 = $P120."new"($P121 :named("value"))
.annotate 'line', 390
    set $P123, param_1241
    nqp_decontainerize $P124, $P123
    set $P125, $P1246
    unless_null $P125, vivify_1102
    new $P125, "Undef"
  vivify_1102:
    $P126 = $P124."get_ref"($P125)
    $P127 = $P116."new"($P122, $P126, "set_sub_multisig vPP" :named("pirop"))
.annotate 'line', 387
    $P128 = $P112."add_fixup_task"($P127 :named("deserialize_past"))
.annotate 'line', 386
    set $P107, $P128
  if_1248_end:
.annotate 'line', 378
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1249"  :anon :subid("380_1338064451.944") :outer("27_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    new $P111, "Undef"
    set $P1251, $P111
    .lex "$fixup", $P1251
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$sig_obj"
    unless_null $P118, vivify_1092
    new $P118, "Undef"
  vivify_1092:
    $P119 = $P117."get_ref"($P118)
    $P120 = $P115."new"($P119, "set_sub_multisig vPP" :named("pirop"))
    set $P1251, $P120
.annotate 'line', 397
    find_lex $P1253, "$routine"
    unless_null $P1253, vivify_1093
    $P1253 = root_new ['parrot';'Hash']
  vivify_1093:
    set $P112, $P1253["compile_time_dummy"]
    unless_null $P112, vivify_1094
    new $P112, "Undef"
  vivify_1094:
    defined $I100, $P112
    if $I100, if_1252
.annotate 'line', 401
    set $P113, $P1251
    unless_null $P113, vivify_1095
    new $P113, "Undef"
  vivify_1095:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    find_lex $P118, "$routine"
    unless_null $P118, vivify_1096
    new $P118, "Undef"
  vivify_1096:
    $P119 = $P117."new"($P118 :named("value"))
    $P113."unshift"($P119)
.annotate 'line', 400
    goto if_1252_end
  if_1252:
.annotate 'line', 398
    set $P113, $P1251
    unless_null $P113, vivify_1097
    new $P113, "Undef"
  vivify_1097:
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    find_lex $P1254, "$routine"
    unless_null $P1254, vivify_1098
    $P1254 = root_new ['parrot';'Hash']
  vivify_1098:
    set $P116, $P1254["compile_time_dummy"]
    unless_null $P116, vivify_1099
    new $P116, "Undef"
  vivify_1099:
    $P117 = $P115."get_slot_past_for_object"($P116)
    $P113."unshift"($P117)
  if_1252_end:
.annotate 'line', 403
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    set $P114, $P1251
    unless_null $P114, vivify_1100
    new $P114, "Undef"
  vivify_1100:
    $P115 = $P113."add_fixup_task"($P114 :named("fixup_past"))
.annotate 'line', 393
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_set_body_block" :anon :subid("28_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1256
    .param pmc param_1257
    .param pmc param_1258
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 408
    .lex "self", param_1256
    .lex "$obj", param_1257
    .lex "$body_past", param_1258
.annotate 'line', 410
    new $P104, "Undef"
    set $P1259, $P104
    .lex "$body_code_obj", $P1259
    set $P105, param_1256
    nqp_decontainerize $P106, $P105
    set $P107, param_1258
    unless_null $P107, vivify_1103
    new $P107, "Undef"
  vivify_1103:
    set $P108, param_1258
    unless_null $P108, vivify_1104
    new $P108, "Undef"
  vivify_1104:
    $P109 = $P108."name"()
    $P110 = $P106."create_code"($P107, $P109, 0)
    set $P1259, $P110
.annotate 'line', 413
    set $P105, param_1257
    unless_null $P105, vivify_1105
    new $P105, "Undef"
  vivify_1105:
    get_how $P106, $P105
    set $P107, param_1257
    unless_null $P107, vivify_1106
    new $P107, "Undef"
  vivify_1106:
    set $P108, $P1259
    unless_null $P108, vivify_1107
    new $P108, "Undef"
  vivify_1107:
    $P109 = $P106."set_body_block"($P107, $P108)
.annotate 'line', 408
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parent_or_role" :anon :subid("29_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1261
    .param pmc param_1262
    .param pmc param_1263
    .param pmc param_1264
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 417
    .lex "self", param_1261
    .lex "$obj", param_1262
    .lex "$meta_method_name", param_1263
    .lex "$to_add", param_1264
.annotate 'line', 418
    set $P104, param_1262
    unless_null $P104, vivify_1108
    new $P104, "Undef"
  vivify_1108:
    get_how $P105, $P104
    set $P106, param_1262
    unless_null $P106, vivify_1109
    new $P106, "Undef"
  vivify_1109:
    set $P107, param_1264
    unless_null $P107, vivify_1110
    new $P107, "Undef"
  vivify_1110:
    set $P108, param_1263
    unless_null $P108, vivify_1111
    new $P108, "Undef"
  vivify_1111:
    set $S100, $P108
    $P109 = $P105.$S100($P106, $P107)
.annotate 'line', 417
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parrot_vtable_handler_mapping" :anon :subid("30_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1266
    .param pmc param_1267
    .param pmc param_1268
    .param pmc param_1269
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 421
    .lex "self", param_1266
    .lex "$obj", param_1267
    .lex "$name", param_1268
    .lex "$att_name", param_1269
.annotate 'line', 422
    set $P104, param_1267
    unless_null $P104, vivify_1112
    new $P104, "Undef"
  vivify_1112:
    get_how $P105, $P104
    set $P106, param_1267
    unless_null $P106, vivify_1113
    new $P106, "Undef"
  vivify_1113:
    set $P107, param_1268
    unless_null $P107, vivify_1114
    new $P107, "Undef"
  vivify_1114:
    set $P108, param_1269
    unless_null $P108, vivify_1115
    new $P108, "Undef"
  vivify_1115:
    $P109 = $P105."add_parrot_vtable_handler_mapping"($P106, $P107, $P108)
.annotate 'line', 421
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_compose" :anon :subid("31_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1271
    .param pmc param_1272
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 426
    .lex "self", param_1271
    .lex "$obj", param_1272
.annotate 'line', 427
    set $P104, param_1272
    unless_null $P104, vivify_1116
    new $P104, "Undef"
  vivify_1116:
    get_how $P105, $P104
    set $P106, param_1272
    unless_null $P106, vivify_1117
    new $P106, "Undef"
  vivify_1117:
    $P107 = $P105."compose"($P106)
.annotate 'line', 426
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "run_begin_block" :anon :subid("32_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1276
    .param pmc param_1277
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 431
    .const 'Sub' $P1287 = "381_1338064451.944" 
    capture_lex $P1287
    new $P1275, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1275, control_1274
    push_eh $P1275
    .lex "self", param_1276
    .lex "$past", param_1277
.annotate 'line', 433
    new $P104, "Undef"
    set $P1278, $P104
    .lex "$wrapper", $P1278
.annotate 'line', 437
    $P1280 = root_new ['parrot';'Hash']
    set $P1279, $P1280
    .lex "%seen", $P1279
.annotate 'line', 438
    new $P105, "Undef"
    set $P1281, $P105
    .lex "$i", $P1281
.annotate 'line', 456
    new $P106, "Undef"
    set $P1282, $P106
    .lex "$code", $P1282
.annotate 'line', 457
    new $P107, "Undef"
    set $P1283, $P107
    .lex "$old_global", $P1283
.annotate 'line', 433
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Block"]
.annotate 'line', 434
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
    $P116 = $P115."new"()
    set $P117, param_1277
    unless_null $P117, vivify_1118
    new $P117, "Undef"
  vivify_1118:
    $P118 = $P111."new"($P116, $P117)
.annotate 'line', 433
    set $P1278, $P118
.annotate 'line', 431
    set $P1284, $P1279
    unless_null $P1284, vivify_1119
    $P1284 = root_new ['parrot';'Hash']
  vivify_1119:
.annotate 'line', 438
    set $P108, param_1276
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1285, $P109, $P110, "@!BLOCKS", 8
    unless_null $P1285, vivify_1120
    $P1285 = root_new ['parrot';'ResizablePMCArray']
  vivify_1120:
    set $N100, $P1285
    new $P111, 'Float'
    set $P111, $N100
    set $P1281, $P111
.annotate 'line', 439
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1310_handler
    push_eh $P110
  loop1310_test:
    set $P108, $P1281
    unless_null $P108, vivify_1121
    new $P108, "Undef"
  vivify_1121:
    set $N100, $P108
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1310_done
  loop1310_redo:
    .const 'Sub' $P1287 = "381_1338064451.944" 
    capture_lex $P1287
    $P1287()
  loop1310_next:
    goto loop1310_test
  loop1310_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1310_next
    eq $P111, .CONTROL_LOOP_REDO, loop1310_redo
  loop1310_done:
    pop_eh 
.annotate 'line', 456
    set $P108, param_1276
    nqp_decontainerize $P109, $P108
    set $P110, $P1278
    unless_null $P110, vivify_1139
    new $P110, "Undef"
  vivify_1139:
    $P111 = $P109."create_code"($P110, "BEGIN block", 0)
    set $P1282, $P111
.annotate 'line', 457
    new $P108, "ResizablePMCArray"
    get_hll_global $P109, $P108, "GLOBAL"
    set $P1283, $P109
.annotate 'line', 458
    new $P108, "ResizablePMCArray"
    find_dynamic_lex $P111, "$*GLOBALish"
    unless_null $P111, vivify_1140
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$GLOBALish"]
    unless_null $P111, vivify_1141
    die "Contextual $*GLOBALish not found"
  vivify_1141:
  vivify_1140:
    set_hll_global $P108, "GLOBAL", $P111
.annotate 'line', 459
    set $P108, $P1282
    unless_null $P108, vivify_1142
    new $P108, "Undef"
  vivify_1142:
    $P108()
.annotate 'line', 460
    new $P108, "ResizablePMCArray"
    set $P109, $P1283
    unless_null $P109, vivify_1143
    new $P109, "Undef"
  vivify_1143:
    set_hll_global $P108, "GLOBAL", $P109
.annotate 'line', 464
    set $P108, $P1278
    unless_null $P108, vivify_1144
    new $P108, "Undef"
  vivify_1144:
    $P108."shift"()
.annotate 'line', 465
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1278
    unless_null $P109, vivify_1145
    new $P109, "Undef"
  vivify_1145:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 431
    .return ()
  control_1274:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1286"  :anon :subid("381_1338064451.944") :outer("32_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 439
    .const 'Sub' $P1293 = "382_1338064451.944" 
    capture_lex $P1293
.annotate 'line', 441
    $P1289 = root_new ['parrot';'Hash']
    set $P1288, $P1289
    .lex "%symbols", $P1288
.annotate 'line', 440
    find_lex $P109, "$i"
    unless_null $P109, vivify_1122
    new $P109, "Undef"
  vivify_1122:
    sub $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 441
    find_lex $P109, "$i"
    unless_null $P109, vivify_1123
    new $P109, "Undef"
  vivify_1123:
    set $I101, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1290, $P111, $P112, "@!BLOCKS", 8
    unless_null $P1290, vivify_1124
    $P1290 = root_new ['parrot';'ResizablePMCArray']
  vivify_1124:
    set $P113, $P1290[$I101]
    unless_null $P113, vivify_1125
    new $P113, "Undef"
  vivify_1125:
    $P114 = $P113."symtable"()
    set $P1288, $P114
.annotate 'line', 442
    set $P1291, $P1288
    unless_null $P1291, vivify_1126
    $P1291 = root_new ['parrot';'Hash']
  vivify_1126:
    defined $I101, $P1291
    unless $I101, for_undef_1127
    iter $P109, $P1291
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop1309_handler
    push_eh $P112
  loop1309_test:
    unless $P109, loop1309_done
    shift $P110, $P109
  loop1309_redo:
    .const 'Sub' $P1293 = "382_1338064451.944" 
    capture_lex $P1293
    $P1293($P110)
  loop1309_next:
    goto loop1309_test
  loop1309_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop1309_next
    eq $P113, .CONTROL_LOOP_REDO, loop1309_redo
  loop1309_done:
    pop_eh 
  for_undef_1127:
.annotate 'line', 439
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1292"  :anon :subid("382_1338064451.944") :outer("381_1338064451.944")
    .param pmc param_1294
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 442
    .const 'Sub' $P1299 = "383_1338064451.944" 
    capture_lex $P1299
    .lex "$_", param_1294
.annotate 'line', 443
    find_lex $P113, "$_"
    unless_null $P113, vivify_1128
    new $P113, "Undef"
  vivify_1128:
    $P114 = $P113."key"()
    find_lex $P1297, "%seen"
    unless_null $P1297, vivify_1129
    $P1297 = root_new ['parrot';'Hash']
  vivify_1129:
    set $P115, $P1297[$P114]
    unless_null $P115, vivify_1130
    new $P115, "Undef"
  vivify_1130:
    isfalse $I102, $P115
    if $I102, if_1296
    new $P112, 'Integer'
    set $P112, $I102
    goto if_1296_end
  if_1296:
    find_lex $P116, "$_"
    unless_null $P116, vivify_1131
    new $P116, "Undef"
  vivify_1131:
    $P117 = $P116."value"()
    exists $I103, $P117["value"]
    new $P112, 'Integer'
    set $P112, $I103
  if_1296_end:
    if $P112, if_1295
    set $P111, $P112
    goto if_1295_end
  if_1295:
.annotate 'line', 444
    .const 'Sub' $P1299 = "383_1338064451.944" 
    capture_lex $P1299
    $P1299()
.annotate 'line', 450
    new $P118, "Float"
    assign $P118, 1
    find_lex $P119, "$_"
    unless_null $P119, vivify_1137
    new $P119, "Undef"
  vivify_1137:
    $P120 = $P119."key"()
    find_lex $P1308, "%seen"
    unless_null $P1308, vivify_1138
    $P1308 = root_new ['parrot';'Hash']
    store_lex "%seen", $P1308
  vivify_1138:
    set $P1308[$P120], $P118
.annotate 'line', 443
    set $P111, $P118
  if_1295_end:
.annotate 'line', 442
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1298"  :anon :subid("383_1338064451.944") :outer("382_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 444
    new $P1303, 'ExceptionHandler'
    set_label $P1303, control_1302
    $P1303."handle_types_except"(.CONTROL_ALL)
    push_eh $P1303
.annotate 'line', 445
    find_lex $P1300, "$wrapper"
    unless_null $P1300, vivify_1132
    $P1300 = root_new ['parrot';'ResizablePMCArray']
  vivify_1132:
    set $P118, $P1300[0]
    unless_null $P118, vivify_1133
    new $P118, "Undef"
  vivify_1133:
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Var"]
.annotate 'line', 446
    find_lex $P123, "$_"
    unless_null $P123, vivify_1134
    new $P123, "Undef"
  vivify_1134:
    $P124 = $P123."key"()
.annotate 'line', 447
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$_"
    unless_null $P127, vivify_1135
    new $P127, "Undef"
  vivify_1135:
    $P128 = $P127."value"()
    set $P129, $P128["value"]
    unless_null $P129, vivify_1136
    new $P129, "Undef"
  vivify_1136:
    $P130 = $P126."get_ref"($P129)
.annotate 'line', 445
    $P131 = $P122."new"($P124 :named("name"), "lexical_6model" :named("scope"), 1 :named("isdecl"), $P130 :named("viviself"))
    $P132 = $P118."push"($P131)
.annotate 'line', 444
    pop_eh 
    goto skip_handler_1301
  control_1302:
    peek_exception $P1304
    .local pmc exception 
    .get_results (exception) 
    new $P1306, 'Integer'
    set $P1306, 1
    set exception["handled"], $P1306
    set $I1307, exception["handled"]
    eq $I1307, 1, handled_1305
    rethrow exception
  handled_1305:
    finalize $P1304
    .return (exception)
  skip_handler_1301:
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "set_nqp_language_defaults" :anon :subid("33_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1312
    .param pmc param_1313
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 469
    .const 'Sub' $P1320 = "384_1338064451.944" 
    capture_lex $P1320
    .lex "self", param_1312
    .lex "$block", param_1313
.annotate 'line', 471
    $P1315 = root_new ['parrot';'ResizablePMCArray']
    set $P1314, $P1315
    .lex "@loadlibs", $P1314
    new $P104, "ResizablePMCArray"
    push $P104, "nqp_group"
    push $P104, "nqp_ops"
    push $P104, "nqp_bigint_ops"
    push $P104, "trans_ops"
    push $P104, "io_ops"
    set $P1314, $P104
.annotate 'line', 472
    find_dynamic_lex $P106, "%*COMPILING"
    unless_null $P106, vivify_1146
    get_hll_global $P104, "GLOBAL"
    get_who $P105, $P104
    set $P106, $P105["%COMPILING"]
    unless_null $P106, vivify_1147
    die "Contextual %*COMPILING not found"
  vivify_1147:
  vivify_1146:
    set $P1317, $P106["%?OPTIONS"]
    unless_null $P1317, vivify_1148
    $P1317 = root_new ['parrot';'Hash']
  vivify_1148:
    set $P107, $P1317["vmlibs"]
    unless_null $P107, vivify_1149
    new $P107, "Undef"
  vivify_1149:
    unless $P107, if_1316_end
.annotate 'line', 473
    find_dynamic_lex $P111, "%*COMPILING"
    unless_null $P111, vivify_1150
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["%COMPILING"]
    unless_null $P111, vivify_1151
    die "Contextual %*COMPILING not found"
  vivify_1151:
  vivify_1150:
    set $P1318, $P111["%?OPTIONS"]
    unless_null $P1318, vivify_1152
    $P1318 = root_new ['parrot';'Hash']
  vivify_1152:
    set $P112, $P1318["vmlibs"]
    unless_null $P112, vivify_1153
    new $P112, "Undef"
  vivify_1153:
    set $S100, $P112
    split $P113, ",", $S100
    defined $I100, $P113
    unless $I100, for_undef_1154
    iter $P108, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1323_handler
    push_eh $P115
  loop1323_test:
    unless $P108, loop1323_done
    shift $P114, $P108
  loop1323_redo:
    .const 'Sub' $P1320 = "384_1338064451.944" 
    capture_lex $P1320
    $P1320($P114)
  loop1323_next:
    goto loop1323_test
  loop1323_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1323_next
    eq $P117, .CONTROL_LOOP_REDO, loop1323_redo
  loop1323_done:
    pop_eh 
  for_undef_1154:
  if_1316_end:
.annotate 'line', 477
    set $P104, param_1313
    unless_null $P104, vivify_1157
    new $P104, "Undef"
  vivify_1157:
    set $P1324, $P1314
    unless_null $P1324, vivify_1158
    $P1324 = root_new ['parrot';'ResizablePMCArray']
  vivify_1158:
    $P104."loadlibs"($P1324 :flat)
.annotate 'line', 480
    set $P104, param_1313
    unless_null $P104, vivify_1159
    new $P104, "Undef"
  vivify_1159:
    $P105 = $P104."hll"("nqp")
.annotate 'line', 469
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1319"  :anon :subid("384_1338064451.944") :outer("33_1338064451.944")
    .param pmc param_1321
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 473
    .lex "$_", param_1321
.annotate 'line', 474
    find_lex $P1322, "@loadlibs"
    unless_null $P1322, vivify_1155
    $P1322 = root_new ['parrot';'ResizablePMCArray']
  vivify_1155:
    find_lex $P115, "$_"
    unless_null $P115, vivify_1156
    new $P115, "Undef"
  vivify_1156:
    $P116 = $P1322."push"($P115)
.annotate 'line', 473
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "to_past" :anon :subid("34_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1328
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 485
    .const 'Sub' $P1343 = "388_1338064451.944" 
    capture_lex $P1343
    .const 'Sub' $P1331 = "385_1338064451.944" 
    capture_lex $P1331
    new $P1327, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1327, control_1326
    push_eh $P1327
    .lex "self", param_1328
.annotate 'line', 486
    set $P105, param_1328
    nqp_decontainerize $P106, $P105
    $P107 = $P106."is_precompilation_mode"()
    if $P107, if_1329
.annotate 'line', 519
    .const 'Sub' $P1343 = "388_1338064451.944" 
    capture_lex $P1343
    $P112 = $P1343()
    set $P104, $P112
.annotate 'line', 486
    goto if_1329_end
  if_1329:
    .const 'Sub' $P1331 = "385_1338064451.944" 
    capture_lex $P1331
    $P110 = $P1331()
    set $P104, $P110
  if_1329_end:
.annotate 'line', 485
    .return ($P104)
  control_1326:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1342"  :anon :subid("388_1338064451.944") :outer("34_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 519
    .const 'Sub' $P1350 = "390_1338064451.944" 
    capture_lex $P1350
    .const 'Sub' $P1346 = "389_1338064451.944" 
    capture_lex $P1346
.annotate 'line', 520
    new $P111, "Undef"
    set $P1344, $P111
    .lex "$tasks", $P1344
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
    $P116 = $P115."new"()
    set $P1344, $P116
.annotate 'line', 521
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."load_dependency_tasks"()
    defined $I100, $P115
    unless $I100, for_undef_1160
    iter $P112, $P115
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1348_handler
    push_eh $P117
  loop1348_test:
    unless $P112, loop1348_done
    shift $P116, $P112
  loop1348_redo:
    .const 'Sub' $P1346 = "389_1338064451.944" 
    capture_lex $P1346
    $P1346($P116)
  loop1348_next:
    goto loop1348_test
  loop1348_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1348_next
    eq $P118, .CONTROL_LOOP_REDO, loop1348_redo
  loop1348_done:
    pop_eh 
  for_undef_1160:
.annotate 'line', 524
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."fixup_tasks"()
    defined $I100, $P115
    unless $I100, for_undef_1163
    iter $P112, $P115
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1352_handler
    push_eh $P117
  loop1352_test:
    unless $P112, loop1352_done
    shift $P116, $P112
  loop1352_redo:
    .const 'Sub' $P1350 = "390_1338064451.944" 
    capture_lex $P1350
    $P1350($P116)
  loop1352_next:
    goto loop1352_test
  loop1352_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1352_next
    eq $P118, .CONTROL_LOOP_REDO, loop1352_redo
  loop1352_done:
    pop_eh 
  for_undef_1163:
.annotate 'line', 527
    new $P112, "Exception"
    set $P112['type'], .CONTROL_RETURN
    set $P113, $P1344
    unless_null $P113, vivify_1166
    new $P113, "Undef"
  vivify_1166:
    setattribute $P112, 'payload', $P113
    throw $P112
.annotate 'line', 519
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1345"  :anon :subid("389_1338064451.944") :outer("388_1338064451.944")
    .param pmc param_1347
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 521
    .lex "$_", param_1347
.annotate 'line', 522
    find_lex $P117, "$tasks"
    unless_null $P117, vivify_1161
    new $P117, "Undef"
  vivify_1161:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Stmt"]
    find_lex $P122, "$_"
    unless_null $P122, vivify_1162
    new $P122, "Undef"
  vivify_1162:
    $P123 = $P121."new"($P122)
    $P124 = $P117."push"($P123)
.annotate 'line', 521
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1349"  :anon :subid("390_1338064451.944") :outer("388_1338064451.944")
    .param pmc param_1351
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 524
    .lex "$_", param_1351
.annotate 'line', 525
    find_lex $P117, "$tasks"
    unless_null $P117, vivify_1164
    new $P117, "Undef"
  vivify_1164:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Stmt"]
    find_lex $P122, "$_"
    unless_null $P122, vivify_1165
    new $P122, "Undef"
  vivify_1165:
    $P123 = $P121."new"($P122)
    $P124 = $P117."push"($P123)
.annotate 'line', 524
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1330"  :anon :subid("385_1338064451.944") :outer("34_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 486
    .const 'Sub' $P1339 = "387_1338064451.944" 
    capture_lex $P1339
    .const 'Sub' $P1335 = "386_1338064451.944" 
    capture_lex $P1335
.annotate 'line', 487
    new $P108, "Undef"
    set $P1332, $P108
    .lex "$load_tasks", $P1332
.annotate 'line', 491
    new $P109, "Undef"
    set $P1333, $P109
    .lex "$fixup_tasks", $P1333
.annotate 'line', 487
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1332, $P114
.annotate 'line', 488
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."load_dependency_tasks"()
    defined $I100, $P113
    unless $I100, for_undef_1167
    iter $P110, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1337_handler
    push_eh $P115
  loop1337_test:
    unless $P110, loop1337_done
    shift $P114, $P110
  loop1337_redo:
    .const 'Sub' $P1335 = "386_1338064451.944" 
    capture_lex $P1335
    $P1335($P114)
  loop1337_next:
    goto loop1337_test
  loop1337_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1337_next
    eq $P116, .CONTROL_LOOP_REDO, loop1337_redo
  loop1337_done:
    pop_eh 
  for_undef_1167:
.annotate 'line', 491
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1333, $P114
.annotate 'line', 492
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."fixup_tasks"()
    defined $I100, $P113
    unless $I100, for_undef_1170
    iter $P110, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1341_handler
    push_eh $P115
  loop1341_test:
    unless $P110, loop1341_done
    shift $P114, $P110
  loop1341_redo:
    .const 'Sub' $P1339 = "387_1338064451.944" 
    capture_lex $P1339
    $P1339($P114)
  loop1341_next:
    goto loop1341_test
  loop1341_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1341_next
    eq $P116, .CONTROL_LOOP_REDO, loop1341_redo
  loop1341_done:
    pop_eh 
  for_undef_1170:
.annotate 'line', 495
    new $P110, "Exception"
    set $P110['type'], .CONTROL_RETURN
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Stmts"]
.annotate 'line', 496
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
    $P119 = $P118."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 497
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    $P124 = $P123."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 498
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 500
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Op"]
    $P133 = $P132."new"("getinterp P" :named("pirop"))
.annotate 'line', 501
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
    $P138 = $P137."new"("LexPad", "get_class Ps" :named("pirop"))
.annotate 'line', 502
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Op"]
    $P143 = $P142."new"("NQPLexPad", "get_class Ps" :named("pirop"))
    $P144 = $P128."new"($P133, $P138, $P143, "callmethod" :named("pasttype"), "hll_map" :named("name"))
.annotate 'line', 504
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P148, $P147["Op"]
.annotate 'line', 506
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    $P153 = $P152."new"("cur_sc" :named("name"), "register" :named("scope"), 1 :named("isdecl"))
.annotate 'line', 507
    get_hll_global $P154, "GLOBAL"
    nqp_get_package_through_who $P155, $P154, "PAST"
    get_who $P156, $P155
    set $P157, $P156["Op"]
    find_lex $P158, "self"
    nqp_decontainerize $P159, $P158
    $P160 = $P159."handle"()
    $P161 = $P157."new"($P160, "nqp_create_sc Ps" :named("pirop"))
    $P162 = $P148."new"($P153, $P161, "bind_6model" :named("pasttype"))
.annotate 'line', 509
    get_hll_global $P163, "GLOBAL"
    nqp_get_package_through_who $P164, $P163, "PAST"
    get_who $P165, $P164
    set $P166, $P165["Op"]
.annotate 'line', 511
    get_hll_global $P167, "GLOBAL"
    nqp_get_package_through_who $P168, $P167, "PAST"
    get_who $P169, $P168
    set $P170, $P169["Var"]
    $P171 = $P170."new"("cur_sc" :named("name"), "register" :named("scope"))
.annotate 'line', 512
    find_lex $P172, "self"
    nqp_decontainerize $P173, $P172
    $P174 = $P173."sc"()
    $P175 = $P174."description"()
    $P176 = $P166."new"($P171, $P175, "callmethod" :named("pasttype"), "set_description" :named("name"))
.annotate 'line', 509
    set $P177, $P1332
    unless_null $P177, vivify_1173
    new $P177, "Undef"
  vivify_1173:
.annotate 'line', 515
    find_lex $P178, "self"
    nqp_decontainerize $P179, $P178
    $P180 = $P179."serialize_and_produce_deserialization_past"("cur_sc")
    set $P181, $P1333
    unless_null $P181, vivify_1174
    new $P181, "Undef"
  vivify_1174:
    $P182 = $P114."new"($P119, $P124, $P144, $P162, $P176, $P177, $P180, $P181)
.annotate 'line', 495
    setattribute $P110, 'payload', $P182
    throw $P110
.annotate 'line', 486
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1334"  :anon :subid("386_1338064451.944") :outer("385_1338064451.944")
    .param pmc param_1336
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 488
    .lex "$_", param_1336
.annotate 'line', 489
    find_lex $P115, "$load_tasks"
    unless_null $P115, vivify_1168
    new $P115, "Undef"
  vivify_1168:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    find_lex $P120, "$_"
    unless_null $P120, vivify_1169
    new $P120, "Undef"
  vivify_1169:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 488
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1338"  :anon :subid("387_1338064451.944") :outer("385_1338064451.944")
    .param pmc param_1340
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 492
    .lex "$_", param_1340
.annotate 'line', 493
    find_lex $P115, "$fixup_tasks"
    unless_null $P115, vivify_1171
    new $P115, "Undef"
  vivify_1171:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    find_lex $P120, "$_"
    unless_null $P120, vivify_1172
    new $P120, "Undef"
  vivify_1172:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 492
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_lexical" :anon :subid("35_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1354
    .param pmc param_1355
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .lex "self", param_1354
    .lex "$name", param_1355
.annotate 'line', 534
    set $P104, param_1354
    nqp_decontainerize $P105, $P104
    set $P106, param_1355
    unless_null $P106, vivify_1175
    new $P106, "Undef"
  vivify_1175:
    $P107 = $P105."is_scope"($P106, "lexical")
.annotate 'line', 533
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_package" :anon :subid("36_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1357
    .param pmc param_1358
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 539
    .lex "self", param_1357
    .lex "$name", param_1358
.annotate 'line', 540
    set $P104, param_1357
    nqp_decontainerize $P105, $P104
    set $P106, param_1358
    unless_null $P106, vivify_1176
    new $P106, "Undef"
  vivify_1176:
    $P107 = $P105."is_scope"($P106, "package")
.annotate 'line', 539
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "is_scope" :anon :subid("37_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1362
    .param pmc param_1363
    .param pmc param_1364
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 545
    .const 'Sub' $P1368 = "391_1338064451.944" 
    capture_lex $P1368
    new $P1361, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1361, control_1360
    push_eh $P1361
    .lex "self", param_1362
    .lex "$name", param_1363
    .lex "$wanted_scope", param_1364
.annotate 'line', 546
    new $P104, "Undef"
    set $P1365, $P104
    .lex "$i", $P1365
    set $P105, param_1362
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1366, $P106, $P107, "@!BLOCKS", 8
    unless_null $P1366, vivify_1177
    $P1366 = root_new ['parrot';'ResizablePMCArray']
  vivify_1177:
    set $N100, $P1366
    new $P108, 'Float'
    set $P108, $N100
    set $P1365, $P108
.annotate 'line', 547
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1375_handler
    push_eh $P107
  loop1375_test:
    set $P105, $P1365
    unless_null $P105, vivify_1178
    new $P105, "Undef"
  vivify_1178:
    set $N100, $P105
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1375_done
  loop1375_redo:
    .const 'Sub' $P1368 = "391_1338064451.944" 
    capture_lex $P1368
    $P1368()
  loop1375_next:
    goto loop1375_test
  loop1375_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1375_next
    eq $P108, .CONTROL_LOOP_REDO, loop1375_redo
  loop1375_done:
    pop_eh 
.annotate 'line', 545
    .return (0)
  control_1360:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1367"  :anon :subid("391_1338064451.944") :outer("37_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 549
    $P1370 = root_new ['parrot';'Hash']
    set $P1369, $P1370
    .lex "%sym", $P1369
.annotate 'line', 548
    find_lex $P106, "$i"
    unless_null $P106, vivify_1179
    new $P106, "Undef"
  vivify_1179:
    sub $P107, $P106, 1
    store_lex "$i", $P107
.annotate 'line', 549
    find_lex $P106, "$i"
    unless_null $P106, vivify_1180
    new $P106, "Undef"
  vivify_1180:
    set $I101, $P106
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1371, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1371, vivify_1181
    $P1371 = root_new ['parrot';'ResizablePMCArray']
  vivify_1181:
    set $P110, $P1371[$I101]
    unless_null $P110, vivify_1182
    new $P110, "Undef"
  vivify_1182:
    find_lex $P111, "$name"
    unless_null $P111, vivify_1183
    new $P111, "Undef"
  vivify_1183:
    $P112 = $P110."symbol"($P111)
    set $P1369, $P112
.annotate 'line', 550
    set $P1373, $P1369
    unless_null $P1373, vivify_1184
    $P1373 = root_new ['parrot';'Hash']
  vivify_1184:
    set $N102, $P1373
    if $N102, if_1372
    new $P106, 'Float'
    set $P106, $N102
    goto if_1372_end
  if_1372:
.annotate 'line', 551
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P1374, $P1369
    unless_null $P1374, vivify_1185
    $P1374 = root_new ['parrot';'Hash']
  vivify_1185:
    set $P108, $P1374["scope"]
    unless_null $P108, vivify_1186
    new $P108, "Undef"
  vivify_1186:
    set $S100, $P108
    find_lex $P109, "$wanted_scope"
    unless_null $P109, vivify_1187
    new $P109, "Undef"
  vivify_1187:
    set $S101, $P109
    iseq $I101, $S100, $S101
    new $P110, 'Integer'
    set $P110, $I101
    setattribute $P107, 'payload', $P110
    throw $P107
  if_1372_end:
.annotate 'line', 547
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "known_sym" :anon :subid("38_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1377
    .param pmc param_1378
    .param pmc param_1379
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 558
    .const 'Sub' $P1382 = "392_1338064451.944" 
    capture_lex $P1382
    .lex "self", param_1377
    .lex "$/", param_1378
    .lex "@name", param_1379
.annotate 'line', 559
    new $P104, "Undef"
    set $P1380, $P104
    .lex "$known", $P1380
    new $P105, "Float"
    assign $P105, 0
    set $P1380, $P105
.annotate 'line', 560
    .const 'Sub' $P1382 = "392_1338064451.944" 
    capture_lex $P1382
    $P1382()
.annotate 'line', 558
    set $P105, $P1380
    unless_null $P105, vivify_1189
    new $P105, "Undef"
  vivify_1189:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1381"  :anon :subid("392_1338064451.944") :outer("38_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 560
    new $P1386, 'ExceptionHandler'
    set_label $P1386, control_1385
    $P1386."handle_types_except"(.CONTROL_ALL)
    push_eh $P1386
.annotate 'line', 561
    find_lex $P105, "self"
    nqp_decontainerize $P106, $P105
    find_lex $P1383, "@name"
    unless_null $P1383, vivify_1188
    $P1383 = root_new ['parrot';'ResizablePMCArray']
  vivify_1188:
    $P106."find_sym"($P1383)
.annotate 'line', 562
    new $P105, "Float"
    assign $P105, 1
    store_lex "$known", $P105
.annotate 'line', 560
    pop_eh 
    goto skip_handler_1384
  control_1385:
    peek_exception $P1387
    .local pmc exception 
    .get_results (exception) 
    new $P1389, 'Integer'
    set $P1389, 1
    set exception["handled"], $P1389
    set $I1390, exception["handled"]
    eq $I1390, 1, handled_1388
    rethrow exception
  handled_1388:
    finalize $P1387
    .return (exception)
  skip_handler_1384:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "find_sym" :anon :subid("39_1338064451.944") :outer("372_1338064451.944")
    .param pmc param_1394
    .param pmc param_1395
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 570
    .const 'Sub' $P1440 = "397_1338064451.944" 
    capture_lex $P1440
    .const 'Sub' $P1421 = "395_1338064451.944" 
    capture_lex $P1421
    .const 'Sub' $P1402 = "393_1338064451.944" 
    capture_lex $P1402
    new $P1393, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1393, control_1392
    push_eh $P1393
    .lex "self", param_1394
    .lex "@name", param_1395
.annotate 'line', 596
    new $P104, "Undef"
    set $P1396, $P104
    .lex "$result", $P1396
.annotate 'line', 572
    set $P1398, param_1395
    unless_null $P1398, vivify_1190
    $P1398 = root_new ['parrot';'ResizablePMCArray']
  vivify_1190:
    set $N100, $P1398
    if $N100, unless_1397_end
    die "Cannot look up empty name"
  unless_1397_end:
.annotate 'line', 576
    set $P1400, param_1395
    unless_null $P1400, vivify_1191
    $P1400 = root_new ['parrot';'ResizablePMCArray']
  vivify_1191:
    set $N100, $P1400
    set $N101, 1
    iseq $I100, $N100, $N101
    unless $I100, if_1399_end
    .const 'Sub' $P1402 = "393_1338064451.944" 
    capture_lex $P1402
    $P1402()
  if_1399_end:
.annotate 'line', 596
    find_dynamic_lex $P107, "$*GLOBALish"
    unless_null $P107, vivify_1206
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$GLOBALish"]
    unless_null $P107, vivify_1207
    die "Contextual $*GLOBALish not found"
  vivify_1207:
  vivify_1206:
    set $P1396, $P107
.annotate 'line', 597
    set $P1419, param_1395
    unless_null $P1419, vivify_1208
    $P1419 = root_new ['parrot';'ResizablePMCArray']
  vivify_1208:
    set $N100, $P1419
    set $N101, 2
    isge $I100, $N100, $N101
    unless $I100, if_1418_end
    .const 'Sub' $P1421 = "395_1338064451.944" 
    capture_lex $P1421
    $P1421()
  if_1418_end:
.annotate 'line', 617
    set $P1438, param_1395
    unless_null $P1438, vivify_1224
    $P1438 = root_new ['parrot';'ResizablePMCArray']
  vivify_1224:
    defined $I100, $P1438
    unless $I100, for_undef_1225
    iter $P105, $P1438
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1444_handler
    push_eh $P108
  loop1444_test:
    unless $P105, loop1444_done
    shift $P106, $P105
  loop1444_redo:
    .const 'Sub' $P1440 = "397_1338064451.944" 
    capture_lex $P1440
    $P1440($P106)
  loop1444_next:
    goto loop1444_test
  loop1444_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1444_next
    eq $P109, .CONTROL_LOOP_REDO, loop1444_redo
  loop1444_done:
    pop_eh 
  for_undef_1225:
.annotate 'line', 570
    set $P105, $P1396
    unless_null $P105, vivify_1232
    new $P105, "Undef"
  vivify_1232:
    .return ($P105)
  control_1392:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1401"  :anon :subid("393_1338064451.944") :outer("39_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 576
    .const 'Sub' $P1408 = "394_1338064451.944" 
    capture_lex $P1408
.annotate 'line', 577
    new $P105, "Undef"
    set $P1403, $P105
    .lex "$final_name", $P1403
.annotate 'line', 578
    new $P106, "Undef"
    set $P1404, $P106
    .lex "$i", $P1404
.annotate 'line', 577
    find_lex $P1405, "@name"
    unless_null $P1405, vivify_1192
    $P1405 = root_new ['parrot';'ResizablePMCArray']
  vivify_1192:
    set $P107, $P1405[0]
    unless_null $P107, vivify_1193
    new $P107, "Undef"
  vivify_1193:
    set $P1403, $P107
.annotate 'line', 578
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1406, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1406, vivify_1194
    $P1406 = root_new ['parrot';'ResizablePMCArray']
  vivify_1194:
    set $N102, $P1406
    new $P110, 'Float'
    set $P110, $N102
    set $P1404, $P110
.annotate 'line', 579
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1417_handler
    push_eh $P109
  loop1417_test:
    set $P107, $P1404
    unless_null $P107, vivify_1195
    new $P107, "Undef"
  vivify_1195:
    set $N102, $P107
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1417_done
  loop1417_redo:
    .const 'Sub' $P1408 = "394_1338064451.944" 
    capture_lex $P1408
    $P1408()
  loop1417_next:
    goto loop1417_test
  loop1417_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1417_next
    eq $P110, .CONTROL_LOOP_REDO, loop1417_redo
  loop1417_done:
    pop_eh 
.annotate 'line', 576
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1407"  :anon :subid("394_1338064451.944") :outer("393_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 581
    $P1410 = root_new ['parrot';'Hash']
    set $P1409, $P1410
    .lex "%sym", $P1409
.annotate 'line', 580
    find_lex $P108, "$i"
    unless_null $P108, vivify_1196
    new $P108, "Undef"
  vivify_1196:
    sub $P109, $P108, 1
    store_lex "$i", $P109
.annotate 'line', 581
    find_lex $P108, "$i"
    unless_null $P108, vivify_1197
    new $P108, "Undef"
  vivify_1197:
    set $I102, $P108
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1411, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1411, vivify_1198
    $P1411 = root_new ['parrot';'ResizablePMCArray']
  vivify_1198:
    set $P112, $P1411[$I102]
    unless_null $P112, vivify_1199
    new $P112, "Undef"
  vivify_1199:
    find_lex $P113, "$final_name"
    unless_null $P113, vivify_1200
    new $P113, "Undef"
  vivify_1200:
    $P114 = $P112."symbol"($P113)
    set $P1409, $P114
.annotate 'line', 582
    set $P1413, $P1409
    unless_null $P1413, vivify_1201
    $P1413 = root_new ['parrot';'Hash']
  vivify_1201:
    set $N104, $P1413
    if $N104, if_1412
    new $P108, 'Float'
    set $P108, $N104
    goto if_1412_end
  if_1412:
.annotate 'line', 583
    set $P1415, $P1409
    unless_null $P1415, vivify_1202
    $P1415 = root_new ['parrot';'Hash']
  vivify_1202:
    exists $I102, $P1415["value"]
    if $I102, if_1414
.annotate 'line', 587
    new $P110, 'String'
    set $P110, "No compile-time value for "
    find_lex $P111, "$final_name"
    unless_null $P111, vivify_1203
    new $P111, "Undef"
  vivify_1203:
    concat $P112, $P110, $P111
    die $P112
.annotate 'line', 586
    goto if_1414_end
  if_1414:
.annotate 'line', 584
    new $P110, "Exception"
    set $P110['type'], .CONTROL_RETURN
    set $P1416, $P1409
    unless_null $P1416, vivify_1204
    $P1416 = root_new ['parrot';'Hash']
  vivify_1204:
    set $P111, $P1416["value"]
    unless_null $P111, vivify_1205
    new $P111, "Undef"
  vivify_1205:
    setattribute $P110, 'payload', $P111
    throw $P110
  if_1414_end:
.annotate 'line', 582
    set $P108, $P109
  if_1412_end:
.annotate 'line', 579
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1420"  :anon :subid("395_1338064451.944") :outer("39_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 597
    .const 'Sub' $P1427 = "396_1338064451.944" 
    capture_lex $P1427
.annotate 'line', 598
    new $P105, "Undef"
    set $P1422, $P105
    .lex "$first", $P1422
.annotate 'line', 599
    new $P106, "Undef"
    set $P1423, $P106
    .lex "$i", $P1423
.annotate 'line', 598
    find_lex $P1424, "@name"
    unless_null $P1424, vivify_1209
    $P1424 = root_new ['parrot';'ResizablePMCArray']
  vivify_1209:
    set $P107, $P1424[0]
    unless_null $P107, vivify_1210
    new $P107, "Undef"
  vivify_1210:
    set $P1422, $P107
.annotate 'line', 599
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1425, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1425, vivify_1211
    $P1425 = root_new ['parrot';'ResizablePMCArray']
  vivify_1211:
    set $N102, $P1425
    new $P110, 'Float'
    set $P110, $N102
    set $P1423, $P110
.annotate 'line', 600
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1437_handler
    push_eh $P109
  loop1437_test:
    set $P107, $P1423
    unless_null $P107, vivify_1212
    new $P107, "Undef"
  vivify_1212:
    set $N102, $P107
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1437_done
  loop1437_redo:
    .const 'Sub' $P1427 = "396_1338064451.944" 
    capture_lex $P1427
    $P1427()
  loop1437_next:
    goto loop1437_test
  loop1437_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1437_next
    eq $P110, .CONTROL_LOOP_REDO, loop1437_redo
  loop1437_done:
    pop_eh 
.annotate 'line', 597
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1426"  :anon :subid("396_1338064451.944") :outer("395_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 602
    $P1429 = root_new ['parrot';'Hash']
    set $P1428, $P1429
    .lex "%sym", $P1428
.annotate 'line', 601
    find_lex $P108, "$i"
    unless_null $P108, vivify_1213
    new $P108, "Undef"
  vivify_1213:
    sub $P109, $P108, 1
    store_lex "$i", $P109
.annotate 'line', 602
    find_lex $P108, "$i"
    unless_null $P108, vivify_1214
    new $P108, "Undef"
  vivify_1214:
    set $I102, $P108
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "02B115C747AC5B6066BA35B29C9AE1DEA938AF77-1338064451.867", 1
    repr_get_attr_obj $P1430, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1430, vivify_1215
    $P1430 = root_new ['parrot';'ResizablePMCArray']
  vivify_1215:
    set $P112, $P1430[$I102]
    unless_null $P112, vivify_1216
    new $P112, "Undef"
  vivify_1216:
    find_lex $P113, "$first"
    unless_null $P113, vivify_1217
    new $P113, "Undef"
  vivify_1217:
    $P114 = $P112."symbol"($P113)
    set $P1428, $P114
.annotate 'line', 603
    set $P1432, $P1428
    unless_null $P1432, vivify_1218
    $P1432 = root_new ['parrot';'Hash']
  vivify_1218:
    set $N104, $P1432
    if $N104, if_1431
    new $P108, 'Float'
    set $P108, $N104
    goto if_1431_end
  if_1431:
.annotate 'line', 604
    set $P1434, $P1428
    unless_null $P1434, vivify_1219
    $P1434 = root_new ['parrot';'Hash']
  vivify_1219:
    exists $I102, $P1434["value"]
    if $I102, if_1433
.annotate 'line', 610
    new $P111, 'String'
    set $P111, "No compile-time value for "
    find_lex $P112, "$first"
    unless_null $P112, vivify_1220
    new $P112, "Undef"
  vivify_1220:
    concat $P113, $P111, $P112
    die $P113
.annotate 'line', 609
    goto if_1433_end
  if_1433:
.annotate 'line', 605
    set $P1435, $P1428
    unless_null $P1435, vivify_1221
    $P1435 = root_new ['parrot';'Hash']
  vivify_1221:
    set $P110, $P1435["value"]
    unless_null $P110, vivify_1222
    new $P110, "Undef"
  vivify_1222:
    store_lex "$result", $P110
.annotate 'line', 606
    find_lex $P1436, "@name"
    unless_null $P1436, vivify_1223
    $P1436 = root_new ['parrot';'ResizablePMCArray']
  vivify_1223:
    $P1436."shift"()
.annotate 'line', 607
    new $P110, "Float"
    assign $P110, 0
    store_lex "$i", $P110
.annotate 'line', 604
    set $P109, $P110
  if_1433_end:
.annotate 'line', 603
    set $P108, $P109
  if_1431_end:
.annotate 'line', 600
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1439"  :anon :subid("397_1338064451.944") :outer("39_1338064451.944")
    .param pmc param_1441
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 617
    .lex "$_", param_1441
.annotate 'line', 618
    find_lex $P110, "$_"
    unless_null $P110, vivify_1226
    new $P110, "Undef"
  vivify_1226:
    set $S100, $P110
    find_lex $P108, "$result"
    unless_null $P108, vivify_1227
    new $P108, "Undef"
  vivify_1227:
    get_who $P109, $P108
    exists $I101, $P109[$S100]
    if $I101, if_1442
.annotate 'line', 622
    new $P111, "String"
    assign $P111, "Could not locate compile-time value for symbol "
.annotate 'line', 623
    find_lex $P1443, "@name"
    unless_null $P1443, vivify_1228
    $P1443 = root_new ['parrot';'ResizablePMCArray']
  vivify_1228:
    join $S101, "::", $P1443
    concat $P112, $P111, $S101
.annotate 'line', 622
    die $P112
.annotate 'line', 621
    goto if_1442_end
  if_1442:
.annotate 'line', 619
    find_lex $P111, "$_"
    unless_null $P111, vivify_1229
    new $P111, "Undef"
  vivify_1229:
    find_lex $P112, "$result"
    unless_null $P112, vivify_1230
    new $P112, "Undef"
  vivify_1230:
    get_who $P113, $P112
    set $P114, $P113[$P111]
    unless_null $P114, vivify_1231
    new $P114, "Undef"
  vivify_1231:
    store_lex "$result", $P114
.annotate 'line', 618
    set $P107, $P114
  if_1442_end:
.annotate 'line', 617
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1446"  :subid("398_1338064451.944") :outer("368_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 632
    .const 'Sub' $P2619 = "229_1338064451.944" 
    capture_lex $P2619
    .const 'Sub' $P2613 = "228_1338064451.944" 
    capture_lex $P2613
    .const 'Sub' $P2607 = "227_1338064451.944" 
    capture_lex $P2607
    .const 'Sub' $P2601 = "226_1338064451.944" 
    capture_lex $P2601
    .const 'Sub' $P2595 = "225_1338064451.944" 
    capture_lex $P2595
    .const 'Sub' $P2587 = "224_1338064451.944" 
    capture_lex $P2587
    .const 'Sub' $P2581 = "223_1338064451.944" 
    capture_lex $P2581
    .const 'Sub' $P2575 = "222_1338064451.944" 
    capture_lex $P2575
    .const 'Sub' $P2569 = "221_1338064451.944" 
    capture_lex $P2569
    .const 'Sub' $P2563 = "220_1338064451.944" 
    capture_lex $P2563
    .const 'Sub' $P2557 = "219_1338064451.944" 
    capture_lex $P2557
    .const 'Sub' $P2551 = "218_1338064451.944" 
    capture_lex $P2551
    .const 'Sub' $P2545 = "217_1338064451.944" 
    capture_lex $P2545
    .const 'Sub' $P2539 = "216_1338064451.944" 
    capture_lex $P2539
    .const 'Sub' $P2533 = "215_1338064451.944" 
    capture_lex $P2533
    .const 'Sub' $P2527 = "214_1338064451.944" 
    capture_lex $P2527
    .const 'Sub' $P2521 = "213_1338064451.944" 
    capture_lex $P2521
    .const 'Sub' $P2515 = "212_1338064451.944" 
    capture_lex $P2515
    .const 'Sub' $P2509 = "211_1338064451.944" 
    capture_lex $P2509
    .const 'Sub' $P2503 = "210_1338064451.944" 
    capture_lex $P2503
    .const 'Sub' $P2497 = "209_1338064451.944" 
    capture_lex $P2497
    .const 'Sub' $P2491 = "208_1338064451.944" 
    capture_lex $P2491
    .const 'Sub' $P2485 = "207_1338064451.944" 
    capture_lex $P2485
    .const 'Sub' $P2479 = "206_1338064451.944" 
    capture_lex $P2479
    .const 'Sub' $P2473 = "205_1338064451.944" 
    capture_lex $P2473
    .const 'Sub' $P2467 = "204_1338064451.944" 
    capture_lex $P2467
    .const 'Sub' $P2461 = "203_1338064451.944" 
    capture_lex $P2461
    .const 'Sub' $P2455 = "202_1338064451.944" 
    capture_lex $P2455
    .const 'Sub' $P2449 = "201_1338064451.944" 
    capture_lex $P2449
    .const 'Sub' $P2443 = "200_1338064451.944" 
    capture_lex $P2443
    .const 'Sub' $P2437 = "199_1338064451.944" 
    capture_lex $P2437
    .const 'Sub' $P2431 = "198_1338064451.944" 
    capture_lex $P2431
    .const 'Sub' $P2425 = "197_1338064451.944" 
    capture_lex $P2425
    .const 'Sub' $P2419 = "196_1338064451.944" 
    capture_lex $P2419
    .const 'Sub' $P2413 = "195_1338064451.944" 
    capture_lex $P2413
    .const 'Sub' $P2407 = "194_1338064451.944" 
    capture_lex $P2407
    .const 'Sub' $P2401 = "193_1338064451.944" 
    capture_lex $P2401
    .const 'Sub' $P2395 = "192_1338064451.944" 
    capture_lex $P2395
    .const 'Sub' $P2389 = "191_1338064451.944" 
    capture_lex $P2389
    .const 'Sub' $P2383 = "190_1338064451.944" 
    capture_lex $P2383
    .const 'Sub' $P2377 = "189_1338064451.944" 
    capture_lex $P2377
    .const 'Sub' $P2371 = "188_1338064451.944" 
    capture_lex $P2371
    .const 'Sub' $P2365 = "187_1338064451.944" 
    capture_lex $P2365
    .const 'Sub' $P2359 = "186_1338064451.944" 
    capture_lex $P2359
    .const 'Sub' $P2353 = "185_1338064451.944" 
    capture_lex $P2353
    .const 'Sub' $P2347 = "184_1338064451.944" 
    capture_lex $P2347
    .const 'Sub' $P2341 = "183_1338064451.944" 
    capture_lex $P2341
    .const 'Sub' $P2335 = "182_1338064451.944" 
    capture_lex $P2335
    .const 'Sub' $P2329 = "181_1338064451.944" 
    capture_lex $P2329
    .const 'Sub' $P2323 = "180_1338064451.944" 
    capture_lex $P2323
    .const 'Sub' $P2317 = "179_1338064451.944" 
    capture_lex $P2317
    .const 'Sub' $P2311 = "178_1338064451.944" 
    capture_lex $P2311
    .const 'Sub' $P2305 = "177_1338064451.944" 
    capture_lex $P2305
    .const 'Sub' $P2299 = "176_1338064451.944" 
    capture_lex $P2299
    .const 'Sub' $P2294 = "175_1338064451.944" 
    capture_lex $P2294
    .const 'Sub' $P2289 = "174_1338064451.944" 
    capture_lex $P2289
    .const 'Sub' $P2283 = "173_1338064451.944" 
    capture_lex $P2283
    .const 'Sub' $P2277 = "172_1338064451.944" 
    capture_lex $P2277
    .const 'Sub' $P2271 = "171_1338064451.944" 
    capture_lex $P2271
    .const 'Sub' $P2265 = "170_1338064451.944" 
    capture_lex $P2265
    .const 'Sub' $P2259 = "169_1338064451.944" 
    capture_lex $P2259
    .const 'Sub' $P2253 = "168_1338064451.944" 
    capture_lex $P2253
    .const 'Sub' $P2247 = "167_1338064451.944" 
    capture_lex $P2247
    .const 'Sub' $P2241 = "166_1338064451.944" 
    capture_lex $P2241
    .const 'Sub' $P2235 = "165_1338064451.944" 
    capture_lex $P2235
    .const 'Sub' $P2227 = "164_1338064451.944" 
    capture_lex $P2227
    .const 'Sub' $P2221 = "163_1338064451.944" 
    capture_lex $P2221
    .const 'Sub' $P2215 = "162_1338064451.944" 
    capture_lex $P2215
    .const 'Sub' $P2209 = "161_1338064451.944" 
    capture_lex $P2209
    .const 'Sub' $P2203 = "160_1338064451.944" 
    capture_lex $P2203
    .const 'Sub' $P2197 = "159_1338064451.944" 
    capture_lex $P2197
    .const 'Sub' $P2191 = "158_1338064451.944" 
    capture_lex $P2191
    .const 'Sub' $P2183 = "156_1338064451.944" 
    capture_lex $P2183
    .const 'Sub' $P2177 = "155_1338064451.944" 
    capture_lex $P2177
    .const 'Sub' $P2171 = "154_1338064451.944" 
    capture_lex $P2171
    .const 'Sub' $P2165 = "153_1338064451.944" 
    capture_lex $P2165
    .const 'Sub' $P2159 = "152_1338064451.944" 
    capture_lex $P2159
    .const 'Sub' $P2151 = "151_1338064451.944" 
    capture_lex $P2151
    .const 'Sub' $P2145 = "150_1338064451.944" 
    capture_lex $P2145
    .const 'Sub' $P2139 = "149_1338064451.944" 
    capture_lex $P2139
    .const 'Sub' $P2133 = "148_1338064451.944" 
    capture_lex $P2133
    .const 'Sub' $P2127 = "147_1338064451.944" 
    capture_lex $P2127
    .const 'Sub' $P2121 = "146_1338064451.944" 
    capture_lex $P2121
    .const 'Sub' $P2115 = "145_1338064451.944" 
    capture_lex $P2115
    .const 'Sub' $P2109 = "144_1338064451.944" 
    capture_lex $P2109
    .const 'Sub' $P2094 = "143_1338064451.944" 
    capture_lex $P2094
    .const 'Sub' $P2088 = "142_1338064451.944" 
    capture_lex $P2088
    .const 'Sub' $P2081 = "140_1338064451.944" 
    capture_lex $P2081
    .const 'Sub' $P2076 = "139_1338064451.944" 
    capture_lex $P2076
    .const 'Sub' $P2070 = "138_1338064451.944" 
    capture_lex $P2070
    .const 'Sub' $P2064 = "137_1338064451.944" 
    capture_lex $P2064
    .const 'Sub' $P2058 = "136_1338064451.944" 
    capture_lex $P2058
    .const 'Sub' $P2045 = "135_1338064451.944" 
    capture_lex $P2045
    .const 'Sub' $P2038 = "133_1338064451.944" 
    capture_lex $P2038
    .const 'Sub' $P2031 = "132_1338064451.944" 
    capture_lex $P2031
    .const 'Sub' $P2024 = "131_1338064451.944" 
    capture_lex $P2024
    .const 'Sub' $P2014 = "129_1338064451.944" 
    capture_lex $P2014
    .const 'Sub' $P2005 = "128_1338064451.944" 
    capture_lex $P2005
    .const 'Sub' $P1999 = "127_1338064451.944" 
    capture_lex $P1999
    .const 'Sub' $P1993 = "126_1338064451.944" 
    capture_lex $P1993
    .const 'Sub' $P1987 = "125_1338064451.944" 
    capture_lex $P1987
    .const 'Sub' $P1977 = "123_1338064451.944" 
    capture_lex $P1977
    .const 'Sub' $P1971 = "122_1338064451.944" 
    capture_lex $P1971
    .const 'Sub' $P1961 = "121_1338064451.944" 
    capture_lex $P1961
    .const 'Sub' $P1955 = "120_1338064451.944" 
    capture_lex $P1955
    .const 'Sub' $P1949 = "119_1338064451.944" 
    capture_lex $P1949
    .const 'Sub' $P1943 = "118_1338064451.944" 
    capture_lex $P1943
    .const 'Sub' $P1937 = "117_1338064451.944" 
    capture_lex $P1937
    .const 'Sub' $P1895 = "115_1338064451.944" 
    capture_lex $P1895
    .const 'Sub' $P1887 = "114_1338064451.944" 
    capture_lex $P1887
    .const 'Sub' $P1879 = "113_1338064451.944" 
    capture_lex $P1879
    .const 'Sub' $P1871 = "112_1338064451.944" 
    capture_lex $P1871
    .const 'Sub' $P1863 = "111_1338064451.944" 
    capture_lex $P1863
    .const 'Sub' $P1855 = "110_1338064451.944" 
    capture_lex $P1855
    .const 'Sub' $P1847 = "109_1338064451.944" 
    capture_lex $P1847
    .const 'Sub' $P1839 = "108_1338064451.944" 
    capture_lex $P1839
    .const 'Sub' $P1831 = "106_1338064451.944" 
    capture_lex $P1831
    .const 'Sub' $P1825 = "105_1338064451.944" 
    capture_lex $P1825
    .const 'Sub' $P1819 = "104_1338064451.944" 
    capture_lex $P1819
    .const 'Sub' $P1813 = "103_1338064451.944" 
    capture_lex $P1813
    .const 'Sub' $P1807 = "102_1338064451.944" 
    capture_lex $P1807
    .const 'Sub' $P1801 = "101_1338064451.944" 
    capture_lex $P1801
    .const 'Sub' $P1795 = "100_1338064451.944" 
    capture_lex $P1795
    .const 'Sub' $P1789 = "99_1338064451.944" 
    capture_lex $P1789
    .const 'Sub' $P1773 = "98_1338064451.944" 
    capture_lex $P1773
    .const 'Sub' $P1767 = "95_1338064451.944" 
    capture_lex $P1767
    .const 'Sub' $P1761 = "94_1338064451.944" 
    capture_lex $P1761
    .const 'Sub' $P1755 = "93_1338064451.944" 
    capture_lex $P1755
    .const 'Sub' $P1749 = "92_1338064451.944" 
    capture_lex $P1749
    .const 'Sub' $P1743 = "91_1338064451.944" 
    capture_lex $P1743
    .const 'Sub' $P1737 = "90_1338064451.944" 
    capture_lex $P1737
    .const 'Sub' $P1731 = "89_1338064451.944" 
    capture_lex $P1731
    .const 'Sub' $P1725 = "88_1338064451.944" 
    capture_lex $P1725
    .const 'Sub' $P1719 = "87_1338064451.944" 
    capture_lex $P1719
    .const 'Sub' $P1711 = "85_1338064451.944" 
    capture_lex $P1711
    .const 'Sub' $P1705 = "84_1338064451.944" 
    capture_lex $P1705
    .const 'Sub' $P1697 = "82_1338064451.944" 
    capture_lex $P1697
    .const 'Sub' $P1691 = "81_1338064451.944" 
    capture_lex $P1691
    .const 'Sub' $P1685 = "80_1338064451.944" 
    capture_lex $P1685
    .const 'Sub' $P1679 = "79_1338064451.944" 
    capture_lex $P1679
    .const 'Sub' $P1671 = "77_1338064451.944" 
    capture_lex $P1671
    .const 'Sub' $P1665 = "76_1338064451.944" 
    capture_lex $P1665
    .const 'Sub' $P1659 = "75_1338064451.944" 
    capture_lex $P1659
    .const 'Sub' $P1653 = "74_1338064451.944" 
    capture_lex $P1653
    .const 'Sub' $P1647 = "73_1338064451.944" 
    capture_lex $P1647
    .const 'Sub' $P1636 = "72_1338064451.944" 
    capture_lex $P1636
    .const 'Sub' $P1630 = "70_1338064451.944" 
    capture_lex $P1630
    .const 'Sub' $P1624 = "69_1338064451.944" 
    capture_lex $P1624
    .const 'Sub' $P1616 = "67_1338064451.944" 
    capture_lex $P1616
    .const 'Sub' $P1610 = "66_1338064451.944" 
    capture_lex $P1610
    .const 'Sub' $P1602 = "64_1338064451.944" 
    capture_lex $P1602
    .const 'Sub' $P1596 = "63_1338064451.944" 
    capture_lex $P1596
    .const 'Sub' $P1590 = "62_1338064451.944" 
    capture_lex $P1590
    .const 'Sub' $P1584 = "61_1338064451.944" 
    capture_lex $P1584
    .const 'Sub' $P1578 = "60_1338064451.944" 
    capture_lex $P1578
    .const 'Sub' $P1572 = "59_1338064451.944" 
    capture_lex $P1572
    .const 'Sub' $P1567 = "58_1338064451.944" 
    capture_lex $P1567
    .const 'Sub' $P1561 = "57_1338064451.944" 
    capture_lex $P1561
    .const 'Sub' $P1555 = "56_1338064451.944" 
    capture_lex $P1555
    .const 'Sub' $P1549 = "55_1338064451.944" 
    capture_lex $P1549
    .const 'Sub' $P1543 = "54_1338064451.944" 
    capture_lex $P1543
    .const 'Sub' $P1533 = "53_1338064451.944" 
    capture_lex $P1533
    .const 'Sub' $P1528 = "51_1338064451.944" 
    capture_lex $P1528
    .const 'Sub' $P1517 = "50_1338064451.944" 
    capture_lex $P1517
    .const 'Sub' $P1506 = "49_1338064451.944" 
    capture_lex $P1506
    .const 'Sub' $P1495 = "47_1338064451.944" 
    capture_lex $P1495
    .const 'Sub' $P1490 = "45_1338064451.944" 
    capture_lex $P1490
    .const 'Sub' $P1484 = "44_1338064451.944" 
    capture_lex $P1484
    .const 'Sub' $P1478 = "43_1338064451.944" 
    capture_lex $P1478
    .const 'Sub' $P1472 = "42_1338064451.944" 
    capture_lex $P1472
    .const 'Sub' $P1466 = "41_1338064451.944" 
    capture_lex $P1466
    .const 'Sub' $P1450 = "40_1338064451.944" 
    capture_lex $P1450
    .lex "$?PACKAGE", $P1448
    .lex "$?CLASS", $P1449
.annotate 'line', 1255
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1256
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1257
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1258
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1259
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1260
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1261
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1262
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1263
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1264
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1265
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1266
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1267
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1268
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1269
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 1368
    .const 'Sub' $P2619 = "229_1338064451.944" 
    newclosure $P2627, $P2619
.annotate 'line', 632
    .return ($P2627)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "TOP" :anon :subid("40_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1451
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 633
    .lex "self", param_1451
.annotate 'line', 635
    $P1453 = root_new ['parrot';'Hash']
    set $P1452, $P1453
    .lex "%*LANG", $P1452
.annotate 'line', 644
    $P1455 = root_new ['parrot';'Hash']
    set $P1454, $P1455
    .lex "%*HOW", $P1454
.annotate 'line', 651
    new $P103, "Undef"
    set $P1456, $P103
    .lex "$file", $P1456
.annotate 'line', 653
    new $P104, "Undef"
    set $P1457, $P104
    .lex "$source_id", $P1457
.annotate 'line', 657
    new $P105, "Undef"
    set $P1458, $P105
    .lex "$*W", $P1458
.annotate 'line', 661
    new $P106, "Undef"
    set $P1459, $P106
    .lex "$*SCOPE", $P1459
.annotate 'line', 662
    new $P107, "Undef"
    set $P1460, $P107
    .lex "$*MULTINESS", $P1460
.annotate 'line', 663
    new $P108, "Undef"
    set $P1461, $P108
    .lex "$*PKGDECL", $P1461
.annotate 'line', 664
    new $P109, "Undef"
    set $P1462, $P109
    .lex "$*INVOCANT_OK", $P1462
.annotate 'line', 665
    new $P110, "Undef"
    set $P1463, $P110
    .lex "$*RETURN_USED", $P1463
.annotate 'line', 633
    set $P113, $P1452
    unless_null $P113, vivify_1233
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%LANG"]
    unless_null $P113, vivify_1234
    die "Contextual %*LANG not found"
  vivify_1234:
  vivify_1233:
.annotate 'line', 636
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Regex"]
    set $P117, $P1452
    unless_null $P117, vivify_1235
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1236
    die "Contextual %*LANG not found"
  vivify_1236:
    set $P1452, $P117
  vivify_1235:
    set $P117["Regex"], $P114
.annotate 'line', 637
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["RegexActions"]
    set $P117, $P1452
    unless_null $P117, vivify_1237
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1238
    die "Contextual %*LANG not found"
  vivify_1238:
    set $P1452, $P117
  vivify_1237:
    set $P117["Regex-actions"], $P114
.annotate 'line', 638
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Grammar"]
    set $P117, $P1452
    unless_null $P117, vivify_1239
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1240
    die "Contextual %*LANG not found"
  vivify_1240:
    set $P1452, $P117
  vivify_1239:
    set $P117["MAIN"], $P114
.annotate 'line', 639
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Actions"]
    set $P117, $P1452
    unless_null $P117, vivify_1241
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1242
    die "Contextual %*LANG not found"
  vivify_1242:
    set $P1452, $P117
  vivify_1241:
    set $P117["MAIN-actions"], $P114
.annotate 'line', 633
    set $P113, $P1454
    unless_null $P113, vivify_1243
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%HOW"]
    unless_null $P113, vivify_1244
    die "Contextual %*HOW not found"
  vivify_1244:
  vivify_1243:
.annotate 'line', 645
    get_knowhow $P111
    set $P114, $P1454
    unless_null $P114, vivify_1245
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1246
    die "Contextual %*HOW not found"
  vivify_1246:
    set $P1454, $P114
  vivify_1245:
    set $P114["knowhow"], $P111
.annotate 'line', 646
    get_knowhow_attribute $P111
    set $P114, $P1454
    unless_null $P114, vivify_1247
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1248
    die "Contextual %*HOW not found"
  vivify_1248:
    set $P1454, $P114
  vivify_1247:
    set $P114["knowhow-attr"], $P111
.annotate 'line', 651
    find_caller_lex $P111, "$?FILES"
    set $P1456, $P111
.annotate 'line', 653
    set $P111, param_1451
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P117, $P114["NQPCursor"]
    unless_null $P117, vivify_1249
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["NQPCursor"]
  vivify_1249:
    type_check $I100, $P112, $P117
    if $I100, if_1464
.annotate 'line', 655
    set $P125, param_1451
    nqp_decontainerize $P126, $P125
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "Regex"
    get_who $P129, $P128
    set $P130, $P129["Cursor"]
    getattribute $P131, $P126, $P130, "$!target"
    set $S100, $P131
.annotate 'line', 653
    goto if_1464_end
  if_1464:
.annotate 'line', 654
    set $P118, param_1451
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?PACKAGE"
    get_who $P121, $P120
    set $P124, $P121["NQPCursor"]
    unless_null $P124, vivify_1250
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["NQPCursor"]
  vivify_1250:
    repr_get_attr_str $S101, $P119, $P124, "$!target"
    set $S100, $S101
  if_1464_end:
.annotate 'line', 653
    nqp_sha1 $S102, $S100
    new $P132, 'String'
    set $P132, $S102
.annotate 'line', 655
    concat $P133, $P132, "-"
.annotate 'line', 656
    time $N100
    set $S103, $N100
    concat $P134, $P133, $S103
    set $P1457, $P134
.annotate 'line', 657
    set $P112, $P1456
    unless_null $P112, vivify_1251
    new $P112, "Undef"
  vivify_1251:
    isnull $I100, $P112
    if $I100, if_1465
.annotate 'line', 659
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "NQP"
    get_who $P121, $P120
    set $P122, $P121["World"]
    set $P123, $P1457
    unless_null $P123, vivify_1252
    new $P123, "Undef"
  vivify_1252:
    set $P124, $P1456
    unless_null $P124, vivify_1253
    new $P124, "Undef"
  vivify_1253:
    $P125 = $P122."new"($P123 :named("handle"), $P124 :named("description"))
    set $P111, $P125
.annotate 'line', 657
    goto if_1465_end
  if_1465:
.annotate 'line', 658
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "NQP"
    get_who $P115, $P114
    set $P116, $P115["World"]
    set $P117, $P1457
    unless_null $P117, vivify_1254
    new $P117, "Undef"
  vivify_1254:
    $P118 = $P116."new"($P117 :named("handle"))
    set $P111, $P118
  if_1465_end:
.annotate 'line', 657
    set $P1458, $P111
.annotate 'line', 661
    new $P111, "String"
    assign $P111, ""
    set $P1459, $P111
.annotate 'line', 662
    new $P111, "String"
    assign $P111, ""
    set $P1460, $P111
.annotate 'line', 663
    new $P111, "String"
    assign $P111, ""
    set $P1461, $P111
.annotate 'line', 664
    new $P111, "Float"
    assign $P111, 0
    set $P1462, $P111
.annotate 'line', 665
    new $P111, "Float"
    assign $P111, 0
    set $P1463, $P111
.annotate 'line', 666
    set $P111, param_1451
    nqp_decontainerize $P112, $P111
    $P113 = $P112."comp_unit"()
.annotate 'line', 633
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "identifier"  :subid("41_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1467
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 671
    .lex "self", param_1467
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1468
    .lex "$/", $P1469
    .local string rx10_tgt
    .local int rx10_pos
    .local int rx10_off
    .local int rx10_eos
    .local int rx10_rep
    .local pmc rx10_cur
    .local pmc rx10_curclass
    .local pmc rx10_bstack
    .local pmc rx10_cstack
    (rx10_cur, rx10_tgt, rx10_pos, rx10_curclass, rx10_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx10_cur
    length rx10_eos, rx10_tgt
    eq $I19, 1, rx10_restart
    repr_get_attr_int $I11, self, rx10_curclass, "$!from"
    ne $I11, -1, rxscan11_done
    goto rxscan11_scan
  rxscan11_loop:
    inc rx10_pos
    gt rx10_pos, rx10_eos, rx10_fail
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!from", rx10_pos
  rxscan11_scan:
    nqp_rxmark rx10_bstack, rxscan11_loop, rx10_pos, 0
  rxscan11_done:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."ident"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
  # rx rxquantr13 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr13_done, rx10_pos, 0
  rxquantr13_loop:
  alt14_0:
    nqp_rxmark rx10_bstack, alt14_1, rx10_pos, 0
    add $I11, rx10_pos, 1
    gt $I11, rx10_eos, rx10_fail
    substr $S10, rx10_tgt, rx10_pos, 1
    ne $S10, ucs4:"-", rx10_fail
    add rx10_pos, 1
    goto alt14_end
  alt14_1:
    ge rx10_pos, rx10_eos, rx10_fail
    substr $S11, rx10_tgt, rx10_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx10_fail
    inc rx10_pos
  alt14_end:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."ident"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
    nqp_rxpeek $I19, rx10_bstack, rxquantr13_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr13_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr13_done, rx10_pos, rx10_rep
    goto rxquantr13_loop
  rxquantr13_done:
    rx10_cur."!cursor_pass"(rx10_pos, "identifier", 'backtrack'=>1)
    .return (rx10_cur)
  rx10_restart:
    repr_get_attr_obj rx10_cstack, rx10_cur, rx10_curclass, "$!cstack"
  rx10_fail:
    unless rx10_bstack, rx10_done
    pop $I19, rx10_bstack
    if_null rx10_cstack, rx10_cstack_done
    unless rx10_cstack, rx10_cstack_done
    dec $I19
    set $P11, rx10_cstack[$I19]
  rx10_cstack_done:
    pop rx10_rep, rx10_bstack
    pop rx10_pos, rx10_bstack
    pop $I19, rx10_bstack
    lt rx10_pos, -1, rx10_done
    lt rx10_pos, 0, rx10_fail
    eq $I19, 0, rx10_fail
    if_null rx10_cstack, rx10_jump
    elements $I18, rx10_bstack
    le $I18, 0, rx10_cut
    dec $I18
    set $I18, rx10_bstack[$I18]
  rx10_cut:
    assign rx10_cstack, $I18
  rx10_jump:
    jump $I19
  rx10_done:
    rx10_cur."!cursor_fail"()
    .return (rx10_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1338064451.944_caps"  :subid("399_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 671
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1338064451.944_nfa"  :subid("400_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 671
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "ident"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 45
    push $P106, 3
    push $P106, 6
    push $P106, "'"
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ident"
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "name"  :subid("42_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1473
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 673
    .lex "self", param_1473
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1474
    .lex "$/", $P1475
    .local string rx16_tgt
    .local int rx16_pos
    .local int rx16_off
    .local int rx16_eos
    .local int rx16_rep
    .local pmc rx16_cur
    .local pmc rx16_curclass
    .local pmc rx16_bstack
    .local pmc rx16_cstack
    (rx16_cur, rx16_tgt, rx16_pos, rx16_curclass, rx16_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx16_cur
    length rx16_eos, rx16_tgt
    eq $I19, 1, rx16_restart
    repr_get_attr_int $I11, self, rx16_curclass, "$!from"
    ne $I11, -1, rxscan17_done
    goto rxscan17_scan
  rxscan17_loop:
    inc rx16_pos
    gt rx16_pos, rx16_eos, rx16_fail
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!from", rx16_pos
  rxscan17_scan:
    nqp_rxmark rx16_bstack, rxscan17_loop, rx16_pos, 0
  rxscan17_done:
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!pos", rx16_pos
    $P11 = rx16_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx16_curclass, "$!pos"
    lt $I11, 0, rx16_fail
    nqp_rxmark rx16_bstack, rxsubrule18_pass, -1, 0
  rxsubrule18_pass:
    rx16_cstack = rx16_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx16_pos, $P11, rx16_curclass, "$!pos"
  # rx rxquantr19 ** 0..-1
    nqp_rxmark rx16_bstack, rxquantr19_done, rx16_pos, 0
  rxquantr19_loop:
    add $I11, rx16_pos, 2
    gt $I11, rx16_eos, rx16_fail
    substr $S10, rx16_tgt, rx16_pos, 2
    ne $S10, ucs4:"::", rx16_fail
    add rx16_pos, 2
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!pos", rx16_pos
    $P11 = rx16_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx16_curclass, "$!pos"
    lt $I11, 0, rx16_fail
    nqp_rxmark rx16_bstack, rxsubrule20_pass, -1, 0
  rxsubrule20_pass:
    rx16_cstack = rx16_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx16_pos, $P11, rx16_curclass, "$!pos"
    nqp_rxpeek $I19, rx16_bstack, rxquantr19_done
    inc $I19
    inc $I19
    set rx16_rep, rx16_bstack[$I19]
    nqp_rxcommit rx16_bstack, rxquantr19_done
    inc rx16_rep
    nqp_rxmark rx16_bstack, rxquantr19_done, rx16_pos, rx16_rep
    goto rxquantr19_loop
  rxquantr19_done:
    rx16_cur."!cursor_pass"(rx16_pos, "name", 'backtrack'=>1)
    .return (rx16_cur)
  rx16_restart:
    repr_get_attr_obj rx16_cstack, rx16_cur, rx16_curclass, "$!cstack"
  rx16_fail:
    unless rx16_bstack, rx16_done
    pop $I19, rx16_bstack
    if_null rx16_cstack, rx16_cstack_done
    unless rx16_cstack, rx16_cstack_done
    dec $I19
    set $P11, rx16_cstack[$I19]
  rx16_cstack_done:
    pop rx16_rep, rx16_bstack
    pop rx16_pos, rx16_bstack
    pop $I19, rx16_bstack
    lt rx16_pos, -1, rx16_done
    lt rx16_pos, 0, rx16_fail
    eq $I19, 0, rx16_fail
    if_null rx16_cstack, rx16_jump
    elements $I18, rx16_bstack
    le $I18, 0, rx16_cut
    dec $I18
    set $I18, rx16_bstack[$I18]
  rx16_cut:
    assign rx16_cstack, $I18
  rx16_jump:
    jump $I19
  rx16_done:
    rx16_cur."!cursor_fail"()
    .return (rx16_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1338064451.944_caps"  :subid("401_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 673
    new $P104, "Hash"
    set $P104["identifier"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1338064451.944_nfa"  :subid("402_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 673
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 58
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "identifier"
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "deflongname"  :subid("43_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1479
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 675
    .lex "self", param_1479
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1480
    .lex "$/", $P1481
    .local string rx21_tgt
    .local int rx21_pos
    .local int rx21_off
    .local int rx21_eos
    .local int rx21_rep
    .local pmc rx21_cur
    .local pmc rx21_curclass
    .local pmc rx21_bstack
    .local pmc rx21_cstack
    (rx21_cur, rx21_tgt, rx21_pos, rx21_curclass, rx21_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx21_cur
    length rx21_eos, rx21_tgt
    eq $I19, 1, rx21_restart
    repr_get_attr_int $I11, self, rx21_curclass, "$!from"
    ne $I11, -1, rxscan22_done
    goto rxscan22_scan
  rxscan22_loop:
    inc rx21_pos
    gt rx21_pos, rx21_eos, rx21_fail
    repr_bind_attr_int rx21_cur, rx21_curclass, "$!from", rx21_pos
  rxscan22_scan:
    nqp_rxmark rx21_bstack, rxscan22_loop, rx21_pos, 0
  rxscan22_done:
    repr_bind_attr_int rx21_cur, rx21_curclass, "$!pos", rx21_pos
    $P11 = rx21_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx21_curclass, "$!pos"
    lt $I11, 0, rx21_fail
    nqp_rxmark rx21_bstack, rxsubrule23_pass, -1, 0
  rxsubrule23_pass:
    rx21_cstack = rx21_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx21_pos, $P11, rx21_curclass, "$!pos"
  # rx rxquantr24 ** 0..1
    nqp_rxmark rx21_bstack, rxquantr24_done, rx21_pos, 0
  rxquantr24_loop:
    repr_bind_attr_int rx21_cur, rx21_curclass, "$!pos", rx21_pos
    $P11 = rx21_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx21_curclass, "$!pos"
    lt $I11, 0, rx21_fail
    goto rxsubrule25_pass
  rxsubrule25_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx21_curclass, "$!pos"
    lt $I11, 0, rx21_fail
  rxsubrule25_pass:
    rx21_cstack = rx21_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule25_back
    push rx21_bstack, $I11
    push rx21_bstack, 0
    push rx21_bstack, rx21_pos
    elements $I11, rx21_cstack
    push rx21_bstack, $I11
    repr_get_attr_int rx21_pos, $P11, rx21_curclass, "$!pos"
    nqp_rxpeek $I19, rx21_bstack, rxquantr24_done
    inc $I19
    inc $I19
    set rx21_rep, rx21_bstack[$I19]
    nqp_rxcommit rx21_bstack, rxquantr24_done
    inc rx21_rep
  rxquantr24_done:
    rx21_cur."!cursor_pass"(rx21_pos, "deflongname", 'backtrack'=>1)
    .return (rx21_cur)
  rx21_restart:
    repr_get_attr_obj rx21_cstack, rx21_cur, rx21_curclass, "$!cstack"
  rx21_fail:
    unless rx21_bstack, rx21_done
    pop $I19, rx21_bstack
    if_null rx21_cstack, rx21_cstack_done
    unless rx21_cstack, rx21_cstack_done
    dec $I19
    set $P11, rx21_cstack[$I19]
  rx21_cstack_done:
    pop rx21_rep, rx21_bstack
    pop rx21_pos, rx21_bstack
    pop $I19, rx21_bstack
    lt rx21_pos, -1, rx21_done
    lt rx21_pos, 0, rx21_fail
    eq $I19, 0, rx21_fail
    if_null rx21_cstack, rx21_jump
    elements $I18, rx21_bstack
    le $I18, 0, rx21_cut
    dec $I18
    set $I18, rx21_bstack[$I18]
  rx21_cut:
    assign rx21_cstack, $I18
  rx21_jump:
    jump $I19
  rx21_done:
    rx21_cur."!cursor_fail"()
    .return (rx21_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1338064451.944_caps"  :subid("403_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 675
    new $P104, "Hash"
    set $P104["identifier"], 0
    set $P104["colonpair"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1338064451.944_nfa"  :subid("404_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 675
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "colonpair"
    push $P106, 0
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ENDSTMT"  :subid("44_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1485
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 679
    .lex "self", param_1485
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1486
    .lex "$/", $P1487
    .local string rx26_tgt
    .local int rx26_pos
    .local int rx26_off
    .local int rx26_eos
    .local int rx26_rep
    .local pmc rx26_cur
    .local pmc rx26_curclass
    .local pmc rx26_bstack
    .local pmc rx26_cstack
    (rx26_cur, rx26_tgt, rx26_pos, rx26_curclass, rx26_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx26_cur
    length rx26_eos, rx26_tgt
    eq $I19, 1, rx26_restart
    repr_get_attr_int $I11, self, rx26_curclass, "$!from"
    ne $I11, -1, rxscan27_done
    goto rxscan27_scan
  rxscan27_loop:
    inc rx26_pos
    gt rx26_pos, rx26_eos, rx26_fail
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!from", rx26_pos
  rxscan27_scan:
    nqp_rxmark rx26_bstack, rxscan27_loop, rx26_pos, 0
  rxscan27_done:
  # rx rxquantr28 ** 0..1
    nqp_rxmark rx26_bstack, rxquantr28_done, rx26_pos, 0
  rxquantr28_loop:
  alt29_0:
    nqp_rxmark rx26_bstack, alt29_1, rx26_pos, 0
  # rx rxquantr30 ** 0..-1
    nqp_rxmark rx26_bstack, rxquantr30_done, rx26_pos, 0
  rxquantr30_loop:
    ge rx26_pos, rx26_eos, rx26_fail
    substr $S11, rx26_tgt, rx26_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx26_fail
    inc rx26_pos
    nqp_rxpeek $I19, rx26_bstack, rxquantr30_done
    inc $I19
    inc $I19
    set rx26_rep, rx26_bstack[$I19]
    nqp_rxcommit rx26_bstack, rxquantr30_done
    inc rx26_rep
    nqp_rxmark rx26_bstack, rxquantr30_done, rx26_pos, rx26_rep
    goto rxquantr30_loop
  rxquantr30_done:
    is_cclass $I11, .CCLASS_NEWLINE, rx26_tgt, rx26_pos
    if $I11, rxanchor31_done
    ne rx26_pos, rx26_eos, rx26_fail
    eq rx26_pos, 0, rxanchor31_done
    sub $I11, rx26_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx26_tgt, $I11
    if $I11, rx26_fail
  rxanchor31_done:
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."ws"()
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
    repr_get_attr_int rx26_pos, $P11, rx26_curclass, "$!pos"
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
    goto alt29_end
  alt29_1:
  # rx rxquantr33 ** 0..1
    nqp_rxmark rx26_bstack, rxquantr33_done, rx26_pos, 0
  rxquantr33_loop:
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."unv"()
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
    goto rxsubrule34_pass
  rxsubrule34_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
  rxsubrule34_pass:
    rx26_cstack = rx26_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule34_back
    push rx26_bstack, $I11
    push rx26_bstack, 0
    push rx26_bstack, rx26_pos
    elements $I11, rx26_cstack
    push rx26_bstack, $I11
    repr_get_attr_int rx26_pos, $P11, rx26_curclass, "$!pos"
    nqp_rxpeek $I19, rx26_bstack, rxquantr33_done
    inc $I19
    inc $I19
    set rx26_rep, rx26_bstack[$I19]
    nqp_rxcommit rx26_bstack, rxquantr33_done
    inc rx26_rep
  rxquantr33_done:
    is_cclass $I11, .CCLASS_NEWLINE, rx26_tgt, rx26_pos
    if $I11, rxanchor35_done
    ne rx26_pos, rx26_eos, rx26_fail
    eq rx26_pos, 0, rxanchor35_done
    sub $I11, rx26_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx26_tgt, $I11
    if $I11, rx26_fail
  rxanchor35_done:
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."ws"()
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
    repr_get_attr_int rx26_pos, $P11, rx26_curclass, "$!pos"
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
  alt29_end:
    nqp_rxpeek $I19, rx26_bstack, rxquantr28_done
    inc $I19
    inc $I19
    set rx26_rep, rx26_bstack[$I19]
    nqp_rxcommit rx26_bstack, rxquantr28_done
    inc rx26_rep
  rxquantr28_done:
    rx26_cur."!cursor_pass"(rx26_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx26_cur)
  rx26_restart:
    repr_get_attr_obj rx26_cstack, rx26_cur, rx26_curclass, "$!cstack"
  rx26_fail:
    unless rx26_bstack, rx26_done
    pop $I19, rx26_bstack
    if_null rx26_cstack, rx26_cstack_done
    unless rx26_cstack, rx26_cstack_done
    dec $I19
    set $P11, rx26_cstack[$I19]
  rx26_cstack_done:
    pop rx26_rep, rx26_bstack
    pop rx26_pos, rx26_bstack
    pop $I19, rx26_bstack
    lt rx26_pos, -1, rx26_done
    lt rx26_pos, 0, rx26_fail
    eq $I19, 0, rx26_fail
    if_null rx26_cstack, rx26_jump
    elements $I18, rx26_bstack
    le $I18, 0, rx26_cut
    dec $I18
    set $I18, rx26_bstack[$I18]
  rx26_cut:
    assign rx26_cstack, $I18
  rx26_jump:
    jump $I19
  rx26_done:
    rx26_cur."!cursor_fail"()
    .return (rx26_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1338064451.944_caps"  :subid("405_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 679
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1338064451.944_nfa"  :subid("406_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 679
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    push $P105, 8
    push $P105, "unv"
    push $P105, 5
    push $P105, 1
    push $P105, 0
    push $P105, 5
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ws"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "MARKER"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "MARKER"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ws"  :subid("45_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1491
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 686
    .lex "self", param_1491
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1492
    .lex "$/", $P1493
    .local string rx37_tgt
    .local int rx37_pos
    .local int rx37_off
    .local int rx37_eos
    .local int rx37_rep
    .local pmc rx37_cur
    .local pmc rx37_curclass
    .local pmc rx37_bstack
    .local pmc rx37_cstack
    (rx37_cur, rx37_tgt, rx37_pos, rx37_curclass, rx37_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx37_cur
    length rx37_eos, rx37_tgt
    eq $I19, 1, rx37_restart
    repr_get_attr_int $I11, self, rx37_curclass, "$!from"
    ne $I11, -1, rxscan38_done
    goto rxscan38_scan
  rxscan38_loop:
    inc rx37_pos
    gt rx37_pos, rx37_eos, rx37_fail
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!from", rx37_pos
  rxscan38_scan:
    nqp_rxmark rx37_bstack, rxscan38_loop, rx37_pos, 0
  rxscan38_done:
  alt39_0:
    nqp_rxmark rx37_bstack, alt39_1, rx37_pos, 0
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
    goto alt39_end
  alt39_1:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ww"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    ge $I11, 0, rx37_fail
  # rx rxquantr40 ** 0..-1
    nqp_rxmark rx37_bstack, rxquantr40_done, rx37_pos, 0
  rxquantr40_loop:
  alt41_0:
    nqp_rxmark rx37_bstack, alt41_1, rx37_pos, 0
  # rx rxquantr42 ** 1..-1
    nqp_rxmark rx37_bstack, rxquantr42_done, -1, 0
  rxquantr42_loop:
    ge rx37_pos, rx37_eos, rx37_fail
    substr $S11, rx37_tgt, rx37_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx37_fail
    inc rx37_pos
    nqp_rxpeek $I19, rx37_bstack, rxquantr42_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr42_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr42_done, rx37_pos, rx37_rep
    goto rxquantr42_loop
  rxquantr42_done:
    goto alt41_end
  alt41_1:
    nqp_rxmark rx37_bstack, alt41_2, rx37_pos, 0
    add $I11, rx37_pos, 1
    gt $I11, rx37_eos, rx37_fail
    substr $S10, rx37_tgt, rx37_pos, 1
    ne $S10, ucs4:"#", rx37_fail
    add rx37_pos, 1
  # rx rxquantr43 ** 0..-1
    nqp_rxmark rx37_bstack, rxquantr43_done, rx37_pos, 0
  rxquantr43_loop:
    ge rx37_pos, rx37_eos, rx37_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx37_tgt, rx37_pos
    if $I11, rx37_fail
    add rx37_pos, 1
    nqp_rxpeek $I19, rx37_bstack, rxquantr43_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr43_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr43_done, rx37_pos, rx37_rep
    goto rxquantr43_loop
  rxquantr43_done:
    goto alt41_end
  alt41_2:
    nqp_rxmark rx37_bstack, alt41_3, rx37_pos, 0
    eq rx37_pos, 0, rxanchor44_done
    ge rx37_pos, rx37_eos, rx37_fail
    sub $I11, rx37_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx37_tgt, $I11
    unless $I11, rx37_fail
  rxanchor44_done:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    goto alt41_end
  alt41_3:
  # rx rxquantr46 ** 1..-1
    nqp_rxmark rx37_bstack, rxquantr46_done, -1, 0
  rxquantr46_loop:
    ge rx37_pos, rx37_eos, rx37_fail
    substr $S11, rx37_tgt, rx37_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx37_fail
    inc rx37_pos
    nqp_rxpeek $I19, rx37_bstack, rxquantr46_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr46_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr46_done, rx37_pos, rx37_rep
    goto rxquantr46_loop
  rxquantr46_done:
  alt41_end:
    nqp_rxpeek $I19, rx37_bstack, rxquantr40_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr40_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr40_done, rx37_pos, rx37_rep
    goto rxquantr40_loop
  rxquantr40_done:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
  alt39_end:
    rx37_cur."!cursor_pass"(rx37_pos, "ws", 'backtrack'=>1)
    .return (rx37_cur)
  rx37_restart:
    repr_get_attr_obj rx37_cstack, rx37_cur, rx37_curclass, "$!cstack"
  rx37_fail:
    unless rx37_bstack, rx37_done
    pop $I19, rx37_bstack
    if_null rx37_cstack, rx37_cstack_done
    unless rx37_cstack, rx37_cstack_done
    dec $I19
    set $P11, rx37_cstack[$I19]
  rx37_cstack_done:
    pop rx37_rep, rx37_bstack
    pop rx37_pos, rx37_bstack
    pop $I19, rx37_bstack
    lt rx37_pos, -1, rx37_done
    lt rx37_pos, 0, rx37_fail
    eq $I19, 0, rx37_fail
    if_null rx37_cstack, rx37_jump
    elements $I18, rx37_bstack
    le $I18, 0, rx37_cut
    dec $I18
    set $I18, rx37_bstack[$I18]
  rx37_cut:
    assign rx37_cstack, $I18
  rx37_jump:
    jump $I19
  rx37_done:
    rx37_cur."!cursor_fail"()
    .return (rx37_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1338064451.944_caps"  :subid("407_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 686
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "unv"  :subid("47_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1496
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    .const 'Sub' $P1502 = "46_1338064451.944" 
    capture_lex $P1502
    .lex "self", param_1496
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1497
    .lex "$/", $P1498
    .local string rx47_tgt
    .local int rx47_pos
    .local int rx47_off
    .local int rx47_eos
    .local int rx47_rep
    .local pmc rx47_cur
    .local pmc rx47_curclass
    .local pmc rx47_bstack
    .local pmc rx47_cstack
    (rx47_cur, rx47_tgt, rx47_pos, rx47_curclass, rx47_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx47_cur
    length rx47_eos, rx47_tgt
    eq $I19, 1, rx47_restart
    repr_get_attr_int $I11, self, rx47_curclass, "$!from"
    ne $I11, -1, rxscan48_done
    goto rxscan48_scan
  rxscan48_loop:
    inc rx47_pos
    gt rx47_pos, rx47_eos, rx47_fail
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!from", rx47_pos
  rxscan48_scan:
    nqp_rxmark rx47_bstack, rxscan48_loop, rx47_pos, 0
  rxscan48_done:
  alt49_0:
    nqp_rxmark rx47_bstack, alt49_1, rx47_pos, 0
    eq rx47_pos, 0, rxanchor50_done
    ge rx47_pos, rx47_eos, rx47_fail
    sub $I11, rx47_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx47_tgt, $I11
    unless $I11, rx47_fail
  rxanchor50_done:
    .const 'Sub' $P1502 = "46_1338064451.944" 
    capture_lex $P1502
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."before"($P1502)
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
    goto alt49_end
  alt49_1:
    nqp_rxmark rx47_bstack, alt49_2, rx47_pos, 0
  # rx rxquantr56 ** 0..-1
    nqp_rxmark rx47_bstack, rxquantr56_done, rx47_pos, 0
  rxquantr56_loop:
    ge rx47_pos, rx47_eos, rx47_fail
    substr $S11, rx47_tgt, rx47_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx47_fail
    inc rx47_pos
    nqp_rxpeek $I19, rx47_bstack, rxquantr56_done
    inc $I19
    inc $I19
    set rx47_rep, rx47_bstack[$I19]
    nqp_rxcommit rx47_bstack, rxquantr56_done
    inc rx47_rep
    nqp_rxmark rx47_bstack, rxquantr56_done, rx47_pos, rx47_rep
    goto rxquantr56_loop
  rxquantr56_done:
    add $I11, rx47_pos, 1
    gt $I11, rx47_eos, rx47_fail
    substr $S10, rx47_tgt, rx47_pos, 1
    ne $S10, ucs4:"#", rx47_fail
    add rx47_pos, 1
  # rx rxquantr57 ** 0..-1
    nqp_rxmark rx47_bstack, rxquantr57_done, rx47_pos, 0
  rxquantr57_loop:
    ge rx47_pos, rx47_eos, rx47_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx47_tgt, rx47_pos
    if $I11, rx47_fail
    add rx47_pos, 1
    nqp_rxpeek $I19, rx47_bstack, rxquantr57_done
    inc $I19
    inc $I19
    set rx47_rep, rx47_bstack[$I19]
    nqp_rxcommit rx47_bstack, rxquantr57_done
    inc rx47_rep
    nqp_rxmark rx47_bstack, rxquantr57_done, rx47_pos, rx47_rep
    goto rxquantr57_loop
  rxquantr57_done:
    goto alt49_end
  alt49_2:
  # rx rxquantr58 ** 1..-1
    nqp_rxmark rx47_bstack, rxquantr58_done, -1, 0
  rxquantr58_loop:
    ge rx47_pos, rx47_eos, rx47_fail
    substr $S11, rx47_tgt, rx47_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx47_fail
    inc rx47_pos
    nqp_rxpeek $I19, rx47_bstack, rxquantr58_done
    inc $I19
    inc $I19
    set rx47_rep, rx47_bstack[$I19]
    nqp_rxcommit rx47_bstack, rxquantr58_done
    inc rx47_rep
    nqp_rxmark rx47_bstack, rxquantr58_done, rx47_pos, rx47_rep
    goto rxquantr58_loop
  rxquantr58_done:
  alt49_end:
    rx47_cur."!cursor_pass"(rx47_pos, "unv", 'backtrack'=>1)
    .return (rx47_cur)
  rx47_restart:
    repr_get_attr_obj rx47_cstack, rx47_cur, rx47_curclass, "$!cstack"
  rx47_fail:
    unless rx47_bstack, rx47_done
    pop $I19, rx47_bstack
    if_null rx47_cstack, rx47_cstack_done
    unless rx47_cstack, rx47_cstack_done
    dec $I19
    set $P11, rx47_cstack[$I19]
  rx47_cstack_done:
    pop rx47_rep, rx47_bstack
    pop rx47_pos, rx47_bstack
    pop $I19, rx47_bstack
    lt rx47_pos, -1, rx47_done
    lt rx47_pos, 0, rx47_fail
    eq $I19, 0, rx47_fail
    if_null rx47_cstack, rx47_jump
    elements $I18, rx47_bstack
    le $I18, 0, rx47_cut
    dec $I18
    set $I18, rx47_bstack[$I18]
  rx47_cut:
    assign rx47_cstack, $I18
  rx47_jump:
    jump $I19
  rx47_done:
    rx47_cur."!cursor_fail"()
    .return (rx47_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1338064451.944_caps"  :subid("408_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1338064451.944_nfa"  :subid("409_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    push $P105, 6
    push $P105, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 5
    push $P105, 1
    push $P105, 0
    push $P105, 7
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 8192
    push $P108, 0
    push $P108, 2
    push $P108, 92
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 35
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 5
    push $P110, 4096
    push $P110, 6
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 6
    push $P111, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 7
    push $P112, 1
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P104
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1501"  :anon :subid("46_1338064451.944") :method :outer("47_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    .lex unicode:"$\x{a2}", $P1505
    .local string rx51_tgt
    .local int rx51_pos
    .local int rx51_off
    .local int rx51_eos
    .local int rx51_rep
    .local pmc rx51_cur
    .local pmc rx51_curclass
    .local pmc rx51_bstack
    .local pmc rx51_cstack
    (rx51_cur, rx51_tgt, rx51_pos, rx51_curclass, rx51_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx51_cur
    length rx51_eos, rx51_tgt
    eq $I19, 1, rx51_restart
    repr_get_attr_int $I11, self, rx51_curclass, "$!from"
    ne $I11, -1, rxscan52_done
    goto rxscan52_scan
  rxscan52_loop:
    inc rx51_pos
    gt rx51_pos, rx51_eos, rx51_fail
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!from", rx51_pos
  rxscan52_scan:
    nqp_rxmark rx51_bstack, rxscan52_loop, rx51_pos, 0
  rxscan52_done:
  # rx rxquantr53 ** 0..-1
    nqp_rxmark rx51_bstack, rxquantr53_done, rx51_pos, 0
  rxquantr53_loop:
    ge rx51_pos, rx51_eos, rx51_fail
    substr $S11, rx51_tgt, rx51_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx51_fail
    inc rx51_pos
    nqp_rxpeek $I19, rx51_bstack, rxquantr53_done
    inc $I19
    inc $I19
    set rx51_rep, rx51_bstack[$I19]
    nqp_rxcommit rx51_bstack, rxquantr53_done
    inc rx51_rep
    nqp_rxmark rx51_bstack, rxquantr53_done, rx51_pos, rx51_rep
    goto rxquantr53_loop
  rxquantr53_done:
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"=", rx51_fail
    add rx51_pos, 1
  alt54_0:
    nqp_rxmark rx51_bstack, alt54_1, rx51_pos, 0
    ge rx51_pos, rx51_eos, rx51_fail
    is_cclass $I11, .CCLASS_WORD, rx51_tgt, rx51_pos
    unless $I11, rx51_fail
    add rx51_pos, 1
    goto alt54_end
  alt54_1:
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"\\", rx51_fail
    add rx51_pos, 1
  alt54_end:
    rx51_cur."!cursor_pass"(rx51_pos, 'backtrack'=>1)
    .return (rx51_cur)
  rx51_restart:
    repr_get_attr_obj rx51_cstack, rx51_cur, rx51_curclass, "$!cstack"
  rx51_fail:
    unless rx51_bstack, rx51_done
    pop $I19, rx51_bstack
    if_null rx51_cstack, rx51_cstack_done
    unless rx51_cstack, rx51_cstack_done
    dec $I19
    set $P11, rx51_cstack[$I19]
  rx51_cstack_done:
    pop rx51_rep, rx51_bstack
    pop rx51_pos, rx51_bstack
    pop $I19, rx51_bstack
    lt rx51_pos, -1, rx51_done
    lt rx51_pos, 0, rx51_fail
    eq $I19, 0, rx51_fail
    if_null rx51_cstack, rx51_jump
    elements $I18, rx51_bstack
    le $I18, 0, rx51_cut
    dec $I18
    set $I18, rx51_bstack[$I18]
  rx51_cut:
    assign rx51_cstack, $I18
  rx51_jump:
    jump $I19
  rx51_done:
    rx51_cur."!cursor_fail"()
    .return (rx51_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1338064451.944_caps"  :subid("410_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1338064451.944_nfa"  :subid("411_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 8192
    push $P107, 0
    push $P107, 2
    push $P107, 92
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pod_comment"  :subid("49_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1507
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    .const 'Sub' $P1513 = "48_1338064451.944" 
    capture_lex $P1513
    .lex "self", param_1507
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1508
    .lex "$/", $P1509
    .local string rx59_tgt
    .local int rx59_pos
    .local int rx59_off
    .local int rx59_eos
    .local int rx59_rep
    .local pmc rx59_cur
    .local pmc rx59_curclass
    .local pmc rx59_bstack
    .local pmc rx59_cstack
    (rx59_cur, rx59_tgt, rx59_pos, rx59_curclass, rx59_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx59_cur
    length rx59_eos, rx59_tgt
    eq $I19, 1, rx59_restart
    repr_get_attr_int $I11, self, rx59_curclass, "$!from"
    ne $I11, -1, rxscan60_done
    goto rxscan60_scan
  rxscan60_loop:
    inc rx59_pos
    gt rx59_pos, rx59_eos, rx59_fail
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!from", rx59_pos
  rxscan60_scan:
    nqp_rxmark rx59_bstack, rxscan60_loop, rx59_pos, 0
  rxscan60_done:
    eq rx59_pos, 0, rxanchor61_done
    ge rx59_pos, rx59_eos, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, $I11
    unless $I11, rx59_fail
  rxanchor61_done:
  # rx rxquantr62 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr62_done, rx59_pos, 0
  rxquantr62_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr62_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr62_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr62_done, rx59_pos, rx59_rep
    goto rxquantr62_loop
  rxquantr62_done:
    add $I11, rx59_pos, 1
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 1
    ne $S10, ucs4:"=", rx59_fail
    add rx59_pos, 1
  alt63_0:
    nqp_rxmark rx59_bstack, alt63_1, rx59_pos, 0
    add $I11, rx59_pos, 5
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 5
    ne $S10, ucs4:"begin", rx59_fail
    add rx59_pos, 5
  # rx rxquantr64 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr64_done, -1, 0
  rxquantr64_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr64_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr64_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr64_done, rx59_pos, rx59_rep
    goto rxquantr64_loop
  rxquantr64_done:
    add $I11, rx59_pos, 3
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 3
    ne $S10, ucs4:"END", rx59_fail
    add rx59_pos, 3
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  alt66_0:
    nqp_rxmark rx59_bstack, alt66_1, rx59_pos, 0
  # rx rxquantf67 ** 0..-1
    set rx59_rep, 0
    nqp_rxmark rx59_bstack, rxquantf67_loop, rx59_pos, rx59_rep
    goto rxquantf67_done
  rxquantf67_loop:
    set $I12, rx59_rep
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    set rx59_rep, $I12
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantf67_loop, rx59_pos, rx59_rep
  rxquantf67_done:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    unless $I11, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx59_pos, $I11
    add rx59_pos, 1
  # rx rxquantr68 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr68_done, rx59_pos, 0
  rxquantr68_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr68_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr68_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr68_done, rx59_pos, rx59_rep
    goto rxquantr68_loop
  rxquantr68_done:
    add $I11, rx59_pos, 4
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 4
    ne $S10, ucs4:"=end", rx59_fail
    add rx59_pos, 4
  # rx rxquantr69 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr69_done, -1, 0
  rxquantr69_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr69_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr69_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr69_done, rx59_pos, rx59_rep
    goto rxquantr69_loop
  rxquantr69_done:
    add $I11, rx59_pos, 3
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 3
    ne $S10, ucs4:"END", rx59_fail
    add rx59_pos, 3
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  # rx rxquantr71 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr71_done, rx59_pos, 0
  rxquantr71_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr71_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr71_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr71_done, rx59_pos, rx59_rep
    goto rxquantr71_loop
  rxquantr71_done:
    goto alt66_end
  alt66_1:
  # rx rxquantr72 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr72_done, rx59_pos, 0
  rxquantr72_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr72_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr72_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr72_done, rx59_pos, rx59_rep
    goto rxquantr72_loop
  rxquantr72_done:
  alt66_end:
    goto alt63_end
  alt63_1:
    nqp_rxmark rx59_bstack, alt63_2, rx59_pos, 0
    add $I11, rx59_pos, 5
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 5
    ne $S10, ucs4:"begin", rx59_fail
    add rx59_pos, 5
  # rx rxquantr73 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr73_done, -1, 0
  rxquantr73_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr73_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr73_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr73_done, rx59_pos, rx59_rep
    goto rxquantr73_loop
  rxquantr73_done:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    nqp_rxmark rx59_bstack, rxsubrule74_pass, -1, 0
  rxsubrule74_pass:
    rx59_cstack = rx59_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt75_0:
    nqp_rxmark rx59_bstack, alt75_1, rx59_pos, 0
  # rx rxquantf76 ** 0..-1
    set rx59_rep, 0
    nqp_rxmark rx59_bstack, rxquantf76_loop, rx59_pos, rx59_rep
    goto rxquantf76_done
  rxquantf76_loop:
    set $I12, rx59_rep
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    set rx59_rep, $I12
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantf76_loop, rx59_pos, rx59_rep
  rxquantf76_done:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    unless $I11, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx59_pos, $I11
    add rx59_pos, 1
  # rx rxquantr77 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr77_done, rx59_pos, 0
  rxquantr77_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr77_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr77_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr77_done, rx59_pos, rx59_rep
    goto rxquantr77_loop
  rxquantr77_done:
    add $I11, rx59_pos, 4
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 4
    ne $S10, ucs4:"=end", rx59_fail
    add rx59_pos, 4
  # rx rxquantr78 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr78_done, -1, 0
  rxquantr78_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr78_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr78_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr78_done, rx59_pos, rx59_rep
    goto rxquantr78_loop
  rxquantr78_done:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  # rx rxquantr81 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr81_done, rx59_pos, 0
  rxquantr81_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr81_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr81_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr81_done, rx59_pos, rx59_rep
    goto rxquantr81_loop
  rxquantr81_done:
    goto alt75_end
  alt75_1:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt75_end:
    goto alt63_end
  alt63_2:
    nqp_rxmark rx59_bstack, alt63_3, rx59_pos, 0
    add $I11, rx59_pos, 5
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 5
    ne $S10, ucs4:"begin", rx59_fail
    add rx59_pos, 5
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  # rx rxquantr84 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr84_done, rx59_pos, 0
  rxquantr84_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr84_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr84_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr84_done, rx59_pos, rx59_rep
    goto rxquantr84_loop
  rxquantr84_done:
  alt85_0:
    nqp_rxmark rx59_bstack, alt85_1, rx59_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rxanchor86_done
    ne rx59_pos, rx59_eos, rx59_fail
    eq rx59_pos, 0, rxanchor86_done
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, $I11
    if $I11, rx59_fail
  rxanchor86_done:
    goto alt85_end
  alt85_1:
    nqp_rxmark rx59_bstack, alt85_2, rx59_pos, 0
    add $I11, rx59_pos, 1
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 1
    ne $S10, ucs4:"#", rx59_fail
    add rx59_pos, 1
    goto alt85_end
  alt85_2:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt85_end:
  alt88_0:
    nqp_rxmark rx59_bstack, alt88_1, rx59_pos, 0
  # rx rxquantf89 ** 0..-1
    set rx59_rep, 0
    nqp_rxmark rx59_bstack, rxquantf89_loop, rx59_pos, rx59_rep
    goto rxquantf89_done
  rxquantf89_loop:
    set $I12, rx59_rep
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    set rx59_rep, $I12
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantf89_loop, rx59_pos, rx59_rep
  rxquantf89_done:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    unless $I11, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx59_pos, $I11
    add rx59_pos, 1
  # rx rxquantr90 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr90_done, rx59_pos, 0
  rxquantr90_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr90_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr90_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr90_done, rx59_pos, rx59_rep
    goto rxquantr90_loop
  rxquantr90_done:
    add $I11, rx59_pos, 4
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 4
    ne $S10, ucs4:"=end", rx59_fail
    add rx59_pos, 4
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  # rx rxquantr92 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr92_done, rx59_pos, 0
  rxquantr92_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr92_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr92_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr92_done, rx59_pos, rx59_rep
    goto rxquantr92_loop
  rxquantr92_done:
    goto alt88_end
  alt88_1:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt88_end:
    goto alt63_end
  alt63_3:
    nqp_rxmark rx59_bstack, alt63_4, rx59_pos, 0
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    nqp_rxmark rx59_bstack, rxsubrule94_pass, -1, 0
  rxsubrule94_pass:
    rx59_cstack = rx59_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  # rx rxquantf95 ** 0..-1
    set rx59_rep, 0
    nqp_rxmark rx59_bstack, rxquantf95_loop, rx59_pos, rx59_rep
    goto rxquantf95_done
  rxquantf95_loop:
    set $I12, rx59_rep
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    set rx59_rep, $I12
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantf95_loop, rx59_pos, rx59_rep
  rxquantf95_done:
    eq rx59_pos, 0, rxanchor96_done
    ge rx59_pos, rx59_eos, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, $I11
    unless $I11, rx59_fail
  rxanchor96_done:
    .const 'Sub' $P1513 = "48_1338064451.944" 
    capture_lex $P1513
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."before"($P1513)
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    goto alt63_end
  alt63_4:
  alt104_0:
    nqp_rxmark rx59_bstack, alt104_1, rx59_pos, 0
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx59_tgt, rx59_pos
    unless $I11, rx59_fail
    add rx59_pos, 1
    goto alt104_end
  alt104_1:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt104_end:
  # rx rxquantr106 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr106_done, rx59_pos, 0
  rxquantr106_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr106_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr106_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr106_done, rx59_pos, rx59_rep
    goto rxquantr106_loop
  rxquantr106_done:
  alt63_end:
    rx59_cur."!cursor_pass"(rx59_pos, "pod_comment", 'backtrack'=>1)
    .return (rx59_cur)
  rx59_restart:
    repr_get_attr_obj rx59_cstack, rx59_cur, rx59_curclass, "$!cstack"
  rx59_fail:
    unless rx59_bstack, rx59_done
    pop $I19, rx59_bstack
    if_null rx59_cstack, rx59_cstack_done
    unless rx59_cstack, rx59_cstack_done
    dec $I19
    set $P11, rx59_cstack[$I19]
  rx59_cstack_done:
    pop rx59_rep, rx59_bstack
    pop rx59_pos, rx59_bstack
    pop $I19, rx59_bstack
    lt rx59_pos, -1, rx59_done
    lt rx59_pos, 0, rx59_fail
    eq $I19, 0, rx59_fail
    if_null rx59_cstack, rx59_jump
    elements $I18, rx59_bstack
    le $I18, 0, rx59_cut
    dec $I18
    set $I18, rx59_bstack[$I18]
  rx59_cut:
    assign rx59_cstack, $I18
  rx59_jump:
    jump $I19
  rx59_done:
    rx59_cur."!cursor_fail"()
    .return (rx59_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1338064451.944_caps"  :subid("412_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    new $P104, "Hash"
    set $P104["identifier"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1338064451.944_nfa"  :subid("413_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 98
    push $P108, 5
    push $P108, 2
    push $P108, 98
    push $P108, 17
    push $P108, 2
    push $P108, 98
    push $P108, 26
    push $P108, 8
    push $P108, "identifier"
    push $P108, 33
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 101
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 103
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 105
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 110
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 6
    push $P114, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 1
    push $P115, 0
    push $P115, 10
    push $P115, 1
    push $P115, 0
    push $P115, 12
    push $P115, 2
    push $P115, 69
    push $P115, 13
    new $P116, "ResizablePMCArray"
    new $P117, "ResizablePMCArray"
    push $P117, 2
    push $P117, 78
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 2
    push $P118, 68
    push $P118, 15
    new $P119, "ResizablePMCArray"
    push $P119, 1
    push $P119, 0
    push $P119, 16
    new $P120, "ResizablePMCArray"
    push $P120, 0
    push $P120, 0
    push $P120, 0
    new $P121, "ResizablePMCArray"
    push $P121, 2
    push $P121, 101
    push $P121, 18
    new $P122, "ResizablePMCArray"
    push $P122, 2
    push $P122, 103
    push $P122, 19
    new $P123, "ResizablePMCArray"
    push $P123, 2
    push $P123, 105
    push $P123, 20
    new $P124, "ResizablePMCArray"
    push $P124, 2
    push $P124, 110
    push $P124, 21
    new $P125, "ResizablePMCArray"
    push $P125, 1
    push $P125, 0
    push $P125, 22
    new $P126, "ResizablePMCArray"
    push $P126, 6
    push $P126, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P126, 23
    new $P127, "ResizablePMCArray"
    push $P127, 1
    push $P127, 0
    push $P127, 22
    push $P127, 1
    push $P127, 0
    push $P127, 24
    push $P127, 8
    push $P127, "identifier"
    push $P127, 25
    new $P128, "ResizablePMCArray"
    new $P129, "ResizablePMCArray"
    push $P129, 0
    push $P129, 0
    push $P129, 0
    new $P130, "ResizablePMCArray"
    push $P130, 2
    push $P130, 101
    push $P130, 27
    new $P131, "ResizablePMCArray"
    push $P131, 2
    push $P131, 103
    push $P131, 28
    new $P132, "ResizablePMCArray"
    push $P132, 2
    push $P132, 105
    push $P132, 29
    new $P133, "ResizablePMCArray"
    push $P133, 2
    push $P133, 110
    push $P133, 30
    new $P134, "ResizablePMCArray"
    push $P134, 1
    push $P134, 0
    push $P134, 31
    new $P135, "ResizablePMCArray"
    push $P135, 6
    push $P135, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P135, 31
    push $P135, 1
    push $P135, 0
    push $P135, 32
    new $P136, "ResizablePMCArray"
    push $P136, 0
    push $P136, 0
    push $P136, 0
    new $P137, "ResizablePMCArray"
    push $P137, 4
    push $P137, 65535
    push $P137, 33
    push $P137, 1
    push $P137, 0
    push $P137, 34
    new $P138, "ResizablePMCArray"
    push $P138, 1
    push $P138, 0
    push $P138, 35
    new $P139, "ResizablePMCArray"
    push $P139, 6
    push $P139, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P139, 35
    push $P139, 1
    push $P139, 0
    push $P139, 36
    new $P140, "ResizablePMCArray"
    push $P140, 2
    push $P140, 61
    push $P140, 37
    push $P140, 4
    push $P140, 4096
    push $P140, 0
    new $P141, "ResizablePMCArray"
    push $P141, 2
    push $P141, 99
    push $P141, 38
    push $P141, 1
    push $P141, 0
    push $P141, 0
    new $P142, "ResizablePMCArray"
    push $P142, 2
    push $P142, 117
    push $P142, 39
    new $P143, "ResizablePMCArray"
    push $P143, 2
    push $P143, 116
    push $P143, 40
    new $P144, "ResizablePMCArray"
    push $P144, 1
    push $P144, 0
    push $P144, 41
    new $P145, "ResizablePMCArray"
    push $P145, 8
    push $P145, "panic"
    push $P145, 0
    new $P146, "ResizablePMCArray"
    push $P146, $P104
    push $P146, $P105
    push $P146, $P106
    push $P146, $P107
    push $P146, $P108
    push $P146, $P109
    push $P146, $P110
    push $P146, $P111
    push $P146, $P112
    push $P146, $P113
    push $P146, $P114
    push $P146, $P115
    push $P146, $P116
    push $P146, $P117
    push $P146, $P118
    push $P146, $P119
    push $P146, $P120
    push $P146, $P121
    push $P146, $P122
    push $P146, $P123
    push $P146, $P124
    push $P146, $P125
    push $P146, $P126
    push $P146, $P127
    push $P146, $P128
    push $P146, $P129
    push $P146, $P130
    push $P146, $P131
    push $P146, $P132
    push $P146, $P133
    push $P146, $P134
    push $P146, $P135
    push $P146, $P136
    push $P146, $P137
    push $P146, $P138
    push $P146, $P139
    push $P146, $P140
    push $P146, $P141
    push $P146, $P142
    push $P146, $P143
    push $P146, $P144
    push $P146, $P145
    .return ($P146)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1512"  :anon :subid("48_1338064451.944") :method :outer("49_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    .lex unicode:"$\x{a2}", $P1516
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done
    goto rxscan98_scan
  rxscan98_loop:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan:
    nqp_rxmark rx97_bstack, rxscan98_loop, rx97_pos, 0
  rxscan98_done:
  # rx rxquantr99 ** 0..-1
    nqp_rxmark rx97_bstack, rxquantr99_done, rx97_pos, 0
  rxquantr99_loop:
    ge rx97_pos, rx97_eos, rx97_fail
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx97_fail
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr99_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr99_done
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr99_done, rx97_pos, rx97_rep
    goto rxquantr99_loop
  rxquantr99_done:
  alt100_0:
    nqp_rxmark rx97_bstack, alt100_1, rx97_pos, 0
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:"=", rx97_fail
    add rx97_pos, 1
  # rx rxquantr101 ** 0..1
    nqp_rxmark rx97_bstack, rxquantr101_done, rx97_pos, 0
  rxquantr101_loop:
    add $I11, rx97_pos, 3
    gt $I11, rx97_eos, rx97_fail
    substr $S10, rx97_tgt, rx97_pos, 3
    ne $S10, ucs4:"cut", rx97_fail
    add rx97_pos, 3
    le rx97_pos, 0, rx97_fail
    is_cclass $I11, .CCLASS_WORD, rx97_tgt, rx97_pos
    if $I11, rx97_fail
    sub $I11, rx97_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx97_tgt, $I11
    unless $I11, rx97_fail
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    nqp_rxpeek $I19, rx97_bstack, rxquantr101_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr101_done
    inc rx97_rep
  rxquantr101_done:
    goto alt100_end
  alt100_1:
    ge rx97_pos, rx97_eos, rx97_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, rx97_pos
    unless $I11, rx97_fail
    substr $S10, rx97_tgt, rx97_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx97_pos, $I11
    add rx97_pos, 1
  alt100_end:
    rx97_cur."!cursor_pass"(rx97_pos, 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail:
    unless rx97_bstack, rx97_done
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done
    unless rx97_cstack, rx97_cstack_done
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done
    lt rx97_pos, 0, rx97_fail
    eq $I19, 0, rx97_fail
    if_null rx97_cstack, rx97_jump
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut:
    assign rx97_cstack, $I18
  rx97_jump:
    jump $I19
  rx97_done:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1338064451.944_caps"  :subid("414_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    new $P105, "Hash"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1338064451.944_nfa"  :subid("415_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    new $P105, "ResizablePMCArray"
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P106, 1
    push $P106, 1
    push $P106, 0
    push $P106, 2
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 3
    push $P107, 4
    push $P107, 4096
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 99
    push $P108, 4
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 117
    push $P109, 5
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 6
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 7
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "panic"
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "comp_unit"  :subid("50_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1518
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    .lex "self", param_1518
.annotate 'line', 738
    new $P103, "Undef"
    set $P1519, $P103
    .lex "$*IN_DECL", $P1519
.annotate 'line', 740
    new $P104, "Undef"
    set $P1520, $P104
    .lex "$*HAS_YOU_ARE_HERE", $P1520
.annotate 'line', 741
    new $P105, "Undef"
    set $P1521, $P105
    .lex "$*MAIN_SUB", $P1521
.annotate 'line', 744
    new $P106, "Undef"
    set $P1522, $P106
    .lex "$*PACKAGE", $P1522
.annotate 'line', 745
    new $P107, "Undef"
    set $P1523, $P107
    .lex "$*GLOBALish", $P1523
    .local pmc self
    find_lex $P108, "self"
    set self, $P108
    .lex unicode:"$\x{a2}", $P1524
    .lex "$/", $P1525
.annotate 'line', 737
    .local string rx107_tgt
    .local int rx107_pos
    .local int rx107_off
    .local int rx107_eos
    .local int rx107_rep
    .local pmc rx107_cur
    .local pmc rx107_curclass
    .local pmc rx107_bstack
    .local pmc rx107_cstack
    (rx107_cur, rx107_tgt, rx107_pos, rx107_curclass, rx107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx107_cur
    length rx107_eos, rx107_tgt
    eq $I19, 1, rx107_restart
    repr_get_attr_int $I11, self, rx107_curclass, "$!from"
    ne $I11, -1, rxscan108_done
    goto rxscan108_scan
  rxscan108_loop:
    inc rx107_pos
    gt rx107_pos, rx107_eos, rx107_fail
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!from", rx107_pos
  rxscan108_scan:
    nqp_rxmark rx107_bstack, rxscan108_loop, rx107_pos, 0
  rxscan108_done:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
.annotate 'line', 738
    new $P109, "String"
    assign $P109, ""
    set $P1519, $P109
.annotate 'line', 737
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
.annotate 'line', 740
    new $P110, "Float"
    assign $P110, 0
    set $P1520, $P110
.annotate 'line', 737
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
    set $P113, $P1521
    unless_null $P113, vivify_1255
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["$MAIN_SUB"]
    unless_null $P113, vivify_1256
    die "Contextual $*MAIN_SUB not found"
  vivify_1256:
  vivify_1255:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
    set $P116, $P1522
    unless_null $P116, vivify_1257
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$PACKAGE"]
    unless_null $P116, vivify_1258
    die "Contextual $*PACKAGE not found"
  vivify_1258:
  vivify_1257:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
    set $P119, $P1523
    unless_null $P119, vivify_1259
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$GLOBALish"]
    unless_null $P119, vivify_1260
    die "Contextual $*GLOBALish not found"
  vivify_1260:
  vivify_1259:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."GLOBALish"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    nqp_rxmark rx107_bstack, rxsubrule112_pass, -1, 0
  rxsubrule112_pass:
    rx107_cstack = rx107_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
  alt113_0:
    nqp_rxmark rx107_bstack, alt113_1, rx107_pos, 0
    lt rx107_pos, rx107_eos, rx107_fail
    goto alt113_end
  alt113_1:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
  alt113_end:
    rx107_cur."!cursor_pass"(rx107_pos, "comp_unit", 'backtrack'=>1)
    .return (rx107_cur)
  rx107_restart:
    repr_get_attr_obj rx107_cstack, rx107_cur, rx107_curclass, "$!cstack"
  rx107_fail:
    unless rx107_bstack, rx107_done
    pop $I19, rx107_bstack
    if_null rx107_cstack, rx107_cstack_done
    unless rx107_cstack, rx107_cstack_done
    dec $I19
    set $P11, rx107_cstack[$I19]
  rx107_cstack_done:
    pop rx107_rep, rx107_bstack
    pop rx107_pos, rx107_bstack
    pop $I19, rx107_bstack
    lt rx107_pos, -1, rx107_done
    lt rx107_pos, 0, rx107_fail
    eq $I19, 0, rx107_fail
    if_null rx107_cstack, rx107_jump
    elements $I18, rx107_bstack
    le $I18, 0, rx107_cut
    dec $I18
    set $I18, rx107_bstack[$I18]
  rx107_cut:
    assign rx107_cstack, $I18
  rx107_jump:
    jump $I19
  rx107_done:
    rx107_cur."!cursor_fail"()
    .return (rx107_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1338064451.944_caps"  :subid("416_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    new $P109, "Hash"
    set $P109["statementlist"], 0
    .return ($P109)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1338064451.944_nfa"  :subid("417_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 2
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 3
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 4
    new $P113, "ResizablePMCArray"
    push $P113, 8
    push $P113, "newpad"
    push $P113, 5
    new $P114, "ResizablePMCArray"
    push $P114, 1
    push $P114, 0
    push $P114, 6
    new $P115, "ResizablePMCArray"
    push $P115, 1
    push $P115, 0
    push $P115, 7
    new $P116, "ResizablePMCArray"
    push $P116, 8
    push $P116, "GLOBALish"
    push $P116, 8
    new $P117, "ResizablePMCArray"
    push $P117, 8
    push $P117, "outerctx"
    push $P117, 9
    new $P118, "ResizablePMCArray"
    push $P118, 8
    push $P118, "statementlist"
    push $P118, 10
    new $P119, "ResizablePMCArray"
    push $P119, 0
    push $P119, 0
    push $P119, 0
    new $P120, "ResizablePMCArray"
    push $P120, $P109
    push $P120, $P110
    push $P120, $P111
    push $P120, $P112
    push $P120, $P113
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statementlist"  :subid("51_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1529
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 754
    .lex "self", param_1529
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1530
    .lex "$/", $P1531
    .local string rx116_tgt
    .local int rx116_pos
    .local int rx116_off
    .local int rx116_eos
    .local int rx116_rep
    .local pmc rx116_cur
    .local pmc rx116_curclass
    .local pmc rx116_bstack
    .local pmc rx116_cstack
    (rx116_cur, rx116_tgt, rx116_pos, rx116_curclass, rx116_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx116_cur
    length rx116_eos, rx116_tgt
    eq $I19, 1, rx116_restart
    repr_get_attr_int $I11, self, rx116_curclass, "$!from"
    ne $I11, -1, rxscan117_done
    goto rxscan117_scan
  rxscan117_loop:
    inc rx116_pos
    gt rx116_pos, rx116_eos, rx116_fail
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!from", rx116_pos
  rxscan117_scan:
    nqp_rxmark rx116_bstack, rxscan117_loop, rx116_pos, 0
  rxscan117_done:
  alt118_0:
    nqp_rxmark rx116_bstack, alt118_1, rx116_pos, 0
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    lt rx116_pos, rx116_eos, rx116_fail
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    goto alt118_end
  alt118_1:
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
  # rx rxquantr123 ** 0..-1
    nqp_rxmark rx116_bstack, rxquantr123_done, rx116_pos, 0
  rxquantr123_loop:
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."statement"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    nqp_rxmark rx116_bstack, rxsubrule124_pass, -1, 0
  rxsubrule124_pass:
    rx116_cstack = rx116_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    nqp_rxpeek $I19, rx116_bstack, rxquantr123_done
    inc $I19
    inc $I19
    set rx116_rep, rx116_bstack[$I19]
    nqp_rxcommit rx116_bstack, rxquantr123_done
    inc rx116_rep
    nqp_rxmark rx116_bstack, rxquantr123_done, rx116_pos, rx116_rep
    goto rxquantr123_loop
  rxquantr123_done:
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
  alt118_end:
    rx116_cur."!cursor_pass"(rx116_pos, "statementlist", 'backtrack'=>1)
    .return (rx116_cur)
  rx116_restart:
    repr_get_attr_obj rx116_cstack, rx116_cur, rx116_curclass, "$!cstack"
  rx116_fail:
    unless rx116_bstack, rx116_done
    pop $I19, rx116_bstack
    if_null rx116_cstack, rx116_cstack_done
    unless rx116_cstack, rx116_cstack_done
    dec $I19
    set $P11, rx116_cstack[$I19]
  rx116_cstack_done:
    pop rx116_rep, rx116_bstack
    pop rx116_pos, rx116_bstack
    pop $I19, rx116_bstack
    lt rx116_pos, -1, rx116_done
    lt rx116_pos, 0, rx116_fail
    eq $I19, 0, rx116_fail
    if_null rx116_cstack, rx116_jump
    elements $I18, rx116_bstack
    le $I18, 0, rx116_cut
    dec $I18
    set $I18, rx116_bstack[$I18]
  rx116_cut:
    assign rx116_cstack, $I18
  rx116_jump:
    jump $I19
  rx116_done:
    rx116_cur."!cursor_fail"()
    .return (rx116_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1338064451.944_caps"  :subid("418_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 754
    new $P104, "Hash"
    set $P104["statement"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement"  :subid("53_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1534
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    .const 'Sub' $P1539 = "52_1338064451.944" 
    capture_lex $P1539
    .lex "self", param_1534
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1535
    .lex "$/", $P1536
    .local string rx128_tgt
    .local int rx128_pos
    .local int rx128_off
    .local int rx128_eos
    .local int rx128_rep
    .local pmc rx128_cur
    .local pmc rx128_curclass
    .local pmc rx128_bstack
    .local pmc rx128_cstack
    (rx128_cur, rx128_tgt, rx128_pos, rx128_curclass, rx128_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx128_cur
    length rx128_eos, rx128_tgt
    eq $I19, 1, rx128_restart
    repr_get_attr_int $I11, self, rx128_curclass, "$!from"
    ne $I11, -1, rxscan129_done
    goto rxscan129_scan
  rxscan129_loop:
    inc rx128_pos
    gt rx128_pos, rx128_eos, rx128_fail
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!from", rx128_pos
  rxscan129_scan:
    nqp_rxmark rx128_bstack, rxscan129_loop, rx128_pos, 0
  rxscan129_done:
    .const 'Sub' $P1539 = "52_1338064451.944" 
    capture_lex $P1539
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."before"($P1539)
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    ge $I11, 0, rx128_fail
  alt135_0:
    nqp_rxmark rx128_bstack, alt135_1, rx128_pos, 0
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    nqp_rxmark rx128_bstack, rxsubrule136_pass, -1, 0
  rxsubrule136_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    goto alt135_end
  alt135_1:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    nqp_rxmark rx128_bstack, rxsubrule137_pass, -1, 0
  rxsubrule137_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."ws"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
  # rx rxquantr139 ** 0..1
    nqp_rxmark rx128_bstack, rxquantr139_done, rx128_pos, 0
  rxquantr139_loop:
  alt140_0:
    nqp_rxmark rx128_bstack, alt140_1, rx128_pos, 0
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    goto alt140_end
  alt140_1:
    nqp_rxmark rx128_bstack, alt140_2, rx128_pos, 0
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    nqp_rxmark rx128_bstack, rxsubrule141_pass, -1, 0
  rxsubrule141_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
  # rx rxquantr142 ** 0..1
    nqp_rxmark rx128_bstack, rxquantr142_done, rx128_pos, 0
  rxquantr142_loop:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    goto rxsubrule143_pass
  rxsubrule143_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
  rxsubrule143_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule143_back
    push rx128_bstack, $I11
    push rx128_bstack, 0
    push rx128_bstack, rx128_pos
    elements $I11, rx128_cstack
    push rx128_bstack, $I11
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    nqp_rxpeek $I19, rx128_bstack, rxquantr142_done
    inc $I19
    inc $I19
    set rx128_rep, rx128_bstack[$I19]
    nqp_rxcommit rx128_bstack, rxquantr142_done
    inc rx128_rep
  rxquantr142_done:
    goto alt140_end
  alt140_2:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    nqp_rxmark rx128_bstack, rxsubrule144_pass, -1, 0
  rxsubrule144_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
  alt140_end:
    nqp_rxpeek $I19, rx128_bstack, rxquantr139_done
    inc $I19
    inc $I19
    set rx128_rep, rx128_bstack[$I19]
    nqp_rxcommit rx128_bstack, rxquantr139_done
    inc rx128_rep
  rxquantr139_done:
  alt135_end:
    rx128_cur."!cursor_pass"(rx128_pos, "statement", 'backtrack'=>1)
    .return (rx128_cur)
  rx128_restart:
    repr_get_attr_obj rx128_cstack, rx128_cur, rx128_curclass, "$!cstack"
  rx128_fail:
    unless rx128_bstack, rx128_done
    pop $I19, rx128_bstack
    if_null rx128_cstack, rx128_cstack_done
    unless rx128_cstack, rx128_cstack_done
    dec $I19
    set $P11, rx128_cstack[$I19]
  rx128_cstack_done:
    pop rx128_rep, rx128_bstack
    pop rx128_pos, rx128_bstack
    pop $I19, rx128_bstack
    lt rx128_pos, -1, rx128_done
    lt rx128_pos, 0, rx128_fail
    eq $I19, 0, rx128_fail
    if_null rx128_cstack, rx128_jump
    elements $I18, rx128_bstack
    le $I18, 0, rx128_cut
    dec $I18
    set $I18, rx128_bstack[$I18]
  rx128_cut:
    assign rx128_cstack, $I18
  rx128_jump:
    jump $I19
  rx128_done:
    rx128_cur."!cursor_fail"()
    .return (rx128_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1338064451.944_caps"  :subid("419_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    new $P104, "Hash"
    set $P104["statement_control"], 0
    set $P104["EXPR"], 0
    set $P104["statement_mod_cond"], 2
    set $P104["statement_mod_loop"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1538"  :anon :subid("52_1338064451.944") :method :outer("53_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    .lex unicode:"$\x{a2}", $P1542
    .local string rx130_tgt
    .local int rx130_pos
    .local int rx130_off
    .local int rx130_eos
    .local int rx130_rep
    .local pmc rx130_cur
    .local pmc rx130_curclass
    .local pmc rx130_bstack
    .local pmc rx130_cstack
    (rx130_cur, rx130_tgt, rx130_pos, rx130_curclass, rx130_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx130_cur
    length rx130_eos, rx130_tgt
    eq $I19, 1, rx130_restart
    repr_get_attr_int $I11, self, rx130_curclass, "$!from"
    ne $I11, -1, rxscan131_done
    goto rxscan131_scan
  rxscan131_loop:
    inc rx130_pos
    gt rx130_pos, rx130_eos, rx130_fail
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!from", rx130_pos
  rxscan131_scan:
    nqp_rxmark rx130_bstack, rxscan131_loop, rx130_pos, 0
  rxscan131_done:
  alt132_0:
    nqp_rxmark rx130_bstack, alt132_1, rx130_pos, 0
  alt133_0:
    nqp_rxmark rx130_bstack, alt133_1, rx130_pos, 0
    add $I11, rx130_pos, 1
    gt $I11, rx130_eos, rx130_fail
    substr $S10, rx130_tgt, rx130_pos, 1
    ne $S10, ucs4:"]", rx130_fail
    add rx130_pos, 1
    goto alt133_end
  alt133_1:
    ge rx130_pos, rx130_eos, rx130_fail
    substr $S11, rx130_tgt, rx130_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx130_fail
    inc rx130_pos
  alt133_end:
    goto alt132_end
  alt132_1:
    lt rx130_pos, rx130_eos, rx130_fail
  alt132_end:
    rx130_cur."!cursor_pass"(rx130_pos, 'backtrack'=>1)
    .return (rx130_cur)
  rx130_restart:
    repr_get_attr_obj rx130_cstack, rx130_cur, rx130_curclass, "$!cstack"
  rx130_fail:
    unless rx130_bstack, rx130_done
    pop $I19, rx130_bstack
    if_null rx130_cstack, rx130_cstack_done
    unless rx130_cstack, rx130_cstack_done
    dec $I19
    set $P11, rx130_cstack[$I19]
  rx130_cstack_done:
    pop rx130_rep, rx130_bstack
    pop rx130_pos, rx130_bstack
    pop $I19, rx130_bstack
    lt rx130_pos, -1, rx130_done
    lt rx130_pos, 0, rx130_fail
    eq $I19, 0, rx130_fail
    if_null rx130_cstack, rx130_jump
    elements $I18, rx130_bstack
    le $I18, 0, rx130_cut
    dec $I18
    set $I18, rx130_bstack[$I18]
  rx130_cut:
    assign rx130_cstack, $I18
  rx130_jump:
    jump $I19
  rx130_done:
    rx130_cur."!cursor_fail"()
    .return (rx130_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1338064451.944_caps"  :subid("420_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1338064451.944_nfa"  :subid("421_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 93
    push $P105, 0
    push $P105, 6
    push $P105, ")}"
    push $P105, 0
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "eat_terminator"  :subid("54_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1544
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .lex "self", param_1544
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1545
    .lex "$/", $P1546
    .local string rx145_tgt
    .local int rx145_pos
    .local int rx145_off
    .local int rx145_eos
    .local int rx145_rep
    .local pmc rx145_cur
    .local pmc rx145_curclass
    .local pmc rx145_bstack
    .local pmc rx145_cstack
    (rx145_cur, rx145_tgt, rx145_pos, rx145_curclass, rx145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx145_cur
    length rx145_eos, rx145_tgt
    eq $I19, 1, rx145_restart
    repr_get_attr_int $I11, self, rx145_curclass, "$!from"
    ne $I11, -1, rxscan146_done
    goto rxscan146_scan
  rxscan146_loop:
    inc rx145_pos
    gt rx145_pos, rx145_eos, rx145_fail
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!from", rx145_pos
  rxscan146_scan:
    nqp_rxmark rx145_bstack, rxscan146_loop, rx145_pos, 0
  rxscan146_done:
  alt147_0:
    nqp_rxmark rx145_bstack, alt147_1, rx145_pos, 0
    add $I11, rx145_pos, 1
    gt $I11, rx145_eos, rx145_fail
    substr $S10, rx145_tgt, rx145_pos, 1
    ne $S10, ucs4:";", rx145_fail
    add rx145_pos, 1
    goto alt147_end
  alt147_1:
    nqp_rxmark rx145_bstack, alt147_2, rx145_pos, 0
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail
    goto alt147_end
  alt147_2:
    nqp_rxmark rx145_bstack, alt147_3, rx145_pos, 0
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail
    goto alt147_end
  alt147_3:
    lt rx145_pos, rx145_eos, rx145_fail
  alt147_end:
    rx145_cur."!cursor_pass"(rx145_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx145_cur)
  rx145_restart:
    repr_get_attr_obj rx145_cstack, rx145_cur, rx145_curclass, "$!cstack"
  rx145_fail:
    unless rx145_bstack, rx145_done
    pop $I19, rx145_bstack
    if_null rx145_cstack, rx145_cstack_done
    unless rx145_cstack, rx145_cstack_done
    dec $I19
    set $P11, rx145_cstack[$I19]
  rx145_cstack_done:
    pop rx145_rep, rx145_bstack
    pop rx145_pos, rx145_bstack
    pop $I19, rx145_bstack
    lt rx145_pos, -1, rx145_done
    lt rx145_pos, 0, rx145_fail
    eq $I19, 0, rx145_fail
    if_null rx145_cstack, rx145_jump
    elements $I18, rx145_bstack
    le $I18, 0, rx145_cut
    dec $I18
    set $I18, rx145_bstack[$I18]
  rx145_cut:
    assign rx145_cstack, $I18
  rx145_jump:
    jump $I19
  rx145_done:
    rx145_cur."!cursor_fail"()
    .return (rx145_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1338064451.944_caps"  :subid("422_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1338064451.944_nfa"  :subid("423_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 59
    push $P105, 0
    push $P105, 8
    push $P105, "MARKED"
    push $P105, 0
    push $P105, 8
    push $P105, "terminator"
    push $P105, 0
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "xblock"  :subid("55_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1550
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    .lex "self", param_1550
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1551
    .lex "$/", $P1552
    .local string rx149_tgt
    .local int rx149_pos
    .local int rx149_off
    .local int rx149_eos
    .local int rx149_rep
    .local pmc rx149_cur
    .local pmc rx149_curclass
    .local pmc rx149_bstack
    .local pmc rx149_cstack
    (rx149_cur, rx149_tgt, rx149_pos, rx149_curclass, rx149_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx149_cur
    length rx149_eos, rx149_tgt
    eq $I19, 1, rx149_restart
    repr_get_attr_int $I11, self, rx149_curclass, "$!from"
    ne $I11, -1, rxscan150_done
    goto rxscan150_scan
  rxscan150_loop:
    inc rx149_pos
    gt rx149_pos, rx149_eos, rx149_fail
    repr_bind_attr_int rx149_cur, rx149_curclass, "$!from", rx149_pos
  rxscan150_scan:
    nqp_rxmark rx149_bstack, rxscan150_loop, rx149_pos, 0
  rxscan150_done:
    repr_bind_attr_int rx149_cur, rx149_curclass, "$!pos", rx149_pos
    $P11 = rx149_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx149_curclass, "$!pos"
    lt $I11, 0, rx149_fail
    nqp_rxmark rx149_bstack, rxsubrule151_pass, -1, 0
  rxsubrule151_pass:
    rx149_cstack = rx149_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx149_pos, $P11, rx149_curclass, "$!pos"
    repr_bind_attr_int rx149_cur, rx149_curclass, "$!pos", rx149_pos
    $P11 = rx149_cur."ws"()
    repr_get_attr_int $I11, $P11, rx149_curclass, "$!pos"
    lt $I11, 0, rx149_fail
    repr_get_attr_int rx149_pos, $P11, rx149_curclass, "$!pos"
    repr_bind_attr_int rx149_cur, rx149_curclass, "$!pos", rx149_pos
    $P11 = rx149_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx149_curclass, "$!pos"
    lt $I11, 0, rx149_fail
    nqp_rxmark rx149_bstack, rxsubrule153_pass, -1, 0
  rxsubrule153_pass:
    rx149_cstack = rx149_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx149_pos, $P11, rx149_curclass, "$!pos"
    rx149_cur."!cursor_pass"(rx149_pos, "xblock", 'backtrack'=>1)
    .return (rx149_cur)
  rx149_restart:
    repr_get_attr_obj rx149_cstack, rx149_cur, rx149_curclass, "$!cstack"
  rx149_fail:
    unless rx149_bstack, rx149_done
    pop $I19, rx149_bstack
    if_null rx149_cstack, rx149_cstack_done
    unless rx149_cstack, rx149_cstack_done
    dec $I19
    set $P11, rx149_cstack[$I19]
  rx149_cstack_done:
    pop rx149_rep, rx149_bstack
    pop rx149_pos, rx149_bstack
    pop $I19, rx149_bstack
    lt rx149_pos, -1, rx149_done
    lt rx149_pos, 0, rx149_fail
    eq $I19, 0, rx149_fail
    if_null rx149_cstack, rx149_jump
    elements $I18, rx149_bstack
    le $I18, 0, rx149_cut
    dec $I18
    set $I18, rx149_bstack[$I18]
  rx149_cut:
    assign rx149_cstack, $I18
  rx149_jump:
    jump $I19
  rx149_done:
    rx149_cur."!cursor_fail"()
    .return (rx149_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1338064451.944_caps"  :subid("424_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    new $P104, "Hash"
    set $P104["EXPR"], 0
    set $P104["pblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1338064451.944_nfa"  :subid("425_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "EXPR"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "pblock"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pblock"  :subid("56_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1556
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 783
    .lex "self", param_1556
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1557
    .lex "$/", $P1558
    .local string rx154_tgt
    .local int rx154_pos
    .local int rx154_off
    .local int rx154_eos
    .local int rx154_rep
    .local pmc rx154_cur
    .local pmc rx154_curclass
    .local pmc rx154_bstack
    .local pmc rx154_cstack
    (rx154_cur, rx154_tgt, rx154_pos, rx154_curclass, rx154_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx154_cur
    length rx154_eos, rx154_tgt
    eq $I19, 1, rx154_restart
    repr_get_attr_int $I11, self, rx154_curclass, "$!from"
    ne $I11, -1, rxscan155_done
    goto rxscan155_scan
  rxscan155_loop:
    inc rx154_pos
    gt rx154_pos, rx154_eos, rx154_fail
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!from", rx154_pos
  rxscan155_scan:
    nqp_rxmark rx154_bstack, rxscan155_loop, rx154_pos, 0
  rxscan155_done:
  alt156_0:
    nqp_rxmark rx154_bstack, alt156_1, rx154_pos, 0
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."signature"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    nqp_rxmark rx154_bstack, rxsubrule159_pass, -1, 0
  rxsubrule159_pass:
    rx154_cstack = rx154_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    nqp_rxmark rx154_bstack, rxsubrule160_pass, -1, 0
  rxsubrule160_pass:
    rx154_cstack = rx154_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    goto alt156_end
  alt156_1:
    nqp_rxmark rx154_bstack, alt156_2, rx154_pos, 0
    ge rx154_pos, rx154_eos, rx154_fail
    substr $S11, rx154_tgt, rx154_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx154_fail
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    nqp_rxmark rx154_bstack, rxsubrule162_pass, -1, 0
  rxsubrule162_pass:
    rx154_cstack = rx154_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    goto alt156_end
  alt156_2:
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
  alt156_end:
    rx154_cur."!cursor_pass"(rx154_pos, "pblock", 'backtrack'=>1)
    .return (rx154_cur)
  rx154_restart:
    repr_get_attr_obj rx154_cstack, rx154_cur, rx154_curclass, "$!cstack"
  rx154_fail:
    unless rx154_bstack, rx154_done
    pop $I19, rx154_bstack
    if_null rx154_cstack, rx154_cstack_done
    unless rx154_cstack, rx154_cstack_done
    dec $I19
    set $P11, rx154_cstack[$I19]
  rx154_cstack_done:
    pop rx154_rep, rx154_bstack
    pop rx154_pos, rx154_bstack
    pop $I19, rx154_bstack
    lt rx154_pos, -1, rx154_done
    lt rx154_pos, 0, rx154_fail
    eq $I19, 0, rx154_fail
    if_null rx154_cstack, rx154_jump
    elements $I18, rx154_bstack
    le $I18, 0, rx154_cut
    dec $I18
    set $I18, rx154_bstack[$I18]
  rx154_cut:
    assign rx154_cstack, $I18
  rx154_jump:
    jump $I19
  rx154_done:
    rx154_cur."!cursor_fail"()
    .return (rx154_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "56_1338064451.944_caps"  :subid("426_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 783
    new $P104, "Hash"
    set $P104["signature"], 0
    set $P104["blockoid"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "56_1338064451.944_nfa"  :subid("427_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 783
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "lambda"
    push $P105, 2
    push $P105, 6
    push $P105, "{"
    push $P105, 5
    push $P105, 8
    push $P105, "panic"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "newpad"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "signature"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "blockoid"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "lambda"  :subid("57_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1562
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 794
    .lex "self", param_1562
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1563
    .lex "$/", $P1564
    .local string rx164_tgt
    .local int rx164_pos
    .local int rx164_off
    .local int rx164_eos
    .local int rx164_rep
    .local pmc rx164_cur
    .local pmc rx164_curclass
    .local pmc rx164_bstack
    .local pmc rx164_cstack
    (rx164_cur, rx164_tgt, rx164_pos, rx164_curclass, rx164_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx164_cur
    length rx164_eos, rx164_tgt
    eq $I19, 1, rx164_restart
    repr_get_attr_int $I11, self, rx164_curclass, "$!from"
    ne $I11, -1, rxscan165_done
    goto rxscan165_scan
  rxscan165_loop:
    inc rx164_pos
    gt rx164_pos, rx164_eos, rx164_fail
    repr_bind_attr_int rx164_cur, rx164_curclass, "$!from", rx164_pos
  rxscan165_scan:
    nqp_rxmark rx164_bstack, rxscan165_loop, rx164_pos, 0
  rxscan165_done:
  alt166_0:
    nqp_rxmark rx164_bstack, alt166_1, rx164_pos, 0
    add $I11, rx164_pos, 2
    gt $I11, rx164_eos, rx164_fail
    substr $S10, rx164_tgt, rx164_pos, 2
    ne $S10, ucs4:"->", rx164_fail
    add rx164_pos, 2
    goto alt166_end
  alt166_1:
    add $I11, rx164_pos, 3
    gt $I11, rx164_eos, rx164_fail
    substr $S10, rx164_tgt, rx164_pos, 3
    ne $S10, ucs4:"<->", rx164_fail
    add rx164_pos, 3
  alt166_end:
    rx164_cur."!cursor_pass"(rx164_pos, "lambda", 'backtrack'=>1)
    .return (rx164_cur)
  rx164_restart:
    repr_get_attr_obj rx164_cstack, rx164_cur, rx164_curclass, "$!cstack"
  rx164_fail:
    unless rx164_bstack, rx164_done
    pop $I19, rx164_bstack
    if_null rx164_cstack, rx164_cstack_done
    unless rx164_cstack, rx164_cstack_done
    dec $I19
    set $P11, rx164_cstack[$I19]
  rx164_cstack_done:
    pop rx164_rep, rx164_bstack
    pop rx164_pos, rx164_bstack
    pop $I19, rx164_bstack
    lt rx164_pos, -1, rx164_done
    lt rx164_pos, 0, rx164_fail
    eq $I19, 0, rx164_fail
    if_null rx164_cstack, rx164_jump
    elements $I18, rx164_bstack
    le $I18, 0, rx164_cut
    dec $I18
    set $I18, rx164_bstack[$I18]
  rx164_cut:
    assign rx164_cstack, $I18
  rx164_jump:
    jump $I19
  rx164_done:
    rx164_cur."!cursor_fail"()
    .return (rx164_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "57_1338064451.944_caps"  :subid("428_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 794
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "57_1338064451.944_nfa"  :subid("429_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 794
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    push $P105, 2
    push $P105, 60
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 62
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 45
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 62
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "block"  :subid("58_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1568
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 796
    .lex "self", param_1568
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1569
    .lex "$/", $P1570
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done
    goto rxscan168_scan
  rxscan168_loop:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan:
    nqp_rxmark rx167_bstack, rxscan168_loop, rx167_pos, 0
  rxscan168_done:
  alt169_0:
    nqp_rxmark rx167_bstack, alt169_1, rx167_pos, 0
    ge rx167_pos, rx167_eos, rx167_fail
    substr $S11, rx167_tgt, rx167_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx167_fail
    goto alt169_end
  alt169_1:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt169_end:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail
    nqp_rxmark rx167_bstack, rxsubrule172_pass, -1, 0
  rxsubrule172_pass:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    rx167_cur."!cursor_pass"(rx167_pos, "block", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail:
    unless rx167_bstack, rx167_done
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done
    unless rx167_cstack, rx167_cstack_done
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done
    lt rx167_pos, 0, rx167_fail
    eq $I19, 0, rx167_fail
    if_null rx167_cstack, rx167_jump
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut:
    assign rx167_cstack, $I18
  rx167_jump:
    jump $I19
  rx167_done:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "58_1338064451.944_caps"  :subid("430_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 796
    new $P104, "Hash"
    set $P104["blockoid"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blockoid"  :subid("59_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1573
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    .lex "self", param_1573
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1574
    .lex "$/", $P1575
    .local string rx173_tgt
    .local int rx173_pos
    .local int rx173_off
    .local int rx173_eos
    .local int rx173_rep
    .local pmc rx173_cur
    .local pmc rx173_curclass
    .local pmc rx173_bstack
    .local pmc rx173_cstack
    (rx173_cur, rx173_tgt, rx173_pos, rx173_curclass, rx173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx173_cur
    length rx173_eos, rx173_tgt
    eq $I19, 1, rx173_restart
    repr_get_attr_int $I11, self, rx173_curclass, "$!from"
    ne $I11, -1, rxscan174_done
    goto rxscan174_scan
  rxscan174_loop:
    inc rx173_pos
    gt rx173_pos, rx173_eos, rx173_fail
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!from", rx173_pos
  rxscan174_scan:
    nqp_rxmark rx173_bstack, rxscan174_loop, rx173_pos, 0
  rxscan174_done:
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    repr_get_attr_int rx173_pos, $P11, rx173_curclass, "$!pos"
  alt176_0:
    nqp_rxmark rx173_bstack, alt176_1, rx173_pos, 0
    add $I11, rx173_pos, 14
    gt $I11, rx173_eos, rx173_fail
    substr $S10, rx173_tgt, rx173_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx173_fail
    add rx173_pos, 14
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    nqp_rxmark rx173_bstack, rxsubrule177_pass, -1, 0
  rxsubrule177_pass:
    rx173_cstack = rx173_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx173_pos, $P11, rx173_curclass, "$!pos"
    goto alt176_end
  alt176_1:
    add $I11, rx173_pos, 1
    gt $I11, rx173_eos, rx173_fail
    substr $S10, rx173_tgt, rx173_pos, 1
    ne $S10, ucs4:"{", rx173_fail
    add rx173_pos, 1
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    nqp_rxmark rx173_bstack, rxsubrule178_pass, -1, 0
  rxsubrule178_pass:
    rx173_cstack = rx173_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx173_pos, $P11, rx173_curclass, "$!pos"
  alt179_0:
    nqp_rxmark rx173_bstack, alt179_1, rx173_pos, 0
    add $I11, rx173_pos, 1
    gt $I11, rx173_eos, rx173_fail
    substr $S10, rx173_tgt, rx173_pos, 1
    ne $S10, ucs4:"}", rx173_fail
    add rx173_pos, 1
    goto alt179_end
  alt179_1:
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    goto rxsubrule180_pass
  rxsubrule180_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
  rxsubrule180_pass:
    rx173_cstack = rx173_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule180_back
    push rx173_bstack, $I11
    push rx173_bstack, 0
    push rx173_bstack, rx173_pos
    elements $I11, rx173_cstack
    push rx173_bstack, $I11
    repr_get_attr_int rx173_pos, $P11, rx173_curclass, "$!pos"
  alt179_end:
  alt176_end:
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    rx173_cur."!cursor_pass"(rx173_pos, "blockoid", 'backtrack'=>1)
    .return (rx173_cur)
  rx173_restart:
    repr_get_attr_obj rx173_cstack, rx173_cur, rx173_curclass, "$!cstack"
  rx173_fail:
    unless rx173_bstack, rx173_done
    pop $I19, rx173_bstack
    if_null rx173_cstack, rx173_cstack_done
    unless rx173_cstack, rx173_cstack_done
    dec $I19
    set $P11, rx173_cstack[$I19]
  rx173_cstack_done:
    pop rx173_rep, rx173_bstack
    pop rx173_pos, rx173_bstack
    pop $I19, rx173_bstack
    lt rx173_pos, -1, rx173_done
    lt rx173_pos, 0, rx173_fail
    eq $I19, 0, rx173_fail
    if_null rx173_cstack, rx173_jump
    elements $I18, rx173_bstack
    le $I18, 0, rx173_cut
    dec $I18
    set $I18, rx173_bstack[$I18]
  rx173_cut:
    assign rx173_cstack, $I18
  rx173_jump:
    jump $I19
  rx173_done:
    rx173_cur."!cursor_fail"()
    .return (rx173_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1338064451.944_caps"  :subid("431_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    new $P104, "Hash"
    set $P104["you_are_here"], 0
    set $P104["statementlist"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1338064451.944_nfa"  :subid("432_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "finishpad"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "newpad"  :subid("60_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1579
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 811
    .lex "self", param_1579
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1580
    .lex "$/", $P1581
    .local string rx181_tgt
    .local int rx181_pos
    .local int rx181_off
    .local int rx181_eos
    .local int rx181_rep
    .local pmc rx181_cur
    .local pmc rx181_curclass
    .local pmc rx181_bstack
    .local pmc rx181_cstack
    (rx181_cur, rx181_tgt, rx181_pos, rx181_curclass, rx181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx181_cur
    length rx181_eos, rx181_tgt
    eq $I19, 1, rx181_restart
    repr_get_attr_int $I11, self, rx181_curclass, "$!from"
    ne $I11, -1, rxscan182_done
    goto rxscan182_scan
  rxscan182_loop:
    inc rx181_pos
    gt rx181_pos, rx181_eos, rx181_fail
    repr_bind_attr_int rx181_cur, rx181_curclass, "$!from", rx181_pos
  rxscan182_scan:
    nqp_rxmark rx181_bstack, rxscan182_loop, rx181_pos, 0
  rxscan182_done:
    rx181_cur."!cursor_pass"(rx181_pos, "newpad", 'backtrack'=>1)
    .return (rx181_cur)
  rx181_restart:
    repr_get_attr_obj rx181_cstack, rx181_cur, rx181_curclass, "$!cstack"
  rx181_fail:
    unless rx181_bstack, rx181_done
    pop $I19, rx181_bstack
    if_null rx181_cstack, rx181_cstack_done
    unless rx181_cstack, rx181_cstack_done
    dec $I19
    set $P11, rx181_cstack[$I19]
  rx181_cstack_done:
    pop rx181_rep, rx181_bstack
    pop rx181_pos, rx181_bstack
    pop $I19, rx181_bstack
    lt rx181_pos, -1, rx181_done
    lt rx181_pos, 0, rx181_fail
    eq $I19, 0, rx181_fail
    if_null rx181_cstack, rx181_jump
    elements $I18, rx181_bstack
    le $I18, 0, rx181_cut
    dec $I18
    set $I18, rx181_bstack[$I18]
  rx181_cut:
    assign rx181_cstack, $I18
  rx181_jump:
    jump $I19
  rx181_done:
    rx181_cur."!cursor_fail"()
    .return (rx181_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1338064451.944_caps"  :subid("433_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 811
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1338064451.944_nfa"  :subid("434_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 811
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "outerctx"  :subid("61_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1585
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    .lex "self", param_1585
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1586
    .lex "$/", $P1587
    .local string rx184_tgt
    .local int rx184_pos
    .local int rx184_off
    .local int rx184_eos
    .local int rx184_rep
    .local pmc rx184_cur
    .local pmc rx184_curclass
    .local pmc rx184_bstack
    .local pmc rx184_cstack
    (rx184_cur, rx184_tgt, rx184_pos, rx184_curclass, rx184_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx184_cur
    length rx184_eos, rx184_tgt
    eq $I19, 1, rx184_restart
    repr_get_attr_int $I11, self, rx184_curclass, "$!from"
    ne $I11, -1, rxscan185_done
    goto rxscan185_scan
  rxscan185_loop:
    inc rx184_pos
    gt rx184_pos, rx184_eos, rx184_fail
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!from", rx184_pos
  rxscan185_scan:
    nqp_rxmark rx184_bstack, rxscan185_loop, rx184_pos, 0
  rxscan185_done:
    rx184_cur."!cursor_pass"(rx184_pos, "outerctx", 'backtrack'=>1)
    .return (rx184_cur)
  rx184_restart:
    repr_get_attr_obj rx184_cstack, rx184_cur, rx184_curclass, "$!cstack"
  rx184_fail:
    unless rx184_bstack, rx184_done
    pop $I19, rx184_bstack
    if_null rx184_cstack, rx184_cstack_done
    unless rx184_cstack, rx184_cstack_done
    dec $I19
    set $P11, rx184_cstack[$I19]
  rx184_cstack_done:
    pop rx184_rep, rx184_bstack
    pop rx184_pos, rx184_bstack
    pop $I19, rx184_bstack
    lt rx184_pos, -1, rx184_done
    lt rx184_pos, 0, rx184_fail
    eq $I19, 0, rx184_fail
    if_null rx184_cstack, rx184_jump
    elements $I18, rx184_bstack
    le $I18, 0, rx184_cut
    dec $I18
    set $I18, rx184_bstack[$I18]
  rx184_cut:
    assign rx184_cstack, $I18
  rx184_jump:
    jump $I19
  rx184_done:
    rx184_cur."!cursor_fail"()
    .return (rx184_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "61_1338064451.944_caps"  :subid("435_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "61_1338064451.944_nfa"  :subid("436_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "GLOBALish"  :subid("62_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1591
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .lex "self", param_1591
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1592
    .lex "$/", $P1593
    .local string rx187_tgt
    .local int rx187_pos
    .local int rx187_off
    .local int rx187_eos
    .local int rx187_rep
    .local pmc rx187_cur
    .local pmc rx187_curclass
    .local pmc rx187_bstack
    .local pmc rx187_cstack
    (rx187_cur, rx187_tgt, rx187_pos, rx187_curclass, rx187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx187_cur
    length rx187_eos, rx187_tgt
    eq $I19, 1, rx187_restart
    repr_get_attr_int $I11, self, rx187_curclass, "$!from"
    ne $I11, -1, rxscan188_done
    goto rxscan188_scan
  rxscan188_loop:
    inc rx187_pos
    gt rx187_pos, rx187_eos, rx187_fail
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!from", rx187_pos
  rxscan188_scan:
    nqp_rxmark rx187_bstack, rxscan188_loop, rx187_pos, 0
  rxscan188_done:
    rx187_cur."!cursor_pass"(rx187_pos, "GLOBALish", 'backtrack'=>1)
    .return (rx187_cur)
  rx187_restart:
    repr_get_attr_obj rx187_cstack, rx187_cur, rx187_curclass, "$!cstack"
  rx187_fail:
    unless rx187_bstack, rx187_done
    pop $I19, rx187_bstack
    if_null rx187_cstack, rx187_cstack_done
    unless rx187_cstack, rx187_cstack_done
    dec $I19
    set $P11, rx187_cstack[$I19]
  rx187_cstack_done:
    pop rx187_rep, rx187_bstack
    pop rx187_pos, rx187_bstack
    pop $I19, rx187_bstack
    lt rx187_pos, -1, rx187_done
    lt rx187_pos, 0, rx187_fail
    eq $I19, 0, rx187_fail
    if_null rx187_cstack, rx187_jump
    elements $I18, rx187_bstack
    le $I18, 0, rx187_cut
    dec $I18
    set $I18, rx187_bstack[$I18]
  rx187_cut:
    assign rx187_cstack, $I18
  rx187_jump:
    jump $I19
  rx187_done:
    rx187_cur."!cursor_fail"()
    .return (rx187_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "62_1338064451.944_caps"  :subid("437_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "62_1338064451.944_nfa"  :subid("438_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "finishpad"  :subid("63_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1597
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .lex "self", param_1597
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1598
    .lex "$/", $P1599
    .local string rx190_tgt
    .local int rx190_pos
    .local int rx190_off
    .local int rx190_eos
    .local int rx190_rep
    .local pmc rx190_cur
    .local pmc rx190_curclass
    .local pmc rx190_bstack
    .local pmc rx190_cstack
    (rx190_cur, rx190_tgt, rx190_pos, rx190_curclass, rx190_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx190_cur
    length rx190_eos, rx190_tgt
    eq $I19, 1, rx190_restart
    repr_get_attr_int $I11, self, rx190_curclass, "$!from"
    ne $I11, -1, rxscan191_done
    goto rxscan191_scan
  rxscan191_loop:
    inc rx190_pos
    gt rx190_pos, rx190_eos, rx190_fail
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!from", rx190_pos
  rxscan191_scan:
    nqp_rxmark rx190_bstack, rxscan191_loop, rx190_pos, 0
  rxscan191_done:
    rx190_cur."!cursor_pass"(rx190_pos, "finishpad", 'backtrack'=>1)
    .return (rx190_cur)
  rx190_restart:
    repr_get_attr_obj rx190_cstack, rx190_cur, rx190_curclass, "$!cstack"
  rx190_fail:
    unless rx190_bstack, rx190_done
    pop $I19, rx190_bstack
    if_null rx190_cstack, rx190_cstack_done
    unless rx190_cstack, rx190_cstack_done
    dec $I19
    set $P11, rx190_cstack[$I19]
  rx190_cstack_done:
    pop rx190_rep, rx190_bstack
    pop rx190_pos, rx190_bstack
    pop $I19, rx190_bstack
    lt rx190_pos, -1, rx190_done
    lt rx190_pos, 0, rx190_fail
    eq $I19, 0, rx190_fail
    if_null rx190_cstack, rx190_jump
    elements $I18, rx190_bstack
    le $I18, 0, rx190_cut
    dec $I18
    set $I18, rx190_bstack[$I18]
  rx190_cut:
    assign rx190_cstack, $I18
  rx190_jump:
    jump $I19
  rx190_done:
    rx190_cur."!cursor_fail"()
    .return (rx190_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1338064451.944_caps"  :subid("439_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1338064451.944_nfa"  :subid("440_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "you_are_here"  :subid("64_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1603
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 815
    .lex "self", param_1603
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1604
    .lex "$/", $P1605
    .local string rx193_tgt
    .local int rx193_pos
    .local int rx193_off
    .local int rx193_eos
    .local int rx193_rep
    .local pmc rx193_cur
    .local pmc rx193_curclass
    .local pmc rx193_bstack
    .local pmc rx193_cstack
    (rx193_cur, rx193_tgt, rx193_pos, rx193_curclass, rx193_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx193_cur
    length rx193_eos, rx193_tgt
    eq $I19, 1, rx193_restart
    repr_get_attr_int $I11, self, rx193_curclass, "$!from"
    ne $I11, -1, rxscan194_done
    goto rxscan194_scan
  rxscan194_loop:
    inc rx193_pos
    gt rx193_pos, rx193_eos, rx193_fail
    repr_bind_attr_int rx193_cur, rx193_curclass, "$!from", rx193_pos
  rxscan194_scan:
    nqp_rxmark rx193_bstack, rxscan194_loop, rx193_pos, 0
  rxscan194_done:
    rx193_cur."!cursor_pass"(rx193_pos, "you_are_here", 'backtrack'=>1)
    .return (rx193_cur)
  rx193_restart:
    repr_get_attr_obj rx193_cstack, rx193_cur, rx193_curclass, "$!cstack"
  rx193_fail:
    unless rx193_bstack, rx193_done
    pop $I19, rx193_bstack
    if_null rx193_cstack, rx193_cstack_done
    unless rx193_cstack, rx193_cstack_done
    dec $I19
    set $P11, rx193_cstack[$I19]
  rx193_cstack_done:
    pop rx193_rep, rx193_bstack
    pop rx193_pos, rx193_bstack
    pop $I19, rx193_bstack
    lt rx193_pos, -1, rx193_done
    lt rx193_pos, 0, rx193_fail
    eq $I19, 0, rx193_fail
    if_null rx193_cstack, rx193_jump
    elements $I18, rx193_bstack
    le $I18, 0, rx193_cut
    dec $I18
    set $I18, rx193_bstack[$I18]
  rx193_cut:
    assign rx193_cstack, $I18
  rx193_jump:
    jump $I19
  rx193_done:
    rx193_cur."!cursor_fail"()
    .return (rx193_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "64_1338064451.944_caps"  :subid("441_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 815
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "64_1338064451.944_nfa"  :subid("442_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 815
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator"  :subid("65_1338064451.944")
    .param pmc param_1609
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    .lex "self", param_1609
    $P103 = param_1609."!protoregex"("terminator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<;>"  :subid("66_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1611
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    .lex "self", param_1611
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1612
    .lex "$/", $P1613
    .local string rx196_tgt
    .local int rx196_pos
    .local int rx196_off
    .local int rx196_eos
    .local int rx196_rep
    .local pmc rx196_cur
    .local pmc rx196_curclass
    .local pmc rx196_bstack
    .local pmc rx196_cstack
    (rx196_cur, rx196_tgt, rx196_pos, rx196_curclass, rx196_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx196_cur
    length rx196_eos, rx196_tgt
    eq $I19, 1, rx196_restart
    repr_get_attr_int $I11, self, rx196_curclass, "$!from"
    ne $I11, -1, rxscan197_done
    goto rxscan197_scan
  rxscan197_loop:
    inc rx196_pos
    gt rx196_pos, rx196_eos, rx196_fail
    repr_bind_attr_int rx196_cur, rx196_curclass, "$!from", rx196_pos
  rxscan197_scan:
    nqp_rxmark rx196_bstack, rxscan197_loop, rx196_pos, 0
  rxscan197_done:
    ge rx196_pos, rx196_eos, rx196_fail
    substr $S11, rx196_tgt, rx196_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx196_fail
    rx196_cur."!cursor_pass"(rx196_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx196_cur)
  rx196_restart:
    repr_get_attr_obj rx196_cstack, rx196_cur, rx196_curclass, "$!cstack"
  rx196_fail:
    unless rx196_bstack, rx196_done
    pop $I19, rx196_bstack
    if_null rx196_cstack, rx196_cstack_done
    unless rx196_cstack, rx196_cstack_done
    dec $I19
    set $P11, rx196_cstack[$I19]
  rx196_cstack_done:
    pop rx196_rep, rx196_bstack
    pop rx196_pos, rx196_bstack
    pop $I19, rx196_bstack
    lt rx196_pos, -1, rx196_done
    lt rx196_pos, 0, rx196_fail
    eq $I19, 0, rx196_fail
    if_null rx196_cstack, rx196_jump
    elements $I18, rx196_bstack
    le $I18, 0, rx196_cut
    dec $I18
    set $I18, rx196_bstack[$I18]
  rx196_cut:
    assign rx196_cstack, $I18
  rx196_jump:
    jump $I19
  rx196_done:
    rx196_cur."!cursor_fail"()
    .return (rx196_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "66_1338064451.944_caps"  :subid("443_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "66_1338064451.944_nfa"  :subid("444_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, ";"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<}>"  :subid("67_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1617
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    .lex "self", param_1617
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1618
    .lex "$/", $P1619
    .local string rx198_tgt
    .local int rx198_pos
    .local int rx198_off
    .local int rx198_eos
    .local int rx198_rep
    .local pmc rx198_cur
    .local pmc rx198_curclass
    .local pmc rx198_bstack
    .local pmc rx198_cstack
    (rx198_cur, rx198_tgt, rx198_pos, rx198_curclass, rx198_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx198_cur
    length rx198_eos, rx198_tgt
    eq $I19, 1, rx198_restart
    repr_get_attr_int $I11, self, rx198_curclass, "$!from"
    ne $I11, -1, rxscan199_done
    goto rxscan199_scan
  rxscan199_loop:
    inc rx198_pos
    gt rx198_pos, rx198_eos, rx198_fail
    repr_bind_attr_int rx198_cur, rx198_curclass, "$!from", rx198_pos
  rxscan199_scan:
    nqp_rxmark rx198_bstack, rxscan199_loop, rx198_pos, 0
  rxscan199_done:
    ge rx198_pos, rx198_eos, rx198_fail
    substr $S11, rx198_tgt, rx198_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx198_fail
    rx198_cur."!cursor_pass"(rx198_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx198_cur)
  rx198_restart:
    repr_get_attr_obj rx198_cstack, rx198_cur, rx198_curclass, "$!cstack"
  rx198_fail:
    unless rx198_bstack, rx198_done
    pop $I19, rx198_bstack
    if_null rx198_cstack, rx198_cstack_done
    unless rx198_cstack, rx198_cstack_done
    dec $I19
    set $P11, rx198_cstack[$I19]
  rx198_cstack_done:
    pop rx198_rep, rx198_bstack
    pop rx198_pos, rx198_bstack
    pop $I19, rx198_bstack
    lt rx198_pos, -1, rx198_done
    lt rx198_pos, 0, rx198_fail
    eq $I19, 0, rx198_fail
    if_null rx198_cstack, rx198_jump
    elements $I18, rx198_bstack
    le $I18, 0, rx198_cut
    dec $I18
    set $I18, rx198_bstack[$I18]
  rx198_cut:
    assign rx198_cstack, $I18
  rx198_jump:
    jump $I19
  rx198_done:
    rx198_cur."!cursor_fail"()
    .return (rx198_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "67_1338064451.944_caps"  :subid("445_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "67_1338064451.944_nfa"  :subid("446_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "}"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control"  :subid("68_1338064451.944")
    .param pmc param_1623
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 824
    .lex "self", param_1623
    $P103 = param_1623."!protoregex"("statement_control")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<use>"  :subid("69_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1625
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 826
    .lex "self", param_1625
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1626
    .lex "$/", $P1627
    .local string rx200_tgt
    .local int rx200_pos
    .local int rx200_off
    .local int rx200_eos
    .local int rx200_rep
    .local pmc rx200_cur
    .local pmc rx200_curclass
    .local pmc rx200_bstack
    .local pmc rx200_cstack
    (rx200_cur, rx200_tgt, rx200_pos, rx200_curclass, rx200_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx200_cur
    length rx200_eos, rx200_tgt
    eq $I19, 1, rx200_restart
    repr_get_attr_int $I11, self, rx200_curclass, "$!from"
    ne $I11, -1, rxscan201_done
    goto rxscan201_scan
  rxscan201_loop:
    inc rx200_pos
    gt rx200_pos, rx200_eos, rx200_fail
    repr_bind_attr_int rx200_cur, rx200_curclass, "$!from", rx200_pos
  rxscan201_scan:
    nqp_rxmark rx200_bstack, rxscan201_loop, rx200_pos, 0
  rxscan201_done:
    nqp_rxmark rx200_bstack, rxcap202_fail, rx200_pos, 0
    add $I11, rx200_pos, 3
    gt $I11, rx200_eos, rx200_fail
    substr $S10, rx200_tgt, rx200_pos, 3
    ne $S10, ucs4:"use", rx200_fail
    add rx200_pos, 3
    nqp_rxpeek $I19, rx200_bstack, rxcap202_fail
    inc $I19
    set $I11, rx200_bstack[$I19]
    $P11 = rx200_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx200_pos)
    rx200_cstack = rx200_cur."!cursor_capture"($P11, "sym")
    goto rxcap202_done
  rxcap202_fail:
    goto rx200_fail
  rxcap202_done:
    ge rx200_pos, rx200_eos, rx200_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx200_tgt, rx200_pos
    unless $I11, rx200_fail
    add rx200_pos, 1
    repr_bind_attr_int rx200_cur, rx200_curclass, "$!pos", rx200_pos
    $P11 = rx200_cur."ws"()
    repr_get_attr_int $I11, $P11, rx200_curclass, "$!pos"
    lt $I11, 0, rx200_fail
    repr_get_attr_int rx200_pos, $P11, rx200_curclass, "$!pos"
    repr_bind_attr_int rx200_cur, rx200_curclass, "$!pos", rx200_pos
    $P11 = rx200_cur."name"()
    repr_get_attr_int $I11, $P11, rx200_curclass, "$!pos"
    lt $I11, 0, rx200_fail
    nqp_rxmark rx200_bstack, rxsubrule204_pass, -1, 0
  rxsubrule204_pass:
    rx200_cstack = rx200_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx200_pos, $P11, rx200_curclass, "$!pos"
    repr_bind_attr_int rx200_cur, rx200_curclass, "$!pos", rx200_pos
    $P11 = rx200_cur."ws"()
    repr_get_attr_int $I11, $P11, rx200_curclass, "$!pos"
    lt $I11, 0, rx200_fail
    repr_get_attr_int rx200_pos, $P11, rx200_curclass, "$!pos"
    rx200_cur."!cursor_pass"(rx200_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx200_cur)
  rx200_restart:
    repr_get_attr_obj rx200_cstack, rx200_cur, rx200_curclass, "$!cstack"
  rx200_fail:
    unless rx200_bstack, rx200_done
    pop $I19, rx200_bstack
    if_null rx200_cstack, rx200_cstack_done
    unless rx200_cstack, rx200_cstack_done
    dec $I19
    set $P11, rx200_cstack[$I19]
  rx200_cstack_done:
    pop rx200_rep, rx200_bstack
    pop rx200_pos, rx200_bstack
    pop $I19, rx200_bstack
    lt rx200_pos, -1, rx200_done
    lt rx200_pos, 0, rx200_fail
    eq $I19, 0, rx200_fail
    if_null rx200_cstack, rx200_jump
    elements $I18, rx200_bstack
    le $I18, 0, rx200_cut
    dec $I18
    set $I18, rx200_bstack[$I18]
  rx200_cut:
    assign rx200_cstack, $I18
  rx200_jump:
    jump $I19
  rx200_done:
    rx200_cur."!cursor_fail"()
    .return (rx200_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "69_1338064451.944_caps"  :subid("447_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 826
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["name"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "69_1338064451.944_nfa"  :subid("448_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 826
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 117
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 115
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 101
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 32
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<if>"  :subid("70_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1631
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    .lex "self", param_1631
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1632
    .lex "$/", $P1633
    .local string rx206_tgt
    .local int rx206_pos
    .local int rx206_off
    .local int rx206_eos
    .local int rx206_rep
    .local pmc rx206_cur
    .local pmc rx206_curclass
    .local pmc rx206_bstack
    .local pmc rx206_cstack
    (rx206_cur, rx206_tgt, rx206_pos, rx206_curclass, rx206_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx206_cur
    length rx206_eos, rx206_tgt
    eq $I19, 1, rx206_restart
    repr_get_attr_int $I11, self, rx206_curclass, "$!from"
    ne $I11, -1, rxscan207_done
    goto rxscan207_scan
  rxscan207_loop:
    inc rx206_pos
    gt rx206_pos, rx206_eos, rx206_fail
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!from", rx206_pos
  rxscan207_scan:
    nqp_rxmark rx206_bstack, rxscan207_loop, rx206_pos, 0
  rxscan207_done:
    nqp_rxmark rx206_bstack, rxcap208_fail, rx206_pos, 0
    add $I11, rx206_pos, 2
    gt $I11, rx206_eos, rx206_fail
    substr $S10, rx206_tgt, rx206_pos, 2
    ne $S10, ucs4:"if", rx206_fail
    add rx206_pos, 2
    nqp_rxpeek $I19, rx206_bstack, rxcap208_fail
    inc $I19
    set $I11, rx206_bstack[$I19]
    $P11 = rx206_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx206_pos)
    rx206_cstack = rx206_cur."!cursor_capture"($P11, "sym")
    goto rxcap208_done
  rxcap208_fail:
    goto rx206_fail
  rxcap208_done:
    ge rx206_pos, rx206_eos, rx206_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx206_tgt, rx206_pos
    unless $I11, rx206_fail
    add rx206_pos, 1
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    nqp_rxmark rx206_bstack, rxsubrule210_pass, -1, 0
  rxsubrule210_pass:
    rx206_cstack = rx206_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
  # rx rxquantr212 ** 0..-1
    nqp_rxmark rx206_bstack, rxquantr212_done, rx206_pos, 0
  rxquantr212_loop:
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    add $I11, rx206_pos, 5
    gt $I11, rx206_eos, rx206_fail
    substr $S10, rx206_tgt, rx206_pos, 5
    ne $S10, ucs4:"elsif", rx206_fail
    add rx206_pos, 5
    ge rx206_pos, rx206_eos, rx206_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx206_tgt, rx206_pos
    unless $I11, rx206_fail
    add rx206_pos, 1
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    nqp_rxmark rx206_bstack, rxsubrule215_pass, -1, 0
  rxsubrule215_pass:
    rx206_cstack = rx206_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    nqp_rxpeek $I19, rx206_bstack, rxquantr212_done
    inc $I19
    inc $I19
    set rx206_rep, rx206_bstack[$I19]
    nqp_rxcommit rx206_bstack, rxquantr212_done
    inc rx206_rep
    nqp_rxmark rx206_bstack, rxquantr212_done, rx206_pos, rx206_rep
    goto rxquantr212_loop
  rxquantr212_done:
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
  # rx rxquantr218 ** 0..1
    nqp_rxmark rx206_bstack, rxquantr218_done, rx206_pos, 0
  rxquantr218_loop:
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    add $I11, rx206_pos, 4
    gt $I11, rx206_eos, rx206_fail
    substr $S10, rx206_tgt, rx206_pos, 4
    ne $S10, ucs4:"else", rx206_fail
    add rx206_pos, 4
    ge rx206_pos, rx206_eos, rx206_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx206_tgt, rx206_pos
    unless $I11, rx206_fail
    add rx206_pos, 1
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    nqp_rxmark rx206_bstack, rxsubrule221_pass, -1, 0
  rxsubrule221_pass:
    rx206_cstack = rx206_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    nqp_rxpeek $I19, rx206_bstack, rxquantr218_done
    inc $I19
    inc $I19
    set rx206_rep, rx206_bstack[$I19]
    nqp_rxcommit rx206_bstack, rxquantr218_done
    inc rx206_rep
  rxquantr218_done:
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."ws"()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    rx206_cur."!cursor_pass"(rx206_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx206_cur)
  rx206_restart:
    repr_get_attr_obj rx206_cstack, rx206_cur, rx206_curclass, "$!cstack"
  rx206_fail:
    unless rx206_bstack, rx206_done
    pop $I19, rx206_bstack
    if_null rx206_cstack, rx206_cstack_done
    unless rx206_cstack, rx206_cstack_done
    dec $I19
    set $P11, rx206_cstack[$I19]
  rx206_cstack_done:
    pop rx206_rep, rx206_bstack
    pop rx206_pos, rx206_bstack
    pop $I19, rx206_bstack
    lt rx206_pos, -1, rx206_done
    lt rx206_pos, 0, rx206_fail
    eq $I19, 0, rx206_fail
    if_null rx206_cstack, rx206_jump
    elements $I18, rx206_bstack
    le $I18, 0, rx206_cut
    dec $I18
    set $I18, rx206_bstack[$I18]
  rx206_cut:
    assign rx206_cstack, $I18
  rx206_jump:
    jump $I19
  rx206_done:
    rx206_cur."!cursor_fail"()
    .return (rx206_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "70_1338064451.944_caps"  :subid("449_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["xblock"], 2
    set $P104["else"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "70_1338064451.944_nfa"  :subid("450_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 105
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 102
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 32
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<unless>"  :subid("72_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1637
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .const 'Sub' $P1643 = "71_1338064451.944" 
    capture_lex $P1643
    .lex "self", param_1637
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1638
    .lex "$/", $P1639
    .local string rx224_tgt
    .local int rx224_pos
    .local int rx224_off
    .local int rx224_eos
    .local int rx224_rep
    .local pmc rx224_cur
    .local pmc rx224_curclass
    .local pmc rx224_bstack
    .local pmc rx224_cstack
    (rx224_cur, rx224_tgt, rx224_pos, rx224_curclass, rx224_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx224_cur
    length rx224_eos, rx224_tgt
    eq $I19, 1, rx224_restart
    repr_get_attr_int $I11, self, rx224_curclass, "$!from"
    ne $I11, -1, rxscan225_done
    goto rxscan225_scan
  rxscan225_loop:
    inc rx224_pos
    gt rx224_pos, rx224_eos, rx224_fail
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!from", rx224_pos
  rxscan225_scan:
    nqp_rxmark rx224_bstack, rxscan225_loop, rx224_pos, 0
  rxscan225_done:
    nqp_rxmark rx224_bstack, rxcap226_fail, rx224_pos, 0
    add $I11, rx224_pos, 6
    gt $I11, rx224_eos, rx224_fail
    substr $S10, rx224_tgt, rx224_pos, 6
    ne $S10, ucs4:"unless", rx224_fail
    add rx224_pos, 6
    nqp_rxpeek $I19, rx224_bstack, rxcap226_fail
    inc $I19
    set $I11, rx224_bstack[$I19]
    $P11 = rx224_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx224_pos)
    rx224_cstack = rx224_cur."!cursor_capture"($P11, "sym")
    goto rxcap226_done
  rxcap226_fail:
    goto rx224_fail
  rxcap226_done:
    ge rx224_pos, rx224_eos, rx224_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx224_tgt, rx224_pos
    unless $I11, rx224_fail
    add rx224_pos, 1
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."ws"()
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    nqp_rxmark rx224_bstack, rxsubrule228_pass, -1, 0
  rxsubrule228_pass:
    rx224_cstack = rx224_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."ws"()
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
  alt230_0:
    nqp_rxmark rx224_bstack, alt230_1, rx224_pos, 0
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."ws"()
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
    .const 'Sub' $P1643 = "71_1338064451.944" 
    capture_lex $P1643
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."before"($P1643)
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    ge $I11, 0, rx224_fail
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."ws"()
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
    goto alt230_end
  alt230_1:
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."ws"()
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."ws"()
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
  alt230_end:
    repr_bind_attr_int rx224_cur, rx224_curclass, "$!pos", rx224_pos
    $P11 = rx224_cur."ws"()
    repr_get_attr_int $I11, $P11, rx224_curclass, "$!pos"
    lt $I11, 0, rx224_fail
    repr_get_attr_int rx224_pos, $P11, rx224_curclass, "$!pos"
    rx224_cur."!cursor_pass"(rx224_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx224_cur)
  rx224_restart:
    repr_get_attr_obj rx224_cstack, rx224_cur, rx224_curclass, "$!cstack"
  rx224_fail:
    unless rx224_bstack, rx224_done
    pop $I19, rx224_bstack
    if_null rx224_cstack, rx224_cstack_done
    unless rx224_cstack, rx224_cstack_done
    dec $I19
    set $P11, rx224_cstack[$I19]
  rx224_cstack_done:
    pop rx224_rep, rx224_bstack
    pop rx224_pos, rx224_bstack
    pop $I19, rx224_bstack
    lt rx224_pos, -1, rx224_done
    lt rx224_pos, 0, rx224_fail
    eq $I19, 0, rx224_fail
    if_null rx224_cstack, rx224_jump
    elements $I18, rx224_bstack
    le $I18, 0, rx224_cut
    dec $I18
    set $I18, rx224_bstack[$I18]
  rx224_cut:
    assign rx224_cstack, $I18
  rx224_jump:
    jump $I19
  rx224_done:
    rx224_cur."!cursor_fail"()
    .return (rx224_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "72_1338064451.944_caps"  :subid("451_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["xblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "72_1338064451.944_nfa"  :subid("452_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 117
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 115
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 115
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 32
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 0
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P104
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1642"  :anon :subid("71_1338064451.944") :method :outer("72_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .lex unicode:"$\x{a2}", $P1646
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    (rx232_cur, rx232_tgt, rx232_pos, rx232_curclass, rx232_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done
    goto rxscan233_scan
  rxscan233_loop:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan:
    nqp_rxmark rx232_bstack, rxscan233_loop, rx232_pos, 0
  rxscan233_done:
    add $I11, rx232_pos, 4
    gt $I11, rx232_eos, rx232_fail
    substr $S10, rx232_tgt, rx232_pos, 4
    ne $S10, ucs4:"else", rx232_fail
    add rx232_pos, 4
    rx232_cur."!cursor_pass"(rx232_pos, 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail:
    unless rx232_bstack, rx232_done
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done
    unless rx232_cstack, rx232_cstack_done
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done
    lt rx232_pos, 0, rx232_fail
    eq $I19, 0, rx232_fail
    if_null rx232_cstack, rx232_jump
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut:
    assign rx232_cstack, $I18
  rx232_jump:
    jump $I19
  rx232_done:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "71_1338064451.944_caps"  :subid("453_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    new $P107, "Hash"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "71_1338064451.944_nfa"  :subid("454_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 108
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 115
    push $P110, 4
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 101
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<while>"  :subid("73_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1648
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 843
    .lex "self", param_1648
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1649
    .lex "$/", $P1650
    .local string rx239_tgt
    .local int rx239_pos
    .local int rx239_off
    .local int rx239_eos
    .local int rx239_rep
    .local pmc rx239_cur
    .local pmc rx239_curclass
    .local pmc rx239_bstack
    .local pmc rx239_cstack
    (rx239_cur, rx239_tgt, rx239_pos, rx239_curclass, rx239_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx239_cur
    length rx239_eos, rx239_tgt
    eq $I19, 1, rx239_restart
    repr_get_attr_int $I11, self, rx239_curclass, "$!from"
    ne $I11, -1, rxscan240_done
    goto rxscan240_scan
  rxscan240_loop:
    inc rx239_pos
    gt rx239_pos, rx239_eos, rx239_fail
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!from", rx239_pos
  rxscan240_scan:
    nqp_rxmark rx239_bstack, rxscan240_loop, rx239_pos, 0
  rxscan240_done:
    nqp_rxmark rx239_bstack, rxcap241_fail, rx239_pos, 0
  alt242_0:
    nqp_rxmark rx239_bstack, alt242_1, rx239_pos, 0
    add $I11, rx239_pos, 5
    gt $I11, rx239_eos, rx239_fail
    substr $S10, rx239_tgt, rx239_pos, 5
    ne $S10, ucs4:"while", rx239_fail
    add rx239_pos, 5
    goto alt242_end
  alt242_1:
    add $I11, rx239_pos, 5
    gt $I11, rx239_eos, rx239_fail
    substr $S10, rx239_tgt, rx239_pos, 5
    ne $S10, ucs4:"until", rx239_fail
    add rx239_pos, 5
  alt242_end:
    nqp_rxpeek $I19, rx239_bstack, rxcap241_fail
    inc $I19
    set $I11, rx239_bstack[$I19]
    $P11 = rx239_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx239_pos)
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "sym")
    goto rxcap241_done
  rxcap241_fail:
    goto rx239_fail
  rxcap241_done:
    ge rx239_pos, rx239_eos, rx239_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx239_tgt, rx239_pos
    unless $I11, rx239_fail
    add rx239_pos, 1
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."ws"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail
    nqp_rxmark rx239_bstack, rxsubrule244_pass, -1, 0
  rxsubrule244_pass:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."ws"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    rx239_cur."!cursor_pass"(rx239_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx239_cur)
  rx239_restart:
    repr_get_attr_obj rx239_cstack, rx239_cur, rx239_curclass, "$!cstack"
  rx239_fail:
    unless rx239_bstack, rx239_done
    pop $I19, rx239_bstack
    if_null rx239_cstack, rx239_cstack_done
    unless rx239_cstack, rx239_cstack_done
    dec $I19
    set $P11, rx239_cstack[$I19]
  rx239_cstack_done:
    pop rx239_rep, rx239_bstack
    pop rx239_pos, rx239_bstack
    pop $I19, rx239_bstack
    lt rx239_pos, -1, rx239_done
    lt rx239_pos, 0, rx239_fail
    eq $I19, 0, rx239_fail
    if_null rx239_cstack, rx239_jump
    elements $I18, rx239_bstack
    le $I18, 0, rx239_cut
    dec $I18
    set $I18, rx239_bstack[$I18]
  rx239_cut:
    assign rx239_cstack, $I18
  rx239_jump:
    jump $I19
  rx239_done:
    rx239_cur."!cursor_fail"()
    .return (rx239_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "73_1338064451.944_caps"  :subid("455_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 843
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["xblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "73_1338064451.944_nfa"  :subid("456_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 843
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 119
    push $P105, 2
    push $P105, 2
    push $P105, 117
    push $P105, 7
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 104
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 105
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 108
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 101
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 32
    push $P110, 11
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 110
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 116
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 105
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 108
    push $P114, 6
    new $P115, "ResizablePMCArray"
    push $P115, 0
    push $P115, 0
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, $P104
    push $P116, $P105
    push $P116, $P106
    push $P116, $P107
    push $P116, $P108
    push $P116, $P109
    push $P116, $P110
    push $P116, $P111
    push $P116, $P112
    push $P116, $P113
    push $P116, $P114
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<repeat>"  :subid("74_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1654
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    .lex "self", param_1654
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1655
    .lex "$/", $P1656
    .local string rx246_tgt
    .local int rx246_pos
    .local int rx246_off
    .local int rx246_eos
    .local int rx246_rep
    .local pmc rx246_cur
    .local pmc rx246_curclass
    .local pmc rx246_bstack
    .local pmc rx246_cstack
    (rx246_cur, rx246_tgt, rx246_pos, rx246_curclass, rx246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx246_cur
    length rx246_eos, rx246_tgt
    eq $I19, 1, rx246_restart
    repr_get_attr_int $I11, self, rx246_curclass, "$!from"
    ne $I11, -1, rxscan247_done
    goto rxscan247_scan
  rxscan247_loop:
    inc rx246_pos
    gt rx246_pos, rx246_eos, rx246_fail
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!from", rx246_pos
  rxscan247_scan:
    nqp_rxmark rx246_bstack, rxscan247_loop, rx246_pos, 0
  rxscan247_done:
    nqp_rxmark rx246_bstack, rxcap248_fail, rx246_pos, 0
    add $I11, rx246_pos, 6
    gt $I11, rx246_eos, rx246_fail
    substr $S10, rx246_tgt, rx246_pos, 6
    ne $S10, ucs4:"repeat", rx246_fail
    add rx246_pos, 6
    nqp_rxpeek $I19, rx246_bstack, rxcap248_fail
    inc $I19
    set $I11, rx246_bstack[$I19]
    $P11 = rx246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx246_pos)
    rx246_cstack = rx246_cur."!cursor_capture"($P11, "sym")
    goto rxcap248_done
  rxcap248_fail:
    goto rx246_fail
  rxcap248_done:
    ge rx246_pos, rx246_eos, rx246_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx246_tgt, rx246_pos
    unless $I11, rx246_fail
    add rx246_pos, 1
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
  alt250_0:
    nqp_rxmark rx246_bstack, alt250_1, rx246_pos, 0
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    nqp_rxmark rx246_bstack, rxcap252_fail, rx246_pos, 0
  alt253_0:
    nqp_rxmark rx246_bstack, alt253_1, rx246_pos, 0
    add $I11, rx246_pos, 5
    gt $I11, rx246_eos, rx246_fail
    substr $S10, rx246_tgt, rx246_pos, 5
    ne $S10, ucs4:"while", rx246_fail
    add rx246_pos, 5
    goto alt253_end
  alt253_1:
    add $I11, rx246_pos, 5
    gt $I11, rx246_eos, rx246_fail
    substr $S10, rx246_tgt, rx246_pos, 5
    ne $S10, ucs4:"until", rx246_fail
    add rx246_pos, 5
  alt253_end:
    nqp_rxpeek $I19, rx246_bstack, rxcap252_fail
    inc $I19
    set $I11, rx246_bstack[$I19]
    $P11 = rx246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx246_pos)
    rx246_cstack = rx246_cur."!cursor_capture"($P11, "wu")
    goto rxcap252_done
  rxcap252_fail:
    goto rx246_fail
  rxcap252_done:
    ge rx246_pos, rx246_eos, rx246_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx246_tgt, rx246_pos
    unless $I11, rx246_fail
    add rx246_pos, 1
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    nqp_rxmark rx246_bstack, rxsubrule255_pass, -1, 0
  rxsubrule255_pass:
    rx246_cstack = rx246_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    goto alt250_end
  alt250_1:
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    nqp_rxmark rx246_bstack, rxsubrule258_pass, -1, 0
  rxsubrule258_pass:
    rx246_cstack = rx246_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    nqp_rxmark rx246_bstack, rxcap260_fail, rx246_pos, 0
  alt261_0:
    nqp_rxmark rx246_bstack, alt261_1, rx246_pos, 0
    add $I11, rx246_pos, 5
    gt $I11, rx246_eos, rx246_fail
    substr $S10, rx246_tgt, rx246_pos, 5
    ne $S10, ucs4:"while", rx246_fail
    add rx246_pos, 5
    goto alt261_end
  alt261_1:
    add $I11, rx246_pos, 5
    gt $I11, rx246_eos, rx246_fail
    substr $S10, rx246_tgt, rx246_pos, 5
    ne $S10, ucs4:"until", rx246_fail
    add rx246_pos, 5
  alt261_end:
    nqp_rxpeek $I19, rx246_bstack, rxcap260_fail
    inc $I19
    set $I11, rx246_bstack[$I19]
    $P11 = rx246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx246_pos)
    rx246_cstack = rx246_cur."!cursor_capture"($P11, "wu")
    goto rxcap260_done
  rxcap260_fail:
    goto rx246_fail
  rxcap260_done:
    ge rx246_pos, rx246_eos, rx246_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx246_tgt, rx246_pos
    unless $I11, rx246_fail
    add rx246_pos, 1
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    nqp_rxmark rx246_bstack, rxsubrule263_pass, -1, 0
  rxsubrule263_pass:
    rx246_cstack = rx246_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
  alt250_end:
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!pos", rx246_pos
    $P11 = rx246_cur."ws"()
    repr_get_attr_int $I11, $P11, rx246_curclass, "$!pos"
    lt $I11, 0, rx246_fail
    repr_get_attr_int rx246_pos, $P11, rx246_curclass, "$!pos"
    rx246_cur."!cursor_pass"(rx246_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx246_cur)
  rx246_restart:
    repr_get_attr_obj rx246_cstack, rx246_cur, rx246_curclass, "$!cstack"
  rx246_fail:
    unless rx246_bstack, rx246_done
    pop $I19, rx246_bstack
    if_null rx246_cstack, rx246_cstack_done
    unless rx246_cstack, rx246_cstack_done
    dec $I19
    set $P11, rx246_cstack[$I19]
  rx246_cstack_done:
    pop rx246_rep, rx246_bstack
    pop rx246_pos, rx246_bstack
    pop $I19, rx246_bstack
    lt rx246_pos, -1, rx246_done
    lt rx246_pos, 0, rx246_fail
    eq $I19, 0, rx246_fail
    if_null rx246_cstack, rx246_jump
    elements $I18, rx246_bstack
    le $I18, 0, rx246_cut
    dec $I18
    set $I18, rx246_bstack[$I18]
  rx246_cut:
    assign rx246_cstack, $I18
  rx246_jump:
    jump $I19
  rx246_done:
    rx246_cur."!cursor_fail"()
    .return (rx246_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "74_1338064451.944_caps"  :subid("457_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["wu"], 0
    set $P104["xblock"], 0
    set $P104["pblock"], 0
    set $P104["EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "74_1338064451.944_nfa"  :subid("458_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 114
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 112
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 97
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 32
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 0
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P104
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<for>"  :subid("75_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1660
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 856
    .lex "self", param_1660
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1661
    .lex "$/", $P1662
    .local string rx266_tgt
    .local int rx266_pos
    .local int rx266_off
    .local int rx266_eos
    .local int rx266_rep
    .local pmc rx266_cur
    .local pmc rx266_curclass
    .local pmc rx266_bstack
    .local pmc rx266_cstack
    (rx266_cur, rx266_tgt, rx266_pos, rx266_curclass, rx266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx266_cur
    length rx266_eos, rx266_tgt
    eq $I19, 1, rx266_restart
    repr_get_attr_int $I11, self, rx266_curclass, "$!from"
    ne $I11, -1, rxscan267_done
    goto rxscan267_scan
  rxscan267_loop:
    inc rx266_pos
    gt rx266_pos, rx266_eos, rx266_fail
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!from", rx266_pos
  rxscan267_scan:
    nqp_rxmark rx266_bstack, rxscan267_loop, rx266_pos, 0
  rxscan267_done:
    nqp_rxmark rx266_bstack, rxcap268_fail, rx266_pos, 0
    add $I11, rx266_pos, 3
    gt $I11, rx266_eos, rx266_fail
    substr $S10, rx266_tgt, rx266_pos, 3
    ne $S10, ucs4:"for", rx266_fail
    add rx266_pos, 3
    nqp_rxpeek $I19, rx266_bstack, rxcap268_fail
    inc $I19
    set $I11, rx266_bstack[$I19]
    $P11 = rx266_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx266_pos)
    rx266_cstack = rx266_cur."!cursor_capture"($P11, "sym")
    goto rxcap268_done
  rxcap268_fail:
    goto rx266_fail
  rxcap268_done:
    ge rx266_pos, rx266_eos, rx266_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx266_tgt, rx266_pos
    unless $I11, rx266_fail
    add rx266_pos, 1
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!pos", rx266_pos
    $P11 = rx266_cur."ws"()
    repr_get_attr_int $I11, $P11, rx266_curclass, "$!pos"
    lt $I11, 0, rx266_fail
    repr_get_attr_int rx266_pos, $P11, rx266_curclass, "$!pos"
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!pos", rx266_pos
    $P11 = rx266_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx266_curclass, "$!pos"
    lt $I11, 0, rx266_fail
    nqp_rxmark rx266_bstack, rxsubrule270_pass, -1, 0
  rxsubrule270_pass:
    rx266_cstack = rx266_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx266_pos, $P11, rx266_curclass, "$!pos"
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!pos", rx266_pos
    $P11 = rx266_cur."ws"()
    repr_get_attr_int $I11, $P11, rx266_curclass, "$!pos"
    lt $I11, 0, rx266_fail
    repr_get_attr_int rx266_pos, $P11, rx266_curclass, "$!pos"
    rx266_cur."!cursor_pass"(rx266_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx266_cur)
  rx266_restart:
    repr_get_attr_obj rx266_cstack, rx266_cur, rx266_curclass, "$!cstack"
  rx266_fail:
    unless rx266_bstack, rx266_done
    pop $I19, rx266_bstack
    if_null rx266_cstack, rx266_cstack_done
    unless rx266_cstack, rx266_cstack_done
    dec $I19
    set $P11, rx266_cstack[$I19]
  rx266_cstack_done:
    pop rx266_rep, rx266_bstack
    pop rx266_pos, rx266_bstack
    pop $I19, rx266_bstack
    lt rx266_pos, -1, rx266_done
    lt rx266_pos, 0, rx266_fail
    eq $I19, 0, rx266_fail
    if_null rx266_cstack, rx266_jump
    elements $I18, rx266_bstack
    le $I18, 0, rx266_cut
    dec $I18
    set $I18, rx266_bstack[$I18]
  rx266_cut:
    assign rx266_cstack, $I18
  rx266_jump:
    jump $I19
  rx266_done:
    rx266_cur."!cursor_fail"()
    .return (rx266_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "75_1338064451.944_caps"  :subid("459_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 856
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["xblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "75_1338064451.944_nfa"  :subid("460_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 856
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 102
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 111
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 32
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CATCH>"  :subid("76_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1666
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .lex "self", param_1666
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1667
    .lex "$/", $P1668
    .local string rx272_tgt
    .local int rx272_pos
    .local int rx272_off
    .local int rx272_eos
    .local int rx272_rep
    .local pmc rx272_cur
    .local pmc rx272_curclass
    .local pmc rx272_bstack
    .local pmc rx272_cstack
    (rx272_cur, rx272_tgt, rx272_pos, rx272_curclass, rx272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx272_cur
    length rx272_eos, rx272_tgt
    eq $I19, 1, rx272_restart
    repr_get_attr_int $I11, self, rx272_curclass, "$!from"
    ne $I11, -1, rxscan273_done
    goto rxscan273_scan
  rxscan273_loop:
    inc rx272_pos
    gt rx272_pos, rx272_eos, rx272_fail
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!from", rx272_pos
  rxscan273_scan:
    nqp_rxmark rx272_bstack, rxscan273_loop, rx272_pos, 0
  rxscan273_done:
    nqp_rxmark rx272_bstack, rxcap274_fail, rx272_pos, 0
    add $I11, rx272_pos, 5
    gt $I11, rx272_eos, rx272_fail
    substr $S10, rx272_tgt, rx272_pos, 5
    ne $S10, ucs4:"CATCH", rx272_fail
    add rx272_pos, 5
    nqp_rxpeek $I19, rx272_bstack, rxcap274_fail
    inc $I19
    set $I11, rx272_bstack[$I19]
    $P11 = rx272_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx272_pos)
    rx272_cstack = rx272_cur."!cursor_capture"($P11, "sym")
    goto rxcap274_done
  rxcap274_fail:
    goto rx272_fail
  rxcap274_done:
    ge rx272_pos, rx272_eos, rx272_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx272_tgt, rx272_pos
    unless $I11, rx272_fail
    add rx272_pos, 1
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!pos", rx272_pos
    $P11 = rx272_cur."ws"()
    repr_get_attr_int $I11, $P11, rx272_curclass, "$!pos"
    lt $I11, 0, rx272_fail
    repr_get_attr_int rx272_pos, $P11, rx272_curclass, "$!pos"
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!pos", rx272_pos
    $P11 = rx272_cur."block"()
    repr_get_attr_int $I11, $P11, rx272_curclass, "$!pos"
    lt $I11, 0, rx272_fail
    nqp_rxmark rx272_bstack, rxsubrule276_pass, -1, 0
  rxsubrule276_pass:
    rx272_cstack = rx272_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx272_pos, $P11, rx272_curclass, "$!pos"
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!pos", rx272_pos
    $P11 = rx272_cur."ws"()
    repr_get_attr_int $I11, $P11, rx272_curclass, "$!pos"
    lt $I11, 0, rx272_fail
    repr_get_attr_int rx272_pos, $P11, rx272_curclass, "$!pos"
    rx272_cur."!cursor_pass"(rx272_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx272_cur)
  rx272_restart:
    repr_get_attr_obj rx272_cstack, rx272_cur, rx272_curclass, "$!cstack"
  rx272_fail:
    unless rx272_bstack, rx272_done
    pop $I19, rx272_bstack
    if_null rx272_cstack, rx272_cstack_done
    unless rx272_cstack, rx272_cstack_done
    dec $I19
    set $P11, rx272_cstack[$I19]
  rx272_cstack_done:
    pop rx272_rep, rx272_bstack
    pop rx272_pos, rx272_bstack
    pop $I19, rx272_bstack
    lt rx272_pos, -1, rx272_done
    lt rx272_pos, 0, rx272_fail
    eq $I19, 0, rx272_fail
    if_null rx272_cstack, rx272_jump
    elements $I18, rx272_bstack
    le $I18, 0, rx272_cut
    dec $I18
    set $I18, rx272_bstack[$I18]
  rx272_cut:
    assign rx272_cstack, $I18
  rx272_jump:
    jump $I19
  rx272_done:
    rx272_cur."!cursor_fail"()
    .return (rx272_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "76_1338064451.944_caps"  :subid("461_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["block"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "76_1338064451.944_nfa"  :subid("462_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 67
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 65
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 84
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 67
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 72
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 32
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 0
    push $P111, 0
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CONTROL>"  :subid("77_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1672
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    .lex "self", param_1672
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1673
    .lex "$/", $P1674
    .local string rx278_tgt
    .local int rx278_pos
    .local int rx278_off
    .local int rx278_eos
    .local int rx278_rep
    .local pmc rx278_cur
    .local pmc rx278_curclass
    .local pmc rx278_bstack
    .local pmc rx278_cstack
    (rx278_cur, rx278_tgt, rx278_pos, rx278_curclass, rx278_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx278_cur
    length rx278_eos, rx278_tgt
    eq $I19, 1, rx278_restart
    repr_get_attr_int $I11, self, rx278_curclass, "$!from"
    ne $I11, -1, rxscan279_done
    goto rxscan279_scan
  rxscan279_loop:
    inc rx278_pos
    gt rx278_pos, rx278_eos, rx278_fail
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!from", rx278_pos
  rxscan279_scan:
    nqp_rxmark rx278_bstack, rxscan279_loop, rx278_pos, 0
  rxscan279_done:
    nqp_rxmark rx278_bstack, rxcap280_fail, rx278_pos, 0
    add $I11, rx278_pos, 7
    gt $I11, rx278_eos, rx278_fail
    substr $S10, rx278_tgt, rx278_pos, 7
    ne $S10, ucs4:"CONTROL", rx278_fail
    add rx278_pos, 7
    nqp_rxpeek $I19, rx278_bstack, rxcap280_fail
    inc $I19
    set $I11, rx278_bstack[$I19]
    $P11 = rx278_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx278_pos)
    rx278_cstack = rx278_cur."!cursor_capture"($P11, "sym")
    goto rxcap280_done
  rxcap280_fail:
    goto rx278_fail
  rxcap280_done:
    ge rx278_pos, rx278_eos, rx278_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx278_tgt, rx278_pos
    unless $I11, rx278_fail
    add rx278_pos, 1
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!pos", rx278_pos
    $P11 = rx278_cur."ws"()
    repr_get_attr_int $I11, $P11, rx278_curclass, "$!pos"
    lt $I11, 0, rx278_fail
    repr_get_attr_int rx278_pos, $P11, rx278_curclass, "$!pos"
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!pos", rx278_pos
    $P11 = rx278_cur."block"()
    repr_get_attr_int $I11, $P11, rx278_curclass, "$!pos"
    lt $I11, 0, rx278_fail
    nqp_rxmark rx278_bstack, rxsubrule282_pass, -1, 0
  rxsubrule282_pass:
    rx278_cstack = rx278_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx278_pos, $P11, rx278_curclass, "$!pos"
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!pos", rx278_pos
    $P11 = rx278_cur."ws"()
    repr_get_attr_int $I11, $P11, rx278_curclass, "$!pos"
    lt $I11, 0, rx278_fail
    repr_get_attr_int rx278_pos, $P11, rx278_curclass, "$!pos"
    rx278_cur."!cursor_pass"(rx278_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx278_cur)
  rx278_restart:
    repr_get_attr_obj rx278_cstack, rx278_cur, rx278_curclass, "$!cstack"
  rx278_fail:
    unless rx278_bstack, rx278_done
    pop $I19, rx278_bstack
    if_null rx278_cstack, rx278_cstack_done
    unless rx278_cstack, rx278_cstack_done
    dec $I19
    set $P11, rx278_cstack[$I19]
  rx278_cstack_done:
    pop rx278_rep, rx278_bstack
    pop rx278_pos, rx278_bstack
    pop $I19, rx278_bstack
    lt rx278_pos, -1, rx278_done
    lt rx278_pos, 0, rx278_fail
    eq $I19, 0, rx278_fail
    if_null rx278_cstack, rx278_jump
    elements $I18, rx278_bstack
    le $I18, 0, rx278_cut
    dec $I18
    set $I18, rx278_bstack[$I18]
  rx278_cut:
    assign rx278_cstack, $I18
  rx278_jump:
    jump $I19
  rx278_done:
    rx278_cur."!cursor_fail"()
    .return (rx278_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "77_1338064451.944_caps"  :subid("463_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["block"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "77_1338064451.944_nfa"  :subid("464_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 67
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 79
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 78
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 84
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 82
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 79
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 76
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 4
    push $P112, 32
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix"  :subid("78_1338064451.944")
    .param pmc param_1678
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .lex "self", param_1678
    $P103 = param_1678."!protoregex"("statement_prefix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<BEGIN>"  :subid("79_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1680
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .lex "self", param_1680
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1681
    .lex "$/", $P1682
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done
    goto rxscan285_scan
  rxscan285_loop:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan:
    nqp_rxmark rx284_bstack, rxscan285_loop, rx284_pos, 0
  rxscan285_done:
    nqp_rxmark rx284_bstack, rxcap286_fail, rx284_pos, 0
    add $I11, rx284_pos, 5
    gt $I11, rx284_eos, rx284_fail
    substr $S10, rx284_tgt, rx284_pos, 5
    ne $S10, ucs4:"BEGIN", rx284_fail
    add rx284_pos, 5
    nqp_rxpeek $I19, rx284_bstack, rxcap286_fail
    inc $I19
    set $I11, rx284_bstack[$I19]
    $P11 = rx284_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx284_pos)
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "sym")
    goto rxcap286_done
  rxcap286_fail:
    goto rx284_fail
  rxcap286_done:
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail
    nqp_rxmark rx284_bstack, rxsubrule287_pass, -1, 0
  rxsubrule287_pass:
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    rx284_cur."!cursor_pass"(rx284_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail:
    unless rx284_bstack, rx284_done
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done
    unless rx284_cstack, rx284_cstack_done
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done
    lt rx284_pos, 0, rx284_fail
    eq $I19, 0, rx284_fail
    if_null rx284_cstack, rx284_jump
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut:
    assign rx284_cstack, $I18
  rx284_jump:
    jump $I19
  rx284_done:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "79_1338064451.944_caps"  :subid("465_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["blorst"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "79_1338064451.944_nfa"  :subid("466_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 66
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 69
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 71
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 73
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 78
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "blorst"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<INIT>"  :subid("80_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1686
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    .lex "self", param_1686
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1687
    .lex "$/", $P1688
    .local string rx288_tgt
    .local int rx288_pos
    .local int rx288_off
    .local int rx288_eos
    .local int rx288_rep
    .local pmc rx288_cur
    .local pmc rx288_curclass
    .local pmc rx288_bstack
    .local pmc rx288_cstack
    (rx288_cur, rx288_tgt, rx288_pos, rx288_curclass, rx288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx288_cur
    length rx288_eos, rx288_tgt
    eq $I19, 1, rx288_restart
    repr_get_attr_int $I11, self, rx288_curclass, "$!from"
    ne $I11, -1, rxscan289_done
    goto rxscan289_scan
  rxscan289_loop:
    inc rx288_pos
    gt rx288_pos, rx288_eos, rx288_fail
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!from", rx288_pos
  rxscan289_scan:
    nqp_rxmark rx288_bstack, rxscan289_loop, rx288_pos, 0
  rxscan289_done:
    nqp_rxmark rx288_bstack, rxcap290_fail, rx288_pos, 0
    add $I11, rx288_pos, 4
    gt $I11, rx288_eos, rx288_fail
    substr $S10, rx288_tgt, rx288_pos, 4
    ne $S10, ucs4:"INIT", rx288_fail
    add rx288_pos, 4
    nqp_rxpeek $I19, rx288_bstack, rxcap290_fail
    inc $I19
    set $I11, rx288_bstack[$I19]
    $P11 = rx288_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx288_pos)
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "sym")
    goto rxcap290_done
  rxcap290_fail:
    goto rx288_fail
  rxcap290_done:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail
    nqp_rxmark rx288_bstack, rxsubrule291_pass, -1, 0
  rxsubrule291_pass:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    rx288_cur."!cursor_pass"(rx288_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx288_cur)
  rx288_restart:
    repr_get_attr_obj rx288_cstack, rx288_cur, rx288_curclass, "$!cstack"
  rx288_fail:
    unless rx288_bstack, rx288_done
    pop $I19, rx288_bstack
    if_null rx288_cstack, rx288_cstack_done
    unless rx288_cstack, rx288_cstack_done
    dec $I19
    set $P11, rx288_cstack[$I19]
  rx288_cstack_done:
    pop rx288_rep, rx288_bstack
    pop rx288_pos, rx288_bstack
    pop $I19, rx288_bstack
    lt rx288_pos, -1, rx288_done
    lt rx288_pos, 0, rx288_fail
    eq $I19, 0, rx288_fail
    if_null rx288_cstack, rx288_jump
    elements $I18, rx288_bstack
    le $I18, 0, rx288_cut
    dec $I18
    set $I18, rx288_bstack[$I18]
  rx288_cut:
    assign rx288_cstack, $I18
  rx288_jump:
    jump $I19
  rx288_done:
    rx288_cur."!cursor_fail"()
    .return (rx288_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "80_1338064451.944_caps"  :subid("467_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["blorst"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "80_1338064451.944_nfa"  :subid("468_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 73
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 78
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 73
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 84
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "blorst"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<try>"  :subid("81_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1692
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    .lex "self", param_1692
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1693
    .lex "$/", $P1694
    .local string rx292_tgt
    .local int rx292_pos
    .local int rx292_off
    .local int rx292_eos
    .local int rx292_rep
    .local pmc rx292_cur
    .local pmc rx292_curclass
    .local pmc rx292_bstack
    .local pmc rx292_cstack
    (rx292_cur, rx292_tgt, rx292_pos, rx292_curclass, rx292_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx292_cur
    length rx292_eos, rx292_tgt
    eq $I19, 1, rx292_restart
    repr_get_attr_int $I11, self, rx292_curclass, "$!from"
    ne $I11, -1, rxscan293_done
    goto rxscan293_scan
  rxscan293_loop:
    inc rx292_pos
    gt rx292_pos, rx292_eos, rx292_fail
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!from", rx292_pos
  rxscan293_scan:
    nqp_rxmark rx292_bstack, rxscan293_loop, rx292_pos, 0
  rxscan293_done:
    nqp_rxmark rx292_bstack, rxcap294_fail, rx292_pos, 0
    add $I11, rx292_pos, 3
    gt $I11, rx292_eos, rx292_fail
    substr $S10, rx292_tgt, rx292_pos, 3
    ne $S10, ucs4:"try", rx292_fail
    add rx292_pos, 3
    nqp_rxpeek $I19, rx292_bstack, rxcap294_fail
    inc $I19
    set $I11, rx292_bstack[$I19]
    $P11 = rx292_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx292_pos)
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "sym")
    goto rxcap294_done
  rxcap294_fail:
    goto rx292_fail
  rxcap294_done:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail
    nqp_rxmark rx292_bstack, rxsubrule295_pass, -1, 0
  rxsubrule295_pass:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    rx292_cur."!cursor_pass"(rx292_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx292_cur)
  rx292_restart:
    repr_get_attr_obj rx292_cstack, rx292_cur, rx292_curclass, "$!cstack"
  rx292_fail:
    unless rx292_bstack, rx292_done
    pop $I19, rx292_bstack
    if_null rx292_cstack, rx292_cstack_done
    unless rx292_cstack, rx292_cstack_done
    dec $I19
    set $P11, rx292_cstack[$I19]
  rx292_cstack_done:
    pop rx292_rep, rx292_bstack
    pop rx292_pos, rx292_bstack
    pop $I19, rx292_bstack
    lt rx292_pos, -1, rx292_done
    lt rx292_pos, 0, rx292_fail
    eq $I19, 0, rx292_fail
    if_null rx292_cstack, rx292_jump
    elements $I18, rx292_bstack
    le $I18, 0, rx292_cut
    dec $I18
    set $I18, rx292_bstack[$I18]
  rx292_cut:
    assign rx292_cstack, $I18
  rx292_jump:
    jump $I19
  rx292_done:
    rx292_cur."!cursor_fail"()
    .return (rx292_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "81_1338064451.944_caps"  :subid("469_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["blorst"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "81_1338064451.944_nfa"  :subid("470_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 116
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 121
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "blorst"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blorst"  :subid("82_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1698
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .lex "self", param_1698
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1699
    .lex "$/", $P1700
    .local string rx296_tgt
    .local int rx296_pos
    .local int rx296_off
    .local int rx296_eos
    .local int rx296_rep
    .local pmc rx296_cur
    .local pmc rx296_curclass
    .local pmc rx296_bstack
    .local pmc rx296_cstack
    (rx296_cur, rx296_tgt, rx296_pos, rx296_curclass, rx296_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx296_cur
    length rx296_eos, rx296_tgt
    eq $I19, 1, rx296_restart
    repr_get_attr_int $I11, self, rx296_curclass, "$!from"
    ne $I11, -1, rxscan297_done
    goto rxscan297_scan
  rxscan297_loop:
    inc rx296_pos
    gt rx296_pos, rx296_eos, rx296_fail
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!from", rx296_pos
  rxscan297_scan:
    nqp_rxmark rx296_bstack, rxscan297_loop, rx296_pos, 0
  rxscan297_done:
    ge rx296_pos, rx296_eos, rx296_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx296_tgt, rx296_pos
    unless $I11, rx296_fail
    add rx296_pos, 1
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!pos", rx296_pos
    $P11 = rx296_cur."ws"()
    repr_get_attr_int $I11, $P11, rx296_curclass, "$!pos"
    lt $I11, 0, rx296_fail
    repr_get_attr_int rx296_pos, $P11, rx296_curclass, "$!pos"
  alt299_0:
    nqp_rxmark rx296_bstack, alt299_1, rx296_pos, 0
    ge rx296_pos, rx296_eos, rx296_fail
    substr $S11, rx296_tgt, rx296_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx296_fail
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!pos", rx296_pos
    $P11 = rx296_cur."block"()
    repr_get_attr_int $I11, $P11, rx296_curclass, "$!pos"
    lt $I11, 0, rx296_fail
    nqp_rxmark rx296_bstack, rxsubrule300_pass, -1, 0
  rxsubrule300_pass:
    rx296_cstack = rx296_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx296_pos, $P11, rx296_curclass, "$!pos"
    goto alt299_end
  alt299_1:
    repr_bind_attr_int rx296_cur, rx296_curclass, "$!pos", rx296_pos
    $P11 = rx296_cur."statement"()
    repr_get_attr_int $I11, $P11, rx296_curclass, "$!pos"
    lt $I11, 0, rx296_fail
    nqp_rxmark rx296_bstack, rxsubrule301_pass, -1, 0
  rxsubrule301_pass:
    rx296_cstack = rx296_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx296_pos, $P11, rx296_curclass, "$!pos"
  alt299_end:
    rx296_cur."!cursor_pass"(rx296_pos, "blorst", 'backtrack'=>1)
    .return (rx296_cur)
  rx296_restart:
    repr_get_attr_obj rx296_cstack, rx296_cur, rx296_curclass, "$!cstack"
  rx296_fail:
    unless rx296_bstack, rx296_done
    pop $I19, rx296_bstack
    if_null rx296_cstack, rx296_cstack_done
    unless rx296_cstack, rx296_cstack_done
    dec $I19
    set $P11, rx296_cstack[$I19]
  rx296_cstack_done:
    pop rx296_rep, rx296_bstack
    pop rx296_pos, rx296_bstack
    pop $I19, rx296_bstack
    lt rx296_pos, -1, rx296_done
    lt rx296_pos, 0, rx296_fail
    eq $I19, 0, rx296_fail
    if_null rx296_cstack, rx296_jump
    elements $I18, rx296_bstack
    le $I18, 0, rx296_cut
    dec $I18
    set $I18, rx296_bstack[$I18]
  rx296_cut:
    assign rx296_cstack, $I18
  rx296_jump:
    jump $I19
  rx296_done:
    rx296_cur."!cursor_fail"()
    .return (rx296_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "82_1338064451.944_caps"  :subid("471_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    new $P104, "Hash"
    set $P104["block"], 0
    set $P104["statement"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "82_1338064451.944_nfa"  :subid("472_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 32
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 6
    push $P107, "{"
    push $P107, 4
    push $P107, 8
    push $P107, "statement"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond"  :subid("83_1338064451.944")
    .param pmc param_1704
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .lex "self", param_1704
    $P103 = param_1704."!protoregex"("statement_mod_cond")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<if>"  :subid("84_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1706
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    .lex "self", param_1706
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1707
    .lex "$/", $P1708
    .local string rx302_tgt
    .local int rx302_pos
    .local int rx302_off
    .local int rx302_eos
    .local int rx302_rep
    .local pmc rx302_cur
    .local pmc rx302_curclass
    .local pmc rx302_bstack
    .local pmc rx302_cstack
    (rx302_cur, rx302_tgt, rx302_pos, rx302_curclass, rx302_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx302_cur
    length rx302_eos, rx302_tgt
    eq $I19, 1, rx302_restart
    repr_get_attr_int $I11, self, rx302_curclass, "$!from"
    ne $I11, -1, rxscan303_done
    goto rxscan303_scan
  rxscan303_loop:
    inc rx302_pos
    gt rx302_pos, rx302_eos, rx302_fail
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!from", rx302_pos
  rxscan303_scan:
    nqp_rxmark rx302_bstack, rxscan303_loop, rx302_pos, 0
  rxscan303_done:
    nqp_rxmark rx302_bstack, rxcap304_fail, rx302_pos, 0
    add $I11, rx302_pos, 2
    gt $I11, rx302_eos, rx302_fail
    substr $S10, rx302_tgt, rx302_pos, 2
    ne $S10, ucs4:"if", rx302_fail
    add rx302_pos, 2
    nqp_rxpeek $I19, rx302_bstack, rxcap304_fail
    inc $I19
    set $I11, rx302_bstack[$I19]
    $P11 = rx302_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx302_pos)
    rx302_cstack = rx302_cur."!cursor_capture"($P11, "sym")
    goto rxcap304_done
  rxcap304_fail:
    goto rx302_fail
  rxcap304_done:
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."ws"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail
    nqp_rxmark rx302_bstack, rxsubrule306_pass, -1, 0
  rxsubrule306_pass:
    rx302_cstack = rx302_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."ws"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    rx302_cur."!cursor_pass"(rx302_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx302_cur)
  rx302_restart:
    repr_get_attr_obj rx302_cstack, rx302_cur, rx302_curclass, "$!cstack"
  rx302_fail:
    unless rx302_bstack, rx302_done
    pop $I19, rx302_bstack
    if_null rx302_cstack, rx302_cstack_done
    unless rx302_cstack, rx302_cstack_done
    dec $I19
    set $P11, rx302_cstack[$I19]
  rx302_cstack_done:
    pop rx302_rep, rx302_bstack
    pop rx302_pos, rx302_bstack
    pop $I19, rx302_bstack
    lt rx302_pos, -1, rx302_done
    lt rx302_pos, 0, rx302_fail
    eq $I19, 0, rx302_fail
    if_null rx302_cstack, rx302_jump
    elements $I18, rx302_bstack
    le $I18, 0, rx302_cut
    dec $I18
    set $I18, rx302_bstack[$I18]
  rx302_cut:
    assign rx302_cstack, $I18
  rx302_jump:
    jump $I19
  rx302_done:
    rx302_cur."!cursor_fail"()
    .return (rx302_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "84_1338064451.944_caps"  :subid("473_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "84_1338064451.944_nfa"  :subid("474_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 105
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 102
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<unless>"  :subid("85_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1712
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .lex "self", param_1712
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1713
    .lex "$/", $P1714
    .local string rx308_tgt
    .local int rx308_pos
    .local int rx308_off
    .local int rx308_eos
    .local int rx308_rep
    .local pmc rx308_cur
    .local pmc rx308_curclass
    .local pmc rx308_bstack
    .local pmc rx308_cstack
    (rx308_cur, rx308_tgt, rx308_pos, rx308_curclass, rx308_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx308_cur
    length rx308_eos, rx308_tgt
    eq $I19, 1, rx308_restart
    repr_get_attr_int $I11, self, rx308_curclass, "$!from"
    ne $I11, -1, rxscan309_done
    goto rxscan309_scan
  rxscan309_loop:
    inc rx308_pos
    gt rx308_pos, rx308_eos, rx308_fail
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!from", rx308_pos
  rxscan309_scan:
    nqp_rxmark rx308_bstack, rxscan309_loop, rx308_pos, 0
  rxscan309_done:
    nqp_rxmark rx308_bstack, rxcap310_fail, rx308_pos, 0
    add $I11, rx308_pos, 6
    gt $I11, rx308_eos, rx308_fail
    substr $S10, rx308_tgt, rx308_pos, 6
    ne $S10, ucs4:"unless", rx308_fail
    add rx308_pos, 6
    nqp_rxpeek $I19, rx308_bstack, rxcap310_fail
    inc $I19
    set $I11, rx308_bstack[$I19]
    $P11 = rx308_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx308_pos)
    rx308_cstack = rx308_cur."!cursor_capture"($P11, "sym")
    goto rxcap310_done
  rxcap310_fail:
    goto rx308_fail
  rxcap310_done:
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail
    nqp_rxmark rx308_bstack, rxsubrule312_pass, -1, 0
  rxsubrule312_pass:
    rx308_cstack = rx308_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    rx308_cur."!cursor_pass"(rx308_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx308_cur)
  rx308_restart:
    repr_get_attr_obj rx308_cstack, rx308_cur, rx308_curclass, "$!cstack"
  rx308_fail:
    unless rx308_bstack, rx308_done
    pop $I19, rx308_bstack
    if_null rx308_cstack, rx308_cstack_done
    unless rx308_cstack, rx308_cstack_done
    dec $I19
    set $P11, rx308_cstack[$I19]
  rx308_cstack_done:
    pop rx308_rep, rx308_bstack
    pop rx308_pos, rx308_bstack
    pop $I19, rx308_bstack
    lt rx308_pos, -1, rx308_done
    lt rx308_pos, 0, rx308_fail
    eq $I19, 0, rx308_fail
    if_null rx308_cstack, rx308_jump
    elements $I18, rx308_bstack
    le $I18, 0, rx308_cut
    dec $I18
    set $I18, rx308_bstack[$I18]
  rx308_cut:
    assign rx308_cstack, $I18
  rx308_jump:
    jump $I19
  rx308_done:
    rx308_cur."!cursor_fail"()
    .return (rx308_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "85_1338064451.944_caps"  :subid("475_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "85_1338064451.944_nfa"  :subid("476_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 117
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 115
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 115
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 0
    push $P111, 0
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop"  :subid("86_1338064451.944")
    .param pmc param_1718
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .lex "self", param_1718
    $P103 = param_1718."!protoregex"("statement_mod_loop")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<while>"  :subid("87_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1720
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    .lex "self", param_1720
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1721
    .lex "$/", $P1722
    .local string rx314_tgt
    .local int rx314_pos
    .local int rx314_off
    .local int rx314_eos
    .local int rx314_rep
    .local pmc rx314_cur
    .local pmc rx314_curclass
    .local pmc rx314_bstack
    .local pmc rx314_cstack
    (rx314_cur, rx314_tgt, rx314_pos, rx314_curclass, rx314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx314_cur
    length rx314_eos, rx314_tgt
    eq $I19, 1, rx314_restart
    repr_get_attr_int $I11, self, rx314_curclass, "$!from"
    ne $I11, -1, rxscan315_done
    goto rxscan315_scan
  rxscan315_loop:
    inc rx314_pos
    gt rx314_pos, rx314_eos, rx314_fail
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!from", rx314_pos
  rxscan315_scan:
    nqp_rxmark rx314_bstack, rxscan315_loop, rx314_pos, 0
  rxscan315_done:
    nqp_rxmark rx314_bstack, rxcap316_fail, rx314_pos, 0
    add $I11, rx314_pos, 5
    gt $I11, rx314_eos, rx314_fail
    substr $S10, rx314_tgt, rx314_pos, 5
    ne $S10, ucs4:"while", rx314_fail
    add rx314_pos, 5
    nqp_rxpeek $I19, rx314_bstack, rxcap316_fail
    inc $I19
    set $I11, rx314_bstack[$I19]
    $P11 = rx314_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx314_pos)
    rx314_cstack = rx314_cur."!cursor_capture"($P11, "sym")
    goto rxcap316_done
  rxcap316_fail:
    goto rx314_fail
  rxcap316_done:
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!pos", rx314_pos
    $P11 = rx314_cur."ws"()
    repr_get_attr_int $I11, $P11, rx314_curclass, "$!pos"
    lt $I11, 0, rx314_fail
    repr_get_attr_int rx314_pos, $P11, rx314_curclass, "$!pos"
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!pos", rx314_pos
    $P11 = rx314_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx314_curclass, "$!pos"
    lt $I11, 0, rx314_fail
    nqp_rxmark rx314_bstack, rxsubrule318_pass, -1, 0
  rxsubrule318_pass:
    rx314_cstack = rx314_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx314_pos, $P11, rx314_curclass, "$!pos"
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!pos", rx314_pos
    $P11 = rx314_cur."ws"()
    repr_get_attr_int $I11, $P11, rx314_curclass, "$!pos"
    lt $I11, 0, rx314_fail
    repr_get_attr_int rx314_pos, $P11, rx314_curclass, "$!pos"
    rx314_cur."!cursor_pass"(rx314_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx314_cur)
  rx314_restart:
    repr_get_attr_obj rx314_cstack, rx314_cur, rx314_curclass, "$!cstack"
  rx314_fail:
    unless rx314_bstack, rx314_done
    pop $I19, rx314_bstack
    if_null rx314_cstack, rx314_cstack_done
    unless rx314_cstack, rx314_cstack_done
    dec $I19
    set $P11, rx314_cstack[$I19]
  rx314_cstack_done:
    pop rx314_rep, rx314_bstack
    pop rx314_pos, rx314_bstack
    pop $I19, rx314_bstack
    lt rx314_pos, -1, rx314_done
    lt rx314_pos, 0, rx314_fail
    eq $I19, 0, rx314_fail
    if_null rx314_cstack, rx314_jump
    elements $I18, rx314_bstack
    le $I18, 0, rx314_cut
    dec $I18
    set $I18, rx314_bstack[$I18]
  rx314_cut:
    assign rx314_cstack, $I18
  rx314_jump:
    jump $I19
  rx314_done:
    rx314_cur."!cursor_fail"()
    .return (rx314_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "87_1338064451.944_caps"  :subid("477_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "87_1338064451.944_nfa"  :subid("478_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 119
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 104
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 105
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 108
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 101
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<until>"  :subid("88_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1726
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    .lex "self", param_1726
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1727
    .lex "$/", $P1728
    .local string rx320_tgt
    .local int rx320_pos
    .local int rx320_off
    .local int rx320_eos
    .local int rx320_rep
    .local pmc rx320_cur
    .local pmc rx320_curclass
    .local pmc rx320_bstack
    .local pmc rx320_cstack
    (rx320_cur, rx320_tgt, rx320_pos, rx320_curclass, rx320_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx320_cur
    length rx320_eos, rx320_tgt
    eq $I19, 1, rx320_restart
    repr_get_attr_int $I11, self, rx320_curclass, "$!from"
    ne $I11, -1, rxscan321_done
    goto rxscan321_scan
  rxscan321_loop:
    inc rx320_pos
    gt rx320_pos, rx320_eos, rx320_fail
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!from", rx320_pos
  rxscan321_scan:
    nqp_rxmark rx320_bstack, rxscan321_loop, rx320_pos, 0
  rxscan321_done:
    nqp_rxmark rx320_bstack, rxcap322_fail, rx320_pos, 0
    add $I11, rx320_pos, 5
    gt $I11, rx320_eos, rx320_fail
    substr $S10, rx320_tgt, rx320_pos, 5
    ne $S10, ucs4:"until", rx320_fail
    add rx320_pos, 5
    nqp_rxpeek $I19, rx320_bstack, rxcap322_fail
    inc $I19
    set $I11, rx320_bstack[$I19]
    $P11 = rx320_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx320_pos)
    rx320_cstack = rx320_cur."!cursor_capture"($P11, "sym")
    goto rxcap322_done
  rxcap322_fail:
    goto rx320_fail
  rxcap322_done:
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!pos", rx320_pos
    $P11 = rx320_cur."ws"()
    repr_get_attr_int $I11, $P11, rx320_curclass, "$!pos"
    lt $I11, 0, rx320_fail
    repr_get_attr_int rx320_pos, $P11, rx320_curclass, "$!pos"
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!pos", rx320_pos
    $P11 = rx320_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx320_curclass, "$!pos"
    lt $I11, 0, rx320_fail
    nqp_rxmark rx320_bstack, rxsubrule324_pass, -1, 0
  rxsubrule324_pass:
    rx320_cstack = rx320_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx320_pos, $P11, rx320_curclass, "$!pos"
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!pos", rx320_pos
    $P11 = rx320_cur."ws"()
    repr_get_attr_int $I11, $P11, rx320_curclass, "$!pos"
    lt $I11, 0, rx320_fail
    repr_get_attr_int rx320_pos, $P11, rx320_curclass, "$!pos"
    rx320_cur."!cursor_pass"(rx320_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx320_cur)
  rx320_restart:
    repr_get_attr_obj rx320_cstack, rx320_cur, rx320_curclass, "$!cstack"
  rx320_fail:
    unless rx320_bstack, rx320_done
    pop $I19, rx320_bstack
    if_null rx320_cstack, rx320_cstack_done
    unless rx320_cstack, rx320_cstack_done
    dec $I19
    set $P11, rx320_cstack[$I19]
  rx320_cstack_done:
    pop rx320_rep, rx320_bstack
    pop rx320_pos, rx320_bstack
    pop $I19, rx320_bstack
    lt rx320_pos, -1, rx320_done
    lt rx320_pos, 0, rx320_fail
    eq $I19, 0, rx320_fail
    if_null rx320_cstack, rx320_jump
    elements $I18, rx320_bstack
    le $I18, 0, rx320_cut
    dec $I18
    set $I18, rx320_bstack[$I18]
  rx320_cut:
    assign rx320_cstack, $I18
  rx320_jump:
    jump $I19
  rx320_done:
    rx320_cur."!cursor_fail"()
    .return (rx320_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "88_1338064451.944_caps"  :subid("479_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "88_1338064451.944_nfa"  :subid("480_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 117
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 116
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 105
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 108
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<for>"  :subid("89_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1732
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .lex "self", param_1732
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1733
    .lex "$/", $P1734
    .local string rx326_tgt
    .local int rx326_pos
    .local int rx326_off
    .local int rx326_eos
    .local int rx326_rep
    .local pmc rx326_cur
    .local pmc rx326_curclass
    .local pmc rx326_bstack
    .local pmc rx326_cstack
    (rx326_cur, rx326_tgt, rx326_pos, rx326_curclass, rx326_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx326_cur
    length rx326_eos, rx326_tgt
    eq $I19, 1, rx326_restart
    repr_get_attr_int $I11, self, rx326_curclass, "$!from"
    ne $I11, -1, rxscan327_done
    goto rxscan327_scan
  rxscan327_loop:
    inc rx326_pos
    gt rx326_pos, rx326_eos, rx326_fail
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!from", rx326_pos
  rxscan327_scan:
    nqp_rxmark rx326_bstack, rxscan327_loop, rx326_pos, 0
  rxscan327_done:
    nqp_rxmark rx326_bstack, rxcap328_fail, rx326_pos, 0
    add $I11, rx326_pos, 3
    gt $I11, rx326_eos, rx326_fail
    substr $S10, rx326_tgt, rx326_pos, 3
    ne $S10, ucs4:"for", rx326_fail
    add rx326_pos, 3
    nqp_rxpeek $I19, rx326_bstack, rxcap328_fail
    inc $I19
    set $I11, rx326_bstack[$I19]
    $P11 = rx326_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx326_pos)
    rx326_cstack = rx326_cur."!cursor_capture"($P11, "sym")
    goto rxcap328_done
  rxcap328_fail:
    goto rx326_fail
  rxcap328_done:
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."ws"()
    repr_get_attr_int $I11, $P11, rx326_curclass, "$!pos"
    lt $I11, 0, rx326_fail
    repr_get_attr_int rx326_pos, $P11, rx326_curclass, "$!pos"
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx326_curclass, "$!pos"
    lt $I11, 0, rx326_fail
    nqp_rxmark rx326_bstack, rxsubrule330_pass, -1, 0
  rxsubrule330_pass:
    rx326_cstack = rx326_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx326_pos, $P11, rx326_curclass, "$!pos"
    repr_bind_attr_int rx326_cur, rx326_curclass, "$!pos", rx326_pos
    $P11 = rx326_cur."ws"()
    repr_get_attr_int $I11, $P11, rx326_curclass, "$!pos"
    lt $I11, 0, rx326_fail
    repr_get_attr_int rx326_pos, $P11, rx326_curclass, "$!pos"
    rx326_cur."!cursor_pass"(rx326_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx326_cur)
  rx326_restart:
    repr_get_attr_obj rx326_cstack, rx326_cur, rx326_curclass, "$!cstack"
  rx326_fail:
    unless rx326_bstack, rx326_done
    pop $I19, rx326_bstack
    if_null rx326_cstack, rx326_cstack_done
    unless rx326_cstack, rx326_cstack_done
    dec $I19
    set $P11, rx326_cstack[$I19]
  rx326_cstack_done:
    pop rx326_rep, rx326_bstack
    pop rx326_pos, rx326_bstack
    pop $I19, rx326_bstack
    lt rx326_pos, -1, rx326_done
    lt rx326_pos, 0, rx326_fail
    eq $I19, 0, rx326_fail
    if_null rx326_cstack, rx326_jump
    elements $I18, rx326_bstack
    le $I18, 0, rx326_cut
    dec $I18
    set $I18, rx326_bstack[$I18]
  rx326_cut:
    assign rx326_cstack, $I18
  rx326_jump:
    jump $I19
  rx326_done:
    rx326_cur."!cursor_fail"()
    .return (rx326_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "89_1338064451.944_caps"  :subid("481_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "89_1338064451.944_nfa"  :subid("482_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 102
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 111
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<fatarrow>"  :subid("90_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1738
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    .lex "self", param_1738
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1739
    .lex "$/", $P1740
    .local string rx332_tgt
    .local int rx332_pos
    .local int rx332_off
    .local int rx332_eos
    .local int rx332_rep
    .local pmc rx332_cur
    .local pmc rx332_curclass
    .local pmc rx332_bstack
    .local pmc rx332_cstack
    (rx332_cur, rx332_tgt, rx332_pos, rx332_curclass, rx332_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx332_cur
    length rx332_eos, rx332_tgt
    eq $I19, 1, rx332_restart
    repr_get_attr_int $I11, self, rx332_curclass, "$!from"
    ne $I11, -1, rxscan333_done
    goto rxscan333_scan
  rxscan333_loop:
    inc rx332_pos
    gt rx332_pos, rx332_eos, rx332_fail
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!from", rx332_pos
  rxscan333_scan:
    nqp_rxmark rx332_bstack, rxscan333_loop, rx332_pos, 0
  rxscan333_done:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail
    nqp_rxmark rx332_bstack, rxsubrule334_pass, -1, 0
  rxsubrule334_pass:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    rx332_cur."!cursor_pass"(rx332_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx332_cur)
  rx332_restart:
    repr_get_attr_obj rx332_cstack, rx332_cur, rx332_curclass, "$!cstack"
  rx332_fail:
    unless rx332_bstack, rx332_done
    pop $I19, rx332_bstack
    if_null rx332_cstack, rx332_cstack_done
    unless rx332_cstack, rx332_cstack_done
    dec $I19
    set $P11, rx332_cstack[$I19]
  rx332_cstack_done:
    pop rx332_rep, rx332_bstack
    pop rx332_pos, rx332_bstack
    pop $I19, rx332_bstack
    lt rx332_pos, -1, rx332_done
    lt rx332_pos, 0, rx332_fail
    eq $I19, 0, rx332_fail
    if_null rx332_cstack, rx332_jump
    elements $I18, rx332_bstack
    le $I18, 0, rx332_cut
    dec $I18
    set $I18, rx332_bstack[$I18]
  rx332_cut:
    assign rx332_cstack, $I18
  rx332_jump:
    jump $I19
  rx332_done:
    rx332_cur."!cursor_fail"()
    .return (rx332_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "90_1338064451.944_caps"  :subid("483_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    new $P104, "Hash"
    set $P104["fatarrow"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "90_1338064451.944_nfa"  :subid("484_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "fatarrow"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<colonpair>"  :subid("91_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1744
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .lex "self", param_1744
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1745
    .lex "$/", $P1746
    .local string rx335_tgt
    .local int rx335_pos
    .local int rx335_off
    .local int rx335_eos
    .local int rx335_rep
    .local pmc rx335_cur
    .local pmc rx335_curclass
    .local pmc rx335_bstack
    .local pmc rx335_cstack
    (rx335_cur, rx335_tgt, rx335_pos, rx335_curclass, rx335_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx335_cur
    length rx335_eos, rx335_tgt
    eq $I19, 1, rx335_restart
    repr_get_attr_int $I11, self, rx335_curclass, "$!from"
    ne $I11, -1, rxscan336_done
    goto rxscan336_scan
  rxscan336_loop:
    inc rx335_pos
    gt rx335_pos, rx335_eos, rx335_fail
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!from", rx335_pos
  rxscan336_scan:
    nqp_rxmark rx335_bstack, rxscan336_loop, rx335_pos, 0
  rxscan336_done:
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!pos", rx335_pos
    $P11 = rx335_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx335_curclass, "$!pos"
    lt $I11, 0, rx335_fail
    nqp_rxmark rx335_bstack, rxsubrule337_pass, -1, 0
  rxsubrule337_pass:
    rx335_cstack = rx335_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx335_pos, $P11, rx335_curclass, "$!pos"
    rx335_cur."!cursor_pass"(rx335_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx335_cur)
  rx335_restart:
    repr_get_attr_obj rx335_cstack, rx335_cur, rx335_curclass, "$!cstack"
  rx335_fail:
    unless rx335_bstack, rx335_done
    pop $I19, rx335_bstack
    if_null rx335_cstack, rx335_cstack_done
    unless rx335_cstack, rx335_cstack_done
    dec $I19
    set $P11, rx335_cstack[$I19]
  rx335_cstack_done:
    pop rx335_rep, rx335_bstack
    pop rx335_pos, rx335_bstack
    pop $I19, rx335_bstack
    lt rx335_pos, -1, rx335_done
    lt rx335_pos, 0, rx335_fail
    eq $I19, 0, rx335_fail
    if_null rx335_cstack, rx335_jump
    elements $I18, rx335_bstack
    le $I18, 0, rx335_cut
    dec $I18
    set $I18, rx335_bstack[$I18]
  rx335_cut:
    assign rx335_cstack, $I18
  rx335_jump:
    jump $I19
  rx335_done:
    rx335_cur."!cursor_fail"()
    .return (rx335_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "91_1338064451.944_caps"  :subid("485_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    new $P104, "Hash"
    set $P104["colonpair"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "91_1338064451.944_nfa"  :subid("486_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "colonpair"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<variable>"  :subid("92_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1750
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .lex "self", param_1750
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1751
    .lex "$/", $P1752
    .local string rx338_tgt
    .local int rx338_pos
    .local int rx338_off
    .local int rx338_eos
    .local int rx338_rep
    .local pmc rx338_cur
    .local pmc rx338_curclass
    .local pmc rx338_bstack
    .local pmc rx338_cstack
    (rx338_cur, rx338_tgt, rx338_pos, rx338_curclass, rx338_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx338_cur
    length rx338_eos, rx338_tgt
    eq $I19, 1, rx338_restart
    repr_get_attr_int $I11, self, rx338_curclass, "$!from"
    ne $I11, -1, rxscan339_done
    goto rxscan339_scan
  rxscan339_loop:
    inc rx338_pos
    gt rx338_pos, rx338_eos, rx338_fail
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!from", rx338_pos
  rxscan339_scan:
    nqp_rxmark rx338_bstack, rxscan339_loop, rx338_pos, 0
  rxscan339_done:
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."variable"()
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail
    nqp_rxmark rx338_bstack, rxsubrule340_pass, -1, 0
  rxsubrule340_pass:
    rx338_cstack = rx338_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx338_pos, $P11, rx338_curclass, "$!pos"
    rx338_cur."!cursor_pass"(rx338_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx338_cur)
  rx338_restart:
    repr_get_attr_obj rx338_cstack, rx338_cur, rx338_curclass, "$!cstack"
  rx338_fail:
    unless rx338_bstack, rx338_done
    pop $I19, rx338_bstack
    if_null rx338_cstack, rx338_cstack_done
    unless rx338_cstack, rx338_cstack_done
    dec $I19
    set $P11, rx338_cstack[$I19]
  rx338_cstack_done:
    pop rx338_rep, rx338_bstack
    pop rx338_pos, rx338_bstack
    pop $I19, rx338_bstack
    lt rx338_pos, -1, rx338_done
    lt rx338_pos, 0, rx338_fail
    eq $I19, 0, rx338_fail
    if_null rx338_cstack, rx338_jump
    elements $I18, rx338_bstack
    le $I18, 0, rx338_cut
    dec $I18
    set $I18, rx338_bstack[$I18]
  rx338_cut:
    assign rx338_cstack, $I18
  rx338_jump:
    jump $I19
  rx338_done:
    rx338_cur."!cursor_fail"()
    .return (rx338_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "92_1338064451.944_caps"  :subid("487_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    new $P104, "Hash"
    set $P104["variable"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "92_1338064451.944_nfa"  :subid("488_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "variable"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<package_declarator>"  :subid("93_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1756
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    .lex "self", param_1756
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1757
    .lex "$/", $P1758
    .local string rx341_tgt
    .local int rx341_pos
    .local int rx341_off
    .local int rx341_eos
    .local int rx341_rep
    .local pmc rx341_cur
    .local pmc rx341_curclass
    .local pmc rx341_bstack
    .local pmc rx341_cstack
    (rx341_cur, rx341_tgt, rx341_pos, rx341_curclass, rx341_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx341_cur
    length rx341_eos, rx341_tgt
    eq $I19, 1, rx341_restart
    repr_get_attr_int $I11, self, rx341_curclass, "$!from"
    ne $I11, -1, rxscan342_done
    goto rxscan342_scan
  rxscan342_loop:
    inc rx341_pos
    gt rx341_pos, rx341_eos, rx341_fail
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!from", rx341_pos
  rxscan342_scan:
    nqp_rxmark rx341_bstack, rxscan342_loop, rx341_pos, 0
  rxscan342_done:
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!pos", rx341_pos
    $P11 = rx341_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx341_curclass, "$!pos"
    lt $I11, 0, rx341_fail
    nqp_rxmark rx341_bstack, rxsubrule343_pass, -1, 0
  rxsubrule343_pass:
    rx341_cstack = rx341_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx341_pos, $P11, rx341_curclass, "$!pos"
    rx341_cur."!cursor_pass"(rx341_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx341_cur)
  rx341_restart:
    repr_get_attr_obj rx341_cstack, rx341_cur, rx341_curclass, "$!cstack"
  rx341_fail:
    unless rx341_bstack, rx341_done
    pop $I19, rx341_bstack
    if_null rx341_cstack, rx341_cstack_done
    unless rx341_cstack, rx341_cstack_done
    dec $I19
    set $P11, rx341_cstack[$I19]
  rx341_cstack_done:
    pop rx341_rep, rx341_bstack
    pop rx341_pos, rx341_bstack
    pop $I19, rx341_bstack
    lt rx341_pos, -1, rx341_done
    lt rx341_pos, 0, rx341_fail
    eq $I19, 0, rx341_fail
    if_null rx341_cstack, rx341_jump
    elements $I18, rx341_bstack
    le $I18, 0, rx341_cut
    dec $I18
    set $I18, rx341_bstack[$I18]
  rx341_cut:
    assign rx341_cstack, $I18
  rx341_jump:
    jump $I19
  rx341_done:
    rx341_cur."!cursor_fail"()
    .return (rx341_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "93_1338064451.944_caps"  :subid("489_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    new $P104, "Hash"
    set $P104["package_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "93_1338064451.944_nfa"  :subid("490_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "package_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<scope_declarator>"  :subid("94_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1762
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    .lex "self", param_1762
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1763
    .lex "$/", $P1764
    .local string rx344_tgt
    .local int rx344_pos
    .local int rx344_off
    .local int rx344_eos
    .local int rx344_rep
    .local pmc rx344_cur
    .local pmc rx344_curclass
    .local pmc rx344_bstack
    .local pmc rx344_cstack
    (rx344_cur, rx344_tgt, rx344_pos, rx344_curclass, rx344_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx344_cur
    length rx344_eos, rx344_tgt
    eq $I19, 1, rx344_restart
    repr_get_attr_int $I11, self, rx344_curclass, "$!from"
    ne $I11, -1, rxscan345_done
    goto rxscan345_scan
  rxscan345_loop:
    inc rx344_pos
    gt rx344_pos, rx344_eos, rx344_fail
    repr_bind_attr_int rx344_cur, rx344_curclass, "$!from", rx344_pos
  rxscan345_scan:
    nqp_rxmark rx344_bstack, rxscan345_loop, rx344_pos, 0
  rxscan345_done:
    repr_bind_attr_int rx344_cur, rx344_curclass, "$!pos", rx344_pos
    $P11 = rx344_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx344_curclass, "$!pos"
    lt $I11, 0, rx344_fail
    nqp_rxmark rx344_bstack, rxsubrule346_pass, -1, 0
  rxsubrule346_pass:
    rx344_cstack = rx344_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx344_pos, $P11, rx344_curclass, "$!pos"
    rx344_cur."!cursor_pass"(rx344_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx344_cur)
  rx344_restart:
    repr_get_attr_obj rx344_cstack, rx344_cur, rx344_curclass, "$!cstack"
  rx344_fail:
    unless rx344_bstack, rx344_done
    pop $I19, rx344_bstack
    if_null rx344_cstack, rx344_cstack_done
    unless rx344_cstack, rx344_cstack_done
    dec $I19
    set $P11, rx344_cstack[$I19]
  rx344_cstack_done:
    pop rx344_rep, rx344_bstack
    pop rx344_pos, rx344_bstack
    pop $I19, rx344_bstack
    lt rx344_pos, -1, rx344_done
    lt rx344_pos, 0, rx344_fail
    eq $I19, 0, rx344_fail
    if_null rx344_cstack, rx344_jump
    elements $I18, rx344_bstack
    le $I18, 0, rx344_cut
    dec $I18
    set $I18, rx344_bstack[$I18]
  rx344_cut:
    assign rx344_cstack, $I18
  rx344_jump:
    jump $I19
  rx344_done:
    rx344_cur."!cursor_fail"()
    .return (rx344_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "94_1338064451.944_caps"  :subid("491_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    new $P104, "Hash"
    set $P104["scope_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "94_1338064451.944_nfa"  :subid("492_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "scope_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<routine_declarator>"  :subid("95_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1768
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    .lex "self", param_1768
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1769
    .lex "$/", $P1770
    .local string rx347_tgt
    .local int rx347_pos
    .local int rx347_off
    .local int rx347_eos
    .local int rx347_rep
    .local pmc rx347_cur
    .local pmc rx347_curclass
    .local pmc rx347_bstack
    .local pmc rx347_cstack
    (rx347_cur, rx347_tgt, rx347_pos, rx347_curclass, rx347_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx347_cur
    length rx347_eos, rx347_tgt
    eq $I19, 1, rx347_restart
    repr_get_attr_int $I11, self, rx347_curclass, "$!from"
    ne $I11, -1, rxscan348_done
    goto rxscan348_scan
  rxscan348_loop:
    inc rx347_pos
    gt rx347_pos, rx347_eos, rx347_fail
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!from", rx347_pos
  rxscan348_scan:
    nqp_rxmark rx347_bstack, rxscan348_loop, rx347_pos, 0
  rxscan348_done:
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!pos", rx347_pos
    $P11 = rx347_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx347_curclass, "$!pos"
    lt $I11, 0, rx347_fail
    nqp_rxmark rx347_bstack, rxsubrule349_pass, -1, 0
  rxsubrule349_pass:
    rx347_cstack = rx347_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx347_pos, $P11, rx347_curclass, "$!pos"
    rx347_cur."!cursor_pass"(rx347_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx347_cur)
  rx347_restart:
    repr_get_attr_obj rx347_cstack, rx347_cur, rx347_curclass, "$!cstack"
  rx347_fail:
    unless rx347_bstack, rx347_done
    pop $I19, rx347_bstack
    if_null rx347_cstack, rx347_cstack_done
    unless rx347_cstack, rx347_cstack_done
    dec $I19
    set $P11, rx347_cstack[$I19]
  rx347_cstack_done:
    pop rx347_rep, rx347_bstack
    pop rx347_pos, rx347_bstack
    pop $I19, rx347_bstack
    lt rx347_pos, -1, rx347_done
    lt rx347_pos, 0, rx347_fail
    eq $I19, 0, rx347_fail
    if_null rx347_cstack, rx347_jump
    elements $I18, rx347_bstack
    le $I18, 0, rx347_cut
    dec $I18
    set $I18, rx347_bstack[$I18]
  rx347_cut:
    assign rx347_cstack, $I18
  rx347_jump:
    jump $I19
  rx347_done:
    rx347_cur."!cursor_fail"()
    .return (rx347_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "95_1338064451.944_caps"  :subid("493_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    new $P104, "Hash"
    set $P104["routine_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "95_1338064451.944_nfa"  :subid("494_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "routine_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<multi_declarator>"  :subid("98_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1774
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .const 'Sub' $P1785 = "97_1338064451.944" 
    capture_lex $P1785
    .const 'Sub' $P1780 = "96_1338064451.944" 
    capture_lex $P1780
    .lex "self", param_1774
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1775
    .lex "$/", $P1776
    .local string rx350_tgt
    .local int rx350_pos
    .local int rx350_off
    .local int rx350_eos
    .local int rx350_rep
    .local pmc rx350_cur
    .local pmc rx350_curclass
    .local pmc rx350_bstack
    .local pmc rx350_cstack
    (rx350_cur, rx350_tgt, rx350_pos, rx350_curclass, rx350_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx350_cur
    length rx350_eos, rx350_tgt
    eq $I19, 1, rx350_restart
    repr_get_attr_int $I11, self, rx350_curclass, "$!from"
    ne $I11, -1, rxscan351_done
    goto rxscan351_scan
  rxscan351_loop:
    inc rx350_pos
    gt rx350_pos, rx350_eos, rx350_fail
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!from", rx350_pos
  rxscan351_scan:
    nqp_rxmark rx350_bstack, rxscan351_loop, rx350_pos, 0
  rxscan351_done:
    .const 'Sub' $P1780 = "96_1338064451.944" 
    capture_lex $P1780
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."before"($P1780)
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail
    .const 'Sub' $P1785 = "97_1338064451.944" 
    capture_lex $P1785
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."before"($P1785)
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    ge $I11, 0, rx350_fail
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail
    nqp_rxmark rx350_bstack, rxsubrule359_pass, -1, 0
  rxsubrule359_pass:
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    rx350_cur."!cursor_pass"(rx350_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx350_cur)
  rx350_restart:
    repr_get_attr_obj rx350_cstack, rx350_cur, rx350_curclass, "$!cstack"
  rx350_fail:
    unless rx350_bstack, rx350_done
    pop $I19, rx350_bstack
    if_null rx350_cstack, rx350_cstack_done
    unless rx350_cstack, rx350_cstack_done
    dec $I19
    set $P11, rx350_cstack[$I19]
  rx350_cstack_done:
    pop rx350_rep, rx350_bstack
    pop rx350_pos, rx350_bstack
    pop $I19, rx350_bstack
    lt rx350_pos, -1, rx350_done
    lt rx350_pos, 0, rx350_fail
    eq $I19, 0, rx350_fail
    if_null rx350_cstack, rx350_jump
    elements $I18, rx350_bstack
    le $I18, 0, rx350_cut
    dec $I18
    set $I18, rx350_bstack[$I18]
  rx350_cut:
    assign rx350_cstack, $I18
  rx350_jump:
    jump $I19
  rx350_done:
    rx350_cur."!cursor_fail"()
    .return (rx350_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "98_1338064451.944_caps"  :subid("495_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "Hash"
    set $P104["multi_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "98_1338064451.944_nfa"  :subid("496_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    push $P105, 2
    push $P105, 112
    push $P105, 6
    push $P105, 2
    push $P105, 111
    push $P105, 10
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 117
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 105
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 114
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 116
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 111
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 110
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 108
    push $P115, 12
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 121
    push $P116, 0
    new $P117, "ResizablePMCArray"
    push $P117, $P104
    push $P117, $P105
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1779"  :anon :subid("96_1338064451.944") :method :outer("98_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .lex unicode:"$\x{a2}", $P1783
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    (rx352_cur, rx352_tgt, rx352_pos, rx352_curclass, rx352_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done
    goto rxscan353_scan
  rxscan353_loop:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan:
    nqp_rxmark rx352_bstack, rxscan353_loop, rx352_pos, 0
  rxscan353_done:
  alt354_0:
    nqp_rxmark rx352_bstack, alt354_1, rx352_pos, 0
    add $I11, rx352_pos, 5
    gt $I11, rx352_eos, rx352_fail
    substr $S10, rx352_tgt, rx352_pos, 5
    ne $S10, ucs4:"multi", rx352_fail
    add rx352_pos, 5
    goto alt354_end
  alt354_1:
    nqp_rxmark rx352_bstack, alt354_2, rx352_pos, 0
    add $I11, rx352_pos, 5
    gt $I11, rx352_eos, rx352_fail
    substr $S10, rx352_tgt, rx352_pos, 5
    ne $S10, ucs4:"proto", rx352_fail
    add rx352_pos, 5
    goto alt354_end
  alt354_2:
    add $I11, rx352_pos, 4
    gt $I11, rx352_eos, rx352_fail
    substr $S10, rx352_tgt, rx352_pos, 4
    ne $S10, ucs4:"only", rx352_fail
    add rx352_pos, 4
  alt354_end:
    rx352_cur."!cursor_pass"(rx352_pos, 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail:
    unless rx352_bstack, rx352_done
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done
    unless rx352_cstack, rx352_cstack_done
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done
    lt rx352_pos, 0, rx352_fail
    eq $I19, 0, rx352_fail
    if_null rx352_cstack, rx352_jump
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut:
    assign rx352_cstack, $I18
  rx352_jump:
    jump $I19
  rx352_done:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "96_1338064451.944_caps"  :subid("497_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "96_1338064451.944_nfa"  :subid("498_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    push $P105, 2
    push $P105, 112
    push $P105, 6
    push $P105, 2
    push $P105, 111
    push $P105, 10
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 117
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 105
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 114
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 116
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 111
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 110
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 108
    push $P115, 12
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 121
    push $P116, 0
    new $P117, "ResizablePMCArray"
    push $P117, $P104
    push $P117, $P105
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1784"  :anon :subid("97_1338064451.944") :method :outer("98_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .lex unicode:"$\x{a2}", $P1788
    .local string rx355_tgt
    .local int rx355_pos
    .local int rx355_off
    .local int rx355_eos
    .local int rx355_rep
    .local pmc rx355_cur
    .local pmc rx355_curclass
    .local pmc rx355_bstack
    .local pmc rx355_cstack
    (rx355_cur, rx355_tgt, rx355_pos, rx355_curclass, rx355_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx355_cur
    length rx355_eos, rx355_tgt
    eq $I19, 1, rx355_restart
    repr_get_attr_int $I11, self, rx355_curclass, "$!from"
    ne $I11, -1, rxscan356_done
    goto rxscan356_scan
  rxscan356_loop:
    inc rx355_pos
    gt rx355_pos, rx355_eos, rx355_fail
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!from", rx355_pos
  rxscan356_scan:
    nqp_rxmark rx355_bstack, rxscan356_loop, rx355_pos, 0
  rxscan356_done:
    add $I11, rx355_pos, 5
    gt $I11, rx355_eos, rx355_fail
    substr $S10, rx355_tgt, rx355_pos, 5
    ne $S10, ucs4:"proto", rx355_fail
    add rx355_pos, 5
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!pos", rx355_pos
    $P11 = rx355_cur."ws"()
    repr_get_attr_int $I11, $P11, rx355_curclass, "$!pos"
    lt $I11, 0, rx355_fail
    repr_get_attr_int rx355_pos, $P11, rx355_curclass, "$!pos"
  alt358_0:
    nqp_rxmark rx355_bstack, alt358_1, rx355_pos, 0
    add $I11, rx355_pos, 5
    gt $I11, rx355_eos, rx355_fail
    substr $S10, rx355_tgt, rx355_pos, 5
    ne $S10, ucs4:"regex", rx355_fail
    add rx355_pos, 5
    goto alt358_end
  alt358_1:
    nqp_rxmark rx355_bstack, alt358_2, rx355_pos, 0
    add $I11, rx355_pos, 5
    gt $I11, rx355_eos, rx355_fail
    substr $S10, rx355_tgt, rx355_pos, 5
    ne $S10, ucs4:"token", rx355_fail
    add rx355_pos, 5
    goto alt358_end
  alt358_2:
    add $I11, rx355_pos, 4
    gt $I11, rx355_eos, rx355_fail
    substr $S10, rx355_tgt, rx355_pos, 4
    ne $S10, ucs4:"rule", rx355_fail
    add rx355_pos, 4
  alt358_end:
    rx355_cur."!cursor_pass"(rx355_pos, 'backtrack'=>1)
    .return (rx355_cur)
  rx355_restart:
    repr_get_attr_obj rx355_cstack, rx355_cur, rx355_curclass, "$!cstack"
  rx355_fail:
    unless rx355_bstack, rx355_done
    pop $I19, rx355_bstack
    if_null rx355_cstack, rx355_cstack_done
    unless rx355_cstack, rx355_cstack_done
    dec $I19
    set $P11, rx355_cstack[$I19]
  rx355_cstack_done:
    pop rx355_rep, rx355_bstack
    pop rx355_pos, rx355_bstack
    pop $I19, rx355_bstack
    lt rx355_pos, -1, rx355_done
    lt rx355_pos, 0, rx355_fail
    eq $I19, 0, rx355_fail
    if_null rx355_cstack, rx355_jump
    elements $I18, rx355_bstack
    le $I18, 0, rx355_cut
    dec $I18
    set $I18, rx355_bstack[$I18]
  rx355_cut:
    assign rx355_cstack, $I18
  rx355_jump:
    jump $I19
  rx355_done:
    rx355_cur."!cursor_fail"()
    .return (rx355_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "97_1338064451.944_caps"  :subid("499_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "97_1338064451.944_nfa"  :subid("500_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 112
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 111
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 114
    push $P111, 8
    push $P111, 2
    push $P111, 116
    push $P111, 12
    push $P111, 2
    push $P111, 114
    push $P111, 16
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 101
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 103
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 101
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 120
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 111
    push $P116, 13
    new $P117, "ResizablePMCArray"
    push $P117, 2
    push $P117, 107
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 2
    push $P118, 101
    push $P118, 15
    new $P119, "ResizablePMCArray"
    push $P119, 2
    push $P119, 110
    push $P119, 0
    new $P120, "ResizablePMCArray"
    push $P120, 2
    push $P120, 117
    push $P120, 17
    new $P121, "ResizablePMCArray"
    push $P121, 2
    push $P121, 108
    push $P121, 18
    new $P122, "ResizablePMCArray"
    push $P122, 2
    push $P122, 101
    push $P122, 0
    new $P123, "ResizablePMCArray"
    push $P123, $P104
    push $P123, $P105
    push $P123, $P106
    push $P123, $P107
    push $P123, $P108
    push $P123, $P109
    push $P123, $P110
    push $P123, $P111
    push $P123, $P112
    push $P123, $P113
    push $P123, $P114
    push $P123, $P115
    push $P123, $P116
    push $P123, $P117
    push $P123, $P118
    push $P123, $P119
    push $P123, $P120
    push $P123, $P121
    push $P123, $P122
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<regex_declarator>"  :subid("99_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1790
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    .lex "self", param_1790
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1791
    .lex "$/", $P1792
    .local string rx360_tgt
    .local int rx360_pos
    .local int rx360_off
    .local int rx360_eos
    .local int rx360_rep
    .local pmc rx360_cur
    .local pmc rx360_curclass
    .local pmc rx360_bstack
    .local pmc rx360_cstack
    (rx360_cur, rx360_tgt, rx360_pos, rx360_curclass, rx360_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx360_cur
    length rx360_eos, rx360_tgt
    eq $I19, 1, rx360_restart
    repr_get_attr_int $I11, self, rx360_curclass, "$!from"
    ne $I11, -1, rxscan361_done
    goto rxscan361_scan
  rxscan361_loop:
    inc rx360_pos
    gt rx360_pos, rx360_eos, rx360_fail
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!from", rx360_pos
  rxscan361_scan:
    nqp_rxmark rx360_bstack, rxscan361_loop, rx360_pos, 0
  rxscan361_done:
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail
    nqp_rxmark rx360_bstack, rxsubrule362_pass, -1, 0
  rxsubrule362_pass:
    rx360_cstack = rx360_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    rx360_cur."!cursor_pass"(rx360_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx360_cur)
  rx360_restart:
    repr_get_attr_obj rx360_cstack, rx360_cur, rx360_curclass, "$!cstack"
  rx360_fail:
    unless rx360_bstack, rx360_done
    pop $I19, rx360_bstack
    if_null rx360_cstack, rx360_cstack_done
    unless rx360_cstack, rx360_cstack_done
    dec $I19
    set $P11, rx360_cstack[$I19]
  rx360_cstack_done:
    pop rx360_rep, rx360_bstack
    pop rx360_pos, rx360_bstack
    pop $I19, rx360_bstack
    lt rx360_pos, -1, rx360_done
    lt rx360_pos, 0, rx360_fail
    eq $I19, 0, rx360_fail
    if_null rx360_cstack, rx360_jump
    elements $I18, rx360_bstack
    le $I18, 0, rx360_cut
    dec $I18
    set $I18, rx360_bstack[$I18]
  rx360_cut:
    assign rx360_cstack, $I18
  rx360_jump:
    jump $I19
  rx360_done:
    rx360_cur."!cursor_fail"()
    .return (rx360_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "99_1338064451.944_caps"  :subid("501_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    new $P104, "Hash"
    set $P104["regex_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "99_1338064451.944_nfa"  :subid("502_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "regex_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<statement_prefix>"  :subid("100_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1796
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    .lex "self", param_1796
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1797
    .lex "$/", $P1798
    .local string rx363_tgt
    .local int rx363_pos
    .local int rx363_off
    .local int rx363_eos
    .local int rx363_rep
    .local pmc rx363_cur
    .local pmc rx363_curclass
    .local pmc rx363_bstack
    .local pmc rx363_cstack
    (rx363_cur, rx363_tgt, rx363_pos, rx363_curclass, rx363_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx363_cur
    length rx363_eos, rx363_tgt
    eq $I19, 1, rx363_restart
    repr_get_attr_int $I11, self, rx363_curclass, "$!from"
    ne $I11, -1, rxscan364_done
    goto rxscan364_scan
  rxscan364_loop:
    inc rx363_pos
    gt rx363_pos, rx363_eos, rx363_fail
    repr_bind_attr_int rx363_cur, rx363_curclass, "$!from", rx363_pos
  rxscan364_scan:
    nqp_rxmark rx363_bstack, rxscan364_loop, rx363_pos, 0
  rxscan364_done:
    repr_bind_attr_int rx363_cur, rx363_curclass, "$!pos", rx363_pos
    $P11 = rx363_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx363_curclass, "$!pos"
    lt $I11, 0, rx363_fail
    nqp_rxmark rx363_bstack, rxsubrule365_pass, -1, 0
  rxsubrule365_pass:
    rx363_cstack = rx363_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx363_pos, $P11, rx363_curclass, "$!pos"
    rx363_cur."!cursor_pass"(rx363_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx363_cur)
  rx363_restart:
    repr_get_attr_obj rx363_cstack, rx363_cur, rx363_curclass, "$!cstack"
  rx363_fail:
    unless rx363_bstack, rx363_done
    pop $I19, rx363_bstack
    if_null rx363_cstack, rx363_cstack_done
    unless rx363_cstack, rx363_cstack_done
    dec $I19
    set $P11, rx363_cstack[$I19]
  rx363_cstack_done:
    pop rx363_rep, rx363_bstack
    pop rx363_pos, rx363_bstack
    pop $I19, rx363_bstack
    lt rx363_pos, -1, rx363_done
    lt rx363_pos, 0, rx363_fail
    eq $I19, 0, rx363_fail
    if_null rx363_cstack, rx363_jump
    elements $I18, rx363_bstack
    le $I18, 0, rx363_cut
    dec $I18
    set $I18, rx363_bstack[$I18]
  rx363_cut:
    assign rx363_cstack, $I18
  rx363_jump:
    jump $I19
  rx363_done:
    rx363_cur."!cursor_fail"()
    .return (rx363_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "100_1338064451.944_caps"  :subid("503_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    new $P104, "Hash"
    set $P104["statement_prefix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "100_1338064451.944_nfa"  :subid("504_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "statement_prefix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<lambda>"  :subid("101_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1802
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 912
    .lex "self", param_1802
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1803
    .lex "$/", $P1804
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    (rx366_cur, rx366_tgt, rx366_pos, rx366_curclass, rx366_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done
    goto rxscan367_scan
  rxscan367_loop:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan:
    nqp_rxmark rx366_bstack, rxscan367_loop, rx366_pos, 0
  rxscan367_done:
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail
    nqp_rxmark rx366_bstack, rxsubrule368_pass, -1, 0
  rxsubrule368_pass:
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx366_pos, $P11, rx366_curclass, "$!pos"
    rx366_cur."!cursor_pass"(rx366_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail:
    unless rx366_bstack, rx366_done
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done
    unless rx366_cstack, rx366_cstack_done
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done
    lt rx366_pos, 0, rx366_fail
    eq $I19, 0, rx366_fail
    if_null rx366_cstack, rx366_jump
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut:
    assign rx366_cstack, $I18
  rx366_jump:
    jump $I19
  rx366_done:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "101_1338064451.944_caps"  :subid("505_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 912
    new $P104, "Hash"
    set $P104["pblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "101_1338064451.944_nfa"  :subid("506_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 912
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "lambda"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "fatarrow"  :subid("102_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1808
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .lex "self", param_1808
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1809
    .lex "$/", $P1810
    .local string rx369_tgt
    .local int rx369_pos
    .local int rx369_off
    .local int rx369_eos
    .local int rx369_rep
    .local pmc rx369_cur
    .local pmc rx369_curclass
    .local pmc rx369_bstack
    .local pmc rx369_cstack
    (rx369_cur, rx369_tgt, rx369_pos, rx369_curclass, rx369_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx369_cur
    length rx369_eos, rx369_tgt
    eq $I19, 1, rx369_restart
    repr_get_attr_int $I11, self, rx369_curclass, "$!from"
    ne $I11, -1, rxscan370_done
    goto rxscan370_scan
  rxscan370_loop:
    inc rx369_pos
    gt rx369_pos, rx369_eos, rx369_fail
    repr_bind_attr_int rx369_cur, rx369_curclass, "$!from", rx369_pos
  rxscan370_scan:
    nqp_rxmark rx369_bstack, rxscan370_loop, rx369_pos, 0
  rxscan370_done:
    repr_bind_attr_int rx369_cur, rx369_curclass, "$!pos", rx369_pos
    $P11 = rx369_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx369_curclass, "$!pos"
    lt $I11, 0, rx369_fail
    nqp_rxmark rx369_bstack, rxsubrule371_pass, -1, 0
  rxsubrule371_pass:
    rx369_cstack = rx369_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx369_pos, $P11, rx369_curclass, "$!pos"
  # rx rxquantr372 ** 0..-1
    nqp_rxmark rx369_bstack, rxquantr372_done, rx369_pos, 0
  rxquantr372_loop:
    ge rx369_pos, rx369_eos, rx369_fail
    substr $S11, rx369_tgt, rx369_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx369_fail
    inc rx369_pos
    nqp_rxpeek $I19, rx369_bstack, rxquantr372_done
    inc $I19
    inc $I19
    set rx369_rep, rx369_bstack[$I19]
    nqp_rxcommit rx369_bstack, rxquantr372_done
    inc rx369_rep
    nqp_rxmark rx369_bstack, rxquantr372_done, rx369_pos, rx369_rep
    goto rxquantr372_loop
  rxquantr372_done:
    add $I11, rx369_pos, 2
    gt $I11, rx369_eos, rx369_fail
    substr $S10, rx369_tgt, rx369_pos, 2
    ne $S10, ucs4:"=>", rx369_fail
    add rx369_pos, 2
    repr_bind_attr_int rx369_cur, rx369_curclass, "$!pos", rx369_pos
    $P11 = rx369_cur."ws"()
    repr_get_attr_int $I11, $P11, rx369_curclass, "$!pos"
    lt $I11, 0, rx369_fail
    repr_get_attr_int rx369_pos, $P11, rx369_curclass, "$!pos"
    repr_bind_attr_int rx369_cur, rx369_curclass, "$!pos", rx369_pos
    $P11 = rx369_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx369_curclass, "$!pos"
    lt $I11, 0, rx369_fail
    nqp_rxmark rx369_bstack, rxsubrule374_pass, -1, 0
  rxsubrule374_pass:
    rx369_cstack = rx369_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx369_pos, $P11, rx369_curclass, "$!pos"
    rx369_cur."!cursor_pass"(rx369_pos, "fatarrow", 'backtrack'=>1)
    .return (rx369_cur)
  rx369_restart:
    repr_get_attr_obj rx369_cstack, rx369_cur, rx369_curclass, "$!cstack"
  rx369_fail:
    unless rx369_bstack, rx369_done
    pop $I19, rx369_bstack
    if_null rx369_cstack, rx369_cstack_done
    unless rx369_cstack, rx369_cstack_done
    dec $I19
    set $P11, rx369_cstack[$I19]
  rx369_cstack_done:
    pop rx369_rep, rx369_bstack
    pop rx369_pos, rx369_bstack
    pop $I19, rx369_bstack
    lt rx369_pos, -1, rx369_done
    lt rx369_pos, 0, rx369_fail
    eq $I19, 0, rx369_fail
    if_null rx369_cstack, rx369_jump
    elements $I18, rx369_bstack
    le $I18, 0, rx369_cut
    dec $I18
    set $I18, rx369_bstack[$I18]
  rx369_cut:
    assign rx369_cstack, $I18
  rx369_jump:
    jump $I19
  rx369_done:
    rx369_cur."!cursor_fail"()
    .return (rx369_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "102_1338064451.944_caps"  :subid("507_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    new $P104, "Hash"
    set $P104["key"], 0
    set $P104["val"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "102_1338064451.944_nfa"  :subid("508_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 62
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "EXPR"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "colonpair"  :subid("103_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1814
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    .lex "self", param_1814
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1815
    .lex "$/", $P1816
    .local string rx375_tgt
    .local int rx375_pos
    .local int rx375_off
    .local int rx375_eos
    .local int rx375_rep
    .local pmc rx375_cur
    .local pmc rx375_curclass
    .local pmc rx375_bstack
    .local pmc rx375_cstack
    (rx375_cur, rx375_tgt, rx375_pos, rx375_curclass, rx375_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx375_cur
    length rx375_eos, rx375_tgt
    eq $I19, 1, rx375_restart
    repr_get_attr_int $I11, self, rx375_curclass, "$!from"
    ne $I11, -1, rxscan376_done
    goto rxscan376_scan
  rxscan376_loop:
    inc rx375_pos
    gt rx375_pos, rx375_eos, rx375_fail
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!from", rx375_pos
  rxscan376_scan:
    nqp_rxmark rx375_bstack, rxscan376_loop, rx375_pos, 0
  rxscan376_done:
    add $I11, rx375_pos, 1
    gt $I11, rx375_eos, rx375_fail
    substr $S10, rx375_tgt, rx375_pos, 1
    ne $S10, ucs4:":", rx375_fail
    add rx375_pos, 1
  alt377_0:
    nqp_rxmark rx375_bstack, alt377_1, rx375_pos, 0
    nqp_rxmark rx375_bstack, rxcap378_fail, rx375_pos, 0
    add $I11, rx375_pos, 1
    gt $I11, rx375_eos, rx375_fail
    substr $S10, rx375_tgt, rx375_pos, 1
    ne $S10, ucs4:"!", rx375_fail
    add rx375_pos, 1
    nqp_rxpeek $I19, rx375_bstack, rxcap378_fail
    inc $I19
    set $I11, rx375_bstack[$I19]
    $P11 = rx375_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx375_pos)
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "not")
    goto rxcap378_done
  rxcap378_fail:
    goto rx375_fail
  rxcap378_done:
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail
    nqp_rxmark rx375_bstack, rxsubrule379_pass, -1, 0
  rxsubrule379_pass:
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx375_pos, $P11, rx375_curclass, "$!pos"
    goto alt377_end
  alt377_1:
    nqp_rxmark rx375_bstack, alt377_2, rx375_pos, 0
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail
    nqp_rxmark rx375_bstack, rxsubrule380_pass, -1, 0
  rxsubrule380_pass:
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx375_pos, $P11, rx375_curclass, "$!pos"
  # rx rxquantr381 ** 0..1
    nqp_rxmark rx375_bstack, rxquantr381_done, rx375_pos, 0
  rxquantr381_loop:
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail
    goto rxsubrule382_pass
  rxsubrule382_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail
  rxsubrule382_pass:
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule382_back
    push rx375_bstack, $I11
    push rx375_bstack, 0
    push rx375_bstack, rx375_pos
    elements $I11, rx375_cstack
    push rx375_bstack, $I11
    repr_get_attr_int rx375_pos, $P11, rx375_curclass, "$!pos"
    nqp_rxpeek $I19, rx375_bstack, rxquantr381_done
    inc $I19
    inc $I19
    set rx375_rep, rx375_bstack[$I19]
    nqp_rxcommit rx375_bstack, rxquantr381_done
    inc rx375_rep
  rxquantr381_done:
    goto alt377_end
  alt377_2:
    nqp_rxmark rx375_bstack, alt377_3, rx375_pos, 0
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail
    nqp_rxmark rx375_bstack, rxsubrule383_pass, -1, 0
  rxsubrule383_pass:
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx375_pos, $P11, rx375_curclass, "$!pos"
    goto alt377_end
  alt377_3:
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."variable"()
    repr_get_attr_int $I11, $P11, rx375_curclass, "$!pos"
    lt $I11, 0, rx375_fail
    nqp_rxmark rx375_bstack, rxsubrule384_pass, -1, 0
  rxsubrule384_pass:
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx375_pos, $P11, rx375_curclass, "$!pos"
  alt377_end:
    rx375_cur."!cursor_pass"(rx375_pos, "colonpair", 'backtrack'=>1)
    .return (rx375_cur)
  rx375_restart:
    repr_get_attr_obj rx375_cstack, rx375_cur, rx375_curclass, "$!cstack"
  rx375_fail:
    unless rx375_bstack, rx375_done
    pop $I19, rx375_bstack
    if_null rx375_cstack, rx375_cstack_done
    unless rx375_cstack, rx375_cstack_done
    dec $I19
    set $P11, rx375_cstack[$I19]
  rx375_cstack_done:
    pop rx375_rep, rx375_bstack
    pop rx375_pos, rx375_bstack
    pop $I19, rx375_bstack
    lt rx375_pos, -1, rx375_done
    lt rx375_pos, 0, rx375_fail
    eq $I19, 0, rx375_fail
    if_null rx375_cstack, rx375_jump
    elements $I18, rx375_bstack
    le $I18, 0, rx375_cut
    dec $I18
    set $I18, rx375_bstack[$I18]
  rx375_cut:
    assign rx375_cstack, $I18
  rx375_jump:
    jump $I19
  rx375_done:
    rx375_cur."!cursor_fail"()
    .return (rx375_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "103_1338064451.944_caps"  :subid("509_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    new $P104, "Hash"
    set $P104["not"], 0
    set $P104["identifier"], 0
    set $P104["circumfix"], 2
    set $P104["variable"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "103_1338064451.944_nfa"  :subid("510_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 33
    push $P106, 3
    push $P106, 8
    push $P106, "identifier"
    push $P106, 4
    push $P106, 8
    push $P106, "circumfix"
    push $P106, 0
    push $P106, 8
    push $P106, "variable"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "identifier"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "circumfix"
    push $P108, 0
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable"  :subid("104_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1820
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    .lex "self", param_1820
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1821
    .lex "$/", $P1822
    .local string rx385_tgt
    .local int rx385_pos
    .local int rx385_off
    .local int rx385_eos
    .local int rx385_rep
    .local pmc rx385_cur
    .local pmc rx385_curclass
    .local pmc rx385_bstack
    .local pmc rx385_cstack
    (rx385_cur, rx385_tgt, rx385_pos, rx385_curclass, rx385_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx385_cur
    length rx385_eos, rx385_tgt
    eq $I19, 1, rx385_restart
    repr_get_attr_int $I11, self, rx385_curclass, "$!from"
    ne $I11, -1, rxscan386_done
    goto rxscan386_scan
  rxscan386_loop:
    inc rx385_pos
    gt rx385_pos, rx385_eos, rx385_fail
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!from", rx385_pos
  rxscan386_scan:
    nqp_rxmark rx385_bstack, rxscan386_loop, rx385_pos, 0
  rxscan386_done:
  alt387_0:
    nqp_rxmark rx385_bstack, alt387_1, rx385_pos, 0
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail
    nqp_rxmark rx385_bstack, rxsubrule388_pass, -1, 0
  rxsubrule388_pass:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
  # rx rxquantr389 ** 0..1
    nqp_rxmark rx385_bstack, rxquantr389_done, rx385_pos, 0
  rxquantr389_loop:
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail
    goto rxsubrule390_pass
  rxsubrule390_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail
  rxsubrule390_pass:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule390_back
    push rx385_bstack, $I11
    push rx385_bstack, 0
    push rx385_bstack, rx385_pos
    elements $I11, rx385_cstack
    push rx385_bstack, $I11
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    nqp_rxpeek $I19, rx385_bstack, rxquantr389_done
    inc $I19
    inc $I19
    set rx385_rep, rx385_bstack[$I19]
    nqp_rxcommit rx385_bstack, rxquantr389_done
    inc rx385_rep
  rxquantr389_done:
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."name"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail
    nqp_rxmark rx385_bstack, rxsubrule391_pass, -1, 0
  rxsubrule391_pass:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    goto alt387_end
  alt387_1:
    nqp_rxmark rx385_bstack, alt387_2, rx385_pos, 0
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail
    nqp_rxmark rx385_bstack, rxsubrule392_pass, -1, 0
  rxsubrule392_pass:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    ge rx385_pos, rx385_eos, rx385_fail
    substr $S11, rx385_tgt, rx385_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx385_fail
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail
    nqp_rxmark rx385_bstack, rxsubrule393_pass, -1, 0
  rxsubrule393_pass:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    goto alt387_end
  alt387_2:
    nqp_rxmark rx385_bstack, rxcap394_fail, rx385_pos, 0
    add $I11, rx385_pos, 1
    gt $I11, rx385_eos, rx385_fail
    substr $S10, rx385_tgt, rx385_pos, 1
    ne $S10, ucs4:"$", rx385_fail
    add rx385_pos, 1
    nqp_rxpeek $I19, rx385_bstack, rxcap394_fail
    inc $I19
    set $I11, rx385_bstack[$I19]
    $P11 = rx385_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx385_pos)
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "sigil")
    goto rxcap394_done
  rxcap394_fail:
    goto rx385_fail
  rxcap394_done:
    nqp_rxmark rx385_bstack, rxcap395_fail, rx385_pos, 0
    ge rx385_pos, rx385_eos, rx385_fail
    substr $S11, rx385_tgt, rx385_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx385_fail
    inc rx385_pos
    nqp_rxpeek $I19, rx385_bstack, rxcap395_fail
    inc $I19
    set $I11, rx385_bstack[$I19]
    $P11 = rx385_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx385_pos)
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap395_done
  rxcap395_fail:
    goto rx385_fail
  rxcap395_done:
  alt387_end:
    rx385_cur."!cursor_pass"(rx385_pos, "variable", 'backtrack'=>1)
    .return (rx385_cur)
  rx385_restart:
    repr_get_attr_obj rx385_cstack, rx385_cur, rx385_curclass, "$!cstack"
  rx385_fail:
    unless rx385_bstack, rx385_done
    pop $I19, rx385_bstack
    if_null rx385_cstack, rx385_cstack_done
    unless rx385_cstack, rx385_cstack_done
    dec $I19
    set $P11, rx385_cstack[$I19]
  rx385_cstack_done:
    pop rx385_rep, rx385_bstack
    pop rx385_pos, rx385_bstack
    pop $I19, rx385_bstack
    lt rx385_pos, -1, rx385_done
    lt rx385_pos, 0, rx385_fail
    eq $I19, 0, rx385_fail
    if_null rx385_cstack, rx385_jump
    elements $I18, rx385_bstack
    le $I18, 0, rx385_cut
    dec $I18
    set $I18, rx385_bstack[$I18]
  rx385_cut:
    assign rx385_cstack, $I18
  rx385_jump:
    jump $I19
  rx385_done:
    rx385_cur."!cursor_fail"()
    .return (rx385_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "104_1338064451.944_caps"  :subid("511_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    new $P104, "Hash"
    set $P104["sigil"], 0
    set $P104["twigil"], 2
    set $P104["desigilname"], 0
    set $P104["postcircumfix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "104_1338064451.944_nfa"  :subid("512_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "sigil"
    push $P105, 2
    push $P105, 8
    push $P105, "sigil"
    push $P105, 4
    push $P105, 2
    push $P105, 36
    push $P105, 6
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "twigil"
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "name"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "<["
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 6
    push $P110, "/_!"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "sigil"  :subid("105_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1826
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    .lex "self", param_1826
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1827
    .lex "$/", $P1828
    .local string rx396_tgt
    .local int rx396_pos
    .local int rx396_off
    .local int rx396_eos
    .local int rx396_rep
    .local pmc rx396_cur
    .local pmc rx396_curclass
    .local pmc rx396_bstack
    .local pmc rx396_cstack
    (rx396_cur, rx396_tgt, rx396_pos, rx396_curclass, rx396_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx396_cur
    length rx396_eos, rx396_tgt
    eq $I19, 1, rx396_restart
    repr_get_attr_int $I11, self, rx396_curclass, "$!from"
    ne $I11, -1, rxscan397_done
    goto rxscan397_scan
  rxscan397_loop:
    inc rx396_pos
    gt rx396_pos, rx396_eos, rx396_fail
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!from", rx396_pos
  rxscan397_scan:
    nqp_rxmark rx396_bstack, rxscan397_loop, rx396_pos, 0
  rxscan397_done:
    ge rx396_pos, rx396_eos, rx396_fail
    substr $S11, rx396_tgt, rx396_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx396_fail
    inc rx396_pos
    rx396_cur."!cursor_pass"(rx396_pos, "sigil", 'backtrack'=>1)
    .return (rx396_cur)
  rx396_restart:
    repr_get_attr_obj rx396_cstack, rx396_cur, rx396_curclass, "$!cstack"
  rx396_fail:
    unless rx396_bstack, rx396_done
    pop $I19, rx396_bstack
    if_null rx396_cstack, rx396_cstack_done
    unless rx396_cstack, rx396_cstack_done
    dec $I19
    set $P11, rx396_cstack[$I19]
  rx396_cstack_done:
    pop rx396_rep, rx396_bstack
    pop rx396_pos, rx396_bstack
    pop $I19, rx396_bstack
    lt rx396_pos, -1, rx396_done
    lt rx396_pos, 0, rx396_fail
    eq $I19, 0, rx396_fail
    if_null rx396_cstack, rx396_jump
    elements $I18, rx396_bstack
    le $I18, 0, rx396_cut
    dec $I18
    set $I18, rx396_bstack[$I18]
  rx396_cut:
    assign rx396_cstack, $I18
  rx396_jump:
    jump $I19
  rx396_done:
    rx396_cur."!cursor_fail"()
    .return (rx396_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "105_1338064451.944_caps"  :subid("513_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "105_1338064451.944_nfa"  :subid("514_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "$@%&"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "twigil"  :subid("106_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1832
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    .lex "self", param_1832
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1833
    .lex "$/", $P1834
    .local string rx398_tgt
    .local int rx398_pos
    .local int rx398_off
    .local int rx398_eos
    .local int rx398_rep
    .local pmc rx398_cur
    .local pmc rx398_curclass
    .local pmc rx398_bstack
    .local pmc rx398_cstack
    (rx398_cur, rx398_tgt, rx398_pos, rx398_curclass, rx398_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx398_cur
    length rx398_eos, rx398_tgt
    eq $I19, 1, rx398_restart
    repr_get_attr_int $I11, self, rx398_curclass, "$!from"
    ne $I11, -1, rxscan399_done
    goto rxscan399_scan
  rxscan399_loop:
    inc rx398_pos
    gt rx398_pos, rx398_eos, rx398_fail
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!from", rx398_pos
  rxscan399_scan:
    nqp_rxmark rx398_bstack, rxscan399_loop, rx398_pos, 0
  rxscan399_done:
    ge rx398_pos, rx398_eos, rx398_fail
    substr $S11, rx398_tgt, rx398_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx398_fail
    inc rx398_pos
    rx398_cur."!cursor_pass"(rx398_pos, "twigil", 'backtrack'=>1)
    .return (rx398_cur)
  rx398_restart:
    repr_get_attr_obj rx398_cstack, rx398_cur, rx398_curclass, "$!cstack"
  rx398_fail:
    unless rx398_bstack, rx398_done
    pop $I19, rx398_bstack
    if_null rx398_cstack, rx398_cstack_done
    unless rx398_cstack, rx398_cstack_done
    dec $I19
    set $P11, rx398_cstack[$I19]
  rx398_cstack_done:
    pop rx398_rep, rx398_bstack
    pop rx398_pos, rx398_bstack
    pop $I19, rx398_bstack
    lt rx398_pos, -1, rx398_done
    lt rx398_pos, 0, rx398_fail
    eq $I19, 0, rx398_fail
    if_null rx398_cstack, rx398_jump
    elements $I18, rx398_bstack
    le $I18, 0, rx398_cut
    dec $I18
    set $I18, rx398_bstack[$I18]
  rx398_cut:
    assign rx398_cstack, $I18
  rx398_jump:
    jump $I19
  rx398_done:
    rx398_cur."!cursor_fail"()
    .return (rx398_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "106_1338064451.944_caps"  :subid("515_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "106_1338064451.944_nfa"  :subid("516_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "*!?"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator"  :subid("107_1338064451.944")
    .param pmc param_1838
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 938
    .lex "self", param_1838
    $P103 = param_1838."!protoregex"("package_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<module>"  :subid("108_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1840
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    .lex "self", param_1840
.annotate 'line', 940
    new $P103, "Undef"
    set $P1841, $P103
    .lex "$*OUTERPACKAGE", $P1841
.annotate 'line', 941
    new $P104, "Undef"
    set $P1842, $P104
    .lex "$*PKGDECL", $P1842
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1843
    .lex "$/", $P1844
.annotate 'line', 939
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    (rx400_cur, rx400_tgt, rx400_pos, rx400_curclass, rx400_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done
    goto rxscan401_scan
  rxscan401_loop:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan:
    nqp_rxmark rx400_bstack, rxscan401_loop, rx400_pos, 0
  rxscan401_done:
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    store_lex unicode:"$\x{a2}", rx400_cur
.annotate 'line', 940
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1261
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1262
    die "Contextual $*PACKAGE not found"
  vivify_1262:
  vivify_1261:
    set $P1841, $P108
.annotate 'line', 939
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    store_lex unicode:"$\x{a2}", rx400_cur
.annotate 'line', 941
    new $P109, "String"
    assign $P109, "module"
    set $P1842, $P109
.annotate 'line', 939
    nqp_rxmark rx400_bstack, rxcap402_fail, rx400_pos, 0
    add $I11, rx400_pos, 6
    gt $I11, rx400_eos, rx400_fail
    substr $S10, rx400_tgt, rx400_pos, 6
    ne $S10, ucs4:"module", rx400_fail
    add rx400_pos, 6
    nqp_rxpeek $I19, rx400_bstack, rxcap402_fail
    inc $I19
    set $I11, rx400_bstack[$I19]
    $P11 = rx400_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx400_pos)
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "sym")
    goto rxcap402_done
  rxcap402_fail:
    goto rx400_fail
  rxcap402_done:
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail
    nqp_rxmark rx400_bstack, rxsubrule403_pass, -1, 0
  rxsubrule403_pass:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    rx400_cur."!cursor_pass"(rx400_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail:
    unless rx400_bstack, rx400_done
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done
    unless rx400_cstack, rx400_cstack_done
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done
    lt rx400_pos, 0, rx400_fail
    eq $I19, 0, rx400_fail
    if_null rx400_cstack, rx400_jump
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut:
    assign rx400_cstack, $I18
  rx400_jump:
    jump $I19
  rx400_done:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "108_1338064451.944_caps"  :subid("517_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "108_1338064451.944_nfa"  :subid("518_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 109
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 111
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 100
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 117
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 108
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 101
    push $P114, 9
    new $P115, "ResizablePMCArray"
    push $P115, 8
    push $P115, "package_def"
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, $P106
    push $P116, $P107
    push $P116, $P108
    push $P116, $P109
    push $P116, $P110
    push $P116, $P111
    push $P116, $P112
    push $P116, $P113
    push $P116, $P114
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<knowhow>"  :subid("109_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1848
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 944
    .lex "self", param_1848
.annotate 'line', 945
    new $P103, "Undef"
    set $P1849, $P103
    .lex "$*OUTERPACKAGE", $P1849
.annotate 'line', 946
    new $P104, "Undef"
    set $P1850, $P104
    .lex "$*PKGDECL", $P1850
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1851
    .lex "$/", $P1852
.annotate 'line', 944
    .local string rx404_tgt
    .local int rx404_pos
    .local int rx404_off
    .local int rx404_eos
    .local int rx404_rep
    .local pmc rx404_cur
    .local pmc rx404_curclass
    .local pmc rx404_bstack
    .local pmc rx404_cstack
    (rx404_cur, rx404_tgt, rx404_pos, rx404_curclass, rx404_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx404_cur
    length rx404_eos, rx404_tgt
    eq $I19, 1, rx404_restart
    repr_get_attr_int $I11, self, rx404_curclass, "$!from"
    ne $I11, -1, rxscan405_done
    goto rxscan405_scan
  rxscan405_loop:
    inc rx404_pos
    gt rx404_pos, rx404_eos, rx404_fail
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!from", rx404_pos
  rxscan405_scan:
    nqp_rxmark rx404_bstack, rxscan405_loop, rx404_pos, 0
  rxscan405_done:
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    store_lex unicode:"$\x{a2}", rx404_cur
.annotate 'line', 945
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1263
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1264
    die "Contextual $*PACKAGE not found"
  vivify_1264:
  vivify_1263:
    set $P1849, $P108
.annotate 'line', 944
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    store_lex unicode:"$\x{a2}", rx404_cur
.annotate 'line', 946
    new $P109, "String"
    assign $P109, "knowhow"
    set $P1850, $P109
.annotate 'line', 944
    nqp_rxmark rx404_bstack, rxcap406_fail, rx404_pos, 0
    add $I11, rx404_pos, 7
    gt $I11, rx404_eos, rx404_fail
    substr $S10, rx404_tgt, rx404_pos, 7
    ne $S10, ucs4:"knowhow", rx404_fail
    add rx404_pos, 7
    nqp_rxpeek $I19, rx404_bstack, rxcap406_fail
    inc $I19
    set $I11, rx404_bstack[$I19]
    $P11 = rx404_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx404_pos)
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "sym")
    goto rxcap406_done
  rxcap406_fail:
    goto rx404_fail
  rxcap406_done:
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail
    nqp_rxmark rx404_bstack, rxsubrule407_pass, -1, 0
  rxsubrule407_pass:
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    rx404_cur."!cursor_pass"(rx404_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx404_cur)
  rx404_restart:
    repr_get_attr_obj rx404_cstack, rx404_cur, rx404_curclass, "$!cstack"
  rx404_fail:
    unless rx404_bstack, rx404_done
    pop $I19, rx404_bstack
    if_null rx404_cstack, rx404_cstack_done
    unless rx404_cstack, rx404_cstack_done
    dec $I19
    set $P11, rx404_cstack[$I19]
  rx404_cstack_done:
    pop rx404_rep, rx404_bstack
    pop rx404_pos, rx404_bstack
    pop $I19, rx404_bstack
    lt rx404_pos, -1, rx404_done
    lt rx404_pos, 0, rx404_fail
    eq $I19, 0, rx404_fail
    if_null rx404_cstack, rx404_jump
    elements $I18, rx404_bstack
    le $I18, 0, rx404_cut
    dec $I18
    set $I18, rx404_bstack[$I18]
  rx404_cut:
    assign rx404_cstack, $I18
  rx404_jump:
    jump $I19
  rx404_done:
    rx404_cur."!cursor_fail"()
    .return (rx404_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "109_1338064451.944_caps"  :subid("519_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 944
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "109_1338064451.944_nfa"  :subid("520_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 944
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 107
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 110
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 119
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 104
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 111
    push $P114, 9
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 119
    push $P115, 10
    new $P116, "ResizablePMCArray"
    push $P116, 8
    push $P116, "package_def"
    push $P116, 0
    new $P117, "ResizablePMCArray"
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<class>"  :subid("110_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1856
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    .lex "self", param_1856
.annotate 'line', 950
    new $P103, "Undef"
    set $P1857, $P103
    .lex "$*OUTERPACKAGE", $P1857
.annotate 'line', 951
    new $P104, "Undef"
    set $P1858, $P104
    .lex "$*PKGDECL", $P1858
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1859
    .lex "$/", $P1860
.annotate 'line', 949
    .local string rx408_tgt
    .local int rx408_pos
    .local int rx408_off
    .local int rx408_eos
    .local int rx408_rep
    .local pmc rx408_cur
    .local pmc rx408_curclass
    .local pmc rx408_bstack
    .local pmc rx408_cstack
    (rx408_cur, rx408_tgt, rx408_pos, rx408_curclass, rx408_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx408_cur
    length rx408_eos, rx408_tgt
    eq $I19, 1, rx408_restart
    repr_get_attr_int $I11, self, rx408_curclass, "$!from"
    ne $I11, -1, rxscan409_done
    goto rxscan409_scan
  rxscan409_loop:
    inc rx408_pos
    gt rx408_pos, rx408_eos, rx408_fail
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!from", rx408_pos
  rxscan409_scan:
    nqp_rxmark rx408_bstack, rxscan409_loop, rx408_pos, 0
  rxscan409_done:
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    store_lex unicode:"$\x{a2}", rx408_cur
.annotate 'line', 950
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1265
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1266
    die "Contextual $*PACKAGE not found"
  vivify_1266:
  vivify_1265:
    set $P1857, $P108
.annotate 'line', 949
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    store_lex unicode:"$\x{a2}", rx408_cur
.annotate 'line', 951
    new $P109, "String"
    assign $P109, "class"
    set $P1858, $P109
.annotate 'line', 949
    nqp_rxmark rx408_bstack, rxcap410_fail, rx408_pos, 0
    add $I11, rx408_pos, 5
    gt $I11, rx408_eos, rx408_fail
    substr $S10, rx408_tgt, rx408_pos, 5
    ne $S10, ucs4:"class", rx408_fail
    add rx408_pos, 5
    nqp_rxpeek $I19, rx408_bstack, rxcap410_fail
    inc $I19
    set $I11, rx408_bstack[$I19]
    $P11 = rx408_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx408_pos)
    rx408_cstack = rx408_cur."!cursor_capture"($P11, "sym")
    goto rxcap410_done
  rxcap410_fail:
    goto rx408_fail
  rxcap410_done:
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail
    nqp_rxmark rx408_bstack, rxsubrule411_pass, -1, 0
  rxsubrule411_pass:
    rx408_cstack = rx408_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    rx408_cur."!cursor_pass"(rx408_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx408_cur)
  rx408_restart:
    repr_get_attr_obj rx408_cstack, rx408_cur, rx408_curclass, "$!cstack"
  rx408_fail:
    unless rx408_bstack, rx408_done
    pop $I19, rx408_bstack
    if_null rx408_cstack, rx408_cstack_done
    unless rx408_cstack, rx408_cstack_done
    dec $I19
    set $P11, rx408_cstack[$I19]
  rx408_cstack_done:
    pop rx408_rep, rx408_bstack
    pop rx408_pos, rx408_bstack
    pop $I19, rx408_bstack
    lt rx408_pos, -1, rx408_done
    lt rx408_pos, 0, rx408_fail
    eq $I19, 0, rx408_fail
    if_null rx408_cstack, rx408_jump
    elements $I18, rx408_bstack
    le $I18, 0, rx408_cut
    dec $I18
    set $I18, rx408_bstack[$I18]
  rx408_cut:
    assign rx408_cstack, $I18
  rx408_jump:
    jump $I19
  rx408_done:
    rx408_cur."!cursor_fail"()
    .return (rx408_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "110_1338064451.944_caps"  :subid("521_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "110_1338064451.944_nfa"  :subid("522_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 99
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 108
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 97
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 115
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 115
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 8
    push $P114, "package_def"
    push $P114, 0
    new $P115, "ResizablePMCArray"
    push $P115, $P106
    push $P115, $P107
    push $P115, $P108
    push $P115, $P109
    push $P115, $P110
    push $P115, $P111
    push $P115, $P112
    push $P115, $P113
    push $P115, $P114
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<grammar>"  :subid("111_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1864
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    .lex "self", param_1864
.annotate 'line', 955
    new $P103, "Undef"
    set $P1865, $P103
    .lex "$*OUTERPACKAGE", $P1865
.annotate 'line', 956
    new $P104, "Undef"
    set $P1866, $P104
    .lex "$*PKGDECL", $P1866
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1867
    .lex "$/", $P1868
.annotate 'line', 954
    .local string rx412_tgt
    .local int rx412_pos
    .local int rx412_off
    .local int rx412_eos
    .local int rx412_rep
    .local pmc rx412_cur
    .local pmc rx412_curclass
    .local pmc rx412_bstack
    .local pmc rx412_cstack
    (rx412_cur, rx412_tgt, rx412_pos, rx412_curclass, rx412_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx412_cur
    length rx412_eos, rx412_tgt
    eq $I19, 1, rx412_restart
    repr_get_attr_int $I11, self, rx412_curclass, "$!from"
    ne $I11, -1, rxscan413_done
    goto rxscan413_scan
  rxscan413_loop:
    inc rx412_pos
    gt rx412_pos, rx412_eos, rx412_fail
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!from", rx412_pos
  rxscan413_scan:
    nqp_rxmark rx412_bstack, rxscan413_loop, rx412_pos, 0
  rxscan413_done:
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    store_lex unicode:"$\x{a2}", rx412_cur
.annotate 'line', 955
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1267
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1268
    die "Contextual $*PACKAGE not found"
  vivify_1268:
  vivify_1267:
    set $P1865, $P108
.annotate 'line', 954
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    store_lex unicode:"$\x{a2}", rx412_cur
.annotate 'line', 956
    new $P109, "String"
    assign $P109, "grammar"
    set $P1866, $P109
.annotate 'line', 954
    nqp_rxmark rx412_bstack, rxcap414_fail, rx412_pos, 0
    add $I11, rx412_pos, 7
    gt $I11, rx412_eos, rx412_fail
    substr $S10, rx412_tgt, rx412_pos, 7
    ne $S10, ucs4:"grammar", rx412_fail
    add rx412_pos, 7
    nqp_rxpeek $I19, rx412_bstack, rxcap414_fail
    inc $I19
    set $I11, rx412_bstack[$I19]
    $P11 = rx412_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx412_pos)
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "sym")
    goto rxcap414_done
  rxcap414_fail:
    goto rx412_fail
  rxcap414_done:
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail
    nqp_rxmark rx412_bstack, rxsubrule415_pass, -1, 0
  rxsubrule415_pass:
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    rx412_cur."!cursor_pass"(rx412_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx412_cur)
  rx412_restart:
    repr_get_attr_obj rx412_cstack, rx412_cur, rx412_curclass, "$!cstack"
  rx412_fail:
    unless rx412_bstack, rx412_done
    pop $I19, rx412_bstack
    if_null rx412_cstack, rx412_cstack_done
    unless rx412_cstack, rx412_cstack_done
    dec $I19
    set $P11, rx412_cstack[$I19]
  rx412_cstack_done:
    pop rx412_rep, rx412_bstack
    pop rx412_pos, rx412_bstack
    pop $I19, rx412_bstack
    lt rx412_pos, -1, rx412_done
    lt rx412_pos, 0, rx412_fail
    eq $I19, 0, rx412_fail
    if_null rx412_cstack, rx412_jump
    elements $I18, rx412_bstack
    le $I18, 0, rx412_cut
    dec $I18
    set $I18, rx412_bstack[$I18]
  rx412_cut:
    assign rx412_cstack, $I18
  rx412_jump:
    jump $I19
  rx412_done:
    rx412_cur."!cursor_fail"()
    .return (rx412_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "111_1338064451.944_caps"  :subid("523_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "111_1338064451.944_nfa"  :subid("524_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 103
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 114
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 97
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 109
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 109
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 97
    push $P114, 9
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 114
    push $P115, 10
    new $P116, "ResizablePMCArray"
    push $P116, 8
    push $P116, "package_def"
    push $P116, 0
    new $P117, "ResizablePMCArray"
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<role>"  :subid("112_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1872
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    .lex "self", param_1872
.annotate 'line', 960
    new $P103, "Undef"
    set $P1873, $P103
    .lex "$*OUTERPACKAGE", $P1873
.annotate 'line', 961
    new $P104, "Undef"
    set $P1874, $P104
    .lex "$*PKGDECL", $P1874
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1875
    .lex "$/", $P1876
.annotate 'line', 959
    .local string rx416_tgt
    .local int rx416_pos
    .local int rx416_off
    .local int rx416_eos
    .local int rx416_rep
    .local pmc rx416_cur
    .local pmc rx416_curclass
    .local pmc rx416_bstack
    .local pmc rx416_cstack
    (rx416_cur, rx416_tgt, rx416_pos, rx416_curclass, rx416_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx416_cur
    length rx416_eos, rx416_tgt
    eq $I19, 1, rx416_restart
    repr_get_attr_int $I11, self, rx416_curclass, "$!from"
    ne $I11, -1, rxscan417_done
    goto rxscan417_scan
  rxscan417_loop:
    inc rx416_pos
    gt rx416_pos, rx416_eos, rx416_fail
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!from", rx416_pos
  rxscan417_scan:
    nqp_rxmark rx416_bstack, rxscan417_loop, rx416_pos, 0
  rxscan417_done:
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!pos", rx416_pos
    store_lex unicode:"$\x{a2}", rx416_cur
.annotate 'line', 960
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1269
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1270
    die "Contextual $*PACKAGE not found"
  vivify_1270:
  vivify_1269:
    set $P1873, $P108
.annotate 'line', 959
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!pos", rx416_pos
    store_lex unicode:"$\x{a2}", rx416_cur
.annotate 'line', 961
    new $P109, "String"
    assign $P109, "role"
    set $P1874, $P109
.annotate 'line', 959
    nqp_rxmark rx416_bstack, rxcap418_fail, rx416_pos, 0
    add $I11, rx416_pos, 4
    gt $I11, rx416_eos, rx416_fail
    substr $S10, rx416_tgt, rx416_pos, 4
    ne $S10, ucs4:"role", rx416_fail
    add rx416_pos, 4
    nqp_rxpeek $I19, rx416_bstack, rxcap418_fail
    inc $I19
    set $I11, rx416_bstack[$I19]
    $P11 = rx416_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx416_pos)
    rx416_cstack = rx416_cur."!cursor_capture"($P11, "sym")
    goto rxcap418_done
  rxcap418_fail:
    goto rx416_fail
  rxcap418_done:
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!pos", rx416_pos
    $P11 = rx416_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx416_curclass, "$!pos"
    lt $I11, 0, rx416_fail
    nqp_rxmark rx416_bstack, rxsubrule419_pass, -1, 0
  rxsubrule419_pass:
    rx416_cstack = rx416_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx416_pos, $P11, rx416_curclass, "$!pos"
    rx416_cur."!cursor_pass"(rx416_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx416_cur)
  rx416_restart:
    repr_get_attr_obj rx416_cstack, rx416_cur, rx416_curclass, "$!cstack"
  rx416_fail:
    unless rx416_bstack, rx416_done
    pop $I19, rx416_bstack
    if_null rx416_cstack, rx416_cstack_done
    unless rx416_cstack, rx416_cstack_done
    dec $I19
    set $P11, rx416_cstack[$I19]
  rx416_cstack_done:
    pop rx416_rep, rx416_bstack
    pop rx416_pos, rx416_bstack
    pop $I19, rx416_bstack
    lt rx416_pos, -1, rx416_done
    lt rx416_pos, 0, rx416_fail
    eq $I19, 0, rx416_fail
    if_null rx416_cstack, rx416_jump
    elements $I18, rx416_bstack
    le $I18, 0, rx416_cut
    dec $I18
    set $I18, rx416_bstack[$I18]
  rx416_cut:
    assign rx416_cstack, $I18
  rx416_jump:
    jump $I19
  rx416_done:
    rx416_cur."!cursor_fail"()
    .return (rx416_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "112_1338064451.944_caps"  :subid("525_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "112_1338064451.944_nfa"  :subid("526_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 114
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 111
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 108
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 101
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 8
    push $P113, "package_def"
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<native>"  :subid("113_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1880
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    .lex "self", param_1880
.annotate 'line', 965
    new $P103, "Undef"
    set $P1881, $P103
    .lex "$*OUTERPACKAGE", $P1881
.annotate 'line', 966
    new $P104, "Undef"
    set $P1882, $P104
    .lex "$*PKGDECL", $P1882
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1883
    .lex "$/", $P1884
.annotate 'line', 964
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    (rx420_cur, rx420_tgt, rx420_pos, rx420_curclass, rx420_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done
    goto rxscan421_scan
  rxscan421_loop:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan:
    nqp_rxmark rx420_bstack, rxscan421_loop, rx420_pos, 0
  rxscan421_done:
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    store_lex unicode:"$\x{a2}", rx420_cur
.annotate 'line', 965
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1271
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1272
    die "Contextual $*PACKAGE not found"
  vivify_1272:
  vivify_1271:
    set $P1881, $P108
.annotate 'line', 964
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    store_lex unicode:"$\x{a2}", rx420_cur
.annotate 'line', 966
    new $P109, "String"
    assign $P109, "native"
    set $P1882, $P109
.annotate 'line', 964
    nqp_rxmark rx420_bstack, rxcap422_fail, rx420_pos, 0
    add $I11, rx420_pos, 6
    gt $I11, rx420_eos, rx420_fail
    substr $S10, rx420_tgt, rx420_pos, 6
    ne $S10, ucs4:"native", rx420_fail
    add rx420_pos, 6
    nqp_rxpeek $I19, rx420_bstack, rxcap422_fail
    inc $I19
    set $I11, rx420_bstack[$I19]
    $P11 = rx420_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx420_pos)
    rx420_cstack = rx420_cur."!cursor_capture"($P11, "sym")
    goto rxcap422_done
  rxcap422_fail:
    goto rx420_fail
  rxcap422_done:
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    $P11 = rx420_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx420_curclass, "$!pos"
    lt $I11, 0, rx420_fail
    nqp_rxmark rx420_bstack, rxsubrule423_pass, -1, 0
  rxsubrule423_pass:
    rx420_cstack = rx420_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx420_pos, $P11, rx420_curclass, "$!pos"
    rx420_cur."!cursor_pass"(rx420_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail:
    unless rx420_bstack, rx420_done
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done
    unless rx420_cstack, rx420_cstack_done
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done
    lt rx420_pos, 0, rx420_fail
    eq $I19, 0, rx420_fail
    if_null rx420_cstack, rx420_jump
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut:
    assign rx420_cstack, $I18
  rx420_jump:
    jump $I19
  rx420_done:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "113_1338064451.944_caps"  :subid("527_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "113_1338064451.944_nfa"  :subid("528_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 110
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 97
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 116
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 105
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 118
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 101
    push $P114, 9
    new $P115, "ResizablePMCArray"
    push $P115, 8
    push $P115, "package_def"
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, $P106
    push $P116, $P107
    push $P116, $P108
    push $P116, $P109
    push $P116, $P110
    push $P116, $P111
    push $P116, $P112
    push $P116, $P113
    push $P116, $P114
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<stub>"  :subid("114_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1888
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969
    .lex "self", param_1888
.annotate 'line', 970
    new $P103, "Undef"
    set $P1889, $P103
    .lex "$*OUTERPACKAGE", $P1889
.annotate 'line', 971
    new $P104, "Undef"
    set $P1890, $P104
    .lex "$*PKGDECL", $P1890
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1891
    .lex "$/", $P1892
.annotate 'line', 969
    .local string rx424_tgt
    .local int rx424_pos
    .local int rx424_off
    .local int rx424_eos
    .local int rx424_rep
    .local pmc rx424_cur
    .local pmc rx424_curclass
    .local pmc rx424_bstack
    .local pmc rx424_cstack
    (rx424_cur, rx424_tgt, rx424_pos, rx424_curclass, rx424_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx424_cur
    length rx424_eos, rx424_tgt
    eq $I19, 1, rx424_restart
    repr_get_attr_int $I11, self, rx424_curclass, "$!from"
    ne $I11, -1, rxscan425_done
    goto rxscan425_scan
  rxscan425_loop:
    inc rx424_pos
    gt rx424_pos, rx424_eos, rx424_fail
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!from", rx424_pos
  rxscan425_scan:
    nqp_rxmark rx424_bstack, rxscan425_loop, rx424_pos, 0
  rxscan425_done:
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    store_lex unicode:"$\x{a2}", rx424_cur
.annotate 'line', 970
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1273
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1274
    die "Contextual $*PACKAGE not found"
  vivify_1274:
  vivify_1273:
    set $P1889, $P108
.annotate 'line', 969
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    store_lex unicode:"$\x{a2}", rx424_cur
.annotate 'line', 971
    new $P109, "String"
    assign $P109, "stub"
    set $P1890, $P109
.annotate 'line', 969
    nqp_rxmark rx424_bstack, rxcap426_fail, rx424_pos, 0
    add $I11, rx424_pos, 4
    gt $I11, rx424_eos, rx424_fail
    substr $S10, rx424_tgt, rx424_pos, 4
    ne $S10, ucs4:"stub", rx424_fail
    add rx424_pos, 4
    nqp_rxpeek $I19, rx424_bstack, rxcap426_fail
    inc $I19
    set $I11, rx424_bstack[$I19]
    $P11 = rx424_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx424_pos)
    rx424_cstack = rx424_cur."!cursor_capture"($P11, "sym")
    goto rxcap426_done
  rxcap426_fail:
    goto rx424_fail
  rxcap426_done:
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."ws"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."name"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    nqp_rxmark rx424_bstack, rxsubrule428_pass, -1, 0
  rxsubrule428_pass:
    rx424_cstack = rx424_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."ws"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    add $I11, rx424_pos, 9
    gt $I11, rx424_eos, rx424_fail
    substr $S10, rx424_tgt, rx424_pos, 9
    ne $S10, ucs4:"metaclass", rx424_fail
    add rx424_pos, 9
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."ws"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."name"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    nqp_rxmark rx424_bstack, rxsubrule431_pass, -1, 0
  rxsubrule431_pass:
    rx424_cstack = rx424_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."ws"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    add $I11, rx424_pos, 1
    gt $I11, rx424_eos, rx424_fail
    substr $S10, rx424_tgt, rx424_pos, 1
    ne $S10, ucs4:"{", rx424_fail
    add rx424_pos, 1
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."ws"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    add $I11, rx424_pos, 3
    gt $I11, rx424_eos, rx424_fail
    substr $S10, rx424_tgt, rx424_pos, 3
    ne $S10, ucs4:"...", rx424_fail
    add rx424_pos, 3
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."ws"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    add $I11, rx424_pos, 1
    gt $I11, rx424_eos, rx424_fail
    substr $S10, rx424_tgt, rx424_pos, 1
    ne $S10, ucs4:"}", rx424_fail
    add rx424_pos, 1
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."ws"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    rx424_cur."!cursor_pass"(rx424_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx424_cur)
  rx424_restart:
    repr_get_attr_obj rx424_cstack, rx424_cur, rx424_curclass, "$!cstack"
  rx424_fail:
    unless rx424_bstack, rx424_done
    pop $I19, rx424_bstack
    if_null rx424_cstack, rx424_cstack_done
    unless rx424_cstack, rx424_cstack_done
    dec $I19
    set $P11, rx424_cstack[$I19]
  rx424_cstack_done:
    pop rx424_rep, rx424_bstack
    pop rx424_pos, rx424_bstack
    pop $I19, rx424_bstack
    lt rx424_pos, -1, rx424_done
    lt rx424_pos, 0, rx424_fail
    eq $I19, 0, rx424_fail
    if_null rx424_cstack, rx424_jump
    elements $I18, rx424_bstack
    le $I18, 0, rx424_cut
    dec $I18
    set $I18, rx424_bstack[$I18]
  rx424_cut:
    assign rx424_cstack, $I18
  rx424_jump:
    jump $I19
  rx424_done:
    rx424_cur."!cursor_fail"()
    .return (rx424_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "114_1338064451.944_caps"  :subid("529_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["name"], 0
    set $P106["metaclass"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "114_1338064451.944_nfa"  :subid("530_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 115
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 117
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 98
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_def"  :subid("115_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1896
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 977
    .const 'Sub' $P1902 = "532_1338064451.944" 
    capture_lex $P1902
    .lex "self", param_1896
.annotate 'line', 978
    new $P103, "Undef"
    set $P1897, $P103
    .lex "$*PACKAGE", $P1897
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P1898
    .lex "$/", $P1899
.annotate 'line', 977
    .local string rx436_tgt
    .local int rx436_pos
    .local int rx436_off
    .local int rx436_eos
    .local int rx436_rep
    .local pmc rx436_cur
    .local pmc rx436_curclass
    .local pmc rx436_bstack
    .local pmc rx436_cstack
    (rx436_cur, rx436_tgt, rx436_pos, rx436_curclass, rx436_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx436_cur
    length rx436_eos, rx436_tgt
    eq $I19, 1, rx436_restart
    repr_get_attr_int $I11, self, rx436_curclass, "$!from"
    ne $I11, -1, rxscan437_done
    goto rxscan437_scan
  rxscan437_loop:
    inc rx436_pos
    gt rx436_pos, rx436_eos, rx436_fail
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!from", rx436_pos
  rxscan437_scan:
    nqp_rxmark rx436_bstack, rxscan437_loop, rx436_pos, 0
  rxscan437_done:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    store_lex unicode:"$\x{a2}", rx436_cur
    set $P108, $P1897
    unless_null $P108, vivify_1275
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1276
    die "Contextual $*PACKAGE not found"
  vivify_1276:
  vivify_1275:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."name"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    nqp_rxmark rx436_bstack, rxsubrule440_pass, -1, 0
  rxsubrule440_pass:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
  # rx rxquantr442 ** 0..1
    nqp_rxmark rx436_bstack, rxquantr442_done, rx436_pos, 0
  rxquantr442_loop:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    add $I11, rx436_pos, 2
    gt $I11, rx436_eos, rx436_fail
    substr $S10, rx436_tgt, rx436_pos, 2
    ne $S10, ucs4:"is", rx436_fail
    add rx436_pos, 2
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    add $I11, rx436_pos, 5
    gt $I11, rx436_eos, rx436_fail
    substr $S10, rx436_tgt, rx436_pos, 5
    ne $S10, ucs4:"repr(", rx436_fail
    add rx436_pos, 5
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    nqp_rxmark rx436_bstack, rxsubrule446_pass, -1, 0
  rxsubrule446_pass:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    add $I11, rx436_pos, 1
    gt $I11, rx436_eos, rx436_fail
    substr $S10, rx436_tgt, rx436_pos, 1
    ne $S10, ucs4:")", rx436_fail
    add rx436_pos, 1
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    nqp_rxpeek $I19, rx436_bstack, rxquantr442_done
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr442_done
    inc rx436_rep
  rxquantr442_done:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    store_lex unicode:"$\x{a2}", rx436_cur
    find_lex $P117, unicode:"$\x{a2}"
    $P118 = $P117."MATCH"()
    store_lex "$/", $P118
.annotate 'line', 983
    .const 'Sub' $P1902 = "532_1338064451.944" 
    capture_lex $P1902
    $P120 = $P1902()
.annotate 'line', 977
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
  # rx rxquantr451 ** 0..1
    nqp_rxmark rx436_bstack, rxquantr451_done, rx436_pos, 0
  rxquantr451_loop:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    add $I11, rx436_pos, 2
    gt $I11, rx436_eos, rx436_fail
    substr $S10, rx436_tgt, rx436_pos, 2
    ne $S10, ucs4:"is", rx436_fail
    add rx436_pos, 2
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."name"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    nqp_rxmark rx436_bstack, rxsubrule454_pass, -1, 0
  rxsubrule454_pass:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    nqp_rxpeek $I19, rx436_bstack, rxquantr451_done
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr451_done
    inc rx436_rep
  rxquantr451_done:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
  # rx rxquantr457 ** 0..-1
    nqp_rxmark rx436_bstack, rxquantr457_done, rx436_pos, 0
  rxquantr457_loop:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    add $I11, rx436_pos, 4
    gt $I11, rx436_eos, rx436_fail
    substr $S10, rx436_tgt, rx436_pos, 4
    ne $S10, ucs4:"does", rx436_fail
    add rx436_pos, 4
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."name"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    nqp_rxmark rx436_bstack, rxsubrule460_pass, -1, 0
  rxsubrule460_pass:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    nqp_rxpeek $I19, rx436_bstack, rxquantr457_done
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr457_done
    inc rx436_rep
    nqp_rxmark rx436_bstack, rxquantr457_done, rx436_pos, rx436_rep
    goto rxquantr457_loop
  rxquantr457_done:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
  alt463_0:
    nqp_rxmark rx436_bstack, alt463_1, rx436_pos, 0
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    add $I11, rx436_pos, 1
    gt $I11, rx436_eos, rx436_fail
    substr $S10, rx436_tgt, rx436_pos, 1
    ne $S10, ucs4:";", rx436_fail
    add rx436_pos, 1
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."comp_unit"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    nqp_rxmark rx436_bstack, rxsubrule466_pass, -1, 0
  rxsubrule466_pass:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "comp_unit")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    goto alt463_end
  alt463_1:
    nqp_rxmark rx436_bstack, alt463_2, rx436_pos, 0
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    ge rx436_pos, rx436_eos, rx436_fail
    substr $S11, rx436_tgt, rx436_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx436_fail
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."block"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    nqp_rxmark rx436_bstack, rxsubrule470_pass, -1, 0
  rxsubrule470_pass:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    goto alt463_end
  alt463_2:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
  alt463_end:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."ws"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    rx436_cur."!cursor_pass"(rx436_pos, "package_def", 'backtrack'=>1)
    .return (rx436_cur)
  rx436_restart:
    repr_get_attr_obj rx436_cstack, rx436_cur, rx436_curclass, "$!cstack"
  rx436_fail:
    unless rx436_bstack, rx436_done
    pop $I19, rx436_bstack
    if_null rx436_cstack, rx436_cstack_done
    unless rx436_cstack, rx436_cstack_done
    dec $I19
    set $P11, rx436_cstack[$I19]
  rx436_cstack_done:
    pop rx436_rep, rx436_bstack
    pop rx436_pos, rx436_bstack
    pop $I19, rx436_bstack
    lt rx436_pos, -1, rx436_done
    lt rx436_pos, 0, rx436_fail
    eq $I19, 0, rx436_fail
    if_null rx436_cstack, rx436_jump
    elements $I18, rx436_bstack
    le $I18, 0, rx436_cut
    dec $I18
    set $I18, rx436_bstack[$I18]
  rx436_cut:
    assign rx436_cstack, $I18
  rx436_jump:
    jump $I19
  rx436_done:
    rx436_cur."!cursor_fail"()
    .return (rx436_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "115_1338064451.944_caps"  :subid("531_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 977
    new $P105, "Hash"
    set $P105["name"], 0
    set $P105["repr"], 2
    set $P105["parent"], 2
    set $P105["role"], 2
    set $P105["comp_unit"], 0
    set $P105["block"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1901"  :anon :subid("532_1338064451.944") :outer("115_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 986
    $P1904 = root_new ['parrot';'Hash']
    set $P1903, $P1904
    .lex "%args", $P1903
.annotate 'line', 983
    set $P1905, $P1903
    unless_null $P1905, vivify_1277
    $P1905 = root_new ['parrot';'Hash']
  vivify_1277:
.annotate 'line', 987
    find_lex $P1906, "$/"
    unless_null $P1906, vivify_1278
    $P1906 = root_new ['parrot';'Hash']
  vivify_1278:
    set $P119, $P1906["name"]
    unless_null $P119, vivify_1279
    new $P119, "Undef"
  vivify_1279:
    set $S100, $P119
    new $P120, 'String'
    set $P120, $S100
    set $P1907, $P1903
    unless_null $P1907, vivify_1280
    $P1907 = root_new ['parrot';'Hash']
    set $P1903, $P1907
  vivify_1280:
    set $P1907["name"], $P120
.annotate 'line', 988
    find_lex $P1909, "$/"
    unless_null $P1909, vivify_1281
    $P1909 = root_new ['parrot';'Hash']
  vivify_1281:
    set $P119, $P1909["repr"]
    unless_null $P119, vivify_1282
    new $P119, "Undef"
  vivify_1282:
    unless $P119, if_1908_end
.annotate 'line', 989
    find_lex $P1910, "$/"
    unless_null $P1910, vivify_1283
    $P1910 = root_new ['parrot';'Hash']
  vivify_1283:
    set $P1911, $P1910["repr"]
    unless_null $P1911, vivify_1284
    $P1911 = root_new ['parrot';'ResizablePMCArray']
  vivify_1284:
    set $P1912, $P1911[0]
    unless_null $P1912, vivify_1285
    $P1912 = root_new ['parrot';'Hash']
  vivify_1285:
    set $P1913, $P1912["quote_delimited"]
    unless_null $P1913, vivify_1286
    $P1913 = root_new ['parrot';'Hash']
  vivify_1286:
    set $P1914, $P1913["quote_atom"]
    unless_null $P1914, vivify_1287
    $P1914 = root_new ['parrot';'ResizablePMCArray']
  vivify_1287:
    set $P120, $P1914[0]
    unless_null $P120, vivify_1288
    new $P120, "Undef"
  vivify_1288:
    set $S100, $P120
    new $P121, 'String'
    set $P121, $S100
    set $P1915, $P1903
    unless_null $P1915, vivify_1289
    $P1915 = root_new ['parrot';'Hash']
    set $P1903, $P1915
  vivify_1289:
    set $P1915["repr"], $P121
  if_1908_end:
.annotate 'line', 991
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1290
    get_hll_global $P119, "GLOBAL"
    get_who $P120, $P119
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1291
    die "Contextual $*W not found"
  vivify_1291:
  vivify_1290:
    find_dynamic_lex $P124, "$*PKGDECL"
    unless_null $P124, vivify_1292
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$PKGDECL"]
    unless_null $P124, vivify_1293
    die "Contextual $*PKGDECL not found"
  vivify_1293:
  vivify_1292:
    find_dynamic_lex $P127, "%*HOW"
    unless_null $P127, vivify_1294
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["%HOW"]
    unless_null $P127, vivify_1295
    die "Contextual %*HOW not found"
  vivify_1295:
  vivify_1294:
    set $P128, $P127[$P124]
    unless_null $P128, vivify_1296
    new $P128, "Undef"
  vivify_1296:
    set $P1916, $P1903
    unless_null $P1916, vivify_1297
    $P1916 = root_new ['parrot';'Hash']
  vivify_1297:
    $P129 = $P121."pkg_create_mo"($P128, $P1916 :flat)
    store_dynamic_lex "$*PACKAGE", $P129
.annotate 'line', 994
    find_dynamic_lex $P123, "$*SCOPE"
    unless_null $P123, vivify_1298
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$SCOPE"]
    unless_null $P123, vivify_1299
    die "Contextual $*SCOPE not found"
  vivify_1299:
  vivify_1298:
    set $S100, $P123
    iseq $I100, $S100, "our"
    unless $I100, unless_1918
    new $P120, 'Integer'
    set $P120, $I100
    goto unless_1918_end
  unless_1918:
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_1300
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_1301
    die "Contextual $*SCOPE not found"
  vivify_1301:
  vivify_1300:
    set $S101, $P126
    iseq $I101, $S101, ""
    new $P120, 'Integer'
    set $P120, $I101
  unless_1918_end:
    if $P120, if_1917
.annotate 'line', 1000
    find_dynamic_lex $P131, "$*SCOPE"
    unless_null $P131, vivify_1302
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$SCOPE"]
    unless_null $P131, vivify_1303
    die "Contextual $*SCOPE not found"
  vivify_1303:
  vivify_1302:
    set $S102, $P131
    iseq $I102, $S102, "my"
    if $I102, if_1927
.annotate 'line', 1007
    find_lex $P132, "$/"
    unless_null $P132, vivify_1304
    new $P132, "Undef"
  vivify_1304:
    $P133 = $P132."CURSOR"()
    find_dynamic_lex $P136, "$*SCOPE"
    unless_null $P136, vivify_1305
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$SCOPE"]
    unless_null $P136, vivify_1306
    die "Contextual $*SCOPE not found"
  vivify_1306:
  vivify_1305:
    concat $P137, $P136, " scoped packages are not supported"
    $P138 = $P133."panic"($P137)
.annotate 'line', 1006
    set $P128, $P138
.annotate 'line', 1000
    goto if_1927_end
  if_1927:
.annotate 'line', 1001
    find_lex $P1929, "$/"
    unless_null $P1929, vivify_1307
    $P1929 = root_new ['parrot';'Hash']
  vivify_1307:
    set $P1930, $P1929["name"]
    unless_null $P1930, vivify_1308
    $P1930 = root_new ['parrot';'Hash']
  vivify_1308:
    set $P132, $P1930["identifier"]
    unless_null $P132, vivify_1309
    new $P132, "Undef"
  vivify_1309:
    set $N100, $P132
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_1928_end
.annotate 'line', 1002
    find_lex $P1931, "$/"
    unless_null $P1931, vivify_1310
    $P1931 = root_new ['parrot';'Hash']
  vivify_1310:
    set $P133, $P1931["name"]
    unless_null $P133, vivify_1311
    new $P133, "Undef"
  vivify_1311:
    $P134 = $P133."CURSOR"()
    $P134."panic"("A my scoped package cannot have a multi-part name yet")
  if_1928_end:
.annotate 'line', 1004
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_1312
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_1313
    die "Contextual $*W not found"
  vivify_1313:
  vivify_1312:
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_1314
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_1315
    die "Contextual $*W not found"
  vivify_1315:
  vivify_1314:
    $P138 = $P137."cur_lexpad"()
    find_lex $P1932, "$/"
    unless_null $P1932, vivify_1316
    $P1932 = root_new ['parrot';'Hash']
  vivify_1316:
    set $P1933, $P1932["name"]
    unless_null $P1933, vivify_1317
    $P1933 = root_new ['parrot';'Hash']
  vivify_1317:
    set $P1934, $P1933["identifier"]
    unless_null $P1934, vivify_1318
    $P1934 = root_new ['parrot';'ResizablePMCArray']
  vivify_1318:
    set $P139, $P1934[0]
    unless_null $P139, vivify_1319
    new $P139, "Undef"
  vivify_1319:
    find_dynamic_lex $P142, "$*PACKAGE"
    unless_null $P142, vivify_1320
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$PACKAGE"]
    unless_null $P142, vivify_1321
    die "Contextual $*PACKAGE not found"
  vivify_1321:
  vivify_1320:
    $P143 = $P134."install_lexical_symbol"($P138, $P139, $P142)
.annotate 'line', 1000
    set $P128, $P143
  if_1927_end:
    set $P119, $P128
.annotate 'line', 994
    goto if_1917_end
  if_1917:
.annotate 'line', 995
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_1322
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_1323
    die "Contextual $*W not found"
  vivify_1323:
  vivify_1322:
    find_dynamic_lex $P132, "$*OUTERPACKAGE"
    unless_null $P132, vivify_1324
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$OUTERPACKAGE"]
    unless_null $P132, vivify_1325
    die "Contextual $*OUTERPACKAGE not found"
  vivify_1325:
  vivify_1324:
    find_lex $P1919, "$/"
    unless_null $P1919, vivify_1326
    $P1919 = root_new ['parrot';'Hash']
  vivify_1326:
    set $P1920, $P1919["name"]
    unless_null $P1920, vivify_1327
    $P1920 = root_new ['parrot';'Hash']
  vivify_1327:
    set $P133, $P1920["identifier"]
    unless_null $P133, vivify_1328
    new $P133, "Undef"
  vivify_1328:
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_1329
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_1330
    die "Contextual $*PACKAGE not found"
  vivify_1330:
  vivify_1329:
    $P129."install_package_symbol"($P132, $P133, $P136)
.annotate 'line', 996
    find_lex $P1922, "$/"
    unless_null $P1922, vivify_1331
    $P1922 = root_new ['parrot';'Hash']
  vivify_1331:
    set $P1923, $P1922["name"]
    unless_null $P1923, vivify_1332
    $P1923 = root_new ['parrot';'Hash']
  vivify_1332:
    set $P128, $P1923["identifier"]
    unless_null $P128, vivify_1333
    new $P128, "Undef"
  vivify_1333:
    set $N100, $P128
    set $N101, 1
    iseq $I102, $N100, $N101
    if $I102, if_1921
    new $P127, 'Integer'
    set $P127, $I102
    goto if_1921_end
  if_1921:
.annotate 'line', 997
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_1334
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$W"]
    unless_null $P131, vivify_1335
    die "Contextual $*W not found"
  vivify_1335:
  vivify_1334:
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_1336
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_1337
    die "Contextual $*W not found"
  vivify_1337:
  vivify_1336:
    $P135 = $P134."cur_lexpad"()
    find_lex $P1924, "$/"
    unless_null $P1924, vivify_1338
    $P1924 = root_new ['parrot';'Hash']
  vivify_1338:
    set $P1925, $P1924["name"]
    unless_null $P1925, vivify_1339
    $P1925 = root_new ['parrot';'Hash']
  vivify_1339:
    set $P1926, $P1925["identifier"]
    unless_null $P1926, vivify_1340
    $P1926 = root_new ['parrot';'ResizablePMCArray']
  vivify_1340:
    set $P136, $P1926[0]
    unless_null $P136, vivify_1341
    new $P136, "Undef"
  vivify_1341:
    find_dynamic_lex $P139, "$*PACKAGE"
    unless_null $P139, vivify_1342
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PACKAGE"]
    unless_null $P139, vivify_1343
    die "Contextual $*PACKAGE not found"
  vivify_1343:
  vivify_1342:
    $P140 = $P131."install_lexical_symbol"($P135, $P136, $P139)
.annotate 'line', 996
    set $P127, $P140
  if_1921_end:
.annotate 'line', 994
    set $P119, $P127
  if_1917_end:
.annotate 'line', 983
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator"  :subid("116_1338064451.944")
    .param pmc param_1936
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1020
    .lex "self", param_1936
    $P103 = param_1936."!protoregex"("scope_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<my>"  :subid("117_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1938
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    .lex "self", param_1938
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1939
    .lex "$/", $P1940
    .local string rx476_tgt
    .local int rx476_pos
    .local int rx476_off
    .local int rx476_eos
    .local int rx476_rep
    .local pmc rx476_cur
    .local pmc rx476_curclass
    .local pmc rx476_bstack
    .local pmc rx476_cstack
    (rx476_cur, rx476_tgt, rx476_pos, rx476_curclass, rx476_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx476_cur
    length rx476_eos, rx476_tgt
    eq $I19, 1, rx476_restart
    repr_get_attr_int $I11, self, rx476_curclass, "$!from"
    ne $I11, -1, rxscan477_done
    goto rxscan477_scan
  rxscan477_loop:
    inc rx476_pos
    gt rx476_pos, rx476_eos, rx476_fail
    repr_bind_attr_int rx476_cur, rx476_curclass, "$!from", rx476_pos
  rxscan477_scan:
    nqp_rxmark rx476_bstack, rxscan477_loop, rx476_pos, 0
  rxscan477_done:
    nqp_rxmark rx476_bstack, rxcap478_fail, rx476_pos, 0
    add $I11, rx476_pos, 2
    gt $I11, rx476_eos, rx476_fail
    substr $S10, rx476_tgt, rx476_pos, 2
    ne $S10, ucs4:"my", rx476_fail
    add rx476_pos, 2
    nqp_rxpeek $I19, rx476_bstack, rxcap478_fail
    inc $I19
    set $I11, rx476_bstack[$I19]
    $P11 = rx476_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx476_pos)
    rx476_cstack = rx476_cur."!cursor_capture"($P11, "sym")
    goto rxcap478_done
  rxcap478_fail:
    goto rx476_fail
  rxcap478_done:
    repr_bind_attr_int rx476_cur, rx476_curclass, "$!pos", rx476_pos
    $P11 = rx476_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx476_curclass, "$!pos"
    lt $I11, 0, rx476_fail
    nqp_rxmark rx476_bstack, rxsubrule479_pass, -1, 0
  rxsubrule479_pass:
    rx476_cstack = rx476_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx476_pos, $P11, rx476_curclass, "$!pos"
    rx476_cur."!cursor_pass"(rx476_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx476_cur)
  rx476_restart:
    repr_get_attr_obj rx476_cstack, rx476_cur, rx476_curclass, "$!cstack"
  rx476_fail:
    unless rx476_bstack, rx476_done
    pop $I19, rx476_bstack
    if_null rx476_cstack, rx476_cstack_done
    unless rx476_cstack, rx476_cstack_done
    dec $I19
    set $P11, rx476_cstack[$I19]
  rx476_cstack_done:
    pop rx476_rep, rx476_bstack
    pop rx476_pos, rx476_bstack
    pop $I19, rx476_bstack
    lt rx476_pos, -1, rx476_done
    lt rx476_pos, 0, rx476_fail
    eq $I19, 0, rx476_fail
    if_null rx476_cstack, rx476_jump
    elements $I18, rx476_bstack
    le $I18, 0, rx476_cut
    dec $I18
    set $I18, rx476_bstack[$I18]
  rx476_cut:
    assign rx476_cstack, $I18
  rx476_jump:
    jump $I19
  rx476_done:
    rx476_cur."!cursor_fail"()
    .return (rx476_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "117_1338064451.944_caps"  :subid("533_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["scoped"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "117_1338064451.944_nfa"  :subid("534_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 121
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "scoped"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<our>"  :subid("118_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1944
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    .lex "self", param_1944
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1945
    .lex "$/", $P1946
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done
    goto rxscan481_scan
  rxscan481_loop:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan:
    nqp_rxmark rx480_bstack, rxscan481_loop, rx480_pos, 0
  rxscan481_done:
    nqp_rxmark rx480_bstack, rxcap482_fail, rx480_pos, 0
    add $I11, rx480_pos, 3
    gt $I11, rx480_eos, rx480_fail
    substr $S10, rx480_tgt, rx480_pos, 3
    ne $S10, ucs4:"our", rx480_fail
    add rx480_pos, 3
    nqp_rxpeek $I19, rx480_bstack, rxcap482_fail
    inc $I19
    set $I11, rx480_bstack[$I19]
    $P11 = rx480_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx480_pos)
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "sym")
    goto rxcap482_done
  rxcap482_fail:
    goto rx480_fail
  rxcap482_done:
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    $P11 = rx480_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx480_curclass, "$!pos"
    lt $I11, 0, rx480_fail
    nqp_rxmark rx480_bstack, rxsubrule483_pass, -1, 0
  rxsubrule483_pass:
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx480_pos, $P11, rx480_curclass, "$!pos"
    rx480_cur."!cursor_pass"(rx480_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail:
    unless rx480_bstack, rx480_done
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done
    unless rx480_cstack, rx480_cstack_done
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done
    lt rx480_pos, 0, rx480_fail
    eq $I19, 0, rx480_fail
    if_null rx480_cstack, rx480_jump
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut:
    assign rx480_cstack, $I18
  rx480_jump:
    jump $I19
  rx480_done:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "118_1338064451.944_caps"  :subid("535_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["scoped"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "118_1338064451.944_nfa"  :subid("536_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 111
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 117
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "scoped"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<has>"  :subid("119_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1950
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    .lex "self", param_1950
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1951
    .lex "$/", $P1952
    .local string rx484_tgt
    .local int rx484_pos
    .local int rx484_off
    .local int rx484_eos
    .local int rx484_rep
    .local pmc rx484_cur
    .local pmc rx484_curclass
    .local pmc rx484_bstack
    .local pmc rx484_cstack
    (rx484_cur, rx484_tgt, rx484_pos, rx484_curclass, rx484_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx484_cur
    length rx484_eos, rx484_tgt
    eq $I19, 1, rx484_restart
    repr_get_attr_int $I11, self, rx484_curclass, "$!from"
    ne $I11, -1, rxscan485_done
    goto rxscan485_scan
  rxscan485_loop:
    inc rx484_pos
    gt rx484_pos, rx484_eos, rx484_fail
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!from", rx484_pos
  rxscan485_scan:
    nqp_rxmark rx484_bstack, rxscan485_loop, rx484_pos, 0
  rxscan485_done:
    nqp_rxmark rx484_bstack, rxcap486_fail, rx484_pos, 0
    add $I11, rx484_pos, 3
    gt $I11, rx484_eos, rx484_fail
    substr $S10, rx484_tgt, rx484_pos, 3
    ne $S10, ucs4:"has", rx484_fail
    add rx484_pos, 3
    nqp_rxpeek $I19, rx484_bstack, rxcap486_fail
    inc $I19
    set $I11, rx484_bstack[$I19]
    $P11 = rx484_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx484_pos)
    rx484_cstack = rx484_cur."!cursor_capture"($P11, "sym")
    goto rxcap486_done
  rxcap486_fail:
    goto rx484_fail
  rxcap486_done:
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    $P11 = rx484_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx484_curclass, "$!pos"
    lt $I11, 0, rx484_fail
    nqp_rxmark rx484_bstack, rxsubrule487_pass, -1, 0
  rxsubrule487_pass:
    rx484_cstack = rx484_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx484_pos, $P11, rx484_curclass, "$!pos"
    rx484_cur."!cursor_pass"(rx484_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx484_cur)
  rx484_restart:
    repr_get_attr_obj rx484_cstack, rx484_cur, rx484_curclass, "$!cstack"
  rx484_fail:
    unless rx484_bstack, rx484_done
    pop $I19, rx484_bstack
    if_null rx484_cstack, rx484_cstack_done
    unless rx484_cstack, rx484_cstack_done
    dec $I19
    set $P11, rx484_cstack[$I19]
  rx484_cstack_done:
    pop rx484_rep, rx484_bstack
    pop rx484_pos, rx484_bstack
    pop $I19, rx484_bstack
    lt rx484_pos, -1, rx484_done
    lt rx484_pos, 0, rx484_fail
    eq $I19, 0, rx484_fail
    if_null rx484_cstack, rx484_jump
    elements $I18, rx484_bstack
    le $I18, 0, rx484_cut
    dec $I18
    set $I18, rx484_bstack[$I18]
  rx484_cut:
    assign rx484_cstack, $I18
  rx484_jump:
    jump $I19
  rx484_done:
    rx484_cur."!cursor_fail"()
    .return (rx484_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "119_1338064451.944_caps"  :subid("537_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["scoped"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "119_1338064451.944_nfa"  :subid("538_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 104
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 97
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 115
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "scoped"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scoped"  :subid("120_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1956
    .param pmc param_1957
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1025
    .lex "self", param_1956
    .lex "$*SCOPE", param_1957
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1958
    .lex "$/", $P1959
    .local string rx488_tgt
    .local int rx488_pos
    .local int rx488_off
    .local int rx488_eos
    .local int rx488_rep
    .local pmc rx488_cur
    .local pmc rx488_curclass
    .local pmc rx488_bstack
    .local pmc rx488_cstack
    (rx488_cur, rx488_tgt, rx488_pos, rx488_curclass, rx488_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx488_cur
    length rx488_eos, rx488_tgt
    eq $I19, 1, rx488_restart
    repr_get_attr_int $I11, self, rx488_curclass, "$!from"
    ne $I11, -1, rxscan489_done
    goto rxscan489_scan
  rxscan489_loop:
    inc rx488_pos
    gt rx488_pos, rx488_eos, rx488_fail
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!from", rx488_pos
  rxscan489_scan:
    nqp_rxmark rx488_bstack, rxscan489_loop, rx488_pos, 0
  rxscan489_done:
  alt490_0:
    nqp_rxmark rx488_bstack, alt490_1, rx488_pos, 0
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."ws"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    nqp_rxmark rx488_bstack, rxsubrule492_pass, -1, 0
  rxsubrule492_pass:
    rx488_cstack = rx488_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."ws"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    goto alt490_end
  alt490_1:
    nqp_rxmark rx488_bstack, alt490_2, rx488_pos, 0
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."ws"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    nqp_rxmark rx488_bstack, rxsubrule495_pass, -1, 0
  rxsubrule495_pass:
    rx488_cstack = rx488_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."ws"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    goto alt490_end
  alt490_2:
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."ws"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    nqp_rxmark rx488_bstack, rxsubrule498_pass, -1, 0
  rxsubrule498_pass:
    rx488_cstack = rx488_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."ws"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
  alt490_end:
    rx488_cur."!cursor_pass"(rx488_pos, "scoped", 'backtrack'=>1)
    .return (rx488_cur)
  rx488_restart:
    repr_get_attr_obj rx488_cstack, rx488_cur, rx488_curclass, "$!cstack"
  rx488_fail:
    unless rx488_bstack, rx488_done
    pop $I19, rx488_bstack
    if_null rx488_cstack, rx488_cstack_done
    unless rx488_cstack, rx488_cstack_done
    dec $I19
    set $P11, rx488_cstack[$I19]
  rx488_cstack_done:
    pop rx488_rep, rx488_bstack
    pop rx488_pos, rx488_bstack
    pop $I19, rx488_bstack
    lt rx488_pos, -1, rx488_done
    lt rx488_pos, 0, rx488_fail
    eq $I19, 0, rx488_fail
    if_null rx488_cstack, rx488_jump
    elements $I18, rx488_bstack
    le $I18, 0, rx488_cut
    dec $I18
    set $I18, rx488_bstack[$I18]
  rx488_cut:
    assign rx488_cstack, $I18
  rx488_jump:
    jump $I19
  rx488_done:
    rx488_cur."!cursor_fail"()
    .return (rx488_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "120_1338064451.944_caps"  :subid("539_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1025
    new $P104, "Hash"
    set $P104["declarator"], 0
    set $P104["multi_declarator"], 0
    set $P104["package_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "typename"  :subid("121_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1962
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    .const 'Sub' $P1968 = "542_1338064451.944" 
    capture_lex $P1968
    .lex "self", param_1962
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1963
    .lex "$/", $P1964
    .local string rx500_tgt
    .local int rx500_pos
    .local int rx500_off
    .local int rx500_eos
    .local int rx500_rep
    .local pmc rx500_cur
    .local pmc rx500_curclass
    .local pmc rx500_bstack
    .local pmc rx500_cstack
    (rx500_cur, rx500_tgt, rx500_pos, rx500_curclass, rx500_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx500_cur
    length rx500_eos, rx500_tgt
    eq $I19, 1, rx500_restart
    repr_get_attr_int $I11, self, rx500_curclass, "$!from"
    ne $I11, -1, rxscan501_done
    goto rxscan501_scan
  rxscan501_loop:
    inc rx500_pos
    gt rx500_pos, rx500_eos, rx500_fail
    repr_bind_attr_int rx500_cur, rx500_curclass, "$!from", rx500_pos
  rxscan501_scan:
    nqp_rxmark rx500_bstack, rxscan501_loop, rx500_pos, 0
  rxscan501_done:
    repr_bind_attr_int rx500_cur, rx500_curclass, "$!pos", rx500_pos
    $P11 = rx500_cur."name"()
    repr_get_attr_int $I11, $P11, rx500_curclass, "$!pos"
    lt $I11, 0, rx500_fail
    nqp_rxmark rx500_bstack, rxsubrule502_pass, -1, 0
  rxsubrule502_pass:
    rx500_cstack = rx500_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx500_pos, $P11, rx500_curclass, "$!pos"
    repr_bind_attr_int rx500_cur, rx500_curclass, "$!pos", rx500_pos
    store_lex unicode:"$\x{a2}", rx500_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 1033
    .const 'Sub' $P1968 = "542_1338064451.944" 
    capture_lex $P1968
    $P106 = $P1968()
.annotate 'line', 1031
    unless $P106, rx500_fail
    rx500_cur."!cursor_pass"(rx500_pos, "typename", 'backtrack'=>1)
    .return (rx500_cur)
  rx500_restart:
    repr_get_attr_obj rx500_cstack, rx500_cur, rx500_curclass, "$!cstack"
  rx500_fail:
    unless rx500_bstack, rx500_done
    pop $I19, rx500_bstack
    if_null rx500_cstack, rx500_cstack_done
    unless rx500_cstack, rx500_cstack_done
    dec $I19
    set $P11, rx500_cstack[$I19]
  rx500_cstack_done:
    pop rx500_rep, rx500_bstack
    pop rx500_pos, rx500_bstack
    pop $I19, rx500_bstack
    lt rx500_pos, -1, rx500_done
    lt rx500_pos, 0, rx500_fail
    eq $I19, 0, rx500_fail
    if_null rx500_cstack, rx500_jump
    elements $I18, rx500_bstack
    le $I18, 0, rx500_cut
    dec $I18
    set $I18, rx500_bstack[$I18]
  rx500_cut:
    assign rx500_cstack, $I18
  rx500_jump:
    jump $I19
  rx500_done:
    rx500_cur."!cursor_fail"()
    .return (rx500_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "121_1338064451.944_caps"  :subid("540_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    new $P104, "Hash"
    set $P104["name"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "121_1338064451.944_nfa"  :subid("541_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "name"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1967"  :anon :subid("542_1338064451.944") :outer("121_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1033
    find_dynamic_lex $P108, "$*W"
    unless_null $P108, vivify_1344
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$W"]
    unless_null $P108, vivify_1345
    die "Contextual $*W not found"
  vivify_1345:
  vivify_1344:
    find_lex $P109, "$/"
    unless_null $P109, vivify_1346
    new $P109, "Undef"
  vivify_1346:
    find_lex $P1969, "$/"
    unless_null $P1969, vivify_1347
    $P1969 = root_new ['parrot';'Hash']
  vivify_1347:
    set $P1970, $P1969["name"]
    unless_null $P1970, vivify_1348
    $P1970 = root_new ['parrot';'Hash']
  vivify_1348:
    set $P110, $P1970["identifier"]
    unless_null $P110, vivify_1349
    new $P110, "Undef"
  vivify_1349:
    $P111 = $P108."known_sym"($P109, $P110)
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "declarator"  :subid("122_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1972
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036
    .lex "self", param_1972
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1973
    .lex "$/", $P1974
    .local string rx503_tgt
    .local int rx503_pos
    .local int rx503_off
    .local int rx503_eos
    .local int rx503_rep
    .local pmc rx503_cur
    .local pmc rx503_curclass
    .local pmc rx503_bstack
    .local pmc rx503_cstack
    (rx503_cur, rx503_tgt, rx503_pos, rx503_curclass, rx503_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx503_cur
    length rx503_eos, rx503_tgt
    eq $I19, 1, rx503_restart
    repr_get_attr_int $I11, self, rx503_curclass, "$!from"
    ne $I11, -1, rxscan504_done
    goto rxscan504_scan
  rxscan504_loop:
    inc rx503_pos
    gt rx503_pos, rx503_eos, rx503_fail
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!from", rx503_pos
  rxscan504_scan:
    nqp_rxmark rx503_bstack, rxscan504_loop, rx503_pos, 0
  rxscan504_done:
  alt505_0:
    nqp_rxmark rx503_bstack, alt505_1, rx503_pos, 0
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    nqp_rxmark rx503_bstack, rxsubrule506_pass, -1, 0
  rxsubrule506_pass:
    rx503_cstack = rx503_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    goto alt505_end
  alt505_1:
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    nqp_rxmark rx503_bstack, rxsubrule507_pass, -1, 0
  rxsubrule507_pass:
    rx503_cstack = rx503_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
  alt505_end:
    rx503_cur."!cursor_pass"(rx503_pos, "declarator", 'backtrack'=>1)
    .return (rx503_cur)
  rx503_restart:
    repr_get_attr_obj rx503_cstack, rx503_cur, rx503_curclass, "$!cstack"
  rx503_fail:
    unless rx503_bstack, rx503_done
    pop $I19, rx503_bstack
    if_null rx503_cstack, rx503_cstack_done
    unless rx503_cstack, rx503_cstack_done
    dec $I19
    set $P11, rx503_cstack[$I19]
  rx503_cstack_done:
    pop rx503_rep, rx503_bstack
    pop rx503_pos, rx503_bstack
    pop $I19, rx503_bstack
    lt rx503_pos, -1, rx503_done
    lt rx503_pos, 0, rx503_fail
    eq $I19, 0, rx503_fail
    if_null rx503_cstack, rx503_jump
    elements $I18, rx503_bstack
    le $I18, 0, rx503_cut
    dec $I18
    set $I18, rx503_bstack[$I18]
  rx503_cut:
    assign rx503_cstack, $I18
  rx503_jump:
    jump $I19
  rx503_done:
    rx503_cur."!cursor_fail"()
    .return (rx503_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "122_1338064451.944_caps"  :subid("543_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036
    new $P104, "Hash"
    set $P104["variable_declarator"], 0
    set $P104["routine_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "122_1338064451.944_nfa"  :subid("544_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "variable_declarator"
    push $P105, 0
    push $P105, 8
    push $P105, "routine_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable_declarator"  :subid("123_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1978
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1041
    .const 'Sub' $P1984 = "546_1338064451.944" 
    capture_lex $P1984
    .lex "self", param_1978
.annotate 'line', 1043
    new $P103, "Undef"
    set $P1979, $P103
    .lex "$*IN_DECL", $P1979
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P1980
    .lex "$/", $P1981
.annotate 'line', 1041
    .local string rx508_tgt
    .local int rx508_pos
    .local int rx508_off
    .local int rx508_eos
    .local int rx508_rep
    .local pmc rx508_cur
    .local pmc rx508_curclass
    .local pmc rx508_bstack
    .local pmc rx508_cstack
    (rx508_cur, rx508_tgt, rx508_pos, rx508_curclass, rx508_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx508_cur
    length rx508_eos, rx508_tgt
    eq $I19, 1, rx508_restart
    repr_get_attr_int $I11, self, rx508_curclass, "$!from"
    ne $I11, -1, rxscan509_done
    goto rxscan509_scan
  rxscan509_loop:
    inc rx508_pos
    gt rx508_pos, rx508_eos, rx508_fail
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!from", rx508_pos
  rxscan509_scan:
    nqp_rxmark rx508_bstack, rxscan509_loop, rx508_pos, 0
  rxscan509_done:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
  # rx rxquantr511 ** 0..1
    nqp_rxmark rx508_bstack, rxquantr511_done, rx508_pos, 0
  rxquantr511_loop:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."typename"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    goto rxsubrule512_pass
  rxsubrule512_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
  rxsubrule512_pass:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule512_back
    push rx508_bstack, $I11
    push rx508_bstack, 0
    push rx508_bstack, rx508_pos
    elements $I11, rx508_cstack
    push rx508_bstack, $I11
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr511_done
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr511_done
    inc rx508_rep
  rxquantr511_done:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    store_lex unicode:"$\x{a2}", rx508_cur
.annotate 'line', 1043
    new $P107, "String"
    assign $P107, "variable"
    set $P1979, $P107
.annotate 'line', 1041
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."variable"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    nqp_rxmark rx508_bstack, rxsubrule515_pass, -1, 0
  rxsubrule515_pass:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    store_lex unicode:"$\x{a2}", rx508_cur
    find_lex $P110, unicode:"$\x{a2}"
    $P111 = $P110."MATCH"()
    store_lex "$/", $P111
.annotate 'line', 1045
    .const 'Sub' $P1984 = "546_1338064451.944" 
    capture_lex $P1984
    $P113 = $P1984()
.annotate 'line', 1041
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
  # rx rxquantr518 ** 0..-1
    nqp_rxmark rx508_bstack, rxquantr518_done, rx508_pos, 0
  rxquantr518_loop:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."trait"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    goto rxsubrule519_pass
  rxsubrule519_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
  rxsubrule519_pass:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule519_back
    push rx508_bstack, $I11
    push rx508_bstack, 0
    push rx508_bstack, rx508_pos
    elements $I11, rx508_cstack
    push rx508_bstack, $I11
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr518_done
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr518_done
    inc rx508_rep
    nqp_rxmark rx508_bstack, rxquantr518_done, rx508_pos, rx508_rep
    goto rxquantr518_loop
  rxquantr518_done:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    rx508_cur."!cursor_pass"(rx508_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx508_cur)
  rx508_restart:
    repr_get_attr_obj rx508_cstack, rx508_cur, rx508_curclass, "$!cstack"
  rx508_fail:
    unless rx508_bstack, rx508_done
    pop $I19, rx508_bstack
    if_null rx508_cstack, rx508_cstack_done
    unless rx508_cstack, rx508_cstack_done
    dec $I19
    set $P11, rx508_cstack[$I19]
  rx508_cstack_done:
    pop rx508_rep, rx508_bstack
    pop rx508_pos, rx508_bstack
    pop $I19, rx508_bstack
    lt rx508_pos, -1, rx508_done
    lt rx508_pos, 0, rx508_fail
    eq $I19, 0, rx508_fail
    if_null rx508_cstack, rx508_jump
    elements $I18, rx508_bstack
    le $I18, 0, rx508_cut
    dec $I18
    set $I18, rx508_bstack[$I18]
  rx508_cut:
    assign rx508_cstack, $I18
  rx508_jump:
    jump $I19
  rx508_done:
    rx508_cur."!cursor_fail"()
    .return (rx508_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "123_1338064451.944_caps"  :subid("545_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1041
    new $P105, "Hash"
    set $P105["typename"], 2
    set $P105["variable"], 0
    set $P105["trait"], 2
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1983"  :anon :subid("546_1338064451.944") :outer("123_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1045
    new $P112, "Float"
    assign $P112, 0
    store_dynamic_lex "$*IN_DECL", $P112
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator"  :subid("124_1338064451.944")
    .param pmc param_1986
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1049
    .lex "self", param_1986
    $P103 = param_1986."!protoregex"("routine_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<sub>"  :subid("125_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1988
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    .lex "self", param_1988
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1989
    .lex "$/", $P1990
    .local string rx521_tgt
    .local int rx521_pos
    .local int rx521_off
    .local int rx521_eos
    .local int rx521_rep
    .local pmc rx521_cur
    .local pmc rx521_curclass
    .local pmc rx521_bstack
    .local pmc rx521_cstack
    (rx521_cur, rx521_tgt, rx521_pos, rx521_curclass, rx521_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx521_cur
    length rx521_eos, rx521_tgt
    eq $I19, 1, rx521_restart
    repr_get_attr_int $I11, self, rx521_curclass, "$!from"
    ne $I11, -1, rxscan522_done
    goto rxscan522_scan
  rxscan522_loop:
    inc rx521_pos
    gt rx521_pos, rx521_eos, rx521_fail
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!from", rx521_pos
  rxscan522_scan:
    nqp_rxmark rx521_bstack, rxscan522_loop, rx521_pos, 0
  rxscan522_done:
    nqp_rxmark rx521_bstack, rxcap523_fail, rx521_pos, 0
    add $I11, rx521_pos, 3
    gt $I11, rx521_eos, rx521_fail
    substr $S10, rx521_tgt, rx521_pos, 3
    ne $S10, ucs4:"sub", rx521_fail
    add rx521_pos, 3
    nqp_rxpeek $I19, rx521_bstack, rxcap523_fail
    inc $I19
    set $I11, rx521_bstack[$I19]
    $P11 = rx521_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx521_pos)
    rx521_cstack = rx521_cur."!cursor_capture"($P11, "sym")
    goto rxcap523_done
  rxcap523_fail:
    goto rx521_fail
  rxcap523_done:
    repr_bind_attr_int rx521_cur, rx521_curclass, "$!pos", rx521_pos
    $P11 = rx521_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx521_curclass, "$!pos"
    lt $I11, 0, rx521_fail
    nqp_rxmark rx521_bstack, rxsubrule524_pass, -1, 0
  rxsubrule524_pass:
    rx521_cstack = rx521_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx521_pos, $P11, rx521_curclass, "$!pos"
    rx521_cur."!cursor_pass"(rx521_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx521_cur)
  rx521_restart:
    repr_get_attr_obj rx521_cstack, rx521_cur, rx521_curclass, "$!cstack"
  rx521_fail:
    unless rx521_bstack, rx521_done
    pop $I19, rx521_bstack
    if_null rx521_cstack, rx521_cstack_done
    unless rx521_cstack, rx521_cstack_done
    dec $I19
    set $P11, rx521_cstack[$I19]
  rx521_cstack_done:
    pop rx521_rep, rx521_bstack
    pop rx521_pos, rx521_bstack
    pop $I19, rx521_bstack
    lt rx521_pos, -1, rx521_done
    lt rx521_pos, 0, rx521_fail
    eq $I19, 0, rx521_fail
    if_null rx521_cstack, rx521_jump
    elements $I18, rx521_bstack
    le $I18, 0, rx521_cut
    dec $I18
    set $I18, rx521_bstack[$I18]
  rx521_cut:
    assign rx521_cstack, $I18
  rx521_jump:
    jump $I19
  rx521_done:
    rx521_cur."!cursor_fail"()
    .return (rx521_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "125_1338064451.944_caps"  :subid("547_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["routine_def"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "125_1338064451.944_nfa"  :subid("548_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 115
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 117
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 98
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "routine_def"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<method>"  :subid("126_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_1994
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    .lex "self", param_1994
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1995
    .lex "$/", $P1996
    .local string rx525_tgt
    .local int rx525_pos
    .local int rx525_off
    .local int rx525_eos
    .local int rx525_rep
    .local pmc rx525_cur
    .local pmc rx525_curclass
    .local pmc rx525_bstack
    .local pmc rx525_cstack
    (rx525_cur, rx525_tgt, rx525_pos, rx525_curclass, rx525_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx525_cur
    length rx525_eos, rx525_tgt
    eq $I19, 1, rx525_restart
    repr_get_attr_int $I11, self, rx525_curclass, "$!from"
    ne $I11, -1, rxscan526_done
    goto rxscan526_scan
  rxscan526_loop:
    inc rx525_pos
    gt rx525_pos, rx525_eos, rx525_fail
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!from", rx525_pos
  rxscan526_scan:
    nqp_rxmark rx525_bstack, rxscan526_loop, rx525_pos, 0
  rxscan526_done:
    nqp_rxmark rx525_bstack, rxcap527_fail, rx525_pos, 0
    add $I11, rx525_pos, 6
    gt $I11, rx525_eos, rx525_fail
    substr $S10, rx525_tgt, rx525_pos, 6
    ne $S10, ucs4:"method", rx525_fail
    add rx525_pos, 6
    nqp_rxpeek $I19, rx525_bstack, rxcap527_fail
    inc $I19
    set $I11, rx525_bstack[$I19]
    $P11 = rx525_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx525_pos)
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "sym")
    goto rxcap527_done
  rxcap527_fail:
    goto rx525_fail
  rxcap527_done:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail
    nqp_rxmark rx525_bstack, rxsubrule528_pass, -1, 0
  rxsubrule528_pass:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    rx525_cur."!cursor_pass"(rx525_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx525_cur)
  rx525_restart:
    repr_get_attr_obj rx525_cstack, rx525_cur, rx525_curclass, "$!cstack"
  rx525_fail:
    unless rx525_bstack, rx525_done
    pop $I19, rx525_bstack
    if_null rx525_cstack, rx525_cstack_done
    unless rx525_cstack, rx525_cstack_done
    dec $I19
    set $P11, rx525_cstack[$I19]
  rx525_cstack_done:
    pop rx525_rep, rx525_bstack
    pop rx525_pos, rx525_bstack
    pop $I19, rx525_bstack
    lt rx525_pos, -1, rx525_done
    lt rx525_pos, 0, rx525_fail
    eq $I19, 0, rx525_fail
    if_null rx525_cstack, rx525_jump
    elements $I18, rx525_bstack
    le $I18, 0, rx525_cut
    dec $I18
    set $I18, rx525_bstack[$I18]
  rx525_cut:
    assign rx525_cstack, $I18
  rx525_jump:
    jump $I19
  rx525_done:
    rx525_cur."!cursor_fail"()
    .return (rx525_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "126_1338064451.944_caps"  :subid("549_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["method_def"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "126_1338064451.944_nfa"  :subid("550_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 116
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 104
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 100
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "method_def"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_def"  :subid("127_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2000
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1053
    .lex "self", param_2000
.annotate 'line', 1054
    new $P103, "Undef"
    set $P2001, $P103
    .lex "$*RETURN_USED", $P2001
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P2002
    .lex "$/", $P2003
.annotate 'line', 1053
    .local string rx529_tgt
    .local int rx529_pos
    .local int rx529_off
    .local int rx529_eos
    .local int rx529_rep
    .local pmc rx529_cur
    .local pmc rx529_curclass
    .local pmc rx529_bstack
    .local pmc rx529_cstack
    (rx529_cur, rx529_tgt, rx529_pos, rx529_curclass, rx529_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx529_cur
    length rx529_eos, rx529_tgt
    eq $I19, 1, rx529_restart
    repr_get_attr_int $I11, self, rx529_curclass, "$!from"
    ne $I11, -1, rxscan530_done
    goto rxscan530_scan
  rxscan530_loop:
    inc rx529_pos
    gt rx529_pos, rx529_eos, rx529_fail
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!from", rx529_pos
  rxscan530_scan:
    nqp_rxmark rx529_bstack, rxscan530_loop, rx529_pos, 0
  rxscan530_done:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    store_lex unicode:"$\x{a2}", rx529_cur
.annotate 'line', 1054
    new $P106, "Float"
    assign $P106, 0
    set $P2001, $P106
.annotate 'line', 1053
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  # rx rxquantr533 ** 0..1
    nqp_rxmark rx529_bstack, rxquantr533_done, rx529_pos, 0
  rxquantr533_loop:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxmark rx529_bstack, rxcap535_fail, rx529_pos, 0
  # rx rxquantr536 ** 0..1
    nqp_rxmark rx529_bstack, rxquantr536_done, rx529_pos, 0
  rxquantr536_loop:
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:"&", rx529_fail
    add rx529_pos, 1
    nqp_rxpeek $I19, rx529_bstack, rxquantr536_done
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr536_done
    inc rx529_rep
  rxquantr536_done:
    nqp_rxpeek $I19, rx529_bstack, rxcap535_fail
    inc $I19
    set $I11, rx529_bstack[$I19]
    $P11 = rx529_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx529_pos)
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "sigil")
    goto rxcap535_done
  rxcap535_fail:
    goto rx529_fail
  rxcap535_done:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    nqp_rxmark rx529_bstack, rxsubrule537_pass, -1, 0
  rxsubrule537_pass:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr533_done
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr533_done
    inc rx529_rep
  rxquantr533_done:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt542_0:
    nqp_rxmark rx529_bstack, alt542_1, rx529_pos, 0
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:"(", rx529_fail
    add rx529_pos, 1
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."signature"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    nqp_rxmark rx529_bstack, rxsubrule545_pass, -1, 0
  rxsubrule545_pass:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    add $I11, rx529_pos, 1
    gt $I11, rx529_eos, rx529_fail
    substr $S10, rx529_tgt, rx529_pos, 1
    ne $S10, ucs4:")", rx529_fail
    add rx529_pos, 1
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    goto alt542_end
  alt542_1:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt542_end:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  # rx rxquantr552 ** 0..-1
    nqp_rxmark rx529_bstack, rxquantr552_done, rx529_pos, 0
  rxquantr552_loop:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."trait"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    goto rxsubrule553_pass
  rxsubrule553_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
  rxsubrule553_pass:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule553_back
    push rx529_bstack, $I11
    push rx529_bstack, 0
    push rx529_bstack, rx529_pos
    elements $I11, rx529_cstack
    push rx529_bstack, $I11
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    nqp_rxpeek $I19, rx529_bstack, rxquantr552_done
    inc $I19
    inc $I19
    set rx529_rep, rx529_bstack[$I19]
    nqp_rxcommit rx529_bstack, rxquantr552_done
    inc rx529_rep
    nqp_rxmark rx529_bstack, rxquantr552_done, rx529_pos, rx529_rep
    goto rxquantr552_loop
  rxquantr552_done:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt555_0:
    nqp_rxmark rx529_bstack, alt555_1, rx529_pos, 0
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    nqp_rxmark rx529_bstack, rxsubrule557_pass, -1, 0
  rxsubrule557_pass:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    goto alt555_end
  alt555_1:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    nqp_rxmark rx529_bstack, rxsubrule560_pass, -1, 0
  rxsubrule560_pass:
    rx529_cstack = rx529_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
  alt555_end:
    repr_bind_attr_int rx529_cur, rx529_curclass, "$!pos", rx529_pos
    $P11 = rx529_cur."ws"()
    repr_get_attr_int $I11, $P11, rx529_curclass, "$!pos"
    lt $I11, 0, rx529_fail
    repr_get_attr_int rx529_pos, $P11, rx529_curclass, "$!pos"
    rx529_cur."!cursor_pass"(rx529_pos, "routine_def", 'backtrack'=>1)
    .return (rx529_cur)
  rx529_restart:
    repr_get_attr_obj rx529_cstack, rx529_cur, rx529_curclass, "$!cstack"
  rx529_fail:
    unless rx529_bstack, rx529_done
    pop $I19, rx529_bstack
    if_null rx529_cstack, rx529_cstack_done
    unless rx529_cstack, rx529_cstack_done
    dec $I19
    set $P11, rx529_cstack[$I19]
  rx529_cstack_done:
    pop rx529_rep, rx529_bstack
    pop rx529_pos, rx529_bstack
    pop $I19, rx529_bstack
    lt rx529_pos, -1, rx529_done
    lt rx529_pos, 0, rx529_fail
    eq $I19, 0, rx529_fail
    if_null rx529_cstack, rx529_jump
    elements $I18, rx529_bstack
    le $I18, 0, rx529_cut
    dec $I18
    set $I18, rx529_bstack[$I18]
  rx529_cut:
    assign rx529_cstack, $I18
  rx529_jump:
    jump $I19
  rx529_done:
    rx529_cur."!cursor_fail"()
    .return (rx529_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "127_1338064451.944_caps"  :subid("551_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1053
    new $P105, "Hash"
    set $P105["sigil"], 2
    set $P105["deflongname"], 2
    set $P105["signature"], 0
    set $P105["trait"], 2
    set $P105["onlystar"], 0
    set $P105["blockoid"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "method_def"  :subid("128_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2006
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1066
    .const 'Sub' $P2013 = "553_1338064451.944" 
    capture_lex $P2013
    .lex "self", param_2006
.annotate 'line', 1067
    new $P103, "Undef"
    set $P2007, $P103
    .lex "$*RETURN_USED", $P2007
.annotate 'line', 1068
    new $P104, "Undef"
    set $P2008, $P104
    .lex "$*INVOCANT_OK", $P2008
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P2009
    .lex "$/", $P2010
.annotate 'line', 1066
    .local string rx563_tgt
    .local int rx563_pos
    .local int rx563_off
    .local int rx563_eos
    .local int rx563_rep
    .local pmc rx563_cur
    .local pmc rx563_curclass
    .local pmc rx563_bstack
    .local pmc rx563_cstack
    (rx563_cur, rx563_tgt, rx563_pos, rx563_curclass, rx563_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx563_cur
    length rx563_eos, rx563_tgt
    eq $I19, 1, rx563_restart
    repr_get_attr_int $I11, self, rx563_curclass, "$!from"
    ne $I11, -1, rxscan564_done
    goto rxscan564_scan
  rxscan564_loop:
    inc rx563_pos
    gt rx563_pos, rx563_eos, rx563_fail
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!from", rx563_pos
  rxscan564_scan:
    nqp_rxmark rx563_bstack, rxscan564_loop, rx563_pos, 0
  rxscan564_done:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    store_lex unicode:"$\x{a2}", rx563_cur
.annotate 'line', 1067
    new $P107, "Float"
    assign $P107, 0
    set $P2007, $P107
.annotate 'line', 1066
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    store_lex unicode:"$\x{a2}", rx563_cur
.annotate 'line', 1068
    new $P109, "Float"
    assign $P109, 1
    set $P2008, $P109
.annotate 'line', 1066
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    nqp_rxmark rx563_bstack, rxcap568_fail, rx563_pos, 0
  # rx rxquantr569 ** 0..1
    nqp_rxmark rx563_bstack, rxquantr569_done, rx563_pos, 0
  rxquantr569_loop:
    add $I11, rx563_pos, 1
    gt $I11, rx563_eos, rx563_fail
    substr $S10, rx563_tgt, rx563_pos, 1
    ne $S10, ucs4:"!", rx563_fail
    add rx563_pos, 1
    nqp_rxpeek $I19, rx563_bstack, rxquantr569_done
    inc $I19
    inc $I19
    set rx563_rep, rx563_bstack[$I19]
    nqp_rxcommit rx563_bstack, rxquantr569_done
    inc rx563_rep
  rxquantr569_done:
    nqp_rxpeek $I19, rx563_bstack, rxcap568_fail
    inc $I19
    set $I11, rx563_bstack[$I19]
    $P11 = rx563_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx563_pos)
    rx563_cstack = rx563_cur."!cursor_capture"($P11, "private")
    goto rxcap568_done
  rxcap568_fail:
    goto rx563_fail
  rxcap568_done:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
  # rx rxquantr571 ** 0..1
    nqp_rxmark rx563_bstack, rxquantr571_done, rx563_pos, 0
  rxquantr571_loop:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    goto rxsubrule572_pass
  rxsubrule572_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
  rxsubrule572_pass:
    rx563_cstack = rx563_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule572_back
    push rx563_bstack, $I11
    push rx563_bstack, 0
    push rx563_bstack, rx563_pos
    elements $I11, rx563_cstack
    push rx563_bstack, $I11
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    nqp_rxpeek $I19, rx563_bstack, rxquantr571_done
    inc $I19
    inc $I19
    set rx563_rep, rx563_bstack[$I19]
    nqp_rxcommit rx563_bstack, rxquantr571_done
    inc rx563_rep
  rxquantr571_done:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
  alt576_0:
    nqp_rxmark rx563_bstack, alt576_1, rx563_pos, 0
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    add $I11, rx563_pos, 1
    gt $I11, rx563_eos, rx563_fail
    substr $S10, rx563_tgt, rx563_pos, 1
    ne $S10, ucs4:"(", rx563_fail
    add rx563_pos, 1
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."signature"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    nqp_rxmark rx563_bstack, rxsubrule579_pass, -1, 0
  rxsubrule579_pass:
    rx563_cstack = rx563_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    add $I11, rx563_pos, 1
    gt $I11, rx563_eos, rx563_fail
    substr $S10, rx563_tgt, rx563_pos, 1
    ne $S10, ucs4:")", rx563_fail
    add rx563_pos, 1
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    goto alt576_end
  alt576_1:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
  alt576_end:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    store_lex unicode:"$\x{a2}", rx563_cur
    find_lex $P121, unicode:"$\x{a2}"
    $P122 = $P121."MATCH"()
    store_lex "$/", $P122
.annotate 'line', 1074
    .const 'Sub' $P2013 = "553_1338064451.944" 
    capture_lex $P2013
    $P124 = $P2013()
.annotate 'line', 1066
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
  # rx rxquantr587 ** 0..-1
    nqp_rxmark rx563_bstack, rxquantr587_done, rx563_pos, 0
  rxquantr587_loop:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."trait"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    goto rxsubrule588_pass
  rxsubrule588_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
  rxsubrule588_pass:
    rx563_cstack = rx563_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule588_back
    push rx563_bstack, $I11
    push rx563_bstack, 0
    push rx563_bstack, rx563_pos
    elements $I11, rx563_cstack
    push rx563_bstack, $I11
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    nqp_rxpeek $I19, rx563_bstack, rxquantr587_done
    inc $I19
    inc $I19
    set rx563_rep, rx563_bstack[$I19]
    nqp_rxcommit rx563_bstack, rxquantr587_done
    inc rx563_rep
    nqp_rxmark rx563_bstack, rxquantr587_done, rx563_pos, rx563_rep
    goto rxquantr587_loop
  rxquantr587_done:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
  alt590_0:
    nqp_rxmark rx563_bstack, alt590_1, rx563_pos, 0
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    nqp_rxmark rx563_bstack, rxsubrule592_pass, -1, 0
  rxsubrule592_pass:
    rx563_cstack = rx563_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    goto alt590_end
  alt590_1:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    nqp_rxmark rx563_bstack, rxsubrule595_pass, -1, 0
  rxsubrule595_pass:
    rx563_cstack = rx563_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
  alt590_end:
    repr_bind_attr_int rx563_cur, rx563_curclass, "$!pos", rx563_pos
    $P11 = rx563_cur."ws"()
    repr_get_attr_int $I11, $P11, rx563_curclass, "$!pos"
    lt $I11, 0, rx563_fail
    repr_get_attr_int rx563_pos, $P11, rx563_curclass, "$!pos"
    rx563_cur."!cursor_pass"(rx563_pos, "method_def", 'backtrack'=>1)
    .return (rx563_cur)
  rx563_restart:
    repr_get_attr_obj rx563_cstack, rx563_cur, rx563_curclass, "$!cstack"
  rx563_fail:
    unless rx563_bstack, rx563_done
    pop $I19, rx563_bstack
    if_null rx563_cstack, rx563_cstack_done
    unless rx563_cstack, rx563_cstack_done
    dec $I19
    set $P11, rx563_cstack[$I19]
  rx563_cstack_done:
    pop rx563_rep, rx563_bstack
    pop rx563_pos, rx563_bstack
    pop $I19, rx563_bstack
    lt rx563_pos, -1, rx563_done
    lt rx563_pos, 0, rx563_fail
    eq $I19, 0, rx563_fail
    if_null rx563_cstack, rx563_jump
    elements $I18, rx563_bstack
    le $I18, 0, rx563_cut
    dec $I18
    set $I18, rx563_bstack[$I18]
  rx563_cut:
    assign rx563_cstack, $I18
  rx563_jump:
    jump $I19
  rx563_done:
    rx563_cur."!cursor_fail"()
    .return (rx563_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "128_1338064451.944_caps"  :subid("552_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1066
    new $P106, "Hash"
    set $P106["private"], 0
    set $P106["deflongname"], 2
    set $P106["signature"], 0
    set $P106["trait"], 2
    set $P106["onlystar"], 0
    set $P106["blockoid"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2012"  :anon :subid("553_1338064451.944") :outer("128_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1074
    new $P123, "Float"
    assign $P123, 0
    store_dynamic_lex "$*INVOCANT_OK", $P123
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "onlystar"  :subid("129_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2015
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082
    .const 'Sub' $P2021 = "556_1338064451.944" 
    capture_lex $P2021
    .lex "self", param_2015
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2016
    .lex "$/", $P2017
    .local string rx598_tgt
    .local int rx598_pos
    .local int rx598_off
    .local int rx598_eos
    .local int rx598_rep
    .local pmc rx598_cur
    .local pmc rx598_curclass
    .local pmc rx598_bstack
    .local pmc rx598_cstack
    (rx598_cur, rx598_tgt, rx598_pos, rx598_curclass, rx598_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx598_cur
    length rx598_eos, rx598_tgt
    eq $I19, 1, rx598_restart
    repr_get_attr_int $I11, self, rx598_curclass, "$!from"
    ne $I11, -1, rxscan599_done
    goto rxscan599_scan
  rxscan599_loop:
    inc rx598_pos
    gt rx598_pos, rx598_eos, rx598_fail
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!from", rx598_pos
  rxscan599_scan:
    nqp_rxmark rx598_bstack, rxscan599_loop, rx598_pos, 0
  rxscan599_done:
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    store_lex unicode:"$\x{a2}", rx598_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 1083
    .const 'Sub' $P2021 = "556_1338064451.944" 
    capture_lex $P2021
    $P106 = $P2021()
.annotate 'line', 1082
    unless $P106, rx598_fail
    add $I11, rx598_pos, 1
    gt $I11, rx598_eos, rx598_fail
    substr $S10, rx598_tgt, rx598_pos, 1
    ne $S10, ucs4:"{", rx598_fail
    add rx598_pos, 1
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    $P11 = rx598_cur."ws"()
    repr_get_attr_int $I11, $P11, rx598_curclass, "$!pos"
    lt $I11, 0, rx598_fail
    repr_get_attr_int rx598_pos, $P11, rx598_curclass, "$!pos"
    add $I11, rx598_pos, 1
    gt $I11, rx598_eos, rx598_fail
    substr $S10, rx598_tgt, rx598_pos, 1
    ne $S10, ucs4:"*", rx598_fail
    add rx598_pos, 1
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    $P11 = rx598_cur."ws"()
    repr_get_attr_int $I11, $P11, rx598_curclass, "$!pos"
    lt $I11, 0, rx598_fail
    repr_get_attr_int rx598_pos, $P11, rx598_curclass, "$!pos"
    add $I11, rx598_pos, 1
    gt $I11, rx598_eos, rx598_fail
    substr $S10, rx598_tgt, rx598_pos, 1
    ne $S10, ucs4:"}", rx598_fail
    add rx598_pos, 1
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    $P11 = rx598_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx598_curclass, "$!pos"
    lt $I11, 0, rx598_fail
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    $P11 = rx598_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx598_curclass, "$!pos"
    lt $I11, 0, rx598_fail
    repr_get_attr_int rx598_pos, $P11, rx598_curclass, "$!pos"
    rx598_cur."!cursor_pass"(rx598_pos, "onlystar", 'backtrack'=>1)
    .return (rx598_cur)
  rx598_restart:
    repr_get_attr_obj rx598_cstack, rx598_cur, rx598_curclass, "$!cstack"
  rx598_fail:
    unless rx598_bstack, rx598_done
    pop $I19, rx598_bstack
    if_null rx598_cstack, rx598_cstack_done
    unless rx598_cstack, rx598_cstack_done
    dec $I19
    set $P11, rx598_cstack[$I19]
  rx598_cstack_done:
    pop rx598_rep, rx598_bstack
    pop rx598_pos, rx598_bstack
    pop $I19, rx598_bstack
    lt rx598_pos, -1, rx598_done
    lt rx598_pos, 0, rx598_fail
    eq $I19, 0, rx598_fail
    if_null rx598_cstack, rx598_jump
    elements $I18, rx598_bstack
    le $I18, 0, rx598_cut
    dec $I18
    set $I18, rx598_bstack[$I18]
  rx598_cut:
    assign rx598_cstack, $I18
  rx598_jump:
    jump $I19
  rx598_done:
    rx598_cur."!cursor_fail"()
    .return (rx598_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "129_1338064451.944_caps"  :subid("554_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "129_1338064451.944_nfa"  :subid("555_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 123
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ws"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 42
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 125
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "ENDSTMT"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2020"  :anon :subid("556_1338064451.944") :outer("129_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1083
    find_dynamic_lex $P108, "$*MULTINESS"
    unless_null $P108, vivify_1350
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$MULTINESS"]
    unless_null $P108, vivify_1351
    die "Contextual $*MULTINESS not found"
  vivify_1351:
  vivify_1350:
    set $S100, $P108
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator"  :subid("130_1338064451.944")
    .param pmc param_2023
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1089
    .lex "self", param_2023
    $P103 = param_2023."!protoregex"("multi_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<multi>"  :subid("131_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2025
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    .lex "self", param_2025
.annotate 'line', 1091
    new $P103, "Undef"
    set $P2026, $P103
    .lex "$*MULTINESS", $P2026
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P2027
    .lex "$/", $P2028
.annotate 'line', 1090
    .local string rx603_tgt
    .local int rx603_pos
    .local int rx603_off
    .local int rx603_eos
    .local int rx603_rep
    .local pmc rx603_cur
    .local pmc rx603_curclass
    .local pmc rx603_bstack
    .local pmc rx603_cstack
    (rx603_cur, rx603_tgt, rx603_pos, rx603_curclass, rx603_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx603_cur
    length rx603_eos, rx603_tgt
    eq $I19, 1, rx603_restart
    repr_get_attr_int $I11, self, rx603_curclass, "$!from"
    ne $I11, -1, rxscan604_done
    goto rxscan604_scan
  rxscan604_loop:
    inc rx603_pos
    gt rx603_pos, rx603_eos, rx603_fail
    repr_bind_attr_int rx603_cur, rx603_curclass, "$!from", rx603_pos
  rxscan604_scan:
    nqp_rxmark rx603_bstack, rxscan604_loop, rx603_pos, 0
  rxscan604_done:
    repr_bind_attr_int rx603_cur, rx603_curclass, "$!pos", rx603_pos
    store_lex unicode:"$\x{a2}", rx603_cur
.annotate 'line', 1091
    new $P105, "String"
    assign $P105, "multi"
    set $P2026, $P105
.annotate 'line', 1090
    nqp_rxmark rx603_bstack, rxcap605_fail, rx603_pos, 0
    add $I11, rx603_pos, 5
    gt $I11, rx603_eos, rx603_fail
    substr $S10, rx603_tgt, rx603_pos, 5
    ne $S10, ucs4:"multi", rx603_fail
    add rx603_pos, 5
    nqp_rxpeek $I19, rx603_bstack, rxcap605_fail
    inc $I19
    set $I11, rx603_bstack[$I19]
    $P11 = rx603_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx603_pos)
    rx603_cstack = rx603_cur."!cursor_capture"($P11, "sym")
    goto rxcap605_done
  rxcap605_fail:
    goto rx603_fail
  rxcap605_done:
    repr_bind_attr_int rx603_cur, rx603_curclass, "$!pos", rx603_pos
    $P11 = rx603_cur."ws"()
    repr_get_attr_int $I11, $P11, rx603_curclass, "$!pos"
    lt $I11, 0, rx603_fail
    repr_get_attr_int rx603_pos, $P11, rx603_curclass, "$!pos"
  alt607_0:
    nqp_rxmark rx603_bstack, alt607_1, rx603_pos, 0
    repr_bind_attr_int rx603_cur, rx603_curclass, "$!pos", rx603_pos
    $P11 = rx603_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx603_curclass, "$!pos"
    lt $I11, 0, rx603_fail
    nqp_rxmark rx603_bstack, rxsubrule608_pass, -1, 0
  rxsubrule608_pass:
    rx603_cstack = rx603_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx603_pos, $P11, rx603_curclass, "$!pos"
    goto alt607_end
  alt607_1:
    nqp_rxmark rx603_bstack, alt607_2, rx603_pos, 0
    repr_bind_attr_int rx603_cur, rx603_curclass, "$!pos", rx603_pos
    $P11 = rx603_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx603_curclass, "$!pos"
    lt $I11, 0, rx603_fail
    nqp_rxmark rx603_bstack, rxsubrule609_pass, -1, 0
  rxsubrule609_pass:
    rx603_cstack = rx603_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx603_pos, $P11, rx603_curclass, "$!pos"
    goto alt607_end
  alt607_2:
    repr_bind_attr_int rx603_cur, rx603_curclass, "$!pos", rx603_pos
    $P11 = rx603_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx603_curclass, "$!pos"
    lt $I11, 0, rx603_fail
    repr_get_attr_int rx603_pos, $P11, rx603_curclass, "$!pos"
  alt607_end:
    rx603_cur."!cursor_pass"(rx603_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx603_cur)
  rx603_restart:
    repr_get_attr_obj rx603_cstack, rx603_cur, rx603_curclass, "$!cstack"
  rx603_fail:
    unless rx603_bstack, rx603_done
    pop $I19, rx603_bstack
    if_null rx603_cstack, rx603_cstack_done
    unless rx603_cstack, rx603_cstack_done
    dec $I19
    set $P11, rx603_cstack[$I19]
  rx603_cstack_done:
    pop rx603_rep, rx603_bstack
    pop rx603_pos, rx603_bstack
    pop $I19, rx603_bstack
    lt rx603_pos, -1, rx603_done
    lt rx603_pos, 0, rx603_fail
    eq $I19, 0, rx603_fail
    if_null rx603_cstack, rx603_jump
    elements $I18, rx603_bstack
    le $I18, 0, rx603_cut
    dec $I18
    set $I18, rx603_bstack[$I18]
  rx603_cut:
    assign rx603_cstack, $I18
  rx603_jump:
    jump $I19
  rx603_done:
    rx603_cur."!cursor_fail"()
    .return (rx603_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "131_1338064451.944_caps"  :subid("557_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    new $P105, "Hash"
    set $P105["sym"], 0
    set $P105["declarator"], 0
    set $P105["routine_def"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "131_1338064451.944_nfa"  :subid("558_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    new $P105, "ResizablePMCArray"
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 109
    push $P107, 3
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 117
    push $P108, 4
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 108
    push $P109, 5
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 6
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 105
    push $P111, 7
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "ws"
    push $P112, 8
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<proto>"  :subid("132_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2032
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095
    .lex "self", param_2032
.annotate 'line', 1096
    new $P103, "Undef"
    set $P2033, $P103
    .lex "$*MULTINESS", $P2033
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P2034
    .lex "$/", $P2035
.annotate 'line', 1095
    .local string rx611_tgt
    .local int rx611_pos
    .local int rx611_off
    .local int rx611_eos
    .local int rx611_rep
    .local pmc rx611_cur
    .local pmc rx611_curclass
    .local pmc rx611_bstack
    .local pmc rx611_cstack
    (rx611_cur, rx611_tgt, rx611_pos, rx611_curclass, rx611_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx611_cur
    length rx611_eos, rx611_tgt
    eq $I19, 1, rx611_restart
    repr_get_attr_int $I11, self, rx611_curclass, "$!from"
    ne $I11, -1, rxscan612_done
    goto rxscan612_scan
  rxscan612_loop:
    inc rx611_pos
    gt rx611_pos, rx611_eos, rx611_fail
    repr_bind_attr_int rx611_cur, rx611_curclass, "$!from", rx611_pos
  rxscan612_scan:
    nqp_rxmark rx611_bstack, rxscan612_loop, rx611_pos, 0
  rxscan612_done:
    repr_bind_attr_int rx611_cur, rx611_curclass, "$!pos", rx611_pos
    store_lex unicode:"$\x{a2}", rx611_cur
.annotate 'line', 1096
    new $P105, "String"
    assign $P105, "proto"
    set $P2033, $P105
.annotate 'line', 1095
    nqp_rxmark rx611_bstack, rxcap613_fail, rx611_pos, 0
    add $I11, rx611_pos, 5
    gt $I11, rx611_eos, rx611_fail
    substr $S10, rx611_tgt, rx611_pos, 5
    ne $S10, ucs4:"proto", rx611_fail
    add rx611_pos, 5
    nqp_rxpeek $I19, rx611_bstack, rxcap613_fail
    inc $I19
    set $I11, rx611_bstack[$I19]
    $P11 = rx611_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx611_pos)
    rx611_cstack = rx611_cur."!cursor_capture"($P11, "sym")
    goto rxcap613_done
  rxcap613_fail:
    goto rx611_fail
  rxcap613_done:
    repr_bind_attr_int rx611_cur, rx611_curclass, "$!pos", rx611_pos
    $P11 = rx611_cur."ws"()
    repr_get_attr_int $I11, $P11, rx611_curclass, "$!pos"
    lt $I11, 0, rx611_fail
    repr_get_attr_int rx611_pos, $P11, rx611_curclass, "$!pos"
  alt615_0:
    nqp_rxmark rx611_bstack, alt615_1, rx611_pos, 0
    repr_bind_attr_int rx611_cur, rx611_curclass, "$!pos", rx611_pos
    $P11 = rx611_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx611_curclass, "$!pos"
    lt $I11, 0, rx611_fail
    nqp_rxmark rx611_bstack, rxsubrule616_pass, -1, 0
  rxsubrule616_pass:
    rx611_cstack = rx611_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx611_pos, $P11, rx611_curclass, "$!pos"
    goto alt615_end
  alt615_1:
    nqp_rxmark rx611_bstack, alt615_2, rx611_pos, 0
    repr_bind_attr_int rx611_cur, rx611_curclass, "$!pos", rx611_pos
    $P11 = rx611_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx611_curclass, "$!pos"
    lt $I11, 0, rx611_fail
    nqp_rxmark rx611_bstack, rxsubrule617_pass, -1, 0
  rxsubrule617_pass:
    rx611_cstack = rx611_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx611_pos, $P11, rx611_curclass, "$!pos"
    goto alt615_end
  alt615_2:
    repr_bind_attr_int rx611_cur, rx611_curclass, "$!pos", rx611_pos
    $P11 = rx611_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx611_curclass, "$!pos"
    lt $I11, 0, rx611_fail
    repr_get_attr_int rx611_pos, $P11, rx611_curclass, "$!pos"
  alt615_end:
    rx611_cur."!cursor_pass"(rx611_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx611_cur)
  rx611_restart:
    repr_get_attr_obj rx611_cstack, rx611_cur, rx611_curclass, "$!cstack"
  rx611_fail:
    unless rx611_bstack, rx611_done
    pop $I19, rx611_bstack
    if_null rx611_cstack, rx611_cstack_done
    unless rx611_cstack, rx611_cstack_done
    dec $I19
    set $P11, rx611_cstack[$I19]
  rx611_cstack_done:
    pop rx611_rep, rx611_bstack
    pop rx611_pos, rx611_bstack
    pop $I19, rx611_bstack
    lt rx611_pos, -1, rx611_done
    lt rx611_pos, 0, rx611_fail
    eq $I19, 0, rx611_fail
    if_null rx611_cstack, rx611_jump
    elements $I18, rx611_bstack
    le $I18, 0, rx611_cut
    dec $I18
    set $I18, rx611_bstack[$I18]
  rx611_cut:
    assign rx611_cstack, $I18
  rx611_jump:
    jump $I19
  rx611_done:
    rx611_cur."!cursor_fail"()
    .return (rx611_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "132_1338064451.944_caps"  :subid("559_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095
    new $P105, "Hash"
    set $P105["sym"], 0
    set $P105["declarator"], 0
    set $P105["routine_def"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "132_1338064451.944_nfa"  :subid("560_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095
    new $P105, "ResizablePMCArray"
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 112
    push $P107, 3
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 114
    push $P108, 4
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 5
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 6
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 7
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "ws"
    push $P112, 8
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<null>"  :subid("133_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2039
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1100
    .lex "self", param_2039
.annotate 'line', 1101
    new $P103, "Undef"
    set $P2040, $P103
    .lex "$*MULTINESS", $P2040
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P2041
    .lex "$/", $P2042
.annotate 'line', 1100
    .local string rx619_tgt
    .local int rx619_pos
    .local int rx619_off
    .local int rx619_eos
    .local int rx619_rep
    .local pmc rx619_cur
    .local pmc rx619_curclass
    .local pmc rx619_bstack
    .local pmc rx619_cstack
    (rx619_cur, rx619_tgt, rx619_pos, rx619_curclass, rx619_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx619_cur
    length rx619_eos, rx619_tgt
    eq $I19, 1, rx619_restart
    repr_get_attr_int $I11, self, rx619_curclass, "$!from"
    ne $I11, -1, rxscan620_done
    goto rxscan620_scan
  rxscan620_loop:
    inc rx619_pos
    gt rx619_pos, rx619_eos, rx619_fail
    repr_bind_attr_int rx619_cur, rx619_curclass, "$!from", rx619_pos
  rxscan620_scan:
    nqp_rxmark rx619_bstack, rxscan620_loop, rx619_pos, 0
  rxscan620_done:
    repr_bind_attr_int rx619_cur, rx619_curclass, "$!pos", rx619_pos
    store_lex unicode:"$\x{a2}", rx619_cur
.annotate 'line', 1101
    new $P105, "String"
    assign $P105, ""
    set $P2040, $P105
.annotate 'line', 1100
    repr_bind_attr_int rx619_cur, rx619_curclass, "$!pos", rx619_pos
    $P11 = rx619_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx619_curclass, "$!pos"
    lt $I11, 0, rx619_fail
    nqp_rxmark rx619_bstack, rxsubrule621_pass, -1, 0
  rxsubrule621_pass:
    rx619_cstack = rx619_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx619_pos, $P11, rx619_curclass, "$!pos"
    rx619_cur."!cursor_pass"(rx619_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx619_cur)
  rx619_restart:
    repr_get_attr_obj rx619_cstack, rx619_cur, rx619_curclass, "$!cstack"
  rx619_fail:
    unless rx619_bstack, rx619_done
    pop $I19, rx619_bstack
    if_null rx619_cstack, rx619_cstack_done
    unless rx619_cstack, rx619_cstack_done
    dec $I19
    set $P11, rx619_cstack[$I19]
  rx619_cstack_done:
    pop rx619_rep, rx619_bstack
    pop rx619_pos, rx619_bstack
    pop $I19, rx619_bstack
    lt rx619_pos, -1, rx619_done
    lt rx619_pos, 0, rx619_fail
    eq $I19, 0, rx619_fail
    if_null rx619_cstack, rx619_jump
    elements $I18, rx619_bstack
    le $I18, 0, rx619_cut
    dec $I18
    set $I18, rx619_bstack[$I18]
  rx619_cut:
    assign rx619_cstack, $I18
  rx619_jump:
    jump $I19
  rx619_done:
    rx619_cur."!cursor_fail"()
    .return (rx619_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "133_1338064451.944_caps"  :subid("561_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1100
    new $P105, "Hash"
    set $P105["declarator"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "133_1338064451.944_nfa"  :subid("562_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1100
    new $P105, "ResizablePMCArray"
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "declarator"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "signature"  :subid("135_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2046
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    .const 'Sub' $P2054 = "134_1338064451.944" 
    capture_lex $P2054
    .const 'Sub' $P2052 = "565_1338064451.944" 
    capture_lex $P2052
    .lex "self", param_2046
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2047
    .lex "$/", $P2048
    .local string rx622_tgt
    .local int rx622_pos
    .local int rx622_off
    .local int rx622_eos
    .local int rx622_rep
    .local pmc rx622_cur
    .local pmc rx622_curclass
    .local pmc rx622_bstack
    .local pmc rx622_cstack
    (rx622_cur, rx622_tgt, rx622_pos, rx622_curclass, rx622_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx622_cur
    length rx622_eos, rx622_tgt
    eq $I19, 1, rx622_restart
    repr_get_attr_int $I11, self, rx622_curclass, "$!from"
    ne $I11, -1, rxscan623_done
    goto rxscan623_scan
  rxscan623_loop:
    inc rx622_pos
    gt rx622_pos, rx622_eos, rx622_fail
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!from", rx622_pos
  rxscan623_scan:
    nqp_rxmark rx622_bstack, rxscan623_loop, rx622_pos, 0
  rxscan623_done:
  # rx rxquantr624 ** 0..1
    nqp_rxmark rx622_bstack, rxquantr624_done, rx622_pos, 0
  rxquantr624_loop:
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    store_lex unicode:"$\x{a2}", rx622_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 1106
    .const 'Sub' $P2052 = "565_1338064451.944" 
    capture_lex $P2052
    $P106 = $P2052()
.annotate 'line', 1105
    unless $P106, rx622_fail
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail
    nqp_rxmark rx622_bstack, rxsubrule626_pass, -1, 0
  rxsubrule626_pass:
    rx622_cstack = rx622_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    add $I11, rx622_pos, 1
    gt $I11, rx622_eos, rx622_fail
    substr $S10, rx622_tgt, rx622_pos, 1
    ne $S10, ucs4:":", rx622_fail
    add rx622_pos, 1
    nqp_rxpeek $I19, rx622_bstack, rxquantr624_done
    inc $I19
    inc $I19
    set rx622_rep, rx622_bstack[$I19]
    nqp_rxcommit rx622_bstack, rxquantr624_done
    inc rx622_rep
  rxquantr624_done:
  # rx rxquantr628 ** 0..1
    nqp_rxmark rx622_bstack, rxquantr628_done, rx622_pos, 0
  rxquantr628_loop:
  # rx rxquantr629 ** 0..-1
    nqp_rxmark rx622_bstack, rxquantr629_done, rx622_pos, 0
  rxquantr629_loop:
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail
    nqp_rxmark rx622_bstack, rxsubrule631_pass, -1, 0
  rxsubrule631_pass:
    rx622_cstack = rx622_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."ws"()
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
  alt633_0:
    nqp_rxmark rx622_bstack, alt633_1, rx622_pos, 0
    add $I11, rx622_pos, 1
    gt $I11, rx622_eos, rx622_fail
    substr $S10, rx622_tgt, rx622_pos, 1
    ne $S10, ucs4:",", rx622_fail
    add rx622_pos, 1
    goto alt633_end
  alt633_1:
    .const 'Sub' $P2054 = "134_1338064451.944" 
    capture_lex $P2054
    repr_bind_attr_int rx622_cur, rx622_curclass, "$!pos", rx622_pos
    $P11 = rx622_cur."before"($P2054)
    repr_get_attr_int $I11, $P11, rx622_curclass, "$!pos"
    lt $I11, 0, rx622_fail
    nqp_rxmark rx622_bstack, rxsubrule638_pass, -1, 0
  rxsubrule638_pass:
    rx622_cstack = rx622_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx622_pos, $P11, rx622_curclass, "$!pos"
  alt633_end:
    nqp_rxpeek $I19, rx622_bstack, rxquantr629_done
    inc $I19
    inc $I19
    set rx622_rep, rx622_bstack[$I19]
    nqp_rxcommit rx622_bstack, rxquantr629_done
    inc rx622_rep
    nqp_rxmark rx622_bstack, rxquantr629_done, rx622_pos, rx622_rep
    goto rxquantr629_loop
  rxquantr629_done:
    nqp_rxpeek $I19, rx622_bstack, rxquantr628_done
    inc $I19
    inc $I19
    set rx622_rep, rx622_bstack[$I19]
    nqp_rxcommit rx622_bstack, rxquantr628_done
    inc rx622_rep
  rxquantr628_done:
    rx622_cur."!cursor_pass"(rx622_pos, "signature", 'backtrack'=>1)
    .return (rx622_cur)
  rx622_restart:
    repr_get_attr_obj rx622_cstack, rx622_cur, rx622_curclass, "$!cstack"
  rx622_fail:
    unless rx622_bstack, rx622_done
    pop $I19, rx622_bstack
    if_null rx622_cstack, rx622_cstack_done
    unless rx622_cstack, rx622_cstack_done
    dec $I19
    set $P11, rx622_cstack[$I19]
  rx622_cstack_done:
    pop rx622_rep, rx622_bstack
    pop rx622_pos, rx622_bstack
    pop $I19, rx622_bstack
    lt rx622_pos, -1, rx622_done
    lt rx622_pos, 0, rx622_fail
    eq $I19, 0, rx622_fail
    if_null rx622_cstack, rx622_jump
    elements $I18, rx622_bstack
    le $I18, 0, rx622_cut
    dec $I18
    set $I18, rx622_bstack[$I18]
  rx622_cut:
    assign rx622_cstack, $I18
  rx622_jump:
    jump $I19
  rx622_done:
    rx622_cur."!cursor_fail"()
    .return (rx622_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "135_1338064451.944_caps"  :subid("563_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    new $P104, "Hash"
    set $P104["invocant"], 2
    set $P104["parameter"], 2
    set $P104["before"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "135_1338064451.944_nfa"  :subid("564_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 6
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "parameter"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "ws"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 58
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 7
    push $P110, 1
    push $P110, 0
    push $P110, 0
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "parameter"
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "ws"
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 44
    push $P113, 6
    push $P113, 4
    push $P113, 32
    push $P113, 9
    push $P113, 1
    push $P113, 0
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 41
    push $P114, 0
    push $P114, 2
    push $P114, 123
    push $P114, 0
    new $P115, "ResizablePMCArray"
    push $P115, $P104
    push $P115, $P105
    push $P115, $P106
    push $P115, $P107
    push $P115, $P108
    push $P115, $P109
    push $P115, $P110
    push $P115, $P111
    push $P115, $P112
    push $P115, $P113
    push $P115, $P114
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2051"  :anon :subid("565_1338064451.944") :outer("135_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1106
    find_dynamic_lex $P108, "$*INVOCANT_OK"
    unless_null $P108, vivify_1352
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$INVOCANT_OK"]
    unless_null $P108, vivify_1353
    die "Contextual $*INVOCANT_OK not found"
  vivify_1353:
  vivify_1352:
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2053"  :anon :subid("134_1338064451.944") :method :outer("135_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    .lex unicode:"$\x{a2}", $P2057
    .local string rx634_tgt
    .local int rx634_pos
    .local int rx634_off
    .local int rx634_eos
    .local int rx634_rep
    .local pmc rx634_cur
    .local pmc rx634_curclass
    .local pmc rx634_bstack
    .local pmc rx634_cstack
    (rx634_cur, rx634_tgt, rx634_pos, rx634_curclass, rx634_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx634_cur
    length rx634_eos, rx634_tgt
    eq $I19, 1, rx634_restart
    repr_get_attr_int $I11, self, rx634_curclass, "$!from"
    ne $I11, -1, rxscan635_done
    goto rxscan635_scan
  rxscan635_loop:
    inc rx634_pos
    gt rx634_pos, rx634_eos, rx634_fail
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!from", rx634_pos
  rxscan635_scan:
    nqp_rxmark rx634_bstack, rxscan635_loop, rx634_pos, 0
  rxscan635_done:
  # rx rxquantr636 ** 0..-1
    nqp_rxmark rx634_bstack, rxquantr636_done, rx634_pos, 0
  rxquantr636_loop:
    ge rx634_pos, rx634_eos, rx634_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx634_tgt, rx634_pos
    unless $I11, rx634_fail
    add rx634_pos, 1
    nqp_rxpeek $I19, rx634_bstack, rxquantr636_done
    inc $I19
    inc $I19
    set rx634_rep, rx634_bstack[$I19]
    nqp_rxcommit rx634_bstack, rxquantr636_done
    inc rx634_rep
    nqp_rxmark rx634_bstack, rxquantr636_done, rx634_pos, rx634_rep
    goto rxquantr636_loop
  rxquantr636_done:
  alt637_0:
    nqp_rxmark rx634_bstack, alt637_1, rx634_pos, 0
    add $I11, rx634_pos, 1
    gt $I11, rx634_eos, rx634_fail
    substr $S10, rx634_tgt, rx634_pos, 1
    ne $S10, ucs4:")", rx634_fail
    add rx634_pos, 1
    goto alt637_end
  alt637_1:
    add $I11, rx634_pos, 1
    gt $I11, rx634_eos, rx634_fail
    substr $S10, rx634_tgt, rx634_pos, 1
    ne $S10, ucs4:"{", rx634_fail
    add rx634_pos, 1
  alt637_end:
    rx634_cur."!cursor_pass"(rx634_pos, 'backtrack'=>1)
    .return (rx634_cur)
  rx634_restart:
    repr_get_attr_obj rx634_cstack, rx634_cur, rx634_curclass, "$!cstack"
  rx634_fail:
    unless rx634_bstack, rx634_done
    pop $I19, rx634_bstack
    if_null rx634_cstack, rx634_cstack_done
    unless rx634_cstack, rx634_cstack_done
    dec $I19
    set $P11, rx634_cstack[$I19]
  rx634_cstack_done:
    pop rx634_rep, rx634_bstack
    pop rx634_pos, rx634_bstack
    pop $I19, rx634_bstack
    lt rx634_pos, -1, rx634_done
    lt rx634_pos, 0, rx634_fail
    eq $I19, 0, rx634_fail
    if_null rx634_cstack, rx634_jump
    elements $I18, rx634_bstack
    le $I18, 0, rx634_cut
    dec $I18
    set $I18, rx634_bstack[$I18]
  rx634_cut:
    assign rx634_cstack, $I18
  rx634_jump:
    jump $I19
  rx634_done:
    rx634_cur."!cursor_fail"()
    .return (rx634_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "134_1338064451.944_caps"  :subid("566_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    new $P107, "Hash"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "134_1338064451.944_nfa"  :subid("567_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    new $P107, "ResizablePMCArray"
    new $P109, "ResizablePMCArray"
    push $P109, 4
    push $P109, 32
    push $P109, 1
    push $P109, 1
    push $P109, 0
    push $P109, 2
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 41
    push $P110, 0
    push $P110, 2
    push $P110, 123
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P107
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "parameter"  :subid("136_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2059
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1110
    .lex "self", param_2059
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2060
    .lex "$/", $P2061
    .local string rx639_tgt
    .local int rx639_pos
    .local int rx639_off
    .local int rx639_eos
    .local int rx639_rep
    .local pmc rx639_cur
    .local pmc rx639_curclass
    .local pmc rx639_bstack
    .local pmc rx639_cstack
    (rx639_cur, rx639_tgt, rx639_pos, rx639_curclass, rx639_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx639_cur
    length rx639_eos, rx639_tgt
    eq $I19, 1, rx639_restart
    repr_get_attr_int $I11, self, rx639_curclass, "$!from"
    ne $I11, -1, rxscan640_done
    goto rxscan640_scan
  rxscan640_loop:
    inc rx639_pos
    gt rx639_pos, rx639_eos, rx639_fail
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!from", rx639_pos
  rxscan640_scan:
    nqp_rxmark rx639_bstack, rxscan640_loop, rx639_pos, 0
  rxscan640_done:
  # rx rxquantr641 ** 0..-1
    nqp_rxmark rx639_bstack, rxquantr641_done, rx639_pos, 0
  rxquantr641_loop:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."typename"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail
    nqp_rxmark rx639_bstack, rxsubrule642_pass, -1, 0
  rxsubrule642_pass:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
  # rx rxquantr643 ** 0..1
    nqp_rxmark rx639_bstack, rxquantr643_done, rx639_pos, 0
  rxquantr643_loop:
    add $I11, rx639_pos, 1
    gt $I11, rx639_eos, rx639_fail
    substr $S10, rx639_tgt, rx639_pos, 1
    ne $S10, ucs4:":", rx639_fail
    add rx639_pos, 1
    nqp_rxmark rx639_bstack, rxcap644_fail, rx639_pos, 0
    ge rx639_pos, rx639_eos, rx639_fail
    substr $S11, rx639_tgt, rx639_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx639_fail
    inc rx639_pos
    nqp_rxpeek $I19, rx639_bstack, rxcap644_fail
    inc $I19
    set $I11, rx639_bstack[$I19]
    $P11 = rx639_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx639_pos)
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "definedness")
    goto rxcap644_done
  rxcap644_fail:
    goto rx639_fail
  rxcap644_done:
    nqp_rxpeek $I19, rx639_bstack, rxquantr643_done
    inc $I19
    inc $I19
    set rx639_rep, rx639_bstack[$I19]
    nqp_rxcommit rx639_bstack, rxquantr643_done
    inc rx639_rep
  rxquantr643_done:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    nqp_rxpeek $I19, rx639_bstack, rxquantr641_done
    inc $I19
    inc $I19
    set rx639_rep, rx639_bstack[$I19]
    nqp_rxcommit rx639_bstack, rxquantr641_done
    inc rx639_rep
    nqp_rxmark rx639_bstack, rxquantr641_done, rx639_pos, rx639_rep
    goto rxquantr641_loop
  rxquantr641_done:
  alt646_0:
    nqp_rxmark rx639_bstack, alt646_1, rx639_pos, 0
    nqp_rxmark rx639_bstack, rxcap647_fail, rx639_pos, 0
    add $I11, rx639_pos, 1
    gt $I11, rx639_eos, rx639_fail
    substr $S10, rx639_tgt, rx639_pos, 1
    ne $S10, ucs4:"*", rx639_fail
    add rx639_pos, 1
    nqp_rxpeek $I19, rx639_bstack, rxcap647_fail
    inc $I19
    set $I11, rx639_bstack[$I19]
    $P11 = rx639_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx639_pos)
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "quant")
    goto rxcap647_done
  rxcap647_fail:
    goto rx639_fail
  rxcap647_done:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail
    nqp_rxmark rx639_bstack, rxsubrule648_pass, -1, 0
  rxsubrule648_pass:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt646_end
  alt646_1:
  alt649_0:
    nqp_rxmark rx639_bstack, alt649_1, rx639_pos, 0
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail
    nqp_rxmark rx639_bstack, rxsubrule650_pass, -1, 0
  rxsubrule650_pass:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt649_end
  alt649_1:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail
    nqp_rxmark rx639_bstack, rxsubrule651_pass, -1, 0
  rxsubrule651_pass:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
  alt649_end:
    nqp_rxmark rx639_bstack, rxcap652_fail, rx639_pos, 0
  alt653_0:
    nqp_rxmark rx639_bstack, alt653_1, rx639_pos, 0
    add $I11, rx639_pos, 1
    gt $I11, rx639_eos, rx639_fail
    substr $S10, rx639_tgt, rx639_pos, 1
    ne $S10, ucs4:"?", rx639_fail
    add rx639_pos, 1
    goto alt653_end
  alt653_1:
    nqp_rxmark rx639_bstack, alt653_2, rx639_pos, 0
    add $I11, rx639_pos, 1
    gt $I11, rx639_eos, rx639_fail
    substr $S10, rx639_tgt, rx639_pos, 1
    ne $S10, ucs4:"!", rx639_fail
    add rx639_pos, 1
    goto alt653_end
  alt653_2:
  alt653_end:
    nqp_rxpeek $I19, rx639_bstack, rxcap652_fail
    inc $I19
    set $I11, rx639_bstack[$I19]
    $P11 = rx639_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx639_pos)
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "quant")
    goto rxcap652_done
  rxcap652_fail:
    goto rx639_fail
  rxcap652_done:
  alt646_end:
  # rx rxquantr655 ** 0..1
    nqp_rxmark rx639_bstack, rxquantr655_done, rx639_pos, 0
  rxquantr655_loop:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail
    goto rxsubrule656_pass
  rxsubrule656_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail
  rxsubrule656_pass:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule656_back
    push rx639_bstack, $I11
    push rx639_bstack, 0
    push rx639_bstack, rx639_pos
    elements $I11, rx639_cstack
    push rx639_bstack, $I11
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    nqp_rxpeek $I19, rx639_bstack, rxquantr655_done
    inc $I19
    inc $I19
    set rx639_rep, rx639_bstack[$I19]
    nqp_rxcommit rx639_bstack, rxquantr655_done
    inc rx639_rep
  rxquantr655_done:
    rx639_cur."!cursor_pass"(rx639_pos, "parameter", 'backtrack'=>1)
    .return (rx639_cur)
  rx639_restart:
    repr_get_attr_obj rx639_cstack, rx639_cur, rx639_curclass, "$!cstack"
  rx639_fail:
    unless rx639_bstack, rx639_done
    pop $I19, rx639_bstack
    if_null rx639_cstack, rx639_cstack_done
    unless rx639_cstack, rx639_cstack_done
    dec $I19
    set $P11, rx639_cstack[$I19]
  rx639_cstack_done:
    pop rx639_rep, rx639_bstack
    pop rx639_pos, rx639_bstack
    pop $I19, rx639_bstack
    lt rx639_pos, -1, rx639_done
    lt rx639_pos, 0, rx639_fail
    eq $I19, 0, rx639_fail
    if_null rx639_cstack, rx639_jump
    elements $I18, rx639_bstack
    le $I18, 0, rx639_cut
    dec $I18
    set $I18, rx639_bstack[$I18]
  rx639_cut:
    assign rx639_cstack, $I18
  rx639_jump:
    jump $I19
  rx639_done:
    rx639_cur."!cursor_fail"()
    .return (rx639_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "136_1338064451.944_caps"  :subid("568_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1110
    new $P104, "Hash"
    set $P104["typename"], 2
    set $P104["definedness"], 2
    set $P104["quant"], 0
    set $P104["param_var"], 0
    set $P104["named_param"], 0
    set $P104["default_value"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "136_1338064451.944_nfa"  :subid("569_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1110
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "typename"
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 5
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 6
    push $P107, "_DU"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "ws"
    push $P108, 1
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 42
    push $P109, 6
    push $P109, 8
    push $P109, "param_var"
    push $P109, 8
    push $P109, 8
    push $P109, "named_param"
    push $P109, 8
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "param_var"
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "default_value"
    push $P111, 0
    push $P111, 1
    push $P111, 0
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 63
    push $P112, 7
    push $P112, 2
    push $P112, 33
    push $P112, 7
    push $P112, 1
    push $P112, 0
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, $P104
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "param_var"  :subid("137_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2065
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    .lex "self", param_2065
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2066
    .lex "$/", $P2067
    .local string rx657_tgt
    .local int rx657_pos
    .local int rx657_off
    .local int rx657_eos
    .local int rx657_rep
    .local pmc rx657_cur
    .local pmc rx657_curclass
    .local pmc rx657_bstack
    .local pmc rx657_cstack
    (rx657_cur, rx657_tgt, rx657_pos, rx657_curclass, rx657_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx657_cur
    length rx657_eos, rx657_tgt
    eq $I19, 1, rx657_restart
    repr_get_attr_int $I11, self, rx657_curclass, "$!from"
    ne $I11, -1, rxscan658_done
    goto rxscan658_scan
  rxscan658_loop:
    inc rx657_pos
    gt rx657_pos, rx657_eos, rx657_fail
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!from", rx657_pos
  rxscan658_scan:
    nqp_rxmark rx657_bstack, rxscan658_loop, rx657_pos, 0
  rxscan658_done:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail
    nqp_rxmark rx657_bstack, rxsubrule659_pass, -1, 0
  rxsubrule659_pass:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
  # rx rxquantr660 ** 0..1
    nqp_rxmark rx657_bstack, rxquantr660_done, rx657_pos, 0
  rxquantr660_loop:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail
    goto rxsubrule661_pass
  rxsubrule661_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail
  rxsubrule661_pass:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule661_back
    push rx657_bstack, $I11
    push rx657_bstack, 0
    push rx657_bstack, rx657_pos
    elements $I11, rx657_cstack
    push rx657_bstack, $I11
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    nqp_rxpeek $I19, rx657_bstack, rxquantr660_done
    inc $I19
    inc $I19
    set rx657_rep, rx657_bstack[$I19]
    nqp_rxcommit rx657_bstack, rxquantr660_done
    inc rx657_rep
  rxquantr660_done:
  alt662_0:
    nqp_rxmark rx657_bstack, alt662_1, rx657_pos, 0
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ident"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail
    nqp_rxmark rx657_bstack, rxsubrule663_pass, -1, 0
  rxsubrule663_pass:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    goto alt662_end
  alt662_1:
    nqp_rxmark rx657_bstack, rxcap664_fail, rx657_pos, 0
    ge rx657_pos, rx657_eos, rx657_fail
    substr $S11, rx657_tgt, rx657_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx657_fail
    inc rx657_pos
    nqp_rxpeek $I19, rx657_bstack, rxcap664_fail
    inc $I19
    set $I11, rx657_bstack[$I19]
    $P11 = rx657_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx657_pos)
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "name")
    goto rxcap664_done
  rxcap664_fail:
    goto rx657_fail
  rxcap664_done:
  alt662_end:
    rx657_cur."!cursor_pass"(rx657_pos, "param_var", 'backtrack'=>1)
    .return (rx657_cur)
  rx657_restart:
    repr_get_attr_obj rx657_cstack, rx657_cur, rx657_curclass, "$!cstack"
  rx657_fail:
    unless rx657_bstack, rx657_done
    pop $I19, rx657_bstack
    if_null rx657_cstack, rx657_cstack_done
    unless rx657_cstack, rx657_cstack_done
    dec $I19
    set $P11, rx657_cstack[$I19]
  rx657_cstack_done:
    pop rx657_rep, rx657_bstack
    pop rx657_pos, rx657_bstack
    pop $I19, rx657_bstack
    lt rx657_pos, -1, rx657_done
    lt rx657_pos, 0, rx657_fail
    eq $I19, 0, rx657_fail
    if_null rx657_cstack, rx657_jump
    elements $I18, rx657_bstack
    le $I18, 0, rx657_cut
    dec $I18
    set $I18, rx657_bstack[$I18]
  rx657_cut:
    assign rx657_cstack, $I18
  rx657_jump:
    jump $I19
  rx657_done:
    rx657_cur."!cursor_fail"()
    .return (rx657_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "137_1338064451.944_caps"  :subid("570_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    new $P104, "Hash"
    set $P104["sigil"], 0
    set $P104["twigil"], 2
    set $P104["name"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "137_1338064451.944_nfa"  :subid("571_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "sigil"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "twigil"
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ident"
    push $P107, 0
    push $P107, 6
    push $P107, "/!"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "named_param"  :subid("138_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2071
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1124
    .lex "self", param_2071
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2072
    .lex "$/", $P2073
    .local string rx665_tgt
    .local int rx665_pos
    .local int rx665_off
    .local int rx665_eos
    .local int rx665_rep
    .local pmc rx665_cur
    .local pmc rx665_curclass
    .local pmc rx665_bstack
    .local pmc rx665_cstack
    (rx665_cur, rx665_tgt, rx665_pos, rx665_curclass, rx665_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx665_cur
    length rx665_eos, rx665_tgt
    eq $I19, 1, rx665_restart
    repr_get_attr_int $I11, self, rx665_curclass, "$!from"
    ne $I11, -1, rxscan666_done
    goto rxscan666_scan
  rxscan666_loop:
    inc rx665_pos
    gt rx665_pos, rx665_eos, rx665_fail
    repr_bind_attr_int rx665_cur, rx665_curclass, "$!from", rx665_pos
  rxscan666_scan:
    nqp_rxmark rx665_bstack, rxscan666_loop, rx665_pos, 0
  rxscan666_done:
    add $I11, rx665_pos, 1
    gt $I11, rx665_eos, rx665_fail
    substr $S10, rx665_tgt, rx665_pos, 1
    ne $S10, ucs4:":", rx665_fail
    add rx665_pos, 1
    repr_bind_attr_int rx665_cur, rx665_curclass, "$!pos", rx665_pos
    $P11 = rx665_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx665_curclass, "$!pos"
    lt $I11, 0, rx665_fail
    nqp_rxmark rx665_bstack, rxsubrule667_pass, -1, 0
  rxsubrule667_pass:
    rx665_cstack = rx665_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx665_pos, $P11, rx665_curclass, "$!pos"
    rx665_cur."!cursor_pass"(rx665_pos, "named_param", 'backtrack'=>1)
    .return (rx665_cur)
  rx665_restart:
    repr_get_attr_obj rx665_cstack, rx665_cur, rx665_curclass, "$!cstack"
  rx665_fail:
    unless rx665_bstack, rx665_done
    pop $I19, rx665_bstack
    if_null rx665_cstack, rx665_cstack_done
    unless rx665_cstack, rx665_cstack_done
    dec $I19
    set $P11, rx665_cstack[$I19]
  rx665_cstack_done:
    pop rx665_rep, rx665_bstack
    pop rx665_pos, rx665_bstack
    pop $I19, rx665_bstack
    lt rx665_pos, -1, rx665_done
    lt rx665_pos, 0, rx665_fail
    eq $I19, 0, rx665_fail
    if_null rx665_cstack, rx665_jump
    elements $I18, rx665_bstack
    le $I18, 0, rx665_cut
    dec $I18
    set $I18, rx665_bstack[$I18]
  rx665_cut:
    assign rx665_cstack, $I18
  rx665_jump:
    jump $I19
  rx665_done:
    rx665_cur."!cursor_fail"()
    .return (rx665_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "138_1338064451.944_caps"  :subid("572_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1124
    new $P104, "Hash"
    set $P104["param_var"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "138_1338064451.944_nfa"  :subid("573_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1124
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "param_var"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "default_value"  :subid("139_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2077
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1128
    .lex "self", param_2077
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2078
    .lex "$/", $P2079
    .local string rx668_tgt
    .local int rx668_pos
    .local int rx668_off
    .local int rx668_eos
    .local int rx668_rep
    .local pmc rx668_cur
    .local pmc rx668_curclass
    .local pmc rx668_bstack
    .local pmc rx668_cstack
    (rx668_cur, rx668_tgt, rx668_pos, rx668_curclass, rx668_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx668_cur
    length rx668_eos, rx668_tgt
    eq $I19, 1, rx668_restart
    repr_get_attr_int $I11, self, rx668_curclass, "$!from"
    ne $I11, -1, rxscan669_done
    goto rxscan669_scan
  rxscan669_loop:
    inc rx668_pos
    gt rx668_pos, rx668_eos, rx668_fail
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!from", rx668_pos
  rxscan669_scan:
    nqp_rxmark rx668_bstack, rxscan669_loop, rx668_pos, 0
  rxscan669_done:
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!pos", rx668_pos
    $P11 = rx668_cur."ws"()
    repr_get_attr_int $I11, $P11, rx668_curclass, "$!pos"
    lt $I11, 0, rx668_fail
    repr_get_attr_int rx668_pos, $P11, rx668_curclass, "$!pos"
    add $I11, rx668_pos, 1
    gt $I11, rx668_eos, rx668_fail
    substr $S10, rx668_tgt, rx668_pos, 1
    ne $S10, ucs4:"=", rx668_fail
    add rx668_pos, 1
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!pos", rx668_pos
    $P11 = rx668_cur."ws"()
    repr_get_attr_int $I11, $P11, rx668_curclass, "$!pos"
    lt $I11, 0, rx668_fail
    repr_get_attr_int rx668_pos, $P11, rx668_curclass, "$!pos"
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!pos", rx668_pos
    $P11 = rx668_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx668_curclass, "$!pos"
    lt $I11, 0, rx668_fail
    nqp_rxmark rx668_bstack, rxsubrule672_pass, -1, 0
  rxsubrule672_pass:
    rx668_cstack = rx668_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx668_pos, $P11, rx668_curclass, "$!pos"
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!pos", rx668_pos
    $P11 = rx668_cur."ws"()
    repr_get_attr_int $I11, $P11, rx668_curclass, "$!pos"
    lt $I11, 0, rx668_fail
    repr_get_attr_int rx668_pos, $P11, rx668_curclass, "$!pos"
    rx668_cur."!cursor_pass"(rx668_pos, "default_value", 'backtrack'=>1)
    .return (rx668_cur)
  rx668_restart:
    repr_get_attr_obj rx668_cstack, rx668_cur, rx668_curclass, "$!cstack"
  rx668_fail:
    unless rx668_bstack, rx668_done
    pop $I19, rx668_bstack
    if_null rx668_cstack, rx668_cstack_done
    unless rx668_cstack, rx668_cstack_done
    dec $I19
    set $P11, rx668_cstack[$I19]
  rx668_cstack_done:
    pop rx668_rep, rx668_bstack
    pop rx668_pos, rx668_bstack
    pop $I19, rx668_bstack
    lt rx668_pos, -1, rx668_done
    lt rx668_pos, 0, rx668_fail
    eq $I19, 0, rx668_fail
    if_null rx668_cstack, rx668_jump
    elements $I18, rx668_bstack
    le $I18, 0, rx668_cut
    dec $I18
    set $I18, rx668_bstack[$I18]
  rx668_cut:
    assign rx668_cstack, $I18
  rx668_jump:
    jump $I19
  rx668_done:
    rx668_cur."!cursor_fail"()
    .return (rx668_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "139_1338064451.944_caps"  :subid("574_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1128
    new $P104, "Hash"
    set $P104["EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait"  :subid("140_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2082
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130
    .lex "self", param_2082
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2083
    .lex "$/", $P2084
    .local string rx674_tgt
    .local int rx674_pos
    .local int rx674_off
    .local int rx674_eos
    .local int rx674_rep
    .local pmc rx674_cur
    .local pmc rx674_curclass
    .local pmc rx674_bstack
    .local pmc rx674_cstack
    (rx674_cur, rx674_tgt, rx674_pos, rx674_curclass, rx674_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx674_cur
    length rx674_eos, rx674_tgt
    eq $I19, 1, rx674_restart
    repr_get_attr_int $I11, self, rx674_curclass, "$!from"
    ne $I11, -1, rxscan675_done
    goto rxscan675_scan
  rxscan675_loop:
    inc rx674_pos
    gt rx674_pos, rx674_eos, rx674_fail
    repr_bind_attr_int rx674_cur, rx674_curclass, "$!from", rx674_pos
  rxscan675_scan:
    nqp_rxmark rx674_bstack, rxscan675_loop, rx674_pos, 0
  rxscan675_done:
    repr_bind_attr_int rx674_cur, rx674_curclass, "$!pos", rx674_pos
    $P11 = rx674_cur."ws"()
    repr_get_attr_int $I11, $P11, rx674_curclass, "$!pos"
    lt $I11, 0, rx674_fail
    repr_get_attr_int rx674_pos, $P11, rx674_curclass, "$!pos"
    repr_bind_attr_int rx674_cur, rx674_curclass, "$!pos", rx674_pos
    $P11 = rx674_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx674_curclass, "$!pos"
    lt $I11, 0, rx674_fail
    nqp_rxmark rx674_bstack, rxsubrule677_pass, -1, 0
  rxsubrule677_pass:
    rx674_cstack = rx674_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx674_pos, $P11, rx674_curclass, "$!pos"
    repr_bind_attr_int rx674_cur, rx674_curclass, "$!pos", rx674_pos
    $P11 = rx674_cur."ws"()
    repr_get_attr_int $I11, $P11, rx674_curclass, "$!pos"
    lt $I11, 0, rx674_fail
    repr_get_attr_int rx674_pos, $P11, rx674_curclass, "$!pos"
    rx674_cur."!cursor_pass"(rx674_pos, "trait", 'backtrack'=>1)
    .return (rx674_cur)
  rx674_restart:
    repr_get_attr_obj rx674_cstack, rx674_cur, rx674_curclass, "$!cstack"
  rx674_fail:
    unless rx674_bstack, rx674_done
    pop $I19, rx674_bstack
    if_null rx674_cstack, rx674_cstack_done
    unless rx674_cstack, rx674_cstack_done
    dec $I19
    set $P11, rx674_cstack[$I19]
  rx674_cstack_done:
    pop rx674_rep, rx674_bstack
    pop rx674_pos, rx674_bstack
    pop $I19, rx674_bstack
    lt rx674_pos, -1, rx674_done
    lt rx674_pos, 0, rx674_fail
    eq $I19, 0, rx674_fail
    if_null rx674_cstack, rx674_jump
    elements $I18, rx674_bstack
    le $I18, 0, rx674_cut
    dec $I18
    set $I18, rx674_bstack[$I18]
  rx674_cut:
    assign rx674_cstack, $I18
  rx674_jump:
    jump $I19
  rx674_done:
    rx674_cur."!cursor_fail"()
    .return (rx674_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "140_1338064451.944_caps"  :subid("575_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130
    new $P104, "Hash"
    set $P104["trait_mod"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod"  :subid("141_1338064451.944")
    .param pmc param_2087
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1132
    .lex "self", param_2087
    $P103 = param_2087."!protoregex"("trait_mod")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod:sym<is>"  :subid("142_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2089
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    .lex "self", param_2089
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2090
    .lex "$/", $P2091
    .local string rx679_tgt
    .local int rx679_pos
    .local int rx679_off
    .local int rx679_eos
    .local int rx679_rep
    .local pmc rx679_cur
    .local pmc rx679_curclass
    .local pmc rx679_bstack
    .local pmc rx679_cstack
    (rx679_cur, rx679_tgt, rx679_pos, rx679_curclass, rx679_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx679_cur
    length rx679_eos, rx679_tgt
    eq $I19, 1, rx679_restart
    repr_get_attr_int $I11, self, rx679_curclass, "$!from"
    ne $I11, -1, rxscan680_done
    goto rxscan680_scan
  rxscan680_loop:
    inc rx679_pos
    gt rx679_pos, rx679_eos, rx679_fail
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!from", rx679_pos
  rxscan680_scan:
    nqp_rxmark rx679_bstack, rxscan680_loop, rx679_pos, 0
  rxscan680_done:
    nqp_rxmark rx679_bstack, rxcap681_fail, rx679_pos, 0
    add $I11, rx679_pos, 2
    gt $I11, rx679_eos, rx679_fail
    substr $S10, rx679_tgt, rx679_pos, 2
    ne $S10, ucs4:"is", rx679_fail
    add rx679_pos, 2
    nqp_rxpeek $I19, rx679_bstack, rxcap681_fail
    inc $I19
    set $I11, rx679_bstack[$I19]
    $P11 = rx679_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx679_pos)
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "sym")
    goto rxcap681_done
  rxcap681_fail:
    goto rx679_fail
  rxcap681_done:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail
    nqp_rxmark rx679_bstack, rxsubrule683_pass, -1, 0
  rxsubrule683_pass:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
  # rx rxquantr684 ** 0..1
    nqp_rxmark rx679_bstack, rxquantr684_done, rx679_pos, 0
  rxquantr684_loop:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail
    goto rxsubrule685_pass
  rxsubrule685_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail
  rxsubrule685_pass:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule685_back
    push rx679_bstack, $I11
    push rx679_bstack, 0
    push rx679_bstack, rx679_pos
    elements $I11, rx679_cstack
    push rx679_bstack, $I11
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    nqp_rxpeek $I19, rx679_bstack, rxquantr684_done
    inc $I19
    inc $I19
    set rx679_rep, rx679_bstack[$I19]
    nqp_rxcommit rx679_bstack, rxquantr684_done
    inc rx679_rep
  rxquantr684_done:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."ws"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    rx679_cur."!cursor_pass"(rx679_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx679_cur)
  rx679_restart:
    repr_get_attr_obj rx679_cstack, rx679_cur, rx679_curclass, "$!cstack"
  rx679_fail:
    unless rx679_bstack, rx679_done
    pop $I19, rx679_bstack
    if_null rx679_cstack, rx679_cstack_done
    unless rx679_cstack, rx679_cstack_done
    dec $I19
    set $P11, rx679_cstack[$I19]
  rx679_cstack_done:
    pop rx679_rep, rx679_bstack
    pop rx679_pos, rx679_bstack
    pop $I19, rx679_bstack
    lt rx679_pos, -1, rx679_done
    lt rx679_pos, 0, rx679_fail
    eq $I19, 0, rx679_fail
    if_null rx679_cstack, rx679_jump
    elements $I18, rx679_bstack
    le $I18, 0, rx679_cut
    dec $I18
    set $I18, rx679_bstack[$I18]
  rx679_cut:
    assign rx679_cstack, $I18
  rx679_jump:
    jump $I19
  rx679_done:
    rx679_cur."!cursor_fail"()
    .return (rx679_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "142_1338064451.944_caps"  :subid("576_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["longname"], 0
    set $P104["circumfix"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "142_1338064451.944_nfa"  :subid("577_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 105
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 115
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "regex_declarator"  :subid("143_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2095
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    .const 'Sub' $P2103 = "580_1338064451.944" 
    capture_lex $P2103
    .lex "self", param_2095
.annotate 'line', 1149
    $P2097 = root_new ['parrot';'Hash']
    set $P2096, $P2097
    .lex "%*RX", $P2096
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2098
    .lex "$/", $P2099
.annotate 'line', 1135
    .local string rx687_tgt
    .local int rx687_pos
    .local int rx687_off
    .local int rx687_eos
    .local int rx687_rep
    .local pmc rx687_cur
    .local pmc rx687_curclass
    .local pmc rx687_bstack
    .local pmc rx687_cstack
    (rx687_cur, rx687_tgt, rx687_pos, rx687_curclass, rx687_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx687_cur
    length rx687_eos, rx687_tgt
    eq $I19, 1, rx687_restart
    repr_get_attr_int $I11, self, rx687_curclass, "$!from"
    ne $I11, -1, rxscan688_done
    goto rxscan688_scan
  rxscan688_loop:
    inc rx687_pos
    gt rx687_pos, rx687_eos, rx687_fail
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!from", rx687_pos
  rxscan688_scan:
    nqp_rxmark rx687_bstack, rxscan688_loop, rx687_pos, 0
  rxscan688_done:
  alt689_0:
    nqp_rxmark rx687_bstack, alt689_1, rx687_pos, 0
    nqp_rxmark rx687_bstack, rxcap690_fail, rx687_pos, 0
    add $I11, rx687_pos, 5
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 5
    ne $S10, ucs4:"proto", rx687_fail
    add rx687_pos, 5
    nqp_rxpeek $I19, rx687_bstack, rxcap690_fail
    inc $I19
    set $I11, rx687_bstack[$I19]
    $P11 = rx687_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx687_pos)
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "proto")
    goto rxcap690_done
  rxcap690_fail:
    goto rx687_fail
  rxcap690_done:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
  alt692_0:
    nqp_rxmark rx687_bstack, alt692_1, rx687_pos, 0
    add $I11, rx687_pos, 5
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 5
    ne $S10, ucs4:"regex", rx687_fail
    add rx687_pos, 5
    goto alt692_end
  alt692_1:
    nqp_rxmark rx687_bstack, alt692_2, rx687_pos, 0
    add $I11, rx687_pos, 5
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 5
    ne $S10, ucs4:"token", rx687_fail
    add rx687_pos, 5
    goto alt692_end
  alt692_2:
    add $I11, rx687_pos, 4
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 4
    ne $S10, ucs4:"rule", rx687_fail
    add rx687_pos, 4
  alt692_end:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    nqp_rxmark rx687_bstack, rxsubrule694_pass, -1, 0
  rxsubrule694_pass:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
  alt696_0:
    nqp_rxmark rx687_bstack, alt696_1, rx687_pos, 0
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 3
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 3
    ne $S10, ucs4:"{*}", rx687_fail
    add rx687_pos, 3
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    goto alt696_end
  alt696_1:
    nqp_rxmark rx687_bstack, alt696_2, rx687_pos, 0
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"{", rx687_fail
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 5
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 5
    ne $S10, ucs4:"<...>", rx687_fail
    add rx687_pos, 5
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"}", rx687_fail
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    goto alt696_end
  alt696_2:
    nqp_rxmark rx687_bstack, alt696_3, rx687_pos, 0
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"{", rx687_fail
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 3
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 3
    ne $S10, ucs4:"<*>", rx687_fail
    add rx687_pos, 3
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"}", rx687_fail
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    goto alt696_end
  alt696_3:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."panic"("Proto regex body must be {*} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
  alt696_end:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    goto alt689_end
  alt689_1:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    nqp_rxmark rx687_bstack, rxcap712_fail, rx687_pos, 0
  alt713_0:
    nqp_rxmark rx687_bstack, alt713_1, rx687_pos, 0
    add $I11, rx687_pos, 5
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 5
    ne $S10, ucs4:"regex", rx687_fail
    add rx687_pos, 5
    goto alt713_end
  alt713_1:
    nqp_rxmark rx687_bstack, alt713_2, rx687_pos, 0
    add $I11, rx687_pos, 5
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 5
    ne $S10, ucs4:"token", rx687_fail
    add rx687_pos, 5
    goto alt713_end
  alt713_2:
    add $I11, rx687_pos, 4
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 4
    ne $S10, ucs4:"rule", rx687_fail
    add rx687_pos, 4
  alt713_end:
    nqp_rxpeek $I19, rx687_bstack, rxcap712_fail
    inc $I19
    set $I11, rx687_bstack[$I19]
    $P11 = rx687_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx687_pos)
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "sym")
    goto rxcap712_done
  rxcap712_fail:
    goto rx687_fail
  rxcap712_done:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    nqp_rxmark rx687_bstack, rxsubrule716_pass, -1, 0
  rxsubrule716_pass:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
  # rx rxquantr720 ** 0..1
    nqp_rxmark rx687_bstack, rxquantr720_done, rx687_pos, 0
  rxquantr720_loop:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"(", rx687_fail
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."signature"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    nqp_rxmark rx687_bstack, rxsubrule723_pass, -1, 0
  rxsubrule723_pass:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:")", rx687_fail
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    nqp_rxpeek $I19, rx687_bstack, rxquantr720_done
    inc $I19
    inc $I19
    set rx687_rep, rx687_bstack[$I19]
    nqp_rxcommit rx687_bstack, rxquantr720_done
    inc rx687_rep
  rxquantr720_done:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    store_lex unicode:"$\x{a2}", rx687_cur
    set $P132, $P2096
    unless_null $P132, vivify_1354
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["%RX"]
    unless_null $P132, vivify_1355
    die "Contextual %*RX not found"
  vivify_1355:
  vivify_1354:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    store_lex unicode:"$\x{a2}", rx687_cur
    find_lex $P134, unicode:"$\x{a2}"
    $P135 = $P134."MATCH"()
    store_lex "$/", $P135
.annotate 'line', 1150
    .const 'Sub' $P2103 = "580_1338064451.944" 
    capture_lex $P2103
    $P136 = $P2103()
.annotate 'line', 1135
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"{", rx687_fail
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    nqp_rxmark rx687_bstack, rxsubrule729_pass, -1, 0
  rxsubrule729_pass:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"}", rx687_fail
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
  alt689_end:
    rx687_cur."!cursor_pass"(rx687_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx687_cur)
  rx687_restart:
    repr_get_attr_obj rx687_cstack, rx687_cur, rx687_curclass, "$!cstack"
  rx687_fail:
    unless rx687_bstack, rx687_done
    pop $I19, rx687_bstack
    if_null rx687_cstack, rx687_cstack_done
    unless rx687_cstack, rx687_cstack_done
    dec $I19
    set $P11, rx687_cstack[$I19]
  rx687_cstack_done:
    pop rx687_rep, rx687_bstack
    pop rx687_pos, rx687_bstack
    pop $I19, rx687_bstack
    lt rx687_pos, -1, rx687_done
    lt rx687_pos, 0, rx687_fail
    eq $I19, 0, rx687_fail
    if_null rx687_cstack, rx687_jump
    elements $I18, rx687_bstack
    le $I18, 0, rx687_cut
    dec $I18
    set $I18, rx687_bstack[$I18]
  rx687_cut:
    assign rx687_cstack, $I18
  rx687_jump:
    jump $I19
  rx687_done:
    rx687_cur."!cursor_fail"()
    .return (rx687_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "143_1338064451.944_caps"  :subid("578_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    new $P104, "Hash"
    set $P104["proto"], 0
    set $P104["deflongname"], 0
    set $P104["sym"], 0
    set $P104["signature"], 2
    set $P104["p6regex"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "143_1338064451.944_nfa"  :subid("579_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 112
    push $P105, 2
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 111
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2102"  :anon :subid("580_1338064451.944") :outer("143_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1151
    find_lex $P2104, "$/"
    unless_null $P2104, vivify_1356
    $P2104 = root_new ['parrot';'Hash']
  vivify_1356:
    set $P136, $P2104["sym"]
    unless_null $P136, vivify_1357
    new $P136, "Undef"
  vivify_1357:
    set $S100, $P136
    iseq $I100, $S100, "rule"
    new $P137, 'Integer'
    set $P137, $I100
    find_dynamic_lex $P140, "%*RX"
    unless_null $P140, vivify_1358
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["%RX"]
    unless_null $P140, vivify_1359
    die "Contextual %*RX not found"
  vivify_1359:
    store_dynamic_lex "%*RX", $P140
  vivify_1358:
    set $P140["s"], $P137
.annotate 'line', 1152
    find_lex $P2106, "$/"
    unless_null $P2106, vivify_1360
    $P2106 = root_new ['parrot';'Hash']
  vivify_1360:
    set $P137, $P2106["sym"]
    unless_null $P137, vivify_1361
    new $P137, "Undef"
  vivify_1361:
    set $S100, $P137
    iseq $I100, $S100, "token"
    unless $I100, unless_2105
    new $P136, 'Integer'
    set $P136, $I100
    goto unless_2105_end
  unless_2105:
    find_lex $P2107, "$/"
    unless_null $P2107, vivify_1362
    $P2107 = root_new ['parrot';'Hash']
  vivify_1362:
    set $P138, $P2107["sym"]
    unless_null $P138, vivify_1363
    new $P138, "Undef"
  vivify_1363:
    set $S101, $P138
    iseq $I101, $S101, "rule"
    new $P136, 'Integer'
    set $P136, $I101
  unless_2105_end:
    find_dynamic_lex $P141, "%*RX"
    unless_null $P141, vivify_1364
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["%RX"]
    unless_null $P141, vivify_1365
    die "Contextual %*RX not found"
  vivify_1365:
    store_dynamic_lex "%*RX", $P141
  vivify_1364:
    set $P141["r"], $P136
.annotate 'line', 1153
    find_lex $P2108, "$/"
    unless_null $P2108, vivify_1366
    $P2108 = root_new ['parrot';'Hash']
  vivify_1366:
    set $P136, $P2108["deflongname"]
    unless_null $P136, vivify_1367
    new $P136, "Undef"
  vivify_1367:
    $P137 = $P136."ast"()
    find_dynamic_lex $P140, "%*RX"
    unless_null $P140, vivify_1368
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["%RX"]
    unless_null $P140, vivify_1369
    die "Contextual %*RX not found"
  vivify_1369:
    store_dynamic_lex "%*RX", $P140
  vivify_1368:
    set $P140["name"], $P137
.annotate 'line', 1150
    .return ($P137)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "dotty"  :subid("144_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2110
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159
    .lex "self", param_2110
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2111
    .lex "$/", $P2112
    .local string rx731_tgt
    .local int rx731_pos
    .local int rx731_off
    .local int rx731_eos
    .local int rx731_rep
    .local pmc rx731_cur
    .local pmc rx731_curclass
    .local pmc rx731_bstack
    .local pmc rx731_cstack
    (rx731_cur, rx731_tgt, rx731_pos, rx731_curclass, rx731_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx731_cur
    length rx731_eos, rx731_tgt
    eq $I19, 1, rx731_restart
    repr_get_attr_int $I11, self, rx731_curclass, "$!from"
    ne $I11, -1, rxscan732_done
    goto rxscan732_scan
  rxscan732_loop:
    inc rx731_pos
    gt rx731_pos, rx731_eos, rx731_fail
    repr_bind_attr_int rx731_cur, rx731_curclass, "$!from", rx731_pos
  rxscan732_scan:
    nqp_rxmark rx731_bstack, rxscan732_loop, rx731_pos, 0
  rxscan732_done:
    add $I11, rx731_pos, 1
    gt $I11, rx731_eos, rx731_fail
    substr $S10, rx731_tgt, rx731_pos, 1
    ne $S10, ucs4:".", rx731_fail
    add rx731_pos, 1
  alt733_0:
    nqp_rxmark rx731_bstack, alt733_1, rx731_pos, 0
    repr_bind_attr_int rx731_cur, rx731_curclass, "$!pos", rx731_pos
    $P11 = rx731_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx731_curclass, "$!pos"
    lt $I11, 0, rx731_fail
    nqp_rxmark rx731_bstack, rxsubrule734_pass, -1, 0
  rxsubrule734_pass:
    rx731_cstack = rx731_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx731_pos, $P11, rx731_curclass, "$!pos"
    goto alt733_end
  alt733_1:
    ge rx731_pos, rx731_eos, rx731_fail
    substr $S11, rx731_tgt, rx731_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx731_fail
    repr_bind_attr_int rx731_cur, rx731_curclass, "$!pos", rx731_pos
    $P11 = rx731_cur."quote"()
    repr_get_attr_int $I11, $P11, rx731_curclass, "$!pos"
    lt $I11, 0, rx731_fail
    nqp_rxmark rx731_bstack, rxsubrule735_pass, -1, 0
  rxsubrule735_pass:
    rx731_cstack = rx731_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx731_pos, $P11, rx731_curclass, "$!pos"
  alt736_0:
    nqp_rxmark rx731_bstack, alt736_1, rx731_pos, 0
    ge rx731_pos, rx731_eos, rx731_fail
    substr $S11, rx731_tgt, rx731_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx731_fail
    goto alt736_end
  alt736_1:
    repr_bind_attr_int rx731_cur, rx731_curclass, "$!pos", rx731_pos
    $P11 = rx731_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx731_curclass, "$!pos"
    lt $I11, 0, rx731_fail
    repr_get_attr_int rx731_pos, $P11, rx731_curclass, "$!pos"
  alt736_end:
  alt733_end:
  # rx rxquantr738 ** 0..1
    nqp_rxmark rx731_bstack, rxquantr738_done, rx731_pos, 0
  rxquantr738_loop:
  alt739_0:
    nqp_rxmark rx731_bstack, alt739_1, rx731_pos, 0
    ge rx731_pos, rx731_eos, rx731_fail
    substr $S11, rx731_tgt, rx731_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx731_fail
    repr_bind_attr_int rx731_cur, rx731_curclass, "$!pos", rx731_pos
    $P11 = rx731_cur."args"()
    repr_get_attr_int $I11, $P11, rx731_curclass, "$!pos"
    lt $I11, 0, rx731_fail
    nqp_rxmark rx731_bstack, rxsubrule740_pass, -1, 0
  rxsubrule740_pass:
    rx731_cstack = rx731_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx731_pos, $P11, rx731_curclass, "$!pos"
    goto alt739_end
  alt739_1:
    add $I11, rx731_pos, 1
    gt $I11, rx731_eos, rx731_fail
    substr $S10, rx731_tgt, rx731_pos, 1
    ne $S10, ucs4:":", rx731_fail
    add rx731_pos, 1
    ge rx731_pos, rx731_eos, rx731_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx731_tgt, rx731_pos
    unless $I11, rx731_fail
    add rx731_pos, 1
    repr_bind_attr_int rx731_cur, rx731_curclass, "$!pos", rx731_pos
    $P11 = rx731_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx731_curclass, "$!pos"
    lt $I11, 0, rx731_fail
    nqp_rxmark rx731_bstack, rxsubrule741_pass, -1, 0
  rxsubrule741_pass:
    rx731_cstack = rx731_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx731_pos, $P11, rx731_curclass, "$!pos"
  alt739_end:
    nqp_rxpeek $I19, rx731_bstack, rxquantr738_done
    inc $I19
    inc $I19
    set rx731_rep, rx731_bstack[$I19]
    nqp_rxcommit rx731_bstack, rxquantr738_done
    inc rx731_rep
  rxquantr738_done:
    rx731_cur."!cursor_pass"(rx731_pos, "dotty", 'backtrack'=>1)
    .return (rx731_cur)
  rx731_restart:
    repr_get_attr_obj rx731_cstack, rx731_cur, rx731_curclass, "$!cstack"
  rx731_fail:
    unless rx731_bstack, rx731_done
    pop $I19, rx731_bstack
    if_null rx731_cstack, rx731_cstack_done
    unless rx731_cstack, rx731_cstack_done
    dec $I19
    set $P11, rx731_cstack[$I19]
  rx731_cstack_done:
    pop rx731_rep, rx731_bstack
    pop rx731_pos, rx731_bstack
    pop $I19, rx731_bstack
    lt rx731_pos, -1, rx731_done
    lt rx731_pos, 0, rx731_fail
    eq $I19, 0, rx731_fail
    if_null rx731_cstack, rx731_jump
    elements $I18, rx731_bstack
    le $I18, 0, rx731_cut
    dec $I18
    set $I18, rx731_bstack[$I18]
  rx731_cut:
    assign rx731_cstack, $I18
  rx731_jump:
    jump $I19
  rx731_done:
    rx731_cur."!cursor_fail"()
    .return (rx731_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "144_1338064451.944_caps"  :subid("581_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159
    new $P104, "Hash"
    set $P104["longname"], 0
    set $P104["deflongname"], 0
    set $P104["quote"], 0
    set $P104["args"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "144_1338064451.944_nfa"  :subid("582_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 46
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "deflongname"
    push $P106, 3
    push $P106, 6
    push $P106, "'\""
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 6
    push $P107, "("
    push $P107, 5
    push $P107, 2
    push $P107, 58
    push $P107, 6
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 32
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "arglist"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<self>"  :subid("145_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2116
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    .lex "self", param_2116
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2117
    .lex "$/", $P2118
    .local string rx742_tgt
    .local int rx742_pos
    .local int rx742_off
    .local int rx742_eos
    .local int rx742_rep
    .local pmc rx742_cur
    .local pmc rx742_curclass
    .local pmc rx742_bstack
    .local pmc rx742_cstack
    (rx742_cur, rx742_tgt, rx742_pos, rx742_curclass, rx742_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx742_cur
    length rx742_eos, rx742_tgt
    eq $I19, 1, rx742_restart
    repr_get_attr_int $I11, self, rx742_curclass, "$!from"
    ne $I11, -1, rxscan743_done
    goto rxscan743_scan
  rxscan743_loop:
    inc rx742_pos
    gt rx742_pos, rx742_eos, rx742_fail
    repr_bind_attr_int rx742_cur, rx742_curclass, "$!from", rx742_pos
  rxscan743_scan:
    nqp_rxmark rx742_bstack, rxscan743_loop, rx742_pos, 0
  rxscan743_done:
    nqp_rxmark rx742_bstack, rxcap744_fail, rx742_pos, 0
    add $I11, rx742_pos, 4
    gt $I11, rx742_eos, rx742_fail
    substr $S10, rx742_tgt, rx742_pos, 4
    ne $S10, ucs4:"self", rx742_fail
    add rx742_pos, 4
    nqp_rxpeek $I19, rx742_bstack, rxcap744_fail
    inc $I19
    set $I11, rx742_bstack[$I19]
    $P11 = rx742_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx742_pos)
    rx742_cstack = rx742_cur."!cursor_capture"($P11, "sym")
    goto rxcap744_done
  rxcap744_fail:
    goto rx742_fail
  rxcap744_done:
    le rx742_pos, 0, rx742_fail
    is_cclass $I11, .CCLASS_WORD, rx742_tgt, rx742_pos
    if $I11, rx742_fail
    sub $I11, rx742_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx742_tgt, $I11
    unless $I11, rx742_fail
    rx742_cur."!cursor_pass"(rx742_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx742_cur)
  rx742_restart:
    repr_get_attr_obj rx742_cstack, rx742_cur, rx742_curclass, "$!cstack"
  rx742_fail:
    unless rx742_bstack, rx742_done
    pop $I19, rx742_bstack
    if_null rx742_cstack, rx742_cstack_done
    unless rx742_cstack, rx742_cstack_done
    dec $I19
    set $P11, rx742_cstack[$I19]
  rx742_cstack_done:
    pop rx742_rep, rx742_bstack
    pop rx742_pos, rx742_bstack
    pop $I19, rx742_bstack
    lt rx742_pos, -1, rx742_done
    lt rx742_pos, 0, rx742_fail
    eq $I19, 0, rx742_fail
    if_null rx742_cstack, rx742_jump
    elements $I18, rx742_bstack
    le $I18, 0, rx742_cut
    dec $I18
    set $I18, rx742_bstack[$I18]
  rx742_cut:
    assign rx742_cstack, $I18
  rx742_jump:
    jump $I19
  rx742_done:
    rx742_cur."!cursor_fail"()
    .return (rx742_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "145_1338064451.944_caps"  :subid("583_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "145_1338064451.944_nfa"  :subid("584_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 115
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 102
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<identifier>"  :subid("146_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2122
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    .lex "self", param_2122
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2123
    .lex "$/", $P2124
    .local string rx746_tgt
    .local int rx746_pos
    .local int rx746_off
    .local int rx746_eos
    .local int rx746_rep
    .local pmc rx746_cur
    .local pmc rx746_curclass
    .local pmc rx746_bstack
    .local pmc rx746_cstack
    (rx746_cur, rx746_tgt, rx746_pos, rx746_curclass, rx746_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx746_cur
    length rx746_eos, rx746_tgt
    eq $I19, 1, rx746_restart
    repr_get_attr_int $I11, self, rx746_curclass, "$!from"
    ne $I11, -1, rxscan747_done
    goto rxscan747_scan
  rxscan747_loop:
    inc rx746_pos
    gt rx746_pos, rx746_eos, rx746_fail
    repr_bind_attr_int rx746_cur, rx746_curclass, "$!from", rx746_pos
  rxscan747_scan:
    nqp_rxmark rx746_bstack, rxscan747_loop, rx746_pos, 0
  rxscan747_done:
    repr_bind_attr_int rx746_cur, rx746_curclass, "$!pos", rx746_pos
    $P11 = rx746_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx746_curclass, "$!pos"
    lt $I11, 0, rx746_fail
    nqp_rxmark rx746_bstack, rxsubrule748_pass, -1, 0
  rxsubrule748_pass:
    rx746_cstack = rx746_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx746_pos, $P11, rx746_curclass, "$!pos"
    ge rx746_pos, rx746_eos, rx746_fail
    substr $S11, rx746_tgt, rx746_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx746_fail
    repr_bind_attr_int rx746_cur, rx746_curclass, "$!pos", rx746_pos
    $P11 = rx746_cur."args"()
    repr_get_attr_int $I11, $P11, rx746_curclass, "$!pos"
    lt $I11, 0, rx746_fail
    nqp_rxmark rx746_bstack, rxsubrule749_pass, -1, 0
  rxsubrule749_pass:
    rx746_cstack = rx746_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx746_pos, $P11, rx746_curclass, "$!pos"
    rx746_cur."!cursor_pass"(rx746_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx746_cur)
  rx746_restart:
    repr_get_attr_obj rx746_cstack, rx746_cur, rx746_curclass, "$!cstack"
  rx746_fail:
    unless rx746_bstack, rx746_done
    pop $I19, rx746_bstack
    if_null rx746_cstack, rx746_cstack_done
    unless rx746_cstack, rx746_cstack_done
    dec $I19
    set $P11, rx746_cstack[$I19]
  rx746_cstack_done:
    pop rx746_rep, rx746_bstack
    pop rx746_pos, rx746_bstack
    pop $I19, rx746_bstack
    lt rx746_pos, -1, rx746_done
    lt rx746_pos, 0, rx746_fail
    eq $I19, 0, rx746_fail
    if_null rx746_cstack, rx746_jump
    elements $I18, rx746_bstack
    le $I18, 0, rx746_cut
    dec $I18
    set $I18, rx746_bstack[$I18]
  rx746_cut:
    assign rx746_cstack, $I18
  rx746_jump:
    jump $I19
  rx746_done:
    rx746_cur."!cursor_fail"()
    .return (rx746_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "146_1338064451.944_caps"  :subid("585_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    new $P104, "Hash"
    set $P104["deflongname"], 0
    set $P104["args"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "146_1338064451.944_nfa"  :subid("586_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "deflongname"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, "("
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<name>"  :subid("147_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2128
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1178
    .lex "self", param_2128
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2129
    .lex "$/", $P2130
    .local string rx750_tgt
    .local int rx750_pos
    .local int rx750_off
    .local int rx750_eos
    .local int rx750_rep
    .local pmc rx750_cur
    .local pmc rx750_curclass
    .local pmc rx750_bstack
    .local pmc rx750_cstack
    (rx750_cur, rx750_tgt, rx750_pos, rx750_curclass, rx750_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx750_cur
    length rx750_eos, rx750_tgt
    eq $I19, 1, rx750_restart
    repr_get_attr_int $I11, self, rx750_curclass, "$!from"
    ne $I11, -1, rxscan751_done
    goto rxscan751_scan
  rxscan751_loop:
    inc rx750_pos
    gt rx750_pos, rx750_eos, rx750_fail
    repr_bind_attr_int rx750_cur, rx750_curclass, "$!from", rx750_pos
  rxscan751_scan:
    nqp_rxmark rx750_bstack, rxscan751_loop, rx750_pos, 0
  rxscan751_done:
    repr_bind_attr_int rx750_cur, rx750_curclass, "$!pos", rx750_pos
    $P11 = rx750_cur."name"()
    repr_get_attr_int $I11, $P11, rx750_curclass, "$!pos"
    lt $I11, 0, rx750_fail
    nqp_rxmark rx750_bstack, rxsubrule752_pass, -1, 0
  rxsubrule752_pass:
    rx750_cstack = rx750_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx750_pos, $P11, rx750_curclass, "$!pos"
  # rx rxquantr753 ** 0..1
    nqp_rxmark rx750_bstack, rxquantr753_done, rx750_pos, 0
  rxquantr753_loop:
    repr_bind_attr_int rx750_cur, rx750_curclass, "$!pos", rx750_pos
    $P11 = rx750_cur."args"()
    repr_get_attr_int $I11, $P11, rx750_curclass, "$!pos"
    lt $I11, 0, rx750_fail
    goto rxsubrule754_pass
  rxsubrule754_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx750_curclass, "$!pos"
    lt $I11, 0, rx750_fail
  rxsubrule754_pass:
    rx750_cstack = rx750_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule754_back
    push rx750_bstack, $I11
    push rx750_bstack, 0
    push rx750_bstack, rx750_pos
    elements $I11, rx750_cstack
    push rx750_bstack, $I11
    repr_get_attr_int rx750_pos, $P11, rx750_curclass, "$!pos"
    nqp_rxpeek $I19, rx750_bstack, rxquantr753_done
    inc $I19
    inc $I19
    set rx750_rep, rx750_bstack[$I19]
    nqp_rxcommit rx750_bstack, rxquantr753_done
    inc rx750_rep
  rxquantr753_done:
    rx750_cur."!cursor_pass"(rx750_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx750_cur)
  rx750_restart:
    repr_get_attr_obj rx750_cstack, rx750_cur, rx750_curclass, "$!cstack"
  rx750_fail:
    unless rx750_bstack, rx750_done
    pop $I19, rx750_bstack
    if_null rx750_cstack, rx750_cstack_done
    unless rx750_cstack, rx750_cstack_done
    dec $I19
    set $P11, rx750_cstack[$I19]
  rx750_cstack_done:
    pop rx750_rep, rx750_bstack
    pop rx750_pos, rx750_bstack
    pop $I19, rx750_bstack
    lt rx750_pos, -1, rx750_done
    lt rx750_pos, 0, rx750_fail
    eq $I19, 0, rx750_fail
    if_null rx750_cstack, rx750_jump
    elements $I18, rx750_bstack
    le $I18, 0, rx750_cut
    dec $I18
    set $I18, rx750_bstack[$I18]
  rx750_cut:
    assign rx750_cstack, $I18
  rx750_jump:
    jump $I19
  rx750_done:
    rx750_cur."!cursor_fail"()
    .return (rx750_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "147_1338064451.944_caps"  :subid("587_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1178
    new $P104, "Hash"
    set $P104["name"], 0
    set $P104["args"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "147_1338064451.944_nfa"  :subid("588_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1178
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "name"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "args"
    push $P106, 0
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::op>"  :subid("148_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2134
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    .lex "self", param_2134
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2135
    .lex "$/", $P2136
    .local string rx755_tgt
    .local int rx755_pos
    .local int rx755_off
    .local int rx755_eos
    .local int rx755_rep
    .local pmc rx755_cur
    .local pmc rx755_curclass
    .local pmc rx755_bstack
    .local pmc rx755_cstack
    (rx755_cur, rx755_tgt, rx755_pos, rx755_curclass, rx755_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx755_cur
    length rx755_eos, rx755_tgt
    eq $I19, 1, rx755_restart
    repr_get_attr_int $I11, self, rx755_curclass, "$!from"
    ne $I11, -1, rxscan756_done
    goto rxscan756_scan
  rxscan756_loop:
    inc rx755_pos
    gt rx755_pos, rx755_eos, rx755_fail
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!from", rx755_pos
  rxscan756_scan:
    nqp_rxmark rx755_bstack, rxscan756_loop, rx755_pos, 0
  rxscan756_done:
    add $I11, rx755_pos, 5
    gt $I11, rx755_eos, rx755_fail
    substr $S10, rx755_tgt, rx755_pos, 5
    ne $S10, ucs4:"pir::", rx755_fail
    add rx755_pos, 5
    nqp_rxmark rx755_bstack, rxcap757_fail, rx755_pos, 0
  # rx rxquantr758 ** 1..-1
    nqp_rxmark rx755_bstack, rxquantr758_done, -1, 0
  rxquantr758_loop:
    ge rx755_pos, rx755_eos, rx755_fail
    is_cclass $I11, .CCLASS_WORD, rx755_tgt, rx755_pos
    unless $I11, rx755_fail
    add rx755_pos, 1
    nqp_rxpeek $I19, rx755_bstack, rxquantr758_done
    inc $I19
    inc $I19
    set rx755_rep, rx755_bstack[$I19]
    nqp_rxcommit rx755_bstack, rxquantr758_done
    inc rx755_rep
    nqp_rxmark rx755_bstack, rxquantr758_done, rx755_pos, rx755_rep
    goto rxquantr758_loop
  rxquantr758_done:
    nqp_rxpeek $I19, rx755_bstack, rxcap757_fail
    inc $I19
    set $I11, rx755_bstack[$I19]
    $P11 = rx755_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx755_pos)
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "op")
    goto rxcap757_done
  rxcap757_fail:
    goto rx755_fail
  rxcap757_done:
  # rx rxquantr759 ** 0..1
    nqp_rxmark rx755_bstack, rxquantr759_done, rx755_pos, 0
  rxquantr759_loop:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."args"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail
    goto rxsubrule760_pass
  rxsubrule760_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail
  rxsubrule760_pass:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule760_back
    push rx755_bstack, $I11
    push rx755_bstack, 0
    push rx755_bstack, rx755_pos
    elements $I11, rx755_cstack
    push rx755_bstack, $I11
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    nqp_rxpeek $I19, rx755_bstack, rxquantr759_done
    inc $I19
    inc $I19
    set rx755_rep, rx755_bstack[$I19]
    nqp_rxcommit rx755_bstack, rxquantr759_done
    inc rx755_rep
  rxquantr759_done:
    rx755_cur."!cursor_pass"(rx755_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx755_cur)
  rx755_restart:
    repr_get_attr_obj rx755_cstack, rx755_cur, rx755_curclass, "$!cstack"
  rx755_fail:
    unless rx755_bstack, rx755_done
    pop $I19, rx755_bstack
    if_null rx755_cstack, rx755_cstack_done
    unless rx755_cstack, rx755_cstack_done
    dec $I19
    set $P11, rx755_cstack[$I19]
  rx755_cstack_done:
    pop rx755_rep, rx755_bstack
    pop rx755_pos, rx755_bstack
    pop $I19, rx755_bstack
    lt rx755_pos, -1, rx755_done
    lt rx755_pos, 0, rx755_fail
    eq $I19, 0, rx755_fail
    if_null rx755_cstack, rx755_jump
    elements $I18, rx755_bstack
    le $I18, 0, rx755_cut
    dec $I18
    set $I18, rx755_bstack[$I18]
  rx755_cut:
    assign rx755_cstack, $I18
  rx755_jump:
    jump $I19
  rx755_done:
    rx755_cur."!cursor_fail"()
    .return (rx755_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "148_1338064451.944_caps"  :subid("589_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    new $P104, "Hash"
    set $P104["op"], 0
    set $P104["args"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "148_1338064451.944_nfa"  :subid("590_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 112
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 105
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 58
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 58
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 8192
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 7
    push $P112, 1
    push $P112, 0
    push $P112, 9
    push $P112, 8
    push $P112, "args"
    push $P112, 0
    push $P112, 1
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::const>"  :subid("149_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2140
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .lex "self", param_2140
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2141
    .lex "$/", $P2142
    .local string rx761_tgt
    .local int rx761_pos
    .local int rx761_off
    .local int rx761_eos
    .local int rx761_rep
    .local pmc rx761_cur
    .local pmc rx761_curclass
    .local pmc rx761_bstack
    .local pmc rx761_cstack
    (rx761_cur, rx761_tgt, rx761_pos, rx761_curclass, rx761_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx761_cur
    length rx761_eos, rx761_tgt
    eq $I19, 1, rx761_restart
    repr_get_attr_int $I11, self, rx761_curclass, "$!from"
    ne $I11, -1, rxscan762_done
    goto rxscan762_scan
  rxscan762_loop:
    inc rx761_pos
    gt rx761_pos, rx761_eos, rx761_fail
    repr_bind_attr_int rx761_cur, rx761_curclass, "$!from", rx761_pos
  rxscan762_scan:
    nqp_rxmark rx761_bstack, rxscan762_loop, rx761_pos, 0
  rxscan762_done:
    add $I11, rx761_pos, 12
    gt $I11, rx761_eos, rx761_fail
    substr $S10, rx761_tgt, rx761_pos, 12
    ne $S10, ucs4:"pir::const::", rx761_fail
    add rx761_pos, 12
    nqp_rxmark rx761_bstack, rxcap763_fail, rx761_pos, 0
  # rx rxquantr764 ** 1..-1
    nqp_rxmark rx761_bstack, rxquantr764_done, -1, 0
  rxquantr764_loop:
    ge rx761_pos, rx761_eos, rx761_fail
    is_cclass $I11, .CCLASS_WORD, rx761_tgt, rx761_pos
    unless $I11, rx761_fail
    add rx761_pos, 1
    nqp_rxpeek $I19, rx761_bstack, rxquantr764_done
    inc $I19
    inc $I19
    set rx761_rep, rx761_bstack[$I19]
    nqp_rxcommit rx761_bstack, rxquantr764_done
    inc rx761_rep
    nqp_rxmark rx761_bstack, rxquantr764_done, rx761_pos, rx761_rep
    goto rxquantr764_loop
  rxquantr764_done:
    nqp_rxpeek $I19, rx761_bstack, rxcap763_fail
    inc $I19
    set $I11, rx761_bstack[$I19]
    $P11 = rx761_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx761_pos)
    rx761_cstack = rx761_cur."!cursor_capture"($P11, "const")
    goto rxcap763_done
  rxcap763_fail:
    goto rx761_fail
  rxcap763_done:
    rx761_cur."!cursor_pass"(rx761_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx761_cur)
  rx761_restart:
    repr_get_attr_obj rx761_cstack, rx761_cur, rx761_curclass, "$!cstack"
  rx761_fail:
    unless rx761_bstack, rx761_done
    pop $I19, rx761_bstack
    if_null rx761_cstack, rx761_cstack_done
    unless rx761_cstack, rx761_cstack_done
    dec $I19
    set $P11, rx761_cstack[$I19]
  rx761_cstack_done:
    pop rx761_rep, rx761_bstack
    pop rx761_pos, rx761_bstack
    pop $I19, rx761_bstack
    lt rx761_pos, -1, rx761_done
    lt rx761_pos, 0, rx761_fail
    eq $I19, 0, rx761_fail
    if_null rx761_cstack, rx761_jump
    elements $I18, rx761_bstack
    le $I18, 0, rx761_cut
    dec $I18
    set $I18, rx761_bstack[$I18]
  rx761_cut:
    assign rx761_cstack, $I18
  rx761_jump:
    jump $I19
  rx761_done:
    rx761_cur."!cursor_fail"()
    .return (rx761_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "149_1338064451.944_caps"  :subid("591_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    new $P104, "Hash"
    set $P104["const"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "149_1338064451.944_nfa"  :subid("592_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 112
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 105
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 58
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 58
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 99
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 110
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 115
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 116
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 58
    push $P115, 12
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 58
    push $P116, 13
    new $P117, "ResizablePMCArray"
    push $P117, 1
    push $P117, 0
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 4
    push $P118, 8192
    push $P118, 15
    new $P119, "ResizablePMCArray"
    push $P119, 1
    push $P119, 0
    push $P119, 14
    push $P119, 1
    push $P119, 0
    push $P119, 0
    new $P120, "ResizablePMCArray"
    push $P120, $P104
    push $P120, $P105
    push $P120, $P106
    push $P120, $P107
    push $P120, $P108
    push $P120, $P109
    push $P120, $P110
    push $P120, $P111
    push $P120, $P112
    push $P120, $P113
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<nqp::op>"  :subid("150_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2146
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    .lex "self", param_2146
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2147
    .lex "$/", $P2148
    .local string rx765_tgt
    .local int rx765_pos
    .local int rx765_off
    .local int rx765_eos
    .local int rx765_rep
    .local pmc rx765_cur
    .local pmc rx765_curclass
    .local pmc rx765_bstack
    .local pmc rx765_cstack
    (rx765_cur, rx765_tgt, rx765_pos, rx765_curclass, rx765_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx765_cur
    length rx765_eos, rx765_tgt
    eq $I19, 1, rx765_restart
    repr_get_attr_int $I11, self, rx765_curclass, "$!from"
    ne $I11, -1, rxscan766_done
    goto rxscan766_scan
  rxscan766_loop:
    inc rx765_pos
    gt rx765_pos, rx765_eos, rx765_fail
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!from", rx765_pos
  rxscan766_scan:
    nqp_rxmark rx765_bstack, rxscan766_loop, rx765_pos, 0
  rxscan766_done:
    add $I11, rx765_pos, 5
    gt $I11, rx765_eos, rx765_fail
    substr $S10, rx765_tgt, rx765_pos, 5
    ne $S10, ucs4:"nqp::", rx765_fail
    add rx765_pos, 5
    nqp_rxmark rx765_bstack, rxcap767_fail, rx765_pos, 0
  # rx rxquantr768 ** 1..-1
    nqp_rxmark rx765_bstack, rxquantr768_done, -1, 0
  rxquantr768_loop:
    ge rx765_pos, rx765_eos, rx765_fail
    is_cclass $I11, .CCLASS_WORD, rx765_tgt, rx765_pos
    unless $I11, rx765_fail
    add rx765_pos, 1
    nqp_rxpeek $I19, rx765_bstack, rxquantr768_done
    inc $I19
    inc $I19
    set rx765_rep, rx765_bstack[$I19]
    nqp_rxcommit rx765_bstack, rxquantr768_done
    inc rx765_rep
    nqp_rxmark rx765_bstack, rxquantr768_done, rx765_pos, rx765_rep
    goto rxquantr768_loop
  rxquantr768_done:
    nqp_rxpeek $I19, rx765_bstack, rxcap767_fail
    inc $I19
    set $I11, rx765_bstack[$I19]
    $P11 = rx765_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx765_pos)
    rx765_cstack = rx765_cur."!cursor_capture"($P11, "op")
    goto rxcap767_done
  rxcap767_fail:
    goto rx765_fail
  rxcap767_done:
  # rx rxquantr769 ** 0..1
    nqp_rxmark rx765_bstack, rxquantr769_done, rx765_pos, 0
  rxquantr769_loop:
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    $P11 = rx765_cur."args"()
    repr_get_attr_int $I11, $P11, rx765_curclass, "$!pos"
    lt $I11, 0, rx765_fail
    goto rxsubrule770_pass
  rxsubrule770_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx765_curclass, "$!pos"
    lt $I11, 0, rx765_fail
  rxsubrule770_pass:
    rx765_cstack = rx765_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule770_back
    push rx765_bstack, $I11
    push rx765_bstack, 0
    push rx765_bstack, rx765_pos
    elements $I11, rx765_cstack
    push rx765_bstack, $I11
    repr_get_attr_int rx765_pos, $P11, rx765_curclass, "$!pos"
    nqp_rxpeek $I19, rx765_bstack, rxquantr769_done
    inc $I19
    inc $I19
    set rx765_rep, rx765_bstack[$I19]
    nqp_rxcommit rx765_bstack, rxquantr769_done
    inc rx765_rep
  rxquantr769_done:
    rx765_cur."!cursor_pass"(rx765_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx765_cur)
  rx765_restart:
    repr_get_attr_obj rx765_cstack, rx765_cur, rx765_curclass, "$!cstack"
  rx765_fail:
    unless rx765_bstack, rx765_done
    pop $I19, rx765_bstack
    if_null rx765_cstack, rx765_cstack_done
    unless rx765_cstack, rx765_cstack_done
    dec $I19
    set $P11, rx765_cstack[$I19]
  rx765_cstack_done:
    pop rx765_rep, rx765_bstack
    pop rx765_pos, rx765_bstack
    pop $I19, rx765_bstack
    lt rx765_pos, -1, rx765_done
    lt rx765_pos, 0, rx765_fail
    eq $I19, 0, rx765_fail
    if_null rx765_cstack, rx765_jump
    elements $I18, rx765_bstack
    le $I18, 0, rx765_cut
    dec $I18
    set $I18, rx765_bstack[$I18]
  rx765_cut:
    assign rx765_cstack, $I18
  rx765_jump:
    jump $I19
  rx765_done:
    rx765_cur."!cursor_fail"()
    .return (rx765_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "150_1338064451.944_caps"  :subid("593_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    new $P104, "Hash"
    set $P104["op"], 0
    set $P104["args"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "150_1338064451.944_nfa"  :subid("594_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 110
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 113
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 112
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 58
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 58
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 8192
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 7
    push $P112, 1
    push $P112, 0
    push $P112, 9
    push $P112, 8
    push $P112, "args"
    push $P112, 0
    push $P112, 1
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<onlystar>"  :subid("151_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2152
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    .const 'Sub' $P2158 = "597_1338064451.944" 
    capture_lex $P2158
    .lex "self", param_2152
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2153
    .lex "$/", $P2154
    .local string rx771_tgt
    .local int rx771_pos
    .local int rx771_off
    .local int rx771_eos
    .local int rx771_rep
    .local pmc rx771_cur
    .local pmc rx771_curclass
    .local pmc rx771_bstack
    .local pmc rx771_cstack
    (rx771_cur, rx771_tgt, rx771_pos, rx771_curclass, rx771_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx771_cur
    length rx771_eos, rx771_tgt
    eq $I19, 1, rx771_restart
    repr_get_attr_int $I11, self, rx771_curclass, "$!from"
    ne $I11, -1, rxscan772_done
    goto rxscan772_scan
  rxscan772_loop:
    inc rx771_pos
    gt rx771_pos, rx771_eos, rx771_fail
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!from", rx771_pos
  rxscan772_scan:
    nqp_rxmark rx771_bstack, rxscan772_loop, rx771_pos, 0
  rxscan772_done:
    add $I11, rx771_pos, 3
    gt $I11, rx771_eos, rx771_fail
    substr $S10, rx771_tgt, rx771_pos, 3
    ne $S10, ucs4:"{*}", rx771_fail
    add rx771_pos, 3
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    $P11 = rx771_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx771_curclass, "$!pos"
    lt $I11, 0, rx771_fail
  alt773_0:
    nqp_rxmark rx771_bstack, alt773_1, rx771_pos, 0
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    store_lex unicode:"$\x{a2}", rx771_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 1196
    .const 'Sub' $P2158 = "597_1338064451.944" 
    capture_lex $P2158
    $P106 = $P2158()
.annotate 'line', 1194
    unless $P106, rx771_fail
    goto alt773_end
  alt773_1:
    repr_bind_attr_int rx771_cur, rx771_curclass, "$!pos", rx771_pos
    $P11 = rx771_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx771_curclass, "$!pos"
    lt $I11, 0, rx771_fail
    repr_get_attr_int rx771_pos, $P11, rx771_curclass, "$!pos"
  alt773_end:
    rx771_cur."!cursor_pass"(rx771_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx771_cur)
  rx771_restart:
    repr_get_attr_obj rx771_cstack, rx771_cur, rx771_curclass, "$!cstack"
  rx771_fail:
    unless rx771_bstack, rx771_done
    pop $I19, rx771_bstack
    if_null rx771_cstack, rx771_cstack_done
    unless rx771_cstack, rx771_cstack_done
    dec $I19
    set $P11, rx771_cstack[$I19]
  rx771_cstack_done:
    pop rx771_rep, rx771_bstack
    pop rx771_pos, rx771_bstack
    pop $I19, rx771_bstack
    lt rx771_pos, -1, rx771_done
    lt rx771_pos, 0, rx771_fail
    eq $I19, 0, rx771_fail
    if_null rx771_cstack, rx771_jump
    elements $I18, rx771_bstack
    le $I18, 0, rx771_cut
    dec $I18
    set $I18, rx771_bstack[$I18]
  rx771_cut:
    assign rx771_cstack, $I18
  rx771_jump:
    jump $I19
  rx771_done:
    rx771_cur."!cursor_fail"()
    .return (rx771_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "151_1338064451.944_caps"  :subid("595_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "151_1338064451.944_nfa"  :subid("596_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 42
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 125
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "ENDSTMT"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2157"  :anon :subid("597_1338064451.944") :outer("151_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1196
    find_dynamic_lex $P108, "$*MULTINESS"
    unless_null $P108, vivify_1370
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$MULTINESS"]
    unless_null $P108, vivify_1371
    die "Contextual $*MULTINESS not found"
  vivify_1371:
  vivify_1370:
    set $S100, $P108
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "args"  :subid("152_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2160
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    .lex "self", param_2160
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2161
    .lex "$/", $P2162
    .local string rx775_tgt
    .local int rx775_pos
    .local int rx775_off
    .local int rx775_eos
    .local int rx775_rep
    .local pmc rx775_cur
    .local pmc rx775_curclass
    .local pmc rx775_bstack
    .local pmc rx775_cstack
    (rx775_cur, rx775_tgt, rx775_pos, rx775_curclass, rx775_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx775_cur
    length rx775_eos, rx775_tgt
    eq $I19, 1, rx775_restart
    repr_get_attr_int $I11, self, rx775_curclass, "$!from"
    ne $I11, -1, rxscan776_done
    goto rxscan776_scan
  rxscan776_loop:
    inc rx775_pos
    gt rx775_pos, rx775_eos, rx775_fail
    repr_bind_attr_int rx775_cur, rx775_curclass, "$!from", rx775_pos
  rxscan776_scan:
    nqp_rxmark rx775_bstack, rxscan776_loop, rx775_pos, 0
  rxscan776_done:
    add $I11, rx775_pos, 1
    gt $I11, rx775_eos, rx775_fail
    substr $S10, rx775_tgt, rx775_pos, 1
    ne $S10, ucs4:"(", rx775_fail
    add rx775_pos, 1
    repr_bind_attr_int rx775_cur, rx775_curclass, "$!pos", rx775_pos
    $P11 = rx775_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx775_curclass, "$!pos"
    lt $I11, 0, rx775_fail
    nqp_rxmark rx775_bstack, rxsubrule777_pass, -1, 0
  rxsubrule777_pass:
    rx775_cstack = rx775_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx775_pos, $P11, rx775_curclass, "$!pos"
    add $I11, rx775_pos, 1
    gt $I11, rx775_eos, rx775_fail
    substr $S10, rx775_tgt, rx775_pos, 1
    ne $S10, ucs4:")", rx775_fail
    add rx775_pos, 1
    rx775_cur."!cursor_pass"(rx775_pos, "args", 'backtrack'=>1)
    .return (rx775_cur)
  rx775_restart:
    repr_get_attr_obj rx775_cstack, rx775_cur, rx775_curclass, "$!cstack"
  rx775_fail:
    unless rx775_bstack, rx775_done
    pop $I19, rx775_bstack
    if_null rx775_cstack, rx775_cstack_done
    unless rx775_cstack, rx775_cstack_done
    dec $I19
    set $P11, rx775_cstack[$I19]
  rx775_cstack_done:
    pop rx775_rep, rx775_bstack
    pop rx775_pos, rx775_bstack
    pop $I19, rx775_bstack
    lt rx775_pos, -1, rx775_done
    lt rx775_pos, 0, rx775_fail
    eq $I19, 0, rx775_fail
    if_null rx775_cstack, rx775_jump
    elements $I18, rx775_bstack
    le $I18, 0, rx775_cut
    dec $I18
    set $I18, rx775_bstack[$I18]
  rx775_cut:
    assign rx775_cstack, $I18
  rx775_jump:
    jump $I19
  rx775_done:
    rx775_cur."!cursor_fail"()
    .return (rx775_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "152_1338064451.944_caps"  :subid("598_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    new $P104, "Hash"
    set $P104["arglist"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "152_1338064451.944_nfa"  :subid("599_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 40
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "arglist"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 41
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "arglist"  :subid("153_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2166
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    .lex "self", param_2166
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2167
    .lex "$/", $P2168
    .local string rx778_tgt
    .local int rx778_pos
    .local int rx778_off
    .local int rx778_eos
    .local int rx778_rep
    .local pmc rx778_cur
    .local pmc rx778_curclass
    .local pmc rx778_bstack
    .local pmc rx778_cstack
    (rx778_cur, rx778_tgt, rx778_pos, rx778_curclass, rx778_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx778_cur
    length rx778_eos, rx778_tgt
    eq $I19, 1, rx778_restart
    repr_get_attr_int $I11, self, rx778_curclass, "$!from"
    ne $I11, -1, rxscan779_done
    goto rxscan779_scan
  rxscan779_loop:
    inc rx778_pos
    gt rx778_pos, rx778_eos, rx778_fail
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!from", rx778_pos
  rxscan779_scan:
    nqp_rxmark rx778_bstack, rxscan779_loop, rx778_pos, 0
  rxscan779_done:
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    $P11 = rx778_cur."ws"()
    repr_get_attr_int $I11, $P11, rx778_curclass, "$!pos"
    lt $I11, 0, rx778_fail
    repr_get_attr_int rx778_pos, $P11, rx778_curclass, "$!pos"
  alt781_0:
    nqp_rxmark rx778_bstack, alt781_1, rx778_pos, 0
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    $P11 = rx778_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx778_curclass, "$!pos"
    lt $I11, 0, rx778_fail
    nqp_rxmark rx778_bstack, rxsubrule782_pass, -1, 0
  rxsubrule782_pass:
    rx778_cstack = rx778_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx778_pos, $P11, rx778_curclass, "$!pos"
    goto alt781_end
  alt781_1:
  alt781_end:
    rx778_cur."!cursor_pass"(rx778_pos, "arglist", 'backtrack'=>1)
    .return (rx778_cur)
  rx778_restart:
    repr_get_attr_obj rx778_cstack, rx778_cur, rx778_curclass, "$!cstack"
  rx778_fail:
    unless rx778_bstack, rx778_done
    pop $I19, rx778_bstack
    if_null rx778_cstack, rx778_cstack_done
    unless rx778_cstack, rx778_cstack_done
    dec $I19
    set $P11, rx778_cstack[$I19]
  rx778_cstack_done:
    pop rx778_rep, rx778_bstack
    pop rx778_pos, rx778_bstack
    pop $I19, rx778_bstack
    lt rx778_pos, -1, rx778_done
    lt rx778_pos, 0, rx778_fail
    eq $I19, 0, rx778_fail
    if_null rx778_cstack, rx778_jump
    elements $I18, rx778_bstack
    le $I18, 0, rx778_cut
    dec $I18
    set $I18, rx778_bstack[$I18]
  rx778_cut:
    assign rx778_cstack, $I18
  rx778_jump:
    jump $I19
  rx778_done:
    rx778_cur."!cursor_fail"()
    .return (rx778_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "153_1338064451.944_caps"  :subid("600_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    new $P104, "Hash"
    set $P104["EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "153_1338064451.944_nfa"  :subid("601_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "ws"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "EXPR"
    push $P106, 0
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<value>"  :subid("154_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2172
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212
    .lex "self", param_2172
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2173
    .lex "$/", $P2174
    .local string rx784_tgt
    .local int rx784_pos
    .local int rx784_off
    .local int rx784_eos
    .local int rx784_rep
    .local pmc rx784_cur
    .local pmc rx784_curclass
    .local pmc rx784_bstack
    .local pmc rx784_cstack
    (rx784_cur, rx784_tgt, rx784_pos, rx784_curclass, rx784_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx784_cur
    length rx784_eos, rx784_tgt
    eq $I19, 1, rx784_restart
    repr_get_attr_int $I11, self, rx784_curclass, "$!from"
    ne $I11, -1, rxscan785_done
    goto rxscan785_scan
  rxscan785_loop:
    inc rx784_pos
    gt rx784_pos, rx784_eos, rx784_fail
    repr_bind_attr_int rx784_cur, rx784_curclass, "$!from", rx784_pos
  rxscan785_scan:
    nqp_rxmark rx784_bstack, rxscan785_loop, rx784_pos, 0
  rxscan785_done:
    repr_bind_attr_int rx784_cur, rx784_curclass, "$!pos", rx784_pos
    $P11 = rx784_cur."value"()
    repr_get_attr_int $I11, $P11, rx784_curclass, "$!pos"
    lt $I11, 0, rx784_fail
    nqp_rxmark rx784_bstack, rxsubrule786_pass, -1, 0
  rxsubrule786_pass:
    rx784_cstack = rx784_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx784_pos, $P11, rx784_curclass, "$!pos"
    rx784_cur."!cursor_pass"(rx784_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx784_cur)
  rx784_restart:
    repr_get_attr_obj rx784_cstack, rx784_cur, rx784_curclass, "$!cstack"
  rx784_fail:
    unless rx784_bstack, rx784_done
    pop $I19, rx784_bstack
    if_null rx784_cstack, rx784_cstack_done
    unless rx784_cstack, rx784_cstack_done
    dec $I19
    set $P11, rx784_cstack[$I19]
  rx784_cstack_done:
    pop rx784_rep, rx784_bstack
    pop rx784_pos, rx784_bstack
    pop $I19, rx784_bstack
    lt rx784_pos, -1, rx784_done
    lt rx784_pos, 0, rx784_fail
    eq $I19, 0, rx784_fail
    if_null rx784_cstack, rx784_jump
    elements $I18, rx784_bstack
    le $I18, 0, rx784_cut
    dec $I18
    set $I18, rx784_bstack[$I18]
  rx784_cut:
    assign rx784_cstack, $I18
  rx784_jump:
    jump $I19
  rx784_done:
    rx784_cur."!cursor_fail"()
    .return (rx784_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "154_1338064451.944_caps"  :subid("602_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212
    new $P104, "Hash"
    set $P104["value"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "154_1338064451.944_nfa"  :subid("603_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "value"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "value"  :subid("155_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2178
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1214
    .lex "self", param_2178
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2179
    .lex "$/", $P2180
    .local string rx787_tgt
    .local int rx787_pos
    .local int rx787_off
    .local int rx787_eos
    .local int rx787_rep
    .local pmc rx787_cur
    .local pmc rx787_curclass
    .local pmc rx787_bstack
    .local pmc rx787_cstack
    (rx787_cur, rx787_tgt, rx787_pos, rx787_curclass, rx787_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx787_cur
    length rx787_eos, rx787_tgt
    eq $I19, 1, rx787_restart
    repr_get_attr_int $I11, self, rx787_curclass, "$!from"
    ne $I11, -1, rxscan788_done
    goto rxscan788_scan
  rxscan788_loop:
    inc rx787_pos
    gt rx787_pos, rx787_eos, rx787_fail
    repr_bind_attr_int rx787_cur, rx787_curclass, "$!from", rx787_pos
  rxscan788_scan:
    nqp_rxmark rx787_bstack, rxscan788_loop, rx787_pos, 0
  rxscan788_done:
  alt789_0:
    nqp_rxmark rx787_bstack, alt789_1, rx787_pos, 0
    repr_bind_attr_int rx787_cur, rx787_curclass, "$!pos", rx787_pos
    $P11 = rx787_cur."quote"()
    repr_get_attr_int $I11, $P11, rx787_curclass, "$!pos"
    lt $I11, 0, rx787_fail
    nqp_rxmark rx787_bstack, rxsubrule790_pass, -1, 0
  rxsubrule790_pass:
    rx787_cstack = rx787_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx787_pos, $P11, rx787_curclass, "$!pos"
    goto alt789_end
  alt789_1:
    repr_bind_attr_int rx787_cur, rx787_curclass, "$!pos", rx787_pos
    $P11 = rx787_cur."number"()
    repr_get_attr_int $I11, $P11, rx787_curclass, "$!pos"
    lt $I11, 0, rx787_fail
    nqp_rxmark rx787_bstack, rxsubrule791_pass, -1, 0
  rxsubrule791_pass:
    rx787_cstack = rx787_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx787_pos, $P11, rx787_curclass, "$!pos"
  alt789_end:
    rx787_cur."!cursor_pass"(rx787_pos, "value", 'backtrack'=>1)
    .return (rx787_cur)
  rx787_restart:
    repr_get_attr_obj rx787_cstack, rx787_cur, rx787_curclass, "$!cstack"
  rx787_fail:
    unless rx787_bstack, rx787_done
    pop $I19, rx787_bstack
    if_null rx787_cstack, rx787_cstack_done
    unless rx787_cstack, rx787_cstack_done
    dec $I19
    set $P11, rx787_cstack[$I19]
  rx787_cstack_done:
    pop rx787_rep, rx787_bstack
    pop rx787_pos, rx787_bstack
    pop $I19, rx787_bstack
    lt rx787_pos, -1, rx787_done
    lt rx787_pos, 0, rx787_fail
    eq $I19, 0, rx787_fail
    if_null rx787_cstack, rx787_jump
    elements $I18, rx787_bstack
    le $I18, 0, rx787_cut
    dec $I18
    set $I18, rx787_bstack[$I18]
  rx787_cut:
    assign rx787_cstack, $I18
  rx787_jump:
    jump $I19
  rx787_done:
    rx787_cur."!cursor_fail"()
    .return (rx787_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "155_1338064451.944_caps"  :subid("604_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1214
    new $P104, "Hash"
    set $P104["quote"], 0
    set $P104["number"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "155_1338064451.944_nfa"  :subid("605_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1214
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "quote"
    push $P105, 0
    push $P105, 8
    push $P105, "number"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "number"  :subid("156_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2184
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    .lex "self", param_2184
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2185
    .lex "$/", $P2186
    .local string rx792_tgt
    .local int rx792_pos
    .local int rx792_off
    .local int rx792_eos
    .local int rx792_rep
    .local pmc rx792_cur
    .local pmc rx792_curclass
    .local pmc rx792_bstack
    .local pmc rx792_cstack
    (rx792_cur, rx792_tgt, rx792_pos, rx792_curclass, rx792_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx792_cur
    length rx792_eos, rx792_tgt
    eq $I19, 1, rx792_restart
    repr_get_attr_int $I11, self, rx792_curclass, "$!from"
    ne $I11, -1, rxscan793_done
    goto rxscan793_scan
  rxscan793_loop:
    inc rx792_pos
    gt rx792_pos, rx792_eos, rx792_fail
    repr_bind_attr_int rx792_cur, rx792_curclass, "$!from", rx792_pos
  rxscan793_scan:
    nqp_rxmark rx792_bstack, rxscan793_loop, rx792_pos, 0
  rxscan793_done:
    nqp_rxmark rx792_bstack, rxcap794_fail, rx792_pos, 0
  # rx rxquantr795 ** 0..1
    nqp_rxmark rx792_bstack, rxquantr795_done, rx792_pos, 0
  rxquantr795_loop:
  alt796_0:
    nqp_rxmark rx792_bstack, alt796_1, rx792_pos, 0
    add $I11, rx792_pos, 1
    gt $I11, rx792_eos, rx792_fail
    substr $S10, rx792_tgt, rx792_pos, 1
    ne $S10, ucs4:"-", rx792_fail
    add rx792_pos, 1
    goto alt796_end
  alt796_1:
    ge rx792_pos, rx792_eos, rx792_fail
    substr $S11, rx792_tgt, rx792_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx792_fail
    inc rx792_pos
  alt796_end:
    nqp_rxpeek $I19, rx792_bstack, rxquantr795_done
    inc $I19
    inc $I19
    set rx792_rep, rx792_bstack[$I19]
    nqp_rxcommit rx792_bstack, rxquantr795_done
    inc rx792_rep
  rxquantr795_done:
    nqp_rxpeek $I19, rx792_bstack, rxcap794_fail
    inc $I19
    set $I11, rx792_bstack[$I19]
    $P11 = rx792_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx792_pos)
    rx792_cstack = rx792_cur."!cursor_capture"($P11, "sign")
    goto rxcap794_done
  rxcap794_fail:
    goto rx792_fail
  rxcap794_done:
  alt797_0:
    nqp_rxmark rx792_bstack, alt797_1, rx792_pos, 0
    repr_bind_attr_int rx792_cur, rx792_curclass, "$!pos", rx792_pos
    $P11 = rx792_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx792_curclass, "$!pos"
    lt $I11, 0, rx792_fail
    nqp_rxmark rx792_bstack, rxsubrule798_pass, -1, 0
  rxsubrule798_pass:
    rx792_cstack = rx792_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx792_pos, $P11, rx792_curclass, "$!pos"
    goto alt797_end
  alt797_1:
    repr_bind_attr_int rx792_cur, rx792_curclass, "$!pos", rx792_pos
    $P11 = rx792_cur."integer"()
    repr_get_attr_int $I11, $P11, rx792_curclass, "$!pos"
    lt $I11, 0, rx792_fail
    nqp_rxmark rx792_bstack, rxsubrule799_pass, -1, 0
  rxsubrule799_pass:
    rx792_cstack = rx792_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx792_pos, $P11, rx792_curclass, "$!pos"
  alt797_end:
    rx792_cur."!cursor_pass"(rx792_pos, "number", 'backtrack'=>1)
    .return (rx792_cur)
  rx792_restart:
    repr_get_attr_obj rx792_cstack, rx792_cur, rx792_curclass, "$!cstack"
  rx792_fail:
    unless rx792_bstack, rx792_done
    pop $I19, rx792_bstack
    if_null rx792_cstack, rx792_cstack_done
    unless rx792_cstack, rx792_cstack_done
    dec $I19
    set $P11, rx792_cstack[$I19]
  rx792_cstack_done:
    pop rx792_rep, rx792_bstack
    pop rx792_pos, rx792_bstack
    pop $I19, rx792_bstack
    lt rx792_pos, -1, rx792_done
    lt rx792_pos, 0, rx792_fail
    eq $I19, 0, rx792_fail
    if_null rx792_cstack, rx792_jump
    elements $I18, rx792_bstack
    le $I18, 0, rx792_cut
    dec $I18
    set $I18, rx792_bstack[$I18]
  rx792_cut:
    assign rx792_cstack, $I18
  rx792_jump:
    jump $I19
  rx792_done:
    rx792_cur."!cursor_fail"()
    .return (rx792_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "156_1338064451.944_caps"  :subid("606_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    new $P104, "Hash"
    set $P104["sign"], 0
    set $P104["dec_number"], 0
    set $P104["integer"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "156_1338064451.944_nfa"  :subid("607_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    push $P105, 6
    push $P105, "+"
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "dec_number"
    push $P106, 0
    push $P106, 8
    push $P106, "integer"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote"  :subid("157_1338064451.944")
    .param pmc param_2190
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    .lex "self", param_2190
    $P103 = param_2190."!protoregex"("quote")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<apos>"  :subid("158_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2192
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    .lex "self", param_2192
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2193
    .lex "$/", $P2194
    .local string rx800_tgt
    .local int rx800_pos
    .local int rx800_off
    .local int rx800_eos
    .local int rx800_rep
    .local pmc rx800_cur
    .local pmc rx800_curclass
    .local pmc rx800_bstack
    .local pmc rx800_cstack
    (rx800_cur, rx800_tgt, rx800_pos, rx800_curclass, rx800_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx800_cur
    length rx800_eos, rx800_tgt
    eq $I19, 1, rx800_restart
    repr_get_attr_int $I11, self, rx800_curclass, "$!from"
    ne $I11, -1, rxscan801_done
    goto rxscan801_scan
  rxscan801_loop:
    inc rx800_pos
    gt rx800_pos, rx800_eos, rx800_fail
    repr_bind_attr_int rx800_cur, rx800_curclass, "$!from", rx800_pos
  rxscan801_scan:
    nqp_rxmark rx800_bstack, rxscan801_loop, rx800_pos, 0
  rxscan801_done:
    ge rx800_pos, rx800_eos, rx800_fail
    substr $S11, rx800_tgt, rx800_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx800_fail
    repr_bind_attr_int rx800_cur, rx800_curclass, "$!pos", rx800_pos
    $P11 = rx800_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx800_curclass, "$!pos"
    lt $I11, 0, rx800_fail
    nqp_rxmark rx800_bstack, rxsubrule802_pass, -1, 0
  rxsubrule802_pass:
    rx800_cstack = rx800_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx800_pos, $P11, rx800_curclass, "$!pos"
    rx800_cur."!cursor_pass"(rx800_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx800_cur)
  rx800_restart:
    repr_get_attr_obj rx800_cstack, rx800_cur, rx800_curclass, "$!cstack"
  rx800_fail:
    unless rx800_bstack, rx800_done
    pop $I19, rx800_bstack
    if_null rx800_cstack, rx800_cstack_done
    unless rx800_cstack, rx800_cstack_done
    dec $I19
    set $P11, rx800_cstack[$I19]
  rx800_cstack_done:
    pop rx800_rep, rx800_bstack
    pop rx800_pos, rx800_bstack
    pop $I19, rx800_bstack
    lt rx800_pos, -1, rx800_done
    lt rx800_pos, 0, rx800_fail
    eq $I19, 0, rx800_fail
    if_null rx800_cstack, rx800_jump
    elements $I18, rx800_bstack
    le $I18, 0, rx800_cut
    dec $I18
    set $I18, rx800_bstack[$I18]
  rx800_cut:
    assign rx800_cstack, $I18
  rx800_jump:
    jump $I19
  rx800_done:
    rx800_cur."!cursor_fail"()
    .return (rx800_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "158_1338064451.944_caps"  :subid("608_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "158_1338064451.944_nfa"  :subid("609_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "'"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<dblq>"  :subid("159_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2198
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    .lex "self", param_2198
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2199
    .lex "$/", $P2200
    .local string rx803_tgt
    .local int rx803_pos
    .local int rx803_off
    .local int rx803_eos
    .local int rx803_rep
    .local pmc rx803_cur
    .local pmc rx803_curclass
    .local pmc rx803_bstack
    .local pmc rx803_cstack
    (rx803_cur, rx803_tgt, rx803_pos, rx803_curclass, rx803_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx803_cur
    length rx803_eos, rx803_tgt
    eq $I19, 1, rx803_restart
    repr_get_attr_int $I11, self, rx803_curclass, "$!from"
    ne $I11, -1, rxscan804_done
    goto rxscan804_scan
  rxscan804_loop:
    inc rx803_pos
    gt rx803_pos, rx803_eos, rx803_fail
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!from", rx803_pos
  rxscan804_scan:
    nqp_rxmark rx803_bstack, rxscan804_loop, rx803_pos, 0
  rxscan804_done:
    ge rx803_pos, rx803_eos, rx803_fail
    substr $S11, rx803_tgt, rx803_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx803_fail
    repr_bind_attr_int rx803_cur, rx803_curclass, "$!pos", rx803_pos
    $P11 = rx803_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx803_curclass, "$!pos"
    lt $I11, 0, rx803_fail
    nqp_rxmark rx803_bstack, rxsubrule805_pass, -1, 0
  rxsubrule805_pass:
    rx803_cstack = rx803_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx803_pos, $P11, rx803_curclass, "$!pos"
    rx803_cur."!cursor_pass"(rx803_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx803_cur)
  rx803_restart:
    repr_get_attr_obj rx803_cstack, rx803_cur, rx803_curclass, "$!cstack"
  rx803_fail:
    unless rx803_bstack, rx803_done
    pop $I19, rx803_bstack
    if_null rx803_cstack, rx803_cstack_done
    unless rx803_cstack, rx803_cstack_done
    dec $I19
    set $P11, rx803_cstack[$I19]
  rx803_cstack_done:
    pop rx803_rep, rx803_bstack
    pop rx803_pos, rx803_bstack
    pop $I19, rx803_bstack
    lt rx803_pos, -1, rx803_done
    lt rx803_pos, 0, rx803_fail
    eq $I19, 0, rx803_fail
    if_null rx803_cstack, rx803_jump
    elements $I18, rx803_bstack
    le $I18, 0, rx803_cut
    dec $I18
    set $I18, rx803_bstack[$I18]
  rx803_cut:
    assign rx803_cstack, $I18
  rx803_jump:
    jump $I19
  rx803_done:
    rx803_cur."!cursor_fail"()
    .return (rx803_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "159_1338064451.944_caps"  :subid("610_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "159_1338064451.944_nfa"  :subid("611_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "\""
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<q>"  :subid("160_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2204
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    .lex "self", param_2204
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2205
    .lex "$/", $P2206
    .local string rx806_tgt
    .local int rx806_pos
    .local int rx806_off
    .local int rx806_eos
    .local int rx806_rep
    .local pmc rx806_cur
    .local pmc rx806_curclass
    .local pmc rx806_bstack
    .local pmc rx806_cstack
    (rx806_cur, rx806_tgt, rx806_pos, rx806_curclass, rx806_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx806_cur
    length rx806_eos, rx806_tgt
    eq $I19, 1, rx806_restart
    repr_get_attr_int $I11, self, rx806_curclass, "$!from"
    ne $I11, -1, rxscan807_done
    goto rxscan807_scan
  rxscan807_loop:
    inc rx806_pos
    gt rx806_pos, rx806_eos, rx806_fail
    repr_bind_attr_int rx806_cur, rx806_curclass, "$!from", rx806_pos
  rxscan807_scan:
    nqp_rxmark rx806_bstack, rxscan807_loop, rx806_pos, 0
  rxscan807_done:
    nqp_rxmark rx806_bstack, rxcap808_fail, rx806_pos, 0
    add $I11, rx806_pos, 1
    gt $I11, rx806_eos, rx806_fail
    substr $S10, rx806_tgt, rx806_pos, 1
    ne $S10, ucs4:"q", rx806_fail
    add rx806_pos, 1
    nqp_rxpeek $I19, rx806_bstack, rxcap808_fail
    inc $I19
    set $I11, rx806_bstack[$I19]
    $P11 = rx806_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx806_pos)
    rx806_cstack = rx806_cur."!cursor_capture"($P11, "sym")
    goto rxcap808_done
  rxcap808_fail:
    goto rx806_fail
  rxcap808_done:
    le rx806_pos, 0, rx806_fail
    is_cclass $I11, .CCLASS_WORD, rx806_tgt, rx806_pos
    if $I11, rx806_fail
    sub $I11, rx806_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx806_tgt, $I11
    unless $I11, rx806_fail
    ge rx806_pos, rx806_eos, rx806_fail
    substr $S11, rx806_tgt, rx806_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx806_fail
    repr_bind_attr_int rx806_cur, rx806_curclass, "$!pos", rx806_pos
    $P11 = rx806_cur."ws"()
    repr_get_attr_int $I11, $P11, rx806_curclass, "$!pos"
    lt $I11, 0, rx806_fail
    repr_get_attr_int rx806_pos, $P11, rx806_curclass, "$!pos"
    repr_bind_attr_int rx806_cur, rx806_curclass, "$!pos", rx806_pos
    $P11 = rx806_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx806_curclass, "$!pos"
    lt $I11, 0, rx806_fail
    nqp_rxmark rx806_bstack, rxsubrule811_pass, -1, 0
  rxsubrule811_pass:
    rx806_cstack = rx806_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx806_pos, $P11, rx806_curclass, "$!pos"
    rx806_cur."!cursor_pass"(rx806_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx806_cur)
  rx806_restart:
    repr_get_attr_obj rx806_cstack, rx806_cur, rx806_curclass, "$!cstack"
  rx806_fail:
    unless rx806_bstack, rx806_done
    pop $I19, rx806_bstack
    if_null rx806_cstack, rx806_cstack_done
    unless rx806_cstack, rx806_cstack_done
    dec $I19
    set $P11, rx806_cstack[$I19]
  rx806_cstack_done:
    pop rx806_rep, rx806_bstack
    pop rx806_pos, rx806_bstack
    pop $I19, rx806_bstack
    lt rx806_pos, -1, rx806_done
    lt rx806_pos, 0, rx806_fail
    eq $I19, 0, rx806_fail
    if_null rx806_cstack, rx806_jump
    elements $I18, rx806_bstack
    le $I18, 0, rx806_cut
    dec $I18
    set $I18, rx806_bstack[$I18]
  rx806_cut:
    assign rx806_cstack, $I18
  rx806_jump:
    jump $I19
  rx806_done:
    rx806_cur."!cursor_fail"()
    .return (rx806_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "160_1338064451.944_caps"  :subid("612_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "160_1338064451.944_nfa"  :subid("613_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 113
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 7
    push $P107, "("
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<qq>"  :subid("161_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2210
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    .lex "self", param_2210
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2211
    .lex "$/", $P2212
    .local string rx812_tgt
    .local int rx812_pos
    .local int rx812_off
    .local int rx812_eos
    .local int rx812_rep
    .local pmc rx812_cur
    .local pmc rx812_curclass
    .local pmc rx812_bstack
    .local pmc rx812_cstack
    (rx812_cur, rx812_tgt, rx812_pos, rx812_curclass, rx812_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx812_cur
    length rx812_eos, rx812_tgt
    eq $I19, 1, rx812_restart
    repr_get_attr_int $I11, self, rx812_curclass, "$!from"
    ne $I11, -1, rxscan813_done
    goto rxscan813_scan
  rxscan813_loop:
    inc rx812_pos
    gt rx812_pos, rx812_eos, rx812_fail
    repr_bind_attr_int rx812_cur, rx812_curclass, "$!from", rx812_pos
  rxscan813_scan:
    nqp_rxmark rx812_bstack, rxscan813_loop, rx812_pos, 0
  rxscan813_done:
    nqp_rxmark rx812_bstack, rxcap814_fail, rx812_pos, 0
    add $I11, rx812_pos, 2
    gt $I11, rx812_eos, rx812_fail
    substr $S10, rx812_tgt, rx812_pos, 2
    ne $S10, ucs4:"qq", rx812_fail
    add rx812_pos, 2
    nqp_rxpeek $I19, rx812_bstack, rxcap814_fail
    inc $I19
    set $I11, rx812_bstack[$I19]
    $P11 = rx812_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx812_pos)
    rx812_cstack = rx812_cur."!cursor_capture"($P11, "sym")
    goto rxcap814_done
  rxcap814_fail:
    goto rx812_fail
  rxcap814_done:
    le rx812_pos, 0, rx812_fail
    is_cclass $I11, .CCLASS_WORD, rx812_tgt, rx812_pos
    if $I11, rx812_fail
    sub $I11, rx812_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx812_tgt, $I11
    unless $I11, rx812_fail
    ge rx812_pos, rx812_eos, rx812_fail
    substr $S11, rx812_tgt, rx812_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx812_fail
    repr_bind_attr_int rx812_cur, rx812_curclass, "$!pos", rx812_pos
    $P11 = rx812_cur."ws"()
    repr_get_attr_int $I11, $P11, rx812_curclass, "$!pos"
    lt $I11, 0, rx812_fail
    repr_get_attr_int rx812_pos, $P11, rx812_curclass, "$!pos"
    repr_bind_attr_int rx812_cur, rx812_curclass, "$!pos", rx812_pos
    $P11 = rx812_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx812_curclass, "$!pos"
    lt $I11, 0, rx812_fail
    nqp_rxmark rx812_bstack, rxsubrule817_pass, -1, 0
  rxsubrule817_pass:
    rx812_cstack = rx812_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx812_pos, $P11, rx812_curclass, "$!pos"
    rx812_cur."!cursor_pass"(rx812_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx812_cur)
  rx812_restart:
    repr_get_attr_obj rx812_cstack, rx812_cur, rx812_curclass, "$!cstack"
  rx812_fail:
    unless rx812_bstack, rx812_done
    pop $I19, rx812_bstack
    if_null rx812_cstack, rx812_cstack_done
    unless rx812_cstack, rx812_cstack_done
    dec $I19
    set $P11, rx812_cstack[$I19]
  rx812_cstack_done:
    pop rx812_rep, rx812_bstack
    pop rx812_pos, rx812_bstack
    pop $I19, rx812_bstack
    lt rx812_pos, -1, rx812_done
    lt rx812_pos, 0, rx812_fail
    eq $I19, 0, rx812_fail
    if_null rx812_cstack, rx812_jump
    elements $I18, rx812_bstack
    le $I18, 0, rx812_cut
    dec $I18
    set $I18, rx812_bstack[$I18]
  rx812_cut:
    assign rx812_cstack, $I18
  rx812_jump:
    jump $I19
  rx812_done:
    rx812_cur."!cursor_fail"()
    .return (rx812_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "161_1338064451.944_caps"  :subid("614_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "161_1338064451.944_nfa"  :subid("615_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 113
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 113
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 7
    push $P108, "("
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q>"  :subid("162_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2216
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    .lex "self", param_2216
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2217
    .lex "$/", $P2218
    .local string rx818_tgt
    .local int rx818_pos
    .local int rx818_off
    .local int rx818_eos
    .local int rx818_rep
    .local pmc rx818_cur
    .local pmc rx818_curclass
    .local pmc rx818_bstack
    .local pmc rx818_cstack
    (rx818_cur, rx818_tgt, rx818_pos, rx818_curclass, rx818_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx818_cur
    length rx818_eos, rx818_tgt
    eq $I19, 1, rx818_restart
    repr_get_attr_int $I11, self, rx818_curclass, "$!from"
    ne $I11, -1, rxscan819_done
    goto rxscan819_scan
  rxscan819_loop:
    inc rx818_pos
    gt rx818_pos, rx818_eos, rx818_fail
    repr_bind_attr_int rx818_cur, rx818_curclass, "$!from", rx818_pos
  rxscan819_scan:
    nqp_rxmark rx818_bstack, rxscan819_loop, rx818_pos, 0
  rxscan819_done:
    nqp_rxmark rx818_bstack, rxcap820_fail, rx818_pos, 0
    add $I11, rx818_pos, 1
    gt $I11, rx818_eos, rx818_fail
    substr $S10, rx818_tgt, rx818_pos, 1
    ne $S10, ucs4:"Q", rx818_fail
    add rx818_pos, 1
    nqp_rxpeek $I19, rx818_bstack, rxcap820_fail
    inc $I19
    set $I11, rx818_bstack[$I19]
    $P11 = rx818_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx818_pos)
    rx818_cstack = rx818_cur."!cursor_capture"($P11, "sym")
    goto rxcap820_done
  rxcap820_fail:
    goto rx818_fail
  rxcap820_done:
    le rx818_pos, 0, rx818_fail
    is_cclass $I11, .CCLASS_WORD, rx818_tgt, rx818_pos
    if $I11, rx818_fail
    sub $I11, rx818_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx818_tgt, $I11
    unless $I11, rx818_fail
    ge rx818_pos, rx818_eos, rx818_fail
    substr $S11, rx818_tgt, rx818_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx818_fail
    repr_bind_attr_int rx818_cur, rx818_curclass, "$!pos", rx818_pos
    $P11 = rx818_cur."ws"()
    repr_get_attr_int $I11, $P11, rx818_curclass, "$!pos"
    lt $I11, 0, rx818_fail
    repr_get_attr_int rx818_pos, $P11, rx818_curclass, "$!pos"
    repr_bind_attr_int rx818_cur, rx818_curclass, "$!pos", rx818_pos
    $P11 = rx818_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx818_curclass, "$!pos"
    lt $I11, 0, rx818_fail
    nqp_rxmark rx818_bstack, rxsubrule823_pass, -1, 0
  rxsubrule823_pass:
    rx818_cstack = rx818_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx818_pos, $P11, rx818_curclass, "$!pos"
    rx818_cur."!cursor_pass"(rx818_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx818_cur)
  rx818_restart:
    repr_get_attr_obj rx818_cstack, rx818_cur, rx818_curclass, "$!cstack"
  rx818_fail:
    unless rx818_bstack, rx818_done
    pop $I19, rx818_bstack
    if_null rx818_cstack, rx818_cstack_done
    unless rx818_cstack, rx818_cstack_done
    dec $I19
    set $P11, rx818_cstack[$I19]
  rx818_cstack_done:
    pop rx818_rep, rx818_bstack
    pop rx818_pos, rx818_bstack
    pop $I19, rx818_bstack
    lt rx818_pos, -1, rx818_done
    lt rx818_pos, 0, rx818_fail
    eq $I19, 0, rx818_fail
    if_null rx818_cstack, rx818_jump
    elements $I18, rx818_bstack
    le $I18, 0, rx818_cut
    dec $I18
    set $I18, rx818_bstack[$I18]
  rx818_cut:
    assign rx818_cstack, $I18
  rx818_jump:
    jump $I19
  rx818_done:
    rx818_cur."!cursor_fail"()
    .return (rx818_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "162_1338064451.944_caps"  :subid("616_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "162_1338064451.944_nfa"  :subid("617_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 81
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 7
    push $P107, "("
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q:PIR>"  :subid("163_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2222
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    .lex "self", param_2222
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2223
    .lex "$/", $P2224
    .local string rx824_tgt
    .local int rx824_pos
    .local int rx824_off
    .local int rx824_eos
    .local int rx824_rep
    .local pmc rx824_cur
    .local pmc rx824_curclass
    .local pmc rx824_bstack
    .local pmc rx824_cstack
    (rx824_cur, rx824_tgt, rx824_pos, rx824_curclass, rx824_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx824_cur
    length rx824_eos, rx824_tgt
    eq $I19, 1, rx824_restart
    repr_get_attr_int $I11, self, rx824_curclass, "$!from"
    ne $I11, -1, rxscan825_done
    goto rxscan825_scan
  rxscan825_loop:
    inc rx824_pos
    gt rx824_pos, rx824_eos, rx824_fail
    repr_bind_attr_int rx824_cur, rx824_curclass, "$!from", rx824_pos
  rxscan825_scan:
    nqp_rxmark rx824_bstack, rxscan825_loop, rx824_pos, 0
  rxscan825_done:
    nqp_rxmark rx824_bstack, rxcap826_fail, rx824_pos, 0
    add $I11, rx824_pos, 5
    gt $I11, rx824_eos, rx824_fail
    substr $S10, rx824_tgt, rx824_pos, 5
    ne $S10, ucs4:"Q:PIR", rx824_fail
    add rx824_pos, 5
    nqp_rxpeek $I19, rx824_bstack, rxcap826_fail
    inc $I19
    set $I11, rx824_bstack[$I19]
    $P11 = rx824_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx824_pos)
    rx824_cstack = rx824_cur."!cursor_capture"($P11, "sym")
    goto rxcap826_done
  rxcap826_fail:
    goto rx824_fail
  rxcap826_done:
    repr_bind_attr_int rx824_cur, rx824_curclass, "$!pos", rx824_pos
    $P11 = rx824_cur."ws"()
    repr_get_attr_int $I11, $P11, rx824_curclass, "$!pos"
    lt $I11, 0, rx824_fail
    repr_get_attr_int rx824_pos, $P11, rx824_curclass, "$!pos"
    repr_bind_attr_int rx824_cur, rx824_curclass, "$!pos", rx824_pos
    $P11 = rx824_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx824_curclass, "$!pos"
    lt $I11, 0, rx824_fail
    nqp_rxmark rx824_bstack, rxsubrule828_pass, -1, 0
  rxsubrule828_pass:
    rx824_cstack = rx824_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx824_pos, $P11, rx824_curclass, "$!pos"
    rx824_cur."!cursor_pass"(rx824_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx824_cur)
  rx824_restart:
    repr_get_attr_obj rx824_cstack, rx824_cur, rx824_curclass, "$!cstack"
  rx824_fail:
    unless rx824_bstack, rx824_done
    pop $I19, rx824_bstack
    if_null rx824_cstack, rx824_cstack_done
    unless rx824_cstack, rx824_cstack_done
    dec $I19
    set $P11, rx824_cstack[$I19]
  rx824_cstack_done:
    pop rx824_rep, rx824_bstack
    pop rx824_pos, rx824_bstack
    pop $I19, rx824_bstack
    lt rx824_pos, -1, rx824_done
    lt rx824_pos, 0, rx824_fail
    eq $I19, 0, rx824_fail
    if_null rx824_cstack, rx824_jump
    elements $I18, rx824_bstack
    le $I18, 0, rx824_cut
    dec $I18
    set $I18, rx824_bstack[$I18]
  rx824_cut:
    assign rx824_cstack, $I18
  rx824_jump:
    jump $I19
  rx824_done:
    rx824_cur."!cursor_fail"()
    .return (rx824_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "163_1338064451.944_caps"  :subid("618_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "163_1338064451.944_nfa"  :subid("619_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 81
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 80
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 73
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 82
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "quote_EXPR"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym</ />"  :subid("164_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2228
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .lex "self", param_2228
.annotate 'line', 1234
    $P2230 = root_new ['parrot';'Hash']
    set $P2229, $P2230
    .lex "%*RX", $P2229
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2231
    .lex "$/", $P2232
.annotate 'line', 1231
    .local string rx829_tgt
    .local int rx829_pos
    .local int rx829_off
    .local int rx829_eos
    .local int rx829_rep
    .local pmc rx829_cur
    .local pmc rx829_curclass
    .local pmc rx829_bstack
    .local pmc rx829_cstack
    (rx829_cur, rx829_tgt, rx829_pos, rx829_curclass, rx829_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx829_cur
    length rx829_eos, rx829_tgt
    eq $I19, 1, rx829_restart
    repr_get_attr_int $I11, self, rx829_curclass, "$!from"
    ne $I11, -1, rxscan830_done
    goto rxscan830_scan
  rxscan830_loop:
    inc rx829_pos
    gt rx829_pos, rx829_eos, rx829_fail
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!from", rx829_pos
  rxscan830_scan:
    nqp_rxmark rx829_bstack, rxscan830_loop, rx829_pos, 0
  rxscan830_done:
    add $I11, rx829_pos, 1
    gt $I11, rx829_eos, rx829_fail
    substr $S10, rx829_tgt, rx829_pos, 1
    ne $S10, ucs4:"/", rx829_fail
    add rx829_pos, 1
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!pos", rx829_pos
    $P11 = rx829_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx829_curclass, "$!pos"
    lt $I11, 0, rx829_fail
    repr_get_attr_int rx829_pos, $P11, rx829_curclass, "$!pos"
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!pos", rx829_pos
    store_lex unicode:"$\x{a2}", rx829_cur
    set $P106, $P2229
    unless_null $P106, vivify_1372
    get_hll_global $P104, "GLOBAL"
    get_who $P105, $P104
    set $P106, $P105["%RX"]
    unless_null $P106, vivify_1373
    die "Contextual %*RX not found"
  vivify_1373:
  vivify_1372:
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!pos", rx829_pos
    $P11 = rx829_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx829_curclass, "$!pos"
    lt $I11, 0, rx829_fail
    nqp_rxmark rx829_bstack, rxsubrule832_pass, -1, 0
  rxsubrule832_pass:
    rx829_cstack = rx829_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx829_pos, $P11, rx829_curclass, "$!pos"
    add $I11, rx829_pos, 1
    gt $I11, rx829_eos, rx829_fail
    substr $S10, rx829_tgt, rx829_pos, 1
    ne $S10, ucs4:"/", rx829_fail
    add rx829_pos, 1
    rx829_cur."!cursor_pass"(rx829_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx829_cur)
  rx829_restart:
    repr_get_attr_obj rx829_cstack, rx829_cur, rx829_curclass, "$!cstack"
  rx829_fail:
    unless rx829_bstack, rx829_done
    pop $I19, rx829_bstack
    if_null rx829_cstack, rx829_cstack_done
    unless rx829_cstack, rx829_cstack_done
    dec $I19
    set $P11, rx829_cstack[$I19]
  rx829_cstack_done:
    pop rx829_rep, rx829_bstack
    pop rx829_pos, rx829_bstack
    pop $I19, rx829_bstack
    lt rx829_pos, -1, rx829_done
    lt rx829_pos, 0, rx829_fail
    eq $I19, 0, rx829_fail
    if_null rx829_cstack, rx829_jump
    elements $I18, rx829_bstack
    le $I18, 0, rx829_cut
    dec $I18
    set $I18, rx829_bstack[$I18]
  rx829_cut:
    assign rx829_cstack, $I18
  rx829_jump:
    jump $I19
  rx829_done:
    rx829_cur."!cursor_fail"()
    .return (rx829_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "164_1338064451.944_caps"  :subid("620_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    new $P104, "Hash"
    set $P104["p6regex"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "164_1338064451.944_nfa"  :subid("621_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 47
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "newpad"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "LANG"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 47
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<$>"  :subid("165_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2236
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    .lex "self", param_2236
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2237
    .lex "$/", $P2238
    .local string rx833_tgt
    .local int rx833_pos
    .local int rx833_off
    .local int rx833_eos
    .local int rx833_rep
    .local pmc rx833_cur
    .local pmc rx833_curclass
    .local pmc rx833_bstack
    .local pmc rx833_cstack
    (rx833_cur, rx833_tgt, rx833_pos, rx833_curclass, rx833_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx833_cur
    length rx833_eos, rx833_tgt
    eq $I19, 1, rx833_restart
    repr_get_attr_int $I11, self, rx833_curclass, "$!from"
    ne $I11, -1, rxscan834_done
    goto rxscan834_scan
  rxscan834_loop:
    inc rx833_pos
    gt rx833_pos, rx833_eos, rx833_fail
    repr_bind_attr_int rx833_cur, rx833_curclass, "$!from", rx833_pos
  rxscan834_scan:
    nqp_rxmark rx833_bstack, rxscan834_loop, rx833_pos, 0
  rxscan834_done:
    ge rx833_pos, rx833_eos, rx833_fail
    substr $S11, rx833_tgt, rx833_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx833_fail
    repr_bind_attr_int rx833_cur, rx833_curclass, "$!pos", rx833_pos
    $P11 = rx833_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx833_curclass, "$!pos"
    lt $I11, 0, rx833_fail
    repr_bind_attr_int rx833_cur, rx833_curclass, "$!pos", rx833_pos
    $P11 = rx833_cur."variable"()
    repr_get_attr_int $I11, $P11, rx833_curclass, "$!pos"
    lt $I11, 0, rx833_fail
    nqp_rxmark rx833_bstack, rxsubrule835_pass, -1, 0
  rxsubrule835_pass:
    rx833_cstack = rx833_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx833_pos, $P11, rx833_curclass, "$!pos"
    rx833_cur."!cursor_pass"(rx833_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx833_cur)
  rx833_restart:
    repr_get_attr_obj rx833_cstack, rx833_cur, rx833_curclass, "$!cstack"
  rx833_fail:
    unless rx833_bstack, rx833_done
    pop $I19, rx833_bstack
    if_null rx833_cstack, rx833_cstack_done
    unless rx833_cstack, rx833_cstack_done
    dec $I19
    set $P11, rx833_cstack[$I19]
  rx833_cstack_done:
    pop rx833_rep, rx833_bstack
    pop rx833_pos, rx833_bstack
    pop $I19, rx833_bstack
    lt rx833_pos, -1, rx833_done
    lt rx833_pos, 0, rx833_fail
    eq $I19, 0, rx833_fail
    if_null rx833_cstack, rx833_jump
    elements $I18, rx833_bstack
    le $I18, 0, rx833_cut
    dec $I18
    set $I18, rx833_bstack[$I18]
  rx833_cut:
    assign rx833_cstack, $I18
  rx833_jump:
    jump $I19
  rx833_done:
    rx833_cur."!cursor_fail"()
    .return (rx833_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "165_1338064451.944_caps"  :subid("622_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    new $P104, "Hash"
    set $P104["variable"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "165_1338064451.944_nfa"  :subid("623_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "$"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<{ }>"  :subid("166_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2242
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .lex "self", param_2242
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2243
    .lex "$/", $P2244
    .local string rx836_tgt
    .local int rx836_pos
    .local int rx836_off
    .local int rx836_eos
    .local int rx836_rep
    .local pmc rx836_cur
    .local pmc rx836_curclass
    .local pmc rx836_bstack
    .local pmc rx836_cstack
    (rx836_cur, rx836_tgt, rx836_pos, rx836_curclass, rx836_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx836_cur
    length rx836_eos, rx836_tgt
    eq $I19, 1, rx836_restart
    repr_get_attr_int $I11, self, rx836_curclass, "$!from"
    ne $I11, -1, rxscan837_done
    goto rxscan837_scan
  rxscan837_loop:
    inc rx836_pos
    gt rx836_pos, rx836_eos, rx836_fail
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!from", rx836_pos
  rxscan837_scan:
    nqp_rxmark rx836_bstack, rxscan837_loop, rx836_pos, 0
  rxscan837_done:
    ge rx836_pos, rx836_eos, rx836_fail
    substr $S11, rx836_tgt, rx836_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx836_fail
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."block"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail
    nqp_rxmark rx836_bstack, rxsubrule838_pass, -1, 0
  rxsubrule838_pass:
    rx836_cstack = rx836_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    rx836_cur."!cursor_pass"(rx836_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx836_cur)
  rx836_restart:
    repr_get_attr_obj rx836_cstack, rx836_cur, rx836_curclass, "$!cstack"
  rx836_fail:
    unless rx836_bstack, rx836_done
    pop $I19, rx836_bstack
    if_null rx836_cstack, rx836_cstack_done
    unless rx836_cstack, rx836_cstack_done
    dec $I19
    set $P11, rx836_cstack[$I19]
  rx836_cstack_done:
    pop rx836_rep, rx836_bstack
    pop rx836_pos, rx836_bstack
    pop $I19, rx836_bstack
    lt rx836_pos, -1, rx836_done
    lt rx836_pos, 0, rx836_fail
    eq $I19, 0, rx836_fail
    if_null rx836_cstack, rx836_jump
    elements $I18, rx836_bstack
    le $I18, 0, rx836_cut
    dec $I18
    set $I18, rx836_bstack[$I18]
  rx836_cut:
    assign rx836_cstack, $I18
  rx836_jump:
    jump $I19
  rx836_done:
    rx836_cur."!cursor_fail"()
    .return (rx836_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "166_1338064451.944_caps"  :subid("624_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    new $P104, "Hash"
    set $P104["block"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "166_1338064451.944_nfa"  :subid("625_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "{"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("167_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2248
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    .lex "self", param_2248
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2249
    .lex "$/", $P2250
    .local string rx839_tgt
    .local int rx839_pos
    .local int rx839_off
    .local int rx839_eos
    .local int rx839_rep
    .local pmc rx839_cur
    .local pmc rx839_curclass
    .local pmc rx839_bstack
    .local pmc rx839_cstack
    (rx839_cur, rx839_tgt, rx839_pos, rx839_curclass, rx839_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx839_cur
    length rx839_eos, rx839_tgt
    eq $I19, 1, rx839_restart
    repr_get_attr_int $I11, self, rx839_curclass, "$!from"
    ne $I11, -1, rxscan840_done
    goto rxscan840_scan
  rxscan840_loop:
    inc rx839_pos
    gt rx839_pos, rx839_eos, rx839_fail
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!from", rx839_pos
  rxscan840_scan:
    nqp_rxmark rx839_bstack, rxscan840_loop, rx839_pos, 0
  rxscan840_done:
    add $I11, rx839_pos, 2
    gt $I11, rx839_eos, rx839_fail
    substr $S10, rx839_tgt, rx839_pos, 2
    ne $S10, ucs4:"\\e", rx839_fail
    add rx839_pos, 2
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!pos", rx839_pos
    $P11 = rx839_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail
    rx839_cur."!cursor_pass"(rx839_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx839_cur)
  rx839_restart:
    repr_get_attr_obj rx839_cstack, rx839_cur, rx839_curclass, "$!cstack"
  rx839_fail:
    unless rx839_bstack, rx839_done
    pop $I19, rx839_bstack
    if_null rx839_cstack, rx839_cstack_done
    unless rx839_cstack, rx839_cstack_done
    dec $I19
    set $P11, rx839_cstack[$I19]
  rx839_cstack_done:
    pop rx839_rep, rx839_bstack
    pop rx839_pos, rx839_bstack
    pop $I19, rx839_bstack
    lt rx839_pos, -1, rx839_done
    lt rx839_pos, 0, rx839_fail
    eq $I19, 0, rx839_fail
    if_null rx839_cstack, rx839_jump
    elements $I18, rx839_bstack
    le $I18, 0, rx839_cut
    dec $I18
    set $I18, rx839_bstack[$I18]
  rx839_cut:
    assign rx839_cstack, $I18
  rx839_jump:
    jump $I19
  rx839_done:
    rx839_cur."!cursor_fail"()
    .return (rx839_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "167_1338064451.944_caps"  :subid("626_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "167_1338064451.944_nfa"  :subid("627_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<( )>"  :subid("168_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2254
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    .lex "self", param_2254
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2255
    .lex "$/", $P2256
    .local string rx841_tgt
    .local int rx841_pos
    .local int rx841_off
    .local int rx841_eos
    .local int rx841_rep
    .local pmc rx841_cur
    .local pmc rx841_curclass
    .local pmc rx841_bstack
    .local pmc rx841_cstack
    (rx841_cur, rx841_tgt, rx841_pos, rx841_curclass, rx841_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx841_cur
    length rx841_eos, rx841_tgt
    eq $I19, 1, rx841_restart
    repr_get_attr_int $I11, self, rx841_curclass, "$!from"
    ne $I11, -1, rxscan842_done
    goto rxscan842_scan
  rxscan842_loop:
    inc rx841_pos
    gt rx841_pos, rx841_eos, rx841_fail
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!from", rx841_pos
  rxscan842_scan:
    nqp_rxmark rx841_bstack, rxscan842_loop, rx841_pos, 0
  rxscan842_done:
    add $I11, rx841_pos, 1
    gt $I11, rx841_eos, rx841_fail
    substr $S10, rx841_tgt, rx841_pos, 1
    ne $S10, ucs4:"(", rx841_fail
    add rx841_pos, 1
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."ws"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
  # rx rxquantr844 ** 0..1
    nqp_rxmark rx841_bstack, rxquantr844_done, rx841_pos, 0
  rxquantr844_loop:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail
    goto rxsubrule845_pass
  rxsubrule845_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail
  rxsubrule845_pass:
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule845_back
    push rx841_bstack, $I11
    push rx841_bstack, 0
    push rx841_bstack, rx841_pos
    elements $I11, rx841_cstack
    push rx841_bstack, $I11
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    nqp_rxpeek $I19, rx841_bstack, rxquantr844_done
    inc $I19
    inc $I19
    set rx841_rep, rx841_bstack[$I19]
    nqp_rxcommit rx841_bstack, rxquantr844_done
    inc rx841_rep
  rxquantr844_done:
    add $I11, rx841_pos, 1
    gt $I11, rx841_eos, rx841_fail
    substr $S10, rx841_tgt, rx841_pos, 1
    ne $S10, ucs4:")", rx841_fail
    add rx841_pos, 1
    rx841_cur."!cursor_pass"(rx841_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx841_cur)
  rx841_restart:
    repr_get_attr_obj rx841_cstack, rx841_cur, rx841_curclass, "$!cstack"
  rx841_fail:
    unless rx841_bstack, rx841_done
    pop $I19, rx841_bstack
    if_null rx841_cstack, rx841_cstack_done
    unless rx841_cstack, rx841_cstack_done
    dec $I19
    set $P11, rx841_cstack[$I19]
  rx841_cstack_done:
    pop rx841_rep, rx841_bstack
    pop rx841_pos, rx841_bstack
    pop $I19, rx841_bstack
    lt rx841_pos, -1, rx841_done
    lt rx841_pos, 0, rx841_fail
    eq $I19, 0, rx841_fail
    if_null rx841_cstack, rx841_jump
    elements $I18, rx841_bstack
    le $I18, 0, rx841_cut
    dec $I18
    set $I18, rx841_bstack[$I18]
  rx841_cut:
    assign rx841_cstack, $I18
  rx841_jump:
    jump $I19
  rx841_done:
    rx841_cur."!cursor_fail"()
    .return (rx841_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "168_1338064451.944_caps"  :subid("628_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    new $P104, "Hash"
    set $P104["EXPR"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "168_1338064451.944_nfa"  :subid("629_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 40
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "EXPR"
    push $P107, 4
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 41
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<[ ]>"  :subid("169_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2260
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .lex "self", param_2260
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2261
    .lex "$/", $P2262
    .local string rx846_tgt
    .local int rx846_pos
    .local int rx846_off
    .local int rx846_eos
    .local int rx846_rep
    .local pmc rx846_cur
    .local pmc rx846_curclass
    .local pmc rx846_bstack
    .local pmc rx846_cstack
    (rx846_cur, rx846_tgt, rx846_pos, rx846_curclass, rx846_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx846_cur
    length rx846_eos, rx846_tgt
    eq $I19, 1, rx846_restart
    repr_get_attr_int $I11, self, rx846_curclass, "$!from"
    ne $I11, -1, rxscan847_done
    goto rxscan847_scan
  rxscan847_loop:
    inc rx846_pos
    gt rx846_pos, rx846_eos, rx846_fail
    repr_bind_attr_int rx846_cur, rx846_curclass, "$!from", rx846_pos
  rxscan847_scan:
    nqp_rxmark rx846_bstack, rxscan847_loop, rx846_pos, 0
  rxscan847_done:
    add $I11, rx846_pos, 1
    gt $I11, rx846_eos, rx846_fail
    substr $S10, rx846_tgt, rx846_pos, 1
    ne $S10, ucs4:"[", rx846_fail
    add rx846_pos, 1
    repr_bind_attr_int rx846_cur, rx846_curclass, "$!pos", rx846_pos
    $P11 = rx846_cur."ws"()
    repr_get_attr_int $I11, $P11, rx846_curclass, "$!pos"
    lt $I11, 0, rx846_fail
    repr_get_attr_int rx846_pos, $P11, rx846_curclass, "$!pos"
  # rx rxquantr849 ** 0..1
    nqp_rxmark rx846_bstack, rxquantr849_done, rx846_pos, 0
  rxquantr849_loop:
    repr_bind_attr_int rx846_cur, rx846_curclass, "$!pos", rx846_pos
    $P11 = rx846_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx846_curclass, "$!pos"
    lt $I11, 0, rx846_fail
    goto rxsubrule850_pass
  rxsubrule850_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx846_curclass, "$!pos"
    lt $I11, 0, rx846_fail
  rxsubrule850_pass:
    rx846_cstack = rx846_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule850_back
    push rx846_bstack, $I11
    push rx846_bstack, 0
    push rx846_bstack, rx846_pos
    elements $I11, rx846_cstack
    push rx846_bstack, $I11
    repr_get_attr_int rx846_pos, $P11, rx846_curclass, "$!pos"
    nqp_rxpeek $I19, rx846_bstack, rxquantr849_done
    inc $I19
    inc $I19
    set rx846_rep, rx846_bstack[$I19]
    nqp_rxcommit rx846_bstack, rxquantr849_done
    inc rx846_rep
  rxquantr849_done:
    add $I11, rx846_pos, 1
    gt $I11, rx846_eos, rx846_fail
    substr $S10, rx846_tgt, rx846_pos, 1
    ne $S10, ucs4:"]", rx846_fail
    add rx846_pos, 1
    rx846_cur."!cursor_pass"(rx846_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx846_cur)
  rx846_restart:
    repr_get_attr_obj rx846_cstack, rx846_cur, rx846_curclass, "$!cstack"
  rx846_fail:
    unless rx846_bstack, rx846_done
    pop $I19, rx846_bstack
    if_null rx846_cstack, rx846_cstack_done
    unless rx846_cstack, rx846_cstack_done
    dec $I19
    set $P11, rx846_cstack[$I19]
  rx846_cstack_done:
    pop rx846_rep, rx846_bstack
    pop rx846_pos, rx846_bstack
    pop $I19, rx846_bstack
    lt rx846_pos, -1, rx846_done
    lt rx846_pos, 0, rx846_fail
    eq $I19, 0, rx846_fail
    if_null rx846_cstack, rx846_jump
    elements $I18, rx846_bstack
    le $I18, 0, rx846_cut
    dec $I18
    set $I18, rx846_bstack[$I18]
  rx846_cut:
    assign rx846_cstack, $I18
  rx846_jump:
    jump $I19
  rx846_done:
    rx846_cur."!cursor_fail"()
    .return (rx846_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "169_1338064451.944_caps"  :subid("630_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    new $P104, "Hash"
    set $P104["EXPR"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "169_1338064451.944_nfa"  :subid("631_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 91
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "EXPR"
    push $P107, 4
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 93
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<ang>"  :subid("170_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2266
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    .lex "self", param_2266
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2267
    .lex "$/", $P2268
    .local string rx851_tgt
    .local int rx851_pos
    .local int rx851_off
    .local int rx851_eos
    .local int rx851_rep
    .local pmc rx851_cur
    .local pmc rx851_curclass
    .local pmc rx851_bstack
    .local pmc rx851_cstack
    (rx851_cur, rx851_tgt, rx851_pos, rx851_curclass, rx851_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx851_cur
    length rx851_eos, rx851_tgt
    eq $I19, 1, rx851_restart
    repr_get_attr_int $I11, self, rx851_curclass, "$!from"
    ne $I11, -1, rxscan852_done
    goto rxscan852_scan
  rxscan852_loop:
    inc rx851_pos
    gt rx851_pos, rx851_eos, rx851_fail
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!from", rx851_pos
  rxscan852_scan:
    nqp_rxmark rx851_bstack, rxscan852_loop, rx851_pos, 0
  rxscan852_done:
    ge rx851_pos, rx851_eos, rx851_fail
    substr $S11, rx851_tgt, rx851_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx851_fail
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail
    nqp_rxmark rx851_bstack, rxsubrule853_pass, -1, 0
  rxsubrule853_pass:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    rx851_cur."!cursor_pass"(rx851_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx851_cur)
  rx851_restart:
    repr_get_attr_obj rx851_cstack, rx851_cur, rx851_curclass, "$!cstack"
  rx851_fail:
    unless rx851_bstack, rx851_done
    pop $I19, rx851_bstack
    if_null rx851_cstack, rx851_cstack_done
    unless rx851_cstack, rx851_cstack_done
    dec $I19
    set $P11, rx851_cstack[$I19]
  rx851_cstack_done:
    pop rx851_rep, rx851_bstack
    pop rx851_pos, rx851_bstack
    pop $I19, rx851_bstack
    lt rx851_pos, -1, rx851_done
    lt rx851_pos, 0, rx851_fail
    eq $I19, 0, rx851_fail
    if_null rx851_cstack, rx851_jump
    elements $I18, rx851_bstack
    le $I18, 0, rx851_cut
    dec $I18
    set $I18, rx851_bstack[$I18]
  rx851_cut:
    assign rx851_cstack, $I18
  rx851_jump:
    jump $I19
  rx851_done:
    rx851_cur."!cursor_fail"()
    .return (rx851_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "170_1338064451.944_caps"  :subid("632_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "170_1338064451.944_nfa"  :subid("633_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "<"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("171_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2272
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    .lex "self", param_2272
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2273
    .lex "$/", $P2274
    .local string rx854_tgt
    .local int rx854_pos
    .local int rx854_off
    .local int rx854_eos
    .local int rx854_rep
    .local pmc rx854_cur
    .local pmc rx854_curclass
    .local pmc rx854_bstack
    .local pmc rx854_cstack
    (rx854_cur, rx854_tgt, rx854_pos, rx854_curclass, rx854_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx854_cur
    length rx854_eos, rx854_tgt
    eq $I19, 1, rx854_restart
    repr_get_attr_int $I11, self, rx854_curclass, "$!from"
    ne $I11, -1, rxscan855_done
    goto rxscan855_scan
  rxscan855_loop:
    inc rx854_pos
    gt rx854_pos, rx854_eos, rx854_fail
    repr_bind_attr_int rx854_cur, rx854_curclass, "$!from", rx854_pos
  rxscan855_scan:
    nqp_rxmark rx854_bstack, rxscan855_loop, rx854_pos, 0
  rxscan855_done:
    ge rx854_pos, rx854_eos, rx854_fail
    substr $S11, rx854_tgt, rx854_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx854_fail
    repr_bind_attr_int rx854_cur, rx854_curclass, "$!pos", rx854_pos
    $P11 = rx854_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx854_curclass, "$!pos"
    lt $I11, 0, rx854_fail
    nqp_rxmark rx854_bstack, rxsubrule856_pass, -1, 0
  rxsubrule856_pass:
    rx854_cstack = rx854_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx854_pos, $P11, rx854_curclass, "$!pos"
    rx854_cur."!cursor_pass"(rx854_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx854_cur)
  rx854_restart:
    repr_get_attr_obj rx854_cstack, rx854_cur, rx854_curclass, "$!cstack"
  rx854_fail:
    unless rx854_bstack, rx854_done
    pop $I19, rx854_bstack
    if_null rx854_cstack, rx854_cstack_done
    unless rx854_cstack, rx854_cstack_done
    dec $I19
    set $P11, rx854_cstack[$I19]
  rx854_cstack_done:
    pop rx854_rep, rx854_bstack
    pop rx854_pos, rx854_bstack
    pop $I19, rx854_bstack
    lt rx854_pos, -1, rx854_done
    lt rx854_pos, 0, rx854_fail
    eq $I19, 0, rx854_fail
    if_null rx854_cstack, rx854_jump
    elements $I18, rx854_bstack
    le $I18, 0, rx854_cut
    dec $I18
    set $I18, rx854_bstack[$I18]
  rx854_cut:
    assign rx854_cstack, $I18
  rx854_jump:
    jump $I19
  rx854_done:
    rx854_cur."!cursor_fail"()
    .return (rx854_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "171_1338064451.944_caps"  :subid("634_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "171_1338064451.944_nfa"  :subid("635_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, unicode:"\x{ab}"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<{ }>"  :subid("172_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2278
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1247
    .lex "self", param_2278
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2279
    .lex "$/", $P2280
    .local string rx857_tgt
    .local int rx857_pos
    .local int rx857_off
    .local int rx857_eos
    .local int rx857_rep
    .local pmc rx857_cur
    .local pmc rx857_curclass
    .local pmc rx857_bstack
    .local pmc rx857_cstack
    (rx857_cur, rx857_tgt, rx857_pos, rx857_curclass, rx857_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx857_cur
    length rx857_eos, rx857_tgt
    eq $I19, 1, rx857_restart
    repr_get_attr_int $I11, self, rx857_curclass, "$!from"
    ne $I11, -1, rxscan858_done
    goto rxscan858_scan
  rxscan858_loop:
    inc rx857_pos
    gt rx857_pos, rx857_eos, rx857_fail
    repr_bind_attr_int rx857_cur, rx857_curclass, "$!from", rx857_pos
  rxscan858_scan:
    nqp_rxmark rx857_bstack, rxscan858_loop, rx857_pos, 0
  rxscan858_done:
    ge rx857_pos, rx857_eos, rx857_fail
    substr $S11, rx857_tgt, rx857_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx857_fail
    repr_bind_attr_int rx857_cur, rx857_curclass, "$!pos", rx857_pos
    $P11 = rx857_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx857_curclass, "$!pos"
    lt $I11, 0, rx857_fail
    nqp_rxmark rx857_bstack, rxsubrule859_pass, -1, 0
  rxsubrule859_pass:
    rx857_cstack = rx857_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx857_pos, $P11, rx857_curclass, "$!pos"
    rx857_cur."!cursor_pass"(rx857_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx857_cur)
  rx857_restart:
    repr_get_attr_obj rx857_cstack, rx857_cur, rx857_curclass, "$!cstack"
  rx857_fail:
    unless rx857_bstack, rx857_done
    pop $I19, rx857_bstack
    if_null rx857_cstack, rx857_cstack_done
    unless rx857_cstack, rx857_cstack_done
    dec $I19
    set $P11, rx857_cstack[$I19]
  rx857_cstack_done:
    pop rx857_rep, rx857_bstack
    pop rx857_pos, rx857_bstack
    pop $I19, rx857_bstack
    lt rx857_pos, -1, rx857_done
    lt rx857_pos, 0, rx857_fail
    eq $I19, 0, rx857_fail
    if_null rx857_cstack, rx857_jump
    elements $I18, rx857_bstack
    le $I18, 0, rx857_cut
    dec $I18
    set $I18, rx857_bstack[$I18]
  rx857_cut:
    assign rx857_cstack, $I18
  rx857_jump:
    jump $I19
  rx857_done:
    rx857_cur."!cursor_fail"()
    .return (rx857_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "172_1338064451.944_caps"  :subid("636_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1247
    new $P104, "Hash"
    set $P104["pblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "172_1338064451.944_nfa"  :subid("637_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1247
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "{"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<sigil>"  :subid("173_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2284
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    .lex "self", param_2284
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2285
    .lex "$/", $P2286
    .local string rx860_tgt
    .local int rx860_pos
    .local int rx860_off
    .local int rx860_eos
    .local int rx860_rep
    .local pmc rx860_cur
    .local pmc rx860_curclass
    .local pmc rx860_bstack
    .local pmc rx860_cstack
    (rx860_cur, rx860_tgt, rx860_pos, rx860_curclass, rx860_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx860_cur
    length rx860_eos, rx860_tgt
    eq $I19, 1, rx860_restart
    repr_get_attr_int $I11, self, rx860_curclass, "$!from"
    ne $I11, -1, rxscan861_done
    goto rxscan861_scan
  rxscan861_loop:
    inc rx860_pos
    gt rx860_pos, rx860_eos, rx860_fail
    repr_bind_attr_int rx860_cur, rx860_curclass, "$!from", rx860_pos
  rxscan861_scan:
    nqp_rxmark rx860_bstack, rxscan861_loop, rx860_pos, 0
  rxscan861_done:
    repr_bind_attr_int rx860_cur, rx860_curclass, "$!pos", rx860_pos
    $P11 = rx860_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx860_curclass, "$!pos"
    lt $I11, 0, rx860_fail
    nqp_rxmark rx860_bstack, rxsubrule862_pass, -1, 0
  rxsubrule862_pass:
    rx860_cstack = rx860_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx860_pos, $P11, rx860_curclass, "$!pos"
    add $I11, rx860_pos, 1
    gt $I11, rx860_eos, rx860_fail
    substr $S10, rx860_tgt, rx860_pos, 1
    ne $S10, ucs4:"(", rx860_fail
    add rx860_pos, 1
    repr_bind_attr_int rx860_cur, rx860_curclass, "$!pos", rx860_pos
    $P11 = rx860_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx860_curclass, "$!pos"
    lt $I11, 0, rx860_fail
    nqp_rxmark rx860_bstack, rxsubrule863_pass, -1, 0
  rxsubrule863_pass:
    rx860_cstack = rx860_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx860_pos, $P11, rx860_curclass, "$!pos"
  alt864_0:
    nqp_rxmark rx860_bstack, alt864_1, rx860_pos, 0
    add $I11, rx860_pos, 1
    gt $I11, rx860_eos, rx860_fail
    substr $S10, rx860_tgt, rx860_pos, 1
    ne $S10, ucs4:")", rx860_fail
    add rx860_pos, 1
    goto alt864_end
  alt864_1:
    repr_bind_attr_int rx860_cur, rx860_curclass, "$!pos", rx860_pos
    $P11 = rx860_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx860_curclass, "$!pos"
    lt $I11, 0, rx860_fail
    goto rxsubrule865_pass
  rxsubrule865_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx860_curclass, "$!pos"
    lt $I11, 0, rx860_fail
  rxsubrule865_pass:
    rx860_cstack = rx860_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule865_back
    push rx860_bstack, $I11
    push rx860_bstack, 0
    push rx860_bstack, rx860_pos
    elements $I11, rx860_cstack
    push rx860_bstack, $I11
    repr_get_attr_int rx860_pos, $P11, rx860_curclass, "$!pos"
  alt864_end:
    rx860_cur."!cursor_pass"(rx860_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx860_cur)
  rx860_restart:
    repr_get_attr_obj rx860_cstack, rx860_cur, rx860_curclass, "$!cstack"
  rx860_fail:
    unless rx860_bstack, rx860_done
    pop $I19, rx860_bstack
    if_null rx860_cstack, rx860_cstack_done
    unless rx860_cstack, rx860_cstack_done
    dec $I19
    set $P11, rx860_cstack[$I19]
  rx860_cstack_done:
    pop rx860_rep, rx860_bstack
    pop rx860_pos, rx860_bstack
    pop $I19, rx860_bstack
    lt rx860_pos, -1, rx860_done
    lt rx860_pos, 0, rx860_fail
    eq $I19, 0, rx860_fail
    if_null rx860_cstack, rx860_jump
    elements $I18, rx860_bstack
    le $I18, 0, rx860_cut
    dec $I18
    set $I18, rx860_bstack[$I18]
  rx860_cut:
    assign rx860_cstack, $I18
  rx860_jump:
    jump $I19
  rx860_done:
    rx860_cur."!cursor_fail"()
    .return (rx860_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "173_1338064451.944_caps"  :subid("638_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    new $P104, "Hash"
    set $P104["sigil"], 0
    set $P104["semilist"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "173_1338064451.944_nfa"  :subid("639_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "sigil"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 40
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "semilist"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "semilist"  :subid("174_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2290
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1250
    .lex "self", param_2290
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2291
    .lex "$/", $P2292
    .local string rx866_tgt
    .local int rx866_pos
    .local int rx866_off
    .local int rx866_eos
    .local int rx866_rep
    .local pmc rx866_cur
    .local pmc rx866_curclass
    .local pmc rx866_bstack
    .local pmc rx866_cstack
    (rx866_cur, rx866_tgt, rx866_pos, rx866_curclass, rx866_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx866_cur
    length rx866_eos, rx866_tgt
    eq $I19, 1, rx866_restart
    repr_get_attr_int $I11, self, rx866_curclass, "$!from"
    ne $I11, -1, rxscan867_done
    goto rxscan867_scan
  rxscan867_loop:
    inc rx866_pos
    gt rx866_pos, rx866_eos, rx866_fail
    repr_bind_attr_int rx866_cur, rx866_curclass, "$!from", rx866_pos
  rxscan867_scan:
    nqp_rxmark rx866_bstack, rxscan867_loop, rx866_pos, 0
  rxscan867_done:
    repr_bind_attr_int rx866_cur, rx866_curclass, "$!pos", rx866_pos
    $P11 = rx866_cur."ws"()
    repr_get_attr_int $I11, $P11, rx866_curclass, "$!pos"
    lt $I11, 0, rx866_fail
    repr_get_attr_int rx866_pos, $P11, rx866_curclass, "$!pos"
    repr_bind_attr_int rx866_cur, rx866_curclass, "$!pos", rx866_pos
    $P11 = rx866_cur."statement"()
    repr_get_attr_int $I11, $P11, rx866_curclass, "$!pos"
    lt $I11, 0, rx866_fail
    nqp_rxmark rx866_bstack, rxsubrule869_pass, -1, 0
  rxsubrule869_pass:
    rx866_cstack = rx866_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx866_pos, $P11, rx866_curclass, "$!pos"
    repr_bind_attr_int rx866_cur, rx866_curclass, "$!pos", rx866_pos
    $P11 = rx866_cur."ws"()
    repr_get_attr_int $I11, $P11, rx866_curclass, "$!pos"
    lt $I11, 0, rx866_fail
    repr_get_attr_int rx866_pos, $P11, rx866_curclass, "$!pos"
    rx866_cur."!cursor_pass"(rx866_pos, "semilist", 'backtrack'=>1)
    .return (rx866_cur)
  rx866_restart:
    repr_get_attr_obj rx866_cstack, rx866_cur, rx866_curclass, "$!cstack"
  rx866_fail:
    unless rx866_bstack, rx866_done
    pop $I19, rx866_bstack
    if_null rx866_cstack, rx866_cstack_done
    unless rx866_cstack, rx866_cstack_done
    dec $I19
    set $P11, rx866_cstack[$I19]
  rx866_cstack_done:
    pop rx866_rep, rx866_bstack
    pop rx866_pos, rx866_bstack
    pop $I19, rx866_bstack
    lt rx866_pos, -1, rx866_done
    lt rx866_pos, 0, rx866_fail
    eq $I19, 0, rx866_fail
    if_null rx866_cstack, rx866_jump
    elements $I18, rx866_bstack
    le $I18, 0, rx866_cut
    dec $I18
    set $I18, rx866_bstack[$I18]
  rx866_cut:
    assign rx866_cstack, $I18
  rx866_jump:
    jump $I19
  rx866_done:
    rx866_cur."!cursor_fail"()
    .return (rx866_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "174_1338064451.944_caps"  :subid("640_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1250
    new $P104, "Hash"
    set $P104["statement"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixish"  :subid("175_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2295
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    .lex "self", param_2295
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2296
    .lex "$/", $P2297
    .local string rx871_tgt
    .local int rx871_pos
    .local int rx871_off
    .local int rx871_eos
    .local int rx871_rep
    .local pmc rx871_cur
    .local pmc rx871_curclass
    .local pmc rx871_bstack
    .local pmc rx871_cstack
    (rx871_cur, rx871_tgt, rx871_pos, rx871_curclass, rx871_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx871_cur
    length rx871_eos, rx871_tgt
    eq $I19, 1, rx871_restart
    repr_get_attr_int $I11, self, rx871_curclass, "$!from"
    ne $I11, -1, rxscan872_done
    goto rxscan872_scan
  rxscan872_loop:
    inc rx871_pos
    gt rx871_pos, rx871_eos, rx871_fail
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!from", rx871_pos
  rxscan872_scan:
    nqp_rxmark rx871_bstack, rxscan872_loop, rx871_pos, 0
  rxscan872_done:
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!pos", rx871_pos
    $P11 = rx871_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx871_curclass, "$!pos"
    ge $I11, 0, rx871_fail
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!pos", rx871_pos
    $P11 = rx871_cur."infix"()
    repr_get_attr_int $I11, $P11, rx871_curclass, "$!pos"
    lt $I11, 0, rx871_fail
    nqp_rxmark rx871_bstack, rxsubrule873_pass, -1, 0
  rxsubrule873_pass:
    rx871_cstack = rx871_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx871_pos, $P11, rx871_curclass, "$!pos"
    rx871_cur."!cursor_pass"(rx871_pos, "infixish", 'backtrack'=>1)
    .return (rx871_cur)
  rx871_restart:
    repr_get_attr_obj rx871_cstack, rx871_cur, rx871_curclass, "$!cstack"
  rx871_fail:
    unless rx871_bstack, rx871_done
    pop $I19, rx871_bstack
    if_null rx871_cstack, rx871_cstack_done
    unless rx871_cstack, rx871_cstack_done
    dec $I19
    set $P11, rx871_cstack[$I19]
  rx871_cstack_done:
    pop rx871_rep, rx871_bstack
    pop rx871_pos, rx871_bstack
    pop $I19, rx871_bstack
    lt rx871_pos, -1, rx871_done
    lt rx871_pos, 0, rx871_fail
    eq $I19, 0, rx871_fail
    if_null rx871_cstack, rx871_jump
    elements $I18, rx871_bstack
    le $I18, 0, rx871_cut
    dec $I18
    set $I18, rx871_bstack[$I18]
  rx871_cut:
    assign rx871_cstack, $I18
  rx871_jump:
    jump $I19
  rx871_done:
    rx871_cur."!cursor_fail"()
    .return (rx871_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "175_1338064451.944_caps"  :subid("641_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["infix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixstopper"  :subid("176_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2300
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    .lex "self", param_2300
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2301
    .lex "$/", $P2302
    .local string rx874_tgt
    .local int rx874_pos
    .local int rx874_off
    .local int rx874_eos
    .local int rx874_rep
    .local pmc rx874_cur
    .local pmc rx874_curclass
    .local pmc rx874_bstack
    .local pmc rx874_cstack
    (rx874_cur, rx874_tgt, rx874_pos, rx874_curclass, rx874_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx874_cur
    length rx874_eos, rx874_tgt
    eq $I19, 1, rx874_restart
    repr_get_attr_int $I11, self, rx874_curclass, "$!from"
    ne $I11, -1, rxscan875_done
    goto rxscan875_scan
  rxscan875_loop:
    inc rx874_pos
    gt rx874_pos, rx874_eos, rx874_fail
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!from", rx874_pos
  rxscan875_scan:
    nqp_rxmark rx874_bstack, rxscan875_loop, rx874_pos, 0
  rxscan875_done:
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail
    rx874_cur."!cursor_pass"(rx874_pos, "infixstopper", 'backtrack'=>1)
    .return (rx874_cur)
  rx874_restart:
    repr_get_attr_obj rx874_cstack, rx874_cur, rx874_curclass, "$!cstack"
  rx874_fail:
    unless rx874_bstack, rx874_done
    pop $I19, rx874_bstack
    if_null rx874_cstack, rx874_cstack_done
    unless rx874_cstack, rx874_cstack_done
    dec $I19
    set $P11, rx874_cstack[$I19]
  rx874_cstack_done:
    pop rx874_rep, rx874_bstack
    pop rx874_pos, rx874_bstack
    pop $I19, rx874_bstack
    lt rx874_pos, -1, rx874_done
    lt rx874_pos, 0, rx874_fail
    eq $I19, 0, rx874_fail
    if_null rx874_cstack, rx874_jump
    elements $I18, rx874_bstack
    le $I18, 0, rx874_cut
    dec $I18
    set $I18, rx874_bstack[$I18]
  rx874_cut:
    assign rx874_cstack, $I18
  rx874_jump:
    jump $I19
  rx874_done:
    rx874_cur."!cursor_fail"()
    .return (rx874_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "176_1338064451.944_caps"  :subid("642_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "176_1338064451.944_nfa"  :subid("643_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "lambda"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<[ ]>"  :subid("177_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2306
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    .lex "self", param_2306
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2307
    .lex "$/", $P2308
    .local string rx876_tgt
    .local int rx876_pos
    .local int rx876_off
    .local int rx876_eos
    .local int rx876_rep
    .local pmc rx876_cur
    .local pmc rx876_curclass
    .local pmc rx876_bstack
    .local pmc rx876_cstack
    (rx876_cur, rx876_tgt, rx876_pos, rx876_curclass, rx876_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx876_cur
    length rx876_eos, rx876_tgt
    eq $I19, 1, rx876_restart
    repr_get_attr_int $I11, self, rx876_curclass, "$!from"
    ne $I11, -1, rxscan877_done
    goto rxscan877_scan
  rxscan877_loop:
    inc rx876_pos
    gt rx876_pos, rx876_eos, rx876_fail
    repr_bind_attr_int rx876_cur, rx876_curclass, "$!from", rx876_pos
  rxscan877_scan:
    nqp_rxmark rx876_bstack, rxscan877_loop, rx876_pos, 0
  rxscan877_done:
    add $I11, rx876_pos, 1
    gt $I11, rx876_eos, rx876_fail
    substr $S10, rx876_tgt, rx876_pos, 1
    ne $S10, ucs4:"[", rx876_fail
    add rx876_pos, 1
    repr_bind_attr_int rx876_cur, rx876_curclass, "$!pos", rx876_pos
    $P11 = rx876_cur."ws"()
    repr_get_attr_int $I11, $P11, rx876_curclass, "$!pos"
    lt $I11, 0, rx876_fail
    repr_get_attr_int rx876_pos, $P11, rx876_curclass, "$!pos"
    repr_bind_attr_int rx876_cur, rx876_curclass, "$!pos", rx876_pos
    $P11 = rx876_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx876_curclass, "$!pos"
    lt $I11, 0, rx876_fail
    nqp_rxmark rx876_bstack, rxsubrule879_pass, -1, 0
  rxsubrule879_pass:
    rx876_cstack = rx876_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx876_pos, $P11, rx876_curclass, "$!pos"
    add $I11, rx876_pos, 1
    gt $I11, rx876_eos, rx876_fail
    substr $S10, rx876_tgt, rx876_pos, 1
    ne $S10, ucs4:"]", rx876_fail
    add rx876_pos, 1
    repr_bind_attr_int rx876_cur, rx876_curclass, "$!pos", rx876_pos
    $P11 = rx876_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx876_curclass, "$!pos"
    lt $I11, 0, rx876_fail
    nqp_rxmark rx876_bstack, rxsubrule880_pass, -1, 0
  rxsubrule880_pass:
    rx876_cstack = rx876_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx876_pos, $P11, rx876_curclass, "$!pos"
    rx876_cur."!cursor_pass"(rx876_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx876_cur)
  rx876_restart:
    repr_get_attr_obj rx876_cstack, rx876_cur, rx876_curclass, "$!cstack"
  rx876_fail:
    unless rx876_bstack, rx876_done
    pop $I19, rx876_bstack
    if_null rx876_cstack, rx876_cstack_done
    unless rx876_cstack, rx876_cstack_done
    dec $I19
    set $P11, rx876_cstack[$I19]
  rx876_cstack_done:
    pop rx876_rep, rx876_bstack
    pop rx876_pos, rx876_bstack
    pop $I19, rx876_bstack
    lt rx876_pos, -1, rx876_done
    lt rx876_pos, 0, rx876_fail
    eq $I19, 0, rx876_fail
    if_null rx876_cstack, rx876_jump
    elements $I18, rx876_bstack
    le $I18, 0, rx876_cut
    dec $I18
    set $I18, rx876_bstack[$I18]
  rx876_cut:
    assign rx876_cstack, $I18
  rx876_jump:
    jump $I19
  rx876_done:
    rx876_cur."!cursor_fail"()
    .return (rx876_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "177_1338064451.944_caps"  :subid("644_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    new $P104, "Hash"
    set $P104["EXPR"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "177_1338064451.944_nfa"  :subid("645_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 91
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "EXPR"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 93
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "O"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<{ }>"  :subid("178_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2312
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    .lex "self", param_2312
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2313
    .lex "$/", $P2314
    .local string rx881_tgt
    .local int rx881_pos
    .local int rx881_off
    .local int rx881_eos
    .local int rx881_rep
    .local pmc rx881_cur
    .local pmc rx881_curclass
    .local pmc rx881_bstack
    .local pmc rx881_cstack
    (rx881_cur, rx881_tgt, rx881_pos, rx881_curclass, rx881_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx881_cur
    length rx881_eos, rx881_tgt
    eq $I19, 1, rx881_restart
    repr_get_attr_int $I11, self, rx881_curclass, "$!from"
    ne $I11, -1, rxscan882_done
    goto rxscan882_scan
  rxscan882_loop:
    inc rx881_pos
    gt rx881_pos, rx881_eos, rx881_fail
    repr_bind_attr_int rx881_cur, rx881_curclass, "$!from", rx881_pos
  rxscan882_scan:
    nqp_rxmark rx881_bstack, rxscan882_loop, rx881_pos, 0
  rxscan882_done:
    add $I11, rx881_pos, 1
    gt $I11, rx881_eos, rx881_fail
    substr $S10, rx881_tgt, rx881_pos, 1
    ne $S10, ucs4:"{", rx881_fail
    add rx881_pos, 1
    repr_bind_attr_int rx881_cur, rx881_curclass, "$!pos", rx881_pos
    $P11 = rx881_cur."ws"()
    repr_get_attr_int $I11, $P11, rx881_curclass, "$!pos"
    lt $I11, 0, rx881_fail
    repr_get_attr_int rx881_pos, $P11, rx881_curclass, "$!pos"
    repr_bind_attr_int rx881_cur, rx881_curclass, "$!pos", rx881_pos
    $P11 = rx881_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx881_curclass, "$!pos"
    lt $I11, 0, rx881_fail
    nqp_rxmark rx881_bstack, rxsubrule884_pass, -1, 0
  rxsubrule884_pass:
    rx881_cstack = rx881_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx881_pos, $P11, rx881_curclass, "$!pos"
    add $I11, rx881_pos, 1
    gt $I11, rx881_eos, rx881_fail
    substr $S10, rx881_tgt, rx881_pos, 1
    ne $S10, ucs4:"}", rx881_fail
    add rx881_pos, 1
    repr_bind_attr_int rx881_cur, rx881_curclass, "$!pos", rx881_pos
    $P11 = rx881_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx881_curclass, "$!pos"
    lt $I11, 0, rx881_fail
    nqp_rxmark rx881_bstack, rxsubrule885_pass, -1, 0
  rxsubrule885_pass:
    rx881_cstack = rx881_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx881_pos, $P11, rx881_curclass, "$!pos"
    rx881_cur."!cursor_pass"(rx881_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx881_cur)
  rx881_restart:
    repr_get_attr_obj rx881_cstack, rx881_cur, rx881_curclass, "$!cstack"
  rx881_fail:
    unless rx881_bstack, rx881_done
    pop $I19, rx881_bstack
    if_null rx881_cstack, rx881_cstack_done
    unless rx881_cstack, rx881_cstack_done
    dec $I19
    set $P11, rx881_cstack[$I19]
  rx881_cstack_done:
    pop rx881_rep, rx881_bstack
    pop rx881_pos, rx881_bstack
    pop $I19, rx881_bstack
    lt rx881_pos, -1, rx881_done
    lt rx881_pos, 0, rx881_fail
    eq $I19, 0, rx881_fail
    if_null rx881_cstack, rx881_jump
    elements $I18, rx881_bstack
    le $I18, 0, rx881_cut
    dec $I18
    set $I18, rx881_bstack[$I18]
  rx881_cut:
    assign rx881_cstack, $I18
  rx881_jump:
    jump $I19
  rx881_done:
    rx881_cur."!cursor_fail"()
    .return (rx881_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "178_1338064451.944_caps"  :subid("646_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    new $P104, "Hash"
    set $P104["EXPR"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "178_1338064451.944_nfa"  :subid("647_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "EXPR"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 125
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "O"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<ang>"  :subid("179_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2318
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .lex "self", param_2318
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2319
    .lex "$/", $P2320
    .local string rx886_tgt
    .local int rx886_pos
    .local int rx886_off
    .local int rx886_eos
    .local int rx886_rep
    .local pmc rx886_cur
    .local pmc rx886_curclass
    .local pmc rx886_bstack
    .local pmc rx886_cstack
    (rx886_cur, rx886_tgt, rx886_pos, rx886_curclass, rx886_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx886_cur
    length rx886_eos, rx886_tgt
    eq $I19, 1, rx886_restart
    repr_get_attr_int $I11, self, rx886_curclass, "$!from"
    ne $I11, -1, rxscan887_done
    goto rxscan887_scan
  rxscan887_loop:
    inc rx886_pos
    gt rx886_pos, rx886_eos, rx886_fail
    repr_bind_attr_int rx886_cur, rx886_curclass, "$!from", rx886_pos
  rxscan887_scan:
    nqp_rxmark rx886_bstack, rxscan887_loop, rx886_pos, 0
  rxscan887_done:
    ge rx886_pos, rx886_eos, rx886_fail
    substr $S11, rx886_tgt, rx886_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx886_fail
    repr_bind_attr_int rx886_cur, rx886_curclass, "$!pos", rx886_pos
    $P11 = rx886_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx886_curclass, "$!pos"
    lt $I11, 0, rx886_fail
    nqp_rxmark rx886_bstack, rxsubrule888_pass, -1, 0
  rxsubrule888_pass:
    rx886_cstack = rx886_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx886_pos, $P11, rx886_curclass, "$!pos"
    repr_bind_attr_int rx886_cur, rx886_curclass, "$!pos", rx886_pos
    $P11 = rx886_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx886_curclass, "$!pos"
    lt $I11, 0, rx886_fail
    nqp_rxmark rx886_bstack, rxsubrule889_pass, -1, 0
  rxsubrule889_pass:
    rx886_cstack = rx886_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx886_pos, $P11, rx886_curclass, "$!pos"
    rx886_cur."!cursor_pass"(rx886_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx886_cur)
  rx886_restart:
    repr_get_attr_obj rx886_cstack, rx886_cur, rx886_curclass, "$!cstack"
  rx886_fail:
    unless rx886_bstack, rx886_done
    pop $I19, rx886_bstack
    if_null rx886_cstack, rx886_cstack_done
    unless rx886_cstack, rx886_cstack_done
    dec $I19
    set $P11, rx886_cstack[$I19]
  rx886_cstack_done:
    pop rx886_rep, rx886_bstack
    pop rx886_pos, rx886_bstack
    pop $I19, rx886_bstack
    lt rx886_pos, -1, rx886_done
    lt rx886_pos, 0, rx886_fail
    eq $I19, 0, rx886_fail
    if_null rx886_cstack, rx886_jump
    elements $I18, rx886_bstack
    le $I18, 0, rx886_cut
    dec $I18
    set $I18, rx886_bstack[$I18]
  rx886_cut:
    assign rx886_cstack, $I18
  rx886_jump:
    jump $I19
  rx886_done:
    rx886_cur."!cursor_fail"()
    .return (rx886_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "179_1338064451.944_caps"  :subid("648_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "179_1338064451.944_nfa"  :subid("649_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "<"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<( )>"  :subid("180_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2324
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .lex "self", param_2324
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2325
    .lex "$/", $P2326
    .local string rx890_tgt
    .local int rx890_pos
    .local int rx890_off
    .local int rx890_eos
    .local int rx890_rep
    .local pmc rx890_cur
    .local pmc rx890_curclass
    .local pmc rx890_bstack
    .local pmc rx890_cstack
    (rx890_cur, rx890_tgt, rx890_pos, rx890_curclass, rx890_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx890_cur
    length rx890_eos, rx890_tgt
    eq $I19, 1, rx890_restart
    repr_get_attr_int $I11, self, rx890_curclass, "$!from"
    ne $I11, -1, rxscan891_done
    goto rxscan891_scan
  rxscan891_loop:
    inc rx890_pos
    gt rx890_pos, rx890_eos, rx890_fail
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!from", rx890_pos
  rxscan891_scan:
    nqp_rxmark rx890_bstack, rxscan891_loop, rx890_pos, 0
  rxscan891_done:
    add $I11, rx890_pos, 1
    gt $I11, rx890_eos, rx890_fail
    substr $S10, rx890_tgt, rx890_pos, 1
    ne $S10, ucs4:"(", rx890_fail
    add rx890_pos, 1
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!pos", rx890_pos
    $P11 = rx890_cur."ws"()
    repr_get_attr_int $I11, $P11, rx890_curclass, "$!pos"
    lt $I11, 0, rx890_fail
    repr_get_attr_int rx890_pos, $P11, rx890_curclass, "$!pos"
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!pos", rx890_pos
    $P11 = rx890_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx890_curclass, "$!pos"
    lt $I11, 0, rx890_fail
    nqp_rxmark rx890_bstack, rxsubrule893_pass, -1, 0
  rxsubrule893_pass:
    rx890_cstack = rx890_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx890_pos, $P11, rx890_curclass, "$!pos"
    add $I11, rx890_pos, 1
    gt $I11, rx890_eos, rx890_fail
    substr $S10, rx890_tgt, rx890_pos, 1
    ne $S10, ucs4:")", rx890_fail
    add rx890_pos, 1
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!pos", rx890_pos
    $P11 = rx890_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx890_curclass, "$!pos"
    lt $I11, 0, rx890_fail
    nqp_rxmark rx890_bstack, rxsubrule894_pass, -1, 0
  rxsubrule894_pass:
    rx890_cstack = rx890_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx890_pos, $P11, rx890_curclass, "$!pos"
    rx890_cur."!cursor_pass"(rx890_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx890_cur)
  rx890_restart:
    repr_get_attr_obj rx890_cstack, rx890_cur, rx890_curclass, "$!cstack"
  rx890_fail:
    unless rx890_bstack, rx890_done
    pop $I19, rx890_bstack
    if_null rx890_cstack, rx890_cstack_done
    unless rx890_cstack, rx890_cstack_done
    dec $I19
    set $P11, rx890_cstack[$I19]
  rx890_cstack_done:
    pop rx890_rep, rx890_bstack
    pop rx890_pos, rx890_bstack
    pop $I19, rx890_bstack
    lt rx890_pos, -1, rx890_done
    lt rx890_pos, 0, rx890_fail
    eq $I19, 0, rx890_fail
    if_null rx890_cstack, rx890_jump
    elements $I18, rx890_bstack
    le $I18, 0, rx890_cut
    dec $I18
    set $I18, rx890_bstack[$I18]
  rx890_cut:
    assign rx890_cstack, $I18
  rx890_jump:
    jump $I19
  rx890_done:
    rx890_cur."!cursor_fail"()
    .return (rx890_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "180_1338064451.944_caps"  :subid("650_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    new $P104, "Hash"
    set $P104["arglist"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "180_1338064451.944_nfa"  :subid("651_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 40
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "arglist"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 41
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "O"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<.>"  :subid("181_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2330
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .lex "self", param_2330
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2331
    .lex "$/", $P2332
    .local string rx895_tgt
    .local int rx895_pos
    .local int rx895_off
    .local int rx895_eos
    .local int rx895_rep
    .local pmc rx895_cur
    .local pmc rx895_curclass
    .local pmc rx895_bstack
    .local pmc rx895_cstack
    (rx895_cur, rx895_tgt, rx895_pos, rx895_curclass, rx895_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx895_cur
    length rx895_eos, rx895_tgt
    eq $I19, 1, rx895_restart
    repr_get_attr_int $I11, self, rx895_curclass, "$!from"
    ne $I11, -1, rxscan896_done
    goto rxscan896_scan
  rxscan896_loop:
    inc rx895_pos
    gt rx895_pos, rx895_eos, rx895_fail
    repr_bind_attr_int rx895_cur, rx895_curclass, "$!from", rx895_pos
  rxscan896_scan:
    nqp_rxmark rx895_bstack, rxscan896_loop, rx895_pos, 0
  rxscan896_done:
    repr_bind_attr_int rx895_cur, rx895_curclass, "$!pos", rx895_pos
    $P11 = rx895_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx895_curclass, "$!pos"
    lt $I11, 0, rx895_fail
    nqp_rxmark rx895_bstack, rxsubrule897_pass, -1, 0
  rxsubrule897_pass:
    rx895_cstack = rx895_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx895_pos, $P11, rx895_curclass, "$!pos"
    repr_bind_attr_int rx895_cur, rx895_curclass, "$!pos", rx895_pos
    $P11 = rx895_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx895_curclass, "$!pos"
    lt $I11, 0, rx895_fail
    nqp_rxmark rx895_bstack, rxsubrule898_pass, -1, 0
  rxsubrule898_pass:
    rx895_cstack = rx895_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx895_pos, $P11, rx895_curclass, "$!pos"
    rx895_cur."!cursor_pass"(rx895_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx895_cur)
  rx895_restart:
    repr_get_attr_obj rx895_cstack, rx895_cur, rx895_curclass, "$!cstack"
  rx895_fail:
    unless rx895_bstack, rx895_done
    pop $I19, rx895_bstack
    if_null rx895_cstack, rx895_cstack_done
    unless rx895_cstack, rx895_cstack_done
    dec $I19
    set $P11, rx895_cstack[$I19]
  rx895_cstack_done:
    pop rx895_rep, rx895_bstack
    pop rx895_pos, rx895_bstack
    pop $I19, rx895_bstack
    lt rx895_pos, -1, rx895_done
    lt rx895_pos, 0, rx895_fail
    eq $I19, 0, rx895_fail
    if_null rx895_cstack, rx895_jump
    elements $I18, rx895_bstack
    le $I18, 0, rx895_cut
    dec $I18
    set $I18, rx895_bstack[$I18]
  rx895_cut:
    assign rx895_cstack, $I18
  rx895_jump:
    jump $I19
  rx895_done:
    rx895_cur."!cursor_fail"()
    .return (rx895_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "181_1338064451.944_caps"  :subid("652_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    new $P104, "Hash"
    set $P104["dotty"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "181_1338064451.944_nfa"  :subid("653_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "dotty"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<++>"  :subid("182_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2336
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    .lex "self", param_2336
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2337
    .lex "$/", $P2338
    .local string rx899_tgt
    .local int rx899_pos
    .local int rx899_off
    .local int rx899_eos
    .local int rx899_rep
    .local pmc rx899_cur
    .local pmc rx899_curclass
    .local pmc rx899_bstack
    .local pmc rx899_cstack
    (rx899_cur, rx899_tgt, rx899_pos, rx899_curclass, rx899_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx899_cur
    length rx899_eos, rx899_tgt
    eq $I19, 1, rx899_restart
    repr_get_attr_int $I11, self, rx899_curclass, "$!from"
    ne $I11, -1, rxscan900_done
    goto rxscan900_scan
  rxscan900_loop:
    inc rx899_pos
    gt rx899_pos, rx899_eos, rx899_fail
    repr_bind_attr_int rx899_cur, rx899_curclass, "$!from", rx899_pos
  rxscan900_scan:
    nqp_rxmark rx899_bstack, rxscan900_loop, rx899_pos, 0
  rxscan900_done:
    nqp_rxmark rx899_bstack, rxcap901_fail, rx899_pos, 0
    add $I11, rx899_pos, 2
    gt $I11, rx899_eos, rx899_fail
    substr $S10, rx899_tgt, rx899_pos, 2
    ne $S10, ucs4:"++", rx899_fail
    add rx899_pos, 2
    nqp_rxpeek $I19, rx899_bstack, rxcap901_fail
    inc $I19
    set $I11, rx899_bstack[$I19]
    $P11 = rx899_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx899_pos)
    rx899_cstack = rx899_cur."!cursor_capture"($P11, "sym")
    goto rxcap901_done
  rxcap901_fail:
    goto rx899_fail
  rxcap901_done:
    repr_bind_attr_int rx899_cur, rx899_curclass, "$!pos", rx899_pos
    $P11 = rx899_cur."O"("%autoincrement, :pirop<inc>")
    repr_get_attr_int $I11, $P11, rx899_curclass, "$!pos"
    lt $I11, 0, rx899_fail
    nqp_rxmark rx899_bstack, rxsubrule902_pass, -1, 0
  rxsubrule902_pass:
    rx899_cstack = rx899_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx899_pos, $P11, rx899_curclass, "$!pos"
    rx899_cur."!cursor_pass"(rx899_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx899_cur)
  rx899_restart:
    repr_get_attr_obj rx899_cstack, rx899_cur, rx899_curclass, "$!cstack"
  rx899_fail:
    unless rx899_bstack, rx899_done
    pop $I19, rx899_bstack
    if_null rx899_cstack, rx899_cstack_done
    unless rx899_cstack, rx899_cstack_done
    dec $I19
    set $P11, rx899_cstack[$I19]
  rx899_cstack_done:
    pop rx899_rep, rx899_bstack
    pop rx899_pos, rx899_bstack
    pop $I19, rx899_bstack
    lt rx899_pos, -1, rx899_done
    lt rx899_pos, 0, rx899_fail
    eq $I19, 0, rx899_fail
    if_null rx899_cstack, rx899_jump
    elements $I18, rx899_bstack
    le $I18, 0, rx899_cut
    dec $I18
    set $I18, rx899_bstack[$I18]
  rx899_cut:
    assign rx899_cstack, $I18
  rx899_jump:
    jump $I19
  rx899_done:
    rx899_cur."!cursor_fail"()
    .return (rx899_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "182_1338064451.944_caps"  :subid("654_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "182_1338064451.944_nfa"  :subid("655_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 43
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<-->"  :subid("183_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2342
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    .lex "self", param_2342
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2343
    .lex "$/", $P2344
    .local string rx903_tgt
    .local int rx903_pos
    .local int rx903_off
    .local int rx903_eos
    .local int rx903_rep
    .local pmc rx903_cur
    .local pmc rx903_curclass
    .local pmc rx903_bstack
    .local pmc rx903_cstack
    (rx903_cur, rx903_tgt, rx903_pos, rx903_curclass, rx903_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx903_cur
    length rx903_eos, rx903_tgt
    eq $I19, 1, rx903_restart
    repr_get_attr_int $I11, self, rx903_curclass, "$!from"
    ne $I11, -1, rxscan904_done
    goto rxscan904_scan
  rxscan904_loop:
    inc rx903_pos
    gt rx903_pos, rx903_eos, rx903_fail
    repr_bind_attr_int rx903_cur, rx903_curclass, "$!from", rx903_pos
  rxscan904_scan:
    nqp_rxmark rx903_bstack, rxscan904_loop, rx903_pos, 0
  rxscan904_done:
    nqp_rxmark rx903_bstack, rxcap905_fail, rx903_pos, 0
    add $I11, rx903_pos, 2
    gt $I11, rx903_eos, rx903_fail
    substr $S10, rx903_tgt, rx903_pos, 2
    ne $S10, ucs4:"--", rx903_fail
    add rx903_pos, 2
    nqp_rxpeek $I19, rx903_bstack, rxcap905_fail
    inc $I19
    set $I11, rx903_bstack[$I19]
    $P11 = rx903_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx903_pos)
    rx903_cstack = rx903_cur."!cursor_capture"($P11, "sym")
    goto rxcap905_done
  rxcap905_fail:
    goto rx903_fail
  rxcap905_done:
    repr_bind_attr_int rx903_cur, rx903_curclass, "$!pos", rx903_pos
    $P11 = rx903_cur."O"("%autoincrement, :pirop<dec>")
    repr_get_attr_int $I11, $P11, rx903_curclass, "$!pos"
    lt $I11, 0, rx903_fail
    nqp_rxmark rx903_bstack, rxsubrule906_pass, -1, 0
  rxsubrule906_pass:
    rx903_cstack = rx903_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx903_pos, $P11, rx903_curclass, "$!pos"
    rx903_cur."!cursor_pass"(rx903_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx903_cur)
  rx903_restart:
    repr_get_attr_obj rx903_cstack, rx903_cur, rx903_curclass, "$!cstack"
  rx903_fail:
    unless rx903_bstack, rx903_done
    pop $I19, rx903_bstack
    if_null rx903_cstack, rx903_cstack_done
    unless rx903_cstack, rx903_cstack_done
    dec $I19
    set $P11, rx903_cstack[$I19]
  rx903_cstack_done:
    pop rx903_rep, rx903_bstack
    pop rx903_pos, rx903_bstack
    pop $I19, rx903_bstack
    lt rx903_pos, -1, rx903_done
    lt rx903_pos, 0, rx903_fail
    eq $I19, 0, rx903_fail
    if_null rx903_cstack, rx903_jump
    elements $I18, rx903_bstack
    le $I18, 0, rx903_cut
    dec $I18
    set $I18, rx903_bstack[$I18]
  rx903_cut:
    assign rx903_cstack, $I18
  rx903_jump:
    jump $I19
  rx903_done:
    rx903_cur."!cursor_fail"()
    .return (rx903_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "183_1338064451.944_caps"  :subid("656_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "183_1338064451.944_nfa"  :subid("657_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 45
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<++>"  :subid("184_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2348
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    .lex "self", param_2348
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2349
    .lex "$/", $P2350
    .local string rx907_tgt
    .local int rx907_pos
    .local int rx907_off
    .local int rx907_eos
    .local int rx907_rep
    .local pmc rx907_cur
    .local pmc rx907_curclass
    .local pmc rx907_bstack
    .local pmc rx907_cstack
    (rx907_cur, rx907_tgt, rx907_pos, rx907_curclass, rx907_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx907_cur
    length rx907_eos, rx907_tgt
    eq $I19, 1, rx907_restart
    repr_get_attr_int $I11, self, rx907_curclass, "$!from"
    ne $I11, -1, rxscan908_done
    goto rxscan908_scan
  rxscan908_loop:
    inc rx907_pos
    gt rx907_pos, rx907_eos, rx907_fail
    repr_bind_attr_int rx907_cur, rx907_curclass, "$!from", rx907_pos
  rxscan908_scan:
    nqp_rxmark rx907_bstack, rxscan908_loop, rx907_pos, 0
  rxscan908_done:
    nqp_rxmark rx907_bstack, rxcap909_fail, rx907_pos, 0
    add $I11, rx907_pos, 2
    gt $I11, rx907_eos, rx907_fail
    substr $S10, rx907_tgt, rx907_pos, 2
    ne $S10, ucs4:"++", rx907_fail
    add rx907_pos, 2
    nqp_rxpeek $I19, rx907_bstack, rxcap909_fail
    inc $I19
    set $I11, rx907_bstack[$I19]
    $P11 = rx907_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx907_pos)
    rx907_cstack = rx907_cur."!cursor_capture"($P11, "sym")
    goto rxcap909_done
  rxcap909_fail:
    goto rx907_fail
  rxcap909_done:
    repr_bind_attr_int rx907_cur, rx907_curclass, "$!pos", rx907_pos
    $P11 = rx907_cur."O"("%autoincrement")
    repr_get_attr_int $I11, $P11, rx907_curclass, "$!pos"
    lt $I11, 0, rx907_fail
    nqp_rxmark rx907_bstack, rxsubrule910_pass, -1, 0
  rxsubrule910_pass:
    rx907_cstack = rx907_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx907_pos, $P11, rx907_curclass, "$!pos"
    rx907_cur."!cursor_pass"(rx907_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx907_cur)
  rx907_restart:
    repr_get_attr_obj rx907_cstack, rx907_cur, rx907_curclass, "$!cstack"
  rx907_fail:
    unless rx907_bstack, rx907_done
    pop $I19, rx907_bstack
    if_null rx907_cstack, rx907_cstack_done
    unless rx907_cstack, rx907_cstack_done
    dec $I19
    set $P11, rx907_cstack[$I19]
  rx907_cstack_done:
    pop rx907_rep, rx907_bstack
    pop rx907_pos, rx907_bstack
    pop $I19, rx907_bstack
    lt rx907_pos, -1, rx907_done
    lt rx907_pos, 0, rx907_fail
    eq $I19, 0, rx907_fail
    if_null rx907_cstack, rx907_jump
    elements $I18, rx907_bstack
    le $I18, 0, rx907_cut
    dec $I18
    set $I18, rx907_bstack[$I18]
  rx907_cut:
    assign rx907_cstack, $I18
  rx907_jump:
    jump $I19
  rx907_done:
    rx907_cur."!cursor_fail"()
    .return (rx907_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "184_1338064451.944_caps"  :subid("658_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "184_1338064451.944_nfa"  :subid("659_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 43
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<-->"  :subid("185_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2354
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    .lex "self", param_2354
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2355
    .lex "$/", $P2356
    .local string rx911_tgt
    .local int rx911_pos
    .local int rx911_off
    .local int rx911_eos
    .local int rx911_rep
    .local pmc rx911_cur
    .local pmc rx911_curclass
    .local pmc rx911_bstack
    .local pmc rx911_cstack
    (rx911_cur, rx911_tgt, rx911_pos, rx911_curclass, rx911_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx911_cur
    length rx911_eos, rx911_tgt
    eq $I19, 1, rx911_restart
    repr_get_attr_int $I11, self, rx911_curclass, "$!from"
    ne $I11, -1, rxscan912_done
    goto rxscan912_scan
  rxscan912_loop:
    inc rx911_pos
    gt rx911_pos, rx911_eos, rx911_fail
    repr_bind_attr_int rx911_cur, rx911_curclass, "$!from", rx911_pos
  rxscan912_scan:
    nqp_rxmark rx911_bstack, rxscan912_loop, rx911_pos, 0
  rxscan912_done:
    nqp_rxmark rx911_bstack, rxcap913_fail, rx911_pos, 0
    add $I11, rx911_pos, 2
    gt $I11, rx911_eos, rx911_fail
    substr $S10, rx911_tgt, rx911_pos, 2
    ne $S10, ucs4:"--", rx911_fail
    add rx911_pos, 2
    nqp_rxpeek $I19, rx911_bstack, rxcap913_fail
    inc $I19
    set $I11, rx911_bstack[$I19]
    $P11 = rx911_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx911_pos)
    rx911_cstack = rx911_cur."!cursor_capture"($P11, "sym")
    goto rxcap913_done
  rxcap913_fail:
    goto rx911_fail
  rxcap913_done:
    repr_bind_attr_int rx911_cur, rx911_curclass, "$!pos", rx911_pos
    $P11 = rx911_cur."O"("%autoincrement")
    repr_get_attr_int $I11, $P11, rx911_curclass, "$!pos"
    lt $I11, 0, rx911_fail
    nqp_rxmark rx911_bstack, rxsubrule914_pass, -1, 0
  rxsubrule914_pass:
    rx911_cstack = rx911_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx911_pos, $P11, rx911_curclass, "$!pos"
    rx911_cur."!cursor_pass"(rx911_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx911_cur)
  rx911_restart:
    repr_get_attr_obj rx911_cstack, rx911_cur, rx911_curclass, "$!cstack"
  rx911_fail:
    unless rx911_bstack, rx911_done
    pop $I19, rx911_bstack
    if_null rx911_cstack, rx911_cstack_done
    unless rx911_cstack, rx911_cstack_done
    dec $I19
    set $P11, rx911_cstack[$I19]
  rx911_cstack_done:
    pop rx911_rep, rx911_bstack
    pop rx911_pos, rx911_bstack
    pop $I19, rx911_bstack
    lt rx911_pos, -1, rx911_done
    lt rx911_pos, 0, rx911_fail
    eq $I19, 0, rx911_fail
    if_null rx911_cstack, rx911_jump
    elements $I18, rx911_bstack
    le $I18, 0, rx911_cut
    dec $I18
    set $I18, rx911_bstack[$I18]
  rx911_cut:
    assign rx911_cstack, $I18
  rx911_jump:
    jump $I19
  rx911_done:
    rx911_cur."!cursor_fail"()
    .return (rx911_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "185_1338064451.944_caps"  :subid("660_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "185_1338064451.944_nfa"  :subid("661_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 45
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<**>"  :subid("186_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2360
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    .lex "self", param_2360
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2361
    .lex "$/", $P2362
    .local string rx915_tgt
    .local int rx915_pos
    .local int rx915_off
    .local int rx915_eos
    .local int rx915_rep
    .local pmc rx915_cur
    .local pmc rx915_curclass
    .local pmc rx915_bstack
    .local pmc rx915_cstack
    (rx915_cur, rx915_tgt, rx915_pos, rx915_curclass, rx915_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx915_cur
    length rx915_eos, rx915_tgt
    eq $I19, 1, rx915_restart
    repr_get_attr_int $I11, self, rx915_curclass, "$!from"
    ne $I11, -1, rxscan916_done
    goto rxscan916_scan
  rxscan916_loop:
    inc rx915_pos
    gt rx915_pos, rx915_eos, rx915_fail
    repr_bind_attr_int rx915_cur, rx915_curclass, "$!from", rx915_pos
  rxscan916_scan:
    nqp_rxmark rx915_bstack, rxscan916_loop, rx915_pos, 0
  rxscan916_done:
    nqp_rxmark rx915_bstack, rxcap917_fail, rx915_pos, 0
    add $I11, rx915_pos, 2
    gt $I11, rx915_eos, rx915_fail
    substr $S10, rx915_tgt, rx915_pos, 2
    ne $S10, ucs4:"**", rx915_fail
    add rx915_pos, 2
    nqp_rxpeek $I19, rx915_bstack, rxcap917_fail
    inc $I19
    set $I11, rx915_bstack[$I19]
    $P11 = rx915_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx915_pos)
    rx915_cstack = rx915_cur."!cursor_capture"($P11, "sym")
    goto rxcap917_done
  rxcap917_fail:
    goto rx915_fail
  rxcap917_done:
    repr_bind_attr_int rx915_cur, rx915_curclass, "$!pos", rx915_pos
    $P11 = rx915_cur."O"("%exponentiation, :pirop<pow__NNN>")
    repr_get_attr_int $I11, $P11, rx915_curclass, "$!pos"
    lt $I11, 0, rx915_fail
    nqp_rxmark rx915_bstack, rxsubrule918_pass, -1, 0
  rxsubrule918_pass:
    rx915_cstack = rx915_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx915_pos, $P11, rx915_curclass, "$!pos"
    rx915_cur."!cursor_pass"(rx915_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx915_cur)
  rx915_restart:
    repr_get_attr_obj rx915_cstack, rx915_cur, rx915_curclass, "$!cstack"
  rx915_fail:
    unless rx915_bstack, rx915_done
    pop $I19, rx915_bstack
    if_null rx915_cstack, rx915_cstack_done
    unless rx915_cstack, rx915_cstack_done
    dec $I19
    set $P11, rx915_cstack[$I19]
  rx915_cstack_done:
    pop rx915_rep, rx915_bstack
    pop rx915_pos, rx915_bstack
    pop $I19, rx915_bstack
    lt rx915_pos, -1, rx915_done
    lt rx915_pos, 0, rx915_fail
    eq $I19, 0, rx915_fail
    if_null rx915_cstack, rx915_jump
    elements $I18, rx915_bstack
    le $I18, 0, rx915_cut
    dec $I18
    set $I18, rx915_bstack[$I18]
  rx915_cut:
    assign rx915_cstack, $I18
  rx915_jump:
    jump $I19
  rx915_done:
    rx915_cur."!cursor_fail"()
    .return (rx915_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "186_1338064451.944_caps"  :subid("662_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "186_1338064451.944_nfa"  :subid("663_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 42
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 42
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<+>"  :subid("187_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2366
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    .lex "self", param_2366
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2367
    .lex "$/", $P2368
    .local string rx919_tgt
    .local int rx919_pos
    .local int rx919_off
    .local int rx919_eos
    .local int rx919_rep
    .local pmc rx919_cur
    .local pmc rx919_curclass
    .local pmc rx919_bstack
    .local pmc rx919_cstack
    (rx919_cur, rx919_tgt, rx919_pos, rx919_curclass, rx919_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx919_cur
    length rx919_eos, rx919_tgt
    eq $I19, 1, rx919_restart
    repr_get_attr_int $I11, self, rx919_curclass, "$!from"
    ne $I11, -1, rxscan920_done
    goto rxscan920_scan
  rxscan920_loop:
    inc rx919_pos
    gt rx919_pos, rx919_eos, rx919_fail
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!from", rx919_pos
  rxscan920_scan:
    nqp_rxmark rx919_bstack, rxscan920_loop, rx919_pos, 0
  rxscan920_done:
    nqp_rxmark rx919_bstack, rxcap921_fail, rx919_pos, 0
    add $I11, rx919_pos, 1
    gt $I11, rx919_eos, rx919_fail
    substr $S10, rx919_tgt, rx919_pos, 1
    ne $S10, ucs4:"+", rx919_fail
    add rx919_pos, 1
    nqp_rxpeek $I19, rx919_bstack, rxcap921_fail
    inc $I19
    set $I11, rx919_bstack[$I19]
    $P11 = rx919_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx919_pos)
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "sym")
    goto rxcap921_done
  rxcap921_fail:
    goto rx919_fail
  rxcap921_done:
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."O"("%symbolic_unary, :pirop<set N*>")
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail
    nqp_rxmark rx919_bstack, rxsubrule922_pass, -1, 0
  rxsubrule922_pass:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    rx919_cur."!cursor_pass"(rx919_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx919_cur)
  rx919_restart:
    repr_get_attr_obj rx919_cstack, rx919_cur, rx919_curclass, "$!cstack"
  rx919_fail:
    unless rx919_bstack, rx919_done
    pop $I19, rx919_bstack
    if_null rx919_cstack, rx919_cstack_done
    unless rx919_cstack, rx919_cstack_done
    dec $I19
    set $P11, rx919_cstack[$I19]
  rx919_cstack_done:
    pop rx919_rep, rx919_bstack
    pop rx919_pos, rx919_bstack
    pop $I19, rx919_bstack
    lt rx919_pos, -1, rx919_done
    lt rx919_pos, 0, rx919_fail
    eq $I19, 0, rx919_fail
    if_null rx919_cstack, rx919_jump
    elements $I18, rx919_bstack
    le $I18, 0, rx919_cut
    dec $I18
    set $I18, rx919_bstack[$I18]
  rx919_cut:
    assign rx919_cstack, $I18
  rx919_jump:
    jump $I19
  rx919_done:
    rx919_cur."!cursor_fail"()
    .return (rx919_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "187_1338064451.944_caps"  :subid("664_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "187_1338064451.944_nfa"  :subid("665_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<~>"  :subid("188_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2372
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    .lex "self", param_2372
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2373
    .lex "$/", $P2374
    .local string rx923_tgt
    .local int rx923_pos
    .local int rx923_off
    .local int rx923_eos
    .local int rx923_rep
    .local pmc rx923_cur
    .local pmc rx923_curclass
    .local pmc rx923_bstack
    .local pmc rx923_cstack
    (rx923_cur, rx923_tgt, rx923_pos, rx923_curclass, rx923_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx923_cur
    length rx923_eos, rx923_tgt
    eq $I19, 1, rx923_restart
    repr_get_attr_int $I11, self, rx923_curclass, "$!from"
    ne $I11, -1, rxscan924_done
    goto rxscan924_scan
  rxscan924_loop:
    inc rx923_pos
    gt rx923_pos, rx923_eos, rx923_fail
    repr_bind_attr_int rx923_cur, rx923_curclass, "$!from", rx923_pos
  rxscan924_scan:
    nqp_rxmark rx923_bstack, rxscan924_loop, rx923_pos, 0
  rxscan924_done:
    nqp_rxmark rx923_bstack, rxcap925_fail, rx923_pos, 0
    add $I11, rx923_pos, 1
    gt $I11, rx923_eos, rx923_fail
    substr $S10, rx923_tgt, rx923_pos, 1
    ne $S10, ucs4:"~", rx923_fail
    add rx923_pos, 1
    nqp_rxpeek $I19, rx923_bstack, rxcap925_fail
    inc $I19
    set $I11, rx923_bstack[$I19]
    $P11 = rx923_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx923_pos)
    rx923_cstack = rx923_cur."!cursor_capture"($P11, "sym")
    goto rxcap925_done
  rxcap925_fail:
    goto rx923_fail
  rxcap925_done:
    repr_bind_attr_int rx923_cur, rx923_curclass, "$!pos", rx923_pos
    $P11 = rx923_cur."O"("%symbolic_unary, :pirop<set S*>")
    repr_get_attr_int $I11, $P11, rx923_curclass, "$!pos"
    lt $I11, 0, rx923_fail
    nqp_rxmark rx923_bstack, rxsubrule926_pass, -1, 0
  rxsubrule926_pass:
    rx923_cstack = rx923_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx923_pos, $P11, rx923_curclass, "$!pos"
    rx923_cur."!cursor_pass"(rx923_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx923_cur)
  rx923_restart:
    repr_get_attr_obj rx923_cstack, rx923_cur, rx923_curclass, "$!cstack"
  rx923_fail:
    unless rx923_bstack, rx923_done
    pop $I19, rx923_bstack
    if_null rx923_cstack, rx923_cstack_done
    unless rx923_cstack, rx923_cstack_done
    dec $I19
    set $P11, rx923_cstack[$I19]
  rx923_cstack_done:
    pop rx923_rep, rx923_bstack
    pop rx923_pos, rx923_bstack
    pop $I19, rx923_bstack
    lt rx923_pos, -1, rx923_done
    lt rx923_pos, 0, rx923_fail
    eq $I19, 0, rx923_fail
    if_null rx923_cstack, rx923_jump
    elements $I18, rx923_bstack
    le $I18, 0, rx923_cut
    dec $I18
    set $I18, rx923_bstack[$I18]
  rx923_cut:
    assign rx923_cstack, $I18
  rx923_jump:
    jump $I19
  rx923_done:
    rx923_cur."!cursor_fail"()
    .return (rx923_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "188_1338064451.944_caps"  :subid("666_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "188_1338064451.944_nfa"  :subid("667_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 126
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<->"  :subid("189_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2378
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    .lex "self", param_2378
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2379
    .lex "$/", $P2380
    .local string rx927_tgt
    .local int rx927_pos
    .local int rx927_off
    .local int rx927_eos
    .local int rx927_rep
    .local pmc rx927_cur
    .local pmc rx927_curclass
    .local pmc rx927_bstack
    .local pmc rx927_cstack
    (rx927_cur, rx927_tgt, rx927_pos, rx927_curclass, rx927_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx927_cur
    length rx927_eos, rx927_tgt
    eq $I19, 1, rx927_restart
    repr_get_attr_int $I11, self, rx927_curclass, "$!from"
    ne $I11, -1, rxscan928_done
    goto rxscan928_scan
  rxscan928_loop:
    inc rx927_pos
    gt rx927_pos, rx927_eos, rx927_fail
    repr_bind_attr_int rx927_cur, rx927_curclass, "$!from", rx927_pos
  rxscan928_scan:
    nqp_rxmark rx927_bstack, rxscan928_loop, rx927_pos, 0
  rxscan928_done:
    nqp_rxmark rx927_bstack, rxcap929_fail, rx927_pos, 0
    add $I11, rx927_pos, 1
    gt $I11, rx927_eos, rx927_fail
    substr $S10, rx927_tgt, rx927_pos, 1
    ne $S10, ucs4:"-", rx927_fail
    add rx927_pos, 1
    nqp_rxpeek $I19, rx927_bstack, rxcap929_fail
    inc $I19
    set $I11, rx927_bstack[$I19]
    $P11 = rx927_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx927_pos)
    rx927_cstack = rx927_cur."!cursor_capture"($P11, "sym")
    goto rxcap929_done
  rxcap929_fail:
    goto rx927_fail
  rxcap929_done:
    ge rx927_pos, rx927_eos, rx927_fail
    substr $S11, rx927_tgt, rx927_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx927_fail
    repr_bind_attr_int rx927_cur, rx927_curclass, "$!pos", rx927_pos
    $P11 = rx927_cur."number"()
    repr_get_attr_int $I11, $P11, rx927_curclass, "$!pos"
    ge $I11, 0, rx927_fail
    repr_bind_attr_int rx927_cur, rx927_curclass, "$!pos", rx927_pos
    $P11 = rx927_cur."O"("%symbolic_unary, :pirop<neg>")
    repr_get_attr_int $I11, $P11, rx927_curclass, "$!pos"
    lt $I11, 0, rx927_fail
    nqp_rxmark rx927_bstack, rxsubrule930_pass, -1, 0
  rxsubrule930_pass:
    rx927_cstack = rx927_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx927_pos, $P11, rx927_curclass, "$!pos"
    rx927_cur."!cursor_pass"(rx927_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx927_cur)
  rx927_restart:
    repr_get_attr_obj rx927_cstack, rx927_cur, rx927_curclass, "$!cstack"
  rx927_fail:
    unless rx927_bstack, rx927_done
    pop $I19, rx927_bstack
    if_null rx927_cstack, rx927_cstack_done
    unless rx927_cstack, rx927_cstack_done
    dec $I19
    set $P11, rx927_cstack[$I19]
  rx927_cstack_done:
    pop rx927_rep, rx927_bstack
    pop rx927_pos, rx927_bstack
    pop $I19, rx927_bstack
    lt rx927_pos, -1, rx927_done
    lt rx927_pos, 0, rx927_fail
    eq $I19, 0, rx927_fail
    if_null rx927_cstack, rx927_jump
    elements $I18, rx927_bstack
    le $I18, 0, rx927_cut
    dec $I18
    set $I18, rx927_bstack[$I18]
  rx927_cut:
    assign rx927_cstack, $I18
  rx927_jump:
    jump $I19
  rx927_done:
    rx927_cur."!cursor_fail"()
    .return (rx927_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "189_1338064451.944_caps"  :subid("668_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "189_1338064451.944_nfa"  :subid("669_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 7
    push $P106, ">"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<?>"  :subid("190_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2384
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    .lex "self", param_2384
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2385
    .lex "$/", $P2386
    .local string rx931_tgt
    .local int rx931_pos
    .local int rx931_off
    .local int rx931_eos
    .local int rx931_rep
    .local pmc rx931_cur
    .local pmc rx931_curclass
    .local pmc rx931_bstack
    .local pmc rx931_cstack
    (rx931_cur, rx931_tgt, rx931_pos, rx931_curclass, rx931_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx931_cur
    length rx931_eos, rx931_tgt
    eq $I19, 1, rx931_restart
    repr_get_attr_int $I11, self, rx931_curclass, "$!from"
    ne $I11, -1, rxscan932_done
    goto rxscan932_scan
  rxscan932_loop:
    inc rx931_pos
    gt rx931_pos, rx931_eos, rx931_fail
    repr_bind_attr_int rx931_cur, rx931_curclass, "$!from", rx931_pos
  rxscan932_scan:
    nqp_rxmark rx931_bstack, rxscan932_loop, rx931_pos, 0
  rxscan932_done:
    nqp_rxmark rx931_bstack, rxcap933_fail, rx931_pos, 0
    add $I11, rx931_pos, 1
    gt $I11, rx931_eos, rx931_fail
    substr $S10, rx931_tgt, rx931_pos, 1
    ne $S10, ucs4:"?", rx931_fail
    add rx931_pos, 1
    nqp_rxpeek $I19, rx931_bstack, rxcap933_fail
    inc $I19
    set $I11, rx931_bstack[$I19]
    $P11 = rx931_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx931_pos)
    rx931_cstack = rx931_cur."!cursor_capture"($P11, "sym")
    goto rxcap933_done
  rxcap933_fail:
    goto rx931_fail
  rxcap933_done:
    repr_bind_attr_int rx931_cur, rx931_curclass, "$!pos", rx931_pos
    $P11 = rx931_cur."O"("%symbolic_unary, :pirop<istrue>")
    repr_get_attr_int $I11, $P11, rx931_curclass, "$!pos"
    lt $I11, 0, rx931_fail
    nqp_rxmark rx931_bstack, rxsubrule934_pass, -1, 0
  rxsubrule934_pass:
    rx931_cstack = rx931_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx931_pos, $P11, rx931_curclass, "$!pos"
    rx931_cur."!cursor_pass"(rx931_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx931_cur)
  rx931_restart:
    repr_get_attr_obj rx931_cstack, rx931_cur, rx931_curclass, "$!cstack"
  rx931_fail:
    unless rx931_bstack, rx931_done
    pop $I19, rx931_bstack
    if_null rx931_cstack, rx931_cstack_done
    unless rx931_cstack, rx931_cstack_done
    dec $I19
    set $P11, rx931_cstack[$I19]
  rx931_cstack_done:
    pop rx931_rep, rx931_bstack
    pop rx931_pos, rx931_bstack
    pop $I19, rx931_bstack
    lt rx931_pos, -1, rx931_done
    lt rx931_pos, 0, rx931_fail
    eq $I19, 0, rx931_fail
    if_null rx931_cstack, rx931_jump
    elements $I18, rx931_bstack
    le $I18, 0, rx931_cut
    dec $I18
    set $I18, rx931_bstack[$I18]
  rx931_cut:
    assign rx931_cstack, $I18
  rx931_jump:
    jump $I19
  rx931_done:
    rx931_cur."!cursor_fail"()
    .return (rx931_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "190_1338064451.944_caps"  :subid("670_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "190_1338064451.944_nfa"  :subid("671_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 63
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<!>"  :subid("191_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2390
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .lex "self", param_2390
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2391
    .lex "$/", $P2392
    .local string rx935_tgt
    .local int rx935_pos
    .local int rx935_off
    .local int rx935_eos
    .local int rx935_rep
    .local pmc rx935_cur
    .local pmc rx935_curclass
    .local pmc rx935_bstack
    .local pmc rx935_cstack
    (rx935_cur, rx935_tgt, rx935_pos, rx935_curclass, rx935_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx935_cur
    length rx935_eos, rx935_tgt
    eq $I19, 1, rx935_restart
    repr_get_attr_int $I11, self, rx935_curclass, "$!from"
    ne $I11, -1, rxscan936_done
    goto rxscan936_scan
  rxscan936_loop:
    inc rx935_pos
    gt rx935_pos, rx935_eos, rx935_fail
    repr_bind_attr_int rx935_cur, rx935_curclass, "$!from", rx935_pos
  rxscan936_scan:
    nqp_rxmark rx935_bstack, rxscan936_loop, rx935_pos, 0
  rxscan936_done:
    nqp_rxmark rx935_bstack, rxcap937_fail, rx935_pos, 0
    add $I11, rx935_pos, 1
    gt $I11, rx935_eos, rx935_fail
    substr $S10, rx935_tgt, rx935_pos, 1
    ne $S10, ucs4:"!", rx935_fail
    add rx935_pos, 1
    nqp_rxpeek $I19, rx935_bstack, rxcap937_fail
    inc $I19
    set $I11, rx935_bstack[$I19]
    $P11 = rx935_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx935_pos)
    rx935_cstack = rx935_cur."!cursor_capture"($P11, "sym")
    goto rxcap937_done
  rxcap937_fail:
    goto rx935_fail
  rxcap937_done:
    repr_bind_attr_int rx935_cur, rx935_curclass, "$!pos", rx935_pos
    $P11 = rx935_cur."O"("%symbolic_unary, :pirop<isfalse>")
    repr_get_attr_int $I11, $P11, rx935_curclass, "$!pos"
    lt $I11, 0, rx935_fail
    nqp_rxmark rx935_bstack, rxsubrule938_pass, -1, 0
  rxsubrule938_pass:
    rx935_cstack = rx935_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx935_pos, $P11, rx935_curclass, "$!pos"
    rx935_cur."!cursor_pass"(rx935_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx935_cur)
  rx935_restart:
    repr_get_attr_obj rx935_cstack, rx935_cur, rx935_curclass, "$!cstack"
  rx935_fail:
    unless rx935_bstack, rx935_done
    pop $I19, rx935_bstack
    if_null rx935_cstack, rx935_cstack_done
    unless rx935_cstack, rx935_cstack_done
    dec $I19
    set $P11, rx935_cstack[$I19]
  rx935_cstack_done:
    pop rx935_rep, rx935_bstack
    pop rx935_pos, rx935_bstack
    pop $I19, rx935_bstack
    lt rx935_pos, -1, rx935_done
    lt rx935_pos, 0, rx935_fail
    eq $I19, 0, rx935_fail
    if_null rx935_cstack, rx935_jump
    elements $I18, rx935_bstack
    le $I18, 0, rx935_cut
    dec $I18
    set $I18, rx935_bstack[$I18]
  rx935_cut:
    assign rx935_cstack, $I18
  rx935_jump:
    jump $I19
  rx935_done:
    rx935_cur."!cursor_fail"()
    .return (rx935_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "191_1338064451.944_caps"  :subid("672_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "191_1338064451.944_nfa"  :subid("673_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 33
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<|>"  :subid("192_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2396
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    .lex "self", param_2396
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2397
    .lex "$/", $P2398
    .local string rx939_tgt
    .local int rx939_pos
    .local int rx939_off
    .local int rx939_eos
    .local int rx939_rep
    .local pmc rx939_cur
    .local pmc rx939_curclass
    .local pmc rx939_bstack
    .local pmc rx939_cstack
    (rx939_cur, rx939_tgt, rx939_pos, rx939_curclass, rx939_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx939_cur
    length rx939_eos, rx939_tgt
    eq $I19, 1, rx939_restart
    repr_get_attr_int $I11, self, rx939_curclass, "$!from"
    ne $I11, -1, rxscan940_done
    goto rxscan940_scan
  rxscan940_loop:
    inc rx939_pos
    gt rx939_pos, rx939_eos, rx939_fail
    repr_bind_attr_int rx939_cur, rx939_curclass, "$!from", rx939_pos
  rxscan940_scan:
    nqp_rxmark rx939_bstack, rxscan940_loop, rx939_pos, 0
  rxscan940_done:
    nqp_rxmark rx939_bstack, rxcap941_fail, rx939_pos, 0
    add $I11, rx939_pos, 1
    gt $I11, rx939_eos, rx939_fail
    substr $S10, rx939_tgt, rx939_pos, 1
    ne $S10, ucs4:"|", rx939_fail
    add rx939_pos, 1
    nqp_rxpeek $I19, rx939_bstack, rxcap941_fail
    inc $I19
    set $I11, rx939_bstack[$I19]
    $P11 = rx939_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx939_pos)
    rx939_cstack = rx939_cur."!cursor_capture"($P11, "sym")
    goto rxcap941_done
  rxcap941_fail:
    goto rx939_fail
  rxcap941_done:
    repr_bind_attr_int rx939_cur, rx939_curclass, "$!pos", rx939_pos
    $P11 = rx939_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx939_curclass, "$!pos"
    lt $I11, 0, rx939_fail
    nqp_rxmark rx939_bstack, rxsubrule942_pass, -1, 0
  rxsubrule942_pass:
    rx939_cstack = rx939_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx939_pos, $P11, rx939_curclass, "$!pos"
    rx939_cur."!cursor_pass"(rx939_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx939_cur)
  rx939_restart:
    repr_get_attr_obj rx939_cstack, rx939_cur, rx939_curclass, "$!cstack"
  rx939_fail:
    unless rx939_bstack, rx939_done
    pop $I19, rx939_bstack
    if_null rx939_cstack, rx939_cstack_done
    unless rx939_cstack, rx939_cstack_done
    dec $I19
    set $P11, rx939_cstack[$I19]
  rx939_cstack_done:
    pop rx939_rep, rx939_bstack
    pop rx939_pos, rx939_bstack
    pop $I19, rx939_bstack
    lt rx939_pos, -1, rx939_done
    lt rx939_pos, 0, rx939_fail
    eq $I19, 0, rx939_fail
    if_null rx939_cstack, rx939_jump
    elements $I18, rx939_bstack
    le $I18, 0, rx939_cut
    dec $I18
    set $I18, rx939_bstack[$I18]
  rx939_cut:
    assign rx939_cstack, $I18
  rx939_jump:
    jump $I19
  rx939_done:
    rx939_cur."!cursor_fail"()
    .return (rx939_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "192_1338064451.944_caps"  :subid("674_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "192_1338064451.944_nfa"  :subid("675_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 124
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<*>"  :subid("193_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2402
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .lex "self", param_2402
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2403
    .lex "$/", $P2404
    .local string rx943_tgt
    .local int rx943_pos
    .local int rx943_off
    .local int rx943_eos
    .local int rx943_rep
    .local pmc rx943_cur
    .local pmc rx943_curclass
    .local pmc rx943_bstack
    .local pmc rx943_cstack
    (rx943_cur, rx943_tgt, rx943_pos, rx943_curclass, rx943_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx943_cur
    length rx943_eos, rx943_tgt
    eq $I19, 1, rx943_restart
    repr_get_attr_int $I11, self, rx943_curclass, "$!from"
    ne $I11, -1, rxscan944_done
    goto rxscan944_scan
  rxscan944_loop:
    inc rx943_pos
    gt rx943_pos, rx943_eos, rx943_fail
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!from", rx943_pos
  rxscan944_scan:
    nqp_rxmark rx943_bstack, rxscan944_loop, rx943_pos, 0
  rxscan944_done:
    nqp_rxmark rx943_bstack, rxcap945_fail, rx943_pos, 0
    add $I11, rx943_pos, 1
    gt $I11, rx943_eos, rx943_fail
    substr $S10, rx943_tgt, rx943_pos, 1
    ne $S10, ucs4:"*", rx943_fail
    add rx943_pos, 1
    nqp_rxpeek $I19, rx943_bstack, rxcap945_fail
    inc $I19
    set $I11, rx943_bstack[$I19]
    $P11 = rx943_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx943_pos)
    rx943_cstack = rx943_cur."!cursor_capture"($P11, "sym")
    goto rxcap945_done
  rxcap945_fail:
    goto rx943_fail
  rxcap945_done:
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!pos", rx943_pos
    $P11 = rx943_cur."O"("%multiplicative, :pirop<mul>")
    repr_get_attr_int $I11, $P11, rx943_curclass, "$!pos"
    lt $I11, 0, rx943_fail
    nqp_rxmark rx943_bstack, rxsubrule946_pass, -1, 0
  rxsubrule946_pass:
    rx943_cstack = rx943_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx943_pos, $P11, rx943_curclass, "$!pos"
    rx943_cur."!cursor_pass"(rx943_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx943_cur)
  rx943_restart:
    repr_get_attr_obj rx943_cstack, rx943_cur, rx943_curclass, "$!cstack"
  rx943_fail:
    unless rx943_bstack, rx943_done
    pop $I19, rx943_bstack
    if_null rx943_cstack, rx943_cstack_done
    unless rx943_cstack, rx943_cstack_done
    dec $I19
    set $P11, rx943_cstack[$I19]
  rx943_cstack_done:
    pop rx943_rep, rx943_bstack
    pop rx943_pos, rx943_bstack
    pop $I19, rx943_bstack
    lt rx943_pos, -1, rx943_done
    lt rx943_pos, 0, rx943_fail
    eq $I19, 0, rx943_fail
    if_null rx943_cstack, rx943_jump
    elements $I18, rx943_bstack
    le $I18, 0, rx943_cut
    dec $I18
    set $I18, rx943_bstack[$I18]
  rx943_cut:
    assign rx943_cstack, $I18
  rx943_jump:
    jump $I19
  rx943_done:
    rx943_cur."!cursor_fail"()
    .return (rx943_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "193_1338064451.944_caps"  :subid("676_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "193_1338064451.944_nfa"  :subid("677_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 42
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym</>"  :subid("194_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2408
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .lex "self", param_2408
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2409
    .lex "$/", $P2410
    .local string rx947_tgt
    .local int rx947_pos
    .local int rx947_off
    .local int rx947_eos
    .local int rx947_rep
    .local pmc rx947_cur
    .local pmc rx947_curclass
    .local pmc rx947_bstack
    .local pmc rx947_cstack
    (rx947_cur, rx947_tgt, rx947_pos, rx947_curclass, rx947_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx947_cur
    length rx947_eos, rx947_tgt
    eq $I19, 1, rx947_restart
    repr_get_attr_int $I11, self, rx947_curclass, "$!from"
    ne $I11, -1, rxscan948_done
    goto rxscan948_scan
  rxscan948_loop:
    inc rx947_pos
    gt rx947_pos, rx947_eos, rx947_fail
    repr_bind_attr_int rx947_cur, rx947_curclass, "$!from", rx947_pos
  rxscan948_scan:
    nqp_rxmark rx947_bstack, rxscan948_loop, rx947_pos, 0
  rxscan948_done:
    nqp_rxmark rx947_bstack, rxcap949_fail, rx947_pos, 0
    add $I11, rx947_pos, 1
    gt $I11, rx947_eos, rx947_fail
    substr $S10, rx947_tgt, rx947_pos, 1
    ne $S10, ucs4:"/", rx947_fail
    add rx947_pos, 1
    nqp_rxpeek $I19, rx947_bstack, rxcap949_fail
    inc $I19
    set $I11, rx947_bstack[$I19]
    $P11 = rx947_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx947_pos)
    rx947_cstack = rx947_cur."!cursor_capture"($P11, "sym")
    goto rxcap949_done
  rxcap949_fail:
    goto rx947_fail
  rxcap949_done:
    repr_bind_attr_int rx947_cur, rx947_curclass, "$!pos", rx947_pos
    $P11 = rx947_cur."O"("%multiplicative, :pirop<div>")
    repr_get_attr_int $I11, $P11, rx947_curclass, "$!pos"
    lt $I11, 0, rx947_fail
    nqp_rxmark rx947_bstack, rxsubrule950_pass, -1, 0
  rxsubrule950_pass:
    rx947_cstack = rx947_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx947_pos, $P11, rx947_curclass, "$!pos"
    rx947_cur."!cursor_pass"(rx947_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx947_cur)
  rx947_restart:
    repr_get_attr_obj rx947_cstack, rx947_cur, rx947_curclass, "$!cstack"
  rx947_fail:
    unless rx947_bstack, rx947_done
    pop $I19, rx947_bstack
    if_null rx947_cstack, rx947_cstack_done
    unless rx947_cstack, rx947_cstack_done
    dec $I19
    set $P11, rx947_cstack[$I19]
  rx947_cstack_done:
    pop rx947_rep, rx947_bstack
    pop rx947_pos, rx947_bstack
    pop $I19, rx947_bstack
    lt rx947_pos, -1, rx947_done
    lt rx947_pos, 0, rx947_fail
    eq $I19, 0, rx947_fail
    if_null rx947_cstack, rx947_jump
    elements $I18, rx947_bstack
    le $I18, 0, rx947_cut
    dec $I18
    set $I18, rx947_bstack[$I18]
  rx947_cut:
    assign rx947_cstack, $I18
  rx947_jump:
    jump $I19
  rx947_done:
    rx947_cur."!cursor_fail"()
    .return (rx947_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "194_1338064451.944_caps"  :subid("678_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "194_1338064451.944_nfa"  :subid("679_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 47
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<%>"  :subid("195_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2414
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .lex "self", param_2414
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2415
    .lex "$/", $P2416
    .local string rx951_tgt
    .local int rx951_pos
    .local int rx951_off
    .local int rx951_eos
    .local int rx951_rep
    .local pmc rx951_cur
    .local pmc rx951_curclass
    .local pmc rx951_bstack
    .local pmc rx951_cstack
    (rx951_cur, rx951_tgt, rx951_pos, rx951_curclass, rx951_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx951_cur
    length rx951_eos, rx951_tgt
    eq $I19, 1, rx951_restart
    repr_get_attr_int $I11, self, rx951_curclass, "$!from"
    ne $I11, -1, rxscan952_done
    goto rxscan952_scan
  rxscan952_loop:
    inc rx951_pos
    gt rx951_pos, rx951_eos, rx951_fail
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!from", rx951_pos
  rxscan952_scan:
    nqp_rxmark rx951_bstack, rxscan952_loop, rx951_pos, 0
  rxscan952_done:
    nqp_rxmark rx951_bstack, rxcap953_fail, rx951_pos, 0
    add $I11, rx951_pos, 1
    gt $I11, rx951_eos, rx951_fail
    substr $S10, rx951_tgt, rx951_pos, 1
    ne $S10, ucs4:"%", rx951_fail
    add rx951_pos, 1
    nqp_rxpeek $I19, rx951_bstack, rxcap953_fail
    inc $I19
    set $I11, rx951_bstack[$I19]
    $P11 = rx951_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx951_pos)
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "sym")
    goto rxcap953_done
  rxcap953_fail:
    goto rx951_fail
  rxcap953_done:
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."O"("%multiplicative, :pirop<mod>")
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail
    nqp_rxmark rx951_bstack, rxsubrule954_pass, -1, 0
  rxsubrule954_pass:
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx951_pos, $P11, rx951_curclass, "$!pos"
    rx951_cur."!cursor_pass"(rx951_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx951_cur)
  rx951_restart:
    repr_get_attr_obj rx951_cstack, rx951_cur, rx951_curclass, "$!cstack"
  rx951_fail:
    unless rx951_bstack, rx951_done
    pop $I19, rx951_bstack
    if_null rx951_cstack, rx951_cstack_done
    unless rx951_cstack, rx951_cstack_done
    dec $I19
    set $P11, rx951_cstack[$I19]
  rx951_cstack_done:
    pop rx951_rep, rx951_bstack
    pop rx951_pos, rx951_bstack
    pop $I19, rx951_bstack
    lt rx951_pos, -1, rx951_done
    lt rx951_pos, 0, rx951_fail
    eq $I19, 0, rx951_fail
    if_null rx951_cstack, rx951_jump
    elements $I18, rx951_bstack
    le $I18, 0, rx951_cut
    dec $I18
    set $I18, rx951_bstack[$I18]
  rx951_cut:
    assign rx951_cstack, $I18
  rx951_jump:
    jump $I19
  rx951_done:
    rx951_cur."!cursor_fail"()
    .return (rx951_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "195_1338064451.944_caps"  :subid("680_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "195_1338064451.944_nfa"  :subid("681_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 37
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+&>"  :subid("196_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2420
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .lex "self", param_2420
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2421
    .lex "$/", $P2422
    .local string rx955_tgt
    .local int rx955_pos
    .local int rx955_off
    .local int rx955_eos
    .local int rx955_rep
    .local pmc rx955_cur
    .local pmc rx955_curclass
    .local pmc rx955_bstack
    .local pmc rx955_cstack
    (rx955_cur, rx955_tgt, rx955_pos, rx955_curclass, rx955_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx955_cur
    length rx955_eos, rx955_tgt
    eq $I19, 1, rx955_restart
    repr_get_attr_int $I11, self, rx955_curclass, "$!from"
    ne $I11, -1, rxscan956_done
    goto rxscan956_scan
  rxscan956_loop:
    inc rx955_pos
    gt rx955_pos, rx955_eos, rx955_fail
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!from", rx955_pos
  rxscan956_scan:
    nqp_rxmark rx955_bstack, rxscan956_loop, rx955_pos, 0
  rxscan956_done:
    nqp_rxmark rx955_bstack, rxcap957_fail, rx955_pos, 0
    add $I11, rx955_pos, 2
    gt $I11, rx955_eos, rx955_fail
    substr $S10, rx955_tgt, rx955_pos, 2
    ne $S10, ucs4:"+&", rx955_fail
    add rx955_pos, 2
    nqp_rxpeek $I19, rx955_bstack, rxcap957_fail
    inc $I19
    set $I11, rx955_bstack[$I19]
    $P11 = rx955_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx955_pos)
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "sym")
    goto rxcap957_done
  rxcap957_fail:
    goto rx955_fail
  rxcap957_done:
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."O"("%multiplicative, :pirop<band III>")
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail
    nqp_rxmark rx955_bstack, rxsubrule958_pass, -1, 0
  rxsubrule958_pass:
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx955_pos, $P11, rx955_curclass, "$!pos"
    rx955_cur."!cursor_pass"(rx955_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx955_cur)
  rx955_restart:
    repr_get_attr_obj rx955_cstack, rx955_cur, rx955_curclass, "$!cstack"
  rx955_fail:
    unless rx955_bstack, rx955_done
    pop $I19, rx955_bstack
    if_null rx955_cstack, rx955_cstack_done
    unless rx955_cstack, rx955_cstack_done
    dec $I19
    set $P11, rx955_cstack[$I19]
  rx955_cstack_done:
    pop rx955_rep, rx955_bstack
    pop rx955_pos, rx955_bstack
    pop $I19, rx955_bstack
    lt rx955_pos, -1, rx955_done
    lt rx955_pos, 0, rx955_fail
    eq $I19, 0, rx955_fail
    if_null rx955_cstack, rx955_jump
    elements $I18, rx955_bstack
    le $I18, 0, rx955_cut
    dec $I18
    set $I18, rx955_bstack[$I18]
  rx955_cut:
    assign rx955_cstack, $I18
  rx955_jump:
    jump $I19
  rx955_done:
    rx955_cur."!cursor_fail"()
    .return (rx955_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "196_1338064451.944_caps"  :subid("682_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "196_1338064451.944_nfa"  :subid("683_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 38
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+>"  :subid("197_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2426
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .lex "self", param_2426
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2427
    .lex "$/", $P2428
    .local string rx959_tgt
    .local int rx959_pos
    .local int rx959_off
    .local int rx959_eos
    .local int rx959_rep
    .local pmc rx959_cur
    .local pmc rx959_curclass
    .local pmc rx959_bstack
    .local pmc rx959_cstack
    (rx959_cur, rx959_tgt, rx959_pos, rx959_curclass, rx959_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx959_cur
    length rx959_eos, rx959_tgt
    eq $I19, 1, rx959_restart
    repr_get_attr_int $I11, self, rx959_curclass, "$!from"
    ne $I11, -1, rxscan960_done
    goto rxscan960_scan
  rxscan960_loop:
    inc rx959_pos
    gt rx959_pos, rx959_eos, rx959_fail
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!from", rx959_pos
  rxscan960_scan:
    nqp_rxmark rx959_bstack, rxscan960_loop, rx959_pos, 0
  rxscan960_done:
    nqp_rxmark rx959_bstack, rxcap961_fail, rx959_pos, 0
    add $I11, rx959_pos, 1
    gt $I11, rx959_eos, rx959_fail
    substr $S10, rx959_tgt, rx959_pos, 1
    ne $S10, ucs4:"+", rx959_fail
    add rx959_pos, 1
    nqp_rxpeek $I19, rx959_bstack, rxcap961_fail
    inc $I19
    set $I11, rx959_bstack[$I19]
    $P11 = rx959_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx959_pos)
    rx959_cstack = rx959_cur."!cursor_capture"($P11, "sym")
    goto rxcap961_done
  rxcap961_fail:
    goto rx959_fail
  rxcap961_done:
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."O"("%additive, :pirop<add>")
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail
    nqp_rxmark rx959_bstack, rxsubrule962_pass, -1, 0
  rxsubrule962_pass:
    rx959_cstack = rx959_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx959_pos, $P11, rx959_curclass, "$!pos"
    rx959_cur."!cursor_pass"(rx959_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx959_cur)
  rx959_restart:
    repr_get_attr_obj rx959_cstack, rx959_cur, rx959_curclass, "$!cstack"
  rx959_fail:
    unless rx959_bstack, rx959_done
    pop $I19, rx959_bstack
    if_null rx959_cstack, rx959_cstack_done
    unless rx959_cstack, rx959_cstack_done
    dec $I19
    set $P11, rx959_cstack[$I19]
  rx959_cstack_done:
    pop rx959_rep, rx959_bstack
    pop rx959_pos, rx959_bstack
    pop $I19, rx959_bstack
    lt rx959_pos, -1, rx959_done
    lt rx959_pos, 0, rx959_fail
    eq $I19, 0, rx959_fail
    if_null rx959_cstack, rx959_jump
    elements $I18, rx959_bstack
    le $I18, 0, rx959_cut
    dec $I18
    set $I18, rx959_bstack[$I18]
  rx959_cut:
    assign rx959_cstack, $I18
  rx959_jump:
    jump $I19
  rx959_done:
    rx959_cur."!cursor_fail"()
    .return (rx959_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "197_1338064451.944_caps"  :subid("684_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "197_1338064451.944_nfa"  :subid("685_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<->"  :subid("198_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2432
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .lex "self", param_2432
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2433
    .lex "$/", $P2434
    .local string rx963_tgt
    .local int rx963_pos
    .local int rx963_off
    .local int rx963_eos
    .local int rx963_rep
    .local pmc rx963_cur
    .local pmc rx963_curclass
    .local pmc rx963_bstack
    .local pmc rx963_cstack
    (rx963_cur, rx963_tgt, rx963_pos, rx963_curclass, rx963_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx963_cur
    length rx963_eos, rx963_tgt
    eq $I19, 1, rx963_restart
    repr_get_attr_int $I11, self, rx963_curclass, "$!from"
    ne $I11, -1, rxscan964_done
    goto rxscan964_scan
  rxscan964_loop:
    inc rx963_pos
    gt rx963_pos, rx963_eos, rx963_fail
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!from", rx963_pos
  rxscan964_scan:
    nqp_rxmark rx963_bstack, rxscan964_loop, rx963_pos, 0
  rxscan964_done:
    nqp_rxmark rx963_bstack, rxcap965_fail, rx963_pos, 0
    add $I11, rx963_pos, 1
    gt $I11, rx963_eos, rx963_fail
    substr $S10, rx963_tgt, rx963_pos, 1
    ne $S10, ucs4:"-", rx963_fail
    add rx963_pos, 1
    nqp_rxpeek $I19, rx963_bstack, rxcap965_fail
    inc $I19
    set $I11, rx963_bstack[$I19]
    $P11 = rx963_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx963_pos)
    rx963_cstack = rx963_cur."!cursor_capture"($P11, "sym")
    goto rxcap965_done
  rxcap965_fail:
    goto rx963_fail
  rxcap965_done:
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!pos", rx963_pos
    $P11 = rx963_cur."O"("%additive, :pirop<sub>")
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail
    nqp_rxmark rx963_bstack, rxsubrule966_pass, -1, 0
  rxsubrule966_pass:
    rx963_cstack = rx963_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx963_pos, $P11, rx963_curclass, "$!pos"
    rx963_cur."!cursor_pass"(rx963_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx963_cur)
  rx963_restart:
    repr_get_attr_obj rx963_cstack, rx963_cur, rx963_curclass, "$!cstack"
  rx963_fail:
    unless rx963_bstack, rx963_done
    pop $I19, rx963_bstack
    if_null rx963_cstack, rx963_cstack_done
    unless rx963_cstack, rx963_cstack_done
    dec $I19
    set $P11, rx963_cstack[$I19]
  rx963_cstack_done:
    pop rx963_rep, rx963_bstack
    pop rx963_pos, rx963_bstack
    pop $I19, rx963_bstack
    lt rx963_pos, -1, rx963_done
    lt rx963_pos, 0, rx963_fail
    eq $I19, 0, rx963_fail
    if_null rx963_cstack, rx963_jump
    elements $I18, rx963_bstack
    le $I18, 0, rx963_cut
    dec $I18
    set $I18, rx963_bstack[$I18]
  rx963_cut:
    assign rx963_cstack, $I18
  rx963_jump:
    jump $I19
  rx963_done:
    rx963_cur."!cursor_fail"()
    .return (rx963_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "198_1338064451.944_caps"  :subid("686_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "198_1338064451.944_nfa"  :subid("687_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+|>"  :subid("199_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2438
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .lex "self", param_2438
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2439
    .lex "$/", $P2440
    .local string rx967_tgt
    .local int rx967_pos
    .local int rx967_off
    .local int rx967_eos
    .local int rx967_rep
    .local pmc rx967_cur
    .local pmc rx967_curclass
    .local pmc rx967_bstack
    .local pmc rx967_cstack
    (rx967_cur, rx967_tgt, rx967_pos, rx967_curclass, rx967_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx967_cur
    length rx967_eos, rx967_tgt
    eq $I19, 1, rx967_restart
    repr_get_attr_int $I11, self, rx967_curclass, "$!from"
    ne $I11, -1, rxscan968_done
    goto rxscan968_scan
  rxscan968_loop:
    inc rx967_pos
    gt rx967_pos, rx967_eos, rx967_fail
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!from", rx967_pos
  rxscan968_scan:
    nqp_rxmark rx967_bstack, rxscan968_loop, rx967_pos, 0
  rxscan968_done:
    nqp_rxmark rx967_bstack, rxcap969_fail, rx967_pos, 0
    add $I11, rx967_pos, 2
    gt $I11, rx967_eos, rx967_fail
    substr $S10, rx967_tgt, rx967_pos, 2
    ne $S10, ucs4:"+|", rx967_fail
    add rx967_pos, 2
    nqp_rxpeek $I19, rx967_bstack, rxcap969_fail
    inc $I19
    set $I11, rx967_bstack[$I19]
    $P11 = rx967_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx967_pos)
    rx967_cstack = rx967_cur."!cursor_capture"($P11, "sym")
    goto rxcap969_done
  rxcap969_fail:
    goto rx967_fail
  rxcap969_done:
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!pos", rx967_pos
    $P11 = rx967_cur."O"("%additive, :pirop<bor III>")
    repr_get_attr_int $I11, $P11, rx967_curclass, "$!pos"
    lt $I11, 0, rx967_fail
    nqp_rxmark rx967_bstack, rxsubrule970_pass, -1, 0
  rxsubrule970_pass:
    rx967_cstack = rx967_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx967_pos, $P11, rx967_curclass, "$!pos"
    rx967_cur."!cursor_pass"(rx967_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx967_cur)
  rx967_restart:
    repr_get_attr_obj rx967_cstack, rx967_cur, rx967_curclass, "$!cstack"
  rx967_fail:
    unless rx967_bstack, rx967_done
    pop $I19, rx967_bstack
    if_null rx967_cstack, rx967_cstack_done
    unless rx967_cstack, rx967_cstack_done
    dec $I19
    set $P11, rx967_cstack[$I19]
  rx967_cstack_done:
    pop rx967_rep, rx967_bstack
    pop rx967_pos, rx967_bstack
    pop $I19, rx967_bstack
    lt rx967_pos, -1, rx967_done
    lt rx967_pos, 0, rx967_fail
    eq $I19, 0, rx967_fail
    if_null rx967_cstack, rx967_jump
    elements $I18, rx967_bstack
    le $I18, 0, rx967_cut
    dec $I18
    set $I18, rx967_bstack[$I18]
  rx967_cut:
    assign rx967_cstack, $I18
  rx967_jump:
    jump $I19
  rx967_done:
    rx967_cur."!cursor_fail"()
    .return (rx967_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "199_1338064451.944_caps"  :subid("688_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "199_1338064451.944_nfa"  :subid("689_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 124
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+^>"  :subid("200_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2444
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .lex "self", param_2444
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2445
    .lex "$/", $P2446
    .local string rx971_tgt
    .local int rx971_pos
    .local int rx971_off
    .local int rx971_eos
    .local int rx971_rep
    .local pmc rx971_cur
    .local pmc rx971_curclass
    .local pmc rx971_bstack
    .local pmc rx971_cstack
    (rx971_cur, rx971_tgt, rx971_pos, rx971_curclass, rx971_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx971_cur
    length rx971_eos, rx971_tgt
    eq $I19, 1, rx971_restart
    repr_get_attr_int $I11, self, rx971_curclass, "$!from"
    ne $I11, -1, rxscan972_done
    goto rxscan972_scan
  rxscan972_loop:
    inc rx971_pos
    gt rx971_pos, rx971_eos, rx971_fail
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!from", rx971_pos
  rxscan972_scan:
    nqp_rxmark rx971_bstack, rxscan972_loop, rx971_pos, 0
  rxscan972_done:
    nqp_rxmark rx971_bstack, rxcap973_fail, rx971_pos, 0
    add $I11, rx971_pos, 2
    gt $I11, rx971_eos, rx971_fail
    substr $S10, rx971_tgt, rx971_pos, 2
    ne $S10, ucs4:"+^", rx971_fail
    add rx971_pos, 2
    nqp_rxpeek $I19, rx971_bstack, rxcap973_fail
    inc $I19
    set $I11, rx971_bstack[$I19]
    $P11 = rx971_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx971_pos)
    rx971_cstack = rx971_cur."!cursor_capture"($P11, "sym")
    goto rxcap973_done
  rxcap973_fail:
    goto rx971_fail
  rxcap973_done:
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."O"("%additive, :pirop<bxor III>")
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail
    nqp_rxmark rx971_bstack, rxsubrule974_pass, -1, 0
  rxsubrule974_pass:
    rx971_cstack = rx971_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    rx971_cur."!cursor_pass"(rx971_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx971_cur)
  rx971_restart:
    repr_get_attr_obj rx971_cstack, rx971_cur, rx971_curclass, "$!cstack"
  rx971_fail:
    unless rx971_bstack, rx971_done
    pop $I19, rx971_bstack
    if_null rx971_cstack, rx971_cstack_done
    unless rx971_cstack, rx971_cstack_done
    dec $I19
    set $P11, rx971_cstack[$I19]
  rx971_cstack_done:
    pop rx971_rep, rx971_bstack
    pop rx971_pos, rx971_bstack
    pop $I19, rx971_bstack
    lt rx971_pos, -1, rx971_done
    lt rx971_pos, 0, rx971_fail
    eq $I19, 0, rx971_fail
    if_null rx971_cstack, rx971_jump
    elements $I18, rx971_bstack
    le $I18, 0, rx971_cut
    dec $I18
    set $I18, rx971_bstack[$I18]
  rx971_cut:
    assign rx971_cstack, $I18
  rx971_jump:
    jump $I19
  rx971_done:
    rx971_cur."!cursor_fail"()
    .return (rx971_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "200_1338064451.944_caps"  :subid("690_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "200_1338064451.944_nfa"  :subid("691_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 94
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~>"  :subid("201_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2450
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .lex "self", param_2450
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2451
    .lex "$/", $P2452
    .local string rx975_tgt
    .local int rx975_pos
    .local int rx975_off
    .local int rx975_eos
    .local int rx975_rep
    .local pmc rx975_cur
    .local pmc rx975_curclass
    .local pmc rx975_bstack
    .local pmc rx975_cstack
    (rx975_cur, rx975_tgt, rx975_pos, rx975_curclass, rx975_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx975_cur
    length rx975_eos, rx975_tgt
    eq $I19, 1, rx975_restart
    repr_get_attr_int $I11, self, rx975_curclass, "$!from"
    ne $I11, -1, rxscan976_done
    goto rxscan976_scan
  rxscan976_loop:
    inc rx975_pos
    gt rx975_pos, rx975_eos, rx975_fail
    repr_bind_attr_int rx975_cur, rx975_curclass, "$!from", rx975_pos
  rxscan976_scan:
    nqp_rxmark rx975_bstack, rxscan976_loop, rx975_pos, 0
  rxscan976_done:
    nqp_rxmark rx975_bstack, rxcap977_fail, rx975_pos, 0
    add $I11, rx975_pos, 1
    gt $I11, rx975_eos, rx975_fail
    substr $S10, rx975_tgt, rx975_pos, 1
    ne $S10, ucs4:"~", rx975_fail
    add rx975_pos, 1
    nqp_rxpeek $I19, rx975_bstack, rxcap977_fail
    inc $I19
    set $I11, rx975_bstack[$I19]
    $P11 = rx975_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx975_pos)
    rx975_cstack = rx975_cur."!cursor_capture"($P11, "sym")
    goto rxcap977_done
  rxcap977_fail:
    goto rx975_fail
  rxcap977_done:
    repr_bind_attr_int rx975_cur, rx975_curclass, "$!pos", rx975_pos
    $P11 = rx975_cur."O"("%concatenation , :pirop<concat>")
    repr_get_attr_int $I11, $P11, rx975_curclass, "$!pos"
    lt $I11, 0, rx975_fail
    nqp_rxmark rx975_bstack, rxsubrule978_pass, -1, 0
  rxsubrule978_pass:
    rx975_cstack = rx975_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx975_pos, $P11, rx975_curclass, "$!pos"
    rx975_cur."!cursor_pass"(rx975_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx975_cur)
  rx975_restart:
    repr_get_attr_obj rx975_cstack, rx975_cur, rx975_curclass, "$!cstack"
  rx975_fail:
    unless rx975_bstack, rx975_done
    pop $I19, rx975_bstack
    if_null rx975_cstack, rx975_cstack_done
    unless rx975_cstack, rx975_cstack_done
    dec $I19
    set $P11, rx975_cstack[$I19]
  rx975_cstack_done:
    pop rx975_rep, rx975_bstack
    pop rx975_pos, rx975_bstack
    pop $I19, rx975_bstack
    lt rx975_pos, -1, rx975_done
    lt rx975_pos, 0, rx975_fail
    eq $I19, 0, rx975_fail
    if_null rx975_cstack, rx975_jump
    elements $I18, rx975_bstack
    le $I18, 0, rx975_cut
    dec $I18
    set $I18, rx975_bstack[$I18]
  rx975_cut:
    assign rx975_cstack, $I18
  rx975_jump:
    jump $I19
  rx975_done:
    rx975_cur."!cursor_fail"()
    .return (rx975_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "201_1338064451.944_caps"  :subid("692_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "201_1338064451.944_nfa"  :subid("693_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 126
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<==>"  :subid("202_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2456
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .lex "self", param_2456
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2457
    .lex "$/", $P2458
    .local string rx979_tgt
    .local int rx979_pos
    .local int rx979_off
    .local int rx979_eos
    .local int rx979_rep
    .local pmc rx979_cur
    .local pmc rx979_curclass
    .local pmc rx979_bstack
    .local pmc rx979_cstack
    (rx979_cur, rx979_tgt, rx979_pos, rx979_curclass, rx979_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx979_cur
    length rx979_eos, rx979_tgt
    eq $I19, 1, rx979_restart
    repr_get_attr_int $I11, self, rx979_curclass, "$!from"
    ne $I11, -1, rxscan980_done
    goto rxscan980_scan
  rxscan980_loop:
    inc rx979_pos
    gt rx979_pos, rx979_eos, rx979_fail
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!from", rx979_pos
  rxscan980_scan:
    nqp_rxmark rx979_bstack, rxscan980_loop, rx979_pos, 0
  rxscan980_done:
    nqp_rxmark rx979_bstack, rxcap981_fail, rx979_pos, 0
    add $I11, rx979_pos, 2
    gt $I11, rx979_eos, rx979_fail
    substr $S10, rx979_tgt, rx979_pos, 2
    ne $S10, ucs4:"==", rx979_fail
    add rx979_pos, 2
    nqp_rxpeek $I19, rx979_bstack, rxcap981_fail
    inc $I19
    set $I11, rx979_bstack[$I19]
    $P11 = rx979_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx979_pos)
    rx979_cstack = rx979_cur."!cursor_capture"($P11, "sym")
    goto rxcap981_done
  rxcap981_fail:
    goto rx979_fail
  rxcap981_done:
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."O"("%relational, :pirop<iseq INn>")
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail
    nqp_rxmark rx979_bstack, rxsubrule982_pass, -1, 0
  rxsubrule982_pass:
    rx979_cstack = rx979_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx979_pos, $P11, rx979_curclass, "$!pos"
    rx979_cur."!cursor_pass"(rx979_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx979_cur)
  rx979_restart:
    repr_get_attr_obj rx979_cstack, rx979_cur, rx979_curclass, "$!cstack"
  rx979_fail:
    unless rx979_bstack, rx979_done
    pop $I19, rx979_bstack
    if_null rx979_cstack, rx979_cstack_done
    unless rx979_cstack, rx979_cstack_done
    dec $I19
    set $P11, rx979_cstack[$I19]
  rx979_cstack_done:
    pop rx979_rep, rx979_bstack
    pop rx979_pos, rx979_bstack
    pop $I19, rx979_bstack
    lt rx979_pos, -1, rx979_done
    lt rx979_pos, 0, rx979_fail
    eq $I19, 0, rx979_fail
    if_null rx979_cstack, rx979_jump
    elements $I18, rx979_bstack
    le $I18, 0, rx979_cut
    dec $I18
    set $I18, rx979_bstack[$I18]
  rx979_cut:
    assign rx979_cstack, $I18
  rx979_jump:
    jump $I19
  rx979_done:
    rx979_cur."!cursor_fail"()
    .return (rx979_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "202_1338064451.944_caps"  :subid("694_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "202_1338064451.944_nfa"  :subid("695_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 61
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<!=>"  :subid("203_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2462
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    .lex "self", param_2462
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2463
    .lex "$/", $P2464
    .local string rx983_tgt
    .local int rx983_pos
    .local int rx983_off
    .local int rx983_eos
    .local int rx983_rep
    .local pmc rx983_cur
    .local pmc rx983_curclass
    .local pmc rx983_bstack
    .local pmc rx983_cstack
    (rx983_cur, rx983_tgt, rx983_pos, rx983_curclass, rx983_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx983_cur
    length rx983_eos, rx983_tgt
    eq $I19, 1, rx983_restart
    repr_get_attr_int $I11, self, rx983_curclass, "$!from"
    ne $I11, -1, rxscan984_done
    goto rxscan984_scan
  rxscan984_loop:
    inc rx983_pos
    gt rx983_pos, rx983_eos, rx983_fail
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!from", rx983_pos
  rxscan984_scan:
    nqp_rxmark rx983_bstack, rxscan984_loop, rx983_pos, 0
  rxscan984_done:
    nqp_rxmark rx983_bstack, rxcap985_fail, rx983_pos, 0
    add $I11, rx983_pos, 2
    gt $I11, rx983_eos, rx983_fail
    substr $S10, rx983_tgt, rx983_pos, 2
    ne $S10, ucs4:"!=", rx983_fail
    add rx983_pos, 2
    nqp_rxpeek $I19, rx983_bstack, rxcap985_fail
    inc $I19
    set $I11, rx983_bstack[$I19]
    $P11 = rx983_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx983_pos)
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "sym")
    goto rxcap985_done
  rxcap985_fail:
    goto rx983_fail
  rxcap985_done:
    repr_bind_attr_int rx983_cur, rx983_curclass, "$!pos", rx983_pos
    $P11 = rx983_cur."O"("%relational, :pirop<isne INn>")
    repr_get_attr_int $I11, $P11, rx983_curclass, "$!pos"
    lt $I11, 0, rx983_fail
    nqp_rxmark rx983_bstack, rxsubrule986_pass, -1, 0
  rxsubrule986_pass:
    rx983_cstack = rx983_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx983_pos, $P11, rx983_curclass, "$!pos"
    rx983_cur."!cursor_pass"(rx983_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx983_cur)
  rx983_restart:
    repr_get_attr_obj rx983_cstack, rx983_cur, rx983_curclass, "$!cstack"
  rx983_fail:
    unless rx983_bstack, rx983_done
    pop $I19, rx983_bstack
    if_null rx983_cstack, rx983_cstack_done
    unless rx983_cstack, rx983_cstack_done
    dec $I19
    set $P11, rx983_cstack[$I19]
  rx983_cstack_done:
    pop rx983_rep, rx983_bstack
    pop rx983_pos, rx983_bstack
    pop $I19, rx983_bstack
    lt rx983_pos, -1, rx983_done
    lt rx983_pos, 0, rx983_fail
    eq $I19, 0, rx983_fail
    if_null rx983_cstack, rx983_jump
    elements $I18, rx983_bstack
    le $I18, 0, rx983_cut
    dec $I18
    set $I18, rx983_bstack[$I18]
  rx983_cut:
    assign rx983_cstack, $I18
  rx983_jump:
    jump $I19
  rx983_done:
    rx983_cur."!cursor_fail"()
    .return (rx983_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "203_1338064451.944_caps"  :subid("696_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "203_1338064451.944_nfa"  :subid("697_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 33
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<=>"  :subid("204_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2468
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    .lex "self", param_2468
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2469
    .lex "$/", $P2470
    .local string rx987_tgt
    .local int rx987_pos
    .local int rx987_off
    .local int rx987_eos
    .local int rx987_rep
    .local pmc rx987_cur
    .local pmc rx987_curclass
    .local pmc rx987_bstack
    .local pmc rx987_cstack
    (rx987_cur, rx987_tgt, rx987_pos, rx987_curclass, rx987_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx987_cur
    length rx987_eos, rx987_tgt
    eq $I19, 1, rx987_restart
    repr_get_attr_int $I11, self, rx987_curclass, "$!from"
    ne $I11, -1, rxscan988_done
    goto rxscan988_scan
  rxscan988_loop:
    inc rx987_pos
    gt rx987_pos, rx987_eos, rx987_fail
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!from", rx987_pos
  rxscan988_scan:
    nqp_rxmark rx987_bstack, rxscan988_loop, rx987_pos, 0
  rxscan988_done:
    nqp_rxmark rx987_bstack, rxcap989_fail, rx987_pos, 0
    add $I11, rx987_pos, 2
    gt $I11, rx987_eos, rx987_fail
    substr $S10, rx987_tgt, rx987_pos, 2
    ne $S10, ucs4:"<=", rx987_fail
    add rx987_pos, 2
    nqp_rxpeek $I19, rx987_bstack, rxcap989_fail
    inc $I19
    set $I11, rx987_bstack[$I19]
    $P11 = rx987_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx987_pos)
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "sym")
    goto rxcap989_done
  rxcap989_fail:
    goto rx987_fail
  rxcap989_done:
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."O"("%relational, :pirop<isle INn>")
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail
    nqp_rxmark rx987_bstack, rxsubrule990_pass, -1, 0
  rxsubrule990_pass:
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
    rx987_cur."!cursor_pass"(rx987_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx987_cur)
  rx987_restart:
    repr_get_attr_obj rx987_cstack, rx987_cur, rx987_curclass, "$!cstack"
  rx987_fail:
    unless rx987_bstack, rx987_done
    pop $I19, rx987_bstack
    if_null rx987_cstack, rx987_cstack_done
    unless rx987_cstack, rx987_cstack_done
    dec $I19
    set $P11, rx987_cstack[$I19]
  rx987_cstack_done:
    pop rx987_rep, rx987_bstack
    pop rx987_pos, rx987_bstack
    pop $I19, rx987_bstack
    lt rx987_pos, -1, rx987_done
    lt rx987_pos, 0, rx987_fail
    eq $I19, 0, rx987_fail
    if_null rx987_cstack, rx987_jump
    elements $I18, rx987_bstack
    le $I18, 0, rx987_cut
    dec $I18
    set $I18, rx987_bstack[$I18]
  rx987_cut:
    assign rx987_cstack, $I18
  rx987_jump:
    jump $I19
  rx987_done:
    rx987_cur."!cursor_fail"()
    .return (rx987_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "204_1338064451.944_caps"  :subid("698_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "204_1338064451.944_nfa"  :subid("699_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 60
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>=>"  :subid("205_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2474
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .lex "self", param_2474
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2475
    .lex "$/", $P2476
    .local string rx991_tgt
    .local int rx991_pos
    .local int rx991_off
    .local int rx991_eos
    .local int rx991_rep
    .local pmc rx991_cur
    .local pmc rx991_curclass
    .local pmc rx991_bstack
    .local pmc rx991_cstack
    (rx991_cur, rx991_tgt, rx991_pos, rx991_curclass, rx991_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx991_cur
    length rx991_eos, rx991_tgt
    eq $I19, 1, rx991_restart
    repr_get_attr_int $I11, self, rx991_curclass, "$!from"
    ne $I11, -1, rxscan992_done
    goto rxscan992_scan
  rxscan992_loop:
    inc rx991_pos
    gt rx991_pos, rx991_eos, rx991_fail
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!from", rx991_pos
  rxscan992_scan:
    nqp_rxmark rx991_bstack, rxscan992_loop, rx991_pos, 0
  rxscan992_done:
    nqp_rxmark rx991_bstack, rxcap993_fail, rx991_pos, 0
    add $I11, rx991_pos, 2
    gt $I11, rx991_eos, rx991_fail
    substr $S10, rx991_tgt, rx991_pos, 2
    ne $S10, ucs4:">=", rx991_fail
    add rx991_pos, 2
    nqp_rxpeek $I19, rx991_bstack, rxcap993_fail
    inc $I19
    set $I11, rx991_bstack[$I19]
    $P11 = rx991_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx991_pos)
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "sym")
    goto rxcap993_done
  rxcap993_fail:
    goto rx991_fail
  rxcap993_done:
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."O"("%relational, :pirop<isge INn>")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail
    nqp_rxmark rx991_bstack, rxsubrule994_pass, -1, 0
  rxsubrule994_pass:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    rx991_cur."!cursor_pass"(rx991_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx991_cur)
  rx991_restart:
    repr_get_attr_obj rx991_cstack, rx991_cur, rx991_curclass, "$!cstack"
  rx991_fail:
    unless rx991_bstack, rx991_done
    pop $I19, rx991_bstack
    if_null rx991_cstack, rx991_cstack_done
    unless rx991_cstack, rx991_cstack_done
    dec $I19
    set $P11, rx991_cstack[$I19]
  rx991_cstack_done:
    pop rx991_rep, rx991_bstack
    pop rx991_pos, rx991_bstack
    pop $I19, rx991_bstack
    lt rx991_pos, -1, rx991_done
    lt rx991_pos, 0, rx991_fail
    eq $I19, 0, rx991_fail
    if_null rx991_cstack, rx991_jump
    elements $I18, rx991_bstack
    le $I18, 0, rx991_cut
    dec $I18
    set $I18, rx991_bstack[$I18]
  rx991_cut:
    assign rx991_cstack, $I18
  rx991_jump:
    jump $I19
  rx991_done:
    rx991_cur."!cursor_fail"()
    .return (rx991_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "205_1338064451.944_caps"  :subid("700_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "205_1338064451.944_nfa"  :subid("701_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<>"  :subid("206_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2480
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .lex "self", param_2480
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2481
    .lex "$/", $P2482
    .local string rx995_tgt
    .local int rx995_pos
    .local int rx995_off
    .local int rx995_eos
    .local int rx995_rep
    .local pmc rx995_cur
    .local pmc rx995_curclass
    .local pmc rx995_bstack
    .local pmc rx995_cstack
    (rx995_cur, rx995_tgt, rx995_pos, rx995_curclass, rx995_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx995_cur
    length rx995_eos, rx995_tgt
    eq $I19, 1, rx995_restart
    repr_get_attr_int $I11, self, rx995_curclass, "$!from"
    ne $I11, -1, rxscan996_done
    goto rxscan996_scan
  rxscan996_loop:
    inc rx995_pos
    gt rx995_pos, rx995_eos, rx995_fail
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!from", rx995_pos
  rxscan996_scan:
    nqp_rxmark rx995_bstack, rxscan996_loop, rx995_pos, 0
  rxscan996_done:
    nqp_rxmark rx995_bstack, rxcap997_fail, rx995_pos, 0
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:"<", rx995_fail
    add rx995_pos, 1
    nqp_rxpeek $I19, rx995_bstack, rxcap997_fail
    inc $I19
    set $I11, rx995_bstack[$I19]
    $P11 = rx995_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx995_pos)
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "sym")
    goto rxcap997_done
  rxcap997_fail:
    goto rx995_fail
  rxcap997_done:
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."O"("%relational, :pirop<islt INn>")
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail
    nqp_rxmark rx995_bstack, rxsubrule998_pass, -1, 0
  rxsubrule998_pass:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    rx995_cur."!cursor_pass"(rx995_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx995_cur)
  rx995_restart:
    repr_get_attr_obj rx995_cstack, rx995_cur, rx995_curclass, "$!cstack"
  rx995_fail:
    unless rx995_bstack, rx995_done
    pop $I19, rx995_bstack
    if_null rx995_cstack, rx995_cstack_done
    unless rx995_cstack, rx995_cstack_done
    dec $I19
    set $P11, rx995_cstack[$I19]
  rx995_cstack_done:
    pop rx995_rep, rx995_bstack
    pop rx995_pos, rx995_bstack
    pop $I19, rx995_bstack
    lt rx995_pos, -1, rx995_done
    lt rx995_pos, 0, rx995_fail
    eq $I19, 0, rx995_fail
    if_null rx995_cstack, rx995_jump
    elements $I18, rx995_bstack
    le $I18, 0, rx995_cut
    dec $I18
    set $I18, rx995_bstack[$I18]
  rx995_cut:
    assign rx995_cstack, $I18
  rx995_jump:
    jump $I19
  rx995_done:
    rx995_cur."!cursor_fail"()
    .return (rx995_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "206_1338064451.944_caps"  :subid("702_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "206_1338064451.944_nfa"  :subid("703_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 60
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>>"  :subid("207_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2486
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .lex "self", param_2486
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2487
    .lex "$/", $P2488
    .local string rx999_tgt
    .local int rx999_pos
    .local int rx999_off
    .local int rx999_eos
    .local int rx999_rep
    .local pmc rx999_cur
    .local pmc rx999_curclass
    .local pmc rx999_bstack
    .local pmc rx999_cstack
    (rx999_cur, rx999_tgt, rx999_pos, rx999_curclass, rx999_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx999_cur
    length rx999_eos, rx999_tgt
    eq $I19, 1, rx999_restart
    repr_get_attr_int $I11, self, rx999_curclass, "$!from"
    ne $I11, -1, rxscan1000_done
    goto rxscan1000_scan
  rxscan1000_loop:
    inc rx999_pos
    gt rx999_pos, rx999_eos, rx999_fail
    repr_bind_attr_int rx999_cur, rx999_curclass, "$!from", rx999_pos
  rxscan1000_scan:
    nqp_rxmark rx999_bstack, rxscan1000_loop, rx999_pos, 0
  rxscan1000_done:
    nqp_rxmark rx999_bstack, rxcap1001_fail, rx999_pos, 0
    add $I11, rx999_pos, 1
    gt $I11, rx999_eos, rx999_fail
    substr $S10, rx999_tgt, rx999_pos, 1
    ne $S10, ucs4:">", rx999_fail
    add rx999_pos, 1
    nqp_rxpeek $I19, rx999_bstack, rxcap1001_fail
    inc $I19
    set $I11, rx999_bstack[$I19]
    $P11 = rx999_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx999_pos)
    rx999_cstack = rx999_cur."!cursor_capture"($P11, "sym")
    goto rxcap1001_done
  rxcap1001_fail:
    goto rx999_fail
  rxcap1001_done:
    repr_bind_attr_int rx999_cur, rx999_curclass, "$!pos", rx999_pos
    $P11 = rx999_cur."O"("%relational, :pirop<isgt INn>")
    repr_get_attr_int $I11, $P11, rx999_curclass, "$!pos"
    lt $I11, 0, rx999_fail
    nqp_rxmark rx999_bstack, rxsubrule1002_pass, -1, 0
  rxsubrule1002_pass:
    rx999_cstack = rx999_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx999_pos, $P11, rx999_curclass, "$!pos"
    rx999_cur."!cursor_pass"(rx999_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx999_cur)
  rx999_restart:
    repr_get_attr_obj rx999_cstack, rx999_cur, rx999_curclass, "$!cstack"
  rx999_fail:
    unless rx999_bstack, rx999_done
    pop $I19, rx999_bstack
    if_null rx999_cstack, rx999_cstack_done
    unless rx999_cstack, rx999_cstack_done
    dec $I19
    set $P11, rx999_cstack[$I19]
  rx999_cstack_done:
    pop rx999_rep, rx999_bstack
    pop rx999_pos, rx999_bstack
    pop $I19, rx999_bstack
    lt rx999_pos, -1, rx999_done
    lt rx999_pos, 0, rx999_fail
    eq $I19, 0, rx999_fail
    if_null rx999_cstack, rx999_jump
    elements $I18, rx999_bstack
    le $I18, 0, rx999_cut
    dec $I18
    set $I18, rx999_bstack[$I18]
  rx999_cut:
    assign rx999_cstack, $I18
  rx999_jump:
    jump $I19
  rx999_done:
    rx999_cur."!cursor_fail"()
    .return (rx999_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "207_1338064451.944_caps"  :subid("704_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "207_1338064451.944_nfa"  :subid("705_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<eq>"  :subid("208_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2492
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .lex "self", param_2492
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2493
    .lex "$/", $P2494
    .local string rx1003_tgt
    .local int rx1003_pos
    .local int rx1003_off
    .local int rx1003_eos
    .local int rx1003_rep
    .local pmc rx1003_cur
    .local pmc rx1003_curclass
    .local pmc rx1003_bstack
    .local pmc rx1003_cstack
    (rx1003_cur, rx1003_tgt, rx1003_pos, rx1003_curclass, rx1003_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1003_cur
    length rx1003_eos, rx1003_tgt
    eq $I19, 1, rx1003_restart
    repr_get_attr_int $I11, self, rx1003_curclass, "$!from"
    ne $I11, -1, rxscan1004_done
    goto rxscan1004_scan
  rxscan1004_loop:
    inc rx1003_pos
    gt rx1003_pos, rx1003_eos, rx1003_fail
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!from", rx1003_pos
  rxscan1004_scan:
    nqp_rxmark rx1003_bstack, rxscan1004_loop, rx1003_pos, 0
  rxscan1004_done:
    nqp_rxmark rx1003_bstack, rxcap1005_fail, rx1003_pos, 0
    add $I11, rx1003_pos, 2
    gt $I11, rx1003_eos, rx1003_fail
    substr $S10, rx1003_tgt, rx1003_pos, 2
    ne $S10, ucs4:"eq", rx1003_fail
    add rx1003_pos, 2
    nqp_rxpeek $I19, rx1003_bstack, rxcap1005_fail
    inc $I19
    set $I11, rx1003_bstack[$I19]
    $P11 = rx1003_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1003_pos)
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "sym")
    goto rxcap1005_done
  rxcap1005_fail:
    goto rx1003_fail
  rxcap1005_done:
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."O"("%relational, :pirop<iseq ISs>")
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail
    nqp_rxmark rx1003_bstack, rxsubrule1006_pass, -1, 0
  rxsubrule1006_pass:
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    rx1003_cur."!cursor_pass"(rx1003_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1003_cur)
  rx1003_restart:
    repr_get_attr_obj rx1003_cstack, rx1003_cur, rx1003_curclass, "$!cstack"
  rx1003_fail:
    unless rx1003_bstack, rx1003_done
    pop $I19, rx1003_bstack
    if_null rx1003_cstack, rx1003_cstack_done
    unless rx1003_cstack, rx1003_cstack_done
    dec $I19
    set $P11, rx1003_cstack[$I19]
  rx1003_cstack_done:
    pop rx1003_rep, rx1003_bstack
    pop rx1003_pos, rx1003_bstack
    pop $I19, rx1003_bstack
    lt rx1003_pos, -1, rx1003_done
    lt rx1003_pos, 0, rx1003_fail
    eq $I19, 0, rx1003_fail
    if_null rx1003_cstack, rx1003_jump
    elements $I18, rx1003_bstack
    le $I18, 0, rx1003_cut
    dec $I18
    set $I18, rx1003_bstack[$I18]
  rx1003_cut:
    assign rx1003_cstack, $I18
  rx1003_jump:
    jump $I19
  rx1003_done:
    rx1003_cur."!cursor_fail"()
    .return (rx1003_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "208_1338064451.944_caps"  :subid("706_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "208_1338064451.944_nfa"  :subid("707_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 101
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 113
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ne>"  :subid("209_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2498
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .lex "self", param_2498
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2499
    .lex "$/", $P2500
    .local string rx1007_tgt
    .local int rx1007_pos
    .local int rx1007_off
    .local int rx1007_eos
    .local int rx1007_rep
    .local pmc rx1007_cur
    .local pmc rx1007_curclass
    .local pmc rx1007_bstack
    .local pmc rx1007_cstack
    (rx1007_cur, rx1007_tgt, rx1007_pos, rx1007_curclass, rx1007_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1007_cur
    length rx1007_eos, rx1007_tgt
    eq $I19, 1, rx1007_restart
    repr_get_attr_int $I11, self, rx1007_curclass, "$!from"
    ne $I11, -1, rxscan1008_done
    goto rxscan1008_scan
  rxscan1008_loop:
    inc rx1007_pos
    gt rx1007_pos, rx1007_eos, rx1007_fail
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!from", rx1007_pos
  rxscan1008_scan:
    nqp_rxmark rx1007_bstack, rxscan1008_loop, rx1007_pos, 0
  rxscan1008_done:
    nqp_rxmark rx1007_bstack, rxcap1009_fail, rx1007_pos, 0
    add $I11, rx1007_pos, 2
    gt $I11, rx1007_eos, rx1007_fail
    substr $S10, rx1007_tgt, rx1007_pos, 2
    ne $S10, ucs4:"ne", rx1007_fail
    add rx1007_pos, 2
    nqp_rxpeek $I19, rx1007_bstack, rxcap1009_fail
    inc $I19
    set $I11, rx1007_bstack[$I19]
    $P11 = rx1007_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1007_pos)
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "sym")
    goto rxcap1009_done
  rxcap1009_fail:
    goto rx1007_fail
  rxcap1009_done:
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."O"("%relational, :pirop<isne ISs>")
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail
    nqp_rxmark rx1007_bstack, rxsubrule1010_pass, -1, 0
  rxsubrule1010_pass:
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    rx1007_cur."!cursor_pass"(rx1007_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1007_cur)
  rx1007_restart:
    repr_get_attr_obj rx1007_cstack, rx1007_cur, rx1007_curclass, "$!cstack"
  rx1007_fail:
    unless rx1007_bstack, rx1007_done
    pop $I19, rx1007_bstack
    if_null rx1007_cstack, rx1007_cstack_done
    unless rx1007_cstack, rx1007_cstack_done
    dec $I19
    set $P11, rx1007_cstack[$I19]
  rx1007_cstack_done:
    pop rx1007_rep, rx1007_bstack
    pop rx1007_pos, rx1007_bstack
    pop $I19, rx1007_bstack
    lt rx1007_pos, -1, rx1007_done
    lt rx1007_pos, 0, rx1007_fail
    eq $I19, 0, rx1007_fail
    if_null rx1007_cstack, rx1007_jump
    elements $I18, rx1007_bstack
    le $I18, 0, rx1007_cut
    dec $I18
    set $I18, rx1007_bstack[$I18]
  rx1007_cut:
    assign rx1007_cstack, $I18
  rx1007_jump:
    jump $I19
  rx1007_done:
    rx1007_cur."!cursor_fail"()
    .return (rx1007_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "209_1338064451.944_caps"  :subid("708_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "209_1338064451.944_nfa"  :subid("709_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 110
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<le>"  :subid("210_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2504
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    .lex "self", param_2504
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2505
    .lex "$/", $P2506
    .local string rx1011_tgt
    .local int rx1011_pos
    .local int rx1011_off
    .local int rx1011_eos
    .local int rx1011_rep
    .local pmc rx1011_cur
    .local pmc rx1011_curclass
    .local pmc rx1011_bstack
    .local pmc rx1011_cstack
    (rx1011_cur, rx1011_tgt, rx1011_pos, rx1011_curclass, rx1011_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1011_cur
    length rx1011_eos, rx1011_tgt
    eq $I19, 1, rx1011_restart
    repr_get_attr_int $I11, self, rx1011_curclass, "$!from"
    ne $I11, -1, rxscan1012_done
    goto rxscan1012_scan
  rxscan1012_loop:
    inc rx1011_pos
    gt rx1011_pos, rx1011_eos, rx1011_fail
    repr_bind_attr_int rx1011_cur, rx1011_curclass, "$!from", rx1011_pos
  rxscan1012_scan:
    nqp_rxmark rx1011_bstack, rxscan1012_loop, rx1011_pos, 0
  rxscan1012_done:
    nqp_rxmark rx1011_bstack, rxcap1013_fail, rx1011_pos, 0
    add $I11, rx1011_pos, 2
    gt $I11, rx1011_eos, rx1011_fail
    substr $S10, rx1011_tgt, rx1011_pos, 2
    ne $S10, ucs4:"le", rx1011_fail
    add rx1011_pos, 2
    nqp_rxpeek $I19, rx1011_bstack, rxcap1013_fail
    inc $I19
    set $I11, rx1011_bstack[$I19]
    $P11 = rx1011_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1011_pos)
    rx1011_cstack = rx1011_cur."!cursor_capture"($P11, "sym")
    goto rxcap1013_done
  rxcap1013_fail:
    goto rx1011_fail
  rxcap1013_done:
    repr_bind_attr_int rx1011_cur, rx1011_curclass, "$!pos", rx1011_pos
    $P11 = rx1011_cur."O"("%relational, :pirop<isle ISs>")
    repr_get_attr_int $I11, $P11, rx1011_curclass, "$!pos"
    lt $I11, 0, rx1011_fail
    nqp_rxmark rx1011_bstack, rxsubrule1014_pass, -1, 0
  rxsubrule1014_pass:
    rx1011_cstack = rx1011_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1011_pos, $P11, rx1011_curclass, "$!pos"
    rx1011_cur."!cursor_pass"(rx1011_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1011_cur)
  rx1011_restart:
    repr_get_attr_obj rx1011_cstack, rx1011_cur, rx1011_curclass, "$!cstack"
  rx1011_fail:
    unless rx1011_bstack, rx1011_done
    pop $I19, rx1011_bstack
    if_null rx1011_cstack, rx1011_cstack_done
    unless rx1011_cstack, rx1011_cstack_done
    dec $I19
    set $P11, rx1011_cstack[$I19]
  rx1011_cstack_done:
    pop rx1011_rep, rx1011_bstack
    pop rx1011_pos, rx1011_bstack
    pop $I19, rx1011_bstack
    lt rx1011_pos, -1, rx1011_done
    lt rx1011_pos, 0, rx1011_fail
    eq $I19, 0, rx1011_fail
    if_null rx1011_cstack, rx1011_jump
    elements $I18, rx1011_bstack
    le $I18, 0, rx1011_cut
    dec $I18
    set $I18, rx1011_bstack[$I18]
  rx1011_cut:
    assign rx1011_cstack, $I18
  rx1011_jump:
    jump $I19
  rx1011_done:
    rx1011_cur."!cursor_fail"()
    .return (rx1011_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "210_1338064451.944_caps"  :subid("710_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "210_1338064451.944_nfa"  :subid("711_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 108
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ge>"  :subid("211_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2510
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .lex "self", param_2510
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2511
    .lex "$/", $P2512
    .local string rx1015_tgt
    .local int rx1015_pos
    .local int rx1015_off
    .local int rx1015_eos
    .local int rx1015_rep
    .local pmc rx1015_cur
    .local pmc rx1015_curclass
    .local pmc rx1015_bstack
    .local pmc rx1015_cstack
    (rx1015_cur, rx1015_tgt, rx1015_pos, rx1015_curclass, rx1015_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1015_cur
    length rx1015_eos, rx1015_tgt
    eq $I19, 1, rx1015_restart
    repr_get_attr_int $I11, self, rx1015_curclass, "$!from"
    ne $I11, -1, rxscan1016_done
    goto rxscan1016_scan
  rxscan1016_loop:
    inc rx1015_pos
    gt rx1015_pos, rx1015_eos, rx1015_fail
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!from", rx1015_pos
  rxscan1016_scan:
    nqp_rxmark rx1015_bstack, rxscan1016_loop, rx1015_pos, 0
  rxscan1016_done:
    nqp_rxmark rx1015_bstack, rxcap1017_fail, rx1015_pos, 0
    add $I11, rx1015_pos, 2
    gt $I11, rx1015_eos, rx1015_fail
    substr $S10, rx1015_tgt, rx1015_pos, 2
    ne $S10, ucs4:"ge", rx1015_fail
    add rx1015_pos, 2
    nqp_rxpeek $I19, rx1015_bstack, rxcap1017_fail
    inc $I19
    set $I11, rx1015_bstack[$I19]
    $P11 = rx1015_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1015_pos)
    rx1015_cstack = rx1015_cur."!cursor_capture"($P11, "sym")
    goto rxcap1017_done
  rxcap1017_fail:
    goto rx1015_fail
  rxcap1017_done:
    repr_bind_attr_int rx1015_cur, rx1015_curclass, "$!pos", rx1015_pos
    $P11 = rx1015_cur."O"("%relational, :pirop<isge ISs>")
    repr_get_attr_int $I11, $P11, rx1015_curclass, "$!pos"
    lt $I11, 0, rx1015_fail
    nqp_rxmark rx1015_bstack, rxsubrule1018_pass, -1, 0
  rxsubrule1018_pass:
    rx1015_cstack = rx1015_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1015_pos, $P11, rx1015_curclass, "$!pos"
    rx1015_cur."!cursor_pass"(rx1015_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1015_cur)
  rx1015_restart:
    repr_get_attr_obj rx1015_cstack, rx1015_cur, rx1015_curclass, "$!cstack"
  rx1015_fail:
    unless rx1015_bstack, rx1015_done
    pop $I19, rx1015_bstack
    if_null rx1015_cstack, rx1015_cstack_done
    unless rx1015_cstack, rx1015_cstack_done
    dec $I19
    set $P11, rx1015_cstack[$I19]
  rx1015_cstack_done:
    pop rx1015_rep, rx1015_bstack
    pop rx1015_pos, rx1015_bstack
    pop $I19, rx1015_bstack
    lt rx1015_pos, -1, rx1015_done
    lt rx1015_pos, 0, rx1015_fail
    eq $I19, 0, rx1015_fail
    if_null rx1015_cstack, rx1015_jump
    elements $I18, rx1015_bstack
    le $I18, 0, rx1015_cut
    dec $I18
    set $I18, rx1015_bstack[$I18]
  rx1015_cut:
    assign rx1015_cstack, $I18
  rx1015_jump:
    jump $I19
  rx1015_done:
    rx1015_cur."!cursor_fail"()
    .return (rx1015_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "211_1338064451.944_caps"  :subid("712_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "211_1338064451.944_nfa"  :subid("713_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 103
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<lt>"  :subid("212_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2516
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .lex "self", param_2516
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2517
    .lex "$/", $P2518
    .local string rx1019_tgt
    .local int rx1019_pos
    .local int rx1019_off
    .local int rx1019_eos
    .local int rx1019_rep
    .local pmc rx1019_cur
    .local pmc rx1019_curclass
    .local pmc rx1019_bstack
    .local pmc rx1019_cstack
    (rx1019_cur, rx1019_tgt, rx1019_pos, rx1019_curclass, rx1019_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1019_cur
    length rx1019_eos, rx1019_tgt
    eq $I19, 1, rx1019_restart
    repr_get_attr_int $I11, self, rx1019_curclass, "$!from"
    ne $I11, -1, rxscan1020_done
    goto rxscan1020_scan
  rxscan1020_loop:
    inc rx1019_pos
    gt rx1019_pos, rx1019_eos, rx1019_fail
    repr_bind_attr_int rx1019_cur, rx1019_curclass, "$!from", rx1019_pos
  rxscan1020_scan:
    nqp_rxmark rx1019_bstack, rxscan1020_loop, rx1019_pos, 0
  rxscan1020_done:
    nqp_rxmark rx1019_bstack, rxcap1021_fail, rx1019_pos, 0
    add $I11, rx1019_pos, 2
    gt $I11, rx1019_eos, rx1019_fail
    substr $S10, rx1019_tgt, rx1019_pos, 2
    ne $S10, ucs4:"lt", rx1019_fail
    add rx1019_pos, 2
    nqp_rxpeek $I19, rx1019_bstack, rxcap1021_fail
    inc $I19
    set $I11, rx1019_bstack[$I19]
    $P11 = rx1019_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1019_pos)
    rx1019_cstack = rx1019_cur."!cursor_capture"($P11, "sym")
    goto rxcap1021_done
  rxcap1021_fail:
    goto rx1019_fail
  rxcap1021_done:
    repr_bind_attr_int rx1019_cur, rx1019_curclass, "$!pos", rx1019_pos
    $P11 = rx1019_cur."O"("%relational, :pirop<islt ISs>")
    repr_get_attr_int $I11, $P11, rx1019_curclass, "$!pos"
    lt $I11, 0, rx1019_fail
    nqp_rxmark rx1019_bstack, rxsubrule1022_pass, -1, 0
  rxsubrule1022_pass:
    rx1019_cstack = rx1019_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1019_pos, $P11, rx1019_curclass, "$!pos"
    rx1019_cur."!cursor_pass"(rx1019_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1019_cur)
  rx1019_restart:
    repr_get_attr_obj rx1019_cstack, rx1019_cur, rx1019_curclass, "$!cstack"
  rx1019_fail:
    unless rx1019_bstack, rx1019_done
    pop $I19, rx1019_bstack
    if_null rx1019_cstack, rx1019_cstack_done
    unless rx1019_cstack, rx1019_cstack_done
    dec $I19
    set $P11, rx1019_cstack[$I19]
  rx1019_cstack_done:
    pop rx1019_rep, rx1019_bstack
    pop rx1019_pos, rx1019_bstack
    pop $I19, rx1019_bstack
    lt rx1019_pos, -1, rx1019_done
    lt rx1019_pos, 0, rx1019_fail
    eq $I19, 0, rx1019_fail
    if_null rx1019_cstack, rx1019_jump
    elements $I18, rx1019_bstack
    le $I18, 0, rx1019_cut
    dec $I18
    set $I18, rx1019_bstack[$I18]
  rx1019_cut:
    assign rx1019_cstack, $I18
  rx1019_jump:
    jump $I19
  rx1019_done:
    rx1019_cur."!cursor_fail"()
    .return (rx1019_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "212_1338064451.944_caps"  :subid("714_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "212_1338064451.944_nfa"  :subid("715_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 108
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 116
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<gt>"  :subid("213_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2522
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .lex "self", param_2522
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2523
    .lex "$/", $P2524
    .local string rx1023_tgt
    .local int rx1023_pos
    .local int rx1023_off
    .local int rx1023_eos
    .local int rx1023_rep
    .local pmc rx1023_cur
    .local pmc rx1023_curclass
    .local pmc rx1023_bstack
    .local pmc rx1023_cstack
    (rx1023_cur, rx1023_tgt, rx1023_pos, rx1023_curclass, rx1023_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1023_cur
    length rx1023_eos, rx1023_tgt
    eq $I19, 1, rx1023_restart
    repr_get_attr_int $I11, self, rx1023_curclass, "$!from"
    ne $I11, -1, rxscan1024_done
    goto rxscan1024_scan
  rxscan1024_loop:
    inc rx1023_pos
    gt rx1023_pos, rx1023_eos, rx1023_fail
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!from", rx1023_pos
  rxscan1024_scan:
    nqp_rxmark rx1023_bstack, rxscan1024_loop, rx1023_pos, 0
  rxscan1024_done:
    nqp_rxmark rx1023_bstack, rxcap1025_fail, rx1023_pos, 0
    add $I11, rx1023_pos, 2
    gt $I11, rx1023_eos, rx1023_fail
    substr $S10, rx1023_tgt, rx1023_pos, 2
    ne $S10, ucs4:"gt", rx1023_fail
    add rx1023_pos, 2
    nqp_rxpeek $I19, rx1023_bstack, rxcap1025_fail
    inc $I19
    set $I11, rx1023_bstack[$I19]
    $P11 = rx1023_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1023_pos)
    rx1023_cstack = rx1023_cur."!cursor_capture"($P11, "sym")
    goto rxcap1025_done
  rxcap1025_fail:
    goto rx1023_fail
  rxcap1025_done:
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!pos", rx1023_pos
    $P11 = rx1023_cur."O"("%relational, :pirop<isgt ISs>")
    repr_get_attr_int $I11, $P11, rx1023_curclass, "$!pos"
    lt $I11, 0, rx1023_fail
    nqp_rxmark rx1023_bstack, rxsubrule1026_pass, -1, 0
  rxsubrule1026_pass:
    rx1023_cstack = rx1023_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1023_pos, $P11, rx1023_curclass, "$!pos"
    rx1023_cur."!cursor_pass"(rx1023_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1023_cur)
  rx1023_restart:
    repr_get_attr_obj rx1023_cstack, rx1023_cur, rx1023_curclass, "$!cstack"
  rx1023_fail:
    unless rx1023_bstack, rx1023_done
    pop $I19, rx1023_bstack
    if_null rx1023_cstack, rx1023_cstack_done
    unless rx1023_cstack, rx1023_cstack_done
    dec $I19
    set $P11, rx1023_cstack[$I19]
  rx1023_cstack_done:
    pop rx1023_rep, rx1023_bstack
    pop rx1023_pos, rx1023_bstack
    pop $I19, rx1023_bstack
    lt rx1023_pos, -1, rx1023_done
    lt rx1023_pos, 0, rx1023_fail
    eq $I19, 0, rx1023_fail
    if_null rx1023_cstack, rx1023_jump
    elements $I18, rx1023_bstack
    le $I18, 0, rx1023_cut
    dec $I18
    set $I18, rx1023_bstack[$I18]
  rx1023_cut:
    assign rx1023_cstack, $I18
  rx1023_jump:
    jump $I19
  rx1023_done:
    rx1023_cur."!cursor_fail"()
    .return (rx1023_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "213_1338064451.944_caps"  :subid("716_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "213_1338064451.944_nfa"  :subid("717_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 103
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 116
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=:=>"  :subid("214_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2528
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .lex "self", param_2528
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2529
    .lex "$/", $P2530
    .local string rx1027_tgt
    .local int rx1027_pos
    .local int rx1027_off
    .local int rx1027_eos
    .local int rx1027_rep
    .local pmc rx1027_cur
    .local pmc rx1027_curclass
    .local pmc rx1027_bstack
    .local pmc rx1027_cstack
    (rx1027_cur, rx1027_tgt, rx1027_pos, rx1027_curclass, rx1027_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1027_cur
    length rx1027_eos, rx1027_tgt
    eq $I19, 1, rx1027_restart
    repr_get_attr_int $I11, self, rx1027_curclass, "$!from"
    ne $I11, -1, rxscan1028_done
    goto rxscan1028_scan
  rxscan1028_loop:
    inc rx1027_pos
    gt rx1027_pos, rx1027_eos, rx1027_fail
    repr_bind_attr_int rx1027_cur, rx1027_curclass, "$!from", rx1027_pos
  rxscan1028_scan:
    nqp_rxmark rx1027_bstack, rxscan1028_loop, rx1027_pos, 0
  rxscan1028_done:
    nqp_rxmark rx1027_bstack, rxcap1029_fail, rx1027_pos, 0
    add $I11, rx1027_pos, 3
    gt $I11, rx1027_eos, rx1027_fail
    substr $S10, rx1027_tgt, rx1027_pos, 3
    ne $S10, ucs4:"=:=", rx1027_fail
    add rx1027_pos, 3
    nqp_rxpeek $I19, rx1027_bstack, rxcap1029_fail
    inc $I19
    set $I11, rx1027_bstack[$I19]
    $P11 = rx1027_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1027_pos)
    rx1027_cstack = rx1027_cur."!cursor_capture"($P11, "sym")
    goto rxcap1029_done
  rxcap1029_fail:
    goto rx1027_fail
  rxcap1029_done:
    repr_bind_attr_int rx1027_cur, rx1027_curclass, "$!pos", rx1027_pos
    $P11 = rx1027_cur."O"("%relational, :pirop<issame>")
    repr_get_attr_int $I11, $P11, rx1027_curclass, "$!pos"
    lt $I11, 0, rx1027_fail
    nqp_rxmark rx1027_bstack, rxsubrule1030_pass, -1, 0
  rxsubrule1030_pass:
    rx1027_cstack = rx1027_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1027_pos, $P11, rx1027_curclass, "$!pos"
    rx1027_cur."!cursor_pass"(rx1027_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1027_cur)
  rx1027_restart:
    repr_get_attr_obj rx1027_cstack, rx1027_cur, rx1027_curclass, "$!cstack"
  rx1027_fail:
    unless rx1027_bstack, rx1027_done
    pop $I19, rx1027_bstack
    if_null rx1027_cstack, rx1027_cstack_done
    unless rx1027_cstack, rx1027_cstack_done
    dec $I19
    set $P11, rx1027_cstack[$I19]
  rx1027_cstack_done:
    pop rx1027_rep, rx1027_bstack
    pop rx1027_pos, rx1027_bstack
    pop $I19, rx1027_bstack
    lt rx1027_pos, -1, rx1027_done
    lt rx1027_pos, 0, rx1027_fail
    eq $I19, 0, rx1027_fail
    if_null rx1027_cstack, rx1027_jump
    elements $I18, rx1027_bstack
    le $I18, 0, rx1027_cut
    dec $I18
    set $I18, rx1027_bstack[$I18]
  rx1027_cut:
    assign rx1027_cstack, $I18
  rx1027_jump:
    jump $I19
  rx1027_done:
    rx1027_cur."!cursor_fail"()
    .return (rx1027_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "214_1338064451.944_caps"  :subid("718_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "214_1338064451.944_nfa"  :subid("719_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 61
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "O"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~~>"  :subid("215_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2534
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    .lex "self", param_2534
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2535
    .lex "$/", $P2536
    .local string rx1031_tgt
    .local int rx1031_pos
    .local int rx1031_off
    .local int rx1031_eos
    .local int rx1031_rep
    .local pmc rx1031_cur
    .local pmc rx1031_curclass
    .local pmc rx1031_bstack
    .local pmc rx1031_cstack
    (rx1031_cur, rx1031_tgt, rx1031_pos, rx1031_curclass, rx1031_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1031_cur
    length rx1031_eos, rx1031_tgt
    eq $I19, 1, rx1031_restart
    repr_get_attr_int $I11, self, rx1031_curclass, "$!from"
    ne $I11, -1, rxscan1032_done
    goto rxscan1032_scan
  rxscan1032_loop:
    inc rx1031_pos
    gt rx1031_pos, rx1031_eos, rx1031_fail
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!from", rx1031_pos
  rxscan1032_scan:
    nqp_rxmark rx1031_bstack, rxscan1032_loop, rx1031_pos, 0
  rxscan1032_done:
    nqp_rxmark rx1031_bstack, rxcap1033_fail, rx1031_pos, 0
    add $I11, rx1031_pos, 2
    gt $I11, rx1031_eos, rx1031_fail
    substr $S10, rx1031_tgt, rx1031_pos, 2
    ne $S10, ucs4:"~~", rx1031_fail
    add rx1031_pos, 2
    nqp_rxpeek $I19, rx1031_bstack, rxcap1033_fail
    inc $I19
    set $I11, rx1031_bstack[$I19]
    $P11 = rx1031_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1031_pos)
    rx1031_cstack = rx1031_cur."!cursor_capture"($P11, "sym")
    goto rxcap1033_done
  rxcap1033_fail:
    goto rx1031_fail
  rxcap1033_done:
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail
    nqp_rxmark rx1031_bstack, rxsubrule1034_pass, -1, 0
  rxsubrule1034_pass:
    rx1031_cstack = rx1031_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1031_pos, $P11, rx1031_curclass, "$!pos"
    rx1031_cur."!cursor_pass"(rx1031_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1031_cur)
  rx1031_restart:
    repr_get_attr_obj rx1031_cstack, rx1031_cur, rx1031_curclass, "$!cstack"
  rx1031_fail:
    unless rx1031_bstack, rx1031_done
    pop $I19, rx1031_bstack
    if_null rx1031_cstack, rx1031_cstack_done
    unless rx1031_cstack, rx1031_cstack_done
    dec $I19
    set $P11, rx1031_cstack[$I19]
  rx1031_cstack_done:
    pop rx1031_rep, rx1031_bstack
    pop rx1031_pos, rx1031_bstack
    pop $I19, rx1031_bstack
    lt rx1031_pos, -1, rx1031_done
    lt rx1031_pos, 0, rx1031_fail
    eq $I19, 0, rx1031_fail
    if_null rx1031_cstack, rx1031_jump
    elements $I18, rx1031_bstack
    le $I18, 0, rx1031_cut
    dec $I18
    set $I18, rx1031_bstack[$I18]
  rx1031_cut:
    assign rx1031_cstack, $I18
  rx1031_jump:
    jump $I19
  rx1031_done:
    rx1031_cur."!cursor_fail"()
    .return (rx1031_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "215_1338064451.944_caps"  :subid("720_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "215_1338064451.944_nfa"  :subid("721_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 126
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 126
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<&&>"  :subid("216_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2540
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .lex "self", param_2540
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2541
    .lex "$/", $P2542
    .local string rx1035_tgt
    .local int rx1035_pos
    .local int rx1035_off
    .local int rx1035_eos
    .local int rx1035_rep
    .local pmc rx1035_cur
    .local pmc rx1035_curclass
    .local pmc rx1035_bstack
    .local pmc rx1035_cstack
    (rx1035_cur, rx1035_tgt, rx1035_pos, rx1035_curclass, rx1035_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1035_cur
    length rx1035_eos, rx1035_tgt
    eq $I19, 1, rx1035_restart
    repr_get_attr_int $I11, self, rx1035_curclass, "$!from"
    ne $I11, -1, rxscan1036_done
    goto rxscan1036_scan
  rxscan1036_loop:
    inc rx1035_pos
    gt rx1035_pos, rx1035_eos, rx1035_fail
    repr_bind_attr_int rx1035_cur, rx1035_curclass, "$!from", rx1035_pos
  rxscan1036_scan:
    nqp_rxmark rx1035_bstack, rxscan1036_loop, rx1035_pos, 0
  rxscan1036_done:
    nqp_rxmark rx1035_bstack, rxcap1037_fail, rx1035_pos, 0
    add $I11, rx1035_pos, 2
    gt $I11, rx1035_eos, rx1035_fail
    substr $S10, rx1035_tgt, rx1035_pos, 2
    ne $S10, ucs4:"&&", rx1035_fail
    add rx1035_pos, 2
    nqp_rxpeek $I19, rx1035_bstack, rxcap1037_fail
    inc $I19
    set $I11, rx1035_bstack[$I19]
    $P11 = rx1035_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1035_pos)
    rx1035_cstack = rx1035_cur."!cursor_capture"($P11, "sym")
    goto rxcap1037_done
  rxcap1037_fail:
    goto rx1035_fail
  rxcap1037_done:
    repr_bind_attr_int rx1035_cur, rx1035_curclass, "$!pos", rx1035_pos
    $P11 = rx1035_cur."O"("%tight_and, :pasttype<if>")
    repr_get_attr_int $I11, $P11, rx1035_curclass, "$!pos"
    lt $I11, 0, rx1035_fail
    nqp_rxmark rx1035_bstack, rxsubrule1038_pass, -1, 0
  rxsubrule1038_pass:
    rx1035_cstack = rx1035_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1035_pos, $P11, rx1035_curclass, "$!pos"
    rx1035_cur."!cursor_pass"(rx1035_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1035_cur)
  rx1035_restart:
    repr_get_attr_obj rx1035_cstack, rx1035_cur, rx1035_curclass, "$!cstack"
  rx1035_fail:
    unless rx1035_bstack, rx1035_done
    pop $I19, rx1035_bstack
    if_null rx1035_cstack, rx1035_cstack_done
    unless rx1035_cstack, rx1035_cstack_done
    dec $I19
    set $P11, rx1035_cstack[$I19]
  rx1035_cstack_done:
    pop rx1035_rep, rx1035_bstack
    pop rx1035_pos, rx1035_bstack
    pop $I19, rx1035_bstack
    lt rx1035_pos, -1, rx1035_done
    lt rx1035_pos, 0, rx1035_fail
    eq $I19, 0, rx1035_fail
    if_null rx1035_cstack, rx1035_jump
    elements $I18, rx1035_bstack
    le $I18, 0, rx1035_cut
    dec $I18
    set $I18, rx1035_bstack[$I18]
  rx1035_cut:
    assign rx1035_cstack, $I18
  rx1035_jump:
    jump $I19
  rx1035_done:
    rx1035_cur."!cursor_fail"()
    .return (rx1035_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "216_1338064451.944_caps"  :subid("722_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "216_1338064451.944_nfa"  :subid("723_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 38
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 38
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<||>"  :subid("217_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2546
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .lex "self", param_2546
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2547
    .lex "$/", $P2548
    .local string rx1039_tgt
    .local int rx1039_pos
    .local int rx1039_off
    .local int rx1039_eos
    .local int rx1039_rep
    .local pmc rx1039_cur
    .local pmc rx1039_curclass
    .local pmc rx1039_bstack
    .local pmc rx1039_cstack
    (rx1039_cur, rx1039_tgt, rx1039_pos, rx1039_curclass, rx1039_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1039_cur
    length rx1039_eos, rx1039_tgt
    eq $I19, 1, rx1039_restart
    repr_get_attr_int $I11, self, rx1039_curclass, "$!from"
    ne $I11, -1, rxscan1040_done
    goto rxscan1040_scan
  rxscan1040_loop:
    inc rx1039_pos
    gt rx1039_pos, rx1039_eos, rx1039_fail
    repr_bind_attr_int rx1039_cur, rx1039_curclass, "$!from", rx1039_pos
  rxscan1040_scan:
    nqp_rxmark rx1039_bstack, rxscan1040_loop, rx1039_pos, 0
  rxscan1040_done:
    nqp_rxmark rx1039_bstack, rxcap1041_fail, rx1039_pos, 0
    add $I11, rx1039_pos, 2
    gt $I11, rx1039_eos, rx1039_fail
    substr $S10, rx1039_tgt, rx1039_pos, 2
    ne $S10, ucs4:"||", rx1039_fail
    add rx1039_pos, 2
    nqp_rxpeek $I19, rx1039_bstack, rxcap1041_fail
    inc $I19
    set $I11, rx1039_bstack[$I19]
    $P11 = rx1039_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1039_pos)
    rx1039_cstack = rx1039_cur."!cursor_capture"($P11, "sym")
    goto rxcap1041_done
  rxcap1041_fail:
    goto rx1039_fail
  rxcap1041_done:
    repr_bind_attr_int rx1039_cur, rx1039_curclass, "$!pos", rx1039_pos
    $P11 = rx1039_cur."O"("%tight_or, :pasttype<unless>")
    repr_get_attr_int $I11, $P11, rx1039_curclass, "$!pos"
    lt $I11, 0, rx1039_fail
    nqp_rxmark rx1039_bstack, rxsubrule1042_pass, -1, 0
  rxsubrule1042_pass:
    rx1039_cstack = rx1039_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1039_pos, $P11, rx1039_curclass, "$!pos"
    rx1039_cur."!cursor_pass"(rx1039_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1039_cur)
  rx1039_restart:
    repr_get_attr_obj rx1039_cstack, rx1039_cur, rx1039_curclass, "$!cstack"
  rx1039_fail:
    unless rx1039_bstack, rx1039_done
    pop $I19, rx1039_bstack
    if_null rx1039_cstack, rx1039_cstack_done
    unless rx1039_cstack, rx1039_cstack_done
    dec $I19
    set $P11, rx1039_cstack[$I19]
  rx1039_cstack_done:
    pop rx1039_rep, rx1039_bstack
    pop rx1039_pos, rx1039_bstack
    pop $I19, rx1039_bstack
    lt rx1039_pos, -1, rx1039_done
    lt rx1039_pos, 0, rx1039_fail
    eq $I19, 0, rx1039_fail
    if_null rx1039_cstack, rx1039_jump
    elements $I18, rx1039_bstack
    le $I18, 0, rx1039_cut
    dec $I18
    set $I18, rx1039_bstack[$I18]
  rx1039_cut:
    assign rx1039_cstack, $I18
  rx1039_jump:
    jump $I19
  rx1039_done:
    rx1039_cur."!cursor_fail"()
    .return (rx1039_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "217_1338064451.944_caps"  :subid("724_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "217_1338064451.944_nfa"  :subid("725_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 124
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 124
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<//>"  :subid("218_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2552
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .lex "self", param_2552
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2553
    .lex "$/", $P2554
    .local string rx1043_tgt
    .local int rx1043_pos
    .local int rx1043_off
    .local int rx1043_eos
    .local int rx1043_rep
    .local pmc rx1043_cur
    .local pmc rx1043_curclass
    .local pmc rx1043_bstack
    .local pmc rx1043_cstack
    (rx1043_cur, rx1043_tgt, rx1043_pos, rx1043_curclass, rx1043_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1043_cur
    length rx1043_eos, rx1043_tgt
    eq $I19, 1, rx1043_restart
    repr_get_attr_int $I11, self, rx1043_curclass, "$!from"
    ne $I11, -1, rxscan1044_done
    goto rxscan1044_scan
  rxscan1044_loop:
    inc rx1043_pos
    gt rx1043_pos, rx1043_eos, rx1043_fail
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!from", rx1043_pos
  rxscan1044_scan:
    nqp_rxmark rx1043_bstack, rxscan1044_loop, rx1043_pos, 0
  rxscan1044_done:
    nqp_rxmark rx1043_bstack, rxcap1045_fail, rx1043_pos, 0
    add $I11, rx1043_pos, 2
    gt $I11, rx1043_eos, rx1043_fail
    substr $S10, rx1043_tgt, rx1043_pos, 2
    ne $S10, ucs4:"//", rx1043_fail
    add rx1043_pos, 2
    nqp_rxpeek $I19, rx1043_bstack, rxcap1045_fail
    inc $I19
    set $I11, rx1043_bstack[$I19]
    $P11 = rx1043_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1043_pos)
    rx1043_cstack = rx1043_cur."!cursor_capture"($P11, "sym")
    goto rxcap1045_done
  rxcap1045_fail:
    goto rx1043_fail
  rxcap1045_done:
    repr_bind_attr_int rx1043_cur, rx1043_curclass, "$!pos", rx1043_pos
    $P11 = rx1043_cur."O"("%tight_or, :pasttype<def_or>")
    repr_get_attr_int $I11, $P11, rx1043_curclass, "$!pos"
    lt $I11, 0, rx1043_fail
    nqp_rxmark rx1043_bstack, rxsubrule1046_pass, -1, 0
  rxsubrule1046_pass:
    rx1043_cstack = rx1043_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1043_pos, $P11, rx1043_curclass, "$!pos"
    rx1043_cur."!cursor_pass"(rx1043_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1043_cur)
  rx1043_restart:
    repr_get_attr_obj rx1043_cstack, rx1043_cur, rx1043_curclass, "$!cstack"
  rx1043_fail:
    unless rx1043_bstack, rx1043_done
    pop $I19, rx1043_bstack
    if_null rx1043_cstack, rx1043_cstack_done
    unless rx1043_cstack, rx1043_cstack_done
    dec $I19
    set $P11, rx1043_cstack[$I19]
  rx1043_cstack_done:
    pop rx1043_rep, rx1043_bstack
    pop rx1043_pos, rx1043_bstack
    pop $I19, rx1043_bstack
    lt rx1043_pos, -1, rx1043_done
    lt rx1043_pos, 0, rx1043_fail
    eq $I19, 0, rx1043_fail
    if_null rx1043_cstack, rx1043_jump
    elements $I18, rx1043_bstack
    le $I18, 0, rx1043_cut
    dec $I18
    set $I18, rx1043_bstack[$I18]
  rx1043_cut:
    assign rx1043_cstack, $I18
  rx1043_jump:
    jump $I19
  rx1043_done:
    rx1043_cur."!cursor_fail"()
    .return (rx1043_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "218_1338064451.944_caps"  :subid("726_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "218_1338064451.944_nfa"  :subid("727_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 47
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 47
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<?? !!>"  :subid("219_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2558
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .lex "self", param_2558
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2559
    .lex "$/", $P2560
    .local string rx1047_tgt
    .local int rx1047_pos
    .local int rx1047_off
    .local int rx1047_eos
    .local int rx1047_rep
    .local pmc rx1047_cur
    .local pmc rx1047_curclass
    .local pmc rx1047_bstack
    .local pmc rx1047_cstack
    (rx1047_cur, rx1047_tgt, rx1047_pos, rx1047_curclass, rx1047_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1047_cur
    length rx1047_eos, rx1047_tgt
    eq $I19, 1, rx1047_restart
    repr_get_attr_int $I11, self, rx1047_curclass, "$!from"
    ne $I11, -1, rxscan1048_done
    goto rxscan1048_scan
  rxscan1048_loop:
    inc rx1047_pos
    gt rx1047_pos, rx1047_eos, rx1047_fail
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!from", rx1047_pos
  rxscan1048_scan:
    nqp_rxmark rx1047_bstack, rxscan1048_loop, rx1047_pos, 0
  rxscan1048_done:
    add $I11, rx1047_pos, 2
    gt $I11, rx1047_eos, rx1047_fail
    substr $S10, rx1047_tgt, rx1047_pos, 2
    ne $S10, ucs4:"??", rx1047_fail
    add rx1047_pos, 2
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!pos", rx1047_pos
    $P11 = rx1047_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1047_curclass, "$!pos"
    lt $I11, 0, rx1047_fail
    repr_get_attr_int rx1047_pos, $P11, rx1047_curclass, "$!pos"
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!pos", rx1047_pos
    $P11 = rx1047_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1047_curclass, "$!pos"
    lt $I11, 0, rx1047_fail
    nqp_rxmark rx1047_bstack, rxsubrule1050_pass, -1, 0
  rxsubrule1050_pass:
    rx1047_cstack = rx1047_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1047_pos, $P11, rx1047_curclass, "$!pos"
    add $I11, rx1047_pos, 2
    gt $I11, rx1047_eos, rx1047_fail
    substr $S10, rx1047_tgt, rx1047_pos, 2
    ne $S10, ucs4:"!!", rx1047_fail
    add rx1047_pos, 2
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!pos", rx1047_pos
    $P11 = rx1047_cur."O"("%conditional, :reducecheck<ternary>, :pasttype<if>")
    repr_get_attr_int $I11, $P11, rx1047_curclass, "$!pos"
    lt $I11, 0, rx1047_fail
    nqp_rxmark rx1047_bstack, rxsubrule1051_pass, -1, 0
  rxsubrule1051_pass:
    rx1047_cstack = rx1047_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1047_pos, $P11, rx1047_curclass, "$!pos"
    rx1047_cur."!cursor_pass"(rx1047_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1047_cur)
  rx1047_restart:
    repr_get_attr_obj rx1047_cstack, rx1047_cur, rx1047_curclass, "$!cstack"
  rx1047_fail:
    unless rx1047_bstack, rx1047_done
    pop $I19, rx1047_bstack
    if_null rx1047_cstack, rx1047_cstack_done
    unless rx1047_cstack, rx1047_cstack_done
    dec $I19
    set $P11, rx1047_cstack[$I19]
  rx1047_cstack_done:
    pop rx1047_rep, rx1047_bstack
    pop rx1047_pos, rx1047_bstack
    pop $I19, rx1047_bstack
    lt rx1047_pos, -1, rx1047_done
    lt rx1047_pos, 0, rx1047_fail
    eq $I19, 0, rx1047_fail
    if_null rx1047_cstack, rx1047_jump
    elements $I18, rx1047_bstack
    le $I18, 0, rx1047_cut
    dec $I18
    set $I18, rx1047_bstack[$I18]
  rx1047_cut:
    assign rx1047_cstack, $I18
  rx1047_jump:
    jump $I19
  rx1047_done:
    rx1047_cur."!cursor_fail"()
    .return (rx1047_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "219_1338064451.944_caps"  :subid("728_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    new $P104, "Hash"
    set $P104["EXPR"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "219_1338064451.944_nfa"  :subid("729_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 63
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 63
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ws"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "EXPR"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 33
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 33
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "O"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=>"  :subid("220_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2564
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .lex "self", param_2564
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2565
    .lex "$/", $P2566
    .local string rx1052_tgt
    .local int rx1052_pos
    .local int rx1052_off
    .local int rx1052_eos
    .local int rx1052_rep
    .local pmc rx1052_cur
    .local pmc rx1052_curclass
    .local pmc rx1052_bstack
    .local pmc rx1052_cstack
    (rx1052_cur, rx1052_tgt, rx1052_pos, rx1052_curclass, rx1052_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1052_cur
    length rx1052_eos, rx1052_tgt
    eq $I19, 1, rx1052_restart
    repr_get_attr_int $I11, self, rx1052_curclass, "$!from"
    ne $I11, -1, rxscan1053_done
    goto rxscan1053_scan
  rxscan1053_loop:
    inc rx1052_pos
    gt rx1052_pos, rx1052_eos, rx1052_fail
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!from", rx1052_pos
  rxscan1053_scan:
    nqp_rxmark rx1052_bstack, rxscan1053_loop, rx1052_pos, 0
  rxscan1053_done:
    nqp_rxmark rx1052_bstack, rxcap1054_fail, rx1052_pos, 0
    add $I11, rx1052_pos, 1
    gt $I11, rx1052_eos, rx1052_fail
    substr $S10, rx1052_tgt, rx1052_pos, 1
    ne $S10, ucs4:"=", rx1052_fail
    add rx1052_pos, 1
    nqp_rxpeek $I19, rx1052_bstack, rxcap1054_fail
    inc $I19
    set $I11, rx1052_bstack[$I19]
    $P11 = rx1052_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1052_pos)
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "sym")
    goto rxcap1054_done
  rxcap1054_fail:
    goto rx1052_fail
  rxcap1054_done:
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
    rx1052_cur."!cursor_pass"(rx1052_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1052_cur)
  rx1052_restart:
    repr_get_attr_obj rx1052_cstack, rx1052_cur, rx1052_curclass, "$!cstack"
  rx1052_fail:
    unless rx1052_bstack, rx1052_done
    pop $I19, rx1052_bstack
    if_null rx1052_cstack, rx1052_cstack_done
    unless rx1052_cstack, rx1052_cstack_done
    dec $I19
    set $P11, rx1052_cstack[$I19]
  rx1052_cstack_done:
    pop rx1052_rep, rx1052_bstack
    pop rx1052_pos, rx1052_bstack
    pop $I19, rx1052_bstack
    lt rx1052_pos, -1, rx1052_done
    lt rx1052_pos, 0, rx1052_fail
    eq $I19, 0, rx1052_fail
    if_null rx1052_cstack, rx1052_jump
    elements $I18, rx1052_bstack
    le $I18, 0, rx1052_cut
    dec $I18
    set $I18, rx1052_bstack[$I18]
  rx1052_cut:
    assign rx1052_cstack, $I18
  rx1052_jump:
    jump $I19
  rx1052_done:
    rx1052_cur."!cursor_fail"()
    .return (rx1052_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "220_1338064451.944_caps"  :subid("730_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "220_1338064451.944_nfa"  :subid("731_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 61
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "panic"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<:=>"  :subid("221_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2570
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    .lex "self", param_2570
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2571
    .lex "$/", $P2572
    .local string rx1056_tgt
    .local int rx1056_pos
    .local int rx1056_off
    .local int rx1056_eos
    .local int rx1056_rep
    .local pmc rx1056_cur
    .local pmc rx1056_curclass
    .local pmc rx1056_bstack
    .local pmc rx1056_cstack
    (rx1056_cur, rx1056_tgt, rx1056_pos, rx1056_curclass, rx1056_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1056_cur
    length rx1056_eos, rx1056_tgt
    eq $I19, 1, rx1056_restart
    repr_get_attr_int $I11, self, rx1056_curclass, "$!from"
    ne $I11, -1, rxscan1057_done
    goto rxscan1057_scan
  rxscan1057_loop:
    inc rx1056_pos
    gt rx1056_pos, rx1056_eos, rx1056_fail
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!from", rx1056_pos
  rxscan1057_scan:
    nqp_rxmark rx1056_bstack, rxscan1057_loop, rx1056_pos, 0
  rxscan1057_done:
    nqp_rxmark rx1056_bstack, rxcap1058_fail, rx1056_pos, 0
    add $I11, rx1056_pos, 2
    gt $I11, rx1056_eos, rx1056_fail
    substr $S10, rx1056_tgt, rx1056_pos, 2
    ne $S10, ucs4:":=", rx1056_fail
    add rx1056_pos, 2
    nqp_rxpeek $I19, rx1056_bstack, rxcap1058_fail
    inc $I19
    set $I11, rx1056_bstack[$I19]
    $P11 = rx1056_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1056_pos)
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "sym")
    goto rxcap1058_done
  rxcap1058_fail:
    goto rx1056_fail
  rxcap1058_done:
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."O"("%assignment, :pasttype<bind_6model>")
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail
    nqp_rxmark rx1056_bstack, rxsubrule1059_pass, -1, 0
  rxsubrule1059_pass:
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    rx1056_cur."!cursor_pass"(rx1056_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1056_cur)
  rx1056_restart:
    repr_get_attr_obj rx1056_cstack, rx1056_cur, rx1056_curclass, "$!cstack"
  rx1056_fail:
    unless rx1056_bstack, rx1056_done
    pop $I19, rx1056_bstack
    if_null rx1056_cstack, rx1056_cstack_done
    unless rx1056_cstack, rx1056_cstack_done
    dec $I19
    set $P11, rx1056_cstack[$I19]
  rx1056_cstack_done:
    pop rx1056_rep, rx1056_bstack
    pop rx1056_pos, rx1056_bstack
    pop $I19, rx1056_bstack
    lt rx1056_pos, -1, rx1056_done
    lt rx1056_pos, 0, rx1056_fail
    eq $I19, 0, rx1056_fail
    if_null rx1056_cstack, rx1056_jump
    elements $I18, rx1056_bstack
    le $I18, 0, rx1056_cut
    dec $I18
    set $I18, rx1056_bstack[$I18]
  rx1056_cut:
    assign rx1056_cstack, $I18
  rx1056_jump:
    jump $I19
  rx1056_done:
    rx1056_cur."!cursor_fail"()
    .return (rx1056_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "221_1338064451.944_caps"  :subid("732_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "221_1338064451.944_nfa"  :subid("733_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<::=>"  :subid("222_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2576
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .lex "self", param_2576
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2577
    .lex "$/", $P2578
    .local string rx1060_tgt
    .local int rx1060_pos
    .local int rx1060_off
    .local int rx1060_eos
    .local int rx1060_rep
    .local pmc rx1060_cur
    .local pmc rx1060_curclass
    .local pmc rx1060_bstack
    .local pmc rx1060_cstack
    (rx1060_cur, rx1060_tgt, rx1060_pos, rx1060_curclass, rx1060_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1060_cur
    length rx1060_eos, rx1060_tgt
    eq $I19, 1, rx1060_restart
    repr_get_attr_int $I11, self, rx1060_curclass, "$!from"
    ne $I11, -1, rxscan1061_done
    goto rxscan1061_scan
  rxscan1061_loop:
    inc rx1060_pos
    gt rx1060_pos, rx1060_eos, rx1060_fail
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!from", rx1060_pos
  rxscan1061_scan:
    nqp_rxmark rx1060_bstack, rxscan1061_loop, rx1060_pos, 0
  rxscan1061_done:
    nqp_rxmark rx1060_bstack, rxcap1062_fail, rx1060_pos, 0
    add $I11, rx1060_pos, 3
    gt $I11, rx1060_eos, rx1060_fail
    substr $S10, rx1060_tgt, rx1060_pos, 3
    ne $S10, ucs4:"::=", rx1060_fail
    add rx1060_pos, 3
    nqp_rxpeek $I19, rx1060_bstack, rxcap1062_fail
    inc $I19
    set $I11, rx1060_bstack[$I19]
    $P11 = rx1060_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1060_pos)
    rx1060_cstack = rx1060_cur."!cursor_capture"($P11, "sym")
    goto rxcap1062_done
  rxcap1062_fail:
    goto rx1060_fail
  rxcap1062_done:
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!pos", rx1060_pos
    $P11 = rx1060_cur."O"("%assignment, :pasttype<bind_6model>")
    repr_get_attr_int $I11, $P11, rx1060_curclass, "$!pos"
    lt $I11, 0, rx1060_fail
    nqp_rxmark rx1060_bstack, rxsubrule1063_pass, -1, 0
  rxsubrule1063_pass:
    rx1060_cstack = rx1060_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1060_pos, $P11, rx1060_curclass, "$!pos"
    rx1060_cur."!cursor_pass"(rx1060_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1060_cur)
  rx1060_restart:
    repr_get_attr_obj rx1060_cstack, rx1060_cur, rx1060_curclass, "$!cstack"
  rx1060_fail:
    unless rx1060_bstack, rx1060_done
    pop $I19, rx1060_bstack
    if_null rx1060_cstack, rx1060_cstack_done
    unless rx1060_cstack, rx1060_cstack_done
    dec $I19
    set $P11, rx1060_cstack[$I19]
  rx1060_cstack_done:
    pop rx1060_rep, rx1060_bstack
    pop rx1060_pos, rx1060_bstack
    pop $I19, rx1060_bstack
    lt rx1060_pos, -1, rx1060_done
    lt rx1060_pos, 0, rx1060_fail
    eq $I19, 0, rx1060_fail
    if_null rx1060_cstack, rx1060_jump
    elements $I18, rx1060_bstack
    le $I18, 0, rx1060_cut
    dec $I18
    set $I18, rx1060_bstack[$I18]
  rx1060_cut:
    assign rx1060_cstack, $I18
  rx1060_jump:
    jump $I19
  rx1060_done:
    rx1060_cur."!cursor_fail"()
    .return (rx1060_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "222_1338064451.944_caps"  :subid("734_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "222_1338064451.944_nfa"  :subid("735_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "O"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<,>"  :subid("223_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2582
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    .lex "self", param_2582
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2583
    .lex "$/", $P2584
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done
    goto rxscan1065_scan
  rxscan1065_loop:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan:
    nqp_rxmark rx1064_bstack, rxscan1065_loop, rx1064_pos, 0
  rxscan1065_done:
    nqp_rxmark rx1064_bstack, rxcap1066_fail, rx1064_pos, 0
    add $I11, rx1064_pos, 1
    gt $I11, rx1064_eos, rx1064_fail
    substr $S10, rx1064_tgt, rx1064_pos, 1
    ne $S10, ucs4:",", rx1064_fail
    add rx1064_pos, 1
    nqp_rxpeek $I19, rx1064_bstack, rxcap1066_fail
    inc $I19
    set $I11, rx1064_bstack[$I19]
    $P11 = rx1064_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1064_pos)
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "sym")
    goto rxcap1066_done
  rxcap1066_fail:
    goto rx1064_fail
  rxcap1066_done:
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."O"("%comma, :pasttype<list>")
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail
    nqp_rxmark rx1064_bstack, rxsubrule1067_pass, -1, 0
  rxsubrule1067_pass:
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1064_pos, $P11, rx1064_curclass, "$!pos"
    rx1064_cur."!cursor_pass"(rx1064_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail:
    unless rx1064_bstack, rx1064_done
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done
    unless rx1064_cstack, rx1064_cstack_done
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done
    lt rx1064_pos, 0, rx1064_fail
    eq $I19, 0, rx1064_fail
    if_null rx1064_cstack, rx1064_jump
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut:
    assign rx1064_cstack, $I18
  rx1064_jump:
    jump $I19
  rx1064_done:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "223_1338064451.944_caps"  :subid("736_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "223_1338064451.944_nfa"  :subid("737_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 44
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<return>"  :subid("224_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2588
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    .const 'Sub' $P2594 = "740_1338064451.944" 
    capture_lex $P2594
    .lex "self", param_2588
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2589
    .lex "$/", $P2590
    .local string rx1068_tgt
    .local int rx1068_pos
    .local int rx1068_off
    .local int rx1068_eos
    .local int rx1068_rep
    .local pmc rx1068_cur
    .local pmc rx1068_curclass
    .local pmc rx1068_bstack
    .local pmc rx1068_cstack
    (rx1068_cur, rx1068_tgt, rx1068_pos, rx1068_curclass, rx1068_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1068_cur
    length rx1068_eos, rx1068_tgt
    eq $I19, 1, rx1068_restart
    repr_get_attr_int $I11, self, rx1068_curclass, "$!from"
    ne $I11, -1, rxscan1069_done
    goto rxscan1069_scan
  rxscan1069_loop:
    inc rx1068_pos
    gt rx1068_pos, rx1068_eos, rx1068_fail
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!from", rx1068_pos
  rxscan1069_scan:
    nqp_rxmark rx1068_bstack, rxscan1069_loop, rx1068_pos, 0
  rxscan1069_done:
    nqp_rxmark rx1068_bstack, rxcap1070_fail, rx1068_pos, 0
    add $I11, rx1068_pos, 6
    gt $I11, rx1068_eos, rx1068_fail
    substr $S10, rx1068_tgt, rx1068_pos, 6
    ne $S10, ucs4:"return", rx1068_fail
    add rx1068_pos, 6
    nqp_rxpeek $I19, rx1068_bstack, rxcap1070_fail
    inc $I19
    set $I11, rx1068_bstack[$I19]
    $P11 = rx1068_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1068_pos)
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "sym")
    goto rxcap1070_done
  rxcap1070_fail:
    goto rx1068_fail
  rxcap1070_done:
    ge rx1068_pos, rx1068_eos, rx1068_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx1068_tgt, rx1068_pos
    unless $I11, rx1068_fail
    add rx1068_pos, 1
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!pos", rx1068_pos
    $P11 = rx1068_cur."O"("%list_prefix, :pasttype<return>")
    repr_get_attr_int $I11, $P11, rx1068_curclass, "$!pos"
    lt $I11, 0, rx1068_fail
    nqp_rxmark rx1068_bstack, rxsubrule1071_pass, -1, 0
  rxsubrule1071_pass:
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1068_pos, $P11, rx1068_curclass, "$!pos"
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!pos", rx1068_pos
    store_lex unicode:"$\x{a2}", rx1068_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
    .const 'Sub' $P2594 = "740_1338064451.944" 
    capture_lex $P2594
    $P107 = $P2594()
    rx1068_cur."!cursor_pass"(rx1068_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1068_cur)
  rx1068_restart:
    repr_get_attr_obj rx1068_cstack, rx1068_cur, rx1068_curclass, "$!cstack"
  rx1068_fail:
    unless rx1068_bstack, rx1068_done
    pop $I19, rx1068_bstack
    if_null rx1068_cstack, rx1068_cstack_done
    unless rx1068_cstack, rx1068_cstack_done
    dec $I19
    set $P11, rx1068_cstack[$I19]
  rx1068_cstack_done:
    pop rx1068_rep, rx1068_bstack
    pop rx1068_pos, rx1068_bstack
    pop $I19, rx1068_bstack
    lt rx1068_pos, -1, rx1068_done
    lt rx1068_pos, 0, rx1068_fail
    eq $I19, 0, rx1068_fail
    if_null rx1068_cstack, rx1068_jump
    elements $I18, rx1068_bstack
    le $I18, 0, rx1068_cut
    dec $I18
    set $I18, rx1068_bstack[$I18]
  rx1068_cut:
    assign rx1068_cstack, $I18
  rx1068_jump:
    jump $I19
  rx1068_done:
    rx1068_cur."!cursor_fail"()
    .return (rx1068_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "224_1338064451.944_caps"  :subid("738_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "224_1338064451.944_nfa"  :subid("739_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 114
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 116
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 117
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 114
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 110
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 32
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "O"
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2593"  :anon :subid("740_1338064451.944") :outer("224_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    new $P106, "Float"
    assign $P106, 1
    store_dynamic_lex "$*RETURN_USED", $P106
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<make>"  :subid("225_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2596
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1363
    .lex "self", param_2596
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2597
    .lex "$/", $P2598
    .local string rx1072_tgt
    .local int rx1072_pos
    .local int rx1072_off
    .local int rx1072_eos
    .local int rx1072_rep
    .local pmc rx1072_cur
    .local pmc rx1072_curclass
    .local pmc rx1072_bstack
    .local pmc rx1072_cstack
    (rx1072_cur, rx1072_tgt, rx1072_pos, rx1072_curclass, rx1072_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1072_cur
    length rx1072_eos, rx1072_tgt
    eq $I19, 1, rx1072_restart
    repr_get_attr_int $I11, self, rx1072_curclass, "$!from"
    ne $I11, -1, rxscan1073_done
    goto rxscan1073_scan
  rxscan1073_loop:
    inc rx1072_pos
    gt rx1072_pos, rx1072_eos, rx1072_fail
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!from", rx1072_pos
  rxscan1073_scan:
    nqp_rxmark rx1072_bstack, rxscan1073_loop, rx1072_pos, 0
  rxscan1073_done:
    nqp_rxmark rx1072_bstack, rxcap1074_fail, rx1072_pos, 0
    add $I11, rx1072_pos, 4
    gt $I11, rx1072_eos, rx1072_fail
    substr $S10, rx1072_tgt, rx1072_pos, 4
    ne $S10, ucs4:"make", rx1072_fail
    add rx1072_pos, 4
    nqp_rxpeek $I19, rx1072_bstack, rxcap1074_fail
    inc $I19
    set $I11, rx1072_bstack[$I19]
    $P11 = rx1072_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1072_pos)
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "sym")
    goto rxcap1074_done
  rxcap1074_fail:
    goto rx1072_fail
  rxcap1074_done:
    ge rx1072_pos, rx1072_eos, rx1072_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx1072_tgt, rx1072_pos
    unless $I11, rx1072_fail
    add rx1072_pos, 1
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail
    nqp_rxmark rx1072_bstack, rxsubrule1075_pass, -1, 0
  rxsubrule1075_pass:
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    rx1072_cur."!cursor_pass"(rx1072_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1072_cur)
  rx1072_restart:
    repr_get_attr_obj rx1072_cstack, rx1072_cur, rx1072_curclass, "$!cstack"
  rx1072_fail:
    unless rx1072_bstack, rx1072_done
    pop $I19, rx1072_bstack
    if_null rx1072_cstack, rx1072_cstack_done
    unless rx1072_cstack, rx1072_cstack_done
    dec $I19
    set $P11, rx1072_cstack[$I19]
  rx1072_cstack_done:
    pop rx1072_rep, rx1072_bstack
    pop rx1072_pos, rx1072_bstack
    pop $I19, rx1072_bstack
    lt rx1072_pos, -1, rx1072_done
    lt rx1072_pos, 0, rx1072_fail
    eq $I19, 0, rx1072_fail
    if_null rx1072_cstack, rx1072_jump
    elements $I18, rx1072_bstack
    le $I18, 0, rx1072_cut
    dec $I18
    set $I18, rx1072_bstack[$I18]
  rx1072_cut:
    assign rx1072_cstack, $I18
  rx1072_jump:
    jump $I19
  rx1072_done:
    rx1072_cur."!cursor_fail"()
    .return (rx1072_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "225_1338064451.944_caps"  :subid("741_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1363
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "225_1338064451.944_nfa"  :subid("742_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1363
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 97
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 107
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 4
    push $P109, 32
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "O"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<last>"  :subid("226_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2602
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    .lex "self", param_2602
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2603
    .lex "$/", $P2604
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done
    goto rxscan1077_scan
  rxscan1077_loop:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan:
    nqp_rxmark rx1076_bstack, rxscan1077_loop, rx1076_pos, 0
  rxscan1077_done:
    nqp_rxmark rx1076_bstack, rxcap1078_fail, rx1076_pos, 0
    add $I11, rx1076_pos, 4
    gt $I11, rx1076_eos, rx1076_fail
    substr $S10, rx1076_tgt, rx1076_pos, 4
    ne $S10, ucs4:"last", rx1076_fail
    add rx1076_pos, 4
    nqp_rxpeek $I19, rx1076_bstack, rxcap1078_fail
    inc $I19
    set $I11, rx1076_bstack[$I19]
    $P11 = rx1076_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1076_pos)
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "sym")
    goto rxcap1078_done
  rxcap1078_fail:
    goto rx1076_fail
  rxcap1078_done:
    rx1076_cur."!cursor_pass"(rx1076_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail:
    unless rx1076_bstack, rx1076_done
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done
    unless rx1076_cstack, rx1076_cstack_done
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done
    lt rx1076_pos, 0, rx1076_fail
    eq $I19, 0, rx1076_fail
    if_null rx1076_cstack, rx1076_jump
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut:
    assign rx1076_cstack, $I18
  rx1076_jump:
    jump $I19
  rx1076_done:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "226_1338064451.944_caps"  :subid("743_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "226_1338064451.944_nfa"  :subid("744_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 108
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 97
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 115
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<next>"  :subid("227_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2608
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    .lex "self", param_2608
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2609
    .lex "$/", $P2610
    .local string rx1079_tgt
    .local int rx1079_pos
    .local int rx1079_off
    .local int rx1079_eos
    .local int rx1079_rep
    .local pmc rx1079_cur
    .local pmc rx1079_curclass
    .local pmc rx1079_bstack
    .local pmc rx1079_cstack
    (rx1079_cur, rx1079_tgt, rx1079_pos, rx1079_curclass, rx1079_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1079_cur
    length rx1079_eos, rx1079_tgt
    eq $I19, 1, rx1079_restart
    repr_get_attr_int $I11, self, rx1079_curclass, "$!from"
    ne $I11, -1, rxscan1080_done
    goto rxscan1080_scan
  rxscan1080_loop:
    inc rx1079_pos
    gt rx1079_pos, rx1079_eos, rx1079_fail
    repr_bind_attr_int rx1079_cur, rx1079_curclass, "$!from", rx1079_pos
  rxscan1080_scan:
    nqp_rxmark rx1079_bstack, rxscan1080_loop, rx1079_pos, 0
  rxscan1080_done:
    nqp_rxmark rx1079_bstack, rxcap1081_fail, rx1079_pos, 0
    add $I11, rx1079_pos, 4
    gt $I11, rx1079_eos, rx1079_fail
    substr $S10, rx1079_tgt, rx1079_pos, 4
    ne $S10, ucs4:"next", rx1079_fail
    add rx1079_pos, 4
    nqp_rxpeek $I19, rx1079_bstack, rxcap1081_fail
    inc $I19
    set $I11, rx1079_bstack[$I19]
    $P11 = rx1079_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1079_pos)
    rx1079_cstack = rx1079_cur."!cursor_capture"($P11, "sym")
    goto rxcap1081_done
  rxcap1081_fail:
    goto rx1079_fail
  rxcap1081_done:
    rx1079_cur."!cursor_pass"(rx1079_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1079_cur)
  rx1079_restart:
    repr_get_attr_obj rx1079_cstack, rx1079_cur, rx1079_curclass, "$!cstack"
  rx1079_fail:
    unless rx1079_bstack, rx1079_done
    pop $I19, rx1079_bstack
    if_null rx1079_cstack, rx1079_cstack_done
    unless rx1079_cstack, rx1079_cstack_done
    dec $I19
    set $P11, rx1079_cstack[$I19]
  rx1079_cstack_done:
    pop rx1079_rep, rx1079_bstack
    pop rx1079_pos, rx1079_bstack
    pop $I19, rx1079_bstack
    lt rx1079_pos, -1, rx1079_done
    lt rx1079_pos, 0, rx1079_fail
    eq $I19, 0, rx1079_fail
    if_null rx1079_cstack, rx1079_jump
    elements $I18, rx1079_bstack
    le $I18, 0, rx1079_cut
    dec $I18
    set $I18, rx1079_bstack[$I18]
  rx1079_cut:
    assign rx1079_cstack, $I18
  rx1079_jump:
    jump $I19
  rx1079_done:
    rx1079_cur."!cursor_fail"()
    .return (rx1079_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "227_1338064451.944_caps"  :subid("745_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "227_1338064451.944_nfa"  :subid("746_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 110
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 120
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<redo>"  :subid("228_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2614
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    .lex "self", param_2614
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2615
    .lex "$/", $P2616
    .local string rx1082_tgt
    .local int rx1082_pos
    .local int rx1082_off
    .local int rx1082_eos
    .local int rx1082_rep
    .local pmc rx1082_cur
    .local pmc rx1082_curclass
    .local pmc rx1082_bstack
    .local pmc rx1082_cstack
    (rx1082_cur, rx1082_tgt, rx1082_pos, rx1082_curclass, rx1082_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1082_cur
    length rx1082_eos, rx1082_tgt
    eq $I19, 1, rx1082_restart
    repr_get_attr_int $I11, self, rx1082_curclass, "$!from"
    ne $I11, -1, rxscan1083_done
    goto rxscan1083_scan
  rxscan1083_loop:
    inc rx1082_pos
    gt rx1082_pos, rx1082_eos, rx1082_fail
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!from", rx1082_pos
  rxscan1083_scan:
    nqp_rxmark rx1082_bstack, rxscan1083_loop, rx1082_pos, 0
  rxscan1083_done:
    nqp_rxmark rx1082_bstack, rxcap1084_fail, rx1082_pos, 0
    add $I11, rx1082_pos, 4
    gt $I11, rx1082_eos, rx1082_fail
    substr $S10, rx1082_tgt, rx1082_pos, 4
    ne $S10, ucs4:"redo", rx1082_fail
    add rx1082_pos, 4
    nqp_rxpeek $I19, rx1082_bstack, rxcap1084_fail
    inc $I19
    set $I11, rx1082_bstack[$I19]
    $P11 = rx1082_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1082_pos)
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "sym")
    goto rxcap1084_done
  rxcap1084_fail:
    goto rx1082_fail
  rxcap1084_done:
    rx1082_cur."!cursor_pass"(rx1082_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1082_cur)
  rx1082_restart:
    repr_get_attr_obj rx1082_cstack, rx1082_cur, rx1082_curclass, "$!cstack"
  rx1082_fail:
    unless rx1082_bstack, rx1082_done
    pop $I19, rx1082_bstack
    if_null rx1082_cstack, rx1082_cstack_done
    unless rx1082_cstack, rx1082_cstack_done
    dec $I19
    set $P11, rx1082_cstack[$I19]
  rx1082_cstack_done:
    pop rx1082_rep, rx1082_bstack
    pop rx1082_pos, rx1082_bstack
    pop $I19, rx1082_bstack
    lt rx1082_pos, -1, rx1082_done
    lt rx1082_pos, 0, rx1082_fail
    eq $I19, 0, rx1082_fail
    if_null rx1082_cstack, rx1082_jump
    elements $I18, rx1082_bstack
    le $I18, 0, rx1082_cut
    dec $I18
    set $I18, rx1082_bstack[$I18]
  rx1082_cut:
    assign rx1082_cstack, $I18
  rx1082_jump:
    jump $I19
  rx1082_done:
    rx1082_cur."!cursor_fail"()
    .return (rx1082_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "228_1338064451.944_caps"  :subid("747_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "228_1338064451.944_nfa"  :subid("748_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 114
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 100
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 111
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "smartmatch" :anon :subid("229_1338064451.944") :outer("398_1338064451.944")
    .param pmc param_2620
    .param pmc param_2621
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1368
    .lex "self", param_2620
    .lex "$/", param_2621
.annotate 'line', 1370
    new $P103, "Undef"
    set $P2622, $P103
    .lex "$t", $P2622
    set $P2623, param_2621
    unless_null $P2623, vivify_1374
    $P2623 = root_new ['parrot';'ResizablePMCArray']
  vivify_1374:
    set $P104, $P2623[0]
    unless_null $P104, vivify_1375
    new $P104, "Undef"
  vivify_1375:
    set $P2622, $P104
    set $P2624, param_2621
    unless_null $P2624, vivify_1376
    $P2624 = root_new ['parrot';'ResizablePMCArray']
  vivify_1376:
    set $P104, $P2624[1]
    unless_null $P104, vivify_1377
    new $P104, "Undef"
  vivify_1377:
    set $P2625, param_2621
    unless_null $P2625, vivify_1378
    $P2625 = root_new ['parrot';'ResizablePMCArray']
    set param_2621, $P2625
  vivify_1378:
    set $P2625[0], $P104
    set $P104, $P2622
    unless_null $P104, vivify_1379
    new $P104, "Undef"
  vivify_1379:
    set $P2626, param_2621
    unless_null $P2626, vivify_1380
    $P2626 = root_new ['parrot';'ResizablePMCArray']
    set param_2621, $P2626
  vivify_1380:
    set $P2626[1], $P104
.annotate 'line', 1368
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2628"  :subid("749_1338064451.944") :outer("368_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .const 'Sub' $P2726 = "247_1338064451.944" 
    capture_lex $P2726
    .const 'Sub' $P2720 = "246_1338064451.944" 
    capture_lex $P2720
    .const 'Sub' $P2709 = "245_1338064451.944" 
    capture_lex $P2709
    .const 'Sub' $P2698 = "243_1338064451.944" 
    capture_lex $P2698
    .const 'Sub' $P2682 = "241_1338064451.944" 
    capture_lex $P2682
    .const 'Sub' $P2666 = "238_1338064451.944" 
    capture_lex $P2666
    .const 'Sub' $P2660 = "235_1338064451.944" 
    capture_lex $P2660
    .const 'Sub' $P2649 = "234_1338064451.944" 
    capture_lex $P2649
    .const 'Sub' $P2643 = "232_1338064451.944" 
    capture_lex $P2643
    .const 'Sub' $P2632 = "231_1338064451.944" 
    capture_lex $P2632
    .lex "$?PACKAGE", $P2630
    .lex "$?CLASS", $P2631
.annotate 'line', 1413
    .const 'Sub' $P2726 = "247_1338064451.944" 
    capture_lex $P2726
.annotate 'line', 1374
    .return ($P2726)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<:my>"  :subid("231_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2633
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .const 'Sub' $P2639 = "230_1338064451.944" 
    capture_lex $P2639
    .lex "self", param_2633
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2634
    .lex "$/", $P2635
    .local string rx1085_tgt
    .local int rx1085_pos
    .local int rx1085_off
    .local int rx1085_eos
    .local int rx1085_rep
    .local pmc rx1085_cur
    .local pmc rx1085_curclass
    .local pmc rx1085_bstack
    .local pmc rx1085_cstack
    (rx1085_cur, rx1085_tgt, rx1085_pos, rx1085_curclass, rx1085_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1085_cur
    length rx1085_eos, rx1085_tgt
    eq $I19, 1, rx1085_restart
    repr_get_attr_int $I11, self, rx1085_curclass, "$!from"
    ne $I11, -1, rxscan1086_done
    goto rxscan1086_scan
  rxscan1086_loop:
    inc rx1085_pos
    gt rx1085_pos, rx1085_eos, rx1085_fail
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!from", rx1085_pos
  rxscan1086_scan:
    nqp_rxmark rx1085_bstack, rxscan1086_loop, rx1085_pos, 0
  rxscan1086_done:
    add $I11, rx1085_pos, 1
    gt $I11, rx1085_eos, rx1085_fail
    substr $S10, rx1085_tgt, rx1085_pos, 1
    ne $S10, ucs4:":", rx1085_fail
    add rx1085_pos, 1
    .const 'Sub' $P2639 = "230_1338064451.944" 
    capture_lex $P2639
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."before"($P2639)
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail
    nqp_rxmark rx1085_bstack, rxsubrule1089_pass, -1, 0
  rxsubrule1089_pass:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    add $I11, rx1085_pos, 1
    gt $I11, rx1085_eos, rx1085_fail
    substr $S10, rx1085_tgt, rx1085_pos, 1
    ne $S10, ucs4:";", rx1085_fail
    add rx1085_pos, 1
    rx1085_cur."!cursor_pass"(rx1085_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1085_cur)
  rx1085_restart:
    repr_get_attr_obj rx1085_cstack, rx1085_cur, rx1085_curclass, "$!cstack"
  rx1085_fail:
    unless rx1085_bstack, rx1085_done
    pop $I19, rx1085_bstack
    if_null rx1085_cstack, rx1085_cstack_done
    unless rx1085_cstack, rx1085_cstack_done
    dec $I19
    set $P11, rx1085_cstack[$I19]
  rx1085_cstack_done:
    pop rx1085_rep, rx1085_bstack
    pop rx1085_pos, rx1085_bstack
    pop $I19, rx1085_bstack
    lt rx1085_pos, -1, rx1085_done
    lt rx1085_pos, 0, rx1085_fail
    eq $I19, 0, rx1085_fail
    if_null rx1085_cstack, rx1085_jump
    elements $I18, rx1085_bstack
    le $I18, 0, rx1085_cut
    dec $I18
    set $I18, rx1085_bstack[$I18]
  rx1085_cut:
    assign rx1085_cstack, $I18
  rx1085_jump:
    jump $I19
  rx1085_done:
    rx1085_cur."!cursor_fail"()
    .return (rx1085_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "231_1338064451.944_caps"  :subid("750_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    new $P104, "Hash"
    set $P104["statement"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "231_1338064451.944_nfa"  :subid("751_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 109
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 121
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2638"  :anon :subid("230_1338064451.944") :method :outer("231_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .lex unicode:"$\x{a2}", $P2642
    .local string rx1087_tgt
    .local int rx1087_pos
    .local int rx1087_off
    .local int rx1087_eos
    .local int rx1087_rep
    .local pmc rx1087_cur
    .local pmc rx1087_curclass
    .local pmc rx1087_bstack
    .local pmc rx1087_cstack
    (rx1087_cur, rx1087_tgt, rx1087_pos, rx1087_curclass, rx1087_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1087_cur
    length rx1087_eos, rx1087_tgt
    eq $I19, 1, rx1087_restart
    repr_get_attr_int $I11, self, rx1087_curclass, "$!from"
    ne $I11, -1, rxscan1088_done
    goto rxscan1088_scan
  rxscan1088_loop:
    inc rx1087_pos
    gt rx1087_pos, rx1087_eos, rx1087_fail
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!from", rx1087_pos
  rxscan1088_scan:
    nqp_rxmark rx1087_bstack, rxscan1088_loop, rx1087_pos, 0
  rxscan1088_done:
    add $I11, rx1087_pos, 2
    gt $I11, rx1087_eos, rx1087_fail
    substr $S10, rx1087_tgt, rx1087_pos, 2
    ne $S10, ucs4:"my", rx1087_fail
    add rx1087_pos, 2
    rx1087_cur."!cursor_pass"(rx1087_pos, 'backtrack'=>1)
    .return (rx1087_cur)
  rx1087_restart:
    repr_get_attr_obj rx1087_cstack, rx1087_cur, rx1087_curclass, "$!cstack"
  rx1087_fail:
    unless rx1087_bstack, rx1087_done
    pop $I19, rx1087_bstack
    if_null rx1087_cstack, rx1087_cstack_done
    unless rx1087_cstack, rx1087_cstack_done
    dec $I19
    set $P11, rx1087_cstack[$I19]
  rx1087_cstack_done:
    pop rx1087_rep, rx1087_bstack
    pop rx1087_pos, rx1087_bstack
    pop $I19, rx1087_bstack
    lt rx1087_pos, -1, rx1087_done
    lt rx1087_pos, 0, rx1087_fail
    eq $I19, 0, rx1087_fail
    if_null rx1087_cstack, rx1087_jump
    elements $I18, rx1087_bstack
    le $I18, 0, rx1087_cut
    dec $I18
    set $I18, rx1087_bstack[$I18]
  rx1087_cut:
    assign rx1087_cstack, $I18
  rx1087_jump:
    jump $I19
  rx1087_done:
    rx1087_cur."!cursor_fail"()
    .return (rx1087_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "230_1338064451.944_caps"  :subid("752_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "230_1338064451.944_nfa"  :subid("753_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 121
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<{ }>"  :subid("232_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2644
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    .lex "self", param_2644
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2645
    .lex "$/", $P2646
    .local string rx1091_tgt
    .local int rx1091_pos
    .local int rx1091_off
    .local int rx1091_eos
    .local int rx1091_rep
    .local pmc rx1091_cur
    .local pmc rx1091_curclass
    .local pmc rx1091_bstack
    .local pmc rx1091_cstack
    (rx1091_cur, rx1091_tgt, rx1091_pos, rx1091_curclass, rx1091_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1091_cur
    length rx1091_eos, rx1091_tgt
    eq $I19, 1, rx1091_restart
    repr_get_attr_int $I11, self, rx1091_curclass, "$!from"
    ne $I11, -1, rxscan1092_done
    goto rxscan1092_scan
  rxscan1092_loop:
    inc rx1091_pos
    gt rx1091_pos, rx1091_eos, rx1091_fail
    repr_bind_attr_int rx1091_cur, rx1091_curclass, "$!from", rx1091_pos
  rxscan1092_scan:
    nqp_rxmark rx1091_bstack, rxscan1092_loop, rx1091_pos, 0
  rxscan1092_done:
    ge rx1091_pos, rx1091_eos, rx1091_fail
    substr $S11, rx1091_tgt, rx1091_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1091_fail
    repr_bind_attr_int rx1091_cur, rx1091_curclass, "$!pos", rx1091_pos
    $P11 = rx1091_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1091_curclass, "$!pos"
    lt $I11, 0, rx1091_fail
    nqp_rxmark rx1091_bstack, rxsubrule1093_pass, -1, 0
  rxsubrule1093_pass:
    rx1091_cstack = rx1091_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1091_pos, $P11, rx1091_curclass, "$!pos"
    rx1091_cur."!cursor_pass"(rx1091_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1091_cur)
  rx1091_restart:
    repr_get_attr_obj rx1091_cstack, rx1091_cur, rx1091_curclass, "$!cstack"
  rx1091_fail:
    unless rx1091_bstack, rx1091_done
    pop $I19, rx1091_bstack
    if_null rx1091_cstack, rx1091_cstack_done
    unless rx1091_cstack, rx1091_cstack_done
    dec $I19
    set $P11, rx1091_cstack[$I19]
  rx1091_cstack_done:
    pop rx1091_rep, rx1091_bstack
    pop rx1091_pos, rx1091_bstack
    pop $I19, rx1091_bstack
    lt rx1091_pos, -1, rx1091_done
    lt rx1091_pos, 0, rx1091_fail
    eq $I19, 0, rx1091_fail
    if_null rx1091_cstack, rx1091_jump
    elements $I18, rx1091_bstack
    le $I18, 0, rx1091_cut
    dec $I18
    set $I18, rx1091_bstack[$I18]
  rx1091_cut:
    assign rx1091_cstack, $I18
  rx1091_jump:
    jump $I19
  rx1091_done:
    rx1091_cur."!cursor_fail"()
    .return (rx1091_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "232_1338064451.944_caps"  :subid("754_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    new $P104, "Hash"
    set $P104["codeblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "232_1338064451.944_nfa"  :subid("755_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "{"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<nqpvar>"  :subid("234_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2650
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    .const 'Sub' $P2656 = "233_1338064451.944" 
    capture_lex $P2656
    .lex "self", param_2650
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2651
    .lex "$/", $P2652
    .local string rx1094_tgt
    .local int rx1094_pos
    .local int rx1094_off
    .local int rx1094_eos
    .local int rx1094_rep
    .local pmc rx1094_cur
    .local pmc rx1094_curclass
    .local pmc rx1094_bstack
    .local pmc rx1094_cstack
    (rx1094_cur, rx1094_tgt, rx1094_pos, rx1094_curclass, rx1094_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1094_cur
    length rx1094_eos, rx1094_tgt
    eq $I19, 1, rx1094_restart
    repr_get_attr_int $I11, self, rx1094_curclass, "$!from"
    ne $I11, -1, rxscan1095_done
    goto rxscan1095_scan
  rxscan1095_loop:
    inc rx1094_pos
    gt rx1094_pos, rx1094_eos, rx1094_fail
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!from", rx1094_pos
  rxscan1095_scan:
    nqp_rxmark rx1094_bstack, rxscan1095_loop, rx1094_pos, 0
  rxscan1095_done:
    ge rx1094_pos, rx1094_eos, rx1094_fail
    substr $S11, rx1094_tgt, rx1094_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1094_fail
    .const 'Sub' $P2656 = "233_1338064451.944" 
    capture_lex $P2656
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!pos", rx1094_pos
    $P11 = rx1094_cur."before"($P2656)
    repr_get_attr_int $I11, $P11, rx1094_curclass, "$!pos"
    lt $I11, 0, rx1094_fail
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!pos", rx1094_pos
    $P11 = rx1094_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1094_curclass, "$!pos"
    lt $I11, 0, rx1094_fail
    nqp_rxmark rx1094_bstack, rxsubrule1098_pass, -1, 0
  rxsubrule1098_pass:
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1094_pos, $P11, rx1094_curclass, "$!pos"
    rx1094_cur."!cursor_pass"(rx1094_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1094_cur)
  rx1094_restart:
    repr_get_attr_obj rx1094_cstack, rx1094_cur, rx1094_curclass, "$!cstack"
  rx1094_fail:
    unless rx1094_bstack, rx1094_done
    pop $I19, rx1094_bstack
    if_null rx1094_cstack, rx1094_cstack_done
    unless rx1094_cstack, rx1094_cstack_done
    dec $I19
    set $P11, rx1094_cstack[$I19]
  rx1094_cstack_done:
    pop rx1094_rep, rx1094_bstack
    pop rx1094_pos, rx1094_bstack
    pop $I19, rx1094_bstack
    lt rx1094_pos, -1, rx1094_done
    lt rx1094_pos, 0, rx1094_fail
    eq $I19, 0, rx1094_fail
    if_null rx1094_cstack, rx1094_jump
    elements $I18, rx1094_bstack
    le $I18, 0, rx1094_cut
    dec $I18
    set $I18, rx1094_bstack[$I18]
  rx1094_cut:
    assign rx1094_cstack, $I18
  rx1094_jump:
    jump $I19
  rx1094_done:
    rx1094_cur."!cursor_fail"()
    .return (rx1094_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "234_1338064451.944_caps"  :subid("756_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    new $P104, "Hash"
    set $P104["var"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "234_1338064451.944_nfa"  :subid("757_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "$@"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2655"  :anon :subid("233_1338064451.944") :method :outer("234_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    .lex unicode:"$\x{a2}", $P2659
    .local string rx1096_tgt
    .local int rx1096_pos
    .local int rx1096_off
    .local int rx1096_eos
    .local int rx1096_rep
    .local pmc rx1096_cur
    .local pmc rx1096_curclass
    .local pmc rx1096_bstack
    .local pmc rx1096_cstack
    (rx1096_cur, rx1096_tgt, rx1096_pos, rx1096_curclass, rx1096_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1096_cur
    length rx1096_eos, rx1096_tgt
    eq $I19, 1, rx1096_restart
    repr_get_attr_int $I11, self, rx1096_curclass, "$!from"
    ne $I11, -1, rxscan1097_done
    goto rxscan1097_scan
  rxscan1097_loop:
    inc rx1096_pos
    gt rx1096_pos, rx1096_eos, rx1096_fail
    repr_bind_attr_int rx1096_cur, rx1096_curclass, "$!from", rx1096_pos
  rxscan1097_scan:
    nqp_rxmark rx1096_bstack, rxscan1097_loop, rx1096_pos, 0
  rxscan1097_done:
    ge rx1096_pos, rx1096_eos, rx1096_fail
    add rx1096_pos, 1
    ge rx1096_pos, rx1096_eos, rx1096_fail
    is_cclass $I11, .CCLASS_WORD, rx1096_tgt, rx1096_pos
    unless $I11, rx1096_fail
    add rx1096_pos, 1
    rx1096_cur."!cursor_pass"(rx1096_pos, 'backtrack'=>1)
    .return (rx1096_cur)
  rx1096_restart:
    repr_get_attr_obj rx1096_cstack, rx1096_cur, rx1096_curclass, "$!cstack"
  rx1096_fail:
    unless rx1096_bstack, rx1096_done
    pop $I19, rx1096_bstack
    if_null rx1096_cstack, rx1096_cstack_done
    unless rx1096_cstack, rx1096_cstack_done
    dec $I19
    set $P11, rx1096_cstack[$I19]
  rx1096_cstack_done:
    pop rx1096_rep, rx1096_bstack
    pop rx1096_pos, rx1096_bstack
    pop $I19, rx1096_bstack
    lt rx1096_pos, -1, rx1096_done
    lt rx1096_pos, 0, rx1096_fail
    eq $I19, 0, rx1096_fail
    if_null rx1096_cstack, rx1096_jump
    elements $I18, rx1096_bstack
    le $I18, 0, rx1096_cut
    dec $I18
    set $I18, rx1096_bstack[$I18]
  rx1096_cut:
    assign rx1096_cstack, $I18
  rx1096_jump:
    jump $I19
  rx1096_done:
    rx1096_cur."!cursor_fail"()
    .return (rx1096_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "233_1338064451.944_caps"  :subid("758_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "233_1338064451.944_nfa"  :subid("759_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 65535
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 4
    push $P106, 8192
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<{ }>"  :subid("235_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2661
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    .lex "self", param_2661
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2662
    .lex "$/", $P2663
    .local string rx1099_tgt
    .local int rx1099_pos
    .local int rx1099_off
    .local int rx1099_eos
    .local int rx1099_rep
    .local pmc rx1099_cur
    .local pmc rx1099_curclass
    .local pmc rx1099_bstack
    .local pmc rx1099_cstack
    (rx1099_cur, rx1099_tgt, rx1099_pos, rx1099_curclass, rx1099_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1099_cur
    length rx1099_eos, rx1099_tgt
    eq $I19, 1, rx1099_restart
    repr_get_attr_int $I11, self, rx1099_curclass, "$!from"
    ne $I11, -1, rxscan1100_done
    goto rxscan1100_scan
  rxscan1100_loop:
    inc rx1099_pos
    gt rx1099_pos, rx1099_eos, rx1099_fail
    repr_bind_attr_int rx1099_cur, rx1099_curclass, "$!from", rx1099_pos
  rxscan1100_scan:
    nqp_rxmark rx1099_bstack, rxscan1100_loop, rx1099_pos, 0
  rxscan1100_done:
    ge rx1099_pos, rx1099_eos, rx1099_fail
    substr $S11, rx1099_tgt, rx1099_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1099_fail
    repr_bind_attr_int rx1099_cur, rx1099_curclass, "$!pos", rx1099_pos
    $P11 = rx1099_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1099_curclass, "$!pos"
    lt $I11, 0, rx1099_fail
    nqp_rxmark rx1099_bstack, rxsubrule1101_pass, -1, 0
  rxsubrule1101_pass:
    rx1099_cstack = rx1099_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1099_pos, $P11, rx1099_curclass, "$!pos"
    rx1099_cur."!cursor_pass"(rx1099_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1099_cur)
  rx1099_restart:
    repr_get_attr_obj rx1099_cstack, rx1099_cur, rx1099_curclass, "$!cstack"
  rx1099_fail:
    unless rx1099_bstack, rx1099_done
    pop $I19, rx1099_bstack
    if_null rx1099_cstack, rx1099_cstack_done
    unless rx1099_cstack, rx1099_cstack_done
    dec $I19
    set $P11, rx1099_cstack[$I19]
  rx1099_cstack_done:
    pop rx1099_rep, rx1099_bstack
    pop rx1099_pos, rx1099_bstack
    pop $I19, rx1099_bstack
    lt rx1099_pos, -1, rx1099_done
    lt rx1099_pos, 0, rx1099_fail
    eq $I19, 0, rx1099_fail
    if_null rx1099_cstack, rx1099_jump
    elements $I18, rx1099_bstack
    le $I18, 0, rx1099_cut
    dec $I18
    set $I18, rx1099_bstack[$I18]
  rx1099_cut:
    assign rx1099_cstack, $I18
  rx1099_jump:
    jump $I19
  rx1099_done:
    rx1099_cur."!cursor_fail"()
    .return (rx1099_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "235_1338064451.944_caps"  :subid("760_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    new $P104, "Hash"
    set $P104["codeblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "235_1338064451.944_nfa"  :subid("761_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "{"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?>"  :subid("238_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2667
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    .const 'Sub' $P2678 = "237_1338064451.944" 
    capture_lex $P2678
    .const 'Sub' $P2673 = "236_1338064451.944" 
    capture_lex $P2673
    .lex "self", param_2667
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2668
    .lex "$/", $P2669
    .local string rx1102_tgt
    .local int rx1102_pos
    .local int rx1102_off
    .local int rx1102_eos
    .local int rx1102_rep
    .local pmc rx1102_cur
    .local pmc rx1102_curclass
    .local pmc rx1102_bstack
    .local pmc rx1102_cstack
    (rx1102_cur, rx1102_tgt, rx1102_pos, rx1102_curclass, rx1102_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1102_cur
    length rx1102_eos, rx1102_tgt
    eq $I19, 1, rx1102_restart
    repr_get_attr_int $I11, self, rx1102_curclass, "$!from"
    ne $I11, -1, rxscan1103_done
    goto rxscan1103_scan
  rxscan1103_loop:
    inc rx1102_pos
    gt rx1102_pos, rx1102_eos, rx1102_fail
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!from", rx1102_pos
  rxscan1103_scan:
    nqp_rxmark rx1102_bstack, rxscan1103_loop, rx1102_pos, 0
  rxscan1103_done:
    add $I11, rx1102_pos, 1
    gt $I11, rx1102_eos, rx1102_fail
    substr $S10, rx1102_tgt, rx1102_pos, 1
    ne $S10, ucs4:"?", rx1102_fail
    add rx1102_pos, 1
  alt1104_0:
    nqp_rxmark rx1102_bstack, alt1104_1, rx1102_pos, 0
    .const 'Sub' $P2673 = "236_1338064451.944" 
    capture_lex $P2673
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."before"($P2673)
    repr_get_attr_int $I11, $P11, rx1102_curclass, "$!pos"
    lt $I11, 0, rx1102_fail
    goto alt1104_end
  alt1104_1:
    .const 'Sub' $P2678 = "237_1338064451.944" 
    capture_lex $P2678
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."before"($P2678)
    repr_get_attr_int $I11, $P11, rx1102_curclass, "$!pos"
    ge $I11, 0, rx1102_fail
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1102_curclass, "$!pos"
    lt $I11, 0, rx1102_fail
    nqp_rxmark rx1102_bstack, rxsubrule1109_pass, -1, 0
  rxsubrule1109_pass:
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1102_pos, $P11, rx1102_curclass, "$!pos"
  alt1104_end:
    rx1102_cur."!cursor_pass"(rx1102_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1102_cur)
  rx1102_restart:
    repr_get_attr_obj rx1102_cstack, rx1102_cur, rx1102_curclass, "$!cstack"
  rx1102_fail:
    unless rx1102_bstack, rx1102_done
    pop $I19, rx1102_bstack
    if_null rx1102_cstack, rx1102_cstack_done
    unless rx1102_cstack, rx1102_cstack_done
    dec $I19
    set $P11, rx1102_cstack[$I19]
  rx1102_cstack_done:
    pop rx1102_rep, rx1102_bstack
    pop rx1102_pos, rx1102_bstack
    pop $I19, rx1102_bstack
    lt rx1102_pos, -1, rx1102_done
    lt rx1102_pos, 0, rx1102_fail
    eq $I19, 0, rx1102_fail
    if_null rx1102_cstack, rx1102_jump
    elements $I18, rx1102_bstack
    le $I18, 0, rx1102_cut
    dec $I18
    set $I18, rx1102_bstack[$I18]
  rx1102_cut:
    assign rx1102_cstack, $I18
  rx1102_jump:
    jump $I19
  rx1102_done:
    rx1102_cur."!cursor_fail"()
    .return (rx1102_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "238_1338064451.944_caps"  :subid("762_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "Hash"
    set $P104["assertion"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "238_1338064451.944_nfa"  :subid("763_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 63
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 62
    push $P106, 0
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2672"  :anon :subid("236_1338064451.944") :method :outer("238_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    .lex unicode:"$\x{a2}", $P2676
    .local string rx1105_tgt
    .local int rx1105_pos
    .local int rx1105_off
    .local int rx1105_eos
    .local int rx1105_rep
    .local pmc rx1105_cur
    .local pmc rx1105_curclass
    .local pmc rx1105_bstack
    .local pmc rx1105_cstack
    (rx1105_cur, rx1105_tgt, rx1105_pos, rx1105_curclass, rx1105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1105_cur
    length rx1105_eos, rx1105_tgt
    eq $I19, 1, rx1105_restart
    repr_get_attr_int $I11, self, rx1105_curclass, "$!from"
    ne $I11, -1, rxscan1106_done
    goto rxscan1106_scan
  rxscan1106_loop:
    inc rx1105_pos
    gt rx1105_pos, rx1105_eos, rx1105_fail
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!from", rx1105_pos
  rxscan1106_scan:
    nqp_rxmark rx1105_bstack, rxscan1106_loop, rx1105_pos, 0
  rxscan1106_done:
    add $I11, rx1105_pos, 1
    gt $I11, rx1105_eos, rx1105_fail
    substr $S10, rx1105_tgt, rx1105_pos, 1
    ne $S10, ucs4:">", rx1105_fail
    add rx1105_pos, 1
    rx1105_cur."!cursor_pass"(rx1105_pos, 'backtrack'=>1)
    .return (rx1105_cur)
  rx1105_restart:
    repr_get_attr_obj rx1105_cstack, rx1105_cur, rx1105_curclass, "$!cstack"
  rx1105_fail:
    unless rx1105_bstack, rx1105_done
    pop $I19, rx1105_bstack
    if_null rx1105_cstack, rx1105_cstack_done
    unless rx1105_cstack, rx1105_cstack_done
    dec $I19
    set $P11, rx1105_cstack[$I19]
  rx1105_cstack_done:
    pop rx1105_rep, rx1105_bstack
    pop rx1105_pos, rx1105_bstack
    pop $I19, rx1105_bstack
    lt rx1105_pos, -1, rx1105_done
    lt rx1105_pos, 0, rx1105_fail
    eq $I19, 0, rx1105_fail
    if_null rx1105_cstack, rx1105_jump
    elements $I18, rx1105_bstack
    le $I18, 0, rx1105_cut
    dec $I18
    set $I18, rx1105_bstack[$I18]
  rx1105_cut:
    assign rx1105_cstack, $I18
  rx1105_jump:
    jump $I19
  rx1105_done:
    rx1105_cur."!cursor_fail"()
    .return (rx1105_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "236_1338064451.944_caps"  :subid("764_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "236_1338064451.944_nfa"  :subid("765_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2677"  :anon :subid("237_1338064451.944") :method :outer("238_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    .lex unicode:"$\x{a2}", $P2681
    .local string rx1107_tgt
    .local int rx1107_pos
    .local int rx1107_off
    .local int rx1107_eos
    .local int rx1107_rep
    .local pmc rx1107_cur
    .local pmc rx1107_curclass
    .local pmc rx1107_bstack
    .local pmc rx1107_cstack
    (rx1107_cur, rx1107_tgt, rx1107_pos, rx1107_curclass, rx1107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1107_cur
    length rx1107_eos, rx1107_tgt
    eq $I19, 1, rx1107_restart
    repr_get_attr_int $I11, self, rx1107_curclass, "$!from"
    ne $I11, -1, rxscan1108_done
    goto rxscan1108_scan
  rxscan1108_loop:
    inc rx1107_pos
    gt rx1107_pos, rx1107_eos, rx1107_fail
    repr_bind_attr_int rx1107_cur, rx1107_curclass, "$!from", rx1107_pos
  rxscan1108_scan:
    nqp_rxmark rx1107_bstack, rxscan1108_loop, rx1107_pos, 0
  rxscan1108_done:
    add $I11, rx1107_pos, 1
    gt $I11, rx1107_eos, rx1107_fail
    substr $S10, rx1107_tgt, rx1107_pos, 1
    ne $S10, ucs4:"{", rx1107_fail
    add rx1107_pos, 1
    rx1107_cur."!cursor_pass"(rx1107_pos, 'backtrack'=>1)
    .return (rx1107_cur)
  rx1107_restart:
    repr_get_attr_obj rx1107_cstack, rx1107_cur, rx1107_curclass, "$!cstack"
  rx1107_fail:
    unless rx1107_bstack, rx1107_done
    pop $I19, rx1107_bstack
    if_null rx1107_cstack, rx1107_cstack_done
    unless rx1107_cstack, rx1107_cstack_done
    dec $I19
    set $P11, rx1107_cstack[$I19]
  rx1107_cstack_done:
    pop rx1107_rep, rx1107_bstack
    pop rx1107_pos, rx1107_bstack
    pop $I19, rx1107_bstack
    lt rx1107_pos, -1, rx1107_done
    lt rx1107_pos, 0, rx1107_fail
    eq $I19, 0, rx1107_fail
    if_null rx1107_cstack, rx1107_jump
    elements $I18, rx1107_bstack
    le $I18, 0, rx1107_cut
    dec $I18
    set $I18, rx1107_bstack[$I18]
  rx1107_cut:
    assign rx1107_cstack, $I18
  rx1107_jump:
    jump $I19
  rx1107_done:
    rx1107_cur."!cursor_fail"()
    .return (rx1107_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "237_1338064451.944_caps"  :subid("766_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "237_1338064451.944_nfa"  :subid("767_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<!>"  :subid("241_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2683
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .const 'Sub' $P2694 = "240_1338064451.944" 
    capture_lex $P2694
    .const 'Sub' $P2689 = "239_1338064451.944" 
    capture_lex $P2689
    .lex "self", param_2683
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2684
    .lex "$/", $P2685
    .local string rx1110_tgt
    .local int rx1110_pos
    .local int rx1110_off
    .local int rx1110_eos
    .local int rx1110_rep
    .local pmc rx1110_cur
    .local pmc rx1110_curclass
    .local pmc rx1110_bstack
    .local pmc rx1110_cstack
    (rx1110_cur, rx1110_tgt, rx1110_pos, rx1110_curclass, rx1110_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1110_cur
    length rx1110_eos, rx1110_tgt
    eq $I19, 1, rx1110_restart
    repr_get_attr_int $I11, self, rx1110_curclass, "$!from"
    ne $I11, -1, rxscan1111_done
    goto rxscan1111_scan
  rxscan1111_loop:
    inc rx1110_pos
    gt rx1110_pos, rx1110_eos, rx1110_fail
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!from", rx1110_pos
  rxscan1111_scan:
    nqp_rxmark rx1110_bstack, rxscan1111_loop, rx1110_pos, 0
  rxscan1111_done:
    add $I11, rx1110_pos, 1
    gt $I11, rx1110_eos, rx1110_fail
    substr $S10, rx1110_tgt, rx1110_pos, 1
    ne $S10, ucs4:"!", rx1110_fail
    add rx1110_pos, 1
  alt1112_0:
    nqp_rxmark rx1110_bstack, alt1112_1, rx1110_pos, 0
    .const 'Sub' $P2689 = "239_1338064451.944" 
    capture_lex $P2689
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."before"($P2689)
    repr_get_attr_int $I11, $P11, rx1110_curclass, "$!pos"
    lt $I11, 0, rx1110_fail
    goto alt1112_end
  alt1112_1:
    .const 'Sub' $P2694 = "240_1338064451.944" 
    capture_lex $P2694
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."before"($P2694)
    repr_get_attr_int $I11, $P11, rx1110_curclass, "$!pos"
    ge $I11, 0, rx1110_fail
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1110_curclass, "$!pos"
    lt $I11, 0, rx1110_fail
    nqp_rxmark rx1110_bstack, rxsubrule1117_pass, -1, 0
  rxsubrule1117_pass:
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1110_pos, $P11, rx1110_curclass, "$!pos"
  alt1112_end:
    rx1110_cur."!cursor_pass"(rx1110_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1110_cur)
  rx1110_restart:
    repr_get_attr_obj rx1110_cstack, rx1110_cur, rx1110_curclass, "$!cstack"
  rx1110_fail:
    unless rx1110_bstack, rx1110_done
    pop $I19, rx1110_bstack
    if_null rx1110_cstack, rx1110_cstack_done
    unless rx1110_cstack, rx1110_cstack_done
    dec $I19
    set $P11, rx1110_cstack[$I19]
  rx1110_cstack_done:
    pop rx1110_rep, rx1110_bstack
    pop rx1110_pos, rx1110_bstack
    pop $I19, rx1110_bstack
    lt rx1110_pos, -1, rx1110_done
    lt rx1110_pos, 0, rx1110_fail
    eq $I19, 0, rx1110_fail
    if_null rx1110_cstack, rx1110_jump
    elements $I18, rx1110_bstack
    le $I18, 0, rx1110_cut
    dec $I18
    set $I18, rx1110_bstack[$I18]
  rx1110_cut:
    assign rx1110_cstack, $I18
  rx1110_jump:
    jump $I19
  rx1110_done:
    rx1110_cur."!cursor_fail"()
    .return (rx1110_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "241_1338064451.944_caps"  :subid("768_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "Hash"
    set $P104["assertion"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "241_1338064451.944_nfa"  :subid("769_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 33
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 62
    push $P106, 0
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2688"  :anon :subid("239_1338064451.944") :method :outer("241_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .lex unicode:"$\x{a2}", $P2692
    .local string rx1113_tgt
    .local int rx1113_pos
    .local int rx1113_off
    .local int rx1113_eos
    .local int rx1113_rep
    .local pmc rx1113_cur
    .local pmc rx1113_curclass
    .local pmc rx1113_bstack
    .local pmc rx1113_cstack
    (rx1113_cur, rx1113_tgt, rx1113_pos, rx1113_curclass, rx1113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1113_cur
    length rx1113_eos, rx1113_tgt
    eq $I19, 1, rx1113_restart
    repr_get_attr_int $I11, self, rx1113_curclass, "$!from"
    ne $I11, -1, rxscan1114_done
    goto rxscan1114_scan
  rxscan1114_loop:
    inc rx1113_pos
    gt rx1113_pos, rx1113_eos, rx1113_fail
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!from", rx1113_pos
  rxscan1114_scan:
    nqp_rxmark rx1113_bstack, rxscan1114_loop, rx1113_pos, 0
  rxscan1114_done:
    add $I11, rx1113_pos, 1
    gt $I11, rx1113_eos, rx1113_fail
    substr $S10, rx1113_tgt, rx1113_pos, 1
    ne $S10, ucs4:">", rx1113_fail
    add rx1113_pos, 1
    rx1113_cur."!cursor_pass"(rx1113_pos, 'backtrack'=>1)
    .return (rx1113_cur)
  rx1113_restart:
    repr_get_attr_obj rx1113_cstack, rx1113_cur, rx1113_curclass, "$!cstack"
  rx1113_fail:
    unless rx1113_bstack, rx1113_done
    pop $I19, rx1113_bstack
    if_null rx1113_cstack, rx1113_cstack_done
    unless rx1113_cstack, rx1113_cstack_done
    dec $I19
    set $P11, rx1113_cstack[$I19]
  rx1113_cstack_done:
    pop rx1113_rep, rx1113_bstack
    pop rx1113_pos, rx1113_bstack
    pop $I19, rx1113_bstack
    lt rx1113_pos, -1, rx1113_done
    lt rx1113_pos, 0, rx1113_fail
    eq $I19, 0, rx1113_fail
    if_null rx1113_cstack, rx1113_jump
    elements $I18, rx1113_bstack
    le $I18, 0, rx1113_cut
    dec $I18
    set $I18, rx1113_bstack[$I18]
  rx1113_cut:
    assign rx1113_cstack, $I18
  rx1113_jump:
    jump $I19
  rx1113_done:
    rx1113_cur."!cursor_fail"()
    .return (rx1113_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "239_1338064451.944_caps"  :subid("770_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "239_1338064451.944_nfa"  :subid("771_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2693"  :anon :subid("240_1338064451.944") :method :outer("241_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .lex unicode:"$\x{a2}", $P2697
    .local string rx1115_tgt
    .local int rx1115_pos
    .local int rx1115_off
    .local int rx1115_eos
    .local int rx1115_rep
    .local pmc rx1115_cur
    .local pmc rx1115_curclass
    .local pmc rx1115_bstack
    .local pmc rx1115_cstack
    (rx1115_cur, rx1115_tgt, rx1115_pos, rx1115_curclass, rx1115_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1115_cur
    length rx1115_eos, rx1115_tgt
    eq $I19, 1, rx1115_restart
    repr_get_attr_int $I11, self, rx1115_curclass, "$!from"
    ne $I11, -1, rxscan1116_done
    goto rxscan1116_scan
  rxscan1116_loop:
    inc rx1115_pos
    gt rx1115_pos, rx1115_eos, rx1115_fail
    repr_bind_attr_int rx1115_cur, rx1115_curclass, "$!from", rx1115_pos
  rxscan1116_scan:
    nqp_rxmark rx1115_bstack, rxscan1116_loop, rx1115_pos, 0
  rxscan1116_done:
    add $I11, rx1115_pos, 1
    gt $I11, rx1115_eos, rx1115_fail
    substr $S10, rx1115_tgt, rx1115_pos, 1
    ne $S10, ucs4:"{", rx1115_fail
    add rx1115_pos, 1
    rx1115_cur."!cursor_pass"(rx1115_pos, 'backtrack'=>1)
    .return (rx1115_cur)
  rx1115_restart:
    repr_get_attr_obj rx1115_cstack, rx1115_cur, rx1115_curclass, "$!cstack"
  rx1115_fail:
    unless rx1115_bstack, rx1115_done
    pop $I19, rx1115_bstack
    if_null rx1115_cstack, rx1115_cstack_done
    unless rx1115_cstack, rx1115_cstack_done
    dec $I19
    set $P11, rx1115_cstack[$I19]
  rx1115_cstack_done:
    pop rx1115_rep, rx1115_bstack
    pop rx1115_pos, rx1115_bstack
    pop $I19, rx1115_bstack
    lt rx1115_pos, -1, rx1115_done
    lt rx1115_pos, 0, rx1115_fail
    eq $I19, 0, rx1115_fail
    if_null rx1115_cstack, rx1115_jump
    elements $I18, rx1115_bstack
    le $I18, 0, rx1115_cut
    dec $I18
    set $I18, rx1115_bstack[$I18]
  rx1115_cut:
    assign rx1115_cstack, $I18
  rx1115_jump:
    jump $I19
  rx1115_done:
    rx1115_cur."!cursor_fail"()
    .return (rx1115_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "240_1338064451.944_caps"  :subid("772_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "240_1338064451.944_nfa"  :subid("773_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?{ }>"  :subid("243_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2699
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    .const 'Sub' $P2705 = "242_1338064451.944" 
    capture_lex $P2705
    .lex "self", param_2699
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2700
    .lex "$/", $P2701
    .local string rx1118_tgt
    .local int rx1118_pos
    .local int rx1118_off
    .local int rx1118_eos
    .local int rx1118_rep
    .local pmc rx1118_cur
    .local pmc rx1118_curclass
    .local pmc rx1118_bstack
    .local pmc rx1118_cstack
    (rx1118_cur, rx1118_tgt, rx1118_pos, rx1118_curclass, rx1118_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1118_cur
    length rx1118_eos, rx1118_tgt
    eq $I19, 1, rx1118_restart
    repr_get_attr_int $I11, self, rx1118_curclass, "$!from"
    ne $I11, -1, rxscan1119_done
    goto rxscan1119_scan
  rxscan1119_loop:
    inc rx1118_pos
    gt rx1118_pos, rx1118_eos, rx1118_fail
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!from", rx1118_pos
  rxscan1119_scan:
    nqp_rxmark rx1118_bstack, rxscan1119_loop, rx1118_pos, 0
  rxscan1119_done:
    nqp_rxmark rx1118_bstack, rxcap1120_fail, rx1118_pos, 0
    ge rx1118_pos, rx1118_eos, rx1118_fail
    substr $S11, rx1118_tgt, rx1118_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1118_fail
    inc rx1118_pos
    .const 'Sub' $P2705 = "242_1338064451.944" 
    capture_lex $P2705
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."before"($P2705)
    repr_get_attr_int $I11, $P11, rx1118_curclass, "$!pos"
    lt $I11, 0, rx1118_fail
    nqp_rxpeek $I19, rx1118_bstack, rxcap1120_fail
    inc $I19
    set $I11, rx1118_bstack[$I19]
    $P11 = rx1118_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1118_pos)
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "zw")
    goto rxcap1120_done
  rxcap1120_fail:
    goto rx1118_fail
  rxcap1120_done:
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1118_curclass, "$!pos"
    lt $I11, 0, rx1118_fail
    nqp_rxmark rx1118_bstack, rxsubrule1123_pass, -1, 0
  rxsubrule1123_pass:
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1118_pos, $P11, rx1118_curclass, "$!pos"
    rx1118_cur."!cursor_pass"(rx1118_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1118_cur)
  rx1118_restart:
    repr_get_attr_obj rx1118_cstack, rx1118_cur, rx1118_curclass, "$!cstack"
  rx1118_fail:
    unless rx1118_bstack, rx1118_done
    pop $I19, rx1118_bstack
    if_null rx1118_cstack, rx1118_cstack_done
    unless rx1118_cstack, rx1118_cstack_done
    dec $I19
    set $P11, rx1118_cstack[$I19]
  rx1118_cstack_done:
    pop rx1118_rep, rx1118_bstack
    pop rx1118_pos, rx1118_bstack
    pop $I19, rx1118_bstack
    lt rx1118_pos, -1, rx1118_done
    lt rx1118_pos, 0, rx1118_fail
    eq $I19, 0, rx1118_fail
    if_null rx1118_cstack, rx1118_jump
    elements $I18, rx1118_bstack
    le $I18, 0, rx1118_cut
    dec $I18
    set $I18, rx1118_bstack[$I18]
  rx1118_cut:
    assign rx1118_cstack, $I18
  rx1118_jump:
    jump $I19
  rx1118_done:
    rx1118_cur."!cursor_fail"()
    .return (rx1118_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "243_1338064451.944_caps"  :subid("774_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    new $P104, "Hash"
    set $P104["zw"], 0
    set $P104["codeblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "243_1338064451.944_nfa"  :subid("775_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "?!"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 123
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2704"  :anon :subid("242_1338064451.944") :method :outer("243_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    .lex unicode:"$\x{a2}", $P2708
    .local string rx1121_tgt
    .local int rx1121_pos
    .local int rx1121_off
    .local int rx1121_eos
    .local int rx1121_rep
    .local pmc rx1121_cur
    .local pmc rx1121_curclass
    .local pmc rx1121_bstack
    .local pmc rx1121_cstack
    (rx1121_cur, rx1121_tgt, rx1121_pos, rx1121_curclass, rx1121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1121_cur
    length rx1121_eos, rx1121_tgt
    eq $I19, 1, rx1121_restart
    repr_get_attr_int $I11, self, rx1121_curclass, "$!from"
    ne $I11, -1, rxscan1122_done
    goto rxscan1122_scan
  rxscan1122_loop:
    inc rx1121_pos
    gt rx1121_pos, rx1121_eos, rx1121_fail
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!from", rx1121_pos
  rxscan1122_scan:
    nqp_rxmark rx1121_bstack, rxscan1122_loop, rx1121_pos, 0
  rxscan1122_done:
    add $I11, rx1121_pos, 1
    gt $I11, rx1121_eos, rx1121_fail
    substr $S10, rx1121_tgt, rx1121_pos, 1
    ne $S10, ucs4:"{", rx1121_fail
    add rx1121_pos, 1
    rx1121_cur."!cursor_pass"(rx1121_pos, 'backtrack'=>1)
    .return (rx1121_cur)
  rx1121_restart:
    repr_get_attr_obj rx1121_cstack, rx1121_cur, rx1121_curclass, "$!cstack"
  rx1121_fail:
    unless rx1121_bstack, rx1121_done
    pop $I19, rx1121_bstack
    if_null rx1121_cstack, rx1121_cstack_done
    unless rx1121_cstack, rx1121_cstack_done
    dec $I19
    set $P11, rx1121_cstack[$I19]
  rx1121_cstack_done:
    pop rx1121_rep, rx1121_bstack
    pop rx1121_pos, rx1121_bstack
    pop $I19, rx1121_bstack
    lt rx1121_pos, -1, rx1121_done
    lt rx1121_pos, 0, rx1121_fail
    eq $I19, 0, rx1121_fail
    if_null rx1121_cstack, rx1121_jump
    elements $I18, rx1121_bstack
    le $I18, 0, rx1121_cut
    dec $I18
    set $I18, rx1121_bstack[$I18]
  rx1121_cut:
    assign rx1121_cstack, $I18
  rx1121_jump:
    jump $I19
  rx1121_done:
    rx1121_cur."!cursor_fail"()
    .return (rx1121_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "242_1338064451.944_caps"  :subid("776_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "242_1338064451.944_nfa"  :subid("777_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<name>"  :subid("245_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2710
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    .const 'Sub' $P2716 = "244_1338064451.944" 
    capture_lex $P2716
    .lex "self", param_2710
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2711
    .lex "$/", $P2712
    .local string rx1124_tgt
    .local int rx1124_pos
    .local int rx1124_off
    .local int rx1124_eos
    .local int rx1124_rep
    .local pmc rx1124_cur
    .local pmc rx1124_curclass
    .local pmc rx1124_bstack
    .local pmc rx1124_cstack
    (rx1124_cur, rx1124_tgt, rx1124_pos, rx1124_curclass, rx1124_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1124_cur
    length rx1124_eos, rx1124_tgt
    eq $I19, 1, rx1124_restart
    repr_get_attr_int $I11, self, rx1124_curclass, "$!from"
    ne $I11, -1, rxscan1125_done
    goto rxscan1125_scan
  rxscan1125_loop:
    inc rx1124_pos
    gt rx1124_pos, rx1124_eos, rx1124_fail
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!from", rx1124_pos
  rxscan1125_scan:
    nqp_rxmark rx1124_bstack, rxscan1125_loop, rx1124_pos, 0
  rxscan1125_done:
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail
    nqp_rxmark rx1124_bstack, rxsubrule1126_pass, -1, 0
  rxsubrule1126_pass:
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
  # rx rxquantr1127 ** 0..1
    nqp_rxmark rx1124_bstack, rxquantr1127_done, rx1124_pos, 0
  rxquantr1127_loop:
  alt1128_0:
    nqp_rxmark rx1124_bstack, alt1128_1, rx1124_pos, 0
    .const 'Sub' $P2716 = "244_1338064451.944" 
    capture_lex $P2716
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."before"($P2716)
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail
    goto alt1128_end
  alt1128_1:
    nqp_rxmark rx1124_bstack, alt1128_2, rx1124_pos, 0
    add $I11, rx1124_pos, 1
    gt $I11, rx1124_eos, rx1124_fail
    substr $S10, rx1124_tgt, rx1124_pos, 1
    ne $S10, ucs4:"=", rx1124_fail
    add rx1124_pos, 1
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail
    nqp_rxmark rx1124_bstack, rxsubrule1131_pass, -1, 0
  rxsubrule1131_pass:
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
    goto alt1128_end
  alt1128_2:
    nqp_rxmark rx1124_bstack, alt1128_3, rx1124_pos, 0
    add $I11, rx1124_pos, 1
    gt $I11, rx1124_eos, rx1124_fail
    substr $S10, rx1124_tgt, rx1124_pos, 1
    ne $S10, ucs4:":", rx1124_fail
    add rx1124_pos, 1
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail
    nqp_rxmark rx1124_bstack, rxsubrule1132_pass, -1, 0
  rxsubrule1132_pass:
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
    goto alt1128_end
  alt1128_3:
    nqp_rxmark rx1124_bstack, alt1128_4, rx1124_pos, 0
    add $I11, rx1124_pos, 1
    gt $I11, rx1124_eos, rx1124_fail
    substr $S10, rx1124_tgt, rx1124_pos, 1
    ne $S10, ucs4:"(", rx1124_fail
    add rx1124_pos, 1
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail
    nqp_rxmark rx1124_bstack, rxsubrule1133_pass, -1, 0
  rxsubrule1133_pass:
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
    add $I11, rx1124_pos, 1
    gt $I11, rx1124_eos, rx1124_fail
    substr $S10, rx1124_tgt, rx1124_pos, 1
    ne $S10, ucs4:")", rx1124_fail
    add rx1124_pos, 1
    goto alt1128_end
  alt1128_4:
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail
    nqp_rxmark rx1124_bstack, rxsubrule1135_pass, -1, 0
  rxsubrule1135_pass:
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
  alt1128_end:
    nqp_rxpeek $I19, rx1124_bstack, rxquantr1127_done
    inc $I19
    inc $I19
    set rx1124_rep, rx1124_bstack[$I19]
    nqp_rxcommit rx1124_bstack, rxquantr1127_done
    inc rx1124_rep
  rxquantr1127_done:
    rx1124_cur."!cursor_pass"(rx1124_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1124_cur)
  rx1124_restart:
    repr_get_attr_obj rx1124_cstack, rx1124_cur, rx1124_curclass, "$!cstack"
  rx1124_fail:
    unless rx1124_bstack, rx1124_done
    pop $I19, rx1124_bstack
    if_null rx1124_cstack, rx1124_cstack_done
    unless rx1124_cstack, rx1124_cstack_done
    dec $I19
    set $P11, rx1124_cstack[$I19]
  rx1124_cstack_done:
    pop rx1124_rep, rx1124_bstack
    pop rx1124_pos, rx1124_bstack
    pop $I19, rx1124_bstack
    lt rx1124_pos, -1, rx1124_done
    lt rx1124_pos, 0, rx1124_fail
    eq $I19, 0, rx1124_fail
    if_null rx1124_cstack, rx1124_jump
    elements $I18, rx1124_bstack
    le $I18, 0, rx1124_cut
    dec $I18
    set $I18, rx1124_bstack[$I18]
  rx1124_cut:
    assign rx1124_cstack, $I18
  rx1124_jump:
    jump $I19
  rx1124_done:
    rx1124_cur."!cursor_fail"()
    .return (rx1124_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "245_1338064451.944_caps"  :subid("778_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    new $P104, "Hash"
    set $P104["longname"], 0
    set $P104["assertion"], 2
    set $P104["arglist"], 2
    set $P104["nibbler"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "245_1338064451.944_nfa"  :subid("779_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 62
    push $P106, 0
    push $P106, 2
    push $P106, 61
    push $P106, 3
    push $P106, 2
    push $P106, 58
    push $P106, 4
    push $P106, 2
    push $P106, 40
    push $P106, 5
    push $P106, 8
    push $P106, "normspace"
    push $P106, 7
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "assertion"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "arglist"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "LANG"
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 41
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "nibbler"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2715"  :anon :subid("244_1338064451.944") :method :outer("245_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    .lex unicode:"$\x{a2}", $P2719
    .local string rx1129_tgt
    .local int rx1129_pos
    .local int rx1129_off
    .local int rx1129_eos
    .local int rx1129_rep
    .local pmc rx1129_cur
    .local pmc rx1129_curclass
    .local pmc rx1129_bstack
    .local pmc rx1129_cstack
    (rx1129_cur, rx1129_tgt, rx1129_pos, rx1129_curclass, rx1129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1129_cur
    length rx1129_eos, rx1129_tgt
    eq $I19, 1, rx1129_restart
    repr_get_attr_int $I11, self, rx1129_curclass, "$!from"
    ne $I11, -1, rxscan1130_done
    goto rxscan1130_scan
  rxscan1130_loop:
    inc rx1129_pos
    gt rx1129_pos, rx1129_eos, rx1129_fail
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!from", rx1129_pos
  rxscan1130_scan:
    nqp_rxmark rx1129_bstack, rxscan1130_loop, rx1129_pos, 0
  rxscan1130_done:
    add $I11, rx1129_pos, 1
    gt $I11, rx1129_eos, rx1129_fail
    substr $S10, rx1129_tgt, rx1129_pos, 1
    ne $S10, ucs4:">", rx1129_fail
    add rx1129_pos, 1
    rx1129_cur."!cursor_pass"(rx1129_pos, 'backtrack'=>1)
    .return (rx1129_cur)
  rx1129_restart:
    repr_get_attr_obj rx1129_cstack, rx1129_cur, rx1129_curclass, "$!cstack"
  rx1129_fail:
    unless rx1129_bstack, rx1129_done
    pop $I19, rx1129_bstack
    if_null rx1129_cstack, rx1129_cstack_done
    unless rx1129_cstack, rx1129_cstack_done
    dec $I19
    set $P11, rx1129_cstack[$I19]
  rx1129_cstack_done:
    pop rx1129_rep, rx1129_bstack
    pop rx1129_pos, rx1129_bstack
    pop $I19, rx1129_bstack
    lt rx1129_pos, -1, rx1129_done
    lt rx1129_pos, 0, rx1129_fail
    eq $I19, 0, rx1129_fail
    if_null rx1129_cstack, rx1129_jump
    elements $I18, rx1129_bstack
    le $I18, 0, rx1129_cut
    dec $I18
    set $I18, rx1129_bstack[$I18]
  rx1129_cut:
    assign rx1129_cstack, $I18
  rx1129_jump:
    jump $I19
  rx1129_done:
    rx1129_cur."!cursor_fail"()
    .return (rx1129_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "244_1338064451.944_caps"  :subid("780_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "244_1338064451.944_nfa"  :subid("781_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<var>"  :subid("246_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2721
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    .lex "self", param_2721
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2722
    .lex "$/", $P2723
    .local string rx1136_tgt
    .local int rx1136_pos
    .local int rx1136_off
    .local int rx1136_eos
    .local int rx1136_rep
    .local pmc rx1136_cur
    .local pmc rx1136_curclass
    .local pmc rx1136_bstack
    .local pmc rx1136_cstack
    (rx1136_cur, rx1136_tgt, rx1136_pos, rx1136_curclass, rx1136_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1136_cur
    length rx1136_eos, rx1136_tgt
    eq $I19, 1, rx1136_restart
    repr_get_attr_int $I11, self, rx1136_curclass, "$!from"
    ne $I11, -1, rxscan1137_done
    goto rxscan1137_scan
  rxscan1137_loop:
    inc rx1136_pos
    gt rx1136_pos, rx1136_eos, rx1136_fail
    repr_bind_attr_int rx1136_cur, rx1136_curclass, "$!from", rx1136_pos
  rxscan1137_scan:
    nqp_rxmark rx1136_bstack, rxscan1137_loop, rx1136_pos, 0
  rxscan1137_done:
    ge rx1136_pos, rx1136_eos, rx1136_fail
    substr $S11, rx1136_tgt, rx1136_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1136_fail
    repr_bind_attr_int rx1136_cur, rx1136_curclass, "$!pos", rx1136_pos
    $P11 = rx1136_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1136_curclass, "$!pos"
    lt $I11, 0, rx1136_fail
    nqp_rxmark rx1136_bstack, rxsubrule1138_pass, -1, 0
  rxsubrule1138_pass:
    rx1136_cstack = rx1136_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1136_pos, $P11, rx1136_curclass, "$!pos"
    rx1136_cur."!cursor_pass"(rx1136_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1136_cur)
  rx1136_restart:
    repr_get_attr_obj rx1136_cstack, rx1136_cur, rx1136_curclass, "$!cstack"
  rx1136_fail:
    unless rx1136_bstack, rx1136_done
    pop $I19, rx1136_bstack
    if_null rx1136_cstack, rx1136_cstack_done
    unless rx1136_cstack, rx1136_cstack_done
    dec $I19
    set $P11, rx1136_cstack[$I19]
  rx1136_cstack_done:
    pop rx1136_rep, rx1136_bstack
    pop rx1136_pos, rx1136_bstack
    pop $I19, rx1136_bstack
    lt rx1136_pos, -1, rx1136_done
    lt rx1136_pos, 0, rx1136_fail
    eq $I19, 0, rx1136_fail
    if_null rx1136_cstack, rx1136_jump
    elements $I18, rx1136_bstack
    le $I18, 0, rx1136_cut
    dec $I18
    set $I18, rx1136_bstack[$I18]
  rx1136_cut:
    assign rx1136_cstack, $I18
  rx1136_jump:
    jump $I19
  rx1136_done:
    rx1136_cur."!cursor_fail"()
    .return (rx1136_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "246_1338064451.944_caps"  :subid("782_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    new $P104, "Hash"
    set $P104["var"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "246_1338064451.944_nfa"  :subid("783_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "$@"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "codeblock"  :subid("247_1338064451.944") :outer("749_1338064451.944")
    .param pmc param_2727
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    .lex "self", param_2727
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2728
    .lex "$/", $P2729
    .local string rx1139_tgt
    .local int rx1139_pos
    .local int rx1139_off
    .local int rx1139_eos
    .local int rx1139_rep
    .local pmc rx1139_cur
    .local pmc rx1139_curclass
    .local pmc rx1139_bstack
    .local pmc rx1139_cstack
    (rx1139_cur, rx1139_tgt, rx1139_pos, rx1139_curclass, rx1139_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1139_cur
    length rx1139_eos, rx1139_tgt
    eq $I19, 1, rx1139_restart
    repr_get_attr_int $I11, self, rx1139_curclass, "$!from"
    ne $I11, -1, rxscan1140_done
    goto rxscan1140_scan
  rxscan1140_loop:
    inc rx1139_pos
    gt rx1139_pos, rx1139_eos, rx1139_fail
    repr_bind_attr_int rx1139_cur, rx1139_curclass, "$!from", rx1139_pos
  rxscan1140_scan:
    nqp_rxmark rx1139_bstack, rxscan1140_loop, rx1139_pos, 0
  rxscan1140_done:
    repr_bind_attr_int rx1139_cur, rx1139_curclass, "$!pos", rx1139_pos
    $P11 = rx1139_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1139_curclass, "$!pos"
    lt $I11, 0, rx1139_fail
    nqp_rxmark rx1139_bstack, rxsubrule1141_pass, -1, 0
  rxsubrule1141_pass:
    rx1139_cstack = rx1139_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1139_pos, $P11, rx1139_curclass, "$!pos"
    rx1139_cur."!cursor_pass"(rx1139_pos, "codeblock", 'backtrack'=>1)
    .return (rx1139_cur)
  rx1139_restart:
    repr_get_attr_obj rx1139_cstack, rx1139_cur, rx1139_curclass, "$!cstack"
  rx1139_fail:
    unless rx1139_bstack, rx1139_done
    pop $I19, rx1139_bstack
    if_null rx1139_cstack, rx1139_cstack_done
    unless rx1139_cstack, rx1139_cstack_done
    dec $I19
    set $P11, rx1139_cstack[$I19]
  rx1139_cstack_done:
    pop rx1139_rep, rx1139_bstack
    pop rx1139_pos, rx1139_bstack
    pop $I19, rx1139_bstack
    lt rx1139_pos, -1, rx1139_done
    lt rx1139_pos, 0, rx1139_fail
    eq $I19, 0, rx1139_fail
    if_null rx1139_cstack, rx1139_jump
    elements $I18, rx1139_bstack
    le $I18, 0, rx1139_cut
    dec $I18
    set $I18, rx1139_bstack[$I18]
  rx1139_cut:
    assign rx1139_cstack, $I18
  rx1139_jump:
    jump $I19
  rx1139_done:
    rx1139_cur."!cursor_fail"()
    .return (rx1139_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "247_1338064451.944_caps"  :subid("784_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    new $P104, "Hash"
    set $P104["block"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "247_1338064451.944_nfa"  :subid("785_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "LANG"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2732"  :subid("786_1338064451.944") :outer("368_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1420
    .const 'Sub' $P3954 = "360_1338064451.944" 
    capture_lex $P3954
    .const 'Sub' $P3951 = "359_1338064451.944" 
    capture_lex $P3951
    .const 'Sub' $P3948 = "358_1338064451.944" 
    capture_lex $P3948
    .const 'Sub' $P3945 = "357_1338064451.944" 
    capture_lex $P3945
    .const 'Sub' $P3942 = "356_1338064451.944" 
    capture_lex $P3942
    .const 'Sub' $P3939 = "355_1338064451.944" 
    capture_lex $P3939
    .const 'Sub' $P3936 = "354_1338064451.944" 
    capture_lex $P3936
    .const 'Sub' $P3932 = "353_1338064451.944" 
    capture_lex $P3932
    .const 'Sub' $P3929 = "352_1338064451.944" 
    capture_lex $P3929
    .const 'Sub' $P3925 = "351_1338064451.944" 
    capture_lex $P3925
    .const 'Sub' $P3921 = "350_1338064451.944" 
    capture_lex $P3921
    .const 'Sub' $P3909 = "349_1338064451.944" 
    capture_lex $P3909
    .const 'Sub' $P3905 = "348_1338064451.944" 
    capture_lex $P3905
    .const 'Sub' $P3901 = "347_1338064451.944" 
    capture_lex $P3901
    .const 'Sub' $P3897 = "346_1338064451.944" 
    capture_lex $P3897
    .const 'Sub' $P3893 = "345_1338064451.944" 
    capture_lex $P3893
    .const 'Sub' $P3889 = "344_1338064451.944" 
    capture_lex $P3889
    .const 'Sub' $P3885 = "343_1338064451.944" 
    capture_lex $P3885
    .const 'Sub' $P3873 = "342_1338064451.944" 
    capture_lex $P3873
    .const 'Sub' $P3866 = "341_1338064451.944" 
    capture_lex $P3866
    .const 'Sub' $P3862 = "340_1338064451.944" 
    capture_lex $P3862
    .const 'Sub' $P3858 = "339_1338064451.944" 
    capture_lex $P3858
    .const 'Sub' $P3854 = "338_1338064451.944" 
    capture_lex $P3854
    .const 'Sub' $P3850 = "337_1338064451.944" 
    capture_lex $P3850
    .const 'Sub' $P3846 = "336_1338064451.944" 
    capture_lex $P3846
    .const 'Sub' $P3837 = "335_1338064451.944" 
    capture_lex $P3837
    .const 'Sub' $P3819 = "334_1338064451.944" 
    capture_lex $P3819
    .const 'Sub' $P3815 = "333_1338064451.944" 
    capture_lex $P3815
    .const 'Sub' $P3811 = "332_1338064451.944" 
    capture_lex $P3811
    .const 'Sub' $P3802 = "331_1338064451.944" 
    capture_lex $P3802
    .const 'Sub' $P3795 = "330_1338064451.944" 
    capture_lex $P3795
    .const 'Sub' $P3791 = "329_1338064451.944" 
    capture_lex $P3791
    .const 'Sub' $P3787 = "328_1338064451.944" 
    capture_lex $P3787
    .const 'Sub' $P3756 = "327_1338064451.944" 
    capture_lex $P3756
    .const 'Sub' $P3752 = "326_1338064451.944" 
    capture_lex $P3752
    .const 'Sub' $P3749 = "325_1338064451.944" 
    capture_lex $P3749
    .const 'Sub' $P3737 = "324_1338064451.944" 
    capture_lex $P3737
    .const 'Sub' $P3733 = "323_1338064451.944" 
    capture_lex $P3733
    .const 'Sub' $P3723 = "322_1338064451.944" 
    capture_lex $P3723
    .const 'Sub' $P3704 = "321_1338064451.944" 
    capture_lex $P3704
    .const 'Sub' $P3698 = "320_1338064451.944" 
    capture_lex $P3698
    .const 'Sub' $P3695 = "319_1338064451.944" 
    capture_lex $P3695
    .const 'Sub' $P3675 = "318_1338064451.944" 
    capture_lex $P3675
    .const 'Sub' $P3650 = "317_1338064451.944" 
    capture_lex $P3650
    .const 'Sub' $P3614 = "316_1338064451.944" 
    capture_lex $P3614
    .const 'Sub' $P3610 = "315_1338064451.944" 
    capture_lex $P3610
    .const 'Sub' $P3592 = "314_1338064451.944" 
    capture_lex $P3592
    .const 'Sub' $P3585 = "313_1338064451.944" 
    capture_lex $P3585
    .const 'Sub' $P3580 = "312_1338064451.944" 
    capture_lex $P3580
    .const 'Sub' $P3543 = "311_1338064451.944" 
    capture_lex $P3543
    .const 'Sub' $P3524 = "310_1338064451.944" 
    capture_lex $P3524
    .const 'Sub' $P3490 = "309_1338064451.944" 
    capture_lex $P3490
    .const 'Sub' $P3413 = "308_1338064451.944" 
    capture_lex $P3413
    .const 'Sub' $P3409 = "307_1338064451.944" 
    capture_lex $P3409
    .const 'Sub' $P3405 = "306_1338064451.944" 
    capture_lex $P3405
    .const 'Sub' $P3365 = "305_1338064451.944" 
    capture_lex $P3365
    .const 'Sub' $P3361 = "304_1338064451.944" 
    capture_lex $P3361
    .const 'Sub' $P3354 = "303_1338064451.944" 
    capture_lex $P3354
    .const 'Sub' $P3347 = "302_1338064451.944" 
    capture_lex $P3347
    .const 'Sub' $P3340 = "301_1338064451.944" 
    capture_lex $P3340
    .const 'Sub' $P3330 = "300_1338064451.944" 
    capture_lex $P3330
    .const 'Sub' $P3326 = "299_1338064451.944" 
    capture_lex $P3326
    .const 'Sub' $P3322 = "298_1338064451.944" 
    capture_lex $P3322
    .const 'Sub' $P3318 = "297_1338064451.944" 
    capture_lex $P3318
    .const 'Sub' $P3251 = "296_1338064451.944" 
    capture_lex $P3251
    .const 'Sub' $P3225 = "295_1338064451.944" 
    capture_lex $P3225
    .const 'Sub' $P3221 = "294_1338064451.944" 
    capture_lex $P3221
    .const 'Sub' $P3217 = "293_1338064451.944" 
    capture_lex $P3217
    .const 'Sub' $P3213 = "292_1338064451.944" 
    capture_lex $P3213
    .const 'Sub' $P3209 = "291_1338064451.944" 
    capture_lex $P3209
    .const 'Sub' $P3205 = "290_1338064451.944" 
    capture_lex $P3205
    .const 'Sub' $P3201 = "289_1338064451.944" 
    capture_lex $P3201
    .const 'Sub' $P3146 = "288_1338064451.944" 
    capture_lex $P3146
    .const 'Sub' $P3128 = "287_1338064451.944" 
    capture_lex $P3128
    .const 'Sub' $P3122 = "286_1338064451.944" 
    capture_lex $P3122
    .const 'Sub' $P3118 = "285_1338064451.944" 
    capture_lex $P3118
    .const 'Sub' $P3114 = "284_1338064451.944" 
    capture_lex $P3114
    .const 'Sub' $P3110 = "283_1338064451.944" 
    capture_lex $P3110
    .const 'Sub' $P3106 = "282_1338064451.944" 
    capture_lex $P3106
    .const 'Sub' $P3102 = "281_1338064451.944" 
    capture_lex $P3102
    .const 'Sub' $P3098 = "280_1338064451.944" 
    capture_lex $P3098
    .const 'Sub' $P3094 = "279_1338064451.944" 
    capture_lex $P3094
    .const 'Sub' $P3090 = "278_1338064451.944" 
    capture_lex $P3090
    .const 'Sub' $P3086 = "277_1338064451.944" 
    capture_lex $P3086
    .const 'Sub' $P3082 = "276_1338064451.944" 
    capture_lex $P3082
    .const 'Sub' $P3078 = "275_1338064451.944" 
    capture_lex $P3078
    .const 'Sub' $P3074 = "274_1338064451.944" 
    capture_lex $P3074
    .const 'Sub' $P3070 = "273_1338064451.944" 
    capture_lex $P3070
    .const 'Sub' $P3063 = "272_1338064451.944" 
    capture_lex $P3063
    .const 'Sub' $P3056 = "271_1338064451.944" 
    capture_lex $P3056
    .const 'Sub' $P3052 = "270_1338064451.944" 
    capture_lex $P3052
    .const 'Sub' $P3048 = "269_1338064451.944" 
    capture_lex $P3048
    .const 'Sub' $P3043 = "268_1338064451.944" 
    capture_lex $P3043
    .const 'Sub' $P3038 = "267_1338064451.944" 
    capture_lex $P3038
    .const 'Sub' $P3029 = "266_1338064451.944" 
    capture_lex $P3029
    .const 'Sub' $P3018 = "265_1338064451.944" 
    capture_lex $P3018
    .const 'Sub' $P3012 = "264_1338064451.944" 
    capture_lex $P3012
    .const 'Sub' $P3007 = "263_1338064451.944" 
    capture_lex $P3007
    .const 'Sub' $P2988 = "262_1338064451.944" 
    capture_lex $P2988
    .const 'Sub' $P2982 = "261_1338064451.944" 
    capture_lex $P2982
    .const 'Sub' $P2979 = "260_1338064451.944" 
    capture_lex $P2979
    .const 'Sub' $P2976 = "259_1338064451.944" 
    capture_lex $P2976
    .const 'Sub' $P2956 = "258_1338064451.944" 
    capture_lex $P2956
    .const 'Sub' $P2953 = "257_1338064451.944" 
    capture_lex $P2953
    .const 'Sub' $P2941 = "256_1338064451.944" 
    capture_lex $P2941
    .const 'Sub' $P2937 = "255_1338064451.944" 
    capture_lex $P2937
    .const 'Sub' $P2933 = "254_1338064451.944" 
    capture_lex $P2933
    .const 'Sub' $P2928 = "253_1338064451.944" 
    capture_lex $P2928
    .const 'Sub' $P2899 = "252_1338064451.944" 
    capture_lex $P2899
    .const 'Sub' $P2881 = "251_1338064451.944" 
    capture_lex $P2881
    .const 'Sub' $P2872 = "250_1338064451.944" 
    capture_lex $P2872
    .const 'Sub' $P2862 = "249_1338064451.944" 
    capture_lex $P2862
    .const 'Sub' $P2858 = "248_1338064451.944" 
    capture_lex $P2858
    .const 'Sub' $P2829 = "802_1338064451.944" 
    capture_lex $P2829
    .const 'Sub' $P2824 = "801_1338064451.944" 
    capture_lex $P2824
    .const 'Sub' $P2806 = "799_1338064451.944" 
    capture_lex $P2806
    .const 'Sub' $P2787 = "797_1338064451.944" 
    capture_lex $P2787
    .const 'Sub' $P2783 = "796_1338064451.944" 
    capture_lex $P2783
    .const 'Sub' $P2775 = "795_1338064451.944" 
    capture_lex $P2775
    .const 'Sub' $P2765 = "793_1338064451.944" 
    capture_lex $P2765
    .const 'Sub' $P2760 = "792_1338064451.944" 
    capture_lex $P2760
    .const 'Sub' $P2754 = "791_1338064451.944" 
    capture_lex $P2754
    .const 'Sub' $P2741 = "788_1338064451.944" 
    capture_lex $P2741
    .const 'Sub' $P2735 = "787_1338064451.944" 
    capture_lex $P2735
.annotate 'line', 1421
    .const 'Sub' $P2735 = "787_1338064451.944" 
    newclosure $P2739, $P2735
    set $P2734, $P2739
    .lex "xblock_immediate", $P2734
.annotate 'line', 1426
    .const 'Sub' $P2741 = "788_1338064451.944" 
    newclosure $P2752, $P2741
    set $P2740, $P2752
    .lex "block_immediate", $P2740
.annotate 'line', 1436
    .const 'Sub' $P2754 = "791_1338064451.944" 
    newclosure $P2758, $P2754
    set $P2753, $P2758
    .lex "vivitype", $P2753
.annotate 'line', 1455
    .const 'Sub' $P2760 = "792_1338064451.944" 
    newclosure $P2763, $P2760
    set $P2759, $P2763
    .lex "colonpair_str", $P2759
.annotate 'line', 1635
    .const 'Sub' $P2765 = "793_1338064451.944" 
    newclosure $P2773, $P2765
    set $P2764, $P2773
    .lex "import_HOW_exports", $P2764
.annotate 'line', 1740
    .const 'Sub' $P2775 = "795_1338064451.944" 
    newclosure $P2781, $P2775
    set $P2774, $P2781
    .lex "push_block_handler", $P2774
.annotate 'line', 2305
    .const 'Sub' $P2783 = "796_1338064451.944" 
    newclosure $P2785, $P2783
    set $P2782, $P2785
    .lex "only_star_block", $P2782
.annotate 'line', 2314
    .const 'Sub' $P2787 = "797_1338064451.944" 
    newclosure $P2804, $P2787
    set $P2786, $P2804
    .lex "attach_multi_signature", $P2786
.annotate 'line', 2327
    .const 'Sub' $P2806 = "799_1338064451.944" 
    newclosure $P2822, $P2806
    set $P2805, $P2822
    .lex "attach_multi_signature_to_parrot_sub", $P2805
.annotate 'line', 2786
    .const 'Sub' $P2824 = "801_1338064451.944" 
    newclosure $P2827, $P2824
    set $P2823, $P2827
    .lex "control", $P2823
.annotate 'line', 2805
    .const 'Sub' $P2829 = "802_1338064451.944" 
    newclosure $P2855, $P2829
    set $P2828, $P2855
    .lex "lexical_package_lookup", $P2828
.annotate 'line', 1420
    .lex "$?PACKAGE", $P2856
    .lex "$?CLASS", $P2857
    set $P118, $P2734
    set $P118, $P2740
    set $P118, $P2753
    set $P118, $P2759
    set $P118, $P2764
    set $P118, $P2774
    set $P118, $P2782
    set $P118, $P2786
    set $P118, $P2805
    set $P118, $P2823
    set $P118, $P2828
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock_immediate"  :subid("787_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2736
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1421
    .lex "$xblock", param_2736
.annotate 'line', 1422
    set $P2737, param_2736
    unless_null $P2737, vivify_1381
    $P2737 = root_new ['parrot';'ResizablePMCArray']
  vivify_1381:
    set $P103, $P2737[1]
    unless_null $P103, vivify_1382
    new $P103, "Undef"
  vivify_1382:
    $P104 = "block_immediate"($P103)
    set $P2738, param_2736
    unless_null $P2738, vivify_1383
    $P2738 = root_new ['parrot';'ResizablePMCArray']
    set param_2736, $P2738
  vivify_1383:
    set $P2738[1], $P104
.annotate 'line', 1421
    set $P103, param_2736
    unless_null $P103, vivify_1384
    new $P103, "Undef"
  vivify_1384:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block_immediate"  :subid("788_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2742
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1426
    .const 'Sub' $P2746 = "789_1338064451.944" 
    capture_lex $P2746
    .lex "$block", param_2742
.annotate 'line', 1427
    set $P104, param_2742
    unless_null $P104, vivify_1385
    new $P104, "Undef"
  vivify_1385:
    $P104."blocktype"("immediate")
.annotate 'line', 1428
    set $P105, param_2742
    unless_null $P105, vivify_1386
    new $P105, "Undef"
  vivify_1386:
    $P106 = $P105."symtable"()
    unless $P106, unless_2744
    set $P104, $P106
    goto unless_2744_end
  unless_2744:
    set $P107, param_2742
    unless_null $P107, vivify_1387
    new $P107, "Undef"
  vivify_1387:
    $P108 = $P107."handlers"()
    set $P104, $P108
  unless_2744_end:
    if $P104, unless_2743_end
    .const 'Sub' $P2746 = "789_1338064451.944" 
    capture_lex $P2746
    $P2746()
  unless_2743_end:
.annotate 'line', 1426
    set $P104, param_2742
    unless_null $P104, vivify_1394
    new $P104, "Undef"
  vivify_1394:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2745"  :anon :subid("789_1338064451.944") :outer("788_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1428
    .const 'Sub' $P2749 = "790_1338064451.944" 
    capture_lex $P2749
.annotate 'line', 1429
    new $P109, "Undef"
    set $P2747, $P109
    .lex "$stmts", $P2747
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    find_lex $P114, "$block"
    unless_null $P114, vivify_1388
    new $P114, "Undef"
  vivify_1388:
    $P115 = $P113."new"($P114 :named("node"))
    set $P2747, $P115
.annotate 'line', 1430
    find_lex $P111, "$block"
    unless_null $P111, vivify_1389
    new $P111, "Undef"
  vivify_1389:
    $P112 = $P111."list"()
    defined $I100, $P112
    unless $I100, for_undef_1390
    iter $P110, $P112
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop2751_handler
    push_eh $P114
  loop2751_test:
    unless $P110, loop2751_done
    shift $P113, $P110
  loop2751_redo:
    .const 'Sub' $P2749 = "790_1338064451.944" 
    capture_lex $P2749
    $P2749($P113)
  loop2751_next:
    goto loop2751_test
  loop2751_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop2751_next
    eq $P115, .CONTROL_LOOP_REDO, loop2751_redo
  loop2751_done:
    pop_eh 
  for_undef_1390:
.annotate 'line', 1431
    set $P110, $P2747
    unless_null $P110, vivify_1393
    new $P110, "Undef"
  vivify_1393:
    store_lex "$block", $P110
.annotate 'line', 1428
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2748"  :anon :subid("790_1338064451.944") :outer("789_1338064451.944")
    .param pmc param_2750
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1430
    .lex "$_", param_2750
    find_lex $P114, "$stmts"
    unless_null $P114, vivify_1391
    new $P114, "Undef"
  vivify_1391:
    find_lex $P115, "$_"
    unless_null $P115, vivify_1392
    new $P115, "Undef"
  vivify_1392:
    $P116 = $P114."push"($P115)
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "vivitype"  :subid("791_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2755
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1436
    .lex "$sigil", param_2755
.annotate 'line', 1437
    set $P106, param_2755
    unless_null $P106, vivify_1395
    new $P106, "Undef"
  vivify_1395:
    set $S100, $P106
    iseq $I100, $S100, "%"
    if $I100, if_2756
.annotate 'line', 1439
    set $P113, param_2755
    unless_null $P113, vivify_1396
    new $P113, "Undef"
  vivify_1396:
    set $S101, $P113
    iseq $I101, $S101, "@"
    if $I101, if_2757
    new $P119, "String"
    assign $P119, "Undef"
    set $P112, $P119
    goto if_2757_end
  if_2757:
.annotate 'line', 1440
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    $P118 = $P117."new"("    %r = root_new ['parrot';'ResizablePMCArray']" :named("inline"))
    set $P112, $P118
  if_2757_end:
    set $P105, $P112
.annotate 'line', 1437
    goto if_2756_end
  if_2756:
.annotate 'line', 1438
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    $P111 = $P110."new"("    %r = root_new ['parrot';'Hash']" :named("inline"))
    set $P105, $P111
  if_2756_end:
.annotate 'line', 1436
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair_str"  :subid("792_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2761
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1455
    .lex "$ast", param_2761
.annotate 'line', 1456
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    set $P111, param_2761
    unless_null $P111, vivify_1397
    new $P111, "Undef"
  vivify_1397:
    $P112 = $P110."ACCEPTS"($P111)
    if $P112, if_2762
.annotate 'line', 1458
    set $P115, param_2761
    unless_null $P115, vivify_1398
    new $P115, "Undef"
  vivify_1398:
    $P116 = $P115."value"()
    set $P106, $P116
.annotate 'line', 1456
    goto if_2762_end
  if_2762:
.annotate 'line', 1457
    set $P113, param_2761
    unless_null $P113, vivify_1399
    new $P113, "Undef"
  vivify_1399:
    $P114 = $P113."list"()
    join $S100, " ", $P114
    new $P106, 'String'
    set $P106, $S100
  if_2762_end:
.annotate 'line', 1455
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "import_HOW_exports"  :subid("793_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2766
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1635
    .const 'Sub' $P2770 = "794_1338064451.944" 
    capture_lex $P2770
    .lex "$UNIT", param_2766
.annotate 'line', 1637
    set $P108, param_2766
    unless_null $P108, vivify_1400
    new $P108, "Undef"
  vivify_1400:
    exists $I100, $P108["EXPORTHOW"]
    if $I100, if_2767
    new $P107, 'Integer'
    set $P107, $I100
    goto if_2767_end
  if_2767:
.annotate 'line', 1638
    set $P2768, param_2766
    unless_null $P2768, vivify_1401
    $P2768 = root_new ['parrot';'Hash']
  vivify_1401:
    set $P110, $P2768["EXPORTHOW"]
    unless_null $P110, vivify_1402
    new $P110, "Undef"
  vivify_1402:
    get_who $P111, $P110
    defined $I101, $P111
    unless $I101, for_undef_1403
    iter $P109, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2772_handler
    push_eh $P113
  loop2772_test:
    unless $P109, loop2772_done
    shift $P112, $P109
  loop2772_redo:
    .const 'Sub' $P2770 = "794_1338064451.944" 
    capture_lex $P2770
    $P2770($P112)
  loop2772_next:
    goto loop2772_test
  loop2772_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop2772_next
    eq $P115, .CONTROL_LOOP_REDO, loop2772_redo
  loop2772_done:
    pop_eh 
  for_undef_1403:
.annotate 'line', 1637
    set $P107, $P109
  if_2767_end:
.annotate 'line', 1635
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2769"  :anon :subid("794_1338064451.944") :outer("793_1338064451.944")
    .param pmc param_2771
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1638
    .lex "$_", param_2771
.annotate 'line', 1639
    find_lex $P113, "$_"
    unless_null $P113, vivify_1404
    new $P113, "Undef"
  vivify_1404:
    $P114 = $P113."value"()
    find_lex $P115, "$_"
    unless_null $P115, vivify_1405
    new $P115, "Undef"
  vivify_1405:
    $P116 = $P115."key"()
    find_dynamic_lex $P119, "%*HOW"
    unless_null $P119, vivify_1406
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["%HOW"]
    unless_null $P119, vivify_1407
    die "Contextual %*HOW not found"
  vivify_1407:
    store_dynamic_lex "%*HOW", $P119
  vivify_1406:
    set $P119[$P116], $P114
.annotate 'line', 1638
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "push_block_handler"  :subid("795_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2776
    .param pmc param_2777
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1740
    .lex "$/", param_2776
    .lex "$block", param_2777
.annotate 'line', 1741
    new $P108, "Undef"
    set $P2778, $P108
    .lex "$BLOCK", $P2778
    find_dynamic_lex $P111, "$*W"
    unless_null $P111, vivify_1408
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$W"]
    unless_null $P111, vivify_1409
    die "Contextual $*W not found"
  vivify_1409:
  vivify_1408:
    $P112 = $P111."cur_lexpad"()
    set $P2778, $P112
.annotate 'line', 1742
    set $P109, $P2778
    unless_null $P109, vivify_1410
    new $P109, "Undef"
  vivify_1410:
    $P110 = $P109."handlers"()
    if $P110, unless_2779_end
.annotate 'line', 1743
    set $P111, $P2778
    unless_null $P111, vivify_1411
    new $P111, "Undef"
  vivify_1411:
    new $P112, "ResizablePMCArray"
    $P111."handlers"($P112)
  unless_2779_end:
.annotate 'line', 1745
    set $P109, param_2777
    unless_null $P109, vivify_1412
    new $P109, "Undef"
  vivify_1412:
    $P110 = $P109."arity"()
    if $P110, unless_2780_end
.annotate 'line', 1746
    set $P111, param_2777
    unless_null $P111, vivify_1413
    new $P111, "Undef"
  vivify_1413:
.annotate 'line', 1747
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 1748
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"("lexical" :named("scope"), "$!" :named("name"), 1 :named("isdecl"))
.annotate 'line', 1749
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Var"]
    $P125 = $P124."new"("lexical" :named("scope"), "$_" :named("name"))
    $P126 = $P115."new"($P120, $P125, "bind_6model" :named("pasttype"))
.annotate 'line', 1747
    $P111."unshift"($P126)
.annotate 'line', 1752
    set $P111, param_2777
    unless_null $P111, vivify_1414
    new $P111, "Undef"
  vivify_1414:
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Var"]
    $P116 = $P115."new"("$_" :named("name"), "parameter" :named("scope"))
    $P111."unshift"($P116)
.annotate 'line', 1753
    set $P111, param_2777
    unless_null $P111, vivify_1415
    new $P111, "Undef"
  vivify_1415:
    $P111."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1754
    set $P111, param_2777
    unless_null $P111, vivify_1416
    new $P111, "Undef"
  vivify_1416:
    $P111."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1755
    set $P111, param_2777
    unless_null $P111, vivify_1417
    new $P111, "Undef"
  vivify_1417:
    $P111."arity"(1)
  unless_2780_end:
.annotate 'line', 1757
    set $P109, param_2777
    unless_null $P109, vivify_1418
    new $P109, "Undef"
  vivify_1418:
    $P109."blocktype"("declaration")
.annotate 'line', 1758
    set $P109, $P2778
    unless_null $P109, vivify_1419
    new $P109, "Undef"
  vivify_1419:
    $P110 = $P109."handlers"()
.annotate 'line', 1759
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Control"]
    set $P115, param_2776
    unless_null $P115, vivify_1420
    new $P115, "Undef"
  vivify_1420:
.annotate 'line', 1761
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmts"]
.annotate 'line', 1762
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    set $P124, param_2777
    unless_null $P124, vivify_1421
    new $P124, "Undef"
  vivify_1421:
.annotate 'line', 1764
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("register" :named("scope"), "exception" :named("name"))
    $P130 = $P123."new"($P124, $P129, "call" :named("pasttype"))
.annotate 'line', 1766
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Op"]
.annotate 'line', 1767
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Var"]
.annotate 'line', 1768
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Var"]
    $P143 = $P142."new"("register" :named("scope"), "exception" :named("name"))
    $P144 = $P138."new"($P143, "handled", "keyed" :named("scope"))
.annotate 'line', 1767
    $P145 = $P134."new"($P144, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1766
    $P146 = $P119."new"($P130, $P145)
.annotate 'line', 1761
    $P147 = $P114."new"($P146, $P115 :named("node"))
.annotate 'line', 1759
    $P148 = $P110."unshift"($P147)
.annotate 'line', 1740
    .return ($P148)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "only_star_block"  :subid("796_1338064451.944") :outer("786_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2306
    new $P109, "Undef"
    set $P2784, $P109
    .lex "$past", $P2784
    find_dynamic_lex $P112, "$*W"
    unless_null $P112, vivify_1422
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$W"]
    unless_null $P112, vivify_1423
    die "Contextual $*W not found"
  vivify_1423:
  vivify_1422:
    $P113 = $P112."pop_lexpad"()
    set $P2784, $P113
.annotate 'line', 2307
    set $P110, $P2784
    unless_null $P110, vivify_1424
    new $P110, "Undef"
  vivify_1424:
    $P110."closure"(1)
.annotate 'line', 2308
    set $P110, $P2784
    unless_null $P110, vivify_1425
    new $P110, "Undef"
  vivify_1425:
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
    $P115 = $P114."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P110."push"($P115)
.annotate 'line', 2305
    set $P110, $P2784
    unless_null $P110, vivify_1426
    new $P110, "Undef"
  vivify_1426:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature"  :subid("797_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2788
    .param pmc param_2789
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2314
    .const 'Sub' $P2794 = "798_1338064451.944" 
    capture_lex $P2794
    .lex "$code_obj", param_2788
    .lex "$routine", param_2789
.annotate 'line', 2315
    new $P111, "Undef"
    set $P2790, $P111
    .lex "$types", $P2790
.annotate 'line', 2316
    new $P112, "Undef"
    set $P2791, $P112
    .lex "$definednesses", $P2791
.annotate 'line', 2315
    new $P113, "ResizablePMCArray"
    set $P2790, $P113
.annotate 'line', 2316
    new $P113, "ResizablePMCArray"
    set $P2791, $P113
.annotate 'line', 2317
    set $P2792, param_2789
    unless_null $P2792, vivify_1427
    $P2792 = root_new ['parrot';'ResizablePMCArray']
  vivify_1427:
    set $P114, $P2792[0]
    unless_null $P114, vivify_1428
    new $P114, "Undef"
  vivify_1428:
    $P115 = $P114."list"()
    defined $I100, $P115
    unless $I100, for_undef_1429
    iter $P113, $P115
    new $P118, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P118, loop2803_handler
    push_eh $P118
  loop2803_test:
    unless $P113, loop2803_done
    shift $P116, $P113
  loop2803_redo:
    .const 'Sub' $P2794 = "798_1338064451.944" 
    capture_lex $P2794
    $P2794($P116)
  loop2803_next:
    goto loop2803_test
  loop2803_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P119, exception, 'type'
    eq $P119, .CONTROL_LOOP_NEXT, loop2803_next
    eq $P119, .CONTROL_LOOP_REDO, loop2803_redo
  loop2803_done:
    pop_eh 
  for_undef_1429:
.annotate 'line', 2324
    find_dynamic_lex $P115, "$*W"
    unless_null $P115, vivify_1441
    get_hll_global $P113, "GLOBAL"
    get_who $P114, $P113
    set $P115, $P114["$W"]
    unless_null $P115, vivify_1442
    die "Contextual $*W not found"
  vivify_1442:
  vivify_1441:
    set $P116, param_2788
    unless_null $P116, vivify_1443
    new $P116, "Undef"
  vivify_1443:
    set $P117, $P2790
    unless_null $P117, vivify_1444
    new $P117, "Undef"
  vivify_1444:
    set $P118, $P2791
    unless_null $P118, vivify_1445
    new $P118, "Undef"
  vivify_1445:
    $P119 = $P115."set_routine_signature"($P116, $P117, $P118)
.annotate 'line', 2314
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2793"  :anon :subid("798_1338064451.944") :outer("797_1338064451.944")
    .param pmc param_2795
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2317
    .lex "$_", param_2795
.annotate 'line', 2318
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Var"]
    find_lex $P123, "$_"
    unless_null $P123, vivify_1430
    new $P123, "Undef"
  vivify_1430:
    $P124 = $P122."ACCEPTS"($P123)
    if $P124, if_2797
    set $P118, $P124
    goto if_2797_end
  if_2797:
    find_lex $P125, "$_"
    unless_null $P125, vivify_1431
    new $P125, "Undef"
  vivify_1431:
    $S100 = $P125."scope"()
    iseq $I101, $S100, "parameter"
    new $P118, 'Integer'
    set $P118, $I101
  if_2797_end:
    if $P118, if_2796
    set $P117, $P118
    goto if_2796_end
  if_2796:
.annotate 'line', 2319
    find_lex $P126, "$types"
    unless_null $P126, vivify_1432
    new $P126, "Undef"
  vivify_1432:
    find_lex $P128, "$_"
    unless_null $P128, vivify_1433
    new $P128, "Undef"
  vivify_1433:
    $P129 = $P128."multitype"()
    if $P129, if_2798
    null $P133
    set $P127, $P133
    goto if_2798_end
  if_2798:
    find_lex $P130, "$_"
    unless_null $P130, vivify_1434
    new $P130, "Undef"
  vivify_1434:
    $P131 = $P130."multitype"()
    set $P132, $P131["compile_time_value"]
    unless_null $P132, vivify_1435
    new $P132, "Undef"
  vivify_1435:
    set $P127, $P132
  if_2798_end:
    $P126."push"($P127)
.annotate 'line', 2320
    find_lex $P126, "$definednesses"
    unless_null $P126, vivify_1436
    new $P126, "Undef"
  vivify_1436:
    find_lex $P2800, "$_"
    unless_null $P2800, vivify_1437
    $P2800 = root_new ['parrot';'Hash']
  vivify_1437:
    set $P128, $P2800["definedness"]
    unless_null $P128, vivify_1438
    new $P128, "Undef"
  vivify_1438:
    set $S101, $P128
    iseq $I102, $S101, "D"
    if $I102, if_2799
.annotate 'line', 2321
    find_lex $P2802, "$_"
    unless_null $P2802, vivify_1439
    $P2802 = root_new ['parrot';'Hash']
  vivify_1439:
    set $P131, $P2802["definedness"]
    unless_null $P131, vivify_1440
    new $P131, "Undef"
  vivify_1440:
    set $S102, $P131
    iseq $I103, $S102, "U"
    if $I103, if_2801
    new $P133, "Float"
    assign $P133, 0
    set $P130, $P133
    goto if_2801_end
  if_2801:
    new $P132, "Float"
    assign $P132, 2
    set $P130, $P132
  if_2801_end:
    set $P127, $P130
.annotate 'line', 2320
    goto if_2799_end
  if_2799:
    new $P129, "Float"
    assign $P129, 1
    set $P127, $P129
  if_2799_end:
    $P134 = $P126."push"($P127)
.annotate 'line', 2318
    set $P117, $P134
  if_2796_end:
.annotate 'line', 2317
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature_to_parrot_sub"  :subid("799_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2807
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2327
    .const 'Sub' $P2812 = "800_1338064451.944" 
    capture_lex $P2812
    .lex "$routine", param_2807
.annotate 'line', 2331
    new $P113, "Undef"
    set $P2808, $P113
    .lex "$types", $P2808
.annotate 'line', 2332
    new $P114, "Undef"
    set $P2809, $P114
    .lex "$definednesses", $P2809
.annotate 'line', 2331
    new $P115, "ResizablePMCArray"
    set $P2808, $P115
.annotate 'line', 2332
    new $P115, "ResizablePMCArray"
    set $P2809, $P115
.annotate 'line', 2333
    set $P2810, param_2807
    unless_null $P2810, vivify_1446
    $P2810 = root_new ['parrot';'ResizablePMCArray']
  vivify_1446:
    set $P116, $P2810[0]
    unless_null $P116, vivify_1447
    new $P116, "Undef"
  vivify_1447:
    $P117 = $P116."list"()
    defined $I100, $P117
    unless $I100, for_undef_1448
    iter $P115, $P117
    new $P121, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P121, loop2821_handler
    push_eh $P121
  loop2821_test:
    unless $P115, loop2821_done
    shift $P118, $P115
  loop2821_redo:
    .const 'Sub' $P2812 = "800_1338064451.944" 
    capture_lex $P2812
    $P2812($P118)
  loop2821_next:
    goto loop2821_test
  loop2821_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P122, exception, 'type'
    eq $P122, .CONTROL_LOOP_NEXT, loop2821_next
    eq $P122, .CONTROL_LOOP_REDO, loop2821_redo
  loop2821_done:
    pop_eh 
  for_undef_1448:
.annotate 'line', 2340
    find_dynamic_lex $P117, "$*W"
    unless_null $P117, vivify_1460
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["$W"]
    unless_null $P117, vivify_1461
    die "Contextual $*W not found"
  vivify_1461:
  vivify_1460:
    set $P118, param_2807
    unless_null $P118, vivify_1462
    new $P118, "Undef"
  vivify_1462:
    set $P120, $P2808
    unless_null $P120, vivify_1463
    new $P120, "Undef"
  vivify_1463:
    set $P121, $P2809
    unless_null $P121, vivify_1464
    new $P121, "Undef"
  vivify_1464:
    $P122 = $P117."set_routine_signature_on_parrot_sub"($P118, $P120, $P121)
.annotate 'line', 2327
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2811"  :anon :subid("800_1338064451.944") :outer("799_1338064451.944")
    .param pmc param_2813
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2333
    .lex "$_", param_2813
.annotate 'line', 2334
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    find_lex $P126, "$_"
    unless_null $P126, vivify_1449
    new $P126, "Undef"
  vivify_1449:
    $P127 = $P125."ACCEPTS"($P126)
    if $P127, if_2815
    set $P121, $P127
    goto if_2815_end
  if_2815:
    find_lex $P128, "$_"
    unless_null $P128, vivify_1450
    new $P128, "Undef"
  vivify_1450:
    $S100 = $P128."scope"()
    iseq $I101, $S100, "parameter"
    new $P121, 'Integer'
    set $P121, $I101
  if_2815_end:
    if $P121, if_2814
    set $P120, $P121
    goto if_2814_end
  if_2814:
.annotate 'line', 2335
    find_lex $P129, "$types"
    unless_null $P129, vivify_1451
    new $P129, "Undef"
  vivify_1451:
    find_lex $P131, "$_"
    unless_null $P131, vivify_1452
    new $P131, "Undef"
  vivify_1452:
    $P132 = $P131."multitype"()
    if $P132, if_2816
    null $P136
    set $P130, $P136
    goto if_2816_end
  if_2816:
    find_lex $P133, "$_"
    unless_null $P133, vivify_1453
    new $P133, "Undef"
  vivify_1453:
    $P134 = $P133."multitype"()
    set $P135, $P134["compile_time_value"]
    unless_null $P135, vivify_1454
    new $P135, "Undef"
  vivify_1454:
    set $P130, $P135
  if_2816_end:
    $P129."push"($P130)
.annotate 'line', 2336
    find_lex $P129, "$definednesses"
    unless_null $P129, vivify_1455
    new $P129, "Undef"
  vivify_1455:
    find_lex $P2818, "$_"
    unless_null $P2818, vivify_1456
    $P2818 = root_new ['parrot';'Hash']
  vivify_1456:
    set $P131, $P2818["definedness"]
    unless_null $P131, vivify_1457
    new $P131, "Undef"
  vivify_1457:
    set $S101, $P131
    iseq $I102, $S101, "D"
    if $I102, if_2817
.annotate 'line', 2337
    find_lex $P2820, "$_"
    unless_null $P2820, vivify_1458
    $P2820 = root_new ['parrot';'Hash']
  vivify_1458:
    set $P134, $P2820["definedness"]
    unless_null $P134, vivify_1459
    new $P134, "Undef"
  vivify_1459:
    set $S102, $P134
    iseq $I103, $S102, "U"
    if $I103, if_2819
    new $P136, "Float"
    assign $P136, 0
    set $P133, $P136
    goto if_2819_end
  if_2819:
    new $P135, "Float"
    assign $P135, 2
    set $P133, $P135
  if_2819_end:
    set $P130, $P133
.annotate 'line', 2336
    goto if_2817_end
  if_2817:
    new $P132, "Float"
    assign $P132, 1
    set $P130, $P132
  if_2817_end:
    $P137 = $P129."push"($P130)
.annotate 'line', 2334
    set $P120, $P137
  if_2814_end:
.annotate 'line', 2333
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "control"  :subid("801_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2825
    .param pmc param_2826
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2786
    .lex "$/", param_2825
    .lex "$type", param_2826
.annotate 'line', 2787
    set $P115, param_2825
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P120, $P118["Op"]
    set $P121, param_2825
    unless_null $P121, vivify_1465
    new $P121, "Undef"
  vivify_1465:
.annotate 'line', 2791
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Val"]
    set $P127, param_2826
    unless_null $P127, vivify_1466
    new $P127, "Undef"
  vivify_1466:
    $P128 = $P126."new"($P127 :named("value"), "!macro_const" :named("returns"))
    $P129 = $P120."new"(0, $P128, $P121 :named("node"), "die__vii" :named("pirop"))
.annotate 'line', 2787
    $P130 = $P115."!make"($P129)
.annotate 'line', 2786
    .return ($P130)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "lexical_package_lookup"  :subid("802_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2832
    .param pmc param_2833
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2805
    .const 'Sub' $P2842 = "803_1338064451.944" 
    capture_lex $P2842
    new $P2831, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2831, control_2830
    push_eh $P2831
    .lex "@name", param_2832
    .lex "$/", param_2833
.annotate 'line', 2811
    new $P115, "Undef"
    set $P2834, $P115
    .lex "$final_name", $P2834
.annotate 'line', 2812
    new $P116, "Undef"
    set $P2835, $P116
    .lex "$lookup", $P2835
.annotate 'line', 2807
    set $P2837, param_2832
    unless_null $P2837, vivify_1467
    $P2837 = root_new ['parrot';'ResizablePMCArray']
  vivify_1467:
    set $N100, $P2837
    set $N101, 0
    iseq $I100, $N100, $N101
    unless $I100, if_2836_end
    set $P117, param_2833
    unless_null $P117, vivify_1468
    new $P117, "Undef"
  vivify_1468:
    $P118 = $P117."CURSOR"()
    $P118."panic"("Cannot compile empty name")
  if_2836_end:
.annotate 'line', 2811
    set $P2838, param_2832
    unless_null $P2838, vivify_1469
    $P2838 = root_new ['parrot';'ResizablePMCArray']
  vivify_1469:
    $P117 = $P2838."pop"()
    set $P2834, $P117
.annotate 'line', 2812
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P120, $P118
    set $P121, $P120["Var"]
    set $P123, $P2834
    unless_null $P123, vivify_1470
    new $P123, "Undef"
  vivify_1470:
    set $S100, $P123
    $P124 = $P121."new"($S100, "keyed" :named("scope"))
    set $P2835, $P124
.annotate 'line', 2816
    set $P2840, param_2832
    unless_null $P2840, vivify_1471
    $P2840 = root_new ['parrot';'ResizablePMCArray']
  vivify_1471:
    set $N100, $P2840
    set $N101, 0
    iseq $I100, $N100, $N101
    if $I100, if_2839
.annotate 'line', 2834
    .const 'Sub' $P2842 = "803_1338064451.944" 
    capture_lex $P2842
    $P2842()
    goto if_2839_end
  if_2839:
.annotate 'line', 2817
    set $P117, $P2835
    unless_null $P117, vivify_1486
    new $P117, "Undef"
  vivify_1486:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P120, $P118, "PAST"
    get_who $P121, $P120
    set $P123, $P121["Op"]
.annotate 'line', 2819
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P129 = $P123."new"($P128, "get_who PP" :named("pirop"))
.annotate 'line', 2817
    $P117."unshift"($P129)
.annotate 'line', 2821
    set $P117, $P2835
    unless_null $P117, vivify_1487
    new $P117, "Undef"
  vivify_1487:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P120, $P118, "PAST"
    get_who $P121, $P120
    set $P123, $P121["Var"]
.annotate 'line', 2823
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
.annotate 'line', 2825
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    new $P133, "ResizablePMCArray"
    $P134 = $P132."new"("GLOBAL" :named("name"), $P133 :named("namespace"), "package" :named("scope"))
    $P135 = $P127."new"($P134, "get_who PP" :named("pirop"))
.annotate 'line', 2827
    set $P136, $P2834
    unless_null $P136, vivify_1488
    new $P136, "Undef"
  vivify_1488:
    set $S100, $P136
    $P137 = $P123."new"($P135, $S100, "keyed" :named("scope"))
.annotate 'line', 2821
    $P117."viviself"($P137)
  if_2839_end:
.annotate 'line', 2849
    new $P117, "Exception"
    set $P117['type'], .CONTROL_RETURN
    set $P118, $P2835
    unless_null $P118, vivify_1489
    new $P118, "Undef"
  vivify_1489:
    setattribute $P117, 'payload', $P118
    throw $P117
.annotate 'line', 2805
    .return ()
  control_2830:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P117, exception, "payload"
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2841"  :anon :subid("803_1338064451.944") :outer("802_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2834
    .const 'Sub' $P2852 = "804_1338064451.944" 
    capture_lex $P2852
.annotate 'line', 2835
    new $P117, "Undef"
    set $P2843, $P117
    .lex "$path", $P2843
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1472
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1473
    die "Contextual $*W not found"
  vivify_1473:
  vivify_1472:
    find_lex $P2845, "@name"
    unless_null $P2845, vivify_1474
    $P2845 = root_new ['parrot';'ResizablePMCArray']
  vivify_1474:
    set $P124, $P2845[0]
    unless_null $P124, vivify_1475
    new $P124, "Undef"
  vivify_1475:
    $P125 = $P123."is_lexical"($P124)
    if $P125, if_2844
.annotate 'line', 2837
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Var"]
    new $P137, "ResizablePMCArray"
    $P138 = $P136."new"("GLOBAL" :named("name"), $P137 :named("namespace"), "package" :named("scope"))
    set $P118, $P138
.annotate 'line', 2835
    goto if_2844_end
  if_2844:
.annotate 'line', 2836
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Var"]
    find_lex $P2846, "@name"
    unless_null $P2846, vivify_1476
    $P2846 = root_new ['parrot';'ResizablePMCArray']
  vivify_1476:
    $P131 = $P2846."shift"()
    $P132 = $P129."new"($P131 :named("name"), "lexical" :named("scope"))
    set $P118, $P132
  if_2844_end:
.annotate 'line', 2835
    set $P2843, $P118
.annotate 'line', 2838
    find_lex $P2848, "@name"
    unless_null $P2848, vivify_1477
    $P2848 = root_new ['parrot';'ResizablePMCArray']
  vivify_1477:
    set $P118, $P2848[0]
    unless_null $P118, vivify_1478
    new $P118, "Undef"
  vivify_1478:
    set $S100, $P118
    iseq $I101, $S100, "GLOBAL"
    unless $I101, if_2847_end
.annotate 'line', 2839
    find_lex $P2849, "@name"
    unless_null $P2849, vivify_1479
    $P2849 = root_new ['parrot';'ResizablePMCArray']
  vivify_1479:
    $P2849."shift"()
  if_2847_end:
.annotate 'line', 2841
    find_lex $P2850, "@name"
    unless_null $P2850, vivify_1480
    $P2850 = root_new ['parrot';'ResizablePMCArray']
  vivify_1480:
    defined $I101, $P2850
    unless $I101, for_undef_1481
    iter $P118, $P2850
    new $P121, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P121, loop2854_handler
    push_eh $P121
  loop2854_test:
    unless $P118, loop2854_done
    shift $P120, $P118
  loop2854_redo:
    .const 'Sub' $P2852 = "804_1338064451.944" 
    capture_lex $P2852
    $P2852($P120)
  loop2854_next:
    goto loop2854_test
  loop2854_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop2854_next
    eq $P123, .CONTROL_LOOP_REDO, loop2854_redo
  loop2854_done:
    pop_eh 
  for_undef_1481:
.annotate 'line', 2846
    find_lex $P118, "$lookup"
    unless_null $P118, vivify_1484
    new $P118, "Undef"
  vivify_1484:
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P125, $P2843
    unless_null $P125, vivify_1485
    new $P125, "Undef"
  vivify_1485:
    $P126 = $P124."new"($P125, "get_who PP" :named("pirop"))
    $P127 = $P118."unshift"($P126)
.annotate 'line', 2834
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2851"  :anon :subid("804_1338064451.944") :outer("803_1338064451.944")
    .param pmc param_2853
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2841
    .lex "$_", param_2853
.annotate 'line', 2842
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    find_lex $P126, "$path"
    unless_null $P126, vivify_1482
    new $P126, "Undef"
  vivify_1482:
.annotate 'line', 2844
    find_lex $P127, "$_"
    unless_null $P127, vivify_1483
    new $P127, "Undef"
  vivify_1483:
    set $S100, $P127
    $P128 = $P125."new"($P126, $S100, "nqp_get_package_through_who PPs" :named("pirop"))
.annotate 'line', 2842
    store_lex "$path", $P128
.annotate 'line', 2841
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "TOP" :anon :subid("248_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2859
    .param pmc param_2860
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1445
    .lex "self", param_2859
    .lex "$/", param_2860
    set $P118, param_2860
    set $P2861, param_2860
    unless_null $P2861, vivify_1490
    $P2861 = root_new ['parrot';'Hash']
  vivify_1490:
    set $P120, $P2861["comp_unit"]
    unless_null $P120, vivify_1491
    new $P120, "Undef"
  vivify_1491:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "deflongname" :anon :subid("249_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2863
    .param pmc param_2864
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1447
    .lex "self", param_2863
    .lex "$/", param_2864
.annotate 'line', 1448
    set $P118, param_2864
.annotate 'line', 1449
    set $P2866, param_2864
    unless_null $P2866, vivify_1492
    $P2866 = root_new ['parrot';'Hash']
  vivify_1492:
    set $P121, $P2866["colonpair"]
    unless_null $P121, vivify_1493
    new $P121, "Undef"
  vivify_1493:
    if $P121, if_2865
.annotate 'line', 1451
    set $P135, param_2864
    unless_null $P135, vivify_1494
    new $P135, "Undef"
  vivify_1494:
    set $S103, $P135
    new $P120, 'String'
    set $P120, $S103
.annotate 'line', 1449
    goto if_2865_end
  if_2865:
    set $P2867, param_2864
    unless_null $P2867, vivify_1495
    $P2867 = root_new ['parrot';'Hash']
  vivify_1495:
    set $P123, $P2867["identifier"]
    unless_null $P123, vivify_1496
    new $P123, "Undef"
  vivify_1496:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    concat $P125, $P124, ":"
    set $P2868, param_2864
    unless_null $P2868, vivify_1497
    $P2868 = root_new ['parrot';'Hash']
  vivify_1497:
    set $P2869, $P2868["colonpair"]
    unless_null $P2869, vivify_1498
    $P2869 = root_new ['parrot';'ResizablePMCArray']
  vivify_1498:
    set $P126, $P2869[0]
    unless_null $P126, vivify_1499
    new $P126, "Undef"
  vivify_1499:
    $P127 = $P126."ast"()
    $S101 = $P127."named"()
    concat $P128, $P125, $S101
    concat $P129, $P128, "<"
.annotate 'line', 1450
    set $P2870, param_2864
    unless_null $P2870, vivify_1500
    $P2870 = root_new ['parrot';'Hash']
  vivify_1500:
    set $P2871, $P2870["colonpair"]
    unless_null $P2871, vivify_1501
    $P2871 = root_new ['parrot';'ResizablePMCArray']
  vivify_1501:
    set $P131, $P2871[0]
    unless_null $P131, vivify_1502
    new $P131, "Undef"
  vivify_1502:
    $P132 = $P131."ast"()
    $S102 = "colonpair_str"($P132)
    concat $P133, $P129, $S102
    concat $P134, $P133, ">"
    set $P120, $P134
  if_2865_end:
.annotate 'line', 1449
    $P136 = $P118."!make"($P120)
.annotate 'line', 1447
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "comp_unit" :anon :subid("250_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2873
    .param pmc param_2874
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1461
    .lex "self", param_2873
    .lex "$/", param_2874
.annotate 'line', 1462
    new $P118, "Undef"
    set $P2875, $P118
    .lex "$mainline", $P2875
.annotate 'line', 1463
    new $P120, "Undef"
    set $P2876, $P120
    .lex "$unit", $P2876
.annotate 'line', 1491
    new $P121, "Undef"
    set $P2877, $P121
    .lex "$main_tasks", $P2877
.annotate 'line', 1462
    set $P2878, param_2874
    unless_null $P2878, vivify_1503
    $P2878 = root_new ['parrot';'Hash']
  vivify_1503:
    set $P123, $P2878["statementlist"]
    unless_null $P123, vivify_1504
    new $P123, "Undef"
  vivify_1504:
    $P124 = $P123."ast"()
    set $P2875, $P124
.annotate 'line', 1463
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1505
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1506
    die "Contextual $*W not found"
  vivify_1506:
  vivify_1505:
    $P126 = $P125."pop_lexpad"()
    set $P2876, $P126
.annotate 'line', 1467
    set $P123, $P2876
    unless_null $P123, vivify_1507
    new $P123, "Undef"
  vivify_1507:
    $P124 = $P123."loadinit"()
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_1508
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_1509
    die "Contextual $*W not found"
  vivify_1509:
  vivify_1508:
    $P128 = $P127."to_past"()
    $P124."push"($P128)
.annotate 'line', 1472
    set $P123, $P2876
    unless_null $P123, vivify_1510
    new $P123, "Undef"
  vivify_1510:
    $P124 = $P123."loadinit"()
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 1474
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    new $P134, "ResizablePMCArray"
    $P135 = $P133."new"("GLOBAL" :named("name"), $P134 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1475
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_1511
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_1512
    die "Contextual $*W not found"
  vivify_1512:
  vivify_1511:
    find_dynamic_lex $P141, "$*PACKAGE"
    unless_null $P141, vivify_1513
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$PACKAGE"]
    unless_null $P141, vivify_1514
    die "Contextual $*PACKAGE not found"
  vivify_1514:
  vivify_1513:
    $P142 = $P138."get_slot_past_for_object"($P141)
    $P143 = $P128."new"($P135, $P142, "bind_6model" :named("pasttype"))
.annotate 'line', 1472
    $P124."push"($P143)
.annotate 'line', 1481
    find_dynamic_lex $P125, "$*HAS_YOU_ARE_HERE"
    unless_null $P125, vivify_1515
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$HAS_YOU_ARE_HERE"]
    unless_null $P125, vivify_1516
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_1516:
  vivify_1515:
    if $P125, unless_2879_end
.annotate 'line', 1482
    set $P126, $P2876
    unless_null $P126, vivify_1517
    new $P126, "Undef"
  vivify_1517:
    set $P127, param_2873
    nqp_decontainerize $P128, $P127
    $P129 = $P128."CTXSAVE"()
    $P126."push"($P129)
  unless_2879_end:
.annotate 'line', 1489
    set $P123, $P2876
    unless_null $P123, vivify_1518
    new $P123, "Undef"
  vivify_1518:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("parameter" :named("scope"), "@ARGS" :named("name"), 1 :named("slurpy"), 1 :named("directaccess"))
    $P123."unshift"($P128)
.annotate 'line', 1491
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Stmts"]
.annotate 'line', 1492
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
    $P132 = $P131."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 1493
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
.annotate 'line', 1495
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Var"]
    new $P141, "ResizablePMCArray"
    $P142 = $P140."new"("ModuleLoader" :named("name"), $P141 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1496
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P146, $P145["Var"]
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Op"]
    $P152 = $P151."new"("getinterp P" :named("pirop"))
    $P153 = $P146."new"($P152, "context", "keyed" :named("scope"))
    $P154 = $P136."new"($P142, $P153, "callmethod" :named("pasttype"), "set_mainline_module" :named("name"))
.annotate 'line', 1493
    $P155 = $P126."new"($P132, $P154)
.annotate 'line', 1491
    set $P2877, $P155
.annotate 'line', 1499
    find_dynamic_lex $P125, "$*MAIN_SUB"
    unless_null $P125, vivify_1519
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$MAIN_SUB"]
    unless_null $P125, vivify_1520
    die "Contextual $*MAIN_SUB not found"
  vivify_1520:
  vivify_1519:
    unless $P125, if_2880_end
.annotate 'line', 1500
    set $P126, $P2877
    unless_null $P126, vivify_1521
    new $P126, "Undef"
  vivify_1521:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
.annotate 'line', 1501
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Val"]
    find_dynamic_lex $P138, "$*MAIN_SUB"
    unless_null $P138, vivify_1522
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$MAIN_SUB"]
    unless_null $P138, vivify_1523
    die "Contextual $*MAIN_SUB not found"
  vivify_1523:
  vivify_1522:
    $P139 = $P135."new"($P138 :named("value"))
.annotate 'line', 1502
    get_hll_global $P140, "GLOBAL"
    nqp_get_package_through_who $P141, $P140, "PAST"
    get_who $P142, $P141
    set $P143, $P142["Var"]
    $P144 = $P143."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P145 = $P131."new"($P139, $P144, "call" :named("pasttype"))
.annotate 'line', 1500
    $P126."push"($P145)
  if_2880_end:
.annotate 'line', 1505
    set $P123, $P2875
    unless_null $P123, vivify_1524
    new $P123, "Undef"
  vivify_1524:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
.annotate 'line', 1507
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    $P133 = $P132."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    set $P134, $P2877
    unless_null $P134, vivify_1525
    new $P134, "Undef"
  vivify_1525:
    $P135 = $P127."new"($P133, $P134, "if" :named("pasttype"))
.annotate 'line', 1505
    $P123."push"($P135)
.annotate 'line', 1514
    set $P123, $P2876
    unless_null $P123, vivify_1526
    new $P123, "Undef"
  vivify_1526:
.annotate 'line', 1515
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    set $P128, $P2875
    unless_null $P128, vivify_1527
    new $P128, "Undef"
  vivify_1527:
    $P129 = $P127."new"($P128, "return" :named("pirop"))
    $P123."push"($P129)
.annotate 'line', 1520
    set $P123, $P2876
    unless_null $P123, vivify_1528
    new $P123, "Undef"
  vivify_1528:
.annotate 'line', 1521
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Block"]
.annotate 'line', 1523
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Op"]
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Val"]
    set $P137, $P2876
    unless_null $P137, vivify_1529
    new $P137, "Undef"
  vivify_1529:
    $P138 = $P136."new"($P137 :named("value"))
    $P139 = $P132."new"($P138, "call" :named("pasttype"))
    $P140 = $P127."new"($P139, ":load" :named("pirflags"), 0 :named("lexical"), "" :named("namespace"))
.annotate 'line', 1521
    $P123."push"($P140)
.annotate 'line', 1526
    set $P123, $P2876
    unless_null $P123, vivify_1530
    new $P123, "Undef"
  vivify_1530:
    set $P124, param_2874
    unless_null $P124, vivify_1531
    new $P124, "Undef"
  vivify_1531:
    $P123."node"($P124)
.annotate 'line', 1529
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1532
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1533
    die "Contextual $*W not found"
  vivify_1533:
  vivify_1532:
    set $P126, $P2876
    unless_null $P126, vivify_1534
    new $P126, "Undef"
  vivify_1534:
    $P125."set_nqp_language_defaults"($P126)
.annotate 'line', 1531
    set $P123, param_2874
    set $P124, $P2876
    unless_null $P124, vivify_1535
    new $P124, "Undef"
  vivify_1535:
    $P125 = $P123."!make"($P124)
.annotate 'line', 1461
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statementlist" :anon :subid("251_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2882
    .param pmc param_2883
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1534
    .const 'Sub' $P2889 = "805_1338064451.944" 
    capture_lex $P2889
    .lex "self", param_2882
    .lex "$/", param_2883
.annotate 'line', 1535
    new $P118, "Undef"
    set $P2884, $P118
    .lex "$past", $P2884
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Stmts"]
    set $P125, param_2883
    unless_null $P125, vivify_1536
    new $P125, "Undef"
  vivify_1536:
    $P126 = $P124."new"($P125 :named("node"))
    set $P2884, $P126
.annotate 'line', 1536
    set $P2886, param_2883
    unless_null $P2886, vivify_1537
    $P2886 = root_new ['parrot';'Hash']
  vivify_1537:
    set $P120, $P2886["statement"]
    unless_null $P120, vivify_1538
    new $P120, "Undef"
  vivify_1538:
    unless $P120, if_2885_end
.annotate 'line', 1537
    set $P2887, param_2883
    unless_null $P2887, vivify_1539
    $P2887 = root_new ['parrot';'Hash']
  vivify_1539:
    set $P123, $P2887["statement"]
    unless_null $P123, vivify_1540
    new $P123, "Undef"
  vivify_1540:
    defined $I100, $P123
    unless $I100, for_undef_1541
    iter $P121, $P123
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop2898_handler
    push_eh $P126
  loop2898_test:
    unless $P121, loop2898_done
    shift $P124, $P121
  loop2898_redo:
    .const 'Sub' $P2889 = "805_1338064451.944" 
    capture_lex $P2889
    $P2889($P124)
  loop2898_next:
    goto loop2898_test
  loop2898_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop2898_next
    eq $P127, .CONTROL_LOOP_REDO, loop2898_redo
  loop2898_done:
    pop_eh 
  for_undef_1541:
  if_2885_end:
.annotate 'line', 1545
    set $P120, param_2883
    set $P121, $P2884
    unless_null $P121, vivify_1554
    new $P121, "Undef"
  vivify_1554:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1534
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2888"  :anon :subid("805_1338064451.944") :outer("251_1338064451.944")
    .param pmc param_2891
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1538
    new $P125, "Undef"
    set $P2890, $P125
    .lex "$ast", $P2890
    .lex "$_", param_2891
    find_lex $P126, "$_"
    unless_null $P126, vivify_1542
    new $P126, "Undef"
  vivify_1542:
    $P127 = $P126."ast"()
    set $P2890, $P127
.annotate 'line', 1539
    set $P2893, $P2890
    unless_null $P2893, vivify_1543
    $P2893 = root_new ['parrot';'Hash']
  vivify_1543:
    set $P126, $P2893["sink"]
    unless_null $P126, vivify_1544
    new $P126, "Undef"
  vivify_1544:
    defined $I101, $P126
    unless $I101, if_2892_end
    set $P2894, $P2890
    unless_null $P2894, vivify_1545
    $P2894 = root_new ['parrot';'Hash']
  vivify_1545:
    set $P127, $P2894["sink"]
    unless_null $P127, vivify_1546
    new $P127, "Undef"
  vivify_1546:
    set $P2890, $P127
  if_2892_end:
.annotate 'line', 1540
    set $P2896, $P2890
    unless_null $P2896, vivify_1547
    $P2896 = root_new ['parrot';'Hash']
  vivify_1547:
    set $P126, $P2896["bareblock"]
    unless_null $P126, vivify_1548
    new $P126, "Undef"
  vivify_1548:
    unless $P126, if_2895_end
    set $P127, $P2890
    unless_null $P127, vivify_1549
    new $P127, "Undef"
  vivify_1549:
    $P128 = "block_immediate"($P127)
    set $P2890, $P128
  if_2895_end:
.annotate 'line', 1541
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Node"]
    set $P131, $P2890
    unless_null $P131, vivify_1550
    new $P131, "Undef"
  vivify_1550:
    $P132 = $P129."ACCEPTS"($P131)
    unless $P132, if_2897_end
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Stmt"]
    set $P137, $P2890
    unless_null $P137, vivify_1551
    new $P137, "Undef"
  vivify_1551:
    $P138 = $P136."new"($P137)
    set $P2890, $P138
  if_2897_end:
.annotate 'line', 1542
    find_lex $P126, "$past"
    unless_null $P126, vivify_1552
    new $P126, "Undef"
  vivify_1552:
    set $P127, $P2890
    unless_null $P127, vivify_1553
    new $P127, "Undef"
  vivify_1553:
    $P128 = $P126."push"($P127)
.annotate 'line', 1537
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement" :anon :subid("252_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2900
    .param pmc param_2901
    .param pmc param_2902 :optional
    .param int has_param_2902 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1548
    .const 'Sub' $P2907 = "806_1338064451.944" 
    capture_lex $P2907
    .lex "self", param_2900
    .lex "$/", param_2901
    if has_param_2902, optparam_1555
    new $P118, "Undef"
    set param_2902, $P118
  optparam_1555:
    .lex "$key", param_2902
.annotate 'line', 1549
    new $P120, "Undef"
    set $P2903, $P120
    .lex "$past", $P2903
.annotate 'line', 1548
    set $P121, $P2903
    unless_null $P121, vivify_1556
    new $P121, "Undef"
  vivify_1556:
.annotate 'line', 1550
    set $P2905, param_2901
    unless_null $P2905, vivify_1557
    $P2905 = root_new ['parrot';'Hash']
  vivify_1557:
    set $P121, $P2905["EXPR"]
    unless_null $P121, vivify_1558
    new $P121, "Undef"
  vivify_1558:
    if $P121, if_2904
.annotate 'line', 1571
    set $P2926, param_2901
    unless_null $P2926, vivify_1559
    $P2926 = root_new ['parrot';'Hash']
  vivify_1559:
    set $P126, $P2926["statement_control"]
    unless_null $P126, vivify_1560
    new $P126, "Undef"
  vivify_1560:
    if $P126, if_2925
.annotate 'line', 1572
    new $P127, "Float"
    assign $P127, 0
    set $P2903, $P127
    goto if_2925_end
  if_2925:
.annotate 'line', 1571
    set $P2927, param_2901
    unless_null $P2927, vivify_1561
    $P2927 = root_new ['parrot';'Hash']
  vivify_1561:
    set $P127, $P2927["statement_control"]
    unless_null $P127, vivify_1562
    new $P127, "Undef"
  vivify_1562:
    $P128 = $P127."ast"()
    set $P2903, $P128
  if_2925_end:
    goto if_2904_end
  if_2904:
.annotate 'line', 1550
    .const 'Sub' $P2907 = "806_1338064451.944" 
    capture_lex $P2907
    $P2907()
  if_2904_end:
.annotate 'line', 1573
    set $P121, param_2901
    set $P123, $P2903
    unless_null $P123, vivify_1596
    new $P123, "Undef"
  vivify_1596:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1548
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2906"  :anon :subid("806_1338064451.944") :outer("252_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1551
    new $P123, "Undef"
    set $P2908, $P123
    .lex "$mc", $P2908
.annotate 'line', 1552
    new $P124, "Undef"
    set $P2909, $P124
    .lex "$ml", $P2909
.annotate 'line', 1551
    find_lex $P2910, "$/"
    unless_null $P2910, vivify_1563
    $P2910 = root_new ['parrot';'Hash']
  vivify_1563:
    set $P2911, $P2910["statement_mod_cond"]
    unless_null $P2911, vivify_1564
    $P2911 = root_new ['parrot';'ResizablePMCArray']
  vivify_1564:
    set $P125, $P2911[0]
    unless_null $P125, vivify_1565
    new $P125, "Undef"
  vivify_1565:
    set $P2908, $P125
.annotate 'line', 1552
    find_lex $P2912, "$/"
    unless_null $P2912, vivify_1566
    $P2912 = root_new ['parrot';'Hash']
  vivify_1566:
    set $P2913, $P2912["statement_mod_loop"]
    unless_null $P2913, vivify_1567
    $P2913 = root_new ['parrot';'ResizablePMCArray']
  vivify_1567:
    set $P125, $P2913[0]
    unless_null $P125, vivify_1568
    new $P125, "Undef"
  vivify_1568:
    set $P2909, $P125
.annotate 'line', 1553
    find_lex $P2914, "$/"
    unless_null $P2914, vivify_1569
    $P2914 = root_new ['parrot';'Hash']
  vivify_1569:
    set $P125, $P2914["EXPR"]
    unless_null $P125, vivify_1570
    new $P125, "Undef"
  vivify_1570:
    $P126 = $P125."ast"()
    store_lex "$past", $P126
.annotate 'line', 1554
    set $P125, $P2908
    unless_null $P125, vivify_1571
    new $P125, "Undef"
  vivify_1571:
    unless $P125, if_2915_end
.annotate 'line', 1555
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P2916, $P2908
    unless_null $P2916, vivify_1572
    $P2916 = root_new ['parrot';'Hash']
  vivify_1572:
    set $P131, $P2916["cond"]
    unless_null $P131, vivify_1573
    new $P131, "Undef"
  vivify_1573:
    $P132 = $P131."ast"()
    find_lex $P133, "$past"
    unless_null $P133, vivify_1574
    new $P133, "Undef"
  vivify_1574:
    set $P2917, $P2908
    unless_null $P2917, vivify_1575
    $P2917 = root_new ['parrot';'Hash']
  vivify_1575:
    set $P134, $P2917["sym"]
    unless_null $P134, vivify_1576
    new $P134, "Undef"
  vivify_1576:
    set $S100, $P134
    find_lex $P135, "$/"
    unless_null $P135, vivify_1577
    new $P135, "Undef"
  vivify_1577:
    $P136 = $P129."new"($P132, $P133, $S100 :named("pasttype"), $P135 :named("node"))
    store_lex "$past", $P136
  if_2915_end:
.annotate 'line', 1557
    set $P126, $P2909
    unless_null $P126, vivify_1578
    new $P126, "Undef"
  vivify_1578:
    if $P126, if_2918
    set $P125, $P126
    goto if_2918_end
  if_2918:
.annotate 'line', 1558
    set $P2920, $P2909
    unless_null $P2920, vivify_1579
    $P2920 = root_new ['parrot';'Hash']
  vivify_1579:
    set $P128, $P2920["sym"]
    unless_null $P128, vivify_1580
    new $P128, "Undef"
  vivify_1580:
    set $S100, $P128
    iseq $I100, $S100, "for"
    if $I100, if_2919
.annotate 'line', 1567
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    set $P2923, $P2909
    unless_null $P2923, vivify_1581
    $P2923 = root_new ['parrot';'Hash']
  vivify_1581:
    set $P134, $P2923["cond"]
    unless_null $P134, vivify_1582
    new $P134, "Undef"
  vivify_1582:
    $P135 = $P134."ast"()
    find_lex $P136, "$past"
    unless_null $P136, vivify_1583
    new $P136, "Undef"
  vivify_1583:
    set $P2924, $P2909
    unless_null $P2924, vivify_1584
    $P2924 = root_new ['parrot';'Hash']
  vivify_1584:
    set $P137, $P2924["sym"]
    unless_null $P137, vivify_1585
    new $P137, "Undef"
  vivify_1585:
    set $S101, $P137
    find_lex $P138, "$/"
    unless_null $P138, vivify_1586
    new $P138, "Undef"
  vivify_1586:
    $P140 = $P133."new"($P135, $P136, $S101 :named("pasttype"), $P138 :named("node"))
    store_lex "$past", $P140
.annotate 'line', 1566
    set $P127, $P140
.annotate 'line', 1558
    goto if_2919_end
  if_2919:
.annotate 'line', 1559
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Block"]
.annotate 'line', 1560
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    $P138 = $P137."new"("$_" :named("name"), "parameter" :named("scope"), 1 :named("isdecl"))
    find_lex $P139, "$past"
    unless_null $P139, vivify_1587
    new $P139, "Undef"
  vivify_1587:
    $P140 = $P133."new"($P138, $P139, "immediate" :named("blocktype"))
.annotate 'line', 1559
    store_lex "$past", $P140
.annotate 'line', 1562
    find_lex $P129, "$past"
    unless_null $P129, vivify_1588
    new $P129, "Undef"
  vivify_1588:
    $P129."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1563
    find_lex $P129, "$past"
    unless_null $P129, vivify_1589
    new $P129, "Undef"
  vivify_1589:
    $P129."arity"(1)
.annotate 'line', 1564
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    set $P2921, $P2909
    unless_null $P2921, vivify_1590
    $P2921 = root_new ['parrot';'Hash']
  vivify_1590:
    set $P134, $P2921["cond"]
    unless_null $P134, vivify_1591
    new $P134, "Undef"
  vivify_1591:
    $P135 = $P134."ast"()
    find_lex $P136, "$past"
    unless_null $P136, vivify_1592
    new $P136, "Undef"
  vivify_1592:
    set $P2922, $P2909
    unless_null $P2922, vivify_1593
    $P2922 = root_new ['parrot';'Hash']
  vivify_1593:
    set $P137, $P2922["sym"]
    unless_null $P137, vivify_1594
    new $P137, "Undef"
  vivify_1594:
    set $S101, $P137
    find_lex $P138, "$/"
    unless_null $P138, vivify_1595
    new $P138, "Undef"
  vivify_1595:
    $P139 = $P133."new"($P135, $P136, $S101 :named("pasttype"), $P138 :named("node"))
    store_lex "$past", $P139
.annotate 'line', 1558
    set $P127, $P139
  if_2919_end:
.annotate 'line', 1557
    set $P125, $P127
  if_2918_end:
.annotate 'line', 1550
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock" :anon :subid("253_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2929
    .param pmc param_2930
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1576
    .lex "self", param_2929
    .lex "$/", param_2930
.annotate 'line', 1577
    set $P118, param_2930
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P2931, param_2930
    unless_null $P2931, vivify_1597
    $P2931 = root_new ['parrot';'Hash']
  vivify_1597:
    set $P125, $P2931["EXPR"]
    unless_null $P125, vivify_1598
    new $P125, "Undef"
  vivify_1598:
    $P126 = $P125."ast"()
    set $P2932, param_2930
    unless_null $P2932, vivify_1599
    $P2932 = root_new ['parrot';'Hash']
  vivify_1599:
    set $P127, $P2932["pblock"]
    unless_null $P127, vivify_1600
    new $P127, "Undef"
  vivify_1600:
    $P128 = $P127."ast"()
    set $P129, param_2930
    unless_null $P129, vivify_1601
    new $P129, "Undef"
  vivify_1601:
    $P131 = $P124."new"($P126, $P128, "if" :named("pasttype"), $P129 :named("node"))
    $P132 = $P118."!make"($P131)
.annotate 'line', 1576
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "pblock" :anon :subid("254_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2934
    .param pmc param_2935
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1580
    .lex "self", param_2934
    .lex "$/", param_2935
.annotate 'line', 1581
    set $P118, param_2935
    set $P2936, param_2935
    unless_null $P2936, vivify_1602
    $P2936 = root_new ['parrot';'Hash']
  vivify_1602:
    set $P120, $P2936["blockoid"]
    unless_null $P120, vivify_1603
    new $P120, "Undef"
  vivify_1603:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 1580
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block" :anon :subid("255_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2938
    .param pmc param_2939
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1584
    .lex "self", param_2938
    .lex "$/", param_2939
.annotate 'line', 1585
    set $P118, param_2939
    set $P2940, param_2939
    unless_null $P2940, vivify_1604
    $P2940 = root_new ['parrot';'Hash']
  vivify_1604:
    set $P120, $P2940["blockoid"]
    unless_null $P120, vivify_1605
    new $P120, "Undef"
  vivify_1605:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 1584
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blockoid" :anon :subid("256_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2942
    .param pmc param_2943
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1588
    .const 'Sub' $P2948 = "807_1338064451.944" 
    capture_lex $P2948
    .lex "self", param_2942
    .lex "$/", param_2943
.annotate 'line', 1589
    new $P118, "Undef"
    set $P2944, $P118
    .lex "$BLOCK", $P2944
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1606
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1607
    die "Contextual $*W not found"
  vivify_1607:
  vivify_1606:
    $P124 = $P123."pop_lexpad"()
    set $P2944, $P124
.annotate 'line', 1590
    set $P2946, param_2943
    unless_null $P2946, vivify_1608
    $P2946 = root_new ['parrot';'Hash']
  vivify_1608:
    set $P121, $P2946["statementlist"]
    unless_null $P121, vivify_1609
    new $P121, "Undef"
  vivify_1609:
    if $P121, if_2945
.annotate 'line', 1598
    find_dynamic_lex $P128, "$*HAS_YOU_ARE_HERE"
    unless_null $P128, vivify_1610
    get_hll_global $P125, "GLOBAL"
    get_who $P127, $P125
    set $P128, $P127["$HAS_YOU_ARE_HERE"]
    unless_null $P128, vivify_1611
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_1611:
  vivify_1610:
    unless $P128, if_2951_end
.annotate 'line', 1599
    set $P129, param_2943
    unless_null $P129, vivify_1612
    new $P129, "Undef"
  vivify_1612:
    $P131 = $P129."CURSOR"()
    $P131."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if_2951_end:
.annotate 'line', 1601
    new $P125, "Float"
    assign $P125, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P125
.annotate 'line', 1602
    set $P125, param_2943
    set $P2952, param_2943
    unless_null $P2952, vivify_1613
    $P2952 = root_new ['parrot';'Hash']
  vivify_1613:
    set $P127, $P2952["you_are_here"]
    unless_null $P127, vivify_1614
    new $P127, "Undef"
  vivify_1614:
    $P128 = $P127."ast"()
    $P129 = $P125."!make"($P128)
.annotate 'line', 1597
    set $P120, $P129
.annotate 'line', 1590
    goto if_2945_end
  if_2945:
    .const 'Sub' $P2948 = "807_1338064451.944" 
    capture_lex $P2948
    $P124 = $P2948()
    set $P120, $P124
  if_2945_end:
.annotate 'line', 1588
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2947"  :anon :subid("807_1338064451.944") :outer("256_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1591
    new $P123, "Undef"
    set $P2949, $P123
    .lex "$past", $P2949
    find_lex $P2950, "$/"
    unless_null $P2950, vivify_1615
    $P2950 = root_new ['parrot';'Hash']
  vivify_1615:
    set $P124, $P2950["statementlist"]
    unless_null $P124, vivify_1616
    new $P124, "Undef"
  vivify_1616:
    $P125 = $P124."ast"()
    set $P2949, $P125
.annotate 'line', 1592
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_1617
    new $P124, "Undef"
  vivify_1617:
    set $P125, $P2949
    unless_null $P125, vivify_1618
    new $P125, "Undef"
  vivify_1618:
    $P124."push"($P125)
.annotate 'line', 1593
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_1619
    new $P124, "Undef"
  vivify_1619:
    find_lex $P125, "$/"
    unless_null $P125, vivify_1620
    new $P125, "Undef"
  vivify_1620:
    $P124."node"($P125)
.annotate 'line', 1594
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_1621
    new $P124, "Undef"
  vivify_1621:
    $P124."closure"(1)
.annotate 'line', 1595
    find_dynamic_lex $P124, "$/"
    find_lex $P125, "$BLOCK"
    unless_null $P125, vivify_1622
    new $P125, "Undef"
  vivify_1622:
    $P126 = $P124."!make"($P125)
.annotate 'line', 1590
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "newpad" :anon :subid("257_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2954
    .param pmc param_2955
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1606
    .lex "self", param_2954
    .lex "$/", param_2955
.annotate 'line', 1607
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1623
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1624
    die "Contextual $*W not found"
  vivify_1624:
  vivify_1623:
    set $P123, param_2955
    unless_null $P123, vivify_1625
    new $P123, "Undef"
  vivify_1625:
    $P124 = $P121."push_lexpad"($P123)
.annotate 'line', 1606
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "outerctx" :anon :subid("258_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2957
    .param pmc param_2958
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1610
    .const 'Sub' $P2962 = "808_1338064451.944" 
    capture_lex $P2962
    .lex "self", param_2957
    .lex "$/", param_2958
.annotate 'line', 1611
    find_dynamic_lex $P121, "%*COMPILING"
    unless_null $P121, vivify_1626
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["%COMPILING"]
    unless_null $P121, vivify_1627
    die "Contextual %*COMPILING not found"
  vivify_1627:
  vivify_1626:
    set $P2960, $P121["%?OPTIONS"]
    unless_null $P2960, vivify_1628
    $P2960 = root_new ['parrot';'Hash']
  vivify_1628:
    set $P123, $P2960["outer_ctx"]
    unless_null $P123, vivify_1629
    new $P123, "Undef"
  vivify_1629:
    defined $I100, $P123
    if $I100, unless_2959_end
    .const 'Sub' $P2962 = "808_1338064451.944" 
    capture_lex $P2962
    $P2962()
  unless_2959_end:
.annotate 'line', 1632
    set $P118, param_2957
    nqp_decontainerize $P120, $P118
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_1665
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_1666
    die "Contextual $*W not found"
  vivify_1666:
  vivify_1665:
    $P125 = $P124."cur_lexpad"()
    $P126 = $P120."SET_BLOCK_OUTER_CTX"($P125)
.annotate 'line', 1610
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2961"  :anon :subid("808_1338064451.944") :outer("258_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1614
    new $P124, "Undef"
    set $P2963, $P124
    .lex "$SETTING", $P2963
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_1630
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_1631
    die "Contextual $*W not found"
  vivify_1631:
  vivify_1630:
    find_dynamic_lex $P131, "%*COMPILING"
    unless_null $P131, vivify_1632
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["%COMPILING"]
    unless_null $P131, vivify_1633
    die "Contextual %*COMPILING not found"
  vivify_1633:
  vivify_1632:
    set $P2965, $P131["%?OPTIONS"]
    unless_null $P2965, vivify_1634
    $P2965 = root_new ['parrot';'Hash']
  vivify_1634:
    set $P132, $P2965["setting"]
    unless_null $P132, vivify_1635
    new $P132, "Undef"
  vivify_1635:
    set $P2964, $P132
    defined $I2967, $P2964
    if $I2967, default_2966
    new $P133, "String"
    assign $P133, "NQPCORE"
    set $P2964, $P133
  default_2966:
    $P134 = $P127."load_setting"($P2964)
    set $P2963, $P134
.annotate 'line', 1619
    find_dynamic_lex $P128, "%*COMPILING"
    unless_null $P128, vivify_1636
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%COMPILING"]
    unless_null $P128, vivify_1637
    die "Contextual %*COMPILING not found"
  vivify_1637:
  vivify_1636:
    set $P2969, $P128["%?OPTIONS"]
    unless_null $P2969, vivify_1638
    $P2969 = root_new ['parrot';'Hash']
  vivify_1638:
    set $P129, $P2969["setting"]
    unless_null $P129, vivify_1639
    new $P129, "Undef"
  vivify_1639:
    set $S100, $P129
    iseq $I101, $S100, "NULL"
    unless $I101, unless_2968
    new $P125, 'Integer'
    set $P125, $I101
    goto unless_2968_end
  unless_2968:
.annotate 'line', 1620
    set $P131, $P2963
    unless_null $P131, vivify_1640
    new $P131, "Undef"
  vivify_1640:
    "import_HOW_exports"($P131)
.annotate 'line', 1621
    find_dynamic_lex $P133, "%*COMPILING"
    unless_null $P133, vivify_1641
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["%COMPILING"]
    unless_null $P133, vivify_1642
    die "Contextual %*COMPILING not found"
  vivify_1642:
  vivify_1641:
    set $P2971, $P133["%?OPTIONS"]
    unless_null $P2971, vivify_1643
    $P2971 = root_new ['parrot';'Hash']
  vivify_1643:
    set $P134, $P2971["old-regex-lib"]
    unless_null $P134, vivify_1644
    new $P134, "Undef"
  vivify_1644:
    unless $P134, if_2970_end
.annotate 'line', 1622
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_1645
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_1646
    die "Contextual $*W not found"
  vivify_1646:
  vivify_1645:
    find_dynamic_lex $P140, "$*GLOBALish"
    unless_null $P140, vivify_1647
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$GLOBALish"]
    unless_null $P140, vivify_1648
    die "Contextual $*GLOBALish not found"
  vivify_1648:
  vivify_1647:
    $P137."load_module"("NQPRegex", $P140)
  if_2970_end:
.annotate 'line', 1624
    find_dynamic_lex $P134, "%*COMPILING"
    unless_null $P134, vivify_1649
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["%COMPILING"]
    unless_null $P134, vivify_1650
    die "Contextual %*COMPILING not found"
  vivify_1650:
  vivify_1649:
    set $P2973, $P134["%?OPTIONS"]
    unless_null $P2973, vivify_1651
    $P2973 = root_new ['parrot';'Hash']
  vivify_1651:
    set $P135, $P2973["no-regex-lib"]
    unless_null $P135, vivify_1652
    new $P135, "Undef"
  vivify_1652:
    unless $P135, unless_2972
    set $P131, $P135
    goto unless_2972_end
  unless_2972:
.annotate 'line', 1625
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_1653
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_1654
    die "Contextual $*W not found"
  vivify_1654:
  vivify_1653:
    find_dynamic_lex $P141, "$*GLOBALish"
    unless_null $P141, vivify_1655
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$GLOBALish"]
    unless_null $P141, vivify_1656
    die "Contextual $*GLOBALish not found"
  vivify_1656:
  vivify_1655:
    $P138."load_module"("QRegex", $P141)
.annotate 'line', 1626
    find_dynamic_lex $P139, "%*COMPILING"
    unless_null $P139, vivify_1657
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["%COMPILING"]
    unless_null $P139, vivify_1658
    die "Contextual %*COMPILING not found"
  vivify_1658:
  vivify_1657:
    set $P2975, $P139["%?OPTIONS"]
    unless_null $P2975, vivify_1659
    $P2975 = root_new ['parrot';'Hash']
  vivify_1659:
    set $P140, $P2975["old-regex-lib"]
    unless_null $P140, vivify_1660
    new $P140, "Undef"
  vivify_1660:
    unless $P140, unless_2974
    set $P136, $P140
    goto unless_2974_end
  unless_2974:
.annotate 'line', 1627
    find_dynamic_lex $P143, "$*W"
    unless_null $P143, vivify_1661
    get_hll_global $P141, "GLOBAL"
    get_who $P142, $P141
    set $P143, $P142["$W"]
    unless_null $P143, vivify_1662
    die "Contextual $*W not found"
  vivify_1662:
  vivify_1661:
    find_dynamic_lex $P146, "$*GLOBALish"
    unless_null $P146, vivify_1663
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$GLOBALish"]
    unless_null $P146, vivify_1664
    die "Contextual $*GLOBALish not found"
  vivify_1664:
  vivify_1663:
    $P147 = $P143."load_module"("NQPP6QRegex", $P146)
.annotate 'line', 1626
    set $P136, $P147
  unless_2974_end:
.annotate 'line', 1624
    set $P131, $P136
  unless_2972_end:
.annotate 'line', 1619
    set $P125, $P131
  unless_2968_end:
.annotate 'line', 1611
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "GLOBALish" :anon :subid("259_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2977
    .param pmc param_2978
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1644
    .lex "self", param_2977
    .lex "$/", param_2978
.annotate 'line', 1648
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1667
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1668
    die "Contextual $*W not found"
  vivify_1668:
  vivify_1667:
    find_dynamic_lex $P125, "%*HOW"
    unless_null $P125, vivify_1669
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["%HOW"]
    unless_null $P125, vivify_1670
    die "Contextual %*HOW not found"
  vivify_1670:
  vivify_1669:
    set $P126, $P125["knowhow"]
    unless_null $P126, vivify_1671
    new $P126, "Undef"
  vivify_1671:
    $P127 = $P121."pkg_create_mo"($P126, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P127
.annotate 'line', 1649
    find_dynamic_lex $P121, "$*GLOBALish"
    unless_null $P121, vivify_1672
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$GLOBALish"]
    unless_null $P121, vivify_1673
    die "Contextual $*GLOBALish not found"
  vivify_1673:
  vivify_1672:
    get_how $P123, $P121
    find_dynamic_lex $P126, "$*GLOBALish"
    unless_null $P126, vivify_1674
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$GLOBALish"]
    unless_null $P126, vivify_1675
    die "Contextual $*GLOBALish not found"
  vivify_1675:
  vivify_1674:
    $P123."compose"($P126)
.annotate 'line', 1650
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1676
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1677
    die "Contextual $*W not found"
  vivify_1677:
  vivify_1676:
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1678
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1679
    die "Contextual $*W not found"
  vivify_1679:
  vivify_1678:
    $P126 = $P125."cur_lexpad"()
    find_dynamic_lex $P129, "$*GLOBALish"
    unless_null $P129, vivify_1680
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$GLOBALish"]
    unless_null $P129, vivify_1681
    die "Contextual $*GLOBALish not found"
  vivify_1681:
  vivify_1680:
    $P121."install_lexical_symbol"($P126, "GLOBALish", $P129)
.annotate 'line', 1653
    find_dynamic_lex $P121, "$*GLOBALish"
    unless_null $P121, vivify_1682
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$GLOBALish"]
    unless_null $P121, vivify_1683
    die "Contextual $*GLOBALish not found"
  vivify_1683:
  vivify_1682:
    store_dynamic_lex "$*PACKAGE", $P121
.annotate 'line', 1654
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1684
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1685
    die "Contextual $*W not found"
  vivify_1685:
  vivify_1684:
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1686
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1687
    die "Contextual $*W not found"
  vivify_1687:
  vivify_1686:
    $P126 = $P125."cur_lexpad"()
    find_dynamic_lex $P129, "$*PACKAGE"
    unless_null $P129, vivify_1688
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$PACKAGE"]
    unless_null $P129, vivify_1689
    die "Contextual $*PACKAGE not found"
  vivify_1689:
  vivify_1688:
    $P131 = $P121."install_lexical_symbol"($P126, "$?PACKAGE", $P129)
.annotate 'line', 1644
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "you_are_here" :anon :subid("260_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2980
    .param pmc param_2981
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1657
    .lex "self", param_2980
    .lex "$/", param_2981
.annotate 'line', 1658
    set $P118, param_2981
    set $P120, param_2980
    nqp_decontainerize $P121, $P120
    $P123 = $P121."CTXSAVE"()
    $P124 = $P118."!make"($P123)
.annotate 'line', 1657
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<use>" :anon :subid("261_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2983
    .param pmc param_2984
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1663
    .lex "self", param_2983
    .lex "$/", param_2984
.annotate 'line', 1664
    new $P118, "Undef"
    set $P2985, $P118
    .lex "$module", $P2985
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1690
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1691
    die "Contextual $*W not found"
  vivify_1691:
  vivify_1690:
    set $P2986, param_2984
    unless_null $P2986, vivify_1692
    $P2986 = root_new ['parrot';'Hash']
  vivify_1692:
    set $P124, $P2986["name"]
    unless_null $P124, vivify_1693
    new $P124, "Undef"
  vivify_1693:
    set $S100, $P124
    find_dynamic_lex $P127, "$*GLOBALish"
    unless_null $P127, vivify_1694
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$GLOBALish"]
    unless_null $P127, vivify_1695
    die "Contextual $*GLOBALish not found"
  vivify_1695:
  vivify_1694:
    $P128 = $P123."load_module"($S100, $P127)
    set $P2985, $P128
.annotate 'line', 1665
    set $P120, $P2985
    unless_null $P120, vivify_1696
    new $P120, "Undef"
  vivify_1696:
    defined $I100, $P120
    unless $I100, if_2987_end
.annotate 'line', 1666
    set $P121, $P2985
    unless_null $P121, vivify_1697
    new $P121, "Undef"
  vivify_1697:
    "import_HOW_exports"($P121)
  if_2987_end:
.annotate 'line', 1668
    set $P120, param_2984
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    $P126 = $P125."new"()
    $P127 = $P120."!make"($P126)
.annotate 'line', 1663
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statement_control:sym<if>" :anon :subid("262_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_2989
    .param pmc param_2990
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1671
    .const 'Sub' $P3001 = "809_1338064451.944" 
    capture_lex $P3001
    .lex "self", param_2989
    .lex "$/", param_2990
.annotate 'line', 1672
    new $P118, "Undef"
    set $P2991, $P118
    .lex "$count", $P2991
.annotate 'line', 1673
    new $P120, "Undef"
    set $P2992, $P120
    .lex "$past", $P2992
.annotate 'line', 1672
    set $P2993, param_2990
    unless_null $P2993, vivify_1698
    $P2993 = root_new ['parrot';'Hash']
  vivify_1698:
    set $P121, $P2993["xblock"]
    unless_null $P121, vivify_1699
    new $P121, "Undef"
  vivify_1699:
    set $N100, $P121
    new $P123, 'Float'
    set $P123, $N100
    sub $P124, $P123, 1
    set $P2991, $P124
.annotate 'line', 1673
    set $P121, $P2991
    unless_null $P121, vivify_1700
    new $P121, "Undef"
  vivify_1700:
    set $I100, $P121
    set $P2994, param_2990
    unless_null $P2994, vivify_1701
    $P2994 = root_new ['parrot';'Hash']
  vivify_1701:
    set $P2995, $P2994["xblock"]
    unless_null $P2995, vivify_1702
    $P2995 = root_new ['parrot';'ResizablePMCArray']
  vivify_1702:
    set $P123, $P2995[$I100]
    unless_null $P123, vivify_1703
    new $P123, "Undef"
  vivify_1703:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    set $P2992, $P125
.annotate 'line', 1674
    set $P2997, param_2990
    unless_null $P2997, vivify_1704
    $P2997 = root_new ['parrot';'Hash']
  vivify_1704:
    set $P121, $P2997["else"]
    unless_null $P121, vivify_1705
    new $P121, "Undef"
  vivify_1705:
    unless $P121, if_2996_end
.annotate 'line', 1675
    set $P123, $P2992
    unless_null $P123, vivify_1706
    new $P123, "Undef"
  vivify_1706:
    set $P2998, param_2990
    unless_null $P2998, vivify_1707
    $P2998 = root_new ['parrot';'Hash']
  vivify_1707:
    set $P2999, $P2998["else"]
    unless_null $P2999, vivify_1708
    $P2999 = root_new ['parrot';'ResizablePMCArray']
  vivify_1708:
    set $P124, $P2999[0]
    unless_null $P124, vivify_1709
    new $P124, "Undef"
  vivify_1709:
    $P125 = $P124."ast"()
    $P126 = "block_immediate"($P125)
    $P123."push"($P126)
  if_2996_end:
.annotate 'line', 1678
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop3006_handler
    push_eh $P124
  loop3006_test:
    set $P121, $P2991
    unless_null $P121, vivify_1710
    new $P121, "Undef"
  vivify_1710:
    set $N100, $P121
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop3006_done
  loop3006_redo:
    .const 'Sub' $P3001 = "809_1338064451.944" 
    capture_lex $P3001
    $P3001()
  loop3006_next:
    goto loop3006_test
  loop3006_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop3006_next
    eq $P125, .CONTROL_LOOP_REDO, loop3006_redo
  loop3006_done:
    pop_eh 
.annotate 'line', 1684
    set $P121, param_2990
    set $P123, $P2992
    unless_null $P123, vivify_1719
    new $P123, "Undef"
  vivify_1719:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1671
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3000"  :anon :subid("809_1338064451.944") :outer("262_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1680
    new $P123, "Undef"
    set $P3002, $P123
    .lex "$else", $P3002
.annotate 'line', 1678
    find_lex $P124, "$count"
    unless_null $P124, vivify_1711
    new $P124, "Undef"
  vivify_1711:
    clone $P3003, $P124
    dec $P124
.annotate 'line', 1680
    find_lex $P124, "$past"
    unless_null $P124, vivify_1712
    new $P124, "Undef"
  vivify_1712:
    set $P3002, $P124
.annotate 'line', 1681
    find_lex $P124, "$count"
    unless_null $P124, vivify_1713
    new $P124, "Undef"
  vivify_1713:
    set $I101, $P124
    find_lex $P3004, "$/"
    unless_null $P3004, vivify_1714
    $P3004 = root_new ['parrot';'Hash']
  vivify_1714:
    set $P3005, $P3004["xblock"]
    unless_null $P3005, vivify_1715
    $P3005 = root_new ['parrot';'ResizablePMCArray']
  vivify_1715:
    set $P125, $P3005[$I101]
    unless_null $P125, vivify_1716
    new $P125, "Undef"
  vivify_1716:
    $P126 = $P125."ast"()
    $P127 = "xblock_immediate"($P126)
    store_lex "$past", $P127
.annotate 'line', 1682
    find_lex $P124, "$past"
    unless_null $P124, vivify_1717
    new $P124, "Undef"
  vivify_1717:
    set $P125, $P3002
    unless_null $P125, vivify_1718
    new $P125, "Undef"
  vivify_1718:
    $P126 = $P124."push"($P125)
.annotate 'line', 1678
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<unless>" :anon :subid("263_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3008
    .param pmc param_3009
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1687
    .lex "self", param_3008
    .lex "$/", param_3009
.annotate 'line', 1688
    new $P118, "Undef"
    set $P3010, $P118
    .lex "$past", $P3010
    set $P3011, param_3009
    unless_null $P3011, vivify_1720
    $P3011 = root_new ['parrot';'Hash']
  vivify_1720:
    set $P120, $P3011["xblock"]
    unless_null $P120, vivify_1721
    new $P120, "Undef"
  vivify_1721:
    $P121 = $P120."ast"()
    $P123 = "xblock_immediate"($P121)
    set $P3010, $P123
.annotate 'line', 1689
    set $P120, $P3010
    unless_null $P120, vivify_1722
    new $P120, "Undef"
  vivify_1722:
    $P120."pasttype"("unless")
.annotate 'line', 1690
    set $P120, param_3009
    set $P121, $P3010
    unless_null $P121, vivify_1723
    new $P121, "Undef"
  vivify_1723:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1687
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<while>" :anon :subid("264_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3013
    .param pmc param_3014
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1693
    .lex "self", param_3013
    .lex "$/", param_3014
.annotate 'line', 1694
    new $P118, "Undef"
    set $P3015, $P118
    .lex "$past", $P3015
    set $P3016, param_3014
    unless_null $P3016, vivify_1724
    $P3016 = root_new ['parrot';'Hash']
  vivify_1724:
    set $P120, $P3016["xblock"]
    unless_null $P120, vivify_1725
    new $P120, "Undef"
  vivify_1725:
    $P121 = $P120."ast"()
    $P123 = "xblock_immediate"($P121)
    set $P3015, $P123
.annotate 'line', 1695
    set $P120, $P3015
    unless_null $P120, vivify_1726
    new $P120, "Undef"
  vivify_1726:
    set $P3017, param_3014
    unless_null $P3017, vivify_1727
    $P3017 = root_new ['parrot';'Hash']
  vivify_1727:
    set $P121, $P3017["sym"]
    unless_null $P121, vivify_1728
    new $P121, "Undef"
  vivify_1728:
    set $S100, $P121
    $P120."pasttype"($S100)
.annotate 'line', 1696
    set $P120, param_3014
    set $P121, $P3015
    unless_null $P121, vivify_1729
    new $P121, "Undef"
  vivify_1729:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1693
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<repeat>" :anon :subid("265_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3019
    .param pmc param_3020
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1699
    .lex "self", param_3019
    .lex "$/", param_3020
.annotate 'line', 1700
    new $P118, "Undef"
    set $P3021, $P118
    .lex "$pasttype", $P3021
.annotate 'line', 1701
    new $P120, "Undef"
    set $P3022, $P120
    .lex "$past", $P3022
.annotate 'line', 1700
    new $P121, "String"
    assign $P121, "repeat_"
    set $P3023, param_3020
    unless_null $P3023, vivify_1730
    $P3023 = root_new ['parrot';'Hash']
  vivify_1730:
    set $P123, $P3023["wu"]
    unless_null $P123, vivify_1731
    new $P123, "Undef"
  vivify_1731:
    set $S100, $P123
    concat $P124, $P121, $S100
    set $P3021, $P124
.annotate 'line', 1699
    set $P121, $P3022
    unless_null $P121, vivify_1732
    new $P121, "Undef"
  vivify_1732:
.annotate 'line', 1702
    set $P3025, param_3020
    unless_null $P3025, vivify_1733
    $P3025 = root_new ['parrot';'Hash']
  vivify_1733:
    set $P121, $P3025["xblock"]
    unless_null $P121, vivify_1734
    new $P121, "Undef"
  vivify_1734:
    if $P121, if_3024
.annotate 'line', 1707
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P3027, param_3020
    unless_null $P3027, vivify_1735
    $P3027 = root_new ['parrot';'Hash']
  vivify_1735:
    set $P127, $P3027["EXPR"]
    unless_null $P127, vivify_1736
    new $P127, "Undef"
  vivify_1736:
    $P128 = $P127."ast"()
    set $P3028, param_3020
    unless_null $P3028, vivify_1737
    $P3028 = root_new ['parrot';'Hash']
  vivify_1737:
    set $P129, $P3028["pblock"]
    unless_null $P129, vivify_1738
    new $P129, "Undef"
  vivify_1738:
    $P131 = $P129."ast"()
    $P132 = "block_immediate"($P131)
    set $P133, $P3021
    unless_null $P133, vivify_1739
    new $P133, "Undef"
  vivify_1739:
    set $P134, param_3020
    unless_null $P134, vivify_1740
    new $P134, "Undef"
  vivify_1740:
    $P135 = $P126."new"($P128, $P132, $P133 :named("pasttype"), $P134 :named("node"))
    set $P3022, $P135
.annotate 'line', 1706
    goto if_3024_end
  if_3024:
.annotate 'line', 1703
    set $P3026, param_3020
    unless_null $P3026, vivify_1741
    $P3026 = root_new ['parrot';'Hash']
  vivify_1741:
    set $P123, $P3026["xblock"]
    unless_null $P123, vivify_1742
    new $P123, "Undef"
  vivify_1742:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    set $P3022, $P125
.annotate 'line', 1704
    set $P123, $P3022
    unless_null $P123, vivify_1743
    new $P123, "Undef"
  vivify_1743:
    set $P124, $P3021
    unless_null $P124, vivify_1744
    new $P124, "Undef"
  vivify_1744:
    $P123."pasttype"($P124)
  if_3024_end:
.annotate 'line', 1710
    set $P121, param_3020
    set $P123, $P3022
    unless_null $P123, vivify_1745
    new $P123, "Undef"
  vivify_1745:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1699
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<for>" :anon :subid("266_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3030
    .param pmc param_3031
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1713
    .lex "self", param_3030
    .lex "$/", param_3031
.annotate 'line', 1714
    new $P118, "Undef"
    set $P3032, $P118
    .lex "$past", $P3032
.annotate 'line', 1716
    new $P120, "Undef"
    set $P3033, $P120
    .lex "$block", $P3033
.annotate 'line', 1714
    set $P3034, param_3031
    unless_null $P3034, vivify_1746
    $P3034 = root_new ['parrot';'Hash']
  vivify_1746:
    set $P121, $P3034["xblock"]
    unless_null $P121, vivify_1747
    new $P121, "Undef"
  vivify_1747:
    $P123 = $P121."ast"()
    set $P3032, $P123
.annotate 'line', 1715
    set $P121, $P3032
    unless_null $P121, vivify_1748
    new $P121, "Undef"
  vivify_1748:
    $P121."pasttype"("for")
.annotate 'line', 1716
    set $P3035, $P3032
    unless_null $P3035, vivify_1749
    $P3035 = root_new ['parrot';'ResizablePMCArray']
  vivify_1749:
    set $P121, $P3035[1]
    unless_null $P121, vivify_1750
    new $P121, "Undef"
  vivify_1750:
    set $P3033, $P121
.annotate 'line', 1717
    set $P121, $P3033
    unless_null $P121, vivify_1751
    new $P121, "Undef"
  vivify_1751:
    $P123 = $P121."arity"()
    if $P123, unless_3036_end
.annotate 'line', 1718
    set $P3037, $P3033
    unless_null $P3037, vivify_1752
    $P3037 = root_new ['parrot';'ResizablePMCArray']
  vivify_1752:
    set $P124, $P3037[0]
    unless_null $P124, vivify_1753
    new $P124, "Undef"
  vivify_1753:
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("$_" :named("name"), "parameter" :named("scope"))
    $P124."push"($P129)
.annotate 'line', 1719
    set $P124, $P3033
    unless_null $P124, vivify_1754
    new $P124, "Undef"
  vivify_1754:
    $P124."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1720
    set $P124, $P3033
    unless_null $P124, vivify_1755
    new $P124, "Undef"
  vivify_1755:
    $P124."arity"(1)
  unless_3036_end:
.annotate 'line', 1722
    set $P121, $P3033
    unless_null $P121, vivify_1756
    new $P121, "Undef"
  vivify_1756:
    $P121."blocktype"("immediate")
.annotate 'line', 1723
    set $P121, param_3031
    set $P123, $P3032
    unless_null $P123, vivify_1757
    new $P123, "Undef"
  vivify_1757:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1713
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CATCH>" :anon :subid("267_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3039
    .param pmc param_3040
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1726
    .lex "self", param_3039
    .lex "$/", param_3040
.annotate 'line', 1727
    new $P118, "Undef"
    set $P3041, $P118
    .lex "$block", $P3041
    set $P3042, param_3040
    unless_null $P3042, vivify_1758
    $P3042 = root_new ['parrot';'Hash']
  vivify_1758:
    set $P120, $P3042["block"]
    unless_null $P120, vivify_1759
    new $P120, "Undef"
  vivify_1759:
    $P121 = $P120."ast"()
    set $P3041, $P121
.annotate 'line', 1728
    set $P120, param_3040
    unless_null $P120, vivify_1760
    new $P120, "Undef"
  vivify_1760:
    set $P121, $P3041
    unless_null $P121, vivify_1761
    new $P121, "Undef"
  vivify_1761:
    "push_block_handler"($P120, $P121)
.annotate 'line', 1729
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1762
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1763
    die "Contextual $*W not found"
  vivify_1763:
  vivify_1762:
    $P124 = $P123."cur_lexpad"()
    $P125 = $P124."handlers"()
    set $P126, $P125[0]
    unless_null $P126, vivify_1764
    new $P126, "Undef"
  vivify_1764:
    $P126."handle_types_except"("CONTROL")
.annotate 'line', 1730
    set $P120, param_3040
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    set $P126, param_3040
    unless_null $P126, vivify_1765
    new $P126, "Undef"
  vivify_1765:
    $P127 = $P125."new"($P126 :named("node"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 1726
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CONTROL>" :anon :subid("268_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3044
    .param pmc param_3045
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1733
    .lex "self", param_3044
    .lex "$/", param_3045
.annotate 'line', 1734
    new $P118, "Undef"
    set $P3046, $P118
    .lex "$block", $P3046
    set $P3047, param_3045
    unless_null $P3047, vivify_1766
    $P3047 = root_new ['parrot';'Hash']
  vivify_1766:
    set $P120, $P3047["block"]
    unless_null $P120, vivify_1767
    new $P120, "Undef"
  vivify_1767:
    $P121 = $P120."ast"()
    set $P3046, $P121
.annotate 'line', 1735
    set $P120, param_3045
    unless_null $P120, vivify_1768
    new $P120, "Undef"
  vivify_1768:
    set $P121, $P3046
    unless_null $P121, vivify_1769
    new $P121, "Undef"
  vivify_1769:
    "push_block_handler"($P120, $P121)
.annotate 'line', 1736
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1770
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1771
    die "Contextual $*W not found"
  vivify_1771:
  vivify_1770:
    $P124 = $P123."cur_lexpad"()
    $P125 = $P124."handlers"()
    set $P126, $P125[0]
    unless_null $P126, vivify_1772
    new $P126, "Undef"
  vivify_1772:
    $P126."handle_types"("CONTROL")
.annotate 'line', 1737
    set $P120, param_3045
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    set $P126, param_3045
    unless_null $P126, vivify_1773
    new $P126, "Undef"
  vivify_1773:
    $P127 = $P125."new"($P126 :named("node"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 1733
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<BEGIN>" :anon :subid("269_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3049
    .param pmc param_3050
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1778
    .lex "self", param_3049
    .lex "$/", param_3050
.annotate 'line', 1779
    set $P118, param_3050
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1774
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1775
    die "Contextual $*W not found"
  vivify_1775:
  vivify_1774:
    set $P3051, param_3050
    unless_null $P3051, vivify_1776
    $P3051 = root_new ['parrot';'Hash']
  vivify_1776:
    set $P124, $P3051["blorst"]
    unless_null $P124, vivify_1777
    new $P124, "Undef"
  vivify_1777:
    $P125 = $P124."ast"()
    $P126 = $P123."run_begin_block"($P125)
    $P127 = $P118."!make"($P126)
.annotate 'line', 1778
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<INIT>" :anon :subid("270_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3053
    .param pmc param_3054
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1782
    .lex "self", param_3053
    .lex "$/", param_3054
.annotate 'line', 1783
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1778
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1779
    die "Contextual $*W not found"
  vivify_1779:
  vivify_1778:
    $P123 = $P121."cur_lexpad"()
    set $P3055, param_3054
    unless_null $P3055, vivify_1780
    $P3055 = root_new ['parrot';'Hash']
  vivify_1780:
    set $P124, $P3055["blorst"]
    unless_null $P124, vivify_1781
    new $P124, "Undef"
  vivify_1781:
    $P125 = $P124."ast"()
    $P123."push"($P125)
.annotate 'line', 1784
    set $P118, param_3054
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Stmts"]
    $P125 = $P124."new"()
    $P126 = $P118."!make"($P125)
.annotate 'line', 1782
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<try>" :anon :subid("271_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3057
    .param pmc param_3058
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1787
    .lex "self", param_3057
    .lex "$/", param_3058
.annotate 'line', 1788
    new $P118, "Undef"
    set $P3059, $P118
    .lex "$past", $P3059
    set $P3060, param_3058
    unless_null $P3060, vivify_1782
    $P3060 = root_new ['parrot';'Hash']
  vivify_1782:
    set $P120, $P3060["blorst"]
    unless_null $P120, vivify_1783
    new $P120, "Undef"
  vivify_1783:
    $P121 = $P120."ast"()
    set $P3059, $P121
.annotate 'line', 1789
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Block"]
    set $P125, $P3059
    unless_null $P125, vivify_1784
    new $P125, "Undef"
  vivify_1784:
    $P126 = $P124."ACCEPTS"($P125)
    if $P126, unless_3061_end
.annotate 'line', 1790
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Block"]
    set $P132, $P3059
    unless_null $P132, vivify_1785
    new $P132, "Undef"
  vivify_1785:
    set $P133, param_3058
    unless_null $P133, vivify_1786
    new $P133, "Undef"
  vivify_1786:
    $P134 = $P131."new"($P132, "immediate" :named("blocktype"), $P133 :named("node"))
    set $P3059, $P134
  unless_3061_end:
.annotate 'line', 1792
    set $P120, $P3059
    unless_null $P120, vivify_1787
    new $P120, "Undef"
  vivify_1787:
    $P121 = $P120."handlers"()
    if $P121, unless_3062_end
.annotate 'line', 1793
    set $P123, $P3059
    unless_null $P123, vivify_1788
    new $P123, "Undef"
  vivify_1788:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Control"]
.annotate 'line', 1795
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Stmts"]
.annotate 'line', 1796
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
.annotate 'line', 1797
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Var"]
.annotate 'line', 1798
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Var"]
    $P145 = $P144."new"("register" :named("scope"), "exception" :named("name"))
    $P146 = $P140."new"($P145, "handled", "keyed" :named("scope"))
.annotate 'line', 1797
    $P147 = $P136."new"($P146, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1796
    $P149 = $P132."new"($P147)
.annotate 'line', 1795
    $P150 = $P127."new"($P149, "CONTROL" :named("handle_types_except"))
.annotate 'line', 1793
    new $P151, "ResizablePMCArray"
    push $P151, $P150
    $P123."handlers"($P151)
  unless_3062_end:
.annotate 'line', 1807
    set $P120, param_3058
    set $P121, $P3059
    unless_null $P121, vivify_1789
    new $P121, "Undef"
  vivify_1789:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1787
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blorst" :anon :subid("272_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3064
    .param pmc param_3065
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1810
    .lex "self", param_3064
    .lex "$/", param_3065
.annotate 'line', 1811
    set $P118, param_3065
.annotate 'line', 1812
    set $P3067, param_3065
    unless_null $P3067, vivify_1790
    $P3067 = root_new ['parrot';'Hash']
  vivify_1790:
    set $P121, $P3067["block"]
    unless_null $P121, vivify_1791
    new $P121, "Undef"
  vivify_1791:
    if $P121, if_3066
.annotate 'line', 1813
    set $P3069, param_3065
    unless_null $P3069, vivify_1792
    $P3069 = root_new ['parrot';'Hash']
  vivify_1792:
    set $P126, $P3069["statement"]
    unless_null $P126, vivify_1793
    new $P126, "Undef"
  vivify_1793:
    $P127 = $P126."ast"()
    set $P120, $P127
.annotate 'line', 1812
    goto if_3066_end
  if_3066:
    set $P3068, param_3065
    unless_null $P3068, vivify_1794
    $P3068 = root_new ['parrot';'Hash']
  vivify_1794:
    set $P123, $P3068["block"]
    unless_null $P123, vivify_1795
    new $P123, "Undef"
  vivify_1795:
    $P124 = $P123."ast"()
    $P125 = "block_immediate"($P124)
    set $P120, $P125
  if_3066_end:
    $P128 = $P118."!make"($P120)
.annotate 'line', 1810
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<if>" :anon :subid("273_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3071
    .param pmc param_3072
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1818
    .lex "self", param_3071
    .lex "$/", param_3072
    set $P118, param_3072
    set $P3073, param_3072
    unless_null $P3073, vivify_1796
    $P3073 = root_new ['parrot';'Hash']
  vivify_1796:
    set $P120, $P3073["cond"]
    unless_null $P120, vivify_1797
    new $P120, "Undef"
  vivify_1797:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<unless>" :anon :subid("274_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3075
    .param pmc param_3076
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1819
    .lex "self", param_3075
    .lex "$/", param_3076
    set $P118, param_3076
    set $P3077, param_3076
    unless_null $P3077, vivify_1798
    $P3077 = root_new ['parrot';'Hash']
  vivify_1798:
    set $P120, $P3077["cond"]
    unless_null $P120, vivify_1799
    new $P120, "Undef"
  vivify_1799:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<while>" :anon :subid("275_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3079
    .param pmc param_3080
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1821
    .lex "self", param_3079
    .lex "$/", param_3080
    set $P118, param_3080
    set $P3081, param_3080
    unless_null $P3081, vivify_1800
    $P3081 = root_new ['parrot';'Hash']
  vivify_1800:
    set $P120, $P3081["cond"]
    unless_null $P120, vivify_1801
    new $P120, "Undef"
  vivify_1801:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<until>" :anon :subid("276_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3083
    .param pmc param_3084
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1822
    .lex "self", param_3083
    .lex "$/", param_3084
    set $P118, param_3084
    set $P3085, param_3084
    unless_null $P3085, vivify_1802
    $P3085 = root_new ['parrot';'Hash']
  vivify_1802:
    set $P120, $P3085["cond"]
    unless_null $P120, vivify_1803
    new $P120, "Undef"
  vivify_1803:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<fatarrow>" :anon :subid("277_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3087
    .param pmc param_3088
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1826
    .lex "self", param_3087
    .lex "$/", param_3088
    set $P118, param_3088
    set $P3089, param_3088
    unless_null $P3089, vivify_1804
    $P3089 = root_new ['parrot';'Hash']
  vivify_1804:
    set $P120, $P3089["fatarrow"]
    unless_null $P120, vivify_1805
    new $P120, "Undef"
  vivify_1805:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<colonpair>" :anon :subid("278_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3091
    .param pmc param_3092
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1827
    .lex "self", param_3091
    .lex "$/", param_3092
    set $P118, param_3092
    set $P3093, param_3092
    unless_null $P3093, vivify_1806
    $P3093 = root_new ['parrot';'Hash']
  vivify_1806:
    set $P120, $P3093["colonpair"]
    unless_null $P120, vivify_1807
    new $P120, "Undef"
  vivify_1807:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<variable>" :anon :subid("279_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3095
    .param pmc param_3096
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1828
    .lex "self", param_3095
    .lex "$/", param_3096
    set $P118, param_3096
    set $P3097, param_3096
    unless_null $P3097, vivify_1808
    $P3097 = root_new ['parrot';'Hash']
  vivify_1808:
    set $P120, $P3097["variable"]
    unless_null $P120, vivify_1809
    new $P120, "Undef"
  vivify_1809:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<package_declarator>" :anon :subid("280_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3099
    .param pmc param_3100
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1829
    .lex "self", param_3099
    .lex "$/", param_3100
    set $P118, param_3100
    set $P3101, param_3100
    unless_null $P3101, vivify_1810
    $P3101 = root_new ['parrot';'Hash']
  vivify_1810:
    set $P120, $P3101["package_declarator"]
    unless_null $P120, vivify_1811
    new $P120, "Undef"
  vivify_1811:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<scope_declarator>" :anon :subid("281_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3103
    .param pmc param_3104
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1830
    .lex "self", param_3103
    .lex "$/", param_3104
    set $P118, param_3104
    set $P3105, param_3104
    unless_null $P3105, vivify_1812
    $P3105 = root_new ['parrot';'Hash']
  vivify_1812:
    set $P120, $P3105["scope_declarator"]
    unless_null $P120, vivify_1813
    new $P120, "Undef"
  vivify_1813:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<routine_declarator>" :anon :subid("282_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3107
    .param pmc param_3108
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1831
    .lex "self", param_3107
    .lex "$/", param_3108
    set $P118, param_3108
    set $P3109, param_3108
    unless_null $P3109, vivify_1814
    $P3109 = root_new ['parrot';'Hash']
  vivify_1814:
    set $P120, $P3109["routine_declarator"]
    unless_null $P120, vivify_1815
    new $P120, "Undef"
  vivify_1815:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<regex_declarator>" :anon :subid("283_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3111
    .param pmc param_3112
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1832
    .lex "self", param_3111
    .lex "$/", param_3112
    set $P118, param_3112
    set $P3113, param_3112
    unless_null $P3113, vivify_1816
    $P3113 = root_new ['parrot';'Hash']
  vivify_1816:
    set $P120, $P3113["regex_declarator"]
    unless_null $P120, vivify_1817
    new $P120, "Undef"
  vivify_1817:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<statement_prefix>" :anon :subid("284_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3115
    .param pmc param_3116
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1833
    .lex "self", param_3115
    .lex "$/", param_3116
    set $P118, param_3116
    set $P3117, param_3116
    unless_null $P3117, vivify_1818
    $P3117 = root_new ['parrot';'Hash']
  vivify_1818:
    set $P120, $P3117["statement_prefix"]
    unless_null $P120, vivify_1819
    new $P120, "Undef"
  vivify_1819:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<lambda>" :anon :subid("285_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3119
    .param pmc param_3120
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1834
    .lex "self", param_3119
    .lex "$/", param_3120
    set $P118, param_3120
    set $P3121, param_3120
    unless_null $P3121, vivify_1820
    $P3121 = root_new ['parrot';'Hash']
  vivify_1820:
    set $P120, $P3121["pblock"]
    unless_null $P120, vivify_1821
    new $P120, "Undef"
  vivify_1821:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "fatarrow" :anon :subid("286_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3123
    .param pmc param_3124
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1836
    .lex "self", param_3123
    .lex "$/", param_3124
.annotate 'line', 1837
    new $P118, "Undef"
    set $P3125, $P118
    .lex "$past", $P3125
    set $P3126, param_3124
    unless_null $P3126, vivify_1822
    $P3126 = root_new ['parrot';'Hash']
  vivify_1822:
    set $P120, $P3126["val"]
    unless_null $P120, vivify_1823
    new $P120, "Undef"
  vivify_1823:
    $P121 = $P120."ast"()
    set $P3125, $P121
.annotate 'line', 1838
    set $P120, $P3125
    unless_null $P120, vivify_1824
    new $P120, "Undef"
  vivify_1824:
    set $P3127, param_3124
    unless_null $P3127, vivify_1825
    $P3127 = root_new ['parrot';'Hash']
  vivify_1825:
    set $P121, $P3127["key"]
    unless_null $P121, vivify_1826
    new $P121, "Undef"
  vivify_1826:
    $P123 = $P121."Str"()
    $P120."named"($P123)
.annotate 'line', 1839
    set $P120, param_3124
    set $P121, $P3125
    unless_null $P121, vivify_1827
    new $P121, "Undef"
  vivify_1827:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1836
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair" :anon :subid("287_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3129
    .param pmc param_3130
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1842
    .const 'Sub' $P3138 = "810_1338064451.944" 
    capture_lex $P3138
    .lex "self", param_3129
    .lex "$/", param_3130
.annotate 'line', 1843
    set $P3132, param_3130
    unless_null $P3132, vivify_1828
    $P3132 = root_new ['parrot';'Hash']
  vivify_1828:
    set $P120, $P3132["variable"]
    unless_null $P120, vivify_1829
    new $P120, "Undef"
  vivify_1829:
    if $P120, if_3131
.annotate 'line', 1846
    .const 'Sub' $P3138 = "810_1338064451.944" 
    capture_lex $P3138
    $P123 = $P3138()
    set $P118, $P123
.annotate 'line', 1843
    goto if_3131_end
  if_3131:
.annotate 'line', 1844
    set $P3133, param_3130
    unless_null $P3133, vivify_1841
    $P3133 = root_new ['parrot';'Hash']
  vivify_1841:
    set $P121, $P3133["variable"]
    unless_null $P121, vivify_1842
    new $P121, "Undef"
  vivify_1842:
    $P123 = $P121."ast"()
    set $P3134, param_3130
    unless_null $P3134, vivify_1843
    $P3134 = root_new ['parrot';'Hash']
  vivify_1843:
    set $P3135, $P3134["variable"]
    unless_null $P3135, vivify_1844
    $P3135 = root_new ['parrot';'Hash']
  vivify_1844:
    set $P124, $P3135["desigilname"]
    unless_null $P124, vivify_1845
    new $P124, "Undef"
  vivify_1845:
    set $S100, $P124
    $P123."named"($S100)
.annotate 'line', 1845
    set $P121, param_3130
    set $P3136, param_3130
    unless_null $P3136, vivify_1846
    $P3136 = root_new ['parrot';'Hash']
  vivify_1846:
    set $P123, $P3136["variable"]
    unless_null $P123, vivify_1847
    new $P123, "Undef"
  vivify_1847:
    $P124 = $P123."ast"()
    $P125 = $P121."!make"($P124)
.annotate 'line', 1843
    set $P118, $P125
  if_3131_end:
.annotate 'line', 1842
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3137"  :anon :subid("810_1338064451.944") :outer("287_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1847
    new $P121, "Undef"
    set $P3139, $P121
    .lex "$past", $P3139
.annotate 'line', 1848
    find_lex $P3141, "$/"
    unless_null $P3141, vivify_1830
    $P3141 = root_new ['parrot';'Hash']
  vivify_1830:
    set $P124, $P3141["circumfix"]
    unless_null $P124, vivify_1831
    new $P124, "Undef"
  vivify_1831:
    if $P124, if_3140
.annotate 'line', 1849
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Val"]
    find_lex $P3144, "$/"
    unless_null $P3144, vivify_1832
    $P3144 = root_new ['parrot';'Hash']
  vivify_1832:
    set $P133, $P3144["not"]
    unless_null $P133, vivify_1833
    new $P133, "Undef"
  vivify_1833:
    isfalse $I100, $P133
    $P134 = $P132."new"($I100 :named("value"))
    set $P123, $P134
.annotate 'line', 1848
    goto if_3140_end
  if_3140:
    find_lex $P3142, "$/"
    unless_null $P3142, vivify_1834
    $P3142 = root_new ['parrot';'Hash']
  vivify_1834:
    set $P3143, $P3142["circumfix"]
    unless_null $P3143, vivify_1835
    $P3143 = root_new ['parrot';'ResizablePMCArray']
  vivify_1835:
    set $P126, $P3143[0]
    unless_null $P126, vivify_1836
    new $P126, "Undef"
  vivify_1836:
    $P127 = $P126."ast"()
    set $P123, $P127
  if_3140_end:
    set $P3139, $P123
.annotate 'line', 1850
    set $P123, $P3139
    unless_null $P123, vivify_1837
    new $P123, "Undef"
  vivify_1837:
    find_lex $P3145, "$/"
    unless_null $P3145, vivify_1838
    $P3145 = root_new ['parrot';'Hash']
  vivify_1838:
    set $P124, $P3145["identifier"]
    unless_null $P124, vivify_1839
    new $P124, "Undef"
  vivify_1839:
    set $S100, $P124
    $P123."named"($S100)
.annotate 'line', 1851
    find_dynamic_lex $P123, "$/"
    set $P124, $P3139
    unless_null $P124, vivify_1840
    new $P124, "Undef"
  vivify_1840:
    $P126 = $P123."!make"($P124)
.annotate 'line', 1846
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable" :anon :subid("288_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3147
    .param pmc param_3148
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1855
    .const 'Sub' $P3154 = "811_1338064451.944" 
    capture_lex $P3154
    .lex "self", param_3147
    .lex "$/", param_3148
.annotate 'line', 1856
    new $P118, "Undef"
    set $P3149, $P118
    .lex "$past", $P3149
.annotate 'line', 1855
    set $P120, $P3149
    unless_null $P120, vivify_1848
    new $P120, "Undef"
  vivify_1848:
.annotate 'line', 1857
    set $P3151, param_3148
    unless_null $P3151, vivify_1849
    $P3151 = root_new ['parrot';'Hash']
  vivify_1849:
    set $P120, $P3151["postcircumfix"]
    unless_null $P120, vivify_1850
    new $P120, "Undef"
  vivify_1850:
    if $P120, if_3150
.annotate 'line', 1861
    .const 'Sub' $P3154 = "811_1338064451.944" 
    capture_lex $P3154
    $P3154()
    goto if_3150_end
  if_3150:
.annotate 'line', 1858
    set $P3152, param_3148
    unless_null $P3152, vivify_1920
    $P3152 = root_new ['parrot';'Hash']
  vivify_1920:
    set $P121, $P3152["postcircumfix"]
    unless_null $P121, vivify_1921
    new $P121, "Undef"
  vivify_1921:
    $P123 = $P121."ast"()
    set $P3149, $P123
.annotate 'line', 1859
    set $P121, $P3149
    unless_null $P121, vivify_1922
    new $P121, "Undef"
  vivify_1922:
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    $P127 = $P126."new"("$/" :named("name"))
    $P121."unshift"($P127)
  if_3150_end:
.annotate 'line', 1923
    set $P120, param_3148
    set $P121, $P3149
    unless_null $P121, vivify_1923
    new $P121, "Undef"
  vivify_1923:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1855
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3153"  :anon :subid("811_1338064451.944") :outer("288_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1861
    .const 'Sub' $P3176 = "813_1338064451.944" 
    capture_lex $P3176
    .const 'Sub' $P3167 = "812_1338064451.944" 
    capture_lex $P3167
.annotate 'line', 1862
    $P3156 = root_new ['parrot';'ResizablePMCArray']
    set $P3155, $P3156
    .lex "@name", $P3155
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "NQP"
    get_who $P124, $P123
    set $P125, $P124["Compiler"]
    find_lex $P126, "$/"
    unless_null $P126, vivify_1851
    new $P126, "Undef"
  vivify_1851:
    set $S100, $P126
    $P127 = $P125."parse_name"($S100)
    set $P3155, $P127
.annotate 'line', 1863
    set $P3158, $P3155
    unless_null $P3158, vivify_1852
    $P3158 = root_new ['parrot';'ResizablePMCArray']
  vivify_1852:
    set $N100, $P3158
    set $N101, 1
    isgt $I100, $N100, $N101
    if $I100, if_3157
.annotate 'line', 1870
    find_lex $P3164, "$/"
    unless_null $P3164, vivify_1853
    $P3164 = root_new ['parrot';'Hash']
  vivify_1853:
    set $P3165, $P3164["twigil"]
    unless_null $P3165, vivify_1854
    $P3165 = root_new ['parrot';'ResizablePMCArray']
  vivify_1854:
    set $P124, $P3165[0]
    unless_null $P124, vivify_1855
    new $P124, "Undef"
  vivify_1855:
    set $S100, $P124
    iseq $I101, $S100, "*"
    if $I101, if_3163
.annotate 'line', 1881
    find_lex $P3173, "$/"
    unless_null $P3173, vivify_1856
    $P3173 = root_new ['parrot';'Hash']
  vivify_1856:
    set $P3174, $P3173["twigil"]
    unless_null $P3174, vivify_1857
    $P3174 = root_new ['parrot';'ResizablePMCArray']
  vivify_1857:
    set $P129, $P3174[0]
    unless_null $P129, vivify_1858
    new $P129, "Undef"
  vivify_1858:
    set $S101, $P129
    iseq $I102, $S101, "!"
    if $I102, if_3172
.annotate 'line', 1913
    find_dynamic_lex $P139, "$*W"
    unless_null $P139, vivify_1859
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$W"]
    unless_null $P139, vivify_1860
    die "Contextual $*W not found"
  vivify_1860:
  vivify_1859:
    set $P3196, $P3155
    unless_null $P3196, vivify_1861
    $P3196 = root_new ['parrot';'ResizablePMCArray']
  vivify_1861:
    set $P140, $P3196[0]
    unless_null $P140, vivify_1862
    new $P140, "Undef"
  vivify_1862:
    set $S102, $P140
    $P141 = $P139."is_package"($S102)
    if $P141, if_3195
.annotate 'line', 1918
    get_hll_global $P142, "GLOBAL"
    nqp_get_package_through_who $P143, $P142, "PAST"
    get_who $P144, $P143
    set $P146, $P144["Var"]
.annotate 'line', 1919
    set $P3199, $P3155
    unless_null $P3199, vivify_1863
    $P3199 = root_new ['parrot';'ResizablePMCArray']
  vivify_1863:
    $P147 = $P3199."pop"()
    set $S103, $P147
    find_lex $P3200, "$/"
    unless_null $P3200, vivify_1864
    $P3200 = root_new ['parrot';'Hash']
  vivify_1864:
    set $P149, $P3200["sigil"]
    unless_null $P149, vivify_1865
    new $P149, "Undef"
  vivify_1865:
    $P150 = "vivitype"($P149)
.annotate 'line', 1918
    $P151 = $P146."new"($S103 :named("name"), $P150 :named("viviself"))
    store_lex "$past", $P151
.annotate 'line', 1917
    set $P136, $P151
.annotate 'line', 1913
    goto if_3195_end
  if_3195:
.annotate 'line', 1914
    set $P3197, $P3155
    unless_null $P3197, vivify_1866
    $P3197 = root_new ['parrot';'ResizablePMCArray']
  vivify_1866:
    find_lex $P142, "$/"
    unless_null $P142, vivify_1867
    new $P142, "Undef"
  vivify_1867:
    $P143 = "lexical_package_lookup"($P3197, $P142)
    store_lex "$past", $P143
.annotate 'line', 1915
    find_lex $P142, "$past"
    unless_null $P142, vivify_1868
    new $P142, "Undef"
  vivify_1868:
    find_lex $P3198, "$/"
    unless_null $P3198, vivify_1869
    $P3198 = root_new ['parrot';'Hash']
  vivify_1869:
    set $P143, $P3198["sigil"]
    unless_null $P143, vivify_1870
    new $P143, "Undef"
  vivify_1870:
    $P144 = "vivitype"($P143)
    $P145 = $P142."viviself"($P144)
.annotate 'line', 1913
    set $P136, $P145
  if_3195_end:
    set $P128, $P136
.annotate 'line', 1881
    goto if_3172_end
  if_3172:
    .const 'Sub' $P3176 = "813_1338064451.944" 
    capture_lex $P3176
    $P135 = $P3176()
    set $P128, $P135
  if_3172_end:
    set $P123, $P128
.annotate 'line', 1870
    goto if_3163_end
  if_3163:
    .const 'Sub' $P3167 = "812_1338064451.944" 
    capture_lex $P3167
    $P127 = $P3167()
    set $P123, $P127
  if_3163_end:
    set $P121, $P123
.annotate 'line', 1863
    goto if_3157_end
  if_3157:
.annotate 'line', 1864
    find_lex $P3160, "$/"
    unless_null $P3160, vivify_1912
    $P3160 = root_new ['parrot';'Hash']
  vivify_1912:
    set $P123, $P3160["twigil"]
    unless_null $P123, vivify_1913
    new $P123, "Undef"
  vivify_1913:
    unless $P123, if_3159_end
.annotate 'line', 1865
    find_lex $P124, "$/"
    unless_null $P124, vivify_1914
    new $P124, "Undef"
  vivify_1914:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Twigil not allowed on multi-part name")
  if_3159_end:
.annotate 'line', 1867
    set $P3161, $P3155
    unless_null $P3161, vivify_1915
    $P3161 = root_new ['parrot';'ResizablePMCArray']
  vivify_1915:
    find_lex $P123, "$/"
    unless_null $P123, vivify_1916
    new $P123, "Undef"
  vivify_1916:
    $P124 = "lexical_package_lookup"($P3161, $P123)
    store_lex "$past", $P124
.annotate 'line', 1868
    find_lex $P123, "$past"
    unless_null $P123, vivify_1917
    new $P123, "Undef"
  vivify_1917:
    find_lex $P3162, "$/"
    unless_null $P3162, vivify_1918
    $P3162 = root_new ['parrot';'Hash']
  vivify_1918:
    set $P124, $P3162["sigil"]
    unless_null $P124, vivify_1919
    new $P124, "Undef"
  vivify_1919:
    $P125 = "vivitype"($P124)
    $P126 = $P123."viviself"($P125)
.annotate 'line', 1863
    set $P121, $P126
  if_3157_end:
.annotate 'line', 1861
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3175"  :anon :subid("813_1338064451.944") :outer("811_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1881
    .const 'Sub' $P3186 = "814_1338064451.944" 
    capture_lex $P3186
.annotate 'line', 1883
    new $P131, "Undef"
    set $P3177, $P131
    .lex "$name", $P3177
.annotate 'line', 1884
    new $P132, "Undef"
    set $P3178, $P132
    .lex "$ch", $P3178
.annotate 'line', 1883
    find_lex $P3179, "@name"
    unless_null $P3179, vivify_1871
    $P3179 = root_new ['parrot';'ResizablePMCArray']
  vivify_1871:
    $P133 = $P3179."pop"()
    set $S102, $P133
    new $P135, 'String'
    set $P135, $S102
    set $P3177, $P135
.annotate 'line', 1884
    find_dynamic_lex $P137, "$*PKGDECL"
    unless_null $P137, vivify_1872
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$PKGDECL"]
    unless_null $P137, vivify_1873
    die "Contextual $*PKGDECL not found"
  vivify_1873:
  vivify_1872:
    set $S102, $P137
    iseq $I103, $S102, "role"
    if $I103, if_3180
    find_dynamic_lex $P145, "$*W"
    unless_null $P145, vivify_1874
    get_hll_global $P143, "GLOBAL"
    get_who $P144, $P143
    set $P145, $P144["$W"]
    unless_null $P145, vivify_1875
    die "Contextual $*W not found"
  vivify_1875:
  vivify_1874:
    find_dynamic_lex $P149, "$*PACKAGE"
    unless_null $P149, vivify_1876
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$PACKAGE"]
    unless_null $P149, vivify_1877
    die "Contextual $*PACKAGE not found"
  vivify_1877:
  vivify_1876:
    $P150 = $P145."get_ref"($P149)
    set $P133, $P150
    goto if_3180_end
  if_3180:
    get_hll_global $P138, "GLOBAL"
    nqp_get_package_through_who $P139, $P138, "PAST"
    get_who $P140, $P139
    set $P141, $P140["Var"]
    $P142 = $P141."new"("$?CLASS" :named("name"))
    set $P133, $P142
  if_3180_end:
    set $P3178, $P133
.annotate 'line', 1885
    new $P133, "Float"
    assign $P133, 1
    set $P3181, $P3178
    unless_null $P3181, vivify_1878
    $P3181 = root_new ['parrot';'Hash']
    set $P3178, $P3181
  vivify_1878:
    set $P3181["has_compile_time_value"], $P133
.annotate 'line', 1886
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_1879
    get_hll_global $P133, "GLOBAL"
    get_who $P135, $P133
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_1880
    die "Contextual $*PACKAGE not found"
  vivify_1880:
  vivify_1879:
    set $P3182, $P3178
    unless_null $P3182, vivify_1881
    $P3182 = root_new ['parrot';'Hash']
    set $P3178, $P3182
  vivify_1881:
    set $P3182["compile_time_value"], $P136
.annotate 'line', 1887
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P135, $P133, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    set $P138, $P3177
    unless_null $P138, vivify_1882
    new $P138, "Undef"
  vivify_1882:
.annotate 'line', 1889
    find_lex $P3183, "$/"
    unless_null $P3183, vivify_1883
    $P3183 = root_new ['parrot';'Hash']
  vivify_1883:
    set $P139, $P3183["sigil"]
    unless_null $P139, vivify_1884
    new $P139, "Undef"
  vivify_1884:
    $P140 = "vivitype"($P139)
.annotate 'line', 1890
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Op"]
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P149, $P147["Var"]
    $P150 = $P149."new"("self" :named("name"))
    $P151 = $P144."new"($P150, "nqp_decontainerize PP" :named("pirop"))
    set $P152, $P3178
    unless_null $P152, vivify_1885
    new $P152, "Undef"
  vivify_1885:
    $P153 = $P137."new"($P151, $P152, $P138 :named("name"), "attribute_6model" :named("scope"), $P140 :named("viviself"))
.annotate 'line', 1887
    store_lex "$past", $P153
.annotate 'line', 1895
    find_dynamic_lex $P137, "$*IN_DECL"
    unless_null $P137, vivify_1886
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$IN_DECL"]
    unless_null $P137, vivify_1887
    die "Contextual $*IN_DECL not found"
  vivify_1887:
  vivify_1886:
    unless $P137, unless_3184
    set $P133, $P137
    goto unless_3184_end
  unless_3184:
    .const 'Sub' $P3186 = "814_1338064451.944" 
    capture_lex $P3186
    $P140 = $P3186()
    set $P133, $P140
  unless_3184_end:
.annotate 'line', 1881
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3185"  :anon :subid("814_1338064451.944") :outer("813_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1895
    .const 'Sub' $P3189 = "815_1338064451.944" 
    capture_lex $P3189
.annotate 'line', 1896
    new $P138, "Undef"
    set $P3187, $P138
    .lex "$attr", $P3187
.annotate 'line', 1895
    set $P139, $P3187
    unless_null $P139, vivify_1888
    new $P139, "Undef"
  vivify_1888:
.annotate 'line', 1897
    find_dynamic_lex $P142, "$*PACKAGE"
    unless_null $P142, vivify_1889
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$PACKAGE"]
    unless_null $P142, vivify_1890
    die "Contextual $*PACKAGE not found"
  vivify_1890:
  vivify_1889:
    get_how $P143, $P142
    find_dynamic_lex $P146, "$*PACKAGE"
    unless_null $P146, vivify_1891
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$PACKAGE"]
    unless_null $P146, vivify_1892
    die "Contextual $*PACKAGE not found"
  vivify_1892:
  vivify_1891:
    $P147 = $P143."attributes"($P146, 1 :named("local"))
    defined $I103, $P147
    unless $I103, for_undef_1893
    iter $P139, $P147
    new $P151, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P151, loop3192_handler
    push_eh $P151
  loop3192_test:
    unless $P139, loop3192_done
    shift $P149, $P139
  loop3192_redo:
    .const 'Sub' $P3189 = "815_1338064451.944" 
    capture_lex $P3189
    $P3189($P149)
  loop3192_next:
    goto loop3192_test
  loop3192_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P152, exception, 'type'
    eq $P152, .CONTROL_LOOP_NEXT, loop3192_next
    eq $P152, .CONTROL_LOOP_REDO, loop3192_redo
  loop3192_done:
    pop_eh 
  for_undef_1893:
.annotate 'line', 1903
    set $P140, $P3187
    unless_null $P140, vivify_1897
    new $P140, "Undef"
  vivify_1897:
    defined $I103, $P140
    if $I103, if_3193
.annotate 'line', 1909
    find_lex $P142, "$/"
    unless_null $P142, vivify_1898
    new $P142, "Undef"
  vivify_1898:
    $P143 = $P142."CURSOR"()
    new $P144, 'String'
    set $P144, "Attribute '"
    find_lex $P145, "$name"
    unless_null $P145, vivify_1899
    new $P145, "Undef"
  vivify_1899:
    concat $P146, $P144, $P145
    concat $P147, $P146, "' not declared"
    $P149 = $P143."panic"($P147)
.annotate 'line', 1908
    set $P139, $P149
.annotate 'line', 1903
    goto if_3193_end
  if_3193:
.annotate 'line', 1904
    set $P142, $P3187
    unless_null $P142, vivify_1900
    new $P142, "Undef"
  vivify_1900:
    can $I104, $P142, "type"
    if $I104, if_3194
    new $P141, 'Integer'
    set $P141, $I104
    goto if_3194_end
  if_3194:
.annotate 'line', 1905
    find_lex $P143, "$past"
    unless_null $P143, vivify_1901
    new $P143, "Undef"
  vivify_1901:
    set $P144, $P3187
    unless_null $P144, vivify_1902
    new $P144, "Undef"
  vivify_1902:
    $P145 = $P144."type"()
    $P146 = $P143."type"($P145)
.annotate 'line', 1904
    set $P141, $P146
  if_3194_end:
.annotate 'line', 1903
    set $P139, $P141
  if_3193_end:
.annotate 'line', 1895
    .return ($P139)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3188"  :anon :subid("815_1338064451.944") :outer("814_1338064451.944")
    .param pmc param_3190
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1897
    .lex "$_", param_3190
.annotate 'line', 1898
    find_lex $P151, "$_"
    unless_null $P151, vivify_1894
    new $P151, "Undef"
  vivify_1894:
    $S102 = $P151."name"()
    find_lex $P152, "$name"
    unless_null $P152, vivify_1895
    new $P152, "Undef"
  vivify_1895:
    set $S103, $P152
    iseq $I104, $S102, $S103
    if $I104, if_3191
    new $P150, 'Integer'
    set $P150, $I104
    goto if_3191_end
  if_3191:
.annotate 'line', 1899
    find_lex $P153, "$_"
    unless_null $P153, vivify_1896
    new $P153, "Undef"
  vivify_1896:
    store_lex "$attr", $P153
.annotate 'line', 1900
    die 0, .CONTROL_LOOP_LAST
  if_3191_end:
.annotate 'line', 1897
    .return ($P150)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3166"  :anon :subid("812_1338064451.944") :outer("811_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1871
    new $P125, "Undef"
    set $P3168, $P125
    .lex "$global_fallback", $P3168
    find_lex $P3169, "$/"
    unless_null $P3169, vivify_1903
    $P3169 = root_new ['parrot';'Hash']
  vivify_1903:
    set $P127, $P3169["sigil"]
    unless_null $P127, vivify_1904
    new $P127, "Undef"
  vivify_1904:
    set $S101, $P127
    new $P128, 'String'
    set $P128, $S101
    find_lex $P3170, "$/"
    unless_null $P3170, vivify_1905
    $P3170 = root_new ['parrot';'Hash']
  vivify_1905:
    set $P129, $P3170["desigilname"]
    unless_null $P129, vivify_1906
    new $P129, "Undef"
  vivify_1906:
    concat $P131, $P128, $P129
    new $P132, "ResizablePMCArray"
    push $P132, "GLOBAL"
    push $P132, $P131
    find_lex $P133, "$/"
    unless_null $P133, vivify_1907
    new $P133, "Undef"
  vivify_1907:
    $P134 = "lexical_package_lookup"($P132, $P133)
    set $P3168, $P134
.annotate 'line', 1872
    set $P127, $P3168
    unless_null $P127, vivify_1908
    new $P127, "Undef"
  vivify_1908:
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Op"]
.annotate 'line', 1873
    new $P133, "String"
    assign $P133, "Contextual "
    find_lex $P134, "$/"
    unless_null $P134, vivify_1909
    new $P134, "Undef"
  vivify_1909:
    set $S101, $P134
    concat $P135, $P133, $S101
    concat $P136, $P135, " not found"
    $P137 = $P132."new"($P136, "die" :named("pirop"))
.annotate 'line', 1872
    $P127."viviself"($P137)
.annotate 'line', 1876
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
.annotate 'line', 1877
    find_lex $P3171, "@name"
    unless_null $P3171, vivify_1910
    $P3171 = root_new ['parrot';'ResizablePMCArray']
  vivify_1910:
    $P132 = $P3171."pop"()
    set $S101, $P132
.annotate 'line', 1876
    set $P133, $P3168
    unless_null $P133, vivify_1911
    new $P133, "Undef"
  vivify_1911:
    $P134 = $P131."new"($S101 :named("name"), "contextual" :named("scope"), $P133 :named("viviself"))
    store_lex "$past", $P134
.annotate 'line', 1870
    .return ($P134)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<module>" :anon :subid("289_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3202
    .param pmc param_3203
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1926
    .lex "self", param_3202
    .lex "$/", param_3203
    set $P118, param_3203
    set $P3204, param_3203
    unless_null $P3204, vivify_1924
    $P3204 = root_new ['parrot';'Hash']
  vivify_1924:
    set $P120, $P3204["package_def"]
    unless_null $P120, vivify_1925
    new $P120, "Undef"
  vivify_1925:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<knowhow>" :anon :subid("290_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3206
    .param pmc param_3207
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1927
    .lex "self", param_3206
    .lex "$/", param_3207
    set $P118, param_3207
    set $P3208, param_3207
    unless_null $P3208, vivify_1926
    $P3208 = root_new ['parrot';'Hash']
  vivify_1926:
    set $P120, $P3208["package_def"]
    unless_null $P120, vivify_1927
    new $P120, "Undef"
  vivify_1927:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<class>" :anon :subid("291_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3210
    .param pmc param_3211
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1928
    .lex "self", param_3210
    .lex "$/", param_3211
    set $P118, param_3211
    set $P3212, param_3211
    unless_null $P3212, vivify_1928
    $P3212 = root_new ['parrot';'Hash']
  vivify_1928:
    set $P120, $P3212["package_def"]
    unless_null $P120, vivify_1929
    new $P120, "Undef"
  vivify_1929:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<grammar>" :anon :subid("292_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3214
    .param pmc param_3215
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1929
    .lex "self", param_3214
    .lex "$/", param_3215
    set $P118, param_3215
    set $P3216, param_3215
    unless_null $P3216, vivify_1930
    $P3216 = root_new ['parrot';'Hash']
  vivify_1930:
    set $P120, $P3216["package_def"]
    unless_null $P120, vivify_1931
    new $P120, "Undef"
  vivify_1931:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<role>" :anon :subid("293_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3218
    .param pmc param_3219
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1930
    .lex "self", param_3218
    .lex "$/", param_3219
    set $P118, param_3219
    set $P3220, param_3219
    unless_null $P3220, vivify_1932
    $P3220 = root_new ['parrot';'Hash']
  vivify_1932:
    set $P120, $P3220["package_def"]
    unless_null $P120, vivify_1933
    new $P120, "Undef"
  vivify_1933:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<native>" :anon :subid("294_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3222
    .param pmc param_3223
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1931
    .lex "self", param_3222
    .lex "$/", param_3223
    set $P118, param_3223
    set $P3224, param_3223
    unless_null $P3224, vivify_1934
    $P3224 = root_new ['parrot';'Hash']
  vivify_1934:
    set $P120, $P3224["package_def"]
    unless_null $P120, vivify_1935
    new $P120, "Undef"
  vivify_1935:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<stub>" :anon :subid("295_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3226
    .param pmc param_3227
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1933
    .lex "self", param_3226
    .lex "$/", param_3227
.annotate 'line', 1936
    new $P118, "Undef"
    set $P3228, $P118
    .lex "$HOW", $P3228
.annotate 'line', 1937
    new $P120, "Undef"
    set $P3229, $P120
    .lex "$PACKAGE", $P3229
.annotate 'line', 1936
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_1936
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_1937
    die "Contextual $*W not found"
  vivify_1937:
  vivify_1936:
    set $P3230, param_3227
    unless_null $P3230, vivify_1938
    $P3230 = root_new ['parrot';'Hash']
  vivify_1938:
    set $P3231, $P3230["metaclass"]
    unless_null $P3231, vivify_1939
    $P3231 = root_new ['parrot';'Hash']
  vivify_1939:
    set $P125, $P3231["identifier"]
    unless_null $P125, vivify_1940
    new $P125, "Undef"
  vivify_1940:
    $P126 = $P124."find_sym"($P125)
    set $P3228, $P126
.annotate 'line', 1937
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_1941
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_1942
    die "Contextual $*W not found"
  vivify_1942:
  vivify_1941:
    set $P125, $P3228
    unless_null $P125, vivify_1943
    new $P125, "Undef"
  vivify_1943:
    set $P3232, param_3227
    unless_null $P3232, vivify_1944
    $P3232 = root_new ['parrot';'Hash']
  vivify_1944:
    set $P126, $P3232["name"]
    unless_null $P126, vivify_1945
    new $P126, "Undef"
  vivify_1945:
    set $S100, $P126
    $P127 = $P124."pkg_create_mo"($P125, $S100 :named("name"))
    set $P3229, $P127
.annotate 'line', 1940
    find_dynamic_lex $P125, "$*SCOPE"
    unless_null $P125, vivify_1946
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$SCOPE"]
    unless_null $P125, vivify_1947
    die "Contextual $*SCOPE not found"
  vivify_1947:
  vivify_1946:
    set $S100, $P125
    iseq $I100, $S100, "our"
    unless $I100, unless_3234
    new $P121, 'Integer'
    set $P121, $I100
    goto unless_3234_end
  unless_3234:
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_1948
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_1949
    die "Contextual $*SCOPE not found"
  vivify_1949:
  vivify_1948:
    set $S101, $P128
    iseq $I101, $S101, ""
    new $P121, 'Integer'
    set $P121, $I101
  unless_3234_end:
    if $P121, if_3233
.annotate 'line', 1946
    find_dynamic_lex $P132, "$*SCOPE"
    unless_null $P132, vivify_1950
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$SCOPE"]
    unless_null $P132, vivify_1951
    die "Contextual $*SCOPE not found"
  vivify_1951:
  vivify_1950:
    set $S102, $P132
    iseq $I102, $S102, "my"
    if $I102, if_3243
.annotate 'line', 1953
    set $P133, param_3227
    unless_null $P133, vivify_1952
    new $P133, "Undef"
  vivify_1952:
    $P134 = $P133."CURSOR"()
    find_dynamic_lex $P137, "$*SCOPE"
    unless_null $P137, vivify_1953
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$SCOPE"]
    unless_null $P137, vivify_1954
    die "Contextual $*SCOPE not found"
  vivify_1954:
  vivify_1953:
    concat $P138, $P137, " scoped packages are not supported"
    $P134."panic"($P138)
.annotate 'line', 1952
    goto if_3243_end
  if_3243:
.annotate 'line', 1947
    set $P3245, param_3227
    unless_null $P3245, vivify_1955
    $P3245 = root_new ['parrot';'Hash']
  vivify_1955:
    set $P3246, $P3245["name"]
    unless_null $P3246, vivify_1956
    $P3246 = root_new ['parrot';'Hash']
  vivify_1956:
    set $P133, $P3246["identifier"]
    unless_null $P133, vivify_1957
    new $P133, "Undef"
  vivify_1957:
    set $N100, $P133
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_3244_end
.annotate 'line', 1948
    set $P3247, param_3227
    unless_null $P3247, vivify_1958
    $P3247 = root_new ['parrot';'Hash']
  vivify_1958:
    set $P134, $P3247["name"]
    unless_null $P134, vivify_1959
    new $P134, "Undef"
  vivify_1959:
    $P135 = $P134."CURSOR"()
    $P135."panic"("A my scoped package cannot have a multi-part name yet")
  if_3244_end:
.annotate 'line', 1950
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_1960
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_1961
    die "Contextual $*W not found"
  vivify_1961:
  vivify_1960:
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_1962
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_1963
    die "Contextual $*W not found"
  vivify_1963:
  vivify_1962:
    $P139 = $P138."cur_lexpad"()
    set $P3248, param_3227
    unless_null $P3248, vivify_1964
    $P3248 = root_new ['parrot';'Hash']
  vivify_1964:
    set $P3249, $P3248["name"]
    unless_null $P3249, vivify_1965
    $P3249 = root_new ['parrot';'Hash']
  vivify_1965:
    set $P3250, $P3249["identifier"]
    unless_null $P3250, vivify_1966
    $P3250 = root_new ['parrot';'ResizablePMCArray']
  vivify_1966:
    set $P140, $P3250[0]
    unless_null $P140, vivify_1967
    new $P140, "Undef"
  vivify_1967:
    set $P141, $P3229
    unless_null $P141, vivify_1968
    new $P141, "Undef"
  vivify_1968:
    $P135."install_lexical_symbol"($P139, $P140, $P141)
  if_3243_end:
.annotate 'line', 1946
    goto if_3233_end
  if_3233:
.annotate 'line', 1941
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_1969
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_1970
    die "Contextual $*W not found"
  vivify_1970:
  vivify_1969:
    find_dynamic_lex $P135, "$*OUTERPACKAGE"
    unless_null $P135, vivify_1971
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$OUTERPACKAGE"]
    unless_null $P135, vivify_1972
    die "Contextual $*OUTERPACKAGE not found"
  vivify_1972:
  vivify_1971:
    set $P3235, param_3227
    unless_null $P3235, vivify_1973
    $P3235 = root_new ['parrot';'Hash']
  vivify_1973:
    set $P3236, $P3235["name"]
    unless_null $P3236, vivify_1974
    $P3236 = root_new ['parrot';'Hash']
  vivify_1974:
    set $P136, $P3236["identifier"]
    unless_null $P136, vivify_1975
    new $P136, "Undef"
  vivify_1975:
    set $P137, $P3229
    unless_null $P137, vivify_1976
    new $P137, "Undef"
  vivify_1976:
    $P132."install_package_symbol"($P135, $P136, $P137)
.annotate 'line', 1942
    set $P3238, param_3227
    unless_null $P3238, vivify_1977
    $P3238 = root_new ['parrot';'Hash']
  vivify_1977:
    set $P3239, $P3238["name"]
    unless_null $P3239, vivify_1978
    $P3239 = root_new ['parrot';'Hash']
  vivify_1978:
    set $P129, $P3239["identifier"]
    unless_null $P129, vivify_1979
    new $P129, "Undef"
  vivify_1979:
    set $N100, $P129
    set $N101, 1
    iseq $I102, $N100, $N101
    unless $I102, if_3237_end
.annotate 'line', 1943
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_1980
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_1981
    die "Contextual $*W not found"
  vivify_1981:
  vivify_1980:
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_1982
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_1983
    die "Contextual $*W not found"
  vivify_1983:
  vivify_1982:
    $P137 = $P136."cur_lexpad"()
    set $P3240, param_3227
    unless_null $P3240, vivify_1984
    $P3240 = root_new ['parrot';'Hash']
  vivify_1984:
    set $P3241, $P3240["name"]
    unless_null $P3241, vivify_1985
    $P3241 = root_new ['parrot';'Hash']
  vivify_1985:
    set $P3242, $P3241["identifier"]
    unless_null $P3242, vivify_1986
    $P3242 = root_new ['parrot';'ResizablePMCArray']
  vivify_1986:
    set $P138, $P3242[0]
    unless_null $P138, vivify_1987
    new $P138, "Undef"
  vivify_1987:
    set $P139, $P3229
    unless_null $P139, vivify_1988
    new $P139, "Undef"
  vivify_1988:
    $P133."install_lexical_symbol"($P137, $P138, $P139)
  if_3237_end:
  if_3233_end:
.annotate 'line', 1956
    set $P121, param_3227
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Stmts"]
    $P127 = $P126."new"()
    $P128 = $P121."!make"($P127)
.annotate 'line', 1933
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "package_def" :anon :subid("296_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3252
    .param pmc param_3253
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1959
    .const 'Sub' $P3302 = "819_1338064451.944" 
    capture_lex $P3302
    .const 'Sub' $P3295 = "818_1338064451.944" 
    capture_lex $P3295
    .const 'Sub' $P3275 = "816_1338064451.944" 
    capture_lex $P3275
    .lex "self", param_3252
    .lex "$/", param_3253
.annotate 'line', 1961
    $P3255 = root_new ['parrot';'ResizablePMCArray']
    set $P3254, $P3255
    .lex "@ns", $P3254
.annotate 'line', 1962
    new $P118, "Undef"
    set $P3256, $P118
    .lex "$name", $P3256
.annotate 'line', 1963
    new $P120, "Undef"
    set $P3257, $P120
    .lex "$how", $P3257
.annotate 'line', 1966
    new $P121, "Undef"
    set $P3258, $P121
    .lex "$past", $P3258
.annotate 'line', 1961
    set $P3259, param_3253
    unless_null $P3259, vivify_1989
    $P3259 = root_new ['parrot';'Hash']
  vivify_1989:
    set $P3260, $P3259["name"]
    unless_null $P3260, vivify_1990
    $P3260 = root_new ['parrot';'Hash']
  vivify_1990:
    set $P123, $P3260["identifier"]
    unless_null $P123, vivify_1991
    new $P123, "Undef"
  vivify_1991:
    clone $P124, $P123
    set $P3254, $P124
.annotate 'line', 1962
    set $P3261, $P3254
    unless_null $P3261, vivify_1992
    $P3261 = root_new ['parrot';'ResizablePMCArray']
  vivify_1992:
    $P123 = $P3261."pop"()
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3256, $P124
.annotate 'line', 1963
    find_dynamic_lex $P125, "$*PKGDECL"
    unless_null $P125, vivify_1993
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$PKGDECL"]
    unless_null $P125, vivify_1994
    die "Contextual $*PKGDECL not found"
  vivify_1994:
  vivify_1993:
    find_dynamic_lex $P128, "%*HOW"
    unless_null $P128, vivify_1995
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%HOW"]
    unless_null $P128, vivify_1996
    die "Contextual %*HOW not found"
  vivify_1996:
  vivify_1995:
    set $P129, $P128[$P125]
    unless_null $P129, vivify_1997
    new $P129, "Undef"
  vivify_1997:
    set $P3257, $P129
.annotate 'line', 1966
    set $P3263, param_3253
    unless_null $P3263, vivify_1998
    $P3263 = root_new ['parrot';'Hash']
  vivify_1998:
    set $P124, $P3263["block"]
    unless_null $P124, vivify_1999
    new $P124, "Undef"
  vivify_1999:
    if $P124, if_3262
    set $P3265, param_3253
    unless_null $P3265, vivify_2000
    $P3265 = root_new ['parrot';'Hash']
  vivify_2000:
    set $P127, $P3265["comp_unit"]
    unless_null $P127, vivify_2001
    new $P127, "Undef"
  vivify_2001:
    $P128 = $P127."ast"()
    set $P123, $P128
    goto if_3262_end
  if_3262:
    set $P3264, param_3253
    unless_null $P3264, vivify_2002
    $P3264 = root_new ['parrot';'Hash']
  vivify_2002:
    set $P125, $P3264["block"]
    unless_null $P125, vivify_2003
    new $P125, "Undef"
  vivify_2003:
    $P126 = $P125."ast"()
    set $P123, $P126
  if_3262_end:
    set $P3258, $P123
.annotate 'line', 1967
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2004
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2005
    die "Contextual $*SCOPE not found"
  vivify_2005:
  vivify_2004:
    set $S100, $P126
    iseq $I100, $S100, "our"
    unless $I100, unless_3267
    new $P123, 'Integer'
    set $P123, $I100
    goto unless_3267_end
  unless_3267:
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2006
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2007
    die "Contextual $*SCOPE not found"
  vivify_2007:
  vivify_2006:
    set $S101, $P129
    iseq $I101, $S101, ""
    new $P123, 'Integer'
    set $P123, $I101
  unless_3267_end:
    unless $P123, if_3266_end
.annotate 'line', 1968
    set $P131, $P3258
    unless_null $P131, vivify_2008
    new $P131, "Undef"
  vivify_2008:
    set $P3268, param_3253
    unless_null $P3268, vivify_2009
    $P3268 = root_new ['parrot';'Hash']
  vivify_2009:
    set $P3269, $P3268["name"]
    unless_null $P3269, vivify_2010
    $P3269 = root_new ['parrot';'Hash']
  vivify_2010:
    set $P132, $P3269["identifier"]
    unless_null $P132, vivify_2011
    new $P132, "Undef"
  vivify_2011:
    $P131."namespace"($P132)
  if_3266_end:
.annotate 'line', 1975
    set $P124, $P3257
    unless_null $P124, vivify_2012
    new $P124, "Undef"
  vivify_2012:
    can $I100, $P124, "parametric"
    if $I100, if_3271
    new $P123, 'Integer'
    set $P123, $I100
    goto if_3271_end
  if_3271:
    set $P125, $P3257
    unless_null $P125, vivify_2013
    new $P125, "Undef"
  vivify_2013:
    set $P126, $P3257
    unless_null $P126, vivify_2014
    new $P126, "Undef"
  vivify_2014:
    $P127 = $P125."parametric"($P126)
    set $P123, $P127
  if_3271_end:
    if $P123, if_3270
.annotate 'line', 1985
    set $P128, $P3258
    unless_null $P128, vivify_2015
    new $P128, "Undef"
  vivify_2015:
    $P128."blocktype"("immediate")
.annotate 'line', 1986
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2016
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2017
    die "Contextual $*W not found"
  vivify_2017:
  vivify_2016:
    set $P132, $P3258
    unless_null $P132, vivify_2018
    new $P132, "Undef"
  vivify_2018:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2019
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2020
    die "Contextual $*PACKAGE not found"
  vivify_2020:
  vivify_2019:
    $P131."install_lexical_symbol"($P132, "$?PACKAGE", $P135)
.annotate 'line', 1987
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2021
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2022
    die "Contextual $*W not found"
  vivify_2022:
  vivify_2021:
    set $P132, $P3258
    unless_null $P132, vivify_2023
    new $P132, "Undef"
  vivify_2023:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2024
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2025
    die "Contextual $*PACKAGE not found"
  vivify_2025:
  vivify_2024:
    $P131."install_lexical_symbol"($P132, "$?CLASS", $P135)
.annotate 'line', 1984
    goto if_3270_end
  if_3270:
.annotate 'line', 1976
    set $P128, $P3258
    unless_null $P128, vivify_2026
    new $P128, "Undef"
  vivify_2026:
    $P128."blocktype"("declaration")
.annotate 'line', 1977
    set $P128, $P3258
    unless_null $P128, vivify_2027
    new $P128, "Undef"
  vivify_2027:
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    $P134 = $P133."new"("$?CLASS" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"))
    $P128."unshift"($P134)
.annotate 'line', 1979
    set $P128, $P3258
    unless_null $P128, vivify_2028
    new $P128, "Undef"
  vivify_2028:
    $P128."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 1980
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2029
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2030
    die "Contextual $*W not found"
  vivify_2030:
  vivify_2029:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2031
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2032
    die "Contextual $*PACKAGE not found"
  vivify_2032:
  vivify_2031:
    set $P135, $P3258
    unless_null $P135, vivify_2033
    new $P135, "Undef"
  vivify_2033:
    $P131."pkg_set_body_block"($P134, $P135)
.annotate 'line', 1981
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2034
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2035
    die "Contextual $*W not found"
  vivify_2035:
  vivify_2034:
    set $P132, $P3258
    unless_null $P132, vivify_2036
    new $P132, "Undef"
  vivify_2036:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2037
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2038
    die "Contextual $*PACKAGE not found"
  vivify_2038:
  vivify_2037:
    $P131."install_lexical_symbol"($P132, "$?PACKAGE", $P135)
.annotate 'line', 1982
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2039
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2040
    die "Contextual $*W not found"
  vivify_2040:
  vivify_2039:
    set $P132, $P3258
    unless_null $P132, vivify_2041
    new $P132, "Undef"
  vivify_2041:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2042
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2043
    die "Contextual $*PACKAGE not found"
  vivify_2043:
  vivify_2042:
    $P131."install_lexical_symbol"($P132, "$?ROLE", $P135)
  if_3270_end:
.annotate 'line', 1991
    set $P3273, param_3253
    unless_null $P3273, vivify_2044
    $P3273 = root_new ['parrot';'Hash']
  vivify_2044:
    set $P123, $P3273["parent"]
    unless_null $P123, vivify_2045
    new $P123, "Undef"
  vivify_2045:
    if $P123, if_3272
.annotate 'line', 2005
    set $P127, $P3257
    unless_null $P127, vivify_2046
    new $P127, "Undef"
  vivify_2046:
    can $I100, $P127, "set_default_parent"
    unless $I100, if_3293_end
    .const 'Sub' $P3295 = "818_1338064451.944" 
    capture_lex $P3295
    $P3295()
  if_3293_end:
    goto if_3272_end
  if_3272:
.annotate 'line', 1991
    .const 'Sub' $P3275 = "816_1338064451.944" 
    capture_lex $P3275
    $P3275()
  if_3272_end:
.annotate 'line', 2012
    set $P3299, param_3253
    unless_null $P3299, vivify_2074
    $P3299 = root_new ['parrot';'Hash']
  vivify_2074:
    set $P123, $P3299["role"]
    unless_null $P123, vivify_2075
    new $P123, "Undef"
  vivify_2075:
    unless $P123, if_3298_end
.annotate 'line', 2013
    set $P3300, param_3253
    unless_null $P3300, vivify_2076
    $P3300 = root_new ['parrot';'Hash']
  vivify_2076:
    set $P125, $P3300["role"]
    unless_null $P125, vivify_2077
    new $P125, "Undef"
  vivify_2077:
    defined $I100, $P125
    unless $I100, for_undef_2078
    iter $P124, $P125
    new $P131, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P131, loop3317_handler
    push_eh $P131
  loop3317_test:
    unless $P124, loop3317_done
    shift $P126, $P124
  loop3317_redo:
    .const 'Sub' $P3302 = "819_1338064451.944" 
    capture_lex $P3302
    $P3302($P126)
  loop3317_next:
    goto loop3317_test
  loop3317_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P132, exception, 'type'
    eq $P132, .CONTROL_LOOP_NEXT, loop3317_next
    eq $P132, .CONTROL_LOOP_REDO, loop3317_redo
  loop3317_done:
    pop_eh 
  for_undef_2078:
  if_3298_end:
.annotate 'line', 2030
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2093
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2094
    die "Contextual $*W not found"
  vivify_2094:
  vivify_2093:
    find_dynamic_lex $P128, "$*PACKAGE"
    unless_null $P128, vivify_2095
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$PACKAGE"]
    unless_null $P128, vivify_2096
    die "Contextual $*PACKAGE not found"
  vivify_2096:
  vivify_2095:
    $P125."pkg_compose"($P128)
.annotate 'line', 2032
    set $P123, param_3253
    set $P124, $P3258
    unless_null $P124, vivify_2097
    new $P124, "Undef"
  vivify_2097:
    $P125 = $P123."!make"($P124)
.annotate 'line', 1959
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3294"  :anon :subid("818_1338064451.944") :outer("296_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2006
    new $P128, "Undef"
    set $P3296, $P128
    .lex "$default", $P3296
    find_dynamic_lex $P133, "$*PKGDECL"
    unless_null $P133, vivify_2047
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PKGDECL"]
    unless_null $P133, vivify_2048
    die "Contextual $*PKGDECL not found"
  vivify_2048:
  vivify_2047:
    set $S100, $P133
    iseq $I101, $S100, "grammar"
    if $I101, if_3297
    new $P135, "ResizablePMCArray"
    push $P135, "NQPMu"
    set $P129, $P135
    goto if_3297_end
  if_3297:
    new $P134, "ResizablePMCArray"
    push $P134, "NQPCursor"
    set $P129, $P134
  if_3297_end:
    set $P3296, $P129
.annotate 'line', 2007
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2049
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2050
    die "Contextual $*W not found"
  vivify_2050:
  vivify_2049:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2051
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2052
    die "Contextual $*PACKAGE not found"
  vivify_2052:
  vivify_2051:
.annotate 'line', 2008
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_2053
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_2054
    die "Contextual $*W not found"
  vivify_2054:
  vivify_2053:
    set $P139, $P3296
    unless_null $P139, vivify_2055
    new $P139, "Undef"
  vivify_2055:
    $P140 = $P138."find_sym"($P139)
    $P141 = $P132."pkg_add_parent_or_role"($P135, "set_default_parent", $P140)
.annotate 'line', 2005
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3274"  :anon :subid("816_1338064451.944") :outer("296_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1991
    .const 'Sub' $P3279 = "817_1338064451.944" 
    capture_lex $P3279
.annotate 'line', 1992
    new $P124, "Undef"
    set $P3276, $P124
    .lex "$parent", $P3276
.annotate 'line', 1993
    new $P125, "Undef"
    set $P3277, $P125
    .lex "$parent_found", $P3277
.annotate 'line', 1991
    set $P126, $P3276
    unless_null $P126, vivify_2056
    new $P126, "Undef"
  vivify_2056:
    set $P126, $P3277
    unless_null $P126, vivify_2057
    new $P126, "Undef"
  vivify_2057:
.annotate 'line', 1994
    .const 'Sub' $P3279 = "817_1338064451.944" 
    capture_lex $P3279
    $P3279()
.annotate 'line', 1998
    set $P127, $P3277
    unless_null $P127, vivify_2064
    new $P127, "Undef"
  vivify_2064:
    if $P127, if_3290
.annotate 'line', 2002
    find_lex $P128, "$/"
    unless_null $P128, vivify_2065
    new $P128, "Undef"
  vivify_2065:
    $P129 = $P128."CURSOR"()
    new $P131, "String"
    assign $P131, "Could not find parent class '"
    find_lex $P3291, "$/"
    unless_null $P3291, vivify_2066
    $P3291 = root_new ['parrot';'Hash']
  vivify_2066:
    set $P3292, $P3291["parent"]
    unless_null $P3292, vivify_2067
    $P3292 = root_new ['parrot';'ResizablePMCArray']
  vivify_2067:
    set $P132, $P3292[0]
    unless_null $P132, vivify_2068
    new $P132, "Undef"
  vivify_2068:
    set $S100, $P132
    concat $P133, $P131, $S100
    concat $P134, $P133, "'"
    $P135 = $P129."panic"($P134)
.annotate 'line', 2001
    set $P126, $P135
.annotate 'line', 1998
    goto if_3290_end
  if_3290:
.annotate 'line', 1999
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2069
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2070
    die "Contextual $*W not found"
  vivify_2070:
  vivify_2069:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2071
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2072
    die "Contextual $*PACKAGE not found"
  vivify_2072:
  vivify_2071:
    set $P135, $P3276
    unless_null $P135, vivify_2073
    new $P135, "Undef"
  vivify_2073:
    $P136 = $P131."pkg_add_parent_or_role"($P134, "add_parent", $P135)
.annotate 'line', 1998
    set $P126, $P136
  if_3290_end:
.annotate 'line', 1991
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3278"  :anon :subid("817_1338064451.944") :outer("816_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1994
    new $P3285, 'ExceptionHandler'
    set_label $P3285, control_3284
    $P3285."handle_types_except"(.CONTROL_ALL)
    push_eh $P3285
.annotate 'line', 1995
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2058
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2059
    die "Contextual $*W not found"
  vivify_2059:
  vivify_2058:
    find_lex $P3280, "$/"
    unless_null $P3280, vivify_2060
    $P3280 = root_new ['parrot';'Hash']
  vivify_2060:
    set $P3281, $P3280["parent"]
    unless_null $P3281, vivify_2061
    $P3281 = root_new ['parrot';'ResizablePMCArray']
  vivify_2061:
    set $P3282, $P3281[0]
    unless_null $P3282, vivify_2062
    $P3282 = root_new ['parrot';'Hash']
  vivify_2062:
    set $P129, $P3282["identifier"]
    unless_null $P129, vivify_2063
    new $P129, "Undef"
  vivify_2063:
    clone $P131, $P129
    $P132 = $P128."find_sym"($P131)
    store_lex "$parent", $P132
.annotate 'line', 1996
    new $P126, "Float"
    assign $P126, 1
    store_lex "$parent_found", $P126
.annotate 'line', 1994
    pop_eh 
    goto skip_handler_3283
  control_3284:
    peek_exception $P3286
    .local pmc exception 
    .get_results (exception) 
    new $P3288, 'Integer'
    set $P3288, 1
    set exception["handled"], $P3288
    set $I3289, exception["handled"]
    eq $I3289, 1, handled_3287
    rethrow exception
  handled_3287:
    finalize $P3286
    .return (exception)
  skip_handler_3283:
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3301"  :anon :subid("819_1338064451.944") :outer("296_1338064451.944")
    .param pmc param_3305
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2013
    .const 'Sub' $P3307 = "820_1338064451.944" 
    capture_lex $P3307
.annotate 'line', 2014
    new $P127, "Undef"
    set $P3303, $P127
    .lex "$role", $P3303
.annotate 'line', 2015
    new $P128, "Undef"
    set $P3304, $P128
    .lex "$role_found", $P3304
    .lex "$_", param_3305
.annotate 'line', 2013
    set $P129, $P3303
    unless_null $P129, vivify_2079
    new $P129, "Undef"
  vivify_2079:
    set $P129, $P3304
    unless_null $P129, vivify_2080
    new $P129, "Undef"
  vivify_2080:
.annotate 'line', 2016
    .const 'Sub' $P3307 = "820_1338064451.944" 
    capture_lex $P3307
    $P3307()
.annotate 'line', 2020
    set $P131, $P3304
    unless_null $P131, vivify_2085
    new $P131, "Undef"
  vivify_2085:
    if $P131, if_3316
.annotate 'line', 2024
    find_lex $P132, "$/"
    unless_null $P132, vivify_2086
    new $P132, "Undef"
  vivify_2086:
    $P133 = $P132."CURSOR"()
    new $P134, "String"
    assign $P134, "Could not find role '"
    find_lex $P135, "$_"
    unless_null $P135, vivify_2087
    new $P135, "Undef"
  vivify_2087:
    set $S100, $P135
    concat $P136, $P134, $S100
    concat $P137, $P136, "'"
    $P138 = $P133."panic"($P137)
.annotate 'line', 2023
    set $P129, $P138
.annotate 'line', 2020
    goto if_3316_end
  if_3316:
.annotate 'line', 2021
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_2088
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_2089
    die "Contextual $*W not found"
  vivify_2089:
  vivify_2088:
    find_dynamic_lex $P137, "$*PACKAGE"
    unless_null $P137, vivify_2090
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$PACKAGE"]
    unless_null $P137, vivify_2091
    die "Contextual $*PACKAGE not found"
  vivify_2091:
  vivify_2090:
    set $P138, $P3303
    unless_null $P138, vivify_2092
    new $P138, "Undef"
  vivify_2092:
    $P139 = $P134."pkg_add_parent_or_role"($P137, "add_role", $P138)
.annotate 'line', 2020
    set $P129, $P139
  if_3316_end:
.annotate 'line', 2013
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3306"  :anon :subid("820_1338064451.944") :outer("819_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2016
    new $P3311, 'ExceptionHandler'
    set_label $P3311, control_3310
    $P3311."handle_types_except"(.CONTROL_ALL)
    push_eh $P3311
.annotate 'line', 2017
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2081
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2082
    die "Contextual $*W not found"
  vivify_2082:
  vivify_2081:
    find_lex $P3308, "$_"
    unless_null $P3308, vivify_2083
    $P3308 = root_new ['parrot';'Hash']
  vivify_2083:
    set $P133, $P3308["identifier"]
    unless_null $P133, vivify_2084
    new $P133, "Undef"
  vivify_2084:
    clone $P134, $P133
    $P135 = $P132."find_sym"($P134)
    store_lex "$role", $P135
.annotate 'line', 2018
    new $P129, "Float"
    assign $P129, 1
    store_lex "$role_found", $P129
.annotate 'line', 2016
    pop_eh 
    goto skip_handler_3309
  control_3310:
    peek_exception $P3312
    .local pmc exception 
    .get_results (exception) 
    new $P3314, 'Integer'
    set $P3314, 1
    set exception["handled"], $P3314
    set $I3315, exception["handled"]
    eq $I3315, 1, handled_3313
    rethrow exception
  handled_3313:
    finalize $P3312
    .return (exception)
  skip_handler_3309:
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<my>" :anon :subid("297_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3319
    .param pmc param_3320
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2035
    .lex "self", param_3319
    .lex "$/", param_3320
    set $P118, param_3320
    set $P3321, param_3320
    unless_null $P3321, vivify_2098
    $P3321 = root_new ['parrot';'Hash']
  vivify_2098:
    set $P120, $P3321["scoped"]
    unless_null $P120, vivify_2099
    new $P120, "Undef"
  vivify_2099:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<our>" :anon :subid("298_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3323
    .param pmc param_3324
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2036
    .lex "self", param_3323
    .lex "$/", param_3324
    set $P118, param_3324
    set $P3325, param_3324
    unless_null $P3325, vivify_2100
    $P3325 = root_new ['parrot';'Hash']
  vivify_2100:
    set $P120, $P3325["scoped"]
    unless_null $P120, vivify_2101
    new $P120, "Undef"
  vivify_2101:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<has>" :anon :subid("299_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3327
    .param pmc param_3328
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2037
    .lex "self", param_3327
    .lex "$/", param_3328
    set $P118, param_3328
    set $P3329, param_3328
    unless_null $P3329, vivify_2102
    $P3329 = root_new ['parrot';'Hash']
  vivify_2102:
    set $P120, $P3329["scoped"]
    unless_null $P120, vivify_2103
    new $P120, "Undef"
  vivify_2103:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scoped" :anon :subid("300_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3331
    .param pmc param_3332
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2039
    .lex "self", param_3331
    .lex "$/", param_3332
.annotate 'line', 2040
    set $P118, param_3332
    set $P3334, param_3332
    unless_null $P3334, vivify_2104
    $P3334 = root_new ['parrot';'Hash']
  vivify_2104:
    set $P121, $P3334["declarator"]
    unless_null $P121, vivify_2105
    new $P121, "Undef"
  vivify_2105:
    if $P121, if_3333
.annotate 'line', 2041
    set $P3337, param_3332
    unless_null $P3337, vivify_2106
    $P3337 = root_new ['parrot';'Hash']
  vivify_2106:
    set $P126, $P3337["multi_declarator"]
    unless_null $P126, vivify_2107
    new $P126, "Undef"
  vivify_2107:
    if $P126, if_3336
.annotate 'line', 2042
    set $P3339, param_3332
    unless_null $P3339, vivify_2108
    $P3339 = root_new ['parrot';'Hash']
  vivify_2108:
    set $P129, $P3339["package_declarator"]
    unless_null $P129, vivify_2109
    new $P129, "Undef"
  vivify_2109:
    $P131 = $P129."ast"()
    set $P125, $P131
.annotate 'line', 2041
    goto if_3336_end
  if_3336:
    set $P3338, param_3332
    unless_null $P3338, vivify_2110
    $P3338 = root_new ['parrot';'Hash']
  vivify_2110:
    set $P127, $P3338["multi_declarator"]
    unless_null $P127, vivify_2111
    new $P127, "Undef"
  vivify_2111:
    $P128 = $P127."ast"()
    set $P125, $P128
  if_3336_end:
    set $P120, $P125
.annotate 'line', 2040
    goto if_3333_end
  if_3333:
    set $P3335, param_3332
    unless_null $P3335, vivify_2112
    $P3335 = root_new ['parrot';'Hash']
  vivify_2112:
    set $P123, $P3335["declarator"]
    unless_null $P123, vivify_2113
    new $P123, "Undef"
  vivify_2113:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3333_end:
    $P132 = $P118."!make"($P120)
.annotate 'line', 2039
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "declarator" :anon :subid("301_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3341
    .param pmc param_3342
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2045
    .lex "self", param_3341
    .lex "$/", param_3342
.annotate 'line', 2046
    set $P118, param_3342
.annotate 'line', 2047
    set $P3344, param_3342
    unless_null $P3344, vivify_2114
    $P3344 = root_new ['parrot';'Hash']
  vivify_2114:
    set $P121, $P3344["routine_declarator"]
    unless_null $P121, vivify_2115
    new $P121, "Undef"
  vivify_2115:
    if $P121, if_3343
.annotate 'line', 2048
    set $P3346, param_3342
    unless_null $P3346, vivify_2116
    $P3346 = root_new ['parrot';'Hash']
  vivify_2116:
    set $P125, $P3346["variable_declarator"]
    unless_null $P125, vivify_2117
    new $P125, "Undef"
  vivify_2117:
    $P126 = $P125."ast"()
    set $P120, $P126
.annotate 'line', 2047
    goto if_3343_end
  if_3343:
    set $P3345, param_3342
    unless_null $P3345, vivify_2118
    $P3345 = root_new ['parrot';'Hash']
  vivify_2118:
    set $P123, $P3345["routine_declarator"]
    unless_null $P123, vivify_2119
    new $P123, "Undef"
  vivify_2119:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3343_end:
    $P127 = $P118."!make"($P120)
.annotate 'line', 2045
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<multi>" :anon :subid("302_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3348
    .param pmc param_3349
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2051
    .lex "self", param_3348
    .lex "$/", param_3349
    set $P118, param_3349
    set $P3351, param_3349
    unless_null $P3351, vivify_2120
    $P3351 = root_new ['parrot';'Hash']
  vivify_2120:
    set $P121, $P3351["declarator"]
    unless_null $P121, vivify_2121
    new $P121, "Undef"
  vivify_2121:
    if $P121, if_3350
    set $P3353, param_3349
    unless_null $P3353, vivify_2122
    $P3353 = root_new ['parrot';'Hash']
  vivify_2122:
    set $P125, $P3353["routine_def"]
    unless_null $P125, vivify_2123
    new $P125, "Undef"
  vivify_2123:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3350_end
  if_3350:
    set $P3352, param_3349
    unless_null $P3352, vivify_2124
    $P3352 = root_new ['parrot';'Hash']
  vivify_2124:
    set $P123, $P3352["declarator"]
    unless_null $P123, vivify_2125
    new $P123, "Undef"
  vivify_2125:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3350_end:
    $P127 = $P118."!make"($P120)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<proto>" :anon :subid("303_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3355
    .param pmc param_3356
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2052
    .lex "self", param_3355
    .lex "$/", param_3356
    set $P118, param_3356
    set $P3358, param_3356
    unless_null $P3358, vivify_2126
    $P3358 = root_new ['parrot';'Hash']
  vivify_2126:
    set $P121, $P3358["declarator"]
    unless_null $P121, vivify_2127
    new $P121, "Undef"
  vivify_2127:
    if $P121, if_3357
    set $P3360, param_3356
    unless_null $P3360, vivify_2128
    $P3360 = root_new ['parrot';'Hash']
  vivify_2128:
    set $P125, $P3360["routine_def"]
    unless_null $P125, vivify_2129
    new $P125, "Undef"
  vivify_2129:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3357_end
  if_3357:
    set $P3359, param_3356
    unless_null $P3359, vivify_2130
    $P3359 = root_new ['parrot';'Hash']
  vivify_2130:
    set $P123, $P3359["declarator"]
    unless_null $P123, vivify_2131
    new $P123, "Undef"
  vivify_2131:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3357_end:
    $P127 = $P118."!make"($P120)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<null>" :anon :subid("304_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3362
    .param pmc param_3363
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2053
    .lex "self", param_3362
    .lex "$/", param_3363
    set $P118, param_3363
    set $P3364, param_3363
    unless_null $P3364, vivify_2132
    $P3364 = root_new ['parrot';'Hash']
  vivify_2132:
    set $P120, $P3364["declarator"]
    unless_null $P120, vivify_2133
    new $P120, "Undef"
  vivify_2133:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "variable_declarator" :anon :subid("305_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3366
    .param pmc param_3367
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2056
    .const 'Sub' $P3402 = "822_1338064451.944" 
    capture_lex $P3402
    .const 'Sub' $P3379 = "821_1338064451.944" 
    capture_lex $P3379
    .lex "self", param_3366
    .lex "$/", param_3367
.annotate 'line', 2057
    new $P118, "Undef"
    set $P3368, $P118
    .lex "$past", $P3368
.annotate 'line', 2058
    new $P120, "Undef"
    set $P3369, $P120
    .lex "$sigil", $P3369
.annotate 'line', 2059
    new $P121, "Undef"
    set $P3370, $P121
    .lex "$name", $P3370
.annotate 'line', 2060
    new $P123, "Undef"
    set $P3371, $P123
    .lex "$BLOCK", $P3371
.annotate 'line', 2057
    set $P3372, param_3367
    unless_null $P3372, vivify_2134
    $P3372 = root_new ['parrot';'Hash']
  vivify_2134:
    set $P124, $P3372["variable"]
    unless_null $P124, vivify_2135
    new $P124, "Undef"
  vivify_2135:
    $P125 = $P124."ast"()
    set $P3368, $P125
.annotate 'line', 2058
    set $P3373, param_3367
    unless_null $P3373, vivify_2136
    $P3373 = root_new ['parrot';'Hash']
  vivify_2136:
    set $P3374, $P3373["variable"]
    unless_null $P3374, vivify_2137
    $P3374 = root_new ['parrot';'Hash']
  vivify_2137:
    set $P124, $P3374["sigil"]
    unless_null $P124, vivify_2138
    new $P124, "Undef"
  vivify_2138:
    set $P3369, $P124
.annotate 'line', 2059
    set $P124, $P3368
    unless_null $P124, vivify_2139
    new $P124, "Undef"
  vivify_2139:
    $P125 = $P124."name"()
    set $P3370, $P125
.annotate 'line', 2060
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2140
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2141
    die "Contextual $*W not found"
  vivify_2141:
  vivify_2140:
    $P127 = $P126."cur_lexpad"()
    set $P3371, $P127
.annotate 'line', 2061
    set $P125, $P3370
    unless_null $P125, vivify_2142
    new $P125, "Undef"
  vivify_2142:
    if $P125, if_3376
    set $P124, $P125
    goto if_3376_end
  if_3376:
    set $P126, $P3371
    unless_null $P126, vivify_2143
    new $P126, "Undef"
  vivify_2143:
    set $P127, $P3370
    unless_null $P127, vivify_2144
    new $P127, "Undef"
  vivify_2144:
    $P128 = $P126."symbol"($P127)
    set $P124, $P128
  if_3376_end:
    unless $P124, if_3375_end
.annotate 'line', 2062
    set $P129, param_3367
    unless_null $P129, vivify_2145
    new $P129, "Undef"
  vivify_2145:
    $P131 = $P129."CURSOR"()
    set $P132, $P3370
    unless_null $P132, vivify_2146
    new $P132, "Undef"
  vivify_2146:
    $P131."panic"("Redeclaration of symbol ", $P132)
  if_3375_end:
.annotate 'line', 2064
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2147
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2148
    die "Contextual $*SCOPE not found"
  vivify_2148:
  vivify_2147:
    set $S100, $P126
    iseq $I100, $S100, "has"
    if $I100, if_3377
.annotate 'line', 2084
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2149
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2150
    die "Contextual $*SCOPE not found"
  vivify_2150:
  vivify_2149:
    set $S101, $P129
    iseq $I101, $S101, "our"
    if $I101, if_3395
.annotate 'line', 2094
    set $P3397, $P3371
    unless_null $P3397, vivify_2151
    $P3397 = root_new ['parrot';'ResizablePMCArray']
  vivify_2151:
    set $P131, $P3397[0]
    unless_null $P131, vivify_2152
    new $P131, "Undef"
  vivify_2152:
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Var"]
    set $P137, $P3370
    unless_null $P137, vivify_2153
    new $P137, "Undef"
  vivify_2153:
.annotate 'line', 2096
    set $P138, $P3369
    unless_null $P138, vivify_2154
    new $P138, "Undef"
  vivify_2154:
    $P139 = "vivitype"($P138)
.annotate 'line', 2094
    set $P140, param_3367
    unless_null $P140, vivify_2155
    new $P140, "Undef"
  vivify_2155:
    $P141 = $P136."new"($P137 :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), 1 :named("lvalue"), $P139 :named("viviself"), $P140 :named("node"))
    $P131."push"($P141)
.annotate 'line', 2099
    set $P131, $P3371
    unless_null $P131, vivify_2156
    new $P131, "Undef"
  vivify_2156:
    set $P133, $P3370
    unless_null $P133, vivify_2157
    new $P133, "Undef"
  vivify_2157:
    $P131."symbol"($P133, "lexical" :named("scope"))
.annotate 'line', 2093
    goto if_3395_end
  if_3395:
.annotate 'line', 2088
    set $P3396, param_3367
    unless_null $P3396, vivify_2158
    $P3396 = root_new ['parrot';'Hash']
  vivify_2158:
    set $P131, $P3396["variable"]
    unless_null $P131, vivify_2159
    new $P131, "Undef"
  vivify_2159:
    set $S102, $P131
    new $P133, 'String'
    set $P133, $S102
    set $P3370, $P133
.annotate 'line', 2089
    set $P131, $P3370
    unless_null $P131, vivify_2160
    new $P131, "Undef"
  vivify_2160:
    new $P133, "ResizablePMCArray"
    push $P133, $P131
    set $P134, param_3367
    unless_null $P134, vivify_2161
    new $P134, "Undef"
  vivify_2161:
    $P135 = "lexical_package_lookup"($P133, $P134)
    set $P3368, $P135
.annotate 'line', 2090
    set $P131, $P3368
    unless_null $P131, vivify_2162
    new $P131, "Undef"
  vivify_2162:
    set $P133, $P3369
    unless_null $P133, vivify_2163
    new $P133, "Undef"
  vivify_2163:
    $P134 = "vivitype"($P133)
    $P131."viviself"($P134)
.annotate 'line', 2091
    set $P131, $P3371
    unless_null $P131, vivify_2164
    new $P131, "Undef"
  vivify_2164:
    set $P133, $P3370
    unless_null $P133, vivify_2165
    new $P133, "Undef"
  vivify_2165:
    $P131."symbol"($P133, "package" :named("scope"))
  if_3395_end:
.annotate 'line', 2084
    goto if_3377_end
  if_3377:
.annotate 'line', 2064
    .const 'Sub' $P3379 = "821_1338064451.944" 
    capture_lex $P3379
    $P3379()
  if_3377_end:
.annotate 'line', 2103
    set $P124, param_3367
    set $P125, $P3368
    unless_null $P125, vivify_2196
    new $P125, "Undef"
  vivify_2196:
    $P124."!make"($P125)
.annotate 'line', 2105
    set $P3399, param_3367
    unless_null $P3399, vivify_2197
    $P3399 = root_new ['parrot';'Hash']
  vivify_2197:
    set $P125, $P3399["trait"]
    unless_null $P125, vivify_2198
    new $P125, "Undef"
  vivify_2198:
    if $P125, if_3398
    set $P124, $P125
    goto if_3398_end
  if_3398:
.annotate 'line', 2106
    set $P3400, param_3367
    unless_null $P3400, vivify_2199
    $P3400 = root_new ['parrot';'Hash']
  vivify_2199:
    set $P127, $P3400["trait"]
    unless_null $P127, vivify_2200
    new $P127, "Undef"
  vivify_2200:
    defined $I100, $P127
    unless $I100, for_undef_2201
    iter $P126, $P127
    new $P129, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P129, loop3404_handler
    push_eh $P129
  loop3404_test:
    unless $P126, loop3404_done
    shift $P128, $P126
  loop3404_redo:
    .const 'Sub' $P3402 = "822_1338064451.944" 
    capture_lex $P3402
    $P3402($P128)
  loop3404_next:
    goto loop3404_test
  loop3404_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P131, exception, 'type'
    eq $P131, .CONTROL_LOOP_NEXT, loop3404_next
    eq $P131, .CONTROL_LOOP_REDO, loop3404_redo
  loop3404_done:
    pop_eh 
  for_undef_2201:
.annotate 'line', 2105
    set $P124, $P126
  if_3398_end:
.annotate 'line', 2056
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3378"  :anon :subid("821_1338064451.944") :outer("305_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2071
    $P3381 = root_new ['parrot';'Hash']
    set $P3380, $P3381
    .lex "%lit_args", $P3380
.annotate 'line', 2072
    $P3383 = root_new ['parrot';'Hash']
    set $P3382, $P3383
    .lex "%obj_args", $P3382
.annotate 'line', 2066
    find_dynamic_lex $P133, "$*PKGDECL"
    unless_null $P133, vivify_2166
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PKGDECL"]
    unless_null $P133, vivify_2167
    die "Contextual $*PKGDECL not found"
  vivify_2167:
  vivify_2166:
    concat $P134, $P133, "-attr"
    find_dynamic_lex $P129, "%*HOW"
    unless_null $P129, vivify_2168
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["%HOW"]
    unless_null $P129, vivify_2169
    die "Contextual %*HOW not found"
  vivify_2169:
  vivify_2168:
    exists $I101, $P129[$P134]
    if $I101, unless_3384_end
.annotate 'line', 2067
    find_lex $P135, "$/"
    unless_null $P135, vivify_2170
    new $P135, "Undef"
  vivify_2170:
    $P136 = $P135."CURSOR"()
    find_dynamic_lex $P139, "$*PKGDECL"
    unless_null $P139, vivify_2171
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PKGDECL"]
    unless_null $P139, vivify_2172
    die "Contextual $*PKGDECL not found"
  vivify_2172:
  vivify_2171:
    concat $P140, $P139, " packages do not support attributes"
    $P136."panic"($P140)
  unless_3384_end:
.annotate 'line', 2064
    set $P3385, $P3380
    unless_null $P3385, vivify_2173
    $P3385 = root_new ['parrot';'Hash']
  vivify_2173:
    set $P3386, $P3382
    unless_null $P3386, vivify_2174
    $P3386 = root_new ['parrot';'Hash']
  vivify_2174:
.annotate 'line', 2073
    find_lex $P127, "$name"
    unless_null $P127, vivify_2175
    new $P127, "Undef"
  vivify_2175:
    set $P3387, $P3380
    unless_null $P3387, vivify_2176
    $P3387 = root_new ['parrot';'Hash']
    set $P3380, $P3387
  vivify_2176:
    set $P3387["name"], $P127
.annotate 'line', 2074
    find_lex $P3389, "$/"
    unless_null $P3389, vivify_2177
    $P3389 = root_new ['parrot';'Hash']
  vivify_2177:
    set $P127, $P3389["typename"]
    unless_null $P127, vivify_2178
    new $P127, "Undef"
  vivify_2178:
    unless $P127, if_3388_end
.annotate 'line', 2075
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2179
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2180
    die "Contextual $*W not found"
  vivify_2180:
  vivify_2179:
    find_lex $P3390, "$/"
    unless_null $P3390, vivify_2181
    $P3390 = root_new ['parrot';'Hash']
  vivify_2181:
    set $P3391, $P3390["typename"]
    unless_null $P3391, vivify_2182
    $P3391 = root_new ['parrot';'ResizablePMCArray']
  vivify_2182:
    set $P132, $P3391[0]
    unless_null $P132, vivify_2183
    new $P132, "Undef"
  vivify_2183:
    set $S101, $P132
    new $P133, "ResizablePMCArray"
    push $P133, $S101
    $P134 = $P131."find_sym"($P133)
    set $P3392, $P3382
    unless_null $P3392, vivify_2184
    $P3392 = root_new ['parrot';'Hash']
    set $P3382, $P3392
  vivify_2184:
    set $P3392["type"], $P134
  if_3388_end:
.annotate 'line', 2079
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2185
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_2186
    die "Contextual $*W not found"
  vivify_2186:
  vivify_2185:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2187
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2188
    die "Contextual $*PACKAGE not found"
  vivify_2188:
  vivify_2187:
    find_dynamic_lex $P136, "$*PKGDECL"
    unless_null $P136, vivify_2189
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PKGDECL"]
    unless_null $P136, vivify_2190
    die "Contextual $*PKGDECL not found"
  vivify_2190:
  vivify_2189:
    concat $P137, $P136, "-attr"
    find_dynamic_lex $P140, "%*HOW"
    unless_null $P140, vivify_2191
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["%HOW"]
    unless_null $P140, vivify_2192
    die "Contextual %*HOW not found"
  vivify_2192:
  vivify_2191:
    set $P141, $P140[$P137]
    unless_null $P141, vivify_2193
    new $P141, "Undef"
  vivify_2193:
    set $P3393, $P3380
    unless_null $P3393, vivify_2194
    $P3393 = root_new ['parrot';'Hash']
  vivify_2194:
    set $P3394, $P3382
    unless_null $P3394, vivify_2195
    $P3394 = root_new ['parrot';'Hash']
  vivify_2195:
    $P129."pkg_add_attribute"($P133, $P141, $P3393, $P3394)
.annotate 'line', 2082
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Stmts"]
    $P132 = $P131."new"()
    store_lex "$past", $P132
.annotate 'line', 2064
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3401"  :anon :subid("822_1338064451.944") :outer("305_1338064451.944")
    .param pmc param_3403
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2106
    .lex "$_", param_3403
    find_lex $P129, "$_"
    unless_null $P129, vivify_2202
    new $P129, "Undef"
  vivify_2202:
    $P131 = $P129."ast"()
    find_lex $P132, "$/"
    unless_null $P132, vivify_2203
    new $P132, "Undef"
  vivify_2203:
    $P133 = $P131($P132)
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<sub>" :anon :subid("306_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3406
    .param pmc param_3407
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2111
    .lex "self", param_3406
    .lex "$/", param_3407
    set $P118, param_3407
    set $P3408, param_3407
    unless_null $P3408, vivify_2204
    $P3408 = root_new ['parrot';'Hash']
  vivify_2204:
    set $P120, $P3408["routine_def"]
    unless_null $P120, vivify_2205
    new $P120, "Undef"
  vivify_2205:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<method>" :anon :subid("307_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3410
    .param pmc param_3411
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2112
    .lex "self", param_3410
    .lex "$/", param_3411
    set $P118, param_3411
    set $P3412, param_3411
    unless_null $P3412, vivify_2206
    $P3412 = root_new ['parrot';'Hash']
  vivify_2206:
    set $P120, $P3412["method_def"]
    unless_null $P120, vivify_2207
    new $P120, "Undef"
  vivify_2207:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "routine_def" :anon :subid("308_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3414
    .param pmc param_3415
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2114
    .const 'Sub' $P3487 = "829_1338064451.944" 
    capture_lex $P3487
    .const 'Sub' $P3425 = "823_1338064451.944" 
    capture_lex $P3425
    .lex "self", param_3414
    .lex "$/", param_3415
.annotate 'line', 2117
    new $P118, "Undef"
    set $P3416, $P118
    .lex "$past", $P3416
.annotate 'line', 2128
    new $P120, "Undef"
    set $P3417, $P120
    .lex "$block", $P3417
.annotate 'line', 2114
    set $P121, $P3416
    unless_null $P121, vivify_2208
    new $P121, "Undef"
  vivify_2208:
.annotate 'line', 2118
    set $P3419, param_3415
    unless_null $P3419, vivify_2209
    $P3419 = root_new ['parrot';'Hash']
  vivify_2209:
    set $P121, $P3419["onlystar"]
    unless_null $P121, vivify_2210
    new $P121, "Undef"
  vivify_2210:
    if $P121, if_3418
.annotate 'line', 2122
    set $P3420, param_3415
    unless_null $P3420, vivify_2211
    $P3420 = root_new ['parrot';'Hash']
  vivify_2211:
    set $P123, $P3420["blockoid"]
    unless_null $P123, vivify_2212
    new $P123, "Undef"
  vivify_2212:
    $P124 = $P123."ast"()
    set $P3416, $P124
.annotate 'line', 2123
    set $P123, $P3416
    unless_null $P123, vivify_2213
    new $P123, "Undef"
  vivify_2213:
    $P123."blocktype"("declaration")
.annotate 'line', 2124
    find_dynamic_lex $P125, "$*RETURN_USED"
    unless_null $P125, vivify_2214
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$RETURN_USED"]
    unless_null $P125, vivify_2215
    die "Contextual $*RETURN_USED not found"
  vivify_2215:
  vivify_2214:
    unless $P125, if_3421_end
.annotate 'line', 2125
    set $P126, $P3416
    unless_null $P126, vivify_2216
    new $P126, "Undef"
  vivify_2216:
    $P126."control"("return_pir")
  if_3421_end:
.annotate 'line', 2121
    goto if_3418_end
  if_3418:
.annotate 'line', 2119
    $P123 = "only_star_block"()
    set $P3416, $P123
  if_3418_end:
.annotate 'line', 2128
    set $P121, $P3416
    unless_null $P121, vivify_2217
    new $P121, "Undef"
  vivify_2217:
    set $P3417, $P121
.annotate 'line', 2130
    set $P3423, param_3415
    unless_null $P3423, vivify_2218
    $P3423 = root_new ['parrot';'Hash']
  vivify_2218:
    set $P121, $P3423["deflongname"]
    unless_null $P121, vivify_2219
    new $P121, "Undef"
  vivify_2219:
    if $P121, if_3422
.annotate 'line', 2233
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2220
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2221
    die "Contextual $*W not found"
  vivify_2221:
  vivify_2220:
    $P128 = $P127."is_precompilation_mode"()
    unless $P128, if_3481_end
.annotate 'line', 2234
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2222
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2223
    die "Contextual $*W not found"
  vivify_2223:
  vivify_2222:
    set $P133, $P3416
    unless_null $P133, vivify_2224
    new $P133, "Undef"
  vivify_2224:
    $P132."create_code"($P133, "<anon>", 0)
  if_3481_end:
.annotate 'line', 2232
    goto if_3422_end
  if_3422:
.annotate 'line', 2130
    .const 'Sub' $P3425 = "823_1338064451.944" 
    capture_lex $P3425
    $P3425()
  if_3422_end:
.annotate 'line', 2239
    set $P121, $P3417
    unless_null $P121, vivify_2329
    new $P121, "Undef"
  vivify_2329:
    set $P3482, $P3416
    unless_null $P3482, vivify_2330
    $P3482 = root_new ['parrot';'Hash']
    set $P3416, $P3482
  vivify_2330:
    set $P3482["block_past"], $P121
.annotate 'line', 2240
    set $P3484, param_3415
    unless_null $P3484, vivify_2331
    $P3484 = root_new ['parrot';'Hash']
  vivify_2331:
    set $P121, $P3484["trait"]
    unless_null $P121, vivify_2332
    new $P121, "Undef"
  vivify_2332:
    unless $P121, if_3483_end
.annotate 'line', 2241
    set $P3485, param_3415
    unless_null $P3485, vivify_2333
    $P3485 = root_new ['parrot';'Hash']
  vivify_2333:
    set $P124, $P3485["trait"]
    unless_null $P124, vivify_2334
    new $P124, "Undef"
  vivify_2334:
    defined $I100, $P124
    unless $I100, for_undef_2335
    iter $P123, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3489_handler
    push_eh $P126
  loop3489_test:
    unless $P123, loop3489_done
    shift $P125, $P123
  loop3489_redo:
    .const 'Sub' $P3487 = "829_1338064451.944" 
    capture_lex $P3487
    $P3487($P125)
  loop3489_next:
    goto loop3489_test
  loop3489_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3489_next
    eq $P127, .CONTROL_LOOP_REDO, loop3489_redo
  loop3489_done:
    pop_eh 
  for_undef_2335:
  if_3483_end:
.annotate 'line', 2244
    set $P121, param_3415
    set $P123, $P3416
    unless_null $P123, vivify_2338
    new $P123, "Undef"
  vivify_2338:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2114
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3424"  :anon :subid("823_1338064451.944") :outer("308_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2130
    .const 'Sub' $P3474 = "828_1338064451.944" 
    capture_lex $P3474
    .const 'Sub' $P3467 = "827_1338064451.944" 
    capture_lex $P3467
    .const 'Sub' $P3436 = "824_1338064451.944" 
    capture_lex $P3436
.annotate 'line', 2131
    new $P123, "Undef"
    set $P3426, $P123
    .lex "$name", $P3426
    find_lex $P3427, "$/"
    unless_null $P3427, vivify_2225
    $P3427 = root_new ['parrot';'Hash']
  vivify_2225:
    set $P3428, $P3427["sigil"]
    unless_null $P3428, vivify_2226
    $P3428 = root_new ['parrot';'ResizablePMCArray']
  vivify_2226:
    set $P124, $P3428[0]
    unless_null $P124, vivify_2227
    new $P124, "Undef"
  vivify_2227:
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    find_lex $P3429, "$/"
    unless_null $P3429, vivify_2228
    $P3429 = root_new ['parrot';'Hash']
  vivify_2228:
    set $P3430, $P3429["deflongname"]
    unless_null $P3430, vivify_2229
    $P3430 = root_new ['parrot';'ResizablePMCArray']
  vivify_2229:
    set $P126, $P3430[0]
    unless_null $P126, vivify_2230
    new $P126, "Undef"
  vivify_2230:
    $S101 = $P126."ast"()
    concat $P127, $P125, $S101
    set $P3426, $P127
.annotate 'line', 2132
    find_lex $P124, "$past"
    unless_null $P124, vivify_2231
    new $P124, "Undef"
  vivify_2231:
    set $P125, $P3426
    unless_null $P125, vivify_2232
    new $P125, "Undef"
  vivify_2232:
    $P124."name"($P125)
.annotate 'line', 2133
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_2233
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_2234
    die "Contextual $*SCOPE not found"
  vivify_2234:
  vivify_2233:
    set $S100, $P128
    iseq $I100, $S100, ""
    unless $I100, unless_3433
    new $P125, 'Integer'
    set $P125, $I100
    goto unless_3433_end
  unless_3433:
    find_dynamic_lex $P132, "$*SCOPE"
    unless_null $P132, vivify_2235
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$SCOPE"]
    unless_null $P132, vivify_2236
    die "Contextual $*SCOPE not found"
  vivify_2236:
  vivify_2235:
    set $S101, $P132
    iseq $I101, $S101, "my"
    new $P125, 'Integer'
    set $P125, $I101
  unless_3433_end:
    unless $P125, unless_3432
    set $P124, $P125
    goto unless_3432_end
  unless_3432:
    find_dynamic_lex $P135, "$*SCOPE"
    unless_null $P135, vivify_2237
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$SCOPE"]
    unless_null $P135, vivify_2238
    die "Contextual $*SCOPE not found"
  vivify_2238:
  vivify_2237:
    set $S102, $P135
    iseq $I102, $S102, "our"
    new $P124, 'Integer'
    set $P124, $I102
  unless_3432_end:
    if $P124, if_3431
.annotate 'line', 2224
    find_lex $P136, "$/"
    unless_null $P136, vivify_2239
    new $P136, "Undef"
  vivify_2239:
    $P137 = $P136."CURSOR"()
    find_dynamic_lex $P140, "$*SCOPE"
    unless_null $P140, vivify_2240
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$SCOPE"]
    unless_null $P140, vivify_2241
    die "Contextual $*SCOPE not found"
  vivify_2241:
  vivify_2240:
    concat $P141, $P140, " scoped routines are not supported yet"
    $P137."panic"($P141)
.annotate 'line', 2223
    goto if_3431_end
  if_3431:
.annotate 'line', 2134
    find_dynamic_lex $P138, "$*MULTINESS"
    unless_null $P138, vivify_2242
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$MULTINESS"]
    unless_null $P138, vivify_2243
    die "Contextual $*MULTINESS not found"
  vivify_2243:
  vivify_2242:
    set $S103, $P138
    iseq $I103, $S103, "multi"
    if $I103, if_3434
.annotate 'line', 2186
    find_dynamic_lex $P143, "$*MULTINESS"
    unless_null $P143, vivify_2244
    get_hll_global $P140, "GLOBAL"
    get_who $P142, $P140
    set $P143, $P142["$MULTINESS"]
    unless_null $P143, vivify_2245
    die "Contextual $*MULTINESS not found"
  vivify_2245:
  vivify_2244:
    set $S104, $P143
    iseq $I104, $S104, "proto"
    if $I104, if_3465
.annotate 'line', 2205
    .const 'Sub' $P3474 = "828_1338064451.944" 
    capture_lex $P3474
    $P3474()
    goto if_3465_end
  if_3465:
.annotate 'line', 2186
    .const 'Sub' $P3467 = "827_1338064451.944" 
    capture_lex $P3467
    $P3467()
  if_3465_end:
    goto if_3434_end
  if_3434:
.annotate 'line', 2134
    .const 'Sub' $P3436 = "824_1338064451.944" 
    capture_lex $P3436
    $P3436()
  if_3434_end:
.annotate 'line', 2221
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    set $P140, $P3426
    unless_null $P140, vivify_2324
    new $P140, "Undef"
  vivify_2324:
    $P141 = $P139."new"($P140 :named("name"))
    store_lex "$past", $P141
  if_3431_end:
.annotate 'line', 2228
    set $P126, $P3426
    unless_null $P126, vivify_2325
    new $P126, "Undef"
  vivify_2325:
    set $S100, $P126
    iseq $I100, $S100, "MAIN"
    if $I100, if_3480
    new $P125, 'Integer'
    set $P125, $I100
    goto if_3480_end
  if_3480:
    find_dynamic_lex $P129, "$*MULTINESS"
    unless_null $P129, vivify_2326
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$MULTINESS"]
    unless_null $P129, vivify_2327
    die "Contextual $*MULTINESS not found"
  vivify_2327:
  vivify_2326:
    set $S101, $P129
    isne $I101, $S101, "multi"
    new $P125, 'Integer'
    set $P125, $I101
  if_3480_end:
    if $P125, if_3479
    set $P124, $P125
    goto if_3479_end
  if_3479:
.annotate 'line', 2229
    find_lex $P131, "$block"
    unless_null $P131, vivify_2328
    new $P131, "Undef"
  vivify_2328:
    store_dynamic_lex "$*MAIN_SUB", $P131
.annotate 'line', 2228
    set $P124, $P131
  if_3479_end:
.annotate 'line', 2130
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3473"  :anon :subid("828_1338064451.944") :outer("823_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2206
    new $P146, "Undef"
    set $P3475, $P146
    .lex "$BLOCK", $P3475
    find_dynamic_lex $P151, "$*W"
    unless_null $P151, vivify_2246
    get_hll_global $P149, "GLOBAL"
    get_who $P150, $P149
    set $P151, $P150["$W"]
    unless_null $P151, vivify_2247
    die "Contextual $*W not found"
  vivify_2247:
  vivify_2246:
    $P152 = $P151."cur_lexpad"()
    set $P3475, $P152
.annotate 'line', 2207
    set $P3476, $P3475
    unless_null $P3476, vivify_2248
    $P3476 = root_new ['parrot';'ResizablePMCArray']
  vivify_2248:
    set $P149, $P3476[0]
    unless_null $P149, vivify_2249
    new $P149, "Undef"
  vivify_2249:
    get_hll_global $P150, "GLOBAL"
    nqp_get_package_through_who $P151, $P150, "PAST"
    get_who $P152, $P151
    set $P153, $P152["Var"]
    find_lex $P154, "$name"
    unless_null $P154, vivify_2250
    new $P154, "Undef"
  vivify_2250:
    find_lex $P155, "$past"
    unless_null $P155, vivify_2251
    new $P155, "Undef"
  vivify_2251:
    $P156 = $P153."new"($P154 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P155 :named("viviself"), "lexical" :named("scope"))
    $P149."push"($P156)
.annotate 'line', 2209
    set $P149, $P3475
    unless_null $P149, vivify_2252
    new $P149, "Undef"
  vivify_2252:
    find_lex $P150, "$name"
    unless_null $P150, vivify_2253
    new $P150, "Undef"
  vivify_2253:
    $P149."symbol"($P150, "lexical" :named("scope"))
.annotate 'line', 2210
    find_dynamic_lex $P152, "$*SCOPE"
    unless_null $P152, vivify_2254
    get_hll_global $P150, "GLOBAL"
    get_who $P151, $P150
    set $P152, $P151["$SCOPE"]
    unless_null $P152, vivify_2255
    die "Contextual $*SCOPE not found"
  vivify_2255:
  vivify_2254:
    set $S105, $P152
    iseq $I105, $S105, "our"
    if $I105, if_3477
    new $P149, 'Integer'
    set $P149, $I105
    goto if_3477_end
  if_3477:
.annotate 'line', 2213
    find_dynamic_lex $P155, "$*W"
    unless_null $P155, vivify_2256
    get_hll_global $P153, "GLOBAL"
    get_who $P154, $P153
    set $P155, $P154["$W"]
    unless_null $P155, vivify_2257
    die "Contextual $*W not found"
  vivify_2257:
  vivify_2256:
    find_dynamic_lex $P158, "$*PACKAGE"
    unless_null $P158, vivify_2258
    get_hll_global $P156, "GLOBAL"
    get_who $P157, $P156
    set $P158, $P157["$PACKAGE"]
    unless_null $P158, vivify_2259
    die "Contextual $*PACKAGE not found"
  vivify_2259:
  vivify_2258:
    find_lex $P159, "$name"
    unless_null $P159, vivify_2260
    new $P159, "Undef"
  vivify_2260:
    find_lex $P160, "$past"
    unless_null $P160, vivify_2261
    new $P160, "Undef"
  vivify_2261:
    $P155."install_package_routine"($P158, $P159, $P160)
.annotate 'line', 2214
    set $P3478, $P3475
    unless_null $P3478, vivify_2262
    $P3478 = root_new ['parrot';'ResizablePMCArray']
  vivify_2262:
    set $P153, $P3478[0]
    unless_null $P153, vivify_2263
    new $P153, "Undef"
  vivify_2263:
    get_hll_global $P154, "GLOBAL"
    nqp_get_package_through_who $P155, $P154, "PAST"
    get_who $P156, $P155
    set $P157, $P156["Op"]
.annotate 'line', 2216
    find_lex $P158, "$name"
    unless_null $P158, vivify_2264
    new $P158, "Undef"
  vivify_2264:
    new $P159, "ResizablePMCArray"
    push $P159, $P158
    find_lex $P160, "$/"
    unless_null $P160, vivify_2265
    new $P160, "Undef"
  vivify_2265:
    $P161 = "lexical_package_lookup"($P159, $P160)
.annotate 'line', 2217
    get_hll_global $P162, "GLOBAL"
    nqp_get_package_through_who $P163, $P162, "PAST"
    get_who $P164, $P163
    set $P165, $P164["Var"]
    find_lex $P166, "$name"
    unless_null $P166, vivify_2266
    new $P166, "Undef"
  vivify_2266:
    $P167 = $P165."new"($P166 :named("name"), "lexical" :named("scope"))
    $P168 = $P157."new"($P161, $P167, "bind_6model" :named("pasttype"))
.annotate 'line', 2214
    $P169 = $P153."push"($P168)
.annotate 'line', 2210
    set $P149, $P169
  if_3477_end:
.annotate 'line', 2205
    .return ($P149)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3466"  :anon :subid("827_1338064451.944") :outer("823_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2191
    new $P144, "Undef"
    set $P3468, $P144
    .lex "$cholder", $P3468
.annotate 'line', 2192
    new $P145, "Undef"
    set $P3469, $P145
    .lex "$BLOCK", $P3469
.annotate 'line', 2190
    find_dynamic_lex $P149, "$*SCOPE"
    unless_null $P149, vivify_2267
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$SCOPE"]
    unless_null $P149, vivify_2268
    die "Contextual $*SCOPE not found"
  vivify_2268:
  vivify_2267:
    set $S105, $P149
    iseq $I105, $S105, "our"
    unless $I105, if_3470_end
    die "our-scoped protos not yet implemented"
  if_3470_end:
.annotate 'line', 2191
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P149, $P147
    set $P150, $P149["Op"]
    $P151 = $P150."new"("list" :named("pasttype"))
    set $P3468, $P151
.annotate 'line', 2192
    find_dynamic_lex $P149, "$*W"
    unless_null $P149, vivify_2269
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$W"]
    unless_null $P149, vivify_2270
    die "Contextual $*W not found"
  vivify_2270:
  vivify_2269:
    $P150 = $P149."cur_lexpad"()
    set $P3469, $P150
.annotate 'line', 2193
    set $P3471, $P3469
    unless_null $P3471, vivify_2271
    $P3471 = root_new ['parrot';'ResizablePMCArray']
  vivify_2271:
    set $P146, $P3471[0]
    unless_null $P146, vivify_2272
    new $P146, "Undef"
  vivify_2272:
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Var"]
    find_lex $P152, "$name"
    unless_null $P152, vivify_2273
    new $P152, "Undef"
  vivify_2273:
    find_lex $P153, "$past"
    unless_null $P153, vivify_2274
    new $P153, "Undef"
  vivify_2274:
    $P154 = $P151."new"($P152 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P153 :named("viviself"), "lexical" :named("scope"))
    $P146."push"($P154)
.annotate 'line', 2195
    set $P3472, $P3469
    unless_null $P3472, vivify_2275
    $P3472 = root_new ['parrot';'ResizablePMCArray']
  vivify_2275:
    set $P146, $P3472[0]
    unless_null $P146, vivify_2276
    new $P146, "Undef"
  vivify_2276:
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Op"]
.annotate 'line', 2197
    get_hll_global $P152, "GLOBAL"
    nqp_get_package_through_who $P153, $P152, "PAST"
    get_who $P154, $P153
    set $P155, $P154["Var"]
    find_lex $P156, "$name"
    unless_null $P156, vivify_2277
    new $P156, "Undef"
  vivify_2277:
    $P157 = $P155."new"($P156 :named("name"))
    set $P158, $P3468
    unless_null $P158, vivify_2278
    new $P158, "Undef"
  vivify_2278:
    $P159 = $P151."new"($P157, $P158, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 2195
    $P146."push"($P159)
.annotate 'line', 2200
    set $P146, $P3469
    unless_null $P146, vivify_2279
    new $P146, "Undef"
  vivify_2279:
    find_lex $P147, "$name"
    unless_null $P147, vivify_2280
    new $P147, "Undef"
  vivify_2280:
    set $P149, $P3468
    unless_null $P149, vivify_2281
    new $P149, "Undef"
  vivify_2281:
    $P146."symbol"($P147, "lexical" :named("scope"), 1 :named("proto"), $P149 :named("cholder"))
.annotate 'line', 2203
    find_lex $P146, "$past"
    unless_null $P146, vivify_2282
    new $P146, "Undef"
  vivify_2282:
    $P147 = $P146."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 2186
    .return ($P147)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3435"  :anon :subid("824_1338064451.944") :outer("823_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2134
    .const 'Sub' $P3445 = "825_1338064451.944" 
    capture_lex $P3445
.annotate 'line', 2137
    new $P139, "Undef"
    set $P3437, $P139
    .lex "$cholder", $P3437
.annotate 'line', 2138
    $P3439 = root_new ['parrot';'Hash']
    set $P3438, $P3439
    .lex "%sym", $P3438
.annotate 'line', 2136
    find_dynamic_lex $P142, "$*SCOPE"
    unless_null $P142, vivify_2283
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$SCOPE"]
    unless_null $P142, vivify_2284
    die "Contextual $*SCOPE not found"
  vivify_2284:
  vivify_2283:
    set $S104, $P142
    iseq $I104, $S104, "our"
    unless $I104, if_3440_end
    die "our-scoped multis not yet implemented"
  if_3440_end:
.annotate 'line', 2134
    set $P140, $P3437
    unless_null $P140, vivify_2285
    new $P140, "Undef"
  vivify_2285:
.annotate 'line', 2138
    find_dynamic_lex $P142, "$*W"
    unless_null $P142, vivify_2286
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$W"]
    unless_null $P142, vivify_2287
    die "Contextual $*W not found"
  vivify_2287:
  vivify_2286:
    $P143 = $P142."cur_lexpad"()
    find_lex $P144, "$name"
    unless_null $P144, vivify_2288
    new $P144, "Undef"
  vivify_2288:
    $P145 = $P143."symbol"($P144)
    set $P3438, $P145
.annotate 'line', 2139
    set $P3442, $P3438
    unless_null $P3442, vivify_2289
    $P3442 = root_new ['parrot';'Hash']
  vivify_2289:
    set $P140, $P3442["cholder"]
    unless_null $P140, vivify_2290
    new $P140, "Undef"
  vivify_2290:
    if $P140, if_3441
.annotate 'line', 2144
    .const 'Sub' $P3445 = "825_1338064451.944" 
    capture_lex $P3445
    $P3445()
    goto if_3441_end
  if_3441:
.annotate 'line', 2140
    set $P3443, $P3438
    unless_null $P3443, vivify_2319
    $P3443 = root_new ['parrot';'Hash']
  vivify_2319:
    set $P141, $P3443["cholder"]
    unless_null $P141, vivify_2320
    new $P141, "Undef"
  vivify_2320:
    set $P3437, $P141
  if_3441_end:
.annotate 'line', 2181
    set $P140, $P3437
    unless_null $P140, vivify_2321
    new $P140, "Undef"
  vivify_2321:
    find_lex $P141, "$past"
    unless_null $P141, vivify_2322
    new $P141, "Undef"
  vivify_2322:
    $P140."push"($P141)
.annotate 'line', 2184
    find_lex $P140, "$past"
    unless_null $P140, vivify_2323
    new $P140, "Undef"
  vivify_2323:
    $P141 = "attach_multi_signature_to_parrot_sub"($P140)
.annotate 'line', 2134
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3444"  :anon :subid("825_1338064451.944") :outer("824_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2144
    .const 'Sub' $P3452 = "826_1338064451.944" 
    capture_lex $P3452
.annotate 'line', 2151
    new $P141, "Undef"
    set $P3446, $P141
    .lex "$found_proto", $P3446
.annotate 'line', 2168
    new $P142, "Undef"
    set $P3447, $P142
    .lex "$BLOCK", $P3447
.annotate 'line', 2170
    new $P143, "Undef"
    set $P3448, $P143
    .lex "$dispatch_setup", $P3448
.annotate 'line', 2146
    find_lex $P3450, "%sym"
    unless_null $P3450, vivify_2291
    $P3450 = root_new ['parrot';'Hash']
  vivify_2291:
    set $P144, $P3450["proto"]
    unless_null $P144, vivify_2292
    new $P144, "Undef"
  vivify_2292:
    unless $P144, if_3449_end
.annotate 'line', 2149
    find_lex $P145, "$/"
    unless_null $P145, vivify_2293
    new $P145, "Undef"
  vivify_2293:
    $P146 = $P145."CURSOR"()
    $P146."panic"("Internal Error: Current scope has a proto, but no candidate list holder was set up. (This should never happen.)")
  if_3449_end:
.annotate 'line', 2144
    set $P144, $P3446
    unless_null $P144, vivify_2294
    new $P144, "Undef"
  vivify_2294:
.annotate 'line', 2152
    find_dynamic_lex $P147, "$*W"
    unless_null $P147, vivify_2295
    get_hll_global $P145, "GLOBAL"
    get_who $P146, $P145
    set $P147, $P146["$W"]
    unless_null $P147, vivify_2296
    die "Contextual $*W not found"
  vivify_2296:
  vivify_2295:
    $P149 = $P147."get_legacy_block_list"()
    defined $I104, $P149
    unless $I104, for_undef_2297
    iter $P144, $P149
    new $P152, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P152, loop3462_handler
    push_eh $P152
  loop3462_test:
    unless $P144, loop3462_done
    shift $P150, $P144
  loop3462_redo:
    .const 'Sub' $P3452 = "826_1338064451.944" 
    capture_lex $P3452
    $P3452($P150)
  loop3462_next:
    goto loop3462_test
  loop3462_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P153, exception, 'type'
    eq $P153, .CONTROL_LOOP_NEXT, loop3462_next
    eq $P153, .CONTROL_LOOP_REDO, loop3462_redo
  loop3462_done:
    pop_eh 
  for_undef_2297:
.annotate 'line', 2163
    set $P144, $P3446
    unless_null $P144, vivify_2306
    new $P144, "Undef"
  vivify_2306:
    if $P144, unless_3463_end
.annotate 'line', 2164
    find_lex $P145, "$/"
    unless_null $P145, vivify_2307
    new $P145, "Undef"
  vivify_2307:
    $P146 = $P145."CURSOR"()
    $P146."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless_3463_end:
.annotate 'line', 2168
    find_dynamic_lex $P146, "$*W"
    unless_null $P146, vivify_2308
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$W"]
    unless_null $P146, vivify_2309
    die "Contextual $*W not found"
  vivify_2309:
  vivify_2308:
    $P147 = $P146."cur_lexpad"()
    set $P3447, $P147
.annotate 'line', 2169
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
    $P149 = $P147."new"("list" :named("pasttype"))
    store_lex "$cholder", $P149
.annotate 'line', 2170
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
.annotate 'line', 2172
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    find_lex $P153, "$name"
    unless_null $P153, vivify_2310
    new $P153, "Undef"
  vivify_2310:
    $P154 = $P152."new"($P153 :named("name"), "outer" :named("scope"))
    find_lex $P155, "$cholder"
    unless_null $P155, vivify_2311
    new $P155, "Undef"
  vivify_2311:
    $P156 = $P147."new"($P154, $P155, "create_dispatch_and_add_candidates PPP" :named("pirop"))
.annotate 'line', 2170
    set $P3448, $P156
.annotate 'line', 2175
    set $P3464, $P3447
    unless_null $P3464, vivify_2312
    $P3464 = root_new ['parrot';'ResizablePMCArray']
  vivify_2312:
    set $P144, $P3464[0]
    unless_null $P144, vivify_2313
    new $P144, "Undef"
  vivify_2313:
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P149, $P147["Var"]
    find_lex $P150, "$name"
    unless_null $P150, vivify_2314
    new $P150, "Undef"
  vivify_2314:
    set $P151, $P3448
    unless_null $P151, vivify_2315
    new $P151, "Undef"
  vivify_2315:
    $P152 = $P149."new"($P150 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P151 :named("viviself"), "lexical" :named("scope"))
    $P144."push"($P152)
.annotate 'line', 2177
    set $P144, $P3447
    unless_null $P144, vivify_2316
    new $P144, "Undef"
  vivify_2316:
    find_lex $P145, "$name"
    unless_null $P145, vivify_2317
    new $P145, "Undef"
  vivify_2317:
    find_lex $P146, "$cholder"
    unless_null $P146, vivify_2318
    new $P146, "Undef"
  vivify_2318:
    $P147 = $P144."symbol"($P145, "lexical" :named("scope"), $P146 :named("cholder"))
.annotate 'line', 2144
    .return ($P147)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3451"  :anon :subid("826_1338064451.944") :outer("825_1338064451.944")
    .param pmc param_3455
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2153
    $P3454 = root_new ['parrot';'Hash']
    set $P3453, $P3454
    .lex "%sym", $P3453
    .lex "$_", param_3455
    find_lex $P151, "$_"
    unless_null $P151, vivify_2298
    new $P151, "Undef"
  vivify_2298:
    find_lex $P152, "$name"
    unless_null $P152, vivify_2299
    new $P152, "Undef"
  vivify_2299:
    $P153 = $P151."symbol"($P152)
    set $P3453, $P153
.annotate 'line', 2154
    set $P3458, $P3453
    unless_null $P3458, vivify_2300
    $P3458 = root_new ['parrot';'Hash']
  vivify_2300:
    set $P153, $P3458["proto"]
    unless_null $P153, vivify_2301
    new $P153, "Undef"
  vivify_2301:
    unless $P153, unless_3457
    set $P152, $P153
    goto unless_3457_end
  unless_3457:
    set $P3459, $P3453
    unless_null $P3459, vivify_2302
    $P3459 = root_new ['parrot';'Hash']
  vivify_2302:
    set $P154, $P3459["cholder"]
    unless_null $P154, vivify_2303
    new $P154, "Undef"
  vivify_2303:
    set $P152, $P154
  unless_3457_end:
    if $P152, if_3456
.annotate 'line', 2157
    set $P3461, $P3453
    unless_null $P3461, vivify_2304
    $P3461 = root_new ['parrot';'Hash']
  vivify_2304:
    if $P3461, if_3460
    set $P156, $P3461
    goto if_3460_end
  if_3460:
.annotate 'line', 2158
    find_lex $P157, "$/"
    unless_null $P157, vivify_2305
    new $P157, "Undef"
  vivify_2305:
    $P158 = $P157."CURSOR"()
    $P159 = $P158."panic"("Cannot declare a multi when an only is already in scope.")
.annotate 'line', 2157
    set $P156, $P159
  if_3460_end:
    set $P151, $P156
.annotate 'line', 2154
    goto if_3456_end
  if_3456:
.annotate 'line', 2155
    new $P155, "Float"
    assign $P155, 1
    store_lex "$found_proto", $P155
.annotate 'line', 2154
    set $P151, $P155
  if_3456_end:
.annotate 'line', 2152
    .return ($P151)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3486"  :anon :subid("829_1338064451.944") :outer("308_1338064451.944")
    .param pmc param_3488
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2241
    .lex "$_", param_3488
    find_lex $P126, "$_"
    unless_null $P126, vivify_2336
    new $P126, "Undef"
  vivify_2336:
    $P127 = $P126."ast"()
    find_lex $P128, "$/"
    unless_null $P128, vivify_2337
    new $P128, "Undef"
  vivify_2337:
    $P129 = $P127($P128)
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "method_def" :anon :subid("309_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3491
    .param pmc param_3492
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2248
    .const 'Sub' $P3521 = "831_1338064451.944" 
    capture_lex $P3521
    .const 'Sub' $P3504 = "830_1338064451.944" 
    capture_lex $P3504
    .lex "self", param_3491
    .lex "$/", param_3492
.annotate 'line', 2251
    new $P118, "Undef"
    set $P3493, $P118
    .lex "$past", $P3493
.annotate 'line', 2248
    set $P120, $P3493
    unless_null $P120, vivify_2339
    new $P120, "Undef"
  vivify_2339:
.annotate 'line', 2252
    set $P3495, param_3492
    unless_null $P3495, vivify_2340
    $P3495 = root_new ['parrot';'Hash']
  vivify_2340:
    set $P120, $P3495["onlystar"]
    unless_null $P120, vivify_2341
    new $P120, "Undef"
  vivify_2341:
    if $P120, if_3494
.annotate 'line', 2256
    set $P3496, param_3492
    unless_null $P3496, vivify_2342
    $P3496 = root_new ['parrot';'Hash']
  vivify_2342:
    set $P121, $P3496["blockoid"]
    unless_null $P121, vivify_2343
    new $P121, "Undef"
  vivify_2343:
    $P123 = $P121."ast"()
    set $P3493, $P123
.annotate 'line', 2257
    set $P121, $P3493
    unless_null $P121, vivify_2344
    new $P121, "Undef"
  vivify_2344:
    $P121."blocktype"("declaration")
.annotate 'line', 2258
    find_dynamic_lex $P124, "$*RETURN_USED"
    unless_null $P124, vivify_2345
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$RETURN_USED"]
    unless_null $P124, vivify_2346
    die "Contextual $*RETURN_USED not found"
  vivify_2346:
  vivify_2345:
    unless $P124, if_3497_end
.annotate 'line', 2259
    set $P125, $P3493
    unless_null $P125, vivify_2347
    new $P125, "Undef"
  vivify_2347:
    $P125."control"("return_pir")
  if_3497_end:
.annotate 'line', 2255
    goto if_3494_end
  if_3494:
.annotate 'line', 2253
    $P121 = "only_star_block"()
    set $P3493, $P121
  if_3494_end:
.annotate 'line', 2264
    set $P3499, $P3493
    unless_null $P3499, vivify_2348
    $P3499 = root_new ['parrot';'Hash']
  vivify_2348:
    set $P120, $P3499["signature_has_invocant"]
    unless_null $P120, vivify_2349
    new $P120, "Undef"
  vivify_2349:
    if $P120, unless_3498_end
.annotate 'line', 2265
    set $P3500, $P3493
    unless_null $P3500, vivify_2350
    $P3500 = root_new ['parrot';'ResizablePMCArray']
  vivify_2350:
    set $P121, $P3500[0]
    unless_null $P121, vivify_2351
    new $P121, "Undef"
  vivify_2351:
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
.annotate 'line', 2267
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2352
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_2353
    die "Contextual $*W not found"
  vivify_2353:
  vivify_2352:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2354
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2355
    die "Contextual $*PACKAGE not found"
  vivify_2355:
  vivify_2354:
    $P134 = $P129."get_ref"($P133)
.annotate 'line', 2265
    $P135 = $P126."new"("self" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"), $P134 :named("multitype"))
    $P121."unshift"($P135)
  unless_3498_end:
.annotate 'line', 2270
    set $P120, $P3493
    unless_null $P120, vivify_2356
    new $P120, "Undef"
  vivify_2356:
    $P120."symbol"("self", "lexical" :named("scope"))
.annotate 'line', 2273
    set $P3502, param_3492
    unless_null $P3502, vivify_2357
    $P3502 = root_new ['parrot';'Hash']
  vivify_2357:
    set $P120, $P3502["deflongname"]
    unless_null $P120, vivify_2358
    new $P120, "Undef"
  vivify_2358:
    unless $P120, if_3501_end
    .const 'Sub' $P3504 = "830_1338064451.944" 
    capture_lex $P3504
    $P3504()
  if_3501_end:
.annotate 'line', 2298
    set $P120, param_3492
    set $P121, $P3493
    unless_null $P121, vivify_2398
    new $P121, "Undef"
  vivify_2398:
    $P120."!make"($P121)
.annotate 'line', 2299
    set $P120, $P3493
    unless_null $P120, vivify_2399
    new $P120, "Undef"
  vivify_2399:
    set $P3516, $P3493
    unless_null $P3516, vivify_2400
    $P3516 = root_new ['parrot';'Hash']
    set $P3493, $P3516
  vivify_2400:
    set $P3516["block_past"], $P120
.annotate 'line', 2300
    set $P3518, param_3492
    unless_null $P3518, vivify_2401
    $P3518 = root_new ['parrot';'Hash']
  vivify_2401:
    set $P121, $P3518["trait"]
    unless_null $P121, vivify_2402
    new $P121, "Undef"
  vivify_2402:
    if $P121, if_3517
    set $P120, $P121
    goto if_3517_end
  if_3517:
.annotate 'line', 2301
    set $P3519, param_3492
    unless_null $P3519, vivify_2403
    $P3519 = root_new ['parrot';'Hash']
  vivify_2403:
    set $P124, $P3519["trait"]
    unless_null $P124, vivify_2404
    new $P124, "Undef"
  vivify_2404:
    defined $I100, $P124
    unless $I100, for_undef_2405
    iter $P123, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3523_handler
    push_eh $P126
  loop3523_test:
    unless $P123, loop3523_done
    shift $P125, $P123
  loop3523_redo:
    .const 'Sub' $P3521 = "831_1338064451.944" 
    capture_lex $P3521
    $P3521($P125)
  loop3523_next:
    goto loop3523_test
  loop3523_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3523_next
    eq $P127, .CONTROL_LOOP_REDO, loop3523_redo
  loop3523_done:
    pop_eh 
  for_undef_2405:
.annotate 'line', 2300
    set $P120, $P123
  if_3517_end:
.annotate 'line', 2248
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3503"  :anon :subid("830_1338064451.944") :outer("309_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2275
    new $P121, "Undef"
    set $P3505, $P121
    .lex "$name", $P3505
.annotate 'line', 2279
    new $P123, "Undef"
    set $P3506, $P123
    .lex "$meta_meth", $P3506
.annotate 'line', 2280
    new $P124, "Undef"
    set $P3507, $P124
    .lex "$is_dispatcher", $P3507
.annotate 'line', 2281
    new $P125, "Undef"
    set $P3508, $P125
    .lex "$code", $P3508
.annotate 'line', 2275
    find_lex $P3509, "$/"
    unless_null $P3509, vivify_2359
    $P3509 = root_new ['parrot';'Hash']
  vivify_2359:
    set $P126, $P3509["private"]
    unless_null $P126, vivify_2360
    new $P126, "Undef"
  vivify_2360:
    set $S100, $P126
    new $P127, 'String'
    set $P127, $S100
    find_lex $P3510, "$/"
    unless_null $P3510, vivify_2361
    $P3510 = root_new ['parrot';'Hash']
  vivify_2361:
    set $P3511, $P3510["deflongname"]
    unless_null $P3511, vivify_2362
    $P3511 = root_new ['parrot';'ResizablePMCArray']
  vivify_2362:
    set $P128, $P3511[0]
    unless_null $P128, vivify_2363
    new $P128, "Undef"
  vivify_2363:
    $P129 = $P128."ast"()
    set $S101, $P129
    concat $P131, $P127, $S101
    set $P3505, $P131
.annotate 'line', 2276
    find_lex $P126, "$past"
    unless_null $P126, vivify_2364
    new $P126, "Undef"
  vivify_2364:
    set $P127, $P3505
    unless_null $P127, vivify_2365
    new $P127, "Undef"
  vivify_2365:
    $P126."name"($P127)
.annotate 'line', 2279
    find_dynamic_lex $P129, "$*MULTINESS"
    unless_null $P129, vivify_2366
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$MULTINESS"]
    unless_null $P129, vivify_2367
    die "Contextual $*MULTINESS not found"
  vivify_2367:
  vivify_2366:
    set $S100, $P129
    iseq $I100, $S100, "multi"
    if $I100, if_3512
    new $P132, "String"
    assign $P132, "add_method"
    set $P126, $P132
    goto if_3512_end
  if_3512:
    new $P131, "String"
    assign $P131, "add_multi_method"
    set $P126, $P131
  if_3512_end:
    set $P3506, $P126
.annotate 'line', 2280
    find_dynamic_lex $P128, "$*MULTINESS"
    unless_null $P128, vivify_2368
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$MULTINESS"]
    unless_null $P128, vivify_2369
    die "Contextual $*MULTINESS not found"
  vivify_2369:
  vivify_2368:
    set $S100, $P128
    iseq $I100, $S100, "proto"
    new $P129, 'Integer'
    set $P129, $I100
    set $P3507, $P129
.annotate 'line', 2281
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2370
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2371
    die "Contextual $*W not found"
  vivify_2371:
  vivify_2370:
    find_lex $P129, "$past"
    unless_null $P129, vivify_2372
    new $P129, "Undef"
  vivify_2372:
    set $P131, $P3505
    unless_null $P131, vivify_2373
    new $P131, "Undef"
  vivify_2373:
    set $P132, $P3507
    unless_null $P132, vivify_2374
    new $P132, "Undef"
  vivify_2374:
    $P133 = $P128."create_code"($P129, $P131, $P132)
    set $P3508, $P133
.annotate 'line', 2282
    find_dynamic_lex $P128, "$*MULTINESS"
    unless_null $P128, vivify_2375
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$MULTINESS"]
    unless_null $P128, vivify_2376
    die "Contextual $*MULTINESS not found"
  vivify_2376:
  vivify_2375:
    set $S100, $P128
    iseq $I100, $S100, "multi"
    unless $I100, if_3513_end
    set $P129, $P3508
    unless_null $P129, vivify_2377
    new $P129, "Undef"
  vivify_2377:
    find_lex $P131, "$past"
    unless_null $P131, vivify_2378
    new $P131, "Undef"
  vivify_2378:
    "attach_multi_signature"($P129, $P131)
  if_3513_end:
.annotate 'line', 2283
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2379
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2380
    die "Contextual $*W not found"
  vivify_2380:
  vivify_2379:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_2381
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_2382
    die "Contextual $*PACKAGE not found"
  vivify_2382:
  vivify_2381:
    set $P133, $P3506
    unless_null $P133, vivify_2383
    new $P133, "Undef"
  vivify_2383:
    set $P134, $P3505
    unless_null $P134, vivify_2384
    new $P134, "Undef"
  vivify_2384:
    set $P135, $P3508
    unless_null $P135, vivify_2385
    new $P135, "Undef"
  vivify_2385:
    $P128."pkg_add_method"($P132, $P133, $P134, $P135)
.annotate 'line', 2286
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2386
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2387
    die "Contextual $*SCOPE not found"
  vivify_2387:
  vivify_2386:
    set $S100, $P129
    iseq $I100, $S100, "our"
    if $I100, if_3514
.annotate 'line', 2289
    find_lex $P132, "$past"
    unless_null $P132, vivify_2388
    new $P132, "Undef"
  vivify_2388:
    $P133 = $P132."pirflags"()
    if $P133, if_3515
.annotate 'line', 2292
    find_lex $P134, "$past"
    unless_null $P134, vivify_2389
    new $P134, "Undef"
  vivify_2389:
    $P135 = $P134."pirflags"(":anon")
.annotate 'line', 2291
    set $P131, $P135
.annotate 'line', 2289
    goto if_3515_end
  if_3515:
.annotate 'line', 2290
    find_lex $P134, "$past"
    unless_null $P134, vivify_2390
    new $P134, "Undef"
  vivify_2390:
    find_lex $P135, "$past"
    unless_null $P135, vivify_2391
    new $P135, "Undef"
  vivify_2391:
    $P136 = $P135."pirflags"()
    set $S101, $P136
    new $P137, 'String'
    set $P137, $S101
    concat $P138, $P137, ":anon"
    $P140 = $P134."pirflags"($P138)
.annotate 'line', 2289
    set $P131, $P140
  if_3515_end:
.annotate 'line', 2288
    set $P126, $P131
.annotate 'line', 2286
    goto if_3514_end
  if_3514:
.annotate 'line', 2287
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2392
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2393
    die "Contextual $*W not found"
  vivify_2393:
  vivify_2392:
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_2394
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_2395
    die "Contextual $*PACKAGE not found"
  vivify_2395:
  vivify_2394:
    set $P137, $P3505
    unless_null $P137, vivify_2396
    new $P137, "Undef"
  vivify_2396:
    find_lex $P138, "$past"
    unless_null $P138, vivify_2397
    new $P138, "Undef"
  vivify_2397:
    $P139 = $P133."install_package_routine"($P136, $P137, $P138)
.annotate 'line', 2286
    set $P126, $P139
  if_3514_end:
.annotate 'line', 2273
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3520"  :anon :subid("831_1338064451.944") :outer("309_1338064451.944")
    .param pmc param_3522
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2301
    .lex "$_", param_3522
    find_lex $P126, "$_"
    unless_null $P126, vivify_2406
    new $P126, "Undef"
  vivify_2406:
    $P127 = $P126."ast"()
    find_lex $P128, "$/"
    unless_null $P128, vivify_2407
    new $P128, "Undef"
  vivify_2407:
    $P129 = $P127($P128)
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "signature" :anon :subid("310_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3525
    .param pmc param_3526
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2343
    .const 'Sub' $P3540 = "833_1338064451.944" 
    capture_lex $P3540
    .const 'Sub' $P3533 = "832_1338064451.944" 
    capture_lex $P3533
    .lex "self", param_3525
    .lex "$/", param_3526
.annotate 'line', 2344
    new $P118, "Undef"
    set $P3527, $P118
    .lex "$BLOCK", $P3527
.annotate 'line', 2345
    new $P120, "Undef"
    set $P3528, $P120
    .lex "$BLOCKINIT", $P3528
.annotate 'line', 2344
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2408
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2409
    die "Contextual $*W not found"
  vivify_2409:
  vivify_2408:
    $P125 = $P124."cur_lexpad"()
    set $P3527, $P125
.annotate 'line', 2345
    set $P3529, $P3527
    unless_null $P3529, vivify_2410
    $P3529 = root_new ['parrot';'ResizablePMCArray']
  vivify_2410:
    set $P121, $P3529[0]
    unless_null $P121, vivify_2411
    new $P121, "Undef"
  vivify_2411:
    set $P3528, $P121
.annotate 'line', 2346
    set $P3531, param_3526
    unless_null $P3531, vivify_2412
    $P3531 = root_new ['parrot';'Hash']
  vivify_2412:
    set $P121, $P3531["invocant"]
    unless_null $P121, vivify_2413
    new $P121, "Undef"
  vivify_2413:
    unless $P121, if_3530_end
    .const 'Sub' $P3533 = "832_1338064451.944" 
    capture_lex $P3533
    $P3533()
  if_3530_end:
.annotate 'line', 2355
    set $P3538, param_3526
    unless_null $P3538, vivify_2422
    $P3538 = root_new ['parrot';'Hash']
  vivify_2422:
    set $P123, $P3538["parameter"]
    unless_null $P123, vivify_2423
    new $P123, "Undef"
  vivify_2423:
    defined $I100, $P123
    unless $I100, for_undef_2424
    iter $P121, $P123
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop3542_handler
    push_eh $P125
  loop3542_test:
    unless $P121, loop3542_done
    shift $P124, $P121
  loop3542_redo:
    .const 'Sub' $P3540 = "833_1338064451.944" 
    capture_lex $P3540
    $P3540($P124)
  loop3542_next:
    goto loop3542_test
  loop3542_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop3542_next
    eq $P126, .CONTROL_LOOP_REDO, loop3542_redo
  loop3542_done:
    pop_eh 
  for_undef_2424:
.annotate 'line', 2343
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3532"  :anon :subid("832_1338064451.944") :outer("310_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2347
    new $P123, "Undef"
    set $P3534, $P123
    .lex "$inv", $P3534
    find_lex $P3535, "$/"
    unless_null $P3535, vivify_2414
    $P3535 = root_new ['parrot';'Hash']
  vivify_2414:
    set $P3536, $P3535["invocant"]
    unless_null $P3536, vivify_2415
    $P3536 = root_new ['parrot';'ResizablePMCArray']
  vivify_2415:
    set $P124, $P3536[0]
    unless_null $P124, vivify_2416
    new $P124, "Undef"
  vivify_2416:
    $P125 = $P124."ast"()
    set $P3534, $P125
.annotate 'line', 2348
    find_lex $P124, "$BLOCKINIT"
    unless_null $P124, vivify_2417
    new $P124, "Undef"
  vivify_2417:
    set $P125, $P3534
    unless_null $P125, vivify_2418
    new $P125, "Undef"
  vivify_2418:
    $P124."push"($P125)
.annotate 'line', 2349
    find_lex $P124, "$BLOCKINIT"
    unless_null $P124, vivify_2419
    new $P124, "Undef"
  vivify_2419:
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
.annotate 'line', 2351
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    set $P134, $P3534
    unless_null $P134, vivify_2420
    new $P134, "Undef"
  vivify_2420:
    $P135 = $P134."name"()
    $P136 = $P133."new"("lexical" :named("scope"), $P135 :named("name"))
.annotate 'line', 2349
    $P137 = $P128."new"("self" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P136 :named("viviself"))
    $P124."push"($P137)
.annotate 'line', 2353
    new $P124, "Float"
    assign $P124, 1
    find_lex $P3537, "$BLOCK"
    unless_null $P3537, vivify_2421
    $P3537 = root_new ['parrot';'Hash']
    store_lex "$BLOCK", $P3537
  vivify_2421:
    set $P3537["signature_has_invocant"], $P124
.annotate 'line', 2346
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3539"  :anon :subid("833_1338064451.944") :outer("310_1338064451.944")
    .param pmc param_3541
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2355
    .lex "$_", param_3541
    find_lex $P125, "$BLOCKINIT"
    unless_null $P125, vivify_2425
    new $P125, "Undef"
  vivify_2425:
    find_lex $P126, "$_"
    unless_null $P126, vivify_2426
    new $P126, "Undef"
  vivify_2426:
    $P127 = $P126."ast"()
    $P128 = $P125."push"($P127)
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "parameter" :anon :subid("311_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3544
    .param pmc param_3545
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2358
    .lex "self", param_3544
    .lex "$/", param_3545
.annotate 'line', 2359
    new $P118, "Undef"
    set $P3546, $P118
    .lex "$quant", $P3546
.annotate 'line', 2360
    new $P120, "Undef"
    set $P3547, $P120
    .lex "$past", $P3547
.annotate 'line', 2359
    set $P3548, param_3545
    unless_null $P3548, vivify_2427
    $P3548 = root_new ['parrot';'Hash']
  vivify_2427:
    set $P121, $P3548["quant"]
    unless_null $P121, vivify_2428
    new $P121, "Undef"
  vivify_2428:
    set $P3546, $P121
.annotate 'line', 2358
    set $P121, $P3547
    unless_null $P121, vivify_2429
    new $P121, "Undef"
  vivify_2429:
.annotate 'line', 2361
    set $P3550, param_3545
    unless_null $P3550, vivify_2430
    $P3550 = root_new ['parrot';'Hash']
  vivify_2430:
    set $P121, $P3550["named_param"]
    unless_null $P121, vivify_2431
    new $P121, "Undef"
  vivify_2431:
    if $P121, if_3549
.annotate 'line', 2368
    set $P3556, param_3545
    unless_null $P3556, vivify_2432
    $P3556 = root_new ['parrot';'Hash']
  vivify_2432:
    set $P123, $P3556["param_var"]
    unless_null $P123, vivify_2433
    new $P123, "Undef"
  vivify_2433:
    $P124 = $P123."ast"()
    set $P3547, $P124
.annotate 'line', 2369
    set $P123, $P3546
    unless_null $P123, vivify_2434
    new $P123, "Undef"
  vivify_2434:
    set $S100, $P123
    iseq $I100, $S100, "*"
    if $I100, if_3557
.annotate 'line', 2373
    set $P124, $P3546
    unless_null $P124, vivify_2435
    new $P124, "Undef"
  vivify_2435:
    set $S101, $P124
    iseq $I101, $S101, "?"
    unless $I101, if_3560_end
.annotate 'line', 2374
    set $P125, $P3547
    unless_null $P125, vivify_2436
    new $P125, "Undef"
  vivify_2436:
    set $P3561, param_3545
    unless_null $P3561, vivify_2437
    $P3561 = root_new ['parrot';'Hash']
  vivify_2437:
    set $P3562, $P3561["param_var"]
    unless_null $P3562, vivify_2438
    $P3562 = root_new ['parrot';'Hash']
  vivify_2438:
    set $P126, $P3562["sigil"]
    unless_null $P126, vivify_2439
    new $P126, "Undef"
  vivify_2439:
    $P127 = "vivitype"($P126)
    $P125."viviself"($P127)
  if_3560_end:
.annotate 'line', 2373
    goto if_3557_end
  if_3557:
.annotate 'line', 2370
    set $P124, $P3547
    unless_null $P124, vivify_2440
    new $P124, "Undef"
  vivify_2440:
    $P124."slurpy"(1)
.annotate 'line', 2371
    set $P124, $P3547
    unless_null $P124, vivify_2441
    new $P124, "Undef"
  vivify_2441:
    set $P3558, param_3545
    unless_null $P3558, vivify_2442
    $P3558 = root_new ['parrot';'Hash']
  vivify_2442:
    set $P3559, $P3558["param_var"]
    unless_null $P3559, vivify_2443
    $P3559 = root_new ['parrot';'Hash']
  vivify_2443:
    set $P125, $P3559["sigil"]
    unless_null $P125, vivify_2444
    new $P125, "Undef"
  vivify_2444:
    set $S101, $P125
    iseq $I101, $S101, "%"
    $P124."named"($I101)
  if_3557_end:
.annotate 'line', 2367
    goto if_3549_end
  if_3549:
.annotate 'line', 2362
    set $P3551, param_3545
    unless_null $P3551, vivify_2445
    $P3551 = root_new ['parrot';'Hash']
  vivify_2445:
    set $P123, $P3551["named_param"]
    unless_null $P123, vivify_2446
    new $P123, "Undef"
  vivify_2446:
    $P124 = $P123."ast"()
    set $P3547, $P124
.annotate 'line', 2363
    set $P123, $P3546
    unless_null $P123, vivify_2447
    new $P123, "Undef"
  vivify_2447:
    set $S100, $P123
    isne $I100, $S100, "!"
    unless $I100, if_3552_end
.annotate 'line', 2364
    set $P124, $P3547
    unless_null $P124, vivify_2448
    new $P124, "Undef"
  vivify_2448:
    set $P3553, param_3545
    unless_null $P3553, vivify_2449
    $P3553 = root_new ['parrot';'Hash']
  vivify_2449:
    set $P3554, $P3553["named_param"]
    unless_null $P3554, vivify_2450
    $P3554 = root_new ['parrot';'Hash']
  vivify_2450:
    set $P3555, $P3554["param_var"]
    unless_null $P3555, vivify_2451
    $P3555 = root_new ['parrot';'Hash']
  vivify_2451:
    set $P125, $P3555["sigil"]
    unless_null $P125, vivify_2452
    new $P125, "Undef"
  vivify_2452:
    $P126 = "vivitype"($P125)
    $P124."viviself"($P126)
  if_3552_end:
  if_3549_end:
.annotate 'line', 2377
    set $P3564, param_3545
    unless_null $P3564, vivify_2453
    $P3564 = root_new ['parrot';'Hash']
  vivify_2453:
    set $P121, $P3564["default_value"]
    unless_null $P121, vivify_2454
    new $P121, "Undef"
  vivify_2454:
    unless $P121, if_3563_end
.annotate 'line', 2378
    set $P123, $P3546
    unless_null $P123, vivify_2455
    new $P123, "Undef"
  vivify_2455:
    set $S100, $P123
    iseq $I100, $S100, "*"
    unless $I100, if_3565_end
.annotate 'line', 2379
    set $P124, param_3545
    unless_null $P124, vivify_2456
    new $P124, "Undef"
  vivify_2456:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Can't put default on slurpy parameter")
  if_3565_end:
.annotate 'line', 2381
    set $P123, $P3546
    unless_null $P123, vivify_2457
    new $P123, "Undef"
  vivify_2457:
    set $S100, $P123
    iseq $I100, $S100, "!"
    unless $I100, if_3566_end
.annotate 'line', 2382
    set $P124, param_3545
    unless_null $P124, vivify_2458
    new $P124, "Undef"
  vivify_2458:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Can't put default on required parameter")
  if_3566_end:
.annotate 'line', 2384
    set $P123, $P3547
    unless_null $P123, vivify_2459
    new $P123, "Undef"
  vivify_2459:
    set $P3567, param_3545
    unless_null $P3567, vivify_2460
    $P3567 = root_new ['parrot';'Hash']
  vivify_2460:
    set $P3568, $P3567["default_value"]
    unless_null $P3568, vivify_2461
    $P3568 = root_new ['parrot';'ResizablePMCArray']
  vivify_2461:
    set $P3569, $P3568[0]
    unless_null $P3569, vivify_2462
    $P3569 = root_new ['parrot';'Hash']
  vivify_2462:
    set $P124, $P3569["EXPR"]
    unless_null $P124, vivify_2463
    new $P124, "Undef"
  vivify_2463:
    $P125 = $P124."ast"()
    $P123."viviself"($P125)
  if_3563_end:
.annotate 'line', 2386
    set $P121, $P3547
    unless_null $P121, vivify_2464
    new $P121, "Undef"
  vivify_2464:
    $P123 = $P121."viviself"()
    if $P123, unless_3570_end
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2465
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2466
    die "Contextual $*W not found"
  vivify_2466:
  vivify_2465:
    $P127 = $P126."cur_lexpad"()
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2467
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2468
    die "Contextual $*W not found"
  vivify_2468:
  vivify_2467:
    $P132 = $P131."cur_lexpad"()
    $P133 = $P132."arity"()
    set $N100, $P133
    new $P134, 'Float'
    set $P134, $N100
    add $P135, $P134, 1
    $P127."arity"($P135)
  unless_3570_end:
.annotate 'line', 2390
    set $P3572, param_3545
    unless_null $P3572, vivify_2469
    $P3572 = root_new ['parrot';'Hash']
  vivify_2469:
    set $P121, $P3572["typename"]
    unless_null $P121, vivify_2470
    new $P121, "Undef"
  vivify_2470:
    unless $P121, if_3571_end
.annotate 'line', 2391
    set $P123, $P3547
    unless_null $P123, vivify_2471
    new $P123, "Undef"
  vivify_2471:
    set $P3573, param_3545
    unless_null $P3573, vivify_2472
    $P3573 = root_new ['parrot';'Hash']
  vivify_2472:
    set $P3574, $P3573["typename"]
    unless_null $P3574, vivify_2473
    $P3574 = root_new ['parrot';'ResizablePMCArray']
  vivify_2473:
    set $P124, $P3574[0]
    unless_null $P124, vivify_2474
    new $P124, "Undef"
  vivify_2474:
    $P125 = $P124."ast"()
    $P123."multitype"($P125)
  if_3571_end:
.annotate 'line', 2395
    set $P3576, param_3545
    unless_null $P3576, vivify_2475
    $P3576 = root_new ['parrot';'Hash']
  vivify_2475:
    set $P121, $P3576["definedness"]
    unless_null $P121, vivify_2476
    new $P121, "Undef"
  vivify_2476:
    unless $P121, if_3575_end
.annotate 'line', 2396
    set $P3577, param_3545
    unless_null $P3577, vivify_2477
    $P3577 = root_new ['parrot';'Hash']
  vivify_2477:
    set $P3578, $P3577["definedness"]
    unless_null $P3578, vivify_2478
    $P3578 = root_new ['parrot';'ResizablePMCArray']
  vivify_2478:
    set $P123, $P3578[0]
    unless_null $P123, vivify_2479
    new $P123, "Undef"
  vivify_2479:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3579, $P3547
    unless_null $P3579, vivify_2480
    $P3579 = root_new ['parrot';'Hash']
    set $P3547, $P3579
  vivify_2480:
    set $P3579["definedness"], $P124
  if_3575_end:
.annotate 'line', 2399
    set $P121, param_3545
    set $P123, $P3547
    unless_null $P123, vivify_2481
    new $P123, "Undef"
  vivify_2481:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2358
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "param_var" :anon :subid("312_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3581
    .param pmc param_3582
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2402
    .lex "self", param_3581
    .lex "$/", param_3582
.annotate 'line', 2403
    new $P118, "Undef"
    set $P3583, $P118
    .lex "$name", $P3583
.annotate 'line', 2404
    new $P120, "Undef"
    set $P3584, $P120
    .lex "$past", $P3584
.annotate 'line', 2403
    set $P121, param_3582
    unless_null $P121, vivify_2482
    new $P121, "Undef"
  vivify_2482:
    set $S100, $P121
    new $P123, 'String'
    set $P123, $S100
    set $P3583, $P123
.annotate 'line', 2404
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    set $P126, $P3583
    unless_null $P126, vivify_2483
    new $P126, "Undef"
  vivify_2483:
    set $P127, param_3582
    unless_null $P127, vivify_2484
    new $P127, "Undef"
  vivify_2484:
    $P128 = $P125."new"($P126 :named("name"), "parameter" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P127 :named("node"))
    set $P3584, $P128
.annotate 'line', 2406
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2485
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2486
    die "Contextual $*W not found"
  vivify_2486:
  vivify_2485:
    $P125 = $P124."cur_lexpad"()
    set $P126, $P3583
    unless_null $P126, vivify_2487
    new $P126, "Undef"
  vivify_2487:
    $P125."symbol"($P126, "lexical" :named("scope"))
.annotate 'line', 2407
    set $P121, param_3582
    set $P123, $P3584
    unless_null $P123, vivify_2488
    new $P123, "Undef"
  vivify_2488:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2402
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "named_param" :anon :subid("313_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3586
    .param pmc param_3587
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2410
    .lex "self", param_3586
    .lex "$/", param_3587
.annotate 'line', 2411
    new $P118, "Undef"
    set $P3588, $P118
    .lex "$past", $P3588
    set $P3589, param_3587
    unless_null $P3589, vivify_2489
    $P3589 = root_new ['parrot';'Hash']
  vivify_2489:
    set $P120, $P3589["param_var"]
    unless_null $P120, vivify_2490
    new $P120, "Undef"
  vivify_2490:
    $P121 = $P120."ast"()
    set $P3588, $P121
.annotate 'line', 2412
    set $P120, $P3588
    unless_null $P120, vivify_2491
    new $P120, "Undef"
  vivify_2491:
    set $P3590, param_3587
    unless_null $P3590, vivify_2492
    $P3590 = root_new ['parrot';'Hash']
  vivify_2492:
    set $P3591, $P3590["param_var"]
    unless_null $P3591, vivify_2493
    $P3591 = root_new ['parrot';'Hash']
  vivify_2493:
    set $P121, $P3591["name"]
    unless_null $P121, vivify_2494
    new $P121, "Undef"
  vivify_2494:
    set $S100, $P121
    $P120."named"($S100)
.annotate 'line', 2413
    set $P120, param_3587
    set $P121, $P3588
    unless_null $P121, vivify_2495
    new $P121, "Undef"
  vivify_2495:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2410
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "typename" :anon :subid("314_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3593
    .param pmc param_3594
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2416
    .const 'Sub' $P3599 = "834_1338064451.944" 
    capture_lex $P3599
    .lex "self", param_3593
    .lex "$/", param_3594
.annotate 'line', 2420
    $P3596 = root_new ['parrot';'ResizablePMCArray']
    set $P3595, $P3596
    .lex "@name", $P3595
.annotate 'line', 2421
    new $P118, "Undef"
    set $P3597, $P118
    .lex "$found", $P3597
.annotate 'line', 2420
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "HLL"
    get_who $P123, $P121
    set $P124, $P123["Compiler"]
    set $P125, param_3594
    unless_null $P125, vivify_2496
    new $P125, "Undef"
  vivify_2496:
    set $S100, $P125
    $P126 = $P124."parse_name"($S100)
    set $P3595, $P126
.annotate 'line', 2421
    new $P120, "Float"
    assign $P120, 0
    set $P3597, $P120
.annotate 'line', 2422
    .const 'Sub' $P3599 = "834_1338064451.944" 
    capture_lex $P3599
    $P3599()
.annotate 'line', 2427
    set $P121, $P3597
    unless_null $P121, vivify_2503
    new $P121, "Undef"
  vivify_2503:
    unless $P121, unless_3609
    set $P120, $P121
    goto unless_3609_end
  unless_3609:
.annotate 'line', 2428
    set $P123, param_3594
    unless_null $P123, vivify_2504
    new $P123, "Undef"
  vivify_2504:
    $P124 = $P123."CURSOR"()
    new $P125, "String"
    assign $P125, "Use of undeclared type '"
    set $P126, param_3594
    unless_null $P126, vivify_2505
    new $P126, "Undef"
  vivify_2505:
    set $S100, $P126
    concat $P127, $P125, $S100
    concat $P128, $P127, "'"
    $P129 = $P124."panic"($P128)
.annotate 'line', 2427
    set $P120, $P129
  unless_3609_end:
.annotate 'line', 2416
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3598"  :anon :subid("834_1338064451.944") :outer("314_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2422
    new $P3604, 'ExceptionHandler'
    set_label $P3604, control_3603
    $P3604."handle_types_except"(.CONTROL_ALL)
    push_eh $P3604
.annotate 'line', 2423
    new $P120, "Undef"
    set $P3600, $P120
    .lex "$sym", $P3600
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2497
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2498
    die "Contextual $*W not found"
  vivify_2498:
  vivify_2497:
    find_lex $P3601, "@name"
    unless_null $P3601, vivify_2499
    $P3601 = root_new ['parrot';'ResizablePMCArray']
  vivify_2499:
    $P125 = $P124."find_sym"($P3601)
    set $P3600, $P125
.annotate 'line', 2424
    find_dynamic_lex $P121, "$/"
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2500
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2501
    die "Contextual $*W not found"
  vivify_2501:
  vivify_2500:
    set $P126, $P3600
    unless_null $P126, vivify_2502
    new $P126, "Undef"
  vivify_2502:
    $P127 = $P125."get_ref"($P126)
    $P121."!make"($P127)
.annotate 'line', 2425
    new $P121, "Float"
    assign $P121, 1
    store_lex "$found", $P121
.annotate 'line', 2422
    pop_eh 
    goto skip_handler_3602
  control_3603:
    peek_exception $P3605
    .local pmc exception 
    .get_results (exception) 
    new $P3607, 'Integer'
    set $P3607, 1
    set exception["handled"], $P3607
    set $I3608, exception["handled"]
    eq $I3608, 1, handled_3606
    rethrow exception
  handled_3606:
    finalize $P3605
    .return (exception)
  skip_handler_3602:
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait" :anon :subid("315_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3611
    .param pmc param_3612
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2432
    .lex "self", param_3611
    .lex "$/", param_3612
.annotate 'line', 2433
    set $P118, param_3612
    set $P3613, param_3612
    unless_null $P3613, vivify_2506
    $P3613 = root_new ['parrot';'Hash']
  vivify_2506:
    set $P120, $P3613["trait_mod"]
    unless_null $P120, vivify_2507
    new $P120, "Undef"
  vivify_2507:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 2432
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait_mod:sym<is>" :anon :subid("316_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3615
    .param pmc param_3616
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2436
    .const 'Sub' $P3635 = "837_1338064451.944" 
    capture_lex $P3635
    .const 'Sub' $P3620 = "835_1338064451.944" 
    capture_lex $P3620
    .lex "self", param_3615
    .lex "$/", param_3616
.annotate 'line', 2437
    set $P3618, param_3616
    unless_null $P3618, vivify_2508
    $P3618 = root_new ['parrot';'Hash']
  vivify_2508:
    set $P120, $P3618["longname"]
    unless_null $P120, vivify_2509
    new $P120, "Undef"
  vivify_2509:
    set $S100, $P120
    iseq $I100, $S100, "parrot_vtable"
    if $I100, if_3617
.annotate 'line', 2450
    set $P3633, param_3616
    unless_null $P3633, vivify_2510
    $P3633 = root_new ['parrot';'Hash']
  vivify_2510:
    set $P129, $P3633["longname"]
    unless_null $P129, vivify_2511
    new $P129, "Undef"
  vivify_2511:
    set $S101, $P129
    iseq $I101, $S101, "parrot_vtable_handler"
    if $I101, if_3632
.annotate 'line', 2461
    set $P3648, param_3616
    unless_null $P3648, vivify_2512
    $P3648 = root_new ['parrot';'Hash']
  vivify_2512:
    set $P137, $P3648["longname"]
    unless_null $P137, vivify_2513
    new $P137, "Undef"
  vivify_2513:
    set $S102, $P137
    iseq $I102, $S102, "pirflags"
    if $I102, if_3647
.annotate 'line', 2465
    set $P138, param_3616
    unless_null $P138, vivify_2514
    new $P138, "Undef"
  vivify_2514:
    $P139 = $P138."CURSOR"()
    new $P141, 'String'
    set $P141, "Trait '"
    set $P3649, param_3616
    unless_null $P3649, vivify_2515
    $P3649 = root_new ['parrot';'Hash']
  vivify_2515:
    set $P142, $P3649["longname"]
    unless_null $P142, vivify_2516
    new $P142, "Undef"
  vivify_2516:
    concat $P143, $P141, $P142
    concat $P144, $P143, "' not implemented"
    $P145 = $P139."panic"($P144)
.annotate 'line', 2464
    set $P136, $P145
.annotate 'line', 2461
    goto if_3647_end
  if_3647:
.annotate 'line', 2462
    set $P138, param_3616
    unless_null $P138, vivify_2517
    new $P138, "Undef"
  vivify_2517:
    $P139 = $P138."CURSOR"()
    $P140 = $P139."panic"("Trait 'pirflags' no longer supported; use 'is vtable'")
.annotate 'line', 2461
    set $P136, $P140
  if_3647_end:
    set $P128, $P136
.annotate 'line', 2450
    goto if_3632_end
  if_3632:
    .const 'Sub' $P3635 = "837_1338064451.944" 
    capture_lex $P3635
    $P134 = $P3635()
    set $P128, $P134
  if_3632_end:
    set $P118, $P128
.annotate 'line', 2437
    goto if_3617_end
  if_3617:
    .const 'Sub' $P3620 = "835_1338064451.944" 
    capture_lex $P3620
    $P126 = $P3620()
    set $P118, $P126
  if_3617_end:
.annotate 'line', 2436
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3634"  :anon :subid("837_1338064451.944") :outer("316_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2450
    .const 'Sub' $P3643 = "838_1338064451.944" 
    capture_lex $P3643
.annotate 'line', 2452
    new $P131, "Undef"
    set $P3636, $P131
    .lex "$cpast", $P3636
.annotate 'line', 2455
    new $P132, "Undef"
    set $P3637, $P132
    .lex "$name", $P3637
.annotate 'line', 2456
    new $P133, "Undef"
    set $P3638, $P133
    .lex "$package", $P3638
.annotate 'line', 2452
    find_lex $P3639, "$/"
    unless_null $P3639, vivify_2518
    $P3639 = root_new ['parrot';'Hash']
  vivify_2518:
    set $P3640, $P3639["circumfix"]
    unless_null $P3640, vivify_2519
    $P3640 = root_new ['parrot';'ResizablePMCArray']
  vivify_2519:
    set $P134, $P3640[0]
    unless_null $P134, vivify_2520
    new $P134, "Undef"
  vivify_2520:
    $P135 = $P134."ast"()
    set $P3636, $P135
.annotate 'line', 2454
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Val"]
    set $P138, $P3636
    unless_null $P138, vivify_2521
    new $P138, "Undef"
  vivify_2521:
    $P139 = $P137."ACCEPTS"($P138)
    if $P139, unless_3641_end
.annotate 'line', 2453
    find_lex $P140, "$/"
    unless_null $P140, vivify_2522
    new $P140, "Undef"
  vivify_2522:
    $P141 = $P140."CURSOR"()
    $P141."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless_3641_end:
.annotate 'line', 2455
    set $P134, $P3636
    unless_null $P134, vivify_2523
    new $P134, "Undef"
  vivify_2523:
    $P135 = $P134."value"()
    set $P3637, $P135
.annotate 'line', 2456
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_2524
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_2525
    die "Contextual $*PACKAGE not found"
  vivify_2525:
  vivify_2524:
    set $P3638, $P136
.annotate 'line', 2457
    find_dynamic_lex $P134, "$/"
    .const 'Sub' $P3643 = "838_1338064451.944" 
    newclosure $P3646, $P3643
    $P135 = $P134."!make"($P3646)
.annotate 'line', 2450
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3642"  :anon :subid("838_1338064451.944") :outer("837_1338064451.944")
    .param pmc param_3644
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2457
    .lex "$match", param_3644
.annotate 'line', 2458
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_2526
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_2527
    die "Contextual $*W not found"
  vivify_2527:
  vivify_2526:
    find_lex $P138, "$package"
    unless_null $P138, vivify_2528
    new $P138, "Undef"
  vivify_2528:
    find_lex $P139, "$name"
    unless_null $P139, vivify_2529
    new $P139, "Undef"
  vivify_2529:
    set $P3645, param_3644
    unless_null $P3645, vivify_2530
    $P3645 = root_new ['parrot';'Hash']
  vivify_2530:
    set $P140, $P3645["variable"]
    unless_null $P140, vivify_2531
    new $P140, "Undef"
  vivify_2531:
    set $S102, $P140
    $P141 = $P137."pkg_add_parrot_vtable_handler_mapping"($P138, $P139, $S102)
.annotate 'line', 2457
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3619"  :anon :subid("835_1338064451.944") :outer("316_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2437
    .const 'Sub' $P3629 = "836_1338064451.944" 
    capture_lex $P3629
.annotate 'line', 2439
    new $P121, "Undef"
    set $P3621, $P121
    .lex "$cpast", $P3621
.annotate 'line', 2442
    new $P123, "Undef"
    set $P3622, $P123
    .lex "$name", $P3622
.annotate 'line', 2443
    new $P124, "Undef"
    set $P3623, $P124
    .lex "$package", $P3623
.annotate 'line', 2444
    new $P125, "Undef"
    set $P3624, $P125
    .lex "$is_dispatcher", $P3624
.annotate 'line', 2439
    find_lex $P3625, "$/"
    unless_null $P3625, vivify_2532
    $P3625 = root_new ['parrot';'Hash']
  vivify_2532:
    set $P3626, $P3625["circumfix"]
    unless_null $P3626, vivify_2533
    $P3626 = root_new ['parrot';'ResizablePMCArray']
  vivify_2533:
    set $P126, $P3626[0]
    unless_null $P126, vivify_2534
    new $P126, "Undef"
  vivify_2534:
    $P127 = $P126."ast"()
    set $P3621, $P127
.annotate 'line', 2441
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Val"]
    set $P131, $P3621
    unless_null $P131, vivify_2535
    new $P131, "Undef"
  vivify_2535:
    $P132 = $P129."ACCEPTS"($P131)
    if $P132, unless_3627_end
.annotate 'line', 2440
    find_lex $P133, "$/"
    unless_null $P133, vivify_2536
    new $P133, "Undef"
  vivify_2536:
    $P134 = $P133."CURSOR"()
    $P134."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless_3627_end:
.annotate 'line', 2442
    set $P126, $P3621
    unless_null $P126, vivify_2537
    new $P126, "Undef"
  vivify_2537:
    $P127 = $P126."value"()
    set $P3622, $P127
.annotate 'line', 2443
    find_dynamic_lex $P128, "$*PACKAGE"
    unless_null $P128, vivify_2538
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$PACKAGE"]
    unless_null $P128, vivify_2539
    die "Contextual $*PACKAGE not found"
  vivify_2539:
  vivify_2538:
    set $P3623, $P128
.annotate 'line', 2444
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_2540
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_2541
    die "Contextual $*SCOPE not found"
  vivify_2541:
  vivify_2540:
    set $S101, $P128
    iseq $I101, $S101, "proto"
    new $P129, 'Integer'
    set $P129, $I101
    set $P3624, $P129
.annotate 'line', 2445
    find_dynamic_lex $P126, "$/"
    .const 'Sub' $P3629 = "836_1338064451.944" 
    newclosure $P3631, $P3629
    $P127 = $P126."!make"($P3631)
.annotate 'line', 2437
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3628"  :anon :subid("836_1338064451.944") :outer("835_1338064451.944")
    .param pmc param_3630
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2445
    .lex "$match", param_3630
.annotate 'line', 2446
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2542
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_2543
    die "Contextual $*W not found"
  vivify_2543:
  vivify_2542:
    find_lex $P131, "$package"
    unless_null $P131, vivify_2544
    new $P131, "Undef"
  vivify_2544:
    find_lex $P132, "$name"
    unless_null $P132, vivify_2545
    new $P132, "Undef"
  vivify_2545:
.annotate 'line', 2447
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_2546
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_2547
    die "Contextual $*W not found"
  vivify_2547:
  vivify_2546:
    set $P136, param_3630
    unless_null $P136, vivify_2548
    new $P136, "Undef"
  vivify_2548:
    $P137 = $P136."ast"()
    set $P138, $P137["block_past"]
    unless_null $P138, vivify_2549
    new $P138, "Undef"
  vivify_2549:
    find_lex $P139, "$name"
    unless_null $P139, vivify_2550
    new $P139, "Undef"
  vivify_2550:
    find_lex $P140, "$is_dispatcher"
    unless_null $P140, vivify_2551
    new $P140, "Undef"
  vivify_2551:
    $P141 = $P135."create_code"($P138, $P139, $P140)
    $P142 = $P129."pkg_add_method"($P131, "add_parrot_vtable_mapping", $P132, $P141)
.annotate 'line', 2445
    .return ($P142)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "regex_declarator" :anon :subid("317_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3651
    .param pmc param_3652
    .param pmc param_3653 :optional
    .param int has_param_3653 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2469
    .const 'Sub' $P3664 = "840_1338064451.944" 
    capture_lex $P3664
    .const 'Sub' $P3660 = "839_1338064451.944" 
    capture_lex $P3660
    .lex "self", param_3651
    .lex "$/", param_3652
    if has_param_3653, optparam_2552
    new $P118, "Undef"
    set param_3653, $P118
  optparam_2552:
    .lex "$key", param_3653
.annotate 'line', 2470
    new $P120, "Undef"
    set $P3654, $P120
    .lex "$name", $P3654
.annotate 'line', 2471
    new $P121, "Undef"
    set $P3655, $P121
    .lex "$past", $P3655
.annotate 'line', 2470
    set $P3656, param_3652
    unless_null $P3656, vivify_2553
    $P3656 = root_new ['parrot';'Hash']
  vivify_2553:
    set $P123, $P3656["deflongname"]
    unless_null $P123, vivify_2554
    new $P123, "Undef"
  vivify_2554:
    $P124 = $P123."ast"()
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    set $P3654, $P125
.annotate 'line', 2469
    set $P123, $P3655
    unless_null $P123, vivify_2555
    new $P123, "Undef"
  vivify_2555:
.annotate 'line', 2472
    set $P3658, param_3652
    unless_null $P3658, vivify_2556
    $P3658 = root_new ['parrot';'Hash']
  vivify_2556:
    set $P123, $P3658["proto"]
    unless_null $P123, vivify_2557
    new $P123, "Undef"
  vivify_2557:
    if $P123, if_3657
.annotate 'line', 2491
    .const 'Sub' $P3664 = "840_1338064451.944" 
    capture_lex $P3664
    $P3664()
    goto if_3657_end
  if_3657:
.annotate 'line', 2474
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Stmts"]
.annotate 'line', 2475
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Block"]
    set $P133, $P3654
    unless_null $P133, vivify_2592
    new $P133, "Undef"
  vivify_2592:
.annotate 'line', 2476
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
.annotate 'line', 2477
    get_hll_global $P138, "GLOBAL"
    nqp_get_package_through_who $P139, $P138, "PAST"
    get_who $P140, $P139
    set $P141, $P140["Var"]
    $P142 = $P141."new"("self" :named("name"), "parameter" :named("scope"))
    set $P143, $P3654
    unless_null $P143, vivify_2593
    new $P143, "Undef"
  vivify_2593:
    $P144 = $P137."new"($P142, $P143, "!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2476
    set $P145, param_3652
    unless_null $P145, vivify_2594
    new $P145, "Undef"
  vivify_2594:
    $P146 = $P132."new"($P144, $P133 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P145 :named("node"))
.annotate 'line', 2475
    $P147 = $P127."new"($P146)
.annotate 'line', 2474
    set $P3655, $P147
.annotate 'line', 2487
    set $P125, $P3655
    unless_null $P125, vivify_2595
    new $P125, "Undef"
  vivify_2595:
    $P126 = $P125."list"()
    defined $I100, $P126
    unless $I100, for_undef_2596
    iter $P124, $P126
    new $P128, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P128, loop3662_handler
    push_eh $P128
  loop3662_test:
    unless $P124, loop3662_done
    shift $P127, $P124
  loop3662_redo:
    .const 'Sub' $P3660 = "839_1338064451.944" 
    capture_lex $P3660
    $P3660($P127)
  loop3662_next:
    goto loop3662_test
  loop3662_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop3662_next
    eq $P129, .CONTROL_LOOP_REDO, loop3662_redo
  loop3662_done:
    pop_eh 
  for_undef_2596:
  if_3657_end:
.annotate 'line', 2516
    set $P123, param_3652
    set $P124, $P3655
    unless_null $P124, vivify_2606
    new $P124, "Undef"
  vivify_2606:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2469
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3663"  :anon :subid("840_1338064451.944") :outer("317_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2492
    new $P124, "Undef"
    set $P3665, $P124
    .lex "$block", $P3665
.annotate 'line', 2501
    new $P125, "Undef"
    set $P3666, $P125
    .lex "$regex", $P3666
.annotate 'line', 2492
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2558
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2559
    die "Contextual $*W not found"
  vivify_2559:
  vivify_2558:
    $P129 = $P128."pop_lexpad"()
    set $P3665, $P129
.annotate 'line', 2493
    set $P3667, $P3665
    unless_null $P3667, vivify_2560
    $P3667 = root_new ['parrot';'ResizablePMCArray']
  vivify_2560:
    set $P126, $P3667[0]
    unless_null $P126, vivify_2561
    new $P126, "Undef"
  vivify_2561:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    $P132 = $P131."new"("self" :named("name"), "parameter" :named("scope"))
    $P126."unshift"($P132)
.annotate 'line', 2494
    set $P3668, $P3665
    unless_null $P3668, vivify_2562
    $P3668 = root_new ['parrot';'ResizablePMCArray']
  vivify_2562:
    set $P126, $P3668[0]
    unless_null $P126, vivify_2563
    new $P126, "Undef"
  vivify_2563:
.annotate 'line', 2495
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
.annotate 'line', 2496
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Var"]
    $P136 = $P135."new"("self" :named("name"), "lexical_6model" :named("scope"))
.annotate 'line', 2495
    $P137 = $P131."new"("self" :named("name"), "register" :named("scope"), 1 :named("isdecl"), $P136 :named("viviself"))
    $P126."push"($P137)
.annotate 'line', 2497
    set $P3669, $P3665
    unless_null $P3669, vivify_2564
    $P3669 = root_new ['parrot';'ResizablePMCArray']
  vivify_2564:
    set $P126, $P3669[0]
    unless_null $P126, vivify_2565
    new $P126, "Undef"
  vivify_2565:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    $P132 = $P131."new"(unicode:"$\x{a2}" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P126."push"($P132)
.annotate 'line', 2498
    set $P3670, $P3665
    unless_null $P3670, vivify_2566
    $P3670 = root_new ['parrot';'ResizablePMCArray']
  vivify_2566:
    set $P126, $P3670[0]
    unless_null $P126, vivify_2567
    new $P126, "Undef"
  vivify_2567:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    $P132 = $P131."new"("$/" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P126."push"($P132)
.annotate 'line', 2499
    set $P126, $P3665
    unless_null $P126, vivify_2568
    new $P126, "Undef"
  vivify_2568:
    $P126."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2500
    set $P126, $P3665
    unless_null $P126, vivify_2569
    new $P126, "Undef"
  vivify_2569:
    $P126."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2501
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "QRegex"
    nqp_get_package_through_who $P128, $P127, "P6Regex"
    nqp_get_package_through_who $P129, $P128, "Actions"
    get_who $P131, $P129
    set $P132, $P131["buildsub"]
    find_lex $P3671, "$/"
    unless_null $P3671, vivify_2570
    $P3671 = root_new ['parrot';'Hash']
  vivify_2570:
    set $P133, $P3671["p6regex"]
    unless_null $P133, vivify_2571
    new $P133, "Undef"
  vivify_2571:
    $P134 = $P133."ast"()
    set $P135, $P3665
    unless_null $P135, vivify_2572
    new $P135, "Undef"
  vivify_2572:
    $P136 = $P132($P134, $P135)
    set $P3666, $P136
.annotate 'line', 2502
    set $P126, $P3666
    unless_null $P126, vivify_2573
    new $P126, "Undef"
  vivify_2573:
    find_lex $P127, "$name"
    unless_null $P127, vivify_2574
    new $P127, "Undef"
  vivify_2574:
    $P126."name"($P127)
.annotate 'line', 2504
    find_dynamic_lex $P129, "$*PKGDECL"
    unless_null $P129, vivify_2575
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$PKGDECL"]
    unless_null $P129, vivify_2576
    die "Contextual $*PKGDECL not found"
  vivify_2576:
  vivify_2575:
    if $P129, if_3673
    set $P126, $P129
    goto if_3673_end
  if_3673:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2577
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2578
    die "Contextual $*PACKAGE not found"
  vivify_2578:
  vivify_2577:
    get_how $P134, $P133
    can $I100, $P134, "add_method"
    new $P126, 'Integer'
    set $P126, $I100
  if_3673_end:
    unless $P126, if_3672_end
.annotate 'line', 2506
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_2579
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_2580
    die "Contextual $*W not found"
  vivify_2580:
  vivify_2579:
    find_dynamic_lex $P140, "$*PACKAGE"
    unless_null $P140, vivify_2581
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$PACKAGE"]
    unless_null $P140, vivify_2582
    die "Contextual $*PACKAGE not found"
  vivify_2582:
  vivify_2581:
    find_lex $P141, "$name"
    unless_null $P141, vivify_2583
    new $P141, "Undef"
  vivify_2583:
    find_dynamic_lex $P144, "$*W"
    unless_null $P144, vivify_2584
    get_hll_global $P142, "GLOBAL"
    get_who $P143, $P142
    set $P144, $P143["$W"]
    unless_null $P144, vivify_2585
    die "Contextual $*W not found"
  vivify_2585:
  vivify_2584:
    set $P145, $P3666
    unless_null $P145, vivify_2586
    new $P145, "Undef"
  vivify_2586:
    find_lex $P146, "$name"
    unless_null $P146, vivify_2587
    new $P146, "Undef"
  vivify_2587:
    $P147 = $P144."create_code"($P145, $P146, 0)
    $P137."pkg_add_method"($P140, "add_method", $P141, $P147)
  if_3672_end:
.annotate 'line', 2510
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
.annotate 'line', 2512
    new $P131, "ResizablePMCArray"
    push $P131, "NQPRegexMethod"
    find_lex $P132, "$/"
    unless_null $P132, vivify_2588
    new $P132, "Undef"
  vivify_2588:
    $P133 = "lexical_package_lookup"($P131, $P132)
    set $P134, $P3666
    unless_null $P134, vivify_2589
    new $P134, "Undef"
  vivify_2589:
    $P135 = $P129."new"($P133, $P134, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2510
    store_lex "$past", $P135
.annotate 'line', 2514
    set $P126, $P3666
    unless_null $P126, vivify_2590
    new $P126, "Undef"
  vivify_2590:
    find_lex $P3674, "$past"
    unless_null $P3674, vivify_2591
    $P3674 = root_new ['parrot';'Hash']
    store_lex "$past", $P3674
  vivify_2591:
    set $P3674["sink"], $P126
.annotate 'line', 2491
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3659"  :anon :subid("839_1338064451.944") :outer("317_1338064451.944")
    .param pmc param_3661
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2487
    .lex "$_", param_3661
.annotate 'line', 2488
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2597
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2598
    die "Contextual $*W not found"
  vivify_2598:
  vivify_2597:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2599
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2600
    die "Contextual $*PACKAGE not found"
  vivify_2600:
  vivify_2599:
    find_lex $P135, "$_"
    unless_null $P135, vivify_2601
    new $P135, "Undef"
  vivify_2601:
    $P136 = $P135."name"()
    find_dynamic_lex $P139, "$*W"
    unless_null $P139, vivify_2602
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$W"]
    unless_null $P139, vivify_2603
    die "Contextual $*W not found"
  vivify_2603:
  vivify_2602:
    find_lex $P140, "$_"
    unless_null $P140, vivify_2604
    new $P140, "Undef"
  vivify_2604:
    find_lex $P141, "$_"
    unless_null $P141, vivify_2605
    new $P141, "Undef"
  vivify_2605:
    $P142 = $P141."name"()
    $P143 = $P139."create_code"($P140, $P142, 0)
    $P144 = $P131."pkg_add_method"($P134, "add_method", $P136, $P143)
.annotate 'line', 2487
    .return ($P144)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "dotty" :anon :subid("318_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3676
    .param pmc param_3677
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2520
    .lex "self", param_3676
    .lex "$/", param_3677
.annotate 'line', 2521
    new $P118, "Undef"
    set $P3678, $P118
    .lex "$past", $P3678
    set $P3680, param_3677
    unless_null $P3680, vivify_2607
    $P3680 = root_new ['parrot';'Hash']
  vivify_2607:
    set $P121, $P3680["args"]
    unless_null $P121, vivify_2608
    new $P121, "Undef"
  vivify_2608:
    if $P121, if_3679
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
    set $P129, param_3677
    unless_null $P129, vivify_2609
    new $P129, "Undef"
  vivify_2609:
    $P131 = $P128."new"($P129 :named("node"))
    set $P120, $P131
    goto if_3679_end
  if_3679:
    set $P3681, param_3677
    unless_null $P3681, vivify_2610
    $P3681 = root_new ['parrot';'Hash']
  vivify_2610:
    set $P3682, $P3681["args"]
    unless_null $P3682, vivify_2611
    $P3682 = root_new ['parrot';'ResizablePMCArray']
  vivify_2611:
    set $P123, $P3682[0]
    unless_null $P123, vivify_2612
    new $P123, "Undef"
  vivify_2612:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3679_end:
    set $P3678, $P120
.annotate 'line', 2522
    set $P3684, param_3677
    unless_null $P3684, vivify_2613
    $P3684 = root_new ['parrot';'Hash']
  vivify_2613:
    set $P120, $P3684["quote"]
    unless_null $P120, vivify_2614
    new $P120, "Undef"
  vivify_2614:
    if $P120, if_3683
.annotate 'line', 2526
    set $P3687, param_3677
    unless_null $P3687, vivify_2615
    $P3687 = root_new ['parrot';'Hash']
  vivify_2615:
    set $P121, $P3687["longname"]
    unless_null $P121, vivify_2616
    new $P121, "Undef"
  vivify_2616:
    set $S100, $P121
    iseq $I100, $S100, "HOW"
    if $I100, if_3686
.annotate 'line', 2529
    set $P3689, param_3677
    unless_null $P3689, vivify_2617
    $P3689 = root_new ['parrot';'Hash']
  vivify_2617:
    set $P123, $P3689["longname"]
    unless_null $P123, vivify_2618
    new $P123, "Undef"
  vivify_2618:
    set $S101, $P123
    iseq $I101, $S101, "WHAT"
    if $I101, if_3688
.annotate 'line', 2532
    set $P3691, param_3677
    unless_null $P3691, vivify_2619
    $P3691 = root_new ['parrot';'Hash']
  vivify_2619:
    set $P124, $P3691["longname"]
    unless_null $P124, vivify_2620
    new $P124, "Undef"
  vivify_2620:
    set $S102, $P124
    iseq $I102, $S102, "WHO"
    if $I102, if_3690
.annotate 'line', 2535
    set $P3693, param_3677
    unless_null $P3693, vivify_2621
    $P3693 = root_new ['parrot';'Hash']
  vivify_2621:
    set $P125, $P3693["longname"]
    unless_null $P125, vivify_2622
    new $P125, "Undef"
  vivify_2622:
    set $S103, $P125
    iseq $I103, $S103, "REPR"
    if $I103, if_3692
.annotate 'line', 2539
    set $P126, $P3678
    unless_null $P126, vivify_2623
    new $P126, "Undef"
  vivify_2623:
    set $P3694, param_3677
    unless_null $P3694, vivify_2624
    $P3694 = root_new ['parrot';'Hash']
  vivify_2624:
    set $P127, $P3694["longname"]
    unless_null $P127, vivify_2625
    new $P127, "Undef"
  vivify_2625:
    set $S104, $P127
    $P126."name"($S104)
.annotate 'line', 2540
    set $P126, $P3678
    unless_null $P126, vivify_2626
    new $P126, "Undef"
  vivify_2626:
    $P126."pasttype"("callmethod")
.annotate 'line', 2538
    goto if_3692_end
  if_3692:
.annotate 'line', 2536
    set $P126, $P3678
    unless_null $P126, vivify_2627
    new $P126, "Undef"
  vivify_2627:
    $P126."pirop"("repr_name SP")
  if_3692_end:
.annotate 'line', 2535
    goto if_3690_end
  if_3690:
.annotate 'line', 2533
    set $P125, $P3678
    unless_null $P125, vivify_2628
    new $P125, "Undef"
  vivify_2628:
    $P125."pirop"("get_who PP")
  if_3690_end:
.annotate 'line', 2532
    goto if_3688_end
  if_3688:
.annotate 'line', 2530
    set $P124, $P3678
    unless_null $P124, vivify_2629
    new $P124, "Undef"
  vivify_2629:
    $P124."pirop"("get_what PP")
  if_3688_end:
.annotate 'line', 2529
    goto if_3686_end
  if_3686:
.annotate 'line', 2527
    set $P123, $P3678
    unless_null $P123, vivify_2630
    new $P123, "Undef"
  vivify_2630:
    $P123."pirop"("get_how PP")
  if_3686_end:
.annotate 'line', 2526
    goto if_3683_end
  if_3683:
.annotate 'line', 2523
    set $P121, $P3678
    unless_null $P121, vivify_2631
    new $P121, "Undef"
  vivify_2631:
    set $P3685, param_3677
    unless_null $P3685, vivify_2632
    $P3685 = root_new ['parrot';'Hash']
  vivify_2632:
    set $P123, $P3685["quote"]
    unless_null $P123, vivify_2633
    new $P123, "Undef"
  vivify_2633:
    $P124 = $P123."ast"()
    $P121."name"($P124)
.annotate 'line', 2524
    set $P121, $P3678
    unless_null $P121, vivify_2634
    new $P121, "Undef"
  vivify_2634:
    $P121."pasttype"("callmethod")
  if_3683_end:
.annotate 'line', 2542
    set $P120, param_3677
    set $P121, $P3678
    unless_null $P121, vivify_2635
    new $P121, "Undef"
  vivify_2635:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2520
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<self>" :anon :subid("319_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3696
    .param pmc param_3697
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2547
    .lex "self", param_3696
    .lex "$/", param_3697
.annotate 'line', 2548
    set $P118, param_3697
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2549
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("self" :named("name"))
    $P131 = $P124."new"($P129, "nqp_decontainerize PP" :named("pirop"))
.annotate 'line', 2548
    $P132 = $P118."!make"($P131)
.annotate 'line', 2547
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<identifier>" :anon :subid("320_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3699
    .param pmc param_3700
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2552
    .lex "self", param_3699
    .lex "$/", param_3700
.annotate 'line', 2553
    new $P118, "Undef"
    set $P3701, $P118
    .lex "$past", $P3701
    set $P3702, param_3700
    unless_null $P3702, vivify_2636
    $P3702 = root_new ['parrot';'Hash']
  vivify_2636:
    set $P120, $P3702["args"]
    unless_null $P120, vivify_2637
    new $P120, "Undef"
  vivify_2637:
    $P121 = $P120."ast"()
    set $P3701, $P121
.annotate 'line', 2554
    set $P120, $P3701
    unless_null $P120, vivify_2638
    new $P120, "Undef"
  vivify_2638:
    set $P3703, param_3700
    unless_null $P3703, vivify_2639
    $P3703 = root_new ['parrot';'Hash']
  vivify_2639:
    set $P121, $P3703["deflongname"]
    unless_null $P121, vivify_2640
    new $P121, "Undef"
  vivify_2640:
    set $S100, $P121
    $P120."name"($S100)
.annotate 'line', 2555
    set $P120, param_3700
    set $P121, $P3701
    unless_null $P121, vivify_2641
    new $P121, "Undef"
  vivify_2641:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2552
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<name>" :anon :subid("321_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3705
    .param pmc param_3706
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2558
    .const 'Sub' $P3713 = "841_1338064451.944" 
    capture_lex $P3713
    .lex "self", param_3705
    .lex "$/", param_3706
.annotate 'line', 2560
    new $P118, "Undef"
    set $P3707, $P118
    .lex "$var", $P3707
.annotate 'line', 2570
    new $P120, "Undef"
    set $P3708, $P120
    .lex "$past", $P3708
.annotate 'line', 2558
    set $P121, $P3707
    unless_null $P121, vivify_2642
    new $P121, "Undef"
  vivify_2642:
.annotate 'line', 2561
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2643
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2644
    die "Contextual $*W not found"
  vivify_2644:
  vivify_2643:
    set $P3710, param_3706
    unless_null $P3710, vivify_2645
    $P3710 = root_new ['parrot';'Hash']
  vivify_2645:
    set $P125, $P3710["name"]
    unless_null $P125, vivify_2646
    new $P125, "Undef"
  vivify_2646:
    set $S100, $P125
    $P126 = $P124."is_lexical"($S100)
    if $P126, if_3709
.annotate 'line', 2564
    .const 'Sub' $P3713 = "841_1338064451.944" 
    capture_lex $P3713
    $P3713()
    goto if_3709_end
  if_3709:
.annotate 'line', 2562
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    set $P3711, param_3706
    unless_null $P3711, vivify_2652
    $P3711 = root_new ['parrot';'Hash']
  vivify_2652:
    set $P132, $P3711["name"]
    unless_null $P132, vivify_2653
    new $P132, "Undef"
  vivify_2653:
    set $S101, $P132
    $P133 = $P131."new"($S101 :named("name"), "lexical" :named("scope"))
    set $P3707, $P133
  if_3709_end:
.annotate 'line', 2570
    set $P121, $P3707
    unless_null $P121, vivify_2654
    new $P121, "Undef"
  vivify_2654:
    set $P3708, $P121
.annotate 'line', 2571
    set $P3720, param_3706
    unless_null $P3720, vivify_2655
    $P3720 = root_new ['parrot';'Hash']
  vivify_2655:
    set $P121, $P3720["args"]
    unless_null $P121, vivify_2656
    new $P121, "Undef"
  vivify_2656:
    unless $P121, if_3719_end
.annotate 'line', 2572
    set $P3721, param_3706
    unless_null $P3721, vivify_2657
    $P3721 = root_new ['parrot';'Hash']
  vivify_2657:
    set $P3722, $P3721["args"]
    unless_null $P3722, vivify_2658
    $P3722 = root_new ['parrot';'ResizablePMCArray']
  vivify_2658:
    set $P123, $P3722[0]
    unless_null $P123, vivify_2659
    new $P123, "Undef"
  vivify_2659:
    $P124 = $P123."ast"()
    set $P3708, $P124
.annotate 'line', 2573
    set $P123, $P3708
    unless_null $P123, vivify_2660
    new $P123, "Undef"
  vivify_2660:
    set $P124, $P3707
    unless_null $P124, vivify_2661
    new $P124, "Undef"
  vivify_2661:
    $P123."unshift"($P124)
  if_3719_end:
.annotate 'line', 2575
    set $P121, param_3706
    set $P123, $P3708
    unless_null $P123, vivify_2662
    new $P123, "Undef"
  vivify_2662:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2558
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3712"  :anon :subid("841_1338064451.944") :outer("321_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2565
    $P3715 = root_new ['parrot';'ResizablePMCArray']
    set $P3714, $P3715
    .lex "@ns", $P3714
    find_lex $P3716, "$/"
    unless_null $P3716, vivify_2647
    $P3716 = root_new ['parrot';'Hash']
  vivify_2647:
    set $P3717, $P3716["name"]
    unless_null $P3717, vivify_2648
    $P3717 = root_new ['parrot';'Hash']
  vivify_2648:
    set $P127, $P3717["identifier"]
    unless_null $P127, vivify_2649
    new $P127, "Undef"
  vivify_2649:
    clone $P128, $P127
    set $P3714, $P128
.annotate 'line', 2566
    set $P3718, $P3714
    unless_null $P3718, vivify_2650
    $P3718 = root_new ['parrot';'ResizablePMCArray']
  vivify_2650:
    find_lex $P127, "$/"
    unless_null $P127, vivify_2651
    new $P127, "Undef"
  vivify_2651:
    $P128 = "lexical_package_lookup"($P3718, $P127)
    store_lex "$var", $P128
.annotate 'line', 2564
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::op>" :anon :subid("322_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3724
    .param pmc param_3725
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2578
    .lex "self", param_3724
    .lex "$/", param_3725
.annotate 'line', 2579
    new $P118, "Undef"
    set $P3726, $P118
    .lex "$past", $P3726
.annotate 'line', 2580
    new $P120, "Undef"
    set $P3727, $P120
    .lex "$pirop", $P3727
.annotate 'line', 2579
    set $P3729, param_3725
    unless_null $P3729, vivify_2663
    $P3729 = root_new ['parrot';'Hash']
  vivify_2663:
    set $P123, $P3729["args"]
    unless_null $P123, vivify_2664
    new $P123, "Undef"
  vivify_2664:
    if $P123, if_3728
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P131, param_3725
    unless_null $P131, vivify_2665
    new $P131, "Undef"
  vivify_2665:
    $P132 = $P129."new"($P131 :named("node"))
    set $P121, $P132
    goto if_3728_end
  if_3728:
    set $P3730, param_3725
    unless_null $P3730, vivify_2666
    $P3730 = root_new ['parrot';'Hash']
  vivify_2666:
    set $P3731, $P3730["args"]
    unless_null $P3731, vivify_2667
    $P3731 = root_new ['parrot';'ResizablePMCArray']
  vivify_2667:
    set $P124, $P3731[0]
    unless_null $P124, vivify_2668
    new $P124, "Undef"
  vivify_2668:
    $P125 = $P124."ast"()
    set $P121, $P125
  if_3728_end:
    set $P3726, $P121
.annotate 'line', 2580
    set $P3732, param_3725
    unless_null $P3732, vivify_2669
    $P3732 = root_new ['parrot';'Hash']
  vivify_2669:
    set $P121, $P3732["op"]
    unless_null $P121, vivify_2670
    new $P121, "Undef"
  vivify_2670:
    set $S100, $P121
    new $P123, 'String'
    set $P123, $S100
    set $P3727, $P123
.annotate 'line', 2581
    set $P121, $P3727
    unless_null $P121, vivify_2671
    new $P121, "Undef"
  vivify_2671:
    set $S100, $P121
    split $P123, "__", $S100
    join $S101, " ", $P123
    new $P124, 'String'
    set $P124, $S101
    set $P3727, $P124
.annotate 'line', 2582
    set $P121, $P3726
    unless_null $P121, vivify_2672
    new $P121, "Undef"
  vivify_2672:
    set $P123, $P3727
    unless_null $P123, vivify_2673
    new $P123, "Undef"
  vivify_2673:
    $P121."pirop"($P123)
.annotate 'line', 2583
    set $P121, $P3726
    unless_null $P121, vivify_2674
    new $P121, "Undef"
  vivify_2674:
    $P121."pasttype"("pirop")
.annotate 'line', 2584
    set $P121, param_3725
    set $P123, $P3726
    unless_null $P123, vivify_2675
    new $P123, "Undef"
  vivify_2675:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2578
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::const>" :anon :subid("323_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3734
    .param pmc param_3735
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2587
    .lex "self", param_3734
    .lex "$/", param_3735
.annotate 'line', 2588
    set $P118, param_3735
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Val"]
    set $P3736, param_3735
    unless_null $P3736, vivify_2676
    $P3736 = root_new ['parrot';'Hash']
  vivify_2676:
    set $P125, $P3736["const"]
    unless_null $P125, vivify_2677
    new $P125, "Undef"
  vivify_2677:
    set $S100, $P125
    set $P126, param_3735
    unless_null $P126, vivify_2678
    new $P126, "Undef"
  vivify_2678:
    $P127 = $P124."new"($S100 :named("value"), "!macro_const" :named("returns"), $P126 :named("node"))
    $P128 = $P118."!make"($P127)
.annotate 'line', 2587
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<nqp::op>" :anon :subid("324_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3738
    .param pmc param_3739
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2591
    .lex "self", param_3738
    .lex "$/", param_3739
.annotate 'line', 2592
    new $P118, "Undef"
    set $P3740, $P118
    .lex "$op", $P3740
.annotate 'line', 2593
    new $P120, "Undef"
    set $P3741, $P120
    .lex "$args", $P3741
.annotate 'line', 2594
    new $P121, "Undef"
    set $P3742, $P121
    .lex "$past", $P3742
.annotate 'line', 2592
    set $P3743, param_3739
    unless_null $P3743, vivify_2679
    $P3743 = root_new ['parrot';'Hash']
  vivify_2679:
    set $P123, $P3743["op"]
    unless_null $P123, vivify_2680
    new $P123, "Undef"
  vivify_2680:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3740, $P124
.annotate 'line', 2593
    set $P3745, param_3739
    unless_null $P3745, vivify_2681
    $P3745 = root_new ['parrot';'Hash']
  vivify_2681:
    set $P124, $P3745["args"]
    unless_null $P124, vivify_2682
    new $P124, "Undef"
  vivify_2682:
    if $P124, if_3744
    new $P128, "ResizablePMCArray"
    set $P123, $P128
    goto if_3744_end
  if_3744:
    set $P3746, param_3739
    unless_null $P3746, vivify_2683
    $P3746 = root_new ['parrot';'Hash']
  vivify_2683:
    set $P3747, $P3746["args"]
    unless_null $P3747, vivify_2684
    $P3747 = root_new ['parrot';'ResizablePMCArray']
  vivify_2684:
    set $P125, $P3747[0]
    unless_null $P125, vivify_2685
    new $P125, "Undef"
  vivify_2685:
    $P126 = $P125."ast"()
    $P127 = $P126."list"()
    set $P123, $P127
  if_3744_end:
    set $P3741, $P123
.annotate 'line', 2594
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Node"]
    set $P127, $P3741
    unless_null $P127, vivify_2686
    new $P127, "Undef"
  vivify_2686:
    set $P128, $P3740
    unless_null $P128, vivify_2687
    new $P128, "Undef"
  vivify_2687:
    set $P129, param_3739
    unless_null $P129, vivify_2688
    new $P129, "Undef"
  vivify_2688:
    $P131 = $P126."map_node"($P127 :flat, "nqp" :named("map"), $P128 :named("op"), $P129 :named("node"))
    set $P3742, $P131
.annotate 'line', 2597
    set $P123, $P3742
    unless_null $P123, vivify_2689
    new $P123, "Undef"
  vivify_2689:
    defined $I100, $P123
    if $I100, unless_3748_end
.annotate 'line', 2598
    set $P124, param_3739
    unless_null $P124, vivify_2690
    new $P124, "Undef"
  vivify_2690:
    $P125 = $P124."CURSOR"()
    new $P126, 'String'
    set $P126, "Unrecognized nqp:: opcode 'nqp::"
    set $P127, $P3740
    unless_null $P127, vivify_2691
    new $P127, "Undef"
  vivify_2691:
    concat $P128, $P126, $P127
    concat $P129, $P128, "'"
    $P125."panic"($P129)
  unless_3748_end:
.annotate 'line', 2599
    set $P123, param_3739
    set $P124, $P3742
    unless_null $P124, vivify_2692
    new $P124, "Undef"
  vivify_2692:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2591
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<onlystar>" :anon :subid("325_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3750
    .param pmc param_3751
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2602
    .lex "self", param_3750
    .lex "$/", param_3751
.annotate 'line', 2603
    set $P118, param_3751
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    $P125 = $P124."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P126 = $P118."!make"($P125)
.annotate 'line', 2602
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "args" :anon :subid("326_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3753
    .param pmc param_3754
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2608
    .lex "self", param_3753
    .lex "$/", param_3754
    set $P118, param_3754
    set $P3755, param_3754
    unless_null $P3755, vivify_2693
    $P3755 = root_new ['parrot';'Hash']
  vivify_2693:
    set $P120, $P3755["arglist"]
    unless_null $P120, vivify_2694
    new $P120, "Undef"
  vivify_2694:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "arglist" :anon :subid("327_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3757
    .param pmc param_3758
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2610
    .const 'Sub' $P3765 = "842_1338064451.944" 
    capture_lex $P3765
    .lex "self", param_3757
    .lex "$/", param_3758
.annotate 'line', 2611
    new $P118, "Undef"
    set $P3759, $P118
    .lex "$past", $P3759
.annotate 'line', 2619
    new $P120, "Undef"
    set $P3760, $P120
    .lex "$i", $P3760
.annotate 'line', 2620
    new $P121, "Undef"
    set $P3761, $P121
    .lex "$n", $P3761
.annotate 'line', 2611
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P127, param_3758
    unless_null $P127, vivify_2695
    new $P127, "Undef"
  vivify_2695:
    $P128 = $P126."new"("call" :named("pasttype"), $P127 :named("node"))
    set $P3759, $P128
.annotate 'line', 2612
    set $P3763, param_3758
    unless_null $P3763, vivify_2696
    $P3763 = root_new ['parrot';'Hash']
  vivify_2696:
    set $P123, $P3763["EXPR"]
    unless_null $P123, vivify_2697
    new $P123, "Undef"
  vivify_2697:
    unless $P123, if_3762_end
    .const 'Sub' $P3765 = "842_1338064451.944" 
    capture_lex $P3765
    $P3765()
  if_3762_end:
.annotate 'line', 2619
    new $P123, "Float"
    assign $P123, 0
    set $P3760, $P123
.annotate 'line', 2620
    set $P123, $P3759
    unless_null $P123, vivify_2708
    new $P123, "Undef"
  vivify_2708:
    $P124 = $P123."list"()
    set $N100, $P124
    new $P125, 'Float'
    set $P125, $N100
    set $P3761, $P125
.annotate 'line', 2621
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop3786_handler
    push_eh $P125
  loop3786_test:
    set $P123, $P3760
    unless_null $P123, vivify_2709
    new $P123, "Undef"
  vivify_2709:
    set $N100, $P123
    set $P124, $P3761
    unless_null $P124, vivify_2710
    new $P124, "Undef"
  vivify_2710:
    set $N101, $P124
    islt $I100, $N100, $N101
    unless $I100, loop3786_done
  loop3786_redo:
.annotate 'line', 2622
    set $P125, $P3760
    unless_null $P125, vivify_2711
    new $P125, "Undef"
  vivify_2711:
    set $I101, $P125
    set $P3775, $P3759
    unless_null $P3775, vivify_2712
    $P3775 = root_new ['parrot';'ResizablePMCArray']
  vivify_2712:
    set $P126, $P3775[$I101]
    unless_null $P126, vivify_2713
    new $P126, "Undef"
  vivify_2713:
    $S100 = $P126."name"()
    iseq $I102, $S100, "&prefix:<|>"
    unless $I102, if_3774_end
.annotate 'line', 2623
    set $P127, $P3760
    unless_null $P127, vivify_2714
    new $P127, "Undef"
  vivify_2714:
    set $I103, $P127
    set $P3776, $P3759
    unless_null $P3776, vivify_2715
    $P3776 = root_new ['parrot';'ResizablePMCArray']
  vivify_2715:
    set $P3777, $P3776[$I103]
    unless_null $P3777, vivify_2716
    $P3777 = root_new ['parrot';'ResizablePMCArray']
  vivify_2716:
    set $P128, $P3777[0]
    unless_null $P128, vivify_2717
    new $P128, "Undef"
  vivify_2717:
    set $P129, $P3760
    unless_null $P129, vivify_2718
    new $P129, "Undef"
  vivify_2718:
    set $I104, $P129
    set $P3778, $P3759
    unless_null $P3778, vivify_2719
    $P3778 = root_new ['parrot';'ResizablePMCArray']
    set $P3759, $P3778
  vivify_2719:
    set $P3778[$I104], $P128
.annotate 'line', 2624
    set $P127, $P3760
    unless_null $P127, vivify_2720
    new $P127, "Undef"
  vivify_2720:
    set $I103, $P127
    set $P3779, $P3759
    unless_null $P3779, vivify_2721
    $P3779 = root_new ['parrot';'ResizablePMCArray']
  vivify_2721:
    set $P128, $P3779[$I103]
    unless_null $P128, vivify_2722
    new $P128, "Undef"
  vivify_2722:
    $P128."flat"(1)
.annotate 'line', 2625
    set $P128, $P3760
    unless_null $P128, vivify_2723
    new $P128, "Undef"
  vivify_2723:
    set $I103, $P128
    set $P3782, $P3759
    unless_null $P3782, vivify_2724
    $P3782 = root_new ['parrot';'ResizablePMCArray']
  vivify_2724:
    set $P129, $P3782[$I103]
    unless_null $P129, vivify_2725
    new $P129, "Undef"
  vivify_2725:
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Val"]
    $P135 = $P129."isa"($P134)
    if $P135, if_3781
    set $P127, $P135
    goto if_3781_end
  if_3781:
.annotate 'line', 2626
    set $P136, $P3760
    unless_null $P136, vivify_2726
    new $P136, "Undef"
  vivify_2726:
    set $I104, $P136
    set $P3783, $P3759
    unless_null $P3783, vivify_2727
    $P3783 = root_new ['parrot';'ResizablePMCArray']
  vivify_2727:
    set $P137, $P3783[$I104]
    unless_null $P137, vivify_2728
    new $P137, "Undef"
  vivify_2728:
    $S101 = $P137."name"()
    substr $S102, $S101, 0, 1
    iseq $I105, $S102, "%"
    new $P127, 'Integer'
    set $P127, $I105
  if_3781_end:
    unless $P127, if_3780_end
.annotate 'line', 2627
    set $P138, $P3760
    unless_null $P138, vivify_2729
    new $P138, "Undef"
  vivify_2729:
    set $I106, $P138
    set $P3784, $P3759
    unless_null $P3784, vivify_2730
    $P3784 = root_new ['parrot';'ResizablePMCArray']
  vivify_2730:
    set $P139, $P3784[$I106]
    unless_null $P139, vivify_2731
    new $P139, "Undef"
  vivify_2731:
    $P139."named"(1)
  if_3780_end:
  if_3774_end:
.annotate 'line', 2621
    set $P125, $P3760
    unless_null $P125, vivify_2732
    new $P125, "Undef"
  vivify_2732:
    clone $P3785, $P125
    inc $P125
  loop3786_next:
    goto loop3786_test
  loop3786_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop3786_next
    eq $P126, .CONTROL_LOOP_REDO, loop3786_redo
  loop3786_done:
    pop_eh 
.annotate 'line', 2632
    set $P123, param_3758
    set $P124, $P3759
    unless_null $P124, vivify_2733
    new $P124, "Undef"
  vivify_2733:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2610
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3764"  :anon :subid("842_1338064451.944") :outer("327_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2612
    .const 'Sub' $P3771 = "843_1338064451.944" 
    capture_lex $P3771
.annotate 'line', 2613
    new $P124, "Undef"
    set $P3766, $P124
    .lex "$expr", $P3766
    find_lex $P3767, "$/"
    unless_null $P3767, vivify_2698
    $P3767 = root_new ['parrot';'Hash']
  vivify_2698:
    set $P125, $P3767["EXPR"]
    unless_null $P125, vivify_2699
    new $P125, "Undef"
  vivify_2699:
    $P126 = $P125."ast"()
    set $P3766, $P126
.annotate 'line', 2614
    set $P127, $P3766
    unless_null $P127, vivify_2700
    new $P127, "Undef"
  vivify_2700:
    $S100 = $P127."name"()
    iseq $I100, $S100, "&infix:<,>"
    if $I100, if_3769
    new $P126, 'Integer'
    set $P126, $I100
    goto if_3769_end
  if_3769:
    set $P128, $P3766
    unless_null $P128, vivify_2701
    new $P128, "Undef"
  vivify_2701:
    $P129 = $P128."named"()
    isfalse $I101, $P129
    new $P126, 'Integer'
    set $P126, $I101
  if_3769_end:
    if $P126, if_3768
.annotate 'line', 2617
    find_lex $P132, "$past"
    unless_null $P132, vivify_2702
    new $P132, "Undef"
  vivify_2702:
    set $P133, $P3766
    unless_null $P133, vivify_2703
    new $P133, "Undef"
  vivify_2703:
    $P134 = $P132."push"($P133)
    set $P125, $P134
.annotate 'line', 2614
    goto if_3768_end
  if_3768:
.annotate 'line', 2615
    set $P132, $P3766
    unless_null $P132, vivify_2704
    new $P132, "Undef"
  vivify_2704:
    $P133 = $P132."list"()
    defined $I102, $P133
    unless $I102, for_undef_2705
    iter $P131, $P133
    new $P135, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P135, loop3773_handler
    push_eh $P135
  loop3773_test:
    unless $P131, loop3773_done
    shift $P134, $P131
  loop3773_redo:
    .const 'Sub' $P3771 = "843_1338064451.944" 
    capture_lex $P3771
    $P3771($P134)
  loop3773_next:
    goto loop3773_test
  loop3773_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P136, exception, 'type'
    eq $P136, .CONTROL_LOOP_NEXT, loop3773_next
    eq $P136, .CONTROL_LOOP_REDO, loop3773_redo
  loop3773_done:
    pop_eh 
  for_undef_2705:
.annotate 'line', 2614
    set $P125, $P131
  if_3768_end:
.annotate 'line', 2612
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3770"  :anon :subid("843_1338064451.944") :outer("842_1338064451.944")
    .param pmc param_3772
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2615
    .lex "$_", param_3772
    find_lex $P135, "$past"
    unless_null $P135, vivify_2706
    new $P135, "Undef"
  vivify_2706:
    find_lex $P136, "$_"
    unless_null $P136, vivify_2707
    new $P136, "Undef"
  vivify_2707:
    $P137 = $P135."push"($P136)
    .return ($P137)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<multi_declarator>" :anon :subid("328_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3788
    .param pmc param_3789
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2635
    .lex "self", param_3788
    .lex "$/", param_3789
    set $P118, param_3789
    set $P3790, param_3789
    unless_null $P3790, vivify_2734
    $P3790 = root_new ['parrot';'Hash']
  vivify_2734:
    set $P120, $P3790["multi_declarator"]
    unless_null $P120, vivify_2735
    new $P120, "Undef"
  vivify_2735:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<value>" :anon :subid("329_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3792
    .param pmc param_3793
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2637
    .lex "self", param_3792
    .lex "$/", param_3793
    set $P118, param_3793
    set $P3794, param_3793
    unless_null $P3794, vivify_2736
    $P3794 = root_new ['parrot';'Hash']
  vivify_2736:
    set $P120, $P3794["value"]
    unless_null $P120, vivify_2737
    new $P120, "Undef"
  vivify_2737:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<( )>" :anon :subid("330_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3796
    .param pmc param_3797
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2639
    .lex "self", param_3796
    .lex "$/", param_3797
.annotate 'line', 2640
    set $P118, param_3797
.annotate 'line', 2641
    set $P3799, param_3797
    unless_null $P3799, vivify_2738
    $P3799 = root_new ['parrot';'Hash']
  vivify_2738:
    set $P121, $P3799["EXPR"]
    unless_null $P121, vivify_2739
    new $P121, "Undef"
  vivify_2739:
    if $P121, if_3798
.annotate 'line', 2642
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
    set $P129, param_3797
    unless_null $P129, vivify_2740
    new $P129, "Undef"
  vivify_2740:
    $P131 = $P128."new"("list" :named("pasttype"), $P129 :named("node"))
    set $P120, $P131
.annotate 'line', 2641
    goto if_3798_end
  if_3798:
    set $P3800, param_3797
    unless_null $P3800, vivify_2741
    $P3800 = root_new ['parrot';'Hash']
  vivify_2741:
    set $P3801, $P3800["EXPR"]
    unless_null $P3801, vivify_2742
    $P3801 = root_new ['parrot';'ResizablePMCArray']
  vivify_2742:
    set $P123, $P3801[0]
    unless_null $P123, vivify_2743
    new $P123, "Undef"
  vivify_2743:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3798_end:
    $P132 = $P118."!make"($P120)
.annotate 'line', 2639
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<[ ]>" :anon :subid("331_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3803
    .param pmc param_3804
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2645
    .lex "self", param_3803
    .lex "$/", param_3804
.annotate 'line', 2646
    new $P118, "Undef"
    set $P3805, $P118
    .lex "$past", $P3805
.annotate 'line', 2645
    set $P120, $P3805
    unless_null $P120, vivify_2744
    new $P120, "Undef"
  vivify_2744:
.annotate 'line', 2647
    set $P3807, param_3804
    unless_null $P3807, vivify_2745
    $P3807 = root_new ['parrot';'Hash']
  vivify_2745:
    set $P120, $P3807["EXPR"]
    unless_null $P120, vivify_2746
    new $P120, "Undef"
  vivify_2746:
    if $P120, if_3806
.annotate 'line', 2654
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    $P126 = $P125."new"("list" :named("pasttype"))
    set $P3805, $P126
.annotate 'line', 2653
    goto if_3806_end
  if_3806:
.annotate 'line', 2648
    set $P3808, param_3804
    unless_null $P3808, vivify_2747
    $P3808 = root_new ['parrot';'Hash']
  vivify_2747:
    set $P3809, $P3808["EXPR"]
    unless_null $P3809, vivify_2748
    $P3809 = root_new ['parrot';'ResizablePMCArray']
  vivify_2748:
    set $P121, $P3809[0]
    unless_null $P121, vivify_2749
    new $P121, "Undef"
  vivify_2749:
    $P123 = $P121."ast"()
    set $P3805, $P123
.annotate 'line', 2649
    set $P121, $P3805
    unless_null $P121, vivify_2750
    new $P121, "Undef"
  vivify_2750:
    $S100 = $P121."name"()
    isne $I100, $S100, "&infix:<,>"
    unless $I100, if_3810_end
.annotate 'line', 2650
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P127, $P3805
    unless_null $P127, vivify_2751
    new $P127, "Undef"
  vivify_2751:
    $P128 = $P126."new"($P127, "list" :named("pasttype"))
    set $P3805, $P128
  if_3810_end:
  if_3806_end:
.annotate 'line', 2656
    set $P120, $P3805
    unless_null $P120, vivify_2752
    new $P120, "Undef"
  vivify_2752:
    $P120."name"("&circumfix:<[ ]>")
.annotate 'line', 2657
    set $P120, param_3804
    set $P121, $P3805
    unless_null $P121, vivify_2753
    new $P121, "Undef"
  vivify_2753:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2645
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<ang>" :anon :subid("332_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3812
    .param pmc param_3813
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2660
    .lex "self", param_3812
    .lex "$/", param_3813
    set $P118, param_3813
    set $P3814, param_3813
    unless_null $P3814, vivify_2754
    $P3814 = root_new ['parrot';'Hash']
  vivify_2754:
    set $P120, $P3814["quote_EXPR"]
    unless_null $P120, vivify_2755
    new $P120, "Undef"
  vivify_2755:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>" :anon :subid("333_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3816
    .param pmc param_3817
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2661
    .lex "self", param_3816
    .lex "$/", param_3817
    set $P118, param_3817
    set $P3818, param_3817
    unless_null $P3818, vivify_2756
    $P3818 = root_new ['parrot';'Hash']
  vivify_2756:
    set $P120, $P3818["quote_EXPR"]
    unless_null $P120, vivify_2757
    new $P120, "Undef"
  vivify_2757:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<{ }>" :anon :subid("334_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3820
    .param pmc param_3821
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2663
    .const 'Sub' $P3828 = "844_1338064451.944" 
    capture_lex $P3828
    .lex "self", param_3820
    .lex "$/", param_3821
.annotate 'line', 2664
    set $P3823, param_3821
    unless_null $P3823, vivify_2758
    $P3823 = root_new ['parrot';'Hash']
  vivify_2758:
    set $P3824, $P3823["pblock"]
    unless_null $P3824, vivify_2759
    $P3824 = root_new ['parrot';'Hash']
  vivify_2759:
    set $P3825, $P3824["blockoid"]
    unless_null $P3825, vivify_2760
    $P3825 = root_new ['parrot';'Hash']
  vivify_2760:
    set $P3826, $P3825["statementlist"]
    unless_null $P3826, vivify_2761
    $P3826 = root_new ['parrot';'Hash']
  vivify_2761:
    set $P120, $P3826["statement"]
    unless_null $P120, vivify_2762
    new $P120, "Undef"
  vivify_2762:
    set $N100, $P120
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_3822
.annotate 'line', 2669
    set $P3833, param_3821
    unless_null $P3833, vivify_2763
    $P3833 = root_new ['parrot';'Hash']
  vivify_2763:
    set $P3834, $P3833["pblock"]
    unless_null $P3834, vivify_2764
    $P3834 = root_new ['parrot';'Hash']
  vivify_2764:
    set $P3835, $P3834["blockoid"]
    unless_null $P3835, vivify_2765
    $P3835 = root_new ['parrot';'Hash']
  vivify_2765:
    set $P126, $P3835["you_are_here"]
    unless_null $P126, vivify_2766
    new $P126, "Undef"
  vivify_2766:
    if $P126, if_3832
.annotate 'line', 2673
    set $P127, param_3821
    $P128 = "vivitype"("%")
    $P129 = $P127."!make"($P128)
.annotate 'line', 2672
    set $P124, $P129
.annotate 'line', 2669
    goto if_3832_end
  if_3832:
.annotate 'line', 2670
    set $P127, param_3821
    set $P3836, param_3821
    unless_null $P3836, vivify_2767
    $P3836 = root_new ['parrot';'Hash']
  vivify_2767:
    set $P128, $P3836["pblock"]
    unless_null $P128, vivify_2768
    new $P128, "Undef"
  vivify_2768:
    $P129 = $P128."ast"()
    $P131 = $P127."!make"($P129)
.annotate 'line', 2669
    set $P124, $P131
  if_3832_end:
    set $P118, $P124
.annotate 'line', 2664
    goto if_3822_end
  if_3822:
    .const 'Sub' $P3828 = "844_1338064451.944" 
    capture_lex $P3828
    $P123 = $P3828()
    set $P118, $P123
  if_3822_end:
.annotate 'line', 2663
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3827"  :anon :subid("844_1338064451.944") :outer("334_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2665
    new $P121, "Undef"
    set $P3829, $P121
    .lex "$past", $P3829
    find_lex $P3830, "$/"
    unless_null $P3830, vivify_2769
    $P3830 = root_new ['parrot';'Hash']
  vivify_2769:
    set $P123, $P3830["pblock"]
    unless_null $P123, vivify_2770
    new $P123, "Undef"
  vivify_2770:
    $P124 = $P123."ast"()
    set $P3829, $P124
.annotate 'line', 2666
    new $P123, "Float"
    assign $P123, 1
    set $P3831, $P3829
    unless_null $P3831, vivify_2771
    $P3831 = root_new ['parrot';'Hash']
    set $P3829, $P3831
  vivify_2771:
    set $P3831["bareblock"], $P123
.annotate 'line', 2667
    find_dynamic_lex $P123, "$/"
    set $P124, $P3829
    unless_null $P124, vivify_2772
    new $P124, "Undef"
  vivify_2772:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2664
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<sigil>" :anon :subid("335_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3838
    .param pmc param_3839
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2677
    .lex "self", param_3838
    .lex "$/", param_3839
.annotate 'line', 2678
    new $P118, "Undef"
    set $P3840, $P118
    .lex "$name", $P3840
    set $P3842, param_3839
    unless_null $P3842, vivify_2773
    $P3842 = root_new ['parrot';'Hash']
  vivify_2773:
    set $P121, $P3842["sigil"]
    unless_null $P121, vivify_2774
    new $P121, "Undef"
  vivify_2774:
    set $S100, $P121
    iseq $I100, $S100, "@"
    if $I100, if_3841
.annotate 'line', 2679
    set $P3844, param_3839
    unless_null $P3844, vivify_2775
    $P3844 = root_new ['parrot';'Hash']
  vivify_2775:
    set $P125, $P3844["sigil"]
    unless_null $P125, vivify_2776
    new $P125, "Undef"
  vivify_2776:
    set $S101, $P125
    iseq $I101, $S101, "%"
    if $I101, if_3843
    new $P127, "String"
    assign $P127, "item"
    set $P124, $P127
    goto if_3843_end
  if_3843:
    new $P126, "String"
    assign $P126, "hash"
    set $P124, $P126
  if_3843_end:
    set $P120, $P124
.annotate 'line', 2678
    goto if_3841_end
  if_3841:
    new $P123, "String"
    assign $P123, "list"
    set $P120, $P123
  if_3841_end:
    set $P3840, $P120
.annotate 'line', 2681
    set $P120, param_3839
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    set $P126, $P3840
    unless_null $P126, vivify_2777
    new $P126, "Undef"
  vivify_2777:
    set $P3845, param_3839
    unless_null $P3845, vivify_2778
    $P3845 = root_new ['parrot';'Hash']
  vivify_2778:
    set $P127, $P3845["semilist"]
    unless_null $P127, vivify_2779
    new $P127, "Undef"
  vivify_2779:
    $P128 = $P127."ast"()
    $P129 = $P125."new"($P128, "callmethod" :named("pasttype"), $P126 :named("name"))
    $P131 = $P120."!make"($P129)
.annotate 'line', 2677
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "semilist" :anon :subid("336_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3847
    .param pmc param_3848
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2684
    .lex "self", param_3847
    .lex "$/", param_3848
    set $P118, param_3848
    set $P3849, param_3848
    unless_null $P3849, vivify_2780
    $P3849 = root_new ['parrot';'Hash']
  vivify_2780:
    set $P120, $P3849["statement"]
    unless_null $P120, vivify_2781
    new $P120, "Undef"
  vivify_2781:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<[ ]>" :anon :subid("337_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3851
    .param pmc param_3852
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2686
    .lex "self", param_3851
    .lex "$/", param_3852
.annotate 'line', 2687
    set $P118, param_3852
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3853, param_3852
    unless_null $P3853, vivify_2782
    $P3853 = root_new ['parrot';'Hash']
  vivify_2782:
    set $P125, $P3853["EXPR"]
    unless_null $P125, vivify_2783
    new $P125, "Undef"
  vivify_2783:
    $P126 = $P125."ast"()
.annotate 'line', 2689
    $P127 = "vivitype"("@")
.annotate 'line', 2687
    $P128 = $P124."new"($P126, "keyed_int" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2686
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<{ }>" :anon :subid("338_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3855
    .param pmc param_3856
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2692
    .lex "self", param_3855
    .lex "$/", param_3856
.annotate 'line', 2693
    set $P118, param_3856
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3857, param_3856
    unless_null $P3857, vivify_2784
    $P3857 = root_new ['parrot';'Hash']
  vivify_2784:
    set $P125, $P3857["EXPR"]
    unless_null $P125, vivify_2785
    new $P125, "Undef"
  vivify_2785:
    $P126 = $P125."ast"()
.annotate 'line', 2695
    $P127 = "vivitype"("%")
.annotate 'line', 2693
    $P128 = $P124."new"($P126, "keyed" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2692
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<ang>" :anon :subid("339_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3859
    .param pmc param_3860
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2698
    .lex "self", param_3859
    .lex "$/", param_3860
.annotate 'line', 2699
    set $P118, param_3860
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3861, param_3860
    unless_null $P3861, vivify_2786
    $P3861 = root_new ['parrot';'Hash']
  vivify_2786:
    set $P125, $P3861["quote_EXPR"]
    unless_null $P125, vivify_2787
    new $P125, "Undef"
  vivify_2787:
    $P126 = $P125."ast"()
.annotate 'line', 2701
    $P127 = "vivitype"("%")
.annotate 'line', 2699
    $P128 = $P124."new"($P126, "keyed" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2698
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<( )>" :anon :subid("340_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3863
    .param pmc param_3864
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2704
    .lex "self", param_3863
    .lex "$/", param_3864
.annotate 'line', 2705
    set $P118, param_3864
    set $P3865, param_3864
    unless_null $P3865, vivify_2788
    $P3865 = root_new ['parrot';'Hash']
  vivify_2788:
    set $P120, $P3865["arglist"]
    unless_null $P120, vivify_2789
    new $P120, "Undef"
  vivify_2789:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 2704
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "value" :anon :subid("341_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3867
    .param pmc param_3868
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2708
    .lex "self", param_3867
    .lex "$/", param_3868
.annotate 'line', 2709
    set $P118, param_3868
    set $P3870, param_3868
    unless_null $P3870, vivify_2790
    $P3870 = root_new ['parrot';'Hash']
  vivify_2790:
    set $P121, $P3870["quote"]
    unless_null $P121, vivify_2791
    new $P121, "Undef"
  vivify_2791:
    if $P121, if_3869
    set $P3872, param_3868
    unless_null $P3872, vivify_2792
    $P3872 = root_new ['parrot';'Hash']
  vivify_2792:
    set $P125, $P3872["number"]
    unless_null $P125, vivify_2793
    new $P125, "Undef"
  vivify_2793:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3869_end
  if_3869:
    set $P3871, param_3868
    unless_null $P3871, vivify_2794
    $P3871 = root_new ['parrot';'Hash']
  vivify_2794:
    set $P123, $P3871["quote"]
    unless_null $P123, vivify_2795
    new $P123, "Undef"
  vivify_2795:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3869_end:
    $P127 = $P118."!make"($P120)
.annotate 'line', 2708
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "number" :anon :subid("342_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3874
    .param pmc param_3875
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2712
    .lex "self", param_3874
    .lex "$/", param_3875
.annotate 'line', 2713
    new $P118, "Undef"
    set $P3876, $P118
    .lex "$value", $P3876
    set $P3878, param_3875
    unless_null $P3878, vivify_2796
    $P3878 = root_new ['parrot';'Hash']
  vivify_2796:
    set $P121, $P3878["dec_number"]
    unless_null $P121, vivify_2797
    new $P121, "Undef"
  vivify_2797:
    if $P121, if_3877
    set $P3880, param_3875
    unless_null $P3880, vivify_2798
    $P3880 = root_new ['parrot';'Hash']
  vivify_2798:
    set $P125, $P3880["integer"]
    unless_null $P125, vivify_2799
    new $P125, "Undef"
  vivify_2799:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3877_end
  if_3877:
    set $P3879, param_3875
    unless_null $P3879, vivify_2800
    $P3879 = root_new ['parrot';'Hash']
  vivify_2800:
    set $P123, $P3879["dec_number"]
    unless_null $P123, vivify_2801
    new $P123, "Undef"
  vivify_2801:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3877_end:
    set $P3876, $P120
.annotate 'line', 2714
    set $P3882, param_3875
    unless_null $P3882, vivify_2802
    $P3882 = root_new ['parrot';'Hash']
  vivify_2802:
    set $P120, $P3882["sign"]
    unless_null $P120, vivify_2803
    new $P120, "Undef"
  vivify_2803:
    set $S100, $P120
    iseq $I100, $S100, "-"
    unless $I100, if_3881_end
    set $P121, $P3876
    unless_null $P121, vivify_2804
    new $P121, "Undef"
  vivify_2804:
    neg $P123, $P121
    set $P3876, $P123
  if_3881_end:
.annotate 'line', 2715
    set $P120, param_3875
    set $P3884, param_3875
    unless_null $P3884, vivify_2805
    $P3884 = root_new ['parrot';'Hash']
  vivify_2805:
    set $P123, $P3884["dec_number"]
    unless_null $P123, vivify_2806
    new $P123, "Undef"
  vivify_2806:
    if $P123, if_3883
.annotate 'line', 2717
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Want"]
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Val"]
    set $P139, $P3876
    unless_null $P139, vivify_2807
    new $P139, "Undef"
  vivify_2807:
    $P140 = $P138."new"($P139 :named("value"))
    set $P141, $P3876
    unless_null $P141, vivify_2808
    new $P141, "Undef"
  vivify_2808:
    $P142 = $P134."new"($P140, "Ii", $P141)
    set $P121, $P142
.annotate 'line', 2715
    goto if_3883_end
  if_3883:
.annotate 'line', 2716
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Val"]
    set $P128, $P3876
    unless_null $P128, vivify_2809
    new $P128, "Undef"
  vivify_2809:
    $P129 = $P127."new"($P128 :named("value"))
    set $P121, $P129
  if_3883_end:
.annotate 'line', 2715
    $P143 = $P120."!make"($P121)
.annotate 'line', 2712
    .return ($P143)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<apos>" :anon :subid("343_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3886
    .param pmc param_3887
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2720
    .lex "self", param_3886
    .lex "$/", param_3887
    set $P118, param_3887
    set $P3888, param_3887
    unless_null $P3888, vivify_2810
    $P3888 = root_new ['parrot';'Hash']
  vivify_2810:
    set $P120, $P3888["quote_EXPR"]
    unless_null $P120, vivify_2811
    new $P120, "Undef"
  vivify_2811:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<dblq>" :anon :subid("344_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3890
    .param pmc param_3891
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2721
    .lex "self", param_3890
    .lex "$/", param_3891
    set $P118, param_3891
    set $P3892, param_3891
    unless_null $P3892, vivify_2812
    $P3892 = root_new ['parrot';'Hash']
  vivify_2812:
    set $P120, $P3892["quote_EXPR"]
    unless_null $P120, vivify_2813
    new $P120, "Undef"
  vivify_2813:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<qq>" :anon :subid("345_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3894
    .param pmc param_3895
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2722
    .lex "self", param_3894
    .lex "$/", param_3895
    set $P118, param_3895
    set $P3896, param_3895
    unless_null $P3896, vivify_2814
    $P3896 = root_new ['parrot';'Hash']
  vivify_2814:
    set $P120, $P3896["quote_EXPR"]
    unless_null $P120, vivify_2815
    new $P120, "Undef"
  vivify_2815:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<q>" :anon :subid("346_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3898
    .param pmc param_3899
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2723
    .lex "self", param_3898
    .lex "$/", param_3899
    set $P118, param_3899
    set $P3900, param_3899
    unless_null $P3900, vivify_2816
    $P3900 = root_new ['parrot';'Hash']
  vivify_2816:
    set $P120, $P3900["quote_EXPR"]
    unless_null $P120, vivify_2817
    new $P120, "Undef"
  vivify_2817:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q>" :anon :subid("347_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3902
    .param pmc param_3903
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2724
    .lex "self", param_3902
    .lex "$/", param_3903
    set $P118, param_3903
    set $P3904, param_3903
    unless_null $P3904, vivify_2818
    $P3904 = root_new ['parrot';'Hash']
  vivify_2818:
    set $P120, $P3904["quote_EXPR"]
    unless_null $P120, vivify_2819
    new $P120, "Undef"
  vivify_2819:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q:PIR>" :anon :subid("348_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3906
    .param pmc param_3907
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2725
    .lex "self", param_3906
    .lex "$/", param_3907
.annotate 'line', 2726
    set $P118, param_3907
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P3908, param_3907
    unless_null $P3908, vivify_2820
    $P3908 = root_new ['parrot';'Hash']
  vivify_2820:
    set $P125, $P3908["quote_EXPR"]
    unless_null $P125, vivify_2821
    new $P125, "Undef"
  vivify_2821:
    $P126 = $P125."ast"()
    $P127 = $P126."value"()
    set $P128, param_3907
    unless_null $P128, vivify_2822
    new $P128, "Undef"
  vivify_2822:
    $P129 = $P124."new"($P127 :named("inline"), "inline" :named("pasttype"), $P128 :named("node"))
    $P131 = $P118."!make"($P129)
.annotate 'line', 2725
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym</ />" :anon :subid("349_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3910
    .param pmc param_3911
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2731
    .lex "self", param_3910
    .lex "$/", param_3911
.annotate 'line', 2732
    new $P118, "Undef"
    set $P3912, $P118
    .lex "$block", $P3912
.annotate 'line', 2742
    new $P120, "Undef"
    set $P3913, $P120
    .lex "$regex", $P3913
.annotate 'line', 2743
    new $P121, "Undef"
    set $P3914, $P121
    .lex "$past", $P3914
.annotate 'line', 2732
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2823
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2824
    die "Contextual $*W not found"
  vivify_2824:
  vivify_2823:
    $P126 = $P125."pop_lexpad"()
    set $P3912, $P126
.annotate 'line', 2733
    set $P3915, $P3912
    unless_null $P3915, vivify_2825
    $P3915 = root_new ['parrot';'ResizablePMCArray']
  vivify_2825:
    set $P123, $P3915[0]
    unless_null $P123, vivify_2826
    new $P123, "Undef"
  vivify_2826:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("self" :named("name"), "parameter" :named("scope"))
    $P123."push"($P128)
.annotate 'line', 2734
    set $P3916, $P3912
    unless_null $P3916, vivify_2827
    $P3916 = root_new ['parrot';'ResizablePMCArray']
  vivify_2827:
    set $P123, $P3916[0]
    unless_null $P123, vivify_2828
    new $P123, "Undef"
  vivify_2828:
.annotate 'line', 2735
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
.annotate 'line', 2736
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    $P133 = $P132."new"("self" :named("name"), "lexical_6model" :named("scope"))
.annotate 'line', 2735
    $P134 = $P127."new"("self" :named("name"), "register" :named("scope"), 1 :named("isdecl"), $P133 :named("viviself"))
    $P123."push"($P134)
.annotate 'line', 2737
    set $P3917, $P3912
    unless_null $P3917, vivify_2829
    $P3917 = root_new ['parrot';'ResizablePMCArray']
  vivify_2829:
    set $P123, $P3917[0]
    unless_null $P123, vivify_2830
    new $P123, "Undef"
  vivify_2830:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"(unicode:"$\x{a2}" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P123."push"($P128)
.annotate 'line', 2738
    set $P3918, $P3912
    unless_null $P3918, vivify_2831
    $P3918 = root_new ['parrot';'ResizablePMCArray']
  vivify_2831:
    set $P123, $P3918[0]
    unless_null $P123, vivify_2832
    new $P123, "Undef"
  vivify_2832:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("$/" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P123."push"($P128)
.annotate 'line', 2739
    set $P123, $P3912
    unless_null $P123, vivify_2833
    new $P123, "Undef"
  vivify_2833:
    $P123."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2740
    set $P123, $P3912
    unless_null $P123, vivify_2834
    new $P123, "Undef"
  vivify_2834:
    $P123."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2742
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "QRegex"
    nqp_get_package_through_who $P125, $P124, "P6Regex"
    nqp_get_package_through_who $P126, $P125, "Actions"
    get_who $P127, $P126
    set $P128, $P127["buildsub"]
    set $P3919, param_3911
    unless_null $P3919, vivify_2835
    $P3919 = root_new ['parrot';'Hash']
  vivify_2835:
    set $P129, $P3919["p6regex"]
    unless_null $P129, vivify_2836
    new $P129, "Undef"
  vivify_2836:
    $P131 = $P129."ast"()
    set $P132, $P3912
    unless_null $P132, vivify_2837
    new $P132, "Undef"
  vivify_2837:
    $P133 = $P128($P131, $P132)
    set $P3913, $P133
.annotate 'line', 2743
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
.annotate 'line', 2745
    new $P127, "ResizablePMCArray"
    push $P127, "NQPRegex"
    set $P128, param_3911
    unless_null $P128, vivify_2838
    new $P128, "Undef"
  vivify_2838:
    $P129 = "lexical_package_lookup"($P127, $P128)
    set $P131, $P3913
    unless_null $P131, vivify_2839
    new $P131, "Undef"
  vivify_2839:
    $P132 = $P126."new"($P129, $P131, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2743
    set $P3914, $P132
.annotate 'line', 2749
    set $P123, $P3913
    unless_null $P123, vivify_2840
    new $P123, "Undef"
  vivify_2840:
    set $P3920, $P3914
    unless_null $P3920, vivify_2841
    $P3920 = root_new ['parrot';'Hash']
    set $P3914, $P3920
  vivify_2841:
    set $P3920["sink"], $P123
.annotate 'line', 2750
    set $P123, param_3911
    set $P124, $P3914
    unless_null $P124, vivify_2842
    new $P124, "Undef"
  vivify_2842:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2731
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<$>" :anon :subid("350_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3922
    .param pmc param_3923
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2753
    .lex "self", param_3922
    .lex "$/", param_3923
    set $P118, param_3923
    set $P3924, param_3923
    unless_null $P3924, vivify_2843
    $P3924 = root_new ['parrot';'Hash']
  vivify_2843:
    set $P120, $P3924["variable"]
    unless_null $P120, vivify_2844
    new $P120, "Undef"
  vivify_2844:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<{ }>" :anon :subid("351_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3926
    .param pmc param_3927
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2754
    .lex "self", param_3926
    .lex "$/", param_3927
.annotate 'line', 2755
    set $P118, param_3927
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2756
    set $P3928, param_3927
    unless_null $P3928, vivify_2845
    $P3928 = root_new ['parrot';'Hash']
  vivify_2845:
    set $P125, $P3928["block"]
    unless_null $P125, vivify_2846
    new $P125, "Undef"
  vivify_2846:
    $P126 = $P125."ast"()
    $P127 = "block_immediate"($P126)
    set $P128, param_3927
    unless_null $P128, vivify_2847
    new $P128, "Undef"
  vivify_2847:
    $P129 = $P124."new"($P127, "set S*" :named("pirop"), $P128 :named("node"))
.annotate 'line', 2755
    $P131 = $P118."!make"($P129)
.annotate 'line', 2754
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("352_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3930
    .param pmc param_3931
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2759
    .lex "self", param_3930
    .lex "$/", param_3931
    set $P118, param_3931
    $P120 = $P118."!make"("\e")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<.>" :anon :subid("353_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3933
    .param pmc param_3934
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2763
    .lex "self", param_3933
    .lex "$/", param_3934
    set $P118, param_3934
    set $P3935, param_3934
    unless_null $P3935, vivify_2848
    $P3935 = root_new ['parrot';'Hash']
  vivify_2848:
    set $P120, $P3935["dotty"]
    unless_null $P120, vivify_2849
    new $P120, "Undef"
  vivify_2849:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<++>" :anon :subid("354_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3937
    .param pmc param_3938
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2765
    .lex "self", param_3937
    .lex "$/", param_3938
.annotate 'line', 2766
    set $P118, param_3938
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2767
    new $P125, "ResizablePMCArray"
    push $P125, "    clone %r, %0"
    push $P125, "    inc %0"
.annotate 'line', 2766
    $P126 = $P124."new"("postfix:<++>" :named("name"), $P125 :named("inline"), "inline" :named("pasttype"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2765
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<-->" :anon :subid("355_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3940
    .param pmc param_3941
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2771
    .lex "self", param_3940
    .lex "$/", param_3941
.annotate 'line', 2772
    set $P118, param_3941
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2773
    new $P125, "ResizablePMCArray"
    push $P125, "    clone %r, %0"
    push $P125, "    dec %0"
.annotate 'line', 2772
    $P126 = $P124."new"("postfix:<-->" :named("name"), $P125 :named("inline"), "inline" :named("pasttype"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2771
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "prefix:sym<make>" :anon :subid("356_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3943
    .param pmc param_3944
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2777
    .lex "self", param_3943
    .lex "$/", param_3944
.annotate 'line', 2778
    set $P118, param_3944
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2779
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("$/" :named("name"), "contextual" :named("scope"))
    set $P131, param_3944
    unless_null $P131, vivify_2850
    new $P131, "Undef"
  vivify_2850:
    $P132 = $P124."new"($P129, "callmethod" :named("pasttype"), "!make" :named("name"), $P131 :named("node"))
.annotate 'line', 2778
    $P133 = $P118."!make"($P132)
.annotate 'line', 2777
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<next>" :anon :subid("357_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3946
    .param pmc param_3947
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2795
    .lex "self", param_3946
    .lex "$/", param_3947
    set $P118, param_3947
    unless_null $P118, vivify_2851
    new $P118, "Undef"
  vivify_2851:
    $P120 = "control"($P118, "CONTROL_LOOP_NEXT")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<last>" :anon :subid("358_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3949
    .param pmc param_3950
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2796
    .lex "self", param_3949
    .lex "$/", param_3950
    set $P118, param_3950
    unless_null $P118, vivify_2852
    new $P118, "Undef"
  vivify_2852:
    $P120 = "control"($P118, "CONTROL_LOOP_LAST")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<redo>" :anon :subid("359_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3952
    .param pmc param_3953
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2797
    .lex "self", param_3952
    .lex "$/", param_3953
    set $P118, param_3953
    unless_null $P118, vivify_2853
    new $P118, "Undef"
  vivify_2853:
    $P120 = "control"($P118, "CONTROL_LOOP_REDO")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "infix:sym<~~>" :anon :subid("360_1338064451.944") :outer("786_1338064451.944")
    .param pmc param_3955
    .param pmc param_3956
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2799
    .lex "self", param_3955
    .lex "$/", param_3956
.annotate 'line', 2800
    set $P118, param_3956
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P125, param_3956
    unless_null $P125, vivify_2854
    new $P125, "Undef"
  vivify_2854:
    $P126 = $P124."new"("callmethod" :named("pasttype"), "ACCEPTS" :named("name"), $P125 :named("node"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2799
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block3957"  :subid("845_1338064451.944") :outer("368_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2853
    .const 'Sub' $P3987 = "367_1338064451.944" 
    capture_lex $P3987
    .const 'Sub' $P3983 = "366_1338064451.944" 
    capture_lex $P3983
    .const 'Sub' $P3978 = "365_1338064451.944" 
    capture_lex $P3978
    .const 'Sub' $P3974 = "364_1338064451.944" 
    capture_lex $P3974
    .const 'Sub' $P3970 = "363_1338064451.944" 
    capture_lex $P3970
    .const 'Sub' $P3966 = "362_1338064451.944" 
    capture_lex $P3966
    .const 'Sub' $P3961 = "361_1338064451.944" 
    capture_lex $P3961
    .lex "$?PACKAGE", $P3959
    .lex "$?CLASS", $P3960
.annotate 'line', 2887
    .const 'Sub' $P3987 = "367_1338064451.944" 
    newclosure $P3993, $P3987
.annotate 'line', 2853
    .return ($P3993)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<:my>" :anon :subid("361_1338064451.944") :outer("845_1338064451.944")
    .param pmc param_3962
    .param pmc param_3963
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2855
    .lex "self", param_3962
    .lex "$/", param_3963
.annotate 'line', 2856
    new $P103, "Undef"
    set $P3964, $P103
    .lex "$past", $P3964
    set $P3965, param_3963
    unless_null $P3965, vivify_2855
    $P3965 = root_new ['parrot';'Hash']
  vivify_2855:
    set $P104, $P3965["statement"]
    unless_null $P104, vivify_2856
    new $P104, "Undef"
  vivify_2856:
    $P105 = $P104."ast"()
    set $P3964, $P105
.annotate 'line', 2857
    set $P104, param_3963
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "QAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P109, $P3964
    unless_null $P109, vivify_2857
    new $P109, "Undef"
  vivify_2857:
    set $P110, param_3963
    unless_null $P110, vivify_2858
    new $P110, "Undef"
  vivify_2858:
    $P111 = $P108."new"($P109, "pastnode" :named("rxtype"), "declarative" :named("subtype"), $P110 :named("node"))
    $P112 = $P104."!make"($P111)
.annotate 'line', 2855
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<{ }>" :anon :subid("362_1338064451.944") :outer("845_1338064451.944")
    .param pmc param_3967
    .param pmc param_3968
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2861
    .lex "self", param_3967
    .lex "$/", param_3968
.annotate 'line', 2862
    set $P103, param_3968
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3969, param_3968
    unless_null $P3969, vivify_2859
    $P3969 = root_new ['parrot';'Hash']
  vivify_2859:
    set $P108, $P3969["codeblock"]
    unless_null $P108, vivify_2860
    new $P108, "Undef"
  vivify_2860:
    $P109 = $P108."ast"()
    set $P110, param_3968
    unless_null $P110, vivify_2861
    new $P110, "Undef"
  vivify_2861:
    $P111 = $P107."new"($P109, "pastnode" :named("rxtype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2861
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<nqpvar>" :anon :subid("363_1338064451.944") :outer("845_1338064451.944")
    .param pmc param_3971
    .param pmc param_3972
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2866
    .lex "self", param_3971
    .lex "$/", param_3972
.annotate 'line', 2867
    set $P103, param_3972
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Node"]
    set $P3973, param_3972
    unless_null $P3973, vivify_2862
    $P3973 = root_new ['parrot';'Hash']
  vivify_2862:
    set $P112, $P3973["var"]
    unless_null $P112, vivify_2863
    new $P112, "Undef"
  vivify_2863:
    $P113 = $P112."ast"()
    $P114 = $P111."new"("!INTERPOLATE", $P113)
    set $P115, param_3972
    unless_null $P115, vivify_2864
    new $P115, "Undef"
  vivify_2864:
    $P116 = $P107."new"($P114, "subrule" :named("rxtype"), "method" :named("subtype"), $P115 :named("node"))
    $P117 = $P103."!make"($P116)
.annotate 'line', 2866
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<{ }>" :anon :subid("364_1338064451.944") :outer("845_1338064451.944")
    .param pmc param_3975
    .param pmc param_3976
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2871
    .lex "self", param_3975
    .lex "$/", param_3976
.annotate 'line', 2872
    set $P103, param_3976
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Node"]
    set $P3977, param_3976
    unless_null $P3977, vivify_2865
    $P3977 = root_new ['parrot';'Hash']
  vivify_2865:
    set $P112, $P3977["codeblock"]
    unless_null $P112, vivify_2866
    new $P112, "Undef"
  vivify_2866:
    $P113 = $P112."ast"()
    $P114 = $P111."new"("!INTERPOLATE_REGEX", $P113)
    set $P115, param_3976
    unless_null $P115, vivify_2867
    new $P115, "Undef"
  vivify_2867:
    $P116 = $P107."new"($P114, "subrule" :named("rxtype"), "method" :named("subtype"), $P115 :named("node"))
    $P117 = $P103."!make"($P116)
.annotate 'line', 2871
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<?{ }>" :anon :subid("365_1338064451.944") :outer("845_1338064451.944")
    .param pmc param_3979
    .param pmc param_3980
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2876
    .lex "self", param_3979
    .lex "$/", param_3980
.annotate 'line', 2877
    set $P103, param_3980
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3981, param_3980
    unless_null $P3981, vivify_2868
    $P3981 = root_new ['parrot';'Hash']
  vivify_2868:
    set $P108, $P3981["codeblock"]
    unless_null $P108, vivify_2869
    new $P108, "Undef"
  vivify_2869:
    $P109 = $P108."ast"()
.annotate 'line', 2878
    set $P3982, param_3980
    unless_null $P3982, vivify_2870
    $P3982 = root_new ['parrot';'Hash']
  vivify_2870:
    set $P110, $P3982["zw"]
    unless_null $P110, vivify_2871
    new $P110, "Undef"
  vivify_2871:
    set $S100, $P110
    iseq $I100, $S100, "!"
.annotate 'line', 2877
    set $P111, param_3980
    unless_null $P111, vivify_2872
    new $P111, "Undef"
  vivify_2872:
    $P112 = $P107."new"($P109, "zerowidth" :named("subtype"), $I100 :named("negate"), "pastnode" :named("rxtype"), $P111 :named("node"))
    $P113 = $P103."!make"($P112)
.annotate 'line', 2876
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<var>" :anon :subid("366_1338064451.944") :outer("845_1338064451.944")
    .param pmc param_3984
    .param pmc param_3985
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2882
    .lex "self", param_3984
    .lex "$/", param_3985
.annotate 'line', 2883
    set $P103, param_3985
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Node"]
    set $P3986, param_3985
    unless_null $P3986, vivify_2873
    $P3986 = root_new ['parrot';'Hash']
  vivify_2873:
    set $P112, $P3986["var"]
    unless_null $P112, vivify_2874
    new $P112, "Undef"
  vivify_2874:
    $P113 = $P112."ast"()
    $P114 = $P111."new"("!INTERPOLATE_REGEX", $P113)
    set $P115, param_3985
    unless_null $P115, vivify_2875
    new $P115, "Undef"
  vivify_2875:
    $P116 = $P107."new"($P114, "subrule" :named("rxtype"), "method" :named("subtype"), $P115 :named("node"))
    $P117 = $P103."!make"($P116)
.annotate 'line', 2882
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "codeblock" :anon :subid("367_1338064451.944") :outer("845_1338064451.944")
    .param pmc param_3988
    .param pmc param_3989
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2887
    .lex "self", param_3988
    .lex "$/", param_3989
.annotate 'line', 2888
    new $P103, "Undef"
    set $P3990, $P103
    .lex "$block", $P3990
.annotate 'line', 2890
    new $P104, "Undef"
    set $P3991, $P104
    .lex "$past", $P3991
.annotate 'line', 2888
    set $P3992, param_3989
    unless_null $P3992, vivify_2876
    $P3992 = root_new ['parrot';'Hash']
  vivify_2876:
    set $P105, $P3992["block"]
    unless_null $P105, vivify_2877
    new $P105, "Undef"
  vivify_2877:
    $P106 = $P105."ast"()
    set $P3990, $P106
.annotate 'line', 2889
    set $P105, $P3990
    unless_null $P105, vivify_2878
    new $P105, "Undef"
  vivify_2878:
    $P105."blocktype"("immediate")
.annotate 'line', 2891
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Stmts"]
.annotate 'line', 2892
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 2893
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Var"]
    $P117 = $P116."new"("$/" :named("name"))
.annotate 'line', 2894
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
.annotate 'line', 2895
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    $P126 = $P125."new"(unicode:"$\x{a2}" :named("name"))
    $P127 = $P121."new"($P126, "MATCH" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2894
    $P128 = $P112."new"($P117, $P127, "bind_6model" :named("pasttype"))
.annotate 'line', 2892
    set $P129, $P3990
    unless_null $P129, vivify_2879
    new $P129, "Undef"
  vivify_2879:
    $P130 = $P108."new"($P128, $P129)
.annotate 'line', 2891
    set $P3991, $P130
.annotate 'line', 2903
    set $P105, param_3989
    set $P106, $P3991
    unless_null $P106, vivify_2880
    new $P106, "Undef"
  vivify_2880:
    $P107 = $P105."!make"($P106)
.annotate 'line', 2887
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block3994"  :subid("846_1338064451.944") :outer("368_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2908
    .lex "$?PACKAGE", $P3996
    .lex "$?CLASS", $P3997
    .return ()
.end


.HLL "nqp"

.namespace []
.sub "_block4000" :load :anon :subid("847_1338064451.944")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1
    .const '' $P4002 = "368_1338064451.944" 
    $P110 = $P4002()
    .return ($P110)
.end

