# Copyright (C) 2009, The Perl Foundation.

=head1 NAME

NQP::Compiler - NQP compiler

=head1 DESCRIPTION

=cut

.HLL 'nqp'

# Initialize meta-model.
.loadlib "nqp_group"
.loadlib "nqp_ops"
.sub '' :anon :load :init
    nqp_dynop_setup

    .local pmc interp, lexpad, nqplexpad
    interp = getinterp
    lexpad = get_class 'LexPad'
    nqplexpad = get_class 'NQPLexPad'
    interp.'hll_map'(lexpad, nqplexpad)
    
    load_bytecode 'SettingManager.pbc'
    load_bytecode 'nqpmo.pbc'
.end

### .include 'gen/nqp-grammar.pir'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.namespace []
.sub "_block11"  :anon :subid("10_1300057348.719")
.annotate 'line', 0
    get_hll_global $P2379, ["NQP";"Regex"], "_block2378" 
    capture_lex $P2379
    get_hll_global $P14, ["NQP";"Grammar"], "_block13" 
    capture_lex $P14
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 3
    get_hll_global $P14, ["NQP";"Grammar"], "_block13" 
    capture_lex $P14
    $P14()
.annotate 'line', 692
    get_hll_global $P2379, ["NQP";"Regex"], "_block2378" 
    capture_lex $P2379
    $P2481 = $P2379()
.annotate 'line', 1
    .return ($P2481)
    .const 'Sub' $P2483 = "404_1300057348.719" 
    .return ($P2483)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post405") :outer("10_1300057348.719")
.annotate 'line', 0
    .const 'Sub' $P12 = "10_1300057348.719" 
    .local pmc block
    set block, $P12
    nqp_get_sc $P2487, "1300057343.077"
    isnull $I2488, $P2487
    if $I2488, if_2486
    nqp_get_sc_object $P2501, "1300057343.077", 0
    set_hll_global ["NQP"], "Grammar", $P2501
    nqp_get_sc_object $P2502, "1300057343.077", 1
    set_hll_global ["NQP"], "Regex", $P2502
    goto if_2486_end
  if_2486:
    nqp_dynop_setup 
    getinterp $P2489
    get_class $P2490, "LexPad"
    get_class $P2491, "NQPLexPad"
    $P2489."hll_map"($P2490, $P2491)
    load_bytecode "nqpmo.pbc"
    nqp_create_sc $P2492, "1300057343.077"
    .local pmc cur_sc
    set cur_sc, $P2492
    load_bytecode "SettingManager.pbc"
    get_hll_global $P2493, ["HLL"], "SettingManager"
    $P2494 = $P2493."load_setting"("NQPCORE")
    block."set_outer_ctx"($P2494)
    load_bytecode "P6Regex.pbc"
    get_hll_global $P2495, "NQPClassHOW"
    $P2496 = $P2495."new_type"("NQP::Grammar" :named("name"))
    nqp_set_sc_for_object $P2496, cur_sc
    nqp_set_sc_object "1300057343.077", 0, $P2496
    nqp_get_sc_object $P2497, "1300057343.077", 0
    set_hll_global ["NQP"], "Grammar", $P2497
    get_hll_global $P2498, "NQPClassHOW"
    $P2499 = $P2498."new_type"("NQP::Regex" :named("name"))
    nqp_set_sc_for_object $P2499, cur_sc
    nqp_set_sc_object "1300057343.077", 1, $P2499
    nqp_get_sc_object $P2500, "1300057343.077", 1
    set_hll_global ["NQP"], "Regex", $P2500
  if_2486_end:
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block13"  :subid("11_1300057348.719") :outer("10_1300057348.719")
.annotate 'line', 3
    .const 'Sub' $P1660 = "381_1300057348.719" 
    capture_lex $P1660
    .const 'Sub' $P1647 = "380_1300057348.719" 
    capture_lex $P1647
    .const 'Sub' $P1641 = "378_1300057348.719" 
    capture_lex $P1641
    .const 'Sub' $P1635 = "376_1300057348.719" 
    capture_lex $P1635
    .const 'Sub' $P1629 = "374_1300057348.719" 
    capture_lex $P1629
    .const 'Sub' $P1623 = "372_1300057348.719" 
    capture_lex $P1623
    .const 'Sub' $P1611 = "369_1300057348.719" 
    capture_lex $P1611
    .const 'Sub' $P1604 = "367_1300057348.719" 
    capture_lex $P1604
    .const 'Sub' $P1597 = "365_1300057348.719" 
    capture_lex $P1597
    .const 'Sub' $P1590 = "363_1300057348.719" 
    capture_lex $P1590
    .const 'Sub' $P1583 = "361_1300057348.719" 
    capture_lex $P1583
    .const 'Sub' $P1577 = "359_1300057348.719" 
    capture_lex $P1577
    .const 'Sub' $P1570 = "357_1300057348.719" 
    capture_lex $P1570
    .const 'Sub' $P1563 = "355_1300057348.719" 
    capture_lex $P1563
    .const 'Sub' $P1556 = "353_1300057348.719" 
    capture_lex $P1556
    .const 'Sub' $P1549 = "351_1300057348.719" 
    capture_lex $P1549
    .const 'Sub' $P1542 = "349_1300057348.719" 
    capture_lex $P1542
    .const 'Sub' $P1535 = "347_1300057348.719" 
    capture_lex $P1535
    .const 'Sub' $P1528 = "345_1300057348.719" 
    capture_lex $P1528
    .const 'Sub' $P1521 = "343_1300057348.719" 
    capture_lex $P1521
    .const 'Sub' $P1514 = "341_1300057348.719" 
    capture_lex $P1514
    .const 'Sub' $P1507 = "339_1300057348.719" 
    capture_lex $P1507
    .const 'Sub' $P1500 = "337_1300057348.719" 
    capture_lex $P1500
    .const 'Sub' $P1493 = "335_1300057348.719" 
    capture_lex $P1493
    .const 'Sub' $P1486 = "333_1300057348.719" 
    capture_lex $P1486
    .const 'Sub' $P1479 = "331_1300057348.719" 
    capture_lex $P1479
    .const 'Sub' $P1472 = "329_1300057348.719" 
    capture_lex $P1472
    .const 'Sub' $P1465 = "327_1300057348.719" 
    capture_lex $P1465
    .const 'Sub' $P1458 = "325_1300057348.719" 
    capture_lex $P1458
    .const 'Sub' $P1451 = "323_1300057348.719" 
    capture_lex $P1451
    .const 'Sub' $P1444 = "321_1300057348.719" 
    capture_lex $P1444
    .const 'Sub' $P1437 = "319_1300057348.719" 
    capture_lex $P1437
    .const 'Sub' $P1430 = "317_1300057348.719" 
    capture_lex $P1430
    .const 'Sub' $P1423 = "315_1300057348.719" 
    capture_lex $P1423
    .const 'Sub' $P1416 = "313_1300057348.719" 
    capture_lex $P1416
    .const 'Sub' $P1409 = "311_1300057348.719" 
    capture_lex $P1409
    .const 'Sub' $P1402 = "309_1300057348.719" 
    capture_lex $P1402
    .const 'Sub' $P1395 = "307_1300057348.719" 
    capture_lex $P1395
    .const 'Sub' $P1388 = "305_1300057348.719" 
    capture_lex $P1388
    .const 'Sub' $P1381 = "303_1300057348.719" 
    capture_lex $P1381
    .const 'Sub' $P1374 = "301_1300057348.719" 
    capture_lex $P1374
    .const 'Sub' $P1368 = "299_1300057348.719" 
    capture_lex $P1368
    .const 'Sub' $P1361 = "297_1300057348.719" 
    capture_lex $P1361
    .const 'Sub' $P1354 = "295_1300057348.719" 
    capture_lex $P1354
    .const 'Sub' $P1347 = "293_1300057348.719" 
    capture_lex $P1347
    .const 'Sub' $P1340 = "291_1300057348.719" 
    capture_lex $P1340
    .const 'Sub' $P1333 = "289_1300057348.719" 
    capture_lex $P1333
    .const 'Sub' $P1326 = "287_1300057348.719" 
    capture_lex $P1326
    .const 'Sub' $P1319 = "285_1300057348.719" 
    capture_lex $P1319
    .const 'Sub' $P1313 = "283_1300057348.719" 
    capture_lex $P1313
    .const 'Sub' $P1307 = "281_1300057348.719" 
    capture_lex $P1307
    .const 'Sub' $P1302 = "279_1300057348.719" 
    capture_lex $P1302
    .const 'Sub' $P1296 = "277_1300057348.719" 
    capture_lex $P1296
    .const 'Sub' $P1290 = "275_1300057348.719" 
    capture_lex $P1290
    .const 'Sub' $P1285 = "273_1300057348.719" 
    capture_lex $P1285
    .const 'Sub' $P1280 = "271_1300057348.719" 
    capture_lex $P1280
    .const 'Sub' $P1264 = "270_1300057348.719" 
    capture_lex $P1264
    .const 'Sub' $P1255 = "268_1300057348.719" 
    capture_lex $P1255
    .const 'Sub' $P1246 = "266_1300057348.719" 
    capture_lex $P1246
    .const 'Sub' $P1241 = "264_1300057348.719" 
    capture_lex $P1241
    .const 'Sub' $P1236 = "262_1300057348.719" 
    capture_lex $P1236
    .const 'Sub' $P1231 = "260_1300057348.719" 
    capture_lex $P1231
    .const 'Sub' $P1223 = "258_1300057348.719" 
    capture_lex $P1223
    .const 'Sub' $P1215 = "256_1300057348.719" 
    capture_lex $P1215
    .const 'Sub' $P1210 = "254_1300057348.719" 
    capture_lex $P1210
    .const 'Sub' $P1205 = "252_1300057348.719" 
    capture_lex $P1205
    .const 'Sub' $P1200 = "250_1300057348.719" 
    capture_lex $P1200
    .const 'Sub' $P1194 = "248_1300057348.719" 
    capture_lex $P1194
    .const 'Sub' $P1188 = "246_1300057348.719" 
    capture_lex $P1188
    .const 'Sub' $P1182 = "244_1300057348.719" 
    capture_lex $P1182
    .const 'Sub' $P1176 = "242_1300057348.719" 
    capture_lex $P1176
    .const 'Sub' $P1170 = "240_1300057348.719" 
    capture_lex $P1170
    .const 'Sub' $P1165 = "238_1300057348.719" 
    capture_lex $P1165
    .const 'Sub' $P1160 = "236_1300057348.719" 
    capture_lex $P1160
    .const 'Sub' $P1146 = "232_1300057348.719" 
    capture_lex $P1146
    .const 'Sub' $P1138 = "230_1300057348.719" 
    capture_lex $P1138
    .const 'Sub' $P1132 = "228_1300057348.719" 
    capture_lex $P1132
    .const 'Sub' $P1125 = "226_1300057348.719" 
    capture_lex $P1125
    .const 'Sub' $P1119 = "224_1300057348.719" 
    capture_lex $P1119
    .const 'Sub' $P1105 = "221_1300057348.719" 
    capture_lex $P1105
    .const 'Sub' $P1097 = "219_1300057348.719" 
    capture_lex $P1097
    .const 'Sub' $P1089 = "217_1300057348.719" 
    capture_lex $P1089
    .const 'Sub' $P1083 = "215_1300057348.719" 
    capture_lex $P1083
    .const 'Sub' $P1077 = "213_1300057348.719" 
    capture_lex $P1077
    .const 'Sub' $P1061 = "209_1300057348.719" 
    capture_lex $P1061
    .const 'Sub' $P1020 = "207_1300057348.719" 
    capture_lex $P1020
    .const 'Sub' $P1009 = "205_1300057348.719" 
    capture_lex $P1009
    .const 'Sub' $P995 = "201_1300057348.719" 
    capture_lex $P995
    .const 'Sub' $P986 = "199_1300057348.719" 
    capture_lex $P986
    .const 'Sub' $P980 = "197_1300057348.719" 
    capture_lex $P980
    .const 'Sub' $P970 = "195_1300057348.719" 
    capture_lex $P970
    .const 'Sub' $P955 = "193_1300057348.719" 
    capture_lex $P955
    .const 'Sub' $P941 = "190_1300057348.719" 
    capture_lex $P941
    .const 'Sub' $P933 = "188_1300057348.719" 
    capture_lex $P933
    .const 'Sub' $P923 = "186_1300057348.719" 
    capture_lex $P923
    .const 'Sub' $P913 = "184_1300057348.719" 
    capture_lex $P913
    .const 'Sub' $P894 = "179_1300057348.719" 
    capture_lex $P894
    .const 'Sub' $P850 = "176_1300057348.719" 
    capture_lex $P850
    .const 'Sub' $P816 = "174_1300057348.719" 
    capture_lex $P816
    .const 'Sub' $P809 = "172_1300057348.719" 
    capture_lex $P809
    .const 'Sub' $P802 = "170_1300057348.719" 
    capture_lex $P802
    .const 'Sub' $P785 = "166_1300057348.719" 
    capture_lex $P785
    .const 'Sub' $P777 = "164_1300057348.719" 
    capture_lex $P777
    .const 'Sub' $P771 = "162_1300057348.719" 
    capture_lex $P771
    .const 'Sub' $P755 = "160_1300057348.719" 
    capture_lex $P755
    .const 'Sub' $P748 = "158_1300057348.719" 
    capture_lex $P748
    .const 'Sub' $P741 = "156_1300057348.719" 
    capture_lex $P741
    .const 'Sub' $P734 = "154_1300057348.719" 
    capture_lex $P734
    .const 'Sub' $P656 = "149_1300057348.719" 
    capture_lex $P656
    .const 'Sub' $P644 = "147_1300057348.719" 
    capture_lex $P644
    .const 'Sub' $P632 = "145_1300057348.719" 
    capture_lex $P632
    .const 'Sub' $P620 = "143_1300057348.719" 
    capture_lex $P620
    .const 'Sub' $P608 = "141_1300057348.719" 
    capture_lex $P608
    .const 'Sub' $P596 = "139_1300057348.719" 
    capture_lex $P596
    .const 'Sub' $P584 = "137_1300057348.719" 
    capture_lex $P584
    .const 'Sub' $P573 = "133_1300057348.719" 
    capture_lex $P573
    .const 'Sub' $P568 = "131_1300057348.719" 
    capture_lex $P568
    .const 'Sub' $P556 = "129_1300057348.719" 
    capture_lex $P556
    .const 'Sub' $P544 = "127_1300057348.719" 
    capture_lex $P544
    .const 'Sub' $P537 = "125_1300057348.719" 
    capture_lex $P537
    .const 'Sub' $P532 = "123_1300057348.719" 
    capture_lex $P532
    .const 'Sub' $P526 = "121_1300057348.719" 
    capture_lex $P526
    .const 'Sub' $P520 = "119_1300057348.719" 
    capture_lex $P520
    .const 'Sub' $P505 = "115_1300057348.719" 
    capture_lex $P505
    .const 'Sub' $P499 = "113_1300057348.719" 
    capture_lex $P499
    .const 'Sub' $P493 = "111_1300057348.719" 
    capture_lex $P493
    .const 'Sub' $P487 = "109_1300057348.719" 
    capture_lex $P487
    .const 'Sub' $P481 = "107_1300057348.719" 
    capture_lex $P481
    .const 'Sub' $P475 = "105_1300057348.719" 
    capture_lex $P475
    .const 'Sub' $P469 = "103_1300057348.719" 
    capture_lex $P469
    .const 'Sub' $P460 = "101_1300057348.719" 
    capture_lex $P460
    .const 'Sub' $P451 = "99_1300057348.719" 
    capture_lex $P451
    .const 'Sub' $P442 = "97_1300057348.719" 
    capture_lex $P442
    .const 'Sub' $P427 = "93_1300057348.719" 
    capture_lex $P427
    .const 'Sub' $P418 = "91_1300057348.719" 
    capture_lex $P418
    .const 'Sub' $P406 = "87_1300057348.719" 
    capture_lex $P406
    .const 'Sub' $P399 = "85_1300057348.719" 
    capture_lex $P399
    .const 'Sub' $P392 = "83_1300057348.719" 
    capture_lex $P392
    .const 'Sub' $P378 = "79_1300057348.719" 
    capture_lex $P378
    .const 'Sub' $P370 = "77_1300057348.719" 
    capture_lex $P370
    .const 'Sub' $P362 = "75_1300057348.719" 
    capture_lex $P362
    .const 'Sub' $P342 = "73_1300057348.719" 
    capture_lex $P342
    .const 'Sub' $P333 = "71_1300057348.719" 
    capture_lex $P333
    .const 'Sub' $P315 = "68_1300057348.719" 
    capture_lex $P315
    .const 'Sub' $P297 = "66_1300057348.719" 
    capture_lex $P297
    .const 'Sub' $P289 = "64_1300057348.719" 
    capture_lex $P289
    .const 'Sub' $P278 = "60_1300057348.719" 
    capture_lex $P278
    .const 'Sub' $P273 = "58_1300057348.719" 
    capture_lex $P273
    .const 'Sub' $P262 = "54_1300057348.719" 
    capture_lex $P262
    .const 'Sub' $P257 = "52_1300057348.719" 
    capture_lex $P257
    .const 'Sub' $P252 = "50_1300057348.719" 
    capture_lex $P252
    .const 'Sub' $P247 = "48_1300057348.719" 
    capture_lex $P247
    .const 'Sub' $P237 = "46_1300057348.719" 
    capture_lex $P237
    .const 'Sub' $P230 = "44_1300057348.719" 
    capture_lex $P230
    .const 'Sub' $P224 = "42_1300057348.719" 
    capture_lex $P224
    .const 'Sub' $P216 = "40_1300057348.719" 
    capture_lex $P216
    .const 'Sub' $P210 = "38_1300057348.719" 
    capture_lex $P210
    .const 'Sub' $P204 = "36_1300057348.719" 
    capture_lex $P204
    .const 'Sub' $P189 = "33_1300057348.719" 
    capture_lex $P189
    .const 'Sub' $P175 = "31_1300057348.719" 
    capture_lex $P175
    .const 'Sub' $P164 = "29_1300057348.719" 
    capture_lex $P164
    .const 'Sub' $P125 = "26_1300057348.719" 
    capture_lex $P125
    .const 'Sub' $P110 = "23_1300057348.719" 
    capture_lex $P110
    .const 'Sub' $P99 = "21_1300057348.719" 
    capture_lex $P99
    .const 'Sub' $P87 = "19_1300057348.719" 
    capture_lex $P87
    .const 'Sub' $P79 = "17_1300057348.719" 
    capture_lex $P79
    .const 'Sub' $P72 = "15_1300057348.719" 
    capture_lex $P72
    .const 'Sub' $P65 = "13_1300057348.719" 
    capture_lex $P65
    .const 'Sub' $P16 = "12_1300057348.719" 
    capture_lex $P16
    get_global $P15, "$?CLASS"
.annotate 'line', 4
    .const 'Sub' $P1264 = "270_1300057348.719" 
    capture_lex $P1264
    $P1264()
.annotate 'line', 686
    .const 'Sub' $P1647 = "380_1300057348.719" 
    newclosure $P1658, $P1647
.annotate 'line', 3
    .return ($P1658)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "" :load :init :subid("post406") :outer("11_1300057348.719")
.annotate 'line', 3
    get_hll_global $P14, ["NQP";"Grammar"], "_block13" 
    .local pmc block
    set block, $P14
    .const 'Sub' $P1660 = "381_1300057348.719" 
    capture_lex $P1660
    $P1660()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1659"  :anon :subid("381_1300057348.719") :outer("11_1300057348.719")
.annotate 'line', 3
    nqp_get_sc_object $P1661, "1300057343.077", 0
    .local pmc type_obj
    set type_obj, $P1661
    set_global "$?CLASS", type_obj
    get_how $P1662, type_obj
    .const 'Sub' $P1663 = "12_1300057348.719" 
    $P1662."add_method"(type_obj, "TOP", $P1663)
    get_how $P1664, type_obj
    .const 'Sub' $P1665 = "13_1300057348.719" 
    $P1664."add_method"(type_obj, "identifier", $P1665)
    get_how $P1666, type_obj
    get_global $P1667, "!PREFIX__identifier"
    $P1666."add_method"(type_obj, "!PREFIX__identifier", $P1667)
    get_how $P1668, type_obj
    .const 'Sub' $P1669 = "15_1300057348.719" 
    $P1668."add_method"(type_obj, "name", $P1669)
    get_how $P1670, type_obj
    get_global $P1671, "!PREFIX__name"
    $P1670."add_method"(type_obj, "!PREFIX__name", $P1671)
    get_how $P1672, type_obj
    .const 'Sub' $P1673 = "17_1300057348.719" 
    $P1672."add_method"(type_obj, "deflongname", $P1673)
    get_how $P1674, type_obj
    get_global $P1675, "!PREFIX__deflongname"
    $P1674."add_method"(type_obj, "!PREFIX__deflongname", $P1675)
    get_how $P1676, type_obj
    .const 'Sub' $P1677 = "19_1300057348.719" 
    $P1676."add_method"(type_obj, "ENDSTMT", $P1677)
    get_how $P1678, type_obj
    get_global $P1679, "!PREFIX__ENDSTMT"
    $P1678."add_method"(type_obj, "!PREFIX__ENDSTMT", $P1679)
    get_how $P1680, type_obj
    .const 'Sub' $P1681 = "21_1300057348.719" 
    $P1680."add_method"(type_obj, "ws", $P1681)
    get_how $P1682, type_obj
    get_global $P1683, "!PREFIX__ws"
    $P1682."add_method"(type_obj, "!PREFIX__ws", $P1683)
    get_how $P1684, type_obj
    .const 'Sub' $P1685 = "23_1300057348.719" 
    $P1684."add_method"(type_obj, "unv", $P1685)
    get_how $P1686, type_obj
    get_global $P1687, "!PREFIX__unv"
    $P1686."add_method"(type_obj, "!PREFIX__unv", $P1687)
    get_how $P1688, type_obj
    .const 'Sub' $P1689 = "26_1300057348.719" 
    $P1688."add_method"(type_obj, "pod_comment", $P1689)
    get_how $P1690, type_obj
    get_global $P1691, "!PREFIX__pod_comment"
    $P1690."add_method"(type_obj, "!PREFIX__pod_comment", $P1691)
    get_how $P1692, type_obj
    .const 'Sub' $P1693 = "29_1300057348.719" 
    $P1692."add_method"(type_obj, "comp_unit", $P1693)
    get_how $P1694, type_obj
    get_global $P1695, "!PREFIX__comp_unit"
    $P1694."add_method"(type_obj, "!PREFIX__comp_unit", $P1695)
    get_how $P1696, type_obj
    .const 'Sub' $P1697 = "31_1300057348.719" 
    $P1696."add_method"(type_obj, "statementlist", $P1697)
    get_how $P1698, type_obj
    get_global $P1699, "!PREFIX__statementlist"
    $P1698."add_method"(type_obj, "!PREFIX__statementlist", $P1699)
    get_how $P1700, type_obj
    .const 'Sub' $P1701 = "33_1300057348.719" 
    $P1700."add_method"(type_obj, "statement", $P1701)
    get_how $P1702, type_obj
    get_global $P1703, "!PREFIX__statement"
    $P1702."add_method"(type_obj, "!PREFIX__statement", $P1703)
    get_how $P1704, type_obj
    .const 'Sub' $P1705 = "36_1300057348.719" 
    $P1704."add_method"(type_obj, "eat_terminator", $P1705)
    get_how $P1706, type_obj
    get_global $P1707, "!PREFIX__eat_terminator"
    $P1706."add_method"(type_obj, "!PREFIX__eat_terminator", $P1707)
    get_how $P1708, type_obj
    .const 'Sub' $P1709 = "38_1300057348.719" 
    $P1708."add_method"(type_obj, "xblock", $P1709)
    get_how $P1710, type_obj
    get_global $P1711, "!PREFIX__xblock"
    $P1710."add_method"(type_obj, "!PREFIX__xblock", $P1711)
    get_how $P1712, type_obj
    .const 'Sub' $P1713 = "40_1300057348.719" 
    $P1712."add_method"(type_obj, "pblock", $P1713)
    get_how $P1714, type_obj
    get_global $P1715, "!PREFIX__pblock"
    $P1714."add_method"(type_obj, "!PREFIX__pblock", $P1715)
    get_how $P1716, type_obj
    .const 'Sub' $P1717 = "42_1300057348.719" 
    $P1716."add_method"(type_obj, "lambda", $P1717)
    get_how $P1718, type_obj
    get_global $P1719, "!PREFIX__lambda"
    $P1718."add_method"(type_obj, "!PREFIX__lambda", $P1719)
    get_how $P1720, type_obj
    .const 'Sub' $P1721 = "44_1300057348.719" 
    $P1720."add_method"(type_obj, "block", $P1721)
    get_how $P1722, type_obj
    get_global $P1723, "!PREFIX__block"
    $P1722."add_method"(type_obj, "!PREFIX__block", $P1723)
    get_how $P1724, type_obj
    .const 'Sub' $P1725 = "46_1300057348.719" 
    $P1724."add_method"(type_obj, "blockoid", $P1725)
    get_how $P1726, type_obj
    get_global $P1727, "!PREFIX__blockoid"
    $P1726."add_method"(type_obj, "!PREFIX__blockoid", $P1727)
    get_how $P1728, type_obj
    .const 'Sub' $P1729 = "48_1300057348.719" 
    $P1728."add_method"(type_obj, "newpad", $P1729)
    get_how $P1730, type_obj
    get_global $P1731, "!PREFIX__newpad"
    $P1730."add_method"(type_obj, "!PREFIX__newpad", $P1731)
    get_how $P1732, type_obj
    .const 'Sub' $P1733 = "50_1300057348.719" 
    $P1732."add_method"(type_obj, "outerctx", $P1733)
    get_how $P1734, type_obj
    get_global $P1735, "!PREFIX__outerctx"
    $P1734."add_method"(type_obj, "!PREFIX__outerctx", $P1735)
    get_how $P1736, type_obj
    .const 'Sub' $P1737 = "52_1300057348.719" 
    $P1736."add_method"(type_obj, "finishpad", $P1737)
    get_how $P1738, type_obj
    get_global $P1739, "!PREFIX__finishpad"
    $P1738."add_method"(type_obj, "!PREFIX__finishpad", $P1739)
    get_how $P1740, type_obj
    .const 'Sub' $P1741 = "54_1300057348.719" 
    $P1740."add_method"(type_obj, "you_are_here", $P1741)
    get_how $P1742, type_obj
    get_global $P1743, "!PREFIX__you_are_here"
    $P1742."add_method"(type_obj, "!PREFIX__you_are_here", $P1743)
    get_how $P1744, type_obj
    .const 'Sub' $P1745 = "56_1300057348.719" 
    $P1744."add_method"(type_obj, "terminator", $P1745)
    get_how $P1746, type_obj
    .const 'Sub' $P1747 = "57_1300057348.719" 
    $P1746."add_method"(type_obj, "!PREFIX__terminator", $P1747)
    get_how $P1748, type_obj
    .const 'Sub' $P1749 = "58_1300057348.719" 
    $P1748."add_method"(type_obj, "terminator:sym<;>", $P1749)
    get_how $P1750, type_obj
    get_global $P1751, "!PREFIX__terminator:sym<;>"
    $P1750."add_method"(type_obj, "!PREFIX__terminator:sym<;>", $P1751)
    get_how $P1752, type_obj
    .const 'Sub' $P1753 = "60_1300057348.719" 
    $P1752."add_method"(type_obj, "terminator:sym<}>", $P1753)
    get_how $P1754, type_obj
    get_global $P1755, "!PREFIX__terminator:sym<}>"
    $P1754."add_method"(type_obj, "!PREFIX__terminator:sym<}>", $P1755)
    get_how $P1756, type_obj
    .const 'Sub' $P1757 = "62_1300057348.719" 
    $P1756."add_method"(type_obj, "statement_control", $P1757)
    get_how $P1758, type_obj
    .const 'Sub' $P1759 = "63_1300057348.719" 
    $P1758."add_method"(type_obj, "!PREFIX__statement_control", $P1759)
    get_how $P1760, type_obj
    .const 'Sub' $P1761 = "64_1300057348.719" 
    $P1760."add_method"(type_obj, "statement_control:sym<use>", $P1761)
    get_how $P1762, type_obj
    get_global $P1763, "!PREFIX__statement_control:sym<use>"
    $P1762."add_method"(type_obj, "!PREFIX__statement_control:sym<use>", $P1763)
    get_how $P1764, type_obj
    .const 'Sub' $P1765 = "66_1300057348.719" 
    $P1764."add_method"(type_obj, "statement_control:sym<if>", $P1765)
    get_how $P1766, type_obj
    get_global $P1767, "!PREFIX__statement_control:sym<if>"
    $P1766."add_method"(type_obj, "!PREFIX__statement_control:sym<if>", $P1767)
    get_how $P1768, type_obj
    .const 'Sub' $P1769 = "68_1300057348.719" 
    $P1768."add_method"(type_obj, "statement_control:sym<unless>", $P1769)
    get_how $P1770, type_obj
    get_global $P1771, "!PREFIX__statement_control:sym<unless>"
    $P1770."add_method"(type_obj, "!PREFIX__statement_control:sym<unless>", $P1771)
    get_how $P1772, type_obj
    .const 'Sub' $P1773 = "71_1300057348.719" 
    $P1772."add_method"(type_obj, "statement_control:sym<while>", $P1773)
    get_how $P1774, type_obj
    get_global $P1775, "!PREFIX__statement_control:sym<while>"
    $P1774."add_method"(type_obj, "!PREFIX__statement_control:sym<while>", $P1775)
    get_how $P1776, type_obj
    .const 'Sub' $P1777 = "73_1300057348.719" 
    $P1776."add_method"(type_obj, "statement_control:sym<repeat>", $P1777)
    get_how $P1778, type_obj
    get_global $P1779, "!PREFIX__statement_control:sym<repeat>"
    $P1778."add_method"(type_obj, "!PREFIX__statement_control:sym<repeat>", $P1779)
    get_how $P1780, type_obj
    .const 'Sub' $P1781 = "75_1300057348.719" 
    $P1780."add_method"(type_obj, "statement_control:sym<for>", $P1781)
    get_how $P1782, type_obj
    get_global $P1783, "!PREFIX__statement_control:sym<for>"
    $P1782."add_method"(type_obj, "!PREFIX__statement_control:sym<for>", $P1783)
    get_how $P1784, type_obj
    .const 'Sub' $P1785 = "77_1300057348.719" 
    $P1784."add_method"(type_obj, "statement_control:sym<CATCH>", $P1785)
    get_how $P1786, type_obj
    get_global $P1787, "!PREFIX__statement_control:sym<CATCH>"
    $P1786."add_method"(type_obj, "!PREFIX__statement_control:sym<CATCH>", $P1787)
    get_how $P1788, type_obj
    .const 'Sub' $P1789 = "79_1300057348.719" 
    $P1788."add_method"(type_obj, "statement_control:sym<CONTROL>", $P1789)
    get_how $P1790, type_obj
    get_global $P1791, "!PREFIX__statement_control:sym<CONTROL>"
    $P1790."add_method"(type_obj, "!PREFIX__statement_control:sym<CONTROL>", $P1791)
    get_how $P1792, type_obj
    .const 'Sub' $P1793 = "81_1300057348.719" 
    $P1792."add_method"(type_obj, "statement_prefix", $P1793)
    get_how $P1794, type_obj
    .const 'Sub' $P1795 = "82_1300057348.719" 
    $P1794."add_method"(type_obj, "!PREFIX__statement_prefix", $P1795)
    get_how $P1796, type_obj
    .const 'Sub' $P1797 = "83_1300057348.719" 
    $P1796."add_method"(type_obj, "statement_prefix:sym<INIT>", $P1797)
    get_how $P1798, type_obj
    get_global $P1799, "!PREFIX__statement_prefix:sym<INIT>"
    $P1798."add_method"(type_obj, "!PREFIX__statement_prefix:sym<INIT>", $P1799)
    get_how $P1800, type_obj
    .const 'Sub' $P1801 = "85_1300057348.719" 
    $P1800."add_method"(type_obj, "statement_prefix:sym<try>", $P1801)
    get_how $P1802, type_obj
    get_global $P1803, "!PREFIX__statement_prefix:sym<try>"
    $P1802."add_method"(type_obj, "!PREFIX__statement_prefix:sym<try>", $P1803)
    get_how $P1804, type_obj
    .const 'Sub' $P1805 = "87_1300057348.719" 
    $P1804."add_method"(type_obj, "blorst", $P1805)
    get_how $P1806, type_obj
    get_global $P1807, "!PREFIX__blorst"
    $P1806."add_method"(type_obj, "!PREFIX__blorst", $P1807)
    get_how $P1808, type_obj
    .const 'Sub' $P1809 = "89_1300057348.719" 
    $P1808."add_method"(type_obj, "statement_mod_cond", $P1809)
    get_how $P1810, type_obj
    .const 'Sub' $P1811 = "90_1300057348.719" 
    $P1810."add_method"(type_obj, "!PREFIX__statement_mod_cond", $P1811)
    get_how $P1812, type_obj
    .const 'Sub' $P1813 = "91_1300057348.719" 
    $P1812."add_method"(type_obj, "statement_mod_cond:sym<if>", $P1813)
    get_how $P1814, type_obj
    get_global $P1815, "!PREFIX__statement_mod_cond:sym<if>"
    $P1814."add_method"(type_obj, "!PREFIX__statement_mod_cond:sym<if>", $P1815)
    get_how $P1816, type_obj
    .const 'Sub' $P1817 = "93_1300057348.719" 
    $P1816."add_method"(type_obj, "statement_mod_cond:sym<unless>", $P1817)
    get_how $P1818, type_obj
    get_global $P1819, "!PREFIX__statement_mod_cond:sym<unless>"
    $P1818."add_method"(type_obj, "!PREFIX__statement_mod_cond:sym<unless>", $P1819)
    get_how $P1820, type_obj
    .const 'Sub' $P1821 = "95_1300057348.719" 
    $P1820."add_method"(type_obj, "statement_mod_loop", $P1821)
    get_how $P1822, type_obj
    .const 'Sub' $P1823 = "96_1300057348.719" 
    $P1822."add_method"(type_obj, "!PREFIX__statement_mod_loop", $P1823)
    get_how $P1824, type_obj
    .const 'Sub' $P1825 = "97_1300057348.719" 
    $P1824."add_method"(type_obj, "statement_mod_loop:sym<while>", $P1825)
    get_how $P1826, type_obj
    get_global $P1827, "!PREFIX__statement_mod_loop:sym<while>"
    $P1826."add_method"(type_obj, "!PREFIX__statement_mod_loop:sym<while>", $P1827)
    get_how $P1828, type_obj
    .const 'Sub' $P1829 = "99_1300057348.719" 
    $P1828."add_method"(type_obj, "statement_mod_loop:sym<until>", $P1829)
    get_how $P1830, type_obj
    get_global $P1831, "!PREFIX__statement_mod_loop:sym<until>"
    $P1830."add_method"(type_obj, "!PREFIX__statement_mod_loop:sym<until>", $P1831)
    get_how $P1832, type_obj
    .const 'Sub' $P1833 = "101_1300057348.719" 
    $P1832."add_method"(type_obj, "statement_mod_loop:sym<for>", $P1833)
    get_how $P1834, type_obj
    get_global $P1835, "!PREFIX__statement_mod_loop:sym<for>"
    $P1834."add_method"(type_obj, "!PREFIX__statement_mod_loop:sym<for>", $P1835)
    get_how $P1836, type_obj
    .const 'Sub' $P1837 = "103_1300057348.719" 
    $P1836."add_method"(type_obj, "term:sym<fatarrow>", $P1837)
    get_how $P1838, type_obj
    get_global $P1839, "!PREFIX__term:sym<fatarrow>"
    $P1838."add_method"(type_obj, "!PREFIX__term:sym<fatarrow>", $P1839)
    get_how $P1840, type_obj
    .const 'Sub' $P1841 = "105_1300057348.719" 
    $P1840."add_method"(type_obj, "term:sym<colonpair>", $P1841)
    get_how $P1842, type_obj
    get_global $P1843, "!PREFIX__term:sym<colonpair>"
    $P1842."add_method"(type_obj, "!PREFIX__term:sym<colonpair>", $P1843)
    get_how $P1844, type_obj
    .const 'Sub' $P1845 = "107_1300057348.719" 
    $P1844."add_method"(type_obj, "term:sym<variable>", $P1845)
    get_how $P1846, type_obj
    get_global $P1847, "!PREFIX__term:sym<variable>"
    $P1846."add_method"(type_obj, "!PREFIX__term:sym<variable>", $P1847)
    get_how $P1848, type_obj
    .const 'Sub' $P1849 = "109_1300057348.719" 
    $P1848."add_method"(type_obj, "term:sym<package_declarator>", $P1849)
    get_how $P1850, type_obj
    get_global $P1851, "!PREFIX__term:sym<package_declarator>"
    $P1850."add_method"(type_obj, "!PREFIX__term:sym<package_declarator>", $P1851)
    get_how $P1852, type_obj
    .const 'Sub' $P1853 = "111_1300057348.719" 
    $P1852."add_method"(type_obj, "term:sym<scope_declarator>", $P1853)
    get_how $P1854, type_obj
    get_global $P1855, "!PREFIX__term:sym<scope_declarator>"
    $P1854."add_method"(type_obj, "!PREFIX__term:sym<scope_declarator>", $P1855)
    get_how $P1856, type_obj
    .const 'Sub' $P1857 = "113_1300057348.719" 
    $P1856."add_method"(type_obj, "term:sym<routine_declarator>", $P1857)
    get_how $P1858, type_obj
    get_global $P1859, "!PREFIX__term:sym<routine_declarator>"
    $P1858."add_method"(type_obj, "!PREFIX__term:sym<routine_declarator>", $P1859)
    get_how $P1860, type_obj
    .const 'Sub' $P1861 = "115_1300057348.719" 
    $P1860."add_method"(type_obj, "term:sym<multi_declarator>", $P1861)
    get_how $P1862, type_obj
    get_global $P1863, "!PREFIX__term:sym<multi_declarator>"
    $P1862."add_method"(type_obj, "!PREFIX__term:sym<multi_declarator>", $P1863)
    get_how $P1864, type_obj
    .const 'Sub' $P1865 = "119_1300057348.719" 
    $P1864."add_method"(type_obj, "term:sym<regex_declarator>", $P1865)
    get_how $P1866, type_obj
    get_global $P1867, "!PREFIX__term:sym<regex_declarator>"
    $P1866."add_method"(type_obj, "!PREFIX__term:sym<regex_declarator>", $P1867)
    get_how $P1868, type_obj
    .const 'Sub' $P1869 = "121_1300057348.719" 
    $P1868."add_method"(type_obj, "term:sym<statement_prefix>", $P1869)
    get_how $P1870, type_obj
    get_global $P1871, "!PREFIX__term:sym<statement_prefix>"
    $P1870."add_method"(type_obj, "!PREFIX__term:sym<statement_prefix>", $P1871)
    get_how $P1872, type_obj
    .const 'Sub' $P1873 = "123_1300057348.719" 
    $P1872."add_method"(type_obj, "term:sym<lambda>", $P1873)
    get_how $P1874, type_obj
    get_global $P1875, "!PREFIX__term:sym<lambda>"
    $P1874."add_method"(type_obj, "!PREFIX__term:sym<lambda>", $P1875)
    get_how $P1876, type_obj
    .const 'Sub' $P1877 = "125_1300057348.719" 
    $P1876."add_method"(type_obj, "fatarrow", $P1877)
    get_how $P1878, type_obj
    get_global $P1879, "!PREFIX__fatarrow"
    $P1878."add_method"(type_obj, "!PREFIX__fatarrow", $P1879)
    get_how $P1880, type_obj
    .const 'Sub' $P1881 = "127_1300057348.719" 
    $P1880."add_method"(type_obj, "colonpair", $P1881)
    get_how $P1882, type_obj
    get_global $P1883, "!PREFIX__colonpair"
    $P1882."add_method"(type_obj, "!PREFIX__colonpair", $P1883)
    get_how $P1884, type_obj
    .const 'Sub' $P1885 = "129_1300057348.719" 
    $P1884."add_method"(type_obj, "variable", $P1885)
    get_how $P1886, type_obj
    get_global $P1887, "!PREFIX__variable"
    $P1886."add_method"(type_obj, "!PREFIX__variable", $P1887)
    get_how $P1888, type_obj
    .const 'Sub' $P1889 = "131_1300057348.719" 
    $P1888."add_method"(type_obj, "sigil", $P1889)
    get_how $P1890, type_obj
    get_global $P1891, "!PREFIX__sigil"
    $P1890."add_method"(type_obj, "!PREFIX__sigil", $P1891)
    get_how $P1892, type_obj
    .const 'Sub' $P1893 = "133_1300057348.719" 
    $P1892."add_method"(type_obj, "twigil", $P1893)
    get_how $P1894, type_obj
    get_global $P1895, "!PREFIX__twigil"
    $P1894."add_method"(type_obj, "!PREFIX__twigil", $P1895)
    get_how $P1896, type_obj
    .const 'Sub' $P1897 = "135_1300057348.719" 
    $P1896."add_method"(type_obj, "package_declarator", $P1897)
    get_how $P1898, type_obj
    .const 'Sub' $P1899 = "136_1300057348.719" 
    $P1898."add_method"(type_obj, "!PREFIX__package_declarator", $P1899)
    get_how $P1900, type_obj
    .const 'Sub' $P1901 = "137_1300057348.719" 
    $P1900."add_method"(type_obj, "package_declarator:sym<module>", $P1901)
    get_how $P1902, type_obj
    get_global $P1903, "!PREFIX__package_declarator:sym<module>"
    $P1902."add_method"(type_obj, "!PREFIX__package_declarator:sym<module>", $P1903)
    get_how $P1904, type_obj
    .const 'Sub' $P1905 = "139_1300057348.719" 
    $P1904."add_method"(type_obj, "package_declarator:sym<knowhow>", $P1905)
    get_how $P1906, type_obj
    get_global $P1907, "!PREFIX__package_declarator:sym<knowhow>"
    $P1906."add_method"(type_obj, "!PREFIX__package_declarator:sym<knowhow>", $P1907)
    get_how $P1908, type_obj
    .const 'Sub' $P1909 = "141_1300057348.719" 
    $P1908."add_method"(type_obj, "package_declarator:sym<class>", $P1909)
    get_how $P1910, type_obj
    get_global $P1911, "!PREFIX__package_declarator:sym<class>"
    $P1910."add_method"(type_obj, "!PREFIX__package_declarator:sym<class>", $P1911)
    get_how $P1912, type_obj
    .const 'Sub' $P1913 = "143_1300057348.719" 
    $P1912."add_method"(type_obj, "package_declarator:sym<grammar>", $P1913)
    get_how $P1914, type_obj
    get_global $P1915, "!PREFIX__package_declarator:sym<grammar>"
    $P1914."add_method"(type_obj, "!PREFIX__package_declarator:sym<grammar>", $P1915)
    get_how $P1916, type_obj
    .const 'Sub' $P1917 = "145_1300057348.719" 
    $P1916."add_method"(type_obj, "package_declarator:sym<role>", $P1917)
    get_how $P1918, type_obj
    get_global $P1919, "!PREFIX__package_declarator:sym<role>"
    $P1918."add_method"(type_obj, "!PREFIX__package_declarator:sym<role>", $P1919)
    get_how $P1920, type_obj
    .const 'Sub' $P1921 = "147_1300057348.719" 
    $P1920."add_method"(type_obj, "package_declarator:sym<native>", $P1921)
    get_how $P1922, type_obj
    get_global $P1923, "!PREFIX__package_declarator:sym<native>"
    $P1922."add_method"(type_obj, "!PREFIX__package_declarator:sym<native>", $P1923)
    get_how $P1924, type_obj
    .const 'Sub' $P1925 = "149_1300057348.719" 
    $P1924."add_method"(type_obj, "package_def", $P1925)
    get_how $P1926, type_obj
    get_global $P1927, "!PREFIX__package_def"
    $P1926."add_method"(type_obj, "!PREFIX__package_def", $P1927)
    get_how $P1928, type_obj
    .const 'Sub' $P1929 = "152_1300057348.719" 
    $P1928."add_method"(type_obj, "scope_declarator", $P1929)
    get_how $P1930, type_obj
    .const 'Sub' $P1931 = "153_1300057348.719" 
    $P1930."add_method"(type_obj, "!PREFIX__scope_declarator", $P1931)
    get_how $P1932, type_obj
    .const 'Sub' $P1933 = "154_1300057348.719" 
    $P1932."add_method"(type_obj, "scope_declarator:sym<my>", $P1933)
    get_how $P1934, type_obj
    get_global $P1935, "!PREFIX__scope_declarator:sym<my>"
    $P1934."add_method"(type_obj, "!PREFIX__scope_declarator:sym<my>", $P1935)
    get_how $P1936, type_obj
    .const 'Sub' $P1937 = "156_1300057348.719" 
    $P1936."add_method"(type_obj, "scope_declarator:sym<our>", $P1937)
    get_how $P1938, type_obj
    get_global $P1939, "!PREFIX__scope_declarator:sym<our>"
    $P1938."add_method"(type_obj, "!PREFIX__scope_declarator:sym<our>", $P1939)
    get_how $P1940, type_obj
    .const 'Sub' $P1941 = "158_1300057348.719" 
    $P1940."add_method"(type_obj, "scope_declarator:sym<has>", $P1941)
    get_how $P1942, type_obj
    get_global $P1943, "!PREFIX__scope_declarator:sym<has>"
    $P1942."add_method"(type_obj, "!PREFIX__scope_declarator:sym<has>", $P1943)
    get_how $P1944, type_obj
    .const 'Sub' $P1945 = "160_1300057348.719" 
    $P1944."add_method"(type_obj, "scoped", $P1945)
    get_how $P1946, type_obj
    get_global $P1947, "!PREFIX__scoped"
    $P1946."add_method"(type_obj, "!PREFIX__scoped", $P1947)
    get_how $P1948, type_obj
    .const 'Sub' $P1949 = "162_1300057348.719" 
    $P1948."add_method"(type_obj, "typename", $P1949)
    get_how $P1950, type_obj
    get_global $P1951, "!PREFIX__typename"
    $P1950."add_method"(type_obj, "!PREFIX__typename", $P1951)
    get_how $P1952, type_obj
    .const 'Sub' $P1953 = "164_1300057348.719" 
    $P1952."add_method"(type_obj, "declarator", $P1953)
    get_how $P1954, type_obj
    get_global $P1955, "!PREFIX__declarator"
    $P1954."add_method"(type_obj, "!PREFIX__declarator", $P1955)
    get_how $P1956, type_obj
    .const 'Sub' $P1957 = "166_1300057348.719" 
    $P1956."add_method"(type_obj, "variable_declarator", $P1957)
    get_how $P1958, type_obj
    get_global $P1959, "!PREFIX__variable_declarator"
    $P1958."add_method"(type_obj, "!PREFIX__variable_declarator", $P1959)
    get_how $P1960, type_obj
    .const 'Sub' $P1961 = "168_1300057348.719" 
    $P1960."add_method"(type_obj, "routine_declarator", $P1961)
    get_how $P1962, type_obj
    .const 'Sub' $P1963 = "169_1300057348.719" 
    $P1962."add_method"(type_obj, "!PREFIX__routine_declarator", $P1963)
    get_how $P1964, type_obj
    .const 'Sub' $P1965 = "170_1300057348.719" 
    $P1964."add_method"(type_obj, "routine_declarator:sym<sub>", $P1965)
    get_how $P1966, type_obj
    get_global $P1967, "!PREFIX__routine_declarator:sym<sub>"
    $P1966."add_method"(type_obj, "!PREFIX__routine_declarator:sym<sub>", $P1967)
    get_how $P1968, type_obj
    .const 'Sub' $P1969 = "172_1300057348.719" 
    $P1968."add_method"(type_obj, "routine_declarator:sym<method>", $P1969)
    get_how $P1970, type_obj
    get_global $P1971, "!PREFIX__routine_declarator:sym<method>"
    $P1970."add_method"(type_obj, "!PREFIX__routine_declarator:sym<method>", $P1971)
    get_how $P1972, type_obj
    .const 'Sub' $P1973 = "174_1300057348.719" 
    $P1972."add_method"(type_obj, "routine_def", $P1973)
    get_how $P1974, type_obj
    get_global $P1975, "!PREFIX__routine_def"
    $P1974."add_method"(type_obj, "!PREFIX__routine_def", $P1975)
    get_how $P1976, type_obj
    .const 'Sub' $P1977 = "176_1300057348.719" 
    $P1976."add_method"(type_obj, "method_def", $P1977)
    get_how $P1978, type_obj
    get_global $P1979, "!PREFIX__method_def"
    $P1978."add_method"(type_obj, "!PREFIX__method_def", $P1979)
    get_how $P1980, type_obj
    .const 'Sub' $P1981 = "179_1300057348.719" 
    $P1980."add_method"(type_obj, "onlystar", $P1981)
    get_how $P1982, type_obj
    get_global $P1983, "!PREFIX__onlystar"
    $P1982."add_method"(type_obj, "!PREFIX__onlystar", $P1983)
    get_how $P1984, type_obj
    .const 'Sub' $P1985 = "182_1300057348.719" 
    $P1984."add_method"(type_obj, "multi_declarator", $P1985)
    get_how $P1986, type_obj
    .const 'Sub' $P1987 = "183_1300057348.719" 
    $P1986."add_method"(type_obj, "!PREFIX__multi_declarator", $P1987)
    get_how $P1988, type_obj
    .const 'Sub' $P1989 = "184_1300057348.719" 
    $P1988."add_method"(type_obj, "multi_declarator:sym<multi>", $P1989)
    get_how $P1990, type_obj
    get_global $P1991, "!PREFIX__multi_declarator:sym<multi>"
    $P1990."add_method"(type_obj, "!PREFIX__multi_declarator:sym<multi>", $P1991)
    get_how $P1992, type_obj
    .const 'Sub' $P1993 = "186_1300057348.719" 
    $P1992."add_method"(type_obj, "multi_declarator:sym<proto>", $P1993)
    get_how $P1994, type_obj
    get_global $P1995, "!PREFIX__multi_declarator:sym<proto>"
    $P1994."add_method"(type_obj, "!PREFIX__multi_declarator:sym<proto>", $P1995)
    get_how $P1996, type_obj
    .const 'Sub' $P1997 = "188_1300057348.719" 
    $P1996."add_method"(type_obj, "multi_declarator:sym<null>", $P1997)
    get_how $P1998, type_obj
    get_global $P1999, "!PREFIX__multi_declarator:sym<null>"
    $P1998."add_method"(type_obj, "!PREFIX__multi_declarator:sym<null>", $P1999)
    get_how $P2000, type_obj
    .const 'Sub' $P2001 = "190_1300057348.719" 
    $P2000."add_method"(type_obj, "signature", $P2001)
    get_how $P2002, type_obj
    get_global $P2003, "!PREFIX__signature"
    $P2002."add_method"(type_obj, "!PREFIX__signature", $P2003)
    get_how $P2004, type_obj
    .const 'Sub' $P2005 = "193_1300057348.719" 
    $P2004."add_method"(type_obj, "parameter", $P2005)
    get_how $P2006, type_obj
    get_global $P2007, "!PREFIX__parameter"
    $P2006."add_method"(type_obj, "!PREFIX__parameter", $P2007)
    get_how $P2008, type_obj
    .const 'Sub' $P2009 = "195_1300057348.719" 
    $P2008."add_method"(type_obj, "param_var", $P2009)
    get_how $P2010, type_obj
    get_global $P2011, "!PREFIX__param_var"
    $P2010."add_method"(type_obj, "!PREFIX__param_var", $P2011)
    get_how $P2012, type_obj
    .const 'Sub' $P2013 = "197_1300057348.719" 
    $P2012."add_method"(type_obj, "named_param", $P2013)
    get_how $P2014, type_obj
    get_global $P2015, "!PREFIX__named_param"
    $P2014."add_method"(type_obj, "!PREFIX__named_param", $P2015)
    get_how $P2016, type_obj
    .const 'Sub' $P2017 = "199_1300057348.719" 
    $P2016."add_method"(type_obj, "default_value", $P2017)
    get_how $P2018, type_obj
    get_global $P2019, "!PREFIX__default_value"
    $P2018."add_method"(type_obj, "!PREFIX__default_value", $P2019)
    get_how $P2020, type_obj
    .const 'Sub' $P2021 = "201_1300057348.719" 
    $P2020."add_method"(type_obj, "trait", $P2021)
    get_how $P2022, type_obj
    get_global $P2023, "!PREFIX__trait"
    $P2022."add_method"(type_obj, "!PREFIX__trait", $P2023)
    get_how $P2024, type_obj
    .const 'Sub' $P2025 = "203_1300057348.719" 
    $P2024."add_method"(type_obj, "trait_mod", $P2025)
    get_how $P2026, type_obj
    .const 'Sub' $P2027 = "204_1300057348.719" 
    $P2026."add_method"(type_obj, "!PREFIX__trait_mod", $P2027)
    get_how $P2028, type_obj
    .const 'Sub' $P2029 = "205_1300057348.719" 
    $P2028."add_method"(type_obj, "trait_mod:sym<is>", $P2029)
    get_how $P2030, type_obj
    get_global $P2031, "!PREFIX__trait_mod:sym<is>"
    $P2030."add_method"(type_obj, "!PREFIX__trait_mod:sym<is>", $P2031)
    get_how $P2032, type_obj
    .const 'Sub' $P2033 = "207_1300057348.719" 
    $P2032."add_method"(type_obj, "regex_declarator", $P2033)
    get_how $P2034, type_obj
    get_global $P2035, "!PREFIX__regex_declarator"
    $P2034."add_method"(type_obj, "!PREFIX__regex_declarator", $P2035)
    get_how $P2036, type_obj
    .const 'Sub' $P2037 = "209_1300057348.719" 
    $P2036."add_method"(type_obj, "dotty", $P2037)
    get_how $P2038, type_obj
    get_global $P2039, "!PREFIX__dotty"
    $P2038."add_method"(type_obj, "!PREFIX__dotty", $P2039)
    get_how $P2040, type_obj
    .const 'Sub' $P2041 = "211_1300057348.719" 
    $P2040."add_method"(type_obj, "term", $P2041)
    get_how $P2042, type_obj
    .const 'Sub' $P2043 = "212_1300057348.719" 
    $P2042."add_method"(type_obj, "!PREFIX__term", $P2043)
    get_how $P2044, type_obj
    .const 'Sub' $P2045 = "213_1300057348.719" 
    $P2044."add_method"(type_obj, "term:sym<self>", $P2045)
    get_how $P2046, type_obj
    get_global $P2047, "!PREFIX__term:sym<self>"
    $P2046."add_method"(type_obj, "!PREFIX__term:sym<self>", $P2047)
    get_how $P2048, type_obj
    .const 'Sub' $P2049 = "215_1300057348.719" 
    $P2048."add_method"(type_obj, "term:sym<identifier>", $P2049)
    get_how $P2050, type_obj
    get_global $P2051, "!PREFIX__term:sym<identifier>"
    $P2050."add_method"(type_obj, "!PREFIX__term:sym<identifier>", $P2051)
    get_how $P2052, type_obj
    .const 'Sub' $P2053 = "217_1300057348.719" 
    $P2052."add_method"(type_obj, "term:sym<name>", $P2053)
    get_how $P2054, type_obj
    get_global $P2055, "!PREFIX__term:sym<name>"
    $P2054."add_method"(type_obj, "!PREFIX__term:sym<name>", $P2055)
    get_how $P2056, type_obj
    .const 'Sub' $P2057 = "219_1300057348.719" 
    $P2056."add_method"(type_obj, "term:sym<pir::op>", $P2057)
    get_how $P2058, type_obj
    get_global $P2059, "!PREFIX__term:sym<pir::op>"
    $P2058."add_method"(type_obj, "!PREFIX__term:sym<pir::op>", $P2059)
    get_how $P2060, type_obj
    .const 'Sub' $P2061 = "221_1300057348.719" 
    $P2060."add_method"(type_obj, "term:sym<onlystar>", $P2061)
    get_how $P2062, type_obj
    get_global $P2063, "!PREFIX__term:sym<onlystar>"
    $P2062."add_method"(type_obj, "!PREFIX__term:sym<onlystar>", $P2063)
    get_how $P2064, type_obj
    .const 'Sub' $P2065 = "224_1300057348.719" 
    $P2064."add_method"(type_obj, "args", $P2065)
    get_how $P2066, type_obj
    get_global $P2067, "!PREFIX__args"
    $P2066."add_method"(type_obj, "!PREFIX__args", $P2067)
    get_how $P2068, type_obj
    .const 'Sub' $P2069 = "226_1300057348.719" 
    $P2068."add_method"(type_obj, "arglist", $P2069)
    get_how $P2070, type_obj
    get_global $P2071, "!PREFIX__arglist"
    $P2070."add_method"(type_obj, "!PREFIX__arglist", $P2071)
    get_how $P2072, type_obj
    .const 'Sub' $P2073 = "228_1300057348.719" 
    $P2072."add_method"(type_obj, "term:sym<value>", $P2073)
    get_how $P2074, type_obj
    get_global $P2075, "!PREFIX__term:sym<value>"
    $P2074."add_method"(type_obj, "!PREFIX__term:sym<value>", $P2075)
    get_how $P2076, type_obj
    .const 'Sub' $P2077 = "230_1300057348.719" 
    $P2076."add_method"(type_obj, "value", $P2077)
    get_how $P2078, type_obj
    get_global $P2079, "!PREFIX__value"
    $P2078."add_method"(type_obj, "!PREFIX__value", $P2079)
    get_how $P2080, type_obj
    .const 'Sub' $P2081 = "232_1300057348.719" 
    $P2080."add_method"(type_obj, "number", $P2081)
    get_how $P2082, type_obj
    get_global $P2083, "!PREFIX__number"
    $P2082."add_method"(type_obj, "!PREFIX__number", $P2083)
    get_how $P2084, type_obj
    .const 'Sub' $P2085 = "234_1300057348.719" 
    $P2084."add_method"(type_obj, "quote", $P2085)
    get_how $P2086, type_obj
    .const 'Sub' $P2087 = "235_1300057348.719" 
    $P2086."add_method"(type_obj, "!PREFIX__quote", $P2087)
    get_how $P2088, type_obj
    .const 'Sub' $P2089 = "236_1300057348.719" 
    $P2088."add_method"(type_obj, "quote:sym<apos>", $P2089)
    get_how $P2090, type_obj
    get_global $P2091, "!PREFIX__quote:sym<apos>"
    $P2090."add_method"(type_obj, "!PREFIX__quote:sym<apos>", $P2091)
    get_how $P2092, type_obj
    .const 'Sub' $P2093 = "238_1300057348.719" 
    $P2092."add_method"(type_obj, "quote:sym<dblq>", $P2093)
    get_how $P2094, type_obj
    get_global $P2095, "!PREFIX__quote:sym<dblq>"
    $P2094."add_method"(type_obj, "!PREFIX__quote:sym<dblq>", $P2095)
    get_how $P2096, type_obj
    .const 'Sub' $P2097 = "240_1300057348.719" 
    $P2096."add_method"(type_obj, "quote:sym<q>", $P2097)
    get_how $P2098, type_obj
    get_global $P2099, "!PREFIX__quote:sym<q>"
    $P2098."add_method"(type_obj, "!PREFIX__quote:sym<q>", $P2099)
    get_how $P2100, type_obj
    .const 'Sub' $P2101 = "242_1300057348.719" 
    $P2100."add_method"(type_obj, "quote:sym<qq>", $P2101)
    get_how $P2102, type_obj
    get_global $P2103, "!PREFIX__quote:sym<qq>"
    $P2102."add_method"(type_obj, "!PREFIX__quote:sym<qq>", $P2103)
    get_how $P2104, type_obj
    .const 'Sub' $P2105 = "244_1300057348.719" 
    $P2104."add_method"(type_obj, "quote:sym<Q>", $P2105)
    get_how $P2106, type_obj
    get_global $P2107, "!PREFIX__quote:sym<Q>"
    $P2106."add_method"(type_obj, "!PREFIX__quote:sym<Q>", $P2107)
    get_how $P2108, type_obj
    .const 'Sub' $P2109 = "246_1300057348.719" 
    $P2108."add_method"(type_obj, "quote:sym<Q:PIR>", $P2109)
    get_how $P2110, type_obj
    get_global $P2111, "!PREFIX__quote:sym<Q:PIR>"
    $P2110."add_method"(type_obj, "!PREFIX__quote:sym<Q:PIR>", $P2111)
    get_how $P2112, type_obj
    .const 'Sub' $P2113 = "248_1300057348.719" 
    $P2112."add_method"(type_obj, "quote:sym</ />", $P2113)
    get_how $P2114, type_obj
    get_global $P2115, "!PREFIX__quote:sym</ />"
    $P2114."add_method"(type_obj, "!PREFIX__quote:sym</ />", $P2115)
    get_how $P2116, type_obj
    .const 'Sub' $P2117 = "250_1300057348.719" 
    $P2116."add_method"(type_obj, "quote_escape:sym<$>", $P2117)
    get_how $P2118, type_obj
    get_global $P2119, "!PREFIX__quote_escape:sym<$>"
    $P2118."add_method"(type_obj, "!PREFIX__quote_escape:sym<$>", $P2119)
    get_how $P2120, type_obj
    .const 'Sub' $P2121 = "252_1300057348.719" 
    $P2120."add_method"(type_obj, "quote_escape:sym<{ }>", $P2121)
    get_how $P2122, type_obj
    get_global $P2123, "!PREFIX__quote_escape:sym<{ }>"
    $P2122."add_method"(type_obj, "!PREFIX__quote_escape:sym<{ }>", $P2123)
    get_how $P2124, type_obj
    .const 'Sub' $P2125 = "254_1300057348.719" 
    $P2124."add_method"(type_obj, "quote_escape:sym<esc>", $P2125)
    get_how $P2126, type_obj
    get_global $P2127, "!PREFIX__quote_escape:sym<esc>"
    $P2126."add_method"(type_obj, "!PREFIX__quote_escape:sym<esc>", $P2127)
    get_how $P2128, type_obj
    .const 'Sub' $P2129 = "256_1300057348.719" 
    $P2128."add_method"(type_obj, "circumfix:sym<( )>", $P2129)
    get_how $P2130, type_obj
    get_global $P2131, "!PREFIX__circumfix:sym<( )>"
    $P2130."add_method"(type_obj, "!PREFIX__circumfix:sym<( )>", $P2131)
    get_how $P2132, type_obj
    .const 'Sub' $P2133 = "258_1300057348.719" 
    $P2132."add_method"(type_obj, "circumfix:sym<[ ]>", $P2133)
    get_how $P2134, type_obj
    get_global $P2135, "!PREFIX__circumfix:sym<[ ]>"
    $P2134."add_method"(type_obj, "!PREFIX__circumfix:sym<[ ]>", $P2135)
    get_how $P2136, type_obj
    .const 'Sub' $P2137 = "260_1300057348.719" 
    $P2136."add_method"(type_obj, "circumfix:sym<ang>", $P2137)
    get_how $P2138, type_obj
    get_global $P2139, "!PREFIX__circumfix:sym<ang>"
    $P2138."add_method"(type_obj, "!PREFIX__circumfix:sym<ang>", $P2139)
    get_how $P2140, type_obj
    .const 'Sub' $P2141 = "262_1300057348.719" 
    $P2140."add_method"(type_obj, unicode:"circumfix:sym<\x{ab} \x{bb}>", $P2141)
    get_how $P2142, type_obj
    get_global $P2143, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"
    $P2142."add_method"(type_obj, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>", $P2143)
    get_how $P2144, type_obj
    .const 'Sub' $P2145 = "264_1300057348.719" 
    $P2144."add_method"(type_obj, "circumfix:sym<{ }>", $P2145)
    get_how $P2146, type_obj
    get_global $P2147, "!PREFIX__circumfix:sym<{ }>"
    $P2146."add_method"(type_obj, "!PREFIX__circumfix:sym<{ }>", $P2147)
    get_how $P2148, type_obj
    .const 'Sub' $P2149 = "266_1300057348.719" 
    $P2148."add_method"(type_obj, "circumfix:sym<sigil>", $P2149)
    get_how $P2150, type_obj
    get_global $P2151, "!PREFIX__circumfix:sym<sigil>"
    $P2150."add_method"(type_obj, "!PREFIX__circumfix:sym<sigil>", $P2151)
    get_how $P2152, type_obj
    .const 'Sub' $P2153 = "268_1300057348.719" 
    $P2152."add_method"(type_obj, "semilist", $P2153)
    get_how $P2154, type_obj
    get_global $P2155, "!PREFIX__semilist"
    $P2154."add_method"(type_obj, "!PREFIX__semilist", $P2155)
    get_how $P2156, type_obj
    .const 'Sub' $P2157 = "271_1300057348.719" 
    $P2156."add_method"(type_obj, "infixish", $P2157)
    get_how $P2158, type_obj
    get_global $P2159, "!PREFIX__infixish"
    $P2158."add_method"(type_obj, "!PREFIX__infixish", $P2159)
    get_how $P2160, type_obj
    .const 'Sub' $P2161 = "273_1300057348.719" 
    $P2160."add_method"(type_obj, "infixstopper", $P2161)
    get_how $P2162, type_obj
    get_global $P2163, "!PREFIX__infixstopper"
    $P2162."add_method"(type_obj, "!PREFIX__infixstopper", $P2163)
    get_how $P2164, type_obj
    .const 'Sub' $P2165 = "275_1300057348.719" 
    $P2164."add_method"(type_obj, "postcircumfix:sym<[ ]>", $P2165)
    get_how $P2166, type_obj
    get_global $P2167, "!PREFIX__postcircumfix:sym<[ ]>"
    $P2166."add_method"(type_obj, "!PREFIX__postcircumfix:sym<[ ]>", $P2167)
    get_how $P2168, type_obj
    .const 'Sub' $P2169 = "277_1300057348.719" 
    $P2168."add_method"(type_obj, "postcircumfix:sym<{ }>", $P2169)
    get_how $P2170, type_obj
    get_global $P2171, "!PREFIX__postcircumfix:sym<{ }>"
    $P2170."add_method"(type_obj, "!PREFIX__postcircumfix:sym<{ }>", $P2171)
    get_how $P2172, type_obj
    .const 'Sub' $P2173 = "279_1300057348.719" 
    $P2172."add_method"(type_obj, "postcircumfix:sym<ang>", $P2173)
    get_how $P2174, type_obj
    get_global $P2175, "!PREFIX__postcircumfix:sym<ang>"
    $P2174."add_method"(type_obj, "!PREFIX__postcircumfix:sym<ang>", $P2175)
    get_how $P2176, type_obj
    .const 'Sub' $P2177 = "281_1300057348.719" 
    $P2176."add_method"(type_obj, "postcircumfix:sym<( )>", $P2177)
    get_how $P2178, type_obj
    get_global $P2179, "!PREFIX__postcircumfix:sym<( )>"
    $P2178."add_method"(type_obj, "!PREFIX__postcircumfix:sym<( )>", $P2179)
    get_how $P2180, type_obj
    .const 'Sub' $P2181 = "283_1300057348.719" 
    $P2180."add_method"(type_obj, "postfix:sym<.>", $P2181)
    get_how $P2182, type_obj
    get_global $P2183, "!PREFIX__postfix:sym<.>"
    $P2182."add_method"(type_obj, "!PREFIX__postfix:sym<.>", $P2183)
    get_how $P2184, type_obj
    .const 'Sub' $P2185 = "285_1300057348.719" 
    $P2184."add_method"(type_obj, "prefix:sym<++>", $P2185)
    get_how $P2186, type_obj
    get_global $P2187, "!PREFIX__prefix:sym<++>"
    $P2186."add_method"(type_obj, "!PREFIX__prefix:sym<++>", $P2187)
    get_how $P2188, type_obj
    .const 'Sub' $P2189 = "287_1300057348.719" 
    $P2188."add_method"(type_obj, "prefix:sym<-->", $P2189)
    get_how $P2190, type_obj
    get_global $P2191, "!PREFIX__prefix:sym<-->"
    $P2190."add_method"(type_obj, "!PREFIX__prefix:sym<-->", $P2191)
    get_how $P2192, type_obj
    .const 'Sub' $P2193 = "289_1300057348.719" 
    $P2192."add_method"(type_obj, "postfix:sym<++>", $P2193)
    get_how $P2194, type_obj
    get_global $P2195, "!PREFIX__postfix:sym<++>"
    $P2194."add_method"(type_obj, "!PREFIX__postfix:sym<++>", $P2195)
    get_how $P2196, type_obj
    .const 'Sub' $P2197 = "291_1300057348.719" 
    $P2196."add_method"(type_obj, "postfix:sym<-->", $P2197)
    get_how $P2198, type_obj
    get_global $P2199, "!PREFIX__postfix:sym<-->"
    $P2198."add_method"(type_obj, "!PREFIX__postfix:sym<-->", $P2199)
    get_how $P2200, type_obj
    .const 'Sub' $P2201 = "293_1300057348.719" 
    $P2200."add_method"(type_obj, "infix:sym<**>", $P2201)
    get_how $P2202, type_obj
    get_global $P2203, "!PREFIX__infix:sym<**>"
    $P2202."add_method"(type_obj, "!PREFIX__infix:sym<**>", $P2203)
    get_how $P2204, type_obj
    .const 'Sub' $P2205 = "295_1300057348.719" 
    $P2204."add_method"(type_obj, "prefix:sym<+>", $P2205)
    get_how $P2206, type_obj
    get_global $P2207, "!PREFIX__prefix:sym<+>"
    $P2206."add_method"(type_obj, "!PREFIX__prefix:sym<+>", $P2207)
    get_how $P2208, type_obj
    .const 'Sub' $P2209 = "297_1300057348.719" 
    $P2208."add_method"(type_obj, "prefix:sym<~>", $P2209)
    get_how $P2210, type_obj
    get_global $P2211, "!PREFIX__prefix:sym<~>"
    $P2210."add_method"(type_obj, "!PREFIX__prefix:sym<~>", $P2211)
    get_how $P2212, type_obj
    .const 'Sub' $P2213 = "299_1300057348.719" 
    $P2212."add_method"(type_obj, "prefix:sym<->", $P2213)
    get_how $P2214, type_obj
    get_global $P2215, "!PREFIX__prefix:sym<->"
    $P2214."add_method"(type_obj, "!PREFIX__prefix:sym<->", $P2215)
    get_how $P2216, type_obj
    .const 'Sub' $P2217 = "301_1300057348.719" 
    $P2216."add_method"(type_obj, "prefix:sym<?>", $P2217)
    get_how $P2218, type_obj
    get_global $P2219, "!PREFIX__prefix:sym<?>"
    $P2218."add_method"(type_obj, "!PREFIX__prefix:sym<?>", $P2219)
    get_how $P2220, type_obj
    .const 'Sub' $P2221 = "303_1300057348.719" 
    $P2220."add_method"(type_obj, "prefix:sym<!>", $P2221)
    get_how $P2222, type_obj
    get_global $P2223, "!PREFIX__prefix:sym<!>"
    $P2222."add_method"(type_obj, "!PREFIX__prefix:sym<!>", $P2223)
    get_how $P2224, type_obj
    .const 'Sub' $P2225 = "305_1300057348.719" 
    $P2224."add_method"(type_obj, "prefix:sym<|>", $P2225)
    get_how $P2226, type_obj
    get_global $P2227, "!PREFIX__prefix:sym<|>"
    $P2226."add_method"(type_obj, "!PREFIX__prefix:sym<|>", $P2227)
    get_how $P2228, type_obj
    .const 'Sub' $P2229 = "307_1300057348.719" 
    $P2228."add_method"(type_obj, "infix:sym<*>", $P2229)
    get_how $P2230, type_obj
    get_global $P2231, "!PREFIX__infix:sym<*>"
    $P2230."add_method"(type_obj, "!PREFIX__infix:sym<*>", $P2231)
    get_how $P2232, type_obj
    .const 'Sub' $P2233 = "309_1300057348.719" 
    $P2232."add_method"(type_obj, "infix:sym</>", $P2233)
    get_how $P2234, type_obj
    get_global $P2235, "!PREFIX__infix:sym</>"
    $P2234."add_method"(type_obj, "!PREFIX__infix:sym</>", $P2235)
    get_how $P2236, type_obj
    .const 'Sub' $P2237 = "311_1300057348.719" 
    $P2236."add_method"(type_obj, "infix:sym<%>", $P2237)
    get_how $P2238, type_obj
    get_global $P2239, "!PREFIX__infix:sym<%>"
    $P2238."add_method"(type_obj, "!PREFIX__infix:sym<%>", $P2239)
    get_how $P2240, type_obj
    .const 'Sub' $P2241 = "313_1300057348.719" 
    $P2240."add_method"(type_obj, "infix:sym<+&>", $P2241)
    get_how $P2242, type_obj
    get_global $P2243, "!PREFIX__infix:sym<+&>"
    $P2242."add_method"(type_obj, "!PREFIX__infix:sym<+&>", $P2243)
    get_how $P2244, type_obj
    .const 'Sub' $P2245 = "315_1300057348.719" 
    $P2244."add_method"(type_obj, "infix:sym<+>", $P2245)
    get_how $P2246, type_obj
    get_global $P2247, "!PREFIX__infix:sym<+>"
    $P2246."add_method"(type_obj, "!PREFIX__infix:sym<+>", $P2247)
    get_how $P2248, type_obj
    .const 'Sub' $P2249 = "317_1300057348.719" 
    $P2248."add_method"(type_obj, "infix:sym<->", $P2249)
    get_how $P2250, type_obj
    get_global $P2251, "!PREFIX__infix:sym<->"
    $P2250."add_method"(type_obj, "!PREFIX__infix:sym<->", $P2251)
    get_how $P2252, type_obj
    .const 'Sub' $P2253 = "319_1300057348.719" 
    $P2252."add_method"(type_obj, "infix:sym<+|>", $P2253)
    get_how $P2254, type_obj
    get_global $P2255, "!PREFIX__infix:sym<+|>"
    $P2254."add_method"(type_obj, "!PREFIX__infix:sym<+|>", $P2255)
    get_how $P2256, type_obj
    .const 'Sub' $P2257 = "321_1300057348.719" 
    $P2256."add_method"(type_obj, "infix:sym<+^>", $P2257)
    get_how $P2258, type_obj
    get_global $P2259, "!PREFIX__infix:sym<+^>"
    $P2258."add_method"(type_obj, "!PREFIX__infix:sym<+^>", $P2259)
    get_how $P2260, type_obj
    .const 'Sub' $P2261 = "323_1300057348.719" 
    $P2260."add_method"(type_obj, "infix:sym<~>", $P2261)
    get_how $P2262, type_obj
    get_global $P2263, "!PREFIX__infix:sym<~>"
    $P2262."add_method"(type_obj, "!PREFIX__infix:sym<~>", $P2263)
    get_how $P2264, type_obj
    .const 'Sub' $P2265 = "325_1300057348.719" 
    $P2264."add_method"(type_obj, "infix:sym<==>", $P2265)
    get_how $P2266, type_obj
    get_global $P2267, "!PREFIX__infix:sym<==>"
    $P2266."add_method"(type_obj, "!PREFIX__infix:sym<==>", $P2267)
    get_how $P2268, type_obj
    .const 'Sub' $P2269 = "327_1300057348.719" 
    $P2268."add_method"(type_obj, "infix:sym<!=>", $P2269)
    get_how $P2270, type_obj
    get_global $P2271, "!PREFIX__infix:sym<!=>"
    $P2270."add_method"(type_obj, "!PREFIX__infix:sym<!=>", $P2271)
    get_how $P2272, type_obj
    .const 'Sub' $P2273 = "329_1300057348.719" 
    $P2272."add_method"(type_obj, "infix:sym<<=>", $P2273)
    get_how $P2274, type_obj
    get_global $P2275, "!PREFIX__infix:sym<<=>"
    $P2274."add_method"(type_obj, "!PREFIX__infix:sym<<=>", $P2275)
    get_how $P2276, type_obj
    .const 'Sub' $P2277 = "331_1300057348.719" 
    $P2276."add_method"(type_obj, "infix:sym<>=>", $P2277)
    get_how $P2278, type_obj
    get_global $P2279, "!PREFIX__infix:sym<>=>"
    $P2278."add_method"(type_obj, "!PREFIX__infix:sym<>=>", $P2279)
    get_how $P2280, type_obj
    .const 'Sub' $P2281 = "333_1300057348.719" 
    $P2280."add_method"(type_obj, "infix:sym<<>", $P2281)
    get_how $P2282, type_obj
    get_global $P2283, "!PREFIX__infix:sym<<>"
    $P2282."add_method"(type_obj, "!PREFIX__infix:sym<<>", $P2283)
    get_how $P2284, type_obj
    .const 'Sub' $P2285 = "335_1300057348.719" 
    $P2284."add_method"(type_obj, "infix:sym<>>", $P2285)
    get_how $P2286, type_obj
    get_global $P2287, "!PREFIX__infix:sym<>>"
    $P2286."add_method"(type_obj, "!PREFIX__infix:sym<>>", $P2287)
    get_how $P2288, type_obj
    .const 'Sub' $P2289 = "337_1300057348.719" 
    $P2288."add_method"(type_obj, "infix:sym<eq>", $P2289)
    get_how $P2290, type_obj
    get_global $P2291, "!PREFIX__infix:sym<eq>"
    $P2290."add_method"(type_obj, "!PREFIX__infix:sym<eq>", $P2291)
    get_how $P2292, type_obj
    .const 'Sub' $P2293 = "339_1300057348.719" 
    $P2292."add_method"(type_obj, "infix:sym<ne>", $P2293)
    get_how $P2294, type_obj
    get_global $P2295, "!PREFIX__infix:sym<ne>"
    $P2294."add_method"(type_obj, "!PREFIX__infix:sym<ne>", $P2295)
    get_how $P2296, type_obj
    .const 'Sub' $P2297 = "341_1300057348.719" 
    $P2296."add_method"(type_obj, "infix:sym<le>", $P2297)
    get_how $P2298, type_obj
    get_global $P2299, "!PREFIX__infix:sym<le>"
    $P2298."add_method"(type_obj, "!PREFIX__infix:sym<le>", $P2299)
    get_how $P2300, type_obj
    .const 'Sub' $P2301 = "343_1300057348.719" 
    $P2300."add_method"(type_obj, "infix:sym<ge>", $P2301)
    get_how $P2302, type_obj
    get_global $P2303, "!PREFIX__infix:sym<ge>"
    $P2302."add_method"(type_obj, "!PREFIX__infix:sym<ge>", $P2303)
    get_how $P2304, type_obj
    .const 'Sub' $P2305 = "345_1300057348.719" 
    $P2304."add_method"(type_obj, "infix:sym<lt>", $P2305)
    get_how $P2306, type_obj
    get_global $P2307, "!PREFIX__infix:sym<lt>"
    $P2306."add_method"(type_obj, "!PREFIX__infix:sym<lt>", $P2307)
    get_how $P2308, type_obj
    .const 'Sub' $P2309 = "347_1300057348.719" 
    $P2308."add_method"(type_obj, "infix:sym<gt>", $P2309)
    get_how $P2310, type_obj
    get_global $P2311, "!PREFIX__infix:sym<gt>"
    $P2310."add_method"(type_obj, "!PREFIX__infix:sym<gt>", $P2311)
    get_how $P2312, type_obj
    .const 'Sub' $P2313 = "349_1300057348.719" 
    $P2312."add_method"(type_obj, "infix:sym<=:=>", $P2313)
    get_how $P2314, type_obj
    get_global $P2315, "!PREFIX__infix:sym<=:=>"
    $P2314."add_method"(type_obj, "!PREFIX__infix:sym<=:=>", $P2315)
    get_how $P2316, type_obj
    .const 'Sub' $P2317 = "351_1300057348.719" 
    $P2316."add_method"(type_obj, "infix:sym<~~>", $P2317)
    get_how $P2318, type_obj
    get_global $P2319, "!PREFIX__infix:sym<~~>"
    $P2318."add_method"(type_obj, "!PREFIX__infix:sym<~~>", $P2319)
    get_how $P2320, type_obj
    .const 'Sub' $P2321 = "353_1300057348.719" 
    $P2320."add_method"(type_obj, "infix:sym<&&>", $P2321)
    get_how $P2322, type_obj
    get_global $P2323, "!PREFIX__infix:sym<&&>"
    $P2322."add_method"(type_obj, "!PREFIX__infix:sym<&&>", $P2323)
    get_how $P2324, type_obj
    .const 'Sub' $P2325 = "355_1300057348.719" 
    $P2324."add_method"(type_obj, "infix:sym<||>", $P2325)
    get_how $P2326, type_obj
    get_global $P2327, "!PREFIX__infix:sym<||>"
    $P2326."add_method"(type_obj, "!PREFIX__infix:sym<||>", $P2327)
    get_how $P2328, type_obj
    .const 'Sub' $P2329 = "357_1300057348.719" 
    $P2328."add_method"(type_obj, "infix:sym<//>", $P2329)
    get_how $P2330, type_obj
    get_global $P2331, "!PREFIX__infix:sym<//>"
    $P2330."add_method"(type_obj, "!PREFIX__infix:sym<//>", $P2331)
    get_how $P2332, type_obj
    .const 'Sub' $P2333 = "359_1300057348.719" 
    $P2332."add_method"(type_obj, "infix:sym<?? !!>", $P2333)
    get_how $P2334, type_obj
    get_global $P2335, "!PREFIX__infix:sym<?? !!>"
    $P2334."add_method"(type_obj, "!PREFIX__infix:sym<?? !!>", $P2335)
    get_how $P2336, type_obj
    .const 'Sub' $P2337 = "361_1300057348.719" 
    $P2336."add_method"(type_obj, "infix:sym<=>", $P2337)
    get_how $P2338, type_obj
    get_global $P2339, "!PREFIX__infix:sym<=>"
    $P2338."add_method"(type_obj, "!PREFIX__infix:sym<=>", $P2339)
    get_how $P2340, type_obj
    .const 'Sub' $P2341 = "363_1300057348.719" 
    $P2340."add_method"(type_obj, "infix:sym<:=>", $P2341)
    get_how $P2342, type_obj
    get_global $P2343, "!PREFIX__infix:sym<:=>"
    $P2342."add_method"(type_obj, "!PREFIX__infix:sym<:=>", $P2343)
    get_how $P2344, type_obj
    .const 'Sub' $P2345 = "365_1300057348.719" 
    $P2344."add_method"(type_obj, "infix:sym<::=>", $P2345)
    get_how $P2346, type_obj
    get_global $P2347, "!PREFIX__infix:sym<::=>"
    $P2346."add_method"(type_obj, "!PREFIX__infix:sym<::=>", $P2347)
    get_how $P2348, type_obj
    .const 'Sub' $P2349 = "367_1300057348.719" 
    $P2348."add_method"(type_obj, "infix:sym<,>", $P2349)
    get_how $P2350, type_obj
    get_global $P2351, "!PREFIX__infix:sym<,>"
    $P2350."add_method"(type_obj, "!PREFIX__infix:sym<,>", $P2351)
    get_how $P2352, type_obj
    .const 'Sub' $P2353 = "369_1300057348.719" 
    $P2352."add_method"(type_obj, "prefix:sym<return>", $P2353)
    get_how $P2354, type_obj
    get_global $P2355, "!PREFIX__prefix:sym<return>"
    $P2354."add_method"(type_obj, "!PREFIX__prefix:sym<return>", $P2355)
    get_how $P2356, type_obj
    .const 'Sub' $P2357 = "372_1300057348.719" 
    $P2356."add_method"(type_obj, "prefix:sym<make>", $P2357)
    get_how $P2358, type_obj
    get_global $P2359, "!PREFIX__prefix:sym<make>"
    $P2358."add_method"(type_obj, "!PREFIX__prefix:sym<make>", $P2359)
    get_how $P2360, type_obj
    .const 'Sub' $P2361 = "374_1300057348.719" 
    $P2360."add_method"(type_obj, "term:sym<last>", $P2361)
    get_how $P2362, type_obj
    get_global $P2363, "!PREFIX__term:sym<last>"
    $P2362."add_method"(type_obj, "!PREFIX__term:sym<last>", $P2363)
    get_how $P2364, type_obj
    .const 'Sub' $P2365 = "376_1300057348.719" 
    $P2364."add_method"(type_obj, "term:sym<next>", $P2365)
    get_how $P2366, type_obj
    get_global $P2367, "!PREFIX__term:sym<next>"
    $P2366."add_method"(type_obj, "!PREFIX__term:sym<next>", $P2367)
    get_how $P2368, type_obj
    .const 'Sub' $P2369 = "378_1300057348.719" 
    $P2368."add_method"(type_obj, "term:sym<redo>", $P2369)
    get_how $P2370, type_obj
    get_global $P2371, "!PREFIX__term:sym<redo>"
    $P2370."add_method"(type_obj, "!PREFIX__term:sym<redo>", $P2371)
    get_how $P2372, type_obj
    .const 'Sub' $P2373 = "380_1300057348.719" 
    $P2372."add_method"(type_obj, "smartmatch", $P2373)
    get_how $P2374, type_obj
    get_hll_global $P2375, ["HLL"], "Grammar"
    $P2374."add_parent"(type_obj, $P2375)
    get_how $P2376, type_obj
    $P2377 = $P2376."compose"(type_obj)
    .return ($P2377)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "TOP"  :subid("12_1300057348.719") :outer("11_1300057348.719")
    .param pmc param_17
.annotate 'line', 4
    .lex "self", param_17
.annotate 'line', 6
    $P18 = root_new ['parrot';'Hash']
    .lex "%*LANG", $P18
.annotate 'line', 13
    $P19 = root_new ['parrot';'Hash']
    .lex "%*HOW", $P19
.annotate 'line', 22
    new $P20, "Undef"
    .lex "$*DEFAULT-METAATTR", $P20
.annotate 'line', 23
    $P21 = root_new ['parrot';'Hash']
    .lex "%*HOW-METAATTR", $P21
.annotate 'line', 29
    new $P22, "Undef"
    .lex "$*SC", $P22
.annotate 'line', 33
    new $P23, "Undef"
    .lex "$*SCOPE", $P23
.annotate 'line', 34
    new $P24, "Undef"
    .lex "$*MULTINESS", $P24
.annotate 'line', 35
    new $P25, "Undef"
    .lex "$*INVOCANT_OK", $P25
.annotate 'line', 36
    new $P26, "Undef"
    .lex "$*RETURN_USED", $P26
.annotate 'line', 37
    new $P27, "Undef"
    .lex "$*PACKAGE-SETUP", $P27
.annotate 'line', 4
    find_lex $P28, "%*LANG"
    unless_null $P28, vivify_407
    get_hll_global $P28, "%LANG"
    unless_null $P28, vivify_408
    die "Contextual %*LANG not found"
  vivify_408:
  vivify_407:
.annotate 'line', 7
    get_hll_global $P29, ["NQP"], "Regex"
    find_lex $P30, "%*LANG"
    unless_null $P30, vivify_409
    get_hll_global $P30, "%LANG"
    unless_null $P30, vivify_410
    die "Contextual %*LANG not found"
  vivify_410:
    store_lex "%*LANG", $P30
  vivify_409:
    set $P30["Regex"], $P29
.annotate 'line', 8
    get_hll_global $P31, ["NQP"], "RegexActions"
    find_lex $P32, "%*LANG"
    unless_null $P32, vivify_411
    get_hll_global $P32, "%LANG"
    unless_null $P32, vivify_412
    die "Contextual %*LANG not found"
  vivify_412:
    store_lex "%*LANG", $P32
  vivify_411:
    set $P32["Regex-actions"], $P31
.annotate 'line', 9
    get_hll_global $P33, ["NQP"], "Grammar"
    find_lex $P34, "%*LANG"
    unless_null $P34, vivify_413
    get_hll_global $P34, "%LANG"
    unless_null $P34, vivify_414
    die "Contextual %*LANG not found"
  vivify_414:
    store_lex "%*LANG", $P34
  vivify_413:
    set $P34["MAIN"], $P33
.annotate 'line', 10
    get_hll_global $P35, ["NQP"], "Actions"
    find_lex $P36, "%*LANG"
    unless_null $P36, vivify_415
    get_hll_global $P36, "%LANG"
    unless_null $P36, vivify_416
    die "Contextual %*LANG not found"
  vivify_416:
    store_lex "%*LANG", $P36
  vivify_415:
    set $P36["MAIN-actions"], $P35
    find_lex $P37, "%*HOW"
    unless_null $P37, vivify_417
    get_hll_global $P37, "%HOW"
    unless_null $P37, vivify_418
    die "Contextual %*HOW not found"
  vivify_418:
  vivify_417:
.annotate 'line', 14
    get_hll_global $P38, "KnowHOW"
    find_lex $P39, "%*HOW"
    unless_null $P39, vivify_419
    get_hll_global $P39, "%HOW"
    unless_null $P39, vivify_420
    die "Contextual %*HOW not found"
  vivify_420:
    store_lex "%*HOW", $P39
  vivify_419:
    set $P39["knowhow"], $P38
.annotate 'line', 15
    get_hll_global $P40, "NQPModuleHOW"
    find_lex $P41, "%*HOW"
    unless_null $P41, vivify_421
    get_hll_global $P41, "%HOW"
    unless_null $P41, vivify_422
    die "Contextual %*HOW not found"
  vivify_422:
    store_lex "%*HOW", $P41
  vivify_421:
    set $P41["module"], $P40
.annotate 'line', 16
    get_hll_global $P42, "NQPClassHOW"
    find_lex $P43, "%*HOW"
    unless_null $P43, vivify_423
    get_hll_global $P43, "%HOW"
    unless_null $P43, vivify_424
    die "Contextual %*HOW not found"
  vivify_424:
    store_lex "%*HOW", $P43
  vivify_423:
    set $P43["class"], $P42
.annotate 'line', 17
    get_hll_global $P44, "NQPClassHOW"
    find_lex $P45, "%*HOW"
    unless_null $P45, vivify_425
    get_hll_global $P45, "%HOW"
    unless_null $P45, vivify_426
    die "Contextual %*HOW not found"
  vivify_426:
    store_lex "%*HOW", $P45
  vivify_425:
    set $P45["grammar"], $P44
.annotate 'line', 18
    get_hll_global $P46, "NQPParametricRoleHOW"
    find_lex $P47, "%*HOW"
    unless_null $P47, vivify_427
    get_hll_global $P47, "%HOW"
    unless_null $P47, vivify_428
    die "Contextual %*HOW not found"
  vivify_428:
    store_lex "%*HOW", $P47
  vivify_427:
    set $P47["role"], $P46
.annotate 'line', 19
    get_hll_global $P48, "NQPNativeHOW"
    find_lex $P49, "%*HOW"
    unless_null $P49, vivify_429
    get_hll_global $P49, "%HOW"
    unless_null $P49, vivify_430
    die "Contextual %*HOW not found"
  vivify_430:
    store_lex "%*HOW", $P49
  vivify_429:
    set $P49["native"], $P48
.annotate 'line', 22
    new $P50, "String"
    assign $P50, "NQPAttribute"
    store_lex "$*DEFAULT-METAATTR", $P50
    find_lex $P51, "%*HOW-METAATTR"
    unless_null $P51, vivify_431
    get_hll_global $P51, "%HOW-METAATTR"
    unless_null $P51, vivify_432
    die "Contextual %*HOW-METAATTR not found"
  vivify_432:
  vivify_431:
.annotate 'line', 24
    new $P52, "String"
    assign $P52, "KnowHOWAttribute"
    find_lex $P53, "%*HOW-METAATTR"
    unless_null $P53, vivify_433
    get_hll_global $P53, "%HOW-METAATTR"
    unless_null $P53, vivify_434
    die "Contextual %*HOW-METAATTR not found"
  vivify_434:
    store_lex "%*HOW-METAATTR", $P53
  vivify_433:
    set $P53["knowhow"], $P52
.annotate 'line', 29
    get_hll_global $P54, ["HLL";"Compiler"], "SerializationContextBuilder"
.annotate 'line', 31
    time $N55
    set $S56, $N55
    $P57 = $P54."new"($S56 :named("handle"))
.annotate 'line', 29
    store_lex "$*SC", $P57
.annotate 'line', 33
    new $P58, "String"
    assign $P58, ""
    store_lex "$*SCOPE", $P58
.annotate 'line', 34
    new $P59, "String"
    assign $P59, ""
    store_lex "$*MULTINESS", $P59
.annotate 'line', 35
    new $P60, "Integer"
    assign $P60, 0
    store_lex "$*INVOCANT_OK", $P60
.annotate 'line', 36
    new $P61, "Integer"
    assign $P61, 0
    store_lex "$*RETURN_USED", $P61
    find_lex $P62, "$*PACKAGE-SETUP"
    unless_null $P62, vivify_435
    get_hll_global $P62, "$PACKAGE-SETUP"
    unless_null $P62, vivify_436
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_436:
  vivify_435:
.annotate 'line', 38
    find_lex $P63, "self"
    $P64 = $P63."comp_unit"()
.annotate 'line', 4
    .return ($P64)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "identifier"  :subid("13_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx66_tgt
    .local int rx66_pos
    .local int rx66_off
    .local int rx66_eos
    .local int rx66_rep
    .local pmc rx66_cur
    .local pmc rx66_debug
    (rx66_cur, rx66_pos, rx66_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx66_cur
    .local pmc match
    .lex "$/", match
    length rx66_eos, rx66_tgt
    gt rx66_pos, rx66_eos, rx66_done
    set rx66_off, 0
    lt rx66_pos, 2, rx66_start
    sub rx66_off, rx66_pos, 1
    substr rx66_tgt, rx66_tgt, rx66_off
  rx66_start:
    eq $I10, 1, rx66_restart
    if_null rx66_debug, debug_437
    rx66_cur."!cursor_debug"("START", "identifier")
  debug_437:
    $I10 = self.'from'()
    ne $I10, -1, rxscan70_done
    goto rxscan70_scan
  rxscan70_loop:
    (rx66_pos) = rx66_cur."from"()
    inc rx66_pos
    rx66_cur."!cursor_from"(rx66_pos)
    ge rx66_pos, rx66_eos, rxscan70_done
  rxscan70_scan:
    set_addr $I10, rxscan70_loop
    rx66_cur."!mark_push"(0, rx66_pos, $I10)
  rxscan70_done:
.annotate 'line', 43
  # rx subrule "ident" subtype=method negate=
    rx66_cur."!cursor_pos"(rx66_pos)
    $P10 = rx66_cur."ident"()
    unless $P10, rx66_fail
    rx66_pos = $P10."pos"()
  # rx rxquantr71 ** 0..*
    set_addr $I10, rxquantr71_done
    rx66_cur."!mark_push"(0, rx66_pos, $I10)
  rxquantr71_loop:
  # rx enumcharlist negate=0 
    ge rx66_pos, rx66_eos, rx66_fail
    sub $I10, rx66_pos, rx66_off
    substr $S10, rx66_tgt, $I10, 1
    index $I11, "-'", $S10
    lt $I11, 0, rx66_fail
    inc rx66_pos
  # rx subrule "ident" subtype=method negate=
    rx66_cur."!cursor_pos"(rx66_pos)
    $P10 = rx66_cur."ident"()
    unless $P10, rx66_fail
    rx66_pos = $P10."pos"()
    set_addr $I10, rxquantr71_done
    (rx66_rep) = rx66_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr71_done
    rx66_cur."!mark_push"(rx66_rep, rx66_pos, $I10)
    goto rxquantr71_loop
  rxquantr71_done:
  # rx pass
    rx66_cur."!cursor_pass"(rx66_pos, "identifier")
    if_null rx66_debug, debug_438
    rx66_cur."!cursor_debug"("PASS", "identifier", " at pos=", rx66_pos)
  debug_438:
    .return (rx66_cur)
  rx66_restart:
.annotate 'line', 4
    if_null rx66_debug, debug_439
    rx66_cur."!cursor_debug"("NEXT", "identifier")
  debug_439:
  rx66_fail:
    (rx66_rep, rx66_pos, $I10, $P10) = rx66_cur."!mark_fail"(0)
    lt rx66_pos, -1, rx66_done
    eq rx66_pos, -1, rx66_fail
    jump $I10
  rx66_done:
    rx66_cur."!cursor_fail"()
    if_null rx66_debug, debug_440
    rx66_cur."!cursor_debug"("FAIL", "identifier")
  debug_440:
    .return (rx66_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__identifier"  :nsentry("!PREFIX__identifier") :subid("14_1300057348.719") :method
.annotate 'line', 4
    $P68 = self."!PREFIX__!subrule"("ident", "")
    new $P69, "ResizablePMCArray"
    push $P69, $P68
    .return ($P69)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "name"  :subid("15_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx73_tgt
    .local int rx73_pos
    .local int rx73_off
    .local int rx73_eos
    .local int rx73_rep
    .local pmc rx73_cur
    .local pmc rx73_debug
    (rx73_cur, rx73_pos, rx73_tgt, $I10) = self."!cursor_start"()
    rx73_cur."!cursor_caparray"("identifier")
    .lex unicode:"$\x{a2}", rx73_cur
    .local pmc match
    .lex "$/", match
    length rx73_eos, rx73_tgt
    gt rx73_pos, rx73_eos, rx73_done
    set rx73_off, 0
    lt rx73_pos, 2, rx73_start
    sub rx73_off, rx73_pos, 1
    substr rx73_tgt, rx73_tgt, rx73_off
  rx73_start:
    eq $I10, 1, rx73_restart
    if_null rx73_debug, debug_441
    rx73_cur."!cursor_debug"("START", "name")
  debug_441:
    $I10 = self.'from'()
    ne $I10, -1, rxscan76_done
    goto rxscan76_scan
  rxscan76_loop:
    (rx73_pos) = rx73_cur."from"()
    inc rx73_pos
    rx73_cur."!cursor_from"(rx73_pos)
    ge rx73_pos, rx73_eos, rxscan76_done
  rxscan76_scan:
    set_addr $I10, rxscan76_loop
    rx73_cur."!mark_push"(0, rx73_pos, $I10)
  rxscan76_done:
.annotate 'line', 45
  # rx rxquantr77 ** 1..*
    set_addr $I10, rxquantr77_done
    rx73_cur."!mark_push"(0, -1, $I10)
  rxquantr77_loop:
  # rx subrule "identifier" subtype=capture negate=
    rx73_cur."!cursor_pos"(rx73_pos)
    $P10 = rx73_cur."identifier"()
    unless $P10, rx73_fail
    goto rxsubrule78_pass
  rxsubrule78_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx73_fail
  rxsubrule78_pass:
    set_addr $I10, rxsubrule78_back
    rx73_cur."!mark_push"(0, rx73_pos, $I10, $P10)
    $P10."!cursor_names"("identifier")
    rx73_pos = $P10."pos"()
    set_addr $I10, rxquantr77_done
    (rx73_rep) = rx73_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr77_done
    rx73_cur."!mark_push"(rx73_rep, rx73_pos, $I10)
  # rx literal  "::"
    add $I11, rx73_pos, 2
    gt $I11, rx73_eos, rx73_fail
    sub $I11, rx73_pos, rx73_off
    substr $S10, rx73_tgt, $I11, 2
    ne $S10, "::", rx73_fail
    add rx73_pos, 2
    goto rxquantr77_loop
  rxquantr77_done:
  # rx pass
    rx73_cur."!cursor_pass"(rx73_pos, "name")
    if_null rx73_debug, debug_442
    rx73_cur."!cursor_debug"("PASS", "name", " at pos=", rx73_pos)
  debug_442:
    .return (rx73_cur)
  rx73_restart:
.annotate 'line', 4
    if_null rx73_debug, debug_443
    rx73_cur."!cursor_debug"("NEXT", "name")
  debug_443:
  rx73_fail:
    (rx73_rep, rx73_pos, $I10, $P10) = rx73_cur."!mark_fail"(0)
    lt rx73_pos, -1, rx73_done
    eq rx73_pos, -1, rx73_fail
    jump $I10
  rx73_done:
    rx73_cur."!cursor_fail"()
    if_null rx73_debug, debug_444
    rx73_cur."!cursor_debug"("FAIL", "name")
  debug_444:
    .return (rx73_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__name"  :nsentry("!PREFIX__name") :subid("16_1300057348.719") :method
.annotate 'line', 4
    new $P75, "ResizablePMCArray"
    push $P75, ""
    .return ($P75)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "deflongname"  :subid("17_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx80_tgt
    .local int rx80_pos
    .local int rx80_off
    .local int rx80_eos
    .local int rx80_rep
    .local pmc rx80_cur
    .local pmc rx80_debug
    (rx80_cur, rx80_pos, rx80_tgt, $I10) = self."!cursor_start"()
    rx80_cur."!cursor_caparray"("colonpair")
    .lex unicode:"$\x{a2}", rx80_cur
    .local pmc match
    .lex "$/", match
    length rx80_eos, rx80_tgt
    gt rx80_pos, rx80_eos, rx80_done
    set rx80_off, 0
    lt rx80_pos, 2, rx80_start
    sub rx80_off, rx80_pos, 1
    substr rx80_tgt, rx80_tgt, rx80_off
  rx80_start:
    eq $I10, 1, rx80_restart
    if_null rx80_debug, debug_445
    rx80_cur."!cursor_debug"("START", "deflongname")
  debug_445:
    $I10 = self.'from'()
    ne $I10, -1, rxscan84_done
    goto rxscan84_scan
  rxscan84_loop:
    (rx80_pos) = rx80_cur."from"()
    inc rx80_pos
    rx80_cur."!cursor_from"(rx80_pos)
    ge rx80_pos, rx80_eos, rxscan84_done
  rxscan84_scan:
    set_addr $I10, rxscan84_loop
    rx80_cur."!mark_push"(0, rx80_pos, $I10)
  rxscan84_done:
.annotate 'line', 48
  # rx subrule "identifier" subtype=capture negate=
    rx80_cur."!cursor_pos"(rx80_pos)
    $P10 = rx80_cur."identifier"()
    unless $P10, rx80_fail
    rx80_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx80_pos = $P10."pos"()
  # rx rxquantr85 ** 0..1
    set_addr $I10, rxquantr85_done
    rx80_cur."!mark_push"(0, rx80_pos, $I10)
  rxquantr85_loop:
  # rx subrule "colonpair" subtype=capture negate=
    rx80_cur."!cursor_pos"(rx80_pos)
    $P10 = rx80_cur."colonpair"()
    unless $P10, rx80_fail
    goto rxsubrule86_pass
  rxsubrule86_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx80_fail
  rxsubrule86_pass:
    set_addr $I10, rxsubrule86_back
    rx80_cur."!mark_push"(0, rx80_pos, $I10, $P10)
    $P10."!cursor_names"("colonpair")
    rx80_pos = $P10."pos"()
    set_addr $I10, rxquantr85_done
    (rx80_rep) = rx80_cur."!mark_commit"($I10)
  rxquantr85_done:
.annotate 'line', 47
  # rx pass
    rx80_cur."!cursor_pass"(rx80_pos, "deflongname")
    if_null rx80_debug, debug_446
    rx80_cur."!cursor_debug"("PASS", "deflongname", " at pos=", rx80_pos)
  debug_446:
    .return (rx80_cur)
  rx80_restart:
.annotate 'line', 4
    if_null rx80_debug, debug_447
    rx80_cur."!cursor_debug"("NEXT", "deflongname")
  debug_447:
  rx80_fail:
    (rx80_rep, rx80_pos, $I10, $P10) = rx80_cur."!mark_fail"(0)
    lt rx80_pos, -1, rx80_done
    eq rx80_pos, -1, rx80_fail
    jump $I10
  rx80_done:
    rx80_cur."!cursor_fail"()
    if_null rx80_debug, debug_448
    rx80_cur."!cursor_debug"("FAIL", "deflongname")
  debug_448:
    .return (rx80_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__deflongname"  :nsentry("!PREFIX__deflongname") :subid("18_1300057348.719") :method
.annotate 'line', 4
    $P82 = self."!PREFIX__!subrule"("identifier", "")
    new $P83, "ResizablePMCArray"
    push $P83, $P82
    .return ($P83)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ENDSTMT"  :subid("19_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx88_tgt
    .local int rx88_pos
    .local int rx88_off
    .local int rx88_eos
    .local int rx88_rep
    .local pmc rx88_cur
    .local pmc rx88_debug
    (rx88_cur, rx88_pos, rx88_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx88_cur
    .local pmc match
    .lex "$/", match
    length rx88_eos, rx88_tgt
    gt rx88_pos, rx88_eos, rx88_done
    set rx88_off, 0
    lt rx88_pos, 2, rx88_start
    sub rx88_off, rx88_pos, 1
    substr rx88_tgt, rx88_tgt, rx88_off
  rx88_start:
    eq $I10, 1, rx88_restart
    if_null rx88_debug, debug_449
    rx88_cur."!cursor_debug"("START", "ENDSTMT")
  debug_449:
    $I10 = self.'from'()
    ne $I10, -1, rxscan91_done
    goto rxscan91_scan
  rxscan91_loop:
    (rx88_pos) = rx88_cur."from"()
    inc rx88_pos
    rx88_cur."!cursor_from"(rx88_pos)
    ge rx88_pos, rx88_eos, rxscan91_done
  rxscan91_scan:
    set_addr $I10, rxscan91_loop
    rx88_cur."!mark_push"(0, rx88_pos, $I10)
  rxscan91_done:
.annotate 'line', 55
  # rx rxquantr92 ** 0..1
    set_addr $I10, rxquantr92_done
    rx88_cur."!mark_push"(0, rx88_pos, $I10)
  rxquantr92_loop:
  alt93_0:
.annotate 'line', 52
    set_addr $I10, alt93_1
    rx88_cur."!mark_push"(0, rx88_pos, $I10)
.annotate 'line', 53
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx88_pos, rx88_off
    set rx88_rep, 0
    sub $I12, rx88_eos, rx88_pos
  rxenumcharlistq94_loop:
    le $I12, 0, rxenumcharlistq94_done
    substr $S10, rx88_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq94_done
    inc rx88_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq94_loop
  rxenumcharlistq94_done:
    add rx88_pos, rx88_pos, rx88_rep
  # rxanchor eol
    sub $I10, rx88_pos, rx88_off
    is_cclass $I11, 4096, rx88_tgt, $I10
    if $I11, rxanchor95_done
    ne rx88_pos, rx88_eos, rx88_fail
    eq rx88_pos, 0, rxanchor95_done
    dec $I10
    is_cclass $I11, 4096, rx88_tgt, $I10
    if $I11, rx88_fail
  rxanchor95_done:
  # rx subrule "ws" subtype=method negate=
    rx88_cur."!cursor_pos"(rx88_pos)
    $P10 = rx88_cur."ws"()
    unless $P10, rx88_fail
    rx88_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx88_cur."!cursor_pos"(rx88_pos)
    $P10 = rx88_cur."MARKER"("endstmt")
    unless $P10, rx88_fail
    goto alt93_end
  alt93_1:
.annotate 'line', 54
  # rx rxquantr96 ** 0..1
    set_addr $I10, rxquantr96_done
    rx88_cur."!mark_push"(0, rx88_pos, $I10)
  rxquantr96_loop:
  # rx subrule "unv" subtype=method negate=
    rx88_cur."!cursor_pos"(rx88_pos)
    $P10 = rx88_cur."unv"()
    unless $P10, rx88_fail
    goto rxsubrule97_pass
  rxsubrule97_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx88_fail
  rxsubrule97_pass:
    set_addr $I10, rxsubrule97_back
    rx88_cur."!mark_push"(0, rx88_pos, $I10, $P10)
    rx88_pos = $P10."pos"()
    set_addr $I10, rxquantr96_done
    (rx88_rep) = rx88_cur."!mark_commit"($I10)
  rxquantr96_done:
  # rxanchor eol
    sub $I10, rx88_pos, rx88_off
    is_cclass $I11, 4096, rx88_tgt, $I10
    if $I11, rxanchor98_done
    ne rx88_pos, rx88_eos, rx88_fail
    eq rx88_pos, 0, rxanchor98_done
    dec $I10
    is_cclass $I11, 4096, rx88_tgt, $I10
    if $I11, rx88_fail
  rxanchor98_done:
  # rx subrule "ws" subtype=method negate=
    rx88_cur."!cursor_pos"(rx88_pos)
    $P10 = rx88_cur."ws"()
    unless $P10, rx88_fail
    rx88_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx88_cur."!cursor_pos"(rx88_pos)
    $P10 = rx88_cur."MARKER"("endstmt")
    unless $P10, rx88_fail
  alt93_end:
.annotate 'line', 55
    set_addr $I10, rxquantr92_done
    (rx88_rep) = rx88_cur."!mark_commit"($I10)
  rxquantr92_done:
.annotate 'line', 51
  # rx pass
    rx88_cur."!cursor_pass"(rx88_pos, "ENDSTMT")
    if_null rx88_debug, debug_450
    rx88_cur."!cursor_debug"("PASS", "ENDSTMT", " at pos=", rx88_pos)
  debug_450:
    .return (rx88_cur)
  rx88_restart:
.annotate 'line', 4
    if_null rx88_debug, debug_451
    rx88_cur."!cursor_debug"("NEXT", "ENDSTMT")
  debug_451:
  rx88_fail:
    (rx88_rep, rx88_pos, $I10, $P10) = rx88_cur."!mark_fail"(0)
    lt rx88_pos, -1, rx88_done
    eq rx88_pos, -1, rx88_fail
    jump $I10
  rx88_done:
    rx88_cur."!cursor_fail"()
    if_null rx88_debug, debug_452
    rx88_cur."!cursor_debug"("FAIL", "ENDSTMT")
  debug_452:
    .return (rx88_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ENDSTMT"  :nsentry("!PREFIX__ENDSTMT") :subid("20_1300057348.719") :method
.annotate 'line', 4
    new $P90, "ResizablePMCArray"
    push $P90, ""
    .return ($P90)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ws"  :subid("21_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx100_tgt
    .local int rx100_pos
    .local int rx100_off
    .local int rx100_eos
    .local int rx100_rep
    .local pmc rx100_cur
    .local pmc rx100_debug
    (rx100_cur, rx100_pos, rx100_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx100_cur
    .local pmc match
    .lex "$/", match
    length rx100_eos, rx100_tgt
    gt rx100_pos, rx100_eos, rx100_done
    set rx100_off, 0
    lt rx100_pos, 2, rx100_start
    sub rx100_off, rx100_pos, 1
    substr rx100_tgt, rx100_tgt, rx100_off
  rx100_start:
    eq $I10, 1, rx100_restart
    if_null rx100_debug, debug_453
    rx100_cur."!cursor_debug"("START", "ws")
  debug_453:
    $I10 = self.'from'()
    ne $I10, -1, rxscan103_done
    goto rxscan103_scan
  rxscan103_loop:
    (rx100_pos) = rx100_cur."from"()
    inc rx100_pos
    rx100_cur."!cursor_from"(rx100_pos)
    ge rx100_pos, rx100_eos, rxscan103_done
  rxscan103_scan:
    set_addr $I10, rxscan103_loop
    rx100_cur."!mark_push"(0, rx100_pos, $I10)
  rxscan103_done:
  alt104_0:
.annotate 'line', 58
    set_addr $I10, alt104_1
    rx100_cur."!mark_push"(0, rx100_pos, $I10)
.annotate 'line', 59
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx100_cur."!cursor_pos"(rx100_pos)
    $P10 = rx100_cur."MARKED"("ws")
    unless $P10, rx100_fail
    goto alt104_end
  alt104_1:
.annotate 'line', 60
  # rx subrule "ww" subtype=zerowidth negate=1
    rx100_cur."!cursor_pos"(rx100_pos)
    $P10 = rx100_cur."ww"()
    if $P10, rx100_fail
.annotate 'line', 65
  # rx rxquantr105 ** 0..*
    set_addr $I10, rxquantr105_done
    rx100_cur."!mark_push"(0, rx100_pos, $I10)
  rxquantr105_loop:
  alt106_0:
.annotate 'line', 61
    set_addr $I10, alt106_1
    rx100_cur."!mark_push"(0, rx100_pos, $I10)
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx100_pos, rx100_off
    set rx100_rep, 0
    sub $I12, rx100_eos, rx100_pos
  rxenumcharlistq107_loop:
    le $I12, 0, rxenumcharlistq107_done
    substr $S10, rx100_tgt, $I10, 1
    index $I11, unicode:"\n\x{b}\f\r\x{85}\u2028\u2029", $S10
    lt $I11, 0, rxenumcharlistq107_done
    inc rx100_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq107_loop
  rxenumcharlistq107_done:
    lt rx100_rep, 1, rx100_fail
    add rx100_pos, rx100_pos, rx100_rep
    goto alt106_end
  alt106_1:
    set_addr $I10, alt106_2
    rx100_cur."!mark_push"(0, rx100_pos, $I10)
.annotate 'line', 62
  # rx literal  "#"
    add $I11, rx100_pos, 1
    gt $I11, rx100_eos, rx100_fail
    sub $I11, rx100_pos, rx100_off
    ord $I11, rx100_tgt, $I11
    ne $I11, 35, rx100_fail
    add rx100_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx100_pos, rx100_off
    find_cclass $I11, 4096, rx100_tgt, $I10, rx100_eos
    add rx100_pos, rx100_off, $I11
    goto alt106_end
  alt106_2:
    set_addr $I10, alt106_3
    rx100_cur."!mark_push"(0, rx100_pos, $I10)
.annotate 'line', 63
  # rxanchor bol
    eq rx100_pos, 0, rxanchor108_done
    ge rx100_pos, rx100_eos, rx100_fail
    sub $I10, rx100_pos, rx100_off
    dec $I10
    is_cclass $I11, 4096, rx100_tgt, $I10
    unless $I11, rx100_fail
  rxanchor108_done:
  # rx subrule "pod_comment" subtype=method negate=
    rx100_cur."!cursor_pos"(rx100_pos)
    $P10 = rx100_cur."pod_comment"()
    unless $P10, rx100_fail
    rx100_pos = $P10."pos"()
    goto alt106_end
  alt106_3:
.annotate 'line', 64
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx100_pos, rx100_off
    set rx100_rep, 0
    sub $I12, rx100_eos, rx100_pos
  rxenumcharlistq109_loop:
    le $I12, 0, rxenumcharlistq109_done
    substr $S10, rx100_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq109_done
    inc rx100_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq109_loop
  rxenumcharlistq109_done:
    lt rx100_rep, 1, rx100_fail
    add rx100_pos, rx100_pos, rx100_rep
  alt106_end:
.annotate 'line', 65
    set_addr $I10, rxquantr105_done
    (rx100_rep) = rx100_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr105_done
    rx100_cur."!mark_push"(rx100_rep, rx100_pos, $I10)
    goto rxquantr105_loop
  rxquantr105_done:
.annotate 'line', 66
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx100_cur."!cursor_pos"(rx100_pos)
    $P10 = rx100_cur."MARKER"("ws")
    unless $P10, rx100_fail
  alt104_end:
.annotate 'line', 58
  # rx pass
    rx100_cur."!cursor_pass"(rx100_pos, "ws")
    if_null rx100_debug, debug_454
    rx100_cur."!cursor_debug"("PASS", "ws", " at pos=", rx100_pos)
  debug_454:
    .return (rx100_cur)
  rx100_restart:
.annotate 'line', 4
    if_null rx100_debug, debug_455
    rx100_cur."!cursor_debug"("NEXT", "ws")
  debug_455:
  rx100_fail:
    (rx100_rep, rx100_pos, $I10, $P10) = rx100_cur."!mark_fail"(0)
    lt rx100_pos, -1, rx100_done
    eq rx100_pos, -1, rx100_fail
    jump $I10
  rx100_done:
    rx100_cur."!cursor_fail"()
    if_null rx100_debug, debug_456
    rx100_cur."!cursor_debug"("FAIL", "ws")
  debug_456:
    .return (rx100_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ws"  :nsentry("!PREFIX__ws") :subid("22_1300057348.719") :method
.annotate 'line', 4
    new $P102, "ResizablePMCArray"
    push $P102, ""
    push $P102, ""
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "unv"  :subid("23_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P118 = "25_1300057348.719" 
    capture_lex $P118
    .local string rx111_tgt
    .local int rx111_pos
    .local int rx111_off
    .local int rx111_eos
    .local int rx111_rep
    .local pmc rx111_cur
    .local pmc rx111_debug
    (rx111_cur, rx111_pos, rx111_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx111_cur
    .local pmc match
    .lex "$/", match
    length rx111_eos, rx111_tgt
    gt rx111_pos, rx111_eos, rx111_done
    set rx111_off, 0
    lt rx111_pos, 2, rx111_start
    sub rx111_off, rx111_pos, 1
    substr rx111_tgt, rx111_tgt, rx111_off
  rx111_start:
    eq $I10, 1, rx111_restart
    if_null rx111_debug, debug_457
    rx111_cur."!cursor_debug"("START", "unv")
  debug_457:
    $I10 = self.'from'()
    ne $I10, -1, rxscan114_done
    goto rxscan114_scan
  rxscan114_loop:
    (rx111_pos) = rx111_cur."from"()
    inc rx111_pos
    rx111_cur."!cursor_from"(rx111_pos)
    ge rx111_pos, rx111_eos, rxscan114_done
  rxscan114_scan:
    set_addr $I10, rxscan114_loop
    rx111_cur."!mark_push"(0, rx111_pos, $I10)
  rxscan114_done:
  alt115_0:
.annotate 'line', 71
    set_addr $I10, alt115_1
    rx111_cur."!mark_push"(0, rx111_pos, $I10)
.annotate 'line', 72
  # rxanchor bol
    eq rx111_pos, 0, rxanchor116_done
    ge rx111_pos, rx111_eos, rx111_fail
    sub $I10, rx111_pos, rx111_off
    dec $I10
    is_cclass $I11, 4096, rx111_tgt, $I10
    unless $I11, rx111_fail
  rxanchor116_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx111_cur."!cursor_pos"(rx111_pos)
    .const 'Sub' $P118 = "25_1300057348.719" 
    capture_lex $P118
    $P10 = rx111_cur."before"($P118)
    unless $P10, rx111_fail
  # rx subrule "pod_comment" subtype=method negate=
    rx111_cur."!cursor_pos"(rx111_pos)
    $P10 = rx111_cur."pod_comment"()
    unless $P10, rx111_fail
    rx111_pos = $P10."pos"()
    goto alt115_end
  alt115_1:
    set_addr $I10, alt115_2
    rx111_cur."!mark_push"(0, rx111_pos, $I10)
.annotate 'line', 73
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx111_pos, rx111_off
    set rx111_rep, 0
    sub $I12, rx111_eos, rx111_pos
  rxenumcharlistq123_loop:
    le $I12, 0, rxenumcharlistq123_done
    substr $S10, rx111_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq123_done
    inc rx111_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq123_loop
  rxenumcharlistq123_done:
    add rx111_pos, rx111_pos, rx111_rep
  # rx literal  "#"
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail
    sub $I11, rx111_pos, rx111_off
    ord $I11, rx111_tgt, $I11
    ne $I11, 35, rx111_fail
    add rx111_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx111_pos, rx111_off
    find_cclass $I11, 4096, rx111_tgt, $I10, rx111_eos
    add rx111_pos, rx111_off, $I11
    goto alt115_end
  alt115_2:
.annotate 'line', 74
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx111_pos, rx111_off
    set rx111_rep, 0
    sub $I12, rx111_eos, rx111_pos
  rxenumcharlistq124_loop:
    le $I12, 0, rxenumcharlistq124_done
    substr $S10, rx111_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq124_done
    inc rx111_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq124_loop
  rxenumcharlistq124_done:
    lt rx111_rep, 1, rx111_fail
    add rx111_pos, rx111_pos, rx111_rep
  alt115_end:
.annotate 'line', 69
  # rx pass
    rx111_cur."!cursor_pass"(rx111_pos, "unv")
    if_null rx111_debug, debug_462
    rx111_cur."!cursor_debug"("PASS", "unv", " at pos=", rx111_pos)
  debug_462:
    .return (rx111_cur)
  rx111_restart:
.annotate 'line', 4
    if_null rx111_debug, debug_463
    rx111_cur."!cursor_debug"("NEXT", "unv")
  debug_463:
  rx111_fail:
    (rx111_rep, rx111_pos, $I10, $P10) = rx111_cur."!mark_fail"(0)
    lt rx111_pos, -1, rx111_done
    eq rx111_pos, -1, rx111_fail
    jump $I10
  rx111_done:
    rx111_cur."!cursor_fail"()
    if_null rx111_debug, debug_464
    rx111_cur."!cursor_debug"("FAIL", "unv")
  debug_464:
    .return (rx111_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__unv"  :nsentry("!PREFIX__unv") :subid("24_1300057348.719") :method
.annotate 'line', 4
    new $P113, "ResizablePMCArray"
    push $P113, ""
    push $P113, ""
    push $P113, ""
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block117"  :anon :subid("25_1300057348.719") :method :outer("23_1300057348.719")
.annotate 'line', 72
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_debug
    (rx119_cur, rx119_pos, rx119_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx119_cur
    .local pmc match
    .lex "$/", match
    length rx119_eos, rx119_tgt
    gt rx119_pos, rx119_eos, rx119_done
    set rx119_off, 0
    lt rx119_pos, 2, rx119_start
    sub rx119_off, rx119_pos, 1
    substr rx119_tgt, rx119_tgt, rx119_off
  rx119_start:
    eq $I10, 1, rx119_restart
    if_null rx119_debug, debug_458
    rx119_cur."!cursor_debug"("START", "")
  debug_458:
    $I10 = self.'from'()
    ne $I10, -1, rxscan120_done
    goto rxscan120_scan
  rxscan120_loop:
    (rx119_pos) = rx119_cur."from"()
    inc rx119_pos
    rx119_cur."!cursor_from"(rx119_pos)
    ge rx119_pos, rx119_eos, rxscan120_done
  rxscan120_scan:
    set_addr $I10, rxscan120_loop
    rx119_cur."!mark_push"(0, rx119_pos, $I10)
  rxscan120_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx119_pos, rx119_off
    set rx119_rep, 0
    sub $I12, rx119_eos, rx119_pos
  rxenumcharlistq121_loop:
    le $I12, 0, rxenumcharlistq121_done
    substr $S10, rx119_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq121_done
    inc rx119_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq121_loop
  rxenumcharlistq121_done:
    add rx119_pos, rx119_pos, rx119_rep
  # rx literal  "="
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail
    sub $I11, rx119_pos, rx119_off
    ord $I11, rx119_tgt, $I11
    ne $I11, 61, rx119_fail
    add rx119_pos, 1
  alt122_0:
    set_addr $I10, alt122_1
    rx119_cur."!mark_push"(0, rx119_pos, $I10)
  # rx charclass w
    ge rx119_pos, rx119_eos, rx119_fail
    sub $I10, rx119_pos, rx119_off
    is_cclass $I11, 8192, rx119_tgt, $I10
    unless $I11, rx119_fail
    inc rx119_pos
    goto alt122_end
  alt122_1:
  # rx literal  "\\"
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail
    sub $I11, rx119_pos, rx119_off
    ord $I11, rx119_tgt, $I11
    ne $I11, 92, rx119_fail
    add rx119_pos, 1
  alt122_end:
  # rx pass
    rx119_cur."!cursor_pass"(rx119_pos, "")
    if_null rx119_debug, debug_459
    rx119_cur."!cursor_debug"("PASS", "", " at pos=", rx119_pos)
  debug_459:
    .return (rx119_cur)
  rx119_restart:
    if_null rx119_debug, debug_460
    rx119_cur."!cursor_debug"("NEXT", "")
  debug_460:
  rx119_fail:
    (rx119_rep, rx119_pos, $I10, $P10) = rx119_cur."!mark_fail"(0)
    lt rx119_pos, -1, rx119_done
    eq rx119_pos, -1, rx119_fail
    jump $I10
  rx119_done:
    rx119_cur."!cursor_fail"()
    if_null rx119_debug, debug_461
    rx119_cur."!cursor_debug"("FAIL", "")
  debug_461:
    .return (rx119_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pod_comment"  :subid("26_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P157 = "28_1300057348.719" 
    capture_lex $P157
    .local string rx126_tgt
    .local int rx126_pos
    .local int rx126_off
    .local int rx126_eos
    .local int rx126_rep
    .local pmc rx126_cur
    .local pmc rx126_debug
    (rx126_cur, rx126_pos, rx126_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx126_cur
    .local pmc match
    .lex "$/", match
    length rx126_eos, rx126_tgt
    gt rx126_pos, rx126_eos, rx126_done
    set rx126_off, 0
    lt rx126_pos, 2, rx126_start
    sub rx126_off, rx126_pos, 1
    substr rx126_tgt, rx126_tgt, rx126_off
  rx126_start:
    eq $I10, 1, rx126_restart
    if_null rx126_debug, debug_465
    rx126_cur."!cursor_debug"("START", "pod_comment")
  debug_465:
    $I10 = self.'from'()
    ne $I10, -1, rxscan129_done
    goto rxscan129_scan
  rxscan129_loop:
    (rx126_pos) = rx126_cur."from"()
    inc rx126_pos
    rx126_cur."!cursor_from"(rx126_pos)
    ge rx126_pos, rx126_eos, rxscan129_done
  rxscan129_scan:
    set_addr $I10, rxscan129_loop
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
  rxscan129_done:
.annotate 'line', 79
  # rxanchor bol
    eq rx126_pos, 0, rxanchor130_done
    ge rx126_pos, rx126_eos, rx126_fail
    sub $I10, rx126_pos, rx126_off
    dec $I10
    is_cclass $I11, 4096, rx126_tgt, $I10
    unless $I11, rx126_fail
  rxanchor130_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq131_loop:
    le $I12, 0, rxenumcharlistq131_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq131_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq131_loop
  rxenumcharlistq131_done:
    add rx126_pos, rx126_pos, rx126_rep
  # rx literal  "="
    add $I11, rx126_pos, 1
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    ord $I11, rx126_tgt, $I11
    ne $I11, 61, rx126_fail
    add rx126_pos, 1
  alt132_0:
.annotate 'line', 80
    set_addr $I10, alt132_1
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
.annotate 'line', 81
  # rx literal  "begin"
    add $I11, rx126_pos, 5
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    substr $S10, rx126_tgt, $I11, 5
    ne $S10, "begin", rx126_fail
    add rx126_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq133_loop:
    le $I12, 0, rxenumcharlistq133_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq133_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq133_loop
  rxenumcharlistq133_done:
    lt rx126_rep, 1, rx126_fail
    add rx126_pos, rx126_pos, rx126_rep
  # rx literal  "END"
    add $I11, rx126_pos, 3
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    substr $S10, rx126_tgt, $I11, 3
    ne $S10, "END", rx126_fail
    add rx126_pos, 3
  # rxanchor rwb
    le rx126_pos, 0, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 8192, rx126_tgt, $I10
    if $I11, rx126_fail
    dec $I10
    is_cclass $I11, 8192, rx126_tgt, $I10
    unless $I11, rx126_fail
  alt134_0:
.annotate 'line', 82
    set_addr $I10, alt134_1
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
  # rx rxquantf135 ** 0..*
    set_addr $I10, rxquantf135_loop
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
    goto rxquantf135_done
  rxquantf135_loop:
  # rx charclass .
    ge rx126_pos, rx126_eos, rx126_fail
    inc rx126_pos
    set_addr $I10, rxquantf135_loop
    rx126_cur."!mark_push"(rx126_rep, rx126_pos, $I10)
  rxquantf135_done:
  # rx charclass nl
    ge rx126_pos, rx126_eos, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 4096, rx126_tgt, $I10
    unless $I11, rx126_fail
    substr $S10, rx126_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx126_pos, $I11
    inc rx126_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq137_loop:
    le $I12, 0, rxenumcharlistq137_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq137_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq137_loop
  rxenumcharlistq137_done:
    add rx126_pos, rx126_pos, rx126_rep
  # rx literal  "=end"
    add $I11, rx126_pos, 4
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    substr $S10, rx126_tgt, $I11, 4
    ne $S10, "=end", rx126_fail
    add rx126_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq138_loop:
    le $I12, 0, rxenumcharlistq138_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq138_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq138_loop
  rxenumcharlistq138_done:
    lt rx126_rep, 1, rx126_fail
    add rx126_pos, rx126_pos, rx126_rep
  # rx literal  "END"
    add $I11, rx126_pos, 3
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    substr $S10, rx126_tgt, $I11, 3
    ne $S10, "END", rx126_fail
    add rx126_pos, 3
  # rxanchor rwb
    le rx126_pos, 0, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 8192, rx126_tgt, $I10
    if $I11, rx126_fail
    dec $I10
    is_cclass $I11, 8192, rx126_tgt, $I10
    unless $I11, rx126_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx126_pos, rx126_off
    find_cclass $I11, 4096, rx126_tgt, $I10, rx126_eos
    add rx126_pos, rx126_off, $I11
    goto alt134_end
  alt134_1:
  # rx charclass_q . r 0..-1
    sub $I10, rx126_pos, rx126_off
    find_not_cclass $I11, 65535, rx126_tgt, $I10, rx126_eos
    add rx126_pos, rx126_off, $I11
  alt134_end:
.annotate 'line', 81
    goto alt132_end
  alt132_1:
    set_addr $I10, alt132_2
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
.annotate 'line', 83
  # rx literal  "begin"
    add $I11, rx126_pos, 5
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    substr $S10, rx126_tgt, $I11, 5
    ne $S10, "begin", rx126_fail
    add rx126_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq139_loop:
    le $I12, 0, rxenumcharlistq139_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq139_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq139_loop
  rxenumcharlistq139_done:
    lt rx126_rep, 1, rx126_fail
    add rx126_pos, rx126_pos, rx126_rep
  # rx subrule "identifier" subtype=capture negate=
    rx126_cur."!cursor_pos"(rx126_pos)
    $P10 = rx126_cur."identifier"()
    unless $P10, rx126_fail
    rx126_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx126_pos = $P10."pos"()
  alt140_0:
.annotate 'line', 84
    set_addr $I10, alt140_1
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
.annotate 'line', 85
  # rx rxquantf141 ** 0..*
    set_addr $I10, rxquantf141_loop
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
    goto rxquantf141_done
  rxquantf141_loop:
  # rx charclass .
    ge rx126_pos, rx126_eos, rx126_fail
    inc rx126_pos
    set_addr $I10, rxquantf141_loop
    rx126_cur."!mark_push"(rx126_rep, rx126_pos, $I10)
  rxquantf141_done:
  # rx charclass nl
    ge rx126_pos, rx126_eos, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 4096, rx126_tgt, $I10
    unless $I11, rx126_fail
    substr $S10, rx126_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx126_pos, $I11
    inc rx126_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq143_loop:
    le $I12, 0, rxenumcharlistq143_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq143_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq143_loop
  rxenumcharlistq143_done:
    add rx126_pos, rx126_pos, rx126_rep
  # rx literal  "=end"
    add $I11, rx126_pos, 4
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    substr $S10, rx126_tgt, $I11, 4
    ne $S10, "=end", rx126_fail
    add rx126_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq144_loop:
    le $I12, 0, rxenumcharlistq144_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq144_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq144_loop
  rxenumcharlistq144_done:
    lt rx126_rep, 1, rx126_fail
    add rx126_pos, rx126_pos, rx126_rep
  # rx subrule "!BACKREF" subtype=method negate=
    rx126_cur."!cursor_pos"(rx126_pos)
    $P10 = rx126_cur."!BACKREF"("identifier")
    unless $P10, rx126_fail
    rx126_pos = $P10."pos"()
  # rxanchor rwb
    le rx126_pos, 0, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 8192, rx126_tgt, $I10
    if $I11, rx126_fail
    dec $I10
    is_cclass $I11, 8192, rx126_tgt, $I10
    unless $I11, rx126_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx126_pos, rx126_off
    find_cclass $I11, 4096, rx126_tgt, $I10, rx126_eos
    add rx126_pos, rx126_off, $I11
    goto alt140_end
  alt140_1:
.annotate 'line', 86
  # rx subrule "panic" subtype=method negate=
    rx126_cur."!cursor_pos"(rx126_pos)
    $P10 = rx126_cur."panic"("=begin without matching =end")
    unless $P10, rx126_fail
    rx126_pos = $P10."pos"()
  alt140_end:
.annotate 'line', 83
    goto alt132_end
  alt132_2:
    set_addr $I10, alt132_3
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
.annotate 'line', 88
  # rx literal  "begin"
    add $I11, rx126_pos, 5
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    substr $S10, rx126_tgt, $I11, 5
    ne $S10, "begin", rx126_fail
    add rx126_pos, 5
  # rxanchor rwb
    le rx126_pos, 0, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 8192, rx126_tgt, $I10
    if $I11, rx126_fail
    dec $I10
    is_cclass $I11, 8192, rx126_tgt, $I10
    unless $I11, rx126_fail
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq146_loop:
    le $I12, 0, rxenumcharlistq146_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq146_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq146_loop
  rxenumcharlistq146_done:
    add rx126_pos, rx126_pos, rx126_rep
  alt147_0:
.annotate 'line', 89
    set_addr $I10, alt147_1
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
  # rxanchor eol
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 4096, rx126_tgt, $I10
    if $I11, rxanchor148_done
    ne rx126_pos, rx126_eos, rx126_fail
    eq rx126_pos, 0, rxanchor148_done
    dec $I10
    is_cclass $I11, 4096, rx126_tgt, $I10
    if $I11, rx126_fail
  rxanchor148_done:
    goto alt147_end
  alt147_1:
    set_addr $I10, alt147_2
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
  # rx literal  "#"
    add $I11, rx126_pos, 1
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    ord $I11, rx126_tgt, $I11
    ne $I11, 35, rx126_fail
    add rx126_pos, 1
    goto alt147_end
  alt147_2:
  # rx subrule "panic" subtype=method negate=
    rx126_cur."!cursor_pos"(rx126_pos)
    $P10 = rx126_cur."panic"("Unrecognized token after =begin")
    unless $P10, rx126_fail
    rx126_pos = $P10."pos"()
  alt147_end:
  alt149_0:
.annotate 'line', 90
    set_addr $I10, alt149_1
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
.annotate 'line', 91
  # rx rxquantf150 ** 0..*
    set_addr $I10, rxquantf150_loop
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
    goto rxquantf150_done
  rxquantf150_loop:
  # rx charclass .
    ge rx126_pos, rx126_eos, rx126_fail
    inc rx126_pos
    set_addr $I10, rxquantf150_loop
    rx126_cur."!mark_push"(rx126_rep, rx126_pos, $I10)
  rxquantf150_done:
  # rx charclass nl
    ge rx126_pos, rx126_eos, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 4096, rx126_tgt, $I10
    unless $I11, rx126_fail
    substr $S10, rx126_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx126_pos, $I11
    inc rx126_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx126_pos, rx126_off
    set rx126_rep, 0
    sub $I12, rx126_eos, rx126_pos
  rxenumcharlistq152_loop:
    le $I12, 0, rxenumcharlistq152_done
    substr $S10, rx126_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq152_done
    inc rx126_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq152_loop
  rxenumcharlistq152_done:
    add rx126_pos, rx126_pos, rx126_rep
  # rx literal  "=end"
    add $I11, rx126_pos, 4
    gt $I11, rx126_eos, rx126_fail
    sub $I11, rx126_pos, rx126_off
    substr $S10, rx126_tgt, $I11, 4
    ne $S10, "=end", rx126_fail
    add rx126_pos, 4
  # rxanchor rwb
    le rx126_pos, 0, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 8192, rx126_tgt, $I10
    if $I11, rx126_fail
    dec $I10
    is_cclass $I11, 8192, rx126_tgt, $I10
    unless $I11, rx126_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx126_pos, rx126_off
    find_cclass $I11, 4096, rx126_tgt, $I10, rx126_eos
    add rx126_pos, rx126_off, $I11
    goto alt149_end
  alt149_1:
.annotate 'line', 92
  # rx subrule "panic" subtype=method negate=
    rx126_cur."!cursor_pos"(rx126_pos)
    $P10 = rx126_cur."panic"("=begin without matching =end")
    unless $P10, rx126_fail
    rx126_pos = $P10."pos"()
  alt149_end:
.annotate 'line', 88
    goto alt132_end
  alt132_3:
    set_addr $I10, alt132_4
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
.annotate 'line', 94
  # rx subrule "identifier" subtype=capture negate=
    rx126_cur."!cursor_pos"(rx126_pos)
    $P10 = rx126_cur."identifier"()
    unless $P10, rx126_fail
    rx126_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx126_pos = $P10."pos"()
.annotate 'line', 95
  # rx rxquantf153 ** 0..*
    set_addr $I10, rxquantf153_loop
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
    goto rxquantf153_done
  rxquantf153_loop:
  # rx charclass .
    ge rx126_pos, rx126_eos, rx126_fail
    inc rx126_pos
    set_addr $I10, rxquantf153_loop
    rx126_cur."!mark_push"(rx126_rep, rx126_pos, $I10)
  rxquantf153_done:
  # rxanchor bol
    eq rx126_pos, 0, rxanchor155_done
    ge rx126_pos, rx126_eos, rx126_fail
    sub $I10, rx126_pos, rx126_off
    dec $I10
    is_cclass $I11, 4096, rx126_tgt, $I10
    unless $I11, rx126_fail
  rxanchor155_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx126_cur."!cursor_pos"(rx126_pos)
    .const 'Sub' $P157 = "28_1300057348.719" 
    capture_lex $P157
    $P10 = rx126_cur."before"($P157)
    unless $P10, rx126_fail
.annotate 'line', 94
    goto alt132_end
  alt132_4:
  alt163_0:
.annotate 'line', 101
    set_addr $I10, alt163_1
    rx126_cur."!mark_push"(0, rx126_pos, $I10)
  # rx charclass s
    ge rx126_pos, rx126_eos, rx126_fail
    sub $I10, rx126_pos, rx126_off
    is_cclass $I11, 32, rx126_tgt, $I10
    unless $I11, rx126_fail
    inc rx126_pos
    goto alt163_end
  alt163_1:
  # rx subrule "panic" subtype=method negate=
    rx126_cur."!cursor_pos"(rx126_pos)
    $P10 = rx126_cur."panic"("Illegal pod directive")
    unless $P10, rx126_fail
    rx126_pos = $P10."pos"()
  alt163_end:
.annotate 'line', 102
  # rx charclass_q N r 0..-1
    sub $I10, rx126_pos, rx126_off
    find_cclass $I11, 4096, rx126_tgt, $I10, rx126_eos
    add rx126_pos, rx126_off, $I11
  alt132_end:
.annotate 'line', 78
  # rx pass
    rx126_cur."!cursor_pass"(rx126_pos, "pod_comment")
    if_null rx126_debug, debug_470
    rx126_cur."!cursor_debug"("PASS", "pod_comment", " at pos=", rx126_pos)
  debug_470:
    .return (rx126_cur)
  rx126_restart:
.annotate 'line', 4
    if_null rx126_debug, debug_471
    rx126_cur."!cursor_debug"("NEXT", "pod_comment")
  debug_471:
  rx126_fail:
    (rx126_rep, rx126_pos, $I10, $P10) = rx126_cur."!mark_fail"(0)
    lt rx126_pos, -1, rx126_done
    eq rx126_pos, -1, rx126_fail
    jump $I10
  rx126_done:
    rx126_cur."!cursor_fail"()
    if_null rx126_debug, debug_472
    rx126_cur."!cursor_debug"("FAIL", "pod_comment")
  debug_472:
    .return (rx126_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pod_comment"  :nsentry("!PREFIX__pod_comment") :subid("27_1300057348.719") :method
.annotate 'line', 4
    new $P128, "ResizablePMCArray"
    push $P128, ""
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block156"  :anon :subid("28_1300057348.719") :method :outer("26_1300057348.719")
.annotate 'line', 95
    .local string rx158_tgt
    .local int rx158_pos
    .local int rx158_off
    .local int rx158_eos
    .local int rx158_rep
    .local pmc rx158_cur
    .local pmc rx158_debug
    (rx158_cur, rx158_pos, rx158_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx158_cur
    .local pmc match
    .lex "$/", match
    length rx158_eos, rx158_tgt
    gt rx158_pos, rx158_eos, rx158_done
    set rx158_off, 0
    lt rx158_pos, 2, rx158_start
    sub rx158_off, rx158_pos, 1
    substr rx158_tgt, rx158_tgt, rx158_off
  rx158_start:
    eq $I10, 1, rx158_restart
    if_null rx158_debug, debug_466
    rx158_cur."!cursor_debug"("START", "")
  debug_466:
    $I10 = self.'from'()
    ne $I10, -1, rxscan159_done
    goto rxscan159_scan
  rxscan159_loop:
    (rx158_pos) = rx158_cur."from"()
    inc rx158_pos
    rx158_cur."!cursor_from"(rx158_pos)
    ge rx158_pos, rx158_eos, rxscan159_done
  rxscan159_scan:
    set_addr $I10, rxscan159_loop
    rx158_cur."!mark_push"(0, rx158_pos, $I10)
  rxscan159_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx158_pos, rx158_off
    set rx158_rep, 0
    sub $I12, rx158_eos, rx158_pos
  rxenumcharlistq160_loop:
    le $I12, 0, rxenumcharlistq160_done
    substr $S10, rx158_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq160_done
    inc rx158_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq160_loop
  rxenumcharlistq160_done:
    add rx158_pos, rx158_pos, rx158_rep
  alt161_0:
    set_addr $I10, alt161_1
    rx158_cur."!mark_push"(0, rx158_pos, $I10)
.annotate 'line', 96
  # rx literal  "="
    add $I11, rx158_pos, 1
    gt $I11, rx158_eos, rx158_fail
    sub $I11, rx158_pos, rx158_off
    ord $I11, rx158_tgt, $I11
    ne $I11, 61, rx158_fail
    add rx158_pos, 1
.annotate 'line', 98
  # rx rxquantr162 ** 0..1
    set_addr $I10, rxquantr162_done
    rx158_cur."!mark_push"(0, rx158_pos, $I10)
  rxquantr162_loop:
.annotate 'line', 97
  # rx literal  "cut"
    add $I11, rx158_pos, 3
    gt $I11, rx158_eos, rx158_fail
    sub $I11, rx158_pos, rx158_off
    substr $S10, rx158_tgt, $I11, 3
    ne $S10, "cut", rx158_fail
    add rx158_pos, 3
  # rxanchor rwb
    le rx158_pos, 0, rx158_fail
    sub $I10, rx158_pos, rx158_off
    is_cclass $I11, 8192, rx158_tgt, $I10
    if $I11, rx158_fail
    dec $I10
    is_cclass $I11, 8192, rx158_tgt, $I10
    unless $I11, rx158_fail
.annotate 'line', 98
  # rx subrule "panic" subtype=method negate=
    rx158_cur."!cursor_pos"(rx158_pos)
    $P10 = rx158_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    unless $P10, rx158_fail
    rx158_pos = $P10."pos"()
    set_addr $I10, rxquantr162_done
    (rx158_rep) = rx158_cur."!mark_commit"($I10)
  rxquantr162_done:
.annotate 'line', 95
    goto alt161_end
  alt161_1:
.annotate 'line', 99
  # rx charclass nl
    ge rx158_pos, rx158_eos, rx158_fail
    sub $I10, rx158_pos, rx158_off
    is_cclass $I11, 4096, rx158_tgt, $I10
    unless $I11, rx158_fail
    substr $S10, rx158_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx158_pos, $I11
    inc rx158_pos
  alt161_end:
.annotate 'line', 95
  # rx pass
    rx158_cur."!cursor_pass"(rx158_pos, "")
    if_null rx158_debug, debug_467
    rx158_cur."!cursor_debug"("PASS", "", " at pos=", rx158_pos)
  debug_467:
    .return (rx158_cur)
  rx158_restart:
    if_null rx158_debug, debug_468
    rx158_cur."!cursor_debug"("NEXT", "")
  debug_468:
  rx158_fail:
    (rx158_rep, rx158_pos, $I10, $P10) = rx158_cur."!mark_fail"(0)
    lt rx158_pos, -1, rx158_done
    eq rx158_pos, -1, rx158_fail
    jump $I10
  rx158_done:
    rx158_cur."!cursor_fail"()
    if_null rx158_debug, debug_469
    rx158_cur."!cursor_debug"("FAIL", "")
  debug_469:
    .return (rx158_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "comp_unit"  :subid("29_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 110
    new $P165, "Undef"
    .lex "$*HAS_YOU_ARE_HERE", $P165
.annotate 'line', 111
    new $P166, "Undef"
    .lex "$*MAIN_SUB", $P166
.annotate 'line', 4
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_debug
    (rx167_cur, rx167_pos, rx167_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx167_cur
    .local pmc match
    .lex "$/", match
    length rx167_eos, rx167_tgt
    gt rx167_pos, rx167_eos, rx167_done
    set rx167_off, 0
    lt rx167_pos, 2, rx167_start
    sub rx167_off, rx167_pos, 1
    substr rx167_tgt, rx167_tgt, rx167_off
  rx167_start:
    eq $I10, 1, rx167_restart
    if_null rx167_debug, debug_473
    rx167_cur."!cursor_debug"("START", "comp_unit")
  debug_473:
    $I10 = self.'from'()
    ne $I10, -1, rxscan171_done
    goto rxscan171_scan
  rxscan171_loop:
    (rx167_pos) = rx167_cur."from"()
    inc rx167_pos
    rx167_cur."!cursor_from"(rx167_pos)
    ge rx167_pos, rx167_eos, rxscan171_done
  rxscan171_scan:
    set_addr $I10, rxscan171_loop
    rx167_cur."!mark_push"(0, rx167_pos, $I10)
  rxscan171_done:
.annotate 'line', 110
    rx167_cur."!cursor_pos"(rx167_pos)
    new $P172, "Integer"
    assign $P172, 0
    store_lex "$*HAS_YOU_ARE_HERE", $P172
.annotate 'line', 111
    rx167_cur."!cursor_pos"(rx167_pos)
    find_lex $P173, "$*MAIN_SUB"
    unless_null $P173, vivify_474
    get_hll_global $P173, "$MAIN_SUB"
    unless_null $P173, vivify_475
    die "Contextual $*MAIN_SUB not found"
  vivify_475:
  vivify_474:
.annotate 'line', 112
  # rx subrule "newpad" subtype=method negate=
    rx167_cur."!cursor_pos"(rx167_pos)
    $P10 = rx167_cur."newpad"()
    unless $P10, rx167_fail
    rx167_pos = $P10."pos"()
.annotate 'line', 113
  # rx subrule "outerctx" subtype=method negate=
    rx167_cur."!cursor_pos"(rx167_pos)
    $P10 = rx167_cur."outerctx"()
    unless $P10, rx167_fail
    rx167_pos = $P10."pos"()
.annotate 'line', 114
  # rx subrule "statementlist" subtype=capture negate=
    rx167_cur."!cursor_pos"(rx167_pos)
    $P10 = rx167_cur."statementlist"()
    unless $P10, rx167_fail
    rx167_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx167_pos = $P10."pos"()
  alt174_0:
.annotate 'line', 115
    set_addr $I10, alt174_1
    rx167_cur."!mark_push"(0, rx167_pos, $I10)
  # rxanchor eos
    ne rx167_pos, rx167_eos, rx167_fail
    goto alt174_end
  alt174_1:
  # rx subrule "panic" subtype=method negate=
    rx167_cur."!cursor_pos"(rx167_pos)
    $P10 = rx167_cur."panic"("Confused")
    unless $P10, rx167_fail
    rx167_pos = $P10."pos"()
  alt174_end:
.annotate 'line', 109
  # rx pass
    rx167_cur."!cursor_pass"(rx167_pos, "comp_unit")
    if_null rx167_debug, debug_476
    rx167_cur."!cursor_debug"("PASS", "comp_unit", " at pos=", rx167_pos)
  debug_476:
    .return (rx167_cur)
  rx167_restart:
.annotate 'line', 4
    if_null rx167_debug, debug_477
    rx167_cur."!cursor_debug"("NEXT", "comp_unit")
  debug_477:
  rx167_fail:
    (rx167_rep, rx167_pos, $I10, $P10) = rx167_cur."!mark_fail"(0)
    lt rx167_pos, -1, rx167_done
    eq rx167_pos, -1, rx167_fail
    jump $I10
  rx167_done:
    rx167_cur."!cursor_fail"()
    if_null rx167_debug, debug_478
    rx167_cur."!cursor_debug"("FAIL", "comp_unit")
  debug_478:
    .return (rx167_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__comp_unit"  :nsentry("!PREFIX__comp_unit") :subid("30_1300057348.719") :method
.annotate 'line', 4
    $P169 = self."!PREFIX__!subrule"("newpad", "")
    new $P170, "ResizablePMCArray"
    push $P170, $P169
    .return ($P170)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statementlist"  :subid("31_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx176_tgt
    .local int rx176_pos
    .local int rx176_off
    .local int rx176_eos
    .local int rx176_rep
    .local pmc rx176_cur
    .local pmc rx176_debug
    (rx176_cur, rx176_pos, rx176_tgt, $I10) = self."!cursor_start"()
    rx176_cur."!cursor_caparray"("statement")
    .lex unicode:"$\x{a2}", rx176_cur
    .local pmc match
    .lex "$/", match
    length rx176_eos, rx176_tgt
    gt rx176_pos, rx176_eos, rx176_done
    set rx176_off, 0
    lt rx176_pos, 2, rx176_start
    sub rx176_off, rx176_pos, 1
    substr rx176_tgt, rx176_tgt, rx176_off
  rx176_start:
    eq $I10, 1, rx176_restart
    if_null rx176_debug, debug_479
    rx176_cur."!cursor_debug"("START", "statementlist")
  debug_479:
    $I10 = self.'from'()
    ne $I10, -1, rxscan181_done
    goto rxscan181_scan
  rxscan181_loop:
    (rx176_pos) = rx176_cur."from"()
    inc rx176_pos
    rx176_cur."!cursor_from"(rx176_pos)
    ge rx176_pos, rx176_eos, rxscan181_done
  rxscan181_scan:
    set_addr $I10, rxscan181_loop
    rx176_cur."!mark_push"(0, rx176_pos, $I10)
  rxscan181_done:
  alt182_0:
.annotate 'line', 118
    set_addr $I10, alt182_1
    rx176_cur."!mark_push"(0, rx176_pos, $I10)
.annotate 'line', 119
  # rx subrule "ws" subtype=method negate=
    rx176_cur."!cursor_pos"(rx176_pos)
    $P10 = rx176_cur."ws"()
    unless $P10, rx176_fail
    rx176_pos = $P10."pos"()
  # rxanchor eos
    ne rx176_pos, rx176_eos, rx176_fail
  # rx subrule "ws" subtype=method negate=
    rx176_cur."!cursor_pos"(rx176_pos)
    $P10 = rx176_cur."ws"()
    unless $P10, rx176_fail
    rx176_pos = $P10."pos"()
    goto alt182_end
  alt182_1:
.annotate 'line', 120
  # rx subrule "ws" subtype=method negate=
    rx176_cur."!cursor_pos"(rx176_pos)
    $P10 = rx176_cur."ws"()
    unless $P10, rx176_fail
    rx176_pos = $P10."pos"()
  # rx rxquantr186 ** 0..*
    set_addr $I10, rxquantr186_done
    rx176_cur."!mark_push"(0, rx176_pos, $I10)
  rxquantr186_loop:
  # rx subrule "statement" subtype=capture negate=
    rx176_cur."!cursor_pos"(rx176_pos)
    $P10 = rx176_cur."statement"()
    unless $P10, rx176_fail
    rx176_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx176_pos = $P10."pos"()
  # rx subrule "eat_terminator" subtype=method negate=
    rx176_cur."!cursor_pos"(rx176_pos)
    $P10 = rx176_cur."eat_terminator"()
    unless $P10, rx176_fail
    rx176_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx176_cur."!cursor_pos"(rx176_pos)
    $P10 = rx176_cur."ws"()
    unless $P10, rx176_fail
    rx176_pos = $P10."pos"()
    set_addr $I10, rxquantr186_done
    (rx176_rep) = rx176_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr186_done
    rx176_cur."!mark_push"(rx176_rep, rx176_pos, $I10)
    goto rxquantr186_loop
  rxquantr186_done:
  # rx subrule "ws" subtype=method negate=
    rx176_cur."!cursor_pos"(rx176_pos)
    $P10 = rx176_cur."ws"()
    unless $P10, rx176_fail
    rx176_pos = $P10."pos"()
  alt182_end:
.annotate 'line', 118
  # rx pass
    rx176_cur."!cursor_pass"(rx176_pos, "statementlist")
    if_null rx176_debug, debug_480
    rx176_cur."!cursor_debug"("PASS", "statementlist", " at pos=", rx176_pos)
  debug_480:
    .return (rx176_cur)
  rx176_restart:
.annotate 'line', 4
    if_null rx176_debug, debug_481
    rx176_cur."!cursor_debug"("NEXT", "statementlist")
  debug_481:
  rx176_fail:
    (rx176_rep, rx176_pos, $I10, $P10) = rx176_cur."!mark_fail"(0)
    lt rx176_pos, -1, rx176_done
    eq rx176_pos, -1, rx176_fail
    jump $I10
  rx176_done:
    rx176_cur."!cursor_fail"()
    if_null rx176_debug, debug_482
    rx176_cur."!cursor_debug"("FAIL", "statementlist")
  debug_482:
    .return (rx176_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statementlist"  :nsentry("!PREFIX__statementlist") :subid("32_1300057348.719") :method
.annotate 'line', 4
    $P178 = self."!PREFIX__!subrule"("ws", "")
    $P179 = self."!PREFIX__!subrule"("ws", "")
    new $P180, "ResizablePMCArray"
    push $P180, $P178
    push $P180, $P179
    .return ($P180)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement"  :subid("33_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P195 = "35_1300057348.719" 
    capture_lex $P195
    .local string rx190_tgt
    .local int rx190_pos
    .local int rx190_off
    .local int rx190_eos
    .local int rx190_rep
    .local pmc rx190_cur
    .local pmc rx190_debug
    (rx190_cur, rx190_pos, rx190_tgt, $I10) = self."!cursor_start"()
    rx190_cur."!cursor_caparray"("statement_mod_cond", "statement_mod_loop")
    .lex unicode:"$\x{a2}", rx190_cur
    .local pmc match
    .lex "$/", match
    length rx190_eos, rx190_tgt
    gt rx190_pos, rx190_eos, rx190_done
    set rx190_off, 0
    lt rx190_pos, 2, rx190_start
    sub rx190_off, rx190_pos, 1
    substr rx190_tgt, rx190_tgt, rx190_off
  rx190_start:
    eq $I10, 1, rx190_restart
    if_null rx190_debug, debug_483
    rx190_cur."!cursor_debug"("START", "statement")
  debug_483:
    $I10 = self.'from'()
    ne $I10, -1, rxscan193_done
    goto rxscan193_scan
  rxscan193_loop:
    (rx190_pos) = rx190_cur."from"()
    inc rx190_pos
    rx190_cur."!cursor_from"(rx190_pos)
    ge rx190_pos, rx190_eos, rxscan193_done
  rxscan193_scan:
    set_addr $I10, rxscan193_loop
    rx190_cur."!mark_push"(0, rx190_pos, $I10)
  rxscan193_done:
.annotate 'line', 124
  # rx subrule "before" subtype=zerowidth negate=1
    rx190_cur."!cursor_pos"(rx190_pos)
    .const 'Sub' $P195 = "35_1300057348.719" 
    capture_lex $P195
    $P10 = rx190_cur."before"($P195)
    if $P10, rx190_fail
  alt199_0:
.annotate 'line', 125
    set_addr $I10, alt199_1
    rx190_cur."!mark_push"(0, rx190_pos, $I10)
.annotate 'line', 126
  # rx subrule "statement_control" subtype=capture negate=
    rx190_cur."!cursor_pos"(rx190_pos)
    $P10 = rx190_cur."statement_control"()
    unless $P10, rx190_fail
    rx190_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_control")
    rx190_pos = $P10."pos"()
    goto alt199_end
  alt199_1:
.annotate 'line', 127
  # rx subrule "EXPR" subtype=capture negate=
    rx190_cur."!cursor_pos"(rx190_pos)
    $P10 = rx190_cur."EXPR"()
    unless $P10, rx190_fail
    rx190_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx190_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx190_cur."!cursor_pos"(rx190_pos)
    $P10 = rx190_cur."ws"()
    unless $P10, rx190_fail
    rx190_pos = $P10."pos"()
.annotate 'line', 132
  # rx rxquantr200 ** 0..1
    set_addr $I10, rxquantr200_done
    rx190_cur."!mark_push"(0, rx190_pos, $I10)
  rxquantr200_loop:
  alt201_0:
.annotate 'line', 128
    set_addr $I10, alt201_1
    rx190_cur."!mark_push"(0, rx190_pos, $I10)
.annotate 'line', 129
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx190_cur."!cursor_pos"(rx190_pos)
    $P10 = rx190_cur."MARKED"("endstmt")
    unless $P10, rx190_fail
    goto alt201_end
  alt201_1:
    set_addr $I10, alt201_2
    rx190_cur."!mark_push"(0, rx190_pos, $I10)
.annotate 'line', 130
  # rx subrule "statement_mod_cond" subtype=capture negate=
    rx190_cur."!cursor_pos"(rx190_pos)
    $P10 = rx190_cur."statement_mod_cond"()
    unless $P10, rx190_fail
    rx190_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_cond")
    rx190_pos = $P10."pos"()
  # rx rxquantr202 ** 0..1
    set_addr $I10, rxquantr202_done
    rx190_cur."!mark_push"(0, rx190_pos, $I10)
  rxquantr202_loop:
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx190_cur."!cursor_pos"(rx190_pos)
    $P10 = rx190_cur."statement_mod_loop"()
    unless $P10, rx190_fail
    goto rxsubrule203_pass
  rxsubrule203_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx190_fail
  rxsubrule203_pass:
    set_addr $I10, rxsubrule203_back
    rx190_cur."!mark_push"(0, rx190_pos, $I10, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx190_pos = $P10."pos"()
    set_addr $I10, rxquantr202_done
    (rx190_rep) = rx190_cur."!mark_commit"($I10)
  rxquantr202_done:
    goto alt201_end
  alt201_2:
.annotate 'line', 131
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx190_cur."!cursor_pos"(rx190_pos)
    $P10 = rx190_cur."statement_mod_loop"()
    unless $P10, rx190_fail
    rx190_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx190_pos = $P10."pos"()
  alt201_end:
.annotate 'line', 132
    set_addr $I10, rxquantr200_done
    (rx190_rep) = rx190_cur."!mark_commit"($I10)
  rxquantr200_done:
  alt199_end:
.annotate 'line', 123
  # rx pass
    rx190_cur."!cursor_pass"(rx190_pos, "statement")
    if_null rx190_debug, debug_488
    rx190_cur."!cursor_debug"("PASS", "statement", " at pos=", rx190_pos)
  debug_488:
    .return (rx190_cur)
  rx190_restart:
.annotate 'line', 4
    if_null rx190_debug, debug_489
    rx190_cur."!cursor_debug"("NEXT", "statement")
  debug_489:
  rx190_fail:
    (rx190_rep, rx190_pos, $I10, $P10) = rx190_cur."!mark_fail"(0)
    lt rx190_pos, -1, rx190_done
    eq rx190_pos, -1, rx190_fail
    jump $I10
  rx190_done:
    rx190_cur."!cursor_fail"()
    if_null rx190_debug, debug_490
    rx190_cur."!cursor_debug"("FAIL", "statement")
  debug_490:
    .return (rx190_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement"  :nsentry("!PREFIX__statement") :subid("34_1300057348.719") :method
.annotate 'line', 4
    new $P192, "ResizablePMCArray"
    push $P192, ""
    .return ($P192)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block194"  :anon :subid("35_1300057348.719") :method :outer("33_1300057348.719")
.annotate 'line', 124
    .local string rx196_tgt
    .local int rx196_pos
    .local int rx196_off
    .local int rx196_eos
    .local int rx196_rep
    .local pmc rx196_cur
    .local pmc rx196_debug
    (rx196_cur, rx196_pos, rx196_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx196_cur
    .local pmc match
    .lex "$/", match
    length rx196_eos, rx196_tgt
    gt rx196_pos, rx196_eos, rx196_done
    set rx196_off, 0
    lt rx196_pos, 2, rx196_start
    sub rx196_off, rx196_pos, 1
    substr rx196_tgt, rx196_tgt, rx196_off
  rx196_start:
    eq $I10, 1, rx196_restart
    if_null rx196_debug, debug_484
    rx196_cur."!cursor_debug"("START", "")
  debug_484:
    $I10 = self.'from'()
    ne $I10, -1, rxscan197_done
    goto rxscan197_scan
  rxscan197_loop:
    (rx196_pos) = rx196_cur."from"()
    inc rx196_pos
    rx196_cur."!cursor_from"(rx196_pos)
    ge rx196_pos, rx196_eos, rxscan197_done
  rxscan197_scan:
    set_addr $I10, rxscan197_loop
    rx196_cur."!mark_push"(0, rx196_pos, $I10)
  rxscan197_done:
  alt198_0:
    set_addr $I10, alt198_1
    rx196_cur."!mark_push"(0, rx196_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx196_pos, rx196_eos, rx196_fail
    sub $I10, rx196_pos, rx196_off
    substr $S10, rx196_tgt, $I10, 1
    index $I11, "])}", $S10
    lt $I11, 0, rx196_fail
    inc rx196_pos
    goto alt198_end
  alt198_1:
  # rxanchor eos
    ne rx196_pos, rx196_eos, rx196_fail
  alt198_end:
  # rx pass
    rx196_cur."!cursor_pass"(rx196_pos, "")
    if_null rx196_debug, debug_485
    rx196_cur."!cursor_debug"("PASS", "", " at pos=", rx196_pos)
  debug_485:
    .return (rx196_cur)
  rx196_restart:
    if_null rx196_debug, debug_486
    rx196_cur."!cursor_debug"("NEXT", "")
  debug_486:
  rx196_fail:
    (rx196_rep, rx196_pos, $I10, $P10) = rx196_cur."!mark_fail"(0)
    lt rx196_pos, -1, rx196_done
    eq rx196_pos, -1, rx196_fail
    jump $I10
  rx196_done:
    rx196_cur."!cursor_fail"()
    if_null rx196_debug, debug_487
    rx196_cur."!cursor_debug"("FAIL", "")
  debug_487:
    .return (rx196_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "eat_terminator"  :subid("36_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx205_tgt
    .local int rx205_pos
    .local int rx205_off
    .local int rx205_eos
    .local int rx205_rep
    .local pmc rx205_cur
    .local pmc rx205_debug
    (rx205_cur, rx205_pos, rx205_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx205_cur
    .local pmc match
    .lex "$/", match
    length rx205_eos, rx205_tgt
    gt rx205_pos, rx205_eos, rx205_done
    set rx205_off, 0
    lt rx205_pos, 2, rx205_start
    sub rx205_off, rx205_pos, 1
    substr rx205_tgt, rx205_tgt, rx205_off
  rx205_start:
    eq $I10, 1, rx205_restart
    if_null rx205_debug, debug_491
    rx205_cur."!cursor_debug"("START", "eat_terminator")
  debug_491:
    $I10 = self.'from'()
    ne $I10, -1, rxscan208_done
    goto rxscan208_scan
  rxscan208_loop:
    (rx205_pos) = rx205_cur."from"()
    inc rx205_pos
    rx205_cur."!cursor_from"(rx205_pos)
    ge rx205_pos, rx205_eos, rxscan208_done
  rxscan208_scan:
    set_addr $I10, rxscan208_loop
    rx205_cur."!mark_push"(0, rx205_pos, $I10)
  rxscan208_done:
  alt209_0:
.annotate 'line', 136
    set_addr $I10, alt209_1
    rx205_cur."!mark_push"(0, rx205_pos, $I10)
.annotate 'line', 137
  # rx literal  ";"
    add $I11, rx205_pos, 1
    gt $I11, rx205_eos, rx205_fail
    sub $I11, rx205_pos, rx205_off
    ord $I11, rx205_tgt, $I11
    ne $I11, 59, rx205_fail
    add rx205_pos, 1
    goto alt209_end
  alt209_1:
    set_addr $I10, alt209_2
    rx205_cur."!mark_push"(0, rx205_pos, $I10)
.annotate 'line', 138
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx205_cur."!cursor_pos"(rx205_pos)
    $P10 = rx205_cur."MARKED"("endstmt")
    unless $P10, rx205_fail
    goto alt209_end
  alt209_2:
    set_addr $I10, alt209_3
    rx205_cur."!mark_push"(0, rx205_pos, $I10)
.annotate 'line', 139
  # rx subrule "terminator" subtype=zerowidth negate=
    rx205_cur."!cursor_pos"(rx205_pos)
    $P10 = rx205_cur."terminator"()
    unless $P10, rx205_fail
    goto alt209_end
  alt209_3:
.annotate 'line', 140
  # rxanchor eos
    ne rx205_pos, rx205_eos, rx205_fail
  alt209_end:
.annotate 'line', 136
  # rx pass
    rx205_cur."!cursor_pass"(rx205_pos, "eat_terminator")
    if_null rx205_debug, debug_492
    rx205_cur."!cursor_debug"("PASS", "eat_terminator", " at pos=", rx205_pos)
  debug_492:
    .return (rx205_cur)
  rx205_restart:
.annotate 'line', 4
    if_null rx205_debug, debug_493
    rx205_cur."!cursor_debug"("NEXT", "eat_terminator")
  debug_493:
  rx205_fail:
    (rx205_rep, rx205_pos, $I10, $P10) = rx205_cur."!mark_fail"(0)
    lt rx205_pos, -1, rx205_done
    eq rx205_pos, -1, rx205_fail
    jump $I10
  rx205_done:
    rx205_cur."!cursor_fail"()
    if_null rx205_debug, debug_494
    rx205_cur."!cursor_debug"("FAIL", "eat_terminator")
  debug_494:
    .return (rx205_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__eat_terminator"  :nsentry("!PREFIX__eat_terminator") :subid("37_1300057348.719") :method
.annotate 'line', 4
    new $P207, "ResizablePMCArray"
    push $P207, ""
    push $P207, ""
    push $P207, ""
    push $P207, ";"
    .return ($P207)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "xblock"  :subid("38_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_debug
    (rx211_cur, rx211_pos, rx211_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx211_cur
    .local pmc match
    .lex "$/", match
    length rx211_eos, rx211_tgt
    gt rx211_pos, rx211_eos, rx211_done
    set rx211_off, 0
    lt rx211_pos, 2, rx211_start
    sub rx211_off, rx211_pos, 1
    substr rx211_tgt, rx211_tgt, rx211_off
  rx211_start:
    eq $I10, 1, rx211_restart
    if_null rx211_debug, debug_495
    rx211_cur."!cursor_debug"("START", "xblock")
  debug_495:
    $I10 = self.'from'()
    ne $I10, -1, rxscan215_done
    goto rxscan215_scan
  rxscan215_loop:
    (rx211_pos) = rx211_cur."from"()
    inc rx211_pos
    rx211_cur."!cursor_from"(rx211_pos)
    ge rx211_pos, rx211_eos, rxscan215_done
  rxscan215_scan:
    set_addr $I10, rxscan215_loop
    rx211_cur."!mark_push"(0, rx211_pos, $I10)
  rxscan215_done:
.annotate 'line', 144
  # rx subrule "EXPR" subtype=capture negate=
    rx211_cur."!cursor_pos"(rx211_pos)
    $P10 = rx211_cur."EXPR"()
    unless $P10, rx211_fail
    rx211_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx211_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx211_cur."!cursor_pos"(rx211_pos)
    $P10 = rx211_cur."ws"()
    unless $P10, rx211_fail
    rx211_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx211_cur."!cursor_pos"(rx211_pos)
    $P10 = rx211_cur."pblock"()
    unless $P10, rx211_fail
    rx211_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx211_pos = $P10."pos"()
.annotate 'line', 143
  # rx pass
    rx211_cur."!cursor_pass"(rx211_pos, "xblock")
    if_null rx211_debug, debug_496
    rx211_cur."!cursor_debug"("PASS", "xblock", " at pos=", rx211_pos)
  debug_496:
    .return (rx211_cur)
  rx211_restart:
.annotate 'line', 4
    if_null rx211_debug, debug_497
    rx211_cur."!cursor_debug"("NEXT", "xblock")
  debug_497:
  rx211_fail:
    (rx211_rep, rx211_pos, $I10, $P10) = rx211_cur."!mark_fail"(0)
    lt rx211_pos, -1, rx211_done
    eq rx211_pos, -1, rx211_fail
    jump $I10
  rx211_done:
    rx211_cur."!cursor_fail"()
    if_null rx211_debug, debug_498
    rx211_cur."!cursor_debug"("FAIL", "xblock")
  debug_498:
    .return (rx211_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__xblock"  :nsentry("!PREFIX__xblock") :subid("39_1300057348.719") :method
.annotate 'line', 4
    $P213 = self."!PREFIX__!subrule"("EXPR", "")
    new $P214, "ResizablePMCArray"
    push $P214, $P213
    .return ($P214)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pblock"  :subid("40_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx217_tgt
    .local int rx217_pos
    .local int rx217_off
    .local int rx217_eos
    .local int rx217_rep
    .local pmc rx217_cur
    .local pmc rx217_debug
    (rx217_cur, rx217_pos, rx217_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx217_cur
    .local pmc match
    .lex "$/", match
    length rx217_eos, rx217_tgt
    gt rx217_pos, rx217_eos, rx217_done
    set rx217_off, 0
    lt rx217_pos, 2, rx217_start
    sub rx217_off, rx217_pos, 1
    substr rx217_tgt, rx217_tgt, rx217_off
  rx217_start:
    eq $I10, 1, rx217_restart
    if_null rx217_debug, debug_499
    rx217_cur."!cursor_debug"("START", "pblock")
  debug_499:
    $I10 = self.'from'()
    ne $I10, -1, rxscan222_done
    goto rxscan222_scan
  rxscan222_loop:
    (rx217_pos) = rx217_cur."from"()
    inc rx217_pos
    rx217_cur."!cursor_from"(rx217_pos)
    ge rx217_pos, rx217_eos, rxscan222_done
  rxscan222_scan:
    set_addr $I10, rxscan222_loop
    rx217_cur."!mark_push"(0, rx217_pos, $I10)
  rxscan222_done:
  alt223_0:
.annotate 'line', 147
    set_addr $I10, alt223_1
    rx217_cur."!mark_push"(0, rx217_pos, $I10)
.annotate 'line', 148
  # rx subrule "lambda" subtype=method negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."lambda"()
    unless $P10, rx217_fail
    rx217_pos = $P10."pos"()
.annotate 'line', 149
  # rx subrule "newpad" subtype=method negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."newpad"()
    unless $P10, rx217_fail
    rx217_pos = $P10."pos"()
.annotate 'line', 150
  # rx subrule "signature" subtype=capture negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."signature"()
    unless $P10, rx217_fail
    rx217_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx217_pos = $P10."pos"()
.annotate 'line', 151
  # rx subrule "blockoid" subtype=capture negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."blockoid"()
    unless $P10, rx217_fail
    rx217_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx217_pos = $P10."pos"()
.annotate 'line', 148
    goto alt223_end
  alt223_1:
    set_addr $I10, alt223_2
    rx217_cur."!mark_push"(0, rx217_pos, $I10)
.annotate 'line', 152
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx217_pos, rx217_off
    substr $S10, rx217_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx217_fail
.annotate 'line', 153
  # rx subrule "newpad" subtype=method negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."newpad"()
    unless $P10, rx217_fail
    rx217_pos = $P10."pos"()
.annotate 'line', 154
  # rx subrule "blockoid" subtype=capture negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."blockoid"()
    unless $P10, rx217_fail
    rx217_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx217_pos = $P10."pos"()
.annotate 'line', 152
    goto alt223_end
  alt223_2:
.annotate 'line', 155
  # rx subrule "panic" subtype=method negate=
    rx217_cur."!cursor_pos"(rx217_pos)
    $P10 = rx217_cur."panic"("Missing block")
    unless $P10, rx217_fail
    rx217_pos = $P10."pos"()
  alt223_end:
.annotate 'line', 147
  # rx pass
    rx217_cur."!cursor_pass"(rx217_pos, "pblock")
    if_null rx217_debug, debug_500
    rx217_cur."!cursor_debug"("PASS", "pblock", " at pos=", rx217_pos)
  debug_500:
    .return (rx217_cur)
  rx217_restart:
.annotate 'line', 4
    if_null rx217_debug, debug_501
    rx217_cur."!cursor_debug"("NEXT", "pblock")
  debug_501:
  rx217_fail:
    (rx217_rep, rx217_pos, $I10, $P10) = rx217_cur."!mark_fail"(0)
    lt rx217_pos, -1, rx217_done
    eq rx217_pos, -1, rx217_fail
    jump $I10
  rx217_done:
    rx217_cur."!cursor_fail"()
    if_null rx217_debug, debug_502
    rx217_cur."!cursor_debug"("FAIL", "pblock")
  debug_502:
    .return (rx217_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pblock"  :nsentry("!PREFIX__pblock") :subid("41_1300057348.719") :method
.annotate 'line', 4
    $P219 = self."!PREFIX__!subrule"("panic", "")
    $P220 = self."!PREFIX__!subrule"("lambda", "")
    new $P221, "ResizablePMCArray"
    push $P221, $P219
    push $P221, "{"
    push $P221, $P220
    .return ($P221)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "lambda"  :subid("42_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx225_tgt
    .local int rx225_pos
    .local int rx225_off
    .local int rx225_eos
    .local int rx225_rep
    .local pmc rx225_cur
    .local pmc rx225_debug
    (rx225_cur, rx225_pos, rx225_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx225_cur
    .local pmc match
    .lex "$/", match
    length rx225_eos, rx225_tgt
    gt rx225_pos, rx225_eos, rx225_done
    set rx225_off, 0
    lt rx225_pos, 2, rx225_start
    sub rx225_off, rx225_pos, 1
    substr rx225_tgt, rx225_tgt, rx225_off
  rx225_start:
    eq $I10, 1, rx225_restart
    if_null rx225_debug, debug_503
    rx225_cur."!cursor_debug"("START", "lambda")
  debug_503:
    $I10 = self.'from'()
    ne $I10, -1, rxscan228_done
    goto rxscan228_scan
  rxscan228_loop:
    (rx225_pos) = rx225_cur."from"()
    inc rx225_pos
    rx225_cur."!cursor_from"(rx225_pos)
    ge rx225_pos, rx225_eos, rxscan228_done
  rxscan228_scan:
    set_addr $I10, rxscan228_loop
    rx225_cur."!mark_push"(0, rx225_pos, $I10)
  rxscan228_done:
  alt229_0:
.annotate 'line', 158
    set_addr $I10, alt229_1
    rx225_cur."!mark_push"(0, rx225_pos, $I10)
  # rx literal  "->"
    add $I11, rx225_pos, 2
    gt $I11, rx225_eos, rx225_fail
    sub $I11, rx225_pos, rx225_off
    substr $S10, rx225_tgt, $I11, 2
    ne $S10, "->", rx225_fail
    add rx225_pos, 2
    goto alt229_end
  alt229_1:
  # rx literal  "<->"
    add $I11, rx225_pos, 3
    gt $I11, rx225_eos, rx225_fail
    sub $I11, rx225_pos, rx225_off
    substr $S10, rx225_tgt, $I11, 3
    ne $S10, "<->", rx225_fail
    add rx225_pos, 3
  alt229_end:
  # rx pass
    rx225_cur."!cursor_pass"(rx225_pos, "lambda")
    if_null rx225_debug, debug_504
    rx225_cur."!cursor_debug"("PASS", "lambda", " at pos=", rx225_pos)
  debug_504:
    .return (rx225_cur)
  rx225_restart:
.annotate 'line', 4
    if_null rx225_debug, debug_505
    rx225_cur."!cursor_debug"("NEXT", "lambda")
  debug_505:
  rx225_fail:
    (rx225_rep, rx225_pos, $I10, $P10) = rx225_cur."!mark_fail"(0)
    lt rx225_pos, -1, rx225_done
    eq rx225_pos, -1, rx225_fail
    jump $I10
  rx225_done:
    rx225_cur."!cursor_fail"()
    if_null rx225_debug, debug_506
    rx225_cur."!cursor_debug"("FAIL", "lambda")
  debug_506:
    .return (rx225_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__lambda"  :nsentry("!PREFIX__lambda") :subid("43_1300057348.719") :method
.annotate 'line', 4
    new $P227, "ResizablePMCArray"
    push $P227, "<->"
    push $P227, "->"
    .return ($P227)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "block"  :subid("44_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_debug
    (rx231_cur, rx231_pos, rx231_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx231_cur
    .local pmc match
    .lex "$/", match
    length rx231_eos, rx231_tgt
    gt rx231_pos, rx231_eos, rx231_done
    set rx231_off, 0
    lt rx231_pos, 2, rx231_start
    sub rx231_off, rx231_pos, 1
    substr rx231_tgt, rx231_tgt, rx231_off
  rx231_start:
    eq $I10, 1, rx231_restart
    if_null rx231_debug, debug_507
    rx231_cur."!cursor_debug"("START", "block")
  debug_507:
    $I10 = self.'from'()
    ne $I10, -1, rxscan235_done
    goto rxscan235_scan
  rxscan235_loop:
    (rx231_pos) = rx231_cur."from"()
    inc rx231_pos
    rx231_cur."!cursor_from"(rx231_pos)
    ge rx231_pos, rx231_eos, rxscan235_done
  rxscan235_scan:
    set_addr $I10, rxscan235_loop
    rx231_cur."!mark_push"(0, rx231_pos, $I10)
  rxscan235_done:
  alt236_0:
.annotate 'line', 161
    set_addr $I10, alt236_1
    rx231_cur."!mark_push"(0, rx231_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx231_pos, rx231_off
    substr $S10, rx231_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx231_fail
    goto alt236_end
  alt236_1:
  # rx subrule "panic" subtype=method negate=
    rx231_cur."!cursor_pos"(rx231_pos)
    $P10 = rx231_cur."panic"("Missing block")
    unless $P10, rx231_fail
    rx231_pos = $P10."pos"()
  alt236_end:
.annotate 'line', 162
  # rx subrule "newpad" subtype=method negate=
    rx231_cur."!cursor_pos"(rx231_pos)
    $P10 = rx231_cur."newpad"()
    unless $P10, rx231_fail
    rx231_pos = $P10."pos"()
.annotate 'line', 163
  # rx subrule "blockoid" subtype=capture negate=
    rx231_cur."!cursor_pos"(rx231_pos)
    $P10 = rx231_cur."blockoid"()
    unless $P10, rx231_fail
    rx231_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx231_pos = $P10."pos"()
.annotate 'line', 160
  # rx pass
    rx231_cur."!cursor_pass"(rx231_pos, "block")
    if_null rx231_debug, debug_508
    rx231_cur."!cursor_debug"("PASS", "block", " at pos=", rx231_pos)
  debug_508:
    .return (rx231_cur)
  rx231_restart:
.annotate 'line', 4
    if_null rx231_debug, debug_509
    rx231_cur."!cursor_debug"("NEXT", "block")
  debug_509:
  rx231_fail:
    (rx231_rep, rx231_pos, $I10, $P10) = rx231_cur."!mark_fail"(0)
    lt rx231_pos, -1, rx231_done
    eq rx231_pos, -1, rx231_fail
    jump $I10
  rx231_done:
    rx231_cur."!cursor_fail"()
    if_null rx231_debug, debug_510
    rx231_cur."!cursor_debug"("FAIL", "block")
  debug_510:
    .return (rx231_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__block"  :nsentry("!PREFIX__block") :subid("45_1300057348.719") :method
.annotate 'line', 4
    $P233 = self."!PREFIX__!subrule"("panic", "")
    new $P234, "ResizablePMCArray"
    push $P234, $P233
    push $P234, "{"
    .return ($P234)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blockoid"  :subid("46_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx238_tgt
    .local int rx238_pos
    .local int rx238_off
    .local int rx238_eos
    .local int rx238_rep
    .local pmc rx238_cur
    .local pmc rx238_debug
    (rx238_cur, rx238_pos, rx238_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx238_cur
    .local pmc match
    .lex "$/", match
    length rx238_eos, rx238_tgt
    gt rx238_pos, rx238_eos, rx238_done
    set rx238_off, 0
    lt rx238_pos, 2, rx238_start
    sub rx238_off, rx238_pos, 1
    substr rx238_tgt, rx238_tgt, rx238_off
  rx238_start:
    eq $I10, 1, rx238_restart
    if_null rx238_debug, debug_511
    rx238_cur."!cursor_debug"("START", "blockoid")
  debug_511:
    $I10 = self.'from'()
    ne $I10, -1, rxscan242_done
    goto rxscan242_scan
  rxscan242_loop:
    (rx238_pos) = rx238_cur."from"()
    inc rx238_pos
    rx238_cur."!cursor_from"(rx238_pos)
    ge rx238_pos, rx238_eos, rxscan242_done
  rxscan242_scan:
    set_addr $I10, rxscan242_loop
    rx238_cur."!mark_push"(0, rx238_pos, $I10)
  rxscan242_done:
.annotate 'line', 167
  # rx subrule "finishpad" subtype=method negate=
    rx238_cur."!cursor_pos"(rx238_pos)
    $P10 = rx238_cur."finishpad"()
    unless $P10, rx238_fail
    rx238_pos = $P10."pos"()
  alt243_0:
.annotate 'line', 168
    set_addr $I10, alt243_1
    rx238_cur."!mark_push"(0, rx238_pos, $I10)
.annotate 'line', 169
  # rx literal  "{YOU_ARE_HERE}"
    add $I11, rx238_pos, 14
    gt $I11, rx238_eos, rx238_fail
    sub $I11, rx238_pos, rx238_off
    substr $S10, rx238_tgt, $I11, 14
    ne $S10, "{YOU_ARE_HERE}", rx238_fail
    add rx238_pos, 14
  # rx subrule "you_are_here" subtype=capture negate=
    rx238_cur."!cursor_pos"(rx238_pos)
    $P10 = rx238_cur."you_are_here"()
    unless $P10, rx238_fail
    rx238_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("you_are_here")
    rx238_pos = $P10."pos"()
    goto alt243_end
  alt243_1:
.annotate 'line', 170
  # rx literal  "{"
    add $I11, rx238_pos, 1
    gt $I11, rx238_eos, rx238_fail
    sub $I11, rx238_pos, rx238_off
    ord $I11, rx238_tgt, $I11
    ne $I11, 123, rx238_fail
    add rx238_pos, 1
  # rx subrule "statementlist" subtype=capture negate=
    rx238_cur."!cursor_pos"(rx238_pos)
    $P10 = rx238_cur."statementlist"()
    unless $P10, rx238_fail
    rx238_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx238_pos = $P10."pos"()
  alt244_0:
    set_addr $I10, alt244_1
    rx238_cur."!mark_push"(0, rx238_pos, $I10)
  # rx literal  "}"
    add $I11, rx238_pos, 1
    gt $I11, rx238_eos, rx238_fail
    sub $I11, rx238_pos, rx238_off
    ord $I11, rx238_tgt, $I11
    ne $I11, 125, rx238_fail
    add rx238_pos, 1
    goto alt244_end
  alt244_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx238_cur."!cursor_pos"(rx238_pos)
    $P10 = rx238_cur."FAILGOAL"("'}'")
    unless $P10, rx238_fail
    goto rxsubrule246_pass
  rxsubrule246_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx238_fail
  rxsubrule246_pass:
    set_addr $I10, rxsubrule246_back
    rx238_cur."!mark_push"(0, rx238_pos, $I10, $P10)
    rx238_pos = $P10."pos"()
  alt244_end:
  alt243_end:
.annotate 'line', 172
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx238_cur."!cursor_pos"(rx238_pos)
    $P10 = rx238_cur."ENDSTMT"()
    unless $P10, rx238_fail
.annotate 'line', 166
  # rx pass
    rx238_cur."!cursor_pass"(rx238_pos, "blockoid")
    if_null rx238_debug, debug_512
    rx238_cur."!cursor_debug"("PASS", "blockoid", " at pos=", rx238_pos)
  debug_512:
    .return (rx238_cur)
  rx238_restart:
.annotate 'line', 4
    if_null rx238_debug, debug_513
    rx238_cur."!cursor_debug"("NEXT", "blockoid")
  debug_513:
  rx238_fail:
    (rx238_rep, rx238_pos, $I10, $P10) = rx238_cur."!mark_fail"(0)
    lt rx238_pos, -1, rx238_done
    eq rx238_pos, -1, rx238_fail
    jump $I10
  rx238_done:
    rx238_cur."!cursor_fail"()
    if_null rx238_debug, debug_514
    rx238_cur."!cursor_debug"("FAIL", "blockoid")
  debug_514:
    .return (rx238_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blockoid"  :nsentry("!PREFIX__blockoid") :subid("47_1300057348.719") :method
.annotate 'line', 4
    $P240 = self."!PREFIX__!subrule"("finishpad", "")
    new $P241, "ResizablePMCArray"
    push $P241, $P240
    .return ($P241)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "newpad"  :subid("48_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx248_tgt
    .local int rx248_pos
    .local int rx248_off
    .local int rx248_eos
    .local int rx248_rep
    .local pmc rx248_cur
    .local pmc rx248_debug
    (rx248_cur, rx248_pos, rx248_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx248_cur
    .local pmc match
    .lex "$/", match
    length rx248_eos, rx248_tgt
    gt rx248_pos, rx248_eos, rx248_done
    set rx248_off, 0
    lt rx248_pos, 2, rx248_start
    sub rx248_off, rx248_pos, 1
    substr rx248_tgt, rx248_tgt, rx248_off
  rx248_start:
    eq $I10, 1, rx248_restart
    if_null rx248_debug, debug_515
    rx248_cur."!cursor_debug"("START", "newpad")
  debug_515:
    $I10 = self.'from'()
    ne $I10, -1, rxscan251_done
    goto rxscan251_scan
  rxscan251_loop:
    (rx248_pos) = rx248_cur."from"()
    inc rx248_pos
    rx248_cur."!cursor_from"(rx248_pos)
    ge rx248_pos, rx248_eos, rxscan251_done
  rxscan251_scan:
    set_addr $I10, rxscan251_loop
    rx248_cur."!mark_push"(0, rx248_pos, $I10)
  rxscan251_done:
.annotate 'line', 175
  # rx pass
    rx248_cur."!cursor_pass"(rx248_pos, "newpad")
    if_null rx248_debug, debug_516
    rx248_cur."!cursor_debug"("PASS", "newpad", " at pos=", rx248_pos)
  debug_516:
    .return (rx248_cur)
  rx248_restart:
.annotate 'line', 4
    if_null rx248_debug, debug_517
    rx248_cur."!cursor_debug"("NEXT", "newpad")
  debug_517:
  rx248_fail:
    (rx248_rep, rx248_pos, $I10, $P10) = rx248_cur."!mark_fail"(0)
    lt rx248_pos, -1, rx248_done
    eq rx248_pos, -1, rx248_fail
    jump $I10
  rx248_done:
    rx248_cur."!cursor_fail"()
    if_null rx248_debug, debug_518
    rx248_cur."!cursor_debug"("FAIL", "newpad")
  debug_518:
    .return (rx248_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__newpad"  :nsentry("!PREFIX__newpad") :subid("49_1300057348.719") :method
.annotate 'line', 4
    new $P250, "ResizablePMCArray"
    push $P250, ""
    .return ($P250)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "outerctx"  :subid("50_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx253_tgt
    .local int rx253_pos
    .local int rx253_off
    .local int rx253_eos
    .local int rx253_rep
    .local pmc rx253_cur
    .local pmc rx253_debug
    (rx253_cur, rx253_pos, rx253_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx253_cur
    .local pmc match
    .lex "$/", match
    length rx253_eos, rx253_tgt
    gt rx253_pos, rx253_eos, rx253_done
    set rx253_off, 0
    lt rx253_pos, 2, rx253_start
    sub rx253_off, rx253_pos, 1
    substr rx253_tgt, rx253_tgt, rx253_off
  rx253_start:
    eq $I10, 1, rx253_restart
    if_null rx253_debug, debug_519
    rx253_cur."!cursor_debug"("START", "outerctx")
  debug_519:
    $I10 = self.'from'()
    ne $I10, -1, rxscan256_done
    goto rxscan256_scan
  rxscan256_loop:
    (rx253_pos) = rx253_cur."from"()
    inc rx253_pos
    rx253_cur."!cursor_from"(rx253_pos)
    ge rx253_pos, rx253_eos, rxscan256_done
  rxscan256_scan:
    set_addr $I10, rxscan256_loop
    rx253_cur."!mark_push"(0, rx253_pos, $I10)
  rxscan256_done:
.annotate 'line', 176
  # rx pass
    rx253_cur."!cursor_pass"(rx253_pos, "outerctx")
    if_null rx253_debug, debug_520
    rx253_cur."!cursor_debug"("PASS", "outerctx", " at pos=", rx253_pos)
  debug_520:
    .return (rx253_cur)
  rx253_restart:
.annotate 'line', 4
    if_null rx253_debug, debug_521
    rx253_cur."!cursor_debug"("NEXT", "outerctx")
  debug_521:
  rx253_fail:
    (rx253_rep, rx253_pos, $I10, $P10) = rx253_cur."!mark_fail"(0)
    lt rx253_pos, -1, rx253_done
    eq rx253_pos, -1, rx253_fail
    jump $I10
  rx253_done:
    rx253_cur."!cursor_fail"()
    if_null rx253_debug, debug_522
    rx253_cur."!cursor_debug"("FAIL", "outerctx")
  debug_522:
    .return (rx253_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__outerctx"  :nsentry("!PREFIX__outerctx") :subid("51_1300057348.719") :method
.annotate 'line', 4
    new $P255, "ResizablePMCArray"
    push $P255, ""
    .return ($P255)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "finishpad"  :subid("52_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx258_tgt
    .local int rx258_pos
    .local int rx258_off
    .local int rx258_eos
    .local int rx258_rep
    .local pmc rx258_cur
    .local pmc rx258_debug
    (rx258_cur, rx258_pos, rx258_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx258_cur
    .local pmc match
    .lex "$/", match
    length rx258_eos, rx258_tgt
    gt rx258_pos, rx258_eos, rx258_done
    set rx258_off, 0
    lt rx258_pos, 2, rx258_start
    sub rx258_off, rx258_pos, 1
    substr rx258_tgt, rx258_tgt, rx258_off
  rx258_start:
    eq $I10, 1, rx258_restart
    if_null rx258_debug, debug_523
    rx258_cur."!cursor_debug"("START", "finishpad")
  debug_523:
    $I10 = self.'from'()
    ne $I10, -1, rxscan261_done
    goto rxscan261_scan
  rxscan261_loop:
    (rx258_pos) = rx258_cur."from"()
    inc rx258_pos
    rx258_cur."!cursor_from"(rx258_pos)
    ge rx258_pos, rx258_eos, rxscan261_done
  rxscan261_scan:
    set_addr $I10, rxscan261_loop
    rx258_cur."!mark_push"(0, rx258_pos, $I10)
  rxscan261_done:
.annotate 'line', 177
  # rx pass
    rx258_cur."!cursor_pass"(rx258_pos, "finishpad")
    if_null rx258_debug, debug_524
    rx258_cur."!cursor_debug"("PASS", "finishpad", " at pos=", rx258_pos)
  debug_524:
    .return (rx258_cur)
  rx258_restart:
.annotate 'line', 4
    if_null rx258_debug, debug_525
    rx258_cur."!cursor_debug"("NEXT", "finishpad")
  debug_525:
  rx258_fail:
    (rx258_rep, rx258_pos, $I10, $P10) = rx258_cur."!mark_fail"(0)
    lt rx258_pos, -1, rx258_done
    eq rx258_pos, -1, rx258_fail
    jump $I10
  rx258_done:
    rx258_cur."!cursor_fail"()
    if_null rx258_debug, debug_526
    rx258_cur."!cursor_debug"("FAIL", "finishpad")
  debug_526:
    .return (rx258_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__finishpad"  :nsentry("!PREFIX__finishpad") :subid("53_1300057348.719") :method
.annotate 'line', 4
    new $P260, "ResizablePMCArray"
    push $P260, ""
    .return ($P260)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "you_are_here"  :subid("54_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx263_tgt
    .local int rx263_pos
    .local int rx263_off
    .local int rx263_eos
    .local int rx263_rep
    .local pmc rx263_cur
    .local pmc rx263_debug
    (rx263_cur, rx263_pos, rx263_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx263_cur
    .local pmc match
    .lex "$/", match
    length rx263_eos, rx263_tgt
    gt rx263_pos, rx263_eos, rx263_done
    set rx263_off, 0
    lt rx263_pos, 2, rx263_start
    sub rx263_off, rx263_pos, 1
    substr rx263_tgt, rx263_tgt, rx263_off
  rx263_start:
    eq $I10, 1, rx263_restart
    if_null rx263_debug, debug_527
    rx263_cur."!cursor_debug"("START", "you_are_here")
  debug_527:
    $I10 = self.'from'()
    ne $I10, -1, rxscan266_done
    goto rxscan266_scan
  rxscan266_loop:
    (rx263_pos) = rx263_cur."from"()
    inc rx263_pos
    rx263_cur."!cursor_from"(rx263_pos)
    ge rx263_pos, rx263_eos, rxscan266_done
  rxscan266_scan:
    set_addr $I10, rxscan266_loop
    rx263_cur."!mark_push"(0, rx263_pos, $I10)
  rxscan266_done:
.annotate 'line', 178
  # rx pass
    rx263_cur."!cursor_pass"(rx263_pos, "you_are_here")
    if_null rx263_debug, debug_528
    rx263_cur."!cursor_debug"("PASS", "you_are_here", " at pos=", rx263_pos)
  debug_528:
    .return (rx263_cur)
  rx263_restart:
.annotate 'line', 4
    if_null rx263_debug, debug_529
    rx263_cur."!cursor_debug"("NEXT", "you_are_here")
  debug_529:
  rx263_fail:
    (rx263_rep, rx263_pos, $I10, $P10) = rx263_cur."!mark_fail"(0)
    lt rx263_pos, -1, rx263_done
    eq rx263_pos, -1, rx263_fail
    jump $I10
  rx263_done:
    rx263_cur."!cursor_fail"()
    if_null rx263_debug, debug_530
    rx263_cur."!cursor_debug"("FAIL", "you_are_here")
  debug_530:
    .return (rx263_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__you_are_here"  :nsentry("!PREFIX__you_are_here") :subid("55_1300057348.719") :method
.annotate 'line', 4
    new $P265, "ResizablePMCArray"
    push $P265, ""
    .return ($P265)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator"  :subid("56_1300057348.719")
    .param pmc param_268
.annotate 'line', 180
    .lex "self", param_268
    $P269 = param_268."!protoregex"("terminator")
    .return ($P269)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator"  :subid("57_1300057348.719")
    .param pmc param_271
.annotate 'line', 180
    .lex "self", param_271
    $P272 = param_271."!PREFIX__!protoregex"("terminator")
    .return ($P272)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<;>"  :subid("58_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx274_tgt
    .local int rx274_pos
    .local int rx274_off
    .local int rx274_eos
    .local int rx274_rep
    .local pmc rx274_cur
    .local pmc rx274_debug
    (rx274_cur, rx274_pos, rx274_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx274_cur
    .local pmc match
    .lex "$/", match
    length rx274_eos, rx274_tgt
    gt rx274_pos, rx274_eos, rx274_done
    set rx274_off, 0
    lt rx274_pos, 2, rx274_start
    sub rx274_off, rx274_pos, 1
    substr rx274_tgt, rx274_tgt, rx274_off
  rx274_start:
    eq $I10, 1, rx274_restart
    if_null rx274_debug, debug_531
    rx274_cur."!cursor_debug"("START", "terminator:sym<;>")
  debug_531:
    $I10 = self.'from'()
    ne $I10, -1, rxscan277_done
    goto rxscan277_scan
  rxscan277_loop:
    (rx274_pos) = rx274_cur."from"()
    inc rx274_pos
    rx274_cur."!cursor_from"(rx274_pos)
    ge rx274_pos, rx274_eos, rxscan277_done
  rxscan277_scan:
    set_addr $I10, rxscan277_loop
    rx274_cur."!mark_push"(0, rx274_pos, $I10)
  rxscan277_done:
.annotate 'line', 182
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx274_pos, rx274_off
    substr $S10, rx274_tgt, $I10, 1
    index $I11, ";", $S10
    lt $I11, 0, rx274_fail
  # rx pass
    rx274_cur."!cursor_pass"(rx274_pos, "terminator:sym<;>")
    if_null rx274_debug, debug_532
    rx274_cur."!cursor_debug"("PASS", "terminator:sym<;>", " at pos=", rx274_pos)
  debug_532:
    .return (rx274_cur)
  rx274_restart:
.annotate 'line', 4
    if_null rx274_debug, debug_533
    rx274_cur."!cursor_debug"("NEXT", "terminator:sym<;>")
  debug_533:
  rx274_fail:
    (rx274_rep, rx274_pos, $I10, $P10) = rx274_cur."!mark_fail"(0)
    lt rx274_pos, -1, rx274_done
    eq rx274_pos, -1, rx274_fail
    jump $I10
  rx274_done:
    rx274_cur."!cursor_fail"()
    if_null rx274_debug, debug_534
    rx274_cur."!cursor_debug"("FAIL", "terminator:sym<;>")
  debug_534:
    .return (rx274_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<;>"  :nsentry("!PREFIX__terminator:sym<;>") :subid("59_1300057348.719") :method
.annotate 'line', 4
    new $P276, "ResizablePMCArray"
    push $P276, ";"
    .return ($P276)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<}>"  :subid("60_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx279_tgt
    .local int rx279_pos
    .local int rx279_off
    .local int rx279_eos
    .local int rx279_rep
    .local pmc rx279_cur
    .local pmc rx279_debug
    (rx279_cur, rx279_pos, rx279_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx279_cur
    .local pmc match
    .lex "$/", match
    length rx279_eos, rx279_tgt
    gt rx279_pos, rx279_eos, rx279_done
    set rx279_off, 0
    lt rx279_pos, 2, rx279_start
    sub rx279_off, rx279_pos, 1
    substr rx279_tgt, rx279_tgt, rx279_off
  rx279_start:
    eq $I10, 1, rx279_restart
    if_null rx279_debug, debug_535
    rx279_cur."!cursor_debug"("START", "terminator:sym<}>")
  debug_535:
    $I10 = self.'from'()
    ne $I10, -1, rxscan282_done
    goto rxscan282_scan
  rxscan282_loop:
    (rx279_pos) = rx279_cur."from"()
    inc rx279_pos
    rx279_cur."!cursor_from"(rx279_pos)
    ge rx279_pos, rx279_eos, rxscan282_done
  rxscan282_scan:
    set_addr $I10, rxscan282_loop
    rx279_cur."!mark_push"(0, rx279_pos, $I10)
  rxscan282_done:
.annotate 'line', 183
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx279_pos, rx279_off
    substr $S10, rx279_tgt, $I10, 1
    index $I11, "}", $S10
    lt $I11, 0, rx279_fail
  # rx pass
    rx279_cur."!cursor_pass"(rx279_pos, "terminator:sym<}>")
    if_null rx279_debug, debug_536
    rx279_cur."!cursor_debug"("PASS", "terminator:sym<}>", " at pos=", rx279_pos)
  debug_536:
    .return (rx279_cur)
  rx279_restart:
.annotate 'line', 4
    if_null rx279_debug, debug_537
    rx279_cur."!cursor_debug"("NEXT", "terminator:sym<}>")
  debug_537:
  rx279_fail:
    (rx279_rep, rx279_pos, $I10, $P10) = rx279_cur."!mark_fail"(0)
    lt rx279_pos, -1, rx279_done
    eq rx279_pos, -1, rx279_fail
    jump $I10
  rx279_done:
    rx279_cur."!cursor_fail"()
    if_null rx279_debug, debug_538
    rx279_cur."!cursor_debug"("FAIL", "terminator:sym<}>")
  debug_538:
    .return (rx279_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<}>"  :nsentry("!PREFIX__terminator:sym<}>") :subid("61_1300057348.719") :method
.annotate 'line', 4
    new $P281, "ResizablePMCArray"
    push $P281, "}"
    .return ($P281)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control"  :subid("62_1300057348.719")
    .param pmc param_284
.annotate 'line', 187
    .lex "self", param_284
    $P285 = param_284."!protoregex"("statement_control")
    .return ($P285)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control"  :subid("63_1300057348.719")
    .param pmc param_287
.annotate 'line', 187
    .lex "self", param_287
    $P288 = param_287."!PREFIX__!protoregex"("statement_control")
    .return ($P288)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<use>"  :subid("64_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx290_tgt
    .local int rx290_pos
    .local int rx290_off
    .local int rx290_eos
    .local int rx290_rep
    .local pmc rx290_cur
    .local pmc rx290_debug
    (rx290_cur, rx290_pos, rx290_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx290_cur
    .local pmc match
    .lex "$/", match
    length rx290_eos, rx290_tgt
    gt rx290_pos, rx290_eos, rx290_done
    set rx290_off, 0
    lt rx290_pos, 2, rx290_start
    sub rx290_off, rx290_pos, 1
    substr rx290_tgt, rx290_tgt, rx290_off
  rx290_start:
    eq $I10, 1, rx290_restart
    if_null rx290_debug, debug_539
    rx290_cur."!cursor_debug"("START", "statement_control:sym<use>")
  debug_539:
    $I10 = self.'from'()
    ne $I10, -1, rxscan293_done
    goto rxscan293_scan
  rxscan293_loop:
    (rx290_pos) = rx290_cur."from"()
    inc rx290_pos
    rx290_cur."!cursor_from"(rx290_pos)
    ge rx290_pos, rx290_eos, rxscan293_done
  rxscan293_scan:
    set_addr $I10, rxscan293_loop
    rx290_cur."!mark_push"(0, rx290_pos, $I10)
  rxscan293_done:
.annotate 'line', 190
  # rx subcapture "sym"
    set_addr $I10, rxcap_294_fail
    rx290_cur."!mark_push"(0, rx290_pos, $I10)
  # rx literal  "use"
    add $I11, rx290_pos, 3
    gt $I11, rx290_eos, rx290_fail
    sub $I11, rx290_pos, rx290_off
    substr $S10, rx290_tgt, $I11, 3
    ne $S10, "use", rx290_fail
    add rx290_pos, 3
    set_addr $I10, rxcap_294_fail
    ($I12, $I11) = rx290_cur."!mark_peek"($I10)
    rx290_cur."!cursor_pos"($I11)
    ($P10) = rx290_cur."!cursor_start"()
    $P10."!cursor_pass"(rx290_pos, "")
    rx290_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_294_done
  rxcap_294_fail:
    goto rx290_fail
  rxcap_294_done:
  # rx charclass s
    ge rx290_pos, rx290_eos, rx290_fail
    sub $I10, rx290_pos, rx290_off
    is_cclass $I11, 32, rx290_tgt, $I10
    unless $I11, rx290_fail
    inc rx290_pos
  # rx subrule "ws" subtype=method negate=
    rx290_cur."!cursor_pos"(rx290_pos)
    $P10 = rx290_cur."ws"()
    unless $P10, rx290_fail
    rx290_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx290_cur."!cursor_pos"(rx290_pos)
    $P10 = rx290_cur."name"()
    unless $P10, rx290_fail
    rx290_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx290_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx290_cur."!cursor_pos"(rx290_pos)
    $P10 = rx290_cur."ws"()
    unless $P10, rx290_fail
    rx290_pos = $P10."pos"()
.annotate 'line', 189
  # rx pass
    rx290_cur."!cursor_pass"(rx290_pos, "statement_control:sym<use>")
    if_null rx290_debug, debug_540
    rx290_cur."!cursor_debug"("PASS", "statement_control:sym<use>", " at pos=", rx290_pos)
  debug_540:
    .return (rx290_cur)
  rx290_restart:
.annotate 'line', 4
    if_null rx290_debug, debug_541
    rx290_cur."!cursor_debug"("NEXT", "statement_control:sym<use>")
  debug_541:
  rx290_fail:
    (rx290_rep, rx290_pos, $I10, $P10) = rx290_cur."!mark_fail"(0)
    lt rx290_pos, -1, rx290_done
    eq rx290_pos, -1, rx290_fail
    jump $I10
  rx290_done:
    rx290_cur."!cursor_fail"()
    if_null rx290_debug, debug_542
    rx290_cur."!cursor_debug"("FAIL", "statement_control:sym<use>")
  debug_542:
    .return (rx290_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<use>"  :nsentry("!PREFIX__statement_control:sym<use>") :subid("65_1300057348.719") :method
.annotate 'line', 4
    new $P292, "ResizablePMCArray"
    push $P292, "use"
    .return ($P292)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<if>"  :subid("66_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx298_tgt
    .local int rx298_pos
    .local int rx298_off
    .local int rx298_eos
    .local int rx298_rep
    .local pmc rx298_cur
    .local pmc rx298_debug
    (rx298_cur, rx298_pos, rx298_tgt, $I10) = self."!cursor_start"()
    rx298_cur."!cursor_caparray"("xblock", "else")
    .lex unicode:"$\x{a2}", rx298_cur
    .local pmc match
    .lex "$/", match
    length rx298_eos, rx298_tgt
    gt rx298_pos, rx298_eos, rx298_done
    set rx298_off, 0
    lt rx298_pos, 2, rx298_start
    sub rx298_off, rx298_pos, 1
    substr rx298_tgt, rx298_tgt, rx298_off
  rx298_start:
    eq $I10, 1, rx298_restart
    if_null rx298_debug, debug_543
    rx298_cur."!cursor_debug"("START", "statement_control:sym<if>")
  debug_543:
    $I10 = self.'from'()
    ne $I10, -1, rxscan301_done
    goto rxscan301_scan
  rxscan301_loop:
    (rx298_pos) = rx298_cur."from"()
    inc rx298_pos
    rx298_cur."!cursor_from"(rx298_pos)
    ge rx298_pos, rx298_eos, rxscan301_done
  rxscan301_scan:
    set_addr $I10, rxscan301_loop
    rx298_cur."!mark_push"(0, rx298_pos, $I10)
  rxscan301_done:
.annotate 'line', 194
  # rx subcapture "sym"
    set_addr $I10, rxcap_302_fail
    rx298_cur."!mark_push"(0, rx298_pos, $I10)
  # rx literal  "if"
    add $I11, rx298_pos, 2
    gt $I11, rx298_eos, rx298_fail
    sub $I11, rx298_pos, rx298_off
    substr $S10, rx298_tgt, $I11, 2
    ne $S10, "if", rx298_fail
    add rx298_pos, 2
    set_addr $I10, rxcap_302_fail
    ($I12, $I11) = rx298_cur."!mark_peek"($I10)
    rx298_cur."!cursor_pos"($I11)
    ($P10) = rx298_cur."!cursor_start"()
    $P10."!cursor_pass"(rx298_pos, "")
    rx298_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_302_done
  rxcap_302_fail:
    goto rx298_fail
  rxcap_302_done:
  # rx charclass s
    ge rx298_pos, rx298_eos, rx298_fail
    sub $I10, rx298_pos, rx298_off
    is_cclass $I11, 32, rx298_tgt, $I10
    unless $I11, rx298_fail
    inc rx298_pos
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
.annotate 'line', 195
  # rx subrule "xblock" subtype=capture negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."xblock"()
    unless $P10, rx298_fail
    rx298_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx298_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
.annotate 'line', 196
  # rx rxquantr305 ** 0..*
    set_addr $I10, rxquantr305_done
    rx298_cur."!mark_push"(0, rx298_pos, $I10)
  rxquantr305_loop:
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
  # rx literal  "elsif"
    add $I11, rx298_pos, 5
    gt $I11, rx298_eos, rx298_fail
    sub $I11, rx298_pos, rx298_off
    substr $S10, rx298_tgt, $I11, 5
    ne $S10, "elsif", rx298_fail
    add rx298_pos, 5
  # rx charclass s
    ge rx298_pos, rx298_eos, rx298_fail
    sub $I10, rx298_pos, rx298_off
    is_cclass $I11, 32, rx298_tgt, $I10
    unless $I11, rx298_fail
    inc rx298_pos
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."xblock"()
    unless $P10, rx298_fail
    rx298_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx298_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
    set_addr $I10, rxquantr305_done
    (rx298_rep) = rx298_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr305_done
    rx298_cur."!mark_push"(rx298_rep, rx298_pos, $I10)
    goto rxquantr305_loop
  rxquantr305_done:
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
.annotate 'line', 197
  # rx rxquantr310 ** 0..1
    set_addr $I10, rxquantr310_done
    rx298_cur."!mark_push"(0, rx298_pos, $I10)
  rxquantr310_loop:
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
  # rx literal  "else"
    add $I11, rx298_pos, 4
    gt $I11, rx298_eos, rx298_fail
    sub $I11, rx298_pos, rx298_off
    substr $S10, rx298_tgt, $I11, 4
    ne $S10, "else", rx298_fail
    add rx298_pos, 4
  # rx charclass s
    ge rx298_pos, rx298_eos, rx298_fail
    sub $I10, rx298_pos, rx298_off
    is_cclass $I11, 32, rx298_tgt, $I10
    unless $I11, rx298_fail
    inc rx298_pos
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."pblock"()
    unless $P10, rx298_fail
    rx298_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("else")
    rx298_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
    set_addr $I10, rxquantr310_done
    (rx298_rep) = rx298_cur."!mark_commit"($I10)
  rxquantr310_done:
  # rx subrule "ws" subtype=method negate=
    rx298_cur."!cursor_pos"(rx298_pos)
    $P10 = rx298_cur."ws"()
    unless $P10, rx298_fail
    rx298_pos = $P10."pos"()
.annotate 'line', 193
  # rx pass
    rx298_cur."!cursor_pass"(rx298_pos, "statement_control:sym<if>")
    if_null rx298_debug, debug_544
    rx298_cur."!cursor_debug"("PASS", "statement_control:sym<if>", " at pos=", rx298_pos)
  debug_544:
    .return (rx298_cur)
  rx298_restart:
.annotate 'line', 4
    if_null rx298_debug, debug_545
    rx298_cur."!cursor_debug"("NEXT", "statement_control:sym<if>")
  debug_545:
  rx298_fail:
    (rx298_rep, rx298_pos, $I10, $P10) = rx298_cur."!mark_fail"(0)
    lt rx298_pos, -1, rx298_done
    eq rx298_pos, -1, rx298_fail
    jump $I10
  rx298_done:
    rx298_cur."!cursor_fail"()
    if_null rx298_debug, debug_546
    rx298_cur."!cursor_debug"("FAIL", "statement_control:sym<if>")
  debug_546:
    .return (rx298_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<if>"  :nsentry("!PREFIX__statement_control:sym<if>") :subid("67_1300057348.719") :method
.annotate 'line', 4
    new $P300, "ResizablePMCArray"
    push $P300, "if"
    .return ($P300)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<unless>"  :subid("68_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P326 = "70_1300057348.719" 
    capture_lex $P326
    .local string rx316_tgt
    .local int rx316_pos
    .local int rx316_off
    .local int rx316_eos
    .local int rx316_rep
    .local pmc rx316_cur
    .local pmc rx316_debug
    (rx316_cur, rx316_pos, rx316_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx316_cur
    .local pmc match
    .lex "$/", match
    length rx316_eos, rx316_tgt
    gt rx316_pos, rx316_eos, rx316_done
    set rx316_off, 0
    lt rx316_pos, 2, rx316_start
    sub rx316_off, rx316_pos, 1
    substr rx316_tgt, rx316_tgt, rx316_off
  rx316_start:
    eq $I10, 1, rx316_restart
    if_null rx316_debug, debug_547
    rx316_cur."!cursor_debug"("START", "statement_control:sym<unless>")
  debug_547:
    $I10 = self.'from'()
    ne $I10, -1, rxscan319_done
    goto rxscan319_scan
  rxscan319_loop:
    (rx316_pos) = rx316_cur."from"()
    inc rx316_pos
    rx316_cur."!cursor_from"(rx316_pos)
    ge rx316_pos, rx316_eos, rxscan319_done
  rxscan319_scan:
    set_addr $I10, rxscan319_loop
    rx316_cur."!mark_push"(0, rx316_pos, $I10)
  rxscan319_done:
.annotate 'line', 201
  # rx subcapture "sym"
    set_addr $I10, rxcap_320_fail
    rx316_cur."!mark_push"(0, rx316_pos, $I10)
  # rx literal  "unless"
    add $I11, rx316_pos, 6
    gt $I11, rx316_eos, rx316_fail
    sub $I11, rx316_pos, rx316_off
    substr $S10, rx316_tgt, $I11, 6
    ne $S10, "unless", rx316_fail
    add rx316_pos, 6
    set_addr $I10, rxcap_320_fail
    ($I12, $I11) = rx316_cur."!mark_peek"($I10)
    rx316_cur."!cursor_pos"($I11)
    ($P10) = rx316_cur."!cursor_start"()
    $P10."!cursor_pass"(rx316_pos, "")
    rx316_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_320_done
  rxcap_320_fail:
    goto rx316_fail
  rxcap_320_done:
  # rx charclass s
    ge rx316_pos, rx316_eos, rx316_fail
    sub $I10, rx316_pos, rx316_off
    is_cclass $I11, 32, rx316_tgt, $I10
    unless $I11, rx316_fail
    inc rx316_pos
  # rx subrule "ws" subtype=method negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."ws"()
    unless $P10, rx316_fail
    rx316_pos = $P10."pos"()
.annotate 'line', 202
  # rx subrule "xblock" subtype=capture negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."xblock"()
    unless $P10, rx316_fail
    rx316_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx316_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."ws"()
    unless $P10, rx316_fail
    rx316_pos = $P10."pos"()
  alt323_0:
.annotate 'line', 203
    set_addr $I10, alt323_1
    rx316_cur."!mark_push"(0, rx316_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."ws"()
    unless $P10, rx316_fail
    rx316_pos = $P10."pos"()
  # rx subrule "before" subtype=zerowidth negate=1
    rx316_cur."!cursor_pos"(rx316_pos)
    .const 'Sub' $P326 = "70_1300057348.719" 
    capture_lex $P326
    $P10 = rx316_cur."before"($P326)
    if $P10, rx316_fail
  # rx subrule "ws" subtype=method negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."ws"()
    unless $P10, rx316_fail
    rx316_pos = $P10."pos"()
    goto alt323_end
  alt323_1:
  # rx subrule "ws" subtype=method negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."ws"()
    unless $P10, rx316_fail
    rx316_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    unless $P10, rx316_fail
    rx316_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."ws"()
    unless $P10, rx316_fail
    rx316_pos = $P10."pos"()
  alt323_end:
  # rx subrule "ws" subtype=method negate=
    rx316_cur."!cursor_pos"(rx316_pos)
    $P10 = rx316_cur."ws"()
    unless $P10, rx316_fail
    rx316_pos = $P10."pos"()
.annotate 'line', 200
  # rx pass
    rx316_cur."!cursor_pass"(rx316_pos, "statement_control:sym<unless>")
    if_null rx316_debug, debug_552
    rx316_cur."!cursor_debug"("PASS", "statement_control:sym<unless>", " at pos=", rx316_pos)
  debug_552:
    .return (rx316_cur)
  rx316_restart:
.annotate 'line', 4
    if_null rx316_debug, debug_553
    rx316_cur."!cursor_debug"("NEXT", "statement_control:sym<unless>")
  debug_553:
  rx316_fail:
    (rx316_rep, rx316_pos, $I10, $P10) = rx316_cur."!mark_fail"(0)
    lt rx316_pos, -1, rx316_done
    eq rx316_pos, -1, rx316_fail
    jump $I10
  rx316_done:
    rx316_cur."!cursor_fail"()
    if_null rx316_debug, debug_554
    rx316_cur."!cursor_debug"("FAIL", "statement_control:sym<unless>")
  debug_554:
    .return (rx316_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<unless>"  :nsentry("!PREFIX__statement_control:sym<unless>") :subid("69_1300057348.719") :method
.annotate 'line', 4
    new $P318, "ResizablePMCArray"
    push $P318, "unless"
    .return ($P318)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block325"  :anon :subid("70_1300057348.719") :method :outer("68_1300057348.719")
.annotate 'line', 203
    .local string rx327_tgt
    .local int rx327_pos
    .local int rx327_off
    .local int rx327_eos
    .local int rx327_rep
    .local pmc rx327_cur
    .local pmc rx327_debug
    (rx327_cur, rx327_pos, rx327_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx327_cur
    .local pmc match
    .lex "$/", match
    length rx327_eos, rx327_tgt
    gt rx327_pos, rx327_eos, rx327_done
    set rx327_off, 0
    lt rx327_pos, 2, rx327_start
    sub rx327_off, rx327_pos, 1
    substr rx327_tgt, rx327_tgt, rx327_off
  rx327_start:
    eq $I10, 1, rx327_restart
    if_null rx327_debug, debug_548
    rx327_cur."!cursor_debug"("START", "")
  debug_548:
    $I10 = self.'from'()
    ne $I10, -1, rxscan328_done
    goto rxscan328_scan
  rxscan328_loop:
    (rx327_pos) = rx327_cur."from"()
    inc rx327_pos
    rx327_cur."!cursor_from"(rx327_pos)
    ge rx327_pos, rx327_eos, rxscan328_done
  rxscan328_scan:
    set_addr $I10, rxscan328_loop
    rx327_cur."!mark_push"(0, rx327_pos, $I10)
  rxscan328_done:
  # rx literal  "else"
    add $I11, rx327_pos, 4
    gt $I11, rx327_eos, rx327_fail
    sub $I11, rx327_pos, rx327_off
    substr $S10, rx327_tgt, $I11, 4
    ne $S10, "else", rx327_fail
    add rx327_pos, 4
  # rx pass
    rx327_cur."!cursor_pass"(rx327_pos, "")
    if_null rx327_debug, debug_549
    rx327_cur."!cursor_debug"("PASS", "", " at pos=", rx327_pos)
  debug_549:
    .return (rx327_cur)
  rx327_restart:
    if_null rx327_debug, debug_550
    rx327_cur."!cursor_debug"("NEXT", "")
  debug_550:
  rx327_fail:
    (rx327_rep, rx327_pos, $I10, $P10) = rx327_cur."!mark_fail"(0)
    lt rx327_pos, -1, rx327_done
    eq rx327_pos, -1, rx327_fail
    jump $I10
  rx327_done:
    rx327_cur."!cursor_fail"()
    if_null rx327_debug, debug_551
    rx327_cur."!cursor_debug"("FAIL", "")
  debug_551:
    .return (rx327_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<while>"  :subid("71_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx334_tgt
    .local int rx334_pos
    .local int rx334_off
    .local int rx334_eos
    .local int rx334_rep
    .local pmc rx334_cur
    .local pmc rx334_debug
    (rx334_cur, rx334_pos, rx334_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx334_cur
    .local pmc match
    .lex "$/", match
    length rx334_eos, rx334_tgt
    gt rx334_pos, rx334_eos, rx334_done
    set rx334_off, 0
    lt rx334_pos, 2, rx334_start
    sub rx334_off, rx334_pos, 1
    substr rx334_tgt, rx334_tgt, rx334_off
  rx334_start:
    eq $I10, 1, rx334_restart
    if_null rx334_debug, debug_555
    rx334_cur."!cursor_debug"("START", "statement_control:sym<while>")
  debug_555:
    $I10 = self.'from'()
    ne $I10, -1, rxscan337_done
    goto rxscan337_scan
  rxscan337_loop:
    (rx334_pos) = rx334_cur."from"()
    inc rx334_pos
    rx334_cur."!cursor_from"(rx334_pos)
    ge rx334_pos, rx334_eos, rxscan337_done
  rxscan337_scan:
    set_addr $I10, rxscan337_loop
    rx334_cur."!mark_push"(0, rx334_pos, $I10)
  rxscan337_done:
.annotate 'line', 207
  # rx subcapture "sym"
    set_addr $I10, rxcap_339_fail
    rx334_cur."!mark_push"(0, rx334_pos, $I10)
  alt338_0:
    set_addr $I10, alt338_1
    rx334_cur."!mark_push"(0, rx334_pos, $I10)
  # rx literal  "while"
    add $I11, rx334_pos, 5
    gt $I11, rx334_eos, rx334_fail
    sub $I11, rx334_pos, rx334_off
    substr $S10, rx334_tgt, $I11, 5
    ne $S10, "while", rx334_fail
    add rx334_pos, 5
    goto alt338_end
  alt338_1:
  # rx literal  "until"
    add $I11, rx334_pos, 5
    gt $I11, rx334_eos, rx334_fail
    sub $I11, rx334_pos, rx334_off
    substr $S10, rx334_tgt, $I11, 5
    ne $S10, "until", rx334_fail
    add rx334_pos, 5
  alt338_end:
    set_addr $I10, rxcap_339_fail
    ($I12, $I11) = rx334_cur."!mark_peek"($I10)
    rx334_cur."!cursor_pos"($I11)
    ($P10) = rx334_cur."!cursor_start"()
    $P10."!cursor_pass"(rx334_pos, "")
    rx334_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_339_done
  rxcap_339_fail:
    goto rx334_fail
  rxcap_339_done:
  # rx charclass s
    ge rx334_pos, rx334_eos, rx334_fail
    sub $I10, rx334_pos, rx334_off
    is_cclass $I11, 32, rx334_tgt, $I10
    unless $I11, rx334_fail
    inc rx334_pos
  # rx subrule "ws" subtype=method negate=
    rx334_cur."!cursor_pos"(rx334_pos)
    $P10 = rx334_cur."ws"()
    unless $P10, rx334_fail
    rx334_pos = $P10."pos"()
.annotate 'line', 208
  # rx subrule "xblock" subtype=capture negate=
    rx334_cur."!cursor_pos"(rx334_pos)
    $P10 = rx334_cur."xblock"()
    unless $P10, rx334_fail
    rx334_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx334_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx334_cur."!cursor_pos"(rx334_pos)
    $P10 = rx334_cur."ws"()
    unless $P10, rx334_fail
    rx334_pos = $P10."pos"()
.annotate 'line', 206
  # rx pass
    rx334_cur."!cursor_pass"(rx334_pos, "statement_control:sym<while>")
    if_null rx334_debug, debug_556
    rx334_cur."!cursor_debug"("PASS", "statement_control:sym<while>", " at pos=", rx334_pos)
  debug_556:
    .return (rx334_cur)
  rx334_restart:
.annotate 'line', 4
    if_null rx334_debug, debug_557
    rx334_cur."!cursor_debug"("NEXT", "statement_control:sym<while>")
  debug_557:
  rx334_fail:
    (rx334_rep, rx334_pos, $I10, $P10) = rx334_cur."!mark_fail"(0)
    lt rx334_pos, -1, rx334_done
    eq rx334_pos, -1, rx334_fail
    jump $I10
  rx334_done:
    rx334_cur."!cursor_fail"()
    if_null rx334_debug, debug_558
    rx334_cur."!cursor_debug"("FAIL", "statement_control:sym<while>")
  debug_558:
    .return (rx334_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<while>"  :nsentry("!PREFIX__statement_control:sym<while>") :subid("72_1300057348.719") :method
.annotate 'line', 4
    new $P336, "ResizablePMCArray"
    push $P336, "until"
    push $P336, "while"
    .return ($P336)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<repeat>"  :subid("73_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx343_tgt
    .local int rx343_pos
    .local int rx343_off
    .local int rx343_eos
    .local int rx343_rep
    .local pmc rx343_cur
    .local pmc rx343_debug
    (rx343_cur, rx343_pos, rx343_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx343_cur
    .local pmc match
    .lex "$/", match
    length rx343_eos, rx343_tgt
    gt rx343_pos, rx343_eos, rx343_done
    set rx343_off, 0
    lt rx343_pos, 2, rx343_start
    sub rx343_off, rx343_pos, 1
    substr rx343_tgt, rx343_tgt, rx343_off
  rx343_start:
    eq $I10, 1, rx343_restart
    if_null rx343_debug, debug_559
    rx343_cur."!cursor_debug"("START", "statement_control:sym<repeat>")
  debug_559:
    $I10 = self.'from'()
    ne $I10, -1, rxscan346_done
    goto rxscan346_scan
  rxscan346_loop:
    (rx343_pos) = rx343_cur."from"()
    inc rx343_pos
    rx343_cur."!cursor_from"(rx343_pos)
    ge rx343_pos, rx343_eos, rxscan346_done
  rxscan346_scan:
    set_addr $I10, rxscan346_loop
    rx343_cur."!mark_push"(0, rx343_pos, $I10)
  rxscan346_done:
.annotate 'line', 212
  # rx subcapture "sym"
    set_addr $I10, rxcap_347_fail
    rx343_cur."!mark_push"(0, rx343_pos, $I10)
  # rx literal  "repeat"
    add $I11, rx343_pos, 6
    gt $I11, rx343_eos, rx343_fail
    sub $I11, rx343_pos, rx343_off
    substr $S10, rx343_tgt, $I11, 6
    ne $S10, "repeat", rx343_fail
    add rx343_pos, 6
    set_addr $I10, rxcap_347_fail
    ($I12, $I11) = rx343_cur."!mark_peek"($I10)
    rx343_cur."!cursor_pos"($I11)
    ($P10) = rx343_cur."!cursor_start"()
    $P10."!cursor_pass"(rx343_pos, "")
    rx343_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_347_done
  rxcap_347_fail:
    goto rx343_fail
  rxcap_347_done:
  # rx charclass s
    ge rx343_pos, rx343_eos, rx343_fail
    sub $I10, rx343_pos, rx343_off
    is_cclass $I11, 32, rx343_tgt, $I10
    unless $I11, rx343_fail
    inc rx343_pos
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
  alt349_0:
.annotate 'line', 213
    set_addr $I10, alt349_1
    rx343_cur."!mark_push"(0, rx343_pos, $I10)
.annotate 'line', 214
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_352_fail
    rx343_cur."!mark_push"(0, rx343_pos, $I10)
  alt351_0:
    set_addr $I10, alt351_1
    rx343_cur."!mark_push"(0, rx343_pos, $I10)
  # rx literal  "while"
    add $I11, rx343_pos, 5
    gt $I11, rx343_eos, rx343_fail
    sub $I11, rx343_pos, rx343_off
    substr $S10, rx343_tgt, $I11, 5
    ne $S10, "while", rx343_fail
    add rx343_pos, 5
    goto alt351_end
  alt351_1:
  # rx literal  "until"
    add $I11, rx343_pos, 5
    gt $I11, rx343_eos, rx343_fail
    sub $I11, rx343_pos, rx343_off
    substr $S10, rx343_tgt, $I11, 5
    ne $S10, "until", rx343_fail
    add rx343_pos, 5
  alt351_end:
    set_addr $I10, rxcap_352_fail
    ($I12, $I11) = rx343_cur."!mark_peek"($I10)
    rx343_cur."!cursor_pos"($I11)
    ($P10) = rx343_cur."!cursor_start"()
    $P10."!cursor_pass"(rx343_pos, "")
    rx343_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_352_done
  rxcap_352_fail:
    goto rx343_fail
  rxcap_352_done:
  # rx charclass s
    ge rx343_pos, rx343_eos, rx343_fail
    sub $I10, rx343_pos, rx343_off
    is_cclass $I11, 32, rx343_tgt, $I10
    unless $I11, rx343_fail
    inc rx343_pos
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."xblock"()
    unless $P10, rx343_fail
    rx343_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx343_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
    goto alt349_end
  alt349_1:
.annotate 'line', 215
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."pblock"()
    unless $P10, rx343_fail
    rx343_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx343_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_358_fail
    rx343_cur."!mark_push"(0, rx343_pos, $I10)
  alt357_0:
    set_addr $I10, alt357_1
    rx343_cur."!mark_push"(0, rx343_pos, $I10)
  # rx literal  "while"
    add $I11, rx343_pos, 5
    gt $I11, rx343_eos, rx343_fail
    sub $I11, rx343_pos, rx343_off
    substr $S10, rx343_tgt, $I11, 5
    ne $S10, "while", rx343_fail
    add rx343_pos, 5
    goto alt357_end
  alt357_1:
  # rx literal  "until"
    add $I11, rx343_pos, 5
    gt $I11, rx343_eos, rx343_fail
    sub $I11, rx343_pos, rx343_off
    substr $S10, rx343_tgt, $I11, 5
    ne $S10, "until", rx343_fail
    add rx343_pos, 5
  alt357_end:
    set_addr $I10, rxcap_358_fail
    ($I12, $I11) = rx343_cur."!mark_peek"($I10)
    rx343_cur."!cursor_pos"($I11)
    ($P10) = rx343_cur."!cursor_start"()
    $P10."!cursor_pass"(rx343_pos, "")
    rx343_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_358_done
  rxcap_358_fail:
    goto rx343_fail
  rxcap_358_done:
  # rx charclass s
    ge rx343_pos, rx343_eos, rx343_fail
    sub $I10, rx343_pos, rx343_off
    is_cclass $I11, 32, rx343_tgt, $I10
    unless $I11, rx343_fail
    inc rx343_pos
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."EXPR"()
    unless $P10, rx343_fail
    rx343_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx343_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
  alt349_end:
.annotate 'line', 216
  # rx subrule "ws" subtype=method negate=
    rx343_cur."!cursor_pos"(rx343_pos)
    $P10 = rx343_cur."ws"()
    unless $P10, rx343_fail
    rx343_pos = $P10."pos"()
.annotate 'line', 211
  # rx pass
    rx343_cur."!cursor_pass"(rx343_pos, "statement_control:sym<repeat>")
    if_null rx343_debug, debug_560
    rx343_cur."!cursor_debug"("PASS", "statement_control:sym<repeat>", " at pos=", rx343_pos)
  debug_560:
    .return (rx343_cur)
  rx343_restart:
.annotate 'line', 4
    if_null rx343_debug, debug_561
    rx343_cur."!cursor_debug"("NEXT", "statement_control:sym<repeat>")
  debug_561:
  rx343_fail:
    (rx343_rep, rx343_pos, $I10, $P10) = rx343_cur."!mark_fail"(0)
    lt rx343_pos, -1, rx343_done
    eq rx343_pos, -1, rx343_fail
    jump $I10
  rx343_done:
    rx343_cur."!cursor_fail"()
    if_null rx343_debug, debug_562
    rx343_cur."!cursor_debug"("FAIL", "statement_control:sym<repeat>")
  debug_562:
    .return (rx343_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<repeat>"  :nsentry("!PREFIX__statement_control:sym<repeat>") :subid("74_1300057348.719") :method
.annotate 'line', 4
    new $P345, "ResizablePMCArray"
    push $P345, "repeat"
    .return ($P345)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<for>"  :subid("75_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx363_tgt
    .local int rx363_pos
    .local int rx363_off
    .local int rx363_eos
    .local int rx363_rep
    .local pmc rx363_cur
    .local pmc rx363_debug
    (rx363_cur, rx363_pos, rx363_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx363_cur
    .local pmc match
    .lex "$/", match
    length rx363_eos, rx363_tgt
    gt rx363_pos, rx363_eos, rx363_done
    set rx363_off, 0
    lt rx363_pos, 2, rx363_start
    sub rx363_off, rx363_pos, 1
    substr rx363_tgt, rx363_tgt, rx363_off
  rx363_start:
    eq $I10, 1, rx363_restart
    if_null rx363_debug, debug_563
    rx363_cur."!cursor_debug"("START", "statement_control:sym<for>")
  debug_563:
    $I10 = self.'from'()
    ne $I10, -1, rxscan366_done
    goto rxscan366_scan
  rxscan366_loop:
    (rx363_pos) = rx363_cur."from"()
    inc rx363_pos
    rx363_cur."!cursor_from"(rx363_pos)
    ge rx363_pos, rx363_eos, rxscan366_done
  rxscan366_scan:
    set_addr $I10, rxscan366_loop
    rx363_cur."!mark_push"(0, rx363_pos, $I10)
  rxscan366_done:
.annotate 'line', 220
  # rx subcapture "sym"
    set_addr $I10, rxcap_367_fail
    rx363_cur."!mark_push"(0, rx363_pos, $I10)
  # rx literal  "for"
    add $I11, rx363_pos, 3
    gt $I11, rx363_eos, rx363_fail
    sub $I11, rx363_pos, rx363_off
    substr $S10, rx363_tgt, $I11, 3
    ne $S10, "for", rx363_fail
    add rx363_pos, 3
    set_addr $I10, rxcap_367_fail
    ($I12, $I11) = rx363_cur."!mark_peek"($I10)
    rx363_cur."!cursor_pos"($I11)
    ($P10) = rx363_cur."!cursor_start"()
    $P10."!cursor_pass"(rx363_pos, "")
    rx363_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_367_done
  rxcap_367_fail:
    goto rx363_fail
  rxcap_367_done:
  # rx charclass s
    ge rx363_pos, rx363_eos, rx363_fail
    sub $I10, rx363_pos, rx363_off
    is_cclass $I11, 32, rx363_tgt, $I10
    unless $I11, rx363_fail
    inc rx363_pos
  # rx subrule "ws" subtype=method negate=
    rx363_cur."!cursor_pos"(rx363_pos)
    $P10 = rx363_cur."ws"()
    unless $P10, rx363_fail
    rx363_pos = $P10."pos"()
.annotate 'line', 221
  # rx subrule "xblock" subtype=capture negate=
    rx363_cur."!cursor_pos"(rx363_pos)
    $P10 = rx363_cur."xblock"()
    unless $P10, rx363_fail
    rx363_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx363_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx363_cur."!cursor_pos"(rx363_pos)
    $P10 = rx363_cur."ws"()
    unless $P10, rx363_fail
    rx363_pos = $P10."pos"()
.annotate 'line', 219
  # rx pass
    rx363_cur."!cursor_pass"(rx363_pos, "statement_control:sym<for>")
    if_null rx363_debug, debug_564
    rx363_cur."!cursor_debug"("PASS", "statement_control:sym<for>", " at pos=", rx363_pos)
  debug_564:
    .return (rx363_cur)
  rx363_restart:
.annotate 'line', 4
    if_null rx363_debug, debug_565
    rx363_cur."!cursor_debug"("NEXT", "statement_control:sym<for>")
  debug_565:
  rx363_fail:
    (rx363_rep, rx363_pos, $I10, $P10) = rx363_cur."!mark_fail"(0)
    lt rx363_pos, -1, rx363_done
    eq rx363_pos, -1, rx363_fail
    jump $I10
  rx363_done:
    rx363_cur."!cursor_fail"()
    if_null rx363_debug, debug_566
    rx363_cur."!cursor_debug"("FAIL", "statement_control:sym<for>")
  debug_566:
    .return (rx363_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<for>"  :nsentry("!PREFIX__statement_control:sym<for>") :subid("76_1300057348.719") :method
.annotate 'line', 4
    new $P365, "ResizablePMCArray"
    push $P365, "for"
    .return ($P365)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CATCH>"  :subid("77_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx371_tgt
    .local int rx371_pos
    .local int rx371_off
    .local int rx371_eos
    .local int rx371_rep
    .local pmc rx371_cur
    .local pmc rx371_debug
    (rx371_cur, rx371_pos, rx371_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx371_cur
    .local pmc match
    .lex "$/", match
    length rx371_eos, rx371_tgt
    gt rx371_pos, rx371_eos, rx371_done
    set rx371_off, 0
    lt rx371_pos, 2, rx371_start
    sub rx371_off, rx371_pos, 1
    substr rx371_tgt, rx371_tgt, rx371_off
  rx371_start:
    eq $I10, 1, rx371_restart
    if_null rx371_debug, debug_567
    rx371_cur."!cursor_debug"("START", "statement_control:sym<CATCH>")
  debug_567:
    $I10 = self.'from'()
    ne $I10, -1, rxscan374_done
    goto rxscan374_scan
  rxscan374_loop:
    (rx371_pos) = rx371_cur."from"()
    inc rx371_pos
    rx371_cur."!cursor_from"(rx371_pos)
    ge rx371_pos, rx371_eos, rxscan374_done
  rxscan374_scan:
    set_addr $I10, rxscan374_loop
    rx371_cur."!mark_push"(0, rx371_pos, $I10)
  rxscan374_done:
.annotate 'line', 225
  # rx subcapture "sym"
    set_addr $I10, rxcap_375_fail
    rx371_cur."!mark_push"(0, rx371_pos, $I10)
  # rx literal  "CATCH"
    add $I11, rx371_pos, 5
    gt $I11, rx371_eos, rx371_fail
    sub $I11, rx371_pos, rx371_off
    substr $S10, rx371_tgt, $I11, 5
    ne $S10, "CATCH", rx371_fail
    add rx371_pos, 5
    set_addr $I10, rxcap_375_fail
    ($I12, $I11) = rx371_cur."!mark_peek"($I10)
    rx371_cur."!cursor_pos"($I11)
    ($P10) = rx371_cur."!cursor_start"()
    $P10."!cursor_pass"(rx371_pos, "")
    rx371_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_375_done
  rxcap_375_fail:
    goto rx371_fail
  rxcap_375_done:
  # rx charclass s
    ge rx371_pos, rx371_eos, rx371_fail
    sub $I10, rx371_pos, rx371_off
    is_cclass $I11, 32, rx371_tgt, $I10
    unless $I11, rx371_fail
    inc rx371_pos
  # rx subrule "ws" subtype=method negate=
    rx371_cur."!cursor_pos"(rx371_pos)
    $P10 = rx371_cur."ws"()
    unless $P10, rx371_fail
    rx371_pos = $P10."pos"()
.annotate 'line', 226
  # rx subrule "block" subtype=capture negate=
    rx371_cur."!cursor_pos"(rx371_pos)
    $P10 = rx371_cur."block"()
    unless $P10, rx371_fail
    rx371_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx371_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx371_cur."!cursor_pos"(rx371_pos)
    $P10 = rx371_cur."ws"()
    unless $P10, rx371_fail
    rx371_pos = $P10."pos"()
.annotate 'line', 224
  # rx pass
    rx371_cur."!cursor_pass"(rx371_pos, "statement_control:sym<CATCH>")
    if_null rx371_debug, debug_568
    rx371_cur."!cursor_debug"("PASS", "statement_control:sym<CATCH>", " at pos=", rx371_pos)
  debug_568:
    .return (rx371_cur)
  rx371_restart:
.annotate 'line', 4
    if_null rx371_debug, debug_569
    rx371_cur."!cursor_debug"("NEXT", "statement_control:sym<CATCH>")
  debug_569:
  rx371_fail:
    (rx371_rep, rx371_pos, $I10, $P10) = rx371_cur."!mark_fail"(0)
    lt rx371_pos, -1, rx371_done
    eq rx371_pos, -1, rx371_fail
    jump $I10
  rx371_done:
    rx371_cur."!cursor_fail"()
    if_null rx371_debug, debug_570
    rx371_cur."!cursor_debug"("FAIL", "statement_control:sym<CATCH>")
  debug_570:
    .return (rx371_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CATCH>"  :nsentry("!PREFIX__statement_control:sym<CATCH>") :subid("78_1300057348.719") :method
.annotate 'line', 4
    new $P373, "ResizablePMCArray"
    push $P373, "CATCH"
    .return ($P373)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CONTROL>"  :subid("79_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_debug
    (rx379_cur, rx379_pos, rx379_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx379_cur
    .local pmc match
    .lex "$/", match
    length rx379_eos, rx379_tgt
    gt rx379_pos, rx379_eos, rx379_done
    set rx379_off, 0
    lt rx379_pos, 2, rx379_start
    sub rx379_off, rx379_pos, 1
    substr rx379_tgt, rx379_tgt, rx379_off
  rx379_start:
    eq $I10, 1, rx379_restart
    if_null rx379_debug, debug_571
    rx379_cur."!cursor_debug"("START", "statement_control:sym<CONTROL>")
  debug_571:
    $I10 = self.'from'()
    ne $I10, -1, rxscan382_done
    goto rxscan382_scan
  rxscan382_loop:
    (rx379_pos) = rx379_cur."from"()
    inc rx379_pos
    rx379_cur."!cursor_from"(rx379_pos)
    ge rx379_pos, rx379_eos, rxscan382_done
  rxscan382_scan:
    set_addr $I10, rxscan382_loop
    rx379_cur."!mark_push"(0, rx379_pos, $I10)
  rxscan382_done:
.annotate 'line', 230
  # rx subcapture "sym"
    set_addr $I10, rxcap_383_fail
    rx379_cur."!mark_push"(0, rx379_pos, $I10)
  # rx literal  "CONTROL"
    add $I11, rx379_pos, 7
    gt $I11, rx379_eos, rx379_fail
    sub $I11, rx379_pos, rx379_off
    substr $S10, rx379_tgt, $I11, 7
    ne $S10, "CONTROL", rx379_fail
    add rx379_pos, 7
    set_addr $I10, rxcap_383_fail
    ($I12, $I11) = rx379_cur."!mark_peek"($I10)
    rx379_cur."!cursor_pos"($I11)
    ($P10) = rx379_cur."!cursor_start"()
    $P10."!cursor_pass"(rx379_pos, "")
    rx379_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_383_done
  rxcap_383_fail:
    goto rx379_fail
  rxcap_383_done:
  # rx charclass s
    ge rx379_pos, rx379_eos, rx379_fail
    sub $I10, rx379_pos, rx379_off
    is_cclass $I11, 32, rx379_tgt, $I10
    unless $I11, rx379_fail
    inc rx379_pos
  # rx subrule "ws" subtype=method negate=
    rx379_cur."!cursor_pos"(rx379_pos)
    $P10 = rx379_cur."ws"()
    unless $P10, rx379_fail
    rx379_pos = $P10."pos"()
.annotate 'line', 231
  # rx subrule "block" subtype=capture negate=
    rx379_cur."!cursor_pos"(rx379_pos)
    $P10 = rx379_cur."block"()
    unless $P10, rx379_fail
    rx379_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx379_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx379_cur."!cursor_pos"(rx379_pos)
    $P10 = rx379_cur."ws"()
    unless $P10, rx379_fail
    rx379_pos = $P10."pos"()
.annotate 'line', 229
  # rx pass
    rx379_cur."!cursor_pass"(rx379_pos, "statement_control:sym<CONTROL>")
    if_null rx379_debug, debug_572
    rx379_cur."!cursor_debug"("PASS", "statement_control:sym<CONTROL>", " at pos=", rx379_pos)
  debug_572:
    .return (rx379_cur)
  rx379_restart:
.annotate 'line', 4
    if_null rx379_debug, debug_573
    rx379_cur."!cursor_debug"("NEXT", "statement_control:sym<CONTROL>")
  debug_573:
  rx379_fail:
    (rx379_rep, rx379_pos, $I10, $P10) = rx379_cur."!mark_fail"(0)
    lt rx379_pos, -1, rx379_done
    eq rx379_pos, -1, rx379_fail
    jump $I10
  rx379_done:
    rx379_cur."!cursor_fail"()
    if_null rx379_debug, debug_574
    rx379_cur."!cursor_debug"("FAIL", "statement_control:sym<CONTROL>")
  debug_574:
    .return (rx379_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CONTROL>"  :nsentry("!PREFIX__statement_control:sym<CONTROL>") :subid("80_1300057348.719") :method
.annotate 'line', 4
    new $P381, "ResizablePMCArray"
    push $P381, "CONTROL"
    .return ($P381)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix"  :subid("81_1300057348.719")
    .param pmc param_387
.annotate 'line', 234
    .lex "self", param_387
    $P388 = param_387."!protoregex"("statement_prefix")
    .return ($P388)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix"  :subid("82_1300057348.719")
    .param pmc param_390
.annotate 'line', 234
    .lex "self", param_390
    $P391 = param_390."!PREFIX__!protoregex"("statement_prefix")
    .return ($P391)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<INIT>"  :subid("83_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx393_tgt
    .local int rx393_pos
    .local int rx393_off
    .local int rx393_eos
    .local int rx393_rep
    .local pmc rx393_cur
    .local pmc rx393_debug
    (rx393_cur, rx393_pos, rx393_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx393_cur
    .local pmc match
    .lex "$/", match
    length rx393_eos, rx393_tgt
    gt rx393_pos, rx393_eos, rx393_done
    set rx393_off, 0
    lt rx393_pos, 2, rx393_start
    sub rx393_off, rx393_pos, 1
    substr rx393_tgt, rx393_tgt, rx393_off
  rx393_start:
    eq $I10, 1, rx393_restart
    if_null rx393_debug, debug_575
    rx393_cur."!cursor_debug"("START", "statement_prefix:sym<INIT>")
  debug_575:
    $I10 = self.'from'()
    ne $I10, -1, rxscan397_done
    goto rxscan397_scan
  rxscan397_loop:
    (rx393_pos) = rx393_cur."from"()
    inc rx393_pos
    rx393_cur."!cursor_from"(rx393_pos)
    ge rx393_pos, rx393_eos, rxscan397_done
  rxscan397_scan:
    set_addr $I10, rxscan397_loop
    rx393_cur."!mark_push"(0, rx393_pos, $I10)
  rxscan397_done:
.annotate 'line', 235
  # rx subcapture "sym"
    set_addr $I10, rxcap_398_fail
    rx393_cur."!mark_push"(0, rx393_pos, $I10)
  # rx literal  "INIT"
    add $I11, rx393_pos, 4
    gt $I11, rx393_eos, rx393_fail
    sub $I11, rx393_pos, rx393_off
    substr $S10, rx393_tgt, $I11, 4
    ne $S10, "INIT", rx393_fail
    add rx393_pos, 4
    set_addr $I10, rxcap_398_fail
    ($I12, $I11) = rx393_cur."!mark_peek"($I10)
    rx393_cur."!cursor_pos"($I11)
    ($P10) = rx393_cur."!cursor_start"()
    $P10."!cursor_pass"(rx393_pos, "")
    rx393_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_398_done
  rxcap_398_fail:
    goto rx393_fail
  rxcap_398_done:
  # rx subrule "blorst" subtype=capture negate=
    rx393_cur."!cursor_pos"(rx393_pos)
    $P10 = rx393_cur."blorst"()
    unless $P10, rx393_fail
    rx393_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx393_pos = $P10."pos"()
  # rx pass
    rx393_cur."!cursor_pass"(rx393_pos, "statement_prefix:sym<INIT>")
    if_null rx393_debug, debug_576
    rx393_cur."!cursor_debug"("PASS", "statement_prefix:sym<INIT>", " at pos=", rx393_pos)
  debug_576:
    .return (rx393_cur)
  rx393_restart:
.annotate 'line', 4
    if_null rx393_debug, debug_577
    rx393_cur."!cursor_debug"("NEXT", "statement_prefix:sym<INIT>")
  debug_577:
  rx393_fail:
    (rx393_rep, rx393_pos, $I10, $P10) = rx393_cur."!mark_fail"(0)
    lt rx393_pos, -1, rx393_done
    eq rx393_pos, -1, rx393_fail
    jump $I10
  rx393_done:
    rx393_cur."!cursor_fail"()
    if_null rx393_debug, debug_578
    rx393_cur."!cursor_debug"("FAIL", "statement_prefix:sym<INIT>")
  debug_578:
    .return (rx393_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<INIT>"  :nsentry("!PREFIX__statement_prefix:sym<INIT>") :subid("84_1300057348.719") :method
.annotate 'line', 4
    $P395 = self."!PREFIX__!subrule"("blorst", "INIT")
    new $P396, "ResizablePMCArray"
    push $P396, $P395
    .return ($P396)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<try>"  :subid("85_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_debug
    (rx400_cur, rx400_pos, rx400_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx400_cur
    .local pmc match
    .lex "$/", match
    length rx400_eos, rx400_tgt
    gt rx400_pos, rx400_eos, rx400_done
    set rx400_off, 0
    lt rx400_pos, 2, rx400_start
    sub rx400_off, rx400_pos, 1
    substr rx400_tgt, rx400_tgt, rx400_off
  rx400_start:
    eq $I10, 1, rx400_restart
    if_null rx400_debug, debug_579
    rx400_cur."!cursor_debug"("START", "statement_prefix:sym<try>")
  debug_579:
    $I10 = self.'from'()
    ne $I10, -1, rxscan404_done
    goto rxscan404_scan
  rxscan404_loop:
    (rx400_pos) = rx400_cur."from"()
    inc rx400_pos
    rx400_cur."!cursor_from"(rx400_pos)
    ge rx400_pos, rx400_eos, rxscan404_done
  rxscan404_scan:
    set_addr $I10, rxscan404_loop
    rx400_cur."!mark_push"(0, rx400_pos, $I10)
  rxscan404_done:
.annotate 'line', 238
  # rx subcapture "sym"
    set_addr $I10, rxcap_405_fail
    rx400_cur."!mark_push"(0, rx400_pos, $I10)
  # rx literal  "try"
    add $I11, rx400_pos, 3
    gt $I11, rx400_eos, rx400_fail
    sub $I11, rx400_pos, rx400_off
    substr $S10, rx400_tgt, $I11, 3
    ne $S10, "try", rx400_fail
    add rx400_pos, 3
    set_addr $I10, rxcap_405_fail
    ($I12, $I11) = rx400_cur."!mark_peek"($I10)
    rx400_cur."!cursor_pos"($I11)
    ($P10) = rx400_cur."!cursor_start"()
    $P10."!cursor_pass"(rx400_pos, "")
    rx400_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_405_done
  rxcap_405_fail:
    goto rx400_fail
  rxcap_405_done:
.annotate 'line', 239
  # rx subrule "blorst" subtype=capture negate=
    rx400_cur."!cursor_pos"(rx400_pos)
    $P10 = rx400_cur."blorst"()
    unless $P10, rx400_fail
    rx400_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx400_pos = $P10."pos"()
.annotate 'line', 237
  # rx pass
    rx400_cur."!cursor_pass"(rx400_pos, "statement_prefix:sym<try>")
    if_null rx400_debug, debug_580
    rx400_cur."!cursor_debug"("PASS", "statement_prefix:sym<try>", " at pos=", rx400_pos)
  debug_580:
    .return (rx400_cur)
  rx400_restart:
.annotate 'line', 4
    if_null rx400_debug, debug_581
    rx400_cur."!cursor_debug"("NEXT", "statement_prefix:sym<try>")
  debug_581:
  rx400_fail:
    (rx400_rep, rx400_pos, $I10, $P10) = rx400_cur."!mark_fail"(0)
    lt rx400_pos, -1, rx400_done
    eq rx400_pos, -1, rx400_fail
    jump $I10
  rx400_done:
    rx400_cur."!cursor_fail"()
    if_null rx400_debug, debug_582
    rx400_cur."!cursor_debug"("FAIL", "statement_prefix:sym<try>")
  debug_582:
    .return (rx400_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<try>"  :nsentry("!PREFIX__statement_prefix:sym<try>") :subid("86_1300057348.719") :method
.annotate 'line', 4
    $P402 = self."!PREFIX__!subrule"("blorst", "try")
    new $P403, "ResizablePMCArray"
    push $P403, $P402
    .return ($P403)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blorst"  :subid("87_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx407_tgt
    .local int rx407_pos
    .local int rx407_off
    .local int rx407_eos
    .local int rx407_rep
    .local pmc rx407_cur
    .local pmc rx407_debug
    (rx407_cur, rx407_pos, rx407_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx407_cur
    .local pmc match
    .lex "$/", match
    length rx407_eos, rx407_tgt
    gt rx407_pos, rx407_eos, rx407_done
    set rx407_off, 0
    lt rx407_pos, 2, rx407_start
    sub rx407_off, rx407_pos, 1
    substr rx407_tgt, rx407_tgt, rx407_off
  rx407_start:
    eq $I10, 1, rx407_restart
    if_null rx407_debug, debug_583
    rx407_cur."!cursor_debug"("START", "blorst")
  debug_583:
    $I10 = self.'from'()
    ne $I10, -1, rxscan410_done
    goto rxscan410_scan
  rxscan410_loop:
    (rx407_pos) = rx407_cur."from"()
    inc rx407_pos
    rx407_cur."!cursor_from"(rx407_pos)
    ge rx407_pos, rx407_eos, rxscan410_done
  rxscan410_scan:
    set_addr $I10, rxscan410_loop
    rx407_cur."!mark_push"(0, rx407_pos, $I10)
  rxscan410_done:
.annotate 'line', 243
  # rx charclass s
    ge rx407_pos, rx407_eos, rx407_fail
    sub $I10, rx407_pos, rx407_off
    is_cclass $I11, 32, rx407_tgt, $I10
    unless $I11, rx407_fail
    inc rx407_pos
  # rx subrule "ws" subtype=method negate=
    rx407_cur."!cursor_pos"(rx407_pos)
    $P10 = rx407_cur."ws"()
    unless $P10, rx407_fail
    rx407_pos = $P10."pos"()
  alt411_0:
    set_addr $I10, alt411_1
    rx407_cur."!mark_push"(0, rx407_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx407_pos, rx407_off
    substr $S10, rx407_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx407_fail
  # rx subrule "block" subtype=capture negate=
    rx407_cur."!cursor_pos"(rx407_pos)
    $P10 = rx407_cur."block"()
    unless $P10, rx407_fail
    rx407_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx407_pos = $P10."pos"()
    goto alt411_end
  alt411_1:
  # rx subrule "statement" subtype=capture negate=
    rx407_cur."!cursor_pos"(rx407_pos)
    $P10 = rx407_cur."statement"()
    unless $P10, rx407_fail
    rx407_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx407_pos = $P10."pos"()
  alt411_end:
.annotate 'line', 242
  # rx pass
    rx407_cur."!cursor_pass"(rx407_pos, "blorst")
    if_null rx407_debug, debug_584
    rx407_cur."!cursor_debug"("PASS", "blorst", " at pos=", rx407_pos)
  debug_584:
    .return (rx407_cur)
  rx407_restart:
.annotate 'line', 4
    if_null rx407_debug, debug_585
    rx407_cur."!cursor_debug"("NEXT", "blorst")
  debug_585:
  rx407_fail:
    (rx407_rep, rx407_pos, $I10, $P10) = rx407_cur."!mark_fail"(0)
    lt rx407_pos, -1, rx407_done
    eq rx407_pos, -1, rx407_fail
    jump $I10
  rx407_done:
    rx407_cur."!cursor_fail"()
    if_null rx407_debug, debug_586
    rx407_cur."!cursor_debug"("FAIL", "blorst")
  debug_586:
    .return (rx407_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blorst"  :nsentry("!PREFIX__blorst") :subid("88_1300057348.719") :method
.annotate 'line', 4
    new $P409, "ResizablePMCArray"
    push $P409, ""
    .return ($P409)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond"  :subid("89_1300057348.719")
    .param pmc param_413
.annotate 'line', 248
    .lex "self", param_413
    $P414 = param_413."!protoregex"("statement_mod_cond")
    .return ($P414)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond"  :subid("90_1300057348.719")
    .param pmc param_416
.annotate 'line', 248
    .lex "self", param_416
    $P417 = param_416."!PREFIX__!protoregex"("statement_mod_cond")
    .return ($P417)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<if>"  :subid("91_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx419_tgt
    .local int rx419_pos
    .local int rx419_off
    .local int rx419_eos
    .local int rx419_rep
    .local pmc rx419_cur
    .local pmc rx419_debug
    (rx419_cur, rx419_pos, rx419_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx419_cur
    .local pmc match
    .lex "$/", match
    length rx419_eos, rx419_tgt
    gt rx419_pos, rx419_eos, rx419_done
    set rx419_off, 0
    lt rx419_pos, 2, rx419_start
    sub rx419_off, rx419_pos, 1
    substr rx419_tgt, rx419_tgt, rx419_off
  rx419_start:
    eq $I10, 1, rx419_restart
    if_null rx419_debug, debug_587
    rx419_cur."!cursor_debug"("START", "statement_mod_cond:sym<if>")
  debug_587:
    $I10 = self.'from'()
    ne $I10, -1, rxscan423_done
    goto rxscan423_scan
  rxscan423_loop:
    (rx419_pos) = rx419_cur."from"()
    inc rx419_pos
    rx419_cur."!cursor_from"(rx419_pos)
    ge rx419_pos, rx419_eos, rxscan423_done
  rxscan423_scan:
    set_addr $I10, rxscan423_loop
    rx419_cur."!mark_push"(0, rx419_pos, $I10)
  rxscan423_done:
.annotate 'line', 250
  # rx subcapture "sym"
    set_addr $I10, rxcap_424_fail
    rx419_cur."!mark_push"(0, rx419_pos, $I10)
  # rx literal  "if"
    add $I11, rx419_pos, 2
    gt $I11, rx419_eos, rx419_fail
    sub $I11, rx419_pos, rx419_off
    substr $S10, rx419_tgt, $I11, 2
    ne $S10, "if", rx419_fail
    add rx419_pos, 2
    set_addr $I10, rxcap_424_fail
    ($I12, $I11) = rx419_cur."!mark_peek"($I10)
    rx419_cur."!cursor_pos"($I11)
    ($P10) = rx419_cur."!cursor_start"()
    $P10."!cursor_pass"(rx419_pos, "")
    rx419_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_424_done
  rxcap_424_fail:
    goto rx419_fail
  rxcap_424_done:
  # rx subrule "ws" subtype=method negate=
    rx419_cur."!cursor_pos"(rx419_pos)
    $P10 = rx419_cur."ws"()
    unless $P10, rx419_fail
    rx419_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx419_cur."!cursor_pos"(rx419_pos)
    $P10 = rx419_cur."EXPR"()
    unless $P10, rx419_fail
    rx419_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx419_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx419_cur."!cursor_pos"(rx419_pos)
    $P10 = rx419_cur."ws"()
    unless $P10, rx419_fail
    rx419_pos = $P10."pos"()
  # rx pass
    rx419_cur."!cursor_pass"(rx419_pos, "statement_mod_cond:sym<if>")
    if_null rx419_debug, debug_588
    rx419_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<if>", " at pos=", rx419_pos)
  debug_588:
    .return (rx419_cur)
  rx419_restart:
.annotate 'line', 4
    if_null rx419_debug, debug_589
    rx419_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<if>")
  debug_589:
  rx419_fail:
    (rx419_rep, rx419_pos, $I10, $P10) = rx419_cur."!mark_fail"(0)
    lt rx419_pos, -1, rx419_done
    eq rx419_pos, -1, rx419_fail
    jump $I10
  rx419_done:
    rx419_cur."!cursor_fail"()
    if_null rx419_debug, debug_590
    rx419_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<if>")
  debug_590:
    .return (rx419_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<if>"  :nsentry("!PREFIX__statement_mod_cond:sym<if>") :subid("92_1300057348.719") :method
.annotate 'line', 4
    $P421 = self."!PREFIX__!subrule"("ws", "if")
    new $P422, "ResizablePMCArray"
    push $P422, $P421
    .return ($P422)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<unless>"  :subid("93_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_debug
    (rx428_cur, rx428_pos, rx428_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx428_cur
    .local pmc match
    .lex "$/", match
    length rx428_eos, rx428_tgt
    gt rx428_pos, rx428_eos, rx428_done
    set rx428_off, 0
    lt rx428_pos, 2, rx428_start
    sub rx428_off, rx428_pos, 1
    substr rx428_tgt, rx428_tgt, rx428_off
  rx428_start:
    eq $I10, 1, rx428_restart
    if_null rx428_debug, debug_591
    rx428_cur."!cursor_debug"("START", "statement_mod_cond:sym<unless>")
  debug_591:
    $I10 = self.'from'()
    ne $I10, -1, rxscan432_done
    goto rxscan432_scan
  rxscan432_loop:
    (rx428_pos) = rx428_cur."from"()
    inc rx428_pos
    rx428_cur."!cursor_from"(rx428_pos)
    ge rx428_pos, rx428_eos, rxscan432_done
  rxscan432_scan:
    set_addr $I10, rxscan432_loop
    rx428_cur."!mark_push"(0, rx428_pos, $I10)
  rxscan432_done:
.annotate 'line', 251
  # rx subcapture "sym"
    set_addr $I10, rxcap_433_fail
    rx428_cur."!mark_push"(0, rx428_pos, $I10)
  # rx literal  "unless"
    add $I11, rx428_pos, 6
    gt $I11, rx428_eos, rx428_fail
    sub $I11, rx428_pos, rx428_off
    substr $S10, rx428_tgt, $I11, 6
    ne $S10, "unless", rx428_fail
    add rx428_pos, 6
    set_addr $I10, rxcap_433_fail
    ($I12, $I11) = rx428_cur."!mark_peek"($I10)
    rx428_cur."!cursor_pos"($I11)
    ($P10) = rx428_cur."!cursor_start"()
    $P10."!cursor_pass"(rx428_pos, "")
    rx428_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_433_done
  rxcap_433_fail:
    goto rx428_fail
  rxcap_433_done:
  # rx subrule "ws" subtype=method negate=
    rx428_cur."!cursor_pos"(rx428_pos)
    $P10 = rx428_cur."ws"()
    unless $P10, rx428_fail
    rx428_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx428_cur."!cursor_pos"(rx428_pos)
    $P10 = rx428_cur."EXPR"()
    unless $P10, rx428_fail
    rx428_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx428_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx428_cur."!cursor_pos"(rx428_pos)
    $P10 = rx428_cur."ws"()
    unless $P10, rx428_fail
    rx428_pos = $P10."pos"()
  # rx pass
    rx428_cur."!cursor_pass"(rx428_pos, "statement_mod_cond:sym<unless>")
    if_null rx428_debug, debug_592
    rx428_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<unless>", " at pos=", rx428_pos)
  debug_592:
    .return (rx428_cur)
  rx428_restart:
.annotate 'line', 4
    if_null rx428_debug, debug_593
    rx428_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<unless>")
  debug_593:
  rx428_fail:
    (rx428_rep, rx428_pos, $I10, $P10) = rx428_cur."!mark_fail"(0)
    lt rx428_pos, -1, rx428_done
    eq rx428_pos, -1, rx428_fail
    jump $I10
  rx428_done:
    rx428_cur."!cursor_fail"()
    if_null rx428_debug, debug_594
    rx428_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<unless>")
  debug_594:
    .return (rx428_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<unless>"  :nsentry("!PREFIX__statement_mod_cond:sym<unless>") :subid("94_1300057348.719") :method
.annotate 'line', 4
    $P430 = self."!PREFIX__!subrule"("ws", "unless")
    new $P431, "ResizablePMCArray"
    push $P431, $P430
    .return ($P431)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop"  :subid("95_1300057348.719")
    .param pmc param_437
.annotate 'line', 253
    .lex "self", param_437
    $P438 = param_437."!protoregex"("statement_mod_loop")
    .return ($P438)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop"  :subid("96_1300057348.719")
    .param pmc param_440
.annotate 'line', 253
    .lex "self", param_440
    $P441 = param_440."!PREFIX__!protoregex"("statement_mod_loop")
    .return ($P441)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<while>"  :subid("97_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx443_tgt
    .local int rx443_pos
    .local int rx443_off
    .local int rx443_eos
    .local int rx443_rep
    .local pmc rx443_cur
    .local pmc rx443_debug
    (rx443_cur, rx443_pos, rx443_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx443_cur
    .local pmc match
    .lex "$/", match
    length rx443_eos, rx443_tgt
    gt rx443_pos, rx443_eos, rx443_done
    set rx443_off, 0
    lt rx443_pos, 2, rx443_start
    sub rx443_off, rx443_pos, 1
    substr rx443_tgt, rx443_tgt, rx443_off
  rx443_start:
    eq $I10, 1, rx443_restart
    if_null rx443_debug, debug_595
    rx443_cur."!cursor_debug"("START", "statement_mod_loop:sym<while>")
  debug_595:
    $I10 = self.'from'()
    ne $I10, -1, rxscan447_done
    goto rxscan447_scan
  rxscan447_loop:
    (rx443_pos) = rx443_cur."from"()
    inc rx443_pos
    rx443_cur."!cursor_from"(rx443_pos)
    ge rx443_pos, rx443_eos, rxscan447_done
  rxscan447_scan:
    set_addr $I10, rxscan447_loop
    rx443_cur."!mark_push"(0, rx443_pos, $I10)
  rxscan447_done:
.annotate 'line', 255
  # rx subcapture "sym"
    set_addr $I10, rxcap_448_fail
    rx443_cur."!mark_push"(0, rx443_pos, $I10)
  # rx literal  "while"
    add $I11, rx443_pos, 5
    gt $I11, rx443_eos, rx443_fail
    sub $I11, rx443_pos, rx443_off
    substr $S10, rx443_tgt, $I11, 5
    ne $S10, "while", rx443_fail
    add rx443_pos, 5
    set_addr $I10, rxcap_448_fail
    ($I12, $I11) = rx443_cur."!mark_peek"($I10)
    rx443_cur."!cursor_pos"($I11)
    ($P10) = rx443_cur."!cursor_start"()
    $P10."!cursor_pass"(rx443_pos, "")
    rx443_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_448_done
  rxcap_448_fail:
    goto rx443_fail
  rxcap_448_done:
  # rx subrule "ws" subtype=method negate=
    rx443_cur."!cursor_pos"(rx443_pos)
    $P10 = rx443_cur."ws"()
    unless $P10, rx443_fail
    rx443_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx443_cur."!cursor_pos"(rx443_pos)
    $P10 = rx443_cur."EXPR"()
    unless $P10, rx443_fail
    rx443_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx443_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx443_cur."!cursor_pos"(rx443_pos)
    $P10 = rx443_cur."ws"()
    unless $P10, rx443_fail
    rx443_pos = $P10."pos"()
  # rx pass
    rx443_cur."!cursor_pass"(rx443_pos, "statement_mod_loop:sym<while>")
    if_null rx443_debug, debug_596
    rx443_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<while>", " at pos=", rx443_pos)
  debug_596:
    .return (rx443_cur)
  rx443_restart:
.annotate 'line', 4
    if_null rx443_debug, debug_597
    rx443_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<while>")
  debug_597:
  rx443_fail:
    (rx443_rep, rx443_pos, $I10, $P10) = rx443_cur."!mark_fail"(0)
    lt rx443_pos, -1, rx443_done
    eq rx443_pos, -1, rx443_fail
    jump $I10
  rx443_done:
    rx443_cur."!cursor_fail"()
    if_null rx443_debug, debug_598
    rx443_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<while>")
  debug_598:
    .return (rx443_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<while>"  :nsentry("!PREFIX__statement_mod_loop:sym<while>") :subid("98_1300057348.719") :method
.annotate 'line', 4
    $P445 = self."!PREFIX__!subrule"("ws", "while")
    new $P446, "ResizablePMCArray"
    push $P446, $P445
    .return ($P446)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<until>"  :subid("99_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx452_tgt
    .local int rx452_pos
    .local int rx452_off
    .local int rx452_eos
    .local int rx452_rep
    .local pmc rx452_cur
    .local pmc rx452_debug
    (rx452_cur, rx452_pos, rx452_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx452_cur
    .local pmc match
    .lex "$/", match
    length rx452_eos, rx452_tgt
    gt rx452_pos, rx452_eos, rx452_done
    set rx452_off, 0
    lt rx452_pos, 2, rx452_start
    sub rx452_off, rx452_pos, 1
    substr rx452_tgt, rx452_tgt, rx452_off
  rx452_start:
    eq $I10, 1, rx452_restart
    if_null rx452_debug, debug_599
    rx452_cur."!cursor_debug"("START", "statement_mod_loop:sym<until>")
  debug_599:
    $I10 = self.'from'()
    ne $I10, -1, rxscan456_done
    goto rxscan456_scan
  rxscan456_loop:
    (rx452_pos) = rx452_cur."from"()
    inc rx452_pos
    rx452_cur."!cursor_from"(rx452_pos)
    ge rx452_pos, rx452_eos, rxscan456_done
  rxscan456_scan:
    set_addr $I10, rxscan456_loop
    rx452_cur."!mark_push"(0, rx452_pos, $I10)
  rxscan456_done:
.annotate 'line', 256
  # rx subcapture "sym"
    set_addr $I10, rxcap_457_fail
    rx452_cur."!mark_push"(0, rx452_pos, $I10)
  # rx literal  "until"
    add $I11, rx452_pos, 5
    gt $I11, rx452_eos, rx452_fail
    sub $I11, rx452_pos, rx452_off
    substr $S10, rx452_tgt, $I11, 5
    ne $S10, "until", rx452_fail
    add rx452_pos, 5
    set_addr $I10, rxcap_457_fail
    ($I12, $I11) = rx452_cur."!mark_peek"($I10)
    rx452_cur."!cursor_pos"($I11)
    ($P10) = rx452_cur."!cursor_start"()
    $P10."!cursor_pass"(rx452_pos, "")
    rx452_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_457_done
  rxcap_457_fail:
    goto rx452_fail
  rxcap_457_done:
  # rx subrule "ws" subtype=method negate=
    rx452_cur."!cursor_pos"(rx452_pos)
    $P10 = rx452_cur."ws"()
    unless $P10, rx452_fail
    rx452_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx452_cur."!cursor_pos"(rx452_pos)
    $P10 = rx452_cur."EXPR"()
    unless $P10, rx452_fail
    rx452_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx452_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx452_cur."!cursor_pos"(rx452_pos)
    $P10 = rx452_cur."ws"()
    unless $P10, rx452_fail
    rx452_pos = $P10."pos"()
  # rx pass
    rx452_cur."!cursor_pass"(rx452_pos, "statement_mod_loop:sym<until>")
    if_null rx452_debug, debug_600
    rx452_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<until>", " at pos=", rx452_pos)
  debug_600:
    .return (rx452_cur)
  rx452_restart:
.annotate 'line', 4
    if_null rx452_debug, debug_601
    rx452_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<until>")
  debug_601:
  rx452_fail:
    (rx452_rep, rx452_pos, $I10, $P10) = rx452_cur."!mark_fail"(0)
    lt rx452_pos, -1, rx452_done
    eq rx452_pos, -1, rx452_fail
    jump $I10
  rx452_done:
    rx452_cur."!cursor_fail"()
    if_null rx452_debug, debug_602
    rx452_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<until>")
  debug_602:
    .return (rx452_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<until>"  :nsentry("!PREFIX__statement_mod_loop:sym<until>") :subid("100_1300057348.719") :method
.annotate 'line', 4
    $P454 = self."!PREFIX__!subrule"("ws", "until")
    new $P455, "ResizablePMCArray"
    push $P455, $P454
    .return ($P455)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<for>"  :subid("101_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_debug
    (rx461_cur, rx461_pos, rx461_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx461_cur
    .local pmc match
    .lex "$/", match
    length rx461_eos, rx461_tgt
    gt rx461_pos, rx461_eos, rx461_done
    set rx461_off, 0
    lt rx461_pos, 2, rx461_start
    sub rx461_off, rx461_pos, 1
    substr rx461_tgt, rx461_tgt, rx461_off
  rx461_start:
    eq $I10, 1, rx461_restart
    if_null rx461_debug, debug_603
    rx461_cur."!cursor_debug"("START", "statement_mod_loop:sym<for>")
  debug_603:
    $I10 = self.'from'()
    ne $I10, -1, rxscan465_done
    goto rxscan465_scan
  rxscan465_loop:
    (rx461_pos) = rx461_cur."from"()
    inc rx461_pos
    rx461_cur."!cursor_from"(rx461_pos)
    ge rx461_pos, rx461_eos, rxscan465_done
  rxscan465_scan:
    set_addr $I10, rxscan465_loop
    rx461_cur."!mark_push"(0, rx461_pos, $I10)
  rxscan465_done:
.annotate 'line', 257
  # rx subcapture "sym"
    set_addr $I10, rxcap_466_fail
    rx461_cur."!mark_push"(0, rx461_pos, $I10)
  # rx literal  "for"
    add $I11, rx461_pos, 3
    gt $I11, rx461_eos, rx461_fail
    sub $I11, rx461_pos, rx461_off
    substr $S10, rx461_tgt, $I11, 3
    ne $S10, "for", rx461_fail
    add rx461_pos, 3
    set_addr $I10, rxcap_466_fail
    ($I12, $I11) = rx461_cur."!mark_peek"($I10)
    rx461_cur."!cursor_pos"($I11)
    ($P10) = rx461_cur."!cursor_start"()
    $P10."!cursor_pass"(rx461_pos, "")
    rx461_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_466_done
  rxcap_466_fail:
    goto rx461_fail
  rxcap_466_done:
  # rx subrule "ws" subtype=method negate=
    rx461_cur."!cursor_pos"(rx461_pos)
    $P10 = rx461_cur."ws"()
    unless $P10, rx461_fail
    rx461_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx461_cur."!cursor_pos"(rx461_pos)
    $P10 = rx461_cur."EXPR"()
    unless $P10, rx461_fail
    rx461_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx461_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx461_cur."!cursor_pos"(rx461_pos)
    $P10 = rx461_cur."ws"()
    unless $P10, rx461_fail
    rx461_pos = $P10."pos"()
  # rx pass
    rx461_cur."!cursor_pass"(rx461_pos, "statement_mod_loop:sym<for>")
    if_null rx461_debug, debug_604
    rx461_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<for>", " at pos=", rx461_pos)
  debug_604:
    .return (rx461_cur)
  rx461_restart:
.annotate 'line', 4
    if_null rx461_debug, debug_605
    rx461_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<for>")
  debug_605:
  rx461_fail:
    (rx461_rep, rx461_pos, $I10, $P10) = rx461_cur."!mark_fail"(0)
    lt rx461_pos, -1, rx461_done
    eq rx461_pos, -1, rx461_fail
    jump $I10
  rx461_done:
    rx461_cur."!cursor_fail"()
    if_null rx461_debug, debug_606
    rx461_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<for>")
  debug_606:
    .return (rx461_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<for>"  :nsentry("!PREFIX__statement_mod_loop:sym<for>") :subid("102_1300057348.719") :method
.annotate 'line', 4
    $P463 = self."!PREFIX__!subrule"("ws", "for")
    new $P464, "ResizablePMCArray"
    push $P464, $P463
    .return ($P464)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<fatarrow>"  :subid("103_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx470_tgt
    .local int rx470_pos
    .local int rx470_off
    .local int rx470_eos
    .local int rx470_rep
    .local pmc rx470_cur
    .local pmc rx470_debug
    (rx470_cur, rx470_pos, rx470_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx470_cur
    .local pmc match
    .lex "$/", match
    length rx470_eos, rx470_tgt
    gt rx470_pos, rx470_eos, rx470_done
    set rx470_off, 0
    lt rx470_pos, 2, rx470_start
    sub rx470_off, rx470_pos, 1
    substr rx470_tgt, rx470_tgt, rx470_off
  rx470_start:
    eq $I10, 1, rx470_restart
    if_null rx470_debug, debug_607
    rx470_cur."!cursor_debug"("START", "term:sym<fatarrow>")
  debug_607:
    $I10 = self.'from'()
    ne $I10, -1, rxscan474_done
    goto rxscan474_scan
  rxscan474_loop:
    (rx470_pos) = rx470_cur."from"()
    inc rx470_pos
    rx470_cur."!cursor_from"(rx470_pos)
    ge rx470_pos, rx470_eos, rxscan474_done
  rxscan474_scan:
    set_addr $I10, rxscan474_loop
    rx470_cur."!mark_push"(0, rx470_pos, $I10)
  rxscan474_done:
.annotate 'line', 261
  # rx subrule "fatarrow" subtype=capture negate=
    rx470_cur."!cursor_pos"(rx470_pos)
    $P10 = rx470_cur."fatarrow"()
    unless $P10, rx470_fail
    rx470_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("fatarrow")
    rx470_pos = $P10."pos"()
  # rx pass
    rx470_cur."!cursor_pass"(rx470_pos, "term:sym<fatarrow>")
    if_null rx470_debug, debug_608
    rx470_cur."!cursor_debug"("PASS", "term:sym<fatarrow>", " at pos=", rx470_pos)
  debug_608:
    .return (rx470_cur)
  rx470_restart:
.annotate 'line', 4
    if_null rx470_debug, debug_609
    rx470_cur."!cursor_debug"("NEXT", "term:sym<fatarrow>")
  debug_609:
  rx470_fail:
    (rx470_rep, rx470_pos, $I10, $P10) = rx470_cur."!mark_fail"(0)
    lt rx470_pos, -1, rx470_done
    eq rx470_pos, -1, rx470_fail
    jump $I10
  rx470_done:
    rx470_cur."!cursor_fail"()
    if_null rx470_debug, debug_610
    rx470_cur."!cursor_debug"("FAIL", "term:sym<fatarrow>")
  debug_610:
    .return (rx470_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<fatarrow>"  :nsentry("!PREFIX__term:sym<fatarrow>") :subid("104_1300057348.719") :method
.annotate 'line', 4
    $P472 = self."!PREFIX__!subrule"("fatarrow", "")
    new $P473, "ResizablePMCArray"
    push $P473, $P472
    .return ($P473)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<colonpair>"  :subid("105_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx476_tgt
    .local int rx476_pos
    .local int rx476_off
    .local int rx476_eos
    .local int rx476_rep
    .local pmc rx476_cur
    .local pmc rx476_debug
    (rx476_cur, rx476_pos, rx476_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx476_cur
    .local pmc match
    .lex "$/", match
    length rx476_eos, rx476_tgt
    gt rx476_pos, rx476_eos, rx476_done
    set rx476_off, 0
    lt rx476_pos, 2, rx476_start
    sub rx476_off, rx476_pos, 1
    substr rx476_tgt, rx476_tgt, rx476_off
  rx476_start:
    eq $I10, 1, rx476_restart
    if_null rx476_debug, debug_611
    rx476_cur."!cursor_debug"("START", "term:sym<colonpair>")
  debug_611:
    $I10 = self.'from'()
    ne $I10, -1, rxscan480_done
    goto rxscan480_scan
  rxscan480_loop:
    (rx476_pos) = rx476_cur."from"()
    inc rx476_pos
    rx476_cur."!cursor_from"(rx476_pos)
    ge rx476_pos, rx476_eos, rxscan480_done
  rxscan480_scan:
    set_addr $I10, rxscan480_loop
    rx476_cur."!mark_push"(0, rx476_pos, $I10)
  rxscan480_done:
.annotate 'line', 262
  # rx subrule "colonpair" subtype=capture negate=
    rx476_cur."!cursor_pos"(rx476_pos)
    $P10 = rx476_cur."colonpair"()
    unless $P10, rx476_fail
    rx476_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("colonpair")
    rx476_pos = $P10."pos"()
  # rx pass
    rx476_cur."!cursor_pass"(rx476_pos, "term:sym<colonpair>")
    if_null rx476_debug, debug_612
    rx476_cur."!cursor_debug"("PASS", "term:sym<colonpair>", " at pos=", rx476_pos)
  debug_612:
    .return (rx476_cur)
  rx476_restart:
.annotate 'line', 4
    if_null rx476_debug, debug_613
    rx476_cur."!cursor_debug"("NEXT", "term:sym<colonpair>")
  debug_613:
  rx476_fail:
    (rx476_rep, rx476_pos, $I10, $P10) = rx476_cur."!mark_fail"(0)
    lt rx476_pos, -1, rx476_done
    eq rx476_pos, -1, rx476_fail
    jump $I10
  rx476_done:
    rx476_cur."!cursor_fail"()
    if_null rx476_debug, debug_614
    rx476_cur."!cursor_debug"("FAIL", "term:sym<colonpair>")
  debug_614:
    .return (rx476_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<colonpair>"  :nsentry("!PREFIX__term:sym<colonpair>") :subid("106_1300057348.719") :method
.annotate 'line', 4
    $P478 = self."!PREFIX__!subrule"("colonpair", "")
    new $P479, "ResizablePMCArray"
    push $P479, $P478
    .return ($P479)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<variable>"  :subid("107_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_debug
    (rx482_cur, rx482_pos, rx482_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx482_cur
    .local pmc match
    .lex "$/", match
    length rx482_eos, rx482_tgt
    gt rx482_pos, rx482_eos, rx482_done
    set rx482_off, 0
    lt rx482_pos, 2, rx482_start
    sub rx482_off, rx482_pos, 1
    substr rx482_tgt, rx482_tgt, rx482_off
  rx482_start:
    eq $I10, 1, rx482_restart
    if_null rx482_debug, debug_615
    rx482_cur."!cursor_debug"("START", "term:sym<variable>")
  debug_615:
    $I10 = self.'from'()
    ne $I10, -1, rxscan486_done
    goto rxscan486_scan
  rxscan486_loop:
    (rx482_pos) = rx482_cur."from"()
    inc rx482_pos
    rx482_cur."!cursor_from"(rx482_pos)
    ge rx482_pos, rx482_eos, rxscan486_done
  rxscan486_scan:
    set_addr $I10, rxscan486_loop
    rx482_cur."!mark_push"(0, rx482_pos, $I10)
  rxscan486_done:
.annotate 'line', 263
  # rx subrule "variable" subtype=capture negate=
    rx482_cur."!cursor_pos"(rx482_pos)
    $P10 = rx482_cur."variable"()
    unless $P10, rx482_fail
    rx482_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx482_pos = $P10."pos"()
  # rx pass
    rx482_cur."!cursor_pass"(rx482_pos, "term:sym<variable>")
    if_null rx482_debug, debug_616
    rx482_cur."!cursor_debug"("PASS", "term:sym<variable>", " at pos=", rx482_pos)
  debug_616:
    .return (rx482_cur)
  rx482_restart:
.annotate 'line', 4
    if_null rx482_debug, debug_617
    rx482_cur."!cursor_debug"("NEXT", "term:sym<variable>")
  debug_617:
  rx482_fail:
    (rx482_rep, rx482_pos, $I10, $P10) = rx482_cur."!mark_fail"(0)
    lt rx482_pos, -1, rx482_done
    eq rx482_pos, -1, rx482_fail
    jump $I10
  rx482_done:
    rx482_cur."!cursor_fail"()
    if_null rx482_debug, debug_618
    rx482_cur."!cursor_debug"("FAIL", "term:sym<variable>")
  debug_618:
    .return (rx482_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<variable>"  :nsentry("!PREFIX__term:sym<variable>") :subid("108_1300057348.719") :method
.annotate 'line', 4
    $P484 = self."!PREFIX__!subrule"("variable", "")
    new $P485, "ResizablePMCArray"
    push $P485, $P484
    .return ($P485)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<package_declarator>"  :subid("109_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx488_tgt
    .local int rx488_pos
    .local int rx488_off
    .local int rx488_eos
    .local int rx488_rep
    .local pmc rx488_cur
    .local pmc rx488_debug
    (rx488_cur, rx488_pos, rx488_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx488_cur
    .local pmc match
    .lex "$/", match
    length rx488_eos, rx488_tgt
    gt rx488_pos, rx488_eos, rx488_done
    set rx488_off, 0
    lt rx488_pos, 2, rx488_start
    sub rx488_off, rx488_pos, 1
    substr rx488_tgt, rx488_tgt, rx488_off
  rx488_start:
    eq $I10, 1, rx488_restart
    if_null rx488_debug, debug_619
    rx488_cur."!cursor_debug"("START", "term:sym<package_declarator>")
  debug_619:
    $I10 = self.'from'()
    ne $I10, -1, rxscan492_done
    goto rxscan492_scan
  rxscan492_loop:
    (rx488_pos) = rx488_cur."from"()
    inc rx488_pos
    rx488_cur."!cursor_from"(rx488_pos)
    ge rx488_pos, rx488_eos, rxscan492_done
  rxscan492_scan:
    set_addr $I10, rxscan492_loop
    rx488_cur."!mark_push"(0, rx488_pos, $I10)
  rxscan492_done:
.annotate 'line', 264
  # rx subrule "package_declarator" subtype=capture negate=
    rx488_cur."!cursor_pos"(rx488_pos)
    $P10 = rx488_cur."package_declarator"()
    unless $P10, rx488_fail
    rx488_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx488_pos = $P10."pos"()
  # rx pass
    rx488_cur."!cursor_pass"(rx488_pos, "term:sym<package_declarator>")
    if_null rx488_debug, debug_620
    rx488_cur."!cursor_debug"("PASS", "term:sym<package_declarator>", " at pos=", rx488_pos)
  debug_620:
    .return (rx488_cur)
  rx488_restart:
.annotate 'line', 4
    if_null rx488_debug, debug_621
    rx488_cur."!cursor_debug"("NEXT", "term:sym<package_declarator>")
  debug_621:
  rx488_fail:
    (rx488_rep, rx488_pos, $I10, $P10) = rx488_cur."!mark_fail"(0)
    lt rx488_pos, -1, rx488_done
    eq rx488_pos, -1, rx488_fail
    jump $I10
  rx488_done:
    rx488_cur."!cursor_fail"()
    if_null rx488_debug, debug_622
    rx488_cur."!cursor_debug"("FAIL", "term:sym<package_declarator>")
  debug_622:
    .return (rx488_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<package_declarator>"  :nsentry("!PREFIX__term:sym<package_declarator>") :subid("110_1300057348.719") :method
.annotate 'line', 4
    $P490 = self."!PREFIX__!subrule"("package_declarator", "")
    new $P491, "ResizablePMCArray"
    push $P491, $P490
    .return ($P491)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<scope_declarator>"  :subid("111_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx494_tgt
    .local int rx494_pos
    .local int rx494_off
    .local int rx494_eos
    .local int rx494_rep
    .local pmc rx494_cur
    .local pmc rx494_debug
    (rx494_cur, rx494_pos, rx494_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx494_cur
    .local pmc match
    .lex "$/", match
    length rx494_eos, rx494_tgt
    gt rx494_pos, rx494_eos, rx494_done
    set rx494_off, 0
    lt rx494_pos, 2, rx494_start
    sub rx494_off, rx494_pos, 1
    substr rx494_tgt, rx494_tgt, rx494_off
  rx494_start:
    eq $I10, 1, rx494_restart
    if_null rx494_debug, debug_623
    rx494_cur."!cursor_debug"("START", "term:sym<scope_declarator>")
  debug_623:
    $I10 = self.'from'()
    ne $I10, -1, rxscan498_done
    goto rxscan498_scan
  rxscan498_loop:
    (rx494_pos) = rx494_cur."from"()
    inc rx494_pos
    rx494_cur."!cursor_from"(rx494_pos)
    ge rx494_pos, rx494_eos, rxscan498_done
  rxscan498_scan:
    set_addr $I10, rxscan498_loop
    rx494_cur."!mark_push"(0, rx494_pos, $I10)
  rxscan498_done:
.annotate 'line', 265
  # rx subrule "scope_declarator" subtype=capture negate=
    rx494_cur."!cursor_pos"(rx494_pos)
    $P10 = rx494_cur."scope_declarator"()
    unless $P10, rx494_fail
    rx494_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scope_declarator")
    rx494_pos = $P10."pos"()
  # rx pass
    rx494_cur."!cursor_pass"(rx494_pos, "term:sym<scope_declarator>")
    if_null rx494_debug, debug_624
    rx494_cur."!cursor_debug"("PASS", "term:sym<scope_declarator>", " at pos=", rx494_pos)
  debug_624:
    .return (rx494_cur)
  rx494_restart:
.annotate 'line', 4
    if_null rx494_debug, debug_625
    rx494_cur."!cursor_debug"("NEXT", "term:sym<scope_declarator>")
  debug_625:
  rx494_fail:
    (rx494_rep, rx494_pos, $I10, $P10) = rx494_cur."!mark_fail"(0)
    lt rx494_pos, -1, rx494_done
    eq rx494_pos, -1, rx494_fail
    jump $I10
  rx494_done:
    rx494_cur."!cursor_fail"()
    if_null rx494_debug, debug_626
    rx494_cur."!cursor_debug"("FAIL", "term:sym<scope_declarator>")
  debug_626:
    .return (rx494_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<scope_declarator>"  :nsentry("!PREFIX__term:sym<scope_declarator>") :subid("112_1300057348.719") :method
.annotate 'line', 4
    $P496 = self."!PREFIX__!subrule"("scope_declarator", "")
    new $P497, "ResizablePMCArray"
    push $P497, $P496
    .return ($P497)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<routine_declarator>"  :subid("113_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx500_tgt
    .local int rx500_pos
    .local int rx500_off
    .local int rx500_eos
    .local int rx500_rep
    .local pmc rx500_cur
    .local pmc rx500_debug
    (rx500_cur, rx500_pos, rx500_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx500_cur
    .local pmc match
    .lex "$/", match
    length rx500_eos, rx500_tgt
    gt rx500_pos, rx500_eos, rx500_done
    set rx500_off, 0
    lt rx500_pos, 2, rx500_start
    sub rx500_off, rx500_pos, 1
    substr rx500_tgt, rx500_tgt, rx500_off
  rx500_start:
    eq $I10, 1, rx500_restart
    if_null rx500_debug, debug_627
    rx500_cur."!cursor_debug"("START", "term:sym<routine_declarator>")
  debug_627:
    $I10 = self.'from'()
    ne $I10, -1, rxscan504_done
    goto rxscan504_scan
  rxscan504_loop:
    (rx500_pos) = rx500_cur."from"()
    inc rx500_pos
    rx500_cur."!cursor_from"(rx500_pos)
    ge rx500_pos, rx500_eos, rxscan504_done
  rxscan504_scan:
    set_addr $I10, rxscan504_loop
    rx500_cur."!mark_push"(0, rx500_pos, $I10)
  rxscan504_done:
.annotate 'line', 266
  # rx subrule "routine_declarator" subtype=capture negate=
    rx500_cur."!cursor_pos"(rx500_pos)
    $P10 = rx500_cur."routine_declarator"()
    unless $P10, rx500_fail
    rx500_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx500_pos = $P10."pos"()
  # rx pass
    rx500_cur."!cursor_pass"(rx500_pos, "term:sym<routine_declarator>")
    if_null rx500_debug, debug_628
    rx500_cur."!cursor_debug"("PASS", "term:sym<routine_declarator>", " at pos=", rx500_pos)
  debug_628:
    .return (rx500_cur)
  rx500_restart:
.annotate 'line', 4
    if_null rx500_debug, debug_629
    rx500_cur."!cursor_debug"("NEXT", "term:sym<routine_declarator>")
  debug_629:
  rx500_fail:
    (rx500_rep, rx500_pos, $I10, $P10) = rx500_cur."!mark_fail"(0)
    lt rx500_pos, -1, rx500_done
    eq rx500_pos, -1, rx500_fail
    jump $I10
  rx500_done:
    rx500_cur."!cursor_fail"()
    if_null rx500_debug, debug_630
    rx500_cur."!cursor_debug"("FAIL", "term:sym<routine_declarator>")
  debug_630:
    .return (rx500_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<routine_declarator>"  :nsentry("!PREFIX__term:sym<routine_declarator>") :subid("114_1300057348.719") :method
.annotate 'line', 4
    $P502 = self."!PREFIX__!subrule"("routine_declarator", "")
    new $P503, "ResizablePMCArray"
    push $P503, $P502
    .return ($P503)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<multi_declarator>"  :subid("115_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P516 = "118_1300057348.719" 
    capture_lex $P516
    .const 'Sub' $P511 = "117_1300057348.719" 
    capture_lex $P511
    .local string rx506_tgt
    .local int rx506_pos
    .local int rx506_off
    .local int rx506_eos
    .local int rx506_rep
    .local pmc rx506_cur
    .local pmc rx506_debug
    (rx506_cur, rx506_pos, rx506_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx506_cur
    .local pmc match
    .lex "$/", match
    length rx506_eos, rx506_tgt
    gt rx506_pos, rx506_eos, rx506_done
    set rx506_off, 0
    lt rx506_pos, 2, rx506_start
    sub rx506_off, rx506_pos, 1
    substr rx506_tgt, rx506_tgt, rx506_off
  rx506_start:
    eq $I10, 1, rx506_restart
    if_null rx506_debug, debug_631
    rx506_cur."!cursor_debug"("START", "term:sym<multi_declarator>")
  debug_631:
    $I10 = self.'from'()
    ne $I10, -1, rxscan509_done
    goto rxscan509_scan
  rxscan509_loop:
    (rx506_pos) = rx506_cur."from"()
    inc rx506_pos
    rx506_cur."!cursor_from"(rx506_pos)
    ge rx506_pos, rx506_eos, rxscan509_done
  rxscan509_scan:
    set_addr $I10, rxscan509_loop
    rx506_cur."!mark_push"(0, rx506_pos, $I10)
  rxscan509_done:
.annotate 'line', 268
  # rx subrule "before" subtype=zerowidth negate=
    rx506_cur."!cursor_pos"(rx506_pos)
    .const 'Sub' $P511 = "117_1300057348.719" 
    capture_lex $P511
    $P10 = rx506_cur."before"($P511)
    unless $P10, rx506_fail
.annotate 'line', 269
  # rx subrule "before" subtype=zerowidth negate=1
    rx506_cur."!cursor_pos"(rx506_pos)
    .const 'Sub' $P516 = "118_1300057348.719" 
    capture_lex $P516
    $P10 = rx506_cur."before"($P516)
    if $P10, rx506_fail
.annotate 'line', 270
  # rx subrule "multi_declarator" subtype=capture negate=
    rx506_cur."!cursor_pos"(rx506_pos)
    $P10 = rx506_cur."multi_declarator"()
    unless $P10, rx506_fail
    rx506_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx506_pos = $P10."pos"()
.annotate 'line', 267
  # rx pass
    rx506_cur."!cursor_pass"(rx506_pos, "term:sym<multi_declarator>")
    if_null rx506_debug, debug_640
    rx506_cur."!cursor_debug"("PASS", "term:sym<multi_declarator>", " at pos=", rx506_pos)
  debug_640:
    .return (rx506_cur)
  rx506_restart:
.annotate 'line', 4
    if_null rx506_debug, debug_641
    rx506_cur."!cursor_debug"("NEXT", "term:sym<multi_declarator>")
  debug_641:
  rx506_fail:
    (rx506_rep, rx506_pos, $I10, $P10) = rx506_cur."!mark_fail"(0)
    lt rx506_pos, -1, rx506_done
    eq rx506_pos, -1, rx506_fail
    jump $I10
  rx506_done:
    rx506_cur."!cursor_fail"()
    if_null rx506_debug, debug_642
    rx506_cur."!cursor_debug"("FAIL", "term:sym<multi_declarator>")
  debug_642:
    .return (rx506_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<multi_declarator>"  :nsentry("!PREFIX__term:sym<multi_declarator>") :subid("116_1300057348.719") :method
.annotate 'line', 4
    new $P508, "ResizablePMCArray"
    push $P508, ""
    .return ($P508)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block510"  :anon :subid("117_1300057348.719") :method :outer("115_1300057348.719")
.annotate 'line', 268
    .local string rx512_tgt
    .local int rx512_pos
    .local int rx512_off
    .local int rx512_eos
    .local int rx512_rep
    .local pmc rx512_cur
    .local pmc rx512_debug
    (rx512_cur, rx512_pos, rx512_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx512_cur
    .local pmc match
    .lex "$/", match
    length rx512_eos, rx512_tgt
    gt rx512_pos, rx512_eos, rx512_done
    set rx512_off, 0
    lt rx512_pos, 2, rx512_start
    sub rx512_off, rx512_pos, 1
    substr rx512_tgt, rx512_tgt, rx512_off
  rx512_start:
    eq $I10, 1, rx512_restart
    if_null rx512_debug, debug_632
    rx512_cur."!cursor_debug"("START", "")
  debug_632:
    $I10 = self.'from'()
    ne $I10, -1, rxscan513_done
    goto rxscan513_scan
  rxscan513_loop:
    (rx512_pos) = rx512_cur."from"()
    inc rx512_pos
    rx512_cur."!cursor_from"(rx512_pos)
    ge rx512_pos, rx512_eos, rxscan513_done
  rxscan513_scan:
    set_addr $I10, rxscan513_loop
    rx512_cur."!mark_push"(0, rx512_pos, $I10)
  rxscan513_done:
  alt514_0:
    set_addr $I10, alt514_1
    rx512_cur."!mark_push"(0, rx512_pos, $I10)
  # rx literal  "multi"
    add $I11, rx512_pos, 5
    gt $I11, rx512_eos, rx512_fail
    sub $I11, rx512_pos, rx512_off
    substr $S10, rx512_tgt, $I11, 5
    ne $S10, "multi", rx512_fail
    add rx512_pos, 5
    goto alt514_end
  alt514_1:
    set_addr $I10, alt514_2
    rx512_cur."!mark_push"(0, rx512_pos, $I10)
  # rx literal  "proto"
    add $I11, rx512_pos, 5
    gt $I11, rx512_eos, rx512_fail
    sub $I11, rx512_pos, rx512_off
    substr $S10, rx512_tgt, $I11, 5
    ne $S10, "proto", rx512_fail
    add rx512_pos, 5
    goto alt514_end
  alt514_2:
  # rx literal  "only"
    add $I11, rx512_pos, 4
    gt $I11, rx512_eos, rx512_fail
    sub $I11, rx512_pos, rx512_off
    substr $S10, rx512_tgt, $I11, 4
    ne $S10, "only", rx512_fail
    add rx512_pos, 4
  alt514_end:
  # rx pass
    rx512_cur."!cursor_pass"(rx512_pos, "")
    if_null rx512_debug, debug_633
    rx512_cur."!cursor_debug"("PASS", "", " at pos=", rx512_pos)
  debug_633:
    .return (rx512_cur)
  rx512_restart:
    if_null rx512_debug, debug_634
    rx512_cur."!cursor_debug"("NEXT", "")
  debug_634:
  rx512_fail:
    (rx512_rep, rx512_pos, $I10, $P10) = rx512_cur."!mark_fail"(0)
    lt rx512_pos, -1, rx512_done
    eq rx512_pos, -1, rx512_fail
    jump $I10
  rx512_done:
    rx512_cur."!cursor_fail"()
    if_null rx512_debug, debug_635
    rx512_cur."!cursor_debug"("FAIL", "")
  debug_635:
    .return (rx512_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block515"  :anon :subid("118_1300057348.719") :method :outer("115_1300057348.719")
.annotate 'line', 269
    .local string rx517_tgt
    .local int rx517_pos
    .local int rx517_off
    .local int rx517_eos
    .local int rx517_rep
    .local pmc rx517_cur
    .local pmc rx517_debug
    (rx517_cur, rx517_pos, rx517_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx517_cur
    .local pmc match
    .lex "$/", match
    length rx517_eos, rx517_tgt
    gt rx517_pos, rx517_eos, rx517_done
    set rx517_off, 0
    lt rx517_pos, 2, rx517_start
    sub rx517_off, rx517_pos, 1
    substr rx517_tgt, rx517_tgt, rx517_off
  rx517_start:
    eq $I10, 1, rx517_restart
    if_null rx517_debug, debug_636
    rx517_cur."!cursor_debug"("START", "")
  debug_636:
    $I10 = self.'from'()
    ne $I10, -1, rxscan518_done
    goto rxscan518_scan
  rxscan518_loop:
    (rx517_pos) = rx517_cur."from"()
    inc rx517_pos
    rx517_cur."!cursor_from"(rx517_pos)
    ge rx517_pos, rx517_eos, rxscan518_done
  rxscan518_scan:
    set_addr $I10, rxscan518_loop
    rx517_cur."!mark_push"(0, rx517_pos, $I10)
  rxscan518_done:
  # rx literal  "proto"
    add $I11, rx517_pos, 5
    gt $I11, rx517_eos, rx517_fail
    sub $I11, rx517_pos, rx517_off
    substr $S10, rx517_tgt, $I11, 5
    ne $S10, "proto", rx517_fail
    add rx517_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx517_cur."!cursor_pos"(rx517_pos)
    $P10 = rx517_cur."ws"()
    unless $P10, rx517_fail
    rx517_pos = $P10."pos"()
  alt519_0:
    set_addr $I10, alt519_1
    rx517_cur."!mark_push"(0, rx517_pos, $I10)
  # rx literal  "regex"
    add $I11, rx517_pos, 5
    gt $I11, rx517_eos, rx517_fail
    sub $I11, rx517_pos, rx517_off
    substr $S10, rx517_tgt, $I11, 5
    ne $S10, "regex", rx517_fail
    add rx517_pos, 5
    goto alt519_end
  alt519_1:
    set_addr $I10, alt519_2
    rx517_cur."!mark_push"(0, rx517_pos, $I10)
  # rx literal  "token"
    add $I11, rx517_pos, 5
    gt $I11, rx517_eos, rx517_fail
    sub $I11, rx517_pos, rx517_off
    substr $S10, rx517_tgt, $I11, 5
    ne $S10, "token", rx517_fail
    add rx517_pos, 5
    goto alt519_end
  alt519_2:
  # rx literal  "rule"
    add $I11, rx517_pos, 4
    gt $I11, rx517_eos, rx517_fail
    sub $I11, rx517_pos, rx517_off
    substr $S10, rx517_tgt, $I11, 4
    ne $S10, "rule", rx517_fail
    add rx517_pos, 4
  alt519_end:
  # rx pass
    rx517_cur."!cursor_pass"(rx517_pos, "")
    if_null rx517_debug, debug_637
    rx517_cur."!cursor_debug"("PASS", "", " at pos=", rx517_pos)
  debug_637:
    .return (rx517_cur)
  rx517_restart:
    if_null rx517_debug, debug_638
    rx517_cur."!cursor_debug"("NEXT", "")
  debug_638:
  rx517_fail:
    (rx517_rep, rx517_pos, $I10, $P10) = rx517_cur."!mark_fail"(0)
    lt rx517_pos, -1, rx517_done
    eq rx517_pos, -1, rx517_fail
    jump $I10
  rx517_done:
    rx517_cur."!cursor_fail"()
    if_null rx517_debug, debug_639
    rx517_cur."!cursor_debug"("FAIL", "")
  debug_639:
    .return (rx517_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<regex_declarator>"  :subid("119_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx521_tgt
    .local int rx521_pos
    .local int rx521_off
    .local int rx521_eos
    .local int rx521_rep
    .local pmc rx521_cur
    .local pmc rx521_debug
    (rx521_cur, rx521_pos, rx521_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx521_cur
    .local pmc match
    .lex "$/", match
    length rx521_eos, rx521_tgt
    gt rx521_pos, rx521_eos, rx521_done
    set rx521_off, 0
    lt rx521_pos, 2, rx521_start
    sub rx521_off, rx521_pos, 1
    substr rx521_tgt, rx521_tgt, rx521_off
  rx521_start:
    eq $I10, 1, rx521_restart
    if_null rx521_debug, debug_643
    rx521_cur."!cursor_debug"("START", "term:sym<regex_declarator>")
  debug_643:
    $I10 = self.'from'()
    ne $I10, -1, rxscan525_done
    goto rxscan525_scan
  rxscan525_loop:
    (rx521_pos) = rx521_cur."from"()
    inc rx521_pos
    rx521_cur."!cursor_from"(rx521_pos)
    ge rx521_pos, rx521_eos, rxscan525_done
  rxscan525_scan:
    set_addr $I10, rxscan525_loop
    rx521_cur."!mark_push"(0, rx521_pos, $I10)
  rxscan525_done:
.annotate 'line', 272
  # rx subrule "regex_declarator" subtype=capture negate=
    rx521_cur."!cursor_pos"(rx521_pos)
    $P10 = rx521_cur."regex_declarator"()
    unless $P10, rx521_fail
    rx521_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("regex_declarator")
    rx521_pos = $P10."pos"()
  # rx pass
    rx521_cur."!cursor_pass"(rx521_pos, "term:sym<regex_declarator>")
    if_null rx521_debug, debug_644
    rx521_cur."!cursor_debug"("PASS", "term:sym<regex_declarator>", " at pos=", rx521_pos)
  debug_644:
    .return (rx521_cur)
  rx521_restart:
.annotate 'line', 4
    if_null rx521_debug, debug_645
    rx521_cur."!cursor_debug"("NEXT", "term:sym<regex_declarator>")
  debug_645:
  rx521_fail:
    (rx521_rep, rx521_pos, $I10, $P10) = rx521_cur."!mark_fail"(0)
    lt rx521_pos, -1, rx521_done
    eq rx521_pos, -1, rx521_fail
    jump $I10
  rx521_done:
    rx521_cur."!cursor_fail"()
    if_null rx521_debug, debug_646
    rx521_cur."!cursor_debug"("FAIL", "term:sym<regex_declarator>")
  debug_646:
    .return (rx521_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<regex_declarator>"  :nsentry("!PREFIX__term:sym<regex_declarator>") :subid("120_1300057348.719") :method
.annotate 'line', 4
    $P523 = self."!PREFIX__!subrule"("regex_declarator", "")
    new $P524, "ResizablePMCArray"
    push $P524, $P523
    .return ($P524)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<statement_prefix>"  :subid("121_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx527_tgt
    .local int rx527_pos
    .local int rx527_off
    .local int rx527_eos
    .local int rx527_rep
    .local pmc rx527_cur
    .local pmc rx527_debug
    (rx527_cur, rx527_pos, rx527_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx527_cur
    .local pmc match
    .lex "$/", match
    length rx527_eos, rx527_tgt
    gt rx527_pos, rx527_eos, rx527_done
    set rx527_off, 0
    lt rx527_pos, 2, rx527_start
    sub rx527_off, rx527_pos, 1
    substr rx527_tgt, rx527_tgt, rx527_off
  rx527_start:
    eq $I10, 1, rx527_restart
    if_null rx527_debug, debug_647
    rx527_cur."!cursor_debug"("START", "term:sym<statement_prefix>")
  debug_647:
    $I10 = self.'from'()
    ne $I10, -1, rxscan531_done
    goto rxscan531_scan
  rxscan531_loop:
    (rx527_pos) = rx527_cur."from"()
    inc rx527_pos
    rx527_cur."!cursor_from"(rx527_pos)
    ge rx527_pos, rx527_eos, rxscan531_done
  rxscan531_scan:
    set_addr $I10, rxscan531_loop
    rx527_cur."!mark_push"(0, rx527_pos, $I10)
  rxscan531_done:
.annotate 'line', 273
  # rx subrule "statement_prefix" subtype=capture negate=
    rx527_cur."!cursor_pos"(rx527_pos)
    $P10 = rx527_cur."statement_prefix"()
    unless $P10, rx527_fail
    rx527_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_prefix")
    rx527_pos = $P10."pos"()
  # rx pass
    rx527_cur."!cursor_pass"(rx527_pos, "term:sym<statement_prefix>")
    if_null rx527_debug, debug_648
    rx527_cur."!cursor_debug"("PASS", "term:sym<statement_prefix>", " at pos=", rx527_pos)
  debug_648:
    .return (rx527_cur)
  rx527_restart:
.annotate 'line', 4
    if_null rx527_debug, debug_649
    rx527_cur."!cursor_debug"("NEXT", "term:sym<statement_prefix>")
  debug_649:
  rx527_fail:
    (rx527_rep, rx527_pos, $I10, $P10) = rx527_cur."!mark_fail"(0)
    lt rx527_pos, -1, rx527_done
    eq rx527_pos, -1, rx527_fail
    jump $I10
  rx527_done:
    rx527_cur."!cursor_fail"()
    if_null rx527_debug, debug_650
    rx527_cur."!cursor_debug"("FAIL", "term:sym<statement_prefix>")
  debug_650:
    .return (rx527_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<statement_prefix>"  :nsentry("!PREFIX__term:sym<statement_prefix>") :subid("122_1300057348.719") :method
.annotate 'line', 4
    $P529 = self."!PREFIX__!subrule"("statement_prefix", "")
    new $P530, "ResizablePMCArray"
    push $P530, $P529
    .return ($P530)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<lambda>"  :subid("123_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx533_tgt
    .local int rx533_pos
    .local int rx533_off
    .local int rx533_eos
    .local int rx533_rep
    .local pmc rx533_cur
    .local pmc rx533_debug
    (rx533_cur, rx533_pos, rx533_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx533_cur
    .local pmc match
    .lex "$/", match
    length rx533_eos, rx533_tgt
    gt rx533_pos, rx533_eos, rx533_done
    set rx533_off, 0
    lt rx533_pos, 2, rx533_start
    sub rx533_off, rx533_pos, 1
    substr rx533_tgt, rx533_tgt, rx533_off
  rx533_start:
    eq $I10, 1, rx533_restart
    if_null rx533_debug, debug_651
    rx533_cur."!cursor_debug"("START", "term:sym<lambda>")
  debug_651:
    $I10 = self.'from'()
    ne $I10, -1, rxscan536_done
    goto rxscan536_scan
  rxscan536_loop:
    (rx533_pos) = rx533_cur."from"()
    inc rx533_pos
    rx533_cur."!cursor_from"(rx533_pos)
    ge rx533_pos, rx533_eos, rxscan536_done
  rxscan536_scan:
    set_addr $I10, rxscan536_loop
    rx533_cur."!mark_push"(0, rx533_pos, $I10)
  rxscan536_done:
.annotate 'line', 274
  # rx subrule "lambda" subtype=zerowidth negate=
    rx533_cur."!cursor_pos"(rx533_pos)
    $P10 = rx533_cur."lambda"()
    unless $P10, rx533_fail
  # rx subrule "pblock" subtype=capture negate=
    rx533_cur."!cursor_pos"(rx533_pos)
    $P10 = rx533_cur."pblock"()
    unless $P10, rx533_fail
    rx533_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx533_pos = $P10."pos"()
  # rx pass
    rx533_cur."!cursor_pass"(rx533_pos, "term:sym<lambda>")
    if_null rx533_debug, debug_652
    rx533_cur."!cursor_debug"("PASS", "term:sym<lambda>", " at pos=", rx533_pos)
  debug_652:
    .return (rx533_cur)
  rx533_restart:
.annotate 'line', 4
    if_null rx533_debug, debug_653
    rx533_cur."!cursor_debug"("NEXT", "term:sym<lambda>")
  debug_653:
  rx533_fail:
    (rx533_rep, rx533_pos, $I10, $P10) = rx533_cur."!mark_fail"(0)
    lt rx533_pos, -1, rx533_done
    eq rx533_pos, -1, rx533_fail
    jump $I10
  rx533_done:
    rx533_cur."!cursor_fail"()
    if_null rx533_debug, debug_654
    rx533_cur."!cursor_debug"("FAIL", "term:sym<lambda>")
  debug_654:
    .return (rx533_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<lambda>"  :nsentry("!PREFIX__term:sym<lambda>") :subid("124_1300057348.719") :method
.annotate 'line', 4
    new $P535, "ResizablePMCArray"
    push $P535, ""
    .return ($P535)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "fatarrow"  :subid("125_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx538_tgt
    .local int rx538_pos
    .local int rx538_off
    .local int rx538_eos
    .local int rx538_rep
    .local pmc rx538_cur
    .local pmc rx538_debug
    (rx538_cur, rx538_pos, rx538_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx538_cur
    .local pmc match
    .lex "$/", match
    length rx538_eos, rx538_tgt
    gt rx538_pos, rx538_eos, rx538_done
    set rx538_off, 0
    lt rx538_pos, 2, rx538_start
    sub rx538_off, rx538_pos, 1
    substr rx538_tgt, rx538_tgt, rx538_off
  rx538_start:
    eq $I10, 1, rx538_restart
    if_null rx538_debug, debug_655
    rx538_cur."!cursor_debug"("START", "fatarrow")
  debug_655:
    $I10 = self.'from'()
    ne $I10, -1, rxscan542_done
    goto rxscan542_scan
  rxscan542_loop:
    (rx538_pos) = rx538_cur."from"()
    inc rx538_pos
    rx538_cur."!cursor_from"(rx538_pos)
    ge rx538_pos, rx538_eos, rxscan542_done
  rxscan542_scan:
    set_addr $I10, rxscan542_loop
    rx538_cur."!mark_push"(0, rx538_pos, $I10)
  rxscan542_done:
.annotate 'line', 277
  # rx subrule "identifier" subtype=capture negate=
    rx538_cur."!cursor_pos"(rx538_pos)
    $P10 = rx538_cur."identifier"()
    unless $P10, rx538_fail
    rx538_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("key")
    rx538_pos = $P10."pos"()
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx538_pos, rx538_off
    set rx538_rep, 0
    sub $I12, rx538_eos, rx538_pos
  rxenumcharlistq543_loop:
    le $I12, 0, rxenumcharlistq543_done
    substr $S10, rx538_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq543_done
    inc rx538_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq543_loop
  rxenumcharlistq543_done:
    add rx538_pos, rx538_pos, rx538_rep
  # rx literal  "=>"
    add $I11, rx538_pos, 2
    gt $I11, rx538_eos, rx538_fail
    sub $I11, rx538_pos, rx538_off
    substr $S10, rx538_tgt, $I11, 2
    ne $S10, "=>", rx538_fail
    add rx538_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx538_cur."!cursor_pos"(rx538_pos)
    $P10 = rx538_cur."ws"()
    unless $P10, rx538_fail
    rx538_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx538_cur."!cursor_pos"(rx538_pos)
    $P10 = rx538_cur."EXPR"("i=")
    unless $P10, rx538_fail
    rx538_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("val")
    rx538_pos = $P10."pos"()
.annotate 'line', 276
  # rx pass
    rx538_cur."!cursor_pass"(rx538_pos, "fatarrow")
    if_null rx538_debug, debug_656
    rx538_cur."!cursor_debug"("PASS", "fatarrow", " at pos=", rx538_pos)
  debug_656:
    .return (rx538_cur)
  rx538_restart:
.annotate 'line', 4
    if_null rx538_debug, debug_657
    rx538_cur."!cursor_debug"("NEXT", "fatarrow")
  debug_657:
  rx538_fail:
    (rx538_rep, rx538_pos, $I10, $P10) = rx538_cur."!mark_fail"(0)
    lt rx538_pos, -1, rx538_done
    eq rx538_pos, -1, rx538_fail
    jump $I10
  rx538_done:
    rx538_cur."!cursor_fail"()
    if_null rx538_debug, debug_658
    rx538_cur."!cursor_debug"("FAIL", "fatarrow")
  debug_658:
    .return (rx538_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__fatarrow"  :nsentry("!PREFIX__fatarrow") :subid("126_1300057348.719") :method
.annotate 'line', 4
    $P540 = self."!PREFIX__!subrule"("identifier", "")
    new $P541, "ResizablePMCArray"
    push $P541, $P540
    .return ($P541)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "colonpair"  :subid("127_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx545_tgt
    .local int rx545_pos
    .local int rx545_off
    .local int rx545_eos
    .local int rx545_rep
    .local pmc rx545_cur
    .local pmc rx545_debug
    (rx545_cur, rx545_pos, rx545_tgt, $I10) = self."!cursor_start"()
    rx545_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx545_cur
    .local pmc match
    .lex "$/", match
    length rx545_eos, rx545_tgt
    gt rx545_pos, rx545_eos, rx545_done
    set rx545_off, 0
    lt rx545_pos, 2, rx545_start
    sub rx545_off, rx545_pos, 1
    substr rx545_tgt, rx545_tgt, rx545_off
  rx545_start:
    eq $I10, 1, rx545_restart
    if_null rx545_debug, debug_659
    rx545_cur."!cursor_debug"("START", "colonpair")
  debug_659:
    $I10 = self.'from'()
    ne $I10, -1, rxscan551_done
    goto rxscan551_scan
  rxscan551_loop:
    (rx545_pos) = rx545_cur."from"()
    inc rx545_pos
    rx545_cur."!cursor_from"(rx545_pos)
    ge rx545_pos, rx545_eos, rxscan551_done
  rxscan551_scan:
    set_addr $I10, rxscan551_loop
    rx545_cur."!mark_push"(0, rx545_pos, $I10)
  rxscan551_done:
.annotate 'line', 281
  # rx literal  ":"
    add $I11, rx545_pos, 1
    gt $I11, rx545_eos, rx545_fail
    sub $I11, rx545_pos, rx545_off
    ord $I11, rx545_tgt, $I11
    ne $I11, 58, rx545_fail
    add rx545_pos, 1
  alt552_0:
.annotate 'line', 282
    set_addr $I10, alt552_1
    rx545_cur."!mark_push"(0, rx545_pos, $I10)
.annotate 'line', 283
  # rx subcapture "not"
    set_addr $I10, rxcap_553_fail
    rx545_cur."!mark_push"(0, rx545_pos, $I10)
  # rx literal  "!"
    add $I11, rx545_pos, 1
    gt $I11, rx545_eos, rx545_fail
    sub $I11, rx545_pos, rx545_off
    ord $I11, rx545_tgt, $I11
    ne $I11, 33, rx545_fail
    add rx545_pos, 1
    set_addr $I10, rxcap_553_fail
    ($I12, $I11) = rx545_cur."!mark_peek"($I10)
    rx545_cur."!cursor_pos"($I11)
    ($P10) = rx545_cur."!cursor_start"()
    $P10."!cursor_pass"(rx545_pos, "")
    rx545_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("not")
    goto rxcap_553_done
  rxcap_553_fail:
    goto rx545_fail
  rxcap_553_done:
  # rx subrule "identifier" subtype=capture negate=
    rx545_cur."!cursor_pos"(rx545_pos)
    $P10 = rx545_cur."identifier"()
    unless $P10, rx545_fail
    rx545_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx545_pos = $P10."pos"()
    goto alt552_end
  alt552_1:
    set_addr $I10, alt552_2
    rx545_cur."!mark_push"(0, rx545_pos, $I10)
.annotate 'line', 284
  # rx subrule "identifier" subtype=capture negate=
    rx545_cur."!cursor_pos"(rx545_pos)
    $P10 = rx545_cur."identifier"()
    unless $P10, rx545_fail
    rx545_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx545_pos = $P10."pos"()
  # rx rxquantr554 ** 0..1
    set_addr $I10, rxquantr554_done
    rx545_cur."!mark_push"(0, rx545_pos, $I10)
  rxquantr554_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx545_cur."!cursor_pos"(rx545_pos)
    $P10 = rx545_cur."circumfix"()
    unless $P10, rx545_fail
    goto rxsubrule555_pass
  rxsubrule555_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx545_fail
  rxsubrule555_pass:
    set_addr $I10, rxsubrule555_back
    rx545_cur."!mark_push"(0, rx545_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx545_pos = $P10."pos"()
    set_addr $I10, rxquantr554_done
    (rx545_rep) = rx545_cur."!mark_commit"($I10)
  rxquantr554_done:
    goto alt552_end
  alt552_2:
.annotate 'line', 285
  # rx subrule "circumfix" subtype=capture negate=
    rx545_cur."!cursor_pos"(rx545_pos)
    $P10 = rx545_cur."circumfix"()
    unless $P10, rx545_fail
    rx545_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("circumfix")
    rx545_pos = $P10."pos"()
  alt552_end:
.annotate 'line', 280
  # rx pass
    rx545_cur."!cursor_pass"(rx545_pos, "colonpair")
    if_null rx545_debug, debug_660
    rx545_cur."!cursor_debug"("PASS", "colonpair", " at pos=", rx545_pos)
  debug_660:
    .return (rx545_cur)
  rx545_restart:
.annotate 'line', 4
    if_null rx545_debug, debug_661
    rx545_cur."!cursor_debug"("NEXT", "colonpair")
  debug_661:
  rx545_fail:
    (rx545_rep, rx545_pos, $I10, $P10) = rx545_cur."!mark_fail"(0)
    lt rx545_pos, -1, rx545_done
    eq rx545_pos, -1, rx545_fail
    jump $I10
  rx545_done:
    rx545_cur."!cursor_fail"()
    if_null rx545_debug, debug_662
    rx545_cur."!cursor_debug"("FAIL", "colonpair")
  debug_662:
    .return (rx545_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__colonpair"  :nsentry("!PREFIX__colonpair") :subid("128_1300057348.719") :method
.annotate 'line', 4
    $P547 = self."!PREFIX__!subrule"("circumfix", ":")
    $P548 = self."!PREFIX__!subrule"("identifier", ":")
    $P549 = self."!PREFIX__!subrule"("identifier", ":!")
    new $P550, "ResizablePMCArray"
    push $P550, $P547
    push $P550, $P548
    push $P550, $P549
    .return ($P550)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable"  :subid("129_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx557_tgt
    .local int rx557_pos
    .local int rx557_off
    .local int rx557_eos
    .local int rx557_rep
    .local pmc rx557_cur
    .local pmc rx557_debug
    (rx557_cur, rx557_pos, rx557_tgt, $I10) = self."!cursor_start"()
    rx557_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx557_cur
    .local pmc match
    .lex "$/", match
    length rx557_eos, rx557_tgt
    gt rx557_pos, rx557_eos, rx557_done
    set rx557_off, 0
    lt rx557_pos, 2, rx557_start
    sub rx557_off, rx557_pos, 1
    substr rx557_tgt, rx557_tgt, rx557_off
  rx557_start:
    eq $I10, 1, rx557_restart
    if_null rx557_debug, debug_663
    rx557_cur."!cursor_debug"("START", "variable")
  debug_663:
    $I10 = self.'from'()
    ne $I10, -1, rxscan562_done
    goto rxscan562_scan
  rxscan562_loop:
    (rx557_pos) = rx557_cur."from"()
    inc rx557_pos
    rx557_cur."!cursor_from"(rx557_pos)
    ge rx557_pos, rx557_eos, rxscan562_done
  rxscan562_scan:
    set_addr $I10, rxscan562_loop
    rx557_cur."!mark_push"(0, rx557_pos, $I10)
  rxscan562_done:
  alt563_0:
.annotate 'line', 289
    set_addr $I10, alt563_1
    rx557_cur."!mark_push"(0, rx557_pos, $I10)
.annotate 'line', 290
  # rx subrule "sigil" subtype=capture negate=
    rx557_cur."!cursor_pos"(rx557_pos)
    $P10 = rx557_cur."sigil"()
    unless $P10, rx557_fail
    rx557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx557_pos = $P10."pos"()
  # rx rxquantr564 ** 0..1
    set_addr $I10, rxquantr564_done
    rx557_cur."!mark_push"(0, rx557_pos, $I10)
  rxquantr564_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx557_cur."!cursor_pos"(rx557_pos)
    $P10 = rx557_cur."twigil"()
    unless $P10, rx557_fail
    goto rxsubrule565_pass
  rxsubrule565_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx557_fail
  rxsubrule565_pass:
    set_addr $I10, rxsubrule565_back
    rx557_cur."!mark_push"(0, rx557_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx557_pos = $P10."pos"()
    set_addr $I10, rxquantr564_done
    (rx557_rep) = rx557_cur."!mark_commit"($I10)
  rxquantr564_done:
  # rx subrule "name" subtype=capture negate=
    rx557_cur."!cursor_pos"(rx557_pos)
    $P10 = rx557_cur."name"()
    unless $P10, rx557_fail
    rx557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    rx557_pos = $P10."pos"()
    goto alt563_end
  alt563_1:
    set_addr $I10, alt563_2
    rx557_cur."!mark_push"(0, rx557_pos, $I10)
.annotate 'line', 291
  # rx subrule "sigil" subtype=capture negate=
    rx557_cur."!cursor_pos"(rx557_pos)
    $P10 = rx557_cur."sigil"()
    unless $P10, rx557_fail
    rx557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx557_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx557_pos, rx557_off
    substr $S10, rx557_tgt, $I10, 1
    index $I11, "<[", $S10
    lt $I11, 0, rx557_fail
  # rx subrule "postcircumfix" subtype=capture negate=
    rx557_cur."!cursor_pos"(rx557_pos)
    $P10 = rx557_cur."postcircumfix"()
    unless $P10, rx557_fail
    rx557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("postcircumfix")
    rx557_pos = $P10."pos"()
    goto alt563_end
  alt563_2:
.annotate 'line', 292
  # rx subcapture "sigil"
    set_addr $I10, rxcap_566_fail
    rx557_cur."!mark_push"(0, rx557_pos, $I10)
  # rx literal  "$"
    add $I11, rx557_pos, 1
    gt $I11, rx557_eos, rx557_fail
    sub $I11, rx557_pos, rx557_off
    ord $I11, rx557_tgt, $I11
    ne $I11, 36, rx557_fail
    add rx557_pos, 1
    set_addr $I10, rxcap_566_fail
    ($I12, $I11) = rx557_cur."!mark_peek"($I10)
    rx557_cur."!cursor_pos"($I11)
    ($P10) = rx557_cur."!cursor_start"()
    $P10."!cursor_pass"(rx557_pos, "")
    rx557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_566_done
  rxcap_566_fail:
    goto rx557_fail
  rxcap_566_done:
  # rx subcapture "desigilname"
    set_addr $I10, rxcap_567_fail
    rx557_cur."!mark_push"(0, rx557_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx557_pos, rx557_eos, rx557_fail
    sub $I10, rx557_pos, rx557_off
    substr $S10, rx557_tgt, $I10, 1
    index $I11, "/_!", $S10
    lt $I11, 0, rx557_fail
    inc rx557_pos
    set_addr $I10, rxcap_567_fail
    ($I12, $I11) = rx557_cur."!mark_peek"($I10)
    rx557_cur."!cursor_pos"($I11)
    ($P10) = rx557_cur."!cursor_start"()
    $P10."!cursor_pass"(rx557_pos, "")
    rx557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    goto rxcap_567_done
  rxcap_567_fail:
    goto rx557_fail
  rxcap_567_done:
  alt563_end:
.annotate 'line', 289
  # rx pass
    rx557_cur."!cursor_pass"(rx557_pos, "variable")
    if_null rx557_debug, debug_664
    rx557_cur."!cursor_debug"("PASS", "variable", " at pos=", rx557_pos)
  debug_664:
    .return (rx557_cur)
  rx557_restart:
.annotate 'line', 4
    if_null rx557_debug, debug_665
    rx557_cur."!cursor_debug"("NEXT", "variable")
  debug_665:
  rx557_fail:
    (rx557_rep, rx557_pos, $I10, $P10) = rx557_cur."!mark_fail"(0)
    lt rx557_pos, -1, rx557_done
    eq rx557_pos, -1, rx557_fail
    jump $I10
  rx557_done:
    rx557_cur."!cursor_fail"()
    if_null rx557_debug, debug_666
    rx557_cur."!cursor_debug"("FAIL", "variable")
  debug_666:
    .return (rx557_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable"  :nsentry("!PREFIX__variable") :subid("130_1300057348.719") :method
.annotate 'line', 4
    $P559 = self."!PREFIX__!subrule"("sigil", "")
    $P560 = self."!PREFIX__!subrule"("sigil", "")
    new $P561, "ResizablePMCArray"
    push $P561, "$!"
    push $P561, "$_"
    push $P561, "$/"
    push $P561, $P559
    push $P561, $P560
    .return ($P561)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "sigil"  :subid("131_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx569_tgt
    .local int rx569_pos
    .local int rx569_off
    .local int rx569_eos
    .local int rx569_rep
    .local pmc rx569_cur
    .local pmc rx569_debug
    (rx569_cur, rx569_pos, rx569_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx569_cur
    .local pmc match
    .lex "$/", match
    length rx569_eos, rx569_tgt
    gt rx569_pos, rx569_eos, rx569_done
    set rx569_off, 0
    lt rx569_pos, 2, rx569_start
    sub rx569_off, rx569_pos, 1
    substr rx569_tgt, rx569_tgt, rx569_off
  rx569_start:
    eq $I10, 1, rx569_restart
    if_null rx569_debug, debug_667
    rx569_cur."!cursor_debug"("START", "sigil")
  debug_667:
    $I10 = self.'from'()
    ne $I10, -1, rxscan572_done
    goto rxscan572_scan
  rxscan572_loop:
    (rx569_pos) = rx569_cur."from"()
    inc rx569_pos
    rx569_cur."!cursor_from"(rx569_pos)
    ge rx569_pos, rx569_eos, rxscan572_done
  rxscan572_scan:
    set_addr $I10, rxscan572_loop
    rx569_cur."!mark_push"(0, rx569_pos, $I10)
  rxscan572_done:
.annotate 'line', 295
  # rx enumcharlist negate=0 
    ge rx569_pos, rx569_eos, rx569_fail
    sub $I10, rx569_pos, rx569_off
    substr $S10, rx569_tgt, $I10, 1
    index $I11, "$@%&", $S10
    lt $I11, 0, rx569_fail
    inc rx569_pos
  # rx pass
    rx569_cur."!cursor_pass"(rx569_pos, "sigil")
    if_null rx569_debug, debug_668
    rx569_cur."!cursor_debug"("PASS", "sigil", " at pos=", rx569_pos)
  debug_668:
    .return (rx569_cur)
  rx569_restart:
.annotate 'line', 4
    if_null rx569_debug, debug_669
    rx569_cur."!cursor_debug"("NEXT", "sigil")
  debug_669:
  rx569_fail:
    (rx569_rep, rx569_pos, $I10, $P10) = rx569_cur."!mark_fail"(0)
    lt rx569_pos, -1, rx569_done
    eq rx569_pos, -1, rx569_fail
    jump $I10
  rx569_done:
    rx569_cur."!cursor_fail"()
    if_null rx569_debug, debug_670
    rx569_cur."!cursor_debug"("FAIL", "sigil")
  debug_670:
    .return (rx569_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__sigil"  :nsentry("!PREFIX__sigil") :subid("132_1300057348.719") :method
.annotate 'line', 4
    new $P571, "ResizablePMCArray"
    push $P571, "&"
    push $P571, "%"
    push $P571, "@"
    push $P571, "$"
    .return ($P571)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "twigil"  :subid("133_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx574_tgt
    .local int rx574_pos
    .local int rx574_off
    .local int rx574_eos
    .local int rx574_rep
    .local pmc rx574_cur
    .local pmc rx574_debug
    (rx574_cur, rx574_pos, rx574_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx574_cur
    .local pmc match
    .lex "$/", match
    length rx574_eos, rx574_tgt
    gt rx574_pos, rx574_eos, rx574_done
    set rx574_off, 0
    lt rx574_pos, 2, rx574_start
    sub rx574_off, rx574_pos, 1
    substr rx574_tgt, rx574_tgt, rx574_off
  rx574_start:
    eq $I10, 1, rx574_restart
    if_null rx574_debug, debug_671
    rx574_cur."!cursor_debug"("START", "twigil")
  debug_671:
    $I10 = self.'from'()
    ne $I10, -1, rxscan577_done
    goto rxscan577_scan
  rxscan577_loop:
    (rx574_pos) = rx574_cur."from"()
    inc rx574_pos
    rx574_cur."!cursor_from"(rx574_pos)
    ge rx574_pos, rx574_eos, rxscan577_done
  rxscan577_scan:
    set_addr $I10, rxscan577_loop
    rx574_cur."!mark_push"(0, rx574_pos, $I10)
  rxscan577_done:
.annotate 'line', 297
  # rx enumcharlist negate=0 
    ge rx574_pos, rx574_eos, rx574_fail
    sub $I10, rx574_pos, rx574_off
    substr $S10, rx574_tgt, $I10, 1
    index $I11, "*!?", $S10
    lt $I11, 0, rx574_fail
    inc rx574_pos
  # rx pass
    rx574_cur."!cursor_pass"(rx574_pos, "twigil")
    if_null rx574_debug, debug_672
    rx574_cur."!cursor_debug"("PASS", "twigil", " at pos=", rx574_pos)
  debug_672:
    .return (rx574_cur)
  rx574_restart:
.annotate 'line', 4
    if_null rx574_debug, debug_673
    rx574_cur."!cursor_debug"("NEXT", "twigil")
  debug_673:
  rx574_fail:
    (rx574_rep, rx574_pos, $I10, $P10) = rx574_cur."!mark_fail"(0)
    lt rx574_pos, -1, rx574_done
    eq rx574_pos, -1, rx574_fail
    jump $I10
  rx574_done:
    rx574_cur."!cursor_fail"()
    if_null rx574_debug, debug_674
    rx574_cur."!cursor_debug"("FAIL", "twigil")
  debug_674:
    .return (rx574_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__twigil"  :nsentry("!PREFIX__twigil") :subid("134_1300057348.719") :method
.annotate 'line', 4
    new $P576, "ResizablePMCArray"
    push $P576, "?"
    push $P576, "!"
    push $P576, "*"
    .return ($P576)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator"  :subid("135_1300057348.719")
    .param pmc param_579
.annotate 'line', 299
    .lex "self", param_579
    $P580 = param_579."!protoregex"("package_declarator")
    .return ($P580)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator"  :subid("136_1300057348.719")
    .param pmc param_582
.annotate 'line', 299
    .lex "self", param_582
    $P583 = param_582."!PREFIX__!protoregex"("package_declarator")
    .return ($P583)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<module>"  :subid("137_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 301
    new $P585, "Undef"
    .lex "$*PACKAGE-SETUP", $P585
.annotate 'line', 302
    new $P586, "Undef"
    .lex "$*PKGDECL", $P586
.annotate 'line', 4
    .local string rx587_tgt
    .local int rx587_pos
    .local int rx587_off
    .local int rx587_eos
    .local int rx587_rep
    .local pmc rx587_cur
    .local pmc rx587_debug
    (rx587_cur, rx587_pos, rx587_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx587_cur
    .local pmc match
    .lex "$/", match
    length rx587_eos, rx587_tgt
    gt rx587_pos, rx587_eos, rx587_done
    set rx587_off, 0
    lt rx587_pos, 2, rx587_start
    sub rx587_off, rx587_pos, 1
    substr rx587_tgt, rx587_tgt, rx587_off
  rx587_start:
    eq $I10, 1, rx587_restart
    if_null rx587_debug, debug_675
    rx587_cur."!cursor_debug"("START", "package_declarator:sym<module>")
  debug_675:
    $I10 = self.'from'()
    ne $I10, -1, rxscan591_done
    goto rxscan591_scan
  rxscan591_loop:
    (rx587_pos) = rx587_cur."from"()
    inc rx587_pos
    rx587_cur."!cursor_from"(rx587_pos)
    ge rx587_pos, rx587_eos, rxscan591_done
  rxscan591_scan:
    set_addr $I10, rxscan591_loop
    rx587_cur."!mark_push"(0, rx587_pos, $I10)
  rxscan591_done:
.annotate 'line', 301
    rx587_cur."!cursor_pos"(rx587_pos)
    get_hll_global $P592, ["PAST"], "Stmts"
    $P593 = $P592."new"()
    store_lex "$*PACKAGE-SETUP", $P593
.annotate 'line', 302
    rx587_cur."!cursor_pos"(rx587_pos)
    new $P594, "String"
    assign $P594, "module"
    store_lex "$*PKGDECL", $P594
.annotate 'line', 303
  # rx subcapture "sym"
    set_addr $I10, rxcap_595_fail
    rx587_cur."!mark_push"(0, rx587_pos, $I10)
  # rx literal  "module"
    add $I11, rx587_pos, 6
    gt $I11, rx587_eos, rx587_fail
    sub $I11, rx587_pos, rx587_off
    substr $S10, rx587_tgt, $I11, 6
    ne $S10, "module", rx587_fail
    add rx587_pos, 6
    set_addr $I10, rxcap_595_fail
    ($I12, $I11) = rx587_cur."!mark_peek"($I10)
    rx587_cur."!cursor_pos"($I11)
    ($P10) = rx587_cur."!cursor_start"()
    $P10."!cursor_pass"(rx587_pos, "")
    rx587_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_595_done
  rxcap_595_fail:
    goto rx587_fail
  rxcap_595_done:
  # rx subrule "package_def" subtype=capture negate=
    rx587_cur."!cursor_pos"(rx587_pos)
    $P10 = rx587_cur."package_def"()
    unless $P10, rx587_fail
    rx587_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx587_pos = $P10."pos"()
.annotate 'line', 300
  # rx pass
    rx587_cur."!cursor_pass"(rx587_pos, "package_declarator:sym<module>")
    if_null rx587_debug, debug_676
    rx587_cur."!cursor_debug"("PASS", "package_declarator:sym<module>", " at pos=", rx587_pos)
  debug_676:
    .return (rx587_cur)
  rx587_restart:
.annotate 'line', 4
    if_null rx587_debug, debug_677
    rx587_cur."!cursor_debug"("NEXT", "package_declarator:sym<module>")
  debug_677:
  rx587_fail:
    (rx587_rep, rx587_pos, $I10, $P10) = rx587_cur."!mark_fail"(0)
    lt rx587_pos, -1, rx587_done
    eq rx587_pos, -1, rx587_fail
    jump $I10
  rx587_done:
    rx587_cur."!cursor_fail"()
    if_null rx587_debug, debug_678
    rx587_cur."!cursor_debug"("FAIL", "package_declarator:sym<module>")
  debug_678:
    .return (rx587_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<module>"  :nsentry("!PREFIX__package_declarator:sym<module>") :subid("138_1300057348.719") :method
.annotate 'line', 4
    $P589 = self."!PREFIX__!subrule"("package_def", "module")
    new $P590, "ResizablePMCArray"
    push $P590, $P589
    .return ($P590)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<knowhow>"  :subid("139_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 306
    new $P597, "Undef"
    .lex "$*PACKAGE-SETUP", $P597
.annotate 'line', 307
    new $P598, "Undef"
    .lex "$*PKGDECL", $P598
.annotate 'line', 4
    .local string rx599_tgt
    .local int rx599_pos
    .local int rx599_off
    .local int rx599_eos
    .local int rx599_rep
    .local pmc rx599_cur
    .local pmc rx599_debug
    (rx599_cur, rx599_pos, rx599_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx599_cur
    .local pmc match
    .lex "$/", match
    length rx599_eos, rx599_tgt
    gt rx599_pos, rx599_eos, rx599_done
    set rx599_off, 0
    lt rx599_pos, 2, rx599_start
    sub rx599_off, rx599_pos, 1
    substr rx599_tgt, rx599_tgt, rx599_off
  rx599_start:
    eq $I10, 1, rx599_restart
    if_null rx599_debug, debug_679
    rx599_cur."!cursor_debug"("START", "package_declarator:sym<knowhow>")
  debug_679:
    $I10 = self.'from'()
    ne $I10, -1, rxscan603_done
    goto rxscan603_scan
  rxscan603_loop:
    (rx599_pos) = rx599_cur."from"()
    inc rx599_pos
    rx599_cur."!cursor_from"(rx599_pos)
    ge rx599_pos, rx599_eos, rxscan603_done
  rxscan603_scan:
    set_addr $I10, rxscan603_loop
    rx599_cur."!mark_push"(0, rx599_pos, $I10)
  rxscan603_done:
.annotate 'line', 306
    rx599_cur."!cursor_pos"(rx599_pos)
    get_hll_global $P604, ["PAST"], "Stmts"
    $P605 = $P604."new"()
    store_lex "$*PACKAGE-SETUP", $P605
.annotate 'line', 307
    rx599_cur."!cursor_pos"(rx599_pos)
    new $P606, "String"
    assign $P606, "knowhow"
    store_lex "$*PKGDECL", $P606
.annotate 'line', 308
  # rx subcapture "sym"
    set_addr $I10, rxcap_607_fail
    rx599_cur."!mark_push"(0, rx599_pos, $I10)
  # rx literal  "knowhow"
    add $I11, rx599_pos, 7
    gt $I11, rx599_eos, rx599_fail
    sub $I11, rx599_pos, rx599_off
    substr $S10, rx599_tgt, $I11, 7
    ne $S10, "knowhow", rx599_fail
    add rx599_pos, 7
    set_addr $I10, rxcap_607_fail
    ($I12, $I11) = rx599_cur."!mark_peek"($I10)
    rx599_cur."!cursor_pos"($I11)
    ($P10) = rx599_cur."!cursor_start"()
    $P10."!cursor_pass"(rx599_pos, "")
    rx599_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_607_done
  rxcap_607_fail:
    goto rx599_fail
  rxcap_607_done:
  # rx subrule "package_def" subtype=capture negate=
    rx599_cur."!cursor_pos"(rx599_pos)
    $P10 = rx599_cur."package_def"()
    unless $P10, rx599_fail
    rx599_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx599_pos = $P10."pos"()
.annotate 'line', 305
  # rx pass
    rx599_cur."!cursor_pass"(rx599_pos, "package_declarator:sym<knowhow>")
    if_null rx599_debug, debug_680
    rx599_cur."!cursor_debug"("PASS", "package_declarator:sym<knowhow>", " at pos=", rx599_pos)
  debug_680:
    .return (rx599_cur)
  rx599_restart:
.annotate 'line', 4
    if_null rx599_debug, debug_681
    rx599_cur."!cursor_debug"("NEXT", "package_declarator:sym<knowhow>")
  debug_681:
  rx599_fail:
    (rx599_rep, rx599_pos, $I10, $P10) = rx599_cur."!mark_fail"(0)
    lt rx599_pos, -1, rx599_done
    eq rx599_pos, -1, rx599_fail
    jump $I10
  rx599_done:
    rx599_cur."!cursor_fail"()
    if_null rx599_debug, debug_682
    rx599_cur."!cursor_debug"("FAIL", "package_declarator:sym<knowhow>")
  debug_682:
    .return (rx599_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<knowhow>"  :nsentry("!PREFIX__package_declarator:sym<knowhow>") :subid("140_1300057348.719") :method
.annotate 'line', 4
    $P601 = self."!PREFIX__!subrule"("package_def", "knowhow")
    new $P602, "ResizablePMCArray"
    push $P602, $P601
    .return ($P602)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<class>"  :subid("141_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 311
    new $P609, "Undef"
    .lex "$*PACKAGE-SETUP", $P609
.annotate 'line', 312
    new $P610, "Undef"
    .lex "$*PKGDECL", $P610
.annotate 'line', 4
    .local string rx611_tgt
    .local int rx611_pos
    .local int rx611_off
    .local int rx611_eos
    .local int rx611_rep
    .local pmc rx611_cur
    .local pmc rx611_debug
    (rx611_cur, rx611_pos, rx611_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx611_cur
    .local pmc match
    .lex "$/", match
    length rx611_eos, rx611_tgt
    gt rx611_pos, rx611_eos, rx611_done
    set rx611_off, 0
    lt rx611_pos, 2, rx611_start
    sub rx611_off, rx611_pos, 1
    substr rx611_tgt, rx611_tgt, rx611_off
  rx611_start:
    eq $I10, 1, rx611_restart
    if_null rx611_debug, debug_683
    rx611_cur."!cursor_debug"("START", "package_declarator:sym<class>")
  debug_683:
    $I10 = self.'from'()
    ne $I10, -1, rxscan615_done
    goto rxscan615_scan
  rxscan615_loop:
    (rx611_pos) = rx611_cur."from"()
    inc rx611_pos
    rx611_cur."!cursor_from"(rx611_pos)
    ge rx611_pos, rx611_eos, rxscan615_done
  rxscan615_scan:
    set_addr $I10, rxscan615_loop
    rx611_cur."!mark_push"(0, rx611_pos, $I10)
  rxscan615_done:
.annotate 'line', 311
    rx611_cur."!cursor_pos"(rx611_pos)
    get_hll_global $P616, ["PAST"], "Stmts"
    $P617 = $P616."new"()
    store_lex "$*PACKAGE-SETUP", $P617
.annotate 'line', 312
    rx611_cur."!cursor_pos"(rx611_pos)
    new $P618, "String"
    assign $P618, "class"
    store_lex "$*PKGDECL", $P618
.annotate 'line', 313
  # rx subcapture "sym"
    set_addr $I10, rxcap_619_fail
    rx611_cur."!mark_push"(0, rx611_pos, $I10)
  # rx literal  "class"
    add $I11, rx611_pos, 5
    gt $I11, rx611_eos, rx611_fail
    sub $I11, rx611_pos, rx611_off
    substr $S10, rx611_tgt, $I11, 5
    ne $S10, "class", rx611_fail
    add rx611_pos, 5
    set_addr $I10, rxcap_619_fail
    ($I12, $I11) = rx611_cur."!mark_peek"($I10)
    rx611_cur."!cursor_pos"($I11)
    ($P10) = rx611_cur."!cursor_start"()
    $P10."!cursor_pass"(rx611_pos, "")
    rx611_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_619_done
  rxcap_619_fail:
    goto rx611_fail
  rxcap_619_done:
  # rx subrule "package_def" subtype=capture negate=
    rx611_cur."!cursor_pos"(rx611_pos)
    $P10 = rx611_cur."package_def"()
    unless $P10, rx611_fail
    rx611_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx611_pos = $P10."pos"()
.annotate 'line', 310
  # rx pass
    rx611_cur."!cursor_pass"(rx611_pos, "package_declarator:sym<class>")
    if_null rx611_debug, debug_684
    rx611_cur."!cursor_debug"("PASS", "package_declarator:sym<class>", " at pos=", rx611_pos)
  debug_684:
    .return (rx611_cur)
  rx611_restart:
.annotate 'line', 4
    if_null rx611_debug, debug_685
    rx611_cur."!cursor_debug"("NEXT", "package_declarator:sym<class>")
  debug_685:
  rx611_fail:
    (rx611_rep, rx611_pos, $I10, $P10) = rx611_cur."!mark_fail"(0)
    lt rx611_pos, -1, rx611_done
    eq rx611_pos, -1, rx611_fail
    jump $I10
  rx611_done:
    rx611_cur."!cursor_fail"()
    if_null rx611_debug, debug_686
    rx611_cur."!cursor_debug"("FAIL", "package_declarator:sym<class>")
  debug_686:
    .return (rx611_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<class>"  :nsentry("!PREFIX__package_declarator:sym<class>") :subid("142_1300057348.719") :method
.annotate 'line', 4
    $P613 = self."!PREFIX__!subrule"("package_def", "class")
    new $P614, "ResizablePMCArray"
    push $P614, $P613
    .return ($P614)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<grammar>"  :subid("143_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 316
    new $P621, "Undef"
    .lex "$*PACKAGE-SETUP", $P621
.annotate 'line', 317
    new $P622, "Undef"
    .lex "$*PKGDECL", $P622
.annotate 'line', 4
    .local string rx623_tgt
    .local int rx623_pos
    .local int rx623_off
    .local int rx623_eos
    .local int rx623_rep
    .local pmc rx623_cur
    .local pmc rx623_debug
    (rx623_cur, rx623_pos, rx623_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx623_cur
    .local pmc match
    .lex "$/", match
    length rx623_eos, rx623_tgt
    gt rx623_pos, rx623_eos, rx623_done
    set rx623_off, 0
    lt rx623_pos, 2, rx623_start
    sub rx623_off, rx623_pos, 1
    substr rx623_tgt, rx623_tgt, rx623_off
  rx623_start:
    eq $I10, 1, rx623_restart
    if_null rx623_debug, debug_687
    rx623_cur."!cursor_debug"("START", "package_declarator:sym<grammar>")
  debug_687:
    $I10 = self.'from'()
    ne $I10, -1, rxscan627_done
    goto rxscan627_scan
  rxscan627_loop:
    (rx623_pos) = rx623_cur."from"()
    inc rx623_pos
    rx623_cur."!cursor_from"(rx623_pos)
    ge rx623_pos, rx623_eos, rxscan627_done
  rxscan627_scan:
    set_addr $I10, rxscan627_loop
    rx623_cur."!mark_push"(0, rx623_pos, $I10)
  rxscan627_done:
.annotate 'line', 316
    rx623_cur."!cursor_pos"(rx623_pos)
    get_hll_global $P628, ["PAST"], "Stmts"
    $P629 = $P628."new"()
    store_lex "$*PACKAGE-SETUP", $P629
.annotate 'line', 317
    rx623_cur."!cursor_pos"(rx623_pos)
    new $P630, "String"
    assign $P630, "grammar"
    store_lex "$*PKGDECL", $P630
.annotate 'line', 318
  # rx subcapture "sym"
    set_addr $I10, rxcap_631_fail
    rx623_cur."!mark_push"(0, rx623_pos, $I10)
  # rx literal  "grammar"
    add $I11, rx623_pos, 7
    gt $I11, rx623_eos, rx623_fail
    sub $I11, rx623_pos, rx623_off
    substr $S10, rx623_tgt, $I11, 7
    ne $S10, "grammar", rx623_fail
    add rx623_pos, 7
    set_addr $I10, rxcap_631_fail
    ($I12, $I11) = rx623_cur."!mark_peek"($I10)
    rx623_cur."!cursor_pos"($I11)
    ($P10) = rx623_cur."!cursor_start"()
    $P10."!cursor_pass"(rx623_pos, "")
    rx623_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_631_done
  rxcap_631_fail:
    goto rx623_fail
  rxcap_631_done:
  # rx subrule "package_def" subtype=capture negate=
    rx623_cur."!cursor_pos"(rx623_pos)
    $P10 = rx623_cur."package_def"()
    unless $P10, rx623_fail
    rx623_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx623_pos = $P10."pos"()
.annotate 'line', 315
  # rx pass
    rx623_cur."!cursor_pass"(rx623_pos, "package_declarator:sym<grammar>")
    if_null rx623_debug, debug_688
    rx623_cur."!cursor_debug"("PASS", "package_declarator:sym<grammar>", " at pos=", rx623_pos)
  debug_688:
    .return (rx623_cur)
  rx623_restart:
.annotate 'line', 4
    if_null rx623_debug, debug_689
    rx623_cur."!cursor_debug"("NEXT", "package_declarator:sym<grammar>")
  debug_689:
  rx623_fail:
    (rx623_rep, rx623_pos, $I10, $P10) = rx623_cur."!mark_fail"(0)
    lt rx623_pos, -1, rx623_done
    eq rx623_pos, -1, rx623_fail
    jump $I10
  rx623_done:
    rx623_cur."!cursor_fail"()
    if_null rx623_debug, debug_690
    rx623_cur."!cursor_debug"("FAIL", "package_declarator:sym<grammar>")
  debug_690:
    .return (rx623_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<grammar>"  :nsentry("!PREFIX__package_declarator:sym<grammar>") :subid("144_1300057348.719") :method
.annotate 'line', 4
    $P625 = self."!PREFIX__!subrule"("package_def", "grammar")
    new $P626, "ResizablePMCArray"
    push $P626, $P625
    .return ($P626)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<role>"  :subid("145_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 321
    new $P633, "Undef"
    .lex "$*PACKAGE-SETUP", $P633
.annotate 'line', 322
    new $P634, "Undef"
    .lex "$*PKGDECL", $P634
.annotate 'line', 4
    .local string rx635_tgt
    .local int rx635_pos
    .local int rx635_off
    .local int rx635_eos
    .local int rx635_rep
    .local pmc rx635_cur
    .local pmc rx635_debug
    (rx635_cur, rx635_pos, rx635_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx635_cur
    .local pmc match
    .lex "$/", match
    length rx635_eos, rx635_tgt
    gt rx635_pos, rx635_eos, rx635_done
    set rx635_off, 0
    lt rx635_pos, 2, rx635_start
    sub rx635_off, rx635_pos, 1
    substr rx635_tgt, rx635_tgt, rx635_off
  rx635_start:
    eq $I10, 1, rx635_restart
    if_null rx635_debug, debug_691
    rx635_cur."!cursor_debug"("START", "package_declarator:sym<role>")
  debug_691:
    $I10 = self.'from'()
    ne $I10, -1, rxscan639_done
    goto rxscan639_scan
  rxscan639_loop:
    (rx635_pos) = rx635_cur."from"()
    inc rx635_pos
    rx635_cur."!cursor_from"(rx635_pos)
    ge rx635_pos, rx635_eos, rxscan639_done
  rxscan639_scan:
    set_addr $I10, rxscan639_loop
    rx635_cur."!mark_push"(0, rx635_pos, $I10)
  rxscan639_done:
.annotate 'line', 321
    rx635_cur."!cursor_pos"(rx635_pos)
    get_hll_global $P640, ["PAST"], "Stmts"
    $P641 = $P640."new"()
    store_lex "$*PACKAGE-SETUP", $P641
.annotate 'line', 322
    rx635_cur."!cursor_pos"(rx635_pos)
    new $P642, "String"
    assign $P642, "role"
    store_lex "$*PKGDECL", $P642
.annotate 'line', 323
  # rx subcapture "sym"
    set_addr $I10, rxcap_643_fail
    rx635_cur."!mark_push"(0, rx635_pos, $I10)
  # rx literal  "role"
    add $I11, rx635_pos, 4
    gt $I11, rx635_eos, rx635_fail
    sub $I11, rx635_pos, rx635_off
    substr $S10, rx635_tgt, $I11, 4
    ne $S10, "role", rx635_fail
    add rx635_pos, 4
    set_addr $I10, rxcap_643_fail
    ($I12, $I11) = rx635_cur."!mark_peek"($I10)
    rx635_cur."!cursor_pos"($I11)
    ($P10) = rx635_cur."!cursor_start"()
    $P10."!cursor_pass"(rx635_pos, "")
    rx635_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_643_done
  rxcap_643_fail:
    goto rx635_fail
  rxcap_643_done:
  # rx subrule "package_def" subtype=capture negate=
    rx635_cur."!cursor_pos"(rx635_pos)
    $P10 = rx635_cur."package_def"()
    unless $P10, rx635_fail
    rx635_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx635_pos = $P10."pos"()
.annotate 'line', 320
  # rx pass
    rx635_cur."!cursor_pass"(rx635_pos, "package_declarator:sym<role>")
    if_null rx635_debug, debug_692
    rx635_cur."!cursor_debug"("PASS", "package_declarator:sym<role>", " at pos=", rx635_pos)
  debug_692:
    .return (rx635_cur)
  rx635_restart:
.annotate 'line', 4
    if_null rx635_debug, debug_693
    rx635_cur."!cursor_debug"("NEXT", "package_declarator:sym<role>")
  debug_693:
  rx635_fail:
    (rx635_rep, rx635_pos, $I10, $P10) = rx635_cur."!mark_fail"(0)
    lt rx635_pos, -1, rx635_done
    eq rx635_pos, -1, rx635_fail
    jump $I10
  rx635_done:
    rx635_cur."!cursor_fail"()
    if_null rx635_debug, debug_694
    rx635_cur."!cursor_debug"("FAIL", "package_declarator:sym<role>")
  debug_694:
    .return (rx635_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<role>"  :nsentry("!PREFIX__package_declarator:sym<role>") :subid("146_1300057348.719") :method
.annotate 'line', 4
    $P637 = self."!PREFIX__!subrule"("package_def", "role")
    new $P638, "ResizablePMCArray"
    push $P638, $P637
    .return ($P638)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<native>"  :subid("147_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 326
    new $P645, "Undef"
    .lex "$*PACKAGE-SETUP", $P645
.annotate 'line', 327
    new $P646, "Undef"
    .lex "$*PKGDECL", $P646
.annotate 'line', 4
    .local string rx647_tgt
    .local int rx647_pos
    .local int rx647_off
    .local int rx647_eos
    .local int rx647_rep
    .local pmc rx647_cur
    .local pmc rx647_debug
    (rx647_cur, rx647_pos, rx647_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx647_cur
    .local pmc match
    .lex "$/", match
    length rx647_eos, rx647_tgt
    gt rx647_pos, rx647_eos, rx647_done
    set rx647_off, 0
    lt rx647_pos, 2, rx647_start
    sub rx647_off, rx647_pos, 1
    substr rx647_tgt, rx647_tgt, rx647_off
  rx647_start:
    eq $I10, 1, rx647_restart
    if_null rx647_debug, debug_695
    rx647_cur."!cursor_debug"("START", "package_declarator:sym<native>")
  debug_695:
    $I10 = self.'from'()
    ne $I10, -1, rxscan651_done
    goto rxscan651_scan
  rxscan651_loop:
    (rx647_pos) = rx647_cur."from"()
    inc rx647_pos
    rx647_cur."!cursor_from"(rx647_pos)
    ge rx647_pos, rx647_eos, rxscan651_done
  rxscan651_scan:
    set_addr $I10, rxscan651_loop
    rx647_cur."!mark_push"(0, rx647_pos, $I10)
  rxscan651_done:
.annotate 'line', 326
    rx647_cur."!cursor_pos"(rx647_pos)
    get_hll_global $P652, ["PAST"], "Stmts"
    $P653 = $P652."new"()
    store_lex "$*PACKAGE-SETUP", $P653
.annotate 'line', 327
    rx647_cur."!cursor_pos"(rx647_pos)
    new $P654, "String"
    assign $P654, "native"
    store_lex "$*PKGDECL", $P654
.annotate 'line', 328
  # rx subcapture "sym"
    set_addr $I10, rxcap_655_fail
    rx647_cur."!mark_push"(0, rx647_pos, $I10)
  # rx literal  "native"
    add $I11, rx647_pos, 6
    gt $I11, rx647_eos, rx647_fail
    sub $I11, rx647_pos, rx647_off
    substr $S10, rx647_tgt, $I11, 6
    ne $S10, "native", rx647_fail
    add rx647_pos, 6
    set_addr $I10, rxcap_655_fail
    ($I12, $I11) = rx647_cur."!mark_peek"($I10)
    rx647_cur."!cursor_pos"($I11)
    ($P10) = rx647_cur."!cursor_start"()
    $P10."!cursor_pass"(rx647_pos, "")
    rx647_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_655_done
  rxcap_655_fail:
    goto rx647_fail
  rxcap_655_done:
  # rx subrule "package_def" subtype=capture negate=
    rx647_cur."!cursor_pos"(rx647_pos)
    $P10 = rx647_cur."package_def"()
    unless $P10, rx647_fail
    rx647_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx647_pos = $P10."pos"()
.annotate 'line', 325
  # rx pass
    rx647_cur."!cursor_pass"(rx647_pos, "package_declarator:sym<native>")
    if_null rx647_debug, debug_696
    rx647_cur."!cursor_debug"("PASS", "package_declarator:sym<native>", " at pos=", rx647_pos)
  debug_696:
    .return (rx647_cur)
  rx647_restart:
.annotate 'line', 4
    if_null rx647_debug, debug_697
    rx647_cur."!cursor_debug"("NEXT", "package_declarator:sym<native>")
  debug_697:
  rx647_fail:
    (rx647_rep, rx647_pos, $I10, $P10) = rx647_cur."!mark_fail"(0)
    lt rx647_pos, -1, rx647_done
    eq rx647_pos, -1, rx647_fail
    jump $I10
  rx647_done:
    rx647_cur."!cursor_fail"()
    if_null rx647_debug, debug_698
    rx647_cur."!cursor_debug"("FAIL", "package_declarator:sym<native>")
  debug_698:
    .return (rx647_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<native>"  :nsentry("!PREFIX__package_declarator:sym<native>") :subid("148_1300057348.719") :method
.annotate 'line', 4
    $P649 = self."!PREFIX__!subrule"("package_def", "native")
    new $P650, "ResizablePMCArray"
    push $P650, $P649
    .return ($P650)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_def"  :subid("149_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P680 = "151_1300057348.719" 
    capture_lex $P680
.annotate 'line', 332
    new $P657, "Undef"
    .lex "$*PKGMETA", $P657
.annotate 'line', 333
    $P658 = root_new ['parrot';'Hash']
    .lex "%*ATTR-CHECK", $P658
.annotate 'line', 4
    .local string rx659_tgt
    .local int rx659_pos
    .local int rx659_off
    .local int rx659_eos
    .local int rx659_rep
    .local pmc rx659_cur
    .local pmc rx659_debug
    (rx659_cur, rx659_pos, rx659_tgt, $I10) = self."!cursor_start"()
    rx659_cur."!cursor_caparray"("repr", "parent", "role")
    .lex unicode:"$\x{a2}", rx659_cur
    .local pmc match
    .lex "$/", match
    length rx659_eos, rx659_tgt
    gt rx659_pos, rx659_eos, rx659_done
    set rx659_off, 0
    lt rx659_pos, 2, rx659_start
    sub rx659_off, rx659_pos, 1
    substr rx659_tgt, rx659_tgt, rx659_off
  rx659_start:
    eq $I10, 1, rx659_restart
    if_null rx659_debug, debug_699
    rx659_cur."!cursor_debug"("START", "package_def")
  debug_699:
    $I10 = self.'from'()
    ne $I10, -1, rxscan663_done
    goto rxscan663_scan
  rxscan663_loop:
    (rx659_pos) = rx659_cur."from"()
    inc rx659_pos
    rx659_cur."!cursor_from"(rx659_pos)
    ge rx659_pos, rx659_eos, rxscan663_done
  rxscan663_scan:
    set_addr $I10, rxscan663_loop
    rx659_cur."!mark_push"(0, rx659_pos, $I10)
  rxscan663_done:
.annotate 'line', 331
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
.annotate 'line', 332
    rx659_cur."!cursor_pos"(rx659_pos)
    find_lex $P665, "$*PKGMETA"
    unless_null $P665, vivify_700
    get_hll_global $P665, "$PKGMETA"
    unless_null $P665, vivify_701
    die "Contextual $*PKGMETA not found"
  vivify_701:
  vivify_700:
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
.annotate 'line', 333
    rx659_cur."!cursor_pos"(rx659_pos)
    find_lex $P667, "%*ATTR-CHECK"
    unless_null $P667, vivify_702
    get_hll_global $P667, "%ATTR-CHECK"
    unless_null $P667, vivify_703
    die "Contextual %*ATTR-CHECK not found"
  vivify_703:
  vivify_702:
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
.annotate 'line', 335
  # rx subrule "name" subtype=capture negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."name"()
    unless $P10, rx659_fail
    rx659_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx659_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
.annotate 'line', 336
  # rx rxquantr670 ** 0..1
    set_addr $I10, rxquantr670_done
    rx659_cur."!mark_push"(0, rx659_pos, $I10)
  rxquantr670_loop:
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx659_pos, 2
    gt $I11, rx659_eos, rx659_fail
    sub $I11, rx659_pos, rx659_off
    substr $S10, rx659_tgt, $I11, 2
    ne $S10, "is", rx659_fail
    add rx659_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx literal  "repr("
    add $I11, rx659_pos, 5
    gt $I11, rx659_eos, rx659_fail
    sub $I11, rx659_pos, rx659_off
    substr $S10, rx659_tgt, $I11, 5
    ne $S10, "repr(", rx659_fail
    add rx659_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."quote_EXPR"()
    unless $P10, rx659_fail
    rx659_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("repr")
    rx659_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail
    sub $I11, rx659_pos, rx659_off
    ord $I11, rx659_tgt, $I11
    ne $I11, 41, rx659_fail
    add rx659_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
    set_addr $I10, rxquantr670_done
    (rx659_rep) = rx659_cur."!mark_commit"($I10)
  rxquantr670_done:
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
.annotate 'line', 338
    rx659_cur."!cursor_pos"(rx659_pos)
    find_lex $P677, unicode:"$\x{a2}"
    $P678 = $P677."MATCH"()
    store_lex "$/", $P678
    .const 'Sub' $P680 = "151_1300057348.719" 
    capture_lex $P680
    $P706 = $P680()
.annotate 'line', 347
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
.annotate 'line', 349
  # rx rxquantr708 ** 0..1
    set_addr $I10, rxquantr708_done
    rx659_cur."!mark_push"(0, rx659_pos, $I10)
  rxquantr708_loop:
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx659_pos, 2
    gt $I11, rx659_eos, rx659_fail
    sub $I11, rx659_pos, rx659_off
    substr $S10, rx659_tgt, $I11, 2
    ne $S10, "is", rx659_fail
    add rx659_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."name"()
    unless $P10, rx659_fail
    rx659_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parent")
    rx659_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
    set_addr $I10, rxquantr708_done
    (rx659_rep) = rx659_cur."!mark_commit"($I10)
  rxquantr708_done:
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
.annotate 'line', 350
  # rx rxquantr713 ** 0..*
    set_addr $I10, rxquantr713_done
    rx659_cur."!mark_push"(0, rx659_pos, $I10)
  rxquantr713_loop:
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx literal  "does"
    add $I11, rx659_pos, 4
    gt $I11, rx659_eos, rx659_fail
    sub $I11, rx659_pos, rx659_off
    substr $S10, rx659_tgt, $I11, 4
    ne $S10, "does", rx659_fail
    add rx659_pos, 4
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."name"()
    unless $P10, rx659_fail
    rx659_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("role")
    rx659_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
    set_addr $I10, rxquantr713_done
    (rx659_rep) = rx659_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr713_done
    rx659_cur."!mark_push"(rx659_rep, rx659_pos, $I10)
    goto rxquantr713_loop
  rxquantr713_done:
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  alt718_0:
.annotate 'line', 351
    set_addr $I10, alt718_1
    rx659_cur."!mark_push"(0, rx659_pos, $I10)
.annotate 'line', 352
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail
    sub $I11, rx659_pos, rx659_off
    ord $I11, rx659_tgt, $I11
    ne $I11, 59, rx659_fail
    add rx659_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx subrule "comp_unit" subtype=capture negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."comp_unit"()
    unless $P10, rx659_fail
    rx659_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("comp_unit")
    rx659_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
    goto alt718_end
  alt718_1:
    set_addr $I10, alt718_2
    rx659_cur."!mark_push"(0, rx659_pos, $I10)
.annotate 'line', 353
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx659_pos, rx659_off
    substr $S10, rx659_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx659_fail
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx subrule "block" subtype=capture negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."block"()
    unless $P10, rx659_fail
    rx659_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx659_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
    goto alt718_end
  alt718_2:
.annotate 'line', 354
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."panic"("Malformed package declaration")
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
  alt718_end:
.annotate 'line', 355
  # rx subrule "ws" subtype=method negate=
    rx659_cur."!cursor_pos"(rx659_pos)
    $P10 = rx659_cur."ws"()
    unless $P10, rx659_fail
    rx659_pos = $P10."pos"()
.annotate 'line', 331
  # rx pass
    rx659_cur."!cursor_pass"(rx659_pos, "package_def")
    if_null rx659_debug, debug_723
    rx659_cur."!cursor_debug"("PASS", "package_def", " at pos=", rx659_pos)
  debug_723:
    .return (rx659_cur)
  rx659_restart:
.annotate 'line', 4
    if_null rx659_debug, debug_724
    rx659_cur."!cursor_debug"("NEXT", "package_def")
  debug_724:
  rx659_fail:
    (rx659_rep, rx659_pos, $I10, $P10) = rx659_cur."!mark_fail"(0)
    lt rx659_pos, -1, rx659_done
    eq rx659_pos, -1, rx659_fail
    jump $I10
  rx659_done:
    rx659_cur."!cursor_fail"()
    if_null rx659_debug, debug_725
    rx659_cur."!cursor_debug"("FAIL", "package_def")
  debug_725:
    .return (rx659_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_def"  :nsentry("!PREFIX__package_def") :subid("150_1300057348.719") :method
.annotate 'line', 4
    $P661 = self."!PREFIX__!subrule"("ws", "")
    new $P662, "ResizablePMCArray"
    push $P662, $P661
    .return ($P662)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block679"  :anon :subid("151_1300057348.719") :outer("149_1300057348.719")
.annotate 'line', 341
    $P681 = root_new ['parrot';'Hash']
    .lex "%args", $P681
.annotate 'line', 338
    find_lex $P682, "%args"
.annotate 'line', 342
    find_lex $P683, "$/"
    unless_null $P683, vivify_704
    $P683 = root_new ['parrot';'Hash']
  vivify_704:
    set $P684, $P683["name"]
    unless_null $P684, vivify_705
    new $P684, "Undef"
  vivify_705:
    set $S685, $P684
    new $P686, 'String'
    set $P686, $S685
    find_lex $P687, "%args"
    unless_null $P687, vivify_706
    $P687 = root_new ['parrot';'Hash']
    store_lex "%args", $P687
  vivify_706:
    set $P687["name"], $P686
.annotate 'line', 343
    find_lex $P689, "$/"
    unless_null $P689, vivify_707
    $P689 = root_new ['parrot';'Hash']
  vivify_707:
    set $P690, $P689["repr"]
    unless_null $P690, vivify_708
    new $P690, "Undef"
  vivify_708:
    unless $P690, if_688_end
.annotate 'line', 344
    find_lex $P691, "$/"
    unless_null $P691, vivify_709
    $P691 = root_new ['parrot';'Hash']
  vivify_709:
    set $P692, $P691["repr"]
    unless_null $P692, vivify_710
    $P692 = root_new ['parrot';'ResizablePMCArray']
  vivify_710:
    set $P693, $P692[0]
    unless_null $P693, vivify_711
    $P693 = root_new ['parrot';'Hash']
  vivify_711:
    set $P694, $P693["quote_delimited"]
    unless_null $P694, vivify_712
    $P694 = root_new ['parrot';'Hash']
  vivify_712:
    set $P695, $P694["quote_atom"]
    unless_null $P695, vivify_713
    $P695 = root_new ['parrot';'ResizablePMCArray']
  vivify_713:
    set $P696, $P695[0]
    unless_null $P696, vivify_714
    new $P696, "Undef"
  vivify_714:
    set $S697, $P696
    new $P698, 'String'
    set $P698, $S697
    find_lex $P699, "%args"
    unless_null $P699, vivify_715
    $P699 = root_new ['parrot';'Hash']
    store_lex "%args", $P699
  vivify_715:
    set $P699["repr"], $P698
  if_688_end:
.annotate 'line', 346
    find_dynamic_lex $P700, "$*SC"
    unless_null $P700, vivify_716
    get_hll_global $P700, "$SC"
    unless_null $P700, vivify_717
    die "Contextual $*SC not found"
  vivify_717:
  vivify_716:
    find_dynamic_lex $P701, "$*PKGDECL"
    unless_null $P701, vivify_718
    get_hll_global $P701, "$PKGDECL"
    unless_null $P701, vivify_719
    die "Contextual $*PKGDECL not found"
  vivify_719:
  vivify_718:
    find_dynamic_lex $P702, "%*HOW"
    unless_null $P702, vivify_720
    get_hll_global $P702, "%HOW"
    unless_null $P702, vivify_721
    die "Contextual %*HOW not found"
  vivify_721:
  vivify_720:
    set $P703, $P702[$P701]
    unless_null $P703, vivify_722
    new $P703, "Undef"
  vivify_722:
    find_lex $P704, "%args"
    $P705 = $P700."pkg_create_mo"($P703, $P704 :flat)
    store_dynamic_lex "$*PKGMETA", $P705
.annotate 'line', 338
    .return ($P705)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator"  :subid("152_1300057348.719")
    .param pmc param_729
.annotate 'line', 358
    .lex "self", param_729
    $P730 = param_729."!protoregex"("scope_declarator")
    .return ($P730)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator"  :subid("153_1300057348.719")
    .param pmc param_732
.annotate 'line', 358
    .lex "self", param_732
    $P733 = param_732."!PREFIX__!protoregex"("scope_declarator")
    .return ($P733)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<my>"  :subid("154_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx735_tgt
    .local int rx735_pos
    .local int rx735_off
    .local int rx735_eos
    .local int rx735_rep
    .local pmc rx735_cur
    .local pmc rx735_debug
    (rx735_cur, rx735_pos, rx735_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx735_cur
    .local pmc match
    .lex "$/", match
    length rx735_eos, rx735_tgt
    gt rx735_pos, rx735_eos, rx735_done
    set rx735_off, 0
    lt rx735_pos, 2, rx735_start
    sub rx735_off, rx735_pos, 1
    substr rx735_tgt, rx735_tgt, rx735_off
  rx735_start:
    eq $I10, 1, rx735_restart
    if_null rx735_debug, debug_726
    rx735_cur."!cursor_debug"("START", "scope_declarator:sym<my>")
  debug_726:
    $I10 = self.'from'()
    ne $I10, -1, rxscan739_done
    goto rxscan739_scan
  rxscan739_loop:
    (rx735_pos) = rx735_cur."from"()
    inc rx735_pos
    rx735_cur."!cursor_from"(rx735_pos)
    ge rx735_pos, rx735_eos, rxscan739_done
  rxscan739_scan:
    set_addr $I10, rxscan739_loop
    rx735_cur."!mark_push"(0, rx735_pos, $I10)
  rxscan739_done:
.annotate 'line', 359
  # rx subcapture "sym"
    set_addr $I10, rxcap_740_fail
    rx735_cur."!mark_push"(0, rx735_pos, $I10)
  # rx literal  "my"
    add $I11, rx735_pos, 2
    gt $I11, rx735_eos, rx735_fail
    sub $I11, rx735_pos, rx735_off
    substr $S10, rx735_tgt, $I11, 2
    ne $S10, "my", rx735_fail
    add rx735_pos, 2
    set_addr $I10, rxcap_740_fail
    ($I12, $I11) = rx735_cur."!mark_peek"($I10)
    rx735_cur."!cursor_pos"($I11)
    ($P10) = rx735_cur."!cursor_start"()
    $P10."!cursor_pass"(rx735_pos, "")
    rx735_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_740_done
  rxcap_740_fail:
    goto rx735_fail
  rxcap_740_done:
  # rx subrule "scoped" subtype=capture negate=
    rx735_cur."!cursor_pos"(rx735_pos)
    $P10 = rx735_cur."scoped"("my")
    unless $P10, rx735_fail
    rx735_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx735_pos = $P10."pos"()
  # rx pass
    rx735_cur."!cursor_pass"(rx735_pos, "scope_declarator:sym<my>")
    if_null rx735_debug, debug_727
    rx735_cur."!cursor_debug"("PASS", "scope_declarator:sym<my>", " at pos=", rx735_pos)
  debug_727:
    .return (rx735_cur)
  rx735_restart:
.annotate 'line', 4
    if_null rx735_debug, debug_728
    rx735_cur."!cursor_debug"("NEXT", "scope_declarator:sym<my>")
  debug_728:
  rx735_fail:
    (rx735_rep, rx735_pos, $I10, $P10) = rx735_cur."!mark_fail"(0)
    lt rx735_pos, -1, rx735_done
    eq rx735_pos, -1, rx735_fail
    jump $I10
  rx735_done:
    rx735_cur."!cursor_fail"()
    if_null rx735_debug, debug_729
    rx735_cur."!cursor_debug"("FAIL", "scope_declarator:sym<my>")
  debug_729:
    .return (rx735_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<my>"  :nsentry("!PREFIX__scope_declarator:sym<my>") :subid("155_1300057348.719") :method
.annotate 'line', 4
    $P737 = self."!PREFIX__!subrule"("scoped", "my")
    new $P738, "ResizablePMCArray"
    push $P738, $P737
    .return ($P738)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<our>"  :subid("156_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx742_tgt
    .local int rx742_pos
    .local int rx742_off
    .local int rx742_eos
    .local int rx742_rep
    .local pmc rx742_cur
    .local pmc rx742_debug
    (rx742_cur, rx742_pos, rx742_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx742_cur
    .local pmc match
    .lex "$/", match
    length rx742_eos, rx742_tgt
    gt rx742_pos, rx742_eos, rx742_done
    set rx742_off, 0
    lt rx742_pos, 2, rx742_start
    sub rx742_off, rx742_pos, 1
    substr rx742_tgt, rx742_tgt, rx742_off
  rx742_start:
    eq $I10, 1, rx742_restart
    if_null rx742_debug, debug_730
    rx742_cur."!cursor_debug"("START", "scope_declarator:sym<our>")
  debug_730:
    $I10 = self.'from'()
    ne $I10, -1, rxscan746_done
    goto rxscan746_scan
  rxscan746_loop:
    (rx742_pos) = rx742_cur."from"()
    inc rx742_pos
    rx742_cur."!cursor_from"(rx742_pos)
    ge rx742_pos, rx742_eos, rxscan746_done
  rxscan746_scan:
    set_addr $I10, rxscan746_loop
    rx742_cur."!mark_push"(0, rx742_pos, $I10)
  rxscan746_done:
.annotate 'line', 360
  # rx subcapture "sym"
    set_addr $I10, rxcap_747_fail
    rx742_cur."!mark_push"(0, rx742_pos, $I10)
  # rx literal  "our"
    add $I11, rx742_pos, 3
    gt $I11, rx742_eos, rx742_fail
    sub $I11, rx742_pos, rx742_off
    substr $S10, rx742_tgt, $I11, 3
    ne $S10, "our", rx742_fail
    add rx742_pos, 3
    set_addr $I10, rxcap_747_fail
    ($I12, $I11) = rx742_cur."!mark_peek"($I10)
    rx742_cur."!cursor_pos"($I11)
    ($P10) = rx742_cur."!cursor_start"()
    $P10."!cursor_pass"(rx742_pos, "")
    rx742_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_747_done
  rxcap_747_fail:
    goto rx742_fail
  rxcap_747_done:
  # rx subrule "scoped" subtype=capture negate=
    rx742_cur."!cursor_pos"(rx742_pos)
    $P10 = rx742_cur."scoped"("our")
    unless $P10, rx742_fail
    rx742_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx742_pos = $P10."pos"()
  # rx pass
    rx742_cur."!cursor_pass"(rx742_pos, "scope_declarator:sym<our>")
    if_null rx742_debug, debug_731
    rx742_cur."!cursor_debug"("PASS", "scope_declarator:sym<our>", " at pos=", rx742_pos)
  debug_731:
    .return (rx742_cur)
  rx742_restart:
.annotate 'line', 4
    if_null rx742_debug, debug_732
    rx742_cur."!cursor_debug"("NEXT", "scope_declarator:sym<our>")
  debug_732:
  rx742_fail:
    (rx742_rep, rx742_pos, $I10, $P10) = rx742_cur."!mark_fail"(0)
    lt rx742_pos, -1, rx742_done
    eq rx742_pos, -1, rx742_fail
    jump $I10
  rx742_done:
    rx742_cur."!cursor_fail"()
    if_null rx742_debug, debug_733
    rx742_cur."!cursor_debug"("FAIL", "scope_declarator:sym<our>")
  debug_733:
    .return (rx742_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<our>"  :nsentry("!PREFIX__scope_declarator:sym<our>") :subid("157_1300057348.719") :method
.annotate 'line', 4
    $P744 = self."!PREFIX__!subrule"("scoped", "our")
    new $P745, "ResizablePMCArray"
    push $P745, $P744
    .return ($P745)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<has>"  :subid("158_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx749_tgt
    .local int rx749_pos
    .local int rx749_off
    .local int rx749_eos
    .local int rx749_rep
    .local pmc rx749_cur
    .local pmc rx749_debug
    (rx749_cur, rx749_pos, rx749_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx749_cur
    .local pmc match
    .lex "$/", match
    length rx749_eos, rx749_tgt
    gt rx749_pos, rx749_eos, rx749_done
    set rx749_off, 0
    lt rx749_pos, 2, rx749_start
    sub rx749_off, rx749_pos, 1
    substr rx749_tgt, rx749_tgt, rx749_off
  rx749_start:
    eq $I10, 1, rx749_restart
    if_null rx749_debug, debug_734
    rx749_cur."!cursor_debug"("START", "scope_declarator:sym<has>")
  debug_734:
    $I10 = self.'from'()
    ne $I10, -1, rxscan753_done
    goto rxscan753_scan
  rxscan753_loop:
    (rx749_pos) = rx749_cur."from"()
    inc rx749_pos
    rx749_cur."!cursor_from"(rx749_pos)
    ge rx749_pos, rx749_eos, rxscan753_done
  rxscan753_scan:
    set_addr $I10, rxscan753_loop
    rx749_cur."!mark_push"(0, rx749_pos, $I10)
  rxscan753_done:
.annotate 'line', 361
  # rx subcapture "sym"
    set_addr $I10, rxcap_754_fail
    rx749_cur."!mark_push"(0, rx749_pos, $I10)
  # rx literal  "has"
    add $I11, rx749_pos, 3
    gt $I11, rx749_eos, rx749_fail
    sub $I11, rx749_pos, rx749_off
    substr $S10, rx749_tgt, $I11, 3
    ne $S10, "has", rx749_fail
    add rx749_pos, 3
    set_addr $I10, rxcap_754_fail
    ($I12, $I11) = rx749_cur."!mark_peek"($I10)
    rx749_cur."!cursor_pos"($I11)
    ($P10) = rx749_cur."!cursor_start"()
    $P10."!cursor_pass"(rx749_pos, "")
    rx749_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_754_done
  rxcap_754_fail:
    goto rx749_fail
  rxcap_754_done:
  # rx subrule "scoped" subtype=capture negate=
    rx749_cur."!cursor_pos"(rx749_pos)
    $P10 = rx749_cur."scoped"("has")
    unless $P10, rx749_fail
    rx749_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx749_pos = $P10."pos"()
  # rx pass
    rx749_cur."!cursor_pass"(rx749_pos, "scope_declarator:sym<has>")
    if_null rx749_debug, debug_735
    rx749_cur."!cursor_debug"("PASS", "scope_declarator:sym<has>", " at pos=", rx749_pos)
  debug_735:
    .return (rx749_cur)
  rx749_restart:
.annotate 'line', 4
    if_null rx749_debug, debug_736
    rx749_cur."!cursor_debug"("NEXT", "scope_declarator:sym<has>")
  debug_736:
  rx749_fail:
    (rx749_rep, rx749_pos, $I10, $P10) = rx749_cur."!mark_fail"(0)
    lt rx749_pos, -1, rx749_done
    eq rx749_pos, -1, rx749_fail
    jump $I10
  rx749_done:
    rx749_cur."!cursor_fail"()
    if_null rx749_debug, debug_737
    rx749_cur."!cursor_debug"("FAIL", "scope_declarator:sym<has>")
  debug_737:
    .return (rx749_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<has>"  :nsentry("!PREFIX__scope_declarator:sym<has>") :subid("159_1300057348.719") :method
.annotate 'line', 4
    $P751 = self."!PREFIX__!subrule"("scoped", "has")
    new $P752, "ResizablePMCArray"
    push $P752, $P751
    .return ($P752)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scoped"  :subid("160_1300057348.719") :method :outer("11_1300057348.719")
    .param pmc param_756
.annotate 'line', 363
    .lex "$*SCOPE", param_756
.annotate 'line', 4
    .local string rx757_tgt
    .local int rx757_pos
    .local int rx757_off
    .local int rx757_eos
    .local int rx757_rep
    .local pmc rx757_cur
    .local pmc rx757_debug
    (rx757_cur, rx757_pos, rx757_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx757_cur
    .local pmc match
    .lex "$/", match
    length rx757_eos, rx757_tgt
    gt rx757_pos, rx757_eos, rx757_done
    set rx757_off, 0
    lt rx757_pos, 2, rx757_start
    sub rx757_off, rx757_pos, 1
    substr rx757_tgt, rx757_tgt, rx757_off
  rx757_start:
    eq $I10, 1, rx757_restart
    if_null rx757_debug, debug_738
    rx757_cur."!cursor_debug"("START", "scoped")
  debug_738:
    $I10 = self.'from'()
    ne $I10, -1, rxscan763_done
    goto rxscan763_scan
  rxscan763_loop:
    (rx757_pos) = rx757_cur."from"()
    inc rx757_pos
    rx757_cur."!cursor_from"(rx757_pos)
    ge rx757_pos, rx757_eos, rxscan763_done
  rxscan763_scan:
    set_addr $I10, rxscan763_loop
    rx757_cur."!mark_push"(0, rx757_pos, $I10)
  rxscan763_done:
  alt764_0:
.annotate 'line', 363
    set_addr $I10, alt764_1
    rx757_cur."!mark_push"(0, rx757_pos, $I10)
.annotate 'line', 364
  # rx subrule "ws" subtype=method negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."ws"()
    unless $P10, rx757_fail
    rx757_pos = $P10."pos"()
  # rx subrule "declarator" subtype=capture negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."declarator"()
    unless $P10, rx757_fail
    rx757_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx757_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."ws"()
    unless $P10, rx757_fail
    rx757_pos = $P10."pos"()
    goto alt764_end
  alt764_1:
    set_addr $I10, alt764_2
    rx757_cur."!mark_push"(0, rx757_pos, $I10)
.annotate 'line', 365
  # rx subrule "ws" subtype=method negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."ws"()
    unless $P10, rx757_fail
    rx757_pos = $P10."pos"()
  # rx subrule "multi_declarator" subtype=capture negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."multi_declarator"()
    unless $P10, rx757_fail
    rx757_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx757_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."ws"()
    unless $P10, rx757_fail
    rx757_pos = $P10."pos"()
    goto alt764_end
  alt764_2:
.annotate 'line', 366
  # rx subrule "ws" subtype=method negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."ws"()
    unless $P10, rx757_fail
    rx757_pos = $P10."pos"()
  # rx subrule "package_declarator" subtype=capture negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."package_declarator"()
    unless $P10, rx757_fail
    rx757_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx757_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx757_cur."!cursor_pos"(rx757_pos)
    $P10 = rx757_cur."ws"()
    unless $P10, rx757_fail
    rx757_pos = $P10."pos"()
  alt764_end:
.annotate 'line', 363
  # rx pass
    rx757_cur."!cursor_pass"(rx757_pos, "scoped")
    if_null rx757_debug, debug_739
    rx757_cur."!cursor_debug"("PASS", "scoped", " at pos=", rx757_pos)
  debug_739:
    .return (rx757_cur)
  rx757_restart:
.annotate 'line', 4
    if_null rx757_debug, debug_740
    rx757_cur."!cursor_debug"("NEXT", "scoped")
  debug_740:
  rx757_fail:
    (rx757_rep, rx757_pos, $I10, $P10) = rx757_cur."!mark_fail"(0)
    lt rx757_pos, -1, rx757_done
    eq rx757_pos, -1, rx757_fail
    jump $I10
  rx757_done:
    rx757_cur."!cursor_fail"()
    if_null rx757_debug, debug_741
    rx757_cur."!cursor_debug"("FAIL", "scoped")
  debug_741:
    .return (rx757_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scoped"  :nsentry("!PREFIX__scoped") :subid("161_1300057348.719") :method
.annotate 'line', 4
    $P759 = self."!PREFIX__!subrule"("ws", "")
    $P760 = self."!PREFIX__!subrule"("ws", "")
    $P761 = self."!PREFIX__!subrule"("ws", "")
    new $P762, "ResizablePMCArray"
    push $P762, $P759
    push $P762, $P760
    push $P762, $P761
    .return ($P762)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "typename"  :subid("162_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx772_tgt
    .local int rx772_pos
    .local int rx772_off
    .local int rx772_eos
    .local int rx772_rep
    .local pmc rx772_cur
    .local pmc rx772_debug
    (rx772_cur, rx772_pos, rx772_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx772_cur
    .local pmc match
    .lex "$/", match
    length rx772_eos, rx772_tgt
    gt rx772_pos, rx772_eos, rx772_done
    set rx772_off, 0
    lt rx772_pos, 2, rx772_start
    sub rx772_off, rx772_pos, 1
    substr rx772_tgt, rx772_tgt, rx772_off
  rx772_start:
    eq $I10, 1, rx772_restart
    if_null rx772_debug, debug_742
    rx772_cur."!cursor_debug"("START", "typename")
  debug_742:
    $I10 = self.'from'()
    ne $I10, -1, rxscan776_done
    goto rxscan776_scan
  rxscan776_loop:
    (rx772_pos) = rx772_cur."from"()
    inc rx772_pos
    rx772_cur."!cursor_from"(rx772_pos)
    ge rx772_pos, rx772_eos, rxscan776_done
  rxscan776_scan:
    set_addr $I10, rxscan776_loop
    rx772_cur."!mark_push"(0, rx772_pos, $I10)
  rxscan776_done:
.annotate 'line', 369
  # rx subrule "name" subtype=capture negate=
    rx772_cur."!cursor_pos"(rx772_pos)
    $P10 = rx772_cur."name"()
    unless $P10, rx772_fail
    rx772_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx772_pos = $P10."pos"()
  # rx pass
    rx772_cur."!cursor_pass"(rx772_pos, "typename")
    if_null rx772_debug, debug_743
    rx772_cur."!cursor_debug"("PASS", "typename", " at pos=", rx772_pos)
  debug_743:
    .return (rx772_cur)
  rx772_restart:
.annotate 'line', 4
    if_null rx772_debug, debug_744
    rx772_cur."!cursor_debug"("NEXT", "typename")
  debug_744:
  rx772_fail:
    (rx772_rep, rx772_pos, $I10, $P10) = rx772_cur."!mark_fail"(0)
    lt rx772_pos, -1, rx772_done
    eq rx772_pos, -1, rx772_fail
    jump $I10
  rx772_done:
    rx772_cur."!cursor_fail"()
    if_null rx772_debug, debug_745
    rx772_cur."!cursor_debug"("FAIL", "typename")
  debug_745:
    .return (rx772_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__typename"  :nsentry("!PREFIX__typename") :subid("163_1300057348.719") :method
.annotate 'line', 4
    $P774 = self."!PREFIX__!subrule"("name", "")
    new $P775, "ResizablePMCArray"
    push $P775, $P774
    .return ($P775)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "declarator"  :subid("164_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx778_tgt
    .local int rx778_pos
    .local int rx778_off
    .local int rx778_eos
    .local int rx778_rep
    .local pmc rx778_cur
    .local pmc rx778_debug
    (rx778_cur, rx778_pos, rx778_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx778_cur
    .local pmc match
    .lex "$/", match
    length rx778_eos, rx778_tgt
    gt rx778_pos, rx778_eos, rx778_done
    set rx778_off, 0
    lt rx778_pos, 2, rx778_start
    sub rx778_off, rx778_pos, 1
    substr rx778_tgt, rx778_tgt, rx778_off
  rx778_start:
    eq $I10, 1, rx778_restart
    if_null rx778_debug, debug_746
    rx778_cur."!cursor_debug"("START", "declarator")
  debug_746:
    $I10 = self.'from'()
    ne $I10, -1, rxscan783_done
    goto rxscan783_scan
  rxscan783_loop:
    (rx778_pos) = rx778_cur."from"()
    inc rx778_pos
    rx778_cur."!cursor_from"(rx778_pos)
    ge rx778_pos, rx778_eos, rxscan783_done
  rxscan783_scan:
    set_addr $I10, rxscan783_loop
    rx778_cur."!mark_push"(0, rx778_pos, $I10)
  rxscan783_done:
  alt784_0:
.annotate 'line', 371
    set_addr $I10, alt784_1
    rx778_cur."!mark_push"(0, rx778_pos, $I10)
.annotate 'line', 372
  # rx subrule "variable_declarator" subtype=capture negate=
    rx778_cur."!cursor_pos"(rx778_pos)
    $P10 = rx778_cur."variable_declarator"()
    unless $P10, rx778_fail
    rx778_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable_declarator")
    rx778_pos = $P10."pos"()
    goto alt784_end
  alt784_1:
.annotate 'line', 373
  # rx subrule "routine_declarator" subtype=capture negate=
    rx778_cur."!cursor_pos"(rx778_pos)
    $P10 = rx778_cur."routine_declarator"()
    unless $P10, rx778_fail
    rx778_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx778_pos = $P10."pos"()
  alt784_end:
.annotate 'line', 371
  # rx pass
    rx778_cur."!cursor_pass"(rx778_pos, "declarator")
    if_null rx778_debug, debug_747
    rx778_cur."!cursor_debug"("PASS", "declarator", " at pos=", rx778_pos)
  debug_747:
    .return (rx778_cur)
  rx778_restart:
.annotate 'line', 4
    if_null rx778_debug, debug_748
    rx778_cur."!cursor_debug"("NEXT", "declarator")
  debug_748:
  rx778_fail:
    (rx778_rep, rx778_pos, $I10, $P10) = rx778_cur."!mark_fail"(0)
    lt rx778_pos, -1, rx778_done
    eq rx778_pos, -1, rx778_fail
    jump $I10
  rx778_done:
    rx778_cur."!cursor_fail"()
    if_null rx778_debug, debug_749
    rx778_cur."!cursor_debug"("FAIL", "declarator")
  debug_749:
    .return (rx778_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__declarator"  :nsentry("!PREFIX__declarator") :subid("165_1300057348.719") :method
.annotate 'line', 4
    $P780 = self."!PREFIX__!subrule"("routine_declarator", "")
    $P781 = self."!PREFIX__!subrule"("variable_declarator", "")
    new $P782, "ResizablePMCArray"
    push $P782, $P780
    push $P782, $P781
    .return ($P782)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable_declarator"  :subid("166_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx786_tgt
    .local int rx786_pos
    .local int rx786_off
    .local int rx786_eos
    .local int rx786_rep
    .local pmc rx786_cur
    .local pmc rx786_debug
    (rx786_cur, rx786_pos, rx786_tgt, $I10) = self."!cursor_start"()
    rx786_cur."!cursor_caparray"("typename")
    .lex unicode:"$\x{a2}", rx786_cur
    .local pmc match
    .lex "$/", match
    length rx786_eos, rx786_tgt
    gt rx786_pos, rx786_eos, rx786_done
    set rx786_off, 0
    lt rx786_pos, 2, rx786_start
    sub rx786_off, rx786_pos, 1
    substr rx786_tgt, rx786_tgt, rx786_off
  rx786_start:
    eq $I10, 1, rx786_restart
    if_null rx786_debug, debug_750
    rx786_cur."!cursor_debug"("START", "variable_declarator")
  debug_750:
    $I10 = self.'from'()
    ne $I10, -1, rxscan790_done
    goto rxscan790_scan
  rxscan790_loop:
    (rx786_pos) = rx786_cur."from"()
    inc rx786_pos
    rx786_cur."!cursor_from"(rx786_pos)
    ge rx786_pos, rx786_eos, rxscan790_done
  rxscan790_scan:
    set_addr $I10, rxscan790_loop
    rx786_cur."!mark_push"(0, rx786_pos, $I10)
  rxscan790_done:
.annotate 'line', 376
  # rx subrule "ws" subtype=method negate=
    rx786_cur."!cursor_pos"(rx786_pos)
    $P10 = rx786_cur."ws"()
    unless $P10, rx786_fail
    rx786_pos = $P10."pos"()
  # rx rxquantr792 ** 0..1
    set_addr $I10, rxquantr792_done
    rx786_cur."!mark_push"(0, rx786_pos, $I10)
  rxquantr792_loop:
  # rx subrule "typename" subtype=capture negate=
    rx786_cur."!cursor_pos"(rx786_pos)
    $P10 = rx786_cur."typename"()
    unless $P10, rx786_fail
    goto rxsubrule793_pass
  rxsubrule793_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx786_fail
  rxsubrule793_pass:
    set_addr $I10, rxsubrule793_back
    rx786_cur."!mark_push"(0, rx786_pos, $I10, $P10)
    $P10."!cursor_names"("typename")
    rx786_pos = $P10."pos"()
    set_addr $I10, rxquantr792_done
    (rx786_rep) = rx786_cur."!mark_commit"($I10)
  rxquantr792_done:
  # rx subrule "ws" subtype=method negate=
    rx786_cur."!cursor_pos"(rx786_pos)
    $P10 = rx786_cur."ws"()
    unless $P10, rx786_fail
    rx786_pos = $P10."pos"()
  # rx subrule "variable" subtype=capture negate=
    rx786_cur."!cursor_pos"(rx786_pos)
    $P10 = rx786_cur."variable"()
    unless $P10, rx786_fail
    rx786_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx786_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx786_cur."!cursor_pos"(rx786_pos)
    $P10 = rx786_cur."ws"()
    unless $P10, rx786_fail
    rx786_pos = $P10."pos"()
  # rx pass
    rx786_cur."!cursor_pass"(rx786_pos, "variable_declarator")
    if_null rx786_debug, debug_751
    rx786_cur."!cursor_debug"("PASS", "variable_declarator", " at pos=", rx786_pos)
  debug_751:
    .return (rx786_cur)
  rx786_restart:
.annotate 'line', 4
    if_null rx786_debug, debug_752
    rx786_cur."!cursor_debug"("NEXT", "variable_declarator")
  debug_752:
  rx786_fail:
    (rx786_rep, rx786_pos, $I10, $P10) = rx786_cur."!mark_fail"(0)
    lt rx786_pos, -1, rx786_done
    eq rx786_pos, -1, rx786_fail
    jump $I10
  rx786_done:
    rx786_cur."!cursor_fail"()
    if_null rx786_debug, debug_753
    rx786_cur."!cursor_debug"("FAIL", "variable_declarator")
  debug_753:
    .return (rx786_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable_declarator"  :nsentry("!PREFIX__variable_declarator") :subid("167_1300057348.719") :method
.annotate 'line', 4
    $P788 = self."!PREFIX__!subrule"("ws", "")
    new $P789, "ResizablePMCArray"
    push $P789, $P788
    .return ($P789)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator"  :subid("168_1300057348.719")
    .param pmc param_797
.annotate 'line', 378
    .lex "self", param_797
    $P798 = param_797."!protoregex"("routine_declarator")
    .return ($P798)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator"  :subid("169_1300057348.719")
    .param pmc param_800
.annotate 'line', 378
    .lex "self", param_800
    $P801 = param_800."!PREFIX__!protoregex"("routine_declarator")
    .return ($P801)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<sub>"  :subid("170_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx803_tgt
    .local int rx803_pos
    .local int rx803_off
    .local int rx803_eos
    .local int rx803_rep
    .local pmc rx803_cur
    .local pmc rx803_debug
    (rx803_cur, rx803_pos, rx803_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx803_cur
    .local pmc match
    .lex "$/", match
    length rx803_eos, rx803_tgt
    gt rx803_pos, rx803_eos, rx803_done
    set rx803_off, 0
    lt rx803_pos, 2, rx803_start
    sub rx803_off, rx803_pos, 1
    substr rx803_tgt, rx803_tgt, rx803_off
  rx803_start:
    eq $I10, 1, rx803_restart
    if_null rx803_debug, debug_754
    rx803_cur."!cursor_debug"("START", "routine_declarator:sym<sub>")
  debug_754:
    $I10 = self.'from'()
    ne $I10, -1, rxscan807_done
    goto rxscan807_scan
  rxscan807_loop:
    (rx803_pos) = rx803_cur."from"()
    inc rx803_pos
    rx803_cur."!cursor_from"(rx803_pos)
    ge rx803_pos, rx803_eos, rxscan807_done
  rxscan807_scan:
    set_addr $I10, rxscan807_loop
    rx803_cur."!mark_push"(0, rx803_pos, $I10)
  rxscan807_done:
.annotate 'line', 379
  # rx subcapture "sym"
    set_addr $I10, rxcap_808_fail
    rx803_cur."!mark_push"(0, rx803_pos, $I10)
  # rx literal  "sub"
    add $I11, rx803_pos, 3
    gt $I11, rx803_eos, rx803_fail
    sub $I11, rx803_pos, rx803_off
    substr $S10, rx803_tgt, $I11, 3
    ne $S10, "sub", rx803_fail
    add rx803_pos, 3
    set_addr $I10, rxcap_808_fail
    ($I12, $I11) = rx803_cur."!mark_peek"($I10)
    rx803_cur."!cursor_pos"($I11)
    ($P10) = rx803_cur."!cursor_start"()
    $P10."!cursor_pass"(rx803_pos, "")
    rx803_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_808_done
  rxcap_808_fail:
    goto rx803_fail
  rxcap_808_done:
  # rx subrule "routine_def" subtype=capture negate=
    rx803_cur."!cursor_pos"(rx803_pos)
    $P10 = rx803_cur."routine_def"()
    unless $P10, rx803_fail
    rx803_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx803_pos = $P10."pos"()
  # rx pass
    rx803_cur."!cursor_pass"(rx803_pos, "routine_declarator:sym<sub>")
    if_null rx803_debug, debug_755
    rx803_cur."!cursor_debug"("PASS", "routine_declarator:sym<sub>", " at pos=", rx803_pos)
  debug_755:
    .return (rx803_cur)
  rx803_restart:
.annotate 'line', 4
    if_null rx803_debug, debug_756
    rx803_cur."!cursor_debug"("NEXT", "routine_declarator:sym<sub>")
  debug_756:
  rx803_fail:
    (rx803_rep, rx803_pos, $I10, $P10) = rx803_cur."!mark_fail"(0)
    lt rx803_pos, -1, rx803_done
    eq rx803_pos, -1, rx803_fail
    jump $I10
  rx803_done:
    rx803_cur."!cursor_fail"()
    if_null rx803_debug, debug_757
    rx803_cur."!cursor_debug"("FAIL", "routine_declarator:sym<sub>")
  debug_757:
    .return (rx803_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<sub>"  :nsentry("!PREFIX__routine_declarator:sym<sub>") :subid("171_1300057348.719") :method
.annotate 'line', 4
    $P805 = self."!PREFIX__!subrule"("routine_def", "sub")
    new $P806, "ResizablePMCArray"
    push $P806, $P805
    .return ($P806)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<method>"  :subid("172_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx810_tgt
    .local int rx810_pos
    .local int rx810_off
    .local int rx810_eos
    .local int rx810_rep
    .local pmc rx810_cur
    .local pmc rx810_debug
    (rx810_cur, rx810_pos, rx810_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx810_cur
    .local pmc match
    .lex "$/", match
    length rx810_eos, rx810_tgt
    gt rx810_pos, rx810_eos, rx810_done
    set rx810_off, 0
    lt rx810_pos, 2, rx810_start
    sub rx810_off, rx810_pos, 1
    substr rx810_tgt, rx810_tgt, rx810_off
  rx810_start:
    eq $I10, 1, rx810_restart
    if_null rx810_debug, debug_758
    rx810_cur."!cursor_debug"("START", "routine_declarator:sym<method>")
  debug_758:
    $I10 = self.'from'()
    ne $I10, -1, rxscan814_done
    goto rxscan814_scan
  rxscan814_loop:
    (rx810_pos) = rx810_cur."from"()
    inc rx810_pos
    rx810_cur."!cursor_from"(rx810_pos)
    ge rx810_pos, rx810_eos, rxscan814_done
  rxscan814_scan:
    set_addr $I10, rxscan814_loop
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
  rxscan814_done:
.annotate 'line', 380
  # rx subcapture "sym"
    set_addr $I10, rxcap_815_fail
    rx810_cur."!mark_push"(0, rx810_pos, $I10)
  # rx literal  "method"
    add $I11, rx810_pos, 6
    gt $I11, rx810_eos, rx810_fail
    sub $I11, rx810_pos, rx810_off
    substr $S10, rx810_tgt, $I11, 6
    ne $S10, "method", rx810_fail
    add rx810_pos, 6
    set_addr $I10, rxcap_815_fail
    ($I12, $I11) = rx810_cur."!mark_peek"($I10)
    rx810_cur."!cursor_pos"($I11)
    ($P10) = rx810_cur."!cursor_start"()
    $P10."!cursor_pass"(rx810_pos, "")
    rx810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_815_done
  rxcap_815_fail:
    goto rx810_fail
  rxcap_815_done:
  # rx subrule "method_def" subtype=capture negate=
    rx810_cur."!cursor_pos"(rx810_pos)
    $P10 = rx810_cur."method_def"()
    unless $P10, rx810_fail
    rx810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("method_def")
    rx810_pos = $P10."pos"()
  # rx pass
    rx810_cur."!cursor_pass"(rx810_pos, "routine_declarator:sym<method>")
    if_null rx810_debug, debug_759
    rx810_cur."!cursor_debug"("PASS", "routine_declarator:sym<method>", " at pos=", rx810_pos)
  debug_759:
    .return (rx810_cur)
  rx810_restart:
.annotate 'line', 4
    if_null rx810_debug, debug_760
    rx810_cur."!cursor_debug"("NEXT", "routine_declarator:sym<method>")
  debug_760:
  rx810_fail:
    (rx810_rep, rx810_pos, $I10, $P10) = rx810_cur."!mark_fail"(0)
    lt rx810_pos, -1, rx810_done
    eq rx810_pos, -1, rx810_fail
    jump $I10
  rx810_done:
    rx810_cur."!cursor_fail"()
    if_null rx810_debug, debug_761
    rx810_cur."!cursor_debug"("FAIL", "routine_declarator:sym<method>")
  debug_761:
    .return (rx810_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<method>"  :nsentry("!PREFIX__routine_declarator:sym<method>") :subid("173_1300057348.719") :method
.annotate 'line', 4
    $P812 = self."!PREFIX__!subrule"("method_def", "method")
    new $P813, "ResizablePMCArray"
    push $P813, $P812
    .return ($P813)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_def"  :subid("174_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 383
    new $P817, "Undef"
    .lex "$*RETURN_USED", $P817
.annotate 'line', 4
    .local string rx818_tgt
    .local int rx818_pos
    .local int rx818_off
    .local int rx818_eos
    .local int rx818_rep
    .local pmc rx818_cur
    .local pmc rx818_debug
    (rx818_cur, rx818_pos, rx818_tgt, $I10) = self."!cursor_start"()
    rx818_cur."!cursor_caparray"("sigil", "deflongname", "trait")
    .lex unicode:"$\x{a2}", rx818_cur
    .local pmc match
    .lex "$/", match
    length rx818_eos, rx818_tgt
    gt rx818_pos, rx818_eos, rx818_done
    set rx818_off, 0
    lt rx818_pos, 2, rx818_start
    sub rx818_off, rx818_pos, 1
    substr rx818_tgt, rx818_tgt, rx818_off
  rx818_start:
    eq $I10, 1, rx818_restart
    if_null rx818_debug, debug_762
    rx818_cur."!cursor_debug"("START", "routine_def")
  debug_762:
    $I10 = self.'from'()
    ne $I10, -1, rxscan822_done
    goto rxscan822_scan
  rxscan822_loop:
    (rx818_pos) = rx818_cur."from"()
    inc rx818_pos
    rx818_cur."!cursor_from"(rx818_pos)
    ge rx818_pos, rx818_eos, rxscan822_done
  rxscan822_scan:
    set_addr $I10, rxscan822_loop
    rx818_cur."!mark_push"(0, rx818_pos, $I10)
  rxscan822_done:
.annotate 'line', 382
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
.annotate 'line', 383
    rx818_cur."!cursor_pos"(rx818_pos)
    new $P824, "Integer"
    assign $P824, 0
    store_lex "$*RETURN_USED", $P824
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
.annotate 'line', 384
  # rx rxquantr826 ** 0..1
    set_addr $I10, rxquantr826_done
    rx818_cur."!mark_push"(0, rx818_pos, $I10)
  rxquantr826_loop:
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx subcapture "sigil"
    set_addr $I10, rxcap_829_fail
    rx818_cur."!mark_push"(0, rx818_pos, $I10)
  # rx rxquantr828 ** 0..1
    set_addr $I10, rxquantr828_done
    rx818_cur."!mark_push"(0, rx818_pos, $I10)
  rxquantr828_loop:
  # rx literal  "&"
    add $I11, rx818_pos, 1
    gt $I11, rx818_eos, rx818_fail
    sub $I11, rx818_pos, rx818_off
    ord $I11, rx818_tgt, $I11
    ne $I11, 38, rx818_fail
    add rx818_pos, 1
    set_addr $I10, rxquantr828_done
    (rx818_rep) = rx818_cur."!mark_commit"($I10)
  rxquantr828_done:
    set_addr $I10, rxcap_829_fail
    ($I12, $I11) = rx818_cur."!mark_peek"($I10)
    rx818_cur."!cursor_pos"($I11)
    ($P10) = rx818_cur."!cursor_start"()
    $P10."!cursor_pass"(rx818_pos, "")
    rx818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_829_done
  rxcap_829_fail:
    goto rx818_fail
  rxcap_829_done:
  # rx subrule "deflongname" subtype=capture negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."deflongname"()
    unless $P10, rx818_fail
    rx818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx818_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
    set_addr $I10, rxquantr826_done
    (rx818_rep) = rx818_cur."!mark_commit"($I10)
  rxquantr826_done:
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
.annotate 'line', 385
  # rx subrule "newpad" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."newpad"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  alt833_0:
.annotate 'line', 386
    set_addr $I10, alt833_1
    rx818_cur."!mark_push"(0, rx818_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx818_pos, 1
    gt $I11, rx818_eos, rx818_fail
    sub $I11, rx818_pos, rx818_off
    ord $I11, rx818_tgt, $I11
    ne $I11, 40, rx818_fail
    add rx818_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."signature"()
    unless $P10, rx818_fail
    rx818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx818_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx818_pos, 1
    gt $I11, rx818_eos, rx818_fail
    sub $I11, rx818_pos, rx818_off
    ord $I11, rx818_tgt, $I11
    ne $I11, 41, rx818_fail
    add rx818_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
    goto alt833_end
  alt833_1:
.annotate 'line', 387
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  alt833_end:
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
.annotate 'line', 388
  # rx rxquantr841 ** 0..*
    set_addr $I10, rxquantr841_done
    rx818_cur."!mark_push"(0, rx818_pos, $I10)
  rxquantr841_loop:
  # rx subrule "trait" subtype=capture negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."trait"()
    unless $P10, rx818_fail
    goto rxsubrule842_pass
  rxsubrule842_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx818_fail
  rxsubrule842_pass:
    set_addr $I10, rxsubrule842_back
    rx818_cur."!mark_push"(0, rx818_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx818_pos = $P10."pos"()
    set_addr $I10, rxquantr841_done
    (rx818_rep) = rx818_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr841_done
    rx818_cur."!mark_push"(rx818_rep, rx818_pos, $I10)
    goto rxquantr841_loop
  rxquantr841_done:
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  alt844_0:
.annotate 'line', 389
    set_addr $I10, alt844_1
    rx818_cur."!mark_push"(0, rx818_pos, $I10)
.annotate 'line', 390
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."onlystar"()
    unless $P10, rx818_fail
    rx818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx818_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
    goto alt844_end
  alt844_1:
.annotate 'line', 391
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."blockoid"()
    unless $P10, rx818_fail
    rx818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx818_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
  alt844_end:
.annotate 'line', 392
  # rx subrule "ws" subtype=method negate=
    rx818_cur."!cursor_pos"(rx818_pos)
    $P10 = rx818_cur."ws"()
    unless $P10, rx818_fail
    rx818_pos = $P10."pos"()
.annotate 'line', 382
  # rx pass
    rx818_cur."!cursor_pass"(rx818_pos, "routine_def")
    if_null rx818_debug, debug_763
    rx818_cur."!cursor_debug"("PASS", "routine_def", " at pos=", rx818_pos)
  debug_763:
    .return (rx818_cur)
  rx818_restart:
.annotate 'line', 4
    if_null rx818_debug, debug_764
    rx818_cur."!cursor_debug"("NEXT", "routine_def")
  debug_764:
  rx818_fail:
    (rx818_rep, rx818_pos, $I10, $P10) = rx818_cur."!mark_fail"(0)
    lt rx818_pos, -1, rx818_done
    eq rx818_pos, -1, rx818_fail
    jump $I10
  rx818_done:
    rx818_cur."!cursor_fail"()
    if_null rx818_debug, debug_765
    rx818_cur."!cursor_debug"("FAIL", "routine_def")
  debug_765:
    .return (rx818_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_def"  :nsentry("!PREFIX__routine_def") :subid("175_1300057348.719") :method
.annotate 'line', 4
    $P820 = self."!PREFIX__!subrule"("ws", "")
    new $P821, "ResizablePMCArray"
    push $P821, $P820
    .return ($P821)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "method_def"  :subid("176_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P881 = "178_1300057348.719" 
    capture_lex $P881
.annotate 'line', 396
    new $P851, "Undef"
    .lex "$*RETURN_USED", $P851
.annotate 'line', 397
    new $P852, "Undef"
    .lex "$*INVOCANT_OK", $P852
.annotate 'line', 4
    .local string rx853_tgt
    .local int rx853_pos
    .local int rx853_off
    .local int rx853_eos
    .local int rx853_rep
    .local pmc rx853_cur
    .local pmc rx853_debug
    (rx853_cur, rx853_pos, rx853_tgt, $I10) = self."!cursor_start"()
    rx853_cur."!cursor_caparray"("deflongname", "trait")
    .lex unicode:"$\x{a2}", rx853_cur
    .local pmc match
    .lex "$/", match
    length rx853_eos, rx853_tgt
    gt rx853_pos, rx853_eos, rx853_done
    set rx853_off, 0
    lt rx853_pos, 2, rx853_start
    sub rx853_off, rx853_pos, 1
    substr rx853_tgt, rx853_tgt, rx853_off
  rx853_start:
    eq $I10, 1, rx853_restart
    if_null rx853_debug, debug_766
    rx853_cur."!cursor_debug"("START", "method_def")
  debug_766:
    $I10 = self.'from'()
    ne $I10, -1, rxscan857_done
    goto rxscan857_scan
  rxscan857_loop:
    (rx853_pos) = rx853_cur."from"()
    inc rx853_pos
    rx853_cur."!cursor_from"(rx853_pos)
    ge rx853_pos, rx853_eos, rxscan857_done
  rxscan857_scan:
    set_addr $I10, rxscan857_loop
    rx853_cur."!mark_push"(0, rx853_pos, $I10)
  rxscan857_done:
.annotate 'line', 395
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
.annotate 'line', 396
    rx853_cur."!cursor_pos"(rx853_pos)
    new $P859, "Integer"
    assign $P859, 0
    store_lex "$*RETURN_USED", $P859
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
.annotate 'line', 397
    rx853_cur."!cursor_pos"(rx853_pos)
    new $P861, "Integer"
    assign $P861, 1
    store_lex "$*INVOCANT_OK", $P861
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
.annotate 'line', 398
  # rx subcapture "private"
    set_addr $I10, rxcap_864_fail
    rx853_cur."!mark_push"(0, rx853_pos, $I10)
  # rx rxquantr863 ** 0..1
    set_addr $I10, rxquantr863_done
    rx853_cur."!mark_push"(0, rx853_pos, $I10)
  rxquantr863_loop:
  # rx literal  "!"
    add $I11, rx853_pos, 1
    gt $I11, rx853_eos, rx853_fail
    sub $I11, rx853_pos, rx853_off
    ord $I11, rx853_tgt, $I11
    ne $I11, 33, rx853_fail
    add rx853_pos, 1
    set_addr $I10, rxquantr863_done
    (rx853_rep) = rx853_cur."!mark_commit"($I10)
  rxquantr863_done:
    set_addr $I10, rxcap_864_fail
    ($I12, $I11) = rx853_cur."!mark_peek"($I10)
    rx853_cur."!cursor_pos"($I11)
    ($P10) = rx853_cur."!cursor_start"()
    $P10."!cursor_pass"(rx853_pos, "")
    rx853_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("private")
    goto rxcap_864_done
  rxcap_864_fail:
    goto rx853_fail
  rxcap_864_done:
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
.annotate 'line', 399
  # rx rxquantr866 ** 0..1
    set_addr $I10, rxquantr866_done
    rx853_cur."!mark_push"(0, rx853_pos, $I10)
  rxquantr866_loop:
  # rx subrule "deflongname" subtype=capture negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."deflongname"()
    unless $P10, rx853_fail
    goto rxsubrule867_pass
  rxsubrule867_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx853_fail
  rxsubrule867_pass:
    set_addr $I10, rxsubrule867_back
    rx853_cur."!mark_push"(0, rx853_pos, $I10, $P10)
    $P10."!cursor_names"("deflongname")
    rx853_pos = $P10."pos"()
    set_addr $I10, rxquantr866_done
    (rx853_rep) = rx853_cur."!mark_commit"($I10)
  rxquantr866_done:
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
.annotate 'line', 400
  # rx subrule "newpad" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."newpad"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  alt870_0:
.annotate 'line', 401
    set_addr $I10, alt870_1
    rx853_cur."!mark_push"(0, rx853_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx853_pos, 1
    gt $I11, rx853_eos, rx853_fail
    sub $I11, rx853_pos, rx853_off
    ord $I11, rx853_tgt, $I11
    ne $I11, 40, rx853_fail
    add rx853_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."signature"()
    unless $P10, rx853_fail
    rx853_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx853_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx853_pos, 1
    gt $I11, rx853_eos, rx853_fail
    sub $I11, rx853_pos, rx853_off
    ord $I11, rx853_tgt, $I11
    ne $I11, 41, rx853_fail
    add rx853_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
    goto alt870_end
  alt870_1:
.annotate 'line', 402
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  alt870_end:
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
.annotate 'line', 403
    rx853_cur."!cursor_pos"(rx853_pos)
    find_lex $P878, unicode:"$\x{a2}"
    $P879 = $P878."MATCH"()
    store_lex "$/", $P879
    .const 'Sub' $P881 = "178_1300057348.719" 
    capture_lex $P881
    $P883 = $P881()
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
.annotate 'line', 404
  # rx rxquantr885 ** 0..*
    set_addr $I10, rxquantr885_done
    rx853_cur."!mark_push"(0, rx853_pos, $I10)
  rxquantr885_loop:
  # rx subrule "trait" subtype=capture negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."trait"()
    unless $P10, rx853_fail
    goto rxsubrule886_pass
  rxsubrule886_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx853_fail
  rxsubrule886_pass:
    set_addr $I10, rxsubrule886_back
    rx853_cur."!mark_push"(0, rx853_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx853_pos = $P10."pos"()
    set_addr $I10, rxquantr885_done
    (rx853_rep) = rx853_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr885_done
    rx853_cur."!mark_push"(rx853_rep, rx853_pos, $I10)
    goto rxquantr885_loop
  rxquantr885_done:
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  alt888_0:
.annotate 'line', 405
    set_addr $I10, alt888_1
    rx853_cur."!mark_push"(0, rx853_pos, $I10)
.annotate 'line', 406
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."onlystar"()
    unless $P10, rx853_fail
    rx853_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx853_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
    goto alt888_end
  alt888_1:
.annotate 'line', 407
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."blockoid"()
    unless $P10, rx853_fail
    rx853_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx853_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
  alt888_end:
.annotate 'line', 408
  # rx subrule "ws" subtype=method negate=
    rx853_cur."!cursor_pos"(rx853_pos)
    $P10 = rx853_cur."ws"()
    unless $P10, rx853_fail
    rx853_pos = $P10."pos"()
.annotate 'line', 395
  # rx pass
    rx853_cur."!cursor_pass"(rx853_pos, "method_def")
    if_null rx853_debug, debug_767
    rx853_cur."!cursor_debug"("PASS", "method_def", " at pos=", rx853_pos)
  debug_767:
    .return (rx853_cur)
  rx853_restart:
.annotate 'line', 4
    if_null rx853_debug, debug_768
    rx853_cur."!cursor_debug"("NEXT", "method_def")
  debug_768:
  rx853_fail:
    (rx853_rep, rx853_pos, $I10, $P10) = rx853_cur."!mark_fail"(0)
    lt rx853_pos, -1, rx853_done
    eq rx853_pos, -1, rx853_fail
    jump $I10
  rx853_done:
    rx853_cur."!cursor_fail"()
    if_null rx853_debug, debug_769
    rx853_cur."!cursor_debug"("FAIL", "method_def")
  debug_769:
    .return (rx853_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__method_def"  :nsentry("!PREFIX__method_def") :subid("177_1300057348.719") :method
.annotate 'line', 4
    $P855 = self."!PREFIX__!subrule"("ws", "")
    new $P856, "ResizablePMCArray"
    push $P856, $P855
    .return ($P856)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block880"  :anon :subid("178_1300057348.719") :outer("176_1300057348.719")
.annotate 'line', 403
    new $P882, "Integer"
    assign $P882, 0
    store_dynamic_lex "$*INVOCANT_OK", $P882
    .return ($P882)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "onlystar"  :subid("179_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P902 = "181_1300057348.719" 
    capture_lex $P902
    .local string rx895_tgt
    .local int rx895_pos
    .local int rx895_off
    .local int rx895_eos
    .local int rx895_rep
    .local pmc rx895_cur
    .local pmc rx895_debug
    (rx895_cur, rx895_pos, rx895_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx895_cur
    .local pmc match
    .lex "$/", match
    length rx895_eos, rx895_tgt
    gt rx895_pos, rx895_eos, rx895_done
    set rx895_off, 0
    lt rx895_pos, 2, rx895_start
    sub rx895_off, rx895_pos, 1
    substr rx895_tgt, rx895_tgt, rx895_off
  rx895_start:
    eq $I10, 1, rx895_restart
    if_null rx895_debug, debug_770
    rx895_cur."!cursor_debug"("START", "onlystar")
  debug_770:
    $I10 = self.'from'()
    ne $I10, -1, rxscan898_done
    goto rxscan898_scan
  rxscan898_loop:
    (rx895_pos) = rx895_cur."from"()
    inc rx895_pos
    rx895_cur."!cursor_from"(rx895_pos)
    ge rx895_pos, rx895_eos, rxscan898_done
  rxscan898_scan:
    set_addr $I10, rxscan898_loop
    rx895_cur."!mark_push"(0, rx895_pos, $I10)
  rxscan898_done:
.annotate 'line', 412
    rx895_cur."!cursor_pos"(rx895_pos)
    find_lex $P899, unicode:"$\x{a2}"
    $P900 = $P899."MATCH"()
    store_lex "$/", $P900
    .const 'Sub' $P902 = "181_1300057348.719" 
    capture_lex $P902
    $P906 = $P902()
    unless $P906, rx895_fail
.annotate 'line', 413
  # rx literal  "{"
    add $I11, rx895_pos, 1
    gt $I11, rx895_eos, rx895_fail
    sub $I11, rx895_pos, rx895_off
    ord $I11, rx895_tgt, $I11
    ne $I11, 123, rx895_fail
    add rx895_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx895_cur."!cursor_pos"(rx895_pos)
    $P10 = rx895_cur."ws"()
    unless $P10, rx895_fail
    rx895_pos = $P10."pos"()
  # rx literal  "*"
    add $I11, rx895_pos, 1
    gt $I11, rx895_eos, rx895_fail
    sub $I11, rx895_pos, rx895_off
    ord $I11, rx895_tgt, $I11
    ne $I11, 42, rx895_fail
    add rx895_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx895_cur."!cursor_pos"(rx895_pos)
    $P10 = rx895_cur."ws"()
    unless $P10, rx895_fail
    rx895_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx895_pos, 1
    gt $I11, rx895_eos, rx895_fail
    sub $I11, rx895_pos, rx895_off
    ord $I11, rx895_tgt, $I11
    ne $I11, 125, rx895_fail
    add rx895_pos, 1
.annotate 'line', 414
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx895_cur."!cursor_pos"(rx895_pos)
    $P10 = rx895_cur."ENDSTMT"()
    unless $P10, rx895_fail
.annotate 'line', 415
  # rx subrule "finishpad" subtype=method negate=
    rx895_cur."!cursor_pos"(rx895_pos)
    $P10 = rx895_cur."finishpad"()
    unless $P10, rx895_fail
    rx895_pos = $P10."pos"()
.annotate 'line', 411
  # rx pass
    rx895_cur."!cursor_pass"(rx895_pos, "onlystar")
    if_null rx895_debug, debug_773
    rx895_cur."!cursor_debug"("PASS", "onlystar", " at pos=", rx895_pos)
  debug_773:
    .return (rx895_cur)
  rx895_restart:
.annotate 'line', 4
    if_null rx895_debug, debug_774
    rx895_cur."!cursor_debug"("NEXT", "onlystar")
  debug_774:
  rx895_fail:
    (rx895_rep, rx895_pos, $I10, $P10) = rx895_cur."!mark_fail"(0)
    lt rx895_pos, -1, rx895_done
    eq rx895_pos, -1, rx895_fail
    jump $I10
  rx895_done:
    rx895_cur."!cursor_fail"()
    if_null rx895_debug, debug_775
    rx895_cur."!cursor_debug"("FAIL", "onlystar")
  debug_775:
    .return (rx895_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__onlystar"  :nsentry("!PREFIX__onlystar") :subid("180_1300057348.719") :method
.annotate 'line', 4
    new $P897, "ResizablePMCArray"
    push $P897, ""
    .return ($P897)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block901"  :anon :subid("181_1300057348.719") :outer("179_1300057348.719")
.annotate 'line', 412
    find_dynamic_lex $P903, "$*MULTINESS"
    unless_null $P903, vivify_771
    get_hll_global $P903, "$MULTINESS"
    unless_null $P903, vivify_772
    die "Contextual $*MULTINESS not found"
  vivify_772:
  vivify_771:
    set $S904, $P903
    iseq $I905, $S904, "proto"
    .return ($I905)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator"  :subid("182_1300057348.719")
    .param pmc param_908
.annotate 'line', 418
    .lex "self", param_908
    $P909 = param_908."!protoregex"("multi_declarator")
    .return ($P909)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator"  :subid("183_1300057348.719")
    .param pmc param_911
.annotate 'line', 418
    .lex "self", param_911
    $P912 = param_911."!PREFIX__!protoregex"("multi_declarator")
    .return ($P912)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<multi>"  :subid("184_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 420
    new $P914, "Undef"
    .lex "$*MULTINESS", $P914
.annotate 'line', 4
    .local string rx915_tgt
    .local int rx915_pos
    .local int rx915_off
    .local int rx915_eos
    .local int rx915_rep
    .local pmc rx915_cur
    .local pmc rx915_debug
    (rx915_cur, rx915_pos, rx915_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx915_cur
    .local pmc match
    .lex "$/", match
    length rx915_eos, rx915_tgt
    gt rx915_pos, rx915_eos, rx915_done
    set rx915_off, 0
    lt rx915_pos, 2, rx915_start
    sub rx915_off, rx915_pos, 1
    substr rx915_tgt, rx915_tgt, rx915_off
  rx915_start:
    eq $I10, 1, rx915_restart
    if_null rx915_debug, debug_776
    rx915_cur."!cursor_debug"("START", "multi_declarator:sym<multi>")
  debug_776:
    $I10 = self.'from'()
    ne $I10, -1, rxscan919_done
    goto rxscan919_scan
  rxscan919_loop:
    (rx915_pos) = rx915_cur."from"()
    inc rx915_pos
    rx915_cur."!cursor_from"(rx915_pos)
    ge rx915_pos, rx915_eos, rxscan919_done
  rxscan919_scan:
    set_addr $I10, rxscan919_loop
    rx915_cur."!mark_push"(0, rx915_pos, $I10)
  rxscan919_done:
.annotate 'line', 420
    rx915_cur."!cursor_pos"(rx915_pos)
    new $P920, "String"
    assign $P920, "multi"
    store_lex "$*MULTINESS", $P920
.annotate 'line', 421
  # rx subcapture "sym"
    set_addr $I10, rxcap_921_fail
    rx915_cur."!mark_push"(0, rx915_pos, $I10)
  # rx literal  "multi"
    add $I11, rx915_pos, 5
    gt $I11, rx915_eos, rx915_fail
    sub $I11, rx915_pos, rx915_off
    substr $S10, rx915_tgt, $I11, 5
    ne $S10, "multi", rx915_fail
    add rx915_pos, 5
    set_addr $I10, rxcap_921_fail
    ($I12, $I11) = rx915_cur."!mark_peek"($I10)
    rx915_cur."!cursor_pos"($I11)
    ($P10) = rx915_cur."!cursor_start"()
    $P10."!cursor_pass"(rx915_pos, "")
    rx915_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_921_done
  rxcap_921_fail:
    goto rx915_fail
  rxcap_921_done:
.annotate 'line', 422
  # rx subrule "ws" subtype=method negate=
    rx915_cur."!cursor_pos"(rx915_pos)
    $P10 = rx915_cur."ws"()
    unless $P10, rx915_fail
    rx915_pos = $P10."pos"()
  alt922_0:
    set_addr $I10, alt922_1
    rx915_cur."!mark_push"(0, rx915_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx915_cur."!cursor_pos"(rx915_pos)
    $P10 = rx915_cur."declarator"()
    unless $P10, rx915_fail
    rx915_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx915_pos = $P10."pos"()
    goto alt922_end
  alt922_1:
    set_addr $I10, alt922_2
    rx915_cur."!mark_push"(0, rx915_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx915_cur."!cursor_pos"(rx915_pos)
    $P10 = rx915_cur."routine_def"()
    unless $P10, rx915_fail
    rx915_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx915_pos = $P10."pos"()
    goto alt922_end
  alt922_2:
  # rx subrule "panic" subtype=method negate=
    rx915_cur."!cursor_pos"(rx915_pos)
    $P10 = rx915_cur."panic"("Malformed multi")
    unless $P10, rx915_fail
    rx915_pos = $P10."pos"()
  alt922_end:
.annotate 'line', 419
  # rx pass
    rx915_cur."!cursor_pass"(rx915_pos, "multi_declarator:sym<multi>")
    if_null rx915_debug, debug_777
    rx915_cur."!cursor_debug"("PASS", "multi_declarator:sym<multi>", " at pos=", rx915_pos)
  debug_777:
    .return (rx915_cur)
  rx915_restart:
.annotate 'line', 4
    if_null rx915_debug, debug_778
    rx915_cur."!cursor_debug"("NEXT", "multi_declarator:sym<multi>")
  debug_778:
  rx915_fail:
    (rx915_rep, rx915_pos, $I10, $P10) = rx915_cur."!mark_fail"(0)
    lt rx915_pos, -1, rx915_done
    eq rx915_pos, -1, rx915_fail
    jump $I10
  rx915_done:
    rx915_cur."!cursor_fail"()
    if_null rx915_debug, debug_779
    rx915_cur."!cursor_debug"("FAIL", "multi_declarator:sym<multi>")
  debug_779:
    .return (rx915_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<multi>"  :nsentry("!PREFIX__multi_declarator:sym<multi>") :subid("185_1300057348.719") :method
.annotate 'line', 4
    $P917 = self."!PREFIX__!subrule"("ws", "multi")
    new $P918, "ResizablePMCArray"
    push $P918, $P917
    .return ($P918)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<proto>"  :subid("186_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 425
    new $P924, "Undef"
    .lex "$*MULTINESS", $P924
.annotate 'line', 4
    .local string rx925_tgt
    .local int rx925_pos
    .local int rx925_off
    .local int rx925_eos
    .local int rx925_rep
    .local pmc rx925_cur
    .local pmc rx925_debug
    (rx925_cur, rx925_pos, rx925_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx925_cur
    .local pmc match
    .lex "$/", match
    length rx925_eos, rx925_tgt
    gt rx925_pos, rx925_eos, rx925_done
    set rx925_off, 0
    lt rx925_pos, 2, rx925_start
    sub rx925_off, rx925_pos, 1
    substr rx925_tgt, rx925_tgt, rx925_off
  rx925_start:
    eq $I10, 1, rx925_restart
    if_null rx925_debug, debug_780
    rx925_cur."!cursor_debug"("START", "multi_declarator:sym<proto>")
  debug_780:
    $I10 = self.'from'()
    ne $I10, -1, rxscan929_done
    goto rxscan929_scan
  rxscan929_loop:
    (rx925_pos) = rx925_cur."from"()
    inc rx925_pos
    rx925_cur."!cursor_from"(rx925_pos)
    ge rx925_pos, rx925_eos, rxscan929_done
  rxscan929_scan:
    set_addr $I10, rxscan929_loop
    rx925_cur."!mark_push"(0, rx925_pos, $I10)
  rxscan929_done:
.annotate 'line', 425
    rx925_cur."!cursor_pos"(rx925_pos)
    new $P930, "String"
    assign $P930, "proto"
    store_lex "$*MULTINESS", $P930
.annotate 'line', 426
  # rx subcapture "sym"
    set_addr $I10, rxcap_931_fail
    rx925_cur."!mark_push"(0, rx925_pos, $I10)
  # rx literal  "proto"
    add $I11, rx925_pos, 5
    gt $I11, rx925_eos, rx925_fail
    sub $I11, rx925_pos, rx925_off
    substr $S10, rx925_tgt, $I11, 5
    ne $S10, "proto", rx925_fail
    add rx925_pos, 5
    set_addr $I10, rxcap_931_fail
    ($I12, $I11) = rx925_cur."!mark_peek"($I10)
    rx925_cur."!cursor_pos"($I11)
    ($P10) = rx925_cur."!cursor_start"()
    $P10."!cursor_pass"(rx925_pos, "")
    rx925_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_931_done
  rxcap_931_fail:
    goto rx925_fail
  rxcap_931_done:
.annotate 'line', 427
  # rx subrule "ws" subtype=method negate=
    rx925_cur."!cursor_pos"(rx925_pos)
    $P10 = rx925_cur."ws"()
    unless $P10, rx925_fail
    rx925_pos = $P10."pos"()
  alt932_0:
    set_addr $I10, alt932_1
    rx925_cur."!mark_push"(0, rx925_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx925_cur."!cursor_pos"(rx925_pos)
    $P10 = rx925_cur."declarator"()
    unless $P10, rx925_fail
    rx925_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx925_pos = $P10."pos"()
    goto alt932_end
  alt932_1:
    set_addr $I10, alt932_2
    rx925_cur."!mark_push"(0, rx925_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx925_cur."!cursor_pos"(rx925_pos)
    $P10 = rx925_cur."routine_def"()
    unless $P10, rx925_fail
    rx925_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx925_pos = $P10."pos"()
    goto alt932_end
  alt932_2:
  # rx subrule "panic" subtype=method negate=
    rx925_cur."!cursor_pos"(rx925_pos)
    $P10 = rx925_cur."panic"("Malformed proto")
    unless $P10, rx925_fail
    rx925_pos = $P10."pos"()
  alt932_end:
.annotate 'line', 424
  # rx pass
    rx925_cur."!cursor_pass"(rx925_pos, "multi_declarator:sym<proto>")
    if_null rx925_debug, debug_781
    rx925_cur."!cursor_debug"("PASS", "multi_declarator:sym<proto>", " at pos=", rx925_pos)
  debug_781:
    .return (rx925_cur)
  rx925_restart:
.annotate 'line', 4
    if_null rx925_debug, debug_782
    rx925_cur."!cursor_debug"("NEXT", "multi_declarator:sym<proto>")
  debug_782:
  rx925_fail:
    (rx925_rep, rx925_pos, $I10, $P10) = rx925_cur."!mark_fail"(0)
    lt rx925_pos, -1, rx925_done
    eq rx925_pos, -1, rx925_fail
    jump $I10
  rx925_done:
    rx925_cur."!cursor_fail"()
    if_null rx925_debug, debug_783
    rx925_cur."!cursor_debug"("FAIL", "multi_declarator:sym<proto>")
  debug_783:
    .return (rx925_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<proto>"  :nsentry("!PREFIX__multi_declarator:sym<proto>") :subid("187_1300057348.719") :method
.annotate 'line', 4
    $P927 = self."!PREFIX__!subrule"("ws", "proto")
    new $P928, "ResizablePMCArray"
    push $P928, $P927
    .return ($P928)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<null>"  :subid("188_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 430
    new $P934, "Undef"
    .lex "$*MULTINESS", $P934
.annotate 'line', 4
    .local string rx935_tgt
    .local int rx935_pos
    .local int rx935_off
    .local int rx935_eos
    .local int rx935_rep
    .local pmc rx935_cur
    .local pmc rx935_debug
    (rx935_cur, rx935_pos, rx935_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx935_cur
    .local pmc match
    .lex "$/", match
    length rx935_eos, rx935_tgt
    gt rx935_pos, rx935_eos, rx935_done
    set rx935_off, 0
    lt rx935_pos, 2, rx935_start
    sub rx935_off, rx935_pos, 1
    substr rx935_tgt, rx935_tgt, rx935_off
  rx935_start:
    eq $I10, 1, rx935_restart
    if_null rx935_debug, debug_784
    rx935_cur."!cursor_debug"("START", "multi_declarator:sym<null>")
  debug_784:
    $I10 = self.'from'()
    ne $I10, -1, rxscan939_done
    goto rxscan939_scan
  rxscan939_loop:
    (rx935_pos) = rx935_cur."from"()
    inc rx935_pos
    rx935_cur."!cursor_from"(rx935_pos)
    ge rx935_pos, rx935_eos, rxscan939_done
  rxscan939_scan:
    set_addr $I10, rxscan939_loop
    rx935_cur."!mark_push"(0, rx935_pos, $I10)
  rxscan939_done:
.annotate 'line', 430
    rx935_cur."!cursor_pos"(rx935_pos)
    new $P940, "String"
    assign $P940, ""
    store_lex "$*MULTINESS", $P940
.annotate 'line', 431
  # rx subrule "declarator" subtype=capture negate=
    rx935_cur."!cursor_pos"(rx935_pos)
    $P10 = rx935_cur."declarator"()
    unless $P10, rx935_fail
    rx935_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx935_pos = $P10."pos"()
.annotate 'line', 429
  # rx pass
    rx935_cur."!cursor_pass"(rx935_pos, "multi_declarator:sym<null>")
    if_null rx935_debug, debug_785
    rx935_cur."!cursor_debug"("PASS", "multi_declarator:sym<null>", " at pos=", rx935_pos)
  debug_785:
    .return (rx935_cur)
  rx935_restart:
.annotate 'line', 4
    if_null rx935_debug, debug_786
    rx935_cur."!cursor_debug"("NEXT", "multi_declarator:sym<null>")
  debug_786:
  rx935_fail:
    (rx935_rep, rx935_pos, $I10, $P10) = rx935_cur."!mark_fail"(0)
    lt rx935_pos, -1, rx935_done
    eq rx935_pos, -1, rx935_fail
    jump $I10
  rx935_done:
    rx935_cur."!cursor_fail"()
    if_null rx935_debug, debug_787
    rx935_cur."!cursor_debug"("FAIL", "multi_declarator:sym<null>")
  debug_787:
    .return (rx935_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<null>"  :nsentry("!PREFIX__multi_declarator:sym<null>") :subid("189_1300057348.719") :method
.annotate 'line', 4
    $P937 = self."!PREFIX__!subrule"("declarator", "")
    new $P938, "ResizablePMCArray"
    push $P938, $P937
    .return ($P938)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "signature"  :subid("190_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P950 = "192_1300057348.719" 
    capture_lex $P950
    .local string rx942_tgt
    .local int rx942_pos
    .local int rx942_off
    .local int rx942_eos
    .local int rx942_rep
    .local pmc rx942_cur
    .local pmc rx942_debug
    (rx942_cur, rx942_pos, rx942_tgt, $I10) = self."!cursor_start"()
    rx942_cur."!cursor_caparray"("invocant", "parameter")
    .lex unicode:"$\x{a2}", rx942_cur
    .local pmc match
    .lex "$/", match
    length rx942_eos, rx942_tgt
    gt rx942_pos, rx942_eos, rx942_done
    set rx942_off, 0
    lt rx942_pos, 2, rx942_start
    sub rx942_off, rx942_pos, 1
    substr rx942_tgt, rx942_tgt, rx942_off
  rx942_start:
    eq $I10, 1, rx942_restart
    if_null rx942_debug, debug_788
    rx942_cur."!cursor_debug"("START", "signature")
  debug_788:
    $I10 = self.'from'()
    ne $I10, -1, rxscan945_done
    goto rxscan945_scan
  rxscan945_loop:
    (rx942_pos) = rx942_cur."from"()
    inc rx942_pos
    rx942_cur."!cursor_from"(rx942_pos)
    ge rx942_pos, rx942_eos, rxscan945_done
  rxscan945_scan:
    set_addr $I10, rxscan945_loop
    rx942_cur."!mark_push"(0, rx942_pos, $I10)
  rxscan945_done:
.annotate 'line', 435
  # rx rxquantr946 ** 0..1
    set_addr $I10, rxquantr946_done
    rx942_cur."!mark_push"(0, rx942_pos, $I10)
  rxquantr946_loop:
    rx942_cur."!cursor_pos"(rx942_pos)
    find_lex $P947, unicode:"$\x{a2}"
    $P948 = $P947."MATCH"()
    store_lex "$/", $P948
    .const 'Sub' $P950 = "192_1300057348.719" 
    capture_lex $P950
    $P952 = $P950()
    unless $P952, rx942_fail
  # rx subrule "ws" subtype=method negate=
    rx942_cur."!cursor_pos"(rx942_pos)
    $P10 = rx942_cur."ws"()
    unless $P10, rx942_fail
    rx942_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx942_cur."!cursor_pos"(rx942_pos)
    $P10 = rx942_cur."parameter"()
    unless $P10, rx942_fail
    rx942_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("invocant")
    rx942_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx942_cur."!cursor_pos"(rx942_pos)
    $P10 = rx942_cur."ws"()
    unless $P10, rx942_fail
    rx942_pos = $P10."pos"()
  # rx literal  ":"
    add $I11, rx942_pos, 1
    gt $I11, rx942_eos, rx942_fail
    sub $I11, rx942_pos, rx942_off
    ord $I11, rx942_tgt, $I11
    ne $I11, 58, rx942_fail
    add rx942_pos, 1
    set_addr $I10, rxquantr946_done
    (rx942_rep) = rx942_cur."!mark_commit"($I10)
  rxquantr946_done:
.annotate 'line', 436
  # rx rxquantr953 ** 0..1
    set_addr $I10, rxquantr953_done
    rx942_cur."!mark_push"(0, rx942_pos, $I10)
  rxquantr953_loop:
  # rx rxquantr954 ** 1..*
    set_addr $I10, rxquantr954_done
    rx942_cur."!mark_push"(0, -1, $I10)
  rxquantr954_loop:
  # rx subrule "ws" subtype=method negate=
    rx942_cur."!cursor_pos"(rx942_pos)
    $P10 = rx942_cur."ws"()
    unless $P10, rx942_fail
    rx942_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx942_cur."!cursor_pos"(rx942_pos)
    $P10 = rx942_cur."parameter"()
    unless $P10, rx942_fail
    rx942_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parameter")
    rx942_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx942_cur."!cursor_pos"(rx942_pos)
    $P10 = rx942_cur."ws"()
    unless $P10, rx942_fail
    rx942_pos = $P10."pos"()
    set_addr $I10, rxquantr954_done
    (rx942_rep) = rx942_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr954_done
    rx942_cur."!mark_push"(rx942_rep, rx942_pos, $I10)
  # rx literal  ","
    add $I11, rx942_pos, 1
    gt $I11, rx942_eos, rx942_fail
    sub $I11, rx942_pos, rx942_off
    ord $I11, rx942_tgt, $I11
    ne $I11, 44, rx942_fail
    add rx942_pos, 1
    goto rxquantr954_loop
  rxquantr954_done:
    set_addr $I10, rxquantr953_done
    (rx942_rep) = rx942_cur."!mark_commit"($I10)
  rxquantr953_done:
.annotate 'line', 434
  # rx pass
    rx942_cur."!cursor_pass"(rx942_pos, "signature")
    if_null rx942_debug, debug_791
    rx942_cur."!cursor_debug"("PASS", "signature", " at pos=", rx942_pos)
  debug_791:
    .return (rx942_cur)
  rx942_restart:
.annotate 'line', 4
    if_null rx942_debug, debug_792
    rx942_cur."!cursor_debug"("NEXT", "signature")
  debug_792:
  rx942_fail:
    (rx942_rep, rx942_pos, $I10, $P10) = rx942_cur."!mark_fail"(0)
    lt rx942_pos, -1, rx942_done
    eq rx942_pos, -1, rx942_fail
    jump $I10
  rx942_done:
    rx942_cur."!cursor_fail"()
    if_null rx942_debug, debug_793
    rx942_cur."!cursor_debug"("FAIL", "signature")
  debug_793:
    .return (rx942_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__signature"  :nsentry("!PREFIX__signature") :subid("191_1300057348.719") :method
.annotate 'line', 4
    new $P944, "ResizablePMCArray"
    push $P944, ""
    .return ($P944)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block949"  :anon :subid("192_1300057348.719") :outer("190_1300057348.719")
.annotate 'line', 435
    find_dynamic_lex $P951, "$*INVOCANT_OK"
    unless_null $P951, vivify_789
    get_hll_global $P951, "$INVOCANT_OK"
    unless_null $P951, vivify_790
    die "Contextual $*INVOCANT_OK not found"
  vivify_790:
  vivify_789:
    .return ($P951)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "parameter"  :subid("193_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx956_tgt
    .local int rx956_pos
    .local int rx956_off
    .local int rx956_eos
    .local int rx956_rep
    .local pmc rx956_cur
    .local pmc rx956_debug
    (rx956_cur, rx956_pos, rx956_tgt, $I10) = self."!cursor_start"()
    rx956_cur."!cursor_caparray"("typename", "definedness", "default_value")
    .lex unicode:"$\x{a2}", rx956_cur
    .local pmc match
    .lex "$/", match
    length rx956_eos, rx956_tgt
    gt rx956_pos, rx956_eos, rx956_done
    set rx956_off, 0
    lt rx956_pos, 2, rx956_start
    sub rx956_off, rx956_pos, 1
    substr rx956_tgt, rx956_tgt, rx956_off
  rx956_start:
    eq $I10, 1, rx956_restart
    if_null rx956_debug, debug_794
    rx956_cur."!cursor_debug"("START", "parameter")
  debug_794:
    $I10 = self.'from'()
    ne $I10, -1, rxscan959_done
    goto rxscan959_scan
  rxscan959_loop:
    (rx956_pos) = rx956_cur."from"()
    inc rx956_pos
    rx956_cur."!cursor_from"(rx956_pos)
    ge rx956_pos, rx956_eos, rxscan959_done
  rxscan959_scan:
    set_addr $I10, rxscan959_loop
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  rxscan959_done:
.annotate 'line', 440
  # rx rxquantr960 ** 0..*
    set_addr $I10, rxquantr960_done
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  rxquantr960_loop:
  # rx subrule "typename" subtype=capture negate=
    rx956_cur."!cursor_pos"(rx956_pos)
    $P10 = rx956_cur."typename"()
    unless $P10, rx956_fail
    rx956_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("typename")
    rx956_pos = $P10."pos"()
  # rx rxquantr961 ** 0..1
    set_addr $I10, rxquantr961_done
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  rxquantr961_loop:
  # rx literal  ":"
    add $I11, rx956_pos, 1
    gt $I11, rx956_eos, rx956_fail
    sub $I11, rx956_pos, rx956_off
    ord $I11, rx956_tgt, $I11
    ne $I11, 58, rx956_fail
    add rx956_pos, 1
  # rx subcapture "definedness"
    set_addr $I10, rxcap_962_fail
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx956_pos, rx956_eos, rx956_fail
    sub $I10, rx956_pos, rx956_off
    substr $S10, rx956_tgt, $I10, 1
    index $I11, "_DU", $S10
    lt $I11, 0, rx956_fail
    inc rx956_pos
    set_addr $I10, rxcap_962_fail
    ($I12, $I11) = rx956_cur."!mark_peek"($I10)
    rx956_cur."!cursor_pos"($I11)
    ($P10) = rx956_cur."!cursor_start"()
    $P10."!cursor_pass"(rx956_pos, "")
    rx956_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("definedness")
    goto rxcap_962_done
  rxcap_962_fail:
    goto rx956_fail
  rxcap_962_done:
    set_addr $I10, rxquantr961_done
    (rx956_rep) = rx956_cur."!mark_commit"($I10)
  rxquantr961_done:
  # rx subrule "ws" subtype=method negate=
    rx956_cur."!cursor_pos"(rx956_pos)
    $P10 = rx956_cur."ws"()
    unless $P10, rx956_fail
    rx956_pos = $P10."pos"()
    set_addr $I10, rxquantr960_done
    (rx956_rep) = rx956_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr960_done
    rx956_cur."!mark_push"(rx956_rep, rx956_pos, $I10)
    goto rxquantr960_loop
  rxquantr960_done:
  alt963_0:
.annotate 'line', 441
    set_addr $I10, alt963_1
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
.annotate 'line', 442
  # rx subcapture "quant"
    set_addr $I10, rxcap_964_fail
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  # rx literal  "*"
    add $I11, rx956_pos, 1
    gt $I11, rx956_eos, rx956_fail
    sub $I11, rx956_pos, rx956_off
    ord $I11, rx956_tgt, $I11
    ne $I11, 42, rx956_fail
    add rx956_pos, 1
    set_addr $I10, rxcap_964_fail
    ($I12, $I11) = rx956_cur."!mark_peek"($I10)
    rx956_cur."!cursor_pos"($I11)
    ($P10) = rx956_cur."!cursor_start"()
    $P10."!cursor_pass"(rx956_pos, "")
    rx956_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_964_done
  rxcap_964_fail:
    goto rx956_fail
  rxcap_964_done:
  # rx subrule "param_var" subtype=capture negate=
    rx956_cur."!cursor_pos"(rx956_pos)
    $P10 = rx956_cur."param_var"()
    unless $P10, rx956_fail
    rx956_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx956_pos = $P10."pos"()
    goto alt963_end
  alt963_1:
  alt965_0:
.annotate 'line', 443
    set_addr $I10, alt965_1
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  # rx subrule "param_var" subtype=capture negate=
    rx956_cur."!cursor_pos"(rx956_pos)
    $P10 = rx956_cur."param_var"()
    unless $P10, rx956_fail
    rx956_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx956_pos = $P10."pos"()
    goto alt965_end
  alt965_1:
  # rx subrule "named_param" subtype=capture negate=
    rx956_cur."!cursor_pos"(rx956_pos)
    $P10 = rx956_cur."named_param"()
    unless $P10, rx956_fail
    rx956_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("named_param")
    rx956_pos = $P10."pos"()
  alt965_end:
  # rx subcapture "quant"
    set_addr $I10, rxcap_967_fail
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  alt966_0:
    set_addr $I10, alt966_1
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  # rx literal  "?"
    add $I11, rx956_pos, 1
    gt $I11, rx956_eos, rx956_fail
    sub $I11, rx956_pos, rx956_off
    ord $I11, rx956_tgt, $I11
    ne $I11, 63, rx956_fail
    add rx956_pos, 1
    goto alt966_end
  alt966_1:
    set_addr $I10, alt966_2
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  # rx literal  "!"
    add $I11, rx956_pos, 1
    gt $I11, rx956_eos, rx956_fail
    sub $I11, rx956_pos, rx956_off
    ord $I11, rx956_tgt, $I11
    ne $I11, 33, rx956_fail
    add rx956_pos, 1
    goto alt966_end
  alt966_2:
  alt966_end:
    set_addr $I10, rxcap_967_fail
    ($I12, $I11) = rx956_cur."!mark_peek"($I10)
    rx956_cur."!cursor_pos"($I11)
    ($P10) = rx956_cur."!cursor_start"()
    $P10."!cursor_pass"(rx956_pos, "")
    rx956_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_967_done
  rxcap_967_fail:
    goto rx956_fail
  rxcap_967_done:
  alt963_end:
.annotate 'line', 445
  # rx rxquantr968 ** 0..1
    set_addr $I10, rxquantr968_done
    rx956_cur."!mark_push"(0, rx956_pos, $I10)
  rxquantr968_loop:
  # rx subrule "default_value" subtype=capture negate=
    rx956_cur."!cursor_pos"(rx956_pos)
    $P10 = rx956_cur."default_value"()
    unless $P10, rx956_fail
    goto rxsubrule969_pass
  rxsubrule969_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx956_fail
  rxsubrule969_pass:
    set_addr $I10, rxsubrule969_back
    rx956_cur."!mark_push"(0, rx956_pos, $I10, $P10)
    $P10."!cursor_names"("default_value")
    rx956_pos = $P10."pos"()
    set_addr $I10, rxquantr968_done
    (rx956_rep) = rx956_cur."!mark_commit"($I10)
  rxquantr968_done:
.annotate 'line', 439
  # rx pass
    rx956_cur."!cursor_pass"(rx956_pos, "parameter")
    if_null rx956_debug, debug_795
    rx956_cur."!cursor_debug"("PASS", "parameter", " at pos=", rx956_pos)
  debug_795:
    .return (rx956_cur)
  rx956_restart:
.annotate 'line', 4
    if_null rx956_debug, debug_796
    rx956_cur."!cursor_debug"("NEXT", "parameter")
  debug_796:
  rx956_fail:
    (rx956_rep, rx956_pos, $I10, $P10) = rx956_cur."!mark_fail"(0)
    lt rx956_pos, -1, rx956_done
    eq rx956_pos, -1, rx956_fail
    jump $I10
  rx956_done:
    rx956_cur."!cursor_fail"()
    if_null rx956_debug, debug_797
    rx956_cur."!cursor_debug"("FAIL", "parameter")
  debug_797:
    .return (rx956_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__parameter"  :nsentry("!PREFIX__parameter") :subid("194_1300057348.719") :method
.annotate 'line', 4
    new $P958, "ResizablePMCArray"
    push $P958, ""
    .return ($P958)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "param_var"  :subid("195_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx971_tgt
    .local int rx971_pos
    .local int rx971_off
    .local int rx971_eos
    .local int rx971_rep
    .local pmc rx971_cur
    .local pmc rx971_debug
    (rx971_cur, rx971_pos, rx971_tgt, $I10) = self."!cursor_start"()
    rx971_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx971_cur
    .local pmc match
    .lex "$/", match
    length rx971_eos, rx971_tgt
    gt rx971_pos, rx971_eos, rx971_done
    set rx971_off, 0
    lt rx971_pos, 2, rx971_start
    sub rx971_off, rx971_pos, 1
    substr rx971_tgt, rx971_tgt, rx971_off
  rx971_start:
    eq $I10, 1, rx971_restart
    if_null rx971_debug, debug_798
    rx971_cur."!cursor_debug"("START", "param_var")
  debug_798:
    $I10 = self.'from'()
    ne $I10, -1, rxscan975_done
    goto rxscan975_scan
  rxscan975_loop:
    (rx971_pos) = rx971_cur."from"()
    inc rx971_pos
    rx971_cur."!cursor_from"(rx971_pos)
    ge rx971_pos, rx971_eos, rxscan975_done
  rxscan975_scan:
    set_addr $I10, rxscan975_loop
    rx971_cur."!mark_push"(0, rx971_pos, $I10)
  rxscan975_done:
.annotate 'line', 449
  # rx subrule "sigil" subtype=capture negate=
    rx971_cur."!cursor_pos"(rx971_pos)
    $P10 = rx971_cur."sigil"()
    unless $P10, rx971_fail
    rx971_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx971_pos = $P10."pos"()
  # rx rxquantr976 ** 0..1
    set_addr $I10, rxquantr976_done
    rx971_cur."!mark_push"(0, rx971_pos, $I10)
  rxquantr976_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx971_cur."!cursor_pos"(rx971_pos)
    $P10 = rx971_cur."twigil"()
    unless $P10, rx971_fail
    goto rxsubrule977_pass
  rxsubrule977_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx971_fail
  rxsubrule977_pass:
    set_addr $I10, rxsubrule977_back
    rx971_cur."!mark_push"(0, rx971_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx971_pos = $P10."pos"()
    set_addr $I10, rxquantr976_done
    (rx971_rep) = rx971_cur."!mark_commit"($I10)
  rxquantr976_done:
  alt978_0:
.annotate 'line', 450
    set_addr $I10, alt978_1
    rx971_cur."!mark_push"(0, rx971_pos, $I10)
  # rx subrule "ident" subtype=capture negate=
    rx971_cur."!cursor_pos"(rx971_pos)
    $P10 = rx971_cur."ident"()
    unless $P10, rx971_fail
    rx971_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx971_pos = $P10."pos"()
    goto alt978_end
  alt978_1:
  # rx subcapture "name"
    set_addr $I10, rxcap_979_fail
    rx971_cur."!mark_push"(0, rx971_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx971_pos, rx971_eos, rx971_fail
    sub $I10, rx971_pos, rx971_off
    substr $S10, rx971_tgt, $I10, 1
    index $I11, "/!", $S10
    lt $I11, 0, rx971_fail
    inc rx971_pos
    set_addr $I10, rxcap_979_fail
    ($I12, $I11) = rx971_cur."!mark_peek"($I10)
    rx971_cur."!cursor_pos"($I11)
    ($P10) = rx971_cur."!cursor_start"()
    $P10."!cursor_pass"(rx971_pos, "")
    rx971_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    goto rxcap_979_done
  rxcap_979_fail:
    goto rx971_fail
  rxcap_979_done:
  alt978_end:
.annotate 'line', 448
  # rx pass
    rx971_cur."!cursor_pass"(rx971_pos, "param_var")
    if_null rx971_debug, debug_799
    rx971_cur."!cursor_debug"("PASS", "param_var", " at pos=", rx971_pos)
  debug_799:
    .return (rx971_cur)
  rx971_restart:
.annotate 'line', 4
    if_null rx971_debug, debug_800
    rx971_cur."!cursor_debug"("NEXT", "param_var")
  debug_800:
  rx971_fail:
    (rx971_rep, rx971_pos, $I10, $P10) = rx971_cur."!mark_fail"(0)
    lt rx971_pos, -1, rx971_done
    eq rx971_pos, -1, rx971_fail
    jump $I10
  rx971_done:
    rx971_cur."!cursor_fail"()
    if_null rx971_debug, debug_801
    rx971_cur."!cursor_debug"("FAIL", "param_var")
  debug_801:
    .return (rx971_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__param_var"  :nsentry("!PREFIX__param_var") :subid("196_1300057348.719") :method
.annotate 'line', 4
    $P973 = self."!PREFIX__!subrule"("sigil", "")
    new $P974, "ResizablePMCArray"
    push $P974, $P973
    .return ($P974)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "named_param"  :subid("197_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_debug
    (rx981_cur, rx981_pos, rx981_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx981_cur
    .local pmc match
    .lex "$/", match
    length rx981_eos, rx981_tgt
    gt rx981_pos, rx981_eos, rx981_done
    set rx981_off, 0
    lt rx981_pos, 2, rx981_start
    sub rx981_off, rx981_pos, 1
    substr rx981_tgt, rx981_tgt, rx981_off
  rx981_start:
    eq $I10, 1, rx981_restart
    if_null rx981_debug, debug_802
    rx981_cur."!cursor_debug"("START", "named_param")
  debug_802:
    $I10 = self.'from'()
    ne $I10, -1, rxscan985_done
    goto rxscan985_scan
  rxscan985_loop:
    (rx981_pos) = rx981_cur."from"()
    inc rx981_pos
    rx981_cur."!cursor_from"(rx981_pos)
    ge rx981_pos, rx981_eos, rxscan985_done
  rxscan985_scan:
    set_addr $I10, rxscan985_loop
    rx981_cur."!mark_push"(0, rx981_pos, $I10)
  rxscan985_done:
.annotate 'line', 454
  # rx literal  ":"
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail
    sub $I11, rx981_pos, rx981_off
    ord $I11, rx981_tgt, $I11
    ne $I11, 58, rx981_fail
    add rx981_pos, 1
  # rx subrule "param_var" subtype=capture negate=
    rx981_cur."!cursor_pos"(rx981_pos)
    $P10 = rx981_cur."param_var"()
    unless $P10, rx981_fail
    rx981_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx981_pos = $P10."pos"()
.annotate 'line', 453
  # rx pass
    rx981_cur."!cursor_pass"(rx981_pos, "named_param")
    if_null rx981_debug, debug_803
    rx981_cur."!cursor_debug"("PASS", "named_param", " at pos=", rx981_pos)
  debug_803:
    .return (rx981_cur)
  rx981_restart:
.annotate 'line', 4
    if_null rx981_debug, debug_804
    rx981_cur."!cursor_debug"("NEXT", "named_param")
  debug_804:
  rx981_fail:
    (rx981_rep, rx981_pos, $I10, $P10) = rx981_cur."!mark_fail"(0)
    lt rx981_pos, -1, rx981_done
    eq rx981_pos, -1, rx981_fail
    jump $I10
  rx981_done:
    rx981_cur."!cursor_fail"()
    if_null rx981_debug, debug_805
    rx981_cur."!cursor_debug"("FAIL", "named_param")
  debug_805:
    .return (rx981_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__named_param"  :nsentry("!PREFIX__named_param") :subid("198_1300057348.719") :method
.annotate 'line', 4
    $P983 = self."!PREFIX__!subrule"("param_var", ":")
    new $P984, "ResizablePMCArray"
    push $P984, $P983
    .return ($P984)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "default_value"  :subid("199_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx987_tgt
    .local int rx987_pos
    .local int rx987_off
    .local int rx987_eos
    .local int rx987_rep
    .local pmc rx987_cur
    .local pmc rx987_debug
    (rx987_cur, rx987_pos, rx987_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx987_cur
    .local pmc match
    .lex "$/", match
    length rx987_eos, rx987_tgt
    gt rx987_pos, rx987_eos, rx987_done
    set rx987_off, 0
    lt rx987_pos, 2, rx987_start
    sub rx987_off, rx987_pos, 1
    substr rx987_tgt, rx987_tgt, rx987_off
  rx987_start:
    eq $I10, 1, rx987_restart
    if_null rx987_debug, debug_806
    rx987_cur."!cursor_debug"("START", "default_value")
  debug_806:
    $I10 = self.'from'()
    ne $I10, -1, rxscan991_done
    goto rxscan991_scan
  rxscan991_loop:
    (rx987_pos) = rx987_cur."from"()
    inc rx987_pos
    rx987_cur."!cursor_from"(rx987_pos)
    ge rx987_pos, rx987_eos, rxscan991_done
  rxscan991_scan:
    set_addr $I10, rxscan991_loop
    rx987_cur."!mark_push"(0, rx987_pos, $I10)
  rxscan991_done:
.annotate 'line', 457
  # rx subrule "ws" subtype=method negate=
    rx987_cur."!cursor_pos"(rx987_pos)
    $P10 = rx987_cur."ws"()
    unless $P10, rx987_fail
    rx987_pos = $P10."pos"()
  # rx literal  "="
    add $I11, rx987_pos, 1
    gt $I11, rx987_eos, rx987_fail
    sub $I11, rx987_pos, rx987_off
    ord $I11, rx987_tgt, $I11
    ne $I11, 61, rx987_fail
    add rx987_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx987_cur."!cursor_pos"(rx987_pos)
    $P10 = rx987_cur."ws"()
    unless $P10, rx987_fail
    rx987_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx987_cur."!cursor_pos"(rx987_pos)
    $P10 = rx987_cur."EXPR"("i=")
    unless $P10, rx987_fail
    rx987_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx987_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx987_cur."!cursor_pos"(rx987_pos)
    $P10 = rx987_cur."ws"()
    unless $P10, rx987_fail
    rx987_pos = $P10."pos"()
  # rx pass
    rx987_cur."!cursor_pass"(rx987_pos, "default_value")
    if_null rx987_debug, debug_807
    rx987_cur."!cursor_debug"("PASS", "default_value", " at pos=", rx987_pos)
  debug_807:
    .return (rx987_cur)
  rx987_restart:
.annotate 'line', 4
    if_null rx987_debug, debug_808
    rx987_cur."!cursor_debug"("NEXT", "default_value")
  debug_808:
  rx987_fail:
    (rx987_rep, rx987_pos, $I10, $P10) = rx987_cur."!mark_fail"(0)
    lt rx987_pos, -1, rx987_done
    eq rx987_pos, -1, rx987_fail
    jump $I10
  rx987_done:
    rx987_cur."!cursor_fail"()
    if_null rx987_debug, debug_809
    rx987_cur."!cursor_debug"("FAIL", "default_value")
  debug_809:
    .return (rx987_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__default_value"  :nsentry("!PREFIX__default_value") :subid("200_1300057348.719") :method
.annotate 'line', 4
    $P989 = self."!PREFIX__!subrule"("ws", "")
    new $P990, "ResizablePMCArray"
    push $P990, $P989
    .return ($P990)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait"  :subid("201_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx996_tgt
    .local int rx996_pos
    .local int rx996_off
    .local int rx996_eos
    .local int rx996_rep
    .local pmc rx996_cur
    .local pmc rx996_debug
    (rx996_cur, rx996_pos, rx996_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx996_cur
    .local pmc match
    .lex "$/", match
    length rx996_eos, rx996_tgt
    gt rx996_pos, rx996_eos, rx996_done
    set rx996_off, 0
    lt rx996_pos, 2, rx996_start
    sub rx996_off, rx996_pos, 1
    substr rx996_tgt, rx996_tgt, rx996_off
  rx996_start:
    eq $I10, 1, rx996_restart
    if_null rx996_debug, debug_810
    rx996_cur."!cursor_debug"("START", "trait")
  debug_810:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1000_done
    goto rxscan1000_scan
  rxscan1000_loop:
    (rx996_pos) = rx996_cur."from"()
    inc rx996_pos
    rx996_cur."!cursor_from"(rx996_pos)
    ge rx996_pos, rx996_eos, rxscan1000_done
  rxscan1000_scan:
    set_addr $I10, rxscan1000_loop
    rx996_cur."!mark_push"(0, rx996_pos, $I10)
  rxscan1000_done:
.annotate 'line', 459
  # rx subrule "ws" subtype=method negate=
    rx996_cur."!cursor_pos"(rx996_pos)
    $P10 = rx996_cur."ws"()
    unless $P10, rx996_fail
    rx996_pos = $P10."pos"()
  # rx subrule "trait_mod" subtype=capture negate=
    rx996_cur."!cursor_pos"(rx996_pos)
    $P10 = rx996_cur."trait_mod"()
    unless $P10, rx996_fail
    rx996_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("trait_mod")
    rx996_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx996_cur."!cursor_pos"(rx996_pos)
    $P10 = rx996_cur."ws"()
    unless $P10, rx996_fail
    rx996_pos = $P10."pos"()
  # rx pass
    rx996_cur."!cursor_pass"(rx996_pos, "trait")
    if_null rx996_debug, debug_811
    rx996_cur."!cursor_debug"("PASS", "trait", " at pos=", rx996_pos)
  debug_811:
    .return (rx996_cur)
  rx996_restart:
.annotate 'line', 4
    if_null rx996_debug, debug_812
    rx996_cur."!cursor_debug"("NEXT", "trait")
  debug_812:
  rx996_fail:
    (rx996_rep, rx996_pos, $I10, $P10) = rx996_cur."!mark_fail"(0)
    lt rx996_pos, -1, rx996_done
    eq rx996_pos, -1, rx996_fail
    jump $I10
  rx996_done:
    rx996_cur."!cursor_fail"()
    if_null rx996_debug, debug_813
    rx996_cur."!cursor_debug"("FAIL", "trait")
  debug_813:
    .return (rx996_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait"  :nsentry("!PREFIX__trait") :subid("202_1300057348.719") :method
.annotate 'line', 4
    $P998 = self."!PREFIX__!subrule"("ws", "")
    new $P999, "ResizablePMCArray"
    push $P999, $P998
    .return ($P999)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod"  :subid("203_1300057348.719")
    .param pmc param_1004
.annotate 'line', 461
    .lex "self", param_1004
    $P1005 = param_1004."!protoregex"("trait_mod")
    .return ($P1005)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod"  :subid("204_1300057348.719")
    .param pmc param_1007
.annotate 'line', 461
    .lex "self", param_1007
    $P1008 = param_1007."!PREFIX__!protoregex"("trait_mod")
    .return ($P1008)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod:sym<is>"  :subid("205_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1010_tgt
    .local int rx1010_pos
    .local int rx1010_off
    .local int rx1010_eos
    .local int rx1010_rep
    .local pmc rx1010_cur
    .local pmc rx1010_debug
    (rx1010_cur, rx1010_pos, rx1010_tgt, $I10) = self."!cursor_start"()
    rx1010_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx1010_cur
    .local pmc match
    .lex "$/", match
    length rx1010_eos, rx1010_tgt
    gt rx1010_pos, rx1010_eos, rx1010_done
    set rx1010_off, 0
    lt rx1010_pos, 2, rx1010_start
    sub rx1010_off, rx1010_pos, 1
    substr rx1010_tgt, rx1010_tgt, rx1010_off
  rx1010_start:
    eq $I10, 1, rx1010_restart
    if_null rx1010_debug, debug_814
    rx1010_cur."!cursor_debug"("START", "trait_mod:sym<is>")
  debug_814:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1014_done
    goto rxscan1014_scan
  rxscan1014_loop:
    (rx1010_pos) = rx1010_cur."from"()
    inc rx1010_pos
    rx1010_cur."!cursor_from"(rx1010_pos)
    ge rx1010_pos, rx1010_eos, rxscan1014_done
  rxscan1014_scan:
    set_addr $I10, rxscan1014_loop
    rx1010_cur."!mark_push"(0, rx1010_pos, $I10)
  rxscan1014_done:
.annotate 'line', 462
  # rx subcapture "sym"
    set_addr $I10, rxcap_1015_fail
    rx1010_cur."!mark_push"(0, rx1010_pos, $I10)
  # rx literal  "is"
    add $I11, rx1010_pos, 2
    gt $I11, rx1010_eos, rx1010_fail
    sub $I11, rx1010_pos, rx1010_off
    substr $S10, rx1010_tgt, $I11, 2
    ne $S10, "is", rx1010_fail
    add rx1010_pos, 2
    set_addr $I10, rxcap_1015_fail
    ($I12, $I11) = rx1010_cur."!mark_peek"($I10)
    rx1010_cur."!cursor_pos"($I11)
    ($P10) = rx1010_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1010_pos, "")
    rx1010_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1015_done
  rxcap_1015_fail:
    goto rx1010_fail
  rxcap_1015_done:
  # rx subrule "ws" subtype=method negate=
    rx1010_cur."!cursor_pos"(rx1010_pos)
    $P10 = rx1010_cur."ws"()
    unless $P10, rx1010_fail
    rx1010_pos = $P10."pos"()
  # rx subrule "deflongname" subtype=capture negate=
    rx1010_cur."!cursor_pos"(rx1010_pos)
    $P10 = rx1010_cur."deflongname"()
    unless $P10, rx1010_fail
    rx1010_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx1010_pos = $P10."pos"()
  # rx rxquantr1017 ** 0..1
    set_addr $I10, rxquantr1017_done
    rx1010_cur."!mark_push"(0, rx1010_pos, $I10)
  rxquantr1017_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx1010_cur."!cursor_pos"(rx1010_pos)
    $P10 = rx1010_cur."circumfix"()
    unless $P10, rx1010_fail
    goto rxsubrule1018_pass
  rxsubrule1018_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1010_fail
  rxsubrule1018_pass:
    set_addr $I10, rxsubrule1018_back
    rx1010_cur."!mark_push"(0, rx1010_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx1010_pos = $P10."pos"()
    set_addr $I10, rxquantr1017_done
    (rx1010_rep) = rx1010_cur."!mark_commit"($I10)
  rxquantr1017_done:
  # rx subrule "ws" subtype=method negate=
    rx1010_cur."!cursor_pos"(rx1010_pos)
    $P10 = rx1010_cur."ws"()
    unless $P10, rx1010_fail
    rx1010_pos = $P10."pos"()
  # rx pass
    rx1010_cur."!cursor_pass"(rx1010_pos, "trait_mod:sym<is>")
    if_null rx1010_debug, debug_815
    rx1010_cur."!cursor_debug"("PASS", "trait_mod:sym<is>", " at pos=", rx1010_pos)
  debug_815:
    .return (rx1010_cur)
  rx1010_restart:
.annotate 'line', 4
    if_null rx1010_debug, debug_816
    rx1010_cur."!cursor_debug"("NEXT", "trait_mod:sym<is>")
  debug_816:
  rx1010_fail:
    (rx1010_rep, rx1010_pos, $I10, $P10) = rx1010_cur."!mark_fail"(0)
    lt rx1010_pos, -1, rx1010_done
    eq rx1010_pos, -1, rx1010_fail
    jump $I10
  rx1010_done:
    rx1010_cur."!cursor_fail"()
    if_null rx1010_debug, debug_817
    rx1010_cur."!cursor_debug"("FAIL", "trait_mod:sym<is>")
  debug_817:
    .return (rx1010_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod:sym<is>"  :nsentry("!PREFIX__trait_mod:sym<is>") :subid("206_1300057348.719") :method
.annotate 'line', 4
    $P1012 = self."!PREFIX__!subrule"("ws", "is")
    new $P1013, "ResizablePMCArray"
    push $P1013, $P1012
    .return ($P1013)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "regex_declarator"  :subid("207_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1021_tgt
    .local int rx1021_pos
    .local int rx1021_off
    .local int rx1021_eos
    .local int rx1021_rep
    .local pmc rx1021_cur
    .local pmc rx1021_debug
    (rx1021_cur, rx1021_pos, rx1021_tgt, $I10) = self."!cursor_start"()
    rx1021_cur."!cursor_caparray"("signature")
    .lex unicode:"$\x{a2}", rx1021_cur
    .local pmc match
    .lex "$/", match
    length rx1021_eos, rx1021_tgt
    gt rx1021_pos, rx1021_eos, rx1021_done
    set rx1021_off, 0
    lt rx1021_pos, 2, rx1021_start
    sub rx1021_off, rx1021_pos, 1
    substr rx1021_tgt, rx1021_tgt, rx1021_off
  rx1021_start:
    eq $I10, 1, rx1021_restart
    if_null rx1021_debug, debug_818
    rx1021_cur."!cursor_debug"("START", "regex_declarator")
  debug_818:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1025_done
    goto rxscan1025_scan
  rxscan1025_loop:
    (rx1021_pos) = rx1021_cur."from"()
    inc rx1021_pos
    rx1021_cur."!cursor_from"(rx1021_pos)
    ge rx1021_pos, rx1021_eos, rxscan1025_done
  rxscan1025_scan:
    set_addr $I10, rxscan1025_loop
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
  rxscan1025_done:
.annotate 'line', 464
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  alt1027_0:
.annotate 'line', 465
    set_addr $I10, alt1027_1
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
.annotate 'line', 466
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx subcapture "proto"
    set_addr $I10, rxcap_1029_fail
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
  # rx literal  "proto"
    add $I11, rx1021_pos, 5
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 5
    ne $S10, "proto", rx1021_fail
    add rx1021_pos, 5
    set_addr $I10, rxcap_1029_fail
    ($I12, $I11) = rx1021_cur."!mark_peek"($I10)
    rx1021_cur."!cursor_pos"($I11)
    ($P10) = rx1021_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1021_pos, "")
    rx1021_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("proto")
    goto rxcap_1029_done
  rxcap_1029_fail:
    goto rx1021_fail
  rxcap_1029_done:
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  alt1031_0:
    set_addr $I10, alt1031_1
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
  # rx literal  "regex"
    add $I11, rx1021_pos, 5
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 5
    ne $S10, "regex", rx1021_fail
    add rx1021_pos, 5
    goto alt1031_end
  alt1031_1:
    set_addr $I10, alt1031_2
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
  # rx literal  "token"
    add $I11, rx1021_pos, 5
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 5
    ne $S10, "token", rx1021_fail
    add rx1021_pos, 5
    goto alt1031_end
  alt1031_2:
  # rx literal  "rule"
    add $I11, rx1021_pos, 4
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 4
    ne $S10, "rule", rx1021_fail
    add rx1021_pos, 4
  alt1031_end:
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
.annotate 'line', 467
  # rx subrule "deflongname" subtype=capture negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."deflongname"()
    unless $P10, rx1021_fail
    rx1021_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1021_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  alt1034_0:
.annotate 'line', 468
    set_addr $I10, alt1034_1
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
.annotate 'line', 469
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx1021_pos, 1
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    ord $I11, rx1021_tgt, $I11
    ne $I11, 123, rx1021_fail
    add rx1021_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx literal  "<...>"
    add $I11, rx1021_pos, 5
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 5
    ne $S10, "<...>", rx1021_fail
    add rx1021_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1021_pos, 1
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    ord $I11, rx1021_tgt, $I11
    ne $I11, 125, rx1021_fail
    add rx1021_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ENDSTMT"()
    unless $P10, rx1021_fail
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
    goto alt1034_end
  alt1034_1:
    set_addr $I10, alt1034_2
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
.annotate 'line', 470
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx1021_pos, 1
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    ord $I11, rx1021_tgt, $I11
    ne $I11, 123, rx1021_fail
    add rx1021_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx literal  "<*>"
    add $I11, rx1021_pos, 3
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 3
    ne $S10, "<*>", rx1021_fail
    add rx1021_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1021_pos, 1
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    ord $I11, rx1021_tgt, $I11
    ne $I11, 125, rx1021_fail
    add rx1021_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ENDSTMT"()
    unless $P10, rx1021_fail
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
    goto alt1034_end
  alt1034_2:
.annotate 'line', 471
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."panic"("Proto regex body must be <*> (or <...>, which is deprecated)")
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  alt1034_end:
.annotate 'line', 472
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
.annotate 'line', 466
    goto alt1027_end
  alt1027_1:
.annotate 'line', 473
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx subcapture "sym"
    set_addr $I10, rxcap_1048_fail
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
  alt1047_0:
    set_addr $I10, alt1047_1
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
  # rx literal  "regex"
    add $I11, rx1021_pos, 5
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 5
    ne $S10, "regex", rx1021_fail
    add rx1021_pos, 5
    goto alt1047_end
  alt1047_1:
    set_addr $I10, alt1047_2
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
  # rx literal  "token"
    add $I11, rx1021_pos, 5
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 5
    ne $S10, "token", rx1021_fail
    add rx1021_pos, 5
    goto alt1047_end
  alt1047_2:
  # rx literal  "rule"
    add $I11, rx1021_pos, 4
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    substr $S10, rx1021_tgt, $I11, 4
    ne $S10, "rule", rx1021_fail
    add rx1021_pos, 4
  alt1047_end:
    set_addr $I10, rxcap_1048_fail
    ($I12, $I11) = rx1021_cur."!mark_peek"($I10)
    rx1021_cur."!cursor_pos"($I11)
    ($P10) = rx1021_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1021_pos, "")
    rx1021_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1048_done
  rxcap_1048_fail:
    goto rx1021_fail
  rxcap_1048_done:
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
.annotate 'line', 474
  # rx subrule "deflongname" subtype=capture negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."deflongname"()
    unless $P10, rx1021_fail
    rx1021_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1021_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
.annotate 'line', 475
  # rx subrule "newpad" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."newpad"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
.annotate 'line', 476
  # rx rxquantr1052 ** 0..1
    set_addr $I10, rxquantr1052_done
    rx1021_cur."!mark_push"(0, rx1021_pos, $I10)
  rxquantr1052_loop:
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx1021_pos, 1
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    ord $I11, rx1021_tgt, $I11
    ne $I11, 40, rx1021_fail
    add rx1021_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."signature"()
    unless $P10, rx1021_fail
    rx1021_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1021_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1021_pos, 1
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    ord $I11, rx1021_tgt, $I11
    ne $I11, 41, rx1021_fail
    add rx1021_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
    set_addr $I10, rxquantr1052_done
    (rx1021_rep) = rx1021_cur."!mark_commit"($I10)
  rxquantr1052_done:
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
.annotate 'line', 477
  # rx reduce name="regex_declarator" key="open"
    rx1021_cur."!cursor_pos"(rx1021_pos)
    rx1021_cur."!reduce"("regex_declarator", "open")
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
.annotate 'line', 478
  # rx literal  "{"
    add $I11, rx1021_pos, 1
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    ord $I11, rx1021_tgt, $I11
    ne $I11, 123, rx1021_fail
    add rx1021_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."LANG"("Regex", "nibbler")
    unless $P10, rx1021_fail
    rx1021_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx1021_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1021_pos, 1
    gt $I11, rx1021_eos, rx1021_fail
    sub $I11, rx1021_pos, rx1021_off
    ord $I11, rx1021_tgt, $I11
    ne $I11, 125, rx1021_fail
    add rx1021_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ENDSTMT"()
    unless $P10, rx1021_fail
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
  alt1027_end:
.annotate 'line', 479
  # rx subrule "ws" subtype=method negate=
    rx1021_cur."!cursor_pos"(rx1021_pos)
    $P10 = rx1021_cur."ws"()
    unless $P10, rx1021_fail
    rx1021_pos = $P10."pos"()
.annotate 'line', 464
  # rx pass
    rx1021_cur."!cursor_pass"(rx1021_pos, "regex_declarator")
    if_null rx1021_debug, debug_819
    rx1021_cur."!cursor_debug"("PASS", "regex_declarator", " at pos=", rx1021_pos)
  debug_819:
    .return (rx1021_cur)
  rx1021_restart:
.annotate 'line', 4
    if_null rx1021_debug, debug_820
    rx1021_cur."!cursor_debug"("NEXT", "regex_declarator")
  debug_820:
  rx1021_fail:
    (rx1021_rep, rx1021_pos, $I10, $P10) = rx1021_cur."!mark_fail"(0)
    lt rx1021_pos, -1, rx1021_done
    eq rx1021_pos, -1, rx1021_fail
    jump $I10
  rx1021_done:
    rx1021_cur."!cursor_fail"()
    if_null rx1021_debug, debug_821
    rx1021_cur."!cursor_debug"("FAIL", "regex_declarator")
  debug_821:
    .return (rx1021_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__regex_declarator"  :nsentry("!PREFIX__regex_declarator") :subid("208_1300057348.719") :method
.annotate 'line', 4
    $P1023 = self."!PREFIX__!subrule"("ws", "")
    new $P1024, "ResizablePMCArray"
    push $P1024, $P1023
    .return ($P1024)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "dotty"  :subid("209_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1062_tgt
    .local int rx1062_pos
    .local int rx1062_off
    .local int rx1062_eos
    .local int rx1062_rep
    .local pmc rx1062_cur
    .local pmc rx1062_debug
    (rx1062_cur, rx1062_pos, rx1062_tgt, $I10) = self."!cursor_start"()
    rx1062_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx1062_cur
    .local pmc match
    .lex "$/", match
    length rx1062_eos, rx1062_tgt
    gt rx1062_pos, rx1062_eos, rx1062_done
    set rx1062_off, 0
    lt rx1062_pos, 2, rx1062_start
    sub rx1062_off, rx1062_pos, 1
    substr rx1062_tgt, rx1062_tgt, rx1062_off
  rx1062_start:
    eq $I10, 1, rx1062_restart
    if_null rx1062_debug, debug_822
    rx1062_cur."!cursor_debug"("START", "dotty")
  debug_822:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1066_done
    goto rxscan1066_scan
  rxscan1066_loop:
    (rx1062_pos) = rx1062_cur."from"()
    inc rx1062_pos
    rx1062_cur."!cursor_from"(rx1062_pos)
    ge rx1062_pos, rx1062_eos, rxscan1066_done
  rxscan1066_scan:
    set_addr $I10, rxscan1066_loop
    rx1062_cur."!mark_push"(0, rx1062_pos, $I10)
  rxscan1066_done:
.annotate 'line', 483
  # rx literal  "."
    add $I11, rx1062_pos, 1
    gt $I11, rx1062_eos, rx1062_fail
    sub $I11, rx1062_pos, rx1062_off
    ord $I11, rx1062_tgt, $I11
    ne $I11, 46, rx1062_fail
    add rx1062_pos, 1
  alt1067_0:
.annotate 'line', 484
    set_addr $I10, alt1067_1
    rx1062_cur."!mark_push"(0, rx1062_pos, $I10)
  # rx subrule "deflongname" subtype=capture negate=
    rx1062_cur."!cursor_pos"(rx1062_pos)
    $P10 = rx1062_cur."deflongname"()
    unless $P10, rx1062_fail
    rx1062_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname=deflongname")
    rx1062_pos = $P10."pos"()
    goto alt1067_end
  alt1067_1:
.annotate 'line', 485
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1062_pos, rx1062_off
    substr $S10, rx1062_tgt, $I10, 1
    index $I11, "'\"", $S10
    lt $I11, 0, rx1062_fail
  # rx subrule "quote" subtype=capture negate=
    rx1062_cur."!cursor_pos"(rx1062_pos)
    $P10 = rx1062_cur."quote"()
    unless $P10, rx1062_fail
    rx1062_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx1062_pos = $P10."pos"()
  alt1068_0:
.annotate 'line', 486
    set_addr $I10, alt1068_1
    rx1062_cur."!mark_push"(0, rx1062_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1062_pos, rx1062_off
    substr $S10, rx1062_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx1062_fail
    goto alt1068_end
  alt1068_1:
  # rx subrule "panic" subtype=method negate=
    rx1062_cur."!cursor_pos"(rx1062_pos)
    $P10 = rx1062_cur."panic"("Quoted method name requires parenthesized arguments")
    unless $P10, rx1062_fail
    rx1062_pos = $P10."pos"()
  alt1068_end:
  alt1067_end:
.annotate 'line', 492
  # rx rxquantr1069 ** 0..1
    set_addr $I10, rxquantr1069_done
    rx1062_cur."!mark_push"(0, rx1062_pos, $I10)
  rxquantr1069_loop:
  alt1070_0:
.annotate 'line', 489
    set_addr $I10, alt1070_1
    rx1062_cur."!mark_push"(0, rx1062_pos, $I10)
.annotate 'line', 490
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1062_pos, rx1062_off
    substr $S10, rx1062_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx1062_fail
  # rx subrule "args" subtype=capture negate=
    rx1062_cur."!cursor_pos"(rx1062_pos)
    $P10 = rx1062_cur."args"()
    unless $P10, rx1062_fail
    rx1062_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx1062_pos = $P10."pos"()
    goto alt1070_end
  alt1070_1:
.annotate 'line', 491
  # rx literal  ":"
    add $I11, rx1062_pos, 1
    gt $I11, rx1062_eos, rx1062_fail
    sub $I11, rx1062_pos, rx1062_off
    ord $I11, rx1062_tgt, $I11
    ne $I11, 58, rx1062_fail
    add rx1062_pos, 1
  # rx charclass s
    ge rx1062_pos, rx1062_eos, rx1062_fail
    sub $I10, rx1062_pos, rx1062_off
    is_cclass $I11, 32, rx1062_tgt, $I10
    unless $I11, rx1062_fail
    inc rx1062_pos
  # rx subrule "arglist" subtype=capture negate=
    rx1062_cur."!cursor_pos"(rx1062_pos)
    $P10 = rx1062_cur."arglist"()
    unless $P10, rx1062_fail
    rx1062_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx1062_pos = $P10."pos"()
  alt1070_end:
.annotate 'line', 492
    set_addr $I10, rxquantr1069_done
    (rx1062_rep) = rx1062_cur."!mark_commit"($I10)
  rxquantr1069_done:
.annotate 'line', 482
  # rx pass
    rx1062_cur."!cursor_pass"(rx1062_pos, "dotty")
    if_null rx1062_debug, debug_823
    rx1062_cur."!cursor_debug"("PASS", "dotty", " at pos=", rx1062_pos)
  debug_823:
    .return (rx1062_cur)
  rx1062_restart:
.annotate 'line', 4
    if_null rx1062_debug, debug_824
    rx1062_cur."!cursor_debug"("NEXT", "dotty")
  debug_824:
  rx1062_fail:
    (rx1062_rep, rx1062_pos, $I10, $P10) = rx1062_cur."!mark_fail"(0)
    lt rx1062_pos, -1, rx1062_done
    eq rx1062_pos, -1, rx1062_fail
    jump $I10
  rx1062_done:
    rx1062_cur."!cursor_fail"()
    if_null rx1062_debug, debug_825
    rx1062_cur."!cursor_debug"("FAIL", "dotty")
  debug_825:
    .return (rx1062_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__dotty"  :nsentry("!PREFIX__dotty") :subid("210_1300057348.719") :method
.annotate 'line', 4
    $P1064 = self."!PREFIX__!subrule"("deflongname", ".")
    new $P1065, "ResizablePMCArray"
    push $P1065, "'"
    push $P1065, "\""
    push $P1065, $P1064
    .return ($P1065)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term"  :subid("211_1300057348.719")
    .param pmc param_1072
.annotate 'line', 496
    .lex "self", param_1072
    $P1073 = param_1072."!protoregex"("term")
    .return ($P1073)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term"  :subid("212_1300057348.719")
    .param pmc param_1075
.annotate 'line', 496
    .lex "self", param_1075
    $P1076 = param_1075."!PREFIX__!protoregex"("term")
    .return ($P1076)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<self>"  :subid("213_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1078_tgt
    .local int rx1078_pos
    .local int rx1078_off
    .local int rx1078_eos
    .local int rx1078_rep
    .local pmc rx1078_cur
    .local pmc rx1078_debug
    (rx1078_cur, rx1078_pos, rx1078_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1078_cur
    .local pmc match
    .lex "$/", match
    length rx1078_eos, rx1078_tgt
    gt rx1078_pos, rx1078_eos, rx1078_done
    set rx1078_off, 0
    lt rx1078_pos, 2, rx1078_start
    sub rx1078_off, rx1078_pos, 1
    substr rx1078_tgt, rx1078_tgt, rx1078_off
  rx1078_start:
    eq $I10, 1, rx1078_restart
    if_null rx1078_debug, debug_826
    rx1078_cur."!cursor_debug"("START", "term:sym<self>")
  debug_826:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1081_done
    goto rxscan1081_scan
  rxscan1081_loop:
    (rx1078_pos) = rx1078_cur."from"()
    inc rx1078_pos
    rx1078_cur."!cursor_from"(rx1078_pos)
    ge rx1078_pos, rx1078_eos, rxscan1081_done
  rxscan1081_scan:
    set_addr $I10, rxscan1081_loop
    rx1078_cur."!mark_push"(0, rx1078_pos, $I10)
  rxscan1081_done:
.annotate 'line', 498
  # rx subcapture "sym"
    set_addr $I10, rxcap_1082_fail
    rx1078_cur."!mark_push"(0, rx1078_pos, $I10)
  # rx literal  "self"
    add $I11, rx1078_pos, 4
    gt $I11, rx1078_eos, rx1078_fail
    sub $I11, rx1078_pos, rx1078_off
    substr $S10, rx1078_tgt, $I11, 4
    ne $S10, "self", rx1078_fail
    add rx1078_pos, 4
    set_addr $I10, rxcap_1082_fail
    ($I12, $I11) = rx1078_cur."!mark_peek"($I10)
    rx1078_cur."!cursor_pos"($I11)
    ($P10) = rx1078_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1078_pos, "")
    rx1078_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1082_done
  rxcap_1082_fail:
    goto rx1078_fail
  rxcap_1082_done:
  # rxanchor rwb
    le rx1078_pos, 0, rx1078_fail
    sub $I10, rx1078_pos, rx1078_off
    is_cclass $I11, 8192, rx1078_tgt, $I10
    if $I11, rx1078_fail
    dec $I10
    is_cclass $I11, 8192, rx1078_tgt, $I10
    unless $I11, rx1078_fail
  # rx pass
    rx1078_cur."!cursor_pass"(rx1078_pos, "term:sym<self>")
    if_null rx1078_debug, debug_827
    rx1078_cur."!cursor_debug"("PASS", "term:sym<self>", " at pos=", rx1078_pos)
  debug_827:
    .return (rx1078_cur)
  rx1078_restart:
.annotate 'line', 4
    if_null rx1078_debug, debug_828
    rx1078_cur."!cursor_debug"("NEXT", "term:sym<self>")
  debug_828:
  rx1078_fail:
    (rx1078_rep, rx1078_pos, $I10, $P10) = rx1078_cur."!mark_fail"(0)
    lt rx1078_pos, -1, rx1078_done
    eq rx1078_pos, -1, rx1078_fail
    jump $I10
  rx1078_done:
    rx1078_cur."!cursor_fail"()
    if_null rx1078_debug, debug_829
    rx1078_cur."!cursor_debug"("FAIL", "term:sym<self>")
  debug_829:
    .return (rx1078_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<self>"  :nsentry("!PREFIX__term:sym<self>") :subid("214_1300057348.719") :method
.annotate 'line', 4
    new $P1080, "ResizablePMCArray"
    push $P1080, "self"
    .return ($P1080)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<identifier>"  :subid("215_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1084_tgt
    .local int rx1084_pos
    .local int rx1084_off
    .local int rx1084_eos
    .local int rx1084_rep
    .local pmc rx1084_cur
    .local pmc rx1084_debug
    (rx1084_cur, rx1084_pos, rx1084_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1084_cur
    .local pmc match
    .lex "$/", match
    length rx1084_eos, rx1084_tgt
    gt rx1084_pos, rx1084_eos, rx1084_done
    set rx1084_off, 0
    lt rx1084_pos, 2, rx1084_start
    sub rx1084_off, rx1084_pos, 1
    substr rx1084_tgt, rx1084_tgt, rx1084_off
  rx1084_start:
    eq $I10, 1, rx1084_restart
    if_null rx1084_debug, debug_830
    rx1084_cur."!cursor_debug"("START", "term:sym<identifier>")
  debug_830:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1088_done
    goto rxscan1088_scan
  rxscan1088_loop:
    (rx1084_pos) = rx1084_cur."from"()
    inc rx1084_pos
    rx1084_cur."!cursor_from"(rx1084_pos)
    ge rx1084_pos, rx1084_eos, rxscan1088_done
  rxscan1088_scan:
    set_addr $I10, rxscan1088_loop
    rx1084_cur."!mark_push"(0, rx1084_pos, $I10)
  rxscan1088_done:
.annotate 'line', 501
  # rx subrule "deflongname" subtype=capture negate=
    rx1084_cur."!cursor_pos"(rx1084_pos)
    $P10 = rx1084_cur."deflongname"()
    unless $P10, rx1084_fail
    rx1084_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1084_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1084_pos, rx1084_off
    substr $S10, rx1084_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx1084_fail
  # rx subrule "args" subtype=capture negate=
    rx1084_cur."!cursor_pos"(rx1084_pos)
    $P10 = rx1084_cur."args"()
    unless $P10, rx1084_fail
    rx1084_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx1084_pos = $P10."pos"()
.annotate 'line', 500
  # rx pass
    rx1084_cur."!cursor_pass"(rx1084_pos, "term:sym<identifier>")
    if_null rx1084_debug, debug_831
    rx1084_cur."!cursor_debug"("PASS", "term:sym<identifier>", " at pos=", rx1084_pos)
  debug_831:
    .return (rx1084_cur)
  rx1084_restart:
.annotate 'line', 4
    if_null rx1084_debug, debug_832
    rx1084_cur."!cursor_debug"("NEXT", "term:sym<identifier>")
  debug_832:
  rx1084_fail:
    (rx1084_rep, rx1084_pos, $I10, $P10) = rx1084_cur."!mark_fail"(0)
    lt rx1084_pos, -1, rx1084_done
    eq rx1084_pos, -1, rx1084_fail
    jump $I10
  rx1084_done:
    rx1084_cur."!cursor_fail"()
    if_null rx1084_debug, debug_833
    rx1084_cur."!cursor_debug"("FAIL", "term:sym<identifier>")
  debug_833:
    .return (rx1084_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<identifier>"  :nsentry("!PREFIX__term:sym<identifier>") :subid("216_1300057348.719") :method
.annotate 'line', 4
    $P1086 = self."!PREFIX__!subrule"("deflongname", "")
    new $P1087, "ResizablePMCArray"
    push $P1087, $P1086
    .return ($P1087)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<name>"  :subid("217_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1090_tgt
    .local int rx1090_pos
    .local int rx1090_off
    .local int rx1090_eos
    .local int rx1090_rep
    .local pmc rx1090_cur
    .local pmc rx1090_debug
    (rx1090_cur, rx1090_pos, rx1090_tgt, $I10) = self."!cursor_start"()
    rx1090_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx1090_cur
    .local pmc match
    .lex "$/", match
    length rx1090_eos, rx1090_tgt
    gt rx1090_pos, rx1090_eos, rx1090_done
    set rx1090_off, 0
    lt rx1090_pos, 2, rx1090_start
    sub rx1090_off, rx1090_pos, 1
    substr rx1090_tgt, rx1090_tgt, rx1090_off
  rx1090_start:
    eq $I10, 1, rx1090_restart
    if_null rx1090_debug, debug_834
    rx1090_cur."!cursor_debug"("START", "term:sym<name>")
  debug_834:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1094_done
    goto rxscan1094_scan
  rxscan1094_loop:
    (rx1090_pos) = rx1090_cur."from"()
    inc rx1090_pos
    rx1090_cur."!cursor_from"(rx1090_pos)
    ge rx1090_pos, rx1090_eos, rxscan1094_done
  rxscan1094_scan:
    set_addr $I10, rxscan1094_loop
    rx1090_cur."!mark_push"(0, rx1090_pos, $I10)
  rxscan1094_done:
.annotate 'line', 505
  # rx subrule "name" subtype=capture negate=
    rx1090_cur."!cursor_pos"(rx1090_pos)
    $P10 = rx1090_cur."name"()
    unless $P10, rx1090_fail
    rx1090_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1090_pos = $P10."pos"()
  # rx rxquantr1095 ** 0..1
    set_addr $I10, rxquantr1095_done
    rx1090_cur."!mark_push"(0, rx1090_pos, $I10)
  rxquantr1095_loop:
  # rx subrule "args" subtype=capture negate=
    rx1090_cur."!cursor_pos"(rx1090_pos)
    $P10 = rx1090_cur."args"()
    unless $P10, rx1090_fail
    goto rxsubrule1096_pass
  rxsubrule1096_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1090_fail
  rxsubrule1096_pass:
    set_addr $I10, rxsubrule1096_back
    rx1090_cur."!mark_push"(0, rx1090_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx1090_pos = $P10."pos"()
    set_addr $I10, rxquantr1095_done
    (rx1090_rep) = rx1090_cur."!mark_commit"($I10)
  rxquantr1095_done:
.annotate 'line', 504
  # rx pass
    rx1090_cur."!cursor_pass"(rx1090_pos, "term:sym<name>")
    if_null rx1090_debug, debug_835
    rx1090_cur."!cursor_debug"("PASS", "term:sym<name>", " at pos=", rx1090_pos)
  debug_835:
    .return (rx1090_cur)
  rx1090_restart:
.annotate 'line', 4
    if_null rx1090_debug, debug_836
    rx1090_cur."!cursor_debug"("NEXT", "term:sym<name>")
  debug_836:
  rx1090_fail:
    (rx1090_rep, rx1090_pos, $I10, $P10) = rx1090_cur."!mark_fail"(0)
    lt rx1090_pos, -1, rx1090_done
    eq rx1090_pos, -1, rx1090_fail
    jump $I10
  rx1090_done:
    rx1090_cur."!cursor_fail"()
    if_null rx1090_debug, debug_837
    rx1090_cur."!cursor_debug"("FAIL", "term:sym<name>")
  debug_837:
    .return (rx1090_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<name>"  :nsentry("!PREFIX__term:sym<name>") :subid("218_1300057348.719") :method
.annotate 'line', 4
    $P1092 = self."!PREFIX__!subrule"("name", "")
    new $P1093, "ResizablePMCArray"
    push $P1093, $P1092
    .return ($P1093)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::op>"  :subid("219_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1098_tgt
    .local int rx1098_pos
    .local int rx1098_off
    .local int rx1098_eos
    .local int rx1098_rep
    .local pmc rx1098_cur
    .local pmc rx1098_debug
    (rx1098_cur, rx1098_pos, rx1098_tgt, $I10) = self."!cursor_start"()
    rx1098_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx1098_cur
    .local pmc match
    .lex "$/", match
    length rx1098_eos, rx1098_tgt
    gt rx1098_pos, rx1098_eos, rx1098_done
    set rx1098_off, 0
    lt rx1098_pos, 2, rx1098_start
    sub rx1098_off, rx1098_pos, 1
    substr rx1098_tgt, rx1098_tgt, rx1098_off
  rx1098_start:
    eq $I10, 1, rx1098_restart
    if_null rx1098_debug, debug_838
    rx1098_cur."!cursor_debug"("START", "term:sym<pir::op>")
  debug_838:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1101_done
    goto rxscan1101_scan
  rxscan1101_loop:
    (rx1098_pos) = rx1098_cur."from"()
    inc rx1098_pos
    rx1098_cur."!cursor_from"(rx1098_pos)
    ge rx1098_pos, rx1098_eos, rxscan1101_done
  rxscan1101_scan:
    set_addr $I10, rxscan1101_loop
    rx1098_cur."!mark_push"(0, rx1098_pos, $I10)
  rxscan1101_done:
.annotate 'line', 509
  # rx literal  "pir::"
    add $I11, rx1098_pos, 5
    gt $I11, rx1098_eos, rx1098_fail
    sub $I11, rx1098_pos, rx1098_off
    substr $S10, rx1098_tgt, $I11, 5
    ne $S10, "pir::", rx1098_fail
    add rx1098_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_1102_fail
    rx1098_cur."!mark_push"(0, rx1098_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx1098_pos, rx1098_off
    find_not_cclass $I11, 8192, rx1098_tgt, $I10, rx1098_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx1098_fail
    add rx1098_pos, rx1098_off, $I11
    set_addr $I10, rxcap_1102_fail
    ($I12, $I11) = rx1098_cur."!mark_peek"($I10)
    rx1098_cur."!cursor_pos"($I11)
    ($P10) = rx1098_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1098_pos, "")
    rx1098_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_1102_done
  rxcap_1102_fail:
    goto rx1098_fail
  rxcap_1102_done:
  # rx rxquantr1103 ** 0..1
    set_addr $I10, rxquantr1103_done
    rx1098_cur."!mark_push"(0, rx1098_pos, $I10)
  rxquantr1103_loop:
  # rx subrule "args" subtype=capture negate=
    rx1098_cur."!cursor_pos"(rx1098_pos)
    $P10 = rx1098_cur."args"()
    unless $P10, rx1098_fail
    goto rxsubrule1104_pass
  rxsubrule1104_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1098_fail
  rxsubrule1104_pass:
    set_addr $I10, rxsubrule1104_back
    rx1098_cur."!mark_push"(0, rx1098_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx1098_pos = $P10."pos"()
    set_addr $I10, rxquantr1103_done
    (rx1098_rep) = rx1098_cur."!mark_commit"($I10)
  rxquantr1103_done:
.annotate 'line', 508
  # rx pass
    rx1098_cur."!cursor_pass"(rx1098_pos, "term:sym<pir::op>")
    if_null rx1098_debug, debug_839
    rx1098_cur."!cursor_debug"("PASS", "term:sym<pir::op>", " at pos=", rx1098_pos)
  debug_839:
    .return (rx1098_cur)
  rx1098_restart:
.annotate 'line', 4
    if_null rx1098_debug, debug_840
    rx1098_cur."!cursor_debug"("NEXT", "term:sym<pir::op>")
  debug_840:
  rx1098_fail:
    (rx1098_rep, rx1098_pos, $I10, $P10) = rx1098_cur."!mark_fail"(0)
    lt rx1098_pos, -1, rx1098_done
    eq rx1098_pos, -1, rx1098_fail
    jump $I10
  rx1098_done:
    rx1098_cur."!cursor_fail"()
    if_null rx1098_debug, debug_841
    rx1098_cur."!cursor_debug"("FAIL", "term:sym<pir::op>")
  debug_841:
    .return (rx1098_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::op>"  :nsentry("!PREFIX__term:sym<pir::op>") :subid("220_1300057348.719") :method
.annotate 'line', 4
    new $P1100, "ResizablePMCArray"
    push $P1100, "pir::"
    .return ($P1100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<onlystar>"  :subid("221_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P1114 = "223_1300057348.719" 
    capture_lex $P1114
    .local string rx1106_tgt
    .local int rx1106_pos
    .local int rx1106_off
    .local int rx1106_eos
    .local int rx1106_rep
    .local pmc rx1106_cur
    .local pmc rx1106_debug
    (rx1106_cur, rx1106_pos, rx1106_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1106_cur
    .local pmc match
    .lex "$/", match
    length rx1106_eos, rx1106_tgt
    gt rx1106_pos, rx1106_eos, rx1106_done
    set rx1106_off, 0
    lt rx1106_pos, 2, rx1106_start
    sub rx1106_off, rx1106_pos, 1
    substr rx1106_tgt, rx1106_tgt, rx1106_off
  rx1106_start:
    eq $I10, 1, rx1106_restart
    if_null rx1106_debug, debug_842
    rx1106_cur."!cursor_debug"("START", "term:sym<onlystar>")
  debug_842:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1109_done
    goto rxscan1109_scan
  rxscan1109_loop:
    (rx1106_pos) = rx1106_cur."from"()
    inc rx1106_pos
    rx1106_cur."!cursor_from"(rx1106_pos)
    ge rx1106_pos, rx1106_eos, rxscan1109_done
  rxscan1109_scan:
    set_addr $I10, rxscan1109_loop
    rx1106_cur."!mark_push"(0, rx1106_pos, $I10)
  rxscan1109_done:
.annotate 'line', 513
  # rx literal  "{*}"
    add $I11, rx1106_pos, 3
    gt $I11, rx1106_eos, rx1106_fail
    sub $I11, rx1106_pos, rx1106_off
    substr $S10, rx1106_tgt, $I11, 3
    ne $S10, "{*}", rx1106_fail
    add rx1106_pos, 3
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1106_cur."!cursor_pos"(rx1106_pos)
    $P10 = rx1106_cur."ENDSTMT"()
    unless $P10, rx1106_fail
  alt1110_0:
.annotate 'line', 514
    set_addr $I10, alt1110_1
    rx1106_cur."!mark_push"(0, rx1106_pos, $I10)
    rx1106_cur."!cursor_pos"(rx1106_pos)
    find_lex $P1111, unicode:"$\x{a2}"
    $P1112 = $P1111."MATCH"()
    store_lex "$/", $P1112
    .const 'Sub' $P1114 = "223_1300057348.719" 
    capture_lex $P1114
    $P1118 = $P1114()
    unless $P1118, rx1106_fail
    goto alt1110_end
  alt1110_1:
  # rx subrule "panic" subtype=method negate=
    rx1106_cur."!cursor_pos"(rx1106_pos)
    $P10 = rx1106_cur."panic"("{*} may only appear in proto")
    unless $P10, rx1106_fail
    rx1106_pos = $P10."pos"()
  alt1110_end:
.annotate 'line', 512
  # rx pass
    rx1106_cur."!cursor_pass"(rx1106_pos, "term:sym<onlystar>")
    if_null rx1106_debug, debug_845
    rx1106_cur."!cursor_debug"("PASS", "term:sym<onlystar>", " at pos=", rx1106_pos)
  debug_845:
    .return (rx1106_cur)
  rx1106_restart:
.annotate 'line', 4
    if_null rx1106_debug, debug_846
    rx1106_cur."!cursor_debug"("NEXT", "term:sym<onlystar>")
  debug_846:
  rx1106_fail:
    (rx1106_rep, rx1106_pos, $I10, $P10) = rx1106_cur."!mark_fail"(0)
    lt rx1106_pos, -1, rx1106_done
    eq rx1106_pos, -1, rx1106_fail
    jump $I10
  rx1106_done:
    rx1106_cur."!cursor_fail"()
    if_null rx1106_debug, debug_847
    rx1106_cur."!cursor_debug"("FAIL", "term:sym<onlystar>")
  debug_847:
    .return (rx1106_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<onlystar>"  :nsentry("!PREFIX__term:sym<onlystar>") :subid("222_1300057348.719") :method
.annotate 'line', 4
    new $P1108, "ResizablePMCArray"
    push $P1108, "{*}"
    .return ($P1108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1113"  :anon :subid("223_1300057348.719") :outer("221_1300057348.719")
.annotate 'line', 514
    find_dynamic_lex $P1115, "$*MULTINESS"
    unless_null $P1115, vivify_843
    get_hll_global $P1115, "$MULTINESS"
    unless_null $P1115, vivify_844
    die "Contextual $*MULTINESS not found"
  vivify_844:
  vivify_843:
    set $S1116, $P1115
    iseq $I1117, $S1116, "proto"
    .return ($I1117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "args"  :subid("224_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1120_tgt
    .local int rx1120_pos
    .local int rx1120_off
    .local int rx1120_eos
    .local int rx1120_rep
    .local pmc rx1120_cur
    .local pmc rx1120_debug
    (rx1120_cur, rx1120_pos, rx1120_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1120_cur
    .local pmc match
    .lex "$/", match
    length rx1120_eos, rx1120_tgt
    gt rx1120_pos, rx1120_eos, rx1120_done
    set rx1120_off, 0
    lt rx1120_pos, 2, rx1120_start
    sub rx1120_off, rx1120_pos, 1
    substr rx1120_tgt, rx1120_tgt, rx1120_off
  rx1120_start:
    eq $I10, 1, rx1120_restart
    if_null rx1120_debug, debug_848
    rx1120_cur."!cursor_debug"("START", "args")
  debug_848:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1124_done
    goto rxscan1124_scan
  rxscan1124_loop:
    (rx1120_pos) = rx1120_cur."from"()
    inc rx1120_pos
    rx1120_cur."!cursor_from"(rx1120_pos)
    ge rx1120_pos, rx1120_eos, rxscan1124_done
  rxscan1124_scan:
    set_addr $I10, rxscan1124_loop
    rx1120_cur."!mark_push"(0, rx1120_pos, $I10)
  rxscan1124_done:
.annotate 'line', 518
  # rx literal  "("
    add $I11, rx1120_pos, 1
    gt $I11, rx1120_eos, rx1120_fail
    sub $I11, rx1120_pos, rx1120_off
    ord $I11, rx1120_tgt, $I11
    ne $I11, 40, rx1120_fail
    add rx1120_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx1120_cur."!cursor_pos"(rx1120_pos)
    $P10 = rx1120_cur."arglist"()
    unless $P10, rx1120_fail
    rx1120_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx1120_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1120_pos, 1
    gt $I11, rx1120_eos, rx1120_fail
    sub $I11, rx1120_pos, rx1120_off
    ord $I11, rx1120_tgt, $I11
    ne $I11, 41, rx1120_fail
    add rx1120_pos, 1
  # rx pass
    rx1120_cur."!cursor_pass"(rx1120_pos, "args")
    if_null rx1120_debug, debug_849
    rx1120_cur."!cursor_debug"("PASS", "args", " at pos=", rx1120_pos)
  debug_849:
    .return (rx1120_cur)
  rx1120_restart:
.annotate 'line', 4
    if_null rx1120_debug, debug_850
    rx1120_cur."!cursor_debug"("NEXT", "args")
  debug_850:
  rx1120_fail:
    (rx1120_rep, rx1120_pos, $I10, $P10) = rx1120_cur."!mark_fail"(0)
    lt rx1120_pos, -1, rx1120_done
    eq rx1120_pos, -1, rx1120_fail
    jump $I10
  rx1120_done:
    rx1120_cur."!cursor_fail"()
    if_null rx1120_debug, debug_851
    rx1120_cur."!cursor_debug"("FAIL", "args")
  debug_851:
    .return (rx1120_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__args"  :nsentry("!PREFIX__args") :subid("225_1300057348.719") :method
.annotate 'line', 4
    $P1122 = self."!PREFIX__!subrule"("arglist", "(")
    new $P1123, "ResizablePMCArray"
    push $P1123, $P1122
    .return ($P1123)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "arglist"  :subid("226_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1126_tgt
    .local int rx1126_pos
    .local int rx1126_off
    .local int rx1126_eos
    .local int rx1126_rep
    .local pmc rx1126_cur
    .local pmc rx1126_debug
    (rx1126_cur, rx1126_pos, rx1126_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1126_cur
    .local pmc match
    .lex "$/", match
    length rx1126_eos, rx1126_tgt
    gt rx1126_pos, rx1126_eos, rx1126_done
    set rx1126_off, 0
    lt rx1126_pos, 2, rx1126_start
    sub rx1126_off, rx1126_pos, 1
    substr rx1126_tgt, rx1126_tgt, rx1126_off
  rx1126_start:
    eq $I10, 1, rx1126_restart
    if_null rx1126_debug, debug_852
    rx1126_cur."!cursor_debug"("START", "arglist")
  debug_852:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1130_done
    goto rxscan1130_scan
  rxscan1130_loop:
    (rx1126_pos) = rx1126_cur."from"()
    inc rx1126_pos
    rx1126_cur."!cursor_from"(rx1126_pos)
    ge rx1126_pos, rx1126_eos, rxscan1130_done
  rxscan1130_scan:
    set_addr $I10, rxscan1130_loop
    rx1126_cur."!mark_push"(0, rx1126_pos, $I10)
  rxscan1130_done:
.annotate 'line', 522
  # rx subrule "ws" subtype=method negate=
    rx1126_cur."!cursor_pos"(rx1126_pos)
    $P10 = rx1126_cur."ws"()
    unless $P10, rx1126_fail
    rx1126_pos = $P10."pos"()
  alt1131_0:
.annotate 'line', 523
    set_addr $I10, alt1131_1
    rx1126_cur."!mark_push"(0, rx1126_pos, $I10)
.annotate 'line', 524
  # rx subrule "EXPR" subtype=capture negate=
    rx1126_cur."!cursor_pos"(rx1126_pos)
    $P10 = rx1126_cur."EXPR"("f=")
    unless $P10, rx1126_fail
    rx1126_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1126_pos = $P10."pos"()
    goto alt1131_end
  alt1131_1:
  alt1131_end:
.annotate 'line', 521
  # rx pass
    rx1126_cur."!cursor_pass"(rx1126_pos, "arglist")
    if_null rx1126_debug, debug_853
    rx1126_cur."!cursor_debug"("PASS", "arglist", " at pos=", rx1126_pos)
  debug_853:
    .return (rx1126_cur)
  rx1126_restart:
.annotate 'line', 4
    if_null rx1126_debug, debug_854
    rx1126_cur."!cursor_debug"("NEXT", "arglist")
  debug_854:
  rx1126_fail:
    (rx1126_rep, rx1126_pos, $I10, $P10) = rx1126_cur."!mark_fail"(0)
    lt rx1126_pos, -1, rx1126_done
    eq rx1126_pos, -1, rx1126_fail
    jump $I10
  rx1126_done:
    rx1126_cur."!cursor_fail"()
    if_null rx1126_debug, debug_855
    rx1126_cur."!cursor_debug"("FAIL", "arglist")
  debug_855:
    .return (rx1126_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__arglist"  :nsentry("!PREFIX__arglist") :subid("227_1300057348.719") :method
.annotate 'line', 4
    $P1128 = self."!PREFIX__!subrule"("ws", "")
    new $P1129, "ResizablePMCArray"
    push $P1129, $P1128
    .return ($P1129)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<value>"  :subid("228_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1133_tgt
    .local int rx1133_pos
    .local int rx1133_off
    .local int rx1133_eos
    .local int rx1133_rep
    .local pmc rx1133_cur
    .local pmc rx1133_debug
    (rx1133_cur, rx1133_pos, rx1133_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1133_cur
    .local pmc match
    .lex "$/", match
    length rx1133_eos, rx1133_tgt
    gt rx1133_pos, rx1133_eos, rx1133_done
    set rx1133_off, 0
    lt rx1133_pos, 2, rx1133_start
    sub rx1133_off, rx1133_pos, 1
    substr rx1133_tgt, rx1133_tgt, rx1133_off
  rx1133_start:
    eq $I10, 1, rx1133_restart
    if_null rx1133_debug, debug_856
    rx1133_cur."!cursor_debug"("START", "term:sym<value>")
  debug_856:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1137_done
    goto rxscan1137_scan
  rxscan1137_loop:
    (rx1133_pos) = rx1133_cur."from"()
    inc rx1133_pos
    rx1133_cur."!cursor_from"(rx1133_pos)
    ge rx1133_pos, rx1133_eos, rxscan1137_done
  rxscan1137_scan:
    set_addr $I10, rxscan1137_loop
    rx1133_cur."!mark_push"(0, rx1133_pos, $I10)
  rxscan1137_done:
.annotate 'line', 530
  # rx subrule "value" subtype=capture negate=
    rx1133_cur."!cursor_pos"(rx1133_pos)
    $P10 = rx1133_cur."value"()
    unless $P10, rx1133_fail
    rx1133_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("value")
    rx1133_pos = $P10."pos"()
  # rx pass
    rx1133_cur."!cursor_pass"(rx1133_pos, "term:sym<value>")
    if_null rx1133_debug, debug_857
    rx1133_cur."!cursor_debug"("PASS", "term:sym<value>", " at pos=", rx1133_pos)
  debug_857:
    .return (rx1133_cur)
  rx1133_restart:
.annotate 'line', 4
    if_null rx1133_debug, debug_858
    rx1133_cur."!cursor_debug"("NEXT", "term:sym<value>")
  debug_858:
  rx1133_fail:
    (rx1133_rep, rx1133_pos, $I10, $P10) = rx1133_cur."!mark_fail"(0)
    lt rx1133_pos, -1, rx1133_done
    eq rx1133_pos, -1, rx1133_fail
    jump $I10
  rx1133_done:
    rx1133_cur."!cursor_fail"()
    if_null rx1133_debug, debug_859
    rx1133_cur."!cursor_debug"("FAIL", "term:sym<value>")
  debug_859:
    .return (rx1133_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<value>"  :nsentry("!PREFIX__term:sym<value>") :subid("229_1300057348.719") :method
.annotate 'line', 4
    $P1135 = self."!PREFIX__!subrule"("value", "")
    new $P1136, "ResizablePMCArray"
    push $P1136, $P1135
    .return ($P1136)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "value"  :subid("230_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1139_tgt
    .local int rx1139_pos
    .local int rx1139_off
    .local int rx1139_eos
    .local int rx1139_rep
    .local pmc rx1139_cur
    .local pmc rx1139_debug
    (rx1139_cur, rx1139_pos, rx1139_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1139_cur
    .local pmc match
    .lex "$/", match
    length rx1139_eos, rx1139_tgt
    gt rx1139_pos, rx1139_eos, rx1139_done
    set rx1139_off, 0
    lt rx1139_pos, 2, rx1139_start
    sub rx1139_off, rx1139_pos, 1
    substr rx1139_tgt, rx1139_tgt, rx1139_off
  rx1139_start:
    eq $I10, 1, rx1139_restart
    if_null rx1139_debug, debug_860
    rx1139_cur."!cursor_debug"("START", "value")
  debug_860:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1144_done
    goto rxscan1144_scan
  rxscan1144_loop:
    (rx1139_pos) = rx1139_cur."from"()
    inc rx1139_pos
    rx1139_cur."!cursor_from"(rx1139_pos)
    ge rx1139_pos, rx1139_eos, rxscan1144_done
  rxscan1144_scan:
    set_addr $I10, rxscan1144_loop
    rx1139_cur."!mark_push"(0, rx1139_pos, $I10)
  rxscan1144_done:
  alt1145_0:
.annotate 'line', 532
    set_addr $I10, alt1145_1
    rx1139_cur."!mark_push"(0, rx1139_pos, $I10)
.annotate 'line', 533
  # rx subrule "quote" subtype=capture negate=
    rx1139_cur."!cursor_pos"(rx1139_pos)
    $P10 = rx1139_cur."quote"()
    unless $P10, rx1139_fail
    rx1139_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx1139_pos = $P10."pos"()
    goto alt1145_end
  alt1145_1:
.annotate 'line', 534
  # rx subrule "number" subtype=capture negate=
    rx1139_cur."!cursor_pos"(rx1139_pos)
    $P10 = rx1139_cur."number"()
    unless $P10, rx1139_fail
    rx1139_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("number")
    rx1139_pos = $P10."pos"()
  alt1145_end:
.annotate 'line', 532
  # rx pass
    rx1139_cur."!cursor_pass"(rx1139_pos, "value")
    if_null rx1139_debug, debug_861
    rx1139_cur."!cursor_debug"("PASS", "value", " at pos=", rx1139_pos)
  debug_861:
    .return (rx1139_cur)
  rx1139_restart:
.annotate 'line', 4
    if_null rx1139_debug, debug_862
    rx1139_cur."!cursor_debug"("NEXT", "value")
  debug_862:
  rx1139_fail:
    (rx1139_rep, rx1139_pos, $I10, $P10) = rx1139_cur."!mark_fail"(0)
    lt rx1139_pos, -1, rx1139_done
    eq rx1139_pos, -1, rx1139_fail
    jump $I10
  rx1139_done:
    rx1139_cur."!cursor_fail"()
    if_null rx1139_debug, debug_863
    rx1139_cur."!cursor_debug"("FAIL", "value")
  debug_863:
    .return (rx1139_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__value"  :nsentry("!PREFIX__value") :subid("231_1300057348.719") :method
.annotate 'line', 4
    $P1141 = self."!PREFIX__!subrule"("number", "")
    $P1142 = self."!PREFIX__!subrule"("quote", "")
    new $P1143, "ResizablePMCArray"
    push $P1143, $P1141
    push $P1143, $P1142
    .return ($P1143)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "number"  :subid("232_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1147_tgt
    .local int rx1147_pos
    .local int rx1147_off
    .local int rx1147_eos
    .local int rx1147_rep
    .local pmc rx1147_cur
    .local pmc rx1147_debug
    (rx1147_cur, rx1147_pos, rx1147_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1147_cur
    .local pmc match
    .lex "$/", match
    length rx1147_eos, rx1147_tgt
    gt rx1147_pos, rx1147_eos, rx1147_done
    set rx1147_off, 0
    lt rx1147_pos, 2, rx1147_start
    sub rx1147_off, rx1147_pos, 1
    substr rx1147_tgt, rx1147_tgt, rx1147_off
  rx1147_start:
    eq $I10, 1, rx1147_restart
    if_null rx1147_debug, debug_864
    rx1147_cur."!cursor_debug"("START", "number")
  debug_864:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1150_done
    goto rxscan1150_scan
  rxscan1150_loop:
    (rx1147_pos) = rx1147_cur."from"()
    inc rx1147_pos
    rx1147_cur."!cursor_from"(rx1147_pos)
    ge rx1147_pos, rx1147_eos, rxscan1150_done
  rxscan1150_scan:
    set_addr $I10, rxscan1150_loop
    rx1147_cur."!mark_push"(0, rx1147_pos, $I10)
  rxscan1150_done:
.annotate 'line', 538
  # rx subcapture "sign"
    set_addr $I10, rxcap_1152_fail
    rx1147_cur."!mark_push"(0, rx1147_pos, $I10)
  # rx enumcharlist_q negate=0  r 0..1
    sub $I10, rx1147_pos, rx1147_off
    set rx1147_rep, 0
    sub $I12, rx1147_eos, rx1147_pos
    le $I12, 1, rxenumcharlistq1151_loop
    set $I12, 1
  rxenumcharlistq1151_loop:
    le $I12, 0, rxenumcharlistq1151_done
    substr $S10, rx1147_tgt, $I10, 1
    index $I11, "+-", $S10
    lt $I11, 0, rxenumcharlistq1151_done
    inc rx1147_rep
  rxenumcharlistq1151_done:
    add rx1147_pos, rx1147_pos, rx1147_rep
    set_addr $I10, rxcap_1152_fail
    ($I12, $I11) = rx1147_cur."!mark_peek"($I10)
    rx1147_cur."!cursor_pos"($I11)
    ($P10) = rx1147_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1147_pos, "")
    rx1147_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sign")
    goto rxcap_1152_done
  rxcap_1152_fail:
    goto rx1147_fail
  rxcap_1152_done:
  alt1153_0:
.annotate 'line', 539
    set_addr $I10, alt1153_1
    rx1147_cur."!mark_push"(0, rx1147_pos, $I10)
  # rx subrule "dec_number" subtype=capture negate=
    rx1147_cur."!cursor_pos"(rx1147_pos)
    $P10 = rx1147_cur."dec_number"()
    unless $P10, rx1147_fail
    rx1147_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dec_number")
    rx1147_pos = $P10."pos"()
    goto alt1153_end
  alt1153_1:
  # rx subrule "integer" subtype=capture negate=
    rx1147_cur."!cursor_pos"(rx1147_pos)
    $P10 = rx1147_cur."integer"()
    unless $P10, rx1147_fail
    rx1147_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("integer")
    rx1147_pos = $P10."pos"()
  alt1153_end:
.annotate 'line', 537
  # rx pass
    rx1147_cur."!cursor_pass"(rx1147_pos, "number")
    if_null rx1147_debug, debug_865
    rx1147_cur."!cursor_debug"("PASS", "number", " at pos=", rx1147_pos)
  debug_865:
    .return (rx1147_cur)
  rx1147_restart:
.annotate 'line', 4
    if_null rx1147_debug, debug_866
    rx1147_cur."!cursor_debug"("NEXT", "number")
  debug_866:
  rx1147_fail:
    (rx1147_rep, rx1147_pos, $I10, $P10) = rx1147_cur."!mark_fail"(0)
    lt rx1147_pos, -1, rx1147_done
    eq rx1147_pos, -1, rx1147_fail
    jump $I10
  rx1147_done:
    rx1147_cur."!cursor_fail"()
    if_null rx1147_debug, debug_867
    rx1147_cur."!cursor_debug"("FAIL", "number")
  debug_867:
    .return (rx1147_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__number"  :nsentry("!PREFIX__number") :subid("233_1300057348.719") :method
.annotate 'line', 4
    new $P1149, "ResizablePMCArray"
    push $P1149, ""
    .return ($P1149)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote"  :subid("234_1300057348.719")
    .param pmc param_1155
.annotate 'line', 542
    .lex "self", param_1155
    $P1156 = param_1155."!protoregex"("quote")
    .return ($P1156)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote"  :subid("235_1300057348.719")
    .param pmc param_1158
.annotate 'line', 542
    .lex "self", param_1158
    $P1159 = param_1158."!PREFIX__!protoregex"("quote")
    .return ($P1159)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<apos>"  :subid("236_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_debug
    (rx1161_cur, rx1161_pos, rx1161_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1161_cur
    .local pmc match
    .lex "$/", match
    length rx1161_eos, rx1161_tgt
    gt rx1161_pos, rx1161_eos, rx1161_done
    set rx1161_off, 0
    lt rx1161_pos, 2, rx1161_start
    sub rx1161_off, rx1161_pos, 1
    substr rx1161_tgt, rx1161_tgt, rx1161_off
  rx1161_start:
    eq $I10, 1, rx1161_restart
    if_null rx1161_debug, debug_868
    rx1161_cur."!cursor_debug"("START", "quote:sym<apos>")
  debug_868:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1164_done
    goto rxscan1164_scan
  rxscan1164_loop:
    (rx1161_pos) = rx1161_cur."from"()
    inc rx1161_pos
    rx1161_cur."!cursor_from"(rx1161_pos)
    ge rx1161_pos, rx1161_eos, rxscan1164_done
  rxscan1164_scan:
    set_addr $I10, rxscan1164_loop
    rx1161_cur."!mark_push"(0, rx1161_pos, $I10)
  rxscan1164_done:
.annotate 'line', 543
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1161_pos, rx1161_off
    substr $S10, rx1161_tgt, $I10, 1
    index $I11, "'", $S10
    lt $I11, 0, rx1161_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1161_cur."!cursor_pos"(rx1161_pos)
    $P10 = rx1161_cur."quote_EXPR"(":q")
    unless $P10, rx1161_fail
    rx1161_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1161_pos = $P10."pos"()
  # rx pass
    rx1161_cur."!cursor_pass"(rx1161_pos, "quote:sym<apos>")
    if_null rx1161_debug, debug_869
    rx1161_cur."!cursor_debug"("PASS", "quote:sym<apos>", " at pos=", rx1161_pos)
  debug_869:
    .return (rx1161_cur)
  rx1161_restart:
.annotate 'line', 4
    if_null rx1161_debug, debug_870
    rx1161_cur."!cursor_debug"("NEXT", "quote:sym<apos>")
  debug_870:
  rx1161_fail:
    (rx1161_rep, rx1161_pos, $I10, $P10) = rx1161_cur."!mark_fail"(0)
    lt rx1161_pos, -1, rx1161_done
    eq rx1161_pos, -1, rx1161_fail
    jump $I10
  rx1161_done:
    rx1161_cur."!cursor_fail"()
    if_null rx1161_debug, debug_871
    rx1161_cur."!cursor_debug"("FAIL", "quote:sym<apos>")
  debug_871:
    .return (rx1161_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<apos>"  :nsentry("!PREFIX__quote:sym<apos>") :subid("237_1300057348.719") :method
.annotate 'line', 4
    new $P1163, "ResizablePMCArray"
    push $P1163, "'"
    .return ($P1163)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<dblq>"  :subid("238_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1166_tgt
    .local int rx1166_pos
    .local int rx1166_off
    .local int rx1166_eos
    .local int rx1166_rep
    .local pmc rx1166_cur
    .local pmc rx1166_debug
    (rx1166_cur, rx1166_pos, rx1166_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1166_cur
    .local pmc match
    .lex "$/", match
    length rx1166_eos, rx1166_tgt
    gt rx1166_pos, rx1166_eos, rx1166_done
    set rx1166_off, 0
    lt rx1166_pos, 2, rx1166_start
    sub rx1166_off, rx1166_pos, 1
    substr rx1166_tgt, rx1166_tgt, rx1166_off
  rx1166_start:
    eq $I10, 1, rx1166_restart
    if_null rx1166_debug, debug_872
    rx1166_cur."!cursor_debug"("START", "quote:sym<dblq>")
  debug_872:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1169_done
    goto rxscan1169_scan
  rxscan1169_loop:
    (rx1166_pos) = rx1166_cur."from"()
    inc rx1166_pos
    rx1166_cur."!cursor_from"(rx1166_pos)
    ge rx1166_pos, rx1166_eos, rxscan1169_done
  rxscan1169_scan:
    set_addr $I10, rxscan1169_loop
    rx1166_cur."!mark_push"(0, rx1166_pos, $I10)
  rxscan1169_done:
.annotate 'line', 544
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1166_pos, rx1166_off
    substr $S10, rx1166_tgt, $I10, 1
    index $I11, "\"", $S10
    lt $I11, 0, rx1166_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1166_cur."!cursor_pos"(rx1166_pos)
    $P10 = rx1166_cur."quote_EXPR"(":qq")
    unless $P10, rx1166_fail
    rx1166_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1166_pos = $P10."pos"()
  # rx pass
    rx1166_cur."!cursor_pass"(rx1166_pos, "quote:sym<dblq>")
    if_null rx1166_debug, debug_873
    rx1166_cur."!cursor_debug"("PASS", "quote:sym<dblq>", " at pos=", rx1166_pos)
  debug_873:
    .return (rx1166_cur)
  rx1166_restart:
.annotate 'line', 4
    if_null rx1166_debug, debug_874
    rx1166_cur."!cursor_debug"("NEXT", "quote:sym<dblq>")
  debug_874:
  rx1166_fail:
    (rx1166_rep, rx1166_pos, $I10, $P10) = rx1166_cur."!mark_fail"(0)
    lt rx1166_pos, -1, rx1166_done
    eq rx1166_pos, -1, rx1166_fail
    jump $I10
  rx1166_done:
    rx1166_cur."!cursor_fail"()
    if_null rx1166_debug, debug_875
    rx1166_cur."!cursor_debug"("FAIL", "quote:sym<dblq>")
  debug_875:
    .return (rx1166_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<dblq>"  :nsentry("!PREFIX__quote:sym<dblq>") :subid("239_1300057348.719") :method
.annotate 'line', 4
    new $P1168, "ResizablePMCArray"
    push $P1168, "\""
    .return ($P1168)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<q>"  :subid("240_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1171_tgt
    .local int rx1171_pos
    .local int rx1171_off
    .local int rx1171_eos
    .local int rx1171_rep
    .local pmc rx1171_cur
    .local pmc rx1171_debug
    (rx1171_cur, rx1171_pos, rx1171_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1171_cur
    .local pmc match
    .lex "$/", match
    length rx1171_eos, rx1171_tgt
    gt rx1171_pos, rx1171_eos, rx1171_done
    set rx1171_off, 0
    lt rx1171_pos, 2, rx1171_start
    sub rx1171_off, rx1171_pos, 1
    substr rx1171_tgt, rx1171_tgt, rx1171_off
  rx1171_start:
    eq $I10, 1, rx1171_restart
    if_null rx1171_debug, debug_876
    rx1171_cur."!cursor_debug"("START", "quote:sym<q>")
  debug_876:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1175_done
    goto rxscan1175_scan
  rxscan1175_loop:
    (rx1171_pos) = rx1171_cur."from"()
    inc rx1171_pos
    rx1171_cur."!cursor_from"(rx1171_pos)
    ge rx1171_pos, rx1171_eos, rxscan1175_done
  rxscan1175_scan:
    set_addr $I10, rxscan1175_loop
    rx1171_cur."!mark_push"(0, rx1171_pos, $I10)
  rxscan1175_done:
.annotate 'line', 545
  # rx literal  "q"
    add $I11, rx1171_pos, 1
    gt $I11, rx1171_eos, rx1171_fail
    sub $I11, rx1171_pos, rx1171_off
    ord $I11, rx1171_tgt, $I11
    ne $I11, 113, rx1171_fail
    add rx1171_pos, 1
  # rxanchor rwb
    le rx1171_pos, 0, rx1171_fail
    sub $I10, rx1171_pos, rx1171_off
    is_cclass $I11, 8192, rx1171_tgt, $I10
    if $I11, rx1171_fail
    dec $I10
    is_cclass $I11, 8192, rx1171_tgt, $I10
    unless $I11, rx1171_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx1171_pos, rx1171_off
    substr $S10, rx1171_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx1171_fail
  # rx subrule "ws" subtype=method negate=
    rx1171_cur."!cursor_pos"(rx1171_pos)
    $P10 = rx1171_cur."ws"()
    unless $P10, rx1171_fail
    rx1171_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1171_cur."!cursor_pos"(rx1171_pos)
    $P10 = rx1171_cur."quote_EXPR"(":q")
    unless $P10, rx1171_fail
    rx1171_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1171_pos = $P10."pos"()
  # rx pass
    rx1171_cur."!cursor_pass"(rx1171_pos, "quote:sym<q>")
    if_null rx1171_debug, debug_877
    rx1171_cur."!cursor_debug"("PASS", "quote:sym<q>", " at pos=", rx1171_pos)
  debug_877:
    .return (rx1171_cur)
  rx1171_restart:
.annotate 'line', 4
    if_null rx1171_debug, debug_878
    rx1171_cur."!cursor_debug"("NEXT", "quote:sym<q>")
  debug_878:
  rx1171_fail:
    (rx1171_rep, rx1171_pos, $I10, $P10) = rx1171_cur."!mark_fail"(0)
    lt rx1171_pos, -1, rx1171_done
    eq rx1171_pos, -1, rx1171_fail
    jump $I10
  rx1171_done:
    rx1171_cur."!cursor_fail"()
    if_null rx1171_debug, debug_879
    rx1171_cur."!cursor_debug"("FAIL", "quote:sym<q>")
  debug_879:
    .return (rx1171_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<q>"  :nsentry("!PREFIX__quote:sym<q>") :subid("241_1300057348.719") :method
.annotate 'line', 4
    $P1173 = self."!PREFIX__!subrule"("ws", "q")
    new $P1174, "ResizablePMCArray"
    push $P1174, $P1173
    .return ($P1174)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<qq>"  :subid("242_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_debug
    (rx1177_cur, rx1177_pos, rx1177_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1177_cur
    .local pmc match
    .lex "$/", match
    length rx1177_eos, rx1177_tgt
    gt rx1177_pos, rx1177_eos, rx1177_done
    set rx1177_off, 0
    lt rx1177_pos, 2, rx1177_start
    sub rx1177_off, rx1177_pos, 1
    substr rx1177_tgt, rx1177_tgt, rx1177_off
  rx1177_start:
    eq $I10, 1, rx1177_restart
    if_null rx1177_debug, debug_880
    rx1177_cur."!cursor_debug"("START", "quote:sym<qq>")
  debug_880:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1181_done
    goto rxscan1181_scan
  rxscan1181_loop:
    (rx1177_pos) = rx1177_cur."from"()
    inc rx1177_pos
    rx1177_cur."!cursor_from"(rx1177_pos)
    ge rx1177_pos, rx1177_eos, rxscan1181_done
  rxscan1181_scan:
    set_addr $I10, rxscan1181_loop
    rx1177_cur."!mark_push"(0, rx1177_pos, $I10)
  rxscan1181_done:
.annotate 'line', 546
  # rx literal  "qq"
    add $I11, rx1177_pos, 2
    gt $I11, rx1177_eos, rx1177_fail
    sub $I11, rx1177_pos, rx1177_off
    substr $S10, rx1177_tgt, $I11, 2
    ne $S10, "qq", rx1177_fail
    add rx1177_pos, 2
  # rxanchor rwb
    le rx1177_pos, 0, rx1177_fail
    sub $I10, rx1177_pos, rx1177_off
    is_cclass $I11, 8192, rx1177_tgt, $I10
    if $I11, rx1177_fail
    dec $I10
    is_cclass $I11, 8192, rx1177_tgt, $I10
    unless $I11, rx1177_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx1177_pos, rx1177_off
    substr $S10, rx1177_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx1177_fail
  # rx subrule "ws" subtype=method negate=
    rx1177_cur."!cursor_pos"(rx1177_pos)
    $P10 = rx1177_cur."ws"()
    unless $P10, rx1177_fail
    rx1177_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1177_cur."!cursor_pos"(rx1177_pos)
    $P10 = rx1177_cur."quote_EXPR"(":qq")
    unless $P10, rx1177_fail
    rx1177_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1177_pos = $P10."pos"()
  # rx pass
    rx1177_cur."!cursor_pass"(rx1177_pos, "quote:sym<qq>")
    if_null rx1177_debug, debug_881
    rx1177_cur."!cursor_debug"("PASS", "quote:sym<qq>", " at pos=", rx1177_pos)
  debug_881:
    .return (rx1177_cur)
  rx1177_restart:
.annotate 'line', 4
    if_null rx1177_debug, debug_882
    rx1177_cur."!cursor_debug"("NEXT", "quote:sym<qq>")
  debug_882:
  rx1177_fail:
    (rx1177_rep, rx1177_pos, $I10, $P10) = rx1177_cur."!mark_fail"(0)
    lt rx1177_pos, -1, rx1177_done
    eq rx1177_pos, -1, rx1177_fail
    jump $I10
  rx1177_done:
    rx1177_cur."!cursor_fail"()
    if_null rx1177_debug, debug_883
    rx1177_cur."!cursor_debug"("FAIL", "quote:sym<qq>")
  debug_883:
    .return (rx1177_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<qq>"  :nsentry("!PREFIX__quote:sym<qq>") :subid("243_1300057348.719") :method
.annotate 'line', 4
    $P1179 = self."!PREFIX__!subrule"("ws", "qq")
    new $P1180, "ResizablePMCArray"
    push $P1180, $P1179
    .return ($P1180)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q>"  :subid("244_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1183_tgt
    .local int rx1183_pos
    .local int rx1183_off
    .local int rx1183_eos
    .local int rx1183_rep
    .local pmc rx1183_cur
    .local pmc rx1183_debug
    (rx1183_cur, rx1183_pos, rx1183_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1183_cur
    .local pmc match
    .lex "$/", match
    length rx1183_eos, rx1183_tgt
    gt rx1183_pos, rx1183_eos, rx1183_done
    set rx1183_off, 0
    lt rx1183_pos, 2, rx1183_start
    sub rx1183_off, rx1183_pos, 1
    substr rx1183_tgt, rx1183_tgt, rx1183_off
  rx1183_start:
    eq $I10, 1, rx1183_restart
    if_null rx1183_debug, debug_884
    rx1183_cur."!cursor_debug"("START", "quote:sym<Q>")
  debug_884:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1187_done
    goto rxscan1187_scan
  rxscan1187_loop:
    (rx1183_pos) = rx1183_cur."from"()
    inc rx1183_pos
    rx1183_cur."!cursor_from"(rx1183_pos)
    ge rx1183_pos, rx1183_eos, rxscan1187_done
  rxscan1187_scan:
    set_addr $I10, rxscan1187_loop
    rx1183_cur."!mark_push"(0, rx1183_pos, $I10)
  rxscan1187_done:
.annotate 'line', 547
  # rx literal  "Q"
    add $I11, rx1183_pos, 1
    gt $I11, rx1183_eos, rx1183_fail
    sub $I11, rx1183_pos, rx1183_off
    ord $I11, rx1183_tgt, $I11
    ne $I11, 81, rx1183_fail
    add rx1183_pos, 1
  # rxanchor rwb
    le rx1183_pos, 0, rx1183_fail
    sub $I10, rx1183_pos, rx1183_off
    is_cclass $I11, 8192, rx1183_tgt, $I10
    if $I11, rx1183_fail
    dec $I10
    is_cclass $I11, 8192, rx1183_tgt, $I10
    unless $I11, rx1183_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx1183_pos, rx1183_off
    substr $S10, rx1183_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx1183_fail
  # rx subrule "ws" subtype=method negate=
    rx1183_cur."!cursor_pos"(rx1183_pos)
    $P10 = rx1183_cur."ws"()
    unless $P10, rx1183_fail
    rx1183_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1183_cur."!cursor_pos"(rx1183_pos)
    $P10 = rx1183_cur."quote_EXPR"()
    unless $P10, rx1183_fail
    rx1183_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1183_pos = $P10."pos"()
  # rx pass
    rx1183_cur."!cursor_pass"(rx1183_pos, "quote:sym<Q>")
    if_null rx1183_debug, debug_885
    rx1183_cur."!cursor_debug"("PASS", "quote:sym<Q>", " at pos=", rx1183_pos)
  debug_885:
    .return (rx1183_cur)
  rx1183_restart:
.annotate 'line', 4
    if_null rx1183_debug, debug_886
    rx1183_cur."!cursor_debug"("NEXT", "quote:sym<Q>")
  debug_886:
  rx1183_fail:
    (rx1183_rep, rx1183_pos, $I10, $P10) = rx1183_cur."!mark_fail"(0)
    lt rx1183_pos, -1, rx1183_done
    eq rx1183_pos, -1, rx1183_fail
    jump $I10
  rx1183_done:
    rx1183_cur."!cursor_fail"()
    if_null rx1183_debug, debug_887
    rx1183_cur."!cursor_debug"("FAIL", "quote:sym<Q>")
  debug_887:
    .return (rx1183_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q>"  :nsentry("!PREFIX__quote:sym<Q>") :subid("245_1300057348.719") :method
.annotate 'line', 4
    $P1185 = self."!PREFIX__!subrule"("ws", "Q")
    new $P1186, "ResizablePMCArray"
    push $P1186, $P1185
    .return ($P1186)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q:PIR>"  :subid("246_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1189_tgt
    .local int rx1189_pos
    .local int rx1189_off
    .local int rx1189_eos
    .local int rx1189_rep
    .local pmc rx1189_cur
    .local pmc rx1189_debug
    (rx1189_cur, rx1189_pos, rx1189_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1189_cur
    .local pmc match
    .lex "$/", match
    length rx1189_eos, rx1189_tgt
    gt rx1189_pos, rx1189_eos, rx1189_done
    set rx1189_off, 0
    lt rx1189_pos, 2, rx1189_start
    sub rx1189_off, rx1189_pos, 1
    substr rx1189_tgt, rx1189_tgt, rx1189_off
  rx1189_start:
    eq $I10, 1, rx1189_restart
    if_null rx1189_debug, debug_888
    rx1189_cur."!cursor_debug"("START", "quote:sym<Q:PIR>")
  debug_888:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1193_done
    goto rxscan1193_scan
  rxscan1193_loop:
    (rx1189_pos) = rx1189_cur."from"()
    inc rx1189_pos
    rx1189_cur."!cursor_from"(rx1189_pos)
    ge rx1189_pos, rx1189_eos, rxscan1193_done
  rxscan1193_scan:
    set_addr $I10, rxscan1193_loop
    rx1189_cur."!mark_push"(0, rx1189_pos, $I10)
  rxscan1193_done:
.annotate 'line', 548
  # rx literal  "Q:PIR"
    add $I11, rx1189_pos, 5
    gt $I11, rx1189_eos, rx1189_fail
    sub $I11, rx1189_pos, rx1189_off
    substr $S10, rx1189_tgt, $I11, 5
    ne $S10, "Q:PIR", rx1189_fail
    add rx1189_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1189_cur."!cursor_pos"(rx1189_pos)
    $P10 = rx1189_cur."ws"()
    unless $P10, rx1189_fail
    rx1189_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1189_cur."!cursor_pos"(rx1189_pos)
    $P10 = rx1189_cur."quote_EXPR"()
    unless $P10, rx1189_fail
    rx1189_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1189_pos = $P10."pos"()
  # rx pass
    rx1189_cur."!cursor_pass"(rx1189_pos, "quote:sym<Q:PIR>")
    if_null rx1189_debug, debug_889
    rx1189_cur."!cursor_debug"("PASS", "quote:sym<Q:PIR>", " at pos=", rx1189_pos)
  debug_889:
    .return (rx1189_cur)
  rx1189_restart:
.annotate 'line', 4
    if_null rx1189_debug, debug_890
    rx1189_cur."!cursor_debug"("NEXT", "quote:sym<Q:PIR>")
  debug_890:
  rx1189_fail:
    (rx1189_rep, rx1189_pos, $I10, $P10) = rx1189_cur."!mark_fail"(0)
    lt rx1189_pos, -1, rx1189_done
    eq rx1189_pos, -1, rx1189_fail
    jump $I10
  rx1189_done:
    rx1189_cur."!cursor_fail"()
    if_null rx1189_debug, debug_891
    rx1189_cur."!cursor_debug"("FAIL", "quote:sym<Q:PIR>")
  debug_891:
    .return (rx1189_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q:PIR>"  :nsentry("!PREFIX__quote:sym<Q:PIR>") :subid("247_1300057348.719") :method
.annotate 'line', 4
    $P1191 = self."!PREFIX__!subrule"("ws", "Q:PIR")
    new $P1192, "ResizablePMCArray"
    push $P1192, $P1191
    .return ($P1192)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym</ />"  :subid("248_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1195_tgt
    .local int rx1195_pos
    .local int rx1195_off
    .local int rx1195_eos
    .local int rx1195_rep
    .local pmc rx1195_cur
    .local pmc rx1195_debug
    (rx1195_cur, rx1195_pos, rx1195_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1195_cur
    .local pmc match
    .lex "$/", match
    length rx1195_eos, rx1195_tgt
    gt rx1195_pos, rx1195_eos, rx1195_done
    set rx1195_off, 0
    lt rx1195_pos, 2, rx1195_start
    sub rx1195_off, rx1195_pos, 1
    substr rx1195_tgt, rx1195_tgt, rx1195_off
  rx1195_start:
    eq $I10, 1, rx1195_restart
    if_null rx1195_debug, debug_892
    rx1195_cur."!cursor_debug"("START", "quote:sym</ />")
  debug_892:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1199_done
    goto rxscan1199_scan
  rxscan1199_loop:
    (rx1195_pos) = rx1195_cur."from"()
    inc rx1195_pos
    rx1195_cur."!cursor_from"(rx1195_pos)
    ge rx1195_pos, rx1195_eos, rxscan1199_done
  rxscan1199_scan:
    set_addr $I10, rxscan1199_loop
    rx1195_cur."!mark_push"(0, rx1195_pos, $I10)
  rxscan1199_done:
.annotate 'line', 550
  # rx literal  "/"
    add $I11, rx1195_pos, 1
    gt $I11, rx1195_eos, rx1195_fail
    sub $I11, rx1195_pos, rx1195_off
    ord $I11, rx1195_tgt, $I11
    ne $I11, 47, rx1195_fail
    add rx1195_pos, 1
.annotate 'line', 551
  # rx subrule "newpad" subtype=method negate=
    rx1195_cur."!cursor_pos"(rx1195_pos)
    $P10 = rx1195_cur."newpad"()
    unless $P10, rx1195_fail
    rx1195_pos = $P10."pos"()
.annotate 'line', 552
  # rx reduce name="quote:sym</ />" key="open"
    rx1195_cur."!cursor_pos"(rx1195_pos)
    rx1195_cur."!reduce"("quote:sym</ />", "open")
.annotate 'line', 553
  # rx subrule "LANG" subtype=capture negate=
    rx1195_cur."!cursor_pos"(rx1195_pos)
    $P10 = rx1195_cur."LANG"("Regex", "nibbler")
    unless $P10, rx1195_fail
    rx1195_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx1195_pos = $P10."pos"()
.annotate 'line', 554
  # rx literal  "/"
    add $I11, rx1195_pos, 1
    gt $I11, rx1195_eos, rx1195_fail
    sub $I11, rx1195_pos, rx1195_off
    ord $I11, rx1195_tgt, $I11
    ne $I11, 47, rx1195_fail
    add rx1195_pos, 1
.annotate 'line', 549
  # rx pass
    rx1195_cur."!cursor_pass"(rx1195_pos, "quote:sym</ />")
    if_null rx1195_debug, debug_893
    rx1195_cur."!cursor_debug"("PASS", "quote:sym</ />", " at pos=", rx1195_pos)
  debug_893:
    .return (rx1195_cur)
  rx1195_restart:
.annotate 'line', 4
    if_null rx1195_debug, debug_894
    rx1195_cur."!cursor_debug"("NEXT", "quote:sym</ />")
  debug_894:
  rx1195_fail:
    (rx1195_rep, rx1195_pos, $I10, $P10) = rx1195_cur."!mark_fail"(0)
    lt rx1195_pos, -1, rx1195_done
    eq rx1195_pos, -1, rx1195_fail
    jump $I10
  rx1195_done:
    rx1195_cur."!cursor_fail"()
    if_null rx1195_debug, debug_895
    rx1195_cur."!cursor_debug"("FAIL", "quote:sym</ />")
  debug_895:
    .return (rx1195_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym</ />"  :nsentry("!PREFIX__quote:sym</ />") :subid("249_1300057348.719") :method
.annotate 'line', 4
    $P1197 = self."!PREFIX__!subrule"("newpad", "/")
    new $P1198, "ResizablePMCArray"
    push $P1198, $P1197
    .return ($P1198)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<$>"  :subid("250_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_debug
    (rx1201_cur, rx1201_pos, rx1201_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1201_cur
    .local pmc match
    .lex "$/", match
    length rx1201_eos, rx1201_tgt
    gt rx1201_pos, rx1201_eos, rx1201_done
    set rx1201_off, 0
    lt rx1201_pos, 2, rx1201_start
    sub rx1201_off, rx1201_pos, 1
    substr rx1201_tgt, rx1201_tgt, rx1201_off
  rx1201_start:
    eq $I10, 1, rx1201_restart
    if_null rx1201_debug, debug_896
    rx1201_cur."!cursor_debug"("START", "quote_escape:sym<$>")
  debug_896:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1204_done
    goto rxscan1204_scan
  rxscan1204_loop:
    (rx1201_pos) = rx1201_cur."from"()
    inc rx1201_pos
    rx1201_cur."!cursor_from"(rx1201_pos)
    ge rx1201_pos, rx1201_eos, rxscan1204_done
  rxscan1204_scan:
    set_addr $I10, rxscan1204_loop
    rx1201_cur."!mark_push"(0, rx1201_pos, $I10)
  rxscan1204_done:
.annotate 'line', 557
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1201_pos, rx1201_off
    substr $S10, rx1201_tgt, $I10, 1
    index $I11, "$", $S10
    lt $I11, 0, rx1201_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx1201_cur."!cursor_pos"(rx1201_pos)
    $P10 = rx1201_cur."quotemod_check"("s")
    unless $P10, rx1201_fail
  # rx subrule "variable" subtype=capture negate=
    rx1201_cur."!cursor_pos"(rx1201_pos)
    $P10 = rx1201_cur."variable"()
    unless $P10, rx1201_fail
    rx1201_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1201_pos = $P10."pos"()
  # rx pass
    rx1201_cur."!cursor_pass"(rx1201_pos, "quote_escape:sym<$>")
    if_null rx1201_debug, debug_897
    rx1201_cur."!cursor_debug"("PASS", "quote_escape:sym<$>", " at pos=", rx1201_pos)
  debug_897:
    .return (rx1201_cur)
  rx1201_restart:
.annotate 'line', 4
    if_null rx1201_debug, debug_898
    rx1201_cur."!cursor_debug"("NEXT", "quote_escape:sym<$>")
  debug_898:
  rx1201_fail:
    (rx1201_rep, rx1201_pos, $I10, $P10) = rx1201_cur."!mark_fail"(0)
    lt rx1201_pos, -1, rx1201_done
    eq rx1201_pos, -1, rx1201_fail
    jump $I10
  rx1201_done:
    rx1201_cur."!cursor_fail"()
    if_null rx1201_debug, debug_899
    rx1201_cur."!cursor_debug"("FAIL", "quote_escape:sym<$>")
  debug_899:
    .return (rx1201_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<$>"  :nsentry("!PREFIX__quote_escape:sym<$>") :subid("251_1300057348.719") :method
.annotate 'line', 4
    new $P1203, "ResizablePMCArray"
    push $P1203, "$"
    .return ($P1203)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<{ }>"  :subid("252_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1206_tgt
    .local int rx1206_pos
    .local int rx1206_off
    .local int rx1206_eos
    .local int rx1206_rep
    .local pmc rx1206_cur
    .local pmc rx1206_debug
    (rx1206_cur, rx1206_pos, rx1206_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1206_cur
    .local pmc match
    .lex "$/", match
    length rx1206_eos, rx1206_tgt
    gt rx1206_pos, rx1206_eos, rx1206_done
    set rx1206_off, 0
    lt rx1206_pos, 2, rx1206_start
    sub rx1206_off, rx1206_pos, 1
    substr rx1206_tgt, rx1206_tgt, rx1206_off
  rx1206_start:
    eq $I10, 1, rx1206_restart
    if_null rx1206_debug, debug_900
    rx1206_cur."!cursor_debug"("START", "quote_escape:sym<{ }>")
  debug_900:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1209_done
    goto rxscan1209_scan
  rxscan1209_loop:
    (rx1206_pos) = rx1206_cur."from"()
    inc rx1206_pos
    rx1206_cur."!cursor_from"(rx1206_pos)
    ge rx1206_pos, rx1206_eos, rxscan1209_done
  rxscan1209_scan:
    set_addr $I10, rxscan1209_loop
    rx1206_cur."!mark_push"(0, rx1206_pos, $I10)
  rxscan1209_done:
.annotate 'line', 558
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1206_pos, rx1206_off
    substr $S10, rx1206_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1206_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx1206_cur."!cursor_pos"(rx1206_pos)
    $P10 = rx1206_cur."quotemod_check"("c")
    unless $P10, rx1206_fail
  # rx subrule "block" subtype=capture negate=
    rx1206_cur."!cursor_pos"(rx1206_pos)
    $P10 = rx1206_cur."block"()
    unless $P10, rx1206_fail
    rx1206_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1206_pos = $P10."pos"()
  # rx pass
    rx1206_cur."!cursor_pass"(rx1206_pos, "quote_escape:sym<{ }>")
    if_null rx1206_debug, debug_901
    rx1206_cur."!cursor_debug"("PASS", "quote_escape:sym<{ }>", " at pos=", rx1206_pos)
  debug_901:
    .return (rx1206_cur)
  rx1206_restart:
.annotate 'line', 4
    if_null rx1206_debug, debug_902
    rx1206_cur."!cursor_debug"("NEXT", "quote_escape:sym<{ }>")
  debug_902:
  rx1206_fail:
    (rx1206_rep, rx1206_pos, $I10, $P10) = rx1206_cur."!mark_fail"(0)
    lt rx1206_pos, -1, rx1206_done
    eq rx1206_pos, -1, rx1206_fail
    jump $I10
  rx1206_done:
    rx1206_cur."!cursor_fail"()
    if_null rx1206_debug, debug_903
    rx1206_cur."!cursor_debug"("FAIL", "quote_escape:sym<{ }>")
  debug_903:
    .return (rx1206_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<{ }>"  :nsentry("!PREFIX__quote_escape:sym<{ }>") :subid("253_1300057348.719") :method
.annotate 'line', 4
    new $P1208, "ResizablePMCArray"
    push $P1208, "{"
    .return ($P1208)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("254_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1211_tgt
    .local int rx1211_pos
    .local int rx1211_off
    .local int rx1211_eos
    .local int rx1211_rep
    .local pmc rx1211_cur
    .local pmc rx1211_debug
    (rx1211_cur, rx1211_pos, rx1211_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1211_cur
    .local pmc match
    .lex "$/", match
    length rx1211_eos, rx1211_tgt
    gt rx1211_pos, rx1211_eos, rx1211_done
    set rx1211_off, 0
    lt rx1211_pos, 2, rx1211_start
    sub rx1211_off, rx1211_pos, 1
    substr rx1211_tgt, rx1211_tgt, rx1211_off
  rx1211_start:
    eq $I10, 1, rx1211_restart
    if_null rx1211_debug, debug_904
    rx1211_cur."!cursor_debug"("START", "quote_escape:sym<esc>")
  debug_904:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1214_done
    goto rxscan1214_scan
  rxscan1214_loop:
    (rx1211_pos) = rx1211_cur."from"()
    inc rx1211_pos
    rx1211_cur."!cursor_from"(rx1211_pos)
    ge rx1211_pos, rx1211_eos, rxscan1214_done
  rxscan1214_scan:
    set_addr $I10, rxscan1214_loop
    rx1211_cur."!mark_push"(0, rx1211_pos, $I10)
  rxscan1214_done:
.annotate 'line', 559
  # rx literal  "\\e"
    add $I11, rx1211_pos, 2
    gt $I11, rx1211_eos, rx1211_fail
    sub $I11, rx1211_pos, rx1211_off
    substr $S10, rx1211_tgt, $I11, 2
    ne $S10, "\\e", rx1211_fail
    add rx1211_pos, 2
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx1211_cur."!cursor_pos"(rx1211_pos)
    $P10 = rx1211_cur."quotemod_check"("b")
    unless $P10, rx1211_fail
  # rx pass
    rx1211_cur."!cursor_pass"(rx1211_pos, "quote_escape:sym<esc>")
    if_null rx1211_debug, debug_905
    rx1211_cur."!cursor_debug"("PASS", "quote_escape:sym<esc>", " at pos=", rx1211_pos)
  debug_905:
    .return (rx1211_cur)
  rx1211_restart:
.annotate 'line', 4
    if_null rx1211_debug, debug_906
    rx1211_cur."!cursor_debug"("NEXT", "quote_escape:sym<esc>")
  debug_906:
  rx1211_fail:
    (rx1211_rep, rx1211_pos, $I10, $P10) = rx1211_cur."!mark_fail"(0)
    lt rx1211_pos, -1, rx1211_done
    eq rx1211_pos, -1, rx1211_fail
    jump $I10
  rx1211_done:
    rx1211_cur."!cursor_fail"()
    if_null rx1211_debug, debug_907
    rx1211_cur."!cursor_debug"("FAIL", "quote_escape:sym<esc>")
  debug_907:
    .return (rx1211_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<esc>"  :nsentry("!PREFIX__quote_escape:sym<esc>") :subid("255_1300057348.719") :method
.annotate 'line', 4
    new $P1213, "ResizablePMCArray"
    push $P1213, "\\e"
    .return ($P1213)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<( )>"  :subid("256_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1216_tgt
    .local int rx1216_pos
    .local int rx1216_off
    .local int rx1216_eos
    .local int rx1216_rep
    .local pmc rx1216_cur
    .local pmc rx1216_debug
    (rx1216_cur, rx1216_pos, rx1216_tgt, $I10) = self."!cursor_start"()
    rx1216_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx1216_cur
    .local pmc match
    .lex "$/", match
    length rx1216_eos, rx1216_tgt
    gt rx1216_pos, rx1216_eos, rx1216_done
    set rx1216_off, 0
    lt rx1216_pos, 2, rx1216_start
    sub rx1216_off, rx1216_pos, 1
    substr rx1216_tgt, rx1216_tgt, rx1216_off
  rx1216_start:
    eq $I10, 1, rx1216_restart
    if_null rx1216_debug, debug_908
    rx1216_cur."!cursor_debug"("START", "circumfix:sym<( )>")
  debug_908:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1220_done
    goto rxscan1220_scan
  rxscan1220_loop:
    (rx1216_pos) = rx1216_cur."from"()
    inc rx1216_pos
    rx1216_cur."!cursor_from"(rx1216_pos)
    ge rx1216_pos, rx1216_eos, rxscan1220_done
  rxscan1220_scan:
    set_addr $I10, rxscan1220_loop
    rx1216_cur."!mark_push"(0, rx1216_pos, $I10)
  rxscan1220_done:
.annotate 'line', 561
  # rx literal  "("
    add $I11, rx1216_pos, 1
    gt $I11, rx1216_eos, rx1216_fail
    sub $I11, rx1216_pos, rx1216_off
    ord $I11, rx1216_tgt, $I11
    ne $I11, 40, rx1216_fail
    add rx1216_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1216_cur."!cursor_pos"(rx1216_pos)
    $P10 = rx1216_cur."ws"()
    unless $P10, rx1216_fail
    rx1216_pos = $P10."pos"()
  # rx rxquantr1221 ** 0..1
    set_addr $I10, rxquantr1221_done
    rx1216_cur."!mark_push"(0, rx1216_pos, $I10)
  rxquantr1221_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx1216_cur."!cursor_pos"(rx1216_pos)
    $P10 = rx1216_cur."EXPR"()
    unless $P10, rx1216_fail
    goto rxsubrule1222_pass
  rxsubrule1222_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1216_fail
  rxsubrule1222_pass:
    set_addr $I10, rxsubrule1222_back
    rx1216_cur."!mark_push"(0, rx1216_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx1216_pos = $P10."pos"()
    set_addr $I10, rxquantr1221_done
    (rx1216_rep) = rx1216_cur."!mark_commit"($I10)
  rxquantr1221_done:
  # rx literal  ")"
    add $I11, rx1216_pos, 1
    gt $I11, rx1216_eos, rx1216_fail
    sub $I11, rx1216_pos, rx1216_off
    ord $I11, rx1216_tgt, $I11
    ne $I11, 41, rx1216_fail
    add rx1216_pos, 1
  # rx pass
    rx1216_cur."!cursor_pass"(rx1216_pos, "circumfix:sym<( )>")
    if_null rx1216_debug, debug_909
    rx1216_cur."!cursor_debug"("PASS", "circumfix:sym<( )>", " at pos=", rx1216_pos)
  debug_909:
    .return (rx1216_cur)
  rx1216_restart:
.annotate 'line', 4
    if_null rx1216_debug, debug_910
    rx1216_cur."!cursor_debug"("NEXT", "circumfix:sym<( )>")
  debug_910:
  rx1216_fail:
    (rx1216_rep, rx1216_pos, $I10, $P10) = rx1216_cur."!mark_fail"(0)
    lt rx1216_pos, -1, rx1216_done
    eq rx1216_pos, -1, rx1216_fail
    jump $I10
  rx1216_done:
    rx1216_cur."!cursor_fail"()
    if_null rx1216_debug, debug_911
    rx1216_cur."!cursor_debug"("FAIL", "circumfix:sym<( )>")
  debug_911:
    .return (rx1216_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<( )>"  :nsentry("!PREFIX__circumfix:sym<( )>") :subid("257_1300057348.719") :method
.annotate 'line', 4
    $P1218 = self."!PREFIX__!subrule"("ws", "(")
    new $P1219, "ResizablePMCArray"
    push $P1219, $P1218
    .return ($P1219)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<[ ]>"  :subid("258_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1224_tgt
    .local int rx1224_pos
    .local int rx1224_off
    .local int rx1224_eos
    .local int rx1224_rep
    .local pmc rx1224_cur
    .local pmc rx1224_debug
    (rx1224_cur, rx1224_pos, rx1224_tgt, $I10) = self."!cursor_start"()
    rx1224_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx1224_cur
    .local pmc match
    .lex "$/", match
    length rx1224_eos, rx1224_tgt
    gt rx1224_pos, rx1224_eos, rx1224_done
    set rx1224_off, 0
    lt rx1224_pos, 2, rx1224_start
    sub rx1224_off, rx1224_pos, 1
    substr rx1224_tgt, rx1224_tgt, rx1224_off
  rx1224_start:
    eq $I10, 1, rx1224_restart
    if_null rx1224_debug, debug_912
    rx1224_cur."!cursor_debug"("START", "circumfix:sym<[ ]>")
  debug_912:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1228_done
    goto rxscan1228_scan
  rxscan1228_loop:
    (rx1224_pos) = rx1224_cur."from"()
    inc rx1224_pos
    rx1224_cur."!cursor_from"(rx1224_pos)
    ge rx1224_pos, rx1224_eos, rxscan1228_done
  rxscan1228_scan:
    set_addr $I10, rxscan1228_loop
    rx1224_cur."!mark_push"(0, rx1224_pos, $I10)
  rxscan1228_done:
.annotate 'line', 562
  # rx literal  "["
    add $I11, rx1224_pos, 1
    gt $I11, rx1224_eos, rx1224_fail
    sub $I11, rx1224_pos, rx1224_off
    ord $I11, rx1224_tgt, $I11
    ne $I11, 91, rx1224_fail
    add rx1224_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1224_cur."!cursor_pos"(rx1224_pos)
    $P10 = rx1224_cur."ws"()
    unless $P10, rx1224_fail
    rx1224_pos = $P10."pos"()
  # rx rxquantr1229 ** 0..1
    set_addr $I10, rxquantr1229_done
    rx1224_cur."!mark_push"(0, rx1224_pos, $I10)
  rxquantr1229_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx1224_cur."!cursor_pos"(rx1224_pos)
    $P10 = rx1224_cur."EXPR"()
    unless $P10, rx1224_fail
    goto rxsubrule1230_pass
  rxsubrule1230_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1224_fail
  rxsubrule1230_pass:
    set_addr $I10, rxsubrule1230_back
    rx1224_cur."!mark_push"(0, rx1224_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx1224_pos = $P10."pos"()
    set_addr $I10, rxquantr1229_done
    (rx1224_rep) = rx1224_cur."!mark_commit"($I10)
  rxquantr1229_done:
  # rx literal  "]"
    add $I11, rx1224_pos, 1
    gt $I11, rx1224_eos, rx1224_fail
    sub $I11, rx1224_pos, rx1224_off
    ord $I11, rx1224_tgt, $I11
    ne $I11, 93, rx1224_fail
    add rx1224_pos, 1
  # rx pass
    rx1224_cur."!cursor_pass"(rx1224_pos, "circumfix:sym<[ ]>")
    if_null rx1224_debug, debug_913
    rx1224_cur."!cursor_debug"("PASS", "circumfix:sym<[ ]>", " at pos=", rx1224_pos)
  debug_913:
    .return (rx1224_cur)
  rx1224_restart:
.annotate 'line', 4
    if_null rx1224_debug, debug_914
    rx1224_cur."!cursor_debug"("NEXT", "circumfix:sym<[ ]>")
  debug_914:
  rx1224_fail:
    (rx1224_rep, rx1224_pos, $I10, $P10) = rx1224_cur."!mark_fail"(0)
    lt rx1224_pos, -1, rx1224_done
    eq rx1224_pos, -1, rx1224_fail
    jump $I10
  rx1224_done:
    rx1224_cur."!cursor_fail"()
    if_null rx1224_debug, debug_915
    rx1224_cur."!cursor_debug"("FAIL", "circumfix:sym<[ ]>")
  debug_915:
    .return (rx1224_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<[ ]>"  :nsentry("!PREFIX__circumfix:sym<[ ]>") :subid("259_1300057348.719") :method
.annotate 'line', 4
    $P1226 = self."!PREFIX__!subrule"("ws", "[")
    new $P1227, "ResizablePMCArray"
    push $P1227, $P1226
    .return ($P1227)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<ang>"  :subid("260_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1232_tgt
    .local int rx1232_pos
    .local int rx1232_off
    .local int rx1232_eos
    .local int rx1232_rep
    .local pmc rx1232_cur
    .local pmc rx1232_debug
    (rx1232_cur, rx1232_pos, rx1232_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1232_cur
    .local pmc match
    .lex "$/", match
    length rx1232_eos, rx1232_tgt
    gt rx1232_pos, rx1232_eos, rx1232_done
    set rx1232_off, 0
    lt rx1232_pos, 2, rx1232_start
    sub rx1232_off, rx1232_pos, 1
    substr rx1232_tgt, rx1232_tgt, rx1232_off
  rx1232_start:
    eq $I10, 1, rx1232_restart
    if_null rx1232_debug, debug_916
    rx1232_cur."!cursor_debug"("START", "circumfix:sym<ang>")
  debug_916:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1235_done
    goto rxscan1235_scan
  rxscan1235_loop:
    (rx1232_pos) = rx1232_cur."from"()
    inc rx1232_pos
    rx1232_cur."!cursor_from"(rx1232_pos)
    ge rx1232_pos, rx1232_eos, rxscan1235_done
  rxscan1235_scan:
    set_addr $I10, rxscan1235_loop
    rx1232_cur."!mark_push"(0, rx1232_pos, $I10)
  rxscan1235_done:
.annotate 'line', 563
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1232_pos, rx1232_off
    substr $S10, rx1232_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx1232_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1232_cur."!cursor_pos"(rx1232_pos)
    $P10 = rx1232_cur."quote_EXPR"(":q", ":w")
    unless $P10, rx1232_fail
    rx1232_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1232_pos = $P10."pos"()
  # rx pass
    rx1232_cur."!cursor_pass"(rx1232_pos, "circumfix:sym<ang>")
    if_null rx1232_debug, debug_917
    rx1232_cur."!cursor_debug"("PASS", "circumfix:sym<ang>", " at pos=", rx1232_pos)
  debug_917:
    .return (rx1232_cur)
  rx1232_restart:
.annotate 'line', 4
    if_null rx1232_debug, debug_918
    rx1232_cur."!cursor_debug"("NEXT", "circumfix:sym<ang>")
  debug_918:
  rx1232_fail:
    (rx1232_rep, rx1232_pos, $I10, $P10) = rx1232_cur."!mark_fail"(0)
    lt rx1232_pos, -1, rx1232_done
    eq rx1232_pos, -1, rx1232_fail
    jump $I10
  rx1232_done:
    rx1232_cur."!cursor_fail"()
    if_null rx1232_debug, debug_919
    rx1232_cur."!cursor_debug"("FAIL", "circumfix:sym<ang>")
  debug_919:
    .return (rx1232_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<ang>"  :nsentry("!PREFIX__circumfix:sym<ang>") :subid("261_1300057348.719") :method
.annotate 'line', 4
    new $P1234, "ResizablePMCArray"
    push $P1234, "<"
    .return ($P1234)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("262_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1237_tgt
    .local int rx1237_pos
    .local int rx1237_off
    .local int rx1237_eos
    .local int rx1237_rep
    .local pmc rx1237_cur
    .local pmc rx1237_debug
    (rx1237_cur, rx1237_pos, rx1237_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1237_cur
    .local pmc match
    .lex "$/", match
    length rx1237_eos, rx1237_tgt
    gt rx1237_pos, rx1237_eos, rx1237_done
    set rx1237_off, 0
    lt rx1237_pos, 2, rx1237_start
    sub rx1237_off, rx1237_pos, 1
    substr rx1237_tgt, rx1237_tgt, rx1237_off
  rx1237_start:
    eq $I10, 1, rx1237_restart
    if_null rx1237_debug, debug_920
    rx1237_cur."!cursor_debug"("START", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_920:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1240_done
    goto rxscan1240_scan
  rxscan1240_loop:
    (rx1237_pos) = rx1237_cur."from"()
    inc rx1237_pos
    rx1237_cur."!cursor_from"(rx1237_pos)
    ge rx1237_pos, rx1237_eos, rxscan1240_done
  rxscan1240_scan:
    set_addr $I10, rxscan1240_loop
    rx1237_cur."!mark_push"(0, rx1237_pos, $I10)
  rxscan1240_done:
.annotate 'line', 564
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1237_pos, rx1237_off
    substr $S10, rx1237_tgt, $I10, 1
    index $I11, unicode:"\x{ab}", $S10
    lt $I11, 0, rx1237_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1237_cur."!cursor_pos"(rx1237_pos)
    $P10 = rx1237_cur."quote_EXPR"(":qq", ":w")
    unless $P10, rx1237_fail
    rx1237_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1237_pos = $P10."pos"()
  # rx pass
    rx1237_cur."!cursor_pass"(rx1237_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>")
    if_null rx1237_debug, debug_921
    rx1237_cur."!cursor_debug"("PASS", unicode:"circumfix:sym<\x{ab} \x{bb}>", " at pos=", rx1237_pos)
  debug_921:
    .return (rx1237_cur)
  rx1237_restart:
.annotate 'line', 4
    if_null rx1237_debug, debug_922
    rx1237_cur."!cursor_debug"("NEXT", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_922:
  rx1237_fail:
    (rx1237_rep, rx1237_pos, $I10, $P10) = rx1237_cur."!mark_fail"(0)
    lt rx1237_pos, -1, rx1237_done
    eq rx1237_pos, -1, rx1237_fail
    jump $I10
  rx1237_done:
    rx1237_cur."!cursor_fail"()
    if_null rx1237_debug, debug_923
    rx1237_cur."!cursor_debug"("FAIL", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_923:
    .return (rx1237_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"  :nsentry(unicode:"!PREFIX__circumfix:sym<\\x{ab} \\x{bb}>") :subid("263_1300057348.719") :method
.annotate 'line', 4
    new $P1239, "ResizablePMCArray"
    push $P1239, unicode:"\x{ab}"
    .return ($P1239)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<{ }>"  :subid("264_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_debug
    (rx1242_cur, rx1242_pos, rx1242_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1242_cur
    .local pmc match
    .lex "$/", match
    length rx1242_eos, rx1242_tgt
    gt rx1242_pos, rx1242_eos, rx1242_done
    set rx1242_off, 0
    lt rx1242_pos, 2, rx1242_start
    sub rx1242_off, rx1242_pos, 1
    substr rx1242_tgt, rx1242_tgt, rx1242_off
  rx1242_start:
    eq $I10, 1, rx1242_restart
    if_null rx1242_debug, debug_924
    rx1242_cur."!cursor_debug"("START", "circumfix:sym<{ }>")
  debug_924:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1245_done
    goto rxscan1245_scan
  rxscan1245_loop:
    (rx1242_pos) = rx1242_cur."from"()
    inc rx1242_pos
    rx1242_cur."!cursor_from"(rx1242_pos)
    ge rx1242_pos, rx1242_eos, rxscan1245_done
  rxscan1245_scan:
    set_addr $I10, rxscan1245_loop
    rx1242_cur."!mark_push"(0, rx1242_pos, $I10)
  rxscan1245_done:
.annotate 'line', 565
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1242_pos, rx1242_off
    substr $S10, rx1242_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1242_fail
  # rx subrule "pblock" subtype=capture negate=
    rx1242_cur."!cursor_pos"(rx1242_pos)
    $P10 = rx1242_cur."pblock"()
    unless $P10, rx1242_fail
    rx1242_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1242_pos = $P10."pos"()
  # rx pass
    rx1242_cur."!cursor_pass"(rx1242_pos, "circumfix:sym<{ }>")
    if_null rx1242_debug, debug_925
    rx1242_cur."!cursor_debug"("PASS", "circumfix:sym<{ }>", " at pos=", rx1242_pos)
  debug_925:
    .return (rx1242_cur)
  rx1242_restart:
.annotate 'line', 4
    if_null rx1242_debug, debug_926
    rx1242_cur."!cursor_debug"("NEXT", "circumfix:sym<{ }>")
  debug_926:
  rx1242_fail:
    (rx1242_rep, rx1242_pos, $I10, $P10) = rx1242_cur."!mark_fail"(0)
    lt rx1242_pos, -1, rx1242_done
    eq rx1242_pos, -1, rx1242_fail
    jump $I10
  rx1242_done:
    rx1242_cur."!cursor_fail"()
    if_null rx1242_debug, debug_927
    rx1242_cur."!cursor_debug"("FAIL", "circumfix:sym<{ }>")
  debug_927:
    .return (rx1242_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<{ }>"  :nsentry("!PREFIX__circumfix:sym<{ }>") :subid("265_1300057348.719") :method
.annotate 'line', 4
    new $P1244, "ResizablePMCArray"
    push $P1244, "{"
    .return ($P1244)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<sigil>"  :subid("266_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1247_tgt
    .local int rx1247_pos
    .local int rx1247_off
    .local int rx1247_eos
    .local int rx1247_rep
    .local pmc rx1247_cur
    .local pmc rx1247_debug
    (rx1247_cur, rx1247_pos, rx1247_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1247_cur
    .local pmc match
    .lex "$/", match
    length rx1247_eos, rx1247_tgt
    gt rx1247_pos, rx1247_eos, rx1247_done
    set rx1247_off, 0
    lt rx1247_pos, 2, rx1247_start
    sub rx1247_off, rx1247_pos, 1
    substr rx1247_tgt, rx1247_tgt, rx1247_off
  rx1247_start:
    eq $I10, 1, rx1247_restart
    if_null rx1247_debug, debug_928
    rx1247_cur."!cursor_debug"("START", "circumfix:sym<sigil>")
  debug_928:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1251_done
    goto rxscan1251_scan
  rxscan1251_loop:
    (rx1247_pos) = rx1247_cur."from"()
    inc rx1247_pos
    rx1247_cur."!cursor_from"(rx1247_pos)
    ge rx1247_pos, rx1247_eos, rxscan1251_done
  rxscan1251_scan:
    set_addr $I10, rxscan1251_loop
    rx1247_cur."!mark_push"(0, rx1247_pos, $I10)
  rxscan1251_done:
.annotate 'line', 566
  # rx subrule "sigil" subtype=capture negate=
    rx1247_cur."!cursor_pos"(rx1247_pos)
    $P10 = rx1247_cur."sigil"()
    unless $P10, rx1247_fail
    rx1247_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1247_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx1247_pos, 1
    gt $I11, rx1247_eos, rx1247_fail
    sub $I11, rx1247_pos, rx1247_off
    ord $I11, rx1247_tgt, $I11
    ne $I11, 40, rx1247_fail
    add rx1247_pos, 1
  # rx subrule "semilist" subtype=capture negate=
    rx1247_cur."!cursor_pos"(rx1247_pos)
    $P10 = rx1247_cur."semilist"()
    unless $P10, rx1247_fail
    rx1247_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("semilist")
    rx1247_pos = $P10."pos"()
  alt1252_0:
    set_addr $I10, alt1252_1
    rx1247_cur."!mark_push"(0, rx1247_pos, $I10)
  # rx literal  ")"
    add $I11, rx1247_pos, 1
    gt $I11, rx1247_eos, rx1247_fail
    sub $I11, rx1247_pos, rx1247_off
    ord $I11, rx1247_tgt, $I11
    ne $I11, 41, rx1247_fail
    add rx1247_pos, 1
    goto alt1252_end
  alt1252_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx1247_cur."!cursor_pos"(rx1247_pos)
    $P10 = rx1247_cur."FAILGOAL"("')'")
    unless $P10, rx1247_fail
    goto rxsubrule1254_pass
  rxsubrule1254_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1247_fail
  rxsubrule1254_pass:
    set_addr $I10, rxsubrule1254_back
    rx1247_cur."!mark_push"(0, rx1247_pos, $I10, $P10)
    rx1247_pos = $P10."pos"()
  alt1252_end:
  # rx pass
    rx1247_cur."!cursor_pass"(rx1247_pos, "circumfix:sym<sigil>")
    if_null rx1247_debug, debug_929
    rx1247_cur."!cursor_debug"("PASS", "circumfix:sym<sigil>", " at pos=", rx1247_pos)
  debug_929:
    .return (rx1247_cur)
  rx1247_restart:
.annotate 'line', 4
    if_null rx1247_debug, debug_930
    rx1247_cur."!cursor_debug"("NEXT", "circumfix:sym<sigil>")
  debug_930:
  rx1247_fail:
    (rx1247_rep, rx1247_pos, $I10, $P10) = rx1247_cur."!mark_fail"(0)
    lt rx1247_pos, -1, rx1247_done
    eq rx1247_pos, -1, rx1247_fail
    jump $I10
  rx1247_done:
    rx1247_cur."!cursor_fail"()
    if_null rx1247_debug, debug_931
    rx1247_cur."!cursor_debug"("FAIL", "circumfix:sym<sigil>")
  debug_931:
    .return (rx1247_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<sigil>"  :nsentry("!PREFIX__circumfix:sym<sigil>") :subid("267_1300057348.719") :method
.annotate 'line', 4
    $P1249 = self."!PREFIX__!subrule"("sigil", "")
    new $P1250, "ResizablePMCArray"
    push $P1250, $P1249
    .return ($P1250)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "semilist"  :subid("268_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1256_tgt
    .local int rx1256_pos
    .local int rx1256_off
    .local int rx1256_eos
    .local int rx1256_rep
    .local pmc rx1256_cur
    .local pmc rx1256_debug
    (rx1256_cur, rx1256_pos, rx1256_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1256_cur
    .local pmc match
    .lex "$/", match
    length rx1256_eos, rx1256_tgt
    gt rx1256_pos, rx1256_eos, rx1256_done
    set rx1256_off, 0
    lt rx1256_pos, 2, rx1256_start
    sub rx1256_off, rx1256_pos, 1
    substr rx1256_tgt, rx1256_tgt, rx1256_off
  rx1256_start:
    eq $I10, 1, rx1256_restart
    if_null rx1256_debug, debug_932
    rx1256_cur."!cursor_debug"("START", "semilist")
  debug_932:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1260_done
    goto rxscan1260_scan
  rxscan1260_loop:
    (rx1256_pos) = rx1256_cur."from"()
    inc rx1256_pos
    rx1256_cur."!cursor_from"(rx1256_pos)
    ge rx1256_pos, rx1256_eos, rxscan1260_done
  rxscan1260_scan:
    set_addr $I10, rxscan1260_loop
    rx1256_cur."!mark_push"(0, rx1256_pos, $I10)
  rxscan1260_done:
.annotate 'line', 568
  # rx subrule "ws" subtype=method negate=
    rx1256_cur."!cursor_pos"(rx1256_pos)
    $P10 = rx1256_cur."ws"()
    unless $P10, rx1256_fail
    rx1256_pos = $P10."pos"()
  # rx subrule "statement" subtype=capture negate=
    rx1256_cur."!cursor_pos"(rx1256_pos)
    $P10 = rx1256_cur."statement"()
    unless $P10, rx1256_fail
    rx1256_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1256_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1256_cur."!cursor_pos"(rx1256_pos)
    $P10 = rx1256_cur."ws"()
    unless $P10, rx1256_fail
    rx1256_pos = $P10."pos"()
  # rx pass
    rx1256_cur."!cursor_pass"(rx1256_pos, "semilist")
    if_null rx1256_debug, debug_933
    rx1256_cur."!cursor_debug"("PASS", "semilist", " at pos=", rx1256_pos)
  debug_933:
    .return (rx1256_cur)
  rx1256_restart:
.annotate 'line', 4
    if_null rx1256_debug, debug_934
    rx1256_cur."!cursor_debug"("NEXT", "semilist")
  debug_934:
  rx1256_fail:
    (rx1256_rep, rx1256_pos, $I10, $P10) = rx1256_cur."!mark_fail"(0)
    lt rx1256_pos, -1, rx1256_done
    eq rx1256_pos, -1, rx1256_fail
    jump $I10
  rx1256_done:
    rx1256_cur."!cursor_fail"()
    if_null rx1256_debug, debug_935
    rx1256_cur."!cursor_debug"("FAIL", "semilist")
  debug_935:
    .return (rx1256_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__semilist"  :nsentry("!PREFIX__semilist") :subid("269_1300057348.719") :method
.annotate 'line', 4
    $P1258 = self."!PREFIX__!subrule"("ws", "")
    new $P1259, "ResizablePMCArray"
    push $P1259, $P1258
    .return ($P1259)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1263"  :anon :subid("270_1300057348.719") :outer("11_1300057348.719")
.annotate 'line', 4
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "" :load :init :subid("post936") :outer("270_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P1264 = "270_1300057348.719" 
    .local pmc block
    set block, $P1264
.annotate 'line', 573
    get_hll_global $P1265, ["NQP"], "Grammar"
    $P1265."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 574
    get_hll_global $P1266, ["NQP"], "Grammar"
    $P1266."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 575
    get_hll_global $P1267, ["NQP"], "Grammar"
    $P1267."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 576
    get_hll_global $P1268, ["NQP"], "Grammar"
    $P1268."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 577
    get_hll_global $P1269, ["NQP"], "Grammar"
    $P1269."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 578
    get_hll_global $P1270, ["NQP"], "Grammar"
    $P1270."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 579
    get_hll_global $P1271, ["NQP"], "Grammar"
    $P1271."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 580
    get_hll_global $P1272, ["NQP"], "Grammar"
    $P1272."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 581
    get_hll_global $P1273, ["NQP"], "Grammar"
    $P1273."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 582
    get_hll_global $P1274, ["NQP"], "Grammar"
    $P1274."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 583
    get_hll_global $P1275, ["NQP"], "Grammar"
    $P1275."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 584
    get_hll_global $P1276, ["NQP"], "Grammar"
    $P1276."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 585
    get_hll_global $P1277, ["NQP"], "Grammar"
    $P1277."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 586
    get_hll_global $P1278, ["NQP"], "Grammar"
    $P1278."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 587
    get_hll_global $P1279, ["NQP"], "Grammar"
    $P1279."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixish"  :subid("271_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1281_tgt
    .local int rx1281_pos
    .local int rx1281_off
    .local int rx1281_eos
    .local int rx1281_rep
    .local pmc rx1281_cur
    .local pmc rx1281_debug
    (rx1281_cur, rx1281_pos, rx1281_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1281_cur
    .local pmc match
    .lex "$/", match
    length rx1281_eos, rx1281_tgt
    gt rx1281_pos, rx1281_eos, rx1281_done
    set rx1281_off, 0
    lt rx1281_pos, 2, rx1281_start
    sub rx1281_off, rx1281_pos, 1
    substr rx1281_tgt, rx1281_tgt, rx1281_off
  rx1281_start:
    eq $I10, 1, rx1281_restart
    if_null rx1281_debug, debug_937
    rx1281_cur."!cursor_debug"("START", "infixish")
  debug_937:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1284_done
    goto rxscan1284_scan
  rxscan1284_loop:
    (rx1281_pos) = rx1281_cur."from"()
    inc rx1281_pos
    rx1281_cur."!cursor_from"(rx1281_pos)
    ge rx1281_pos, rx1281_eos, rxscan1284_done
  rxscan1284_scan:
    set_addr $I10, rxscan1284_loop
    rx1281_cur."!mark_push"(0, rx1281_pos, $I10)
  rxscan1284_done:
.annotate 'line', 591
  # rx subrule "infixstopper" subtype=zerowidth negate=1
    rx1281_cur."!cursor_pos"(rx1281_pos)
    $P10 = rx1281_cur."infixstopper"()
    if $P10, rx1281_fail
  # rx subrule "infix" subtype=capture negate=
    rx1281_cur."!cursor_pos"(rx1281_pos)
    $P10 = rx1281_cur."infix"()
    unless $P10, rx1281_fail
    rx1281_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("OPER=infix")
    rx1281_pos = $P10."pos"()
  # rx pass
    rx1281_cur."!cursor_pass"(rx1281_pos, "infixish")
    if_null rx1281_debug, debug_938
    rx1281_cur."!cursor_debug"("PASS", "infixish", " at pos=", rx1281_pos)
  debug_938:
    .return (rx1281_cur)
  rx1281_restart:
.annotate 'line', 4
    if_null rx1281_debug, debug_939
    rx1281_cur."!cursor_debug"("NEXT", "infixish")
  debug_939:
  rx1281_fail:
    (rx1281_rep, rx1281_pos, $I10, $P10) = rx1281_cur."!mark_fail"(0)
    lt rx1281_pos, -1, rx1281_done
    eq rx1281_pos, -1, rx1281_fail
    jump $I10
  rx1281_done:
    rx1281_cur."!cursor_fail"()
    if_null rx1281_debug, debug_940
    rx1281_cur."!cursor_debug"("FAIL", "infixish")
  debug_940:
    .return (rx1281_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixish"  :nsentry("!PREFIX__infixish") :subid("272_1300057348.719") :method
.annotate 'line', 4
    new $P1283, "ResizablePMCArray"
    push $P1283, ""
    .return ($P1283)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixstopper"  :subid("273_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1286_tgt
    .local int rx1286_pos
    .local int rx1286_off
    .local int rx1286_eos
    .local int rx1286_rep
    .local pmc rx1286_cur
    .local pmc rx1286_debug
    (rx1286_cur, rx1286_pos, rx1286_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1286_cur
    .local pmc match
    .lex "$/", match
    length rx1286_eos, rx1286_tgt
    gt rx1286_pos, rx1286_eos, rx1286_done
    set rx1286_off, 0
    lt rx1286_pos, 2, rx1286_start
    sub rx1286_off, rx1286_pos, 1
    substr rx1286_tgt, rx1286_tgt, rx1286_off
  rx1286_start:
    eq $I10, 1, rx1286_restart
    if_null rx1286_debug, debug_941
    rx1286_cur."!cursor_debug"("START", "infixstopper")
  debug_941:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1289_done
    goto rxscan1289_scan
  rxscan1289_loop:
    (rx1286_pos) = rx1286_cur."from"()
    inc rx1286_pos
    rx1286_cur."!cursor_from"(rx1286_pos)
    ge rx1286_pos, rx1286_eos, rxscan1289_done
  rxscan1289_scan:
    set_addr $I10, rxscan1289_loop
    rx1286_cur."!mark_push"(0, rx1286_pos, $I10)
  rxscan1289_done:
.annotate 'line', 592
  # rx subrule "lambda" subtype=zerowidth negate=
    rx1286_cur."!cursor_pos"(rx1286_pos)
    $P10 = rx1286_cur."lambda"()
    unless $P10, rx1286_fail
  # rx pass
    rx1286_cur."!cursor_pass"(rx1286_pos, "infixstopper")
    if_null rx1286_debug, debug_942
    rx1286_cur."!cursor_debug"("PASS", "infixstopper", " at pos=", rx1286_pos)
  debug_942:
    .return (rx1286_cur)
  rx1286_restart:
.annotate 'line', 4
    if_null rx1286_debug, debug_943
    rx1286_cur."!cursor_debug"("NEXT", "infixstopper")
  debug_943:
  rx1286_fail:
    (rx1286_rep, rx1286_pos, $I10, $P10) = rx1286_cur."!mark_fail"(0)
    lt rx1286_pos, -1, rx1286_done
    eq rx1286_pos, -1, rx1286_fail
    jump $I10
  rx1286_done:
    rx1286_cur."!cursor_fail"()
    if_null rx1286_debug, debug_944
    rx1286_cur."!cursor_debug"("FAIL", "infixstopper")
  debug_944:
    .return (rx1286_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixstopper"  :nsentry("!PREFIX__infixstopper") :subid("274_1300057348.719") :method
.annotate 'line', 4
    new $P1288, "ResizablePMCArray"
    push $P1288, ""
    .return ($P1288)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<[ ]>"  :subid("275_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1291_tgt
    .local int rx1291_pos
    .local int rx1291_off
    .local int rx1291_eos
    .local int rx1291_rep
    .local pmc rx1291_cur
    .local pmc rx1291_debug
    (rx1291_cur, rx1291_pos, rx1291_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1291_cur
    .local pmc match
    .lex "$/", match
    length rx1291_eos, rx1291_tgt
    gt rx1291_pos, rx1291_eos, rx1291_done
    set rx1291_off, 0
    lt rx1291_pos, 2, rx1291_start
    sub rx1291_off, rx1291_pos, 1
    substr rx1291_tgt, rx1291_tgt, rx1291_off
  rx1291_start:
    eq $I10, 1, rx1291_restart
    if_null rx1291_debug, debug_945
    rx1291_cur."!cursor_debug"("START", "postcircumfix:sym<[ ]>")
  debug_945:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1295_done
    goto rxscan1295_scan
  rxscan1295_loop:
    (rx1291_pos) = rx1291_cur."from"()
    inc rx1291_pos
    rx1291_cur."!cursor_from"(rx1291_pos)
    ge rx1291_pos, rx1291_eos, rxscan1295_done
  rxscan1295_scan:
    set_addr $I10, rxscan1295_loop
    rx1291_cur."!mark_push"(0, rx1291_pos, $I10)
  rxscan1295_done:
.annotate 'line', 595
  # rx literal  "["
    add $I11, rx1291_pos, 1
    gt $I11, rx1291_eos, rx1291_fail
    sub $I11, rx1291_pos, rx1291_off
    ord $I11, rx1291_tgt, $I11
    ne $I11, 91, rx1291_fail
    add rx1291_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1291_cur."!cursor_pos"(rx1291_pos)
    $P10 = rx1291_cur."ws"()
    unless $P10, rx1291_fail
    rx1291_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1291_cur."!cursor_pos"(rx1291_pos)
    $P10 = rx1291_cur."EXPR"()
    unless $P10, rx1291_fail
    rx1291_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1291_pos = $P10."pos"()
  # rx literal  "]"
    add $I11, rx1291_pos, 1
    gt $I11, rx1291_eos, rx1291_fail
    sub $I11, rx1291_pos, rx1291_off
    ord $I11, rx1291_tgt, $I11
    ne $I11, 93, rx1291_fail
    add rx1291_pos, 1
.annotate 'line', 596
  # rx subrule "O" subtype=capture negate=
    rx1291_cur."!cursor_pos"(rx1291_pos)
    $P10 = rx1291_cur."O"("%methodop")
    unless $P10, rx1291_fail
    rx1291_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1291_pos = $P10."pos"()
.annotate 'line', 594
  # rx pass
    rx1291_cur."!cursor_pass"(rx1291_pos, "postcircumfix:sym<[ ]>")
    if_null rx1291_debug, debug_946
    rx1291_cur."!cursor_debug"("PASS", "postcircumfix:sym<[ ]>", " at pos=", rx1291_pos)
  debug_946:
    .return (rx1291_cur)
  rx1291_restart:
.annotate 'line', 4
    if_null rx1291_debug, debug_947
    rx1291_cur."!cursor_debug"("NEXT", "postcircumfix:sym<[ ]>")
  debug_947:
  rx1291_fail:
    (rx1291_rep, rx1291_pos, $I10, $P10) = rx1291_cur."!mark_fail"(0)
    lt rx1291_pos, -1, rx1291_done
    eq rx1291_pos, -1, rx1291_fail
    jump $I10
  rx1291_done:
    rx1291_cur."!cursor_fail"()
    if_null rx1291_debug, debug_948
    rx1291_cur."!cursor_debug"("FAIL", "postcircumfix:sym<[ ]>")
  debug_948:
    .return (rx1291_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<[ ]>"  :nsentry("!PREFIX__postcircumfix:sym<[ ]>") :subid("276_1300057348.719") :method
.annotate 'line', 4
    $P1293 = self."!PREFIX__!subrule"("ws", "[")
    new $P1294, "ResizablePMCArray"
    push $P1294, $P1293
    .return ($P1294)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<{ }>"  :subid("277_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1297_tgt
    .local int rx1297_pos
    .local int rx1297_off
    .local int rx1297_eos
    .local int rx1297_rep
    .local pmc rx1297_cur
    .local pmc rx1297_debug
    (rx1297_cur, rx1297_pos, rx1297_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1297_cur
    .local pmc match
    .lex "$/", match
    length rx1297_eos, rx1297_tgt
    gt rx1297_pos, rx1297_eos, rx1297_done
    set rx1297_off, 0
    lt rx1297_pos, 2, rx1297_start
    sub rx1297_off, rx1297_pos, 1
    substr rx1297_tgt, rx1297_tgt, rx1297_off
  rx1297_start:
    eq $I10, 1, rx1297_restart
    if_null rx1297_debug, debug_949
    rx1297_cur."!cursor_debug"("START", "postcircumfix:sym<{ }>")
  debug_949:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1301_done
    goto rxscan1301_scan
  rxscan1301_loop:
    (rx1297_pos) = rx1297_cur."from"()
    inc rx1297_pos
    rx1297_cur."!cursor_from"(rx1297_pos)
    ge rx1297_pos, rx1297_eos, rxscan1301_done
  rxscan1301_scan:
    set_addr $I10, rxscan1301_loop
    rx1297_cur."!mark_push"(0, rx1297_pos, $I10)
  rxscan1301_done:
.annotate 'line', 600
  # rx literal  "{"
    add $I11, rx1297_pos, 1
    gt $I11, rx1297_eos, rx1297_fail
    sub $I11, rx1297_pos, rx1297_off
    ord $I11, rx1297_tgt, $I11
    ne $I11, 123, rx1297_fail
    add rx1297_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1297_cur."!cursor_pos"(rx1297_pos)
    $P10 = rx1297_cur."ws"()
    unless $P10, rx1297_fail
    rx1297_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1297_cur."!cursor_pos"(rx1297_pos)
    $P10 = rx1297_cur."EXPR"()
    unless $P10, rx1297_fail
    rx1297_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1297_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1297_pos, 1
    gt $I11, rx1297_eos, rx1297_fail
    sub $I11, rx1297_pos, rx1297_off
    ord $I11, rx1297_tgt, $I11
    ne $I11, 125, rx1297_fail
    add rx1297_pos, 1
.annotate 'line', 601
  # rx subrule "O" subtype=capture negate=
    rx1297_cur."!cursor_pos"(rx1297_pos)
    $P10 = rx1297_cur."O"("%methodop")
    unless $P10, rx1297_fail
    rx1297_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1297_pos = $P10."pos"()
.annotate 'line', 599
  # rx pass
    rx1297_cur."!cursor_pass"(rx1297_pos, "postcircumfix:sym<{ }>")
    if_null rx1297_debug, debug_950
    rx1297_cur."!cursor_debug"("PASS", "postcircumfix:sym<{ }>", " at pos=", rx1297_pos)
  debug_950:
    .return (rx1297_cur)
  rx1297_restart:
.annotate 'line', 4
    if_null rx1297_debug, debug_951
    rx1297_cur."!cursor_debug"("NEXT", "postcircumfix:sym<{ }>")
  debug_951:
  rx1297_fail:
    (rx1297_rep, rx1297_pos, $I10, $P10) = rx1297_cur."!mark_fail"(0)
    lt rx1297_pos, -1, rx1297_done
    eq rx1297_pos, -1, rx1297_fail
    jump $I10
  rx1297_done:
    rx1297_cur."!cursor_fail"()
    if_null rx1297_debug, debug_952
    rx1297_cur."!cursor_debug"("FAIL", "postcircumfix:sym<{ }>")
  debug_952:
    .return (rx1297_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<{ }>"  :nsentry("!PREFIX__postcircumfix:sym<{ }>") :subid("278_1300057348.719") :method
.annotate 'line', 4
    $P1299 = self."!PREFIX__!subrule"("ws", "{")
    new $P1300, "ResizablePMCArray"
    push $P1300, $P1299
    .return ($P1300)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<ang>"  :subid("279_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1303_tgt
    .local int rx1303_pos
    .local int rx1303_off
    .local int rx1303_eos
    .local int rx1303_rep
    .local pmc rx1303_cur
    .local pmc rx1303_debug
    (rx1303_cur, rx1303_pos, rx1303_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1303_cur
    .local pmc match
    .lex "$/", match
    length rx1303_eos, rx1303_tgt
    gt rx1303_pos, rx1303_eos, rx1303_done
    set rx1303_off, 0
    lt rx1303_pos, 2, rx1303_start
    sub rx1303_off, rx1303_pos, 1
    substr rx1303_tgt, rx1303_tgt, rx1303_off
  rx1303_start:
    eq $I10, 1, rx1303_restart
    if_null rx1303_debug, debug_953
    rx1303_cur."!cursor_debug"("START", "postcircumfix:sym<ang>")
  debug_953:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1306_done
    goto rxscan1306_scan
  rxscan1306_loop:
    (rx1303_pos) = rx1303_cur."from"()
    inc rx1303_pos
    rx1303_cur."!cursor_from"(rx1303_pos)
    ge rx1303_pos, rx1303_eos, rxscan1306_done
  rxscan1306_scan:
    set_addr $I10, rxscan1306_loop
    rx1303_cur."!mark_push"(0, rx1303_pos, $I10)
  rxscan1306_done:
.annotate 'line', 605
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1303_pos, rx1303_off
    substr $S10, rx1303_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx1303_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1303_cur."!cursor_pos"(rx1303_pos)
    $P10 = rx1303_cur."quote_EXPR"(":q")
    unless $P10, rx1303_fail
    rx1303_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx1303_pos = $P10."pos"()
.annotate 'line', 606
  # rx subrule "O" subtype=capture negate=
    rx1303_cur."!cursor_pos"(rx1303_pos)
    $P10 = rx1303_cur."O"("%methodop")
    unless $P10, rx1303_fail
    rx1303_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1303_pos = $P10."pos"()
.annotate 'line', 604
  # rx pass
    rx1303_cur."!cursor_pass"(rx1303_pos, "postcircumfix:sym<ang>")
    if_null rx1303_debug, debug_954
    rx1303_cur."!cursor_debug"("PASS", "postcircumfix:sym<ang>", " at pos=", rx1303_pos)
  debug_954:
    .return (rx1303_cur)
  rx1303_restart:
.annotate 'line', 4
    if_null rx1303_debug, debug_955
    rx1303_cur."!cursor_debug"("NEXT", "postcircumfix:sym<ang>")
  debug_955:
  rx1303_fail:
    (rx1303_rep, rx1303_pos, $I10, $P10) = rx1303_cur."!mark_fail"(0)
    lt rx1303_pos, -1, rx1303_done
    eq rx1303_pos, -1, rx1303_fail
    jump $I10
  rx1303_done:
    rx1303_cur."!cursor_fail"()
    if_null rx1303_debug, debug_956
    rx1303_cur."!cursor_debug"("FAIL", "postcircumfix:sym<ang>")
  debug_956:
    .return (rx1303_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<ang>"  :nsentry("!PREFIX__postcircumfix:sym<ang>") :subid("280_1300057348.719") :method
.annotate 'line', 4
    new $P1305, "ResizablePMCArray"
    push $P1305, "<"
    .return ($P1305)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<( )>"  :subid("281_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1308_tgt
    .local int rx1308_pos
    .local int rx1308_off
    .local int rx1308_eos
    .local int rx1308_rep
    .local pmc rx1308_cur
    .local pmc rx1308_debug
    (rx1308_cur, rx1308_pos, rx1308_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1308_cur
    .local pmc match
    .lex "$/", match
    length rx1308_eos, rx1308_tgt
    gt rx1308_pos, rx1308_eos, rx1308_done
    set rx1308_off, 0
    lt rx1308_pos, 2, rx1308_start
    sub rx1308_off, rx1308_pos, 1
    substr rx1308_tgt, rx1308_tgt, rx1308_off
  rx1308_start:
    eq $I10, 1, rx1308_restart
    if_null rx1308_debug, debug_957
    rx1308_cur."!cursor_debug"("START", "postcircumfix:sym<( )>")
  debug_957:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1312_done
    goto rxscan1312_scan
  rxscan1312_loop:
    (rx1308_pos) = rx1308_cur."from"()
    inc rx1308_pos
    rx1308_cur."!cursor_from"(rx1308_pos)
    ge rx1308_pos, rx1308_eos, rxscan1312_done
  rxscan1312_scan:
    set_addr $I10, rxscan1312_loop
    rx1308_cur."!mark_push"(0, rx1308_pos, $I10)
  rxscan1312_done:
.annotate 'line', 610
  # rx literal  "("
    add $I11, rx1308_pos, 1
    gt $I11, rx1308_eos, rx1308_fail
    sub $I11, rx1308_pos, rx1308_off
    ord $I11, rx1308_tgt, $I11
    ne $I11, 40, rx1308_fail
    add rx1308_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1308_cur."!cursor_pos"(rx1308_pos)
    $P10 = rx1308_cur."ws"()
    unless $P10, rx1308_fail
    rx1308_pos = $P10."pos"()
  # rx subrule "arglist" subtype=capture negate=
    rx1308_cur."!cursor_pos"(rx1308_pos)
    $P10 = rx1308_cur."arglist"()
    unless $P10, rx1308_fail
    rx1308_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx1308_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1308_pos, 1
    gt $I11, rx1308_eos, rx1308_fail
    sub $I11, rx1308_pos, rx1308_off
    ord $I11, rx1308_tgt, $I11
    ne $I11, 41, rx1308_fail
    add rx1308_pos, 1
.annotate 'line', 611
  # rx subrule "O" subtype=capture negate=
    rx1308_cur."!cursor_pos"(rx1308_pos)
    $P10 = rx1308_cur."O"("%methodop")
    unless $P10, rx1308_fail
    rx1308_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1308_pos = $P10."pos"()
.annotate 'line', 609
  # rx pass
    rx1308_cur."!cursor_pass"(rx1308_pos, "postcircumfix:sym<( )>")
    if_null rx1308_debug, debug_958
    rx1308_cur."!cursor_debug"("PASS", "postcircumfix:sym<( )>", " at pos=", rx1308_pos)
  debug_958:
    .return (rx1308_cur)
  rx1308_restart:
.annotate 'line', 4
    if_null rx1308_debug, debug_959
    rx1308_cur."!cursor_debug"("NEXT", "postcircumfix:sym<( )>")
  debug_959:
  rx1308_fail:
    (rx1308_rep, rx1308_pos, $I10, $P10) = rx1308_cur."!mark_fail"(0)
    lt rx1308_pos, -1, rx1308_done
    eq rx1308_pos, -1, rx1308_fail
    jump $I10
  rx1308_done:
    rx1308_cur."!cursor_fail"()
    if_null rx1308_debug, debug_960
    rx1308_cur."!cursor_debug"("FAIL", "postcircumfix:sym<( )>")
  debug_960:
    .return (rx1308_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<( )>"  :nsentry("!PREFIX__postcircumfix:sym<( )>") :subid("282_1300057348.719") :method
.annotate 'line', 4
    $P1310 = self."!PREFIX__!subrule"("ws", "(")
    new $P1311, "ResizablePMCArray"
    push $P1311, $P1310
    .return ($P1311)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<.>"  :subid("283_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1314_tgt
    .local int rx1314_pos
    .local int rx1314_off
    .local int rx1314_eos
    .local int rx1314_rep
    .local pmc rx1314_cur
    .local pmc rx1314_debug
    (rx1314_cur, rx1314_pos, rx1314_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1314_cur
    .local pmc match
    .lex "$/", match
    length rx1314_eos, rx1314_tgt
    gt rx1314_pos, rx1314_eos, rx1314_done
    set rx1314_off, 0
    lt rx1314_pos, 2, rx1314_start
    sub rx1314_off, rx1314_pos, 1
    substr rx1314_tgt, rx1314_tgt, rx1314_off
  rx1314_start:
    eq $I10, 1, rx1314_restart
    if_null rx1314_debug, debug_961
    rx1314_cur."!cursor_debug"("START", "postfix:sym<.>")
  debug_961:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1318_done
    goto rxscan1318_scan
  rxscan1318_loop:
    (rx1314_pos) = rx1314_cur."from"()
    inc rx1314_pos
    rx1314_cur."!cursor_from"(rx1314_pos)
    ge rx1314_pos, rx1314_eos, rxscan1318_done
  rxscan1318_scan:
    set_addr $I10, rxscan1318_loop
    rx1314_cur."!mark_push"(0, rx1314_pos, $I10)
  rxscan1318_done:
.annotate 'line', 614
  # rx subrule "dotty" subtype=capture negate=
    rx1314_cur."!cursor_pos"(rx1314_pos)
    $P10 = rx1314_cur."dotty"()
    unless $P10, rx1314_fail
    rx1314_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dotty")
    rx1314_pos = $P10."pos"()
  # rx subrule "O" subtype=capture negate=
    rx1314_cur."!cursor_pos"(rx1314_pos)
    $P10 = rx1314_cur."O"("%methodop")
    unless $P10, rx1314_fail
    rx1314_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1314_pos = $P10."pos"()
  # rx pass
    rx1314_cur."!cursor_pass"(rx1314_pos, "postfix:sym<.>")
    if_null rx1314_debug, debug_962
    rx1314_cur."!cursor_debug"("PASS", "postfix:sym<.>", " at pos=", rx1314_pos)
  debug_962:
    .return (rx1314_cur)
  rx1314_restart:
.annotate 'line', 4
    if_null rx1314_debug, debug_963
    rx1314_cur."!cursor_debug"("NEXT", "postfix:sym<.>")
  debug_963:
  rx1314_fail:
    (rx1314_rep, rx1314_pos, $I10, $P10) = rx1314_cur."!mark_fail"(0)
    lt rx1314_pos, -1, rx1314_done
    eq rx1314_pos, -1, rx1314_fail
    jump $I10
  rx1314_done:
    rx1314_cur."!cursor_fail"()
    if_null rx1314_debug, debug_964
    rx1314_cur."!cursor_debug"("FAIL", "postfix:sym<.>")
  debug_964:
    .return (rx1314_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<.>"  :nsentry("!PREFIX__postfix:sym<.>") :subid("284_1300057348.719") :method
.annotate 'line', 4
    $P1316 = self."!PREFIX__!subrule"("dotty", "")
    new $P1317, "ResizablePMCArray"
    push $P1317, $P1316
    .return ($P1317)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<++>"  :subid("285_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1320_tgt
    .local int rx1320_pos
    .local int rx1320_off
    .local int rx1320_eos
    .local int rx1320_rep
    .local pmc rx1320_cur
    .local pmc rx1320_debug
    (rx1320_cur, rx1320_pos, rx1320_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1320_cur
    .local pmc match
    .lex "$/", match
    length rx1320_eos, rx1320_tgt
    gt rx1320_pos, rx1320_eos, rx1320_done
    set rx1320_off, 0
    lt rx1320_pos, 2, rx1320_start
    sub rx1320_off, rx1320_pos, 1
    substr rx1320_tgt, rx1320_tgt, rx1320_off
  rx1320_start:
    eq $I10, 1, rx1320_restart
    if_null rx1320_debug, debug_965
    rx1320_cur."!cursor_debug"("START", "prefix:sym<++>")
  debug_965:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1324_done
    goto rxscan1324_scan
  rxscan1324_loop:
    (rx1320_pos) = rx1320_cur."from"()
    inc rx1320_pos
    rx1320_cur."!cursor_from"(rx1320_pos)
    ge rx1320_pos, rx1320_eos, rxscan1324_done
  rxscan1324_scan:
    set_addr $I10, rxscan1324_loop
    rx1320_cur."!mark_push"(0, rx1320_pos, $I10)
  rxscan1324_done:
.annotate 'line', 616
  # rx subcapture "sym"
    set_addr $I10, rxcap_1325_fail
    rx1320_cur."!mark_push"(0, rx1320_pos, $I10)
  # rx literal  "++"
    add $I11, rx1320_pos, 2
    gt $I11, rx1320_eos, rx1320_fail
    sub $I11, rx1320_pos, rx1320_off
    substr $S10, rx1320_tgt, $I11, 2
    ne $S10, "++", rx1320_fail
    add rx1320_pos, 2
    set_addr $I10, rxcap_1325_fail
    ($I12, $I11) = rx1320_cur."!mark_peek"($I10)
    rx1320_cur."!cursor_pos"($I11)
    ($P10) = rx1320_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1320_pos, "")
    rx1320_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1325_done
  rxcap_1325_fail:
    goto rx1320_fail
  rxcap_1325_done:
  # rx subrule "O" subtype=capture negate=
    rx1320_cur."!cursor_pos"(rx1320_pos)
    $P10 = rx1320_cur."O"("%autoincrement, :pirop<inc>")
    unless $P10, rx1320_fail
    rx1320_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1320_pos = $P10."pos"()
  # rx pass
    rx1320_cur."!cursor_pass"(rx1320_pos, "prefix:sym<++>")
    if_null rx1320_debug, debug_966
    rx1320_cur."!cursor_debug"("PASS", "prefix:sym<++>", " at pos=", rx1320_pos)
  debug_966:
    .return (rx1320_cur)
  rx1320_restart:
.annotate 'line', 4
    if_null rx1320_debug, debug_967
    rx1320_cur."!cursor_debug"("NEXT", "prefix:sym<++>")
  debug_967:
  rx1320_fail:
    (rx1320_rep, rx1320_pos, $I10, $P10) = rx1320_cur."!mark_fail"(0)
    lt rx1320_pos, -1, rx1320_done
    eq rx1320_pos, -1, rx1320_fail
    jump $I10
  rx1320_done:
    rx1320_cur."!cursor_fail"()
    if_null rx1320_debug, debug_968
    rx1320_cur."!cursor_debug"("FAIL", "prefix:sym<++>")
  debug_968:
    .return (rx1320_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<++>"  :nsentry("!PREFIX__prefix:sym<++>") :subid("286_1300057348.719") :method
.annotate 'line', 4
    $P1322 = self."!PREFIX__!subrule"("O", "++")
    new $P1323, "ResizablePMCArray"
    push $P1323, $P1322
    .return ($P1323)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<-->"  :subid("287_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1327_tgt
    .local int rx1327_pos
    .local int rx1327_off
    .local int rx1327_eos
    .local int rx1327_rep
    .local pmc rx1327_cur
    .local pmc rx1327_debug
    (rx1327_cur, rx1327_pos, rx1327_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1327_cur
    .local pmc match
    .lex "$/", match
    length rx1327_eos, rx1327_tgt
    gt rx1327_pos, rx1327_eos, rx1327_done
    set rx1327_off, 0
    lt rx1327_pos, 2, rx1327_start
    sub rx1327_off, rx1327_pos, 1
    substr rx1327_tgt, rx1327_tgt, rx1327_off
  rx1327_start:
    eq $I10, 1, rx1327_restart
    if_null rx1327_debug, debug_969
    rx1327_cur."!cursor_debug"("START", "prefix:sym<-->")
  debug_969:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1331_done
    goto rxscan1331_scan
  rxscan1331_loop:
    (rx1327_pos) = rx1327_cur."from"()
    inc rx1327_pos
    rx1327_cur."!cursor_from"(rx1327_pos)
    ge rx1327_pos, rx1327_eos, rxscan1331_done
  rxscan1331_scan:
    set_addr $I10, rxscan1331_loop
    rx1327_cur."!mark_push"(0, rx1327_pos, $I10)
  rxscan1331_done:
.annotate 'line', 617
  # rx subcapture "sym"
    set_addr $I10, rxcap_1332_fail
    rx1327_cur."!mark_push"(0, rx1327_pos, $I10)
  # rx literal  "--"
    add $I11, rx1327_pos, 2
    gt $I11, rx1327_eos, rx1327_fail
    sub $I11, rx1327_pos, rx1327_off
    substr $S10, rx1327_tgt, $I11, 2
    ne $S10, "--", rx1327_fail
    add rx1327_pos, 2
    set_addr $I10, rxcap_1332_fail
    ($I12, $I11) = rx1327_cur."!mark_peek"($I10)
    rx1327_cur."!cursor_pos"($I11)
    ($P10) = rx1327_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1327_pos, "")
    rx1327_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1332_done
  rxcap_1332_fail:
    goto rx1327_fail
  rxcap_1332_done:
  # rx subrule "O" subtype=capture negate=
    rx1327_cur."!cursor_pos"(rx1327_pos)
    $P10 = rx1327_cur."O"("%autoincrement, :pirop<dec>")
    unless $P10, rx1327_fail
    rx1327_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1327_pos = $P10."pos"()
  # rx pass
    rx1327_cur."!cursor_pass"(rx1327_pos, "prefix:sym<-->")
    if_null rx1327_debug, debug_970
    rx1327_cur."!cursor_debug"("PASS", "prefix:sym<-->", " at pos=", rx1327_pos)
  debug_970:
    .return (rx1327_cur)
  rx1327_restart:
.annotate 'line', 4
    if_null rx1327_debug, debug_971
    rx1327_cur."!cursor_debug"("NEXT", "prefix:sym<-->")
  debug_971:
  rx1327_fail:
    (rx1327_rep, rx1327_pos, $I10, $P10) = rx1327_cur."!mark_fail"(0)
    lt rx1327_pos, -1, rx1327_done
    eq rx1327_pos, -1, rx1327_fail
    jump $I10
  rx1327_done:
    rx1327_cur."!cursor_fail"()
    if_null rx1327_debug, debug_972
    rx1327_cur."!cursor_debug"("FAIL", "prefix:sym<-->")
  debug_972:
    .return (rx1327_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<-->"  :nsentry("!PREFIX__prefix:sym<-->") :subid("288_1300057348.719") :method
.annotate 'line', 4
    $P1329 = self."!PREFIX__!subrule"("O", "--")
    new $P1330, "ResizablePMCArray"
    push $P1330, $P1329
    .return ($P1330)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<++>"  :subid("289_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1334_tgt
    .local int rx1334_pos
    .local int rx1334_off
    .local int rx1334_eos
    .local int rx1334_rep
    .local pmc rx1334_cur
    .local pmc rx1334_debug
    (rx1334_cur, rx1334_pos, rx1334_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1334_cur
    .local pmc match
    .lex "$/", match
    length rx1334_eos, rx1334_tgt
    gt rx1334_pos, rx1334_eos, rx1334_done
    set rx1334_off, 0
    lt rx1334_pos, 2, rx1334_start
    sub rx1334_off, rx1334_pos, 1
    substr rx1334_tgt, rx1334_tgt, rx1334_off
  rx1334_start:
    eq $I10, 1, rx1334_restart
    if_null rx1334_debug, debug_973
    rx1334_cur."!cursor_debug"("START", "postfix:sym<++>")
  debug_973:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1338_done
    goto rxscan1338_scan
  rxscan1338_loop:
    (rx1334_pos) = rx1334_cur."from"()
    inc rx1334_pos
    rx1334_cur."!cursor_from"(rx1334_pos)
    ge rx1334_pos, rx1334_eos, rxscan1338_done
  rxscan1338_scan:
    set_addr $I10, rxscan1338_loop
    rx1334_cur."!mark_push"(0, rx1334_pos, $I10)
  rxscan1338_done:
.annotate 'line', 620
  # rx subcapture "sym"
    set_addr $I10, rxcap_1339_fail
    rx1334_cur."!mark_push"(0, rx1334_pos, $I10)
  # rx literal  "++"
    add $I11, rx1334_pos, 2
    gt $I11, rx1334_eos, rx1334_fail
    sub $I11, rx1334_pos, rx1334_off
    substr $S10, rx1334_tgt, $I11, 2
    ne $S10, "++", rx1334_fail
    add rx1334_pos, 2
    set_addr $I10, rxcap_1339_fail
    ($I12, $I11) = rx1334_cur."!mark_peek"($I10)
    rx1334_cur."!cursor_pos"($I11)
    ($P10) = rx1334_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1334_pos, "")
    rx1334_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1339_done
  rxcap_1339_fail:
    goto rx1334_fail
  rxcap_1339_done:
  # rx subrule "O" subtype=capture negate=
    rx1334_cur."!cursor_pos"(rx1334_pos)
    $P10 = rx1334_cur."O"("%autoincrement")
    unless $P10, rx1334_fail
    rx1334_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1334_pos = $P10."pos"()
  # rx pass
    rx1334_cur."!cursor_pass"(rx1334_pos, "postfix:sym<++>")
    if_null rx1334_debug, debug_974
    rx1334_cur."!cursor_debug"("PASS", "postfix:sym<++>", " at pos=", rx1334_pos)
  debug_974:
    .return (rx1334_cur)
  rx1334_restart:
.annotate 'line', 4
    if_null rx1334_debug, debug_975
    rx1334_cur."!cursor_debug"("NEXT", "postfix:sym<++>")
  debug_975:
  rx1334_fail:
    (rx1334_rep, rx1334_pos, $I10, $P10) = rx1334_cur."!mark_fail"(0)
    lt rx1334_pos, -1, rx1334_done
    eq rx1334_pos, -1, rx1334_fail
    jump $I10
  rx1334_done:
    rx1334_cur."!cursor_fail"()
    if_null rx1334_debug, debug_976
    rx1334_cur."!cursor_debug"("FAIL", "postfix:sym<++>")
  debug_976:
    .return (rx1334_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<++>"  :nsentry("!PREFIX__postfix:sym<++>") :subid("290_1300057348.719") :method
.annotate 'line', 4
    $P1336 = self."!PREFIX__!subrule"("O", "++")
    new $P1337, "ResizablePMCArray"
    push $P1337, $P1336
    .return ($P1337)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<-->"  :subid("291_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1341_tgt
    .local int rx1341_pos
    .local int rx1341_off
    .local int rx1341_eos
    .local int rx1341_rep
    .local pmc rx1341_cur
    .local pmc rx1341_debug
    (rx1341_cur, rx1341_pos, rx1341_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1341_cur
    .local pmc match
    .lex "$/", match
    length rx1341_eos, rx1341_tgt
    gt rx1341_pos, rx1341_eos, rx1341_done
    set rx1341_off, 0
    lt rx1341_pos, 2, rx1341_start
    sub rx1341_off, rx1341_pos, 1
    substr rx1341_tgt, rx1341_tgt, rx1341_off
  rx1341_start:
    eq $I10, 1, rx1341_restart
    if_null rx1341_debug, debug_977
    rx1341_cur."!cursor_debug"("START", "postfix:sym<-->")
  debug_977:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1345_done
    goto rxscan1345_scan
  rxscan1345_loop:
    (rx1341_pos) = rx1341_cur."from"()
    inc rx1341_pos
    rx1341_cur."!cursor_from"(rx1341_pos)
    ge rx1341_pos, rx1341_eos, rxscan1345_done
  rxscan1345_scan:
    set_addr $I10, rxscan1345_loop
    rx1341_cur."!mark_push"(0, rx1341_pos, $I10)
  rxscan1345_done:
.annotate 'line', 621
  # rx subcapture "sym"
    set_addr $I10, rxcap_1346_fail
    rx1341_cur."!mark_push"(0, rx1341_pos, $I10)
  # rx literal  "--"
    add $I11, rx1341_pos, 2
    gt $I11, rx1341_eos, rx1341_fail
    sub $I11, rx1341_pos, rx1341_off
    substr $S10, rx1341_tgt, $I11, 2
    ne $S10, "--", rx1341_fail
    add rx1341_pos, 2
    set_addr $I10, rxcap_1346_fail
    ($I12, $I11) = rx1341_cur."!mark_peek"($I10)
    rx1341_cur."!cursor_pos"($I11)
    ($P10) = rx1341_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1341_pos, "")
    rx1341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1346_done
  rxcap_1346_fail:
    goto rx1341_fail
  rxcap_1346_done:
  # rx subrule "O" subtype=capture negate=
    rx1341_cur."!cursor_pos"(rx1341_pos)
    $P10 = rx1341_cur."O"("%autoincrement")
    unless $P10, rx1341_fail
    rx1341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1341_pos = $P10."pos"()
  # rx pass
    rx1341_cur."!cursor_pass"(rx1341_pos, "postfix:sym<-->")
    if_null rx1341_debug, debug_978
    rx1341_cur."!cursor_debug"("PASS", "postfix:sym<-->", " at pos=", rx1341_pos)
  debug_978:
    .return (rx1341_cur)
  rx1341_restart:
.annotate 'line', 4
    if_null rx1341_debug, debug_979
    rx1341_cur."!cursor_debug"("NEXT", "postfix:sym<-->")
  debug_979:
  rx1341_fail:
    (rx1341_rep, rx1341_pos, $I10, $P10) = rx1341_cur."!mark_fail"(0)
    lt rx1341_pos, -1, rx1341_done
    eq rx1341_pos, -1, rx1341_fail
    jump $I10
  rx1341_done:
    rx1341_cur."!cursor_fail"()
    if_null rx1341_debug, debug_980
    rx1341_cur."!cursor_debug"("FAIL", "postfix:sym<-->")
  debug_980:
    .return (rx1341_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<-->"  :nsentry("!PREFIX__postfix:sym<-->") :subid("292_1300057348.719") :method
.annotate 'line', 4
    $P1343 = self."!PREFIX__!subrule"("O", "--")
    new $P1344, "ResizablePMCArray"
    push $P1344, $P1343
    .return ($P1344)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<**>"  :subid("293_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1348_tgt
    .local int rx1348_pos
    .local int rx1348_off
    .local int rx1348_eos
    .local int rx1348_rep
    .local pmc rx1348_cur
    .local pmc rx1348_debug
    (rx1348_cur, rx1348_pos, rx1348_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1348_cur
    .local pmc match
    .lex "$/", match
    length rx1348_eos, rx1348_tgt
    gt rx1348_pos, rx1348_eos, rx1348_done
    set rx1348_off, 0
    lt rx1348_pos, 2, rx1348_start
    sub rx1348_off, rx1348_pos, 1
    substr rx1348_tgt, rx1348_tgt, rx1348_off
  rx1348_start:
    eq $I10, 1, rx1348_restart
    if_null rx1348_debug, debug_981
    rx1348_cur."!cursor_debug"("START", "infix:sym<**>")
  debug_981:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1352_done
    goto rxscan1352_scan
  rxscan1352_loop:
    (rx1348_pos) = rx1348_cur."from"()
    inc rx1348_pos
    rx1348_cur."!cursor_from"(rx1348_pos)
    ge rx1348_pos, rx1348_eos, rxscan1352_done
  rxscan1352_scan:
    set_addr $I10, rxscan1352_loop
    rx1348_cur."!mark_push"(0, rx1348_pos, $I10)
  rxscan1352_done:
.annotate 'line', 623
  # rx subcapture "sym"
    set_addr $I10, rxcap_1353_fail
    rx1348_cur."!mark_push"(0, rx1348_pos, $I10)
  # rx literal  "**"
    add $I11, rx1348_pos, 2
    gt $I11, rx1348_eos, rx1348_fail
    sub $I11, rx1348_pos, rx1348_off
    substr $S10, rx1348_tgt, $I11, 2
    ne $S10, "**", rx1348_fail
    add rx1348_pos, 2
    set_addr $I10, rxcap_1353_fail
    ($I12, $I11) = rx1348_cur."!mark_peek"($I10)
    rx1348_cur."!cursor_pos"($I11)
    ($P10) = rx1348_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1348_pos, "")
    rx1348_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1353_done
  rxcap_1353_fail:
    goto rx1348_fail
  rxcap_1353_done:
  # rx subrule "O" subtype=capture negate=
    rx1348_cur."!cursor_pos"(rx1348_pos)
    $P10 = rx1348_cur."O"("%exponentiation, :pirop<pow>")
    unless $P10, rx1348_fail
    rx1348_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1348_pos = $P10."pos"()
  # rx pass
    rx1348_cur."!cursor_pass"(rx1348_pos, "infix:sym<**>")
    if_null rx1348_debug, debug_982
    rx1348_cur."!cursor_debug"("PASS", "infix:sym<**>", " at pos=", rx1348_pos)
  debug_982:
    .return (rx1348_cur)
  rx1348_restart:
.annotate 'line', 4
    if_null rx1348_debug, debug_983
    rx1348_cur."!cursor_debug"("NEXT", "infix:sym<**>")
  debug_983:
  rx1348_fail:
    (rx1348_rep, rx1348_pos, $I10, $P10) = rx1348_cur."!mark_fail"(0)
    lt rx1348_pos, -1, rx1348_done
    eq rx1348_pos, -1, rx1348_fail
    jump $I10
  rx1348_done:
    rx1348_cur."!cursor_fail"()
    if_null rx1348_debug, debug_984
    rx1348_cur."!cursor_debug"("FAIL", "infix:sym<**>")
  debug_984:
    .return (rx1348_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<**>"  :nsentry("!PREFIX__infix:sym<**>") :subid("294_1300057348.719") :method
.annotate 'line', 4
    $P1350 = self."!PREFIX__!subrule"("O", "**")
    new $P1351, "ResizablePMCArray"
    push $P1351, $P1350
    .return ($P1351)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<+>"  :subid("295_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1355_tgt
    .local int rx1355_pos
    .local int rx1355_off
    .local int rx1355_eos
    .local int rx1355_rep
    .local pmc rx1355_cur
    .local pmc rx1355_debug
    (rx1355_cur, rx1355_pos, rx1355_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1355_cur
    .local pmc match
    .lex "$/", match
    length rx1355_eos, rx1355_tgt
    gt rx1355_pos, rx1355_eos, rx1355_done
    set rx1355_off, 0
    lt rx1355_pos, 2, rx1355_start
    sub rx1355_off, rx1355_pos, 1
    substr rx1355_tgt, rx1355_tgt, rx1355_off
  rx1355_start:
    eq $I10, 1, rx1355_restart
    if_null rx1355_debug, debug_985
    rx1355_cur."!cursor_debug"("START", "prefix:sym<+>")
  debug_985:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1359_done
    goto rxscan1359_scan
  rxscan1359_loop:
    (rx1355_pos) = rx1355_cur."from"()
    inc rx1355_pos
    rx1355_cur."!cursor_from"(rx1355_pos)
    ge rx1355_pos, rx1355_eos, rxscan1359_done
  rxscan1359_scan:
    set_addr $I10, rxscan1359_loop
    rx1355_cur."!mark_push"(0, rx1355_pos, $I10)
  rxscan1359_done:
.annotate 'line', 625
  # rx subcapture "sym"
    set_addr $I10, rxcap_1360_fail
    rx1355_cur."!mark_push"(0, rx1355_pos, $I10)
  # rx literal  "+"
    add $I11, rx1355_pos, 1
    gt $I11, rx1355_eos, rx1355_fail
    sub $I11, rx1355_pos, rx1355_off
    ord $I11, rx1355_tgt, $I11
    ne $I11, 43, rx1355_fail
    add rx1355_pos, 1
    set_addr $I10, rxcap_1360_fail
    ($I12, $I11) = rx1355_cur."!mark_peek"($I10)
    rx1355_cur."!cursor_pos"($I11)
    ($P10) = rx1355_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1355_pos, "")
    rx1355_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1360_done
  rxcap_1360_fail:
    goto rx1355_fail
  rxcap_1360_done:
  # rx subrule "O" subtype=capture negate=
    rx1355_cur."!cursor_pos"(rx1355_pos)
    $P10 = rx1355_cur."O"("%symbolic_unary, :pirop<set N*>")
    unless $P10, rx1355_fail
    rx1355_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1355_pos = $P10."pos"()
  # rx pass
    rx1355_cur."!cursor_pass"(rx1355_pos, "prefix:sym<+>")
    if_null rx1355_debug, debug_986
    rx1355_cur."!cursor_debug"("PASS", "prefix:sym<+>", " at pos=", rx1355_pos)
  debug_986:
    .return (rx1355_cur)
  rx1355_restart:
.annotate 'line', 4
    if_null rx1355_debug, debug_987
    rx1355_cur."!cursor_debug"("NEXT", "prefix:sym<+>")
  debug_987:
  rx1355_fail:
    (rx1355_rep, rx1355_pos, $I10, $P10) = rx1355_cur."!mark_fail"(0)
    lt rx1355_pos, -1, rx1355_done
    eq rx1355_pos, -1, rx1355_fail
    jump $I10
  rx1355_done:
    rx1355_cur."!cursor_fail"()
    if_null rx1355_debug, debug_988
    rx1355_cur."!cursor_debug"("FAIL", "prefix:sym<+>")
  debug_988:
    .return (rx1355_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<+>"  :nsentry("!PREFIX__prefix:sym<+>") :subid("296_1300057348.719") :method
.annotate 'line', 4
    $P1357 = self."!PREFIX__!subrule"("O", "+")
    new $P1358, "ResizablePMCArray"
    push $P1358, $P1357
    .return ($P1358)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<~>"  :subid("297_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1362_tgt
    .local int rx1362_pos
    .local int rx1362_off
    .local int rx1362_eos
    .local int rx1362_rep
    .local pmc rx1362_cur
    .local pmc rx1362_debug
    (rx1362_cur, rx1362_pos, rx1362_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1362_cur
    .local pmc match
    .lex "$/", match
    length rx1362_eos, rx1362_tgt
    gt rx1362_pos, rx1362_eos, rx1362_done
    set rx1362_off, 0
    lt rx1362_pos, 2, rx1362_start
    sub rx1362_off, rx1362_pos, 1
    substr rx1362_tgt, rx1362_tgt, rx1362_off
  rx1362_start:
    eq $I10, 1, rx1362_restart
    if_null rx1362_debug, debug_989
    rx1362_cur."!cursor_debug"("START", "prefix:sym<~>")
  debug_989:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1366_done
    goto rxscan1366_scan
  rxscan1366_loop:
    (rx1362_pos) = rx1362_cur."from"()
    inc rx1362_pos
    rx1362_cur."!cursor_from"(rx1362_pos)
    ge rx1362_pos, rx1362_eos, rxscan1366_done
  rxscan1366_scan:
    set_addr $I10, rxscan1366_loop
    rx1362_cur."!mark_push"(0, rx1362_pos, $I10)
  rxscan1366_done:
.annotate 'line', 626
  # rx subcapture "sym"
    set_addr $I10, rxcap_1367_fail
    rx1362_cur."!mark_push"(0, rx1362_pos, $I10)
  # rx literal  "~"
    add $I11, rx1362_pos, 1
    gt $I11, rx1362_eos, rx1362_fail
    sub $I11, rx1362_pos, rx1362_off
    ord $I11, rx1362_tgt, $I11
    ne $I11, 126, rx1362_fail
    add rx1362_pos, 1
    set_addr $I10, rxcap_1367_fail
    ($I12, $I11) = rx1362_cur."!mark_peek"($I10)
    rx1362_cur."!cursor_pos"($I11)
    ($P10) = rx1362_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1362_pos, "")
    rx1362_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1367_done
  rxcap_1367_fail:
    goto rx1362_fail
  rxcap_1367_done:
  # rx subrule "O" subtype=capture negate=
    rx1362_cur."!cursor_pos"(rx1362_pos)
    $P10 = rx1362_cur."O"("%symbolic_unary, :pirop<set S*>")
    unless $P10, rx1362_fail
    rx1362_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1362_pos = $P10."pos"()
  # rx pass
    rx1362_cur."!cursor_pass"(rx1362_pos, "prefix:sym<~>")
    if_null rx1362_debug, debug_990
    rx1362_cur."!cursor_debug"("PASS", "prefix:sym<~>", " at pos=", rx1362_pos)
  debug_990:
    .return (rx1362_cur)
  rx1362_restart:
.annotate 'line', 4
    if_null rx1362_debug, debug_991
    rx1362_cur."!cursor_debug"("NEXT", "prefix:sym<~>")
  debug_991:
  rx1362_fail:
    (rx1362_rep, rx1362_pos, $I10, $P10) = rx1362_cur."!mark_fail"(0)
    lt rx1362_pos, -1, rx1362_done
    eq rx1362_pos, -1, rx1362_fail
    jump $I10
  rx1362_done:
    rx1362_cur."!cursor_fail"()
    if_null rx1362_debug, debug_992
    rx1362_cur."!cursor_debug"("FAIL", "prefix:sym<~>")
  debug_992:
    .return (rx1362_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<~>"  :nsentry("!PREFIX__prefix:sym<~>") :subid("298_1300057348.719") :method
.annotate 'line', 4
    $P1364 = self."!PREFIX__!subrule"("O", "~")
    new $P1365, "ResizablePMCArray"
    push $P1365, $P1364
    .return ($P1365)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<->"  :subid("299_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1369_tgt
    .local int rx1369_pos
    .local int rx1369_off
    .local int rx1369_eos
    .local int rx1369_rep
    .local pmc rx1369_cur
    .local pmc rx1369_debug
    (rx1369_cur, rx1369_pos, rx1369_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1369_cur
    .local pmc match
    .lex "$/", match
    length rx1369_eos, rx1369_tgt
    gt rx1369_pos, rx1369_eos, rx1369_done
    set rx1369_off, 0
    lt rx1369_pos, 2, rx1369_start
    sub rx1369_off, rx1369_pos, 1
    substr rx1369_tgt, rx1369_tgt, rx1369_off
  rx1369_start:
    eq $I10, 1, rx1369_restart
    if_null rx1369_debug, debug_993
    rx1369_cur."!cursor_debug"("START", "prefix:sym<->")
  debug_993:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1372_done
    goto rxscan1372_scan
  rxscan1372_loop:
    (rx1369_pos) = rx1369_cur."from"()
    inc rx1369_pos
    rx1369_cur."!cursor_from"(rx1369_pos)
    ge rx1369_pos, rx1369_eos, rxscan1372_done
  rxscan1372_scan:
    set_addr $I10, rxscan1372_loop
    rx1369_cur."!mark_push"(0, rx1369_pos, $I10)
  rxscan1372_done:
.annotate 'line', 627
  # rx subcapture "sym"
    set_addr $I10, rxcap_1373_fail
    rx1369_cur."!mark_push"(0, rx1369_pos, $I10)
  # rx literal  "-"
    add $I11, rx1369_pos, 1
    gt $I11, rx1369_eos, rx1369_fail
    sub $I11, rx1369_pos, rx1369_off
    ord $I11, rx1369_tgt, $I11
    ne $I11, 45, rx1369_fail
    add rx1369_pos, 1
    set_addr $I10, rxcap_1373_fail
    ($I12, $I11) = rx1369_cur."!mark_peek"($I10)
    rx1369_cur."!cursor_pos"($I11)
    ($P10) = rx1369_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1369_pos, "")
    rx1369_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1373_done
  rxcap_1373_fail:
    goto rx1369_fail
  rxcap_1373_done:
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx1369_pos, rx1369_off
    substr $S10, rx1369_tgt, $I10, 1
    index $I11, ">", $S10
    ge $I11, 0, rx1369_fail
  # rx subrule "number" subtype=zerowidth negate=1
    rx1369_cur."!cursor_pos"(rx1369_pos)
    $P10 = rx1369_cur."number"()
    if $P10, rx1369_fail
  # rx subrule "O" subtype=capture negate=
    rx1369_cur."!cursor_pos"(rx1369_pos)
    $P10 = rx1369_cur."O"("%symbolic_unary, :pirop<neg>")
    unless $P10, rx1369_fail
    rx1369_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1369_pos = $P10."pos"()
  # rx pass
    rx1369_cur."!cursor_pass"(rx1369_pos, "prefix:sym<->")
    if_null rx1369_debug, debug_994
    rx1369_cur."!cursor_debug"("PASS", "prefix:sym<->", " at pos=", rx1369_pos)
  debug_994:
    .return (rx1369_cur)
  rx1369_restart:
.annotate 'line', 4
    if_null rx1369_debug, debug_995
    rx1369_cur."!cursor_debug"("NEXT", "prefix:sym<->")
  debug_995:
  rx1369_fail:
    (rx1369_rep, rx1369_pos, $I10, $P10) = rx1369_cur."!mark_fail"(0)
    lt rx1369_pos, -1, rx1369_done
    eq rx1369_pos, -1, rx1369_fail
    jump $I10
  rx1369_done:
    rx1369_cur."!cursor_fail"()
    if_null rx1369_debug, debug_996
    rx1369_cur."!cursor_debug"("FAIL", "prefix:sym<->")
  debug_996:
    .return (rx1369_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<->"  :nsentry("!PREFIX__prefix:sym<->") :subid("300_1300057348.719") :method
.annotate 'line', 4
    new $P1371, "ResizablePMCArray"
    push $P1371, "-"
    .return ($P1371)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<?>"  :subid("301_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1375_tgt
    .local int rx1375_pos
    .local int rx1375_off
    .local int rx1375_eos
    .local int rx1375_rep
    .local pmc rx1375_cur
    .local pmc rx1375_debug
    (rx1375_cur, rx1375_pos, rx1375_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1375_cur
    .local pmc match
    .lex "$/", match
    length rx1375_eos, rx1375_tgt
    gt rx1375_pos, rx1375_eos, rx1375_done
    set rx1375_off, 0
    lt rx1375_pos, 2, rx1375_start
    sub rx1375_off, rx1375_pos, 1
    substr rx1375_tgt, rx1375_tgt, rx1375_off
  rx1375_start:
    eq $I10, 1, rx1375_restart
    if_null rx1375_debug, debug_997
    rx1375_cur."!cursor_debug"("START", "prefix:sym<?>")
  debug_997:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1379_done
    goto rxscan1379_scan
  rxscan1379_loop:
    (rx1375_pos) = rx1375_cur."from"()
    inc rx1375_pos
    rx1375_cur."!cursor_from"(rx1375_pos)
    ge rx1375_pos, rx1375_eos, rxscan1379_done
  rxscan1379_scan:
    set_addr $I10, rxscan1379_loop
    rx1375_cur."!mark_push"(0, rx1375_pos, $I10)
  rxscan1379_done:
.annotate 'line', 628
  # rx subcapture "sym"
    set_addr $I10, rxcap_1380_fail
    rx1375_cur."!mark_push"(0, rx1375_pos, $I10)
  # rx literal  "?"
    add $I11, rx1375_pos, 1
    gt $I11, rx1375_eos, rx1375_fail
    sub $I11, rx1375_pos, rx1375_off
    ord $I11, rx1375_tgt, $I11
    ne $I11, 63, rx1375_fail
    add rx1375_pos, 1
    set_addr $I10, rxcap_1380_fail
    ($I12, $I11) = rx1375_cur."!mark_peek"($I10)
    rx1375_cur."!cursor_pos"($I11)
    ($P10) = rx1375_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1375_pos, "")
    rx1375_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1380_done
  rxcap_1380_fail:
    goto rx1375_fail
  rxcap_1380_done:
  # rx subrule "O" subtype=capture negate=
    rx1375_cur."!cursor_pos"(rx1375_pos)
    $P10 = rx1375_cur."O"("%symbolic_unary, :pirop<istrue>")
    unless $P10, rx1375_fail
    rx1375_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1375_pos = $P10."pos"()
  # rx pass
    rx1375_cur."!cursor_pass"(rx1375_pos, "prefix:sym<?>")
    if_null rx1375_debug, debug_998
    rx1375_cur."!cursor_debug"("PASS", "prefix:sym<?>", " at pos=", rx1375_pos)
  debug_998:
    .return (rx1375_cur)
  rx1375_restart:
.annotate 'line', 4
    if_null rx1375_debug, debug_999
    rx1375_cur."!cursor_debug"("NEXT", "prefix:sym<?>")
  debug_999:
  rx1375_fail:
    (rx1375_rep, rx1375_pos, $I10, $P10) = rx1375_cur."!mark_fail"(0)
    lt rx1375_pos, -1, rx1375_done
    eq rx1375_pos, -1, rx1375_fail
    jump $I10
  rx1375_done:
    rx1375_cur."!cursor_fail"()
    if_null rx1375_debug, debug_1000
    rx1375_cur."!cursor_debug"("FAIL", "prefix:sym<?>")
  debug_1000:
    .return (rx1375_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<?>"  :nsentry("!PREFIX__prefix:sym<?>") :subid("302_1300057348.719") :method
.annotate 'line', 4
    $P1377 = self."!PREFIX__!subrule"("O", "?")
    new $P1378, "ResizablePMCArray"
    push $P1378, $P1377
    .return ($P1378)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<!>"  :subid("303_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1382_tgt
    .local int rx1382_pos
    .local int rx1382_off
    .local int rx1382_eos
    .local int rx1382_rep
    .local pmc rx1382_cur
    .local pmc rx1382_debug
    (rx1382_cur, rx1382_pos, rx1382_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1382_cur
    .local pmc match
    .lex "$/", match
    length rx1382_eos, rx1382_tgt
    gt rx1382_pos, rx1382_eos, rx1382_done
    set rx1382_off, 0
    lt rx1382_pos, 2, rx1382_start
    sub rx1382_off, rx1382_pos, 1
    substr rx1382_tgt, rx1382_tgt, rx1382_off
  rx1382_start:
    eq $I10, 1, rx1382_restart
    if_null rx1382_debug, debug_1001
    rx1382_cur."!cursor_debug"("START", "prefix:sym<!>")
  debug_1001:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1386_done
    goto rxscan1386_scan
  rxscan1386_loop:
    (rx1382_pos) = rx1382_cur."from"()
    inc rx1382_pos
    rx1382_cur."!cursor_from"(rx1382_pos)
    ge rx1382_pos, rx1382_eos, rxscan1386_done
  rxscan1386_scan:
    set_addr $I10, rxscan1386_loop
    rx1382_cur."!mark_push"(0, rx1382_pos, $I10)
  rxscan1386_done:
.annotate 'line', 629
  # rx subcapture "sym"
    set_addr $I10, rxcap_1387_fail
    rx1382_cur."!mark_push"(0, rx1382_pos, $I10)
  # rx literal  "!"
    add $I11, rx1382_pos, 1
    gt $I11, rx1382_eos, rx1382_fail
    sub $I11, rx1382_pos, rx1382_off
    ord $I11, rx1382_tgt, $I11
    ne $I11, 33, rx1382_fail
    add rx1382_pos, 1
    set_addr $I10, rxcap_1387_fail
    ($I12, $I11) = rx1382_cur."!mark_peek"($I10)
    rx1382_cur."!cursor_pos"($I11)
    ($P10) = rx1382_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1382_pos, "")
    rx1382_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1387_done
  rxcap_1387_fail:
    goto rx1382_fail
  rxcap_1387_done:
  # rx subrule "O" subtype=capture negate=
    rx1382_cur."!cursor_pos"(rx1382_pos)
    $P10 = rx1382_cur."O"("%symbolic_unary, :pirop<isfalse>")
    unless $P10, rx1382_fail
    rx1382_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1382_pos = $P10."pos"()
  # rx pass
    rx1382_cur."!cursor_pass"(rx1382_pos, "prefix:sym<!>")
    if_null rx1382_debug, debug_1002
    rx1382_cur."!cursor_debug"("PASS", "prefix:sym<!>", " at pos=", rx1382_pos)
  debug_1002:
    .return (rx1382_cur)
  rx1382_restart:
.annotate 'line', 4
    if_null rx1382_debug, debug_1003
    rx1382_cur."!cursor_debug"("NEXT", "prefix:sym<!>")
  debug_1003:
  rx1382_fail:
    (rx1382_rep, rx1382_pos, $I10, $P10) = rx1382_cur."!mark_fail"(0)
    lt rx1382_pos, -1, rx1382_done
    eq rx1382_pos, -1, rx1382_fail
    jump $I10
  rx1382_done:
    rx1382_cur."!cursor_fail"()
    if_null rx1382_debug, debug_1004
    rx1382_cur."!cursor_debug"("FAIL", "prefix:sym<!>")
  debug_1004:
    .return (rx1382_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<!>"  :nsentry("!PREFIX__prefix:sym<!>") :subid("304_1300057348.719") :method
.annotate 'line', 4
    $P1384 = self."!PREFIX__!subrule"("O", "!")
    new $P1385, "ResizablePMCArray"
    push $P1385, $P1384
    .return ($P1385)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<|>"  :subid("305_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1389_tgt
    .local int rx1389_pos
    .local int rx1389_off
    .local int rx1389_eos
    .local int rx1389_rep
    .local pmc rx1389_cur
    .local pmc rx1389_debug
    (rx1389_cur, rx1389_pos, rx1389_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1389_cur
    .local pmc match
    .lex "$/", match
    length rx1389_eos, rx1389_tgt
    gt rx1389_pos, rx1389_eos, rx1389_done
    set rx1389_off, 0
    lt rx1389_pos, 2, rx1389_start
    sub rx1389_off, rx1389_pos, 1
    substr rx1389_tgt, rx1389_tgt, rx1389_off
  rx1389_start:
    eq $I10, 1, rx1389_restart
    if_null rx1389_debug, debug_1005
    rx1389_cur."!cursor_debug"("START", "prefix:sym<|>")
  debug_1005:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1393_done
    goto rxscan1393_scan
  rxscan1393_loop:
    (rx1389_pos) = rx1389_cur."from"()
    inc rx1389_pos
    rx1389_cur."!cursor_from"(rx1389_pos)
    ge rx1389_pos, rx1389_eos, rxscan1393_done
  rxscan1393_scan:
    set_addr $I10, rxscan1393_loop
    rx1389_cur."!mark_push"(0, rx1389_pos, $I10)
  rxscan1393_done:
.annotate 'line', 630
  # rx subcapture "sym"
    set_addr $I10, rxcap_1394_fail
    rx1389_cur."!mark_push"(0, rx1389_pos, $I10)
  # rx literal  "|"
    add $I11, rx1389_pos, 1
    gt $I11, rx1389_eos, rx1389_fail
    sub $I11, rx1389_pos, rx1389_off
    ord $I11, rx1389_tgt, $I11
    ne $I11, 124, rx1389_fail
    add rx1389_pos, 1
    set_addr $I10, rxcap_1394_fail
    ($I12, $I11) = rx1389_cur."!mark_peek"($I10)
    rx1389_cur."!cursor_pos"($I11)
    ($P10) = rx1389_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1389_pos, "")
    rx1389_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1394_done
  rxcap_1394_fail:
    goto rx1389_fail
  rxcap_1394_done:
  # rx subrule "O" subtype=capture negate=
    rx1389_cur."!cursor_pos"(rx1389_pos)
    $P10 = rx1389_cur."O"("%symbolic_unary")
    unless $P10, rx1389_fail
    rx1389_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1389_pos = $P10."pos"()
  # rx pass
    rx1389_cur."!cursor_pass"(rx1389_pos, "prefix:sym<|>")
    if_null rx1389_debug, debug_1006
    rx1389_cur."!cursor_debug"("PASS", "prefix:sym<|>", " at pos=", rx1389_pos)
  debug_1006:
    .return (rx1389_cur)
  rx1389_restart:
.annotate 'line', 4
    if_null rx1389_debug, debug_1007
    rx1389_cur."!cursor_debug"("NEXT", "prefix:sym<|>")
  debug_1007:
  rx1389_fail:
    (rx1389_rep, rx1389_pos, $I10, $P10) = rx1389_cur."!mark_fail"(0)
    lt rx1389_pos, -1, rx1389_done
    eq rx1389_pos, -1, rx1389_fail
    jump $I10
  rx1389_done:
    rx1389_cur."!cursor_fail"()
    if_null rx1389_debug, debug_1008
    rx1389_cur."!cursor_debug"("FAIL", "prefix:sym<|>")
  debug_1008:
    .return (rx1389_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<|>"  :nsentry("!PREFIX__prefix:sym<|>") :subid("306_1300057348.719") :method
.annotate 'line', 4
    $P1391 = self."!PREFIX__!subrule"("O", "|")
    new $P1392, "ResizablePMCArray"
    push $P1392, $P1391
    .return ($P1392)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<*>"  :subid("307_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1396_tgt
    .local int rx1396_pos
    .local int rx1396_off
    .local int rx1396_eos
    .local int rx1396_rep
    .local pmc rx1396_cur
    .local pmc rx1396_debug
    (rx1396_cur, rx1396_pos, rx1396_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1396_cur
    .local pmc match
    .lex "$/", match
    length rx1396_eos, rx1396_tgt
    gt rx1396_pos, rx1396_eos, rx1396_done
    set rx1396_off, 0
    lt rx1396_pos, 2, rx1396_start
    sub rx1396_off, rx1396_pos, 1
    substr rx1396_tgt, rx1396_tgt, rx1396_off
  rx1396_start:
    eq $I10, 1, rx1396_restart
    if_null rx1396_debug, debug_1009
    rx1396_cur."!cursor_debug"("START", "infix:sym<*>")
  debug_1009:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1400_done
    goto rxscan1400_scan
  rxscan1400_loop:
    (rx1396_pos) = rx1396_cur."from"()
    inc rx1396_pos
    rx1396_cur."!cursor_from"(rx1396_pos)
    ge rx1396_pos, rx1396_eos, rxscan1400_done
  rxscan1400_scan:
    set_addr $I10, rxscan1400_loop
    rx1396_cur."!mark_push"(0, rx1396_pos, $I10)
  rxscan1400_done:
.annotate 'line', 632
  # rx subcapture "sym"
    set_addr $I10, rxcap_1401_fail
    rx1396_cur."!mark_push"(0, rx1396_pos, $I10)
  # rx literal  "*"
    add $I11, rx1396_pos, 1
    gt $I11, rx1396_eos, rx1396_fail
    sub $I11, rx1396_pos, rx1396_off
    ord $I11, rx1396_tgt, $I11
    ne $I11, 42, rx1396_fail
    add rx1396_pos, 1
    set_addr $I10, rxcap_1401_fail
    ($I12, $I11) = rx1396_cur."!mark_peek"($I10)
    rx1396_cur."!cursor_pos"($I11)
    ($P10) = rx1396_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1396_pos, "")
    rx1396_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1401_done
  rxcap_1401_fail:
    goto rx1396_fail
  rxcap_1401_done:
  # rx subrule "O" subtype=capture negate=
    rx1396_cur."!cursor_pos"(rx1396_pos)
    $P10 = rx1396_cur."O"("%multiplicative, :pirop<mul>")
    unless $P10, rx1396_fail
    rx1396_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1396_pos = $P10."pos"()
  # rx pass
    rx1396_cur."!cursor_pass"(rx1396_pos, "infix:sym<*>")
    if_null rx1396_debug, debug_1010
    rx1396_cur."!cursor_debug"("PASS", "infix:sym<*>", " at pos=", rx1396_pos)
  debug_1010:
    .return (rx1396_cur)
  rx1396_restart:
.annotate 'line', 4
    if_null rx1396_debug, debug_1011
    rx1396_cur."!cursor_debug"("NEXT", "infix:sym<*>")
  debug_1011:
  rx1396_fail:
    (rx1396_rep, rx1396_pos, $I10, $P10) = rx1396_cur."!mark_fail"(0)
    lt rx1396_pos, -1, rx1396_done
    eq rx1396_pos, -1, rx1396_fail
    jump $I10
  rx1396_done:
    rx1396_cur."!cursor_fail"()
    if_null rx1396_debug, debug_1012
    rx1396_cur."!cursor_debug"("FAIL", "infix:sym<*>")
  debug_1012:
    .return (rx1396_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<*>"  :nsentry("!PREFIX__infix:sym<*>") :subid("308_1300057348.719") :method
.annotate 'line', 4
    $P1398 = self."!PREFIX__!subrule"("O", "*")
    new $P1399, "ResizablePMCArray"
    push $P1399, $P1398
    .return ($P1399)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym</>"  :subid("309_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1403_tgt
    .local int rx1403_pos
    .local int rx1403_off
    .local int rx1403_eos
    .local int rx1403_rep
    .local pmc rx1403_cur
    .local pmc rx1403_debug
    (rx1403_cur, rx1403_pos, rx1403_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1403_cur
    .local pmc match
    .lex "$/", match
    length rx1403_eos, rx1403_tgt
    gt rx1403_pos, rx1403_eos, rx1403_done
    set rx1403_off, 0
    lt rx1403_pos, 2, rx1403_start
    sub rx1403_off, rx1403_pos, 1
    substr rx1403_tgt, rx1403_tgt, rx1403_off
  rx1403_start:
    eq $I10, 1, rx1403_restart
    if_null rx1403_debug, debug_1013
    rx1403_cur."!cursor_debug"("START", "infix:sym</>")
  debug_1013:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1407_done
    goto rxscan1407_scan
  rxscan1407_loop:
    (rx1403_pos) = rx1403_cur."from"()
    inc rx1403_pos
    rx1403_cur."!cursor_from"(rx1403_pos)
    ge rx1403_pos, rx1403_eos, rxscan1407_done
  rxscan1407_scan:
    set_addr $I10, rxscan1407_loop
    rx1403_cur."!mark_push"(0, rx1403_pos, $I10)
  rxscan1407_done:
.annotate 'line', 633
  # rx subcapture "sym"
    set_addr $I10, rxcap_1408_fail
    rx1403_cur."!mark_push"(0, rx1403_pos, $I10)
  # rx literal  "/"
    add $I11, rx1403_pos, 1
    gt $I11, rx1403_eos, rx1403_fail
    sub $I11, rx1403_pos, rx1403_off
    ord $I11, rx1403_tgt, $I11
    ne $I11, 47, rx1403_fail
    add rx1403_pos, 1
    set_addr $I10, rxcap_1408_fail
    ($I12, $I11) = rx1403_cur."!mark_peek"($I10)
    rx1403_cur."!cursor_pos"($I11)
    ($P10) = rx1403_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1403_pos, "")
    rx1403_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1408_done
  rxcap_1408_fail:
    goto rx1403_fail
  rxcap_1408_done:
  # rx subrule "O" subtype=capture negate=
    rx1403_cur."!cursor_pos"(rx1403_pos)
    $P10 = rx1403_cur."O"("%multiplicative, :pirop<div>")
    unless $P10, rx1403_fail
    rx1403_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1403_pos = $P10."pos"()
  # rx pass
    rx1403_cur."!cursor_pass"(rx1403_pos, "infix:sym</>")
    if_null rx1403_debug, debug_1014
    rx1403_cur."!cursor_debug"("PASS", "infix:sym</>", " at pos=", rx1403_pos)
  debug_1014:
    .return (rx1403_cur)
  rx1403_restart:
.annotate 'line', 4
    if_null rx1403_debug, debug_1015
    rx1403_cur."!cursor_debug"("NEXT", "infix:sym</>")
  debug_1015:
  rx1403_fail:
    (rx1403_rep, rx1403_pos, $I10, $P10) = rx1403_cur."!mark_fail"(0)
    lt rx1403_pos, -1, rx1403_done
    eq rx1403_pos, -1, rx1403_fail
    jump $I10
  rx1403_done:
    rx1403_cur."!cursor_fail"()
    if_null rx1403_debug, debug_1016
    rx1403_cur."!cursor_debug"("FAIL", "infix:sym</>")
  debug_1016:
    .return (rx1403_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym</>"  :nsentry("!PREFIX__infix:sym</>") :subid("310_1300057348.719") :method
.annotate 'line', 4
    $P1405 = self."!PREFIX__!subrule"("O", "/")
    new $P1406, "ResizablePMCArray"
    push $P1406, $P1405
    .return ($P1406)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<%>"  :subid("311_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1410_tgt
    .local int rx1410_pos
    .local int rx1410_off
    .local int rx1410_eos
    .local int rx1410_rep
    .local pmc rx1410_cur
    .local pmc rx1410_debug
    (rx1410_cur, rx1410_pos, rx1410_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1410_cur
    .local pmc match
    .lex "$/", match
    length rx1410_eos, rx1410_tgt
    gt rx1410_pos, rx1410_eos, rx1410_done
    set rx1410_off, 0
    lt rx1410_pos, 2, rx1410_start
    sub rx1410_off, rx1410_pos, 1
    substr rx1410_tgt, rx1410_tgt, rx1410_off
  rx1410_start:
    eq $I10, 1, rx1410_restart
    if_null rx1410_debug, debug_1017
    rx1410_cur."!cursor_debug"("START", "infix:sym<%>")
  debug_1017:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1414_done
    goto rxscan1414_scan
  rxscan1414_loop:
    (rx1410_pos) = rx1410_cur."from"()
    inc rx1410_pos
    rx1410_cur."!cursor_from"(rx1410_pos)
    ge rx1410_pos, rx1410_eos, rxscan1414_done
  rxscan1414_scan:
    set_addr $I10, rxscan1414_loop
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
  rxscan1414_done:
.annotate 'line', 634
  # rx subcapture "sym"
    set_addr $I10, rxcap_1415_fail
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
  # rx literal  "%"
    add $I11, rx1410_pos, 1
    gt $I11, rx1410_eos, rx1410_fail
    sub $I11, rx1410_pos, rx1410_off
    ord $I11, rx1410_tgt, $I11
    ne $I11, 37, rx1410_fail
    add rx1410_pos, 1
    set_addr $I10, rxcap_1415_fail
    ($I12, $I11) = rx1410_cur."!mark_peek"($I10)
    rx1410_cur."!cursor_pos"($I11)
    ($P10) = rx1410_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1410_pos, "")
    rx1410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1415_done
  rxcap_1415_fail:
    goto rx1410_fail
  rxcap_1415_done:
  # rx subrule "O" subtype=capture negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."O"("%multiplicative, :pirop<mod>")
    unless $P10, rx1410_fail
    rx1410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1410_pos = $P10."pos"()
  # rx pass
    rx1410_cur."!cursor_pass"(rx1410_pos, "infix:sym<%>")
    if_null rx1410_debug, debug_1018
    rx1410_cur."!cursor_debug"("PASS", "infix:sym<%>", " at pos=", rx1410_pos)
  debug_1018:
    .return (rx1410_cur)
  rx1410_restart:
.annotate 'line', 4
    if_null rx1410_debug, debug_1019
    rx1410_cur."!cursor_debug"("NEXT", "infix:sym<%>")
  debug_1019:
  rx1410_fail:
    (rx1410_rep, rx1410_pos, $I10, $P10) = rx1410_cur."!mark_fail"(0)
    lt rx1410_pos, -1, rx1410_done
    eq rx1410_pos, -1, rx1410_fail
    jump $I10
  rx1410_done:
    rx1410_cur."!cursor_fail"()
    if_null rx1410_debug, debug_1020
    rx1410_cur."!cursor_debug"("FAIL", "infix:sym<%>")
  debug_1020:
    .return (rx1410_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<%>"  :nsentry("!PREFIX__infix:sym<%>") :subid("312_1300057348.719") :method
.annotate 'line', 4
    $P1412 = self."!PREFIX__!subrule"("O", "%")
    new $P1413, "ResizablePMCArray"
    push $P1413, $P1412
    .return ($P1413)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+&>"  :subid("313_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1417_tgt
    .local int rx1417_pos
    .local int rx1417_off
    .local int rx1417_eos
    .local int rx1417_rep
    .local pmc rx1417_cur
    .local pmc rx1417_debug
    (rx1417_cur, rx1417_pos, rx1417_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1417_cur
    .local pmc match
    .lex "$/", match
    length rx1417_eos, rx1417_tgt
    gt rx1417_pos, rx1417_eos, rx1417_done
    set rx1417_off, 0
    lt rx1417_pos, 2, rx1417_start
    sub rx1417_off, rx1417_pos, 1
    substr rx1417_tgt, rx1417_tgt, rx1417_off
  rx1417_start:
    eq $I10, 1, rx1417_restart
    if_null rx1417_debug, debug_1021
    rx1417_cur."!cursor_debug"("START", "infix:sym<+&>")
  debug_1021:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1421_done
    goto rxscan1421_scan
  rxscan1421_loop:
    (rx1417_pos) = rx1417_cur."from"()
    inc rx1417_pos
    rx1417_cur."!cursor_from"(rx1417_pos)
    ge rx1417_pos, rx1417_eos, rxscan1421_done
  rxscan1421_scan:
    set_addr $I10, rxscan1421_loop
    rx1417_cur."!mark_push"(0, rx1417_pos, $I10)
  rxscan1421_done:
.annotate 'line', 635
  # rx subcapture "sym"
    set_addr $I10, rxcap_1422_fail
    rx1417_cur."!mark_push"(0, rx1417_pos, $I10)
  # rx literal  "+&"
    add $I11, rx1417_pos, 2
    gt $I11, rx1417_eos, rx1417_fail
    sub $I11, rx1417_pos, rx1417_off
    substr $S10, rx1417_tgt, $I11, 2
    ne $S10, "+&", rx1417_fail
    add rx1417_pos, 2
    set_addr $I10, rxcap_1422_fail
    ($I12, $I11) = rx1417_cur."!mark_peek"($I10)
    rx1417_cur."!cursor_pos"($I11)
    ($P10) = rx1417_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1417_pos, "")
    rx1417_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1422_done
  rxcap_1422_fail:
    goto rx1417_fail
  rxcap_1422_done:
  # rx subrule "O" subtype=capture negate=
    rx1417_cur."!cursor_pos"(rx1417_pos)
    $P10 = rx1417_cur."O"("%multiplicative, :pirop<band III>")
    unless $P10, rx1417_fail
    rx1417_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1417_pos = $P10."pos"()
  # rx pass
    rx1417_cur."!cursor_pass"(rx1417_pos, "infix:sym<+&>")
    if_null rx1417_debug, debug_1022
    rx1417_cur."!cursor_debug"("PASS", "infix:sym<+&>", " at pos=", rx1417_pos)
  debug_1022:
    .return (rx1417_cur)
  rx1417_restart:
.annotate 'line', 4
    if_null rx1417_debug, debug_1023
    rx1417_cur."!cursor_debug"("NEXT", "infix:sym<+&>")
  debug_1023:
  rx1417_fail:
    (rx1417_rep, rx1417_pos, $I10, $P10) = rx1417_cur."!mark_fail"(0)
    lt rx1417_pos, -1, rx1417_done
    eq rx1417_pos, -1, rx1417_fail
    jump $I10
  rx1417_done:
    rx1417_cur."!cursor_fail"()
    if_null rx1417_debug, debug_1024
    rx1417_cur."!cursor_debug"("FAIL", "infix:sym<+&>")
  debug_1024:
    .return (rx1417_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+&>"  :nsentry("!PREFIX__infix:sym<+&>") :subid("314_1300057348.719") :method
.annotate 'line', 4
    $P1419 = self."!PREFIX__!subrule"("O", "+&")
    new $P1420, "ResizablePMCArray"
    push $P1420, $P1419
    .return ($P1420)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+>"  :subid("315_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1424_tgt
    .local int rx1424_pos
    .local int rx1424_off
    .local int rx1424_eos
    .local int rx1424_rep
    .local pmc rx1424_cur
    .local pmc rx1424_debug
    (rx1424_cur, rx1424_pos, rx1424_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1424_cur
    .local pmc match
    .lex "$/", match
    length rx1424_eos, rx1424_tgt
    gt rx1424_pos, rx1424_eos, rx1424_done
    set rx1424_off, 0
    lt rx1424_pos, 2, rx1424_start
    sub rx1424_off, rx1424_pos, 1
    substr rx1424_tgt, rx1424_tgt, rx1424_off
  rx1424_start:
    eq $I10, 1, rx1424_restart
    if_null rx1424_debug, debug_1025
    rx1424_cur."!cursor_debug"("START", "infix:sym<+>")
  debug_1025:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1428_done
    goto rxscan1428_scan
  rxscan1428_loop:
    (rx1424_pos) = rx1424_cur."from"()
    inc rx1424_pos
    rx1424_cur."!cursor_from"(rx1424_pos)
    ge rx1424_pos, rx1424_eos, rxscan1428_done
  rxscan1428_scan:
    set_addr $I10, rxscan1428_loop
    rx1424_cur."!mark_push"(0, rx1424_pos, $I10)
  rxscan1428_done:
.annotate 'line', 637
  # rx subcapture "sym"
    set_addr $I10, rxcap_1429_fail
    rx1424_cur."!mark_push"(0, rx1424_pos, $I10)
  # rx literal  "+"
    add $I11, rx1424_pos, 1
    gt $I11, rx1424_eos, rx1424_fail
    sub $I11, rx1424_pos, rx1424_off
    ord $I11, rx1424_tgt, $I11
    ne $I11, 43, rx1424_fail
    add rx1424_pos, 1
    set_addr $I10, rxcap_1429_fail
    ($I12, $I11) = rx1424_cur."!mark_peek"($I10)
    rx1424_cur."!cursor_pos"($I11)
    ($P10) = rx1424_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1424_pos, "")
    rx1424_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1429_done
  rxcap_1429_fail:
    goto rx1424_fail
  rxcap_1429_done:
  # rx subrule "O" subtype=capture negate=
    rx1424_cur."!cursor_pos"(rx1424_pos)
    $P10 = rx1424_cur."O"("%additive, :pirop<add>")
    unless $P10, rx1424_fail
    rx1424_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1424_pos = $P10."pos"()
  # rx pass
    rx1424_cur."!cursor_pass"(rx1424_pos, "infix:sym<+>")
    if_null rx1424_debug, debug_1026
    rx1424_cur."!cursor_debug"("PASS", "infix:sym<+>", " at pos=", rx1424_pos)
  debug_1026:
    .return (rx1424_cur)
  rx1424_restart:
.annotate 'line', 4
    if_null rx1424_debug, debug_1027
    rx1424_cur."!cursor_debug"("NEXT", "infix:sym<+>")
  debug_1027:
  rx1424_fail:
    (rx1424_rep, rx1424_pos, $I10, $P10) = rx1424_cur."!mark_fail"(0)
    lt rx1424_pos, -1, rx1424_done
    eq rx1424_pos, -1, rx1424_fail
    jump $I10
  rx1424_done:
    rx1424_cur."!cursor_fail"()
    if_null rx1424_debug, debug_1028
    rx1424_cur."!cursor_debug"("FAIL", "infix:sym<+>")
  debug_1028:
    .return (rx1424_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+>"  :nsentry("!PREFIX__infix:sym<+>") :subid("316_1300057348.719") :method
.annotate 'line', 4
    $P1426 = self."!PREFIX__!subrule"("O", "+")
    new $P1427, "ResizablePMCArray"
    push $P1427, $P1426
    .return ($P1427)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<->"  :subid("317_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1431_tgt
    .local int rx1431_pos
    .local int rx1431_off
    .local int rx1431_eos
    .local int rx1431_rep
    .local pmc rx1431_cur
    .local pmc rx1431_debug
    (rx1431_cur, rx1431_pos, rx1431_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1431_cur
    .local pmc match
    .lex "$/", match
    length rx1431_eos, rx1431_tgt
    gt rx1431_pos, rx1431_eos, rx1431_done
    set rx1431_off, 0
    lt rx1431_pos, 2, rx1431_start
    sub rx1431_off, rx1431_pos, 1
    substr rx1431_tgt, rx1431_tgt, rx1431_off
  rx1431_start:
    eq $I10, 1, rx1431_restart
    if_null rx1431_debug, debug_1029
    rx1431_cur."!cursor_debug"("START", "infix:sym<->")
  debug_1029:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1435_done
    goto rxscan1435_scan
  rxscan1435_loop:
    (rx1431_pos) = rx1431_cur."from"()
    inc rx1431_pos
    rx1431_cur."!cursor_from"(rx1431_pos)
    ge rx1431_pos, rx1431_eos, rxscan1435_done
  rxscan1435_scan:
    set_addr $I10, rxscan1435_loop
    rx1431_cur."!mark_push"(0, rx1431_pos, $I10)
  rxscan1435_done:
.annotate 'line', 638
  # rx subcapture "sym"
    set_addr $I10, rxcap_1436_fail
    rx1431_cur."!mark_push"(0, rx1431_pos, $I10)
  # rx literal  "-"
    add $I11, rx1431_pos, 1
    gt $I11, rx1431_eos, rx1431_fail
    sub $I11, rx1431_pos, rx1431_off
    ord $I11, rx1431_tgt, $I11
    ne $I11, 45, rx1431_fail
    add rx1431_pos, 1
    set_addr $I10, rxcap_1436_fail
    ($I12, $I11) = rx1431_cur."!mark_peek"($I10)
    rx1431_cur."!cursor_pos"($I11)
    ($P10) = rx1431_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1431_pos, "")
    rx1431_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1436_done
  rxcap_1436_fail:
    goto rx1431_fail
  rxcap_1436_done:
  # rx subrule "O" subtype=capture negate=
    rx1431_cur."!cursor_pos"(rx1431_pos)
    $P10 = rx1431_cur."O"("%additive, :pirop<sub>")
    unless $P10, rx1431_fail
    rx1431_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1431_pos = $P10."pos"()
  # rx pass
    rx1431_cur."!cursor_pass"(rx1431_pos, "infix:sym<->")
    if_null rx1431_debug, debug_1030
    rx1431_cur."!cursor_debug"("PASS", "infix:sym<->", " at pos=", rx1431_pos)
  debug_1030:
    .return (rx1431_cur)
  rx1431_restart:
.annotate 'line', 4
    if_null rx1431_debug, debug_1031
    rx1431_cur."!cursor_debug"("NEXT", "infix:sym<->")
  debug_1031:
  rx1431_fail:
    (rx1431_rep, rx1431_pos, $I10, $P10) = rx1431_cur."!mark_fail"(0)
    lt rx1431_pos, -1, rx1431_done
    eq rx1431_pos, -1, rx1431_fail
    jump $I10
  rx1431_done:
    rx1431_cur."!cursor_fail"()
    if_null rx1431_debug, debug_1032
    rx1431_cur."!cursor_debug"("FAIL", "infix:sym<->")
  debug_1032:
    .return (rx1431_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<->"  :nsentry("!PREFIX__infix:sym<->") :subid("318_1300057348.719") :method
.annotate 'line', 4
    $P1433 = self."!PREFIX__!subrule"("O", "-")
    new $P1434, "ResizablePMCArray"
    push $P1434, $P1433
    .return ($P1434)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+|>"  :subid("319_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1438_tgt
    .local int rx1438_pos
    .local int rx1438_off
    .local int rx1438_eos
    .local int rx1438_rep
    .local pmc rx1438_cur
    .local pmc rx1438_debug
    (rx1438_cur, rx1438_pos, rx1438_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1438_cur
    .local pmc match
    .lex "$/", match
    length rx1438_eos, rx1438_tgt
    gt rx1438_pos, rx1438_eos, rx1438_done
    set rx1438_off, 0
    lt rx1438_pos, 2, rx1438_start
    sub rx1438_off, rx1438_pos, 1
    substr rx1438_tgt, rx1438_tgt, rx1438_off
  rx1438_start:
    eq $I10, 1, rx1438_restart
    if_null rx1438_debug, debug_1033
    rx1438_cur."!cursor_debug"("START", "infix:sym<+|>")
  debug_1033:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1442_done
    goto rxscan1442_scan
  rxscan1442_loop:
    (rx1438_pos) = rx1438_cur."from"()
    inc rx1438_pos
    rx1438_cur."!cursor_from"(rx1438_pos)
    ge rx1438_pos, rx1438_eos, rxscan1442_done
  rxscan1442_scan:
    set_addr $I10, rxscan1442_loop
    rx1438_cur."!mark_push"(0, rx1438_pos, $I10)
  rxscan1442_done:
.annotate 'line', 639
  # rx subcapture "sym"
    set_addr $I10, rxcap_1443_fail
    rx1438_cur."!mark_push"(0, rx1438_pos, $I10)
  # rx literal  "+|"
    add $I11, rx1438_pos, 2
    gt $I11, rx1438_eos, rx1438_fail
    sub $I11, rx1438_pos, rx1438_off
    substr $S10, rx1438_tgt, $I11, 2
    ne $S10, "+|", rx1438_fail
    add rx1438_pos, 2
    set_addr $I10, rxcap_1443_fail
    ($I12, $I11) = rx1438_cur."!mark_peek"($I10)
    rx1438_cur."!cursor_pos"($I11)
    ($P10) = rx1438_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1438_pos, "")
    rx1438_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1443_done
  rxcap_1443_fail:
    goto rx1438_fail
  rxcap_1443_done:
  # rx subrule "O" subtype=capture negate=
    rx1438_cur."!cursor_pos"(rx1438_pos)
    $P10 = rx1438_cur."O"("%additive, :pirop<bor III>")
    unless $P10, rx1438_fail
    rx1438_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1438_pos = $P10."pos"()
  # rx pass
    rx1438_cur."!cursor_pass"(rx1438_pos, "infix:sym<+|>")
    if_null rx1438_debug, debug_1034
    rx1438_cur."!cursor_debug"("PASS", "infix:sym<+|>", " at pos=", rx1438_pos)
  debug_1034:
    .return (rx1438_cur)
  rx1438_restart:
.annotate 'line', 4
    if_null rx1438_debug, debug_1035
    rx1438_cur."!cursor_debug"("NEXT", "infix:sym<+|>")
  debug_1035:
  rx1438_fail:
    (rx1438_rep, rx1438_pos, $I10, $P10) = rx1438_cur."!mark_fail"(0)
    lt rx1438_pos, -1, rx1438_done
    eq rx1438_pos, -1, rx1438_fail
    jump $I10
  rx1438_done:
    rx1438_cur."!cursor_fail"()
    if_null rx1438_debug, debug_1036
    rx1438_cur."!cursor_debug"("FAIL", "infix:sym<+|>")
  debug_1036:
    .return (rx1438_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+|>"  :nsentry("!PREFIX__infix:sym<+|>") :subid("320_1300057348.719") :method
.annotate 'line', 4
    $P1440 = self."!PREFIX__!subrule"("O", "+|")
    new $P1441, "ResizablePMCArray"
    push $P1441, $P1440
    .return ($P1441)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+^>"  :subid("321_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1445_tgt
    .local int rx1445_pos
    .local int rx1445_off
    .local int rx1445_eos
    .local int rx1445_rep
    .local pmc rx1445_cur
    .local pmc rx1445_debug
    (rx1445_cur, rx1445_pos, rx1445_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1445_cur
    .local pmc match
    .lex "$/", match
    length rx1445_eos, rx1445_tgt
    gt rx1445_pos, rx1445_eos, rx1445_done
    set rx1445_off, 0
    lt rx1445_pos, 2, rx1445_start
    sub rx1445_off, rx1445_pos, 1
    substr rx1445_tgt, rx1445_tgt, rx1445_off
  rx1445_start:
    eq $I10, 1, rx1445_restart
    if_null rx1445_debug, debug_1037
    rx1445_cur."!cursor_debug"("START", "infix:sym<+^>")
  debug_1037:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1449_done
    goto rxscan1449_scan
  rxscan1449_loop:
    (rx1445_pos) = rx1445_cur."from"()
    inc rx1445_pos
    rx1445_cur."!cursor_from"(rx1445_pos)
    ge rx1445_pos, rx1445_eos, rxscan1449_done
  rxscan1449_scan:
    set_addr $I10, rxscan1449_loop
    rx1445_cur."!mark_push"(0, rx1445_pos, $I10)
  rxscan1449_done:
.annotate 'line', 640
  # rx subcapture "sym"
    set_addr $I10, rxcap_1450_fail
    rx1445_cur."!mark_push"(0, rx1445_pos, $I10)
  # rx literal  "+^"
    add $I11, rx1445_pos, 2
    gt $I11, rx1445_eos, rx1445_fail
    sub $I11, rx1445_pos, rx1445_off
    substr $S10, rx1445_tgt, $I11, 2
    ne $S10, "+^", rx1445_fail
    add rx1445_pos, 2
    set_addr $I10, rxcap_1450_fail
    ($I12, $I11) = rx1445_cur."!mark_peek"($I10)
    rx1445_cur."!cursor_pos"($I11)
    ($P10) = rx1445_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1445_pos, "")
    rx1445_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1450_done
  rxcap_1450_fail:
    goto rx1445_fail
  rxcap_1450_done:
  # rx subrule "O" subtype=capture negate=
    rx1445_cur."!cursor_pos"(rx1445_pos)
    $P10 = rx1445_cur."O"("%additive, :pirop<bxor III>")
    unless $P10, rx1445_fail
    rx1445_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1445_pos = $P10."pos"()
  # rx pass
    rx1445_cur."!cursor_pass"(rx1445_pos, "infix:sym<+^>")
    if_null rx1445_debug, debug_1038
    rx1445_cur."!cursor_debug"("PASS", "infix:sym<+^>", " at pos=", rx1445_pos)
  debug_1038:
    .return (rx1445_cur)
  rx1445_restart:
.annotate 'line', 4
    if_null rx1445_debug, debug_1039
    rx1445_cur."!cursor_debug"("NEXT", "infix:sym<+^>")
  debug_1039:
  rx1445_fail:
    (rx1445_rep, rx1445_pos, $I10, $P10) = rx1445_cur."!mark_fail"(0)
    lt rx1445_pos, -1, rx1445_done
    eq rx1445_pos, -1, rx1445_fail
    jump $I10
  rx1445_done:
    rx1445_cur."!cursor_fail"()
    if_null rx1445_debug, debug_1040
    rx1445_cur."!cursor_debug"("FAIL", "infix:sym<+^>")
  debug_1040:
    .return (rx1445_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+^>"  :nsentry("!PREFIX__infix:sym<+^>") :subid("322_1300057348.719") :method
.annotate 'line', 4
    $P1447 = self."!PREFIX__!subrule"("O", "+^")
    new $P1448, "ResizablePMCArray"
    push $P1448, $P1447
    .return ($P1448)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~>"  :subid("323_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1452_tgt
    .local int rx1452_pos
    .local int rx1452_off
    .local int rx1452_eos
    .local int rx1452_rep
    .local pmc rx1452_cur
    .local pmc rx1452_debug
    (rx1452_cur, rx1452_pos, rx1452_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1452_cur
    .local pmc match
    .lex "$/", match
    length rx1452_eos, rx1452_tgt
    gt rx1452_pos, rx1452_eos, rx1452_done
    set rx1452_off, 0
    lt rx1452_pos, 2, rx1452_start
    sub rx1452_off, rx1452_pos, 1
    substr rx1452_tgt, rx1452_tgt, rx1452_off
  rx1452_start:
    eq $I10, 1, rx1452_restart
    if_null rx1452_debug, debug_1041
    rx1452_cur."!cursor_debug"("START", "infix:sym<~>")
  debug_1041:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1456_done
    goto rxscan1456_scan
  rxscan1456_loop:
    (rx1452_pos) = rx1452_cur."from"()
    inc rx1452_pos
    rx1452_cur."!cursor_from"(rx1452_pos)
    ge rx1452_pos, rx1452_eos, rxscan1456_done
  rxscan1456_scan:
    set_addr $I10, rxscan1456_loop
    rx1452_cur."!mark_push"(0, rx1452_pos, $I10)
  rxscan1456_done:
.annotate 'line', 642
  # rx subcapture "sym"
    set_addr $I10, rxcap_1457_fail
    rx1452_cur."!mark_push"(0, rx1452_pos, $I10)
  # rx literal  "~"
    add $I11, rx1452_pos, 1
    gt $I11, rx1452_eos, rx1452_fail
    sub $I11, rx1452_pos, rx1452_off
    ord $I11, rx1452_tgt, $I11
    ne $I11, 126, rx1452_fail
    add rx1452_pos, 1
    set_addr $I10, rxcap_1457_fail
    ($I12, $I11) = rx1452_cur."!mark_peek"($I10)
    rx1452_cur."!cursor_pos"($I11)
    ($P10) = rx1452_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1452_pos, "")
    rx1452_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1457_done
  rxcap_1457_fail:
    goto rx1452_fail
  rxcap_1457_done:
  # rx subrule "O" subtype=capture negate=
    rx1452_cur."!cursor_pos"(rx1452_pos)
    $P10 = rx1452_cur."O"("%concatenation , :pirop<concat>")
    unless $P10, rx1452_fail
    rx1452_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1452_pos = $P10."pos"()
  # rx pass
    rx1452_cur."!cursor_pass"(rx1452_pos, "infix:sym<~>")
    if_null rx1452_debug, debug_1042
    rx1452_cur."!cursor_debug"("PASS", "infix:sym<~>", " at pos=", rx1452_pos)
  debug_1042:
    .return (rx1452_cur)
  rx1452_restart:
.annotate 'line', 4
    if_null rx1452_debug, debug_1043
    rx1452_cur."!cursor_debug"("NEXT", "infix:sym<~>")
  debug_1043:
  rx1452_fail:
    (rx1452_rep, rx1452_pos, $I10, $P10) = rx1452_cur."!mark_fail"(0)
    lt rx1452_pos, -1, rx1452_done
    eq rx1452_pos, -1, rx1452_fail
    jump $I10
  rx1452_done:
    rx1452_cur."!cursor_fail"()
    if_null rx1452_debug, debug_1044
    rx1452_cur."!cursor_debug"("FAIL", "infix:sym<~>")
  debug_1044:
    .return (rx1452_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~>"  :nsentry("!PREFIX__infix:sym<~>") :subid("324_1300057348.719") :method
.annotate 'line', 4
    $P1454 = self."!PREFIX__!subrule"("O", "~")
    new $P1455, "ResizablePMCArray"
    push $P1455, $P1454
    .return ($P1455)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<==>"  :subid("325_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1459_tgt
    .local int rx1459_pos
    .local int rx1459_off
    .local int rx1459_eos
    .local int rx1459_rep
    .local pmc rx1459_cur
    .local pmc rx1459_debug
    (rx1459_cur, rx1459_pos, rx1459_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1459_cur
    .local pmc match
    .lex "$/", match
    length rx1459_eos, rx1459_tgt
    gt rx1459_pos, rx1459_eos, rx1459_done
    set rx1459_off, 0
    lt rx1459_pos, 2, rx1459_start
    sub rx1459_off, rx1459_pos, 1
    substr rx1459_tgt, rx1459_tgt, rx1459_off
  rx1459_start:
    eq $I10, 1, rx1459_restart
    if_null rx1459_debug, debug_1045
    rx1459_cur."!cursor_debug"("START", "infix:sym<==>")
  debug_1045:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1463_done
    goto rxscan1463_scan
  rxscan1463_loop:
    (rx1459_pos) = rx1459_cur."from"()
    inc rx1459_pos
    rx1459_cur."!cursor_from"(rx1459_pos)
    ge rx1459_pos, rx1459_eos, rxscan1463_done
  rxscan1463_scan:
    set_addr $I10, rxscan1463_loop
    rx1459_cur."!mark_push"(0, rx1459_pos, $I10)
  rxscan1463_done:
.annotate 'line', 644
  # rx subcapture "sym"
    set_addr $I10, rxcap_1464_fail
    rx1459_cur."!mark_push"(0, rx1459_pos, $I10)
  # rx literal  "=="
    add $I11, rx1459_pos, 2
    gt $I11, rx1459_eos, rx1459_fail
    sub $I11, rx1459_pos, rx1459_off
    substr $S10, rx1459_tgt, $I11, 2
    ne $S10, "==", rx1459_fail
    add rx1459_pos, 2
    set_addr $I10, rxcap_1464_fail
    ($I12, $I11) = rx1459_cur."!mark_peek"($I10)
    rx1459_cur."!cursor_pos"($I11)
    ($P10) = rx1459_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1459_pos, "")
    rx1459_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1464_done
  rxcap_1464_fail:
    goto rx1459_fail
  rxcap_1464_done:
  # rx subrule "O" subtype=capture negate=
    rx1459_cur."!cursor_pos"(rx1459_pos)
    $P10 = rx1459_cur."O"("%relational, :pirop<iseq INn>")
    unless $P10, rx1459_fail
    rx1459_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1459_pos = $P10."pos"()
  # rx pass
    rx1459_cur."!cursor_pass"(rx1459_pos, "infix:sym<==>")
    if_null rx1459_debug, debug_1046
    rx1459_cur."!cursor_debug"("PASS", "infix:sym<==>", " at pos=", rx1459_pos)
  debug_1046:
    .return (rx1459_cur)
  rx1459_restart:
.annotate 'line', 4
    if_null rx1459_debug, debug_1047
    rx1459_cur."!cursor_debug"("NEXT", "infix:sym<==>")
  debug_1047:
  rx1459_fail:
    (rx1459_rep, rx1459_pos, $I10, $P10) = rx1459_cur."!mark_fail"(0)
    lt rx1459_pos, -1, rx1459_done
    eq rx1459_pos, -1, rx1459_fail
    jump $I10
  rx1459_done:
    rx1459_cur."!cursor_fail"()
    if_null rx1459_debug, debug_1048
    rx1459_cur."!cursor_debug"("FAIL", "infix:sym<==>")
  debug_1048:
    .return (rx1459_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<==>"  :nsentry("!PREFIX__infix:sym<==>") :subid("326_1300057348.719") :method
.annotate 'line', 4
    $P1461 = self."!PREFIX__!subrule"("O", "==")
    new $P1462, "ResizablePMCArray"
    push $P1462, $P1461
    .return ($P1462)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<!=>"  :subid("327_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1466_tgt
    .local int rx1466_pos
    .local int rx1466_off
    .local int rx1466_eos
    .local int rx1466_rep
    .local pmc rx1466_cur
    .local pmc rx1466_debug
    (rx1466_cur, rx1466_pos, rx1466_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1466_cur
    .local pmc match
    .lex "$/", match
    length rx1466_eos, rx1466_tgt
    gt rx1466_pos, rx1466_eos, rx1466_done
    set rx1466_off, 0
    lt rx1466_pos, 2, rx1466_start
    sub rx1466_off, rx1466_pos, 1
    substr rx1466_tgt, rx1466_tgt, rx1466_off
  rx1466_start:
    eq $I10, 1, rx1466_restart
    if_null rx1466_debug, debug_1049
    rx1466_cur."!cursor_debug"("START", "infix:sym<!=>")
  debug_1049:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1470_done
    goto rxscan1470_scan
  rxscan1470_loop:
    (rx1466_pos) = rx1466_cur."from"()
    inc rx1466_pos
    rx1466_cur."!cursor_from"(rx1466_pos)
    ge rx1466_pos, rx1466_eos, rxscan1470_done
  rxscan1470_scan:
    set_addr $I10, rxscan1470_loop
    rx1466_cur."!mark_push"(0, rx1466_pos, $I10)
  rxscan1470_done:
.annotate 'line', 645
  # rx subcapture "sym"
    set_addr $I10, rxcap_1471_fail
    rx1466_cur."!mark_push"(0, rx1466_pos, $I10)
  # rx literal  "!="
    add $I11, rx1466_pos, 2
    gt $I11, rx1466_eos, rx1466_fail
    sub $I11, rx1466_pos, rx1466_off
    substr $S10, rx1466_tgt, $I11, 2
    ne $S10, "!=", rx1466_fail
    add rx1466_pos, 2
    set_addr $I10, rxcap_1471_fail
    ($I12, $I11) = rx1466_cur."!mark_peek"($I10)
    rx1466_cur."!cursor_pos"($I11)
    ($P10) = rx1466_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1466_pos, "")
    rx1466_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1471_done
  rxcap_1471_fail:
    goto rx1466_fail
  rxcap_1471_done:
  # rx subrule "O" subtype=capture negate=
    rx1466_cur."!cursor_pos"(rx1466_pos)
    $P10 = rx1466_cur."O"("%relational, :pirop<isne INn>")
    unless $P10, rx1466_fail
    rx1466_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1466_pos = $P10."pos"()
  # rx pass
    rx1466_cur."!cursor_pass"(rx1466_pos, "infix:sym<!=>")
    if_null rx1466_debug, debug_1050
    rx1466_cur."!cursor_debug"("PASS", "infix:sym<!=>", " at pos=", rx1466_pos)
  debug_1050:
    .return (rx1466_cur)
  rx1466_restart:
.annotate 'line', 4
    if_null rx1466_debug, debug_1051
    rx1466_cur."!cursor_debug"("NEXT", "infix:sym<!=>")
  debug_1051:
  rx1466_fail:
    (rx1466_rep, rx1466_pos, $I10, $P10) = rx1466_cur."!mark_fail"(0)
    lt rx1466_pos, -1, rx1466_done
    eq rx1466_pos, -1, rx1466_fail
    jump $I10
  rx1466_done:
    rx1466_cur."!cursor_fail"()
    if_null rx1466_debug, debug_1052
    rx1466_cur."!cursor_debug"("FAIL", "infix:sym<!=>")
  debug_1052:
    .return (rx1466_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<!=>"  :nsentry("!PREFIX__infix:sym<!=>") :subid("328_1300057348.719") :method
.annotate 'line', 4
    $P1468 = self."!PREFIX__!subrule"("O", "!=")
    new $P1469, "ResizablePMCArray"
    push $P1469, $P1468
    .return ($P1469)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<=>"  :subid("329_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1473_tgt
    .local int rx1473_pos
    .local int rx1473_off
    .local int rx1473_eos
    .local int rx1473_rep
    .local pmc rx1473_cur
    .local pmc rx1473_debug
    (rx1473_cur, rx1473_pos, rx1473_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1473_cur
    .local pmc match
    .lex "$/", match
    length rx1473_eos, rx1473_tgt
    gt rx1473_pos, rx1473_eos, rx1473_done
    set rx1473_off, 0
    lt rx1473_pos, 2, rx1473_start
    sub rx1473_off, rx1473_pos, 1
    substr rx1473_tgt, rx1473_tgt, rx1473_off
  rx1473_start:
    eq $I10, 1, rx1473_restart
    if_null rx1473_debug, debug_1053
    rx1473_cur."!cursor_debug"("START", "infix:sym<<=>")
  debug_1053:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1477_done
    goto rxscan1477_scan
  rxscan1477_loop:
    (rx1473_pos) = rx1473_cur."from"()
    inc rx1473_pos
    rx1473_cur."!cursor_from"(rx1473_pos)
    ge rx1473_pos, rx1473_eos, rxscan1477_done
  rxscan1477_scan:
    set_addr $I10, rxscan1477_loop
    rx1473_cur."!mark_push"(0, rx1473_pos, $I10)
  rxscan1477_done:
.annotate 'line', 646
  # rx subcapture "sym"
    set_addr $I10, rxcap_1478_fail
    rx1473_cur."!mark_push"(0, rx1473_pos, $I10)
  # rx literal  "<="
    add $I11, rx1473_pos, 2
    gt $I11, rx1473_eos, rx1473_fail
    sub $I11, rx1473_pos, rx1473_off
    substr $S10, rx1473_tgt, $I11, 2
    ne $S10, "<=", rx1473_fail
    add rx1473_pos, 2
    set_addr $I10, rxcap_1478_fail
    ($I12, $I11) = rx1473_cur."!mark_peek"($I10)
    rx1473_cur."!cursor_pos"($I11)
    ($P10) = rx1473_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1473_pos, "")
    rx1473_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1478_done
  rxcap_1478_fail:
    goto rx1473_fail
  rxcap_1478_done:
  # rx subrule "O" subtype=capture negate=
    rx1473_cur."!cursor_pos"(rx1473_pos)
    $P10 = rx1473_cur."O"("%relational, :pirop<isle INn>")
    unless $P10, rx1473_fail
    rx1473_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1473_pos = $P10."pos"()
  # rx pass
    rx1473_cur."!cursor_pass"(rx1473_pos, "infix:sym<<=>")
    if_null rx1473_debug, debug_1054
    rx1473_cur."!cursor_debug"("PASS", "infix:sym<<=>", " at pos=", rx1473_pos)
  debug_1054:
    .return (rx1473_cur)
  rx1473_restart:
.annotate 'line', 4
    if_null rx1473_debug, debug_1055
    rx1473_cur."!cursor_debug"("NEXT", "infix:sym<<=>")
  debug_1055:
  rx1473_fail:
    (rx1473_rep, rx1473_pos, $I10, $P10) = rx1473_cur."!mark_fail"(0)
    lt rx1473_pos, -1, rx1473_done
    eq rx1473_pos, -1, rx1473_fail
    jump $I10
  rx1473_done:
    rx1473_cur."!cursor_fail"()
    if_null rx1473_debug, debug_1056
    rx1473_cur."!cursor_debug"("FAIL", "infix:sym<<=>")
  debug_1056:
    .return (rx1473_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<=>"  :nsentry("!PREFIX__infix:sym<<=>") :subid("330_1300057348.719") :method
.annotate 'line', 4
    $P1475 = self."!PREFIX__!subrule"("O", "<=")
    new $P1476, "ResizablePMCArray"
    push $P1476, $P1475
    .return ($P1476)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>=>"  :subid("331_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1480_tgt
    .local int rx1480_pos
    .local int rx1480_off
    .local int rx1480_eos
    .local int rx1480_rep
    .local pmc rx1480_cur
    .local pmc rx1480_debug
    (rx1480_cur, rx1480_pos, rx1480_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1480_cur
    .local pmc match
    .lex "$/", match
    length rx1480_eos, rx1480_tgt
    gt rx1480_pos, rx1480_eos, rx1480_done
    set rx1480_off, 0
    lt rx1480_pos, 2, rx1480_start
    sub rx1480_off, rx1480_pos, 1
    substr rx1480_tgt, rx1480_tgt, rx1480_off
  rx1480_start:
    eq $I10, 1, rx1480_restart
    if_null rx1480_debug, debug_1057
    rx1480_cur."!cursor_debug"("START", "infix:sym<>=>")
  debug_1057:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1484_done
    goto rxscan1484_scan
  rxscan1484_loop:
    (rx1480_pos) = rx1480_cur."from"()
    inc rx1480_pos
    rx1480_cur."!cursor_from"(rx1480_pos)
    ge rx1480_pos, rx1480_eos, rxscan1484_done
  rxscan1484_scan:
    set_addr $I10, rxscan1484_loop
    rx1480_cur."!mark_push"(0, rx1480_pos, $I10)
  rxscan1484_done:
.annotate 'line', 647
  # rx subcapture "sym"
    set_addr $I10, rxcap_1485_fail
    rx1480_cur."!mark_push"(0, rx1480_pos, $I10)
  # rx literal  ">="
    add $I11, rx1480_pos, 2
    gt $I11, rx1480_eos, rx1480_fail
    sub $I11, rx1480_pos, rx1480_off
    substr $S10, rx1480_tgt, $I11, 2
    ne $S10, ">=", rx1480_fail
    add rx1480_pos, 2
    set_addr $I10, rxcap_1485_fail
    ($I12, $I11) = rx1480_cur."!mark_peek"($I10)
    rx1480_cur."!cursor_pos"($I11)
    ($P10) = rx1480_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1480_pos, "")
    rx1480_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1485_done
  rxcap_1485_fail:
    goto rx1480_fail
  rxcap_1485_done:
  # rx subrule "O" subtype=capture negate=
    rx1480_cur."!cursor_pos"(rx1480_pos)
    $P10 = rx1480_cur."O"("%relational, :pirop<isge INn>")
    unless $P10, rx1480_fail
    rx1480_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1480_pos = $P10."pos"()
  # rx pass
    rx1480_cur."!cursor_pass"(rx1480_pos, "infix:sym<>=>")
    if_null rx1480_debug, debug_1058
    rx1480_cur."!cursor_debug"("PASS", "infix:sym<>=>", " at pos=", rx1480_pos)
  debug_1058:
    .return (rx1480_cur)
  rx1480_restart:
.annotate 'line', 4
    if_null rx1480_debug, debug_1059
    rx1480_cur."!cursor_debug"("NEXT", "infix:sym<>=>")
  debug_1059:
  rx1480_fail:
    (rx1480_rep, rx1480_pos, $I10, $P10) = rx1480_cur."!mark_fail"(0)
    lt rx1480_pos, -1, rx1480_done
    eq rx1480_pos, -1, rx1480_fail
    jump $I10
  rx1480_done:
    rx1480_cur."!cursor_fail"()
    if_null rx1480_debug, debug_1060
    rx1480_cur."!cursor_debug"("FAIL", "infix:sym<>=>")
  debug_1060:
    .return (rx1480_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>=>"  :nsentry("!PREFIX__infix:sym<>=>") :subid("332_1300057348.719") :method
.annotate 'line', 4
    $P1482 = self."!PREFIX__!subrule"("O", ">=")
    new $P1483, "ResizablePMCArray"
    push $P1483, $P1482
    .return ($P1483)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<>"  :subid("333_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1487_tgt
    .local int rx1487_pos
    .local int rx1487_off
    .local int rx1487_eos
    .local int rx1487_rep
    .local pmc rx1487_cur
    .local pmc rx1487_debug
    (rx1487_cur, rx1487_pos, rx1487_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1487_cur
    .local pmc match
    .lex "$/", match
    length rx1487_eos, rx1487_tgt
    gt rx1487_pos, rx1487_eos, rx1487_done
    set rx1487_off, 0
    lt rx1487_pos, 2, rx1487_start
    sub rx1487_off, rx1487_pos, 1
    substr rx1487_tgt, rx1487_tgt, rx1487_off
  rx1487_start:
    eq $I10, 1, rx1487_restart
    if_null rx1487_debug, debug_1061
    rx1487_cur."!cursor_debug"("START", "infix:sym<<>")
  debug_1061:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1491_done
    goto rxscan1491_scan
  rxscan1491_loop:
    (rx1487_pos) = rx1487_cur."from"()
    inc rx1487_pos
    rx1487_cur."!cursor_from"(rx1487_pos)
    ge rx1487_pos, rx1487_eos, rxscan1491_done
  rxscan1491_scan:
    set_addr $I10, rxscan1491_loop
    rx1487_cur."!mark_push"(0, rx1487_pos, $I10)
  rxscan1491_done:
.annotate 'line', 648
  # rx subcapture "sym"
    set_addr $I10, rxcap_1492_fail
    rx1487_cur."!mark_push"(0, rx1487_pos, $I10)
  # rx literal  "<"
    add $I11, rx1487_pos, 1
    gt $I11, rx1487_eos, rx1487_fail
    sub $I11, rx1487_pos, rx1487_off
    ord $I11, rx1487_tgt, $I11
    ne $I11, 60, rx1487_fail
    add rx1487_pos, 1
    set_addr $I10, rxcap_1492_fail
    ($I12, $I11) = rx1487_cur."!mark_peek"($I10)
    rx1487_cur."!cursor_pos"($I11)
    ($P10) = rx1487_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1487_pos, "")
    rx1487_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1492_done
  rxcap_1492_fail:
    goto rx1487_fail
  rxcap_1492_done:
  # rx subrule "O" subtype=capture negate=
    rx1487_cur."!cursor_pos"(rx1487_pos)
    $P10 = rx1487_cur."O"("%relational, :pirop<islt INn>")
    unless $P10, rx1487_fail
    rx1487_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1487_pos = $P10."pos"()
  # rx pass
    rx1487_cur."!cursor_pass"(rx1487_pos, "infix:sym<<>")
    if_null rx1487_debug, debug_1062
    rx1487_cur."!cursor_debug"("PASS", "infix:sym<<>", " at pos=", rx1487_pos)
  debug_1062:
    .return (rx1487_cur)
  rx1487_restart:
.annotate 'line', 4
    if_null rx1487_debug, debug_1063
    rx1487_cur."!cursor_debug"("NEXT", "infix:sym<<>")
  debug_1063:
  rx1487_fail:
    (rx1487_rep, rx1487_pos, $I10, $P10) = rx1487_cur."!mark_fail"(0)
    lt rx1487_pos, -1, rx1487_done
    eq rx1487_pos, -1, rx1487_fail
    jump $I10
  rx1487_done:
    rx1487_cur."!cursor_fail"()
    if_null rx1487_debug, debug_1064
    rx1487_cur."!cursor_debug"("FAIL", "infix:sym<<>")
  debug_1064:
    .return (rx1487_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<>"  :nsentry("!PREFIX__infix:sym<<>") :subid("334_1300057348.719") :method
.annotate 'line', 4
    $P1489 = self."!PREFIX__!subrule"("O", "<")
    new $P1490, "ResizablePMCArray"
    push $P1490, $P1489
    .return ($P1490)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>>"  :subid("335_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1494_tgt
    .local int rx1494_pos
    .local int rx1494_off
    .local int rx1494_eos
    .local int rx1494_rep
    .local pmc rx1494_cur
    .local pmc rx1494_debug
    (rx1494_cur, rx1494_pos, rx1494_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1494_cur
    .local pmc match
    .lex "$/", match
    length rx1494_eos, rx1494_tgt
    gt rx1494_pos, rx1494_eos, rx1494_done
    set rx1494_off, 0
    lt rx1494_pos, 2, rx1494_start
    sub rx1494_off, rx1494_pos, 1
    substr rx1494_tgt, rx1494_tgt, rx1494_off
  rx1494_start:
    eq $I10, 1, rx1494_restart
    if_null rx1494_debug, debug_1065
    rx1494_cur."!cursor_debug"("START", "infix:sym<>>")
  debug_1065:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1498_done
    goto rxscan1498_scan
  rxscan1498_loop:
    (rx1494_pos) = rx1494_cur."from"()
    inc rx1494_pos
    rx1494_cur."!cursor_from"(rx1494_pos)
    ge rx1494_pos, rx1494_eos, rxscan1498_done
  rxscan1498_scan:
    set_addr $I10, rxscan1498_loop
    rx1494_cur."!mark_push"(0, rx1494_pos, $I10)
  rxscan1498_done:
.annotate 'line', 649
  # rx subcapture "sym"
    set_addr $I10, rxcap_1499_fail
    rx1494_cur."!mark_push"(0, rx1494_pos, $I10)
  # rx literal  ">"
    add $I11, rx1494_pos, 1
    gt $I11, rx1494_eos, rx1494_fail
    sub $I11, rx1494_pos, rx1494_off
    ord $I11, rx1494_tgt, $I11
    ne $I11, 62, rx1494_fail
    add rx1494_pos, 1
    set_addr $I10, rxcap_1499_fail
    ($I12, $I11) = rx1494_cur."!mark_peek"($I10)
    rx1494_cur."!cursor_pos"($I11)
    ($P10) = rx1494_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1494_pos, "")
    rx1494_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1499_done
  rxcap_1499_fail:
    goto rx1494_fail
  rxcap_1499_done:
  # rx subrule "O" subtype=capture negate=
    rx1494_cur."!cursor_pos"(rx1494_pos)
    $P10 = rx1494_cur."O"("%relational, :pirop<isgt INn>")
    unless $P10, rx1494_fail
    rx1494_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1494_pos = $P10."pos"()
  # rx pass
    rx1494_cur."!cursor_pass"(rx1494_pos, "infix:sym<>>")
    if_null rx1494_debug, debug_1066
    rx1494_cur."!cursor_debug"("PASS", "infix:sym<>>", " at pos=", rx1494_pos)
  debug_1066:
    .return (rx1494_cur)
  rx1494_restart:
.annotate 'line', 4
    if_null rx1494_debug, debug_1067
    rx1494_cur."!cursor_debug"("NEXT", "infix:sym<>>")
  debug_1067:
  rx1494_fail:
    (rx1494_rep, rx1494_pos, $I10, $P10) = rx1494_cur."!mark_fail"(0)
    lt rx1494_pos, -1, rx1494_done
    eq rx1494_pos, -1, rx1494_fail
    jump $I10
  rx1494_done:
    rx1494_cur."!cursor_fail"()
    if_null rx1494_debug, debug_1068
    rx1494_cur."!cursor_debug"("FAIL", "infix:sym<>>")
  debug_1068:
    .return (rx1494_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>>"  :nsentry("!PREFIX__infix:sym<>>") :subid("336_1300057348.719") :method
.annotate 'line', 4
    $P1496 = self."!PREFIX__!subrule"("O", ">")
    new $P1497, "ResizablePMCArray"
    push $P1497, $P1496
    .return ($P1497)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<eq>"  :subid("337_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1501_tgt
    .local int rx1501_pos
    .local int rx1501_off
    .local int rx1501_eos
    .local int rx1501_rep
    .local pmc rx1501_cur
    .local pmc rx1501_debug
    (rx1501_cur, rx1501_pos, rx1501_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1501_cur
    .local pmc match
    .lex "$/", match
    length rx1501_eos, rx1501_tgt
    gt rx1501_pos, rx1501_eos, rx1501_done
    set rx1501_off, 0
    lt rx1501_pos, 2, rx1501_start
    sub rx1501_off, rx1501_pos, 1
    substr rx1501_tgt, rx1501_tgt, rx1501_off
  rx1501_start:
    eq $I10, 1, rx1501_restart
    if_null rx1501_debug, debug_1069
    rx1501_cur."!cursor_debug"("START", "infix:sym<eq>")
  debug_1069:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1505_done
    goto rxscan1505_scan
  rxscan1505_loop:
    (rx1501_pos) = rx1501_cur."from"()
    inc rx1501_pos
    rx1501_cur."!cursor_from"(rx1501_pos)
    ge rx1501_pos, rx1501_eos, rxscan1505_done
  rxscan1505_scan:
    set_addr $I10, rxscan1505_loop
    rx1501_cur."!mark_push"(0, rx1501_pos, $I10)
  rxscan1505_done:
.annotate 'line', 650
  # rx subcapture "sym"
    set_addr $I10, rxcap_1506_fail
    rx1501_cur."!mark_push"(0, rx1501_pos, $I10)
  # rx literal  "eq"
    add $I11, rx1501_pos, 2
    gt $I11, rx1501_eos, rx1501_fail
    sub $I11, rx1501_pos, rx1501_off
    substr $S10, rx1501_tgt, $I11, 2
    ne $S10, "eq", rx1501_fail
    add rx1501_pos, 2
    set_addr $I10, rxcap_1506_fail
    ($I12, $I11) = rx1501_cur."!mark_peek"($I10)
    rx1501_cur."!cursor_pos"($I11)
    ($P10) = rx1501_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1501_pos, "")
    rx1501_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1506_done
  rxcap_1506_fail:
    goto rx1501_fail
  rxcap_1506_done:
  # rx subrule "O" subtype=capture negate=
    rx1501_cur."!cursor_pos"(rx1501_pos)
    $P10 = rx1501_cur."O"("%relational, :pirop<iseq ISs>")
    unless $P10, rx1501_fail
    rx1501_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1501_pos = $P10."pos"()
  # rx pass
    rx1501_cur."!cursor_pass"(rx1501_pos, "infix:sym<eq>")
    if_null rx1501_debug, debug_1070
    rx1501_cur."!cursor_debug"("PASS", "infix:sym<eq>", " at pos=", rx1501_pos)
  debug_1070:
    .return (rx1501_cur)
  rx1501_restart:
.annotate 'line', 4
    if_null rx1501_debug, debug_1071
    rx1501_cur."!cursor_debug"("NEXT", "infix:sym<eq>")
  debug_1071:
  rx1501_fail:
    (rx1501_rep, rx1501_pos, $I10, $P10) = rx1501_cur."!mark_fail"(0)
    lt rx1501_pos, -1, rx1501_done
    eq rx1501_pos, -1, rx1501_fail
    jump $I10
  rx1501_done:
    rx1501_cur."!cursor_fail"()
    if_null rx1501_debug, debug_1072
    rx1501_cur."!cursor_debug"("FAIL", "infix:sym<eq>")
  debug_1072:
    .return (rx1501_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<eq>"  :nsentry("!PREFIX__infix:sym<eq>") :subid("338_1300057348.719") :method
.annotate 'line', 4
    $P1503 = self."!PREFIX__!subrule"("O", "eq")
    new $P1504, "ResizablePMCArray"
    push $P1504, $P1503
    .return ($P1504)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ne>"  :subid("339_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1508_tgt
    .local int rx1508_pos
    .local int rx1508_off
    .local int rx1508_eos
    .local int rx1508_rep
    .local pmc rx1508_cur
    .local pmc rx1508_debug
    (rx1508_cur, rx1508_pos, rx1508_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1508_cur
    .local pmc match
    .lex "$/", match
    length rx1508_eos, rx1508_tgt
    gt rx1508_pos, rx1508_eos, rx1508_done
    set rx1508_off, 0
    lt rx1508_pos, 2, rx1508_start
    sub rx1508_off, rx1508_pos, 1
    substr rx1508_tgt, rx1508_tgt, rx1508_off
  rx1508_start:
    eq $I10, 1, rx1508_restart
    if_null rx1508_debug, debug_1073
    rx1508_cur."!cursor_debug"("START", "infix:sym<ne>")
  debug_1073:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1512_done
    goto rxscan1512_scan
  rxscan1512_loop:
    (rx1508_pos) = rx1508_cur."from"()
    inc rx1508_pos
    rx1508_cur."!cursor_from"(rx1508_pos)
    ge rx1508_pos, rx1508_eos, rxscan1512_done
  rxscan1512_scan:
    set_addr $I10, rxscan1512_loop
    rx1508_cur."!mark_push"(0, rx1508_pos, $I10)
  rxscan1512_done:
.annotate 'line', 651
  # rx subcapture "sym"
    set_addr $I10, rxcap_1513_fail
    rx1508_cur."!mark_push"(0, rx1508_pos, $I10)
  # rx literal  "ne"
    add $I11, rx1508_pos, 2
    gt $I11, rx1508_eos, rx1508_fail
    sub $I11, rx1508_pos, rx1508_off
    substr $S10, rx1508_tgt, $I11, 2
    ne $S10, "ne", rx1508_fail
    add rx1508_pos, 2
    set_addr $I10, rxcap_1513_fail
    ($I12, $I11) = rx1508_cur."!mark_peek"($I10)
    rx1508_cur."!cursor_pos"($I11)
    ($P10) = rx1508_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1508_pos, "")
    rx1508_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1513_done
  rxcap_1513_fail:
    goto rx1508_fail
  rxcap_1513_done:
  # rx subrule "O" subtype=capture negate=
    rx1508_cur."!cursor_pos"(rx1508_pos)
    $P10 = rx1508_cur."O"("%relational, :pirop<isne ISs>")
    unless $P10, rx1508_fail
    rx1508_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1508_pos = $P10."pos"()
  # rx pass
    rx1508_cur."!cursor_pass"(rx1508_pos, "infix:sym<ne>")
    if_null rx1508_debug, debug_1074
    rx1508_cur."!cursor_debug"("PASS", "infix:sym<ne>", " at pos=", rx1508_pos)
  debug_1074:
    .return (rx1508_cur)
  rx1508_restart:
.annotate 'line', 4
    if_null rx1508_debug, debug_1075
    rx1508_cur."!cursor_debug"("NEXT", "infix:sym<ne>")
  debug_1075:
  rx1508_fail:
    (rx1508_rep, rx1508_pos, $I10, $P10) = rx1508_cur."!mark_fail"(0)
    lt rx1508_pos, -1, rx1508_done
    eq rx1508_pos, -1, rx1508_fail
    jump $I10
  rx1508_done:
    rx1508_cur."!cursor_fail"()
    if_null rx1508_debug, debug_1076
    rx1508_cur."!cursor_debug"("FAIL", "infix:sym<ne>")
  debug_1076:
    .return (rx1508_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ne>"  :nsentry("!PREFIX__infix:sym<ne>") :subid("340_1300057348.719") :method
.annotate 'line', 4
    $P1510 = self."!PREFIX__!subrule"("O", "ne")
    new $P1511, "ResizablePMCArray"
    push $P1511, $P1510
    .return ($P1511)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<le>"  :subid("341_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1515_tgt
    .local int rx1515_pos
    .local int rx1515_off
    .local int rx1515_eos
    .local int rx1515_rep
    .local pmc rx1515_cur
    .local pmc rx1515_debug
    (rx1515_cur, rx1515_pos, rx1515_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1515_cur
    .local pmc match
    .lex "$/", match
    length rx1515_eos, rx1515_tgt
    gt rx1515_pos, rx1515_eos, rx1515_done
    set rx1515_off, 0
    lt rx1515_pos, 2, rx1515_start
    sub rx1515_off, rx1515_pos, 1
    substr rx1515_tgt, rx1515_tgt, rx1515_off
  rx1515_start:
    eq $I10, 1, rx1515_restart
    if_null rx1515_debug, debug_1077
    rx1515_cur."!cursor_debug"("START", "infix:sym<le>")
  debug_1077:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1519_done
    goto rxscan1519_scan
  rxscan1519_loop:
    (rx1515_pos) = rx1515_cur."from"()
    inc rx1515_pos
    rx1515_cur."!cursor_from"(rx1515_pos)
    ge rx1515_pos, rx1515_eos, rxscan1519_done
  rxscan1519_scan:
    set_addr $I10, rxscan1519_loop
    rx1515_cur."!mark_push"(0, rx1515_pos, $I10)
  rxscan1519_done:
.annotate 'line', 652
  # rx subcapture "sym"
    set_addr $I10, rxcap_1520_fail
    rx1515_cur."!mark_push"(0, rx1515_pos, $I10)
  # rx literal  "le"
    add $I11, rx1515_pos, 2
    gt $I11, rx1515_eos, rx1515_fail
    sub $I11, rx1515_pos, rx1515_off
    substr $S10, rx1515_tgt, $I11, 2
    ne $S10, "le", rx1515_fail
    add rx1515_pos, 2
    set_addr $I10, rxcap_1520_fail
    ($I12, $I11) = rx1515_cur."!mark_peek"($I10)
    rx1515_cur."!cursor_pos"($I11)
    ($P10) = rx1515_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1515_pos, "")
    rx1515_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1520_done
  rxcap_1520_fail:
    goto rx1515_fail
  rxcap_1520_done:
  # rx subrule "O" subtype=capture negate=
    rx1515_cur."!cursor_pos"(rx1515_pos)
    $P10 = rx1515_cur."O"("%relational, :pirop<isle ISs>")
    unless $P10, rx1515_fail
    rx1515_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1515_pos = $P10."pos"()
  # rx pass
    rx1515_cur."!cursor_pass"(rx1515_pos, "infix:sym<le>")
    if_null rx1515_debug, debug_1078
    rx1515_cur."!cursor_debug"("PASS", "infix:sym<le>", " at pos=", rx1515_pos)
  debug_1078:
    .return (rx1515_cur)
  rx1515_restart:
.annotate 'line', 4
    if_null rx1515_debug, debug_1079
    rx1515_cur."!cursor_debug"("NEXT", "infix:sym<le>")
  debug_1079:
  rx1515_fail:
    (rx1515_rep, rx1515_pos, $I10, $P10) = rx1515_cur."!mark_fail"(0)
    lt rx1515_pos, -1, rx1515_done
    eq rx1515_pos, -1, rx1515_fail
    jump $I10
  rx1515_done:
    rx1515_cur."!cursor_fail"()
    if_null rx1515_debug, debug_1080
    rx1515_cur."!cursor_debug"("FAIL", "infix:sym<le>")
  debug_1080:
    .return (rx1515_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<le>"  :nsentry("!PREFIX__infix:sym<le>") :subid("342_1300057348.719") :method
.annotate 'line', 4
    $P1517 = self."!PREFIX__!subrule"("O", "le")
    new $P1518, "ResizablePMCArray"
    push $P1518, $P1517
    .return ($P1518)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ge>"  :subid("343_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1522_tgt
    .local int rx1522_pos
    .local int rx1522_off
    .local int rx1522_eos
    .local int rx1522_rep
    .local pmc rx1522_cur
    .local pmc rx1522_debug
    (rx1522_cur, rx1522_pos, rx1522_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1522_cur
    .local pmc match
    .lex "$/", match
    length rx1522_eos, rx1522_tgt
    gt rx1522_pos, rx1522_eos, rx1522_done
    set rx1522_off, 0
    lt rx1522_pos, 2, rx1522_start
    sub rx1522_off, rx1522_pos, 1
    substr rx1522_tgt, rx1522_tgt, rx1522_off
  rx1522_start:
    eq $I10, 1, rx1522_restart
    if_null rx1522_debug, debug_1081
    rx1522_cur."!cursor_debug"("START", "infix:sym<ge>")
  debug_1081:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1526_done
    goto rxscan1526_scan
  rxscan1526_loop:
    (rx1522_pos) = rx1522_cur."from"()
    inc rx1522_pos
    rx1522_cur."!cursor_from"(rx1522_pos)
    ge rx1522_pos, rx1522_eos, rxscan1526_done
  rxscan1526_scan:
    set_addr $I10, rxscan1526_loop
    rx1522_cur."!mark_push"(0, rx1522_pos, $I10)
  rxscan1526_done:
.annotate 'line', 653
  # rx subcapture "sym"
    set_addr $I10, rxcap_1527_fail
    rx1522_cur."!mark_push"(0, rx1522_pos, $I10)
  # rx literal  "ge"
    add $I11, rx1522_pos, 2
    gt $I11, rx1522_eos, rx1522_fail
    sub $I11, rx1522_pos, rx1522_off
    substr $S10, rx1522_tgt, $I11, 2
    ne $S10, "ge", rx1522_fail
    add rx1522_pos, 2
    set_addr $I10, rxcap_1527_fail
    ($I12, $I11) = rx1522_cur."!mark_peek"($I10)
    rx1522_cur."!cursor_pos"($I11)
    ($P10) = rx1522_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1522_pos, "")
    rx1522_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1527_done
  rxcap_1527_fail:
    goto rx1522_fail
  rxcap_1527_done:
  # rx subrule "O" subtype=capture negate=
    rx1522_cur."!cursor_pos"(rx1522_pos)
    $P10 = rx1522_cur."O"("%relational, :pirop<isge ISs>")
    unless $P10, rx1522_fail
    rx1522_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1522_pos = $P10."pos"()
  # rx pass
    rx1522_cur."!cursor_pass"(rx1522_pos, "infix:sym<ge>")
    if_null rx1522_debug, debug_1082
    rx1522_cur."!cursor_debug"("PASS", "infix:sym<ge>", " at pos=", rx1522_pos)
  debug_1082:
    .return (rx1522_cur)
  rx1522_restart:
.annotate 'line', 4
    if_null rx1522_debug, debug_1083
    rx1522_cur."!cursor_debug"("NEXT", "infix:sym<ge>")
  debug_1083:
  rx1522_fail:
    (rx1522_rep, rx1522_pos, $I10, $P10) = rx1522_cur."!mark_fail"(0)
    lt rx1522_pos, -1, rx1522_done
    eq rx1522_pos, -1, rx1522_fail
    jump $I10
  rx1522_done:
    rx1522_cur."!cursor_fail"()
    if_null rx1522_debug, debug_1084
    rx1522_cur."!cursor_debug"("FAIL", "infix:sym<ge>")
  debug_1084:
    .return (rx1522_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ge>"  :nsentry("!PREFIX__infix:sym<ge>") :subid("344_1300057348.719") :method
.annotate 'line', 4
    $P1524 = self."!PREFIX__!subrule"("O", "ge")
    new $P1525, "ResizablePMCArray"
    push $P1525, $P1524
    .return ($P1525)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<lt>"  :subid("345_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1529_tgt
    .local int rx1529_pos
    .local int rx1529_off
    .local int rx1529_eos
    .local int rx1529_rep
    .local pmc rx1529_cur
    .local pmc rx1529_debug
    (rx1529_cur, rx1529_pos, rx1529_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1529_cur
    .local pmc match
    .lex "$/", match
    length rx1529_eos, rx1529_tgt
    gt rx1529_pos, rx1529_eos, rx1529_done
    set rx1529_off, 0
    lt rx1529_pos, 2, rx1529_start
    sub rx1529_off, rx1529_pos, 1
    substr rx1529_tgt, rx1529_tgt, rx1529_off
  rx1529_start:
    eq $I10, 1, rx1529_restart
    if_null rx1529_debug, debug_1085
    rx1529_cur."!cursor_debug"("START", "infix:sym<lt>")
  debug_1085:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1533_done
    goto rxscan1533_scan
  rxscan1533_loop:
    (rx1529_pos) = rx1529_cur."from"()
    inc rx1529_pos
    rx1529_cur."!cursor_from"(rx1529_pos)
    ge rx1529_pos, rx1529_eos, rxscan1533_done
  rxscan1533_scan:
    set_addr $I10, rxscan1533_loop
    rx1529_cur."!mark_push"(0, rx1529_pos, $I10)
  rxscan1533_done:
.annotate 'line', 654
  # rx subcapture "sym"
    set_addr $I10, rxcap_1534_fail
    rx1529_cur."!mark_push"(0, rx1529_pos, $I10)
  # rx literal  "lt"
    add $I11, rx1529_pos, 2
    gt $I11, rx1529_eos, rx1529_fail
    sub $I11, rx1529_pos, rx1529_off
    substr $S10, rx1529_tgt, $I11, 2
    ne $S10, "lt", rx1529_fail
    add rx1529_pos, 2
    set_addr $I10, rxcap_1534_fail
    ($I12, $I11) = rx1529_cur."!mark_peek"($I10)
    rx1529_cur."!cursor_pos"($I11)
    ($P10) = rx1529_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1529_pos, "")
    rx1529_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1534_done
  rxcap_1534_fail:
    goto rx1529_fail
  rxcap_1534_done:
  # rx subrule "O" subtype=capture negate=
    rx1529_cur."!cursor_pos"(rx1529_pos)
    $P10 = rx1529_cur."O"("%relational, :pirop<islt ISs>")
    unless $P10, rx1529_fail
    rx1529_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1529_pos = $P10."pos"()
  # rx pass
    rx1529_cur."!cursor_pass"(rx1529_pos, "infix:sym<lt>")
    if_null rx1529_debug, debug_1086
    rx1529_cur."!cursor_debug"("PASS", "infix:sym<lt>", " at pos=", rx1529_pos)
  debug_1086:
    .return (rx1529_cur)
  rx1529_restart:
.annotate 'line', 4
    if_null rx1529_debug, debug_1087
    rx1529_cur."!cursor_debug"("NEXT", "infix:sym<lt>")
  debug_1087:
  rx1529_fail:
    (rx1529_rep, rx1529_pos, $I10, $P10) = rx1529_cur."!mark_fail"(0)
    lt rx1529_pos, -1, rx1529_done
    eq rx1529_pos, -1, rx1529_fail
    jump $I10
  rx1529_done:
    rx1529_cur."!cursor_fail"()
    if_null rx1529_debug, debug_1088
    rx1529_cur."!cursor_debug"("FAIL", "infix:sym<lt>")
  debug_1088:
    .return (rx1529_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<lt>"  :nsentry("!PREFIX__infix:sym<lt>") :subid("346_1300057348.719") :method
.annotate 'line', 4
    $P1531 = self."!PREFIX__!subrule"("O", "lt")
    new $P1532, "ResizablePMCArray"
    push $P1532, $P1531
    .return ($P1532)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<gt>"  :subid("347_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1536_tgt
    .local int rx1536_pos
    .local int rx1536_off
    .local int rx1536_eos
    .local int rx1536_rep
    .local pmc rx1536_cur
    .local pmc rx1536_debug
    (rx1536_cur, rx1536_pos, rx1536_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1536_cur
    .local pmc match
    .lex "$/", match
    length rx1536_eos, rx1536_tgt
    gt rx1536_pos, rx1536_eos, rx1536_done
    set rx1536_off, 0
    lt rx1536_pos, 2, rx1536_start
    sub rx1536_off, rx1536_pos, 1
    substr rx1536_tgt, rx1536_tgt, rx1536_off
  rx1536_start:
    eq $I10, 1, rx1536_restart
    if_null rx1536_debug, debug_1089
    rx1536_cur."!cursor_debug"("START", "infix:sym<gt>")
  debug_1089:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1540_done
    goto rxscan1540_scan
  rxscan1540_loop:
    (rx1536_pos) = rx1536_cur."from"()
    inc rx1536_pos
    rx1536_cur."!cursor_from"(rx1536_pos)
    ge rx1536_pos, rx1536_eos, rxscan1540_done
  rxscan1540_scan:
    set_addr $I10, rxscan1540_loop
    rx1536_cur."!mark_push"(0, rx1536_pos, $I10)
  rxscan1540_done:
.annotate 'line', 655
  # rx subcapture "sym"
    set_addr $I10, rxcap_1541_fail
    rx1536_cur."!mark_push"(0, rx1536_pos, $I10)
  # rx literal  "gt"
    add $I11, rx1536_pos, 2
    gt $I11, rx1536_eos, rx1536_fail
    sub $I11, rx1536_pos, rx1536_off
    substr $S10, rx1536_tgt, $I11, 2
    ne $S10, "gt", rx1536_fail
    add rx1536_pos, 2
    set_addr $I10, rxcap_1541_fail
    ($I12, $I11) = rx1536_cur."!mark_peek"($I10)
    rx1536_cur."!cursor_pos"($I11)
    ($P10) = rx1536_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1536_pos, "")
    rx1536_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1541_done
  rxcap_1541_fail:
    goto rx1536_fail
  rxcap_1541_done:
  # rx subrule "O" subtype=capture negate=
    rx1536_cur."!cursor_pos"(rx1536_pos)
    $P10 = rx1536_cur."O"("%relational, :pirop<isgt ISs>")
    unless $P10, rx1536_fail
    rx1536_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1536_pos = $P10."pos"()
  # rx pass
    rx1536_cur."!cursor_pass"(rx1536_pos, "infix:sym<gt>")
    if_null rx1536_debug, debug_1090
    rx1536_cur."!cursor_debug"("PASS", "infix:sym<gt>", " at pos=", rx1536_pos)
  debug_1090:
    .return (rx1536_cur)
  rx1536_restart:
.annotate 'line', 4
    if_null rx1536_debug, debug_1091
    rx1536_cur."!cursor_debug"("NEXT", "infix:sym<gt>")
  debug_1091:
  rx1536_fail:
    (rx1536_rep, rx1536_pos, $I10, $P10) = rx1536_cur."!mark_fail"(0)
    lt rx1536_pos, -1, rx1536_done
    eq rx1536_pos, -1, rx1536_fail
    jump $I10
  rx1536_done:
    rx1536_cur."!cursor_fail"()
    if_null rx1536_debug, debug_1092
    rx1536_cur."!cursor_debug"("FAIL", "infix:sym<gt>")
  debug_1092:
    .return (rx1536_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<gt>"  :nsentry("!PREFIX__infix:sym<gt>") :subid("348_1300057348.719") :method
.annotate 'line', 4
    $P1538 = self."!PREFIX__!subrule"("O", "gt")
    new $P1539, "ResizablePMCArray"
    push $P1539, $P1538
    .return ($P1539)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=:=>"  :subid("349_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1543_tgt
    .local int rx1543_pos
    .local int rx1543_off
    .local int rx1543_eos
    .local int rx1543_rep
    .local pmc rx1543_cur
    .local pmc rx1543_debug
    (rx1543_cur, rx1543_pos, rx1543_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1543_cur
    .local pmc match
    .lex "$/", match
    length rx1543_eos, rx1543_tgt
    gt rx1543_pos, rx1543_eos, rx1543_done
    set rx1543_off, 0
    lt rx1543_pos, 2, rx1543_start
    sub rx1543_off, rx1543_pos, 1
    substr rx1543_tgt, rx1543_tgt, rx1543_off
  rx1543_start:
    eq $I10, 1, rx1543_restart
    if_null rx1543_debug, debug_1093
    rx1543_cur."!cursor_debug"("START", "infix:sym<=:=>")
  debug_1093:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1547_done
    goto rxscan1547_scan
  rxscan1547_loop:
    (rx1543_pos) = rx1543_cur."from"()
    inc rx1543_pos
    rx1543_cur."!cursor_from"(rx1543_pos)
    ge rx1543_pos, rx1543_eos, rxscan1547_done
  rxscan1547_scan:
    set_addr $I10, rxscan1547_loop
    rx1543_cur."!mark_push"(0, rx1543_pos, $I10)
  rxscan1547_done:
.annotate 'line', 656
  # rx subcapture "sym"
    set_addr $I10, rxcap_1548_fail
    rx1543_cur."!mark_push"(0, rx1543_pos, $I10)
  # rx literal  "=:="
    add $I11, rx1543_pos, 3
    gt $I11, rx1543_eos, rx1543_fail
    sub $I11, rx1543_pos, rx1543_off
    substr $S10, rx1543_tgt, $I11, 3
    ne $S10, "=:=", rx1543_fail
    add rx1543_pos, 3
    set_addr $I10, rxcap_1548_fail
    ($I12, $I11) = rx1543_cur."!mark_peek"($I10)
    rx1543_cur."!cursor_pos"($I11)
    ($P10) = rx1543_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1543_pos, "")
    rx1543_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1548_done
  rxcap_1548_fail:
    goto rx1543_fail
  rxcap_1548_done:
  # rx subrule "O" subtype=capture negate=
    rx1543_cur."!cursor_pos"(rx1543_pos)
    $P10 = rx1543_cur."O"("%relational, :pirop<issame>")
    unless $P10, rx1543_fail
    rx1543_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1543_pos = $P10."pos"()
  # rx pass
    rx1543_cur."!cursor_pass"(rx1543_pos, "infix:sym<=:=>")
    if_null rx1543_debug, debug_1094
    rx1543_cur."!cursor_debug"("PASS", "infix:sym<=:=>", " at pos=", rx1543_pos)
  debug_1094:
    .return (rx1543_cur)
  rx1543_restart:
.annotate 'line', 4
    if_null rx1543_debug, debug_1095
    rx1543_cur."!cursor_debug"("NEXT", "infix:sym<=:=>")
  debug_1095:
  rx1543_fail:
    (rx1543_rep, rx1543_pos, $I10, $P10) = rx1543_cur."!mark_fail"(0)
    lt rx1543_pos, -1, rx1543_done
    eq rx1543_pos, -1, rx1543_fail
    jump $I10
  rx1543_done:
    rx1543_cur."!cursor_fail"()
    if_null rx1543_debug, debug_1096
    rx1543_cur."!cursor_debug"("FAIL", "infix:sym<=:=>")
  debug_1096:
    .return (rx1543_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=:=>"  :nsentry("!PREFIX__infix:sym<=:=>") :subid("350_1300057348.719") :method
.annotate 'line', 4
    $P1545 = self."!PREFIX__!subrule"("O", "=:=")
    new $P1546, "ResizablePMCArray"
    push $P1546, $P1545
    .return ($P1546)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~~>"  :subid("351_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1550_tgt
    .local int rx1550_pos
    .local int rx1550_off
    .local int rx1550_eos
    .local int rx1550_rep
    .local pmc rx1550_cur
    .local pmc rx1550_debug
    (rx1550_cur, rx1550_pos, rx1550_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1550_cur
    .local pmc match
    .lex "$/", match
    length rx1550_eos, rx1550_tgt
    gt rx1550_pos, rx1550_eos, rx1550_done
    set rx1550_off, 0
    lt rx1550_pos, 2, rx1550_start
    sub rx1550_off, rx1550_pos, 1
    substr rx1550_tgt, rx1550_tgt, rx1550_off
  rx1550_start:
    eq $I10, 1, rx1550_restart
    if_null rx1550_debug, debug_1097
    rx1550_cur."!cursor_debug"("START", "infix:sym<~~>")
  debug_1097:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1554_done
    goto rxscan1554_scan
  rxscan1554_loop:
    (rx1550_pos) = rx1550_cur."from"()
    inc rx1550_pos
    rx1550_cur."!cursor_from"(rx1550_pos)
    ge rx1550_pos, rx1550_eos, rxscan1554_done
  rxscan1554_scan:
    set_addr $I10, rxscan1554_loop
    rx1550_cur."!mark_push"(0, rx1550_pos, $I10)
  rxscan1554_done:
.annotate 'line', 657
  # rx subcapture "sym"
    set_addr $I10, rxcap_1555_fail
    rx1550_cur."!mark_push"(0, rx1550_pos, $I10)
  # rx literal  "~~"
    add $I11, rx1550_pos, 2
    gt $I11, rx1550_eos, rx1550_fail
    sub $I11, rx1550_pos, rx1550_off
    substr $S10, rx1550_tgt, $I11, 2
    ne $S10, "~~", rx1550_fail
    add rx1550_pos, 2
    set_addr $I10, rxcap_1555_fail
    ($I12, $I11) = rx1550_cur."!mark_peek"($I10)
    rx1550_cur."!cursor_pos"($I11)
    ($P10) = rx1550_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1550_pos, "")
    rx1550_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1555_done
  rxcap_1555_fail:
    goto rx1550_fail
  rxcap_1555_done:
  # rx subrule "O" subtype=capture negate=
    rx1550_cur."!cursor_pos"(rx1550_pos)
    $P10 = rx1550_cur."O"("%relational, :reducecheck<smartmatch>")
    unless $P10, rx1550_fail
    rx1550_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1550_pos = $P10."pos"()
  # rx pass
    rx1550_cur."!cursor_pass"(rx1550_pos, "infix:sym<~~>")
    if_null rx1550_debug, debug_1098
    rx1550_cur."!cursor_debug"("PASS", "infix:sym<~~>", " at pos=", rx1550_pos)
  debug_1098:
    .return (rx1550_cur)
  rx1550_restart:
.annotate 'line', 4
    if_null rx1550_debug, debug_1099
    rx1550_cur."!cursor_debug"("NEXT", "infix:sym<~~>")
  debug_1099:
  rx1550_fail:
    (rx1550_rep, rx1550_pos, $I10, $P10) = rx1550_cur."!mark_fail"(0)
    lt rx1550_pos, -1, rx1550_done
    eq rx1550_pos, -1, rx1550_fail
    jump $I10
  rx1550_done:
    rx1550_cur."!cursor_fail"()
    if_null rx1550_debug, debug_1100
    rx1550_cur."!cursor_debug"("FAIL", "infix:sym<~~>")
  debug_1100:
    .return (rx1550_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~~>"  :nsentry("!PREFIX__infix:sym<~~>") :subid("352_1300057348.719") :method
.annotate 'line', 4
    $P1552 = self."!PREFIX__!subrule"("O", "~~")
    new $P1553, "ResizablePMCArray"
    push $P1553, $P1552
    .return ($P1553)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<&&>"  :subid("353_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1557_tgt
    .local int rx1557_pos
    .local int rx1557_off
    .local int rx1557_eos
    .local int rx1557_rep
    .local pmc rx1557_cur
    .local pmc rx1557_debug
    (rx1557_cur, rx1557_pos, rx1557_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1557_cur
    .local pmc match
    .lex "$/", match
    length rx1557_eos, rx1557_tgt
    gt rx1557_pos, rx1557_eos, rx1557_done
    set rx1557_off, 0
    lt rx1557_pos, 2, rx1557_start
    sub rx1557_off, rx1557_pos, 1
    substr rx1557_tgt, rx1557_tgt, rx1557_off
  rx1557_start:
    eq $I10, 1, rx1557_restart
    if_null rx1557_debug, debug_1101
    rx1557_cur."!cursor_debug"("START", "infix:sym<&&>")
  debug_1101:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1561_done
    goto rxscan1561_scan
  rxscan1561_loop:
    (rx1557_pos) = rx1557_cur."from"()
    inc rx1557_pos
    rx1557_cur."!cursor_from"(rx1557_pos)
    ge rx1557_pos, rx1557_eos, rxscan1561_done
  rxscan1561_scan:
    set_addr $I10, rxscan1561_loop
    rx1557_cur."!mark_push"(0, rx1557_pos, $I10)
  rxscan1561_done:
.annotate 'line', 659
  # rx subcapture "sym"
    set_addr $I10, rxcap_1562_fail
    rx1557_cur."!mark_push"(0, rx1557_pos, $I10)
  # rx literal  "&&"
    add $I11, rx1557_pos, 2
    gt $I11, rx1557_eos, rx1557_fail
    sub $I11, rx1557_pos, rx1557_off
    substr $S10, rx1557_tgt, $I11, 2
    ne $S10, "&&", rx1557_fail
    add rx1557_pos, 2
    set_addr $I10, rxcap_1562_fail
    ($I12, $I11) = rx1557_cur."!mark_peek"($I10)
    rx1557_cur."!cursor_pos"($I11)
    ($P10) = rx1557_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1557_pos, "")
    rx1557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1562_done
  rxcap_1562_fail:
    goto rx1557_fail
  rxcap_1562_done:
  # rx subrule "O" subtype=capture negate=
    rx1557_cur."!cursor_pos"(rx1557_pos)
    $P10 = rx1557_cur."O"("%tight_and, :pasttype<if>")
    unless $P10, rx1557_fail
    rx1557_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1557_pos = $P10."pos"()
  # rx pass
    rx1557_cur."!cursor_pass"(rx1557_pos, "infix:sym<&&>")
    if_null rx1557_debug, debug_1102
    rx1557_cur."!cursor_debug"("PASS", "infix:sym<&&>", " at pos=", rx1557_pos)
  debug_1102:
    .return (rx1557_cur)
  rx1557_restart:
.annotate 'line', 4
    if_null rx1557_debug, debug_1103
    rx1557_cur."!cursor_debug"("NEXT", "infix:sym<&&>")
  debug_1103:
  rx1557_fail:
    (rx1557_rep, rx1557_pos, $I10, $P10) = rx1557_cur."!mark_fail"(0)
    lt rx1557_pos, -1, rx1557_done
    eq rx1557_pos, -1, rx1557_fail
    jump $I10
  rx1557_done:
    rx1557_cur."!cursor_fail"()
    if_null rx1557_debug, debug_1104
    rx1557_cur."!cursor_debug"("FAIL", "infix:sym<&&>")
  debug_1104:
    .return (rx1557_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<&&>"  :nsentry("!PREFIX__infix:sym<&&>") :subid("354_1300057348.719") :method
.annotate 'line', 4
    $P1559 = self."!PREFIX__!subrule"("O", "&&")
    new $P1560, "ResizablePMCArray"
    push $P1560, $P1559
    .return ($P1560)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<||>"  :subid("355_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1564_tgt
    .local int rx1564_pos
    .local int rx1564_off
    .local int rx1564_eos
    .local int rx1564_rep
    .local pmc rx1564_cur
    .local pmc rx1564_debug
    (rx1564_cur, rx1564_pos, rx1564_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1564_cur
    .local pmc match
    .lex "$/", match
    length rx1564_eos, rx1564_tgt
    gt rx1564_pos, rx1564_eos, rx1564_done
    set rx1564_off, 0
    lt rx1564_pos, 2, rx1564_start
    sub rx1564_off, rx1564_pos, 1
    substr rx1564_tgt, rx1564_tgt, rx1564_off
  rx1564_start:
    eq $I10, 1, rx1564_restart
    if_null rx1564_debug, debug_1105
    rx1564_cur."!cursor_debug"("START", "infix:sym<||>")
  debug_1105:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1568_done
    goto rxscan1568_scan
  rxscan1568_loop:
    (rx1564_pos) = rx1564_cur."from"()
    inc rx1564_pos
    rx1564_cur."!cursor_from"(rx1564_pos)
    ge rx1564_pos, rx1564_eos, rxscan1568_done
  rxscan1568_scan:
    set_addr $I10, rxscan1568_loop
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  rxscan1568_done:
.annotate 'line', 661
  # rx subcapture "sym"
    set_addr $I10, rxcap_1569_fail
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  # rx literal  "||"
    add $I11, rx1564_pos, 2
    gt $I11, rx1564_eos, rx1564_fail
    sub $I11, rx1564_pos, rx1564_off
    substr $S10, rx1564_tgt, $I11, 2
    ne $S10, "||", rx1564_fail
    add rx1564_pos, 2
    set_addr $I10, rxcap_1569_fail
    ($I12, $I11) = rx1564_cur."!mark_peek"($I10)
    rx1564_cur."!cursor_pos"($I11)
    ($P10) = rx1564_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1564_pos, "")
    rx1564_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1569_done
  rxcap_1569_fail:
    goto rx1564_fail
  rxcap_1569_done:
  # rx subrule "O" subtype=capture negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."O"("%tight_or, :pasttype<unless>")
    unless $P10, rx1564_fail
    rx1564_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1564_pos = $P10."pos"()
  # rx pass
    rx1564_cur."!cursor_pass"(rx1564_pos, "infix:sym<||>")
    if_null rx1564_debug, debug_1106
    rx1564_cur."!cursor_debug"("PASS", "infix:sym<||>", " at pos=", rx1564_pos)
  debug_1106:
    .return (rx1564_cur)
  rx1564_restart:
.annotate 'line', 4
    if_null rx1564_debug, debug_1107
    rx1564_cur."!cursor_debug"("NEXT", "infix:sym<||>")
  debug_1107:
  rx1564_fail:
    (rx1564_rep, rx1564_pos, $I10, $P10) = rx1564_cur."!mark_fail"(0)
    lt rx1564_pos, -1, rx1564_done
    eq rx1564_pos, -1, rx1564_fail
    jump $I10
  rx1564_done:
    rx1564_cur."!cursor_fail"()
    if_null rx1564_debug, debug_1108
    rx1564_cur."!cursor_debug"("FAIL", "infix:sym<||>")
  debug_1108:
    .return (rx1564_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<||>"  :nsentry("!PREFIX__infix:sym<||>") :subid("356_1300057348.719") :method
.annotate 'line', 4
    $P1566 = self."!PREFIX__!subrule"("O", "||")
    new $P1567, "ResizablePMCArray"
    push $P1567, $P1566
    .return ($P1567)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<//>"  :subid("357_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1571_tgt
    .local int rx1571_pos
    .local int rx1571_off
    .local int rx1571_eos
    .local int rx1571_rep
    .local pmc rx1571_cur
    .local pmc rx1571_debug
    (rx1571_cur, rx1571_pos, rx1571_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1571_cur
    .local pmc match
    .lex "$/", match
    length rx1571_eos, rx1571_tgt
    gt rx1571_pos, rx1571_eos, rx1571_done
    set rx1571_off, 0
    lt rx1571_pos, 2, rx1571_start
    sub rx1571_off, rx1571_pos, 1
    substr rx1571_tgt, rx1571_tgt, rx1571_off
  rx1571_start:
    eq $I10, 1, rx1571_restart
    if_null rx1571_debug, debug_1109
    rx1571_cur."!cursor_debug"("START", "infix:sym<//>")
  debug_1109:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1575_done
    goto rxscan1575_scan
  rxscan1575_loop:
    (rx1571_pos) = rx1571_cur."from"()
    inc rx1571_pos
    rx1571_cur."!cursor_from"(rx1571_pos)
    ge rx1571_pos, rx1571_eos, rxscan1575_done
  rxscan1575_scan:
    set_addr $I10, rxscan1575_loop
    rx1571_cur."!mark_push"(0, rx1571_pos, $I10)
  rxscan1575_done:
.annotate 'line', 662
  # rx subcapture "sym"
    set_addr $I10, rxcap_1576_fail
    rx1571_cur."!mark_push"(0, rx1571_pos, $I10)
  # rx literal  "//"
    add $I11, rx1571_pos, 2
    gt $I11, rx1571_eos, rx1571_fail
    sub $I11, rx1571_pos, rx1571_off
    substr $S10, rx1571_tgt, $I11, 2
    ne $S10, "//", rx1571_fail
    add rx1571_pos, 2
    set_addr $I10, rxcap_1576_fail
    ($I12, $I11) = rx1571_cur."!mark_peek"($I10)
    rx1571_cur."!cursor_pos"($I11)
    ($P10) = rx1571_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1571_pos, "")
    rx1571_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1576_done
  rxcap_1576_fail:
    goto rx1571_fail
  rxcap_1576_done:
  # rx subrule "O" subtype=capture negate=
    rx1571_cur."!cursor_pos"(rx1571_pos)
    $P10 = rx1571_cur."O"("%tight_or, :pasttype<def_or>")
    unless $P10, rx1571_fail
    rx1571_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1571_pos = $P10."pos"()
  # rx pass
    rx1571_cur."!cursor_pass"(rx1571_pos, "infix:sym<//>")
    if_null rx1571_debug, debug_1110
    rx1571_cur."!cursor_debug"("PASS", "infix:sym<//>", " at pos=", rx1571_pos)
  debug_1110:
    .return (rx1571_cur)
  rx1571_restart:
.annotate 'line', 4
    if_null rx1571_debug, debug_1111
    rx1571_cur."!cursor_debug"("NEXT", "infix:sym<//>")
  debug_1111:
  rx1571_fail:
    (rx1571_rep, rx1571_pos, $I10, $P10) = rx1571_cur."!mark_fail"(0)
    lt rx1571_pos, -1, rx1571_done
    eq rx1571_pos, -1, rx1571_fail
    jump $I10
  rx1571_done:
    rx1571_cur."!cursor_fail"()
    if_null rx1571_debug, debug_1112
    rx1571_cur."!cursor_debug"("FAIL", "infix:sym<//>")
  debug_1112:
    .return (rx1571_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<//>"  :nsentry("!PREFIX__infix:sym<//>") :subid("358_1300057348.719") :method
.annotate 'line', 4
    $P1573 = self."!PREFIX__!subrule"("O", "//")
    new $P1574, "ResizablePMCArray"
    push $P1574, $P1573
    .return ($P1574)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<?? !!>"  :subid("359_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1578_tgt
    .local int rx1578_pos
    .local int rx1578_off
    .local int rx1578_eos
    .local int rx1578_rep
    .local pmc rx1578_cur
    .local pmc rx1578_debug
    (rx1578_cur, rx1578_pos, rx1578_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1578_cur
    .local pmc match
    .lex "$/", match
    length rx1578_eos, rx1578_tgt
    gt rx1578_pos, rx1578_eos, rx1578_done
    set rx1578_off, 0
    lt rx1578_pos, 2, rx1578_start
    sub rx1578_off, rx1578_pos, 1
    substr rx1578_tgt, rx1578_tgt, rx1578_off
  rx1578_start:
    eq $I10, 1, rx1578_restart
    if_null rx1578_debug, debug_1113
    rx1578_cur."!cursor_debug"("START", "infix:sym<?? !!>")
  debug_1113:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1582_done
    goto rxscan1582_scan
  rxscan1582_loop:
    (rx1578_pos) = rx1578_cur."from"()
    inc rx1578_pos
    rx1578_cur."!cursor_from"(rx1578_pos)
    ge rx1578_pos, rx1578_eos, rxscan1582_done
  rxscan1582_scan:
    set_addr $I10, rxscan1582_loop
    rx1578_cur."!mark_push"(0, rx1578_pos, $I10)
  rxscan1582_done:
.annotate 'line', 665
  # rx literal  "??"
    add $I11, rx1578_pos, 2
    gt $I11, rx1578_eos, rx1578_fail
    sub $I11, rx1578_pos, rx1578_off
    substr $S10, rx1578_tgt, $I11, 2
    ne $S10, "??", rx1578_fail
    add rx1578_pos, 2
.annotate 'line', 666
  # rx subrule "ws" subtype=method negate=
    rx1578_cur."!cursor_pos"(rx1578_pos)
    $P10 = rx1578_cur."ws"()
    unless $P10, rx1578_fail
    rx1578_pos = $P10."pos"()
.annotate 'line', 667
  # rx subrule "EXPR" subtype=capture negate=
    rx1578_cur."!cursor_pos"(rx1578_pos)
    $P10 = rx1578_cur."EXPR"("i=")
    unless $P10, rx1578_fail
    rx1578_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1578_pos = $P10."pos"()
.annotate 'line', 668
  # rx literal  "!!"
    add $I11, rx1578_pos, 2
    gt $I11, rx1578_eos, rx1578_fail
    sub $I11, rx1578_pos, rx1578_off
    substr $S10, rx1578_tgt, $I11, 2
    ne $S10, "!!", rx1578_fail
    add rx1578_pos, 2
.annotate 'line', 669
  # rx subrule "O" subtype=capture negate=
    rx1578_cur."!cursor_pos"(rx1578_pos)
    $P10 = rx1578_cur."O"("%conditional, :reducecheck<ternary>, :pasttype<if>")
    unless $P10, rx1578_fail
    rx1578_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1578_pos = $P10."pos"()
.annotate 'line', 664
  # rx pass
    rx1578_cur."!cursor_pass"(rx1578_pos, "infix:sym<?? !!>")
    if_null rx1578_debug, debug_1114
    rx1578_cur."!cursor_debug"("PASS", "infix:sym<?? !!>", " at pos=", rx1578_pos)
  debug_1114:
    .return (rx1578_cur)
  rx1578_restart:
.annotate 'line', 4
    if_null rx1578_debug, debug_1115
    rx1578_cur."!cursor_debug"("NEXT", "infix:sym<?? !!>")
  debug_1115:
  rx1578_fail:
    (rx1578_rep, rx1578_pos, $I10, $P10) = rx1578_cur."!mark_fail"(0)
    lt rx1578_pos, -1, rx1578_done
    eq rx1578_pos, -1, rx1578_fail
    jump $I10
  rx1578_done:
    rx1578_cur."!cursor_fail"()
    if_null rx1578_debug, debug_1116
    rx1578_cur."!cursor_debug"("FAIL", "infix:sym<?? !!>")
  debug_1116:
    .return (rx1578_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<?? !!>"  :nsentry("!PREFIX__infix:sym<?? !!>") :subid("360_1300057348.719") :method
.annotate 'line', 4
    $P1580 = self."!PREFIX__!subrule"("ws", "??")
    new $P1581, "ResizablePMCArray"
    push $P1581, $P1580
    .return ($P1581)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=>"  :subid("361_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1584_tgt
    .local int rx1584_pos
    .local int rx1584_off
    .local int rx1584_eos
    .local int rx1584_rep
    .local pmc rx1584_cur
    .local pmc rx1584_debug
    (rx1584_cur, rx1584_pos, rx1584_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1584_cur
    .local pmc match
    .lex "$/", match
    length rx1584_eos, rx1584_tgt
    gt rx1584_pos, rx1584_eos, rx1584_done
    set rx1584_off, 0
    lt rx1584_pos, 2, rx1584_start
    sub rx1584_off, rx1584_pos, 1
    substr rx1584_tgt, rx1584_tgt, rx1584_off
  rx1584_start:
    eq $I10, 1, rx1584_restart
    if_null rx1584_debug, debug_1117
    rx1584_cur."!cursor_debug"("START", "infix:sym<=>")
  debug_1117:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1588_done
    goto rxscan1588_scan
  rxscan1588_loop:
    (rx1584_pos) = rx1584_cur."from"()
    inc rx1584_pos
    rx1584_cur."!cursor_from"(rx1584_pos)
    ge rx1584_pos, rx1584_eos, rxscan1588_done
  rxscan1588_scan:
    set_addr $I10, rxscan1588_loop
    rx1584_cur."!mark_push"(0, rx1584_pos, $I10)
  rxscan1588_done:
.annotate 'line', 673
  # rx subcapture "sym"
    set_addr $I10, rxcap_1589_fail
    rx1584_cur."!mark_push"(0, rx1584_pos, $I10)
  # rx literal  "="
    add $I11, rx1584_pos, 1
    gt $I11, rx1584_eos, rx1584_fail
    sub $I11, rx1584_pos, rx1584_off
    ord $I11, rx1584_tgt, $I11
    ne $I11, 61, rx1584_fail
    add rx1584_pos, 1
    set_addr $I10, rxcap_1589_fail
    ($I12, $I11) = rx1584_cur."!mark_peek"($I10)
    rx1584_cur."!cursor_pos"($I11)
    ($P10) = rx1584_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1584_pos, "")
    rx1584_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1589_done
  rxcap_1589_fail:
    goto rx1584_fail
  rxcap_1589_done:
  # rx subrule "panic" subtype=method negate=
    rx1584_cur."!cursor_pos"(rx1584_pos)
    $P10 = rx1584_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    unless $P10, rx1584_fail
    rx1584_pos = $P10."pos"()
.annotate 'line', 672
  # rx pass
    rx1584_cur."!cursor_pass"(rx1584_pos, "infix:sym<=>")
    if_null rx1584_debug, debug_1118
    rx1584_cur."!cursor_debug"("PASS", "infix:sym<=>", " at pos=", rx1584_pos)
  debug_1118:
    .return (rx1584_cur)
  rx1584_restart:
.annotate 'line', 4
    if_null rx1584_debug, debug_1119
    rx1584_cur."!cursor_debug"("NEXT", "infix:sym<=>")
  debug_1119:
  rx1584_fail:
    (rx1584_rep, rx1584_pos, $I10, $P10) = rx1584_cur."!mark_fail"(0)
    lt rx1584_pos, -1, rx1584_done
    eq rx1584_pos, -1, rx1584_fail
    jump $I10
  rx1584_done:
    rx1584_cur."!cursor_fail"()
    if_null rx1584_debug, debug_1120
    rx1584_cur."!cursor_debug"("FAIL", "infix:sym<=>")
  debug_1120:
    .return (rx1584_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=>"  :nsentry("!PREFIX__infix:sym<=>") :subid("362_1300057348.719") :method
.annotate 'line', 4
    $P1586 = self."!PREFIX__!subrule"("panic", "=")
    new $P1587, "ResizablePMCArray"
    push $P1587, $P1586
    .return ($P1587)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<:=>"  :subid("363_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1591_tgt
    .local int rx1591_pos
    .local int rx1591_off
    .local int rx1591_eos
    .local int rx1591_rep
    .local pmc rx1591_cur
    .local pmc rx1591_debug
    (rx1591_cur, rx1591_pos, rx1591_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1591_cur
    .local pmc match
    .lex "$/", match
    length rx1591_eos, rx1591_tgt
    gt rx1591_pos, rx1591_eos, rx1591_done
    set rx1591_off, 0
    lt rx1591_pos, 2, rx1591_start
    sub rx1591_off, rx1591_pos, 1
    substr rx1591_tgt, rx1591_tgt, rx1591_off
  rx1591_start:
    eq $I10, 1, rx1591_restart
    if_null rx1591_debug, debug_1121
    rx1591_cur."!cursor_debug"("START", "infix:sym<:=>")
  debug_1121:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1595_done
    goto rxscan1595_scan
  rxscan1595_loop:
    (rx1591_pos) = rx1591_cur."from"()
    inc rx1591_pos
    rx1591_cur."!cursor_from"(rx1591_pos)
    ge rx1591_pos, rx1591_eos, rxscan1595_done
  rxscan1595_scan:
    set_addr $I10, rxscan1595_loop
    rx1591_cur."!mark_push"(0, rx1591_pos, $I10)
  rxscan1595_done:
.annotate 'line', 675
  # rx subcapture "sym"
    set_addr $I10, rxcap_1596_fail
    rx1591_cur."!mark_push"(0, rx1591_pos, $I10)
  # rx literal  ":="
    add $I11, rx1591_pos, 2
    gt $I11, rx1591_eos, rx1591_fail
    sub $I11, rx1591_pos, rx1591_off
    substr $S10, rx1591_tgt, $I11, 2
    ne $S10, ":=", rx1591_fail
    add rx1591_pos, 2
    set_addr $I10, rxcap_1596_fail
    ($I12, $I11) = rx1591_cur."!mark_peek"($I10)
    rx1591_cur."!cursor_pos"($I11)
    ($P10) = rx1591_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1591_pos, "")
    rx1591_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1596_done
  rxcap_1596_fail:
    goto rx1591_fail
  rxcap_1596_done:
  # rx subrule "O" subtype=capture negate=
    rx1591_cur."!cursor_pos"(rx1591_pos)
    $P10 = rx1591_cur."O"("%assignment, :pasttype<bind>")
    unless $P10, rx1591_fail
    rx1591_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1591_pos = $P10."pos"()
  # rx pass
    rx1591_cur."!cursor_pass"(rx1591_pos, "infix:sym<:=>")
    if_null rx1591_debug, debug_1122
    rx1591_cur."!cursor_debug"("PASS", "infix:sym<:=>", " at pos=", rx1591_pos)
  debug_1122:
    .return (rx1591_cur)
  rx1591_restart:
.annotate 'line', 4
    if_null rx1591_debug, debug_1123
    rx1591_cur."!cursor_debug"("NEXT", "infix:sym<:=>")
  debug_1123:
  rx1591_fail:
    (rx1591_rep, rx1591_pos, $I10, $P10) = rx1591_cur."!mark_fail"(0)
    lt rx1591_pos, -1, rx1591_done
    eq rx1591_pos, -1, rx1591_fail
    jump $I10
  rx1591_done:
    rx1591_cur."!cursor_fail"()
    if_null rx1591_debug, debug_1124
    rx1591_cur."!cursor_debug"("FAIL", "infix:sym<:=>")
  debug_1124:
    .return (rx1591_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<:=>"  :nsentry("!PREFIX__infix:sym<:=>") :subid("364_1300057348.719") :method
.annotate 'line', 4
    $P1593 = self."!PREFIX__!subrule"("O", ":=")
    new $P1594, "ResizablePMCArray"
    push $P1594, $P1593
    .return ($P1594)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<::=>"  :subid("365_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1598_tgt
    .local int rx1598_pos
    .local int rx1598_off
    .local int rx1598_eos
    .local int rx1598_rep
    .local pmc rx1598_cur
    .local pmc rx1598_debug
    (rx1598_cur, rx1598_pos, rx1598_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1598_cur
    .local pmc match
    .lex "$/", match
    length rx1598_eos, rx1598_tgt
    gt rx1598_pos, rx1598_eos, rx1598_done
    set rx1598_off, 0
    lt rx1598_pos, 2, rx1598_start
    sub rx1598_off, rx1598_pos, 1
    substr rx1598_tgt, rx1598_tgt, rx1598_off
  rx1598_start:
    eq $I10, 1, rx1598_restart
    if_null rx1598_debug, debug_1125
    rx1598_cur."!cursor_debug"("START", "infix:sym<::=>")
  debug_1125:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1602_done
    goto rxscan1602_scan
  rxscan1602_loop:
    (rx1598_pos) = rx1598_cur."from"()
    inc rx1598_pos
    rx1598_cur."!cursor_from"(rx1598_pos)
    ge rx1598_pos, rx1598_eos, rxscan1602_done
  rxscan1602_scan:
    set_addr $I10, rxscan1602_loop
    rx1598_cur."!mark_push"(0, rx1598_pos, $I10)
  rxscan1602_done:
.annotate 'line', 676
  # rx subcapture "sym"
    set_addr $I10, rxcap_1603_fail
    rx1598_cur."!mark_push"(0, rx1598_pos, $I10)
  # rx literal  "::="
    add $I11, rx1598_pos, 3
    gt $I11, rx1598_eos, rx1598_fail
    sub $I11, rx1598_pos, rx1598_off
    substr $S10, rx1598_tgt, $I11, 3
    ne $S10, "::=", rx1598_fail
    add rx1598_pos, 3
    set_addr $I10, rxcap_1603_fail
    ($I12, $I11) = rx1598_cur."!mark_peek"($I10)
    rx1598_cur."!cursor_pos"($I11)
    ($P10) = rx1598_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1598_pos, "")
    rx1598_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1603_done
  rxcap_1603_fail:
    goto rx1598_fail
  rxcap_1603_done:
  # rx subrule "O" subtype=capture negate=
    rx1598_cur."!cursor_pos"(rx1598_pos)
    $P10 = rx1598_cur."O"("%assignment, :pasttype<bind>")
    unless $P10, rx1598_fail
    rx1598_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1598_pos = $P10."pos"()
  # rx pass
    rx1598_cur."!cursor_pass"(rx1598_pos, "infix:sym<::=>")
    if_null rx1598_debug, debug_1126
    rx1598_cur."!cursor_debug"("PASS", "infix:sym<::=>", " at pos=", rx1598_pos)
  debug_1126:
    .return (rx1598_cur)
  rx1598_restart:
.annotate 'line', 4
    if_null rx1598_debug, debug_1127
    rx1598_cur."!cursor_debug"("NEXT", "infix:sym<::=>")
  debug_1127:
  rx1598_fail:
    (rx1598_rep, rx1598_pos, $I10, $P10) = rx1598_cur."!mark_fail"(0)
    lt rx1598_pos, -1, rx1598_done
    eq rx1598_pos, -1, rx1598_fail
    jump $I10
  rx1598_done:
    rx1598_cur."!cursor_fail"()
    if_null rx1598_debug, debug_1128
    rx1598_cur."!cursor_debug"("FAIL", "infix:sym<::=>")
  debug_1128:
    .return (rx1598_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<::=>"  :nsentry("!PREFIX__infix:sym<::=>") :subid("366_1300057348.719") :method
.annotate 'line', 4
    $P1600 = self."!PREFIX__!subrule"("O", "::=")
    new $P1601, "ResizablePMCArray"
    push $P1601, $P1600
    .return ($P1601)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<,>"  :subid("367_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1605_tgt
    .local int rx1605_pos
    .local int rx1605_off
    .local int rx1605_eos
    .local int rx1605_rep
    .local pmc rx1605_cur
    .local pmc rx1605_debug
    (rx1605_cur, rx1605_pos, rx1605_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1605_cur
    .local pmc match
    .lex "$/", match
    length rx1605_eos, rx1605_tgt
    gt rx1605_pos, rx1605_eos, rx1605_done
    set rx1605_off, 0
    lt rx1605_pos, 2, rx1605_start
    sub rx1605_off, rx1605_pos, 1
    substr rx1605_tgt, rx1605_tgt, rx1605_off
  rx1605_start:
    eq $I10, 1, rx1605_restart
    if_null rx1605_debug, debug_1129
    rx1605_cur."!cursor_debug"("START", "infix:sym<,>")
  debug_1129:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1609_done
    goto rxscan1609_scan
  rxscan1609_loop:
    (rx1605_pos) = rx1605_cur."from"()
    inc rx1605_pos
    rx1605_cur."!cursor_from"(rx1605_pos)
    ge rx1605_pos, rx1605_eos, rxscan1609_done
  rxscan1609_scan:
    set_addr $I10, rxscan1609_loop
    rx1605_cur."!mark_push"(0, rx1605_pos, $I10)
  rxscan1609_done:
.annotate 'line', 678
  # rx subcapture "sym"
    set_addr $I10, rxcap_1610_fail
    rx1605_cur."!mark_push"(0, rx1605_pos, $I10)
  # rx literal  ","
    add $I11, rx1605_pos, 1
    gt $I11, rx1605_eos, rx1605_fail
    sub $I11, rx1605_pos, rx1605_off
    ord $I11, rx1605_tgt, $I11
    ne $I11, 44, rx1605_fail
    add rx1605_pos, 1
    set_addr $I10, rxcap_1610_fail
    ($I12, $I11) = rx1605_cur."!mark_peek"($I10)
    rx1605_cur."!cursor_pos"($I11)
    ($P10) = rx1605_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1605_pos, "")
    rx1605_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1610_done
  rxcap_1610_fail:
    goto rx1605_fail
  rxcap_1610_done:
  # rx subrule "O" subtype=capture negate=
    rx1605_cur."!cursor_pos"(rx1605_pos)
    $P10 = rx1605_cur."O"("%comma, :pasttype<list>")
    unless $P10, rx1605_fail
    rx1605_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1605_pos = $P10."pos"()
  # rx pass
    rx1605_cur."!cursor_pass"(rx1605_pos, "infix:sym<,>")
    if_null rx1605_debug, debug_1130
    rx1605_cur."!cursor_debug"("PASS", "infix:sym<,>", " at pos=", rx1605_pos)
  debug_1130:
    .return (rx1605_cur)
  rx1605_restart:
.annotate 'line', 4
    if_null rx1605_debug, debug_1131
    rx1605_cur."!cursor_debug"("NEXT", "infix:sym<,>")
  debug_1131:
  rx1605_fail:
    (rx1605_rep, rx1605_pos, $I10, $P10) = rx1605_cur."!mark_fail"(0)
    lt rx1605_pos, -1, rx1605_done
    eq rx1605_pos, -1, rx1605_fail
    jump $I10
  rx1605_done:
    rx1605_cur."!cursor_fail"()
    if_null rx1605_debug, debug_1132
    rx1605_cur."!cursor_debug"("FAIL", "infix:sym<,>")
  debug_1132:
    .return (rx1605_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<,>"  :nsentry("!PREFIX__infix:sym<,>") :subid("368_1300057348.719") :method
.annotate 'line', 4
    $P1607 = self."!PREFIX__!subrule"("O", ",")
    new $P1608, "ResizablePMCArray"
    push $P1608, $P1607
    .return ($P1608)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<return>"  :subid("369_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .const 'Sub' $P1620 = "371_1300057348.719" 
    capture_lex $P1620
    .local string rx1612_tgt
    .local int rx1612_pos
    .local int rx1612_off
    .local int rx1612_eos
    .local int rx1612_rep
    .local pmc rx1612_cur
    .local pmc rx1612_debug
    (rx1612_cur, rx1612_pos, rx1612_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1612_cur
    .local pmc match
    .lex "$/", match
    length rx1612_eos, rx1612_tgt
    gt rx1612_pos, rx1612_eos, rx1612_done
    set rx1612_off, 0
    lt rx1612_pos, 2, rx1612_start
    sub rx1612_off, rx1612_pos, 1
    substr rx1612_tgt, rx1612_tgt, rx1612_off
  rx1612_start:
    eq $I10, 1, rx1612_restart
    if_null rx1612_debug, debug_1133
    rx1612_cur."!cursor_debug"("START", "prefix:sym<return>")
  debug_1133:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1615_done
    goto rxscan1615_scan
  rxscan1615_loop:
    (rx1612_pos) = rx1612_cur."from"()
    inc rx1612_pos
    rx1612_cur."!cursor_from"(rx1612_pos)
    ge rx1612_pos, rx1612_eos, rxscan1615_done
  rxscan1615_scan:
    set_addr $I10, rxscan1615_loop
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
  rxscan1615_done:
.annotate 'line', 680
  # rx subcapture "sym"
    set_addr $I10, rxcap_1616_fail
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
  # rx literal  "return"
    add $I11, rx1612_pos, 6
    gt $I11, rx1612_eos, rx1612_fail
    sub $I11, rx1612_pos, rx1612_off
    substr $S10, rx1612_tgt, $I11, 6
    ne $S10, "return", rx1612_fail
    add rx1612_pos, 6
    set_addr $I10, rxcap_1616_fail
    ($I12, $I11) = rx1612_cur."!mark_peek"($I10)
    rx1612_cur."!cursor_pos"($I11)
    ($P10) = rx1612_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1612_pos, "")
    rx1612_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1616_done
  rxcap_1616_fail:
    goto rx1612_fail
  rxcap_1616_done:
  # rx charclass s
    ge rx1612_pos, rx1612_eos, rx1612_fail
    sub $I10, rx1612_pos, rx1612_off
    is_cclass $I11, 32, rx1612_tgt, $I10
    unless $I11, rx1612_fail
    inc rx1612_pos
  # rx subrule "O" subtype=capture negate=
    rx1612_cur."!cursor_pos"(rx1612_pos)
    $P10 = rx1612_cur."O"("%list_prefix, :pasttype<return>")
    unless $P10, rx1612_fail
    rx1612_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1612_pos = $P10."pos"()
    rx1612_cur."!cursor_pos"(rx1612_pos)
    find_lex $P1617, unicode:"$\x{a2}"
    $P1618 = $P1617."MATCH"()
    store_lex "$/", $P1618
    .const 'Sub' $P1620 = "371_1300057348.719" 
    capture_lex $P1620
    $P1622 = $P1620()
  # rx pass
    rx1612_cur."!cursor_pass"(rx1612_pos, "prefix:sym<return>")
    if_null rx1612_debug, debug_1134
    rx1612_cur."!cursor_debug"("PASS", "prefix:sym<return>", " at pos=", rx1612_pos)
  debug_1134:
    .return (rx1612_cur)
  rx1612_restart:
.annotate 'line', 4
    if_null rx1612_debug, debug_1135
    rx1612_cur."!cursor_debug"("NEXT", "prefix:sym<return>")
  debug_1135:
  rx1612_fail:
    (rx1612_rep, rx1612_pos, $I10, $P10) = rx1612_cur."!mark_fail"(0)
    lt rx1612_pos, -1, rx1612_done
    eq rx1612_pos, -1, rx1612_fail
    jump $I10
  rx1612_done:
    rx1612_cur."!cursor_fail"()
    if_null rx1612_debug, debug_1136
    rx1612_cur."!cursor_debug"("FAIL", "prefix:sym<return>")
  debug_1136:
    .return (rx1612_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<return>"  :nsentry("!PREFIX__prefix:sym<return>") :subid("370_1300057348.719") :method
.annotate 'line', 4
    new $P1614, "ResizablePMCArray"
    push $P1614, "return"
    .return ($P1614)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1619"  :anon :subid("371_1300057348.719") :outer("369_1300057348.719")
.annotate 'line', 680
    new $P1621, "Integer"
    assign $P1621, 1
    store_dynamic_lex "$*RETURN_USED", $P1621
    .return ($P1621)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<make>"  :subid("372_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1624_tgt
    .local int rx1624_pos
    .local int rx1624_off
    .local int rx1624_eos
    .local int rx1624_rep
    .local pmc rx1624_cur
    .local pmc rx1624_debug
    (rx1624_cur, rx1624_pos, rx1624_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1624_cur
    .local pmc match
    .lex "$/", match
    length rx1624_eos, rx1624_tgt
    gt rx1624_pos, rx1624_eos, rx1624_done
    set rx1624_off, 0
    lt rx1624_pos, 2, rx1624_start
    sub rx1624_off, rx1624_pos, 1
    substr rx1624_tgt, rx1624_tgt, rx1624_off
  rx1624_start:
    eq $I10, 1, rx1624_restart
    if_null rx1624_debug, debug_1137
    rx1624_cur."!cursor_debug"("START", "prefix:sym<make>")
  debug_1137:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1627_done
    goto rxscan1627_scan
  rxscan1627_loop:
    (rx1624_pos) = rx1624_cur."from"()
    inc rx1624_pos
    rx1624_cur."!cursor_from"(rx1624_pos)
    ge rx1624_pos, rx1624_eos, rxscan1627_done
  rxscan1627_scan:
    set_addr $I10, rxscan1627_loop
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  rxscan1627_done:
.annotate 'line', 681
  # rx subcapture "sym"
    set_addr $I10, rxcap_1628_fail
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  # rx literal  "make"
    add $I11, rx1624_pos, 4
    gt $I11, rx1624_eos, rx1624_fail
    sub $I11, rx1624_pos, rx1624_off
    substr $S10, rx1624_tgt, $I11, 4
    ne $S10, "make", rx1624_fail
    add rx1624_pos, 4
    set_addr $I10, rxcap_1628_fail
    ($I12, $I11) = rx1624_cur."!mark_peek"($I10)
    rx1624_cur."!cursor_pos"($I11)
    ($P10) = rx1624_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1624_pos, "")
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1628_done
  rxcap_1628_fail:
    goto rx1624_fail
  rxcap_1628_done:
  # rx charclass s
    ge rx1624_pos, rx1624_eos, rx1624_fail
    sub $I10, rx1624_pos, rx1624_off
    is_cclass $I11, 32, rx1624_tgt, $I10
    unless $I11, rx1624_fail
    inc rx1624_pos
  # rx subrule "O" subtype=capture negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."O"("%list_prefix")
    unless $P10, rx1624_fail
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx1624_pos = $P10."pos"()
  # rx pass
    rx1624_cur."!cursor_pass"(rx1624_pos, "prefix:sym<make>")
    if_null rx1624_debug, debug_1138
    rx1624_cur."!cursor_debug"("PASS", "prefix:sym<make>", " at pos=", rx1624_pos)
  debug_1138:
    .return (rx1624_cur)
  rx1624_restart:
.annotate 'line', 4
    if_null rx1624_debug, debug_1139
    rx1624_cur."!cursor_debug"("NEXT", "prefix:sym<make>")
  debug_1139:
  rx1624_fail:
    (rx1624_rep, rx1624_pos, $I10, $P10) = rx1624_cur."!mark_fail"(0)
    lt rx1624_pos, -1, rx1624_done
    eq rx1624_pos, -1, rx1624_fail
    jump $I10
  rx1624_done:
    rx1624_cur."!cursor_fail"()
    if_null rx1624_debug, debug_1140
    rx1624_cur."!cursor_debug"("FAIL", "prefix:sym<make>")
  debug_1140:
    .return (rx1624_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<make>"  :nsentry("!PREFIX__prefix:sym<make>") :subid("373_1300057348.719") :method
.annotate 'line', 4
    new $P1626, "ResizablePMCArray"
    push $P1626, "make"
    .return ($P1626)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<last>"  :subid("374_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1630_tgt
    .local int rx1630_pos
    .local int rx1630_off
    .local int rx1630_eos
    .local int rx1630_rep
    .local pmc rx1630_cur
    .local pmc rx1630_debug
    (rx1630_cur, rx1630_pos, rx1630_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1630_cur
    .local pmc match
    .lex "$/", match
    length rx1630_eos, rx1630_tgt
    gt rx1630_pos, rx1630_eos, rx1630_done
    set rx1630_off, 0
    lt rx1630_pos, 2, rx1630_start
    sub rx1630_off, rx1630_pos, 1
    substr rx1630_tgt, rx1630_tgt, rx1630_off
  rx1630_start:
    eq $I10, 1, rx1630_restart
    if_null rx1630_debug, debug_1141
    rx1630_cur."!cursor_debug"("START", "term:sym<last>")
  debug_1141:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1633_done
    goto rxscan1633_scan
  rxscan1633_loop:
    (rx1630_pos) = rx1630_cur."from"()
    inc rx1630_pos
    rx1630_cur."!cursor_from"(rx1630_pos)
    ge rx1630_pos, rx1630_eos, rxscan1633_done
  rxscan1633_scan:
    set_addr $I10, rxscan1633_loop
    rx1630_cur."!mark_push"(0, rx1630_pos, $I10)
  rxscan1633_done:
.annotate 'line', 682
  # rx subcapture "sym"
    set_addr $I10, rxcap_1634_fail
    rx1630_cur."!mark_push"(0, rx1630_pos, $I10)
  # rx literal  "last"
    add $I11, rx1630_pos, 4
    gt $I11, rx1630_eos, rx1630_fail
    sub $I11, rx1630_pos, rx1630_off
    substr $S10, rx1630_tgt, $I11, 4
    ne $S10, "last", rx1630_fail
    add rx1630_pos, 4
    set_addr $I10, rxcap_1634_fail
    ($I12, $I11) = rx1630_cur."!mark_peek"($I10)
    rx1630_cur."!cursor_pos"($I11)
    ($P10) = rx1630_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1630_pos, "")
    rx1630_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1634_done
  rxcap_1634_fail:
    goto rx1630_fail
  rxcap_1634_done:
  # rx pass
    rx1630_cur."!cursor_pass"(rx1630_pos, "term:sym<last>")
    if_null rx1630_debug, debug_1142
    rx1630_cur."!cursor_debug"("PASS", "term:sym<last>", " at pos=", rx1630_pos)
  debug_1142:
    .return (rx1630_cur)
  rx1630_restart:
.annotate 'line', 4
    if_null rx1630_debug, debug_1143
    rx1630_cur."!cursor_debug"("NEXT", "term:sym<last>")
  debug_1143:
  rx1630_fail:
    (rx1630_rep, rx1630_pos, $I10, $P10) = rx1630_cur."!mark_fail"(0)
    lt rx1630_pos, -1, rx1630_done
    eq rx1630_pos, -1, rx1630_fail
    jump $I10
  rx1630_done:
    rx1630_cur."!cursor_fail"()
    if_null rx1630_debug, debug_1144
    rx1630_cur."!cursor_debug"("FAIL", "term:sym<last>")
  debug_1144:
    .return (rx1630_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<last>"  :nsentry("!PREFIX__term:sym<last>") :subid("375_1300057348.719") :method
.annotate 'line', 4
    new $P1632, "ResizablePMCArray"
    push $P1632, "last"
    .return ($P1632)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<next>"  :subid("376_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1636_tgt
    .local int rx1636_pos
    .local int rx1636_off
    .local int rx1636_eos
    .local int rx1636_rep
    .local pmc rx1636_cur
    .local pmc rx1636_debug
    (rx1636_cur, rx1636_pos, rx1636_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1636_cur
    .local pmc match
    .lex "$/", match
    length rx1636_eos, rx1636_tgt
    gt rx1636_pos, rx1636_eos, rx1636_done
    set rx1636_off, 0
    lt rx1636_pos, 2, rx1636_start
    sub rx1636_off, rx1636_pos, 1
    substr rx1636_tgt, rx1636_tgt, rx1636_off
  rx1636_start:
    eq $I10, 1, rx1636_restart
    if_null rx1636_debug, debug_1145
    rx1636_cur."!cursor_debug"("START", "term:sym<next>")
  debug_1145:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1639_done
    goto rxscan1639_scan
  rxscan1639_loop:
    (rx1636_pos) = rx1636_cur."from"()
    inc rx1636_pos
    rx1636_cur."!cursor_from"(rx1636_pos)
    ge rx1636_pos, rx1636_eos, rxscan1639_done
  rxscan1639_scan:
    set_addr $I10, rxscan1639_loop
    rx1636_cur."!mark_push"(0, rx1636_pos, $I10)
  rxscan1639_done:
.annotate 'line', 683
  # rx subcapture "sym"
    set_addr $I10, rxcap_1640_fail
    rx1636_cur."!mark_push"(0, rx1636_pos, $I10)
  # rx literal  "next"
    add $I11, rx1636_pos, 4
    gt $I11, rx1636_eos, rx1636_fail
    sub $I11, rx1636_pos, rx1636_off
    substr $S10, rx1636_tgt, $I11, 4
    ne $S10, "next", rx1636_fail
    add rx1636_pos, 4
    set_addr $I10, rxcap_1640_fail
    ($I12, $I11) = rx1636_cur."!mark_peek"($I10)
    rx1636_cur."!cursor_pos"($I11)
    ($P10) = rx1636_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1636_pos, "")
    rx1636_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1640_done
  rxcap_1640_fail:
    goto rx1636_fail
  rxcap_1640_done:
  # rx pass
    rx1636_cur."!cursor_pass"(rx1636_pos, "term:sym<next>")
    if_null rx1636_debug, debug_1146
    rx1636_cur."!cursor_debug"("PASS", "term:sym<next>", " at pos=", rx1636_pos)
  debug_1146:
    .return (rx1636_cur)
  rx1636_restart:
.annotate 'line', 4
    if_null rx1636_debug, debug_1147
    rx1636_cur."!cursor_debug"("NEXT", "term:sym<next>")
  debug_1147:
  rx1636_fail:
    (rx1636_rep, rx1636_pos, $I10, $P10) = rx1636_cur."!mark_fail"(0)
    lt rx1636_pos, -1, rx1636_done
    eq rx1636_pos, -1, rx1636_fail
    jump $I10
  rx1636_done:
    rx1636_cur."!cursor_fail"()
    if_null rx1636_debug, debug_1148
    rx1636_cur."!cursor_debug"("FAIL", "term:sym<next>")
  debug_1148:
    .return (rx1636_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<next>"  :nsentry("!PREFIX__term:sym<next>") :subid("377_1300057348.719") :method
.annotate 'line', 4
    new $P1638, "ResizablePMCArray"
    push $P1638, "next"
    .return ($P1638)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<redo>"  :subid("378_1300057348.719") :method :outer("11_1300057348.719")
.annotate 'line', 4
    .local string rx1642_tgt
    .local int rx1642_pos
    .local int rx1642_off
    .local int rx1642_eos
    .local int rx1642_rep
    .local pmc rx1642_cur
    .local pmc rx1642_debug
    (rx1642_cur, rx1642_pos, rx1642_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1642_cur
    .local pmc match
    .lex "$/", match
    length rx1642_eos, rx1642_tgt
    gt rx1642_pos, rx1642_eos, rx1642_done
    set rx1642_off, 0
    lt rx1642_pos, 2, rx1642_start
    sub rx1642_off, rx1642_pos, 1
    substr rx1642_tgt, rx1642_tgt, rx1642_off
  rx1642_start:
    eq $I10, 1, rx1642_restart
    if_null rx1642_debug, debug_1149
    rx1642_cur."!cursor_debug"("START", "term:sym<redo>")
  debug_1149:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1645_done
    goto rxscan1645_scan
  rxscan1645_loop:
    (rx1642_pos) = rx1642_cur."from"()
    inc rx1642_pos
    rx1642_cur."!cursor_from"(rx1642_pos)
    ge rx1642_pos, rx1642_eos, rxscan1645_done
  rxscan1645_scan:
    set_addr $I10, rxscan1645_loop
    rx1642_cur."!mark_push"(0, rx1642_pos, $I10)
  rxscan1645_done:
.annotate 'line', 684
  # rx subcapture "sym"
    set_addr $I10, rxcap_1646_fail
    rx1642_cur."!mark_push"(0, rx1642_pos, $I10)
  # rx literal  "redo"
    add $I11, rx1642_pos, 4
    gt $I11, rx1642_eos, rx1642_fail
    sub $I11, rx1642_pos, rx1642_off
    substr $S10, rx1642_tgt, $I11, 4
    ne $S10, "redo", rx1642_fail
    add rx1642_pos, 4
    set_addr $I10, rxcap_1646_fail
    ($I12, $I11) = rx1642_cur."!mark_peek"($I10)
    rx1642_cur."!cursor_pos"($I11)
    ($P10) = rx1642_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1642_pos, "")
    rx1642_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1646_done
  rxcap_1646_fail:
    goto rx1642_fail
  rxcap_1646_done:
  # rx pass
    rx1642_cur."!cursor_pass"(rx1642_pos, "term:sym<redo>")
    if_null rx1642_debug, debug_1150
    rx1642_cur."!cursor_debug"("PASS", "term:sym<redo>", " at pos=", rx1642_pos)
  debug_1150:
    .return (rx1642_cur)
  rx1642_restart:
.annotate 'line', 4
    if_null rx1642_debug, debug_1151
    rx1642_cur."!cursor_debug"("NEXT", "term:sym<redo>")
  debug_1151:
  rx1642_fail:
    (rx1642_rep, rx1642_pos, $I10, $P10) = rx1642_cur."!mark_fail"(0)
    lt rx1642_pos, -1, rx1642_done
    eq rx1642_pos, -1, rx1642_fail
    jump $I10
  rx1642_done:
    rx1642_cur."!cursor_fail"()
    if_null rx1642_debug, debug_1152
    rx1642_cur."!cursor_debug"("FAIL", "term:sym<redo>")
  debug_1152:
    .return (rx1642_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<redo>"  :nsentry("!PREFIX__term:sym<redo>") :subid("379_1300057348.719") :method
.annotate 'line', 4
    new $P1644, "ResizablePMCArray"
    push $P1644, "redo"
    .return ($P1644)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "smartmatch"  :subid("380_1300057348.719") :outer("11_1300057348.719")
    .param pmc param_1648
    .param pmc param_1649
.annotate 'line', 686
    .lex "self", param_1648
    .lex "$/", param_1649
.annotate 'line', 688
    new $P1650, "Undef"
    .lex "$t", $P1650
    find_lex $P1651, "$/"
    unless_null $P1651, vivify_1153
    $P1651 = root_new ['parrot';'ResizablePMCArray']
  vivify_1153:
    set $P1652, $P1651[0]
    unless_null $P1652, vivify_1154
    new $P1652, "Undef"
  vivify_1154:
    store_lex "$t", $P1652
    find_lex $P1653, "$/"
    unless_null $P1653, vivify_1155
    $P1653 = root_new ['parrot';'ResizablePMCArray']
  vivify_1155:
    set $P1654, $P1653[1]
    unless_null $P1654, vivify_1156
    new $P1654, "Undef"
  vivify_1156:
    find_lex $P1655, "$/"
    unless_null $P1655, vivify_1157
    $P1655 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$/", $P1655
  vivify_1157:
    set $P1655[0], $P1654
    find_lex $P1656, "$t"
    find_lex $P1657, "$/"
    unless_null $P1657, vivify_1158
    $P1657 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$/", $P1657
  vivify_1158:
    set $P1657[1], $P1656
.annotate 'line', 686
    .return ($P1656)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2378"  :subid("382_1300057348.719") :outer("10_1300057348.719")
.annotate 'line', 692
    .const 'Sub' $P2443 = "403_1300057348.719" 
    capture_lex $P2443
    .const 'Sub' $P2436 = "401_1300057348.719" 
    capture_lex $P2436
    .const 'Sub' $P2431 = "399_1300057348.719" 
    capture_lex $P2431
    .const 'Sub' $P2419 = "396_1300057348.719" 
    capture_lex $P2419
    .const 'Sub' $P2409 = "393_1300057348.719" 
    capture_lex $P2409
    .const 'Sub' $P2404 = "391_1300057348.719" 
    capture_lex $P2404
    .const 'Sub' $P2395 = "388_1300057348.719" 
    capture_lex $P2395
    .const 'Sub' $P2390 = "386_1300057348.719" 
    capture_lex $P2390
    .const 'Sub' $P2381 = "383_1300057348.719" 
    capture_lex $P2381
    get_global $P2380, "$?CLASS"
    .const 'Sub' $P2436 = "401_1300057348.719" 
    capture_lex $P2436
    .return ($P2436)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "" :load :init :subid("post1159") :outer("382_1300057348.719")
.annotate 'line', 692
    get_hll_global $P2379, ["NQP";"Regex"], "_block2378" 
    .local pmc block
    set block, $P2379
    .const 'Sub' $P2443 = "403_1300057348.719" 
    capture_lex $P2443
    $P2443()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2442"  :anon :subid("403_1300057348.719") :outer("382_1300057348.719")
.annotate 'line', 692
    nqp_get_sc_object $P2444, "1300057343.077", 1
    .local pmc type_obj
    set type_obj, $P2444
    set_global "$?CLASS", type_obj
    get_how $P2445, type_obj
    .const 'Sub' $P2446 = "383_1300057348.719" 
    $P2445."add_method"(type_obj, "metachar:sym<:my>", $P2446)
    get_how $P2447, type_obj
    get_global $P2448, "!PREFIX__metachar:sym<:my>"
    $P2447."add_method"(type_obj, "!PREFIX__metachar:sym<:my>", $P2448)
    get_how $P2449, type_obj
    .const 'Sub' $P2450 = "386_1300057348.719" 
    $P2449."add_method"(type_obj, "metachar:sym<{ }>", $P2450)
    get_how $P2451, type_obj
    get_global $P2452, "!PREFIX__metachar:sym<{ }>"
    $P2451."add_method"(type_obj, "!PREFIX__metachar:sym<{ }>", $P2452)
    get_how $P2453, type_obj
    .const 'Sub' $P2454 = "388_1300057348.719" 
    $P2453."add_method"(type_obj, "metachar:sym<nqpvar>", $P2454)
    get_how $P2455, type_obj
    get_global $P2456, "!PREFIX__metachar:sym<nqpvar>"
    $P2455."add_method"(type_obj, "!PREFIX__metachar:sym<nqpvar>", $P2456)
    get_how $P2457, type_obj
    .const 'Sub' $P2458 = "391_1300057348.719" 
    $P2457."add_method"(type_obj, "assertion:sym<{ }>", $P2458)
    get_how $P2459, type_obj
    get_global $P2460, "!PREFIX__assertion:sym<{ }>"
    $P2459."add_method"(type_obj, "!PREFIX__assertion:sym<{ }>", $P2460)
    get_how $P2461, type_obj
    .const 'Sub' $P2462 = "393_1300057348.719" 
    $P2461."add_method"(type_obj, "assertion:sym<?{ }>", $P2462)
    get_how $P2463, type_obj
    get_global $P2464, "!PREFIX__assertion:sym<?{ }>"
    $P2463."add_method"(type_obj, "!PREFIX__assertion:sym<?{ }>", $P2464)
    get_how $P2465, type_obj
    .const 'Sub' $P2466 = "396_1300057348.719" 
    $P2465."add_method"(type_obj, "assertion:sym<name>", $P2466)
    get_how $P2467, type_obj
    get_global $P2468, "!PREFIX__assertion:sym<name>"
    $P2467."add_method"(type_obj, "!PREFIX__assertion:sym<name>", $P2468)
    get_how $P2469, type_obj
    .const 'Sub' $P2470 = "399_1300057348.719" 
    $P2469."add_method"(type_obj, "assertion:sym<var>", $P2470)
    get_how $P2471, type_obj
    get_global $P2472, "!PREFIX__assertion:sym<var>"
    $P2471."add_method"(type_obj, "!PREFIX__assertion:sym<var>", $P2472)
    get_how $P2473, type_obj
    .const 'Sub' $P2474 = "401_1300057348.719" 
    $P2473."add_method"(type_obj, "codeblock", $P2474)
    get_how $P2475, type_obj
    get_global $P2476, "!PREFIX__codeblock"
    $P2475."add_method"(type_obj, "!PREFIX__codeblock", $P2476)
    get_how $P2477, type_obj
    get_hll_global $P2478, ["Regex";"P6Regex"], "Grammar"
    $P2477."add_parent"(type_obj, $P2478)
    get_how $P2479, type_obj
    $P2480 = $P2479."compose"(type_obj)
    .return ($P2480)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<:my>"  :subid("383_1300057348.719") :method :outer("382_1300057348.719")
.annotate 'line', 692
    .const 'Sub' $P2387 = "385_1300057348.719" 
    capture_lex $P2387
    .local string rx2382_tgt
    .local int rx2382_pos
    .local int rx2382_off
    .local int rx2382_eos
    .local int rx2382_rep
    .local pmc rx2382_cur
    .local pmc rx2382_debug
    (rx2382_cur, rx2382_pos, rx2382_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2382_cur
    .local pmc match
    .lex "$/", match
    length rx2382_eos, rx2382_tgt
    gt rx2382_pos, rx2382_eos, rx2382_done
    set rx2382_off, 0
    lt rx2382_pos, 2, rx2382_start
    sub rx2382_off, rx2382_pos, 1
    substr rx2382_tgt, rx2382_tgt, rx2382_off
  rx2382_start:
    eq $I10, 1, rx2382_restart
    if_null rx2382_debug, debug_1160
    rx2382_cur."!cursor_debug"("START", "metachar:sym<:my>")
  debug_1160:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2385_done
    goto rxscan2385_scan
  rxscan2385_loop:
    (rx2382_pos) = rx2382_cur."from"()
    inc rx2382_pos
    rx2382_cur."!cursor_from"(rx2382_pos)
    ge rx2382_pos, rx2382_eos, rxscan2385_done
  rxscan2385_scan:
    set_addr $I10, rxscan2385_loop
    rx2382_cur."!mark_push"(0, rx2382_pos, $I10)
  rxscan2385_done:
.annotate 'line', 694
  # rx literal  ":"
    add $I11, rx2382_pos, 1
    gt $I11, rx2382_eos, rx2382_fail
    sub $I11, rx2382_pos, rx2382_off
    ord $I11, rx2382_tgt, $I11
    ne $I11, 58, rx2382_fail
    add rx2382_pos, 1
  # rx subrule "before" subtype=zerowidth negate=
    rx2382_cur."!cursor_pos"(rx2382_pos)
    .const 'Sub' $P2387 = "385_1300057348.719" 
    capture_lex $P2387
    $P10 = rx2382_cur."before"($P2387)
    unless $P10, rx2382_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2382_cur."!cursor_pos"(rx2382_pos)
    $P10 = rx2382_cur."LANG"("MAIN", "statement")
    unless $P10, rx2382_fail
    rx2382_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2382_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2382_cur."!cursor_pos"(rx2382_pos)
    $P10 = rx2382_cur."ws"()
    unless $P10, rx2382_fail
    rx2382_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx2382_pos, 1
    gt $I11, rx2382_eos, rx2382_fail
    sub $I11, rx2382_pos, rx2382_off
    ord $I11, rx2382_tgt, $I11
    ne $I11, 59, rx2382_fail
    add rx2382_pos, 1
.annotate 'line', 693
  # rx pass
    rx2382_cur."!cursor_pass"(rx2382_pos, "metachar:sym<:my>")
    if_null rx2382_debug, debug_1165
    rx2382_cur."!cursor_debug"("PASS", "metachar:sym<:my>", " at pos=", rx2382_pos)
  debug_1165:
    .return (rx2382_cur)
  rx2382_restart:
.annotate 'line', 692
    if_null rx2382_debug, debug_1166
    rx2382_cur."!cursor_debug"("NEXT", "metachar:sym<:my>")
  debug_1166:
  rx2382_fail:
    (rx2382_rep, rx2382_pos, $I10, $P10) = rx2382_cur."!mark_fail"(0)
    lt rx2382_pos, -1, rx2382_done
    eq rx2382_pos, -1, rx2382_fail
    jump $I10
  rx2382_done:
    rx2382_cur."!cursor_fail"()
    if_null rx2382_debug, debug_1167
    rx2382_cur."!cursor_debug"("FAIL", "metachar:sym<:my>")
  debug_1167:
    .return (rx2382_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<:my>"  :nsentry("!PREFIX__metachar:sym<:my>") :subid("384_1300057348.719") :method
.annotate 'line', 692
    new $P2384, "ResizablePMCArray"
    push $P2384, ":"
    .return ($P2384)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2386"  :anon :subid("385_1300057348.719") :method :outer("383_1300057348.719")
.annotate 'line', 694
    .local string rx2388_tgt
    .local int rx2388_pos
    .local int rx2388_off
    .local int rx2388_eos
    .local int rx2388_rep
    .local pmc rx2388_cur
    .local pmc rx2388_debug
    (rx2388_cur, rx2388_pos, rx2388_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2388_cur
    .local pmc match
    .lex "$/", match
    length rx2388_eos, rx2388_tgt
    gt rx2388_pos, rx2388_eos, rx2388_done
    set rx2388_off, 0
    lt rx2388_pos, 2, rx2388_start
    sub rx2388_off, rx2388_pos, 1
    substr rx2388_tgt, rx2388_tgt, rx2388_off
  rx2388_start:
    eq $I10, 1, rx2388_restart
    if_null rx2388_debug, debug_1161
    rx2388_cur."!cursor_debug"("START", "")
  debug_1161:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2389_done
    goto rxscan2389_scan
  rxscan2389_loop:
    (rx2388_pos) = rx2388_cur."from"()
    inc rx2388_pos
    rx2388_cur."!cursor_from"(rx2388_pos)
    ge rx2388_pos, rx2388_eos, rxscan2389_done
  rxscan2389_scan:
    set_addr $I10, rxscan2389_loop
    rx2388_cur."!mark_push"(0, rx2388_pos, $I10)
  rxscan2389_done:
  # rx literal  "my"
    add $I11, rx2388_pos, 2
    gt $I11, rx2388_eos, rx2388_fail
    sub $I11, rx2388_pos, rx2388_off
    substr $S10, rx2388_tgt, $I11, 2
    ne $S10, "my", rx2388_fail
    add rx2388_pos, 2
  # rx pass
    rx2388_cur."!cursor_pass"(rx2388_pos, "")
    if_null rx2388_debug, debug_1162
    rx2388_cur."!cursor_debug"("PASS", "", " at pos=", rx2388_pos)
  debug_1162:
    .return (rx2388_cur)
  rx2388_restart:
    if_null rx2388_debug, debug_1163
    rx2388_cur."!cursor_debug"("NEXT", "")
  debug_1163:
  rx2388_fail:
    (rx2388_rep, rx2388_pos, $I10, $P10) = rx2388_cur."!mark_fail"(0)
    lt rx2388_pos, -1, rx2388_done
    eq rx2388_pos, -1, rx2388_fail
    jump $I10
  rx2388_done:
    rx2388_cur."!cursor_fail"()
    if_null rx2388_debug, debug_1164
    rx2388_cur."!cursor_debug"("FAIL", "")
  debug_1164:
    .return (rx2388_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<{ }>"  :subid("386_1300057348.719") :method :outer("382_1300057348.719")
.annotate 'line', 692
    .local string rx2391_tgt
    .local int rx2391_pos
    .local int rx2391_off
    .local int rx2391_eos
    .local int rx2391_rep
    .local pmc rx2391_cur
    .local pmc rx2391_debug
    (rx2391_cur, rx2391_pos, rx2391_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2391_cur
    .local pmc match
    .lex "$/", match
    length rx2391_eos, rx2391_tgt
    gt rx2391_pos, rx2391_eos, rx2391_done
    set rx2391_off, 0
    lt rx2391_pos, 2, rx2391_start
    sub rx2391_off, rx2391_pos, 1
    substr rx2391_tgt, rx2391_tgt, rx2391_off
  rx2391_start:
    eq $I10, 1, rx2391_restart
    if_null rx2391_debug, debug_1168
    rx2391_cur."!cursor_debug"("START", "metachar:sym<{ }>")
  debug_1168:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2394_done
    goto rxscan2394_scan
  rxscan2394_loop:
    (rx2391_pos) = rx2391_cur."from"()
    inc rx2391_pos
    rx2391_cur."!cursor_from"(rx2391_pos)
    ge rx2391_pos, rx2391_eos, rxscan2394_done
  rxscan2394_scan:
    set_addr $I10, rxscan2394_loop
    rx2391_cur."!mark_push"(0, rx2391_pos, $I10)
  rxscan2394_done:
.annotate 'line', 698
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2391_pos, rx2391_off
    substr $S10, rx2391_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2391_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2391_cur."!cursor_pos"(rx2391_pos)
    $P10 = rx2391_cur."codeblock"()
    unless $P10, rx2391_fail
    rx2391_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2391_pos = $P10."pos"()
.annotate 'line', 697
  # rx pass
    rx2391_cur."!cursor_pass"(rx2391_pos, "metachar:sym<{ }>")
    if_null rx2391_debug, debug_1169
    rx2391_cur."!cursor_debug"("PASS", "metachar:sym<{ }>", " at pos=", rx2391_pos)
  debug_1169:
    .return (rx2391_cur)
  rx2391_restart:
.annotate 'line', 692
    if_null rx2391_debug, debug_1170
    rx2391_cur."!cursor_debug"("NEXT", "metachar:sym<{ }>")
  debug_1170:
  rx2391_fail:
    (rx2391_rep, rx2391_pos, $I10, $P10) = rx2391_cur."!mark_fail"(0)
    lt rx2391_pos, -1, rx2391_done
    eq rx2391_pos, -1, rx2391_fail
    jump $I10
  rx2391_done:
    rx2391_cur."!cursor_fail"()
    if_null rx2391_debug, debug_1171
    rx2391_cur."!cursor_debug"("FAIL", "metachar:sym<{ }>")
  debug_1171:
    .return (rx2391_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<{ }>"  :nsentry("!PREFIX__metachar:sym<{ }>") :subid("387_1300057348.719") :method
.annotate 'line', 692
    new $P2393, "ResizablePMCArray"
    push $P2393, "{"
    .return ($P2393)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<nqpvar>"  :subid("388_1300057348.719") :method :outer("382_1300057348.719")
.annotate 'line', 692
    .const 'Sub' $P2401 = "390_1300057348.719" 
    capture_lex $P2401
    .local string rx2396_tgt
    .local int rx2396_pos
    .local int rx2396_off
    .local int rx2396_eos
    .local int rx2396_rep
    .local pmc rx2396_cur
    .local pmc rx2396_debug
    (rx2396_cur, rx2396_pos, rx2396_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2396_cur
    .local pmc match
    .lex "$/", match
    length rx2396_eos, rx2396_tgt
    gt rx2396_pos, rx2396_eos, rx2396_done
    set rx2396_off, 0
    lt rx2396_pos, 2, rx2396_start
    sub rx2396_off, rx2396_pos, 1
    substr rx2396_tgt, rx2396_tgt, rx2396_off
  rx2396_start:
    eq $I10, 1, rx2396_restart
    if_null rx2396_debug, debug_1172
    rx2396_cur."!cursor_debug"("START", "metachar:sym<nqpvar>")
  debug_1172:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2399_done
    goto rxscan2399_scan
  rxscan2399_loop:
    (rx2396_pos) = rx2396_cur."from"()
    inc rx2396_pos
    rx2396_cur."!cursor_from"(rx2396_pos)
    ge rx2396_pos, rx2396_eos, rxscan2399_done
  rxscan2399_scan:
    set_addr $I10, rxscan2399_loop
    rx2396_cur."!mark_push"(0, rx2396_pos, $I10)
  rxscan2399_done:
.annotate 'line', 702
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2396_pos, rx2396_off
    substr $S10, rx2396_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2396_fail
  # rx subrule "before" subtype=zerowidth negate=
    rx2396_cur."!cursor_pos"(rx2396_pos)
    .const 'Sub' $P2401 = "390_1300057348.719" 
    capture_lex $P2401
    $P10 = rx2396_cur."before"($P2401)
    unless $P10, rx2396_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2396_cur."!cursor_pos"(rx2396_pos)
    $P10 = rx2396_cur."LANG"("MAIN", "variable")
    unless $P10, rx2396_fail
    rx2396_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2396_pos = $P10."pos"()
.annotate 'line', 701
  # rx pass
    rx2396_cur."!cursor_pass"(rx2396_pos, "metachar:sym<nqpvar>")
    if_null rx2396_debug, debug_1177
    rx2396_cur."!cursor_debug"("PASS", "metachar:sym<nqpvar>", " at pos=", rx2396_pos)
  debug_1177:
    .return (rx2396_cur)
  rx2396_restart:
.annotate 'line', 692
    if_null rx2396_debug, debug_1178
    rx2396_cur."!cursor_debug"("NEXT", "metachar:sym<nqpvar>")
  debug_1178:
  rx2396_fail:
    (rx2396_rep, rx2396_pos, $I10, $P10) = rx2396_cur."!mark_fail"(0)
    lt rx2396_pos, -1, rx2396_done
    eq rx2396_pos, -1, rx2396_fail
    jump $I10
  rx2396_done:
    rx2396_cur."!cursor_fail"()
    if_null rx2396_debug, debug_1179
    rx2396_cur."!cursor_debug"("FAIL", "metachar:sym<nqpvar>")
  debug_1179:
    .return (rx2396_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<nqpvar>"  :nsentry("!PREFIX__metachar:sym<nqpvar>") :subid("389_1300057348.719") :method
.annotate 'line', 692
    new $P2398, "ResizablePMCArray"
    push $P2398, "$"
    push $P2398, "@"
    .return ($P2398)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2400"  :anon :subid("390_1300057348.719") :method :outer("388_1300057348.719")
.annotate 'line', 702
    .local string rx2402_tgt
    .local int rx2402_pos
    .local int rx2402_off
    .local int rx2402_eos
    .local int rx2402_rep
    .local pmc rx2402_cur
    .local pmc rx2402_debug
    (rx2402_cur, rx2402_pos, rx2402_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2402_cur
    .local pmc match
    .lex "$/", match
    length rx2402_eos, rx2402_tgt
    gt rx2402_pos, rx2402_eos, rx2402_done
    set rx2402_off, 0
    lt rx2402_pos, 2, rx2402_start
    sub rx2402_off, rx2402_pos, 1
    substr rx2402_tgt, rx2402_tgt, rx2402_off
  rx2402_start:
    eq $I10, 1, rx2402_restart
    if_null rx2402_debug, debug_1173
    rx2402_cur."!cursor_debug"("START", "")
  debug_1173:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2403_done
    goto rxscan2403_scan
  rxscan2403_loop:
    (rx2402_pos) = rx2402_cur."from"()
    inc rx2402_pos
    rx2402_cur."!cursor_from"(rx2402_pos)
    ge rx2402_pos, rx2402_eos, rxscan2403_done
  rxscan2403_scan:
    set_addr $I10, rxscan2403_loop
    rx2402_cur."!mark_push"(0, rx2402_pos, $I10)
  rxscan2403_done:
  # rx charclass .
    ge rx2402_pos, rx2402_eos, rx2402_fail
    inc rx2402_pos
  # rx charclass w
    ge rx2402_pos, rx2402_eos, rx2402_fail
    sub $I10, rx2402_pos, rx2402_off
    is_cclass $I11, 8192, rx2402_tgt, $I10
    unless $I11, rx2402_fail
    inc rx2402_pos
  # rx pass
    rx2402_cur."!cursor_pass"(rx2402_pos, "")
    if_null rx2402_debug, debug_1174
    rx2402_cur."!cursor_debug"("PASS", "", " at pos=", rx2402_pos)
  debug_1174:
    .return (rx2402_cur)
  rx2402_restart:
    if_null rx2402_debug, debug_1175
    rx2402_cur."!cursor_debug"("NEXT", "")
  debug_1175:
  rx2402_fail:
    (rx2402_rep, rx2402_pos, $I10, $P10) = rx2402_cur."!mark_fail"(0)
    lt rx2402_pos, -1, rx2402_done
    eq rx2402_pos, -1, rx2402_fail
    jump $I10
  rx2402_done:
    rx2402_cur."!cursor_fail"()
    if_null rx2402_debug, debug_1176
    rx2402_cur."!cursor_debug"("FAIL", "")
  debug_1176:
    .return (rx2402_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<{ }>"  :subid("391_1300057348.719") :method :outer("382_1300057348.719")
.annotate 'line', 692
    .local string rx2405_tgt
    .local int rx2405_pos
    .local int rx2405_off
    .local int rx2405_eos
    .local int rx2405_rep
    .local pmc rx2405_cur
    .local pmc rx2405_debug
    (rx2405_cur, rx2405_pos, rx2405_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2405_cur
    .local pmc match
    .lex "$/", match
    length rx2405_eos, rx2405_tgt
    gt rx2405_pos, rx2405_eos, rx2405_done
    set rx2405_off, 0
    lt rx2405_pos, 2, rx2405_start
    sub rx2405_off, rx2405_pos, 1
    substr rx2405_tgt, rx2405_tgt, rx2405_off
  rx2405_start:
    eq $I10, 1, rx2405_restart
    if_null rx2405_debug, debug_1180
    rx2405_cur."!cursor_debug"("START", "assertion:sym<{ }>")
  debug_1180:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2408_done
    goto rxscan2408_scan
  rxscan2408_loop:
    (rx2405_pos) = rx2405_cur."from"()
    inc rx2405_pos
    rx2405_cur."!cursor_from"(rx2405_pos)
    ge rx2405_pos, rx2405_eos, rxscan2408_done
  rxscan2408_scan:
    set_addr $I10, rxscan2408_loop
    rx2405_cur."!mark_push"(0, rx2405_pos, $I10)
  rxscan2408_done:
.annotate 'line', 706
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2405_pos, rx2405_off
    substr $S10, rx2405_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2405_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2405_cur."!cursor_pos"(rx2405_pos)
    $P10 = rx2405_cur."codeblock"()
    unless $P10, rx2405_fail
    rx2405_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2405_pos = $P10."pos"()
.annotate 'line', 705
  # rx pass
    rx2405_cur."!cursor_pass"(rx2405_pos, "assertion:sym<{ }>")
    if_null rx2405_debug, debug_1181
    rx2405_cur."!cursor_debug"("PASS", "assertion:sym<{ }>", " at pos=", rx2405_pos)
  debug_1181:
    .return (rx2405_cur)
  rx2405_restart:
.annotate 'line', 692
    if_null rx2405_debug, debug_1182
    rx2405_cur."!cursor_debug"("NEXT", "assertion:sym<{ }>")
  debug_1182:
  rx2405_fail:
    (rx2405_rep, rx2405_pos, $I10, $P10) = rx2405_cur."!mark_fail"(0)
    lt rx2405_pos, -1, rx2405_done
    eq rx2405_pos, -1, rx2405_fail
    jump $I10
  rx2405_done:
    rx2405_cur."!cursor_fail"()
    if_null rx2405_debug, debug_1183
    rx2405_cur."!cursor_debug"("FAIL", "assertion:sym<{ }>")
  debug_1183:
    .return (rx2405_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<{ }>"  :nsentry("!PREFIX__assertion:sym<{ }>") :subid("392_1300057348.719") :method
.annotate 'line', 692
    new $P2407, "ResizablePMCArray"
    push $P2407, "{"
    .return ($P2407)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?{ }>"  :subid("393_1300057348.719") :method :outer("382_1300057348.719")
.annotate 'line', 692
    .const 'Sub' $P2415 = "395_1300057348.719" 
    capture_lex $P2415
    .local string rx2410_tgt
    .local int rx2410_pos
    .local int rx2410_off
    .local int rx2410_eos
    .local int rx2410_rep
    .local pmc rx2410_cur
    .local pmc rx2410_debug
    (rx2410_cur, rx2410_pos, rx2410_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2410_cur
    .local pmc match
    .lex "$/", match
    length rx2410_eos, rx2410_tgt
    gt rx2410_pos, rx2410_eos, rx2410_done
    set rx2410_off, 0
    lt rx2410_pos, 2, rx2410_start
    sub rx2410_off, rx2410_pos, 1
    substr rx2410_tgt, rx2410_tgt, rx2410_off
  rx2410_start:
    eq $I10, 1, rx2410_restart
    if_null rx2410_debug, debug_1184
    rx2410_cur."!cursor_debug"("START", "assertion:sym<?{ }>")
  debug_1184:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2413_done
    goto rxscan2413_scan
  rxscan2413_loop:
    (rx2410_pos) = rx2410_cur."from"()
    inc rx2410_pos
    rx2410_cur."!cursor_from"(rx2410_pos)
    ge rx2410_pos, rx2410_eos, rxscan2413_done
  rxscan2413_scan:
    set_addr $I10, rxscan2413_loop
    rx2410_cur."!mark_push"(0, rx2410_pos, $I10)
  rxscan2413_done:
.annotate 'line', 710
  # rx subcapture "zw"
    set_addr $I10, rxcap_2418_fail
    rx2410_cur."!mark_push"(0, rx2410_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2410_pos, rx2410_eos, rx2410_fail
    sub $I10, rx2410_pos, rx2410_off
    substr $S10, rx2410_tgt, $I10, 1
    index $I11, "?!", $S10
    lt $I11, 0, rx2410_fail
    inc rx2410_pos
  # rx subrule "before" subtype=zerowidth negate=
    rx2410_cur."!cursor_pos"(rx2410_pos)
    .const 'Sub' $P2415 = "395_1300057348.719" 
    capture_lex $P2415
    $P10 = rx2410_cur."before"($P2415)
    unless $P10, rx2410_fail
    set_addr $I10, rxcap_2418_fail
    ($I12, $I11) = rx2410_cur."!mark_peek"($I10)
    rx2410_cur."!cursor_pos"($I11)
    ($P10) = rx2410_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2410_pos, "")
    rx2410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("zw")
    goto rxcap_2418_done
  rxcap_2418_fail:
    goto rx2410_fail
  rxcap_2418_done:
  # rx subrule "codeblock" subtype=capture negate=
    rx2410_cur."!cursor_pos"(rx2410_pos)
    $P10 = rx2410_cur."codeblock"()
    unless $P10, rx2410_fail
    rx2410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2410_pos = $P10."pos"()
.annotate 'line', 709
  # rx pass
    rx2410_cur."!cursor_pass"(rx2410_pos, "assertion:sym<?{ }>")
    if_null rx2410_debug, debug_1189
    rx2410_cur."!cursor_debug"("PASS", "assertion:sym<?{ }>", " at pos=", rx2410_pos)
  debug_1189:
    .return (rx2410_cur)
  rx2410_restart:
.annotate 'line', 692
    if_null rx2410_debug, debug_1190
    rx2410_cur."!cursor_debug"("NEXT", "assertion:sym<?{ }>")
  debug_1190:
  rx2410_fail:
    (rx2410_rep, rx2410_pos, $I10, $P10) = rx2410_cur."!mark_fail"(0)
    lt rx2410_pos, -1, rx2410_done
    eq rx2410_pos, -1, rx2410_fail
    jump $I10
  rx2410_done:
    rx2410_cur."!cursor_fail"()
    if_null rx2410_debug, debug_1191
    rx2410_cur."!cursor_debug"("FAIL", "assertion:sym<?{ }>")
  debug_1191:
    .return (rx2410_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<?{ }>"  :nsentry("!PREFIX__assertion:sym<?{ }>") :subid("394_1300057348.719") :method
.annotate 'line', 692
    new $P2412, "ResizablePMCArray"
    push $P2412, "!"
    push $P2412, "?"
    .return ($P2412)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2414"  :anon :subid("395_1300057348.719") :method :outer("393_1300057348.719")
.annotate 'line', 710
    .local string rx2416_tgt
    .local int rx2416_pos
    .local int rx2416_off
    .local int rx2416_eos
    .local int rx2416_rep
    .local pmc rx2416_cur
    .local pmc rx2416_debug
    (rx2416_cur, rx2416_pos, rx2416_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2416_cur
    .local pmc match
    .lex "$/", match
    length rx2416_eos, rx2416_tgt
    gt rx2416_pos, rx2416_eos, rx2416_done
    set rx2416_off, 0
    lt rx2416_pos, 2, rx2416_start
    sub rx2416_off, rx2416_pos, 1
    substr rx2416_tgt, rx2416_tgt, rx2416_off
  rx2416_start:
    eq $I10, 1, rx2416_restart
    if_null rx2416_debug, debug_1185
    rx2416_cur."!cursor_debug"("START", "")
  debug_1185:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2417_done
    goto rxscan2417_scan
  rxscan2417_loop:
    (rx2416_pos) = rx2416_cur."from"()
    inc rx2416_pos
    rx2416_cur."!cursor_from"(rx2416_pos)
    ge rx2416_pos, rx2416_eos, rxscan2417_done
  rxscan2417_scan:
    set_addr $I10, rxscan2417_loop
    rx2416_cur."!mark_push"(0, rx2416_pos, $I10)
  rxscan2417_done:
  # rx literal  "{"
    add $I11, rx2416_pos, 1
    gt $I11, rx2416_eos, rx2416_fail
    sub $I11, rx2416_pos, rx2416_off
    ord $I11, rx2416_tgt, $I11
    ne $I11, 123, rx2416_fail
    add rx2416_pos, 1
  # rx pass
    rx2416_cur."!cursor_pass"(rx2416_pos, "")
    if_null rx2416_debug, debug_1186
    rx2416_cur."!cursor_debug"("PASS", "", " at pos=", rx2416_pos)
  debug_1186:
    .return (rx2416_cur)
  rx2416_restart:
    if_null rx2416_debug, debug_1187
    rx2416_cur."!cursor_debug"("NEXT", "")
  debug_1187:
  rx2416_fail:
    (rx2416_rep, rx2416_pos, $I10, $P10) = rx2416_cur."!mark_fail"(0)
    lt rx2416_pos, -1, rx2416_done
    eq rx2416_pos, -1, rx2416_fail
    jump $I10
  rx2416_done:
    rx2416_cur."!cursor_fail"()
    if_null rx2416_debug, debug_1188
    rx2416_cur."!cursor_debug"("FAIL", "")
  debug_1188:
    .return (rx2416_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<name>"  :subid("396_1300057348.719") :method :outer("382_1300057348.719")
.annotate 'line', 692
    .const 'Sub' $P2428 = "398_1300057348.719" 
    capture_lex $P2428
    .local string rx2420_tgt
    .local int rx2420_pos
    .local int rx2420_off
    .local int rx2420_eos
    .local int rx2420_rep
    .local pmc rx2420_cur
    .local pmc rx2420_debug
    (rx2420_cur, rx2420_pos, rx2420_tgt, $I10) = self."!cursor_start"()
    rx2420_cur."!cursor_caparray"("assertion", "arglist", "nibbler")
    .lex unicode:"$\x{a2}", rx2420_cur
    .local pmc match
    .lex "$/", match
    length rx2420_eos, rx2420_tgt
    gt rx2420_pos, rx2420_eos, rx2420_done
    set rx2420_off, 0
    lt rx2420_pos, 2, rx2420_start
    sub rx2420_off, rx2420_pos, 1
    substr rx2420_tgt, rx2420_tgt, rx2420_off
  rx2420_start:
    eq $I10, 1, rx2420_restart
    if_null rx2420_debug, debug_1192
    rx2420_cur."!cursor_debug"("START", "assertion:sym<name>")
  debug_1192:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2424_done
    goto rxscan2424_scan
  rxscan2424_loop:
    (rx2420_pos) = rx2420_cur."from"()
    inc rx2420_pos
    rx2420_cur."!cursor_from"(rx2420_pos)
    ge rx2420_pos, rx2420_eos, rxscan2424_done
  rxscan2424_scan:
    set_addr $I10, rxscan2424_loop
    rx2420_cur."!mark_push"(0, rx2420_pos, $I10)
  rxscan2424_done:
.annotate 'line', 714
  # rx subrule "identifier" subtype=capture negate=
    rx2420_cur."!cursor_pos"(rx2420_pos)
    $P10 = rx2420_cur."identifier"()
    unless $P10, rx2420_fail
    rx2420_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2420_pos = $P10."pos"()
.annotate 'line', 721
  # rx rxquantr2425 ** 0..1
    set_addr $I10, rxquantr2425_done
    rx2420_cur."!mark_push"(0, rx2420_pos, $I10)
  rxquantr2425_loop:
  alt2426_0:
.annotate 'line', 715
    set_addr $I10, alt2426_1
    rx2420_cur."!mark_push"(0, rx2420_pos, $I10)
.annotate 'line', 716
  # rx subrule "before" subtype=zerowidth negate=
    rx2420_cur."!cursor_pos"(rx2420_pos)
    .const 'Sub' $P2428 = "398_1300057348.719" 
    capture_lex $P2428
    $P10 = rx2420_cur."before"($P2428)
    unless $P10, rx2420_fail
    goto alt2426_end
  alt2426_1:
    set_addr $I10, alt2426_2
    rx2420_cur."!mark_push"(0, rx2420_pos, $I10)
.annotate 'line', 717
  # rx literal  "="
    add $I11, rx2420_pos, 1
    gt $I11, rx2420_eos, rx2420_fail
    sub $I11, rx2420_pos, rx2420_off
    ord $I11, rx2420_tgt, $I11
    ne $I11, 61, rx2420_fail
    add rx2420_pos, 1
  # rx subrule "assertion" subtype=capture negate=
    rx2420_cur."!cursor_pos"(rx2420_pos)
    $P10 = rx2420_cur."assertion"()
    unless $P10, rx2420_fail
    rx2420_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("assertion")
    rx2420_pos = $P10."pos"()
    goto alt2426_end
  alt2426_2:
    set_addr $I10, alt2426_3
    rx2420_cur."!mark_push"(0, rx2420_pos, $I10)
.annotate 'line', 718
  # rx literal  ":"
    add $I11, rx2420_pos, 1
    gt $I11, rx2420_eos, rx2420_fail
    sub $I11, rx2420_pos, rx2420_off
    ord $I11, rx2420_tgt, $I11
    ne $I11, 58, rx2420_fail
    add rx2420_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2420_cur."!cursor_pos"(rx2420_pos)
    $P10 = rx2420_cur."arglist"()
    unless $P10, rx2420_fail
    rx2420_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2420_pos = $P10."pos"()
    goto alt2426_end
  alt2426_3:
    set_addr $I10, alt2426_4
    rx2420_cur."!mark_push"(0, rx2420_pos, $I10)
.annotate 'line', 719
  # rx literal  "("
    add $I11, rx2420_pos, 1
    gt $I11, rx2420_eos, rx2420_fail
    sub $I11, rx2420_pos, rx2420_off
    ord $I11, rx2420_tgt, $I11
    ne $I11, 40, rx2420_fail
    add rx2420_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2420_cur."!cursor_pos"(rx2420_pos)
    $P10 = rx2420_cur."LANG"("MAIN", "arglist")
    unless $P10, rx2420_fail
    rx2420_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2420_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2420_pos, 1
    gt $I11, rx2420_eos, rx2420_fail
    sub $I11, rx2420_pos, rx2420_off
    ord $I11, rx2420_tgt, $I11
    ne $I11, 41, rx2420_fail
    add rx2420_pos, 1
    goto alt2426_end
  alt2426_4:
.annotate 'line', 720
  # rx subrule "normspace" subtype=method negate=
    rx2420_cur."!cursor_pos"(rx2420_pos)
    $P10 = rx2420_cur."normspace"()
    unless $P10, rx2420_fail
    rx2420_pos = $P10."pos"()
  # rx subrule "nibbler" subtype=capture negate=
    rx2420_cur."!cursor_pos"(rx2420_pos)
    $P10 = rx2420_cur."nibbler"()
    unless $P10, rx2420_fail
    rx2420_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("nibbler")
    rx2420_pos = $P10."pos"()
  alt2426_end:
.annotate 'line', 721
    set_addr $I10, rxquantr2425_done
    (rx2420_rep) = rx2420_cur."!mark_commit"($I10)
  rxquantr2425_done:
.annotate 'line', 713
  # rx pass
    rx2420_cur."!cursor_pass"(rx2420_pos, "assertion:sym<name>")
    if_null rx2420_debug, debug_1197
    rx2420_cur."!cursor_debug"("PASS", "assertion:sym<name>", " at pos=", rx2420_pos)
  debug_1197:
    .return (rx2420_cur)
  rx2420_restart:
.annotate 'line', 692
    if_null rx2420_debug, debug_1198
    rx2420_cur."!cursor_debug"("NEXT", "assertion:sym<name>")
  debug_1198:
  rx2420_fail:
    (rx2420_rep, rx2420_pos, $I10, $P10) = rx2420_cur."!mark_fail"(0)
    lt rx2420_pos, -1, rx2420_done
    eq rx2420_pos, -1, rx2420_fail
    jump $I10
  rx2420_done:
    rx2420_cur."!cursor_fail"()
    if_null rx2420_debug, debug_1199
    rx2420_cur."!cursor_debug"("FAIL", "assertion:sym<name>")
  debug_1199:
    .return (rx2420_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<name>"  :nsentry("!PREFIX__assertion:sym<name>") :subid("397_1300057348.719") :method
.annotate 'line', 692
    $P2422 = self."!PREFIX__!subrule"("identifier", "")
    new $P2423, "ResizablePMCArray"
    push $P2423, $P2422
    .return ($P2423)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2427"  :anon :subid("398_1300057348.719") :method :outer("396_1300057348.719")
.annotate 'line', 716
    .local string rx2429_tgt
    .local int rx2429_pos
    .local int rx2429_off
    .local int rx2429_eos
    .local int rx2429_rep
    .local pmc rx2429_cur
    .local pmc rx2429_debug
    (rx2429_cur, rx2429_pos, rx2429_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2429_cur
    .local pmc match
    .lex "$/", match
    length rx2429_eos, rx2429_tgt
    gt rx2429_pos, rx2429_eos, rx2429_done
    set rx2429_off, 0
    lt rx2429_pos, 2, rx2429_start
    sub rx2429_off, rx2429_pos, 1
    substr rx2429_tgt, rx2429_tgt, rx2429_off
  rx2429_start:
    eq $I10, 1, rx2429_restart
    if_null rx2429_debug, debug_1193
    rx2429_cur."!cursor_debug"("START", "")
  debug_1193:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2430_done
    goto rxscan2430_scan
  rxscan2430_loop:
    (rx2429_pos) = rx2429_cur."from"()
    inc rx2429_pos
    rx2429_cur."!cursor_from"(rx2429_pos)
    ge rx2429_pos, rx2429_eos, rxscan2430_done
  rxscan2430_scan:
    set_addr $I10, rxscan2430_loop
    rx2429_cur."!mark_push"(0, rx2429_pos, $I10)
  rxscan2430_done:
  # rx literal  ">"
    add $I11, rx2429_pos, 1
    gt $I11, rx2429_eos, rx2429_fail
    sub $I11, rx2429_pos, rx2429_off
    ord $I11, rx2429_tgt, $I11
    ne $I11, 62, rx2429_fail
    add rx2429_pos, 1
  # rx pass
    rx2429_cur."!cursor_pass"(rx2429_pos, "")
    if_null rx2429_debug, debug_1194
    rx2429_cur."!cursor_debug"("PASS", "", " at pos=", rx2429_pos)
  debug_1194:
    .return (rx2429_cur)
  rx2429_restart:
    if_null rx2429_debug, debug_1195
    rx2429_cur."!cursor_debug"("NEXT", "")
  debug_1195:
  rx2429_fail:
    (rx2429_rep, rx2429_pos, $I10, $P10) = rx2429_cur."!mark_fail"(0)
    lt rx2429_pos, -1, rx2429_done
    eq rx2429_pos, -1, rx2429_fail
    jump $I10
  rx2429_done:
    rx2429_cur."!cursor_fail"()
    if_null rx2429_debug, debug_1196
    rx2429_cur."!cursor_debug"("FAIL", "")
  debug_1196:
    .return (rx2429_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<var>"  :subid("399_1300057348.719") :method :outer("382_1300057348.719")
.annotate 'line', 692
    .local string rx2432_tgt
    .local int rx2432_pos
    .local int rx2432_off
    .local int rx2432_eos
    .local int rx2432_rep
    .local pmc rx2432_cur
    .local pmc rx2432_debug
    (rx2432_cur, rx2432_pos, rx2432_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2432_cur
    .local pmc match
    .lex "$/", match
    length rx2432_eos, rx2432_tgt
    gt rx2432_pos, rx2432_eos, rx2432_done
    set rx2432_off, 0
    lt rx2432_pos, 2, rx2432_start
    sub rx2432_off, rx2432_pos, 1
    substr rx2432_tgt, rx2432_tgt, rx2432_off
  rx2432_start:
    eq $I10, 1, rx2432_restart
    if_null rx2432_debug, debug_1200
    rx2432_cur."!cursor_debug"("START", "assertion:sym<var>")
  debug_1200:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2435_done
    goto rxscan2435_scan
  rxscan2435_loop:
    (rx2432_pos) = rx2432_cur."from"()
    inc rx2432_pos
    rx2432_cur."!cursor_from"(rx2432_pos)
    ge rx2432_pos, rx2432_eos, rxscan2435_done
  rxscan2435_scan:
    set_addr $I10, rxscan2435_loop
    rx2432_cur."!mark_push"(0, rx2432_pos, $I10)
  rxscan2435_done:
.annotate 'line', 725
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2432_pos, rx2432_off
    substr $S10, rx2432_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2432_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2432_cur."!cursor_pos"(rx2432_pos)
    $P10 = rx2432_cur."LANG"("MAIN", "variable")
    unless $P10, rx2432_fail
    rx2432_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2432_pos = $P10."pos"()
.annotate 'line', 724
  # rx pass
    rx2432_cur."!cursor_pass"(rx2432_pos, "assertion:sym<var>")
    if_null rx2432_debug, debug_1201
    rx2432_cur."!cursor_debug"("PASS", "assertion:sym<var>", " at pos=", rx2432_pos)
  debug_1201:
    .return (rx2432_cur)
  rx2432_restart:
.annotate 'line', 692
    if_null rx2432_debug, debug_1202
    rx2432_cur."!cursor_debug"("NEXT", "assertion:sym<var>")
  debug_1202:
  rx2432_fail:
    (rx2432_rep, rx2432_pos, $I10, $P10) = rx2432_cur."!mark_fail"(0)
    lt rx2432_pos, -1, rx2432_done
    eq rx2432_pos, -1, rx2432_fail
    jump $I10
  rx2432_done:
    rx2432_cur."!cursor_fail"()
    if_null rx2432_debug, debug_1203
    rx2432_cur."!cursor_debug"("FAIL", "assertion:sym<var>")
  debug_1203:
    .return (rx2432_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<var>"  :nsentry("!PREFIX__assertion:sym<var>") :subid("400_1300057348.719") :method
.annotate 'line', 692
    new $P2434, "ResizablePMCArray"
    push $P2434, "$"
    push $P2434, "@"
    .return ($P2434)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "codeblock"  :subid("401_1300057348.719") :method :outer("382_1300057348.719")
.annotate 'line', 692
    .local string rx2437_tgt
    .local int rx2437_pos
    .local int rx2437_off
    .local int rx2437_eos
    .local int rx2437_rep
    .local pmc rx2437_cur
    .local pmc rx2437_debug
    (rx2437_cur, rx2437_pos, rx2437_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2437_cur
    .local pmc match
    .lex "$/", match
    length rx2437_eos, rx2437_tgt
    gt rx2437_pos, rx2437_eos, rx2437_done
    set rx2437_off, 0
    lt rx2437_pos, 2, rx2437_start
    sub rx2437_off, rx2437_pos, 1
    substr rx2437_tgt, rx2437_tgt, rx2437_off
  rx2437_start:
    eq $I10, 1, rx2437_restart
    if_null rx2437_debug, debug_1204
    rx2437_cur."!cursor_debug"("START", "codeblock")
  debug_1204:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2441_done
    goto rxscan2441_scan
  rxscan2441_loop:
    (rx2437_pos) = rx2437_cur."from"()
    inc rx2437_pos
    rx2437_cur."!cursor_from"(rx2437_pos)
    ge rx2437_pos, rx2437_eos, rxscan2441_done
  rxscan2441_scan:
    set_addr $I10, rxscan2441_loop
    rx2437_cur."!mark_push"(0, rx2437_pos, $I10)
  rxscan2441_done:
.annotate 'line', 729
  # rx subrule "LANG" subtype=capture negate=
    rx2437_cur."!cursor_pos"(rx2437_pos)
    $P10 = rx2437_cur."LANG"("MAIN", "pblock")
    unless $P10, rx2437_fail
    rx2437_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2437_pos = $P10."pos"()
.annotate 'line', 728
  # rx pass
    rx2437_cur."!cursor_pass"(rx2437_pos, "codeblock")
    if_null rx2437_debug, debug_1205
    rx2437_cur."!cursor_debug"("PASS", "codeblock", " at pos=", rx2437_pos)
  debug_1205:
    .return (rx2437_cur)
  rx2437_restart:
.annotate 'line', 692
    if_null rx2437_debug, debug_1206
    rx2437_cur."!cursor_debug"("NEXT", "codeblock")
  debug_1206:
  rx2437_fail:
    (rx2437_rep, rx2437_pos, $I10, $P10) = rx2437_cur."!mark_fail"(0)
    lt rx2437_pos, -1, rx2437_done
    eq rx2437_pos, -1, rx2437_fail
    jump $I10
  rx2437_done:
    rx2437_cur."!cursor_fail"()
    if_null rx2437_debug, debug_1207
    rx2437_cur."!cursor_debug"("FAIL", "codeblock")
  debug_1207:
    .return (rx2437_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__codeblock"  :nsentry("!PREFIX__codeblock") :subid("402_1300057348.719") :method
.annotate 'line', 692
    $P2439 = self."!PREFIX__!subrule"("LANG", "")
    new $P2440, "ResizablePMCArray"
    push $P2440, $P2439
    .return ($P2440)
.end


.HLL "nqp"

.namespace []
.sub "_block2482" :load :anon :subid("404_1300057348.719")
.annotate 'line', 1
    .const 'Sub' $P2484 = "10_1300057348.719" 
    $P2485 = $P2484()
    .return ($P2485)
.end

### .include 'gen/nqp-actions.pir'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.namespace []
.sub "_block11"  :anon :subid("10_1300057363.399")
.annotate 'line', 0
    get_hll_global $P3209, ["NQP";"RegexActions"], "_block3208" 
    capture_lex $P3209
    get_hll_global $P14, ["NQP";"Actions"], "_block13" 
    capture_lex $P14
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
    get_hll_global $P14, ["NQP";"Actions"], "_block13" 
    capture_lex $P14
    $P14()
.annotate 'line', 1328
    get_hll_global $P3209, ["NQP";"RegexActions"], "_block3208" 
    capture_lex $P3209
    $P3328 = $P3209()
.annotate 'line', 1
    .return ($P3328)
    .const 'Sub' $P3330 = "173_1300057363.399" 
    .return ($P3330)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post174") :outer("10_1300057363.399")
.annotate 'line', 0
    .const 'Sub' $P12 = "10_1300057363.399" 
    .local pmc block
    set block, $P12
    nqp_get_sc $P3334, "1300057352.665"
    isnull $I3335, $P3334
    if $I3335, if_3333
    nqp_get_sc_object $P3348, "1300057352.665", 0
    set_hll_global ["NQP"], "Actions", $P3348
    nqp_get_sc_object $P3349, "1300057352.665", 1
    set_hll_global ["NQP"], "RegexActions", $P3349
    goto if_3333_end
  if_3333:
    nqp_dynop_setup 
    getinterp $P3336
    get_class $P3337, "LexPad"
    get_class $P3338, "NQPLexPad"
    $P3336."hll_map"($P3337, $P3338)
    load_bytecode "nqpmo.pbc"
    nqp_create_sc $P3339, "1300057352.665"
    .local pmc cur_sc
    set cur_sc, $P3339
    load_bytecode "SettingManager.pbc"
    get_hll_global $P3340, ["HLL"], "SettingManager"
    $P3341 = $P3340."load_setting"("NQPCORE")
    block."set_outer_ctx"($P3341)
    get_hll_global $P3342, "NQPClassHOW"
    $P3343 = $P3342."new_type"("NQP::Actions" :named("name"))
    nqp_set_sc_for_object $P3343, cur_sc
    nqp_set_sc_object "1300057352.665", 0, $P3343
    nqp_get_sc_object $P3344, "1300057352.665", 0
    set_hll_global ["NQP"], "Actions", $P3344
    get_hll_global $P3345, "NQPClassHOW"
    $P3346 = $P3345."new_type"("NQP::RegexActions" :named("name"))
    nqp_set_sc_for_object $P3346, cur_sc
    nqp_set_sc_object "1300057352.665", 1, $P3346
    nqp_get_sc_object $P3347, "1300057352.665", 1
    set_hll_global ["NQP"], "RegexActions", $P3347
  if_3333_end:
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block13"  :subid("11_1300057363.399") :outer("10_1300057363.399")
.annotate 'line', 1
    .const 'Sub' $P2986 = "163_1300057363.399" 
    capture_lex $P2986
    .const 'Sub' $P2976 = "162_1300057363.399" 
    capture_lex $P2976
    .const 'Sub' $P2971 = "161_1300057363.399" 
    capture_lex $P2971
    .const 'Sub' $P2966 = "160_1300057363.399" 
    capture_lex $P2966
    .const 'Sub' $P2961 = "159_1300057363.399" 
    capture_lex $P2961
    .const 'Sub' $P2950 = "158_1300057363.399" 
    capture_lex $P2950
    .const 'Sub' $P2942 = "157_1300057363.399" 
    capture_lex $P2942
    .const 'Sub' $P2934 = "156_1300057363.399" 
    capture_lex $P2934
    .const 'Sub' $P2926 = "155_1300057363.399" 
    capture_lex $P2926
    .const 'Sub' $P2921 = "154_1300057363.399" 
    capture_lex $P2921
    .const 'Sub' $P2909 = "153_1300057363.399" 
    capture_lex $P2909
    .const 'Sub' $P2901 = "152_1300057363.399" 
    capture_lex $P2901
    .const 'Sub' $P2863 = "151_1300057363.399" 
    capture_lex $P2863
    .const 'Sub' $P2851 = "150_1300057363.399" 
    capture_lex $P2851
    .const 'Sub' $P2843 = "149_1300057363.399" 
    capture_lex $P2843
    .const 'Sub' $P2835 = "148_1300057363.399" 
    capture_lex $P2835
    .const 'Sub' $P2827 = "147_1300057363.399" 
    capture_lex $P2827
    .const 'Sub' $P2819 = "146_1300057363.399" 
    capture_lex $P2819
    .const 'Sub' $P2811 = "145_1300057363.399" 
    capture_lex $P2811
    .const 'Sub' $P2785 = "144_1300057363.399" 
    capture_lex $P2785
    .const 'Sub' $P2770 = "143_1300057363.399" 
    capture_lex $P2770
    .const 'Sub' $P2762 = "142_1300057363.399" 
    capture_lex $P2762
    .const 'Sub' $P2751 = "141_1300057363.399" 
    capture_lex $P2751
    .const 'Sub' $P2740 = "140_1300057363.399" 
    capture_lex $P2740
    .const 'Sub' $P2729 = "139_1300057363.399" 
    capture_lex $P2729
    .const 'Sub' $P2721 = "138_1300057363.399" 
    capture_lex $P2721
    .const 'Sub' $P2694 = "137_1300057363.399" 
    capture_lex $P2694
    .const 'Sub' $P2656 = "135_1300057363.399" 
    capture_lex $P2656
    .const 'Sub' $P2648 = "134_1300057363.399" 
    capture_lex $P2648
    .const 'Sub' $P2640 = "133_1300057363.399" 
    capture_lex $P2640
    .const 'Sub' $P2615 = "132_1300057363.399" 
    capture_lex $P2615
    .const 'Sub' $P2599 = "131_1300057363.399" 
    capture_lex $P2599
    .const 'Sub' $P2591 = "130_1300057363.399" 
    capture_lex $P2591
    .const 'Sub' $P2583 = "129_1300057363.399" 
    capture_lex $P2583
    .const 'Sub' $P2481 = "126_1300057363.399" 
    capture_lex $P2481
    .const 'Sub' $P2473 = "125_1300057363.399" 
    capture_lex $P2473
    .const 'Sub' $P2466 = "124_1300057363.399" 
    capture_lex $P2466
    .const 'Sub' $P2439 = "123_1300057363.399" 
    capture_lex $P2439
    .const 'Sub' $P2385 = "121_1300057363.399" 
    capture_lex $P2385
    .const 'Sub' $P2371 = "120_1300057363.399" 
    capture_lex $P2371
    .const 'Sub' $P2364 = "119_1300057363.399" 
    capture_lex $P2364
    .const 'Sub' $P2315 = "118_1300057363.399" 
    capture_lex $P2315
    .const 'Sub' $P2150 = "114_1300057363.399" 
    capture_lex $P2150
    .const 'Sub' $P2087 = "112_1300057363.399" 
    capture_lex $P2087
    .const 'Sub' $P2079 = "111_1300057363.399" 
    capture_lex $P2079
    .const 'Sub' $P2064 = "110_1300057363.399" 
    capture_lex $P2064
    .const 'Sub' $P2049 = "109_1300057363.399" 
    capture_lex $P2049
    .const 'Sub' $P2031 = "108_1300057363.399" 
    capture_lex $P2031
    .const 'Sub' $P1932 = "107_1300057363.399" 
    capture_lex $P1932
    .const 'Sub' $P1888 = "104_1300057363.399" 
    capture_lex $P1888
    .const 'Sub' $P1763 = "101_1300057363.399" 
    capture_lex $P1763
    .const 'Sub' $P1512 = "94_1300057363.399" 
    capture_lex $P1512
    .const 'Sub' $P1504 = "93_1300057363.399" 
    capture_lex $P1504
    .const 'Sub' $P1496 = "92_1300057363.399" 
    capture_lex $P1496
    .const 'Sub' $P1395 = "88_1300057363.399" 
    capture_lex $P1395
    .const 'Sub' $P1387 = "87_1300057363.399" 
    capture_lex $P1387
    .const 'Sub' $P1372 = "86_1300057363.399" 
    capture_lex $P1372
    .const 'Sub' $P1357 = "85_1300057363.399" 
    capture_lex $P1357
    .const 'Sub' $P1342 = "84_1300057363.399" 
    capture_lex $P1342
    .const 'Sub' $P1320 = "83_1300057363.399" 
    capture_lex $P1320
    .const 'Sub' $P1312 = "82_1300057363.399" 
    capture_lex $P1312
    .const 'Sub' $P1304 = "81_1300057363.399" 
    capture_lex $P1304
    .const 'Sub' $P1296 = "80_1300057363.399" 
    capture_lex $P1296
    .const 'Sub' $P1099 = "77_1300057363.399" 
    capture_lex $P1099
    .const 'Sub' $P1091 = "76_1300057363.399" 
    capture_lex $P1091
    .const 'Sub' $P1083 = "75_1300057363.399" 
    capture_lex $P1083
    .const 'Sub' $P1075 = "74_1300057363.399" 
    capture_lex $P1075
    .const 'Sub' $P1067 = "73_1300057363.399" 
    capture_lex $P1067
    .const 'Sub' $P1059 = "72_1300057363.399" 
    capture_lex $P1059
    .const 'Sub' $P1051 = "71_1300057363.399" 
    capture_lex $P1051
    .const 'Sub' $P961 = "69_1300057363.399" 
    capture_lex $P961
    .const 'Sub' $P937 = "68_1300057363.399" 
    capture_lex $P937
    .const 'Sub' $P923 = "67_1300057363.399" 
    capture_lex $P923
    .const 'Sub' $P915 = "66_1300057363.399" 
    capture_lex $P915
    .const 'Sub' $P907 = "65_1300057363.399" 
    capture_lex $P907
    .const 'Sub' $P899 = "64_1300057363.399" 
    capture_lex $P899
    .const 'Sub' $P891 = "63_1300057363.399" 
    capture_lex $P891
    .const 'Sub' $P883 = "62_1300057363.399" 
    capture_lex $P883
    .const 'Sub' $P875 = "61_1300057363.399" 
    capture_lex $P875
    .const 'Sub' $P867 = "60_1300057363.399" 
    capture_lex $P867
    .const 'Sub' $P859 = "59_1300057363.399" 
    capture_lex $P859
    .const 'Sub' $P851 = "58_1300057363.399" 
    capture_lex $P851
    .const 'Sub' $P843 = "57_1300057363.399" 
    capture_lex $P843
    .const 'Sub' $P835 = "56_1300057363.399" 
    capture_lex $P835
    .const 'Sub' $P827 = "55_1300057363.399" 
    capture_lex $P827
    .const 'Sub' $P819 = "54_1300057363.399" 
    capture_lex $P819
    .const 'Sub' $P803 = "53_1300057363.399" 
    capture_lex $P803
    .const 'Sub' $P770 = "52_1300057363.399" 
    capture_lex $P770
    .const 'Sub' $P756 = "51_1300057363.399" 
    capture_lex $P756
    .const 'Sub' $P737 = "50_1300057363.399" 
    capture_lex $P737
    .const 'Sub' $P719 = "49_1300057363.399" 
    capture_lex $P719
    .const 'Sub' $P695 = "48_1300057363.399" 
    capture_lex $P695
    .const 'Sub' $P661 = "47_1300057363.399" 
    capture_lex $P661
    .const 'Sub' $P646 = "46_1300057363.399" 
    capture_lex $P646
    .const 'Sub' $P634 = "45_1300057363.399" 
    capture_lex $P634
    .const 'Sub' $P583 = "43_1300057363.399" 
    capture_lex $P583
    .const 'Sub' $P572 = "42_1300057363.399" 
    capture_lex $P572
    .const 'Sub' $P565 = "41_1300057363.399" 
    capture_lex $P565
    .const 'Sub' $P543 = "40_1300057363.399" 
    capture_lex $P543
    .const 'Sub' $P532 = "39_1300057363.399" 
    capture_lex $P532
    .const 'Sub' $P497 = "37_1300057363.399" 
    capture_lex $P497
    .const 'Sub' $P489 = "36_1300057363.399" 
    capture_lex $P489
    .const 'Sub' $P481 = "35_1300057363.399" 
    capture_lex $P481
    .const 'Sub' $P467 = "34_1300057363.399" 
    capture_lex $P467
    .const 'Sub' $P386 = "32_1300057363.399" 
    capture_lex $P386
    .const 'Sub' $P345 = "30_1300057363.399" 
    capture_lex $P345
    .const 'Sub' $P299 = "29_1300057363.399" 
    capture_lex $P299
    .const 'Sub' $P268 = "28_1300057363.399" 
    capture_lex $P268
    .const 'Sub' $P260 = "27_1300057363.399" 
    capture_lex $P260
    .const 'Sub' $P252 = "25_1300057363.399" 
    capture_lex $P252
    .const 'Sub' $P238 = "24_1300057363.399" 
    capture_lex $P238
    .const 'Sub' $P212 = "22_1300057363.399" 
    capture_lex $P212
    .const 'Sub' $P147 = "20_1300057363.399" 
    capture_lex $P147
    .const 'Sub' $P137 = "19_1300057363.399" 
    capture_lex $P137
    .const 'Sub' $P89 = "18_1300057363.399" 
    capture_lex $P89
    .const 'Sub' $P76 = "17_1300057363.399" 
    capture_lex $P76
    .const 'Sub' $P58 = "16_1300057363.399" 
    capture_lex $P58
    .const 'Sub' $P25 = "13_1300057363.399" 
    capture_lex $P25
    .const 'Sub' $P17 = "12_1300057363.399" 
    capture_lex $P17
    get_global $P15, "$?CLASS"
.annotate 'line', 3
    get_global $P16, "@BLOCK"
    unless_null $P16, vivify_176
    $P16 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P16
  vivify_176:
.annotate 'line', 9
    .const 'Sub' $P17 = "12_1300057363.399" 
    newclosure $P24, $P17
    .lex "xblock_immediate", $P24
.annotate 'line', 14
    .const 'Sub' $P25 = "13_1300057363.399" 
    newclosure $P57, $P25
    .lex "block_immediate", $P57
.annotate 'line', 24
    .const 'Sub' $P58 = "16_1300057363.399" 
    newclosure $P75, $P58
    .lex "vivitype", $P75
.annotate 'line', 43
    .const 'Sub' $P76 = "17_1300057363.399" 
    newclosure $P88, $P76
    .lex "colonpair_str", $P88
.annotate 'line', 263
    .const 'Sub' $P89 = "18_1300057363.399" 
    newclosure $P136, $P89
    .lex "push_block_handler", $P136
.annotate 'line', 805
    .const 'Sub' $P137 = "19_1300057363.399" 
    newclosure $P146, $P137
    .lex "only_star_block", $P146
.annotate 'line', 814
    .const 'Sub' $P147 = "20_1300057363.399" 
    newclosure $P211, $P147
    .lex "attach_multi_signature", $P211
.annotate 'line', 1102
    .const 'Sub' $P212 = "22_1300057363.399" 
    newclosure $P237, $P212
    .lex "is_lexical", $P237
.annotate 'line', 1310
    .const 'Sub' $P238 = "24_1300057363.399" 
    newclosure $P249, $P238
    .lex "control", $P249
.annotate 'line', 1
    get_global $P250, "@BLOCK"
    .const 'Sub' $P252 = "25_1300057363.399" 
    capture_lex $P252
    $P252()
    find_lex $P257, "xblock_immediate"
    find_lex $P258, "block_immediate"
    find_lex $P259, "vivitype"
.annotate 'line', 35
    find_lex $P298, "colonpair_str"
.annotate 'line', 256
    find_lex $P755, "push_block_handler"
.annotate 'line', 733
    find_lex $P1886, "only_star_block"
    find_lex $P1887, "attach_multi_signature"
.annotate 'line', 1080
    find_lex $P2438, "is_lexical"
.annotate 'line', 1301
    find_lex $P2960, "control"
.annotate 'line', 1323
    .const 'Sub' $P2976 = "162_1300057363.399" 
    newclosure $P2984, $P2976
.annotate 'line', 1
    .return ($P2984)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "" :load :init :subid("post175") :outer("11_1300057363.399")
.annotate 'line', 1
    get_hll_global $P14, ["NQP";"Actions"], "_block13" 
    .local pmc block
    set block, $P14
    .const 'Sub' $P2986 = "163_1300057363.399" 
    capture_lex $P2986
    $P2986()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2985"  :anon :subid("163_1300057363.399") :outer("11_1300057363.399")
.annotate 'line', 1
    nqp_get_sc_object $P2987, "1300057352.665", 0
    .local pmc type_obj
    set type_obj, $P2987
    set_global "$?CLASS", type_obj
    get_how $P2988, type_obj
    .const 'Sub' $P2989 = "27_1300057363.399" 
    $P2988."add_method"(type_obj, "TOP", $P2989)
    get_how $P2990, type_obj
    .const 'Sub' $P2991 = "28_1300057363.399" 
    $P2990."add_method"(type_obj, "deflongname", $P2991)
    get_how $P2992, type_obj
    .const 'Sub' $P2993 = "29_1300057363.399" 
    $P2992."add_method"(type_obj, "comp_unit", $P2993)
    get_how $P2994, type_obj
    .const 'Sub' $P2995 = "30_1300057363.399" 
    $P2994."add_method"(type_obj, "statementlist", $P2995)
    get_how $P2996, type_obj
    .const 'Sub' $P2997 = "32_1300057363.399" 
    $P2996."add_method"(type_obj, "statement", $P2997)
    get_how $P2998, type_obj
    .const 'Sub' $P2999 = "34_1300057363.399" 
    $P2998."add_method"(type_obj, "xblock", $P2999)
    get_how $P3000, type_obj
    .const 'Sub' $P3001 = "35_1300057363.399" 
    $P3000."add_method"(type_obj, "pblock", $P3001)
    get_how $P3002, type_obj
    .const 'Sub' $P3003 = "36_1300057363.399" 
    $P3002."add_method"(type_obj, "block", $P3003)
    get_how $P3004, type_obj
    .const 'Sub' $P3005 = "37_1300057363.399" 
    $P3004."add_method"(type_obj, "blockoid", $P3005)
    get_how $P3006, type_obj
    .const 'Sub' $P3007 = "39_1300057363.399" 
    $P3006."add_method"(type_obj, "newpad", $P3007)
    get_how $P3008, type_obj
    .const 'Sub' $P3009 = "40_1300057363.399" 
    $P3008."add_method"(type_obj, "outerctx", $P3009)
    get_how $P3010, type_obj
    .const 'Sub' $P3011 = "41_1300057363.399" 
    $P3010."add_method"(type_obj, "you_are_here", $P3011)
    get_how $P3012, type_obj
    .const 'Sub' $P3013 = "42_1300057363.399" 
    $P3012."add_method"(type_obj, "statement_control:sym<use>", $P3013)
    get_how $P3014, type_obj
    .const 'Sub' $P3015 = "43_1300057363.399" 
    $P3014."add_method"(type_obj, "statement_control:sym<if>", $P3015)
    get_how $P3016, type_obj
    .const 'Sub' $P3017 = "45_1300057363.399" 
    $P3016."add_method"(type_obj, "statement_control:sym<unless>", $P3017)
    get_how $P3018, type_obj
    .const 'Sub' $P3019 = "46_1300057363.399" 
    $P3018."add_method"(type_obj, "statement_control:sym<while>", $P3019)
    get_how $P3020, type_obj
    .const 'Sub' $P3021 = "47_1300057363.399" 
    $P3020."add_method"(type_obj, "statement_control:sym<repeat>", $P3021)
    get_how $P3022, type_obj
    .const 'Sub' $P3023 = "48_1300057363.399" 
    $P3022."add_method"(type_obj, "statement_control:sym<for>", $P3023)
    get_how $P3024, type_obj
    .const 'Sub' $P3025 = "49_1300057363.399" 
    $P3024."add_method"(type_obj, "statement_control:sym<CATCH>", $P3025)
    get_how $P3026, type_obj
    .const 'Sub' $P3027 = "50_1300057363.399" 
    $P3026."add_method"(type_obj, "statement_control:sym<CONTROL>", $P3027)
    get_how $P3028, type_obj
    .const 'Sub' $P3029 = "51_1300057363.399" 
    $P3028."add_method"(type_obj, "statement_prefix:sym<INIT>", $P3029)
    get_how $P3030, type_obj
    .const 'Sub' $P3031 = "52_1300057363.399" 
    $P3030."add_method"(type_obj, "statement_prefix:sym<try>", $P3031)
    get_how $P3032, type_obj
    .const 'Sub' $P3033 = "53_1300057363.399" 
    $P3032."add_method"(type_obj, "blorst", $P3033)
    get_how $P3034, type_obj
    .const 'Sub' $P3035 = "54_1300057363.399" 
    $P3034."add_method"(type_obj, "statement_mod_cond:sym<if>", $P3035)
    get_how $P3036, type_obj
    .const 'Sub' $P3037 = "55_1300057363.399" 
    $P3036."add_method"(type_obj, "statement_mod_cond:sym<unless>", $P3037)
    get_how $P3038, type_obj
    .const 'Sub' $P3039 = "56_1300057363.399" 
    $P3038."add_method"(type_obj, "statement_mod_loop:sym<while>", $P3039)
    get_how $P3040, type_obj
    .const 'Sub' $P3041 = "57_1300057363.399" 
    $P3040."add_method"(type_obj, "statement_mod_loop:sym<until>", $P3041)
    get_how $P3042, type_obj
    .const 'Sub' $P3043 = "58_1300057363.399" 
    $P3042."add_method"(type_obj, "term:sym<fatarrow>", $P3043)
    get_how $P3044, type_obj
    .const 'Sub' $P3045 = "59_1300057363.399" 
    $P3044."add_method"(type_obj, "term:sym<colonpair>", $P3045)
    get_how $P3046, type_obj
    .const 'Sub' $P3047 = "60_1300057363.399" 
    $P3046."add_method"(type_obj, "term:sym<variable>", $P3047)
    get_how $P3048, type_obj
    .const 'Sub' $P3049 = "61_1300057363.399" 
    $P3048."add_method"(type_obj, "term:sym<package_declarator>", $P3049)
    get_how $P3050, type_obj
    .const 'Sub' $P3051 = "62_1300057363.399" 
    $P3050."add_method"(type_obj, "term:sym<scope_declarator>", $P3051)
    get_how $P3052, type_obj
    .const 'Sub' $P3053 = "63_1300057363.399" 
    $P3052."add_method"(type_obj, "term:sym<routine_declarator>", $P3053)
    get_how $P3054, type_obj
    .const 'Sub' $P3055 = "64_1300057363.399" 
    $P3054."add_method"(type_obj, "term:sym<regex_declarator>", $P3055)
    get_how $P3056, type_obj
    .const 'Sub' $P3057 = "65_1300057363.399" 
    $P3056."add_method"(type_obj, "term:sym<statement_prefix>", $P3057)
    get_how $P3058, type_obj
    .const 'Sub' $P3059 = "66_1300057363.399" 
    $P3058."add_method"(type_obj, "term:sym<lambda>", $P3059)
    get_how $P3060, type_obj
    .const 'Sub' $P3061 = "67_1300057363.399" 
    $P3060."add_method"(type_obj, "fatarrow", $P3061)
    get_how $P3062, type_obj
    .const 'Sub' $P3063 = "68_1300057363.399" 
    $P3062."add_method"(type_obj, "colonpair", $P3063)
    get_how $P3064, type_obj
    .const 'Sub' $P3065 = "69_1300057363.399" 
    $P3064."add_method"(type_obj, "variable", $P3065)
    get_how $P3066, type_obj
    .const 'Sub' $P3067 = "71_1300057363.399" 
    $P3066."add_method"(type_obj, "package_declarator:sym<module>", $P3067)
    get_how $P3068, type_obj
    .const 'Sub' $P3069 = "72_1300057363.399" 
    $P3068."add_method"(type_obj, "package_declarator:sym<knowhow>", $P3069)
    get_how $P3070, type_obj
    .const 'Sub' $P3071 = "73_1300057363.399" 
    $P3070."add_method"(type_obj, "package_declarator:sym<class>", $P3071)
    get_how $P3072, type_obj
    .const 'Sub' $P3073 = "74_1300057363.399" 
    $P3072."add_method"(type_obj, "package_declarator:sym<grammar>", $P3073)
    get_how $P3074, type_obj
    .const 'Sub' $P3075 = "75_1300057363.399" 
    $P3074."add_method"(type_obj, "package_declarator:sym<role>", $P3075)
    get_how $P3076, type_obj
    .const 'Sub' $P3077 = "76_1300057363.399" 
    $P3076."add_method"(type_obj, "package_declarator:sym<native>", $P3077)
    get_how $P3078, type_obj
    .const 'Sub' $P3079 = "77_1300057363.399" 
    $P3078."add_method"(type_obj, "package_def", $P3079)
    get_how $P3080, type_obj
    .const 'Sub' $P3081 = "80_1300057363.399" 
    $P3080."add_method"(type_obj, "scope_declarator:sym<my>", $P3081)
    get_how $P3082, type_obj
    .const 'Sub' $P3083 = "81_1300057363.399" 
    $P3082."add_method"(type_obj, "scope_declarator:sym<our>", $P3083)
    get_how $P3084, type_obj
    .const 'Sub' $P3085 = "82_1300057363.399" 
    $P3084."add_method"(type_obj, "scope_declarator:sym<has>", $P3085)
    get_how $P3086, type_obj
    .const 'Sub' $P3087 = "83_1300057363.399" 
    $P3086."add_method"(type_obj, "scoped", $P3087)
    get_how $P3088, type_obj
    .const 'Sub' $P3089 = "84_1300057363.399" 
    $P3088."add_method"(type_obj, "declarator", $P3089)
    get_how $P3090, type_obj
    .const 'Sub' $P3091 = "85_1300057363.399" 
    $P3090."add_method"(type_obj, "multi_declarator:sym<multi>", $P3091)
    get_how $P3092, type_obj
    .const 'Sub' $P3093 = "86_1300057363.399" 
    $P3092."add_method"(type_obj, "multi_declarator:sym<proto>", $P3093)
    get_how $P3094, type_obj
    .const 'Sub' $P3095 = "87_1300057363.399" 
    $P3094."add_method"(type_obj, "multi_declarator:sym<null>", $P3095)
    get_how $P3096, type_obj
    .const 'Sub' $P3097 = "88_1300057363.399" 
    $P3096."add_method"(type_obj, "variable_declarator", $P3097)
    get_how $P3098, type_obj
    .const 'Sub' $P3099 = "92_1300057363.399" 
    $P3098."add_method"(type_obj, "routine_declarator:sym<sub>", $P3099)
    get_how $P3100, type_obj
    .const 'Sub' $P3101 = "93_1300057363.399" 
    $P3100."add_method"(type_obj, "routine_declarator:sym<method>", $P3101)
    get_how $P3102, type_obj
    .const 'Sub' $P3103 = "94_1300057363.399" 
    $P3102."add_method"(type_obj, "routine_def", $P3103)
    get_how $P3104, type_obj
    .const 'Sub' $P3105 = "101_1300057363.399" 
    $P3104."add_method"(type_obj, "method_def", $P3105)
    get_how $P3106, type_obj
    .const 'Sub' $P3107 = "104_1300057363.399" 
    $P3106."add_method"(type_obj, "signature", $P3107)
    get_how $P3108, type_obj
    .const 'Sub' $P3109 = "107_1300057363.399" 
    $P3108."add_method"(type_obj, "parameter", $P3109)
    get_how $P3110, type_obj
    .const 'Sub' $P3111 = "108_1300057363.399" 
    $P3110."add_method"(type_obj, "param_var", $P3111)
    get_how $P3112, type_obj
    .const 'Sub' $P3113 = "109_1300057363.399" 
    $P3112."add_method"(type_obj, "named_param", $P3113)
    get_how $P3114, type_obj
    .const 'Sub' $P3115 = "110_1300057363.399" 
    $P3114."add_method"(type_obj, "typename", $P3115)
    get_how $P3116, type_obj
    .const 'Sub' $P3117 = "111_1300057363.399" 
    $P3116."add_method"(type_obj, "trait", $P3117)
    get_how $P3118, type_obj
    .const 'Sub' $P3119 = "112_1300057363.399" 
    $P3118."add_method"(type_obj, "trait_mod:sym<is>", $P3119)
    get_how $P3120, type_obj
    .const 'Sub' $P3121 = "114_1300057363.399" 
    $P3120."add_method"(type_obj, "regex_declarator", $P3121)
    get_how $P3122, type_obj
    .const 'Sub' $P3123 = "118_1300057363.399" 
    $P3122."add_method"(type_obj, "dotty", $P3123)
    get_how $P3124, type_obj
    .const 'Sub' $P3125 = "119_1300057363.399" 
    $P3124."add_method"(type_obj, "term:sym<self>", $P3125)
    get_how $P3126, type_obj
    .const 'Sub' $P3127 = "120_1300057363.399" 
    $P3126."add_method"(type_obj, "term:sym<identifier>", $P3127)
    get_how $P3128, type_obj
    .const 'Sub' $P3129 = "121_1300057363.399" 
    $P3128."add_method"(type_obj, "term:sym<name>", $P3129)
    get_how $P3130, type_obj
    .const 'Sub' $P3131 = "123_1300057363.399" 
    $P3130."add_method"(type_obj, "term:sym<pir::op>", $P3131)
    get_how $P3132, type_obj
    .const 'Sub' $P3133 = "124_1300057363.399" 
    $P3132."add_method"(type_obj, "term:sym<onlystar>", $P3133)
    get_how $P3134, type_obj
    .const 'Sub' $P3135 = "125_1300057363.399" 
    $P3134."add_method"(type_obj, "args", $P3135)
    get_how $P3136, type_obj
    .const 'Sub' $P3137 = "126_1300057363.399" 
    $P3136."add_method"(type_obj, "arglist", $P3137)
    get_how $P3138, type_obj
    .const 'Sub' $P3139 = "129_1300057363.399" 
    $P3138."add_method"(type_obj, "term:sym<multi_declarator>", $P3139)
    get_how $P3140, type_obj
    .const 'Sub' $P3141 = "130_1300057363.399" 
    $P3140."add_method"(type_obj, "term:sym<value>", $P3141)
    get_how $P3142, type_obj
    .const 'Sub' $P3143 = "131_1300057363.399" 
    $P3142."add_method"(type_obj, "circumfix:sym<( )>", $P3143)
    get_how $P3144, type_obj
    .const 'Sub' $P3145 = "132_1300057363.399" 
    $P3144."add_method"(type_obj, "circumfix:sym<[ ]>", $P3145)
    get_how $P3146, type_obj
    .const 'Sub' $P3147 = "133_1300057363.399" 
    $P3146."add_method"(type_obj, "circumfix:sym<ang>", $P3147)
    get_how $P3148, type_obj
    .const 'Sub' $P3149 = "134_1300057363.399" 
    $P3148."add_method"(type_obj, unicode:"circumfix:sym<\x{ab} \x{bb}>", $P3149)
    get_how $P3150, type_obj
    .const 'Sub' $P3151 = "135_1300057363.399" 
    $P3150."add_method"(type_obj, "circumfix:sym<{ }>", $P3151)
    get_how $P3152, type_obj
    .const 'Sub' $P3153 = "137_1300057363.399" 
    $P3152."add_method"(type_obj, "circumfix:sym<sigil>", $P3153)
    get_how $P3154, type_obj
    .const 'Sub' $P3155 = "138_1300057363.399" 
    $P3154."add_method"(type_obj, "semilist", $P3155)
    get_how $P3156, type_obj
    .const 'Sub' $P3157 = "139_1300057363.399" 
    $P3156."add_method"(type_obj, "postcircumfix:sym<[ ]>", $P3157)
    get_how $P3158, type_obj
    .const 'Sub' $P3159 = "140_1300057363.399" 
    $P3158."add_method"(type_obj, "postcircumfix:sym<{ }>", $P3159)
    get_how $P3160, type_obj
    .const 'Sub' $P3161 = "141_1300057363.399" 
    $P3160."add_method"(type_obj, "postcircumfix:sym<ang>", $P3161)
    get_how $P3162, type_obj
    .const 'Sub' $P3163 = "142_1300057363.399" 
    $P3162."add_method"(type_obj, "postcircumfix:sym<( )>", $P3163)
    get_how $P3164, type_obj
    .const 'Sub' $P3165 = "143_1300057363.399" 
    $P3164."add_method"(type_obj, "value", $P3165)
    get_how $P3166, type_obj
    .const 'Sub' $P3167 = "144_1300057363.399" 
    $P3166."add_method"(type_obj, "number", $P3167)
    get_how $P3168, type_obj
    .const 'Sub' $P3169 = "145_1300057363.399" 
    $P3168."add_method"(type_obj, "quote:sym<apos>", $P3169)
    get_how $P3170, type_obj
    .const 'Sub' $P3171 = "146_1300057363.399" 
    $P3170."add_method"(type_obj, "quote:sym<dblq>", $P3171)
    get_how $P3172, type_obj
    .const 'Sub' $P3173 = "147_1300057363.399" 
    $P3172."add_method"(type_obj, "quote:sym<qq>", $P3173)
    get_how $P3174, type_obj
    .const 'Sub' $P3175 = "148_1300057363.399" 
    $P3174."add_method"(type_obj, "quote:sym<q>", $P3175)
    get_how $P3176, type_obj
    .const 'Sub' $P3177 = "149_1300057363.399" 
    $P3176."add_method"(type_obj, "quote:sym<Q>", $P3177)
    get_how $P3178, type_obj
    .const 'Sub' $P3179 = "150_1300057363.399" 
    $P3178."add_method"(type_obj, "quote:sym<Q:PIR>", $P3179)
    get_how $P3180, type_obj
    .const 'Sub' $P3181 = "151_1300057363.399" 
    $P3180."add_method"(type_obj, "quote:sym</ />", $P3181)
    get_how $P3182, type_obj
    .const 'Sub' $P3183 = "152_1300057363.399" 
    $P3182."add_method"(type_obj, "quote_escape:sym<$>", $P3183)
    get_how $P3184, type_obj
    .const 'Sub' $P3185 = "153_1300057363.399" 
    $P3184."add_method"(type_obj, "quote_escape:sym<{ }>", $P3185)
    get_how $P3186, type_obj
    .const 'Sub' $P3187 = "154_1300057363.399" 
    $P3186."add_method"(type_obj, "quote_escape:sym<esc>", $P3187)
    get_how $P3188, type_obj
    .const 'Sub' $P3189 = "155_1300057363.399" 
    $P3188."add_method"(type_obj, "postfix:sym<.>", $P3189)
    get_how $P3190, type_obj
    .const 'Sub' $P3191 = "156_1300057363.399" 
    $P3190."add_method"(type_obj, "postfix:sym<++>", $P3191)
    get_how $P3192, type_obj
    .const 'Sub' $P3193 = "157_1300057363.399" 
    $P3192."add_method"(type_obj, "postfix:sym<-->", $P3193)
    get_how $P3194, type_obj
    .const 'Sub' $P3195 = "158_1300057363.399" 
    $P3194."add_method"(type_obj, "prefix:sym<make>", $P3195)
    get_how $P3196, type_obj
    .const 'Sub' $P3197 = "159_1300057363.399" 
    $P3196."add_method"(type_obj, "term:sym<next>", $P3197)
    get_how $P3198, type_obj
    .const 'Sub' $P3199 = "160_1300057363.399" 
    $P3198."add_method"(type_obj, "term:sym<last>", $P3199)
    get_how $P3200, type_obj
    .const 'Sub' $P3201 = "161_1300057363.399" 
    $P3200."add_method"(type_obj, "term:sym<redo>", $P3201)
    get_how $P3202, type_obj
    .const 'Sub' $P3203 = "162_1300057363.399" 
    $P3202."add_method"(type_obj, "infix:sym<~~>", $P3203)
    get_how $P3204, type_obj
    get_hll_global $P3205, ["HLL"], "Actions"
    $P3204."add_parent"(type_obj, $P3205)
    get_how $P3206, type_obj
    $P3207 = $P3206."compose"(type_obj)
    .return ($P3207)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock_immediate"  :subid("12_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_18
.annotate 'line', 9
    .lex "$xblock", param_18
.annotate 'line', 10
    find_lex $P19, "$xblock"
    unless_null $P19, vivify_177
    $P19 = root_new ['parrot';'ResizablePMCArray']
  vivify_177:
    set $P20, $P19[1]
    unless_null $P20, vivify_178
    new $P20, "Undef"
  vivify_178:
    $P21 = "block_immediate"($P20)
    find_lex $P22, "$xblock"
    unless_null $P22, vivify_179
    $P22 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$xblock", $P22
  vivify_179:
    set $P22[1], $P21
    find_lex $P23, "$xblock"
.annotate 'line', 9
    .return ($P23)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block_immediate"  :subid("13_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_26
.annotate 'line', 14
    .const 'Sub' $P36 = "14_1300057363.399" 
    capture_lex $P36
    .lex "$block", param_26
.annotate 'line', 15
    find_lex $P27, "$block"
    $P27."blocktype"("immediate")
.annotate 'line', 16
    find_lex $P31, "$block"
    $P32 = $P31."symtable"()
    unless $P32, unless_30
    set $P29, $P32
    goto unless_30_end
  unless_30:
    find_lex $P33, "$block"
    $P34 = $P33."handlers"()
    set $P29, $P34
  unless_30_end:
    if $P29, unless_28_end
    .const 'Sub' $P36 = "14_1300057363.399" 
    capture_lex $P36
    $P36()
  unless_28_end:
    find_lex $P56, "$block"
.annotate 'line', 14
    .return ($P56)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block35"  :anon :subid("14_1300057363.399") :outer("13_1300057363.399")
.annotate 'line', 16
    .const 'Sub' $P47 = "15_1300057363.399" 
    capture_lex $P47
.annotate 'line', 17
    new $P37, "Undef"
    .lex "$stmts", $P37
    get_hll_global $P38, ["PAST"], "Stmts"
    find_lex $P39, "$block"
    $P40 = $P38."new"($P39 :named("node"))
    store_lex "$stmts", $P40
.annotate 'line', 18
    find_lex $P42, "$block"
    $P43 = $P42."list"()
    defined $I44, $P43
    unless $I44, for_undef_180
    iter $P41, $P43
    new $P53, 'ExceptionHandler'
    set_label $P53, loop52_handler
    $P53."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P53
  loop52_test:
    unless $P41, loop52_done
    shift $P45, $P41
  loop52_redo:
    .const 'Sub' $P47 = "15_1300057363.399" 
    capture_lex $P47
    $P47($P45)
  loop52_next:
    goto loop52_test
  loop52_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P54, exception, 'type'
    eq $P54, .CONTROL_LOOP_NEXT, loop52_next
    eq $P54, .CONTROL_LOOP_REDO, loop52_redo
  loop52_done:
    pop_eh 
  for_undef_180:
.annotate 'line', 19
    find_lex $P55, "$stmts"
    store_lex "$block", $P55
.annotate 'line', 16
    .return ($P55)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block46"  :anon :subid("15_1300057363.399") :outer("14_1300057363.399")
    .param pmc param_48
.annotate 'line', 18
    .lex "$_", param_48
    find_lex $P49, "$stmts"
    find_lex $P50, "$_"
    $P51 = $P49."push"($P50)
    .return ($P51)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "vivitype"  :subid("16_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_59
.annotate 'line', 24
    .lex "$sigil", param_59
.annotate 'line', 25
    find_lex $P62, "$sigil"
    set $S63, $P62
    iseq $I64, $S63, "%"
    if $I64, if_61
.annotate 'line', 27
    find_lex $P69, "$sigil"
    set $S70, $P69
    iseq $I71, $S70, "@"
    if $I71, if_68
    new $P74, "String"
    assign $P74, "Undef"
    set $P67, $P74
    goto if_68_end
  if_68:
.annotate 'line', 28
    get_hll_global $P72, ["PAST"], "Op"
    $P73 = $P72."new"("    %r = root_new ['parrot';'ResizablePMCArray']" :named("inline"))
    set $P67, $P73
  if_68_end:
    set $P60, $P67
.annotate 'line', 25
    goto if_61_end
  if_61:
.annotate 'line', 26
    get_hll_global $P65, ["PAST"], "Op"
    $P66 = $P65."new"("    %r = root_new ['parrot';'Hash']" :named("inline"))
    set $P60, $P66
  if_61_end:
.annotate 'line', 24
    .return ($P60)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair_str"  :subid("17_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_77
.annotate 'line', 43
    .lex "$ast", param_77
.annotate 'line', 44
    get_hll_global $P80, ["PAST"], "Op"
    find_lex $P81, "$ast"
    $P82 = $P80."ACCEPTS"($P81)
    if $P82, if_79
.annotate 'line', 46
    find_lex $P86, "$ast"
    $P87 = $P86."value"()
    set $P78, $P87
.annotate 'line', 44
    goto if_79_end
  if_79:
.annotate 'line', 45
    find_lex $P83, "$ast"
    $P84 = $P83."list"()
    join $S85, " ", $P84
    new $P78, 'String'
    set $P78, $S85
  if_79_end:
.annotate 'line', 43
    .return ($P78)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "push_block_handler"  :subid("18_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_90
    .param pmc param_91
.annotate 'line', 263
    .lex "$/", param_90
    .lex "$block", param_91
.annotate 'line', 264
    get_global $P93, "@BLOCK"
    unless_null $P93, vivify_181
    $P93 = root_new ['parrot';'ResizablePMCArray']
  vivify_181:
    set $P94, $P93[0]
    unless_null $P94, vivify_182
    new $P94, "Undef"
  vivify_182:
    $P95 = $P94."handlers"()
    if $P95, unless_92_end
.annotate 'line', 265
    get_global $P96, "@BLOCK"
    unless_null $P96, vivify_183
    $P96 = root_new ['parrot';'ResizablePMCArray']
  vivify_183:
    set $P97, $P96[0]
    unless_null $P97, vivify_184
    new $P97, "Undef"
  vivify_184:
    new $P98, "ResizablePMCArray"
    $P97."handlers"($P98)
  unless_92_end:
.annotate 'line', 267
    find_lex $P100, "$block"
    $P101 = $P100."arity"()
    if $P101, unless_99_end
.annotate 'line', 268
    find_lex $P102, "$block"
.annotate 'line', 269
    get_hll_global $P103, ["PAST"], "Op"
.annotate 'line', 270
    get_hll_global $P104, ["PAST"], "Var"
    $P105 = $P104."new"("lexical" :named("scope"), "$!" :named("name"), 1 :named("isdecl"))
.annotate 'line', 271
    get_hll_global $P106, ["PAST"], "Var"
    $P107 = $P106."new"("lexical" :named("scope"), "$_" :named("name"))
    $P108 = $P103."new"($P105, $P107, "bind" :named("pasttype"))
.annotate 'line', 269
    $P102."unshift"($P108)
.annotate 'line', 274
    find_lex $P109, "$block"
    get_hll_global $P110, ["PAST"], "Var"
    $P111 = $P110."new"("$_" :named("name"), "parameter" :named("scope"))
    $P109."unshift"($P111)
.annotate 'line', 275
    find_lex $P112, "$block"
    $P112."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 276
    find_lex $P113, "$block"
    $P113."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 277
    find_lex $P114, "$block"
    $P114."arity"(1)
  unless_99_end:
.annotate 'line', 279
    find_lex $P115, "$block"
    $P115."blocktype"("declaration")
.annotate 'line', 280
    get_global $P116, "@BLOCK"
    unless_null $P116, vivify_185
    $P116 = root_new ['parrot';'ResizablePMCArray']
  vivify_185:
    set $P117, $P116[0]
    unless_null $P117, vivify_186
    new $P117, "Undef"
  vivify_186:
    $P118 = $P117."handlers"()
.annotate 'line', 281
    get_hll_global $P119, ["PAST"], "Control"
    find_lex $P120, "$/"
.annotate 'line', 283
    get_hll_global $P121, ["PAST"], "Stmts"
.annotate 'line', 284
    get_hll_global $P122, ["PAST"], "Op"
    find_lex $P123, "$block"
.annotate 'line', 286
    get_hll_global $P124, ["PAST"], "Var"
    $P125 = $P124."new"("register" :named("scope"), "exception" :named("name"))
    $P126 = $P122."new"($P123, $P125, "call" :named("pasttype"))
.annotate 'line', 288
    get_hll_global $P127, ["PAST"], "Op"
.annotate 'line', 289
    get_hll_global $P128, ["PAST"], "Var"
.annotate 'line', 290
    get_hll_global $P129, ["PAST"], "Var"
    $P130 = $P129."new"("register" :named("scope"), "exception" :named("name"))
    $P131 = $P128."new"($P130, "handled", "keyed" :named("scope"))
.annotate 'line', 289
    $P132 = $P127."new"($P131, 1, "bind" :named("pasttype"))
.annotate 'line', 288
    $P133 = $P121."new"($P126, $P132)
.annotate 'line', 283
    $P134 = $P119."new"($P133, $P120 :named("node"))
.annotate 'line', 281
    $P135 = $P118."unshift"($P134)
.annotate 'line', 263
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "only_star_block"  :subid("19_1300057363.399") :outer("11_1300057363.399")
.annotate 'line', 806
    new $P138, "Undef"
    .lex "$past", $P138
    get_global $P139, "@BLOCK"
    $P140 = $P139."shift"()
    store_lex "$past", $P140
.annotate 'line', 807
    find_lex $P141, "$past"
    $P141."closure"(1)
.annotate 'line', 808
    find_lex $P142, "$past"
    get_hll_global $P143, ["PAST"], "Op"
    $P144 = $P143."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P142."push"($P144)
    find_lex $P145, "$past"
.annotate 'line', 805
    .return ($P145)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature"  :subid("20_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_148
.annotate 'line', 814
    .const 'Sub' $P162 = "21_1300057363.399" 
    capture_lex $P162
    .lex "$routine", param_148
.annotate 'line', 818
    new $P149, "Undef"
    .lex "$types", $P149
.annotate 'line', 819
    new $P150, "Undef"
    .lex "$definednesses", $P150
.annotate 'line', 818
    get_hll_global $P151, ["PAST"], "Op"
    $P152 = $P151."new"("list" :named("pasttype"))
    store_lex "$types", $P152
.annotate 'line', 819
    get_hll_global $P153, ["PAST"], "Op"
    $P154 = $P153."new"("list" :named("pasttype"))
    store_lex "$definednesses", $P154
.annotate 'line', 820
    find_lex $P156, "$routine"
    unless_null $P156, vivify_187
    $P156 = root_new ['parrot';'ResizablePMCArray']
  vivify_187:
    set $P157, $P156[0]
    unless_null $P157, vivify_188
    new $P157, "Undef"
  vivify_188:
    $P158 = $P157."list"()
    defined $I159, $P158
    unless $I159, for_undef_189
    iter $P155, $P158
    new $P200, 'ExceptionHandler'
    set_label $P200, loop199_handler
    $P200."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P200
  loop199_test:
    unless $P155, loop199_done
    shift $P160, $P155
  loop199_redo:
    .const 'Sub' $P162 = "21_1300057363.399" 
    capture_lex $P162
    $P162($P160)
  loop199_next:
    goto loop199_test
  loop199_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P201, exception, 'type'
    eq $P201, .CONTROL_LOOP_NEXT, loop199_next
    eq $P201, .CONTROL_LOOP_REDO, loop199_redo
  loop199_done:
    pop_eh 
  for_undef_189:
.annotate 'line', 827
    find_lex $P202, "$routine"
    $P203 = $P202."loadinit"()
    get_hll_global $P204, ["PAST"], "Op"
.annotate 'line', 828
    get_hll_global $P205, ["PAST"], "Var"
    $P206 = $P205."new"("block" :named("name"), "register" :named("scope"))
    find_lex $P207, "$types"
    find_lex $P208, "$definednesses"
    $P209 = $P204."new"($P206, $P207, $P208, "set_sub_multisig vPPP" :named("pirop"))
.annotate 'line', 827
    $P210 = $P203."push"($P209)
.annotate 'line', 814
    .return ($P210)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block161"  :anon :subid("21_1300057363.399") :outer("20_1300057363.399")
    .param pmc param_163
.annotate 'line', 820
    .lex "$_", param_163
.annotate 'line', 821
    get_hll_global $P168, ["PAST"], "Var"
    find_lex $P169, "$_"
    $P170 = $P168."ACCEPTS"($P169)
    if $P170, if_167
    set $P166, $P170
    goto if_167_end
  if_167:
    find_lex $P171, "$_"
    $S172 = $P171."scope"()
    iseq $I173, $S172, "parameter"
    new $P166, 'Integer'
    set $P166, $I173
  if_167_end:
    if $P166, if_165
    set $P164, $P166
    goto if_165_end
  if_165:
.annotate 'line', 822
    find_lex $P174, "$types"
    find_lex $P176, "$_"
    $P177 = $P176."multitype"()
    set $P175, $P177
    defined $I179, $P175
    if $I179, default_178
    get_hll_global $P180, ["PAST"], "Op"
    $P181 = $P180."new"("null P" :named("pirop"))
    set $P175, $P181
  default_178:
    $P174."push"($P175)
.annotate 'line', 823
    find_lex $P182, "$definednesses"
    find_lex $P185, "$_"
    unless_null $P185, vivify_190
    $P185 = root_new ['parrot';'Hash']
  vivify_190:
    set $P186, $P185["definedness"]
    unless_null $P186, vivify_191
    new $P186, "Undef"
  vivify_191:
    set $S187, $P186
    iseq $I188, $S187, "D"
    if $I188, if_184
.annotate 'line', 824
    find_lex $P192, "$_"
    unless_null $P192, vivify_192
    $P192 = root_new ['parrot';'Hash']
  vivify_192:
    set $P193, $P192["definedness"]
    unless_null $P193, vivify_193
    new $P193, "Undef"
  vivify_193:
    set $S194, $P193
    iseq $I195, $S194, "U"
    if $I195, if_191
    new $P197, "Integer"
    assign $P197, 0
    set $P190, $P197
    goto if_191_end
  if_191:
    new $P196, "Integer"
    assign $P196, 2
    set $P190, $P196
  if_191_end:
    set $P183, $P190
.annotate 'line', 823
    goto if_184_end
  if_184:
    new $P189, "Integer"
    assign $P189, 1
    set $P183, $P189
  if_184_end:
    $P198 = $P182."push"($P183)
.annotate 'line', 821
    set $P164, $P198
  if_165_end:
.annotate 'line', 820
    .return ($P164)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "is_lexical"  :subid("22_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_215
.annotate 'line', 1102
    .const 'Sub' $P221 = "23_1300057363.399" 
    capture_lex $P221
    new $P214, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P214, control_213
    push_eh $P214
    .lex "$name", param_215
.annotate 'line', 1103
    get_global $P217, "@BLOCK"
    defined $I218, $P217
    unless $I218, for_undef_194
    iter $P216, $P217
    new $P234, 'ExceptionHandler'
    set_label $P234, loop233_handler
    $P234."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P234
  loop233_test:
    unless $P216, loop233_done
    shift $P219, $P216
  loop233_redo:
    .const 'Sub' $P221 = "23_1300057363.399" 
    capture_lex $P221
    $P221($P219)
  loop233_next:
    goto loop233_test
  loop233_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P235, exception, 'type'
    eq $P235, .CONTROL_LOOP_NEXT, loop233_next
    eq $P235, .CONTROL_LOOP_REDO, loop233_redo
  loop233_done:
    pop_eh 
  for_undef_194:
.annotate 'line', 1102
    .return (0)
  control_213:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P236, exception, "payload"
    .return ($P236)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block220"  :anon :subid("23_1300057363.399") :outer("22_1300057363.399")
    .param pmc param_223
.annotate 'line', 1104
    $P222 = root_new ['parrot';'Hash']
    .lex "%sym", $P222
    .lex "$_", param_223
    find_lex $P224, "$_"
    find_lex $P225, "$name"
    $P226 = $P224."symbol"($P225)
    store_lex "%sym", $P226
.annotate 'line', 1105
    find_lex $P229, "%sym"
    set $N230, $P229
    if $N230, if_228
    new $P227, 'Float'
    set $P227, $N230
    goto if_228_end
  if_228:
.annotate 'line', 1106
    new $P231, "Exception"
    set $P231['type'], .CONTROL_RETURN
    new $P232, "Integer"
    assign $P232, 1
    setattribute $P231, 'payload', $P232
    throw $P231
  if_228_end:
.annotate 'line', 1103
    .return ($P227)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "control"  :subid("24_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_239
    .param pmc param_240
.annotate 'line', 1310
    .lex "$/", param_239
    .lex "$type", param_240
.annotate 'line', 1311
    find_lex $P241, "$/"
    get_hll_global $P242, ["PAST"], "Op"
    find_lex $P243, "$/"
.annotate 'line', 1315
    get_hll_global $P244, ["PAST"], "Val"
    find_lex $P245, "$type"
    $P246 = $P244."new"($P245 :named("value"), "!except_types" :named("returns"))
    $P247 = $P242."new"(0, $P246, $P243 :named("node"), "die__vii" :named("pirop"))
.annotate 'line', 1311
    $P248 = $P241."!make"($P247)
.annotate 'line', 1310
    .return ($P248)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block251"  :anon :subid("25_1300057363.399") :outer("11_1300057363.399")
.annotate 'line', 1
    .const 'Sub' $P254 = "26_1300057363.399" 
    capture_lex $P254
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "" :load :init :subid("post195") :outer("25_1300057363.399")
.annotate 'line', 1
    .const 'Sub' $P252 = "25_1300057363.399" 
    .local pmc block
    set block, $P252
.annotate 'line', 5
    .const 'Sub' $P254 = "26_1300057363.399" 
    capture_lex $P254
    $P254()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block253"  :anon :subid("26_1300057363.399") :outer("25_1300057363.399")
.annotate 'line', 6
    get_global $P255, "@BLOCK"
    unless_null $P255, vivify_196
    $P255 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P255
  vivify_196:
 $P256 = new ['ResizablePMCArray'] 
    set_global "@BLOCK", $P256
.annotate 'line', 5
    .return ($P256)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "TOP"  :subid("27_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_261
    .param pmc param_262
.annotate 'line', 33
    .lex "self", param_261
    .lex "$/", param_262
    find_lex $P263, "$/"
    find_lex $P264, "$/"
    unless_null $P264, vivify_197
    $P264 = root_new ['parrot';'Hash']
  vivify_197:
    set $P265, $P264["comp_unit"]
    unless_null $P265, vivify_198
    new $P265, "Undef"
  vivify_198:
    $P266 = $P265."ast"()
    $P267 = $P263."!make"($P266)
    .return ($P267)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "deflongname"  :subid("28_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_269
    .param pmc param_270
.annotate 'line', 35
    .lex "self", param_269
    .lex "$/", param_270
.annotate 'line', 36
    find_lex $P271, "$/"
.annotate 'line', 37
    find_lex $P274, "$/"
    unless_null $P274, vivify_199
    $P274 = root_new ['parrot';'Hash']
  vivify_199:
    set $P275, $P274["colonpair"]
    unless_null $P275, vivify_200
    new $P275, "Undef"
  vivify_200:
    if $P275, if_273
.annotate 'line', 39
    find_lex $P295, "$/"
    set $S296, $P295
    new $P272, 'String'
    set $P272, $S296
.annotate 'line', 37
    goto if_273_end
  if_273:
    find_lex $P276, "$/"
    unless_null $P276, vivify_201
    $P276 = root_new ['parrot';'Hash']
  vivify_201:
    set $P277, $P276["identifier"]
    unless_null $P277, vivify_202
    new $P277, "Undef"
  vivify_202:
    set $S278, $P277
    new $P279, 'String'
    set $P279, $S278
    concat $P280, $P279, ":"
    find_lex $P281, "$/"
    unless_null $P281, vivify_203
    $P281 = root_new ['parrot';'Hash']
  vivify_203:
    set $P282, $P281["colonpair"]
    unless_null $P282, vivify_204
    $P282 = root_new ['parrot';'ResizablePMCArray']
  vivify_204:
    set $P283, $P282[0]
    unless_null $P283, vivify_205
    new $P283, "Undef"
  vivify_205:
    $P284 = $P283."ast"()
    $S285 = $P284."named"()
    concat $P286, $P280, $S285
    concat $P287, $P286, "<"
.annotate 'line', 38
    find_lex $P288, "$/"
    unless_null $P288, vivify_206
    $P288 = root_new ['parrot';'Hash']
  vivify_206:
    set $P289, $P288["colonpair"]
    unless_null $P289, vivify_207
    $P289 = root_new ['parrot';'ResizablePMCArray']
  vivify_207:
    set $P290, $P289[0]
    unless_null $P290, vivify_208
    new $P290, "Undef"
  vivify_208:
    $P291 = $P290."ast"()
    $S292 = "colonpair_str"($P291)
    concat $P293, $P287, $S292
    concat $P294, $P293, ">"
    set $P272, $P294
  if_273_end:
.annotate 'line', 37
    $P297 = $P271."!make"($P272)
.annotate 'line', 35
    .return ($P297)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "comp_unit"  :subid("29_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_300
    .param pmc param_301
.annotate 'line', 49
    .lex "self", param_300
    .lex "$/", param_301
.annotate 'line', 50
    new $P302, "Undef"
    .lex "$mainline", $P302
.annotate 'line', 51
    new $P303, "Undef"
    .lex "$unit", $P303
.annotate 'line', 50
    find_lex $P304, "$/"
    unless_null $P304, vivify_209
    $P304 = root_new ['parrot';'Hash']
  vivify_209:
    set $P305, $P304["statementlist"]
    unless_null $P305, vivify_210
    new $P305, "Undef"
  vivify_210:
    $P306 = $P305."ast"()
    store_lex "$mainline", $P306
.annotate 'line', 51
    get_global $P307, "@BLOCK"
    $P308 = $P307."shift"()
    store_lex "$unit", $P308
.annotate 'line', 55
    find_lex $P309, "$unit"
    $P310 = $P309."loadinit"()
    find_dynamic_lex $P311, "$*SC"
    unless_null $P311, vivify_211
    get_hll_global $P311, "$SC"
    unless_null $P311, vivify_212
    die "Contextual $*SC not found"
  vivify_212:
  vivify_211:
    $P312 = $P311."to_past"()
    $P310."push"($P312)
.annotate 'line', 60
    find_dynamic_lex $P314, "$*HAS_YOU_ARE_HERE"
    unless_null $P314, vivify_213
    get_hll_global $P314, "$HAS_YOU_ARE_HERE"
    unless_null $P314, vivify_214
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_214:
  vivify_213:
    if $P314, unless_313_end
.annotate 'line', 61
    find_lex $P315, "$unit"
    find_lex $P316, "self"
    $P317 = $P316."CTXSAVE"()
    $P315."push"($P317)
  unless_313_end:
.annotate 'line', 65
    find_lex $P318, "$unit"
    $P318."loadlibs"("nqp_group", "nqp_ops")
.annotate 'line', 68
    find_dynamic_lex $P320, "$*MAIN_SUB"
    unless_null $P320, vivify_215
    get_hll_global $P320, "$MAIN_SUB"
    unless_null $P320, vivify_216
    die "Contextual $*MAIN_SUB not found"
  vivify_216:
  vivify_215:
    unless $P320, if_319_end
.annotate 'line', 69
    find_lex $P321, "$mainline"
    get_hll_global $P322, ["PAST"], "Op"
.annotate 'line', 70
    get_hll_global $P323, ["PAST"], "Val"
    find_dynamic_lex $P324, "$*MAIN_SUB"
    unless_null $P324, vivify_217
    get_hll_global $P324, "$MAIN_SUB"
    unless_null $P324, vivify_218
    die "Contextual $*MAIN_SUB not found"
  vivify_218:
  vivify_217:
    $P325 = $P323."new"($P324 :named("value"))
    $P326 = $P322."new"($P325, "call" :named("pasttype"))
.annotate 'line', 69
    $P321."push"($P326)
  if_319_end:
.annotate 'line', 77
    find_lex $P327, "$unit"
.annotate 'line', 78
    get_hll_global $P328, ["PAST"], "Op"
    find_lex $P329, "$mainline"
    $P330 = $P328."new"($P329, "return" :named("pirop"))
    $P327."push"($P330)
.annotate 'line', 83
    find_lex $P331, "$unit"
.annotate 'line', 84
    get_hll_global $P332, ["PAST"], "Block"
.annotate 'line', 86
    get_hll_global $P333, ["PAST"], "Op"
    get_hll_global $P334, ["PAST"], "Val"
    find_lex $P335, "$unit"
    $P336 = $P334."new"($P335 :named("value"))
    $P337 = $P333."new"($P336, "call" :named("pasttype"))
    $P338 = $P332."new"($P337, ":load" :named("pirflags"), 0 :named("lexical"), "" :named("namespace"))
.annotate 'line', 84
    $P331."push"($P338)
.annotate 'line', 89
    find_lex $P339, "$unit"
    find_lex $P340, "$/"
    $P339."node"($P340)
.annotate 'line', 92
    find_lex $P341, "$unit"
    $P341."hll"("nqp")
.annotate 'line', 94
    find_lex $P342, "$/"
    find_lex $P343, "$unit"
    $P344 = $P342."!make"($P343)
.annotate 'line', 49
    .return ($P344)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statementlist"  :subid("30_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_346
    .param pmc param_347
.annotate 'line', 97
    .const 'Sub' $P361 = "31_1300057363.399" 
    capture_lex $P361
    .lex "self", param_346
    .lex "$/", param_347
.annotate 'line', 98
    new $P348, "Undef"
    .lex "$past", $P348
    get_hll_global $P349, ["PAST"], "Stmts"
    find_lex $P350, "$/"
    $P351 = $P349."new"($P350 :named("node"))
    store_lex "$past", $P351
.annotate 'line', 99
    find_lex $P353, "$/"
    unless_null $P353, vivify_219
    $P353 = root_new ['parrot';'Hash']
  vivify_219:
    set $P354, $P353["statement"]
    unless_null $P354, vivify_220
    new $P354, "Undef"
  vivify_220:
    unless $P354, if_352_end
.annotate 'line', 100
    find_lex $P356, "$/"
    unless_null $P356, vivify_221
    $P356 = root_new ['parrot';'Hash']
  vivify_221:
    set $P357, $P356["statement"]
    unless_null $P357, vivify_222
    new $P357, "Undef"
  vivify_222:
    defined $I358, $P357
    unless $I358, for_undef_223
    iter $P355, $P357
    new $P381, 'ExceptionHandler'
    set_label $P381, loop380_handler
    $P381."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P381
  loop380_test:
    unless $P355, loop380_done
    shift $P359, $P355
  loop380_redo:
    .const 'Sub' $P361 = "31_1300057363.399" 
    capture_lex $P361
    $P361($P359)
  loop380_next:
    goto loop380_test
  loop380_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P382, exception, 'type'
    eq $P382, .CONTROL_LOOP_NEXT, loop380_next
    eq $P382, .CONTROL_LOOP_REDO, loop380_redo
  loop380_done:
    pop_eh 
  for_undef_223:
  if_352_end:
.annotate 'line', 107
    find_lex $P383, "$/"
    find_lex $P384, "$past"
    $P385 = $P383."!make"($P384)
.annotate 'line', 97
    .return ($P385)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block360"  :anon :subid("31_1300057363.399") :outer("30_1300057363.399")
    .param pmc param_363
.annotate 'line', 101
    new $P362, "Undef"
    .lex "$ast", $P362
    .lex "$_", param_363
    find_lex $P364, "$_"
    $P365 = $P364."ast"()
    store_lex "$ast", $P365
.annotate 'line', 102
    find_lex $P367, "$ast"
    unless_null $P367, vivify_224
    $P367 = root_new ['parrot';'Hash']
  vivify_224:
    set $P368, $P367["sink"]
    unless_null $P368, vivify_225
    new $P368, "Undef"
  vivify_225:
    defined $I369, $P368
    unless $I369, if_366_end
    find_lex $P370, "$ast"
    unless_null $P370, vivify_226
    $P370 = root_new ['parrot';'Hash']
  vivify_226:
    set $P371, $P370["sink"]
    unless_null $P371, vivify_227
    new $P371, "Undef"
  vivify_227:
    store_lex "$ast", $P371
  if_366_end:
.annotate 'line', 103
    find_lex $P373, "$ast"
    unless_null $P373, vivify_228
    $P373 = root_new ['parrot';'Hash']
  vivify_228:
    set $P374, $P373["bareblock"]
    unless_null $P374, vivify_229
    new $P374, "Undef"
  vivify_229:
    unless $P374, if_372_end
    find_lex $P375, "$ast"
    $P376 = "block_immediate"($P375)
    store_lex "$ast", $P376
  if_372_end:
.annotate 'line', 104
    find_lex $P377, "$past"
    find_lex $P378, "$ast"
    $P379 = $P377."push"($P378)
.annotate 'line', 100
    .return ($P379)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement"  :subid("32_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_387
    .param pmc param_388
    .param pmc param_389 :optional
    .param int has_param_389 :opt_flag
.annotate 'line', 110
    .const 'Sub' $P397 = "33_1300057363.399" 
    capture_lex $P397
    .lex "self", param_387
    .lex "$/", param_388
    if has_param_389, optparam_230
    new $P390, "Undef"
    set param_389, $P390
  optparam_230:
    .lex "$key", param_389
.annotate 'line', 111
    new $P391, "Undef"
    .lex "$past", $P391
.annotate 'line', 110
    find_lex $P392, "$past"
.annotate 'line', 112
    find_lex $P394, "$/"
    unless_null $P394, vivify_231
    $P394 = root_new ['parrot';'Hash']
  vivify_231:
    set $P395, $P394["EXPR"]
    unless_null $P395, vivify_232
    new $P395, "Undef"
  vivify_232:
    if $P395, if_393
.annotate 'line', 133
    find_lex $P458, "$/"
    unless_null $P458, vivify_233
    $P458 = root_new ['parrot';'Hash']
  vivify_233:
    set $P459, $P458["statement_control"]
    unless_null $P459, vivify_234
    new $P459, "Undef"
  vivify_234:
    if $P459, if_457
.annotate 'line', 134
    new $P463, "Integer"
    assign $P463, 0
    store_lex "$past", $P463
    goto if_457_end
  if_457:
.annotate 'line', 133
    find_lex $P460, "$/"
    unless_null $P460, vivify_235
    $P460 = root_new ['parrot';'Hash']
  vivify_235:
    set $P461, $P460["statement_control"]
    unless_null $P461, vivify_236
    new $P461, "Undef"
  vivify_236:
    $P462 = $P461."ast"()
    store_lex "$past", $P462
  if_457_end:
    goto if_393_end
  if_393:
.annotate 'line', 112
    .const 'Sub' $P397 = "33_1300057363.399" 
    capture_lex $P397
    $P397()
  if_393_end:
.annotate 'line', 135
    find_lex $P464, "$/"
    find_lex $P465, "$past"
    $P466 = $P464."!make"($P465)
.annotate 'line', 110
    .return ($P466)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block396"  :anon :subid("33_1300057363.399") :outer("32_1300057363.399")
.annotate 'line', 113
    new $P398, "Undef"
    .lex "$mc", $P398
.annotate 'line', 114
    new $P399, "Undef"
    .lex "$ml", $P399
.annotate 'line', 113
    find_lex $P400, "$/"
    unless_null $P400, vivify_237
    $P400 = root_new ['parrot';'Hash']
  vivify_237:
    set $P401, $P400["statement_mod_cond"]
    unless_null $P401, vivify_238
    $P401 = root_new ['parrot';'ResizablePMCArray']
  vivify_238:
    set $P402, $P401[0]
    unless_null $P402, vivify_239
    new $P402, "Undef"
  vivify_239:
    store_lex "$mc", $P402
.annotate 'line', 114
    find_lex $P403, "$/"
    unless_null $P403, vivify_240
    $P403 = root_new ['parrot';'Hash']
  vivify_240:
    set $P404, $P403["statement_mod_loop"]
    unless_null $P404, vivify_241
    $P404 = root_new ['parrot';'ResizablePMCArray']
  vivify_241:
    set $P405, $P404[0]
    unless_null $P405, vivify_242
    new $P405, "Undef"
  vivify_242:
    store_lex "$ml", $P405
.annotate 'line', 115
    find_lex $P406, "$/"
    unless_null $P406, vivify_243
    $P406 = root_new ['parrot';'Hash']
  vivify_243:
    set $P407, $P406["EXPR"]
    unless_null $P407, vivify_244
    new $P407, "Undef"
  vivify_244:
    $P408 = $P407."ast"()
    store_lex "$past", $P408
.annotate 'line', 116
    find_lex $P410, "$mc"
    unless $P410, if_409_end
.annotate 'line', 117
    get_hll_global $P411, ["PAST"], "Op"
    find_lex $P412, "$mc"
    unless_null $P412, vivify_245
    $P412 = root_new ['parrot';'Hash']
  vivify_245:
    set $P413, $P412["cond"]
    unless_null $P413, vivify_246
    new $P413, "Undef"
  vivify_246:
    $P414 = $P413."ast"()
    find_lex $P415, "$past"
    find_lex $P416, "$mc"
    unless_null $P416, vivify_247
    $P416 = root_new ['parrot';'Hash']
  vivify_247:
    set $P417, $P416["sym"]
    unless_null $P417, vivify_248
    new $P417, "Undef"
  vivify_248:
    set $S418, $P417
    find_lex $P419, "$/"
    $P420 = $P411."new"($P414, $P415, $S418 :named("pasttype"), $P419 :named("node"))
    store_lex "$past", $P420
  if_409_end:
.annotate 'line', 119
    find_lex $P423, "$ml"
    if $P423, if_422
    set $P421, $P423
    goto if_422_end
  if_422:
.annotate 'line', 120
    find_lex $P426, "$ml"
    unless_null $P426, vivify_249
    $P426 = root_new ['parrot';'Hash']
  vivify_249:
    set $P427, $P426["sym"]
    unless_null $P427, vivify_250
    new $P427, "Undef"
  vivify_250:
    set $S428, $P427
    iseq $I429, $S428, "for"
    if $I429, if_425
.annotate 'line', 129
    get_hll_global $P447, ["PAST"], "Op"
    find_lex $P448, "$ml"
    unless_null $P448, vivify_251
    $P448 = root_new ['parrot';'Hash']
  vivify_251:
    set $P449, $P448["cond"]
    unless_null $P449, vivify_252
    new $P449, "Undef"
  vivify_252:
    $P450 = $P449."ast"()
    find_lex $P451, "$past"
    find_lex $P452, "$ml"
    unless_null $P452, vivify_253
    $P452 = root_new ['parrot';'Hash']
  vivify_253:
    set $P453, $P452["sym"]
    unless_null $P453, vivify_254
    new $P453, "Undef"
  vivify_254:
    set $S454, $P453
    find_lex $P455, "$/"
    $P456 = $P447."new"($P450, $P451, $S454 :named("pasttype"), $P455 :named("node"))
    store_lex "$past", $P456
.annotate 'line', 128
    set $P424, $P456
.annotate 'line', 120
    goto if_425_end
  if_425:
.annotate 'line', 121
    get_hll_global $P430, ["PAST"], "Block"
.annotate 'line', 122
    get_hll_global $P431, ["PAST"], "Var"
    $P432 = $P431."new"("$_" :named("name"), "parameter" :named("scope"), 1 :named("isdecl"))
    find_lex $P433, "$past"
    $P434 = $P430."new"($P432, $P433, "immediate" :named("blocktype"))
.annotate 'line', 121
    store_lex "$past", $P434
.annotate 'line', 124
    find_lex $P435, "$past"
    $P435."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 125
    find_lex $P436, "$past"
    $P436."arity"(1)
.annotate 'line', 126
    get_hll_global $P437, ["PAST"], "Op"
    find_lex $P438, "$ml"
    unless_null $P438, vivify_255
    $P438 = root_new ['parrot';'Hash']
  vivify_255:
    set $P439, $P438["cond"]
    unless_null $P439, vivify_256
    new $P439, "Undef"
  vivify_256:
    $P440 = $P439."ast"()
    find_lex $P441, "$past"
    find_lex $P442, "$ml"
    unless_null $P442, vivify_257
    $P442 = root_new ['parrot';'Hash']
  vivify_257:
    set $P443, $P442["sym"]
    unless_null $P443, vivify_258
    new $P443, "Undef"
  vivify_258:
    set $S444, $P443
    find_lex $P445, "$/"
    $P446 = $P437."new"($P440, $P441, $S444 :named("pasttype"), $P445 :named("node"))
    store_lex "$past", $P446
.annotate 'line', 120
    set $P424, $P446
  if_425_end:
.annotate 'line', 119
    set $P421, $P424
  if_422_end:
.annotate 'line', 112
    .return ($P421)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock"  :subid("34_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_468
    .param pmc param_469
.annotate 'line', 138
    .lex "self", param_468
    .lex "$/", param_469
.annotate 'line', 139
    find_lex $P470, "$/"
    get_hll_global $P471, ["PAST"], "Op"
    find_lex $P472, "$/"
    unless_null $P472, vivify_259
    $P472 = root_new ['parrot';'Hash']
  vivify_259:
    set $P473, $P472["EXPR"]
    unless_null $P473, vivify_260
    new $P473, "Undef"
  vivify_260:
    $P474 = $P473."ast"()
    find_lex $P475, "$/"
    unless_null $P475, vivify_261
    $P475 = root_new ['parrot';'Hash']
  vivify_261:
    set $P476, $P475["pblock"]
    unless_null $P476, vivify_262
    new $P476, "Undef"
  vivify_262:
    $P477 = $P476."ast"()
    find_lex $P478, "$/"
    $P479 = $P471."new"($P474, $P477, "if" :named("pasttype"), $P478 :named("node"))
    $P480 = $P470."!make"($P479)
.annotate 'line', 138
    .return ($P480)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "pblock"  :subid("35_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_482
    .param pmc param_483
.annotate 'line', 142
    .lex "self", param_482
    .lex "$/", param_483
.annotate 'line', 143
    find_lex $P484, "$/"
    find_lex $P485, "$/"
    unless_null $P485, vivify_263
    $P485 = root_new ['parrot';'Hash']
  vivify_263:
    set $P486, $P485["blockoid"]
    unless_null $P486, vivify_264
    new $P486, "Undef"
  vivify_264:
    $P487 = $P486."ast"()
    $P488 = $P484."!make"($P487)
.annotate 'line', 142
    .return ($P488)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block"  :subid("36_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_490
    .param pmc param_491
.annotate 'line', 146
    .lex "self", param_490
    .lex "$/", param_491
.annotate 'line', 147
    find_lex $P492, "$/"
    find_lex $P493, "$/"
    unless_null $P493, vivify_265
    $P493 = root_new ['parrot';'Hash']
  vivify_265:
    set $P494, $P493["blockoid"]
    unless_null $P494, vivify_266
    new $P494, "Undef"
  vivify_266:
    $P495 = $P494."ast"()
    $P496 = $P492."!make"($P495)
.annotate 'line', 146
    .return ($P496)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blockoid"  :subid("37_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_498
    .param pmc param_499
.annotate 'line', 150
    .const 'Sub' $P508 = "38_1300057363.399" 
    capture_lex $P508
    .lex "self", param_498
    .lex "$/", param_499
.annotate 'line', 151
    new $P500, "Undef"
    .lex "$BLOCK", $P500
    get_global $P501, "@BLOCK"
    $P502 = $P501."shift"()
    store_lex "$BLOCK", $P502
.annotate 'line', 152
    find_lex $P505, "$/"
    unless_null $P505, vivify_267
    $P505 = root_new ['parrot';'Hash']
  vivify_267:
    set $P506, $P505["statementlist"]
    unless_null $P506, vivify_268
    new $P506, "Undef"
  vivify_268:
    if $P506, if_504
.annotate 'line', 160
    find_dynamic_lex $P523, "$*HAS_YOU_ARE_HERE"
    unless_null $P523, vivify_269
    get_hll_global $P523, "$HAS_YOU_ARE_HERE"
    unless_null $P523, vivify_270
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_270:
  vivify_269:
    unless $P523, if_522_end
.annotate 'line', 161
    find_lex $P524, "$/"
    $P525 = $P524."CURSOR"()
    $P525."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if_522_end:
.annotate 'line', 163
    new $P526, "Integer"
    assign $P526, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P526
.annotate 'line', 164
    find_lex $P527, "$/"
    find_lex $P528, "$/"
    unless_null $P528, vivify_271
    $P528 = root_new ['parrot';'Hash']
  vivify_271:
    set $P529, $P528["you_are_here"]
    unless_null $P529, vivify_272
    new $P529, "Undef"
  vivify_272:
    $P530 = $P529."ast"()
    $P531 = $P527."!make"($P530)
.annotate 'line', 159
    set $P503, $P531
.annotate 'line', 152
    goto if_504_end
  if_504:
    .const 'Sub' $P508 = "38_1300057363.399" 
    capture_lex $P508
    $P521 = $P508()
    set $P503, $P521
  if_504_end:
.annotate 'line', 150
    .return ($P503)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block507"  :anon :subid("38_1300057363.399") :outer("37_1300057363.399")
.annotate 'line', 153
    new $P509, "Undef"
    .lex "$past", $P509
    find_lex $P510, "$/"
    unless_null $P510, vivify_273
    $P510 = root_new ['parrot';'Hash']
  vivify_273:
    set $P511, $P510["statementlist"]
    unless_null $P511, vivify_274
    new $P511, "Undef"
  vivify_274:
    $P512 = $P511."ast"()
    store_lex "$past", $P512
.annotate 'line', 154
    find_lex $P513, "$BLOCK"
    find_lex $P514, "$past"
    $P513."push"($P514)
.annotate 'line', 155
    find_lex $P515, "$BLOCK"
    find_lex $P516, "$/"
    $P515."node"($P516)
.annotate 'line', 156
    find_lex $P517, "$BLOCK"
    $P517."closure"(1)
.annotate 'line', 157
    find_dynamic_lex $P518, "$/"
    find_lex $P519, "$BLOCK"
    $P520 = $P518."!make"($P519)
.annotate 'line', 152
    .return ($P520)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "newpad"  :subid("39_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_533
    .param pmc param_534
.annotate 'line', 168
    .lex "self", param_533
    .lex "$/", param_534
.annotate 'line', 169
    get_global $P535, "@BLOCK"
    unless_null $P535, vivify_275
    $P535 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P535
  vivify_275:
.annotate 'line', 168
    get_global $P536, "@BLOCK"
.annotate 'line', 170
    get_global $P537, "@BLOCK"
    get_hll_global $P538, ["PAST"], "Block"
    get_hll_global $P539, ["PAST"], "Stmts"
    $P540 = $P539."new"()
    $P541 = $P538."new"($P540)
    $P542 = $P537."unshift"($P541)
.annotate 'line', 168
    .return ($P542)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "outerctx"  :subid("40_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_544
    .param pmc param_545
.annotate 'line', 173
    .lex "self", param_544
    .lex "$/", param_545
.annotate 'line', 174
    get_global $P546, "@BLOCK"
    unless_null $P546, vivify_276
    $P546 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P546
  vivify_276:
.annotate 'line', 173
    get_global $P547, "@BLOCK"
.annotate 'line', 175
    find_dynamic_lex $P549, "%*COMPILING"
    unless_null $P549, vivify_277
    get_hll_global $P549, "%COMPILING"
    unless_null $P549, vivify_278
    die "Contextual %*COMPILING not found"
  vivify_278:
  vivify_277:
    set $P550, $P549["%?OPTIONS"]
    unless_null $P550, vivify_279
    $P550 = root_new ['parrot';'Hash']
  vivify_279:
    set $P551, $P550["outer_ctx"]
    unless_null $P551, vivify_280
    new $P551, "Undef"
  vivify_280:
    defined $I552, $P551
    if $I552, unless_548_end
.annotate 'line', 178
    find_dynamic_lex $P553, "$*SC"
    unless_null $P553, vivify_281
    get_hll_global $P553, "$SC"
    unless_null $P553, vivify_282
    die "Contextual $*SC not found"
  vivify_282:
  vivify_281:
    find_dynamic_lex $P555, "%*COMPILING"
    unless_null $P555, vivify_283
    get_hll_global $P555, "%COMPILING"
    unless_null $P555, vivify_284
    die "Contextual %*COMPILING not found"
  vivify_284:
  vivify_283:
    set $P556, $P555["%?OPTIONS"]
    unless_null $P556, vivify_285
    $P556 = root_new ['parrot';'Hash']
  vivify_285:
    set $P557, $P556["setting"]
    unless_null $P557, vivify_286
    new $P557, "Undef"
  vivify_286:
    set $P554, $P557
    defined $I559, $P554
    if $I559, default_558
    new $P560, "String"
    assign $P560, "NQPCORE"
    set $P554, $P560
  default_558:
    $P553."load_setting"($P554)
  unless_548_end:
.annotate 'line', 180
    find_lex $P561, "self"
    get_global $P562, "@BLOCK"
    unless_null $P562, vivify_287
    $P562 = root_new ['parrot';'ResizablePMCArray']
  vivify_287:
    set $P563, $P562[0]
    unless_null $P563, vivify_288
    new $P563, "Undef"
  vivify_288:
    $P564 = $P561."SET_BLOCK_OUTER_CTX"($P563)
.annotate 'line', 173
    .return ($P564)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "you_are_here"  :subid("41_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_566
    .param pmc param_567
.annotate 'line', 183
    .lex "self", param_566
    .lex "$/", param_567
.annotate 'line', 184
    find_lex $P568, "$/"
    find_lex $P569, "self"
    $P570 = $P569."CTXSAVE"()
    $P571 = $P568."!make"($P570)
.annotate 'line', 183
    .return ($P571)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<use>"  :subid("42_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_573
    .param pmc param_574
.annotate 'line', 189
    .lex "self", param_573
    .lex "$/", param_574
.annotate 'line', 190
    find_dynamic_lex $P575, "$*SC"
    unless_null $P575, vivify_289
    get_hll_global $P575, "$SC"
    unless_null $P575, vivify_290
    die "Contextual $*SC not found"
  vivify_290:
  vivify_289:
    find_lex $P576, "$/"
    unless_null $P576, vivify_291
    $P576 = root_new ['parrot';'Hash']
  vivify_291:
    set $P577, $P576["name"]
    unless_null $P577, vivify_292
    new $P577, "Undef"
  vivify_292:
    set $S578, $P577
    $P575."load_module"($S578)
.annotate 'line', 191
    find_lex $P579, "$/"
    get_hll_global $P580, ["PAST"], "Stmts"
    $P581 = $P580."new"()
    $P582 = $P579."!make"($P581)
.annotate 'line', 189
    .return ($P582)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statement_control:sym<if>"  :subid("43_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_584
    .param pmc param_585
.annotate 'line', 194
    .const 'Sub' $P613 = "44_1300057363.399" 
    capture_lex $P613
    .lex "self", param_584
    .lex "$/", param_585
.annotate 'line', 195
    new $P586, "Undef"
    .lex "$count", $P586
.annotate 'line', 196
    new $P587, "Undef"
    .lex "$past", $P587
.annotate 'line', 195
    find_lex $P588, "$/"
    unless_null $P588, vivify_293
    $P588 = root_new ['parrot';'Hash']
  vivify_293:
    set $P589, $P588["xblock"]
    unless_null $P589, vivify_294
    new $P589, "Undef"
  vivify_294:
    set $N590, $P589
    new $P591, 'Float'
    set $P591, $N590
    sub $P592, $P591, 1
    store_lex "$count", $P592
.annotate 'line', 196
    find_lex $P593, "$count"
    set $I594, $P593
    find_lex $P595, "$/"
    unless_null $P595, vivify_295
    $P595 = root_new ['parrot';'Hash']
  vivify_295:
    set $P596, $P595["xblock"]
    unless_null $P596, vivify_296
    $P596 = root_new ['parrot';'ResizablePMCArray']
  vivify_296:
    set $P597, $P596[$I594]
    unless_null $P597, vivify_297
    new $P597, "Undef"
  vivify_297:
    $P598 = $P597."ast"()
    $P599 = "xblock_immediate"($P598)
    store_lex "$past", $P599
.annotate 'line', 197
    find_lex $P601, "$/"
    unless_null $P601, vivify_298
    $P601 = root_new ['parrot';'Hash']
  vivify_298:
    set $P602, $P601["else"]
    unless_null $P602, vivify_299
    new $P602, "Undef"
  vivify_299:
    unless $P602, if_600_end
.annotate 'line', 198
    find_lex $P603, "$past"
    find_lex $P604, "$/"
    unless_null $P604, vivify_300
    $P604 = root_new ['parrot';'Hash']
  vivify_300:
    set $P605, $P604["else"]
    unless_null $P605, vivify_301
    $P605 = root_new ['parrot';'ResizablePMCArray']
  vivify_301:
    set $P606, $P605[0]
    unless_null $P606, vivify_302
    new $P606, "Undef"
  vivify_302:
    $P607 = $P606."ast"()
    $P608 = "block_immediate"($P607)
    $P603."push"($P608)
  if_600_end:
.annotate 'line', 201
    new $P629, 'ExceptionHandler'
    set_label $P629, loop628_handler
    $P629."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P629
  loop628_test:
    find_lex $P609, "$count"
    set $N610, $P609
    isgt $I611, $N610, 0.0
    unless $I611, loop628_done
  loop628_redo:
    .const 'Sub' $P613 = "44_1300057363.399" 
    capture_lex $P613
    $P613()
  loop628_next:
    goto loop628_test
  loop628_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P630, exception, 'type'
    eq $P630, .CONTROL_LOOP_NEXT, loop628_next
    eq $P630, .CONTROL_LOOP_REDO, loop628_redo
  loop628_done:
    pop_eh 
.annotate 'line', 207
    find_lex $P631, "$/"
    find_lex $P632, "$past"
    $P633 = $P631."!make"($P632)
.annotate 'line', 194
    .return ($P633)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block612"  :anon :subid("44_1300057363.399") :outer("43_1300057363.399")
.annotate 'line', 203
    new $P614, "Undef"
    .lex "$else", $P614
.annotate 'line', 201
    find_lex $P615, "$count"
    clone $P616, $P615
    dec $P615
.annotate 'line', 203
    find_lex $P617, "$past"
    store_lex "$else", $P617
.annotate 'line', 204
    find_lex $P618, "$count"
    set $I619, $P618
    find_lex $P620, "$/"
    unless_null $P620, vivify_303
    $P620 = root_new ['parrot';'Hash']
  vivify_303:
    set $P621, $P620["xblock"]
    unless_null $P621, vivify_304
    $P621 = root_new ['parrot';'ResizablePMCArray']
  vivify_304:
    set $P622, $P621[$I619]
    unless_null $P622, vivify_305
    new $P622, "Undef"
  vivify_305:
    $P623 = $P622."ast"()
    $P624 = "xblock_immediate"($P623)
    store_lex "$past", $P624
.annotate 'line', 205
    find_lex $P625, "$past"
    find_lex $P626, "$else"
    $P627 = $P625."push"($P626)
.annotate 'line', 201
    .return ($P627)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<unless>"  :subid("45_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_635
    .param pmc param_636
.annotate 'line', 210
    .lex "self", param_635
    .lex "$/", param_636
.annotate 'line', 211
    new $P637, "Undef"
    .lex "$past", $P637
    find_lex $P638, "$/"
    unless_null $P638, vivify_306
    $P638 = root_new ['parrot';'Hash']
  vivify_306:
    set $P639, $P638["xblock"]
    unless_null $P639, vivify_307
    new $P639, "Undef"
  vivify_307:
    $P640 = $P639."ast"()
    $P641 = "xblock_immediate"($P640)
    store_lex "$past", $P641
.annotate 'line', 212
    find_lex $P642, "$past"
    $P642."pasttype"("unless")
.annotate 'line', 213
    find_lex $P643, "$/"
    find_lex $P644, "$past"
    $P645 = $P643."!make"($P644)
.annotate 'line', 210
    .return ($P645)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<while>"  :subid("46_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_647
    .param pmc param_648
.annotate 'line', 216
    .lex "self", param_647
    .lex "$/", param_648
.annotate 'line', 217
    new $P649, "Undef"
    .lex "$past", $P649
    find_lex $P650, "$/"
    unless_null $P650, vivify_308
    $P650 = root_new ['parrot';'Hash']
  vivify_308:
    set $P651, $P650["xblock"]
    unless_null $P651, vivify_309
    new $P651, "Undef"
  vivify_309:
    $P652 = $P651."ast"()
    $P653 = "xblock_immediate"($P652)
    store_lex "$past", $P653
.annotate 'line', 218
    find_lex $P654, "$past"
    find_lex $P655, "$/"
    unless_null $P655, vivify_310
    $P655 = root_new ['parrot';'Hash']
  vivify_310:
    set $P656, $P655["sym"]
    unless_null $P656, vivify_311
    new $P656, "Undef"
  vivify_311:
    set $S657, $P656
    $P654."pasttype"($S657)
.annotate 'line', 219
    find_lex $P658, "$/"
    find_lex $P659, "$past"
    $P660 = $P658."!make"($P659)
.annotate 'line', 216
    .return ($P660)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<repeat>"  :subid("47_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_662
    .param pmc param_663
.annotate 'line', 222
    .lex "self", param_662
    .lex "$/", param_663
.annotate 'line', 223
    new $P664, "Undef"
    .lex "$pasttype", $P664
.annotate 'line', 224
    new $P665, "Undef"
    .lex "$past", $P665
.annotate 'line', 223
    new $P666, "String"
    assign $P666, "repeat_"
    find_lex $P667, "$/"
    unless_null $P667, vivify_312
    $P667 = root_new ['parrot';'Hash']
  vivify_312:
    set $P668, $P667["wu"]
    unless_null $P668, vivify_313
    new $P668, "Undef"
  vivify_313:
    set $S669, $P668
    concat $P670, $P666, $S669
    store_lex "$pasttype", $P670
    find_lex $P671, "$past"
.annotate 'line', 225
    find_lex $P673, "$/"
    unless_null $P673, vivify_314
    $P673 = root_new ['parrot';'Hash']
  vivify_314:
    set $P674, $P673["xblock"]
    unless_null $P674, vivify_315
    new $P674, "Undef"
  vivify_315:
    if $P674, if_672
.annotate 'line', 230
    get_hll_global $P681, ["PAST"], "Op"
    find_lex $P682, "$/"
    unless_null $P682, vivify_316
    $P682 = root_new ['parrot';'Hash']
  vivify_316:
    set $P683, $P682["EXPR"]
    unless_null $P683, vivify_317
    new $P683, "Undef"
  vivify_317:
    $P684 = $P683."ast"()
    find_lex $P685, "$/"
    unless_null $P685, vivify_318
    $P685 = root_new ['parrot';'Hash']
  vivify_318:
    set $P686, $P685["pblock"]
    unless_null $P686, vivify_319
    new $P686, "Undef"
  vivify_319:
    $P687 = $P686."ast"()
    $P688 = "block_immediate"($P687)
    find_lex $P689, "$pasttype"
    find_lex $P690, "$/"
    $P691 = $P681."new"($P684, $P688, $P689 :named("pasttype"), $P690 :named("node"))
    store_lex "$past", $P691
.annotate 'line', 229
    goto if_672_end
  if_672:
.annotate 'line', 226
    find_lex $P675, "$/"
    unless_null $P675, vivify_320
    $P675 = root_new ['parrot';'Hash']
  vivify_320:
    set $P676, $P675["xblock"]
    unless_null $P676, vivify_321
    new $P676, "Undef"
  vivify_321:
    $P677 = $P676."ast"()
    $P678 = "xblock_immediate"($P677)
    store_lex "$past", $P678
.annotate 'line', 227
    find_lex $P679, "$past"
    find_lex $P680, "$pasttype"
    $P679."pasttype"($P680)
  if_672_end:
.annotate 'line', 233
    find_lex $P692, "$/"
    find_lex $P693, "$past"
    $P694 = $P692."!make"($P693)
.annotate 'line', 222
    .return ($P694)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<for>"  :subid("48_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_696
    .param pmc param_697
.annotate 'line', 236
    .lex "self", param_696
    .lex "$/", param_697
.annotate 'line', 237
    new $P698, "Undef"
    .lex "$past", $P698
.annotate 'line', 239
    new $P699, "Undef"
    .lex "$block", $P699
.annotate 'line', 237
    find_lex $P700, "$/"
    unless_null $P700, vivify_322
    $P700 = root_new ['parrot';'Hash']
  vivify_322:
    set $P701, $P700["xblock"]
    unless_null $P701, vivify_323
    new $P701, "Undef"
  vivify_323:
    $P702 = $P701."ast"()
    store_lex "$past", $P702
.annotate 'line', 238
    find_lex $P703, "$past"
    $P703."pasttype"("for")
.annotate 'line', 239
    find_lex $P704, "$past"
    unless_null $P704, vivify_324
    $P704 = root_new ['parrot';'ResizablePMCArray']
  vivify_324:
    set $P705, $P704[1]
    unless_null $P705, vivify_325
    new $P705, "Undef"
  vivify_325:
    store_lex "$block", $P705
.annotate 'line', 240
    find_lex $P707, "$block"
    $P708 = $P707."arity"()
    if $P708, unless_706_end
.annotate 'line', 241
    find_lex $P709, "$block"
    unless_null $P709, vivify_326
    $P709 = root_new ['parrot';'ResizablePMCArray']
  vivify_326:
    set $P710, $P709[0]
    unless_null $P710, vivify_327
    new $P710, "Undef"
  vivify_327:
    get_hll_global $P711, ["PAST"], "Var"
    $P712 = $P711."new"("$_" :named("name"), "parameter" :named("scope"))
    $P710."push"($P712)
.annotate 'line', 242
    find_lex $P713, "$block"
    $P713."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 243
    find_lex $P714, "$block"
    $P714."arity"(1)
  unless_706_end:
.annotate 'line', 245
    find_lex $P715, "$block"
    $P715."blocktype"("immediate")
.annotate 'line', 246
    find_lex $P716, "$/"
    find_lex $P717, "$past"
    $P718 = $P716."!make"($P717)
.annotate 'line', 236
    .return ($P718)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CATCH>"  :subid("49_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_720
    .param pmc param_721
.annotate 'line', 249
    .lex "self", param_720
    .lex "$/", param_721
.annotate 'line', 250
    new $P722, "Undef"
    .lex "$block", $P722
    find_lex $P723, "$/"
    unless_null $P723, vivify_328
    $P723 = root_new ['parrot';'Hash']
  vivify_328:
    set $P724, $P723["block"]
    unless_null $P724, vivify_329
    new $P724, "Undef"
  vivify_329:
    $P725 = $P724."ast"()
    store_lex "$block", $P725
.annotate 'line', 251
    find_lex $P726, "$/"
    find_lex $P727, "$block"
    "push_block_handler"($P726, $P727)
.annotate 'line', 252
    get_global $P728, "@BLOCK"
    unless_null $P728, vivify_330
    $P728 = root_new ['parrot';'ResizablePMCArray']
  vivify_330:
    set $P729, $P728[0]
    unless_null $P729, vivify_331
    new $P729, "Undef"
  vivify_331:
    $P730 = $P729."handlers"()
    set $P731, $P730[0]
    unless_null $P731, vivify_332
    new $P731, "Undef"
  vivify_332:
    $P731."handle_types_except"("CONTROL")
.annotate 'line', 253
    find_lex $P732, "$/"
    get_hll_global $P733, ["PAST"], "Stmts"
    find_lex $P734, "$/"
    $P735 = $P733."new"($P734 :named("node"))
    $P736 = $P732."!make"($P735)
.annotate 'line', 249
    .return ($P736)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CONTROL>"  :subid("50_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_738
    .param pmc param_739
.annotate 'line', 256
    .lex "self", param_738
    .lex "$/", param_739
.annotate 'line', 257
    new $P740, "Undef"
    .lex "$block", $P740
    find_lex $P741, "$/"
    unless_null $P741, vivify_333
    $P741 = root_new ['parrot';'Hash']
  vivify_333:
    set $P742, $P741["block"]
    unless_null $P742, vivify_334
    new $P742, "Undef"
  vivify_334:
    $P743 = $P742."ast"()
    store_lex "$block", $P743
.annotate 'line', 258
    find_lex $P744, "$/"
    find_lex $P745, "$block"
    "push_block_handler"($P744, $P745)
.annotate 'line', 259
    get_global $P746, "@BLOCK"
    unless_null $P746, vivify_335
    $P746 = root_new ['parrot';'ResizablePMCArray']
  vivify_335:
    set $P747, $P746[0]
    unless_null $P747, vivify_336
    new $P747, "Undef"
  vivify_336:
    $P748 = $P747."handlers"()
    set $P749, $P748[0]
    unless_null $P749, vivify_337
    new $P749, "Undef"
  vivify_337:
    $P749."handle_types"("CONTROL")
.annotate 'line', 260
    find_lex $P750, "$/"
    get_hll_global $P751, ["PAST"], "Stmts"
    find_lex $P752, "$/"
    $P753 = $P751."new"($P752 :named("node"))
    $P754 = $P750."!make"($P753)
.annotate 'line', 256
    .return ($P754)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<INIT>"  :subid("51_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_757
    .param pmc param_758
.annotate 'line', 300
    .lex "self", param_757
    .lex "$/", param_758
.annotate 'line', 301
    new $P759, "Undef"
    .lex "$init_block", $P759
    get_hll_global $P760, ["PAST"], "Block"
    $P761 = $P760."new"("immediate" :named("blocktype"))
    store_lex "$init_block", $P761
.annotate 'line', 302
    find_lex $P762, "$init_block"
    $P763 = $P762."loadinit"()
    find_lex $P764, "$/"
    unless_null $P764, vivify_338
    $P764 = root_new ['parrot';'Hash']
  vivify_338:
    set $P765, $P764["blorst"]
    unless_null $P765, vivify_339
    new $P765, "Undef"
  vivify_339:
    $P766 = $P765."ast"()
    $P763."push"($P766)
.annotate 'line', 303
    find_lex $P767, "$/"
    find_lex $P768, "$init_block"
    $P769 = $P767."!make"($P768)
.annotate 'line', 300
    .return ($P769)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<try>"  :subid("52_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_771
    .param pmc param_772
.annotate 'line', 306
    .lex "self", param_771
    .lex "$/", param_772
.annotate 'line', 307
    new $P773, "Undef"
    .lex "$past", $P773
    find_lex $P774, "$/"
    unless_null $P774, vivify_340
    $P774 = root_new ['parrot';'Hash']
  vivify_340:
    set $P775, $P774["blorst"]
    unless_null $P775, vivify_341
    new $P775, "Undef"
  vivify_341:
    $P776 = $P775."ast"()
    store_lex "$past", $P776
.annotate 'line', 308
    get_hll_global $P778, ["PAST"], "Block"
    find_lex $P779, "$past"
    $P780 = $P778."ACCEPTS"($P779)
    if $P780, unless_777_end
.annotate 'line', 309
    get_hll_global $P781, ["PAST"], "Block"
    find_lex $P782, "$past"
    find_lex $P783, "$/"
    $P784 = $P781."new"($P782, "immediate" :named("blocktype"), $P783 :named("node"))
    store_lex "$past", $P784
  unless_777_end:
.annotate 'line', 311
    find_lex $P786, "$past"
    $P787 = $P786."handlers"()
    if $P787, unless_785_end
.annotate 'line', 312
    find_lex $P788, "$past"
    get_hll_global $P789, ["PAST"], "Control"
.annotate 'line', 314
    get_hll_global $P790, ["PAST"], "Stmts"
.annotate 'line', 315
    get_hll_global $P791, ["PAST"], "Op"
.annotate 'line', 316
    get_hll_global $P792, ["PAST"], "Var"
.annotate 'line', 317
    get_hll_global $P793, ["PAST"], "Var"
    $P794 = $P793."new"("register" :named("scope"), "exception" :named("name"))
    $P795 = $P792."new"($P794, "handled", "keyed" :named("scope"))
.annotate 'line', 316
    $P796 = $P791."new"($P795, 1, "bind" :named("pasttype"))
.annotate 'line', 315
    $P797 = $P790."new"($P796)
.annotate 'line', 314
    $P798 = $P789."new"($P797, "CONTROL" :named("handle_types_except"))
.annotate 'line', 312
    new $P799, "ResizablePMCArray"
    push $P799, $P798
    $P788."handlers"($P799)
  unless_785_end:
.annotate 'line', 326
    find_lex $P800, "$/"
    find_lex $P801, "$past"
    $P802 = $P800."!make"($P801)
.annotate 'line', 306
    .return ($P802)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blorst"  :subid("53_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_804
    .param pmc param_805
.annotate 'line', 329
    .lex "self", param_804
    .lex "$/", param_805
.annotate 'line', 330
    find_lex $P806, "$/"
.annotate 'line', 331
    find_lex $P809, "$/"
    unless_null $P809, vivify_342
    $P809 = root_new ['parrot';'Hash']
  vivify_342:
    set $P810, $P809["block"]
    unless_null $P810, vivify_343
    new $P810, "Undef"
  vivify_343:
    if $P810, if_808
.annotate 'line', 332
    find_lex $P815, "$/"
    unless_null $P815, vivify_344
    $P815 = root_new ['parrot';'Hash']
  vivify_344:
    set $P816, $P815["statement"]
    unless_null $P816, vivify_345
    new $P816, "Undef"
  vivify_345:
    $P817 = $P816."ast"()
    set $P807, $P817
.annotate 'line', 331
    goto if_808_end
  if_808:
    find_lex $P811, "$/"
    unless_null $P811, vivify_346
    $P811 = root_new ['parrot';'Hash']
  vivify_346:
    set $P812, $P811["block"]
    unless_null $P812, vivify_347
    new $P812, "Undef"
  vivify_347:
    $P813 = $P812."ast"()
    $P814 = "block_immediate"($P813)
    set $P807, $P814
  if_808_end:
    $P818 = $P806."!make"($P807)
.annotate 'line', 329
    .return ($P818)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<if>"  :subid("54_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_820
    .param pmc param_821
.annotate 'line', 337
    .lex "self", param_820
    .lex "$/", param_821
    find_lex $P822, "$/"
    find_lex $P823, "$/"
    unless_null $P823, vivify_348
    $P823 = root_new ['parrot';'Hash']
  vivify_348:
    set $P824, $P823["cond"]
    unless_null $P824, vivify_349
    new $P824, "Undef"
  vivify_349:
    $P825 = $P824."ast"()
    $P826 = $P822."!make"($P825)
    .return ($P826)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<unless>"  :subid("55_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_828
    .param pmc param_829
.annotate 'line', 338
    .lex "self", param_828
    .lex "$/", param_829
    find_lex $P830, "$/"
    find_lex $P831, "$/"
    unless_null $P831, vivify_350
    $P831 = root_new ['parrot';'Hash']
  vivify_350:
    set $P832, $P831["cond"]
    unless_null $P832, vivify_351
    new $P832, "Undef"
  vivify_351:
    $P833 = $P832."ast"()
    $P834 = $P830."!make"($P833)
    .return ($P834)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<while>"  :subid("56_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_836
    .param pmc param_837
.annotate 'line', 340
    .lex "self", param_836
    .lex "$/", param_837
    find_lex $P838, "$/"
    find_lex $P839, "$/"
    unless_null $P839, vivify_352
    $P839 = root_new ['parrot';'Hash']
  vivify_352:
    set $P840, $P839["cond"]
    unless_null $P840, vivify_353
    new $P840, "Undef"
  vivify_353:
    $P841 = $P840."ast"()
    $P842 = $P838."!make"($P841)
    .return ($P842)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<until>"  :subid("57_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_844
    .param pmc param_845
.annotate 'line', 341
    .lex "self", param_844
    .lex "$/", param_845
    find_lex $P846, "$/"
    find_lex $P847, "$/"
    unless_null $P847, vivify_354
    $P847 = root_new ['parrot';'Hash']
  vivify_354:
    set $P848, $P847["cond"]
    unless_null $P848, vivify_355
    new $P848, "Undef"
  vivify_355:
    $P849 = $P848."ast"()
    $P850 = $P846."!make"($P849)
    .return ($P850)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<fatarrow>"  :subid("58_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_852
    .param pmc param_853
.annotate 'line', 345
    .lex "self", param_852
    .lex "$/", param_853
    find_lex $P854, "$/"
    find_lex $P855, "$/"
    unless_null $P855, vivify_356
    $P855 = root_new ['parrot';'Hash']
  vivify_356:
    set $P856, $P855["fatarrow"]
    unless_null $P856, vivify_357
    new $P856, "Undef"
  vivify_357:
    $P857 = $P856."ast"()
    $P858 = $P854."!make"($P857)
    .return ($P858)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<colonpair>"  :subid("59_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_860
    .param pmc param_861
.annotate 'line', 346
    .lex "self", param_860
    .lex "$/", param_861
    find_lex $P862, "$/"
    find_lex $P863, "$/"
    unless_null $P863, vivify_358
    $P863 = root_new ['parrot';'Hash']
  vivify_358:
    set $P864, $P863["colonpair"]
    unless_null $P864, vivify_359
    new $P864, "Undef"
  vivify_359:
    $P865 = $P864."ast"()
    $P866 = $P862."!make"($P865)
    .return ($P866)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<variable>"  :subid("60_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_868
    .param pmc param_869
.annotate 'line', 347
    .lex "self", param_868
    .lex "$/", param_869
    find_lex $P870, "$/"
    find_lex $P871, "$/"
    unless_null $P871, vivify_360
    $P871 = root_new ['parrot';'Hash']
  vivify_360:
    set $P872, $P871["variable"]
    unless_null $P872, vivify_361
    new $P872, "Undef"
  vivify_361:
    $P873 = $P872."ast"()
    $P874 = $P870."!make"($P873)
    .return ($P874)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<package_declarator>"  :subid("61_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_876
    .param pmc param_877
.annotate 'line', 348
    .lex "self", param_876
    .lex "$/", param_877
    find_lex $P878, "$/"
    find_lex $P879, "$/"
    unless_null $P879, vivify_362
    $P879 = root_new ['parrot';'Hash']
  vivify_362:
    set $P880, $P879["package_declarator"]
    unless_null $P880, vivify_363
    new $P880, "Undef"
  vivify_363:
    $P881 = $P880."ast"()
    $P882 = $P878."!make"($P881)
    .return ($P882)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<scope_declarator>"  :subid("62_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_884
    .param pmc param_885
.annotate 'line', 349
    .lex "self", param_884
    .lex "$/", param_885
    find_lex $P886, "$/"
    find_lex $P887, "$/"
    unless_null $P887, vivify_364
    $P887 = root_new ['parrot';'Hash']
  vivify_364:
    set $P888, $P887["scope_declarator"]
    unless_null $P888, vivify_365
    new $P888, "Undef"
  vivify_365:
    $P889 = $P888."ast"()
    $P890 = $P886."!make"($P889)
    .return ($P890)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<routine_declarator>"  :subid("63_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_892
    .param pmc param_893
.annotate 'line', 350
    .lex "self", param_892
    .lex "$/", param_893
    find_lex $P894, "$/"
    find_lex $P895, "$/"
    unless_null $P895, vivify_366
    $P895 = root_new ['parrot';'Hash']
  vivify_366:
    set $P896, $P895["routine_declarator"]
    unless_null $P896, vivify_367
    new $P896, "Undef"
  vivify_367:
    $P897 = $P896."ast"()
    $P898 = $P894."!make"($P897)
    .return ($P898)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<regex_declarator>"  :subid("64_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_900
    .param pmc param_901
.annotate 'line', 351
    .lex "self", param_900
    .lex "$/", param_901
    find_lex $P902, "$/"
    find_lex $P903, "$/"
    unless_null $P903, vivify_368
    $P903 = root_new ['parrot';'Hash']
  vivify_368:
    set $P904, $P903["regex_declarator"]
    unless_null $P904, vivify_369
    new $P904, "Undef"
  vivify_369:
    $P905 = $P904."ast"()
    $P906 = $P902."!make"($P905)
    .return ($P906)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<statement_prefix>"  :subid("65_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_908
    .param pmc param_909
.annotate 'line', 352
    .lex "self", param_908
    .lex "$/", param_909
    find_lex $P910, "$/"
    find_lex $P911, "$/"
    unless_null $P911, vivify_370
    $P911 = root_new ['parrot';'Hash']
  vivify_370:
    set $P912, $P911["statement_prefix"]
    unless_null $P912, vivify_371
    new $P912, "Undef"
  vivify_371:
    $P913 = $P912."ast"()
    $P914 = $P910."!make"($P913)
    .return ($P914)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<lambda>"  :subid("66_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_916
    .param pmc param_917
.annotate 'line', 353
    .lex "self", param_916
    .lex "$/", param_917
    find_lex $P918, "$/"
    find_lex $P919, "$/"
    unless_null $P919, vivify_372
    $P919 = root_new ['parrot';'Hash']
  vivify_372:
    set $P920, $P919["pblock"]
    unless_null $P920, vivify_373
    new $P920, "Undef"
  vivify_373:
    $P921 = $P920."ast"()
    $P922 = $P918."!make"($P921)
    .return ($P922)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "fatarrow"  :subid("67_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_924
    .param pmc param_925
.annotate 'line', 355
    .lex "self", param_924
    .lex "$/", param_925
.annotate 'line', 356
    new $P926, "Undef"
    .lex "$past", $P926
    find_lex $P927, "$/"
    unless_null $P927, vivify_374
    $P927 = root_new ['parrot';'Hash']
  vivify_374:
    set $P928, $P927["val"]
    unless_null $P928, vivify_375
    new $P928, "Undef"
  vivify_375:
    $P929 = $P928."ast"()
    store_lex "$past", $P929
.annotate 'line', 357
    find_lex $P930, "$past"
    find_lex $P931, "$/"
    unless_null $P931, vivify_376
    $P931 = root_new ['parrot';'Hash']
  vivify_376:
    set $P932, $P931["key"]
    unless_null $P932, vivify_377
    new $P932, "Undef"
  vivify_377:
    $P933 = $P932."Str"()
    $P930."named"($P933)
.annotate 'line', 358
    find_lex $P934, "$/"
    find_lex $P935, "$past"
    $P936 = $P934."!make"($P935)
.annotate 'line', 355
    .return ($P936)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair"  :subid("68_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_938
    .param pmc param_939
.annotate 'line', 361
    .lex "self", param_938
    .lex "$/", param_939
.annotate 'line', 362
    new $P940, "Undef"
    .lex "$past", $P940
.annotate 'line', 363
    find_lex $P943, "$/"
    unless_null $P943, vivify_378
    $P943 = root_new ['parrot';'Hash']
  vivify_378:
    set $P944, $P943["circumfix"]
    unless_null $P944, vivify_379
    new $P944, "Undef"
  vivify_379:
    if $P944, if_942
.annotate 'line', 364
    get_hll_global $P949, ["PAST"], "Val"
    find_lex $P950, "$/"
    unless_null $P950, vivify_380
    $P950 = root_new ['parrot';'Hash']
  vivify_380:
    set $P951, $P950["not"]
    unless_null $P951, vivify_381
    new $P951, "Undef"
  vivify_381:
    isfalse $I952, $P951
    $P953 = $P949."new"($I952 :named("value"))
    set $P941, $P953
.annotate 'line', 363
    goto if_942_end
  if_942:
    find_lex $P945, "$/"
    unless_null $P945, vivify_382
    $P945 = root_new ['parrot';'Hash']
  vivify_382:
    set $P946, $P945["circumfix"]
    unless_null $P946, vivify_383
    $P946 = root_new ['parrot';'ResizablePMCArray']
  vivify_383:
    set $P947, $P946[0]
    unless_null $P947, vivify_384
    new $P947, "Undef"
  vivify_384:
    $P948 = $P947."ast"()
    set $P941, $P948
  if_942_end:
    store_lex "$past", $P941
.annotate 'line', 365
    find_lex $P954, "$past"
    find_lex $P955, "$/"
    unless_null $P955, vivify_385
    $P955 = root_new ['parrot';'Hash']
  vivify_385:
    set $P956, $P955["identifier"]
    unless_null $P956, vivify_386
    new $P956, "Undef"
  vivify_386:
    set $S957, $P956
    $P954."named"($S957)
.annotate 'line', 366
    find_lex $P958, "$/"
    find_lex $P959, "$past"
    $P960 = $P958."!make"($P959)
.annotate 'line', 361
    .return ($P960)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable"  :subid("69_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_962
    .param pmc param_963
.annotate 'line', 369
    .const 'Sub' $P976 = "70_1300057363.399" 
    capture_lex $P976
    .lex "self", param_962
    .lex "$/", param_963
.annotate 'line', 370
    new $P964, "Undef"
    .lex "$past", $P964
.annotate 'line', 369
    find_lex $P965, "$past"
.annotate 'line', 371
    find_lex $P967, "$/"
    unless_null $P967, vivify_387
    $P967 = root_new ['parrot';'Hash']
  vivify_387:
    set $P968, $P967["postcircumfix"]
    unless_null $P968, vivify_388
    new $P968, "Undef"
  vivify_388:
    if $P968, if_966
.annotate 'line', 375
    .const 'Sub' $P976 = "70_1300057363.399" 
    capture_lex $P976
    $P976()
    goto if_966_end
  if_966:
.annotate 'line', 372
    find_lex $P969, "$/"
    unless_null $P969, vivify_405
    $P969 = root_new ['parrot';'Hash']
  vivify_405:
    set $P970, $P969["postcircumfix"]
    unless_null $P970, vivify_406
    new $P970, "Undef"
  vivify_406:
    $P971 = $P970."ast"()
    store_lex "$past", $P971
.annotate 'line', 373
    find_lex $P972, "$past"
    get_hll_global $P973, ["PAST"], "Var"
    $P974 = $P973."new"("$/" :named("name"))
    $P972."unshift"($P974)
  if_966_end:
.annotate 'line', 405
    find_lex $P1048, "$/"
    find_lex $P1049, "$past"
    $P1050 = $P1048."!make"($P1049)
.annotate 'line', 369
    .return ($P1050)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block975"  :anon :subid("70_1300057363.399") :outer("69_1300057363.399")
.annotate 'line', 376
    $P977 = root_new ['parrot';'ResizablePMCArray']
    .lex "@name", $P977
    get_hll_global $P978, ["NQP"], "Compiler"
    find_lex $P979, "$/"
    set $S980, $P979
    $P981 = $P978."parse_name"($S980)
    store_lex "@name", $P981
.annotate 'line', 377
    get_hll_global $P982, ["PAST"], "Var"
    find_lex $P983, "@name"
    $P984 = $P983."pop"()
    set $S985, $P984
    $P986 = $P982."new"($S985 :named("name"))
    store_lex "$past", $P986
.annotate 'line', 378
    find_lex $P988, "@name"
    unless $P988, if_987_end
.annotate 'line', 379
    find_lex $P990, "@name"
    unless_null $P990, vivify_389
    $P990 = root_new ['parrot';'ResizablePMCArray']
  vivify_389:
    set $P991, $P990[0]
    unless_null $P991, vivify_390
    new $P991, "Undef"
  vivify_390:
    set $S992, $P991
    iseq $I993, $S992, "GLOBAL"
    unless $I993, if_989_end
    find_lex $P994, "@name"
    $P994."shift"()
  if_989_end:
.annotate 'line', 380
    find_lex $P995, "$past"
    find_lex $P996, "@name"
    $P995."namespace"($P996)
.annotate 'line', 381
    find_lex $P997, "$past"
    $P997."scope"("package")
.annotate 'line', 382
    find_lex $P998, "$past"
    find_lex $P999, "$/"
    unless_null $P999, vivify_391
    $P999 = root_new ['parrot';'Hash']
  vivify_391:
    set $P1000, $P999["sigil"]
    unless_null $P1000, vivify_392
    new $P1000, "Undef"
  vivify_392:
    $P1001 = "vivitype"($P1000)
    $P998."viviself"($P1001)
.annotate 'line', 383
    find_lex $P1002, "$past"
    $P1002."lvalue"(1)
  if_987_end:
.annotate 'line', 385
    find_lex $P1005, "$/"
    unless_null $P1005, vivify_393
    $P1005 = root_new ['parrot';'Hash']
  vivify_393:
    set $P1006, $P1005["twigil"]
    unless_null $P1006, vivify_394
    $P1006 = root_new ['parrot';'ResizablePMCArray']
  vivify_394:
    set $P1007, $P1006[0]
    unless_null $P1007, vivify_395
    new $P1007, "Undef"
  vivify_395:
    set $S1008, $P1007
    iseq $I1009, $S1008, "*"
    if $I1009, if_1004
.annotate 'line', 398
    find_lex $P1031, "$/"
    unless_null $P1031, vivify_396
    $P1031 = root_new ['parrot';'Hash']
  vivify_396:
    set $P1032, $P1031["twigil"]
    unless_null $P1032, vivify_397
    $P1032 = root_new ['parrot';'ResizablePMCArray']
  vivify_397:
    set $P1033, $P1032[0]
    unless_null $P1033, vivify_398
    new $P1033, "Undef"
  vivify_398:
    set $S1034, $P1033
    iseq $I1035, $S1034, "!"
    if $I1035, if_1030
    new $P1029, 'Integer'
    set $P1029, $I1035
    goto if_1030_end
  if_1030:
.annotate 'line', 399
    find_lex $P1036, "$past"
    get_hll_global $P1037, ["PAST"], "Var"
    $P1038 = $P1037."new"("self" :named("name"))
    $P1036."push"($P1038)
.annotate 'line', 400
    find_lex $P1039, "$past"
    $P1039."scope"("attribute")
.annotate 'line', 401
    find_lex $P1040, "$past"
    find_lex $P1041, "$/"
    unless_null $P1041, vivify_399
    $P1041 = root_new ['parrot';'Hash']
  vivify_399:
    set $P1042, $P1041["sigil"]
    unless_null $P1042, vivify_400
    new $P1042, "Undef"
  vivify_400:
    $P1043 = "vivitype"($P1042)
    $P1040."viviself"($P1043)
.annotate 'line', 402
    find_lex $P1044, "$past"
    get_hll_global $P1045, ["PAST"], "Var"
    $P1046 = $P1045."new"("$?CLASS" :named("name"))
    $P1047 = $P1044."push"($P1046)
.annotate 'line', 398
    set $P1029, $P1047
  if_1030_end:
    set $P1003, $P1029
.annotate 'line', 385
    goto if_1004_end
  if_1004:
.annotate 'line', 386
    find_lex $P1010, "$past"
    $P1010."scope"("contextual")
.annotate 'line', 387
    find_lex $P1011, "$past"
.annotate 'line', 388
    get_hll_global $P1012, ["PAST"], "Var"
.annotate 'line', 390
    find_lex $P1013, "$/"
    unless_null $P1013, vivify_401
    $P1013 = root_new ['parrot';'Hash']
  vivify_401:
    set $P1014, $P1013["sigil"]
    unless_null $P1014, vivify_402
    new $P1014, "Undef"
  vivify_402:
    set $S1015, $P1014
    new $P1016, 'String'
    set $P1016, $S1015
    find_lex $P1017, "$/"
    unless_null $P1017, vivify_403
    $P1017 = root_new ['parrot';'Hash']
  vivify_403:
    set $P1018, $P1017["desigilname"]
    unless_null $P1018, vivify_404
    new $P1018, "Undef"
  vivify_404:
    concat $P1019, $P1016, $P1018
.annotate 'line', 392
    get_hll_global $P1020, ["PAST"], "Op"
    new $P1021, "String"
    assign $P1021, "Contextual "
    find_lex $P1022, "$/"
    set $S1023, $P1022
    concat $P1024, $P1021, $S1023
    concat $P1025, $P1024, " not found"
    $P1026 = $P1020."new"($P1025, "die" :named("pirop"))
    $P1027 = $P1012."new"("package" :named("scope"), "" :named("namespace"), $P1019 :named("name"), $P1026 :named("viviself"))
.annotate 'line', 388
    $P1028 = $P1011."viviself"($P1027)
.annotate 'line', 385
    set $P1003, $P1028
  if_1004_end:
.annotate 'line', 375
    .return ($P1003)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<module>"  :subid("71_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1052
    .param pmc param_1053
.annotate 'line', 408
    .lex "self", param_1052
    .lex "$/", param_1053
    find_lex $P1054, "$/"
    find_lex $P1055, "$/"
    unless_null $P1055, vivify_407
    $P1055 = root_new ['parrot';'Hash']
  vivify_407:
    set $P1056, $P1055["package_def"]
    unless_null $P1056, vivify_408
    new $P1056, "Undef"
  vivify_408:
    $P1057 = $P1056."ast"()
    $P1058 = $P1054."!make"($P1057)
    .return ($P1058)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<knowhow>"  :subid("72_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1060
    .param pmc param_1061
.annotate 'line', 409
    .lex "self", param_1060
    .lex "$/", param_1061
    find_lex $P1062, "$/"
    find_lex $P1063, "$/"
    unless_null $P1063, vivify_409
    $P1063 = root_new ['parrot';'Hash']
  vivify_409:
    set $P1064, $P1063["package_def"]
    unless_null $P1064, vivify_410
    new $P1064, "Undef"
  vivify_410:
    $P1065 = $P1064."ast"()
    $P1066 = $P1062."!make"($P1065)
    .return ($P1066)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<class>"  :subid("73_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1068
    .param pmc param_1069
.annotate 'line', 410
    .lex "self", param_1068
    .lex "$/", param_1069
    find_lex $P1070, "$/"
    find_lex $P1071, "$/"
    unless_null $P1071, vivify_411
    $P1071 = root_new ['parrot';'Hash']
  vivify_411:
    set $P1072, $P1071["package_def"]
    unless_null $P1072, vivify_412
    new $P1072, "Undef"
  vivify_412:
    $P1073 = $P1072."ast"()
    $P1074 = $P1070."!make"($P1073)
    .return ($P1074)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<grammar>"  :subid("74_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1076
    .param pmc param_1077
.annotate 'line', 411
    .lex "self", param_1076
    .lex "$/", param_1077
    find_lex $P1078, "$/"
    find_lex $P1079, "$/"
    unless_null $P1079, vivify_413
    $P1079 = root_new ['parrot';'Hash']
  vivify_413:
    set $P1080, $P1079["package_def"]
    unless_null $P1080, vivify_414
    new $P1080, "Undef"
  vivify_414:
    $P1081 = $P1080."ast"()
    $P1082 = $P1078."!make"($P1081)
    .return ($P1082)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<role>"  :subid("75_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1084
    .param pmc param_1085
.annotate 'line', 412
    .lex "self", param_1084
    .lex "$/", param_1085
    find_lex $P1086, "$/"
    find_lex $P1087, "$/"
    unless_null $P1087, vivify_415
    $P1087 = root_new ['parrot';'Hash']
  vivify_415:
    set $P1088, $P1087["package_def"]
    unless_null $P1088, vivify_416
    new $P1088, "Undef"
  vivify_416:
    $P1089 = $P1088."ast"()
    $P1090 = $P1086."!make"($P1089)
    .return ($P1090)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<native>"  :subid("76_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1092
    .param pmc param_1093
.annotate 'line', 413
    .lex "self", param_1092
    .lex "$/", param_1093
    find_lex $P1094, "$/"
    find_lex $P1095, "$/"
    unless_null $P1095, vivify_417
    $P1095 = root_new ['parrot';'Hash']
  vivify_417:
    set $P1096, $P1095["package_def"]
    unless_null $P1096, vivify_418
    new $P1096, "Undef"
  vivify_418:
    $P1097 = $P1096."ast"()
    $P1098 = $P1094."!make"($P1097)
    .return ($P1098)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "package_def"  :subid("77_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1100
    .param pmc param_1101
.annotate 'line', 415
    .const 'Sub' $P1250 = "79_1300057363.399" 
    capture_lex $P1250
    .const 'Sub' $P1199 = "78_1300057363.399" 
    capture_lex $P1199
    .lex "self", param_1100
    .lex "$/", param_1101
.annotate 'line', 417
    $P1102 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P1102
.annotate 'line', 418
    new $P1103, "Undef"
    .lex "$name", $P1103
.annotate 'line', 419
    new $P1104, "Undef"
    .lex "$how", $P1104
.annotate 'line', 422
    new $P1105, "Undef"
    .lex "$past", $P1105
.annotate 'line', 417
    find_lex $P1106, "$/"
    unless_null $P1106, vivify_419
    $P1106 = root_new ['parrot';'Hash']
  vivify_419:
    set $P1107, $P1106["name"]
    unless_null $P1107, vivify_420
    $P1107 = root_new ['parrot';'Hash']
  vivify_420:
    set $P1108, $P1107["identifier"]
    unless_null $P1108, vivify_421
    new $P1108, "Undef"
  vivify_421:
    clone $P1109, $P1108
    store_lex "@ns", $P1109
.annotate 'line', 418
    find_lex $P1110, "@ns"
    $P1111 = $P1110."pop"()
    set $S1112, $P1111
    new $P1113, 'String'
    set $P1113, $S1112
    store_lex "$name", $P1113
.annotate 'line', 419
    find_dynamic_lex $P1114, "$*PKGDECL"
    unless_null $P1114, vivify_422
    get_hll_global $P1114, "$PKGDECL"
    unless_null $P1114, vivify_423
    die "Contextual $*PKGDECL not found"
  vivify_423:
  vivify_422:
    find_dynamic_lex $P1115, "%*HOW"
    unless_null $P1115, vivify_424
    get_hll_global $P1115, "%HOW"
    unless_null $P1115, vivify_425
    die "Contextual %*HOW not found"
  vivify_425:
  vivify_424:
    set $P1116, $P1115[$P1114]
    unless_null $P1116, vivify_426
    new $P1116, "Undef"
  vivify_426:
    store_lex "$how", $P1116
.annotate 'line', 422
    find_lex $P1119, "$/"
    unless_null $P1119, vivify_427
    $P1119 = root_new ['parrot';'Hash']
  vivify_427:
    set $P1120, $P1119["block"]
    unless_null $P1120, vivify_428
    new $P1120, "Undef"
  vivify_428:
    if $P1120, if_1118
    find_lex $P1124, "$/"
    unless_null $P1124, vivify_429
    $P1124 = root_new ['parrot';'Hash']
  vivify_429:
    set $P1125, $P1124["comp_unit"]
    unless_null $P1125, vivify_430
    new $P1125, "Undef"
  vivify_430:
    $P1126 = $P1125."ast"()
    set $P1117, $P1126
    goto if_1118_end
  if_1118:
    find_lex $P1121, "$/"
    unless_null $P1121, vivify_431
    $P1121 = root_new ['parrot';'Hash']
  vivify_431:
    set $P1122, $P1121["block"]
    unless_null $P1122, vivify_432
    new $P1122, "Undef"
  vivify_432:
    $P1123 = $P1122."ast"()
    set $P1117, $P1123
  if_1118_end:
    store_lex "$past", $P1117
.annotate 'line', 425
    find_dynamic_lex $P1130, "$*SCOPE"
    unless_null $P1130, vivify_433
    get_hll_global $P1130, "$SCOPE"
    unless_null $P1130, vivify_434
    die "Contextual $*SCOPE not found"
  vivify_434:
  vivify_433:
    set $S1131, $P1130
    iseq $I1132, $S1131, "our"
    unless $I1132, unless_1129
    new $P1128, 'Integer'
    set $P1128, $I1132
    goto unless_1129_end
  unless_1129:
    find_dynamic_lex $P1133, "$*SCOPE"
    unless_null $P1133, vivify_435
    get_hll_global $P1133, "$SCOPE"
    unless_null $P1133, vivify_436
    die "Contextual $*SCOPE not found"
  vivify_436:
  vivify_435:
    set $S1134, $P1133
    iseq $I1135, $S1134, ""
    new $P1128, 'Integer'
    set $P1128, $I1135
  unless_1129_end:
    if $P1128, if_1127
.annotate 'line', 430
    find_lex $P1145, "$/"
    $P1146 = $P1145."CURSOR"()
    find_dynamic_lex $P1147, "$*SCOPE"
    unless_null $P1147, vivify_437
    get_hll_global $P1147, "$SCOPE"
    unless_null $P1147, vivify_438
    die "Contextual $*SCOPE not found"
  vivify_438:
  vivify_437:
    concat $P1148, $P1147, " scoped packages are not supported"
    $P1146."panic"($P1148)
.annotate 'line', 429
    goto if_1127_end
  if_1127:
.annotate 'line', 426
    find_lex $P1136, "$past"
    find_lex $P1137, "$/"
    unless_null $P1137, vivify_439
    $P1137 = root_new ['parrot';'Hash']
  vivify_439:
    set $P1138, $P1137["name"]
    unless_null $P1138, vivify_440
    $P1138 = root_new ['parrot';'Hash']
  vivify_440:
    set $P1139, $P1138["identifier"]
    unless_null $P1139, vivify_441
    new $P1139, "Undef"
  vivify_441:
    $P1136."namespace"($P1139)
.annotate 'line', 427
    find_dynamic_lex $P1140, "$*SC"
    unless_null $P1140, vivify_442
    get_hll_global $P1140, "$SC"
    unless_null $P1140, vivify_443
    die "Contextual $*SC not found"
  vivify_443:
  vivify_442:
    find_lex $P1141, "$/"
    unless_null $P1141, vivify_444
    $P1141 = root_new ['parrot';'Hash']
  vivify_444:
    set $P1142, $P1141["name"]
    unless_null $P1142, vivify_445
    $P1142 = root_new ['parrot';'Hash']
  vivify_445:
    set $P1143, $P1142["identifier"]
    unless_null $P1143, vivify_446
    new $P1143, "Undef"
  vivify_446:
    find_dynamic_lex $P1144, "$*PKGMETA"
    unless_null $P1144, vivify_447
    get_hll_global $P1144, "$PKGMETA"
    unless_null $P1144, vivify_448
    die "Contextual $*PKGMETA not found"
  vivify_448:
  vivify_447:
    $P1140."install_package_symbol"($P1143, $P1144)
  if_1127_end:
.annotate 'line', 434
    find_dynamic_lex $P1149, "$*PACKAGE-SETUP"
    unless_null $P1149, vivify_449
    get_hll_global $P1149, "$PACKAGE-SETUP"
    unless_null $P1149, vivify_450
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_450:
  vivify_449:
    get_hll_global $P1150, ["PAST"], "Stmts"
.annotate 'line', 435
    get_hll_global $P1151, ["PAST"], "Op"
.annotate 'line', 436
    get_hll_global $P1152, ["PAST"], "Var"
    $P1153 = $P1152."new"("type_obj" :named("name"), "register" :named("scope"), 1 :named("isdecl"))
.annotate 'line', 437
    find_dynamic_lex $P1154, "$*SC"
    unless_null $P1154, vivify_451
    get_hll_global $P1154, "$SC"
    unless_null $P1154, vivify_452
    die "Contextual $*SC not found"
  vivify_452:
  vivify_451:
    find_dynamic_lex $P1155, "$*PKGMETA"
    unless_null $P1155, vivify_453
    get_hll_global $P1155, "$PKGMETA"
    unless_null $P1155, vivify_454
    die "Contextual $*PKGMETA not found"
  vivify_454:
  vivify_453:
    $P1156 = $P1154."get_slot_past_for_object"($P1155)
    $P1157 = $P1151."new"($P1153, $P1156, "bind" :named("pasttype"))
.annotate 'line', 439
    get_hll_global $P1158, ["PAST"], "Op"
.annotate 'line', 440
    get_hll_global $P1159, ["PAST"], "Var"
    $P1160 = $P1159."new"("$?CLASS" :named("name"))
.annotate 'line', 441
    get_hll_global $P1161, ["PAST"], "Var"
    $P1162 = $P1161."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1163 = $P1158."new"($P1160, $P1162, "bind" :named("pasttype"))
.annotate 'line', 439
    $P1164 = $P1150."new"($P1157, $P1163)
.annotate 'line', 434
    $P1149."unshift"($P1164)
.annotate 'line', 450
    find_lex $P1168, "$how"
    can $I1169, $P1168, "parametric"
    if $I1169, if_1167
    new $P1166, 'Integer'
    set $P1166, $I1169
    goto if_1167_end
  if_1167:
    find_lex $P1170, "$how"
    find_lex $P1171, "$how"
    $P1172 = $P1170."parametric"($P1171)
    set $P1166, $P1172
  if_1167_end:
    if $P1166, if_1165
.annotate 'line', 466
    find_lex $P1190, "$past"
    $P1190."blocktype"("immediate")
.annotate 'line', 467
    find_lex $P1191, "$past"
    get_hll_global $P1192, ["PAST"], "Var"
    $P1193 = $P1192."new"("$?CLASS" :named("name"), "package" :named("scope"), 1 :named("isdecl"))
    $P1191."unshift"($P1193)
.annotate 'line', 468
    find_lex $P1194, "$past"
    $P1194."symbol"("$?CLASS", "package" :named("scope"))
.annotate 'line', 465
    goto if_1165_end
  if_1165:
.annotate 'line', 451
    find_lex $P1173, "$past"
    $P1173."blocktype"("declaration")
.annotate 'line', 452
    find_lex $P1174, "$past"
    get_hll_global $P1175, ["PAST"], "Var"
    $P1176 = $P1175."new"("$?CLASS" :named("name"), "parameter" :named("scope"))
    $P1174."unshift"($P1176)
.annotate 'line', 453
    find_lex $P1177, "$past"
    $P1177."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 454
    find_dynamic_lex $P1178, "$*PACKAGE-SETUP"
    unless_null $P1178, vivify_455
    get_hll_global $P1178, "$PACKAGE-SETUP"
    unless_null $P1178, vivify_456
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_456:
  vivify_455:
    get_hll_global $P1179, ["PAST"], "Op"
.annotate 'line', 456
    get_hll_global $P1180, ["PAST"], "Op"
.annotate 'line', 459
    get_hll_global $P1181, ["PAST"], "Var"
    $P1182 = $P1181."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1183 = $P1180."new"($P1182, "get_how PP" :named("pirop"))
.annotate 'line', 461
    get_hll_global $P1184, ["PAST"], "Var"
    $P1185 = $P1184."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 462
    get_hll_global $P1186, ["PAST"], "Val"
    find_lex $P1187, "$past"
    $P1188 = $P1186."new"($P1187 :named("value"))
    $P1189 = $P1179."new"($P1183, $P1185, $P1188, "callmethod" :named("pasttype"), "set_body_block" :named("name"))
.annotate 'line', 454
    $P1178."push"($P1189)
  if_1165_end:
.annotate 'line', 473
    find_lex $P1196, "$/"
    unless_null $P1196, vivify_457
    $P1196 = root_new ['parrot';'Hash']
  vivify_457:
    set $P1197, $P1196["parent"]
    unless_null $P1197, vivify_458
    new $P1197, "Undef"
  vivify_458:
    if $P1197, if_1195
.annotate 'line', 487
    find_dynamic_lex $P1227, "$*PKGDECL"
    unless_null $P1227, vivify_459
    get_hll_global $P1227, "$PKGDECL"
    unless_null $P1227, vivify_460
    die "Contextual $*PKGDECL not found"
  vivify_460:
  vivify_459:
    set $S1228, $P1227
    iseq $I1229, $S1228, "grammar"
    unless $I1229, if_1226_end
.annotate 'line', 488
    find_dynamic_lex $P1230, "$*PACKAGE-SETUP"
    unless_null $P1230, vivify_461
    get_hll_global $P1230, "$PACKAGE-SETUP"
    unless_null $P1230, vivify_462
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_462:
  vivify_461:
    get_hll_global $P1231, ["PAST"], "Op"
.annotate 'line', 490
    get_hll_global $P1232, ["PAST"], "Op"
.annotate 'line', 493
    get_hll_global $P1233, ["PAST"], "Var"
    $P1234 = $P1233."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1235 = $P1232."new"($P1234, "get_how PP" :named("pirop"))
.annotate 'line', 495
    get_hll_global $P1236, ["PAST"], "Var"
    $P1237 = $P1236."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 496
    get_hll_global $P1238, ["PAST"], "Var"
    $P1239 = $P1238."new"("Cursor" :named("name"), "Regex" :named("namespace"), "package" :named("scope"))
    $P1240 = $P1231."new"($P1235, $P1237, $P1239, "callmethod" :named("pasttype"), "add_parent" :named("name"))
.annotate 'line', 488
    $P1230."push"($P1240)
  if_1226_end:
.annotate 'line', 487
    goto if_1195_end
  if_1195:
.annotate 'line', 473
    .const 'Sub' $P1199 = "78_1300057363.399" 
    capture_lex $P1199
    $P1199()
  if_1195_end:
.annotate 'line', 501
    find_lex $P1242, "$/"
    unless_null $P1242, vivify_469
    $P1242 = root_new ['parrot';'Hash']
  vivify_469:
    set $P1243, $P1242["role"]
    unless_null $P1243, vivify_470
    new $P1243, "Undef"
  vivify_470:
    unless $P1243, if_1241_end
.annotate 'line', 502
    find_lex $P1245, "$/"
    unless_null $P1245, vivify_471
    $P1245 = root_new ['parrot';'Hash']
  vivify_471:
    set $P1246, $P1245["role"]
    unless_null $P1246, vivify_472
    new $P1246, "Undef"
  vivify_472:
    defined $I1247, $P1246
    unless $I1247, for_undef_473
    iter $P1244, $P1246
    new $P1277, 'ExceptionHandler'
    set_label $P1277, loop1276_handler
    $P1277."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1277
  loop1276_test:
    unless $P1244, loop1276_done
    shift $P1248, $P1244
  loop1276_redo:
    .const 'Sub' $P1250 = "79_1300057363.399" 
    capture_lex $P1250
    $P1250($P1248)
  loop1276_next:
    goto loop1276_test
  loop1276_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1278, exception, 'type'
    eq $P1278, .CONTROL_LOOP_NEXT, loop1276_next
    eq $P1278, .CONTROL_LOOP_REDO, loop1276_redo
  loop1276_done:
    pop_eh 
  for_undef_473:
  if_1241_end:
.annotate 'line', 519
    find_dynamic_lex $P1279, "$*PACKAGE-SETUP"
    unless_null $P1279, vivify_478
    get_hll_global $P1279, "$PACKAGE-SETUP"
    unless_null $P1279, vivify_479
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_479:
  vivify_478:
    get_hll_global $P1280, ["PAST"], "Op"
.annotate 'line', 521
    get_hll_global $P1281, ["PAST"], "Op"
.annotate 'line', 524
    get_hll_global $P1282, ["PAST"], "Var"
    $P1283 = $P1282."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1284 = $P1281."new"($P1283, "get_how PP" :named("pirop"))
.annotate 'line', 526
    get_hll_global $P1285, ["PAST"], "Var"
    $P1286 = $P1285."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1287 = $P1280."new"($P1284, $P1286, "callmethod" :named("pasttype"), "compose" :named("name"))
.annotate 'line', 519
    $P1279."push"($P1287)
.annotate 'line', 530
    find_lex $P1288, "$past"
    $P1289 = $P1288."loadinit"()
    get_hll_global $P1290, ["PAST"], "Block"
    find_dynamic_lex $P1291, "$*PACKAGE-SETUP"
    unless_null $P1291, vivify_480
    get_hll_global $P1291, "$PACKAGE-SETUP"
    unless_null $P1291, vivify_481
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_481:
  vivify_480:
    $P1292 = $P1290."new"($P1291, "immediate" :named("blocktype"))
    $P1289."push"($P1292)
.annotate 'line', 532
    find_lex $P1293, "$/"
    find_lex $P1294, "$past"
    $P1295 = $P1293."!make"($P1294)
.annotate 'line', 415
    .return ($P1295)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1198"  :anon :subid("78_1300057363.399") :outer("77_1300057363.399")
.annotate 'line', 474
    $P1200 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P1200
.annotate 'line', 475
    new $P1201, "Undef"
    .lex "$name", $P1201
.annotate 'line', 474
    find_lex $P1202, "$/"
    unless_null $P1202, vivify_463
    $P1202 = root_new ['parrot';'Hash']
  vivify_463:
    set $P1203, $P1202["parent"]
    unless_null $P1203, vivify_464
    $P1203 = root_new ['parrot';'ResizablePMCArray']
  vivify_464:
    set $P1204, $P1203[0]
    unless_null $P1204, vivify_465
    $P1204 = root_new ['parrot';'Hash']
  vivify_465:
    set $P1205, $P1204["identifier"]
    unless_null $P1205, vivify_466
    new $P1205, "Undef"
  vivify_466:
    clone $P1206, $P1205
    store_lex "@ns", $P1206
.annotate 'line', 475
    find_lex $P1207, "@ns"
    $P1208 = $P1207."pop"()
    set $S1209, $P1208
    new $P1210, 'String'
    set $P1210, $S1209
    store_lex "$name", $P1210
.annotate 'line', 476
    find_dynamic_lex $P1211, "$*PACKAGE-SETUP"
    unless_null $P1211, vivify_467
    get_hll_global $P1211, "$PACKAGE-SETUP"
    unless_null $P1211, vivify_468
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_468:
  vivify_467:
    get_hll_global $P1212, ["PAST"], "Op"
.annotate 'line', 478
    get_hll_global $P1213, ["PAST"], "Op"
.annotate 'line', 481
    get_hll_global $P1214, ["PAST"], "Var"
    $P1215 = $P1214."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1216 = $P1213."new"($P1215, "get_how PP" :named("pirop"))
.annotate 'line', 483
    get_hll_global $P1217, ["PAST"], "Var"
    $P1218 = $P1217."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 484
    get_hll_global $P1219, ["PAST"], "Var"
    find_lex $P1220, "$name"
    set $S1221, $P1220
    find_lex $P1222, "@ns"
    $P1223 = $P1219."new"($S1221 :named("name"), $P1222 :named("namespace"), "package" :named("scope"))
    $P1224 = $P1212."new"($P1216, $P1218, $P1223, "callmethod" :named("pasttype"), "add_parent" :named("name"))
.annotate 'line', 476
    $P1225 = $P1211."push"($P1224)
.annotate 'line', 473
    .return ($P1225)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1249"  :anon :subid("79_1300057363.399") :outer("77_1300057363.399")
    .param pmc param_1253
.annotate 'line', 503
    $P1251 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P1251
.annotate 'line', 504
    new $P1252, "Undef"
    .lex "$name", $P1252
    .lex "$_", param_1253
.annotate 'line', 503
    find_lex $P1254, "$_"
    unless_null $P1254, vivify_474
    $P1254 = root_new ['parrot';'Hash']
  vivify_474:
    set $P1255, $P1254["identifier"]
    unless_null $P1255, vivify_475
    new $P1255, "Undef"
  vivify_475:
    clone $P1256, $P1255
    store_lex "@ns", $P1256
.annotate 'line', 504
    find_lex $P1257, "@ns"
    $P1258 = $P1257."pop"()
    set $S1259, $P1258
    new $P1260, 'String'
    set $P1260, $S1259
    store_lex "$name", $P1260
.annotate 'line', 505
    find_dynamic_lex $P1261, "$*PACKAGE-SETUP"
    unless_null $P1261, vivify_476
    get_hll_global $P1261, "$PACKAGE-SETUP"
    unless_null $P1261, vivify_477
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_477:
  vivify_476:
    get_hll_global $P1262, ["PAST"], "Op"
.annotate 'line', 507
    get_hll_global $P1263, ["PAST"], "Op"
.annotate 'line', 510
    get_hll_global $P1264, ["PAST"], "Var"
    $P1265 = $P1264."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1266 = $P1263."new"($P1265, "get_how PP" :named("pirop"))
.annotate 'line', 512
    get_hll_global $P1267, ["PAST"], "Var"
    $P1268 = $P1267."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 513
    get_hll_global $P1269, ["PAST"], "Var"
    find_lex $P1270, "$name"
    set $S1271, $P1270
    find_lex $P1272, "@ns"
    $P1273 = $P1269."new"($S1271 :named("name"), $P1272 :named("namespace"), "package" :named("scope"))
    $P1274 = $P1262."new"($P1266, $P1268, $P1273, "callmethod" :named("pasttype"), "add_role" :named("name"))
.annotate 'line', 505
    $P1275 = $P1261."push"($P1274)
.annotate 'line', 502
    .return ($P1275)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<my>"  :subid("80_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1297
    .param pmc param_1298
.annotate 'line', 535
    .lex "self", param_1297
    .lex "$/", param_1298
    find_lex $P1299, "$/"
    find_lex $P1300, "$/"
    unless_null $P1300, vivify_482
    $P1300 = root_new ['parrot';'Hash']
  vivify_482:
    set $P1301, $P1300["scoped"]
    unless_null $P1301, vivify_483
    new $P1301, "Undef"
  vivify_483:
    $P1302 = $P1301."ast"()
    $P1303 = $P1299."!make"($P1302)
    .return ($P1303)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<our>"  :subid("81_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1305
    .param pmc param_1306
.annotate 'line', 536
    .lex "self", param_1305
    .lex "$/", param_1306
    find_lex $P1307, "$/"
    find_lex $P1308, "$/"
    unless_null $P1308, vivify_484
    $P1308 = root_new ['parrot';'Hash']
  vivify_484:
    set $P1309, $P1308["scoped"]
    unless_null $P1309, vivify_485
    new $P1309, "Undef"
  vivify_485:
    $P1310 = $P1309."ast"()
    $P1311 = $P1307."!make"($P1310)
    .return ($P1311)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<has>"  :subid("82_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1313
    .param pmc param_1314
.annotate 'line', 537
    .lex "self", param_1313
    .lex "$/", param_1314
    find_lex $P1315, "$/"
    find_lex $P1316, "$/"
    unless_null $P1316, vivify_486
    $P1316 = root_new ['parrot';'Hash']
  vivify_486:
    set $P1317, $P1316["scoped"]
    unless_null $P1317, vivify_487
    new $P1317, "Undef"
  vivify_487:
    $P1318 = $P1317."ast"()
    $P1319 = $P1315."!make"($P1318)
    .return ($P1319)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scoped"  :subid("83_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1321
    .param pmc param_1322
.annotate 'line', 539
    .lex "self", param_1321
    .lex "$/", param_1322
.annotate 'line', 540
    find_lex $P1323, "$/"
    find_lex $P1326, "$/"
    unless_null $P1326, vivify_488
    $P1326 = root_new ['parrot';'Hash']
  vivify_488:
    set $P1327, $P1326["declarator"]
    unless_null $P1327, vivify_489
    new $P1327, "Undef"
  vivify_489:
    if $P1327, if_1325
.annotate 'line', 541
    find_lex $P1333, "$/"
    unless_null $P1333, vivify_490
    $P1333 = root_new ['parrot';'Hash']
  vivify_490:
    set $P1334, $P1333["multi_declarator"]
    unless_null $P1334, vivify_491
    new $P1334, "Undef"
  vivify_491:
    if $P1334, if_1332
.annotate 'line', 542
    find_lex $P1338, "$/"
    unless_null $P1338, vivify_492
    $P1338 = root_new ['parrot';'Hash']
  vivify_492:
    set $P1339, $P1338["package_declarator"]
    unless_null $P1339, vivify_493
    new $P1339, "Undef"
  vivify_493:
    $P1340 = $P1339."ast"()
    set $P1331, $P1340
.annotate 'line', 541
    goto if_1332_end
  if_1332:
    find_lex $P1335, "$/"
    unless_null $P1335, vivify_494
    $P1335 = root_new ['parrot';'Hash']
  vivify_494:
    set $P1336, $P1335["multi_declarator"]
    unless_null $P1336, vivify_495
    new $P1336, "Undef"
  vivify_495:
    $P1337 = $P1336."ast"()
    set $P1331, $P1337
  if_1332_end:
    set $P1324, $P1331
.annotate 'line', 540
    goto if_1325_end
  if_1325:
    find_lex $P1328, "$/"
    unless_null $P1328, vivify_496
    $P1328 = root_new ['parrot';'Hash']
  vivify_496:
    set $P1329, $P1328["declarator"]
    unless_null $P1329, vivify_497
    new $P1329, "Undef"
  vivify_497:
    $P1330 = $P1329."ast"()
    set $P1324, $P1330
  if_1325_end:
    $P1341 = $P1323."!make"($P1324)
.annotate 'line', 539
    .return ($P1341)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "declarator"  :subid("84_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1343
    .param pmc param_1344
.annotate 'line', 545
    .lex "self", param_1343
    .lex "$/", param_1344
.annotate 'line', 546
    find_lex $P1345, "$/"
.annotate 'line', 547
    find_lex $P1348, "$/"
    unless_null $P1348, vivify_498
    $P1348 = root_new ['parrot';'Hash']
  vivify_498:
    set $P1349, $P1348["routine_declarator"]
    unless_null $P1349, vivify_499
    new $P1349, "Undef"
  vivify_499:
    if $P1349, if_1347
.annotate 'line', 548
    find_lex $P1353, "$/"
    unless_null $P1353, vivify_500
    $P1353 = root_new ['parrot';'Hash']
  vivify_500:
    set $P1354, $P1353["variable_declarator"]
    unless_null $P1354, vivify_501
    new $P1354, "Undef"
  vivify_501:
    $P1355 = $P1354."ast"()
    set $P1346, $P1355
.annotate 'line', 547
    goto if_1347_end
  if_1347:
    find_lex $P1350, "$/"
    unless_null $P1350, vivify_502
    $P1350 = root_new ['parrot';'Hash']
  vivify_502:
    set $P1351, $P1350["routine_declarator"]
    unless_null $P1351, vivify_503
    new $P1351, "Undef"
  vivify_503:
    $P1352 = $P1351."ast"()
    set $P1346, $P1352
  if_1347_end:
    $P1356 = $P1345."!make"($P1346)
.annotate 'line', 545
    .return ($P1356)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<multi>"  :subid("85_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1358
    .param pmc param_1359
.annotate 'line', 551
    .lex "self", param_1358
    .lex "$/", param_1359
    find_lex $P1360, "$/"
    find_lex $P1363, "$/"
    unless_null $P1363, vivify_504
    $P1363 = root_new ['parrot';'Hash']
  vivify_504:
    set $P1364, $P1363["declarator"]
    unless_null $P1364, vivify_505
    new $P1364, "Undef"
  vivify_505:
    if $P1364, if_1362
    find_lex $P1368, "$/"
    unless_null $P1368, vivify_506
    $P1368 = root_new ['parrot';'Hash']
  vivify_506:
    set $P1369, $P1368["routine_def"]
    unless_null $P1369, vivify_507
    new $P1369, "Undef"
  vivify_507:
    $P1370 = $P1369."ast"()
    set $P1361, $P1370
    goto if_1362_end
  if_1362:
    find_lex $P1365, "$/"
    unless_null $P1365, vivify_508
    $P1365 = root_new ['parrot';'Hash']
  vivify_508:
    set $P1366, $P1365["declarator"]
    unless_null $P1366, vivify_509
    new $P1366, "Undef"
  vivify_509:
    $P1367 = $P1366."ast"()
    set $P1361, $P1367
  if_1362_end:
    $P1371 = $P1360."!make"($P1361)
    .return ($P1371)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<proto>"  :subid("86_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1373
    .param pmc param_1374
.annotate 'line', 552
    .lex "self", param_1373
    .lex "$/", param_1374
    find_lex $P1375, "$/"
    find_lex $P1378, "$/"
    unless_null $P1378, vivify_510
    $P1378 = root_new ['parrot';'Hash']
  vivify_510:
    set $P1379, $P1378["declarator"]
    unless_null $P1379, vivify_511
    new $P1379, "Undef"
  vivify_511:
    if $P1379, if_1377
    find_lex $P1383, "$/"
    unless_null $P1383, vivify_512
    $P1383 = root_new ['parrot';'Hash']
  vivify_512:
    set $P1384, $P1383["routine_def"]
    unless_null $P1384, vivify_513
    new $P1384, "Undef"
  vivify_513:
    $P1385 = $P1384."ast"()
    set $P1376, $P1385
    goto if_1377_end
  if_1377:
    find_lex $P1380, "$/"
    unless_null $P1380, vivify_514
    $P1380 = root_new ['parrot';'Hash']
  vivify_514:
    set $P1381, $P1380["declarator"]
    unless_null $P1381, vivify_515
    new $P1381, "Undef"
  vivify_515:
    $P1382 = $P1381."ast"()
    set $P1376, $P1382
  if_1377_end:
    $P1386 = $P1375."!make"($P1376)
    .return ($P1386)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<null>"  :subid("87_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1388
    .param pmc param_1389
.annotate 'line', 553
    .lex "self", param_1388
    .lex "$/", param_1389
    find_lex $P1390, "$/"
    find_lex $P1391, "$/"
    unless_null $P1391, vivify_516
    $P1391 = root_new ['parrot';'Hash']
  vivify_516:
    set $P1392, $P1391["declarator"]
    unless_null $P1392, vivify_517
    new $P1392, "Undef"
  vivify_517:
    $P1393 = $P1392."ast"()
    $P1394 = $P1390."!make"($P1393)
    .return ($P1394)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable_declarator"  :subid("88_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1396
    .param pmc param_1397
.annotate 'line', 556
    .const 'Sub' $P1469 = "91_1300057363.399" 
    capture_lex $P1469
    .const 'Sub' $P1424 = "89_1300057363.399" 
    capture_lex $P1424
    .lex "self", param_1396
    .lex "$/", param_1397
.annotate 'line', 557
    new $P1398, "Undef"
    .lex "$past", $P1398
.annotate 'line', 558
    new $P1399, "Undef"
    .lex "$sigil", $P1399
.annotate 'line', 559
    new $P1400, "Undef"
    .lex "$name", $P1400
.annotate 'line', 560
    new $P1401, "Undef"
    .lex "$BLOCK", $P1401
.annotate 'line', 557
    find_lex $P1402, "$/"
    unless_null $P1402, vivify_518
    $P1402 = root_new ['parrot';'Hash']
  vivify_518:
    set $P1403, $P1402["variable"]
    unless_null $P1403, vivify_519
    new $P1403, "Undef"
  vivify_519:
    $P1404 = $P1403."ast"()
    store_lex "$past", $P1404
.annotate 'line', 558
    find_lex $P1405, "$/"
    unless_null $P1405, vivify_520
    $P1405 = root_new ['parrot';'Hash']
  vivify_520:
    set $P1406, $P1405["variable"]
    unless_null $P1406, vivify_521
    $P1406 = root_new ['parrot';'Hash']
  vivify_521:
    set $P1407, $P1406["sigil"]
    unless_null $P1407, vivify_522
    new $P1407, "Undef"
  vivify_522:
    store_lex "$sigil", $P1407
.annotate 'line', 559
    find_lex $P1408, "$past"
    $P1409 = $P1408."name"()
    store_lex "$name", $P1409
.annotate 'line', 560
    get_global $P1410, "@BLOCK"
    unless_null $P1410, vivify_523
    $P1410 = root_new ['parrot';'ResizablePMCArray']
  vivify_523:
    set $P1411, $P1410[0]
    unless_null $P1411, vivify_524
    new $P1411, "Undef"
  vivify_524:
    store_lex "$BLOCK", $P1411
.annotate 'line', 561
    find_lex $P1413, "$BLOCK"
    find_lex $P1414, "$name"
    $P1415 = $P1413."symbol"($P1414)
    unless $P1415, if_1412_end
.annotate 'line', 562
    find_lex $P1416, "$/"
    $P1417 = $P1416."CURSOR"()
    find_lex $P1418, "$name"
    $P1417."panic"("Redeclaration of symbol ", $P1418)
  if_1412_end:
.annotate 'line', 564
    find_dynamic_lex $P1420, "$*SCOPE"
    unless_null $P1420, vivify_525
    get_hll_global $P1420, "$SCOPE"
    unless_null $P1420, vivify_526
    die "Contextual $*SCOPE not found"
  vivify_526:
  vivify_525:
    set $S1421, $P1420
    iseq $I1422, $S1421, "has"
    if $I1422, if_1419
.annotate 'line', 589
    .const 'Sub' $P1469 = "91_1300057363.399" 
    capture_lex $P1469
    $P1469()
    goto if_1419_end
  if_1419:
.annotate 'line', 564
    .const 'Sub' $P1424 = "89_1300057363.399" 
    capture_lex $P1424
    $P1424()
  if_1419_end:
.annotate 'line', 597
    find_lex $P1493, "$/"
    find_lex $P1494, "$past"
    $P1495 = $P1493."!make"($P1494)
.annotate 'line', 556
    .return ($P1495)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1468"  :anon :subid("91_1300057363.399") :outer("88_1300057363.399")
.annotate 'line', 590
    new $P1470, "Undef"
    .lex "$scope", $P1470
.annotate 'line', 591
    new $P1471, "Undef"
    .lex "$decl", $P1471
.annotate 'line', 590
    find_dynamic_lex $P1474, "$*SCOPE"
    unless_null $P1474, vivify_527
    get_hll_global $P1474, "$SCOPE"
    unless_null $P1474, vivify_528
    die "Contextual $*SCOPE not found"
  vivify_528:
  vivify_527:
    set $S1475, $P1474
    iseq $I1476, $S1475, "our"
    if $I1476, if_1473
    new $P1478, "String"
    assign $P1478, "lexical"
    set $P1472, $P1478
    goto if_1473_end
  if_1473:
    new $P1477, "String"
    assign $P1477, "package"
    set $P1472, $P1477
  if_1473_end:
    store_lex "$scope", $P1472
.annotate 'line', 591
    get_hll_global $P1479, ["PAST"], "Var"
    find_lex $P1480, "$name"
    find_lex $P1481, "$scope"
.annotate 'line', 592
    find_lex $P1482, "$sigil"
    $P1483 = "vivitype"($P1482)
    find_lex $P1484, "$/"
    $P1485 = $P1479."new"($P1480 :named("name"), $P1481 :named("scope"), 1 :named("isdecl"), 1 :named("lvalue"), $P1483 :named("viviself"), $P1484 :named("node"))
.annotate 'line', 591
    store_lex "$decl", $P1485
.annotate 'line', 594
    find_lex $P1486, "$BLOCK"
    find_lex $P1487, "$name"
    find_lex $P1488, "$scope"
    $P1486."symbol"($P1487, $P1488 :named("scope"))
.annotate 'line', 595
    find_lex $P1489, "$BLOCK"
    unless_null $P1489, vivify_529
    $P1489 = root_new ['parrot';'ResizablePMCArray']
  vivify_529:
    set $P1490, $P1489[0]
    unless_null $P1490, vivify_530
    new $P1490, "Undef"
  vivify_530:
    find_lex $P1491, "$decl"
    $P1492 = $P1490."push"($P1491)
.annotate 'line', 589
    .return ($P1492)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1423"  :anon :subid("89_1300057363.399") :outer("88_1300057363.399")
.annotate 'line', 564
    .const 'Sub' $P1454 = "90_1300057363.399" 
    capture_lex $P1454
.annotate 'line', 566
    new $P1425, "Undef"
    .lex "$meta-attr-type", $P1425
.annotate 'line', 574
    new $P1426, "Undef"
    .lex "$meta_args", $P1426
.annotate 'line', 566
    find_dynamic_lex $P1429, "$*PKGDECL"
    unless_null $P1429, vivify_531
    get_hll_global $P1429, "$PKGDECL"
    unless_null $P1429, vivify_532
    die "Contextual $*PKGDECL not found"
  vivify_532:
  vivify_531:
    find_dynamic_lex $P1430, "%*HOW-METAATTR"
    unless_null $P1430, vivify_533
    get_hll_global $P1430, "%HOW-METAATTR"
    unless_null $P1430, vivify_534
    die "Contextual %*HOW-METAATTR not found"
  vivify_534:
  vivify_533:
    set $P1431, $P1430[$P1429]
    unless_null $P1431, vivify_535
    new $P1431, "Undef"
  vivify_535:
    unless $P1431, unless_1428
    set $P1427, $P1431
    goto unless_1428_end
  unless_1428:
    find_dynamic_lex $P1432, "$*DEFAULT-METAATTR"
    unless_null $P1432, vivify_536
    get_hll_global $P1432, "$DEFAULT-METAATTR"
    unless_null $P1432, vivify_537
    die "Contextual $*DEFAULT-METAATTR not found"
  vivify_537:
  vivify_536:
    set $P1427, $P1432
  unless_1428_end:
    store_lex "$meta-attr-type", $P1427
.annotate 'line', 567
    find_dynamic_lex $P1433, "$*PACKAGE-SETUP"
    unless_null $P1433, vivify_538
    get_hll_global $P1433, "$PACKAGE-SETUP"
    unless_null $P1433, vivify_539
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_539:
  vivify_538:
    get_hll_global $P1434, ["PAST"], "Op"
.annotate 'line', 569
    get_hll_global $P1435, ["PAST"], "Op"
.annotate 'line', 571
    get_hll_global $P1436, ["PAST"], "Var"
    $P1437 = $P1436."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1438 = $P1435."new"($P1437, "get_how PP" :named("pirop"))
.annotate 'line', 573
    get_hll_global $P1439, ["PAST"], "Var"
    $P1440 = $P1439."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 574
    get_hll_global $P1441, ["PAST"], "Op"
.annotate 'line', 576
    get_hll_global $P1442, ["PAST"], "Var"
    find_lex $P1443, "$meta-attr-type"
    $P1444 = $P1442."new"($P1443 :named("name"), "" :named("namespace"), "package" :named("scope"))
.annotate 'line', 577
    get_hll_global $P1445, ["PAST"], "Val"
    find_lex $P1446, "$name"
    $P1447 = $P1445."new"($P1446 :named("value"), "name" :named("named"))
    $P1448 = $P1441."new"($P1444, $P1447, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 574
    store_lex "$meta_args", $P1448
    $P1449 = $P1434."new"($P1438, $P1440, $P1448, "callmethod" :named("pasttype"), "add_attribute" :named("name"))
.annotate 'line', 567
    $P1433."push"($P1449)
.annotate 'line', 580
    find_lex $P1451, "$/"
    unless_null $P1451, vivify_540
    $P1451 = root_new ['parrot';'Hash']
  vivify_540:
    set $P1452, $P1451["typename"]
    unless_null $P1452, vivify_541
    new $P1452, "Undef"
  vivify_541:
    unless $P1452, if_1450_end
    .const 'Sub' $P1454 = "90_1300057363.399" 
    capture_lex $P1454
    $P1454()
  if_1450_end:
.annotate 'line', 586
    find_lex $P1464, "$BLOCK"
    find_lex $P1465, "$name"
    $P1464."symbol"($P1465, "attribute" :named("scope"))
.annotate 'line', 587
    get_hll_global $P1466, ["PAST"], "Stmts"
    $P1467 = $P1466."new"()
    store_lex "$past", $P1467
.annotate 'line', 564
    .return ($P1467)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1453"  :anon :subid("90_1300057363.399") :outer("89_1300057363.399")
.annotate 'line', 581
    new $P1455, "Undef"
    .lex "$type", $P1455
    find_lex $P1456, "$/"
    unless_null $P1456, vivify_542
    $P1456 = root_new ['parrot';'Hash']
  vivify_542:
    set $P1457, $P1456["typename"]
    unless_null $P1457, vivify_543
    $P1457 = root_new ['parrot';'ResizablePMCArray']
  vivify_543:
    set $P1458, $P1457[0]
    unless_null $P1458, vivify_544
    new $P1458, "Undef"
  vivify_544:
    $P1459 = $P1458."ast"()
    store_lex "$type", $P1459
.annotate 'line', 582
    find_lex $P1460, "$type"
    $P1460."named"("type")
.annotate 'line', 583
    find_lex $P1461, "$meta_args"
    find_lex $P1462, "$type"
    $P1463 = $P1461."push"($P1462)
.annotate 'line', 580
    .return ($P1463)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<sub>"  :subid("92_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1497
    .param pmc param_1498
.annotate 'line', 600
    .lex "self", param_1497
    .lex "$/", param_1498
    find_lex $P1499, "$/"
    find_lex $P1500, "$/"
    unless_null $P1500, vivify_545
    $P1500 = root_new ['parrot';'Hash']
  vivify_545:
    set $P1501, $P1500["routine_def"]
    unless_null $P1501, vivify_546
    new $P1501, "Undef"
  vivify_546:
    $P1502 = $P1501."ast"()
    $P1503 = $P1499."!make"($P1502)
    .return ($P1503)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<method>"  :subid("93_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1505
    .param pmc param_1506
.annotate 'line', 601
    .lex "self", param_1505
    .lex "$/", param_1506
    find_lex $P1507, "$/"
    find_lex $P1508, "$/"
    unless_null $P1508, vivify_547
    $P1508 = root_new ['parrot';'Hash']
  vivify_547:
    set $P1509, $P1508["method_def"]
    unless_null $P1509, vivify_548
    new $P1509, "Undef"
  vivify_548:
    $P1510 = $P1509."ast"()
    $P1511 = $P1507."!make"($P1510)
    .return ($P1511)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "routine_def"  :subid("94_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1513
    .param pmc param_1514
.annotate 'line', 603
    .const 'Sub' $P1751 = "100_1300057363.399" 
    capture_lex $P1751
    .const 'Sub' $P1534 = "95_1300057363.399" 
    capture_lex $P1534
    .lex "self", param_1513
    .lex "$/", param_1514
.annotate 'line', 606
    new $P1515, "Undef"
    .lex "$past", $P1515
.annotate 'line', 617
    new $P1516, "Undef"
    .lex "$block", $P1516
.annotate 'line', 603
    find_lex $P1517, "$past"
.annotate 'line', 607
    find_lex $P1519, "$/"
    unless_null $P1519, vivify_549
    $P1519 = root_new ['parrot';'Hash']
  vivify_549:
    set $P1520, $P1519["onlystar"]
    unless_null $P1520, vivify_550
    new $P1520, "Undef"
  vivify_550:
    if $P1520, if_1518
.annotate 'line', 611
    find_lex $P1522, "$/"
    unless_null $P1522, vivify_551
    $P1522 = root_new ['parrot';'Hash']
  vivify_551:
    set $P1523, $P1522["blockoid"]
    unless_null $P1523, vivify_552
    new $P1523, "Undef"
  vivify_552:
    $P1524 = $P1523."ast"()
    store_lex "$past", $P1524
.annotate 'line', 612
    find_lex $P1525, "$past"
    $P1525."blocktype"("declaration")
.annotate 'line', 613
    find_dynamic_lex $P1527, "$*RETURN_USED"
    unless_null $P1527, vivify_553
    get_hll_global $P1527, "$RETURN_USED"
    unless_null $P1527, vivify_554
    die "Contextual $*RETURN_USED not found"
  vivify_554:
  vivify_553:
    unless $P1527, if_1526_end
.annotate 'line', 614
    find_lex $P1528, "$past"
    $P1528."control"("return_pir")
  if_1526_end:
.annotate 'line', 610
    goto if_1518_end
  if_1518:
.annotate 'line', 608
    $P1521 = "only_star_block"()
    store_lex "$past", $P1521
  if_1518_end:
.annotate 'line', 617
    find_lex $P1529, "$past"
    store_lex "$block", $P1529
.annotate 'line', 619
    find_lex $P1531, "$/"
    unless_null $P1531, vivify_555
    $P1531 = root_new ['parrot';'Hash']
  vivify_555:
    set $P1532, $P1531["deflongname"]
    unless_null $P1532, vivify_556
    new $P1532, "Undef"
  vivify_556:
    unless $P1532, if_1530_end
    .const 'Sub' $P1534 = "95_1300057363.399" 
    capture_lex $P1534
    $P1534()
  if_1530_end:
.annotate 'line', 724
    find_lex $P1740, "$block"
    find_lex $P1741, "$past"
    unless_null $P1741, vivify_619
    $P1741 = root_new ['parrot';'Hash']
    store_lex "$past", $P1741
  vivify_619:
    set $P1741["block_past"], $P1740
.annotate 'line', 725
    find_lex $P1743, "$/"
    unless_null $P1743, vivify_620
    $P1743 = root_new ['parrot';'Hash']
  vivify_620:
    set $P1744, $P1743["trait"]
    unless_null $P1744, vivify_621
    new $P1744, "Undef"
  vivify_621:
    unless $P1744, if_1742_end
.annotate 'line', 726
    find_lex $P1746, "$/"
    unless_null $P1746, vivify_622
    $P1746 = root_new ['parrot';'Hash']
  vivify_622:
    set $P1747, $P1746["trait"]
    unless_null $P1747, vivify_623
    new $P1747, "Undef"
  vivify_623:
    defined $I1748, $P1747
    unless $I1748, for_undef_624
    iter $P1745, $P1747
    new $P1758, 'ExceptionHandler'
    set_label $P1758, loop1757_handler
    $P1758."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1758
  loop1757_test:
    unless $P1745, loop1757_done
    shift $P1749, $P1745
  loop1757_redo:
    .const 'Sub' $P1751 = "100_1300057363.399" 
    capture_lex $P1751
    $P1751($P1749)
  loop1757_next:
    goto loop1757_test
  loop1757_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1759, exception, 'type'
    eq $P1759, .CONTROL_LOOP_NEXT, loop1757_next
    eq $P1759, .CONTROL_LOOP_REDO, loop1757_redo
  loop1757_done:
    pop_eh 
  for_undef_624:
  if_1742_end:
.annotate 'line', 729
    find_lex $P1760, "$/"
    find_lex $P1761, "$past"
    $P1762 = $P1760."!make"($P1761)
.annotate 'line', 603
    .return ($P1762)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1533"  :anon :subid("95_1300057363.399") :outer("94_1300057363.399")
.annotate 'line', 619
    .const 'Sub' $P1656 = "99_1300057363.399" 
    capture_lex $P1656
    .const 'Sub' $P1567 = "96_1300057363.399" 
    capture_lex $P1567
.annotate 'line', 620
    new $P1535, "Undef"
    .lex "$name", $P1535
    find_lex $P1536, "$/"
    unless_null $P1536, vivify_557
    $P1536 = root_new ['parrot';'Hash']
  vivify_557:
    set $P1537, $P1536["sigil"]
    unless_null $P1537, vivify_558
    $P1537 = root_new ['parrot';'ResizablePMCArray']
  vivify_558:
    set $P1538, $P1537[0]
    unless_null $P1538, vivify_559
    new $P1538, "Undef"
  vivify_559:
    set $S1539, $P1538
    new $P1540, 'String'
    set $P1540, $S1539
    find_lex $P1541, "$/"
    unless_null $P1541, vivify_560
    $P1541 = root_new ['parrot';'Hash']
  vivify_560:
    set $P1542, $P1541["deflongname"]
    unless_null $P1542, vivify_561
    $P1542 = root_new ['parrot';'ResizablePMCArray']
  vivify_561:
    set $P1543, $P1542[0]
    unless_null $P1543, vivify_562
    new $P1543, "Undef"
  vivify_562:
    $S1544 = $P1543."ast"()
    concat $P1545, $P1540, $S1544
    store_lex "$name", $P1545
.annotate 'line', 621
    find_lex $P1546, "$past"
    find_lex $P1547, "$name"
    $P1546."name"($P1547)
.annotate 'line', 622
    find_dynamic_lex $P1553, "$*SCOPE"
    unless_null $P1553, vivify_563
    get_hll_global $P1553, "$SCOPE"
    unless_null $P1553, vivify_564
    die "Contextual $*SCOPE not found"
  vivify_564:
  vivify_563:
    set $S1554, $P1553
    iseq $I1555, $S1554, ""
    unless $I1555, unless_1552
    new $P1551, 'Integer'
    set $P1551, $I1555
    goto unless_1552_end
  unless_1552:
    find_dynamic_lex $P1556, "$*SCOPE"
    unless_null $P1556, vivify_565
    get_hll_global $P1556, "$SCOPE"
    unless_null $P1556, vivify_566
    die "Contextual $*SCOPE not found"
  vivify_566:
  vivify_565:
    set $S1557, $P1556
    iseq $I1558, $S1557, "my"
    new $P1551, 'Integer'
    set $P1551, $I1558
  unless_1552_end:
    unless $P1551, unless_1550
    set $P1549, $P1551
    goto unless_1550_end
  unless_1550:
    find_dynamic_lex $P1559, "$*SCOPE"
    unless_null $P1559, vivify_567
    get_hll_global $P1559, "$SCOPE"
    unless_null $P1559, vivify_568
    die "Contextual $*SCOPE not found"
  vivify_568:
  vivify_567:
    set $S1560, $P1559
    iseq $I1561, $S1560, "our"
    new $P1549, 'Integer'
    set $P1549, $I1561
  unless_1550_end:
    if $P1549, if_1548
.annotate 'line', 714
    find_lex $P1725, "$/"
    $P1726 = $P1725."CURSOR"()
    find_dynamic_lex $P1727, "$*SCOPE"
    unless_null $P1727, vivify_569
    get_hll_global $P1727, "$SCOPE"
    unless_null $P1727, vivify_570
    die "Contextual $*SCOPE not found"
  vivify_570:
  vivify_569:
    concat $P1728, $P1727, " scoped routines are not supported yet"
    $P1726."panic"($P1728)
.annotate 'line', 713
    goto if_1548_end
  if_1548:
.annotate 'line', 623
    find_dynamic_lex $P1563, "$*MULTINESS"
    unless_null $P1563, vivify_571
    get_hll_global $P1563, "$MULTINESS"
    unless_null $P1563, vivify_572
    die "Contextual $*MULTINESS not found"
  vivify_572:
  vivify_571:
    set $S1564, $P1563
    iseq $I1565, $S1564, "multi"
    if $I1565, if_1562
.annotate 'line', 674
    find_dynamic_lex $P1652, "$*MULTINESS"
    unless_null $P1652, vivify_573
    get_hll_global $P1652, "$MULTINESS"
    unless_null $P1652, vivify_574
    die "Contextual $*MULTINESS not found"
  vivify_574:
  vivify_573:
    set $S1653, $P1652
    iseq $I1654, $S1653, "proto"
    if $I1654, if_1651
.annotate 'line', 693
    get_global $P1686, "@BLOCK"
    unless_null $P1686, vivify_575
    $P1686 = root_new ['parrot';'ResizablePMCArray']
  vivify_575:
    set $P1687, $P1686[0]
    unless_null $P1687, vivify_576
    $P1687 = root_new ['parrot';'ResizablePMCArray']
  vivify_576:
    set $P1688, $P1687[0]
    unless_null $P1688, vivify_577
    new $P1688, "Undef"
  vivify_577:
    get_hll_global $P1689, ["PAST"], "Var"
    find_lex $P1690, "$name"
    find_lex $P1691, "$past"
    $P1692 = $P1689."new"($P1690 :named("name"), 1 :named("isdecl"), $P1691 :named("viviself"), "lexical" :named("scope"))
    $P1688."push"($P1692)
.annotate 'line', 695
    get_global $P1693, "@BLOCK"
    unless_null $P1693, vivify_578
    $P1693 = root_new ['parrot';'ResizablePMCArray']
  vivify_578:
    set $P1694, $P1693[0]
    unless_null $P1694, vivify_579
    new $P1694, "Undef"
  vivify_579:
    find_lex $P1695, "$name"
    $P1694."symbol"($P1695, "lexical" :named("scope"))
.annotate 'line', 696
    find_dynamic_lex $P1697, "$*SCOPE"
    unless_null $P1697, vivify_580
    get_hll_global $P1697, "$SCOPE"
    unless_null $P1697, vivify_581
    die "Contextual $*SCOPE not found"
  vivify_581:
  vivify_580:
    set $S1698, $P1697
    iseq $I1699, $S1698, "our"
    unless $I1699, if_1696_end
.annotate 'line', 699
    get_global $P1700, "@BLOCK"
    unless_null $P1700, vivify_582
    $P1700 = root_new ['parrot';'ResizablePMCArray']
  vivify_582:
    set $P1701, $P1700[0]
    unless_null $P1701, vivify_583
    $P1701 = root_new ['parrot';'ResizablePMCArray']
  vivify_583:
    set $P1702, $P1701[0]
    unless_null $P1702, vivify_584
    new $P1702, "Undef"
  vivify_584:
    get_hll_global $P1703, ["PAST"], "Op"
.annotate 'line', 701
    get_hll_global $P1704, ["PAST"], "Var"
    find_lex $P1705, "$name"
    $P1706 = $P1704."new"($P1705 :named("name"), "package" :named("scope"))
.annotate 'line', 702
    get_hll_global $P1707, ["PAST"], "Var"
    find_lex $P1708, "$name"
    $P1709 = $P1707."new"($P1708 :named("name"), "lexical" :named("scope"))
    $P1710 = $P1703."new"($P1706, $P1709, "bind" :named("pasttype"))
.annotate 'line', 699
    $P1702."push"($P1710)
.annotate 'line', 704
    get_global $P1711, "@BLOCK"
    unless_null $P1711, vivify_585
    $P1711 = root_new ['parrot';'ResizablePMCArray']
  vivify_585:
    set $P1712, $P1711[0]
    unless_null $P1712, vivify_586
    new $P1712, "Undef"
  vivify_586:
    $P1713 = $P1712."loadinit"()
    get_hll_global $P1714, ["PAST"], "Op"
.annotate 'line', 706
    get_hll_global $P1715, ["PAST"], "Var"
    find_lex $P1716, "$name"
    $P1717 = $P1715."new"($P1716 :named("name"), "package" :named("scope"))
.annotate 'line', 707
    get_hll_global $P1718, ["PAST"], "Val"
    find_lex $P1719, "$past"
    $P1720 = $P1718."new"($P1719 :named("value"))
    $P1721 = $P1714."new"($P1717, $P1720, "bind" :named("pasttype"))
.annotate 'line', 704
    $P1713."push"($P1721)
  if_1696_end:
.annotate 'line', 692
    goto if_1651_end
  if_1651:
.annotate 'line', 674
    .const 'Sub' $P1656 = "99_1300057363.399" 
    capture_lex $P1656
    $P1656()
  if_1651_end:
    goto if_1562_end
  if_1562:
.annotate 'line', 623
    .const 'Sub' $P1567 = "96_1300057363.399" 
    capture_lex $P1567
    $P1567()
  if_1562_end:
.annotate 'line', 711
    get_hll_global $P1722, ["PAST"], "Var"
    find_lex $P1723, "$name"
    $P1724 = $P1722."new"($P1723 :named("name"))
    store_lex "$past", $P1724
  if_1548_end:
.annotate 'line', 718
    find_lex $P1733, "$name"
    set $S1734, $P1733
    iseq $I1735, $S1734, "MAIN"
    if $I1735, if_1732
    new $P1731, 'Integer'
    set $P1731, $I1735
    goto if_1732_end
  if_1732:
    find_dynamic_lex $P1736, "$*MULTINESS"
    unless_null $P1736, vivify_617
    get_hll_global $P1736, "$MULTINESS"
    unless_null $P1736, vivify_618
    die "Contextual $*MULTINESS not found"
  vivify_618:
  vivify_617:
    set $S1737, $P1736
    isne $I1738, $S1737, "multi"
    new $P1731, 'Integer'
    set $P1731, $I1738
  if_1732_end:
    if $P1731, if_1730
    set $P1729, $P1731
    goto if_1730_end
  if_1730:
.annotate 'line', 719
    find_lex $P1739, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P1739
.annotate 'line', 718
    set $P1729, $P1739
  if_1730_end:
.annotate 'line', 619
    .return ($P1729)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1655"  :anon :subid("99_1300057363.399") :outer("95_1300057363.399")
.annotate 'line', 679
    new $P1657, "Undef"
    .lex "$cholder", $P1657
.annotate 'line', 678
    find_dynamic_lex $P1659, "$*SCOPE"
    unless_null $P1659, vivify_587
    get_hll_global $P1659, "$SCOPE"
    unless_null $P1659, vivify_588
    die "Contextual $*SCOPE not found"
  vivify_588:
  vivify_587:
    set $S1660, $P1659
    iseq $I1661, $S1660, "our"
    unless $I1661, if_1658_end
    die "our-scoped protos not yet implemented"
  if_1658_end:
.annotate 'line', 679
    get_hll_global $P1662, ["PAST"], "Op"
    $P1663 = $P1662."new"("list" :named("pasttype"))
    store_lex "$cholder", $P1663
.annotate 'line', 680
    get_global $P1664, "@BLOCK"
    unless_null $P1664, vivify_589
    $P1664 = root_new ['parrot';'ResizablePMCArray']
  vivify_589:
    set $P1665, $P1664[0]
    unless_null $P1665, vivify_590
    $P1665 = root_new ['parrot';'ResizablePMCArray']
  vivify_590:
    set $P1666, $P1665[0]
    unless_null $P1666, vivify_591
    new $P1666, "Undef"
  vivify_591:
    get_hll_global $P1667, ["PAST"], "Var"
    find_lex $P1668, "$name"
    find_lex $P1669, "$past"
    $P1670 = $P1667."new"($P1668 :named("name"), 1 :named("isdecl"), $P1669 :named("viviself"), "lexical" :named("scope"))
    $P1666."push"($P1670)
.annotate 'line', 682
    get_global $P1671, "@BLOCK"
    unless_null $P1671, vivify_592
    $P1671 = root_new ['parrot';'ResizablePMCArray']
  vivify_592:
    set $P1672, $P1671[0]
    unless_null $P1672, vivify_593
    $P1672 = root_new ['parrot';'ResizablePMCArray']
  vivify_593:
    set $P1673, $P1672[0]
    unless_null $P1673, vivify_594
    new $P1673, "Undef"
  vivify_594:
    get_hll_global $P1674, ["PAST"], "Op"
.annotate 'line', 684
    get_hll_global $P1675, ["PAST"], "Var"
    find_lex $P1676, "$name"
    $P1677 = $P1675."new"($P1676 :named("name"))
    find_lex $P1678, "$cholder"
    $P1679 = $P1674."new"($P1677, $P1678, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 682
    $P1673."push"($P1679)
.annotate 'line', 687
    get_global $P1680, "@BLOCK"
    unless_null $P1680, vivify_595
    $P1680 = root_new ['parrot';'ResizablePMCArray']
  vivify_595:
    set $P1681, $P1680[0]
    unless_null $P1681, vivify_596
    new $P1681, "Undef"
  vivify_596:
    find_lex $P1682, "$name"
    find_lex $P1683, "$cholder"
    $P1681."symbol"($P1682, "lexical" :named("scope"), 1 :named("proto"), $P1683 :named("cholder"))
.annotate 'line', 690
    find_lex $P1684, "$past"
    $P1685 = $P1684."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 674
    .return ($P1685)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1566"  :anon :subid("96_1300057363.399") :outer("95_1300057363.399")
.annotate 'line', 623
    .const 'Sub' $P1585 = "97_1300057363.399" 
    capture_lex $P1585
.annotate 'line', 626
    new $P1568, "Undef"
    .lex "$cholder", $P1568
.annotate 'line', 627
    $P1569 = root_new ['parrot';'Hash']
    .lex "%sym", $P1569
.annotate 'line', 625
    find_dynamic_lex $P1571, "$*SCOPE"
    unless_null $P1571, vivify_597
    get_hll_global $P1571, "$SCOPE"
    unless_null $P1571, vivify_598
    die "Contextual $*SCOPE not found"
  vivify_598:
  vivify_597:
    set $S1572, $P1571
    iseq $I1573, $S1572, "our"
    unless $I1573, if_1570_end
    die "our-scoped multis not yet implemented"
  if_1570_end:
    find_lex $P1574, "$cholder"
.annotate 'line', 627
    get_global $P1575, "@BLOCK"
    unless_null $P1575, vivify_599
    $P1575 = root_new ['parrot';'ResizablePMCArray']
  vivify_599:
    set $P1576, $P1575[0]
    unless_null $P1576, vivify_600
    new $P1576, "Undef"
  vivify_600:
    find_lex $P1577, "$name"
    $P1578 = $P1576."symbol"($P1577)
    store_lex "%sym", $P1578
.annotate 'line', 628
    find_lex $P1580, "%sym"
    unless_null $P1580, vivify_601
    $P1580 = root_new ['parrot';'Hash']
  vivify_601:
    set $P1581, $P1580["cholder"]
    unless_null $P1581, vivify_602
    new $P1581, "Undef"
  vivify_602:
    if $P1581, if_1579
.annotate 'line', 633
    .const 'Sub' $P1585 = "97_1300057363.399" 
    capture_lex $P1585
    $P1585()
    goto if_1579_end
  if_1579:
.annotate 'line', 629
    find_lex $P1582, "%sym"
    unless_null $P1582, vivify_615
    $P1582 = root_new ['parrot';'Hash']
  vivify_615:
    set $P1583, $P1582["cholder"]
    unless_null $P1583, vivify_616
    new $P1583, "Undef"
  vivify_616:
    store_lex "$cholder", $P1583
  if_1579_end:
.annotate 'line', 669
    find_lex $P1647, "$cholder"
    find_lex $P1648, "$past"
    $P1647."push"($P1648)
.annotate 'line', 672
    find_lex $P1649, "$past"
    $P1650 = "attach_multi_signature"($P1649)
.annotate 'line', 623
    .return ($P1650)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block1584"  :anon :subid("97_1300057363.399") :outer("96_1300057363.399")
.annotate 'line', 633
    .const 'Sub' $P1599 = "98_1300057363.399" 
    capture_lex $P1599
.annotate 'line', 640
    new $P1586, "Undef"
    .lex "$found_proto", $P1586
.annotate 'line', 658
    new $P1587, "Undef"
    .lex "$dispatch_setup", $P1587
.annotate 'line', 635
    find_lex $P1589, "%sym"
    unless_null $P1589, vivify_603
    $P1589 = root_new ['parrot';'Hash']
  vivify_603:
    set $P1590, $P1589["proto"]
    unless_null $P1590, vivify_604
    new $P1590, "Undef"
  vivify_604:
    unless $P1590, if_1588_end
.annotate 'line', 638
    find_lex $P1591, "$/"
    $P1592 = $P1591."CURSOR"()
    $P1592."panic"("Internal Error: Current scope has a proto, but no candidate list holder was set up. (This should never happen.)")
  if_1588_end:
.annotate 'line', 635
    find_lex $P1593, "$found_proto"
.annotate 'line', 641
    get_global $P1595, "@BLOCK"
    defined $I1596, $P1595
    unless $I1596, for_undef_605
    iter $P1594, $P1595
    new $P1621, 'ExceptionHandler'
    set_label $P1621, loop1620_handler
    $P1621."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1621
  loop1620_test:
    unless $P1594, loop1620_done
    shift $P1597, $P1594
  loop1620_redo:
    .const 'Sub' $P1599 = "98_1300057363.399" 
    capture_lex $P1599
    $P1599($P1597)
  loop1620_next:
    goto loop1620_test
  loop1620_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1622, exception, 'type'
    eq $P1622, .CONTROL_LOOP_NEXT, loop1620_next
    eq $P1622, .CONTROL_LOOP_REDO, loop1620_redo
  loop1620_done:
    pop_eh 
  for_undef_605:
.annotate 'line', 652
    find_lex $P1624, "$found_proto"
    if $P1624, unless_1623_end
.annotate 'line', 653
    find_lex $P1625, "$/"
    $P1626 = $P1625."CURSOR"()
    $P1626."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless_1623_end:
.annotate 'line', 657
    get_hll_global $P1627, ["PAST"], "Op"
    $P1628 = $P1627."new"("list" :named("pasttype"))
    store_lex "$cholder", $P1628
.annotate 'line', 658
    get_hll_global $P1629, ["PAST"], "Op"
.annotate 'line', 660
    get_hll_global $P1630, ["PAST"], "Var"
    find_lex $P1631, "$name"
    $P1632 = $P1630."new"($P1631 :named("name"), "outer" :named("scope"))
    find_lex $P1633, "$cholder"
    $P1634 = $P1629."new"($P1632, $P1633, "create_dispatch_and_add_candidates PPP" :named("pirop"))
.annotate 'line', 658
    store_lex "$dispatch_setup", $P1634
.annotate 'line', 663
    get_global $P1635, "@BLOCK"
    unless_null $P1635, vivify_610
    $P1635 = root_new ['parrot';'ResizablePMCArray']
  vivify_610:
    set $P1636, $P1635[0]
    unless_null $P1636, vivify_611
    $P1636 = root_new ['parrot';'ResizablePMCArray']
  vivify_611:
    set $P1637, $P1636[0]
    unless_null $P1637, vivify_612
    new $P1637, "Undef"
  vivify_612:
    get_hll_global $P1638, ["PAST"], "Var"
    find_lex $P1639, "$name"
    find_lex $P1640, "$dispatch_setup"
    $P1641 = $P1638."new"($P1639 :named("name"), 1 :named("isdecl"), $P1640 :named("viviself"), "lexical" :named("scope"))
    $P1637."push"($P1641)
.annotate 'line', 665
    get_global $P1642, "@BLOCK"
    unless_null $P1642, vivify_613
    $P1642 = root_new ['parrot';'ResizablePMCArray']
  vivify_613:
    set $P1643, $P1642[0]
    unless_null $P1643, vivify_614
    new $P1643, "Undef"
  vivify_614:
    find_lex $P1644, "$name"
    find_lex $P1645, "$cholder"
    $P1646 = $P1643."symbol"($P1644, "lexical" :named("scope"), $P1645 :named("cholder"))
.annotate 'line', 633
    .return ($P1646)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1598"  :anon :subid("98_1300057363.399") :outer("97_1300057363.399")
    .param pmc param_1601
.annotate 'line', 642
    $P1600 = root_new ['parrot';'Hash']
    .lex "%sym", $P1600
    .lex "$_", param_1601
    find_lex $P1602, "$_"
    find_lex $P1603, "$name"
    $P1604 = $P1602."symbol"($P1603)
    store_lex "%sym", $P1604
.annotate 'line', 643
    find_lex $P1609, "%sym"
    unless_null $P1609, vivify_606
    $P1609 = root_new ['parrot';'Hash']
  vivify_606:
    set $P1610, $P1609["proto"]
    unless_null $P1610, vivify_607
    new $P1610, "Undef"
  vivify_607:
    unless $P1610, unless_1608
    set $P1607, $P1610
    goto unless_1608_end
  unless_1608:
    find_lex $P1611, "%sym"
    unless_null $P1611, vivify_608
    $P1611 = root_new ['parrot';'Hash']
  vivify_608:
    set $P1612, $P1611["cholder"]
    unless_null $P1612, vivify_609
    new $P1612, "Undef"
  vivify_609:
    set $P1607, $P1612
  unless_1608_end:
    if $P1607, if_1606
.annotate 'line', 646
    find_lex $P1616, "%sym"
    if $P1616, if_1615
    set $P1614, $P1616
    goto if_1615_end
  if_1615:
.annotate 'line', 647
    find_lex $P1617, "$/"
    $P1618 = $P1617."CURSOR"()
    $P1619 = $P1618."panic"("Cannot declare a multi when an only is already in scope.")
.annotate 'line', 646
    set $P1614, $P1619
  if_1615_end:
    set $P1605, $P1614
.annotate 'line', 643
    goto if_1606_end
  if_1606:
.annotate 'line', 644
    new $P1613, "Integer"
    assign $P1613, 1
    store_lex "$found_proto", $P1613
.annotate 'line', 643
    set $P1605, $P1613
  if_1606_end:
.annotate 'line', 641
    .return ($P1605)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1750"  :anon :subid("100_1300057363.399") :outer("94_1300057363.399")
    .param pmc param_1752
.annotate 'line', 726
    .lex "$_", param_1752
    find_lex $P1753, "$_"
    $P1754 = $P1753."ast"()
    find_lex $P1755, "$/"
    $P1756 = $P1754($P1755)
    .return ($P1756)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "method_def"  :subid("101_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1764
    .param pmc param_1765
.annotate 'line', 733
    .const 'Sub' $P1877 = "103_1300057363.399" 
    capture_lex $P1877
    .const 'Sub' $P1793 = "102_1300057363.399" 
    capture_lex $P1793
    .lex "self", param_1764
    .lex "$/", param_1765
.annotate 'line', 736
    new $P1766, "Undef"
    .lex "$past", $P1766
.annotate 'line', 733
    find_lex $P1767, "$past"
.annotate 'line', 737
    find_lex $P1769, "$/"
    unless_null $P1769, vivify_625
    $P1769 = root_new ['parrot';'Hash']
  vivify_625:
    set $P1770, $P1769["onlystar"]
    unless_null $P1770, vivify_626
    new $P1770, "Undef"
  vivify_626:
    if $P1770, if_1768
.annotate 'line', 741
    find_lex $P1772, "$/"
    unless_null $P1772, vivify_627
    $P1772 = root_new ['parrot';'Hash']
  vivify_627:
    set $P1773, $P1772["blockoid"]
    unless_null $P1773, vivify_628
    new $P1773, "Undef"
  vivify_628:
    $P1774 = $P1773."ast"()
    store_lex "$past", $P1774
.annotate 'line', 742
    find_lex $P1775, "$past"
    $P1775."blocktype"("declaration")
.annotate 'line', 743
    find_dynamic_lex $P1777, "$*RETURN_USED"
    unless_null $P1777, vivify_629
    get_hll_global $P1777, "$RETURN_USED"
    unless_null $P1777, vivify_630
    die "Contextual $*RETURN_USED not found"
  vivify_630:
  vivify_629:
    unless $P1777, if_1776_end
.annotate 'line', 744
    find_lex $P1778, "$past"
    $P1778."control"("return_pir")
  if_1776_end:
.annotate 'line', 740
    goto if_1768_end
  if_1768:
.annotate 'line', 738
    $P1771 = "only_star_block"()
    store_lex "$past", $P1771
  if_1768_end:
.annotate 'line', 749
    find_lex $P1780, "$past"
    unless_null $P1780, vivify_631
    $P1780 = root_new ['parrot';'Hash']
  vivify_631:
    set $P1781, $P1780["signature_has_invocant"]
    unless_null $P1781, vivify_632
    new $P1781, "Undef"
  vivify_632:
    if $P1781, unless_1779_end
.annotate 'line', 750
    find_lex $P1782, "$past"
    unless_null $P1782, vivify_633
    $P1782 = root_new ['parrot';'ResizablePMCArray']
  vivify_633:
    set $P1783, $P1782[0]
    unless_null $P1783, vivify_634
    new $P1783, "Undef"
  vivify_634:
    get_hll_global $P1784, ["PAST"], "Var"
.annotate 'line', 752
    get_hll_global $P1785, ["PAST"], "Var"
    $P1786 = $P1785."new"("$?CLASS" :named("name"))
    $P1787 = $P1784."new"("self" :named("name"), "parameter" :named("scope"), $P1786 :named("multitype"))
.annotate 'line', 750
    $P1783."unshift"($P1787)
  unless_1779_end:
.annotate 'line', 755
    find_lex $P1788, "$past"
    $P1788."symbol"("self", "lexical" :named("scope"))
.annotate 'line', 758
    find_lex $P1790, "$/"
    unless_null $P1790, vivify_635
    $P1790 = root_new ['parrot';'Hash']
  vivify_635:
    set $P1791, $P1790["deflongname"]
    unless_null $P1791, vivify_636
    new $P1791, "Undef"
  vivify_636:
    unless $P1791, if_1789_end
    .const 'Sub' $P1793 = "102_1300057363.399" 
    capture_lex $P1793
    $P1793()
  if_1789_end:
.annotate 'line', 793
    find_dynamic_lex $P1859, "$*SCOPE"
    unless_null $P1859, vivify_654
    get_hll_global $P1859, "$SCOPE"
    unless_null $P1859, vivify_655
    die "Contextual $*SCOPE not found"
  vivify_655:
  vivify_654:
    set $S1860, $P1859
    iseq $I1861, $S1860, "our"
    unless $I1861, if_1858_end
.annotate 'line', 794
    find_lex $P1862, "$past"
    $P1862."pirflags"(":nsentry")
  if_1858_end:
.annotate 'line', 798
    find_lex $P1863, "$/"
    find_lex $P1864, "$past"
    $P1863."!make"($P1864)
.annotate 'line', 799
    find_lex $P1865, "$past"
    find_lex $P1866, "$past"
    unless_null $P1866, vivify_656
    $P1866 = root_new ['parrot';'Hash']
    store_lex "$past", $P1866
  vivify_656:
    set $P1866["block_past"], $P1865
.annotate 'line', 800
    find_lex $P1869, "$/"
    unless_null $P1869, vivify_657
    $P1869 = root_new ['parrot';'Hash']
  vivify_657:
    set $P1870, $P1869["trait"]
    unless_null $P1870, vivify_658
    new $P1870, "Undef"
  vivify_658:
    if $P1870, if_1868
    set $P1867, $P1870
    goto if_1868_end
  if_1868:
.annotate 'line', 801
    find_lex $P1872, "$/"
    unless_null $P1872, vivify_659
    $P1872 = root_new ['parrot';'Hash']
  vivify_659:
    set $P1873, $P1872["trait"]
    unless_null $P1873, vivify_660
    new $P1873, "Undef"
  vivify_660:
    defined $I1874, $P1873
    unless $I1874, for_undef_661
    iter $P1871, $P1873
    new $P1884, 'ExceptionHandler'
    set_label $P1884, loop1883_handler
    $P1884."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1884
  loop1883_test:
    unless $P1871, loop1883_done
    shift $P1875, $P1871
  loop1883_redo:
    .const 'Sub' $P1877 = "103_1300057363.399" 
    capture_lex $P1877
    $P1877($P1875)
  loop1883_next:
    goto loop1883_test
  loop1883_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1885, exception, 'type'
    eq $P1885, .CONTROL_LOOP_NEXT, loop1883_next
    eq $P1885, .CONTROL_LOOP_REDO, loop1883_redo
  loop1883_done:
    pop_eh 
  for_undef_661:
.annotate 'line', 800
    set $P1867, $P1871
  if_1868_end:
.annotate 'line', 733
    .return ($P1867)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1792"  :anon :subid("102_1300057363.399") :outer("101_1300057363.399")
.annotate 'line', 760
    new $P1794, "Undef"
    .lex "$name", $P1794
.annotate 'line', 765
    new $P1795, "Undef"
    .lex "$to_add", $P1795
.annotate 'line', 760
    find_lex $P1796, "$/"
    unless_null $P1796, vivify_637
    $P1796 = root_new ['parrot';'Hash']
  vivify_637:
    set $P1797, $P1796["private"]
    unless_null $P1797, vivify_638
    new $P1797, "Undef"
  vivify_638:
    set $S1798, $P1797
    new $P1799, 'String'
    set $P1799, $S1798
    find_lex $P1800, "$/"
    unless_null $P1800, vivify_639
    $P1800 = root_new ['parrot';'Hash']
  vivify_639:
    set $P1801, $P1800["deflongname"]
    unless_null $P1801, vivify_640
    $P1801 = root_new ['parrot';'ResizablePMCArray']
  vivify_640:
    set $P1802, $P1801[0]
    unless_null $P1802, vivify_641
    new $P1802, "Undef"
  vivify_641:
    $P1803 = $P1802."ast"()
    set $S1804, $P1803
    concat $P1805, $P1799, $S1804
    store_lex "$name", $P1805
.annotate 'line', 761
    find_lex $P1806, "$past"
    find_lex $P1807, "$name"
    $P1806."name"($P1807)
.annotate 'line', 765
    find_dynamic_lex $P1810, "$*MULTINESS"
    unless_null $P1810, vivify_642
    get_hll_global $P1810, "$MULTINESS"
    unless_null $P1810, vivify_643
    die "Contextual $*MULTINESS not found"
  vivify_643:
  vivify_642:
    set $S1811, $P1810
    isne $I1812, $S1811, "proto"
    if $I1812, if_1809
.annotate 'line', 767
    get_hll_global $P1816, ["PAST"], "Op"
.annotate 'line', 769
    get_hll_global $P1817, ["PAST"], "Val"
    find_lex $P1818, "$past"
    $P1819 = $P1817."new"($P1818 :named("value"))
.annotate 'line', 770
    get_hll_global $P1820, ["PAST"], "Op"
    $P1821 = $P1820."new"("list" :named("pasttype"))
    $P1822 = $P1816."new"($P1819, $P1821, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 767
    set $P1808, $P1822
.annotate 'line', 765
    goto if_1809_end
  if_1809:
.annotate 'line', 766
    get_hll_global $P1813, ["PAST"], "Val"
    find_lex $P1814, "$past"
    $P1815 = $P1813."new"($P1814 :named("value"))
    set $P1808, $P1815
  if_1809_end:
.annotate 'line', 765
    store_lex "$to_add", $P1808
.annotate 'line', 772
    find_dynamic_lex $P1824, "$*MULTINESS"
    unless_null $P1824, vivify_644
    get_hll_global $P1824, "$MULTINESS"
    unless_null $P1824, vivify_645
    die "Contextual $*MULTINESS not found"
  vivify_645:
  vivify_644:
    set $S1825, $P1824
    iseq $I1826, $S1825, "proto"
    unless $I1826, if_1823_end
    find_lex $P1827, "$past"
    $P1827."pirflags"(":instanceof(\"DispatcherSub\")")
  if_1823_end:
.annotate 'line', 776
    find_dynamic_lex $P1829, "$*MULTINESS"
    unless_null $P1829, vivify_646
    get_hll_global $P1829, "$MULTINESS"
    unless_null $P1829, vivify_647
    die "Contextual $*MULTINESS not found"
  vivify_647:
  vivify_646:
    set $S1830, $P1829
    iseq $I1831, $S1830, "multi"
    unless $I1831, if_1828_end
    find_lex $P1832, "$past"
    "attach_multi_signature"($P1832)
  if_1828_end:
.annotate 'line', 779
    find_dynamic_lex $P1835, "$*PACKAGE-SETUP"
    unless_null $P1835, vivify_648
    get_hll_global $P1835, "$PACKAGE-SETUP"
    unless_null $P1835, vivify_649
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_649:
  vivify_648:
    defined $I1836, $P1835
    if $I1836, if_1834
    new $P1833, 'Integer'
    set $P1833, $I1836
    goto if_1834_end
  if_1834:
.annotate 'line', 780
    find_dynamic_lex $P1837, "$*PACKAGE-SETUP"
    unless_null $P1837, vivify_650
    get_hll_global $P1837, "$PACKAGE-SETUP"
    unless_null $P1837, vivify_651
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_651:
  vivify_650:
    get_hll_global $P1838, ["PAST"], "Op"
.annotate 'line', 781
    find_dynamic_lex $P1841, "$*MULTINESS"
    unless_null $P1841, vivify_652
    get_hll_global $P1841, "$MULTINESS"
    unless_null $P1841, vivify_653
    die "Contextual $*MULTINESS not found"
  vivify_653:
  vivify_652:
    set $S1842, $P1841
    iseq $I1843, $S1842, "multi"
    if $I1843, if_1840
    new $P1845, "String"
    assign $P1845, "add_method"
    set $P1839, $P1845
    goto if_1840_end
  if_1840:
    new $P1844, "String"
    assign $P1844, "add_multi_method"
    set $P1839, $P1844
  if_1840_end:
.annotate 'line', 782
    get_hll_global $P1846, ["PAST"], "Op"
.annotate 'line', 785
    get_hll_global $P1847, ["PAST"], "Var"
    $P1848 = $P1847."new"("type_obj" :named("name"), "register" :named("scope"))
    $P1849 = $P1846."new"($P1848, "get_how PP" :named("pirop"))
.annotate 'line', 787
    get_hll_global $P1850, ["PAST"], "Var"
    $P1851 = $P1850."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 788
    get_hll_global $P1852, ["PAST"], "Val"
    find_lex $P1853, "$name"
    $P1854 = $P1852."new"($P1853 :named("value"))
    find_lex $P1855, "$to_add"
    $P1856 = $P1838."new"($P1849, $P1851, $P1854, $P1855, "callmethod" :named("pasttype"), $P1839 :named("name"))
.annotate 'line', 780
    $P1857 = $P1837."push"($P1856)
.annotate 'line', 779
    set $P1833, $P1857
  if_1834_end:
.annotate 'line', 758
    .return ($P1833)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1876"  :anon :subid("103_1300057363.399") :outer("101_1300057363.399")
    .param pmc param_1878
.annotate 'line', 801
    .lex "$_", param_1878
    find_lex $P1879, "$_"
    $P1880 = $P1879."ast"()
    find_lex $P1881, "$/"
    $P1882 = $P1880($P1881)
    .return ($P1882)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "signature"  :subid("104_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1889
    .param pmc param_1890
.annotate 'line', 833
    .const 'Sub' $P1923 = "106_1300057363.399" 
    capture_lex $P1923
    .const 'Sub' $P1899 = "105_1300057363.399" 
    capture_lex $P1899
    .lex "self", param_1889
    .lex "$/", param_1890
.annotate 'line', 834
    new $P1891, "Undef"
    .lex "$BLOCKINIT", $P1891
    get_global $P1892, "@BLOCK"
    unless_null $P1892, vivify_662
    $P1892 = root_new ['parrot';'ResizablePMCArray']
  vivify_662:
    set $P1893, $P1892[0]
    unless_null $P1893, vivify_663
    $P1893 = root_new ['parrot';'ResizablePMCArray']
  vivify_663:
    set $P1894, $P1893[0]
    unless_null $P1894, vivify_664
    new $P1894, "Undef"
  vivify_664:
    store_lex "$BLOCKINIT", $P1894
.annotate 'line', 835
    find_lex $P1896, "$/"
    unless_null $P1896, vivify_665
    $P1896 = root_new ['parrot';'Hash']
  vivify_665:
    set $P1897, $P1896["invocant"]
    unless_null $P1897, vivify_666
    new $P1897, "Undef"
  vivify_666:
    unless $P1897, if_1895_end
    .const 'Sub' $P1899 = "105_1300057363.399" 
    capture_lex $P1899
    $P1899()
  if_1895_end:
.annotate 'line', 844
    find_lex $P1918, "$/"
    unless_null $P1918, vivify_672
    $P1918 = root_new ['parrot';'Hash']
  vivify_672:
    set $P1919, $P1918["parameter"]
    unless_null $P1919, vivify_673
    new $P1919, "Undef"
  vivify_673:
    defined $I1920, $P1919
    unless $I1920, for_undef_674
    iter $P1917, $P1919
    new $P1930, 'ExceptionHandler'
    set_label $P1930, loop1929_handler
    $P1930."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P1930
  loop1929_test:
    unless $P1917, loop1929_done
    shift $P1921, $P1917
  loop1929_redo:
    .const 'Sub' $P1923 = "106_1300057363.399" 
    capture_lex $P1923
    $P1923($P1921)
  loop1929_next:
    goto loop1929_test
  loop1929_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P1931, exception, 'type'
    eq $P1931, .CONTROL_LOOP_NEXT, loop1929_next
    eq $P1931, .CONTROL_LOOP_REDO, loop1929_redo
  loop1929_done:
    pop_eh 
  for_undef_674:
.annotate 'line', 833
    .return ($P1917)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1898"  :anon :subid("105_1300057363.399") :outer("104_1300057363.399")
.annotate 'line', 836
    new $P1900, "Undef"
    .lex "$inv", $P1900
    find_lex $P1901, "$/"
    unless_null $P1901, vivify_667
    $P1901 = root_new ['parrot';'Hash']
  vivify_667:
    set $P1902, $P1901["invocant"]
    unless_null $P1902, vivify_668
    $P1902 = root_new ['parrot';'ResizablePMCArray']
  vivify_668:
    set $P1903, $P1902[0]
    unless_null $P1903, vivify_669
    new $P1903, "Undef"
  vivify_669:
    $P1904 = $P1903."ast"()
    store_lex "$inv", $P1904
.annotate 'line', 837
    find_lex $P1905, "$BLOCKINIT"
    find_lex $P1906, "$inv"
    $P1905."push"($P1906)
.annotate 'line', 838
    find_lex $P1907, "$BLOCKINIT"
    get_hll_global $P1908, ["PAST"], "Var"
.annotate 'line', 840
    get_hll_global $P1909, ["PAST"], "Var"
    find_lex $P1910, "$inv"
    $P1911 = $P1910."name"()
    $P1912 = $P1909."new"("lexical" :named("scope"), $P1911 :named("name"))
    $P1913 = $P1908."new"("self" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), $P1912 :named("viviself"))
.annotate 'line', 838
    $P1907."push"($P1913)
.annotate 'line', 842
    new $P1914, "Integer"
    assign $P1914, 1
    get_global $P1915, "@BLOCK"
    unless_null $P1915, vivify_670
    $P1915 = root_new ['parrot';'ResizablePMCArray']
    set_global "@BLOCK", $P1915
  vivify_670:
    set $P1916, $P1915[0]
    unless_null $P1916, vivify_671
    $P1916 = root_new ['parrot';'Hash']
    set $P1915[0], $P1916
  vivify_671:
    set $P1916["signature_has_invocant"], $P1914
.annotate 'line', 835
    .return ($P1914)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block1922"  :anon :subid("106_1300057363.399") :outer("104_1300057363.399")
    .param pmc param_1924
.annotate 'line', 844
    .lex "$_", param_1924
    find_lex $P1925, "$BLOCKINIT"
    find_lex $P1926, "$_"
    $P1927 = $P1926."ast"()
    $P1928 = $P1925."push"($P1927)
    .return ($P1928)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "parameter"  :subid("107_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_1933
    .param pmc param_1934
.annotate 'line', 847
    .lex "self", param_1933
    .lex "$/", param_1934
.annotate 'line', 848
    new $P1935, "Undef"
    .lex "$quant", $P1935
.annotate 'line', 849
    new $P1936, "Undef"
    .lex "$past", $P1936
.annotate 'line', 848
    find_lex $P1937, "$/"
    unless_null $P1937, vivify_675
    $P1937 = root_new ['parrot';'Hash']
  vivify_675:
    set $P1938, $P1937["quant"]
    unless_null $P1938, vivify_676
    new $P1938, "Undef"
  vivify_676:
    store_lex "$quant", $P1938
    find_lex $P1939, "$past"
.annotate 'line', 850
    find_lex $P1941, "$/"
    unless_null $P1941, vivify_677
    $P1941 = root_new ['parrot';'Hash']
  vivify_677:
    set $P1942, $P1941["named_param"]
    unless_null $P1942, vivify_678
    new $P1942, "Undef"
  vivify_678:
    if $P1942, if_1940
.annotate 'line', 857
    find_lex $P1956, "$/"
    unless_null $P1956, vivify_679
    $P1956 = root_new ['parrot';'Hash']
  vivify_679:
    set $P1957, $P1956["param_var"]
    unless_null $P1957, vivify_680
    new $P1957, "Undef"
  vivify_680:
    $P1958 = $P1957."ast"()
    store_lex "$past", $P1958
.annotate 'line', 858
    find_lex $P1960, "$quant"
    set $S1961, $P1960
    iseq $I1962, $S1961, "*"
    if $I1962, if_1959
.annotate 'line', 862
    find_lex $P1971, "$quant"
    set $S1972, $P1971
    iseq $I1973, $S1972, "?"
    unless $I1973, if_1970_end
.annotate 'line', 863
    find_lex $P1974, "$past"
    find_lex $P1975, "$/"
    unless_null $P1975, vivify_681
    $P1975 = root_new ['parrot';'Hash']
  vivify_681:
    set $P1976, $P1975["param_var"]
    unless_null $P1976, vivify_682
    $P1976 = root_new ['parrot';'Hash']
  vivify_682:
    set $P1977, $P1976["sigil"]
    unless_null $P1977, vivify_683
    new $P1977, "Undef"
  vivify_683:
    $P1978 = "vivitype"($P1977)
    $P1974."viviself"($P1978)
  if_1970_end:
.annotate 'line', 862
    goto if_1959_end
  if_1959:
.annotate 'line', 859
    find_lex $P1963, "$past"
    $P1963."slurpy"(1)
.annotate 'line', 860
    find_lex $P1964, "$past"
    find_lex $P1965, "$/"
    unless_null $P1965, vivify_684
    $P1965 = root_new ['parrot';'Hash']
  vivify_684:
    set $P1966, $P1965["param_var"]
    unless_null $P1966, vivify_685
    $P1966 = root_new ['parrot';'Hash']
  vivify_685:
    set $P1967, $P1966["sigil"]
    unless_null $P1967, vivify_686
    new $P1967, "Undef"
  vivify_686:
    set $S1968, $P1967
    iseq $I1969, $S1968, "%"
    $P1964."named"($I1969)
  if_1959_end:
.annotate 'line', 856
    goto if_1940_end
  if_1940:
.annotate 'line', 851
    find_lex $P1943, "$/"
    unless_null $P1943, vivify_687
    $P1943 = root_new ['parrot';'Hash']
  vivify_687:
    set $P1944, $P1943["named_param"]
    unless_null $P1944, vivify_688
    new $P1944, "Undef"
  vivify_688:
    $P1945 = $P1944."ast"()
    store_lex "$past", $P1945
.annotate 'line', 852
    find_lex $P1947, "$quant"
    set $S1948, $P1947
    isne $I1949, $S1948, "!"
    unless $I1949, if_1946_end
.annotate 'line', 853
    find_lex $P1950, "$past"
    find_lex $P1951, "$/"
    unless_null $P1951, vivify_689
    $P1951 = root_new ['parrot';'Hash']
  vivify_689:
    set $P1952, $P1951["named_param"]
    unless_null $P1952, vivify_690
    $P1952 = root_new ['parrot';'Hash']
  vivify_690:
    set $P1953, $P1952["param_var"]
    unless_null $P1953, vivify_691
    $P1953 = root_new ['parrot';'Hash']
  vivify_691:
    set $P1954, $P1953["sigil"]
    unless_null $P1954, vivify_692
    new $P1954, "Undef"
  vivify_692:
    $P1955 = "vivitype"($P1954)
    $P1950."viviself"($P1955)
  if_1946_end:
  if_1940_end:
.annotate 'line', 866
    find_lex $P1980, "$/"
    unless_null $P1980, vivify_693
    $P1980 = root_new ['parrot';'Hash']
  vivify_693:
    set $P1981, $P1980["default_value"]
    unless_null $P1981, vivify_694
    new $P1981, "Undef"
  vivify_694:
    unless $P1981, if_1979_end
.annotate 'line', 867
    find_lex $P1983, "$quant"
    set $S1984, $P1983
    iseq $I1985, $S1984, "*"
    unless $I1985, if_1982_end
.annotate 'line', 868
    find_lex $P1986, "$/"
    $P1987 = $P1986."CURSOR"()
    $P1987."panic"("Can't put default on slurpy parameter")
  if_1982_end:
.annotate 'line', 870
    find_lex $P1989, "$quant"
    set $S1990, $P1989
    iseq $I1991, $S1990, "!"
    unless $I1991, if_1988_end
.annotate 'line', 871
    find_lex $P1992, "$/"
    $P1993 = $P1992."CURSOR"()
    $P1993."panic"("Can't put default on required parameter")
  if_1988_end:
.annotate 'line', 873
    find_lex $P1994, "$past"
    find_lex $P1995, "$/"
    unless_null $P1995, vivify_695
    $P1995 = root_new ['parrot';'Hash']
  vivify_695:
    set $P1996, $P1995["default_value"]
    unless_null $P1996, vivify_696
    $P1996 = root_new ['parrot';'ResizablePMCArray']
  vivify_696:
    set $P1997, $P1996[0]
    unless_null $P1997, vivify_697
    $P1997 = root_new ['parrot';'Hash']
  vivify_697:
    set $P1998, $P1997["EXPR"]
    unless_null $P1998, vivify_698
    new $P1998, "Undef"
  vivify_698:
    $P1999 = $P1998."ast"()
    $P1994."viviself"($P1999)
  if_1979_end:
.annotate 'line', 875
    find_lex $P2001, "$past"
    $P2002 = $P2001."viviself"()
    if $P2002, unless_2000_end
    get_global $P2003, "@BLOCK"
    unless_null $P2003, vivify_699
    $P2003 = root_new ['parrot';'ResizablePMCArray']
  vivify_699:
    set $P2004, $P2003[0]
    unless_null $P2004, vivify_700
    new $P2004, "Undef"
  vivify_700:
    get_global $P2005, "@BLOCK"
    unless_null $P2005, vivify_701
    $P2005 = root_new ['parrot';'ResizablePMCArray']
  vivify_701:
    set $P2006, $P2005[0]
    unless_null $P2006, vivify_702
    new $P2006, "Undef"
  vivify_702:
    $P2007 = $P2006."arity"()
    set $N2008, $P2007
    new $P2009, 'Float'
    set $P2009, $N2008
    add $P2010, $P2009, 1
    $P2004."arity"($P2010)
  unless_2000_end:
.annotate 'line', 879
    find_lex $P2012, "$/"
    unless_null $P2012, vivify_703
    $P2012 = root_new ['parrot';'Hash']
  vivify_703:
    set $P2013, $P2012["typename"]
    unless_null $P2013, vivify_704
    new $P2013, "Undef"
  vivify_704:
    unless $P2013, if_2011_end
.annotate 'line', 880
    find_lex $P2014, "$past"
    find_lex $P2015, "$/"
    unless_null $P2015, vivify_705
    $P2015 = root_new ['parrot';'Hash']
  vivify_705:
    set $P2016, $P2015["typename"]
    unless_null $P2016, vivify_706
    $P2016 = root_new ['parrot';'ResizablePMCArray']
  vivify_706:
    set $P2017, $P2016[0]
    unless_null $P2017, vivify_707
    new $P2017, "Undef"
  vivify_707:
    $P2018 = $P2017."ast"()
    $P2014."multitype"($P2018)
  if_2011_end:
.annotate 'line', 884
    find_lex $P2020, "$/"
    unless_null $P2020, vivify_708
    $P2020 = root_new ['parrot';'Hash']
  vivify_708:
    set $P2021, $P2020["definedness"]
    unless_null $P2021, vivify_709
    new $P2021, "Undef"
  vivify_709:
    unless $P2021, if_2019_end
.annotate 'line', 885
    find_lex $P2022, "$/"
    unless_null $P2022, vivify_710
    $P2022 = root_new ['parrot';'Hash']
  vivify_710:
    set $P2023, $P2022["definedness"]
    unless_null $P2023, vivify_711
    $P2023 = root_new ['parrot';'ResizablePMCArray']
  vivify_711:
    set $P2024, $P2023[0]
    unless_null $P2024, vivify_712
    new $P2024, "Undef"
  vivify_712:
    set $S2025, $P2024
    new $P2026, 'String'
    set $P2026, $S2025
    find_lex $P2027, "$past"
    unless_null $P2027, vivify_713
    $P2027 = root_new ['parrot';'Hash']
    store_lex "$past", $P2027
  vivify_713:
    set $P2027["definedness"], $P2026
  if_2019_end:
.annotate 'line', 888
    find_lex $P2028, "$/"
    find_lex $P2029, "$past"
    $P2030 = $P2028."!make"($P2029)
.annotate 'line', 847
    .return ($P2030)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "param_var"  :subid("108_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2032
    .param pmc param_2033
.annotate 'line', 891
    .lex "self", param_2032
    .lex "$/", param_2033
.annotate 'line', 892
    new $P2034, "Undef"
    .lex "$name", $P2034
.annotate 'line', 893
    new $P2035, "Undef"
    .lex "$past", $P2035
.annotate 'line', 892
    find_lex $P2036, "$/"
    set $S2037, $P2036
    new $P2038, 'String'
    set $P2038, $S2037
    store_lex "$name", $P2038
.annotate 'line', 893
    get_hll_global $P2039, ["PAST"], "Var"
    find_lex $P2040, "$name"
    find_lex $P2041, "$/"
    $P2042 = $P2039."new"($P2040 :named("name"), "parameter" :named("scope"), 1 :named("isdecl"), $P2041 :named("node"))
    store_lex "$past", $P2042
.annotate 'line', 895
    get_global $P2043, "@BLOCK"
    unless_null $P2043, vivify_714
    $P2043 = root_new ['parrot';'ResizablePMCArray']
  vivify_714:
    set $P2044, $P2043[0]
    unless_null $P2044, vivify_715
    new $P2044, "Undef"
  vivify_715:
    find_lex $P2045, "$name"
    $P2044."symbol"($P2045, "lexical" :named("scope"))
.annotate 'line', 896
    find_lex $P2046, "$/"
    find_lex $P2047, "$past"
    $P2048 = $P2046."!make"($P2047)
.annotate 'line', 891
    .return ($P2048)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "named_param"  :subid("109_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2050
    .param pmc param_2051
.annotate 'line', 899
    .lex "self", param_2050
    .lex "$/", param_2051
.annotate 'line', 900
    new $P2052, "Undef"
    .lex "$past", $P2052
    find_lex $P2053, "$/"
    unless_null $P2053, vivify_716
    $P2053 = root_new ['parrot';'Hash']
  vivify_716:
    set $P2054, $P2053["param_var"]
    unless_null $P2054, vivify_717
    new $P2054, "Undef"
  vivify_717:
    $P2055 = $P2054."ast"()
    store_lex "$past", $P2055
.annotate 'line', 901
    find_lex $P2056, "$past"
    find_lex $P2057, "$/"
    unless_null $P2057, vivify_718
    $P2057 = root_new ['parrot';'Hash']
  vivify_718:
    set $P2058, $P2057["param_var"]
    unless_null $P2058, vivify_719
    $P2058 = root_new ['parrot';'Hash']
  vivify_719:
    set $P2059, $P2058["name"]
    unless_null $P2059, vivify_720
    new $P2059, "Undef"
  vivify_720:
    set $S2060, $P2059
    $P2056."named"($S2060)
.annotate 'line', 902
    find_lex $P2061, "$/"
    find_lex $P2062, "$past"
    $P2063 = $P2061."!make"($P2062)
.annotate 'line', 899
    .return ($P2063)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "typename"  :subid("110_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2065
    .param pmc param_2066
.annotate 'line', 905
    .lex "self", param_2065
    .lex "$/", param_2066
.annotate 'line', 906
    $P2067 = root_new ['parrot';'ResizablePMCArray']
    .lex "@name", $P2067
    get_hll_global $P2068, ["HLL"], "Compiler"
    find_lex $P2069, "$/"
    set $S2070, $P2069
    $P2071 = $P2068."parse_name"($S2070)
    store_lex "@name", $P2071
.annotate 'line', 907
    find_lex $P2072, "$/"
    get_hll_global $P2073, ["PAST"], "Var"
.annotate 'line', 908
    find_lex $P2074, "@name"
    $P2075 = $P2074."pop"()
    find_lex $P2076, "@name"
    $P2077 = $P2073."new"($P2075 :named("name"), $P2076 :named("namespace"), "package" :named("scope"))
.annotate 'line', 907
    $P2078 = $P2072."!make"($P2077)
.annotate 'line', 905
    .return ($P2078)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait"  :subid("111_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2080
    .param pmc param_2081
.annotate 'line', 914
    .lex "self", param_2080
    .lex "$/", param_2081
.annotate 'line', 915
    find_lex $P2082, "$/"
    find_lex $P2083, "$/"
    unless_null $P2083, vivify_721
    $P2083 = root_new ['parrot';'Hash']
  vivify_721:
    set $P2084, $P2083["trait_mod"]
    unless_null $P2084, vivify_722
    new $P2084, "Undef"
  vivify_722:
    $P2085 = $P2084."ast"()
    $P2086 = $P2082."!make"($P2085)
.annotate 'line', 914
    .return ($P2086)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait_mod:sym<is>"  :subid("112_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2088
    .param pmc param_2089
.annotate 'line', 918
    .const 'Sub' $P2109 = "113_1300057363.399" 
    capture_lex $P2109
    .lex "self", param_2088
    .lex "$/", param_2089
.annotate 'line', 919
    new $P2090, "Undef"
    .lex "$cpast", $P2090
    find_lex $P2091, "$/"
    unless_null $P2091, vivify_723
    $P2091 = root_new ['parrot';'Hash']
  vivify_723:
    set $P2092, $P2091["circumfix"]
    unless_null $P2092, vivify_724
    $P2092 = root_new ['parrot';'ResizablePMCArray']
  vivify_724:
    set $P2093, $P2092[0]
    unless_null $P2093, vivify_725
    new $P2093, "Undef"
  vivify_725:
    $P2094 = $P2093."ast"()
    store_lex "$cpast", $P2094
.annotate 'line', 920
    find_lex $P2097, "$/"
    unless_null $P2097, vivify_726
    $P2097 = root_new ['parrot';'Hash']
  vivify_726:
    set $P2098, $P2097["longname"]
    unless_null $P2098, vivify_727
    new $P2098, "Undef"
  vivify_727:
    set $S2099, $P2098
    iseq $I2100, $S2099, "parrot_vtable"
    if $I2100, if_2096
.annotate 'line', 940
    find_lex $P2135, "$/"
    unless_null $P2135, vivify_728
    $P2135 = root_new ['parrot';'Hash']
  vivify_728:
    set $P2136, $P2135["longname"]
    unless_null $P2136, vivify_729
    new $P2136, "Undef"
  vivify_729:
    set $S2137, $P2136
    iseq $I2138, $S2137, "pirflags"
    if $I2138, if_2134
.annotate 'line', 944
    find_lex $P2142, "$/"
    $P2143 = $P2142."CURSOR"()
    new $P2144, 'String'
    set $P2144, "Trait '"
    find_lex $P2145, "$/"
    unless_null $P2145, vivify_730
    $P2145 = root_new ['parrot';'Hash']
  vivify_730:
    set $P2146, $P2145["longname"]
    unless_null $P2146, vivify_731
    new $P2146, "Undef"
  vivify_731:
    concat $P2147, $P2144, $P2146
    concat $P2148, $P2147, "' not implemented"
    $P2149 = $P2143."panic"($P2148)
.annotate 'line', 943
    set $P2133, $P2149
.annotate 'line', 940
    goto if_2134_end
  if_2134:
.annotate 'line', 941
    find_lex $P2139, "$/"
    $P2140 = $P2139."CURSOR"()
    $P2141 = $P2140."panic"("Trait 'pirflags' no longer supported; use 'is vtable'")
.annotate 'line', 940
    set $P2133, $P2141
  if_2134_end:
    set $P2095, $P2133
.annotate 'line', 920
    goto if_2096_end
  if_2096:
.annotate 'line', 923
    get_hll_global $P2102, ["PAST"], "Val"
    find_lex $P2103, "$cpast"
    $P2104 = $P2102."ACCEPTS"($P2103)
    if $P2104, unless_2101_end
.annotate 'line', 922
    find_lex $P2105, "$/"
    $P2106 = $P2105."CURSOR"()
    $P2106."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless_2101_end:
.annotate 'line', 924
    find_lex $P2107, "$/"
    .const 'Sub' $P2109 = "113_1300057363.399" 
    newclosure $P2131, $P2109
    $P2132 = $P2107."!make"($P2131)
.annotate 'line', 920
    set $P2095, $P2132
  if_2096_end:
.annotate 'line', 918
    .return ($P2095)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2108"  :anon :subid("113_1300057363.399") :outer("112_1300057363.399")
    .param pmc param_2110
.annotate 'line', 924
    .lex "$match", param_2110
.annotate 'line', 925
    new $P2111, "Undef"
    .lex "$meth", $P2111
    find_lex $P2112, "$match"
    $P2113 = $P2112."ast"()
    set $P2114, $P2113["block_past"]
    unless_null $P2114, vivify_732
    new $P2114, "Undef"
  vivify_732:
    store_lex "$meth", $P2114
.annotate 'line', 926
    find_dynamic_lex $P2117, "$*PACKAGE-SETUP"
    unless_null $P2117, vivify_733
    get_hll_global $P2117, "$PACKAGE-SETUP"
    unless_null $P2117, vivify_734
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_734:
  vivify_733:
    defined $I2118, $P2117
    if $I2118, if_2116
    new $P2115, 'Integer'
    set $P2115, $I2118
    goto if_2116_end
  if_2116:
.annotate 'line', 927
    find_dynamic_lex $P2119, "$*PACKAGE-SETUP"
    unless_null $P2119, vivify_735
    get_hll_global $P2119, "$PACKAGE-SETUP"
    unless_null $P2119, vivify_736
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_736:
  vivify_735:
    get_hll_global $P2120, ["PAST"], "Op"
.annotate 'line', 929
    get_hll_global $P2121, ["PAST"], "Op"
.annotate 'line', 932
    get_hll_global $P2122, ["PAST"], "Var"
    $P2123 = $P2122."new"("type_obj" :named("name"), "register" :named("scope"))
    $P2124 = $P2121."new"($P2123, "get_how PP" :named("pirop"))
.annotate 'line', 934
    get_hll_global $P2125, ["PAST"], "Var"
    $P2126 = $P2125."new"("type_obj" :named("name"), "register" :named("scope"))
    find_lex $P2127, "$cpast"
    find_lex $P2128, "$meth"
    $P2129 = $P2120."new"($P2124, $P2126, $P2127, $P2128, "callmethod" :named("pasttype"), "add_parrot_vtable_mapping" :named("name"))
.annotate 'line', 927
    $P2130 = $P2119."push"($P2129)
.annotate 'line', 926
    set $P2115, $P2130
  if_2116_end:
.annotate 'line', 924
    .return ($P2115)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "regex_declarator"  :subid("114_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2153
    .param pmc param_2154
    .param pmc param_2155 :optional
    .param int has_param_2155 :opt_flag
.annotate 'line', 948
    .const 'Sub' $P2253 = "117_1300057363.399" 
    capture_lex $P2253
    .const 'Sub' $P2225 = "116_1300057363.399" 
    capture_lex $P2225
    .const 'Sub' $P2198 = "115_1300057363.399" 
    capture_lex $P2198
    new $P2152, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P2152, control_2151
    push_eh $P2152
    .lex "self", param_2153
    .lex "$/", param_2154
    if has_param_2155, optparam_737
    new $P2156, "Undef"
    set param_2155, $P2156
  optparam_737:
    .lex "$key", param_2155
.annotate 'line', 949
    $P2157 = root_new ['parrot';'ResizablePMCArray']
    .lex "@MODIFIERS", $P2157
.annotate 'line', 952
    new $P2158, "Undef"
    .lex "$name", $P2158
.annotate 'line', 953
    new $P2159, "Undef"
    .lex "$past", $P2159
.annotate 'line', 949

            $P2160 = get_hll_global ['Regex';'P6Regex';'Actions'], '@MODIFIERS'
        
    store_lex "@MODIFIERS", $P2160
.annotate 'line', 952
    find_lex $P2161, "$/"
    unless_null $P2161, vivify_738
    $P2161 = root_new ['parrot';'Hash']
  vivify_738:
    set $P2162, $P2161["deflongname"]
    unless_null $P2162, vivify_739
    new $P2162, "Undef"
  vivify_739:
    $P2163 = $P2162."ast"()
    set $S2164, $P2163
    new $P2165, 'String'
    set $P2165, $S2164
    store_lex "$name", $P2165
    find_lex $P2166, "$past"
.annotate 'line', 954
    find_lex $P2168, "$/"
    unless_null $P2168, vivify_740
    $P2168 = root_new ['parrot';'Hash']
  vivify_740:
    set $P2169, $P2168["proto"]
    unless_null $P2169, vivify_741
    new $P2169, "Undef"
  vivify_741:
    if $P2169, if_2167
.annotate 'line', 993
    find_lex $P2221, "$key"
    set $S2222, $P2221
    iseq $I2223, $S2222, "open"
    if $I2223, if_2220
.annotate 'line', 1006
    .const 'Sub' $P2253 = "117_1300057363.399" 
    capture_lex $P2253
    $P2253()
    goto if_2220_end
  if_2220:
.annotate 'line', 993
    .const 'Sub' $P2225 = "116_1300057363.399" 
    capture_lex $P2225
    $P2225()
  if_2220_end:
    goto if_2167_end
  if_2167:
.annotate 'line', 956
    get_hll_global $P2170, ["PAST"], "Stmts"
.annotate 'line', 957
    get_hll_global $P2171, ["PAST"], "Block"
    find_lex $P2172, "$name"
.annotate 'line', 958
    get_hll_global $P2173, ["PAST"], "Op"
.annotate 'line', 959
    get_hll_global $P2174, ["PAST"], "Var"
    $P2175 = $P2174."new"("self" :named("name"), "parameter" :named("scope"))
    find_lex $P2176, "$name"
    $P2177 = $P2173."new"($P2175, $P2176, "!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 958
    find_lex $P2178, "$/"
    $P2179 = $P2171."new"($P2177, $P2172 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P2178 :named("node"))
.annotate 'line', 968
    get_hll_global $P2180, ["PAST"], "Block"
    new $P2181, "String"
    assign $P2181, "!PREFIX__"
    find_lex $P2182, "$name"
    concat $P2183, $P2181, $P2182
.annotate 'line', 969
    get_hll_global $P2184, ["PAST"], "Op"
.annotate 'line', 970
    get_hll_global $P2185, ["PAST"], "Var"
    $P2186 = $P2185."new"("self" :named("name"), "parameter" :named("scope"))
    find_lex $P2187, "$name"
    $P2188 = $P2184."new"($P2186, $P2187, "!PREFIX__!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 969
    find_lex $P2189, "$/"
    $P2190 = $P2180."new"($P2188, $P2183 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P2189 :named("node"))
.annotate 'line', 968
    $P2191 = $P2170."new"($P2179, $P2190)
.annotate 'line', 956
    store_lex "$past", $P2191
.annotate 'line', 980
    find_lex $P2193, "$past"
    $P2194 = $P2193."list"()
    defined $I2195, $P2194
    unless $I2195, for_undef_762
    iter $P2192, $P2194
    new $P2218, 'ExceptionHandler'
    set_label $P2218, loop2217_handler
    $P2218."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P2218
  loop2217_test:
    unless $P2192, loop2217_done
    shift $P2196, $P2192
  loop2217_redo:
    .const 'Sub' $P2198 = "115_1300057363.399" 
    capture_lex $P2198
    $P2198($P2196)
  loop2217_next:
    goto loop2217_test
  loop2217_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2219, exception, 'type'
    eq $P2219, .CONTROL_LOOP_NEXT, loop2217_next
    eq $P2219, .CONTROL_LOOP_REDO, loop2217_redo
  loop2217_done:
    pop_eh 
  for_undef_762:
  if_2167_end:
.annotate 'line', 1042
    find_lex $P2311, "$/"
    find_lex $P2312, "$past"
    $P2313 = $P2311."!make"($P2312)
.annotate 'line', 948
    .return ($P2313)
  control_2151:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2314, exception, "payload"
    .return ($P2314)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2252"  :anon :subid("117_1300057363.399") :outer("114_1300057363.399")
.annotate 'line', 1007
    new $P2254, "Undef"
    .lex "$regex", $P2254
.annotate 'line', 1008
    get_hll_global $P2255, ["Regex";"P6Regex";"Actions"], "buildsub"
    find_lex $P2256, "$/"
    unless_null $P2256, vivify_742
    $P2256 = root_new ['parrot';'Hash']
  vivify_742:
    set $P2257, $P2256["p6regex"]
    unless_null $P2257, vivify_743
    new $P2257, "Undef"
  vivify_743:
    $P2258 = $P2257."ast"()
    get_global $P2259, "@BLOCK"
    $P2260 = $P2259."shift"()
    $P2261 = $P2255($P2258, $P2260)
    store_lex "$regex", $P2261
.annotate 'line', 1009
    find_lex $P2262, "$regex"
    find_lex $P2263, "$name"
    $P2262."name"($P2263)
.annotate 'line', 1011
    get_hll_global $P2264, ["PAST"], "Op"
.annotate 'line', 1013
    get_hll_global $P2265, ["PAST"], "Var"
    new $P2266, "ResizablePMCArray"
    push $P2266, "Regex"
    $P2267 = $P2265."new"("Method" :named("name"), $P2266 :named("namespace"), "package" :named("scope"))
    find_lex $P2268, "$regex"
    $P2269 = $P2264."new"($P2267, $P2268, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 1011
    store_lex "$past", $P2269
.annotate 'line', 1016
    find_dynamic_lex $P2271, "$*PACKAGE-SETUP"
    unless_null $P2271, vivify_744
    get_hll_global $P2271, "$PACKAGE-SETUP"
    unless_null $P2271, vivify_745
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_745:
  vivify_744:
    defined $I2272, $P2271
    unless $I2272, if_2270_end
.annotate 'line', 1017
    find_dynamic_lex $P2273, "$*PACKAGE-SETUP"
    unless_null $P2273, vivify_746
    get_hll_global $P2273, "$PACKAGE-SETUP"
    unless_null $P2273, vivify_747
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_747:
  vivify_746:
    get_hll_global $P2274, ["PAST"], "Op"
.annotate 'line', 1019
    get_hll_global $P2275, ["PAST"], "Op"
.annotate 'line', 1021
    get_hll_global $P2276, ["PAST"], "Var"
    $P2277 = $P2276."new"("type_obj" :named("name"), "register" :named("scope"))
    $P2278 = $P2275."new"($P2277, "get_how PP" :named("pirop"))
.annotate 'line', 1023
    get_hll_global $P2279, ["PAST"], "Var"
    $P2280 = $P2279."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 1024
    get_hll_global $P2281, ["PAST"], "Val"
    find_lex $P2282, "$name"
    $P2283 = $P2281."new"($P2282 :named("value"))
.annotate 'line', 1025
    get_hll_global $P2284, ["PAST"], "Val"
    find_lex $P2285, "$regex"
    $P2286 = $P2284."new"($P2285 :named("value"))
    $P2287 = $P2274."new"($P2278, $P2280, $P2283, $P2286, "callmethod" :named("pasttype"), "add_method" :named("name"))
.annotate 'line', 1017
    $P2273."push"($P2287)
.annotate 'line', 1027
    find_dynamic_lex $P2288, "$*PACKAGE-SETUP"
    unless_null $P2288, vivify_748
    get_hll_global $P2288, "$PACKAGE-SETUP"
    unless_null $P2288, vivify_749
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_749:
  vivify_748:
    get_hll_global $P2289, ["PAST"], "Op"
.annotate 'line', 1029
    get_hll_global $P2290, ["PAST"], "Op"
.annotate 'line', 1031
    get_hll_global $P2291, ["PAST"], "Var"
    $P2292 = $P2291."new"("type_obj" :named("name"), "register" :named("scope"))
    $P2293 = $P2290."new"($P2292, "get_how PP" :named("pirop"))
.annotate 'line', 1033
    get_hll_global $P2294, ["PAST"], "Var"
    $P2295 = $P2294."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 1034
    get_hll_global $P2296, ["PAST"], "Val"
    new $P2297, "String"
    assign $P2297, "!PREFIX__"
    find_lex $P2298, "$name"
    concat $P2299, $P2297, $P2298
    $P2300 = $P2296."new"($P2299 :named("value"))
.annotate 'line', 1035
    get_hll_global $P2301, ["PAST"], "Var"
    new $P2302, "String"
    assign $P2302, "!PREFIX__"
    find_lex $P2303, "$name"
    concat $P2304, $P2302, $P2303
    $P2305 = $P2301."new"($P2304 :named("name"), "package" :named("scope"))
    $P2306 = $P2289."new"($P2293, $P2295, $P2300, $P2305, "callmethod" :named("pasttype"), "add_method" :named("name"))
.annotate 'line', 1027
    $P2288."push"($P2306)
  if_2270_end:
.annotate 'line', 1039
    find_lex $P2307, "$regex"
    find_lex $P2308, "$past"
    unless_null $P2308, vivify_750
    $P2308 = root_new ['parrot';'Hash']
    store_lex "$past", $P2308
  vivify_750:
    set $P2308["sink"], $P2307
.annotate 'line', 1040
    find_lex $P2309, "@MODIFIERS"
    $P2310 = $P2309."shift"()
.annotate 'line', 1006
    .return ($P2310)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2224"  :anon :subid("116_1300057363.399") :outer("114_1300057363.399")
.annotate 'line', 994
    $P2226 = root_new ['parrot';'Hash']
    .lex "%h", $P2226
.annotate 'line', 993
    find_lex $P2227, "%h"
.annotate 'line', 995
    find_lex $P2229, "$/"
    unless_null $P2229, vivify_751
    $P2229 = root_new ['parrot';'Hash']
  vivify_751:
    set $P2230, $P2229["sym"]
    unless_null $P2230, vivify_752
    new $P2230, "Undef"
  vivify_752:
    set $S2231, $P2230
    iseq $I2232, $S2231, "token"
    unless $I2232, if_2228_end
    new $P2233, "Integer"
    assign $P2233, 1
    find_lex $P2234, "%h"
    unless_null $P2234, vivify_753
    $P2234 = root_new ['parrot';'Hash']
    store_lex "%h", $P2234
  vivify_753:
    set $P2234["r"], $P2233
  if_2228_end:
.annotate 'line', 996
    find_lex $P2236, "$/"
    unless_null $P2236, vivify_754
    $P2236 = root_new ['parrot';'Hash']
  vivify_754:
    set $P2237, $P2236["sym"]
    unless_null $P2237, vivify_755
    new $P2237, "Undef"
  vivify_755:
    set $S2238, $P2237
    iseq $I2239, $S2238, "rule"
    unless $I2239, if_2235_end
    new $P2240, "Integer"
    assign $P2240, 1
    find_lex $P2241, "%h"
    unless_null $P2241, vivify_756
    $P2241 = root_new ['parrot';'Hash']
    store_lex "%h", $P2241
  vivify_756:
    set $P2241["r"], $P2240
    new $P2242, "Integer"
    assign $P2242, 1
    find_lex $P2243, "%h"
    unless_null $P2243, vivify_757
    $P2243 = root_new ['parrot';'Hash']
    store_lex "%h", $P2243
  vivify_757:
    set $P2243["s"], $P2242
  if_2235_end:
.annotate 'line', 997
    find_lex $P2244, "@MODIFIERS"
    find_lex $P2245, "%h"
    $P2244."unshift"($P2245)
.annotate 'line', 998

                $P0 = find_lex '$name'
                set_hll_global ['Regex';'P6Regex';'Actions'], '$REGEXNAME', $P0
            
.annotate 'line', 1002
    get_global $P2246, "@BLOCK"
    unless_null $P2246, vivify_758
    $P2246 = root_new ['parrot';'ResizablePMCArray']
  vivify_758:
    set $P2247, $P2246[0]
    unless_null $P2247, vivify_759
    new $P2247, "Undef"
  vivify_759:
    $P2247."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 1003
    get_global $P2248, "@BLOCK"
    unless_null $P2248, vivify_760
    $P2248 = root_new ['parrot';'ResizablePMCArray']
  vivify_760:
    set $P2249, $P2248[0]
    unless_null $P2249, vivify_761
    new $P2249, "Undef"
  vivify_761:
    $P2249."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 1004
    new $P2250, "Exception"
    set $P2250['type'], .CONTROL_RETURN
    new $P2251, "Integer"
    assign $P2251, 0
    setattribute $P2250, 'payload', $P2251
    throw $P2250
.annotate 'line', 993
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2197"  :anon :subid("115_1300057363.399") :outer("114_1300057363.399")
    .param pmc param_2199
.annotate 'line', 980
    .lex "$_", param_2199
.annotate 'line', 981
    find_dynamic_lex $P2200, "$*PACKAGE-SETUP"
    unless_null $P2200, vivify_763
    get_hll_global $P2200, "$PACKAGE-SETUP"
    unless_null $P2200, vivify_764
    die "Contextual $*PACKAGE-SETUP not found"
  vivify_764:
  vivify_763:
    get_hll_global $P2201, ["PAST"], "Op"
.annotate 'line', 983
    get_hll_global $P2202, ["PAST"], "Op"
.annotate 'line', 985
    get_hll_global $P2203, ["PAST"], "Var"
    $P2204 = $P2203."new"("type_obj" :named("name"), "register" :named("scope"))
    $P2205 = $P2202."new"($P2204, "get_how PP" :named("pirop"))
.annotate 'line', 987
    get_hll_global $P2206, ["PAST"], "Var"
    $P2207 = $P2206."new"("type_obj" :named("name"), "register" :named("scope"))
.annotate 'line', 988
    get_hll_global $P2208, ["PAST"], "Val"
    find_lex $P2209, "$_"
    $P2210 = $P2209."name"()
    $P2211 = $P2208."new"($P2210 :named("value"))
.annotate 'line', 989
    get_hll_global $P2212, ["PAST"], "Val"
    find_lex $P2213, "$_"
    $P2214 = $P2212."new"($P2213 :named("value"))
    $P2215 = $P2201."new"($P2205, $P2207, $P2211, $P2214, "callmethod" :named("pasttype"), "add_method" :named("name"))
.annotate 'line', 981
    $P2216 = $P2200."push"($P2215)
.annotate 'line', 980
    .return ($P2216)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "dotty"  :subid("118_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2316
    .param pmc param_2317
.annotate 'line', 1046
    .lex "self", param_2316
    .lex "$/", param_2317
.annotate 'line', 1047
    new $P2318, "Undef"
    .lex "$past", $P2318
    find_lex $P2321, "$/"
    unless_null $P2321, vivify_765
    $P2321 = root_new ['parrot';'Hash']
  vivify_765:
    set $P2322, $P2321["args"]
    unless_null $P2322, vivify_766
    new $P2322, "Undef"
  vivify_766:
    if $P2322, if_2320
    get_hll_global $P2327, ["PAST"], "Op"
    find_lex $P2328, "$/"
    $P2329 = $P2327."new"($P2328 :named("node"))
    set $P2319, $P2329
    goto if_2320_end
  if_2320:
    find_lex $P2323, "$/"
    unless_null $P2323, vivify_767
    $P2323 = root_new ['parrot';'Hash']
  vivify_767:
    set $P2324, $P2323["args"]
    unless_null $P2324, vivify_768
    $P2324 = root_new ['parrot';'ResizablePMCArray']
  vivify_768:
    set $P2325, $P2324[0]
    unless_null $P2325, vivify_769
    new $P2325, "Undef"
  vivify_769:
    $P2326 = $P2325."ast"()
    set $P2319, $P2326
  if_2320_end:
    store_lex "$past", $P2319
.annotate 'line', 1048
    find_lex $P2331, "$/"
    unless_null $P2331, vivify_770
    $P2331 = root_new ['parrot';'Hash']
  vivify_770:
    set $P2332, $P2331["quote"]
    unless_null $P2332, vivify_771
    new $P2332, "Undef"
  vivify_771:
    if $P2332, if_2330
.annotate 'line', 1052
    find_lex $P2339, "$/"
    unless_null $P2339, vivify_772
    $P2339 = root_new ['parrot';'Hash']
  vivify_772:
    set $P2340, $P2339["longname"]
    unless_null $P2340, vivify_773
    new $P2340, "Undef"
  vivify_773:
    set $S2341, $P2340
    iseq $I2342, $S2341, "HOW"
    if $I2342, if_2338
.annotate 'line', 1055
    find_lex $P2345, "$/"
    unless_null $P2345, vivify_774
    $P2345 = root_new ['parrot';'Hash']
  vivify_774:
    set $P2346, $P2345["longname"]
    unless_null $P2346, vivify_775
    new $P2346, "Undef"
  vivify_775:
    set $S2347, $P2346
    iseq $I2348, $S2347, "WHAT"
    if $I2348, if_2344
.annotate 'line', 1058
    find_lex $P2351, "$/"
    unless_null $P2351, vivify_776
    $P2351 = root_new ['parrot';'Hash']
  vivify_776:
    set $P2352, $P2351["longname"]
    unless_null $P2352, vivify_777
    new $P2352, "Undef"
  vivify_777:
    set $S2353, $P2352
    iseq $I2354, $S2353, "WHO"
    if $I2354, if_2350
.annotate 'line', 1062
    find_lex $P2356, "$past"
    find_lex $P2357, "$/"
    unless_null $P2357, vivify_778
    $P2357 = root_new ['parrot';'Hash']
  vivify_778:
    set $P2358, $P2357["longname"]
    unless_null $P2358, vivify_779
    new $P2358, "Undef"
  vivify_779:
    set $S2359, $P2358
    $P2356."name"($S2359)
.annotate 'line', 1063
    find_lex $P2360, "$past"
    $P2360."pasttype"("callmethod")
.annotate 'line', 1061
    goto if_2350_end
  if_2350:
.annotate 'line', 1059
    find_lex $P2355, "$past"
    $P2355."pirop"("get_who PP")
  if_2350_end:
.annotate 'line', 1058
    goto if_2344_end
  if_2344:
.annotate 'line', 1056
    find_lex $P2349, "$past"
    $P2349."pirop"("get_what PP")
  if_2344_end:
.annotate 'line', 1055
    goto if_2338_end
  if_2338:
.annotate 'line', 1053
    find_lex $P2343, "$past"
    $P2343."pirop"("get_how PP")
  if_2338_end:
.annotate 'line', 1052
    goto if_2330_end
  if_2330:
.annotate 'line', 1049
    find_lex $P2333, "$past"
    find_lex $P2334, "$/"
    unless_null $P2334, vivify_780
    $P2334 = root_new ['parrot';'Hash']
  vivify_780:
    set $P2335, $P2334["quote"]
    unless_null $P2335, vivify_781
    new $P2335, "Undef"
  vivify_781:
    $P2336 = $P2335."ast"()
    $P2333."name"($P2336)
.annotate 'line', 1050
    find_lex $P2337, "$past"
    $P2337."pasttype"("callmethod")
  if_2330_end:
.annotate 'line', 1065
    find_lex $P2361, "$/"
    find_lex $P2362, "$past"
    $P2363 = $P2361."!make"($P2362)
.annotate 'line', 1046
    .return ($P2363)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<self>"  :subid("119_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2365
    .param pmc param_2366
.annotate 'line', 1070
    .lex "self", param_2365
    .lex "$/", param_2366
.annotate 'line', 1071
    find_lex $P2367, "$/"
    get_hll_global $P2368, ["PAST"], "Var"
    $P2369 = $P2368."new"("self" :named("name"))
    $P2370 = $P2367."!make"($P2369)
.annotate 'line', 1070
    .return ($P2370)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<identifier>"  :subid("120_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2372
    .param pmc param_2373
.annotate 'line', 1074
    .lex "self", param_2372
    .lex "$/", param_2373
.annotate 'line', 1075
    new $P2374, "Undef"
    .lex "$past", $P2374
    find_lex $P2375, "$/"
    unless_null $P2375, vivify_782
    $P2375 = root_new ['parrot';'Hash']
  vivify_782:
    set $P2376, $P2375["args"]
    unless_null $P2376, vivify_783
    new $P2376, "Undef"
  vivify_783:
    $P2377 = $P2376."ast"()
    store_lex "$past", $P2377
.annotate 'line', 1076
    find_lex $P2378, "$past"
    find_lex $P2379, "$/"
    unless_null $P2379, vivify_784
    $P2379 = root_new ['parrot';'Hash']
  vivify_784:
    set $P2380, $P2379["deflongname"]
    unless_null $P2380, vivify_785
    new $P2380, "Undef"
  vivify_785:
    set $S2381, $P2380
    $P2378."name"($S2381)
.annotate 'line', 1077
    find_lex $P2382, "$/"
    find_lex $P2383, "$past"
    $P2384 = $P2382."!make"($P2383)
.annotate 'line', 1074
    .return ($P2384)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<name>"  :subid("121_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2386
    .param pmc param_2387
.annotate 'line', 1080
    .const 'Sub' $P2402 = "122_1300057363.399" 
    capture_lex $P2402
    .lex "self", param_2386
    .lex "$/", param_2387
.annotate 'line', 1082
    new $P2388, "Undef"
    .lex "$var", $P2388
.annotate 'line', 1094
    new $P2389, "Undef"
    .lex "$past", $P2389
.annotate 'line', 1080
    find_lex $P2390, "$var"
.annotate 'line', 1083
    find_lex $P2392, "$/"
    unless_null $P2392, vivify_786
    $P2392 = root_new ['parrot';'Hash']
  vivify_786:
    set $P2393, $P2392["name"]
    unless_null $P2393, vivify_787
    new $P2393, "Undef"
  vivify_787:
    set $S2394, $P2393
    $P2395 = "is_lexical"($S2394)
    if $P2395, if_2391
.annotate 'line', 1086
    .const 'Sub' $P2402 = "122_1300057363.399" 
    capture_lex $P2402
    $P2402()
    goto if_2391_end
  if_2391:
.annotate 'line', 1084
    get_hll_global $P2396, ["PAST"], "Var"
    find_lex $P2397, "$/"
    unless_null $P2397, vivify_793
    $P2397 = root_new ['parrot';'Hash']
  vivify_793:
    set $P2398, $P2397["name"]
    unless_null $P2398, vivify_794
    new $P2398, "Undef"
  vivify_794:
    set $S2399, $P2398
    $P2400 = $P2396."new"($S2399 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P2400
  if_2391_end:
.annotate 'line', 1094
    find_lex $P2425, "$var"
    store_lex "$past", $P2425
.annotate 'line', 1095
    find_lex $P2427, "$/"
    unless_null $P2427, vivify_795
    $P2427 = root_new ['parrot';'Hash']
  vivify_795:
    set $P2428, $P2427["args"]
    unless_null $P2428, vivify_796
    new $P2428, "Undef"
  vivify_796:
    unless $P2428, if_2426_end
.annotate 'line', 1096
    find_lex $P2429, "$/"
    unless_null $P2429, vivify_797
    $P2429 = root_new ['parrot';'Hash']
  vivify_797:
    set $P2430, $P2429["args"]
    unless_null $P2430, vivify_798
    $P2430 = root_new ['parrot';'ResizablePMCArray']
  vivify_798:
    set $P2431, $P2430[0]
    unless_null $P2431, vivify_799
    new $P2431, "Undef"
  vivify_799:
    $P2432 = $P2431."ast"()
    store_lex "$past", $P2432
.annotate 'line', 1097
    find_lex $P2433, "$past"
    find_lex $P2434, "$var"
    $P2433."unshift"($P2434)
  if_2426_end:
.annotate 'line', 1099
    find_lex $P2435, "$/"
    find_lex $P2436, "$past"
    $P2437 = $P2435."!make"($P2436)
.annotate 'line', 1080
    .return ($P2437)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2401"  :anon :subid("122_1300057363.399") :outer("121_1300057363.399")
.annotate 'line', 1087
    $P2403 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P2403
.annotate 'line', 1088
    new $P2404, "Undef"
    .lex "$name", $P2404
.annotate 'line', 1087
    find_lex $P2405, "$/"
    unless_null $P2405, vivify_788
    $P2405 = root_new ['parrot';'Hash']
  vivify_788:
    set $P2406, $P2405["name"]
    unless_null $P2406, vivify_789
    $P2406 = root_new ['parrot';'Hash']
  vivify_789:
    set $P2407, $P2406["identifier"]
    unless_null $P2407, vivify_790
    new $P2407, "Undef"
  vivify_790:
    clone $P2408, $P2407
    store_lex "@ns", $P2408
.annotate 'line', 1088
    find_lex $P2409, "@ns"
    $P2410 = $P2409."pop"()
    store_lex "$name", $P2410
.annotate 'line', 1089
    find_lex $P2414, "@ns"
    if $P2414, if_2413
    set $P2412, $P2414
    goto if_2413_end
  if_2413:
    find_lex $P2415, "@ns"
    unless_null $P2415, vivify_791
    $P2415 = root_new ['parrot';'ResizablePMCArray']
  vivify_791:
    set $P2416, $P2415[0]
    unless_null $P2416, vivify_792
    new $P2416, "Undef"
  vivify_792:
    set $S2417, $P2416
    iseq $I2418, $S2417, "GLOBAL"
    new $P2412, 'Integer'
    set $P2412, $I2418
  if_2413_end:
    unless $P2412, if_2411_end
    find_lex $P2419, "@ns"
    $P2419."shift"()
  if_2411_end:
.annotate 'line', 1090
    get_hll_global $P2420, ["PAST"], "Var"
    find_lex $P2421, "$name"
    set $S2422, $P2421
    find_lex $P2423, "@ns"
    $P2424 = $P2420."new"($S2422 :named("name"), $P2423 :named("namespace"), "package" :named("scope"))
    store_lex "$var", $P2424
.annotate 'line', 1086
    .return ($P2424)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::op>"  :subid("123_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2440
    .param pmc param_2441
.annotate 'line', 1112
    .lex "self", param_2440
    .lex "$/", param_2441
.annotate 'line', 1113
    new $P2442, "Undef"
    .lex "$past", $P2442
.annotate 'line', 1114
    new $P2443, "Undef"
    .lex "$pirop", $P2443
.annotate 'line', 1113
    find_lex $P2446, "$/"
    unless_null $P2446, vivify_800
    $P2446 = root_new ['parrot';'Hash']
  vivify_800:
    set $P2447, $P2446["args"]
    unless_null $P2447, vivify_801
    new $P2447, "Undef"
  vivify_801:
    if $P2447, if_2445
    get_hll_global $P2452, ["PAST"], "Op"
    find_lex $P2453, "$/"
    $P2454 = $P2452."new"($P2453 :named("node"))
    set $P2444, $P2454
    goto if_2445_end
  if_2445:
    find_lex $P2448, "$/"
    unless_null $P2448, vivify_802
    $P2448 = root_new ['parrot';'Hash']
  vivify_802:
    set $P2449, $P2448["args"]
    unless_null $P2449, vivify_803
    $P2449 = root_new ['parrot';'ResizablePMCArray']
  vivify_803:
    set $P2450, $P2449[0]
    unless_null $P2450, vivify_804
    new $P2450, "Undef"
  vivify_804:
    $P2451 = $P2450."ast"()
    set $P2444, $P2451
  if_2445_end:
    store_lex "$past", $P2444
.annotate 'line', 1114
    find_lex $P2455, "$/"
    unless_null $P2455, vivify_805
    $P2455 = root_new ['parrot';'Hash']
  vivify_805:
    set $P2456, $P2455["op"]
    unless_null $P2456, vivify_806
    new $P2456, "Undef"
  vivify_806:
    set $S2457, $P2456
    new $P2458, 'String'
    set $P2458, $S2457
    store_lex "$pirop", $P2458
.annotate 'line', 1115

            $P0 = find_lex '$pirop'
            $S0 = $P0
            $P0 = split '__', $S0
            $S0 = join ' ', $P0
            $P2459 = box $S0
        
    store_lex "$pirop", $P2459
.annotate 'line', 1122
    find_lex $P2460, "$past"
    find_lex $P2461, "$pirop"
    $P2460."pirop"($P2461)
.annotate 'line', 1123
    find_lex $P2462, "$past"
    $P2462."pasttype"("pirop")
.annotate 'line', 1124
    find_lex $P2463, "$/"
    find_lex $P2464, "$past"
    $P2465 = $P2463."!make"($P2464)
.annotate 'line', 1112
    .return ($P2465)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<onlystar>"  :subid("124_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2467
    .param pmc param_2468
.annotate 'line', 1127
    .lex "self", param_2467
    .lex "$/", param_2468
.annotate 'line', 1128
    find_lex $P2469, "$/"
    get_hll_global $P2470, ["PAST"], "Op"
    $P2471 = $P2470."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P2472 = $P2469."!make"($P2471)
.annotate 'line', 1127
    .return ($P2472)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "args"  :subid("125_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2474
    .param pmc param_2475
.annotate 'line', 1133
    .lex "self", param_2474
    .lex "$/", param_2475
    find_lex $P2476, "$/"
    find_lex $P2477, "$/"
    unless_null $P2477, vivify_807
    $P2477 = root_new ['parrot';'Hash']
  vivify_807:
    set $P2478, $P2477["arglist"]
    unless_null $P2478, vivify_808
    new $P2478, "Undef"
  vivify_808:
    $P2479 = $P2478."ast"()
    $P2480 = $P2476."!make"($P2479)
    .return ($P2480)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "arglist"  :subid("126_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2482
    .param pmc param_2483
.annotate 'line', 1135
    .const 'Sub' $P2494 = "127_1300057363.399" 
    capture_lex $P2494
    .lex "self", param_2482
    .lex "$/", param_2483
.annotate 'line', 1136
    new $P2484, "Undef"
    .lex "$past", $P2484
.annotate 'line', 1144
    new $P2485, "Undef"
    .lex "$i", $P2485
.annotate 'line', 1145
    new $P2486, "Undef"
    .lex "$n", $P2486
.annotate 'line', 1136
    get_hll_global $P2487, ["PAST"], "Op"
    find_lex $P2488, "$/"
    $P2489 = $P2487."new"("call" :named("pasttype"), $P2488 :named("node"))
    store_lex "$past", $P2489
.annotate 'line', 1137
    find_lex $P2491, "$/"
    unless_null $P2491, vivify_809
    $P2491 = root_new ['parrot';'Hash']
  vivify_809:
    set $P2492, $P2491["EXPR"]
    unless_null $P2492, vivify_810
    new $P2492, "Undef"
  vivify_810:
    unless $P2492, if_2490_end
    .const 'Sub' $P2494 = "127_1300057363.399" 
    capture_lex $P2494
    $P2494()
  if_2490_end:
.annotate 'line', 1144
    new $P2526, "Integer"
    assign $P2526, 0
    store_lex "$i", $P2526
.annotate 'line', 1145
    find_lex $P2527, "$past"
    $P2528 = $P2527."list"()
    set $N2529, $P2528
    new $P2530, 'Float'
    set $P2530, $N2529
    store_lex "$n", $P2530
.annotate 'line', 1146
    new $P2578, 'ExceptionHandler'
    set_label $P2578, loop2577_handler
    $P2578."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P2578
  loop2577_test:
    find_lex $P2531, "$i"
    set $N2532, $P2531
    find_lex $P2533, "$n"
    set $N2534, $P2533
    islt $I2535, $N2532, $N2534
    unless $I2535, loop2577_done
  loop2577_redo:
.annotate 'line', 1147
    find_lex $P2537, "$i"
    set $I2538, $P2537
    find_lex $P2539, "$past"
    unless_null $P2539, vivify_814
    $P2539 = root_new ['parrot';'ResizablePMCArray']
  vivify_814:
    set $P2540, $P2539[$I2538]
    unless_null $P2540, vivify_815
    new $P2540, "Undef"
  vivify_815:
    $S2541 = $P2540."name"()
    iseq $I2542, $S2541, "&prefix:<|>"
    unless $I2542, if_2536_end
.annotate 'line', 1148
    find_lex $P2543, "$i"
    set $I2544, $P2543
    find_lex $P2545, "$past"
    unless_null $P2545, vivify_816
    $P2545 = root_new ['parrot';'ResizablePMCArray']
  vivify_816:
    set $P2546, $P2545[$I2544]
    unless_null $P2546, vivify_817
    $P2546 = root_new ['parrot';'ResizablePMCArray']
  vivify_817:
    set $P2547, $P2546[0]
    unless_null $P2547, vivify_818
    new $P2547, "Undef"
  vivify_818:
    find_lex $P2548, "$i"
    set $I2549, $P2548
    find_lex $P2550, "$past"
    unless_null $P2550, vivify_819
    $P2550 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$past", $P2550
  vivify_819:
    set $P2550[$I2549], $P2547
.annotate 'line', 1149
    find_lex $P2551, "$i"
    set $I2552, $P2551
    find_lex $P2553, "$past"
    unless_null $P2553, vivify_820
    $P2553 = root_new ['parrot';'ResizablePMCArray']
  vivify_820:
    set $P2554, $P2553[$I2552]
    unless_null $P2554, vivify_821
    new $P2554, "Undef"
  vivify_821:
    $P2554."flat"(1)
.annotate 'line', 1150
    find_lex $P2558, "$i"
    set $I2559, $P2558
    find_lex $P2560, "$past"
    unless_null $P2560, vivify_822
    $P2560 = root_new ['parrot';'ResizablePMCArray']
  vivify_822:
    set $P2561, $P2560[$I2559]
    unless_null $P2561, vivify_823
    new $P2561, "Undef"
  vivify_823:
    get_hll_global $P2562, ["PAST"], "Val"
    $P2563 = $P2561."isa"($P2562)
    if $P2563, if_2557
    set $P2556, $P2563
    goto if_2557_end
  if_2557:
.annotate 'line', 1151
    find_lex $P2564, "$i"
    set $I2565, $P2564
    find_lex $P2566, "$past"
    unless_null $P2566, vivify_824
    $P2566 = root_new ['parrot';'ResizablePMCArray']
  vivify_824:
    set $P2567, $P2566[$I2565]
    unless_null $P2567, vivify_825
    new $P2567, "Undef"
  vivify_825:
    $S2568 = $P2567."name"()
    substr $S2569, $S2568, 0, 1
    iseq $I2570, $S2569, "%"
    new $P2556, 'Integer'
    set $P2556, $I2570
  if_2557_end:
    unless $P2556, if_2555_end
.annotate 'line', 1152
    find_lex $P2571, "$i"
    set $I2572, $P2571
    find_lex $P2573, "$past"
    unless_null $P2573, vivify_826
    $P2573 = root_new ['parrot';'ResizablePMCArray']
  vivify_826:
    set $P2574, $P2573[$I2572]
    unless_null $P2574, vivify_827
    new $P2574, "Undef"
  vivify_827:
    $P2574."named"(1)
  if_2555_end:
  if_2536_end:
.annotate 'line', 1147
    find_lex $P2575, "$i"
    clone $P2576, $P2575
    inc $P2575
  loop2577_next:
.annotate 'line', 1146
    goto loop2577_test
  loop2577_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2579, exception, 'type'
    eq $P2579, .CONTROL_LOOP_NEXT, loop2577_next
    eq $P2579, .CONTROL_LOOP_REDO, loop2577_redo
  loop2577_done:
    pop_eh 
.annotate 'line', 1157
    find_lex $P2580, "$/"
    find_lex $P2581, "$past"
    $P2582 = $P2580."!make"($P2581)
.annotate 'line', 1135
    .return ($P2582)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2493"  :anon :subid("127_1300057363.399") :outer("126_1300057363.399")
.annotate 'line', 1137
    .const 'Sub' $P2515 = "128_1300057363.399" 
    capture_lex $P2515
.annotate 'line', 1138
    new $P2495, "Undef"
    .lex "$expr", $P2495
    find_lex $P2496, "$/"
    unless_null $P2496, vivify_811
    $P2496 = root_new ['parrot';'Hash']
  vivify_811:
    set $P2497, $P2496["EXPR"]
    unless_null $P2497, vivify_812
    new $P2497, "Undef"
  vivify_812:
    $P2498 = $P2497."ast"()
    store_lex "$expr", $P2498
.annotate 'line', 1139
    find_lex $P2503, "$expr"
    $S2504 = $P2503."name"()
    iseq $I2505, $S2504, "&infix:<,>"
    if $I2505, if_2502
    new $P2501, 'Integer'
    set $P2501, $I2505
    goto if_2502_end
  if_2502:
    find_lex $P2506, "$expr"
    $P2507 = $P2506."named"()
    isfalse $I2508, $P2507
    new $P2501, 'Integer'
    set $P2501, $I2508
  if_2502_end:
    if $P2501, if_2500
.annotate 'line', 1142
    find_lex $P2523, "$past"
    find_lex $P2524, "$expr"
    $P2525 = $P2523."push"($P2524)
    set $P2499, $P2525
.annotate 'line', 1139
    goto if_2500_end
  if_2500:
.annotate 'line', 1140
    find_lex $P2510, "$expr"
    $P2511 = $P2510."list"()
    defined $I2512, $P2511
    unless $I2512, for_undef_813
    iter $P2509, $P2511
    new $P2521, 'ExceptionHandler'
    set_label $P2521, loop2520_handler
    $P2521."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P2521
  loop2520_test:
    unless $P2509, loop2520_done
    shift $P2513, $P2509
  loop2520_redo:
    .const 'Sub' $P2515 = "128_1300057363.399" 
    capture_lex $P2515
    $P2515($P2513)
  loop2520_next:
    goto loop2520_test
  loop2520_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2522, exception, 'type'
    eq $P2522, .CONTROL_LOOP_NEXT, loop2520_next
    eq $P2522, .CONTROL_LOOP_REDO, loop2520_redo
  loop2520_done:
    pop_eh 
  for_undef_813:
.annotate 'line', 1139
    set $P2499, $P2509
  if_2500_end:
.annotate 'line', 1137
    .return ($P2499)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2514"  :anon :subid("128_1300057363.399") :outer("127_1300057363.399")
    .param pmc param_2516
.annotate 'line', 1140
    .lex "$_", param_2516
    find_lex $P2517, "$past"
    find_lex $P2518, "$_"
    $P2519 = $P2517."push"($P2518)
    .return ($P2519)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<multi_declarator>"  :subid("129_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2584
    .param pmc param_2585
.annotate 'line', 1160
    .lex "self", param_2584
    .lex "$/", param_2585
    find_lex $P2586, "$/"
    find_lex $P2587, "$/"
    unless_null $P2587, vivify_828
    $P2587 = root_new ['parrot';'Hash']
  vivify_828:
    set $P2588, $P2587["multi_declarator"]
    unless_null $P2588, vivify_829
    new $P2588, "Undef"
  vivify_829:
    $P2589 = $P2588."ast"()
    $P2590 = $P2586."!make"($P2589)
    .return ($P2590)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<value>"  :subid("130_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2592
    .param pmc param_2593
.annotate 'line', 1162
    .lex "self", param_2592
    .lex "$/", param_2593
    find_lex $P2594, "$/"
    find_lex $P2595, "$/"
    unless_null $P2595, vivify_830
    $P2595 = root_new ['parrot';'Hash']
  vivify_830:
    set $P2596, $P2595["value"]
    unless_null $P2596, vivify_831
    new $P2596, "Undef"
  vivify_831:
    $P2597 = $P2596."ast"()
    $P2598 = $P2594."!make"($P2597)
    .return ($P2598)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<( )>"  :subid("131_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2600
    .param pmc param_2601
.annotate 'line', 1164
    .lex "self", param_2600
    .lex "$/", param_2601
.annotate 'line', 1165
    find_lex $P2602, "$/"
.annotate 'line', 1166
    find_lex $P2605, "$/"
    unless_null $P2605, vivify_832
    $P2605 = root_new ['parrot';'Hash']
  vivify_832:
    set $P2606, $P2605["EXPR"]
    unless_null $P2606, vivify_833
    new $P2606, "Undef"
  vivify_833:
    if $P2606, if_2604
.annotate 'line', 1167
    get_hll_global $P2611, ["PAST"], "Op"
    find_lex $P2612, "$/"
    $P2613 = $P2611."new"("list" :named("pasttype"), $P2612 :named("node"))
    set $P2603, $P2613
.annotate 'line', 1166
    goto if_2604_end
  if_2604:
    find_lex $P2607, "$/"
    unless_null $P2607, vivify_834
    $P2607 = root_new ['parrot';'Hash']
  vivify_834:
    set $P2608, $P2607["EXPR"]
    unless_null $P2608, vivify_835
    $P2608 = root_new ['parrot';'ResizablePMCArray']
  vivify_835:
    set $P2609, $P2608[0]
    unless_null $P2609, vivify_836
    new $P2609, "Undef"
  vivify_836:
    $P2610 = $P2609."ast"()
    set $P2603, $P2610
  if_2604_end:
    $P2614 = $P2602."!make"($P2603)
.annotate 'line', 1164
    .return ($P2614)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<[ ]>"  :subid("132_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2616
    .param pmc param_2617
.annotate 'line', 1170
    .lex "self", param_2616
    .lex "$/", param_2617
.annotate 'line', 1171
    new $P2618, "Undef"
    .lex "$past", $P2618
.annotate 'line', 1170
    find_lex $P2619, "$past"
.annotate 'line', 1172
    find_lex $P2621, "$/"
    unless_null $P2621, vivify_837
    $P2621 = root_new ['parrot';'Hash']
  vivify_837:
    set $P2622, $P2621["EXPR"]
    unless_null $P2622, vivify_838
    new $P2622, "Undef"
  vivify_838:
    if $P2622, if_2620
.annotate 'line', 1179
    get_hll_global $P2634, ["PAST"], "Op"
    $P2635 = $P2634."new"("list" :named("pasttype"))
    store_lex "$past", $P2635
.annotate 'line', 1178
    goto if_2620_end
  if_2620:
.annotate 'line', 1173
    find_lex $P2623, "$/"
    unless_null $P2623, vivify_839
    $P2623 = root_new ['parrot';'Hash']
  vivify_839:
    set $P2624, $P2623["EXPR"]
    unless_null $P2624, vivify_840
    $P2624 = root_new ['parrot';'ResizablePMCArray']
  vivify_840:
    set $P2625, $P2624[0]
    unless_null $P2625, vivify_841
    new $P2625, "Undef"
  vivify_841:
    $P2626 = $P2625."ast"()
    store_lex "$past", $P2626
.annotate 'line', 1174
    find_lex $P2628, "$past"
    $S2629 = $P2628."name"()
    isne $I2630, $S2629, "&infix:<,>"
    unless $I2630, if_2627_end
.annotate 'line', 1175
    get_hll_global $P2631, ["PAST"], "Op"
    find_lex $P2632, "$past"
    $P2633 = $P2631."new"($P2632, "list" :named("pasttype"))
    store_lex "$past", $P2633
  if_2627_end:
  if_2620_end:
.annotate 'line', 1181
    find_lex $P2636, "$past"
    $P2636."name"("&circumfix:<[ ]>")
.annotate 'line', 1182
    find_lex $P2637, "$/"
    find_lex $P2638, "$past"
    $P2639 = $P2637."!make"($P2638)
.annotate 'line', 1170
    .return ($P2639)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<ang>"  :subid("133_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2641
    .param pmc param_2642
.annotate 'line', 1185
    .lex "self", param_2641
    .lex "$/", param_2642
    find_lex $P2643, "$/"
    find_lex $P2644, "$/"
    unless_null $P2644, vivify_842
    $P2644 = root_new ['parrot';'Hash']
  vivify_842:
    set $P2645, $P2644["quote_EXPR"]
    unless_null $P2645, vivify_843
    new $P2645, "Undef"
  vivify_843:
    $P2646 = $P2645."ast"()
    $P2647 = $P2643."!make"($P2646)
    .return ($P2647)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("134_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2649
    .param pmc param_2650
.annotate 'line', 1186
    .lex "self", param_2649
    .lex "$/", param_2650
    find_lex $P2651, "$/"
    find_lex $P2652, "$/"
    unless_null $P2652, vivify_844
    $P2652 = root_new ['parrot';'Hash']
  vivify_844:
    set $P2653, $P2652["quote_EXPR"]
    unless_null $P2653, vivify_845
    new $P2653, "Undef"
  vivify_845:
    $P2654 = $P2653."ast"()
    $P2655 = $P2651."!make"($P2654)
    .return ($P2655)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<{ }>"  :subid("135_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2657
    .param pmc param_2658
.annotate 'line', 1188
    .const 'Sub' $P2669 = "136_1300057363.399" 
    capture_lex $P2669
    .lex "self", param_2657
    .lex "$/", param_2658
.annotate 'line', 1189
    find_lex $P2661, "$/"
    unless_null $P2661, vivify_846
    $P2661 = root_new ['parrot';'Hash']
  vivify_846:
    set $P2662, $P2661["pblock"]
    unless_null $P2662, vivify_847
    $P2662 = root_new ['parrot';'Hash']
  vivify_847:
    set $P2663, $P2662["blockoid"]
    unless_null $P2663, vivify_848
    $P2663 = root_new ['parrot';'Hash']
  vivify_848:
    set $P2664, $P2663["statementlist"]
    unless_null $P2664, vivify_849
    $P2664 = root_new ['parrot';'Hash']
  vivify_849:
    set $P2665, $P2664["statement"]
    unless_null $P2665, vivify_850
    new $P2665, "Undef"
  vivify_850:
    set $N2666, $P2665
    isgt $I2667, $N2666, 0.0
    if $I2667, if_2660
.annotate 'line', 1194
    find_lex $P2682, "$/"
    unless_null $P2682, vivify_851
    $P2682 = root_new ['parrot';'Hash']
  vivify_851:
    set $P2683, $P2682["pblock"]
    unless_null $P2683, vivify_852
    $P2683 = root_new ['parrot';'Hash']
  vivify_852:
    set $P2684, $P2683["blockoid"]
    unless_null $P2684, vivify_853
    $P2684 = root_new ['parrot';'Hash']
  vivify_853:
    set $P2685, $P2684["you_are_here"]
    unless_null $P2685, vivify_854
    new $P2685, "Undef"
  vivify_854:
    if $P2685, if_2681
.annotate 'line', 1198
    find_lex $P2691, "$/"
    $P2692 = "vivitype"("%")
    $P2693 = $P2691."!make"($P2692)
.annotate 'line', 1197
    set $P2680, $P2693
.annotate 'line', 1194
    goto if_2681_end
  if_2681:
.annotate 'line', 1195
    find_lex $P2686, "$/"
    find_lex $P2687, "$/"
    unless_null $P2687, vivify_855
    $P2687 = root_new ['parrot';'Hash']
  vivify_855:
    set $P2688, $P2687["pblock"]
    unless_null $P2688, vivify_856
    new $P2688, "Undef"
  vivify_856:
    $P2689 = $P2688."ast"()
    $P2690 = $P2686."!make"($P2689)
.annotate 'line', 1194
    set $P2680, $P2690
  if_2681_end:
    set $P2659, $P2680
.annotate 'line', 1189
    goto if_2660_end
  if_2660:
    .const 'Sub' $P2669 = "136_1300057363.399" 
    capture_lex $P2669
    $P2679 = $P2669()
    set $P2659, $P2679
  if_2660_end:
.annotate 'line', 1188
    .return ($P2659)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2668"  :anon :subid("136_1300057363.399") :outer("135_1300057363.399")
.annotate 'line', 1190
    new $P2670, "Undef"
    .lex "$past", $P2670
    find_lex $P2671, "$/"
    unless_null $P2671, vivify_857
    $P2671 = root_new ['parrot';'Hash']
  vivify_857:
    set $P2672, $P2671["pblock"]
    unless_null $P2672, vivify_858
    new $P2672, "Undef"
  vivify_858:
    $P2673 = $P2672."ast"()
    store_lex "$past", $P2673
.annotate 'line', 1191
    new $P2674, "Integer"
    assign $P2674, 1
    find_lex $P2675, "$past"
    unless_null $P2675, vivify_859
    $P2675 = root_new ['parrot';'Hash']
    store_lex "$past", $P2675
  vivify_859:
    set $P2675["bareblock"], $P2674
.annotate 'line', 1192
    find_dynamic_lex $P2676, "$/"
    find_lex $P2677, "$past"
    $P2678 = $P2676."!make"($P2677)
.annotate 'line', 1189
    .return ($P2678)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<sigil>"  :subid("137_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2695
    .param pmc param_2696
.annotate 'line', 1202
    .lex "self", param_2695
    .lex "$/", param_2696
.annotate 'line', 1203
    new $P2697, "Undef"
    .lex "$name", $P2697
    find_lex $P2700, "$/"
    unless_null $P2700, vivify_860
    $P2700 = root_new ['parrot';'Hash']
  vivify_860:
    set $P2701, $P2700["sigil"]
    unless_null $P2701, vivify_861
    new $P2701, "Undef"
  vivify_861:
    set $S2702, $P2701
    iseq $I2703, $S2702, "@"
    if $I2703, if_2699
.annotate 'line', 1204
    find_lex $P2707, "$/"
    unless_null $P2707, vivify_862
    $P2707 = root_new ['parrot';'Hash']
  vivify_862:
    set $P2708, $P2707["sigil"]
    unless_null $P2708, vivify_863
    new $P2708, "Undef"
  vivify_863:
    set $S2709, $P2708
    iseq $I2710, $S2709, "%"
    if $I2710, if_2706
    new $P2712, "String"
    assign $P2712, "item"
    set $P2705, $P2712
    goto if_2706_end
  if_2706:
    new $P2711, "String"
    assign $P2711, "hash"
    set $P2705, $P2711
  if_2706_end:
    set $P2698, $P2705
.annotate 'line', 1203
    goto if_2699_end
  if_2699:
    new $P2704, "String"
    assign $P2704, "list"
    set $P2698, $P2704
  if_2699_end:
    store_lex "$name", $P2698
.annotate 'line', 1206
    find_lex $P2713, "$/"
    get_hll_global $P2714, ["PAST"], "Op"
    find_lex $P2715, "$name"
    find_lex $P2716, "$/"
    unless_null $P2716, vivify_864
    $P2716 = root_new ['parrot';'Hash']
  vivify_864:
    set $P2717, $P2716["semilist"]
    unless_null $P2717, vivify_865
    new $P2717, "Undef"
  vivify_865:
    $P2718 = $P2717."ast"()
    $P2719 = $P2714."new"($P2718, "callmethod" :named("pasttype"), $P2715 :named("name"))
    $P2720 = $P2713."!make"($P2719)
.annotate 'line', 1202
    .return ($P2720)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "semilist"  :subid("138_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2722
    .param pmc param_2723
.annotate 'line', 1209
    .lex "self", param_2722
    .lex "$/", param_2723
    find_lex $P2724, "$/"
    find_lex $P2725, "$/"
    unless_null $P2725, vivify_866
    $P2725 = root_new ['parrot';'Hash']
  vivify_866:
    set $P2726, $P2725["statement"]
    unless_null $P2726, vivify_867
    new $P2726, "Undef"
  vivify_867:
    $P2727 = $P2726."ast"()
    $P2728 = $P2724."!make"($P2727)
    .return ($P2728)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<[ ]>"  :subid("139_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2730
    .param pmc param_2731
.annotate 'line', 1211
    .lex "self", param_2730
    .lex "$/", param_2731
.annotate 'line', 1212
    find_lex $P2732, "$/"
    get_hll_global $P2733, ["PAST"], "Var"
    find_lex $P2734, "$/"
    unless_null $P2734, vivify_868
    $P2734 = root_new ['parrot';'Hash']
  vivify_868:
    set $P2735, $P2734["EXPR"]
    unless_null $P2735, vivify_869
    new $P2735, "Undef"
  vivify_869:
    $P2736 = $P2735."ast"()
.annotate 'line', 1214
    $P2737 = "vivitype"("@")
    $P2738 = $P2733."new"($P2736, "keyed_int" :named("scope"), "Undef" :named("viviself"), $P2737 :named("vivibase"))
.annotate 'line', 1212
    $P2739 = $P2732."!make"($P2738)
.annotate 'line', 1211
    .return ($P2739)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<{ }>"  :subid("140_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2741
    .param pmc param_2742
.annotate 'line', 1217
    .lex "self", param_2741
    .lex "$/", param_2742
.annotate 'line', 1218
    find_lex $P2743, "$/"
    get_hll_global $P2744, ["PAST"], "Var"
    find_lex $P2745, "$/"
    unless_null $P2745, vivify_870
    $P2745 = root_new ['parrot';'Hash']
  vivify_870:
    set $P2746, $P2745["EXPR"]
    unless_null $P2746, vivify_871
    new $P2746, "Undef"
  vivify_871:
    $P2747 = $P2746."ast"()
.annotate 'line', 1220
    $P2748 = "vivitype"("%")
    $P2749 = $P2744."new"($P2747, "keyed" :named("scope"), "Undef" :named("viviself"), $P2748 :named("vivibase"))
.annotate 'line', 1218
    $P2750 = $P2743."!make"($P2749)
.annotate 'line', 1217
    .return ($P2750)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<ang>"  :subid("141_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2752
    .param pmc param_2753
.annotate 'line', 1223
    .lex "self", param_2752
    .lex "$/", param_2753
.annotate 'line', 1224
    find_lex $P2754, "$/"
    get_hll_global $P2755, ["PAST"], "Var"
    find_lex $P2756, "$/"
    unless_null $P2756, vivify_872
    $P2756 = root_new ['parrot';'Hash']
  vivify_872:
    set $P2757, $P2756["quote_EXPR"]
    unless_null $P2757, vivify_873
    new $P2757, "Undef"
  vivify_873:
    $P2758 = $P2757."ast"()
.annotate 'line', 1226
    $P2759 = "vivitype"("%")
    $P2760 = $P2755."new"($P2758, "keyed" :named("scope"), "Undef" :named("viviself"), $P2759 :named("vivibase"))
.annotate 'line', 1224
    $P2761 = $P2754."!make"($P2760)
.annotate 'line', 1223
    .return ($P2761)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<( )>"  :subid("142_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2763
    .param pmc param_2764
.annotate 'line', 1229
    .lex "self", param_2763
    .lex "$/", param_2764
.annotate 'line', 1230
    find_lex $P2765, "$/"
    find_lex $P2766, "$/"
    unless_null $P2766, vivify_874
    $P2766 = root_new ['parrot';'Hash']
  vivify_874:
    set $P2767, $P2766["arglist"]
    unless_null $P2767, vivify_875
    new $P2767, "Undef"
  vivify_875:
    $P2768 = $P2767."ast"()
    $P2769 = $P2765."!make"($P2768)
.annotate 'line', 1229
    .return ($P2769)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "value"  :subid("143_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2771
    .param pmc param_2772
.annotate 'line', 1233
    .lex "self", param_2771
    .lex "$/", param_2772
.annotate 'line', 1234
    find_lex $P2773, "$/"
    find_lex $P2776, "$/"
    unless_null $P2776, vivify_876
    $P2776 = root_new ['parrot';'Hash']
  vivify_876:
    set $P2777, $P2776["quote"]
    unless_null $P2777, vivify_877
    new $P2777, "Undef"
  vivify_877:
    if $P2777, if_2775
    find_lex $P2781, "$/"
    unless_null $P2781, vivify_878
    $P2781 = root_new ['parrot';'Hash']
  vivify_878:
    set $P2782, $P2781["number"]
    unless_null $P2782, vivify_879
    new $P2782, "Undef"
  vivify_879:
    $P2783 = $P2782."ast"()
    set $P2774, $P2783
    goto if_2775_end
  if_2775:
    find_lex $P2778, "$/"
    unless_null $P2778, vivify_880
    $P2778 = root_new ['parrot';'Hash']
  vivify_880:
    set $P2779, $P2778["quote"]
    unless_null $P2779, vivify_881
    new $P2779, "Undef"
  vivify_881:
    $P2780 = $P2779."ast"()
    set $P2774, $P2780
  if_2775_end:
    $P2784 = $P2773."!make"($P2774)
.annotate 'line', 1233
    .return ($P2784)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "number"  :subid("144_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2786
    .param pmc param_2787
.annotate 'line', 1237
    .lex "self", param_2786
    .lex "$/", param_2787
.annotate 'line', 1238
    new $P2788, "Undef"
    .lex "$value", $P2788
    find_lex $P2791, "$/"
    unless_null $P2791, vivify_882
    $P2791 = root_new ['parrot';'Hash']
  vivify_882:
    set $P2792, $P2791["dec_number"]
    unless_null $P2792, vivify_883
    new $P2792, "Undef"
  vivify_883:
    if $P2792, if_2790
    find_lex $P2796, "$/"
    unless_null $P2796, vivify_884
    $P2796 = root_new ['parrot';'Hash']
  vivify_884:
    set $P2797, $P2796["integer"]
    unless_null $P2797, vivify_885
    new $P2797, "Undef"
  vivify_885:
    $P2798 = $P2797."ast"()
    set $P2789, $P2798
    goto if_2790_end
  if_2790:
    find_lex $P2793, "$/"
    unless_null $P2793, vivify_886
    $P2793 = root_new ['parrot';'Hash']
  vivify_886:
    set $P2794, $P2793["dec_number"]
    unless_null $P2794, vivify_887
    new $P2794, "Undef"
  vivify_887:
    $P2795 = $P2794."ast"()
    set $P2789, $P2795
  if_2790_end:
    store_lex "$value", $P2789
.annotate 'line', 1239
    find_lex $P2800, "$/"
    unless_null $P2800, vivify_888
    $P2800 = root_new ['parrot';'Hash']
  vivify_888:
    set $P2801, $P2800["sign"]
    unless_null $P2801, vivify_889
    new $P2801, "Undef"
  vivify_889:
    set $S2802, $P2801
    iseq $I2803, $S2802, "-"
    unless $I2803, if_2799_end
    find_lex $P2804, "$value"
    neg $P2805, $P2804
    store_lex "$value", $P2805
  if_2799_end:
.annotate 'line', 1240
    find_lex $P2806, "$/"
    get_hll_global $P2807, ["PAST"], "Val"
    find_lex $P2808, "$value"
    $P2809 = $P2807."new"($P2808 :named("value"))
    $P2810 = $P2806."!make"($P2809)
.annotate 'line', 1237
    .return ($P2810)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<apos>"  :subid("145_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2812
    .param pmc param_2813
.annotate 'line', 1243
    .lex "self", param_2812
    .lex "$/", param_2813
    find_lex $P2814, "$/"
    find_lex $P2815, "$/"
    unless_null $P2815, vivify_890
    $P2815 = root_new ['parrot';'Hash']
  vivify_890:
    set $P2816, $P2815["quote_EXPR"]
    unless_null $P2816, vivify_891
    new $P2816, "Undef"
  vivify_891:
    $P2817 = $P2816."ast"()
    $P2818 = $P2814."!make"($P2817)
    .return ($P2818)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<dblq>"  :subid("146_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2820
    .param pmc param_2821
.annotate 'line', 1244
    .lex "self", param_2820
    .lex "$/", param_2821
    find_lex $P2822, "$/"
    find_lex $P2823, "$/"
    unless_null $P2823, vivify_892
    $P2823 = root_new ['parrot';'Hash']
  vivify_892:
    set $P2824, $P2823["quote_EXPR"]
    unless_null $P2824, vivify_893
    new $P2824, "Undef"
  vivify_893:
    $P2825 = $P2824."ast"()
    $P2826 = $P2822."!make"($P2825)
    .return ($P2826)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<qq>"  :subid("147_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2828
    .param pmc param_2829
.annotate 'line', 1245
    .lex "self", param_2828
    .lex "$/", param_2829
    find_lex $P2830, "$/"
    find_lex $P2831, "$/"
    unless_null $P2831, vivify_894
    $P2831 = root_new ['parrot';'Hash']
  vivify_894:
    set $P2832, $P2831["quote_EXPR"]
    unless_null $P2832, vivify_895
    new $P2832, "Undef"
  vivify_895:
    $P2833 = $P2832."ast"()
    $P2834 = $P2830."!make"($P2833)
    .return ($P2834)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<q>"  :subid("148_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2836
    .param pmc param_2837
.annotate 'line', 1246
    .lex "self", param_2836
    .lex "$/", param_2837
    find_lex $P2838, "$/"
    find_lex $P2839, "$/"
    unless_null $P2839, vivify_896
    $P2839 = root_new ['parrot';'Hash']
  vivify_896:
    set $P2840, $P2839["quote_EXPR"]
    unless_null $P2840, vivify_897
    new $P2840, "Undef"
  vivify_897:
    $P2841 = $P2840."ast"()
    $P2842 = $P2838."!make"($P2841)
    .return ($P2842)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q>"  :subid("149_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2844
    .param pmc param_2845
.annotate 'line', 1247
    .lex "self", param_2844
    .lex "$/", param_2845
    find_lex $P2846, "$/"
    find_lex $P2847, "$/"
    unless_null $P2847, vivify_898
    $P2847 = root_new ['parrot';'Hash']
  vivify_898:
    set $P2848, $P2847["quote_EXPR"]
    unless_null $P2848, vivify_899
    new $P2848, "Undef"
  vivify_899:
    $P2849 = $P2848."ast"()
    $P2850 = $P2846."!make"($P2849)
    .return ($P2850)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q:PIR>"  :subid("150_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2852
    .param pmc param_2853
.annotate 'line', 1248
    .lex "self", param_2852
    .lex "$/", param_2853
.annotate 'line', 1249
    find_lex $P2854, "$/"
    get_hll_global $P2855, ["PAST"], "Op"
    find_lex $P2856, "$/"
    unless_null $P2856, vivify_900
    $P2856 = root_new ['parrot';'Hash']
  vivify_900:
    set $P2857, $P2856["quote_EXPR"]
    unless_null $P2857, vivify_901
    new $P2857, "Undef"
  vivify_901:
    $P2858 = $P2857."ast"()
    $P2859 = $P2858."value"()
    find_lex $P2860, "$/"
    $P2861 = $P2855."new"($P2859 :named("inline"), "inline" :named("pasttype"), $P2860 :named("node"))
    $P2862 = $P2854."!make"($P2861)
.annotate 'line', 1248
    .return ($P2862)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "quote:sym</ />"  :subid("151_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2866
    .param pmc param_2867
    .param pmc param_2868 :optional
    .param int has_param_2868 :opt_flag
.annotate 'line', 1254
    new $P2865, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P2865, control_2864
    push_eh $P2865
    .lex "self", param_2866
    .lex "$/", param_2867
    if has_param_2868, optparam_902
    new $P2869, "Undef"
    set param_2868, $P2869
  optparam_902:
    .lex "$key", param_2868
.annotate 'line', 1264
    new $P2870, "Undef"
    .lex "$regex", $P2870
.annotate 'line', 1266
    new $P2871, "Undef"
    .lex "$past", $P2871
.annotate 'line', 1255
    find_lex $P2873, "$key"
    set $S2874, $P2873
    iseq $I2875, $S2874, "open"
    unless $I2875, if_2872_end
.annotate 'line', 1256

                null $P0
                set_hll_global ['Regex';'P6Regex';'Actions'], '$REGEXNAME', $P0
            
.annotate 'line', 1260
    get_global $P2876, "@BLOCK"
    unless_null $P2876, vivify_903
    $P2876 = root_new ['parrot';'ResizablePMCArray']
  vivify_903:
    set $P2877, $P2876[0]
    unless_null $P2877, vivify_904
    new $P2877, "Undef"
  vivify_904:
    $P2877."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 1261
    get_global $P2878, "@BLOCK"
    unless_null $P2878, vivify_905
    $P2878 = root_new ['parrot';'ResizablePMCArray']
  vivify_905:
    set $P2879, $P2878[0]
    unless_null $P2879, vivify_906
    new $P2879, "Undef"
  vivify_906:
    $P2879."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 1262
    new $P2880, "Exception"
    set $P2880['type'], .CONTROL_RETURN
    new $P2881, "Integer"
    assign $P2881, 0
    setattribute $P2880, 'payload', $P2881
    throw $P2880
  if_2872_end:
.annotate 'line', 1265
    get_hll_global $P2882, ["Regex";"P6Regex";"Actions"], "buildsub"
    find_lex $P2883, "$/"
    unless_null $P2883, vivify_907
    $P2883 = root_new ['parrot';'Hash']
  vivify_907:
    set $P2884, $P2883["p6regex"]
    unless_null $P2884, vivify_908
    new $P2884, "Undef"
  vivify_908:
    $P2885 = $P2884."ast"()
    get_global $P2886, "@BLOCK"
    $P2887 = $P2886."shift"()
    $P2888 = $P2882($P2885, $P2887)
    store_lex "$regex", $P2888
.annotate 'line', 1267
    get_hll_global $P2889, ["PAST"], "Op"
.annotate 'line', 1269
    get_hll_global $P2890, ["PAST"], "Var"
    new $P2891, "ResizablePMCArray"
    push $P2891, "Regex"
    $P2892 = $P2890."new"("Regex" :named("name"), $P2891 :named("namespace"), "package" :named("scope"))
    find_lex $P2893, "$regex"
    $P2894 = $P2889."new"($P2892, $P2893, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 1267
    store_lex "$past", $P2894
.annotate 'line', 1273
    find_lex $P2895, "$regex"
    find_lex $P2896, "$past"
    unless_null $P2896, vivify_909
    $P2896 = root_new ['parrot';'Hash']
    store_lex "$past", $P2896
  vivify_909:
    set $P2896["sink"], $P2895
.annotate 'line', 1274
    find_lex $P2897, "$/"
    find_lex $P2898, "$past"
    $P2899 = $P2897."!make"($P2898)
.annotate 'line', 1254
    .return ($P2899)
  control_2864:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2900, exception, "payload"
    .return ($P2900)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<$>"  :subid("152_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2902
    .param pmc param_2903
.annotate 'line', 1277
    .lex "self", param_2902
    .lex "$/", param_2903
    find_lex $P2904, "$/"
    find_lex $P2905, "$/"
    unless_null $P2905, vivify_910
    $P2905 = root_new ['parrot';'Hash']
  vivify_910:
    set $P2906, $P2905["variable"]
    unless_null $P2906, vivify_911
    new $P2906, "Undef"
  vivify_911:
    $P2907 = $P2906."ast"()
    $P2908 = $P2904."!make"($P2907)
    .return ($P2908)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<{ }>"  :subid("153_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2910
    .param pmc param_2911
.annotate 'line', 1278
    .lex "self", param_2910
    .lex "$/", param_2911
.annotate 'line', 1279
    find_lex $P2912, "$/"
    get_hll_global $P2913, ["PAST"], "Op"
.annotate 'line', 1280
    find_lex $P2914, "$/"
    unless_null $P2914, vivify_912
    $P2914 = root_new ['parrot';'Hash']
  vivify_912:
    set $P2915, $P2914["block"]
    unless_null $P2915, vivify_913
    new $P2915, "Undef"
  vivify_913:
    $P2916 = $P2915."ast"()
    $P2917 = "block_immediate"($P2916)
    find_lex $P2918, "$/"
    $P2919 = $P2913."new"($P2917, "set S*" :named("pirop"), $P2918 :named("node"))
.annotate 'line', 1279
    $P2920 = $P2912."!make"($P2919)
.annotate 'line', 1278
    .return ($P2920)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<esc>"  :subid("154_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2922
    .param pmc param_2923
.annotate 'line', 1283
    .lex "self", param_2922
    .lex "$/", param_2923
    find_lex $P2924, "$/"
    $P2925 = $P2924."!make"("\e")
    .return ($P2925)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<.>"  :subid("155_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2927
    .param pmc param_2928
.annotate 'line', 1287
    .lex "self", param_2927
    .lex "$/", param_2928
    find_lex $P2929, "$/"
    find_lex $P2930, "$/"
    unless_null $P2930, vivify_914
    $P2930 = root_new ['parrot';'Hash']
  vivify_914:
    set $P2931, $P2930["dotty"]
    unless_null $P2931, vivify_915
    new $P2931, "Undef"
  vivify_915:
    $P2932 = $P2931."ast"()
    $P2933 = $P2929."!make"($P2932)
    .return ($P2933)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<++>"  :subid("156_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2935
    .param pmc param_2936
.annotate 'line', 1289
    .lex "self", param_2935
    .lex "$/", param_2936
.annotate 'line', 1290
    find_lex $P2937, "$/"
    get_hll_global $P2938, ["PAST"], "Op"
.annotate 'line', 1291
    new $P2939, "ResizablePMCArray"
    push $P2939, "    clone %r, %0"
    push $P2939, "    inc %0"
    $P2940 = $P2938."new"("postfix:<++>" :named("name"), $P2939 :named("inline"), "inline" :named("pasttype"))
.annotate 'line', 1290
    $P2941 = $P2937."!make"($P2940)
.annotate 'line', 1289
    .return ($P2941)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<-->"  :subid("157_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2943
    .param pmc param_2944
.annotate 'line', 1295
    .lex "self", param_2943
    .lex "$/", param_2944
.annotate 'line', 1296
    find_lex $P2945, "$/"
    get_hll_global $P2946, ["PAST"], "Op"
.annotate 'line', 1297
    new $P2947, "ResizablePMCArray"
    push $P2947, "    clone %r, %0"
    push $P2947, "    dec %0"
    $P2948 = $P2946."new"("postfix:<-->" :named("name"), $P2947 :named("inline"), "inline" :named("pasttype"))
.annotate 'line', 1296
    $P2949 = $P2945."!make"($P2948)
.annotate 'line', 1295
    .return ($P2949)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "prefix:sym<make>"  :subid("158_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2951
    .param pmc param_2952
.annotate 'line', 1301
    .lex "self", param_2951
    .lex "$/", param_2952
.annotate 'line', 1302
    find_lex $P2953, "$/"
    get_hll_global $P2954, ["PAST"], "Op"
.annotate 'line', 1303
    get_hll_global $P2955, ["PAST"], "Var"
    $P2956 = $P2955."new"("$/" :named("name"), "contextual" :named("scope"))
    find_lex $P2957, "$/"
    $P2958 = $P2954."new"($P2956, "callmethod" :named("pasttype"), "!make" :named("name"), $P2957 :named("node"))
.annotate 'line', 1302
    $P2959 = $P2953."!make"($P2958)
.annotate 'line', 1301
    .return ($P2959)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<next>"  :subid("159_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2962
    .param pmc param_2963
.annotate 'line', 1319
    .lex "self", param_2962
    .lex "$/", param_2963
    find_lex $P2964, "$/"
    $P2965 = "control"($P2964, "CONTROL_LOOP_NEXT")
    .return ($P2965)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<last>"  :subid("160_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2967
    .param pmc param_2968
.annotate 'line', 1320
    .lex "self", param_2967
    .lex "$/", param_2968
    find_lex $P2969, "$/"
    $P2970 = "control"($P2969, "CONTROL_LOOP_LAST")
    .return ($P2970)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<redo>"  :subid("161_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2972
    .param pmc param_2973
.annotate 'line', 1321
    .lex "self", param_2972
    .lex "$/", param_2973
    find_lex $P2974, "$/"
    $P2975 = "control"($P2974, "CONTROL_LOOP_REDO")
    .return ($P2975)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "infix:sym<~~>"  :subid("162_1300057363.399") :outer("11_1300057363.399")
    .param pmc param_2977
    .param pmc param_2978
.annotate 'line', 1323
    .lex "self", param_2977
    .lex "$/", param_2978
.annotate 'line', 1324
    find_lex $P2979, "$/"
    get_hll_global $P2980, ["PAST"], "Op"
    find_lex $P2981, "$/"
    $P2982 = $P2980."new"("callmethod" :named("pasttype"), "ACCEPTS" :named("name"), $P2981 :named("node"))
    $P2983 = $P2979."!make"($P2982)
.annotate 'line', 1323
    .return ($P2983)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block3208"  :subid("164_1300057363.399") :outer("10_1300057363.399")
.annotate 'line', 1328
    .const 'Sub' $P3308 = "172_1300057363.399" 
    capture_lex $P3308
    .const 'Sub' $P3283 = "171_1300057363.399" 
    capture_lex $P3283
    .const 'Sub' $P3272 = "170_1300057363.399" 
    capture_lex $P3272
    .const 'Sub' $P3257 = "169_1300057363.399" 
    capture_lex $P3257
    .const 'Sub' $P3246 = "168_1300057363.399" 
    capture_lex $P3246
    .const 'Sub' $P3235 = "167_1300057363.399" 
    capture_lex $P3235
    .const 'Sub' $P3224 = "166_1300057363.399" 
    capture_lex $P3224
    .const 'Sub' $P3211 = "165_1300057363.399" 
    capture_lex $P3211
    get_global $P3210, "$?CLASS"
.annotate 'line', 1362
    .const 'Sub' $P3283 = "171_1300057363.399" 
    newclosure $P3306, $P3283
.annotate 'line', 1328
    .return ($P3306)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "" :load :init :subid("post916") :outer("164_1300057363.399")
.annotate 'line', 1328
    get_hll_global $P3209, ["NQP";"RegexActions"], "_block3208" 
    .local pmc block
    set block, $P3209
    .const 'Sub' $P3308 = "172_1300057363.399" 
    capture_lex $P3308
    $P3308()
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block3307"  :anon :subid("172_1300057363.399") :outer("164_1300057363.399")
.annotate 'line', 1328
    nqp_get_sc_object $P3309, "1300057352.665", 1
    .local pmc type_obj
    set type_obj, $P3309
    set_global "$?CLASS", type_obj
    get_how $P3310, type_obj
    .const 'Sub' $P3311 = "165_1300057363.399" 
    $P3310."add_method"(type_obj, "metachar:sym<:my>", $P3311)
    get_how $P3312, type_obj
    .const 'Sub' $P3313 = "166_1300057363.399" 
    $P3312."add_method"(type_obj, "metachar:sym<{ }>", $P3313)
    get_how $P3314, type_obj
    .const 'Sub' $P3315 = "167_1300057363.399" 
    $P3314."add_method"(type_obj, "metachar:sym<nqpvar>", $P3315)
    get_how $P3316, type_obj
    .const 'Sub' $P3317 = "168_1300057363.399" 
    $P3316."add_method"(type_obj, "assertion:sym<{ }>", $P3317)
    get_how $P3318, type_obj
    .const 'Sub' $P3319 = "169_1300057363.399" 
    $P3318."add_method"(type_obj, "assertion:sym<?{ }>", $P3319)
    get_how $P3320, type_obj
    .const 'Sub' $P3321 = "170_1300057363.399" 
    $P3320."add_method"(type_obj, "assertion:sym<var>", $P3321)
    get_how $P3322, type_obj
    .const 'Sub' $P3323 = "171_1300057363.399" 
    $P3322."add_method"(type_obj, "codeblock", $P3323)
    get_how $P3324, type_obj
    get_hll_global $P3325, ["Regex";"P6Regex"], "Actions"
    $P3324."add_parent"(type_obj, $P3325)
    get_how $P3326, type_obj
    $P3327 = $P3326."compose"(type_obj)
    .return ($P3327)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<:my>"  :subid("165_1300057363.399") :outer("164_1300057363.399")
    .param pmc param_3212
    .param pmc param_3213
.annotate 'line', 1330
    .lex "self", param_3212
    .lex "$/", param_3213
.annotate 'line', 1331
    new $P3214, "Undef"
    .lex "$past", $P3214
    find_lex $P3215, "$/"
    unless_null $P3215, vivify_917
    $P3215 = root_new ['parrot';'Hash']
  vivify_917:
    set $P3216, $P3215["statement"]
    unless_null $P3216, vivify_918
    new $P3216, "Undef"
  vivify_918:
    $P3217 = $P3216."ast"()
    store_lex "$past", $P3217
.annotate 'line', 1332
    find_lex $P3218, "$/"
    get_hll_global $P3219, ["PAST"], "Regex"
    find_lex $P3220, "$past"
    find_lex $P3221, "$/"
    $P3222 = $P3219."new"($P3220, "pastnode" :named("pasttype"), "declarative" :named("subtype"), $P3221 :named("node"))
    $P3223 = $P3218."!make"($P3222)
.annotate 'line', 1330
    .return ($P3223)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<{ }>"  :subid("166_1300057363.399") :outer("164_1300057363.399")
    .param pmc param_3225
    .param pmc param_3226
.annotate 'line', 1336
    .lex "self", param_3225
    .lex "$/", param_3226
.annotate 'line', 1337
    find_lex $P3227, "$/"
    get_hll_global $P3228, ["PAST"], "Regex"
    find_lex $P3229, "$/"
    unless_null $P3229, vivify_919
    $P3229 = root_new ['parrot';'Hash']
  vivify_919:
    set $P3230, $P3229["codeblock"]
    unless_null $P3230, vivify_920
    new $P3230, "Undef"
  vivify_920:
    $P3231 = $P3230."ast"()
    find_lex $P3232, "$/"
    $P3233 = $P3228."new"($P3231, "pastnode" :named("pasttype"), $P3232 :named("node"))
    $P3234 = $P3227."!make"($P3233)
.annotate 'line', 1336
    .return ($P3234)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<nqpvar>"  :subid("167_1300057363.399") :outer("164_1300057363.399")
    .param pmc param_3236
    .param pmc param_3237
.annotate 'line', 1341
    .lex "self", param_3236
    .lex "$/", param_3237
.annotate 'line', 1342
    find_lex $P3238, "$/"
    get_hll_global $P3239, ["PAST"], "Regex"
    find_lex $P3240, "$/"
    unless_null $P3240, vivify_921
    $P3240 = root_new ['parrot';'Hash']
  vivify_921:
    set $P3241, $P3240["var"]
    unless_null $P3241, vivify_922
    new $P3241, "Undef"
  vivify_922:
    $P3242 = $P3241."ast"()
    find_lex $P3243, "$/"
    $P3244 = $P3239."new"("!INTERPOLATE", $P3242, "subrule" :named("pasttype"), "method" :named("subtype"), $P3243 :named("node"))
    $P3245 = $P3238."!make"($P3244)
.annotate 'line', 1341
    .return ($P3245)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<{ }>"  :subid("168_1300057363.399") :outer("164_1300057363.399")
    .param pmc param_3247
    .param pmc param_3248
.annotate 'line', 1346
    .lex "self", param_3247
    .lex "$/", param_3248
.annotate 'line', 1347
    find_lex $P3249, "$/"
    get_hll_global $P3250, ["PAST"], "Regex"
    find_lex $P3251, "$/"
    unless_null $P3251, vivify_923
    $P3251 = root_new ['parrot';'Hash']
  vivify_923:
    set $P3252, $P3251["codeblock"]
    unless_null $P3252, vivify_924
    new $P3252, "Undef"
  vivify_924:
    $P3253 = $P3252."ast"()
    find_lex $P3254, "$/"
    $P3255 = $P3250."new"("!INTERPOLATE_REGEX", $P3253, "subrule" :named("pasttype"), "method" :named("subtype"), $P3254 :named("node"))
    $P3256 = $P3249."!make"($P3255)
.annotate 'line', 1346
    .return ($P3256)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<?{ }>"  :subid("169_1300057363.399") :outer("164_1300057363.399")
    .param pmc param_3258
    .param pmc param_3259
.annotate 'line', 1351
    .lex "self", param_3258
    .lex "$/", param_3259
.annotate 'line', 1352
    find_lex $P3260, "$/"
    get_hll_global $P3261, ["PAST"], "Regex"
    find_lex $P3262, "$/"
    unless_null $P3262, vivify_925
    $P3262 = root_new ['parrot';'Hash']
  vivify_925:
    set $P3263, $P3262["codeblock"]
    unless_null $P3263, vivify_926
    new $P3263, "Undef"
  vivify_926:
    $P3264 = $P3263."ast"()
.annotate 'line', 1353
    find_lex $P3265, "$/"
    unless_null $P3265, vivify_927
    $P3265 = root_new ['parrot';'Hash']
  vivify_927:
    set $P3266, $P3265["zw"]
    unless_null $P3266, vivify_928
    new $P3266, "Undef"
  vivify_928:
    set $S3267, $P3266
    iseq $I3268, $S3267, "!"
    find_lex $P3269, "$/"
    $P3270 = $P3261."new"($P3264, "zerowidth" :named("subtype"), $I3268 :named("negate"), "pastnode" :named("pasttype"), $P3269 :named("node"))
.annotate 'line', 1352
    $P3271 = $P3260."!make"($P3270)
.annotate 'line', 1351
    .return ($P3271)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<var>"  :subid("170_1300057363.399") :outer("164_1300057363.399")
    .param pmc param_3273
    .param pmc param_3274
.annotate 'line', 1357
    .lex "self", param_3273
    .lex "$/", param_3274
.annotate 'line', 1358
    find_lex $P3275, "$/"
    get_hll_global $P3276, ["PAST"], "Regex"
    find_lex $P3277, "$/"
    unless_null $P3277, vivify_929
    $P3277 = root_new ['parrot';'Hash']
  vivify_929:
    set $P3278, $P3277["var"]
    unless_null $P3278, vivify_930
    new $P3278, "Undef"
  vivify_930:
    $P3279 = $P3278."ast"()
    find_lex $P3280, "$/"
    $P3281 = $P3276."new"("!INTERPOLATE_REGEX", $P3279, "subrule" :named("pasttype"), "method" :named("subtype"), $P3280 :named("node"))
    $P3282 = $P3275."!make"($P3281)
.annotate 'line', 1357
    .return ($P3282)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "codeblock"  :subid("171_1300057363.399") :outer("164_1300057363.399")
    .param pmc param_3284
    .param pmc param_3285
.annotate 'line', 1362
    .lex "self", param_3284
    .lex "$/", param_3285
.annotate 'line', 1363
    new $P3286, "Undef"
    .lex "$block", $P3286
.annotate 'line', 1365
    new $P3287, "Undef"
    .lex "$past", $P3287
.annotate 'line', 1363
    find_lex $P3288, "$/"
    unless_null $P3288, vivify_931
    $P3288 = root_new ['parrot';'Hash']
  vivify_931:
    set $P3289, $P3288["block"]
    unless_null $P3289, vivify_932
    new $P3289, "Undef"
  vivify_932:
    $P3290 = $P3289."ast"()
    store_lex "$block", $P3290
.annotate 'line', 1364
    find_lex $P3291, "$block"
    $P3291."blocktype"("immediate")
.annotate 'line', 1366
    get_hll_global $P3292, ["PAST"], "Stmts"
.annotate 'line', 1367
    get_hll_global $P3293, ["PAST"], "Op"
.annotate 'line', 1368
    get_hll_global $P3294, ["PAST"], "Var"
    $P3295 = $P3294."new"("$/" :named("name"))
.annotate 'line', 1369
    get_hll_global $P3296, ["PAST"], "Op"
.annotate 'line', 1370
    get_hll_global $P3297, ["PAST"], "Var"
    $P3298 = $P3297."new"(unicode:"$\x{a2}" :named("name"))
    $P3299 = $P3296."new"($P3298, "MATCH" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 1369
    $P3300 = $P3293."new"($P3295, $P3299, "bind" :named("pasttype"))
.annotate 'line', 1367
    find_lex $P3301, "$block"
    $P3302 = $P3292."new"($P3300, $P3301)
.annotate 'line', 1366
    store_lex "$past", $P3302
.annotate 'line', 1378
    find_lex $P3303, "$/"
    find_lex $P3304, "$past"
    $P3305 = $P3303."!make"($P3304)
.annotate 'line', 1362
    .return ($P3305)
.end


.HLL "nqp"

.namespace []
.sub "_block3329" :load :anon :subid("173_1300057363.399")
.annotate 'line', 1
    .const 'Sub' $P3331 = "10_1300057363.399" 
    $P3332 = $P3331()
    .return ($P3332)
.end

### .include 'gen/nqp-compiler.pir'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.namespace []
.sub "_block11"  :anon :subid("10_1300057365.808")
.annotate 'line', 0
    get_hll_global $P14, ["NQP";"Compiler"], "_block13" 
    capture_lex $P14
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
    get_hll_global $P14, ["NQP";"Compiler"], "_block13" 
    capture_lex $P14
    $P23 = $P14()
    .return ($P23)
    .const 'Sub' $P25 = "13_1300057365.808" 
    .return ($P25)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post14") :outer("10_1300057365.808")
.annotate 'line', 0
    .const 'Sub' $P12 = "10_1300057365.808" 
    .local pmc block
    set block, $P12
    nqp_get_sc $P29, "1300057365.795"
    isnull $I30, $P29
    if $I30, if_28
    nqp_get_sc_object $P40, "1300057365.795", 0
    set_hll_global ["NQP"], "Compiler", $P40
    goto if_28_end
  if_28:
    nqp_dynop_setup 
    getinterp $P31
    get_class $P32, "LexPad"
    get_class $P33, "NQPLexPad"
    $P31."hll_map"($P32, $P33)
    load_bytecode "nqpmo.pbc"
    nqp_create_sc $P34, "1300057365.795"
    .local pmc cur_sc
    set cur_sc, $P34
    load_bytecode "SettingManager.pbc"
    get_hll_global $P35, ["HLL"], "SettingManager"
    $P36 = $P35."load_setting"("NQPCORE")
    block."set_outer_ctx"($P36)
    get_hll_global $P37, "NQPClassHOW"
    $P38 = $P37."new_type"("NQP::Compiler" :named("name"))
    nqp_set_sc_for_object $P38, cur_sc
    nqp_set_sc_object "1300057365.795", 0, $P38
    nqp_get_sc_object $P39, "1300057365.795", 0
    set_hll_global ["NQP"], "Compiler", $P39
  if_28_end:
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block13"  :subid("11_1300057365.808") :outer("10_1300057365.808")
.annotate 'line', 1
    .const 'Sub' $P17 = "12_1300057365.808" 
    capture_lex $P17
    get_global $P15, "$?CLASS"
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "" :load :init :subid("post15") :outer("11_1300057365.808")
.annotate 'line', 1
    get_hll_global $P14, ["NQP";"Compiler"], "_block13" 
    .local pmc block
    set block, $P14
    .const 'Sub' $P17 = "12_1300057365.808" 
    capture_lex $P17
    $P17()
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block16"  :anon :subid("12_1300057365.808") :outer("11_1300057365.808")
.annotate 'line', 1
    nqp_get_sc_object $P18, "1300057365.795", 0
    .local pmc type_obj
    set type_obj, $P18
    set_global "$?CLASS", type_obj
    get_how $P19, type_obj
    get_hll_global $P20, ["HLL"], "Compiler"
    $P19."add_parent"(type_obj, $P20)
    get_how $P21, type_obj
    $P22 = $P21."compose"(type_obj)
    .return ($P22)
.end


.HLL "nqp"

.namespace []
.sub "_block24" :load :anon :subid("13_1300057365.808")
.annotate 'line', 1
    .const 'Sub' $P26 = "10_1300057365.808" 
    $P27 = $P26()
    .return ($P27)
.end


.namespace ['NQP';'Compiler']

.sub '' :anon :load :init
    .local pmc nqpproto, nqpcomp
    nqpproto = get_hll_global ['NQP'], 'Compiler'
    nqpcomp = nqpproto.'new'()
    nqpcomp.'language'('nqp')
    $P0 = get_hll_global ['NQP'], 'Grammar'
    nqpcomp.'parsegrammar'($P0)
    $P0 = get_hll_global ['NQP'], 'Actions'
    nqpcomp.'parseactions'($P0)
    $P0 = nqpcomp.'commandline_options'()
    push $P0, 'parsetrace'
    push $P0, 'setting=s'
.end

.sub 'main' :main
    .param pmc args_str

    $P0 = compreg 'nqp'
    $P1 = $P0.'command_line'(args_str, 'encoding'=>'utf8', 'transcode'=>'ascii iso-8859-1')
    exit 0
.end

# Local Variables:
#   mode: pir
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4 ft=pir:
