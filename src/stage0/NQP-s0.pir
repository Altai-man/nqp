.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1346277629.325") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5057 = 'cuid_373_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_374_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_32_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_223_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_243_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_400_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_401_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_402_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_403_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_404_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_405_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_406_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_360_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_371_1346277629.325' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_372_1346277629.325' 
    capture_lex $P5057 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$ops", $P103 
    .lex "&MAIN", $P104 
    .lex "&hll-config", $P105 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5001
    .const 'Sub' $P5002 = 'cuid_373_1346277629.325' 
    capture_lex $P5002
    set $P104, $P5002
    .const 'Sub' $P5003 = 'cuid_374_1346277629.325' 
    capture_lex $P5003
    set $P105, $P5003
    find_dynamic_lex $P5004, "$*CTXSAVE"
    set ctxsave, $P5004
    isnull $I5001, ctxsave
    box $P5009, $I5001
    set $P5008, $P5009
    if $I5001 goto unless12_end16 
    can $I5002, ctxsave, "ctxsave"
    box $P5007, $I5002
    set $P5006, $P5007
    unless $I5002 goto if13_end18 
    $P5005 = ctxsave."ctxsave"()
    set $P5006, $P5005
  if13_end18:
    set $P5008, $P5006
  unless12_end16:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_32_1346277629.325' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_223_1346277629.325' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_243_1346277629.325' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1381
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3554
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5020
  fallback3554:
    $P5021 = $P5016."operations"()
    set $P103, $P5021
.annotate 'line', 1383
    $P5022 = $P103."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1385
    .const 'Sub' $P5024 = 'cuid_400_1346277629.325' 
    capture_lex $P5024
    newclosure $P5023, $P5024
    $P5025 = $P103."add_hll_op"("nqp", "preinc", $P5023)
.annotate 'line', 1400
    .const 'Sub' $P5027 = 'cuid_401_1346277629.325' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P5028 = $P103."add_hll_op"("nqp", "predec", $P5026)
.annotate 'line', 1415
    .const 'Sub' $P5030 = 'cuid_402_1346277629.325' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P103."add_hll_op"("nqp", "postinc", $P5029)
.annotate 'line', 1439
    .const 'Sub' $P5033 = 'cuid_403_1346277629.325' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P5034 = $P103."add_hll_op"("nqp", "postdec", $P5032)
.annotate 'line', 1463
    .const 'Sub' $P5036 = 'cuid_404_1346277629.325' 
    capture_lex $P5036
    newclosure $P5035, $P5036
    $P5037 = $P103."add_hll_op"("nqp", "numify", $P5035)
.annotate 'line', 1467
    .const 'Sub' $P5039 = 'cuid_405_1346277629.325' 
    capture_lex $P5039
    newclosure $P5038, $P5039
    $P5040 = $P103."add_hll_op"("nqp", "stringify", $P5038)
.annotate 'line', 1471
    .const 'Sub' $P5042 = 'cuid_406_1346277629.325' 
    capture_lex $P5042
    newclosure $P5041, $P5042
    $P5043 = $P103."add_hll_op"("nqp", "eqaddr", $P5041)
    .const 'Sub' $P5044 = 'cuid_360_1346277629.325' 
    capture_lex $P5044
    $P5045 = $P5044()
    .const 'Sub' $P5046 = 'cuid_371_1346277629.325' 
    capture_lex $P5046
    $P5047 = $P5046()
    .const 'Sub' $P5048 = 'cuid_372_1346277629.325' 
    capture_lex $P5048
    $P5049 = $P5048()
    set $P5056, _lex_param_0
    unless _lex_param_0 goto if1635_end5244 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5050, "ModuleLoader"
    getinterp $P5052
    set $P5051, $P5052["context"]
    $P5053 = $P5050."set_mainline_module"($P5051)
    .const 'Sub' $P5054 = "cuid_373_1346277629.325" 
    $P5055 = $P5054(_lex_param_0 :flat)
    set $P5056, $P5055
  if1635_end5244:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_373_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3148
    .param pmc _lex_param_0 
    .lex "$nqpcomp", $P101 
    .lex "@clo", $P102 
    .lex "@ARGS", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3150
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "NQP"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback10
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5007
  fallback10:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 3151
    $P5009 = $P101."language"("nqp")
.annotate 'line', 3152
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "NQP"
    get_who $P5011, $P5012
    set $P5010, $P5011["Grammar"]
    unless_null $P5010, fallback11
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5014
  fallback11:
    $P5015 = $P101."parsegrammar"($P5010)
.annotate 'line', 3153
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Actions"]
    unless_null $P5016, fallback12
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5020
  fallback12:
    $P5021 = $P101."parseactions"($P5016)
.annotate 'line', 3154
    $P5022 = $P101."config"()
    $P5023 = "&hll-config"($P5022)
.annotate 'line', 3157
    $P5024 = $P101."commandline_options"()
    set $P102, $P5024
.annotate 'line', 3158
    $P5025 = $P102."push"("parsetrace")
.annotate 'line', 3159
    $P5026 = $P102."push"("setting=s")
.annotate 'line', 3160
    $P5027 = $P102."push"("setting-path=s")
.annotate 'line', 3161
    $P5028 = $P102."push"("module-path=s")
.annotate 'line', 3162
    $P5029 = $P102."push"("vmlibs=s")
.annotate 'line', 3163
    $P5030 = $P102."push"("no-regex-lib")
.annotate 'line', 3164
    $P5031 = $P102."push"("old-regex-lib")
    new $P5035, 'ExceptionHandler'
    set_label $P5035, catch_handler_1114
    $P5035.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5035
.annotate 'line', 3168
.annotate 'line', 3169
    get_hll_global $P5032, "ModuleLoader"
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 0
    $P5034 = $P5032."load_module"("PASTRegex", $P5033)
    set $P5036, $P5034
    pop_eh 
    goto skip_handler_1013
  catch_handler_1114:
    .get_results ($P5035) 
    set $I10001, 1
    set $P5035["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5035
    pop_upto_eh $P5035
    pop_eh 
    set $P5036, $P10001
    goto skip_handler_1013
  skip_handler_1013:
.annotate 'line', 3173
    $P5037 = $P101."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3175
    $P5038 = $P101."nqpevent"()
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_374_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3179
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2012.08-162-ge10bae4"
    set _lex_param_0["version"], $P5001
    box $P5002, "2012-08-29T22:00:29Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_32_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5030 = 'cuid_2_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_3_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_4_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_5_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_6_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_7_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_8_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_9_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_10_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_11_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_15_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_16_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_17_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_18_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_19_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_20_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_21_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_22_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_23_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_24_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_25_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_26_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_27_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_28_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_29_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_30_1346277629.325' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_31_1346277629.325' 
    capture_lex $P5030 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1346277629.325' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1346277629.325' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1346277629.325' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1346277629.325' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1346277629.325' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_7_1346277629.325' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_8_1346277629.325' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_9_1346277629.325' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_10_1346277629.325' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1346277629.325' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_15_1346277629.325' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1346277629.325' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1346277629.325' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1346277629.325' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1346277629.325' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1346277629.325' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1346277629.325' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_22_1346277629.325' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_23_1346277629.325' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_24_1346277629.325' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_25_1346277629.325' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_26_1346277629.325' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_27_1346277629.325' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_28_1346277629.325' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_29_1346277629.325' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_30_1346277629.325' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_31_1346277629.325' 
    capture_lex $P5029
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_fixup_list", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_stub_sc_idx", $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 35
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 37
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback19
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback19:
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback20
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback20:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    box $P5026, $N5001
    set $P5025, $P5026
    unless $N5001 goto if14_end22 
.annotate 'line', 38
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback23
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5024
  fallback23:
    set $P101["outer"], $P5017
    set $P5025, $P5017
  if14_end22:
    nqp_decontainerize $P5027, _lex_param_0
    nqp_get_sc_object $P5028, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5029, $P5027, $P5028, "@!BLOCKS"
    nqp_decontainerize $P5030, _lex_param_0
    nqp_get_sc_object $P5031, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5032, $P5030, $P5031, "@!BLOCKS"
    set $N5005, $P5032
    set $I5002, $N5005
    set $P5029[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 51
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback24
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5008
  fallback24:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 56
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 58
    $P5006 = $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 69
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_375_1346277629.325' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_25
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if15_end28 
    .const 'Sub' $P5001 = 'cuid_375_1346277629.325' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if15_end28:
    goto lexotic_26
  lexotic_25:
    .get_results ($P5003)
  lexotic_26:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1346277629.325") :anon :lex :outer("cuid_7_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 71
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback29
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback30
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback30:
    unless_null $P5004, vivi_1631
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1631:
    set $P5003, $P5004
  fallback29:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback32
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5011
  fallback32:
.annotate 'line', 76
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 79
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if17_else33 
.annotate 'line', 80
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback35
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5024
  fallback35:
.annotate 'line', 81
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback36
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5029
  fallback36:
.annotate 'line', 83
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback37
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5034
  fallback37:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 85
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback38
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5041
  fallback38:
.annotate 'line', 87
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback39
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5042, $P5046
  fallback39:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback40
    get_hll_global $P5050, "GLOBAL"
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback41
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5048, $P5051
  fallback41:
    unless_null $P5048, vivi_1842
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1842:
    set $P5047, $P5048
  fallback40:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 88
    get_hll_global $P5057, "GLOBAL"
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback43
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5054, $P5058
  fallback43:
.annotate 'line', 90
    get_hll_global $P5062, "GLOBAL"
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback44
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5059, $P5063
  fallback44:
.annotate 'line', 92
    get_hll_global $P5067, "GLOBAL"
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback45
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5064, $P5068
  fallback45:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 94
    get_hll_global $P5074, "GLOBAL"
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback46
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5071, $P5075
  fallback46:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    set $P5128, $P5081
    goto if17_end34
  if17_else33:
.annotate 'line', 99
.annotate 'line', 101
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    get_hll_global $P5087, "GLOBAL"
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback47
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5084, $P5088
  fallback47:
.annotate 'line', 103
    get_hll_global $P5092, "GLOBAL"
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback48
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5089, $P5093
  fallback48:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback49
    get_hll_global $P5097, "GLOBAL"
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback50
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5095, $P5098
  fallback50:
    unless_null $P5095, vivi_1951
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_1951:
    set $P5094, $P5095
  fallback49:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 104
    get_hll_global $P5104, "GLOBAL"
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback52
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5101, $P5105
  fallback52:
.annotate 'line', 106
    get_hll_global $P5109, "GLOBAL"
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback53
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5106, $P5110
  fallback53:
.annotate 'line', 108
    get_hll_global $P5114, "GLOBAL"
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback54
    nqp_get_sc_object $P5115, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5111, $P5115
  fallback54:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 110
    get_hll_global $P5121, "GLOBAL"
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback55
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5118, $P5122
  fallback55:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
    set $P5128, $P5127
  if17_end34:
    getattribute $P5130, $P101, "lex_pad"
    find_lex $P5129, "RETURN"
    $P5131 = $P5129($P5130)
    .return ($P5131) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_56
    .lex "RETURN", $P102
.annotate 'line', 123
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 126
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    set $P5050, $P5005
    unless $P5005 goto if20_end59 
.annotate 'line', 127
    nqp_decontainerize $P5006, _lex_param_0
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback60
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback60:
.annotate 'line', 128
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback61
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback61:
.annotate 'line', 130
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback62
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback62:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 132
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback63
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5028
  fallback63:
.annotate 'line', 134
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback64
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5033
  fallback64:
.annotate 'line', 136
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback65
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5034, $P5038
  fallback65:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 138
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback66
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5045
  fallback66:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
    set $P5050, $P5049
  if20_end59:
    getattribute $P5052, $P101, "lex_pad"
    find_lex $P5051, "RETURN"
    $P5053 = $P5051($P5052)
    goto lexotic_57
  lexotic_56:
    .get_results ($P5053)
  lexotic_57:
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 147
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5013 = 'cuid_376_1346277629.325' 
    capture_lex $P5013 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 149
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
    new $P5010, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5010, for_handlers67
    push_eh $P5010
  for_next68:
    unless $P5008, for_done70
    shift $P5011, $P5008
  for_redo69:
    .const 'Sub' $P5009 = 'cuid_376_1346277629.325' 
    capture_lex $P5009
    $P5006 = $P5009($P5011)
    goto for_next68
  for_handlers67:
    .get_results ($P5010)
    pop_upto_eh $P5010
    getattribute $P5010, $P5010, 'type'
    eq $P5010, .CONTROL_LOOP_NEXT, for_next68
    eq $P5010, .CONTROL_LOOP_REDO, for_redo69
  for_done70:
    pop_eh 
    get_who $P5012, $P102
    set $S5002, $P101
    set $P5012[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1346277629.325") :anon :lex :outer("cuid_9_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 153
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 163
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 165
    $P5002 = _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 166
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback71
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback71:
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Var"]
    unless_null $P5005, fallback72
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5009
  fallback72:
    $P5010 = $P5005."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5011 = $P5003."push"($P5010)
.annotate 'line', 169
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback73
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback73:
.annotate 'line', 170
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback74
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback74:
.annotate 'line', 172
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["VM"]
    unless_null $P5022, fallback75
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5026
  fallback75:
.annotate 'line', 173
    $P5027 = _lex_param_1."cuid"()
    set $S5003, $P5027
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5028 = $P5022."new"($S5001 :named("pir"))
.annotate 'line', 175
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["SVal"]
    unless_null $P5029, fallback76
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5033
  fallback76:
    $P5034 = $P5029."new"(_lex_param_2 :named("value"))
.annotate 'line', 176
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["WVal"]
    unless_null $P5035, fallback77
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5035, $P5039
  fallback77:
    $P5040 = $P5035."new"(_lex_param_3 :named("value"))
    $P5041 = $P5017."new"($P5028, $P5034, $P5040, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 180
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback78
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5042, $P5046
  fallback78:
.annotate 'line', 182
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback79
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5047, $P5051
  fallback79:
.annotate 'line', 183
    $P5052 = _lex_param_1."cuid"()
    set $S5006, $P5052
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5053 = $P5047."new"($S5004 :named("pir"))
    $P5054 = $P5042."new"($P5053, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5055 = $P5012."new"($P5041, $P5054)
    set $P101, $P5055
.annotate 'line', 187
    nqp_decontainerize $P5056, _lex_param_0
    $P5057 = $P5056."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 193
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback80
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback80:
.annotate 'line', 195
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback81
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback81:
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback82
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback82:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 196
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback83
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5023
  fallback83:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 197
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback84
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5029
  fallback84:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 199
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5101 = 'cuid_12_1346277629.325' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_13_1346277629.325' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_14_1346277629.325' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_380_1346277629.325' 
    capture_lex $P5101 
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_85
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5027, 'ExceptionHandler'
    set_label $P5027, catch_handler_2494
    $P5027.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5027
.annotate 'line', 208
.annotate 'line', 209
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P101, $P5011
.annotate 'line', 210
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback87
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback88
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5017
  fallback88:
    unless_null $P5014, vivi_2189
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_2189:
    set $P5013, $P5014
  fallback87:
    get_how $P5012, $P5013
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback90
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback91
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5023
  fallback91:
    unless_null $P5020, vivi_2292
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_2292:
    set $P5019, $P5020
  fallback90:
    $P5025 = $P5012."name"($P5019)
    set $S5001, $P5025
    isne $I5001, $S5001, "NQPRoutine"
    box $P5026, $I5001
    set $P102, $P5026
    set $P5028, $P102
    pop_eh 
    goto skip_handler_2393
  catch_handler_2494:
    .get_results ($P5027) 
    set $I10001, 1
    set $P5027["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5027
    pop_upto_eh $P5027
    pop_eh 
    set $P5028, $P10001
    goto skip_handler_2393
  skip_handler_2393:
    .const 'Sub' $P5030 = 'cuid_12_1346277629.325' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    set $P103, $P5029
.annotate 'line', 253
    get_hll_global $P5034, "GLOBAL"
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Stmts"]
    unless_null $P5031, fallback122
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5031, $P5035
  fallback122:
    $P5036 = $P5031."new"()
    set $P104, $P5036
    set $P5037, _lex_param_1["compile_time_dummy"]
    unless_null $P5037, fallback125
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5038
  fallback125:
    defined $I5002, $P5037
    unless $I5002 goto if28_else123 
.annotate 'line', 256
    set $P5039, _lex_param_1["compile_time_dummy"]
    unless_null $P5039, fallback126
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5039, $P5040
  fallback126:
    set $P105, $P5039
    set $P5060, $P105
    goto if28_end124
  if28_else123:
.annotate 'line', 259
    nqp_fresh_stub $P5041, $P103
    set $P105, $P5041
    set $S5002, _lex_param_2
    assign $P105, $S5002
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 266
    nqp_decontainerize $P5042, _lex_param_0
    $P5043 = $P5042."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5043
    nqp_decontainerize $P5044, _lex_param_0
    nqp_get_sc_object $P5045, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5046, $P5044, $P5045, "%!code_stub_sc_idx"
.annotate 'line', 267
    $P5047 = _lex_param_1."cuid"()
    set $S5003, $P5047
    set $P5046[$S5003], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    setprop $P105, "PAST", _lex_param_1
    set $P5059, $P102
    unless $P102 goto if29_end128 
.annotate 'line', 276
    nqp_decontainerize $P5048, _lex_param_0
    nqp_get_sc_object $P5049, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5050, $P5048, $P5049, "%!code_object_fixup_list"
.annotate 'line', 277
    $P5051 = _lex_param_1."cuid"()
    set $S5004, $P5051
    set $P5050[$S5004], $P104
.annotate 'line', 278
    nqp_decontainerize $P5052, _lex_param_0
    $P5053 = $P5052."is_precompilation_mode"()
    unless $P5053 goto if30_else129 
    .const 'Sub' $P5055 = 'cuid_13_1346277629.325' 
    capture_lex $P5055
    newclosure $P5054, $P5055
    setprop $P105, "CLONE_CALLBACK", $P5054
    set $P5058, $P105
    goto if30_end130
  if30_else129:
.annotate 'line', 283
    .const 'Sub' $P5057 = 'cuid_14_1346277629.325' 
    capture_lex $P5057
    newclosure $P5056, $P5057
    setprop $P105, "CLONE_CALLBACK", $P5056
    set $P5058, $P105
  if30_end130:
    set $P5059, $P5058
  if29_end128:
    set $P5060, $P5059
  if28_end124:
.annotate 'line', 307
    nqp_decontainerize $P5061, _lex_param_0
    $P5062 = $P5061."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if31_else141 
    .const 'Sub' $P5063 = 'cuid_380_1346277629.325' 
    capture_lex $P5063
    $P5064 = $P5063()
    set $P5100, $P5064
    goto if31_end142
  if31_else141:
.annotate 'line', 346
.annotate 'line', 349
    get_hll_global $P5068, "GLOBAL"
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["VM"]
    unless_null $P5065, fallback156
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5065, $P5069
  fallback156:
.annotate 'line', 351
    get_hll_global $P5073, "GLOBAL"
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback157
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5070, $P5074
  fallback157:
.annotate 'line', 353
    get_hll_global $P5078, "GLOBAL"
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["SVal"]
    unless_null $P5075, fallback158
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5075, $P5079
  fallback158:
    nqp_decontainerize $P5080, _lex_param_0
    $P5081 = $P5080."handle"()
    $P5082 = $P5075."new"($P5081 :named("value"))
.annotate 'line', 354
    get_hll_global $P5086, "GLOBAL"
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["IVal"]
    unless_null $P5083, fallback159
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5083, $P5087
  fallback159:
    $P5088 = $P5083."new"($P106 :named("value"))
    $P5089 = $P5070."new"($P5082, $P5088, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 356
    get_hll_global $P5093, "GLOBAL"
    nqp_get_package_through_who $P5092, $P5093, "QAST"
    get_who $P5091, $P5092
    set $P5090, $P5091["BVal"]
    unless_null $P5090, fallback160
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5090, $P5094
  fallback160:
    $P5095 = $P5090."new"(_lex_param_1 :named("value"))
    $P5096 = $P5065."new"($P5089, $P5095, "assign vPP" :named("pirop"))
    $P5097 = $P104."push"($P5096)
    find_lex $P5098, "RETURN"
    $P5099 = $P5098($P105)
    set $P5100, $P5099
  if31_end142:
    goto lexotic_86
  lexotic_85:
    .get_results ($P5100)
  lexotic_86:
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1346277629.325") :anon :lex :outer("cuid_15_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 217
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5031 = 'cuid_379_1346277629.325' 
    capture_lex $P5031 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P106, $P5006
.annotate 'line', 219
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5011 = $P5007."unshift"($P5010)
    compreg $P5012, "nqp"
    set $P101, $P5012
.annotate 'line', 221
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["CompUnit"]
    unless_null $P5013, fallback95
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5017
  fallback95:
    find_lex $P5018, "$past"
    $P5019 = $P5013."new"($P5018, "nqp" :named("hll"))
    $P5020 = $P101."post"($P5019)
    set $P102, $P5020
.annotate 'line', 222
    $P5021 = $P101."pir"($P102)
    set $P103, $P5021
.annotate 'line', 223
    $P5022 = $P101."evalpmc"($P103)
    set $P104, $P5022
    elements $I5001, $P104
    box $P5023, $I5001
    set $P105, $P5023
    box $P5024, 0
    set $P106, $P5024
    new $P5028, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5028, while25_handlers99
    push_eh $P5028
  while25_test96:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5029, $I5002
    set $P5027, $P5029
    unless $I5002 goto while25_done100 
  while25_redo98:
    .const 'Sub' $P5025 = 'cuid_379_1346277629.325' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while25_test96 
  while25_handlers99:
    .get_results ($P5028)
    pop_upto_eh $P5028
    getattribute $P5028, $P5028, 'type'
    eq $P5028, .CONTROL_LOOP_NEXT, while25_test96
    eq $P5028, .CONTROL_LOOP_REDO, while25_redo98
  while25_done100:
    pop_eh 
.annotate 'line', 249
    $P5030 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1346277629.325") :anon :lex :outer("cuid_12_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 228
    .const 'Sub' $P5017 = 'cuid_378_1346277629.325' 
    capture_lex $P5017 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 229
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback101
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback101:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    box $P5014, $I5002
    set $P5013, $P5014
    unless $I5002 goto if26_end103 
    .const 'Sub' $P5011 = 'cuid_378_1346277629.325' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
  if26_end103:
    find_lex $P5015, "$i"
    set $N5002, $P5015
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5016, $N5001
    store_lex "$i", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1346277629.325") :anon :lex :outer("cuid_379_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 230
    .const 'Sub' $P5063 = 'cuid_377_1346277629.325' 
    capture_lex $P5063 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 234
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback104
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5009
  fallback104:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5011, "$code_type"
    find_lex $P5013, "$compiled"
    find_lex $P5014, "$i"
    set $I5001, $P5014
    set $P5012, $P5013[$I5001]
    unless_null $P5012, fallback105
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5015
  fallback105:
    setattribute $P101, $P5011, "$!do", $P5012
    find_lex $P5021, "self"
    nqp_decontainerize $P5020, $P5021
    nqp_get_sc_object $P5022, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5023, $P5020, $P5022, "%!code_objects_to_fix_up"
    find_lex $P5024, "$subid"
    set $S5002, $P5024
    set $P5019, $P5023[$S5002]
    unless_null $P5019, fallback106
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5025
  fallback106:
    set $P5016, $P5019
    iter $P5018, $P5019
    new $P5027, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5027, for_handlers108
    push_eh $P5027
  for_next109:
    unless $P5018, for_done111
    shift $P5028, $P5018
  for_redo110:
    .const 'Sub' $P5026 = 'cuid_377_1346277629.325' 
    capture_lex $P5026
    $P5016 = $P5026($P5028)
    goto for_next109
  for_handlers108:
    .get_results ($P5027)
    pop_upto_eh $P5027
    getattribute $P5027, $P5027, 'type'
    eq $P5027, .CONTROL_LOOP_NEXT, for_next109
    eq $P5027, .CONTROL_LOOP_REDO, for_redo110
  for_done111:
    pop_eh 
    find_lex $P5030, "$compiled"
    find_lex $P5031, "$i"
    set $I5002, $P5031
    set $P5029, $P5030[$I5002]
    unless_null $P5029, fallback112
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5032
  fallback112:
    find_lex $P5034, "$compiled"
    find_lex $P5035, "$i"
    set $I5003, $P5035
    set $P5033, $P5034[$I5003]
    unless_null $P5033, fallback113
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5036
  fallback113:
    setprop $P5029, "STATIC_CODE_REF", $P5033
.annotate 'line', 240
    find_lex $P5038, "self"
    nqp_decontainerize $P5037, $P5038
    find_lex $P5041, "self"
    nqp_decontainerize $P5040, $P5041
    nqp_get_sc_object $P5042, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5043, $P5040, $P5042, "%!code_stub_sc_idx"
    find_lex $P5044, "$subid"
    set $S5003, $P5044
    set $P5039, $P5043[$S5003]
    unless_null $P5039, fallback114
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5039, $P5045
  fallback114:
    find_lex $P5047, "$compiled"
    find_lex $P5048, "$i"
    set $I5004, $P5048
    set $P5046, $P5047[$I5004]
    unless_null $P5046, fallback115
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5046, $P5049
  fallback115:
    $P5050 = $P5037."update_root_code_ref"($P5039, $P5046)
    find_lex $P5053, "self"
    nqp_decontainerize $P5052, $P5053
    nqp_get_sc_object $P5054, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5055, $P5052, $P5054, "%!code_object_fixup_list"
    find_lex $P5056, "$subid"
    set $S5004, $P5056
    set $P5051, $P5055[$S5004]
    unless_null $P5051, fallback116
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5051, $P5057
  fallback116:
    set $P102, $P5051
    new $P5061, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5061, while27_handlers120
    push_eh $P5061
  while27_test117:
    $P5058 = $P102."list"()
    set $N5001, $P5058
    box $P5062, $N5001
    set $P5060, $P5062
    unless $N5001 goto while27_done121 
  while27_redo119:
.annotate 'line', 244
    $P5059 = $P102."shift"()
    set $P5060, $P5059
    goto while27_test117 
  while27_handlers120:
    .get_results ($P5061)
    pop_upto_eh $P5061
    getattribute $P5061, $P5061, 'type'
    eq $P5061, .CONTROL_LOOP_NEXT, while27_test117
    eq $P5061, .CONTROL_LOOP_REDO, while27_redo119
  while27_done121:
    pop_eh 
    .return ($P5060) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1346277629.325") :anon :lex :outer("cuid_378_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$code_type"
    find_lex $P5004, "$compiled"
    find_lex $P5005, "$i"
    set $I5001, $P5005
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback107
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback107:
    clone $P5002, $P5003
    setattribute _lex_param_0, $P5001, "$!do", $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1346277629.325") :anon :lex :outer("cuid_15_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 279
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 280
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback131
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5008
  fallback131:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1346277629.325") :anon :lex :outer("cuid_15_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 284
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 286
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."add_object"(_lex_param_2)
.annotate 'line', 287
    find_lex $P5004, "$fixups"
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback132
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5009
  fallback132:
.annotate 'line', 289
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["WVal"]
    unless_null $P5010, fallback133
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5014
  fallback133:
    $P5015 = $P5010."new"(_lex_param_2 :named("value"))
.annotate 'line', 290
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["WVal"]
    unless_null $P5016, fallback134
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5020
  fallback134:
    find_lex $P5021, "$code_type"
    $P5022 = $P5016."new"($P5021 :named("value"))
.annotate 'line', 291
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["SVal"]
    unless_null $P5023, fallback135
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5027
  fallback135:
    $P5028 = $P5023."new"("$!do" :named("value"))
.annotate 'line', 292
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback136
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5033
  fallback136:
.annotate 'line', 294
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback137
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5034, $P5038
  fallback137:
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["BVal"]
    unless_null $P5039, fallback138
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5039, $P5043
  fallback138:
    find_lex $P5044, "$past"
    $P5045 = $P5039."new"($P5044 :named("value"))
    $P5046 = $P5034."new"($P5045, "clone" :named("op"))
.annotate 'line', 295
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["WVal"]
    unless_null $P5047, fallback139
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5047, $P5051
  fallback139:
    $P5052 = $P5047."new"(_lex_param_2 :named("value"))
    $P5053 = $P5029."new"($P5046, $P5052, "set_sub_code_object 0PP" :named("pirop"))
    $P5054 = $P5005."new"($P5015, $P5022, $P5028, $P5053, "bindattr" :named("op"))
    $P5055 = $P5004."push"($P5054)
.annotate 'line', 300
    find_lex $P5058, "self"
    nqp_decontainerize $P5057, $P5058
    nqp_get_sc_object $P5059, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5060, $P5057, $P5059, "%!code_objects_to_fix_up"
    find_lex $P5061, "$past"
    $P5062 = $P5061."cuid"()
    set $S5001, $P5062
    set $P5056, $P5060[$S5001]
    unless_null $P5056, fallback140
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5056, $P5063
  fallback140:
    $P5064 = $P5056."push"(_lex_param_2)
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1346277629.325") :anon :lex :outer("cuid_15_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 311
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    set $P5010, $P5007
    unless $P5007 goto if32_end144 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
    set $P5010, $P5009
  if32_end144:
.annotate 'line', 317
    find_lex $P5012, "self"
    nqp_decontainerize $P5011, $P5012
    $P5013 = $P5011."add_object"($P101)
    set $P102, $P5013
.annotate 'line', 320
    find_lex $P5015, "self"
    nqp_decontainerize $P5014, $P5015
.annotate 'line', 321
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback145
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5020
  fallback145:
.annotate 'line', 323
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["BVal"]
    unless_null $P5021, fallback146
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5025
  fallback146:
    find_lex $P5026, "$past"
    $P5027 = $P5021."new"($P5026 :named("value"))
.annotate 'line', 324
    get_hll_global $P5031, "GLOBAL"
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["WVal"]
    unless_null $P5028, fallback147
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5032
  fallback147:
    $P5033 = $P5028."new"($P101 :named("value"))
    $P5034 = $P5016."new"($P5027, $P5033, "set_sub_code_object vPP" :named("pirop"))
    $P5035 = $P5014."add_fixup_task"($P5034 :named("deserialize_past"))
.annotate 'line', 328
    find_lex $P5036, "$fixups"
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback148
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5041
  fallback148:
.annotate 'line', 330
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["WVal"]
    unless_null $P5042, fallback149
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5042, $P5046
  fallback149:
    $P5047 = $P5042."new"($P101 :named("value"))
.annotate 'line', 331
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["WVal"]
    unless_null $P5048, fallback150
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5048, $P5052
  fallback150:
    find_lex $P5053, "$code_type"
    $P5054 = $P5048."new"($P5053 :named("value"))
.annotate 'line', 332
    get_hll_global $P5058, "GLOBAL"
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback151
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5055, $P5059
  fallback151:
    $P5060 = $P5055."new"("$!do" :named("value"))
.annotate 'line', 333
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["BVal"]
    unless_null $P5061, fallback152
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5061, $P5065
  fallback152:
    find_lex $P5066, "$past"
    $P5067 = $P5061."new"($P5066 :named("value"))
    $P5068 = $P5037."new"($P5047, $P5054, $P5060, $P5067, "bindattr" :named("op"))
    $P5069 = $P5036."push"($P5068)
.annotate 'line', 335
    find_lex $P5070, "$fixups"
    get_hll_global $P5074, "GLOBAL"
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["VM"]
    unless_null $P5071, fallback153
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5071, $P5075
  fallback153:
.annotate 'line', 337
    get_hll_global $P5079, "GLOBAL"
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["BVal"]
    unless_null $P5076, fallback154
    nqp_get_sc_object $P5080, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5076, $P5080
  fallback154:
    find_lex $P5081, "$past"
    $P5082 = $P5076."new"($P5081 :named("value"))
.annotate 'line', 338
    get_hll_global $P5086, "GLOBAL"
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["WVal"]
    unless_null $P5083, fallback155
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5083, $P5087
  fallback155:
    $P5088 = $P5083."new"($P101 :named("value"))
    $P5089 = $P5071."new"($P5082, $P5088, "set_sub_code_object vPP" :named("pirop"))
    $P5090 = $P5070."push"($P5089)
    find_lex $P5092, "self"
    nqp_decontainerize $P5091, $P5092
    nqp_get_sc_object $P5093, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5094, $P5091, $P5093, "%!code_objects_to_fix_up"
.annotate 'line', 342
    find_lex $P5095, "$past"
    $P5096 = $P5095."cuid"()
    set $S5001, $P5096
    new $P5097, 'ResizablePMCArray'
    push $P5097, $P101
    set $P5094[$S5001], $P5097
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 364
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_1 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_2 :opt_flag 
    if haz_param_1, default167
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set _lex_param_2, $P5012
  default167:
    if haz_param_2, default168
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set _lex_param_3, $P5013
  default168:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_161
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if33_end164 
.annotate 'line', 367
    set $P101["name"], _lex_param_2
    set $P5003, _lex_param_2
  if33_end164:
    defined $I5002, _lex_param_3
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if34_end166 
.annotate 'line', 368
    set $P101["repr"], _lex_param_3
    set $P5005, _lex_param_3
  if34_end166:
.annotate 'line', 369
    $P5007 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5007
.annotate 'line', 370
    nqp_decontainerize $P5008, _lex_param_0
    $P5009 = $P5008."add_object"($P102)
    find_lex $P5010, "RETURN"
    $P5011 = $P5010($P102)
    goto lexotic_162
  lexotic_161:
    .get_results ($P5011)
  lexotic_162:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 381
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 382
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 383
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 387
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 388
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 392
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
.annotate 'line', 393
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 394
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 402
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 404
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 407
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 411
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 412
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 415
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 416
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 420
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 421
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 425
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5043 = 'cuid_382_1346277629.325' 
    capture_lex $P5043 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_169
    .lex "RETURN", $P106
.annotate 'line', 427
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback171
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback171:
.annotate 'line', 428
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback172
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback172:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
    new $P5025, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5025, while35_handlers176
    push_eh $P5025
  while35_test173:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5026, $I5001
    set $P5024, $P5026
    unless $I5001 goto while35_done177 
  while35_redo175:
    .const 'Sub' $P5022 = 'cuid_382_1346277629.325' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while35_test173 
  while35_handlers176:
    .get_results ($P5025)
    pop_upto_eh $P5025
    getattribute $P5025, $P5025, 'type'
    eq $P5025, .CONTROL_LOOP_NEXT, while35_test173
    eq $P5025, .CONTROL_LOOP_REDO, while35_redo175
  while35_done177:
    pop_eh 
.annotate 'line', 451
    nqp_decontainerize $P5027, _lex_param_0
    $P5028 = $P5027."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5028
    new $P5030, 'ResizablePMCArray'
    get_hll_global $P5029, $P5030, "GLOBAL"
    set $P105, $P5029
    new $P5031, 'ResizablePMCArray'
    find_dynamic_lex $P5032, "$*GLOBALish"
    unless_null $P5032, fallback195
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$GLOBALish"]
    unless_null $P5033, fallback196
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5036
  fallback196:
    unless_null $P5033, vivi_40197
    die "Contextual $*GLOBALish not found"
    box $P5037, "Contextual $*GLOBALish not found"
    set $P5033, $P5037
  vivi_40197:
    set $P5032, $P5033
  fallback195:
    set_hll_global $P5031, "GLOBAL", $P5032
.annotate 'line', 454
    $P5038 = $P104()
    new $P5039, 'ResizablePMCArray'
    set_hll_global $P5039, "GLOBAL", $P105
.annotate 'line', 459
    $P5040 = $P101."shift"()
    find_lex $P5041, "RETURN"
    $P5042 = $P5041($P101)
    goto lexotic_170
  lexotic_169:
    .get_results ($P5042)
  lexotic_170:
    .return ($P5042) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1346277629.325") :anon :lex :outer("cuid_24_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 433
    .const 'Sub' $P5018 = 'cuid_381_1346277629.325' 
    capture_lex $P5018 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 435
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback178
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5010
  fallback178:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
    new $P5016, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5016, for_handlers191
    push_eh $P5016
  for_next192:
    unless $P5014, for_done194
    shift $P5017, $P5014
  for_redo193:
    .const 'Sub' $P5015 = 'cuid_381_1346277629.325' 
    capture_lex $P5015
    $P5012 = $P5015($P5017)
    goto for_next192
  for_handlers191:
    .get_results ($P5016)
    pop_upto_eh $P5016
    getattribute $P5016, $P5016, 'type'
    eq $P5016, .CONTROL_LOOP_NEXT, for_next192
    eq $P5016, .CONTROL_LOOP_REDO, for_redo193
  for_done194:
    pop_eh 
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1346277629.325") :anon :lex :outer("cuid_382_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 436
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 437
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback183
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5004
  fallback183:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if37_end182 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if37_end182:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if36_end180 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_39190
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 438
.annotate 'line', 439
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback184
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5008
  fallback184:
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback185
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5013
  fallback185:
.annotate 'line', 441
    get_hll_global $P5017, "GLOBAL"
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback186
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5018
  fallback186:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 442
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback187
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5025
  fallback187:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback188
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5028
  fallback188:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_38189
  catch_handler_39190:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_38189
  skip_handler_38189:
    find_lex $P5034, "%seen"
.annotate 'line', 445
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if36_end180:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_25_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 464
    .param pmc _lex_param_0 
    .const 'Sub' $P5046 = 'cuid_383_1346277629.325' 
    capture_lex $P5046 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback200
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback201
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback201:
    unless_null $P5011, vivi_42202
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_42202:
    set $P5010, $P5011
  fallback200:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback203
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5018
  fallback203:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback204
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5019
  fallback204:
    set $P5039, $P5008
    unless $P5008 goto if41_end199 
.annotate 'line', 467
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback205
    get_hll_global $P5029, "GLOBAL"
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback206
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback206:
    unless_null $P5027, vivi_43207
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_43207:
    set $P5026, $P5027
  fallback205:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback208
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5034
  fallback208:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback209
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5035
  fallback209:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
    new $P5037, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5037, for_handlers210
    push_eh $P5037
  for_next211:
    unless $P5022, for_done213
    shift $P5038, $P5022
  for_redo212:
    .const 'Sub' $P5036 = 'cuid_383_1346277629.325' 
    capture_lex $P5036
    $P5020 = $P5036($P5038)
    goto for_next211
  for_handlers210:
    .get_results ($P5037)
    pop_upto_eh $P5037
    getattribute $P5037, $P5037, 'type'
    eq $P5037, .CONTROL_LOOP_NEXT, for_next211
    eq $P5037, .CONTROL_LOOP_REDO, for_redo212
  for_done213:
    pop_eh 
    set $P5039, $P5020
  if41_end199:
.annotate 'line', 472
    get_hll_global $P5043, "GLOBAL"
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["VM"]
    unless_null $P5040, fallback214
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5040, $P5044
  fallback214:
    $P5045 = $P5040."new"($P101 :named("loadlibs"))
    .return ($P5045) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1346277629.325") :anon :lex :outer("cuid_25_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 469
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 476
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 477
    nqp_decontainerize $P5001, _lex_param_0
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback215
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback215:
.annotate 'line', 478
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["VM"]
    unless_null $P5007, fallback216
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback216:
    $P5012 = $P5007."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 479
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["VM"]
    unless_null $P5013, fallback217
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5017
  fallback217:
    $P5018 = $P5013."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 480
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback218
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5023
  fallback218:
.annotate 'line', 482
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["VM"]
    unless_null $P5024, fallback219
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5028
  fallback219:
    $P5029 = $P5024."new"("getinterp P" :named("pirop"))
.annotate 'line', 483
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["VM"]
    unless_null $P5030, fallback220
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5034
  fallback220:
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["SVal"]
    unless_null $P5035, fallback221
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5035, $P5039
  fallback221:
    $P5040 = $P5035."new"("LexPad" :named("value"))
    $P5041 = $P5030."new"($P5040, "get_class Ps" :named("pirop"))
.annotate 'line', 484
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback222
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5042, $P5046
  fallback222:
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["SVal"]
    unless_null $P5047, fallback223
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5047, $P5051
  fallback223:
    $P5052 = $P5047."new"("NQPLexPad" :named("value"))
    $P5053 = $P5042."new"($P5052, "get_class Ps" :named("pirop"))
    $P5054 = $P5019."new"($P5029, $P5041, $P5053, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5055 = $P5002."new"($P5012, $P5018, $P5054)
    $P5056 = $P5001."add_load_dependency_task"($P5055 :named("deserialize_past"))
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 490
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 491
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 496
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 497
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 502
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5012 = 'cuid_384_1346277629.325' 
    capture_lex $P5012 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_224
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
    new $P5009, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5009, while44_handlers229
    push_eh $P5009
  while44_test226:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5010, $I5001
    set $P5008, $P5010
    unless $I5001 goto while44_done230 
  while44_redo228:
    .const 'Sub' $P5006 = 'cuid_384_1346277629.325' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while44_test226 
  while44_handlers229:
    .get_results ($P5009)
    pop_upto_eh $P5009
    getattribute $P5009, $P5009, 'type'
    eq $P5009, .CONTROL_LOOP_NEXT, while44_test226
    eq $P5009, .CONTROL_LOOP_REDO, while44_redo228
  while44_done230:
    pop_eh 
    box $P5011, 0
    goto lexotic_225
  lexotic_224:
    .get_results ($P5011)
  lexotic_225:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1346277629.325") :anon :lex :outer("cuid_29_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 504
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 506
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback231
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5010
  fallback231:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if45_end233 
.annotate 'line', 507
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback234
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5015
  fallback234:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if45_end233:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 515
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5006, 'ExceptionHandler'
    set_label $P5006, catch_handler_47236
    $P5006.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5006
.annotate 'line', 517
.annotate 'line', 518
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = $P5003."find_sym"(_lex_param_2)
    box $P5005, 1
    set $P101, $P5005
    set $P5007, $P101
    pop_eh 
    goto skip_handler_46235
  catch_handler_47236:
    .get_results ($P5006) 
    set $I10001, 1
    set $P5006["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5006
    pop_upto_eh $P5006
    pop_eh 
    set $P5007, $P10001
    goto skip_handler_46235
  skip_handler_46235:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1346277629.325") :anon :lex :outer("cuid_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_386_1346277629.325' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_388_1346277629.325' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_389_1346277629.325' 
    capture_lex $P5025 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_237
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    box $P5004, $N5001
    set $P5003, $P5004
    if $N5001 goto unless48_end240 
.annotate 'line', 529
    box $P5002, "Cannot look up empty name"
    die $P5002
    set $P5003, $P5002
  unless48_end240:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if49_end242 
    .const 'Sub' $P5005 = 'cuid_386_1346277629.325' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5007, $P5006
  if49_end242:
    find_dynamic_lex $P5009, "$*GLOBALish"
    unless_null $P5009, fallback255
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    set $P5010, $P5011["$GLOBALish"]
    unless_null $P5010, fallback256
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5013
  fallback256:
    unless_null $P5010, vivi_53257
    die "Contextual $*GLOBALish not found"
    box $P5014, "Contextual $*GLOBALish not found"
    set $P5010, $P5014
  vivi_53257:
    set $P5009, $P5010
  fallback255:
    set $P101, $P5009
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    box $P5018, $I5002
    set $P5017, $P5018
    unless $I5002 goto if54_end259 
    .const 'Sub' $P5015 = 'cuid_388_1346277629.325' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if54_end259:
    set $P5019, _lex_param_1
    iter $P5021, _lex_param_1
    new $P5023, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5023, for_handlers275
    push_eh $P5023
  for_next276:
    unless $P5021, for_done278
    shift $P5024, $P5021
  for_redo277:
    .const 'Sub' $P5022 = 'cuid_389_1346277629.325' 
    capture_lex $P5022
    $P5019 = $P5022($P5024)
    goto for_next276
  for_handlers275:
    .get_results ($P5023)
    pop_upto_eh $P5023
    getattribute $P5023, $P5023, 'type'
    eq $P5023, .CONTROL_LOOP_NEXT, for_next276
    eq $P5023, .CONTROL_LOOP_REDO, for_redo277
  for_done278:
    pop_eh 
    goto lexotic_238
  lexotic_237:
    .get_results ($P101)
  lexotic_238:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1346277629.325") :anon :lex :outer("cuid_31_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .const 'Sub' $P5016 = 'cuid_385_1346277629.325' 
    capture_lex $P5016 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback243
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5005
  fallback243:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
    new $P5014, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5014, while50_handlers247
    push_eh $P5014
  while50_test244:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5015, $I5001
    set $P5013, $P5015
    unless $I5001 goto while50_done248 
  while50_redo246:
    .const 'Sub' $P5011 = 'cuid_385_1346277629.325' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while50_test244 
  while50_handlers247:
    .get_results ($P5014)
    pop_upto_eh $P5014
    getattribute $P5014, $P5014, 'type'
    eq $P5014, .CONTROL_LOOP_NEXT, while50_test244
    eq $P5014, .CONTROL_LOOP_REDO, while50_redo246
  while50_done248:
    pop_eh 
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1346277629.325") :anon :lex :outer("cuid_386_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 536
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 538
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback249
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5010
  fallback249:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if51_end251 
.annotate 'line', 539
    exists $I5002, $P101["value"]
    unless $I5002 goto if52_else252 
.annotate 'line', 540
    set $P5014, $P101["value"]
    unless_null $P5014, fallback254
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5015
  fallback254:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if52_end253
  if52_else252:
.annotate 'line', 543
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if52_end253:
    set $P5020, $P5019
  if51_end251:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1346277629.325") :anon :lex :outer("cuid_31_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 554
    .const 'Sub' $P5016 = 'cuid_387_1346277629.325' 
    capture_lex $P5016 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback260
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5005
  fallback260:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
    new $P5014, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5014, while55_handlers264
    push_eh $P5014
  while55_test261:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5015, $I5001
    set $P5013, $P5015
    unless $I5001 goto while55_done265 
  while55_redo263:
    .const 'Sub' $P5011 = 'cuid_387_1346277629.325' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while55_test261 
  while55_handlers264:
    .get_results ($P5014)
    pop_upto_eh $P5014
    getattribute $P5014, $P5014, 'type'
    eq $P5014, .CONTROL_LOOP_NEXT, while55_test261
    eq $P5014, .CONTROL_LOOP_REDO, while55_redo263
  while55_done265:
    pop_eh 
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1346277629.325") :anon :lex :outer("cuid_388_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 557
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 559
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback266
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5010
  fallback266:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5022, $N5004
    set $P5021, $P5022
    unless $N5004 goto if56_end268 
.annotate 'line', 560
    exists $I5002, $P101["value"]
    unless $I5002 goto if57_else269 
.annotate 'line', 561
    set $P5013, $P101["value"]
    unless_null $P5013, fallback271
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5014
  fallback271:
    store_lex "$result", $P5013
.annotate 'line', 563
    find_lex $P5015, "@name"
    $P5016 = $P5015."shift"()
    box $P5017, 0
    store_lex "$i", $P5017
    set $P5020, $P5017
    goto if57_end270
  if57_else269:
.annotate 'line', 566
    find_lex $P5018, "$first"
    set $S5002, $P5018
    concat $S5001, "No compile-time value for ", $S5002
    box $P5019, $S5001
    die $P5019
    set $P5020, $P5019
  if57_end270:
    set $P5021, $P5020
  if56_end268:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1346277629.325") :anon :lex :outer("cuid_31_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 574
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if58_else272 
.annotate 'line', 575
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback274
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback274:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if58_end273
  if58_else272:
.annotate 'line', 578
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if58_end273:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 589
    .const 'Sub' $P5274 = 'cuid_33_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_34_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_35_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_36_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_37_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_38_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_40_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_42_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_43_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_44_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_46_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_47_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_48_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_49_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_50_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_51_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_52_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_53_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_54_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_55_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_56_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_57_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_58_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_59_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_60_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_61_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_62_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_63_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_65_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_66_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_67_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_68_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_69_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_70_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_71_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_72_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_73_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_74_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_75_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_76_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_77_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_78_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_79_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_80_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_81_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_82_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_83_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_84_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_85_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_86_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_87_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_88_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_91_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_92_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_93_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_94_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_95_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_96_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_97_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_98_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_99_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_100_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_101_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_102_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_103_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_104_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_105_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_106_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_107_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_108_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_109_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_110_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_111_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_112_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_113_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_114_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_115_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_116_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_117_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_118_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_119_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_120_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_121_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_122_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_123_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_124_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_125_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_126_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_128_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_129_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_130_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_131_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_132_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_133_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_134_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_135_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_136_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_137_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_138_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_139_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_140_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_141_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_142_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_143_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_144_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_145_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_146_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_147_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_148_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_149_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_150_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_151_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_152_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_153_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_154_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_155_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_156_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_157_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_158_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_159_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_160_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_161_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_162_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_163_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_164_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_165_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_166_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_167_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_168_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_169_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_170_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_171_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_172_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_173_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_174_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_175_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_176_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_177_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_178_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_179_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_180_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_181_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_182_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_183_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_184_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_185_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_186_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_187_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_188_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_189_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_190_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_191_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_192_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_193_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_194_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_195_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_196_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_197_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_198_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_199_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_200_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_201_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_202_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_203_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_204_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_205_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_206_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_207_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_208_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_209_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_210_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_211_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_212_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_213_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_214_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_215_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_216_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_217_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_218_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_219_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_220_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_221_1346277629.325' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_222_1346277629.325' 
    capture_lex $P5274 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1212
.annotate 'line', 1213
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback279
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback279:
    $P5006 = $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1214
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "NQP"
    get_who $P5008, $P5009
    set $P5007, $P5008["Grammar"]
    unless_null $P5007, fallback280
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback280:
    $P5012 = $P5007."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1215
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "NQP"
    get_who $P5014, $P5015
    set $P5013, $P5014["Grammar"]
    unless_null $P5013, fallback281
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5017
  fallback281:
    $P5018 = $P5013."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1216
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "NQP"
    get_who $P5020, $P5021
    set $P5019, $P5020["Grammar"]
    unless_null $P5019, fallback282
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5023
  fallback282:
    $P5024 = $P5019."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1217
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "NQP"
    get_who $P5026, $P5027
    set $P5025, $P5026["Grammar"]
    unless_null $P5025, fallback283
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5029
  fallback283:
    $P5030 = $P5025."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1218
    get_hll_global $P5034, "GLOBAL"
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback284
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5031, $P5035
  fallback284:
    $P5036 = $P5031."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1219
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "NQP"
    get_who $P5038, $P5039
    set $P5037, $P5038["Grammar"]
    unless_null $P5037, fallback285
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5041
  fallback285:
    $P5042 = $P5037."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1220
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "NQP"
    get_who $P5044, $P5045
    set $P5043, $P5044["Grammar"]
    unless_null $P5043, fallback286
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5043, $P5047
  fallback286:
    $P5048 = $P5043."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1221
    get_hll_global $P5052, "GLOBAL"
    nqp_get_package_through_who $P5051, $P5052, "NQP"
    get_who $P5050, $P5051
    set $P5049, $P5050["Grammar"]
    unless_null $P5049, fallback287
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5053
  fallback287:
    $P5054 = $P5049."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1222
    get_hll_global $P5058, "GLOBAL"
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Grammar"]
    unless_null $P5055, fallback288
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5055, $P5059
  fallback288:
    $P5060 = $P5055."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1223
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback289
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5061, $P5065
  fallback289:
    $P5066 = $P5061."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1224
    get_hll_global $P5070, "GLOBAL"
    nqp_get_package_through_who $P5069, $P5070, "NQP"
    get_who $P5068, $P5069
    set $P5067, $P5068["Grammar"]
    unless_null $P5067, fallback290
    nqp_get_sc_object $P5071, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5067, $P5071
  fallback290:
    $P5072 = $P5067."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1225
    get_hll_global $P5076, "GLOBAL"
    nqp_get_package_through_who $P5075, $P5076, "NQP"
    get_who $P5074, $P5075
    set $P5073, $P5074["Grammar"]
    unless_null $P5073, fallback291
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5073, $P5077
  fallback291:
    $P5078 = $P5073."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1226
    get_hll_global $P5082, "GLOBAL"
    nqp_get_package_through_who $P5081, $P5082, "NQP"
    get_who $P5080, $P5081
    set $P5079, $P5080["Grammar"]
    unless_null $P5079, fallback292
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5079, $P5083
  fallback292:
    $P5084 = $P5079."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1227
    get_hll_global $P5088, "GLOBAL"
    nqp_get_package_through_who $P5087, $P5088, "NQP"
    get_who $P5086, $P5087
    set $P5085, $P5086["Grammar"]
    unless_null $P5085, fallback293
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5085, $P5089
  fallback293:
    $P5090 = $P5085."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 589
    .const 'Sub' $P5091 = 'cuid_33_1346277629.325' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_34_1346277629.325' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_35_1346277629.325' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_36_1346277629.325' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_37_1346277629.325' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_38_1346277629.325' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_40_1346277629.325' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_42_1346277629.325' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_43_1346277629.325' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_44_1346277629.325' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_46_1346277629.325' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_47_1346277629.325' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_48_1346277629.325' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_49_1346277629.325' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_50_1346277629.325' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_51_1346277629.325' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_52_1346277629.325' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_53_1346277629.325' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_54_1346277629.325' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_55_1346277629.325' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_56_1346277629.325' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_57_1346277629.325' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_58_1346277629.325' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_59_1346277629.325' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_60_1346277629.325' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_61_1346277629.325' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_62_1346277629.325' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_63_1346277629.325' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_65_1346277629.325' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_66_1346277629.325' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_67_1346277629.325' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_68_1346277629.325' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_69_1346277629.325' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_70_1346277629.325' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_71_1346277629.325' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_72_1346277629.325' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_73_1346277629.325' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_74_1346277629.325' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_75_1346277629.325' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_76_1346277629.325' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_77_1346277629.325' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_78_1346277629.325' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_79_1346277629.325' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_80_1346277629.325' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_81_1346277629.325' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_82_1346277629.325' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_83_1346277629.325' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_84_1346277629.325' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_85_1346277629.325' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_86_1346277629.325' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_87_1346277629.325' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_88_1346277629.325' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_91_1346277629.325' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_92_1346277629.325' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_93_1346277629.325' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_94_1346277629.325' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_95_1346277629.325' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_96_1346277629.325' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_97_1346277629.325' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_98_1346277629.325' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_99_1346277629.325' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_100_1346277629.325' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_101_1346277629.325' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_102_1346277629.325' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_103_1346277629.325' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_104_1346277629.325' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_105_1346277629.325' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_106_1346277629.325' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_107_1346277629.325' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_108_1346277629.325' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_109_1346277629.325' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_110_1346277629.325' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_111_1346277629.325' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_112_1346277629.325' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_113_1346277629.325' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_114_1346277629.325' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_115_1346277629.325' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_116_1346277629.325' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_117_1346277629.325' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_118_1346277629.325' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_119_1346277629.325' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_120_1346277629.325' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_121_1346277629.325' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_122_1346277629.325' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_123_1346277629.325' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_124_1346277629.325' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_125_1346277629.325' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_126_1346277629.325' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_128_1346277629.325' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_129_1346277629.325' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_130_1346277629.325' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_131_1346277629.325' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_132_1346277629.325' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_133_1346277629.325' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_134_1346277629.325' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_135_1346277629.325' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_136_1346277629.325' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_137_1346277629.325' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_138_1346277629.325' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_139_1346277629.325' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_140_1346277629.325' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_141_1346277629.325' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_142_1346277629.325' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_143_1346277629.325' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_144_1346277629.325' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_145_1346277629.325' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_146_1346277629.325' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_147_1346277629.325' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_148_1346277629.325' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_149_1346277629.325' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_150_1346277629.325' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_151_1346277629.325' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_152_1346277629.325' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_153_1346277629.325' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_154_1346277629.325' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_155_1346277629.325' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_156_1346277629.325' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_157_1346277629.325' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_158_1346277629.325' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_159_1346277629.325' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_160_1346277629.325' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_161_1346277629.325' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_162_1346277629.325' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_163_1346277629.325' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_164_1346277629.325' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_165_1346277629.325' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_166_1346277629.325' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_167_1346277629.325' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_168_1346277629.325' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_169_1346277629.325' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_170_1346277629.325' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_171_1346277629.325' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_172_1346277629.325' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_173_1346277629.325' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_174_1346277629.325' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_175_1346277629.325' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_176_1346277629.325' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_177_1346277629.325' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_178_1346277629.325' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_179_1346277629.325' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_180_1346277629.325' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_181_1346277629.325' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_182_1346277629.325' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_183_1346277629.325' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_184_1346277629.325' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_185_1346277629.325' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_186_1346277629.325' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_187_1346277629.325' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_188_1346277629.325' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_189_1346277629.325' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_190_1346277629.325' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_191_1346277629.325' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_192_1346277629.325' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_193_1346277629.325' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_194_1346277629.325' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_195_1346277629.325' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_196_1346277629.325' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_197_1346277629.325' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_198_1346277629.325' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_199_1346277629.325' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_200_1346277629.325' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_201_1346277629.325' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_202_1346277629.325' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_203_1346277629.325' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_204_1346277629.325' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_205_1346277629.325' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_206_1346277629.325' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_207_1346277629.325' 
    capture_lex $P5258
    .const 'Sub' $P5259 = 'cuid_208_1346277629.325' 
    capture_lex $P5259
    .const 'Sub' $P5260 = 'cuid_209_1346277629.325' 
    capture_lex $P5260
    .const 'Sub' $P5261 = 'cuid_210_1346277629.325' 
    capture_lex $P5261
    .const 'Sub' $P5262 = 'cuid_211_1346277629.325' 
    capture_lex $P5262
    .const 'Sub' $P5263 = 'cuid_212_1346277629.325' 
    capture_lex $P5263
    .const 'Sub' $P5264 = 'cuid_213_1346277629.325' 
    capture_lex $P5264
    .const 'Sub' $P5265 = 'cuid_214_1346277629.325' 
    capture_lex $P5265
    .const 'Sub' $P5266 = 'cuid_215_1346277629.325' 
    capture_lex $P5266
    .const 'Sub' $P5267 = 'cuid_216_1346277629.325' 
    capture_lex $P5267
    .const 'Sub' $P5268 = 'cuid_217_1346277629.325' 
    capture_lex $P5268
    .const 'Sub' $P5269 = 'cuid_218_1346277629.325' 
    capture_lex $P5269
    .const 'Sub' $P5270 = 'cuid_219_1346277629.325' 
    capture_lex $P5270
    .const 'Sub' $P5271 = 'cuid_220_1346277629.325' 
    capture_lex $P5271
    .const 'Sub' $P5272 = 'cuid_221_1346277629.325' 
    capture_lex $P5272
    .const 'Sub' $P5273 = 'cuid_222_1346277629.325' 
    capture_lex $P5273
    .return ($P5273) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_33_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 590
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "%*HANDLERS", $P111 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P106, $P5006
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P107, $P5007
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P108, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P109, $P5009
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P110, $P5010
    new $P5011, 'Hash'
    set $P111, $P5011
    unless_null $P101, fallback294
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["%LANG"]
    unless_null $P5012, fallback295
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%LANG"], $P5017
    set $P5012, $P5017
  fallback295:
    unless_null $P5012, vivi_59296
    die "Contextual %*LANG not found"
    box $P5018, "Contextual %*LANG not found"
    set $P5012, $P5018
  vivi_59296:
    set $P101, $P5012
  fallback294:
    unless_null $P101, fallback297
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["%LANG"]
    unless_null $P5019, fallback298
    get_hll_global $P5023, "GLOBAL"
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%LANG"], $P5024
    set $P5019, $P5024
  fallback298:
    unless_null $P5019, vivi_60299
    die "Contextual %*LANG not found"
    box $P5025, "Contextual %*LANG not found"
    set $P5019, $P5025
  vivi_60299:
    set $P101, $P5019
  fallback297:
    get_hll_global $P5029, "GLOBAL"
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Regex"]
    unless_null $P5026, fallback300
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5030
  fallback300:
    set $P101["Regex"], $P5026
    unless_null $P101, fallback301
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["%LANG"]
    unless_null $P5031, fallback302
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    new $P5036, 'Hash'
    set $P5034["%LANG"], $P5036
    set $P5031, $P5036
  fallback302:
    unless_null $P5031, vivi_61303
    die "Contextual %*LANG not found"
    box $P5037, "Contextual %*LANG not found"
    set $P5031, $P5037
  vivi_61303:
    set $P101, $P5031
  fallback301:
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "NQP"
    get_who $P5039, $P5040
    set $P5038, $P5039["RegexActions"]
    unless_null $P5038, fallback304
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5038, $P5042
  fallback304:
    set $P101["Regex-actions"], $P5038
    unless_null $P101, fallback305
    get_hll_global $P5045, "GLOBAL"
    get_who $P5044, $P5045
    set $P5043, $P5044["%LANG"]
    unless_null $P5043, fallback306
    get_hll_global $P5047, "GLOBAL"
    get_who $P5046, $P5047
    new $P5048, 'Hash'
    set $P5046["%LANG"], $P5048
    set $P5043, $P5048
  fallback306:
    unless_null $P5043, vivi_62307
    die "Contextual %*LANG not found"
    box $P5049, "Contextual %*LANG not found"
    set $P5043, $P5049
  vivi_62307:
    set $P101, $P5043
  fallback305:
    get_hll_global $P5053, "GLOBAL"
    nqp_get_package_through_who $P5052, $P5053, "NQP"
    get_who $P5051, $P5052
    set $P5050, $P5051["Grammar"]
    unless_null $P5050, fallback308
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5050, $P5054
  fallback308:
    set $P101["MAIN"], $P5050
    unless_null $P101, fallback309
    get_hll_global $P5057, "GLOBAL"
    get_who $P5056, $P5057
    set $P5055, $P5056["%LANG"]
    unless_null $P5055, fallback310
    get_hll_global $P5059, "GLOBAL"
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%LANG"], $P5060
    set $P5055, $P5060
  fallback310:
    unless_null $P5055, vivi_63311
    die "Contextual %*LANG not found"
    box $P5061, "Contextual %*LANG not found"
    set $P5055, $P5061
  vivi_63311:
    set $P101, $P5055
  fallback309:
    get_hll_global $P5065, "GLOBAL"
    nqp_get_package_through_who $P5064, $P5065, "NQP"
    get_who $P5063, $P5064
    set $P5062, $P5063["Actions"]
    unless_null $P5062, fallback312
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5062, $P5066
  fallback312:
    set $P101["MAIN-actions"], $P5062
    unless_null $P102, fallback313
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    set $P5067, $P5068["%HOW"]
    unless_null $P5067, fallback314
    get_hll_global $P5071, "GLOBAL"
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%HOW"], $P5072
    set $P5067, $P5072
  fallback314:
    unless_null $P5067, vivi_64315
    die "Contextual %*HOW not found"
    box $P5073, "Contextual %*HOW not found"
    set $P5067, $P5073
  vivi_64315:
    set $P102, $P5067
  fallback313:
    unless_null $P102, fallback316
    get_hll_global $P5076, "GLOBAL"
    get_who $P5075, $P5076
    set $P5074, $P5075["%HOW"]
    unless_null $P5074, fallback317
    get_hll_global $P5078, "GLOBAL"
    get_who $P5077, $P5078
    new $P5079, 'Hash'
    set $P5077["%HOW"], $P5079
    set $P5074, $P5079
  fallback317:
    unless_null $P5074, vivi_65318
    die "Contextual %*HOW not found"
    box $P5080, "Contextual %*HOW not found"
    set $P5074, $P5080
  vivi_65318:
    set $P102, $P5074
  fallback316:
    get_knowhow $P5081
    set $P102["knowhow"], $P5081
    unless_null $P102, fallback319
    get_hll_global $P5084, "GLOBAL"
    get_who $P5083, $P5084
    set $P5082, $P5083["%HOW"]
    unless_null $P5082, fallback320
    get_hll_global $P5086, "GLOBAL"
    get_who $P5085, $P5086
    new $P5087, 'Hash'
    set $P5085["%HOW"], $P5087
    set $P5082, $P5087
  fallback320:
    unless_null $P5082, vivi_66321
    die "Contextual %*HOW not found"
    box $P5088, "Contextual %*HOW not found"
    set $P5082, $P5088
  vivi_66321:
    set $P102, $P5082
  fallback319:
    get_knowhow_attribute $P5089
    set $P102["knowhow-attr"], $P5089
    find_caller_lex $P5090, "$?FILES"
    set $P103, $P5090
    nqp_decontainerize $P5091, _lex_param_0
    find_lex $P5094, "$?PACKAGE"
    get_who $P5093, $P5094
    set $P5092, $P5093["NQPCursor"]
    unless_null $P5092, fallback322
    get_hll_global $P5097, "GLOBAL"
    get_who $P5096, $P5097
    set $P5095, $P5096["NQPCursor"]
    unless_null $P5095, vivi_67323
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5095, $P5098
  vivi_67323:
    set $P5092, $P5095
  fallback322:
    repr_get_attr_str $S5004, $P5091, $P5092, "$!target"
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5099, $S5001
    set $P104, $P5099
    isnull $I5001, $P103
    unless $I5001 goto if68_else324 
.annotate 'line', 612
    get_hll_global $P5103, "GLOBAL"
    nqp_get_package_through_who $P5102, $P5103, "NQP"
    get_who $P5101, $P5102
    set $P5100, $P5101["World"]
    unless_null $P5100, fallback326
    nqp_get_sc_object $P5104, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5100, $P5104
  fallback326:
    $P5105 = $P5100."new"($P104 :named("handle"))
    set $P5112, $P5105
    goto if68_end325
  if68_else324:
.annotate 'line', 613
    get_hll_global $P5109, "GLOBAL"
    nqp_get_package_through_who $P5108, $P5109, "NQP"
    get_who $P5107, $P5108
    set $P5106, $P5107["World"]
    unless_null $P5106, fallback327
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5106, $P5110
  fallback327:
    $P5111 = $P5106."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5112, $P5111
  if68_end325:
    set $P105, $P5112
    box $P5113, ""
    set $P106, $P5113
    box $P5114, ""
    set $P107, $P5114
    box $P5115, ""
    set $P108, $P5115
    box $P5116, 0
    set $P109, $P5116
    box $P5117, 0
    set $P110, $P5117
    unless_null $P111, fallback328
    get_hll_global $P5120, "GLOBAL"
    get_who $P5119, $P5120
    set $P5118, $P5119["%HANDLERS"]
    unless_null $P5118, fallback329
    get_hll_global $P5122, "GLOBAL"
    get_who $P5121, $P5122
    new $P5123, 'Hash'
    set $P5121["%HANDLERS"], $P5123
    set $P5118, $P5123
  fallback329:
    unless_null $P5118, vivi_69330
    die "Contextual %*HANDLERS not found"
    box $P5124, "Contextual %*HANDLERS not found"
    set $P5118, $P5124
  vivi_69330:
    set $P111, $P5118
  fallback328:
.annotate 'line', 621
    nqp_decontainerize $P5125, _lex_param_0
    $P5126 = $P5125."comp_unit"()
    .return ($P5126) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_34_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 626
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx70_tgt
    .local int rx70_pos
    .local int rx70_off
    .local int rx70_eos
    .local int rx70_rep
    .local pmc rx70_cur
    .local pmc rx70_curclass
    .local pmc rx70_bstack
    .local pmc rx70_cstack
    (rx70_cur, rx70_tgt, rx70_pos, rx70_curclass, rx70_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx70_cur
    length rx70_eos, rx70_tgt
    eq $I19, 1, rx70_restart333
    gt rx70_pos, rx70_eos, rx70_fail334
    repr_get_attr_int $I11, self, rx70_curclass, "$!from"
    ne $I11, -1, rxscan71_done340
    goto rxscan71_scan339
  rxscan71_loop338:
    inc rx70_pos
    gt rx70_pos, rx70_eos, rx70_fail334
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!from", rx70_pos
  rxscan71_scan339:
    nqp_rxmark rx70_bstack, rxscan71_loop338, rx70_pos, 0
  rxscan71_done340:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail334
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxmark rx70_bstack, rxquantr73_done343, rx70_pos, 0
  rxquantr73_loop342:
  alt74_0345:
    nqp_rxmark rx70_bstack, alt74_1346, rx70_pos, 0
    add $I11, rx70_pos, 1
    gt $I11, rx70_eos, rx70_fail334
    substr $S10, rx70_tgt, rx70_pos, 1
    ne $S10, ucs4:"-", rx70_fail334
    add rx70_pos, 1
    goto alt74_end344
  alt74_1346:
    ge rx70_pos, rx70_eos, rx70_fail334
    substr $S11, rx70_tgt, rx70_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx70_fail334
    inc rx70_pos
  alt74_end344:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail334
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxpeek $I19, rx70_bstack, rxquantr73_done343
    inc $I19
    inc $I19
    set rx70_rep, rx70_bstack[$I19]
    nqp_rxcommit rx70_bstack, rxquantr73_done343
    inc rx70_rep
    nqp_rxmark rx70_bstack, rxquantr73_done343, rx70_pos, rx70_rep
    goto rxquantr73_loop342
  rxquantr73_done343:
    rx70_cur."!cursor_pass"(rx70_pos, "identifier", 'backtrack'=>1)
    .return (rx70_cur)
  rx70_restart333:
    repr_get_attr_obj rx70_cstack, rx70_cur, rx70_curclass, "$!cstack"
  rx70_fail334:
    unless rx70_bstack, rx70_done332
    pop $I19, rx70_bstack
    if_null rx70_cstack, rx70_cstack_done337
    unless rx70_cstack, rx70_cstack_done337
    dec $I19
    set $P11, rx70_cstack[$I19]
  rx70_cstack_done337:
    pop rx70_rep, rx70_bstack
    pop rx70_pos, rx70_bstack
    pop $I19, rx70_bstack
    lt rx70_pos, -1, rx70_done332
    lt rx70_pos, 0, rx70_fail334
    eq $I19, 0, rx70_fail334
    nqp_islist $I20, rx70_cstack
    unless $I20, rx70_jump335
    elements $I18, rx70_bstack
    le $I18, 0, rx70_cut336
    dec $I18
    set $I18, rx70_bstack[$I18]
  rx70_cut336:
    assign rx70_cstack, $I18
  rx70_jump335:
    jump $I19
  rx70_done332:
    rx70_cur."!cursor_fail"()
    .return (rx70_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1346277629.325_caps" :subid("cuid_memo_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1346277629.325_nfa" :subid("cuid_memo_2_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ident"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_35_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 628
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    (rx76_cur, rx76_tgt, rx76_pos, rx76_curclass, rx76_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart350
    gt rx76_pos, rx76_eos, rx76_fail351
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done357
    goto rxscan77_scan356
  rxscan77_loop355:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail351
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan356:
    nqp_rxmark rx76_bstack, rxscan77_loop355, rx76_pos, 0
  rxscan77_done357:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail351
    nqp_rxmark rx76_bstack, rxsubrule78_pass358, -1, 0
  rxsubrule78_pass358:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxmark rx76_bstack, rxquantr79_done360, rx76_pos, 0
  rxquantr79_loop359:
    add $I11, rx76_pos, 2
    gt $I11, rx76_eos, rx76_fail351
    substr $S10, rx76_tgt, rx76_pos, 2
    ne $S10, ucs4:"::", rx76_fail351
    add rx76_pos, 2
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail351
    nqp_rxmark rx76_bstack, rxsubrule80_pass361, -1, 0
  rxsubrule80_pass361:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxpeek $I19, rx76_bstack, rxquantr79_done360
    inc $I19
    inc $I19
    set rx76_rep, rx76_bstack[$I19]
    nqp_rxcommit rx76_bstack, rxquantr79_done360
    inc rx76_rep
    nqp_rxmark rx76_bstack, rxquantr79_done360, rx76_pos, rx76_rep
    goto rxquantr79_loop359
  rxquantr79_done360:
    rx76_cur."!cursor_pass"(rx76_pos, "name", 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart350:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail351:
    unless rx76_bstack, rx76_done349
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done354
    unless rx76_cstack, rx76_cstack_done354
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done354:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done349
    lt rx76_pos, 0, rx76_fail351
    eq $I19, 0, rx76_fail351
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump352
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut353
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut353:
    assign rx76_cstack, $I18
  rx76_jump352:
    jump $I19
  rx76_done349:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1346277629.325_caps" :subid("cuid_memo_3_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1346277629.325_nfa" :subid("cuid_memo_4_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "identifier"
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_36_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 630
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    (rx81_cur, rx81_tgt, rx81_pos, rx81_curclass, rx81_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart364
    gt rx81_pos, rx81_eos, rx81_fail365
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done371
    goto rxscan82_scan370
  rxscan82_loop369:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail365
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan370:
    nqp_rxmark rx81_bstack, rxscan82_loop369, rx81_pos, 0
  rxscan82_done371:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail365
    nqp_rxmark rx81_bstack, rxsubrule83_pass372, -1, 0
  rxsubrule83_pass372:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxmark rx81_bstack, rxquantr84_done374, rx81_pos, 0
  rxquantr84_loop373:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail365
    goto rxsubrule85_pass375
  rxsubrule85_back376:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail365
  rxsubrule85_pass375:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule85_back376
    push rx81_bstack, $I11
    push rx81_bstack, 0
    push rx81_bstack, rx81_pos
    elements $I11, rx81_cstack
    push rx81_bstack, $I11
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxpeek $I19, rx81_bstack, rxquantr84_done374
    inc $I19
    inc $I19
    set rx81_rep, rx81_bstack[$I19]
    nqp_rxcommit rx81_bstack, rxquantr84_done374
    inc rx81_rep
  rxquantr84_done374:
    rx81_cur."!cursor_pass"(rx81_pos, "deflongname", 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart364:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail365:
    unless rx81_bstack, rx81_done363
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done368
    unless rx81_cstack, rx81_cstack_done368
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done368:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done363
    lt rx81_pos, 0, rx81_fail365
    eq $I19, 0, rx81_fail365
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump366
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut367
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut367:
    assign rx81_cstack, $I18
  rx81_jump366:
    jump $I19
  rx81_done363:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1346277629.325_caps" :subid("cuid_memo_5_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    box $P5003, 2
    set $P5001["colonpair"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1346277629.325_nfa" :subid("cuid_memo_6_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "colonpair"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_37_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 634
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx86_tgt
    .local int rx86_pos
    .local int rx86_off
    .local int rx86_eos
    .local int rx86_rep
    .local pmc rx86_cur
    .local pmc rx86_curclass
    .local pmc rx86_bstack
    .local pmc rx86_cstack
    (rx86_cur, rx86_tgt, rx86_pos, rx86_curclass, rx86_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx86_cur
    length rx86_eos, rx86_tgt
    eq $I19, 1, rx86_restart379
    gt rx86_pos, rx86_eos, rx86_fail380
    repr_get_attr_int $I11, self, rx86_curclass, "$!from"
    ne $I11, -1, rxscan87_done386
    goto rxscan87_scan385
  rxscan87_loop384:
    inc rx86_pos
    gt rx86_pos, rx86_eos, rx86_fail380
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!from", rx86_pos
  rxscan87_scan385:
    nqp_rxmark rx86_bstack, rxscan87_loop384, rx86_pos, 0
  rxscan87_done386:
    nqp_rxmark rx86_bstack, rxquantr88_done388, rx86_pos, 0
  rxquantr88_loop387:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt89_0390
    nqp_push_label $P11, alt89_1395
    nqp_rxmark rx86_bstack, alt89_end389, -1, 0
    rx86_cur."!alt"(rx86_pos, "alt_nfa__1_1346277631.525", $P11)
    goto rx86_fail380
  alt89_0390:
    nqp_rxmark rx86_bstack, rxquantr90_done392, rx86_pos, 0
  rxquantr90_loop391:
    ge rx86_pos, rx86_eos, rx86_fail380
    substr $S11, rx86_tgt, rx86_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx86_fail380
    inc rx86_pos
    nqp_rxpeek $I19, rx86_bstack, rxquantr90_done392
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr90_done392
    inc rx86_rep
    nqp_rxmark rx86_bstack, rxquantr90_done392, rx86_pos, rx86_rep
    goto rxquantr90_loop391
  rxquantr90_done392:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor91_done393
    ne rx86_pos, rx86_eos, rx86_fail380
    eq rx86_pos, 0, rxanchor91_done393
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail380
  rxanchor91_done393:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    goto alt89_end389
  alt89_1395:
    nqp_rxmark rx86_bstack, rxquantr93_done397, rx86_pos, 0
  rxquantr93_loop396:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."unv"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    goto rxsubrule94_pass398
  rxsubrule94_back399:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
  rxsubrule94_pass398:
    rx86_cstack = rx86_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule94_back399
    push rx86_bstack, $I11
    push rx86_bstack, 0
    push rx86_bstack, rx86_pos
    elements $I11, rx86_cstack
    push rx86_bstack, $I11
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    nqp_rxpeek $I19, rx86_bstack, rxquantr93_done397
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr93_done397
    inc rx86_rep
  rxquantr93_done397:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor95_done400
    ne rx86_pos, rx86_eos, rx86_fail380
    eq rx86_pos, 0, rxanchor95_done400
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail380
  rxanchor95_done400:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail380
    goto alt89_end389
  alt89_end389:
    nqp_rxpeek $I19, rx86_bstack, rxquantr88_done388
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr88_done388
    inc rx86_rep
  rxquantr88_done388:
    rx86_cur."!cursor_pass"(rx86_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx86_cur)
  rx86_restart379:
    repr_get_attr_obj rx86_cstack, rx86_cur, rx86_curclass, "$!cstack"
  rx86_fail380:
    unless rx86_bstack, rx86_done378
    pop $I19, rx86_bstack
    if_null rx86_cstack, rx86_cstack_done383
    unless rx86_cstack, rx86_cstack_done383
    dec $I19
    set $P11, rx86_cstack[$I19]
  rx86_cstack_done383:
    pop rx86_rep, rx86_bstack
    pop rx86_pos, rx86_bstack
    pop $I19, rx86_bstack
    lt rx86_pos, -1, rx86_done378
    lt rx86_pos, 0, rx86_fail380
    eq $I19, 0, rx86_fail380
    nqp_islist $I20, rx86_cstack
    unless $I20, rx86_jump381
    elements $I18, rx86_bstack
    le $I18, 0, rx86_cut382
    dec $I18
    set $I18, rx86_bstack[$I18]
  rx86_cut382:
    assign rx86_cstack, $I18
  rx86_jump381:
    jump $I19
  rx86_done378:
    rx86_cur."!cursor_fail"()
    .return (rx86_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346277629.325_caps" :subid("cuid_memo_7_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346277629.325_nfa" :subid("cuid_memo_8_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "unv"
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 6
    push $P5003, $P5015
    box $P5016, 1
    push $P5003, $P5016
    box $P5017, 0
    push $P5003, $P5017
    box $P5018, 0
    push $P5003, $P5018
    push $P5001, $P5003
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 3
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 4
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "MARKER"
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 1
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "ws"
    push $P5039, $P5041
    box $P5042, 8
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 8
    push $P5043, $P5044
    box $P5045, "MARKER"
    push $P5043, $P5045
    box $P5046, 9
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 0
    push $P5047, $P5048
    box $P5049, 0
    push $P5047, $P5049
    box $P5050, 0
    push $P5047, $P5050
    push $P5001, $P5047
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346277629.325_alt_nfa__1_1346277631.525" :subid("cuid_memo_9_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, $P5006
    box $P5007, 1
    push $P5004, $P5007
    box $P5008, 1
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 2
    push $P5004, $P5010
    push $P5002, $P5004
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 3
    push $P5011, $P5014
    push $P5002, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ws"
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "MARKER"
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5027, 'ResizablePMCArray'
    new $P5028, 'ResizablePMCArray'
    push $P5027, $P5028
    new $P5029, 'ResizablePMCArray'
    box $P5030, 8
    push $P5029, $P5030
    box $P5031, "unv"
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    box $P5033, 1
    push $P5029, $P5033
    box $P5034, 0
    push $P5029, $P5034
    box $P5035, 2
    push $P5029, $P5035
    push $P5027, $P5029
    new $P5036, 'ResizablePMCArray'
    box $P5037, 1
    push $P5036, $P5037
    box $P5038, 0
    push $P5036, $P5038
    box $P5039, 3
    push $P5036, $P5039
    push $P5027, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 4
    push $P5040, $P5043
    push $P5027, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 8
    push $P5044, $P5045
    box $P5046, "MARKER"
    push $P5044, $P5046
    box $P5047, 5
    push $P5044, $P5047
    push $P5027, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 0
    push $P5048, $P5049
    box $P5050, 0
    push $P5048, $P5050
    box $P5051, 0
    push $P5048, $P5051
    push $P5027, $P5048
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_38_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 641
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart404
    gt rx97_pos, rx97_eos, rx97_fail405
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done411
    goto rxscan98_scan410
  rxscan98_loop409:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail405
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan410:
    nqp_rxmark rx97_bstack, rxscan98_loop409, rx97_pos, 0
  rxscan98_done411:
  alt99_0413:
    nqp_rxmark rx97_bstack, alt99_1414, rx97_pos, 0
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail405
    goto alt99_end412
  alt99_1414:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."ww"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    ge $I11, 0, rx97_fail405
    nqp_rxmark rx97_bstack, rxquantr100_done416, rx97_pos, 0
  rxquantr100_loop415:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt101_0418
    nqp_push_label $P11, alt101_1421
    nqp_push_label $P11, alt101_2424
    nqp_push_label $P11, alt101_3427
    nqp_rxmark rx97_bstack, alt101_end417, -1, 0
    rx97_cur."!alt"(rx97_pos, "alt_nfa__2_1346277631.556", $P11)
    goto rx97_fail405
  alt101_0418:
    nqp_rxmark rx97_bstack, rxquantr102_done420, -1, 0
  rxquantr102_loop419:
    ge rx97_pos, rx97_eos, rx97_fail405
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx97_fail405
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr102_done420
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr102_done420
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr102_done420, rx97_pos, rx97_rep
    goto rxquantr102_loop419
  rxquantr102_done420:
    goto alt101_end417
  alt101_1421:
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail405
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:"#", rx97_fail405
    add rx97_pos, 1
    nqp_rxmark rx97_bstack, rxquantr103_done423, rx97_pos, 0
  rxquantr103_loop422:
    ge rx97_pos, rx97_eos, rx97_fail405
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, rx97_pos
    if $I11, rx97_fail405
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr103_done423
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr103_done423
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr103_done423, rx97_pos, rx97_rep
    goto rxquantr103_loop422
  rxquantr103_done423:
    goto alt101_end417
  alt101_2424:
    eq rx97_pos, 0, rxanchor104_done425
    ge rx97_pos, rx97_eos, rx97_fail405
    sub $I11, rx97_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, $I11
    unless $I11, rx97_fail405
  rxanchor104_done425:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail405
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    goto alt101_end417
  alt101_3427:
    nqp_rxmark rx97_bstack, rxquantr106_done429, -1, 0
  rxquantr106_loop428:
    ge rx97_pos, rx97_eos, rx97_fail405
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx97_fail405
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr106_done429
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr106_done429
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr106_done429, rx97_pos, rx97_rep
    goto rxquantr106_loop428
  rxquantr106_done429:
    goto alt101_end417
  alt101_end417:
    nqp_rxpeek $I19, rx97_bstack, rxquantr100_done416
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr100_done416
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr100_done416, rx97_pos, rx97_rep
    goto rxquantr100_loop415
  rxquantr100_done416:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail405
  alt99_end412:
    rx97_cur."!cursor_pass"(rx97_pos, "ws", 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart404:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail405:
    unless rx97_bstack, rx97_done403
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done408
    unless rx97_cstack, rx97_cstack_done408
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done408:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done403
    lt rx97_pos, 0, rx97_fail405
    eq $I19, 0, rx97_fail405
    nqp_islist $I20, rx97_cstack
    unless $I20, rx97_jump406
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut407
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut407:
    assign rx97_cstack, $I18
  rx97_jump406:
    jump $I19
  rx97_done403:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1346277629.325_caps" :subid("cuid_memo_10_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1346277629.325_alt_nfa__2_1346277631.556" :subid("cuid_memo_11_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 1
    push $P5012, $P5013
    box $P5014, 0
    push $P5012, $P5014
    box $P5015, 2
    push $P5012, $P5015
    box $P5016, 1
    push $P5012, $P5016
    box $P5017, 0
    push $P5012, $P5017
    box $P5018, 0
    push $P5012, $P5018
    push $P5002, $P5012
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 35
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 5
    push $P5025, $P5026
    box $P5027, 4096
    push $P5025, $P5027
    box $P5028, 2
    push $P5025, $P5028
    box $P5029, 1
    push $P5025, $P5029
    box $P5030, 0
    push $P5025, $P5030
    box $P5031, 0
    push $P5025, $P5031
    push $P5019, $P5025
    push $P5001, $P5019
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 1
    push $P5034, $P5035
    box $P5036, 0
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "pod_comment"
    push $P5038, $P5040
    box $P5041, 0
    push $P5038, $P5041
    push $P5032, $P5038
    push $P5001, $P5032
    new $P5042, 'ResizablePMCArray'
    new $P5043, 'ResizablePMCArray'
    push $P5042, $P5043
    new $P5044, 'ResizablePMCArray'
    box $P5045, 1
    push $P5044, $P5045
    box $P5046, 0
    push $P5044, $P5046
    box $P5047, 2
    push $P5044, $P5047
    push $P5042, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 6
    push $P5048, $P5049
    box $P5050, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5048, $P5050
    box $P5051, 3
    push $P5048, $P5051
    push $P5042, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    box $P5056, 1
    push $P5052, $P5056
    box $P5057, 0
    push $P5052, $P5057
    box $P5058, 0
    push $P5052, $P5058
    push $P5042, $P5052
    push $P5001, $P5042
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_40_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 652
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1346277629.325' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx107_tgt
    .local int rx107_pos
    .local int rx107_off
    .local int rx107_eos
    .local int rx107_rep
    .local pmc rx107_cur
    .local pmc rx107_curclass
    .local pmc rx107_bstack
    .local pmc rx107_cstack
    (rx107_cur, rx107_tgt, rx107_pos, rx107_curclass, rx107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx107_cur
    length rx107_eos, rx107_tgt
    eq $I19, 1, rx107_restart432
    gt rx107_pos, rx107_eos, rx107_fail433
    repr_get_attr_int $I11, self, rx107_curclass, "$!from"
    ne $I11, -1, rxscan108_done439
    goto rxscan108_scan438
  rxscan108_loop437:
    inc rx107_pos
    gt rx107_pos, rx107_eos, rx107_fail433
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!from", rx107_pos
  rxscan108_scan438:
    nqp_rxmark rx107_bstack, rxscan108_loop437, rx107_pos, 0
  rxscan108_done439:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt109_0441
    nqp_push_label $P11, alt109_1459
    nqp_push_label $P11, alt109_2464
    nqp_rxmark rx107_bstack, alt109_end440, -1, 0
    rx107_cur."!alt"(rx107_pos, "alt_nfa__4_1346277631.593", $P11)
    goto rx107_fail433
  alt109_0441:
    eq rx107_pos, 0, rxanchor110_done442
    ge rx107_pos, rx107_eos, rx107_fail433
    sub $I11, rx107_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, $I11
    unless $I11, rx107_fail433
  rxanchor110_done442:
    .const 'Sub' $P5001 = 'cuid_39_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail433
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail433
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    goto alt109_end440
  alt109_1459:
    nqp_rxmark rx107_bstack, rxquantr116_done461, rx107_pos, 0
  rxquantr116_loop460:
    ge rx107_pos, rx107_eos, rx107_fail433
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail433
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr116_done461
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr116_done461
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr116_done461, rx107_pos, rx107_rep
    goto rxquantr116_loop460
  rxquantr116_done461:
    add $I11, rx107_pos, 1
    gt $I11, rx107_eos, rx107_fail433
    substr $S10, rx107_tgt, rx107_pos, 1
    ne $S10, ucs4:"#", rx107_fail433
    add rx107_pos, 1
    nqp_rxmark rx107_bstack, rxquantr117_done463, rx107_pos, 0
  rxquantr117_loop462:
    ge rx107_pos, rx107_eos, rx107_fail433
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, rx107_pos
    if $I11, rx107_fail433
    add rx107_pos, 1
    nqp_rxpeek $I19, rx107_bstack, rxquantr117_done463
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr117_done463
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr117_done463, rx107_pos, rx107_rep
    goto rxquantr117_loop462
  rxquantr117_done463:
    goto alt109_end440
  alt109_2464:
    nqp_rxmark rx107_bstack, rxquantr118_done466, -1, 0
  rxquantr118_loop465:
    ge rx107_pos, rx107_eos, rx107_fail433
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail433
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr118_done466
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr118_done466
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr118_done466, rx107_pos, rx107_rep
    goto rxquantr118_loop465
  rxquantr118_done466:
    goto alt109_end440
  alt109_end440:
    nqp_rxcommit rx107_bstack, alt109_end440
    rx107_cur."!cursor_pass"(rx107_pos, "unv", 'backtrack'=>1)
    .return (rx107_cur)
  rx107_restart432:
    repr_get_attr_obj rx107_cstack, rx107_cur, rx107_curclass, "$!cstack"
  rx107_fail433:
    unless rx107_bstack, rx107_done431
    pop $I19, rx107_bstack
    if_null rx107_cstack, rx107_cstack_done436
    unless rx107_cstack, rx107_cstack_done436
    dec $I19
    set $P11, rx107_cstack[$I19]
  rx107_cstack_done436:
    pop rx107_rep, rx107_bstack
    pop rx107_pos, rx107_bstack
    pop $I19, rx107_bstack
    lt rx107_pos, -1, rx107_done431
    lt rx107_pos, 0, rx107_fail433
    eq $I19, 0, rx107_fail433
    nqp_islist $I20, rx107_cstack
    unless $I20, rx107_jump434
    elements $I18, rx107_bstack
    le $I18, 0, rx107_cut435
    dec $I18
    set $I18, rx107_bstack[$I18]
  rx107_cut435:
    assign rx107_cstack, $I18
  rx107_jump434:
    jump $I19
  rx107_done431:
    rx107_cur."!cursor_fail"()
    .return (rx107_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346277629.325_caps" :subid("cuid_memo_12_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346277629.325_nfa" :subid("cuid_memo_13_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5008
    box $P5009, 1
    push $P5003, $P5009
    box $P5010, 1
    push $P5003, $P5010
    box $P5011, 0
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 8
    push $P5003, $P5015
    push $P5001, $P5003
    new $P5016, 'ResizablePMCArray'
    box $P5017, 6
    push $P5016, $P5017
    box $P5018, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5016, $P5018
    box $P5019, 2
    push $P5016, $P5019
    box $P5020, 1
    push $P5016, $P5020
    box $P5021, 0
    push $P5016, $P5021
    box $P5022, 4
    push $P5016, $P5022
    push $P5001, $P5016
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 61
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 8192
    push $P5031, $P5033
    box $P5034, 3
    push $P5031, $P5034
    box $P5035, 2
    push $P5031, $P5035
    box $P5036, 92
    push $P5031, $P5036
    box $P5037, 3
    push $P5031, $P5037
    push $P5001, $P5031
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 35
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 5
    push $P5042, $P5043
    box $P5044, 4096
    push $P5042, $P5044
    box $P5045, 7
    push $P5042, $P5045
    box $P5046, 1
    push $P5042, $P5046
    box $P5047, 0
    push $P5042, $P5047
    box $P5048, 0
    push $P5042, $P5048
    push $P5001, $P5042
    new $P5049, 'ResizablePMCArray'
    box $P5050, 6
    push $P5049, $P5050
    box $P5051, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5049, $P5051
    box $P5052, 9
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 1
    push $P5053, $P5054
    box $P5055, 0
    push $P5053, $P5055
    box $P5056, 8
    push $P5053, $P5056
    box $P5057, 1
    push $P5053, $P5057
    box $P5058, 0
    push $P5053, $P5058
    box $P5059, 0
    push $P5053, $P5059
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346277629.325_alt_nfa__4_1346277631.593" :subid("cuid_memo_14_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5008, $P5010
    box $P5011, 2
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 4
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 61
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 8192
    push $P5023, $P5025
    box $P5026, 3
    push $P5023, $P5026
    box $P5027, 2
    push $P5023, $P5027
    box $P5028, 92
    push $P5023, $P5028
    box $P5029, 3
    push $P5023, $P5029
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5030, 'ResizablePMCArray'
    new $P5031, 'ResizablePMCArray'
    push $P5030, $P5031
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5032, $P5034
    box $P5035, 1
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 2
    push $P5032, $P5038
    push $P5030, $P5032
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 35
    push $P5039, $P5041
    box $P5042, 3
    push $P5039, $P5042
    push $P5030, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 5
    push $P5043, $P5044
    box $P5045, 4096
    push $P5043, $P5045
    box $P5046, 3
    push $P5043, $P5046
    box $P5047, 1
    push $P5043, $P5047
    box $P5048, 0
    push $P5043, $P5048
    box $P5049, 0
    push $P5043, $P5049
    push $P5030, $P5043
    push $P5001, $P5030
    new $P5050, 'ResizablePMCArray'
    new $P5051, 'ResizablePMCArray'
    push $P5050, $P5051
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    push $P5050, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 6
    push $P5056, $P5057
    box $P5058, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5056, $P5058
    box $P5059, 3
    push $P5056, $P5059
    push $P5050, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 1
    push $P5060, $P5061
    box $P5062, 0
    push $P5060, $P5062
    box $P5063, 2
    push $P5060, $P5063
    box $P5064, 1
    push $P5060, $P5064
    box $P5065, 0
    push $P5060, $P5065
    box $P5066, 0
    push $P5060, $P5066
    push $P5050, $P5060
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1346277629.325") :anon :lex :outer("cuid_40_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx111_tgt
    .local int rx111_pos
    .local int rx111_off
    .local int rx111_eos
    .local int rx111_rep
    .local pmc rx111_cur
    .local pmc rx111_curclass
    .local pmc rx111_bstack
    .local pmc rx111_cstack
    (rx111_cur, rx111_tgt, rx111_pos, rx111_curclass, rx111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx111_cur
    length rx111_eos, rx111_tgt
    eq $I19, 1, rx111_restart445
    gt rx111_pos, rx111_eos, rx111_fail446
    repr_get_attr_int $I11, self, rx111_curclass, "$!from"
    ne $I11, -1, rxscan112_done452
    goto rxscan112_scan451
  rxscan112_loop450:
    inc rx111_pos
    gt rx111_pos, rx111_eos, rx111_fail446
    repr_bind_attr_int rx111_cur, rx111_curclass, "$!from", rx111_pos
  rxscan112_scan451:
    nqp_rxmark rx111_bstack, rxscan112_loop450, rx111_pos, 0
  rxscan112_done452:
    nqp_rxmark rx111_bstack, rxquantr113_done454, rx111_pos, 0
  rxquantr113_loop453:
    ge rx111_pos, rx111_eos, rx111_fail446
    substr $S11, rx111_tgt, rx111_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx111_fail446
    inc rx111_pos
    nqp_rxpeek $I19, rx111_bstack, rxquantr113_done454
    inc $I19
    inc $I19
    set rx111_rep, rx111_bstack[$I19]
    nqp_rxcommit rx111_bstack, rxquantr113_done454
    inc rx111_rep
    nqp_rxmark rx111_bstack, rxquantr113_done454, rx111_pos, rx111_rep
    goto rxquantr113_loop453
  rxquantr113_done454:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail446
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"=", rx111_fail446
    add rx111_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt114_0456
    nqp_push_label $P11, alt114_1457
    nqp_rxmark rx111_bstack, alt114_end455, -1, 0
    rx111_cur."!alt"(rx111_pos, "alt_nfa__3_1346277631.575", $P11)
    goto rx111_fail446
  alt114_0456:
    ge rx111_pos, rx111_eos, rx111_fail446
    is_cclass $I11, .CCLASS_WORD, rx111_tgt, rx111_pos
    unless $I11, rx111_fail446
    add rx111_pos, 1
    goto alt114_end455
  alt114_1457:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail446
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"\\", rx111_fail446
    add rx111_pos, 1
    goto alt114_end455
  alt114_end455:
    nqp_rxcommit rx111_bstack, alt114_end455
    rx111_cur."!cursor_pass"(rx111_pos, 'backtrack'=>1)
    .return (rx111_cur)
  rx111_restart445:
    repr_get_attr_obj rx111_cstack, rx111_cur, rx111_curclass, "$!cstack"
  rx111_fail446:
    unless rx111_bstack, rx111_done444
    pop $I19, rx111_bstack
    if_null rx111_cstack, rx111_cstack_done449
    unless rx111_cstack, rx111_cstack_done449
    dec $I19
    set $P11, rx111_cstack[$I19]
  rx111_cstack_done449:
    pop rx111_rep, rx111_bstack
    pop rx111_pos, rx111_bstack
    pop $I19, rx111_bstack
    lt rx111_pos, -1, rx111_done444
    lt rx111_pos, 0, rx111_fail446
    eq $I19, 0, rx111_fail446
    nqp_islist $I20, rx111_cstack
    unless $I20, rx111_jump447
    elements $I18, rx111_bstack
    le $I18, 0, rx111_cut448
    dec $I18
    set $I18, rx111_bstack[$I18]
  rx111_cut448:
    assign rx111_cstack, $I18
  rx111_jump447:
    jump $I19
  rx111_done444:
    rx111_cur."!cursor_fail"()
    .return (rx111_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346277629.325_caps" :subid("cuid_memo_15_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346277629.325_nfa" :subid("cuid_memo_16_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 92
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346277629.325_alt_nfa__3_1346277631.575" :subid("cuid_memo_17_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 4
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 92
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_42_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 661
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1346277629.325' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_curclass
    .local pmc rx119_bstack
    .local pmc rx119_cstack
    (rx119_cur, rx119_tgt, rx119_pos, rx119_curclass, rx119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx119_cur
    length rx119_eos, rx119_tgt
    eq $I19, 1, rx119_restart469
    gt rx119_pos, rx119_eos, rx119_fail470
    repr_get_attr_int $I11, self, rx119_curclass, "$!from"
    ne $I11, -1, rxscan120_done476
    goto rxscan120_scan475
  rxscan120_loop474:
    inc rx119_pos
    gt rx119_pos, rx119_eos, rx119_fail470
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!from", rx119_pos
  rxscan120_scan475:
    nqp_rxmark rx119_bstack, rxscan120_loop474, rx119_pos, 0
  rxscan120_done476:
    eq rx119_pos, 0, rxanchor121_done477
    ge rx119_pos, rx119_eos, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail470
  rxanchor121_done477:
    nqp_rxmark rx119_bstack, rxquantr122_done479, rx119_pos, 0
  rxquantr122_loop478:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr122_done479
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr122_done479
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr122_done479, rx119_pos, rx119_rep
    goto rxquantr122_loop478
  rxquantr122_done479:
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"=", rx119_fail470
    add rx119_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt123_0481
    nqp_push_label $P11, alt123_1500
    nqp_push_label $P11, alt123_2519
    nqp_push_label $P11, alt123_3541
    nqp_push_label $P11, alt123_4566
    nqp_rxmark rx119_bstack, alt123_end480, -1, 0
    rx119_cur."!alt"(rx119_pos, "alt_nfa__6_1346277631.81", $P11)
    goto rx119_fail470
  alt123_0481:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail470
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr124_done483, -1, 0
  rxquantr124_loop482:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr124_done483
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr124_done483
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr124_done483, rx119_pos, rx119_rep
    goto rxquantr124_loop482
  rxquantr124_done483:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail470
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
  alt126_0486:
    nqp_rxmark rx119_bstack, alt126_1497, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf127_loop487, rx119_pos, rx119_rep
    goto rxquantf127_done488
  rxquantf127_loop487:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf127_loop487, rx119_pos, rx119_rep
  rxquantf127_done488:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr128_done491, rx119_pos, 0
  rxquantr128_loop490:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr128_done491
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr128_done491
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr128_done491, rx119_pos, rx119_rep
    goto rxquantr128_loop490
  rxquantr128_done491:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail470
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr129_done493, -1, 0
  rxquantr129_loop492:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr129_done493
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr129_done493
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr129_done493, rx119_pos, rx119_rep
    goto rxquantr129_loop492
  rxquantr129_done493:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail470
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
    nqp_rxmark rx119_bstack, rxquantr131_done496, rx119_pos, 0
  rxquantr131_loop495:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr131_done496
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr131_done496
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr131_done496, rx119_pos, rx119_rep
    goto rxquantr131_loop495
  rxquantr131_done496:
    goto alt126_end485
  alt126_1497:
    nqp_rxmark rx119_bstack, rxquantr132_done499, rx119_pos, 0
  rxquantr132_loop498:
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr132_done499
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr132_done499
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr132_done499, rx119_pos, rx119_rep
    goto rxquantr132_loop498
  rxquantr132_done499:
  alt126_end485:
    goto alt123_end480
  alt123_1500:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail470
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr133_done502, -1, 0
  rxquantr133_loop501:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr133_done502
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr133_done502
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr133_done502, rx119_pos, rx119_rep
    goto rxquantr133_loop501
  rxquantr133_done502:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    nqp_rxmark rx119_bstack, rxsubrule134_pass503, -1, 0
  rxsubrule134_pass503:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_0505:
    nqp_rxmark rx119_bstack, alt135_1517, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf136_loop506, rx119_pos, rx119_rep
    goto rxquantf136_done507
  rxquantf136_loop506:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf136_loop506, rx119_pos, rx119_rep
  rxquantf136_done507:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr137_done510, rx119_pos, 0
  rxquantr137_loop509:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr137_done510
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr137_done510
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr137_done510, rx119_pos, rx119_rep
    goto rxquantr137_loop509
  rxquantr137_done510:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail470
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr138_done512, -1, 0
  rxquantr138_loop511:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr138_done512
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr138_done512
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr138_done512, rx119_pos, rx119_rep
    goto rxquantr138_loop511
  rxquantr138_done512:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
    nqp_rxmark rx119_bstack, rxquantr141_done516, rx119_pos, 0
  rxquantr141_loop515:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr141_done516
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr141_done516
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr141_done516, rx119_pos, rx119_rep
    goto rxquantr141_loop515
  rxquantr141_done516:
    goto alt135_end504
  alt135_1517:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_end504:
    goto alt123_end480
  alt123_2519:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail470
    add rx119_pos, 5
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
    nqp_rxmark rx119_bstack, rxquantr144_done522, rx119_pos, 0
  rxquantr144_loop521:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr144_done522
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr144_done522
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr144_done522, rx119_pos, rx119_rep
    goto rxquantr144_loop521
  rxquantr144_done522:
  alt145_0524:
    nqp_rxmark rx119_bstack, alt145_1526, rx119_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rxanchor146_done525
    ne rx119_pos, rx119_eos, rx119_fail470
    eq rx119_pos, 0, rxanchor146_done525
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    if $I11, rx119_fail470
  rxanchor146_done525:
    goto alt145_end523
  alt145_1526:
    nqp_rxmark rx119_bstack, alt145_2527, rx119_pos, 0
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"#", rx119_fail470
    add rx119_pos, 1
    goto alt145_end523
  alt145_2527:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt145_end523:
  alt148_0530:
    nqp_rxmark rx119_bstack, alt148_1539, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf149_loop531, rx119_pos, rx119_rep
    goto rxquantf149_done532
  rxquantf149_loop531:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf149_loop531, rx119_pos, rx119_rep
  rxquantf149_done532:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr150_done535, rx119_pos, 0
  rxquantr150_loop534:
    ge rx119_pos, rx119_eos, rx119_fail470
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail470
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr150_done535
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr150_done535
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr150_done535, rx119_pos, rx119_rep
    goto rxquantr150_loop534
  rxquantr150_done535:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail470
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail470
    add rx119_pos, 4
    le rx119_pos, 0, rx119_fail470
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail470
    nqp_rxmark rx119_bstack, rxquantr152_done538, rx119_pos, 0
  rxquantr152_loop537:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr152_done538
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr152_done538
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr152_done538, rx119_pos, rx119_rep
    goto rxquantr152_loop537
  rxquantr152_done538:
    goto alt148_end529
  alt148_1539:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt148_end529:
    goto alt123_end480
  alt123_3541:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    nqp_rxmark rx119_bstack, rxsubrule154_pass542, -1, 0
  rxsubrule154_pass542:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf155_loop543, rx119_pos, rx119_rep
    goto rxquantf155_done544
  rxquantf155_loop543:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail470
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf155_loop543, rx119_pos, rx119_rep
  rxquantf155_done544:
    eq rx119_pos, 0, rxanchor156_done546
    ge rx119_pos, rx119_eos, rx119_fail470
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail470
  rxanchor156_done546:
    .const 'Sub' $P5001 = 'cuid_41_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    goto alt123_end480
  alt123_4566:
  alt164_0568:
    nqp_rxmark rx119_bstack, alt164_1569, rx119_pos, 0
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_WHITESPACE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail470
    add rx119_pos, 1
    goto alt164_end567
  alt164_1569:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail470
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt164_end567:
    nqp_rxmark rx119_bstack, rxquantr166_done572, rx119_pos, 0
  rxquantr166_loop571:
    ge rx119_pos, rx119_eos, rx119_fail470
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail470
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr166_done572
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr166_done572
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr166_done572, rx119_pos, rx119_rep
    goto rxquantr166_loop571
  rxquantr166_done572:
    goto alt123_end480
  alt123_end480:
    nqp_rxcommit rx119_bstack, alt123_end480
    rx119_cur."!cursor_pass"(rx119_pos, "pod_comment", 'backtrack'=>1)
    .return (rx119_cur)
  rx119_restart469:
    repr_get_attr_obj rx119_cstack, rx119_cur, rx119_curclass, "$!cstack"
  rx119_fail470:
    unless rx119_bstack, rx119_done468
    pop $I19, rx119_bstack
    if_null rx119_cstack, rx119_cstack_done473
    unless rx119_cstack, rx119_cstack_done473
    dec $I19
    set $P11, rx119_cstack[$I19]
  rx119_cstack_done473:
    pop rx119_rep, rx119_bstack
    pop rx119_pos, rx119_bstack
    pop $I19, rx119_bstack
    lt rx119_pos, -1, rx119_done468
    lt rx119_pos, 0, rx119_fail470
    eq $I19, 0, rx119_fail470
    nqp_islist $I20, rx119_cstack
    unless $I20, rx119_jump471
    elements $I18, rx119_bstack
    le $I18, 0, rx119_cut472
    dec $I18
    set $I18, rx119_bstack[$I18]
  rx119_cut472:
    assign rx119_cstack, $I18
  rx119_jump471:
    jump $I19
  rx119_done468:
    rx119_cur."!cursor_fail"()
    .return (rx119_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346277629.325_caps" :subid("cuid_memo_18_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346277629.325_nfa" :subid("cuid_memo_19_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 98
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    box $P5022, 2
    push $P5018, $P5022
    box $P5023, 98
    push $P5018, $P5023
    box $P5024, 17
    push $P5018, $P5024
    box $P5025, 2
    push $P5018, $P5025
    box $P5026, 98
    push $P5018, $P5026
    box $P5027, 26
    push $P5018, $P5027
    box $P5028, 8
    push $P5018, $P5028
    box $P5029, "identifier"
    push $P5018, $P5029
    box $P5030, 33
    push $P5018, $P5030
    box $P5031, 0
    push $P5018, $P5031
    box $P5032, 0
    push $P5018, $P5032
    box $P5033, 0
    push $P5018, $P5033
    push $P5001, $P5018
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 101
    push $P5034, $P5036
    box $P5037, 6
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 103
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 8
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 110
    push $P5046, $P5048
    box $P5049, 9
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 1
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 10
    push $P5050, $P5053
    push $P5001, $P5050
    new $P5054, 'ResizablePMCArray'
    box $P5055, 6
    push $P5054, $P5055
    box $P5056, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5054, $P5056
    box $P5057, 11
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 1
    push $P5058, $P5059
    box $P5060, 0
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 1
    push $P5058, $P5062
    box $P5063, 0
    push $P5058, $P5063
    box $P5064, 12
    push $P5058, $P5064
    box $P5065, 2
    push $P5058, $P5065
    box $P5066, 69
    push $P5058, $P5066
    box $P5067, 13
    push $P5058, $P5067
    push $P5001, $P5058
    new $P5068, 'ResizablePMCArray'
    push $P5001, $P5068
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 78
    push $P5069, $P5071
    box $P5072, 14
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 68
    push $P5073, $P5075
    box $P5076, 15
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 1
    push $P5077, $P5078
    box $P5079, 0
    push $P5077, $P5079
    box $P5080, 16
    push $P5077, $P5080
    push $P5001, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 0
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 0
    push $P5081, $P5084
    push $P5001, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 2
    push $P5085, $P5086
    box $P5087, 101
    push $P5085, $P5087
    box $P5088, 18
    push $P5085, $P5088
    push $P5001, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 2
    push $P5089, $P5090
    box $P5091, 103
    push $P5089, $P5091
    box $P5092, 19
    push $P5089, $P5092
    push $P5001, $P5089
    new $P5093, 'ResizablePMCArray'
    box $P5094, 2
    push $P5093, $P5094
    box $P5095, 105
    push $P5093, $P5095
    box $P5096, 20
    push $P5093, $P5096
    push $P5001, $P5093
    new $P5097, 'ResizablePMCArray'
    box $P5098, 2
    push $P5097, $P5098
    box $P5099, 110
    push $P5097, $P5099
    box $P5100, 21
    push $P5097, $P5100
    push $P5001, $P5097
    new $P5101, 'ResizablePMCArray'
    box $P5102, 1
    push $P5101, $P5102
    box $P5103, 0
    push $P5101, $P5103
    box $P5104, 22
    push $P5101, $P5104
    push $P5001, $P5101
    new $P5105, 'ResizablePMCArray'
    box $P5106, 6
    push $P5105, $P5106
    box $P5107, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5105, $P5107
    box $P5108, 23
    push $P5105, $P5108
    push $P5001, $P5105
    new $P5109, 'ResizablePMCArray'
    box $P5110, 1
    push $P5109, $P5110
    box $P5111, 0
    push $P5109, $P5111
    box $P5112, 22
    push $P5109, $P5112
    box $P5113, 1
    push $P5109, $P5113
    box $P5114, 0
    push $P5109, $P5114
    box $P5115, 24
    push $P5109, $P5115
    box $P5116, 8
    push $P5109, $P5116
    box $P5117, "identifier"
    push $P5109, $P5117
    box $P5118, 25
    push $P5109, $P5118
    push $P5001, $P5109
    new $P5119, 'ResizablePMCArray'
    push $P5001, $P5119
    new $P5120, 'ResizablePMCArray'
    box $P5121, 0
    push $P5120, $P5121
    box $P5122, 0
    push $P5120, $P5122
    box $P5123, 0
    push $P5120, $P5123
    push $P5001, $P5120
    new $P5124, 'ResizablePMCArray'
    box $P5125, 2
    push $P5124, $P5125
    box $P5126, 101
    push $P5124, $P5126
    box $P5127, 27
    push $P5124, $P5127
    push $P5001, $P5124
    new $P5128, 'ResizablePMCArray'
    box $P5129, 2
    push $P5128, $P5129
    box $P5130, 103
    push $P5128, $P5130
    box $P5131, 28
    push $P5128, $P5131
    push $P5001, $P5128
    new $P5132, 'ResizablePMCArray'
    box $P5133, 2
    push $P5132, $P5133
    box $P5134, 105
    push $P5132, $P5134
    box $P5135, 29
    push $P5132, $P5135
    push $P5001, $P5132
    new $P5136, 'ResizablePMCArray'
    box $P5137, 2
    push $P5136, $P5137
    box $P5138, 110
    push $P5136, $P5138
    box $P5139, 30
    push $P5136, $P5139
    push $P5001, $P5136
    new $P5140, 'ResizablePMCArray'
    box $P5141, 1
    push $P5140, $P5141
    box $P5142, 0
    push $P5140, $P5142
    box $P5143, 31
    push $P5140, $P5143
    push $P5001, $P5140
    new $P5144, 'ResizablePMCArray'
    box $P5145, 6
    push $P5144, $P5145
    box $P5146, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5144, $P5146
    box $P5147, 31
    push $P5144, $P5147
    box $P5148, 1
    push $P5144, $P5148
    box $P5149, 0
    push $P5144, $P5149
    box $P5150, 32
    push $P5144, $P5150
    push $P5001, $P5144
    new $P5151, 'ResizablePMCArray'
    box $P5152, 0
    push $P5151, $P5152
    box $P5153, 0
    push $P5151, $P5153
    box $P5154, 0
    push $P5151, $P5154
    push $P5001, $P5151
    new $P5155, 'ResizablePMCArray'
    box $P5156, 4
    push $P5155, $P5156
    box $P5157, 65535
    push $P5155, $P5157
    box $P5158, 33
    push $P5155, $P5158
    box $P5159, 1
    push $P5155, $P5159
    box $P5160, 0
    push $P5155, $P5160
    box $P5161, 34
    push $P5155, $P5161
    push $P5001, $P5155
    new $P5162, 'ResizablePMCArray'
    box $P5163, 1
    push $P5162, $P5163
    box $P5164, 0
    push $P5162, $P5164
    box $P5165, 35
    push $P5162, $P5165
    push $P5001, $P5162
    new $P5166, 'ResizablePMCArray'
    box $P5167, 6
    push $P5166, $P5167
    box $P5168, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5166, $P5168
    box $P5169, 35
    push $P5166, $P5169
    box $P5170, 1
    push $P5166, $P5170
    box $P5171, 0
    push $P5166, $P5171
    box $P5172, 37
    push $P5166, $P5172
    push $P5001, $P5166
    new $P5173, 'ResizablePMCArray'
    box $P5174, 0
    push $P5173, $P5174
    box $P5175, 0
    push $P5173, $P5175
    box $P5176, 0
    push $P5173, $P5176
    push $P5001, $P5173
    new $P5177, 'ResizablePMCArray'
    box $P5178, 2
    push $P5177, $P5178
    box $P5179, 61
    push $P5177, $P5179
    box $P5180, 38
    push $P5177, $P5180
    box $P5181, 4
    push $P5177, $P5181
    box $P5182, 4096
    push $P5177, $P5182
    box $P5183, 36
    push $P5177, $P5183
    push $P5001, $P5177
    new $P5184, 'ResizablePMCArray'
    box $P5185, 2
    push $P5184, $P5185
    box $P5186, 99
    push $P5184, $P5186
    box $P5187, 39
    push $P5184, $P5187
    box $P5188, 1
    push $P5184, $P5188
    box $P5189, 0
    push $P5184, $P5189
    box $P5190, 36
    push $P5184, $P5190
    push $P5001, $P5184
    new $P5191, 'ResizablePMCArray'
    box $P5192, 2
    push $P5191, $P5192
    box $P5193, 117
    push $P5191, $P5193
    box $P5194, 40
    push $P5191, $P5194
    push $P5001, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 2
    push $P5195, $P5196
    box $P5197, 116
    push $P5195, $P5197
    box $P5198, 41
    push $P5195, $P5198
    push $P5001, $P5195
    new $P5199, 'ResizablePMCArray'
    box $P5200, 1
    push $P5199, $P5200
    box $P5201, 0
    push $P5199, $P5201
    box $P5202, 42
    push $P5199, $P5202
    push $P5001, $P5199
    new $P5203, 'ResizablePMCArray'
    box $P5204, 8
    push $P5203, $P5204
    box $P5205, "panic"
    push $P5203, $P5205
    box $P5206, 36
    push $P5203, $P5206
    push $P5001, $P5203
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346277629.325_alt_nfa__6_1346277631.81" :subid("cuid_memo_20_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 98
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 105
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 110
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 1
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 7
    push $P5024, $P5027
    push $P5002, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 6
    push $P5028, $P5029
    box $P5030, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5028, $P5030
    box $P5031, 8
    push $P5028, $P5031
    push $P5002, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 9
    push $P5032, $P5038
    box $P5039, 2
    push $P5032, $P5039
    box $P5040, 69
    push $P5032, $P5040
    box $P5041, 10
    push $P5032, $P5041
    push $P5002, $P5032
    new $P5042, 'ResizablePMCArray'
    push $P5002, $P5042
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 78
    push $P5043, $P5045
    box $P5046, 11
    push $P5043, $P5046
    push $P5002, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 68
    push $P5047, $P5049
    box $P5050, 12
    push $P5047, $P5050
    push $P5002, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 13
    push $P5051, $P5054
    push $P5002, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 0
    push $P5055, $P5056
    box $P5057, 0
    push $P5055, $P5057
    box $P5058, 0
    push $P5055, $P5058
    push $P5002, $P5055
    push $P5001, $P5002
    new $P5059, 'ResizablePMCArray'
    new $P5060, 'ResizablePMCArray'
    push $P5059, $P5060
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 98
    push $P5061, $P5063
    box $P5064, 2
    push $P5061, $P5064
    push $P5059, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 101
    push $P5065, $P5067
    box $P5068, 3
    push $P5065, $P5068
    push $P5059, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 103
    push $P5069, $P5071
    box $P5072, 4
    push $P5069, $P5072
    push $P5059, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 105
    push $P5073, $P5075
    box $P5076, 5
    push $P5073, $P5076
    push $P5059, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 110
    push $P5077, $P5079
    box $P5080, 6
    push $P5077, $P5080
    push $P5059, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 1
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 7
    push $P5081, $P5084
    push $P5059, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 6
    push $P5085, $P5086
    box $P5087, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5085, $P5087
    box $P5088, 8
    push $P5085, $P5088
    push $P5059, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 1
    push $P5089, $P5090
    box $P5091, 0
    push $P5089, $P5091
    box $P5092, 7
    push $P5089, $P5092
    box $P5093, 1
    push $P5089, $P5093
    box $P5094, 0
    push $P5089, $P5094
    box $P5095, 9
    push $P5089, $P5095
    box $P5096, 8
    push $P5089, $P5096
    box $P5097, "identifier"
    push $P5089, $P5097
    box $P5098, 10
    push $P5089, $P5098
    push $P5059, $P5089
    new $P5099, 'ResizablePMCArray'
    push $P5059, $P5099
    new $P5100, 'ResizablePMCArray'
    box $P5101, 0
    push $P5100, $P5101
    box $P5102, 0
    push $P5100, $P5102
    box $P5103, 0
    push $P5100, $P5103
    push $P5059, $P5100
    push $P5001, $P5059
    new $P5104, 'ResizablePMCArray'
    new $P5105, 'ResizablePMCArray'
    push $P5104, $P5105
    new $P5106, 'ResizablePMCArray'
    box $P5107, 2
    push $P5106, $P5107
    box $P5108, 98
    push $P5106, $P5108
    box $P5109, 2
    push $P5106, $P5109
    push $P5104, $P5106
    new $P5110, 'ResizablePMCArray'
    box $P5111, 2
    push $P5110, $P5111
    box $P5112, 101
    push $P5110, $P5112
    box $P5113, 3
    push $P5110, $P5113
    push $P5104, $P5110
    new $P5114, 'ResizablePMCArray'
    box $P5115, 2
    push $P5114, $P5115
    box $P5116, 103
    push $P5114, $P5116
    box $P5117, 4
    push $P5114, $P5117
    push $P5104, $P5114
    new $P5118, 'ResizablePMCArray'
    box $P5119, 2
    push $P5118, $P5119
    box $P5120, 105
    push $P5118, $P5120
    box $P5121, 5
    push $P5118, $P5121
    push $P5104, $P5118
    new $P5122, 'ResizablePMCArray'
    box $P5123, 2
    push $P5122, $P5123
    box $P5124, 110
    push $P5122, $P5124
    box $P5125, 6
    push $P5122, $P5125
    push $P5104, $P5122
    new $P5126, 'ResizablePMCArray'
    box $P5127, 1
    push $P5126, $P5127
    box $P5128, 0
    push $P5126, $P5128
    box $P5129, 7
    push $P5126, $P5129
    push $P5104, $P5126
    new $P5130, 'ResizablePMCArray'
    box $P5131, 6
    push $P5130, $P5131
    box $P5132, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5130, $P5132
    box $P5133, 7
    push $P5130, $P5133
    box $P5134, 1
    push $P5130, $P5134
    box $P5135, 0
    push $P5130, $P5135
    box $P5136, 8
    push $P5130, $P5136
    push $P5104, $P5130
    new $P5137, 'ResizablePMCArray'
    box $P5138, 0
    push $P5137, $P5138
    box $P5139, 0
    push $P5137, $P5139
    box $P5140, 0
    push $P5137, $P5140
    push $P5104, $P5137
    push $P5001, $P5104
    new $P5141, 'ResizablePMCArray'
    new $P5142, 'ResizablePMCArray'
    push $P5141, $P5142
    new $P5143, 'ResizablePMCArray'
    box $P5144, 8
    push $P5143, $P5144
    box $P5145, "identifier"
    push $P5143, $P5145
    box $P5146, 2
    push $P5143, $P5146
    push $P5141, $P5143
    new $P5147, 'ResizablePMCArray'
    box $P5148, 4
    push $P5147, $P5148
    box $P5149, 65535
    push $P5147, $P5149
    box $P5150, 2
    push $P5147, $P5150
    box $P5151, 1
    push $P5147, $P5151
    box $P5152, 0
    push $P5147, $P5152
    box $P5153, 3
    push $P5147, $P5153
    push $P5141, $P5147
    new $P5154, 'ResizablePMCArray'
    box $P5155, 1
    push $P5154, $P5155
    box $P5156, 0
    push $P5154, $P5156
    box $P5157, 4
    push $P5154, $P5157
    push $P5141, $P5154
    new $P5158, 'ResizablePMCArray'
    box $P5159, 6
    push $P5158, $P5159
    box $P5160, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5158, $P5160
    box $P5161, 4
    push $P5158, $P5161
    box $P5162, 1
    push $P5158, $P5162
    box $P5163, 0
    push $P5158, $P5163
    box $P5164, 6
    push $P5158, $P5164
    push $P5141, $P5158
    new $P5165, 'ResizablePMCArray'
    box $P5166, 0
    push $P5165, $P5166
    box $P5167, 0
    push $P5165, $P5167
    box $P5168, 0
    push $P5165, $P5168
    push $P5141, $P5165
    new $P5169, 'ResizablePMCArray'
    box $P5170, 2
    push $P5169, $P5170
    box $P5171, 61
    push $P5169, $P5171
    box $P5172, 7
    push $P5169, $P5172
    box $P5173, 4
    push $P5169, $P5173
    box $P5174, 4096
    push $P5169, $P5174
    box $P5175, 5
    push $P5169, $P5175
    push $P5141, $P5169
    new $P5176, 'ResizablePMCArray'
    box $P5177, 2
    push $P5176, $P5177
    box $P5178, 99
    push $P5176, $P5178
    box $P5179, 8
    push $P5176, $P5179
    box $P5180, 1
    push $P5176, $P5180
    box $P5181, 0
    push $P5176, $P5181
    box $P5182, 5
    push $P5176, $P5182
    push $P5141, $P5176
    new $P5183, 'ResizablePMCArray'
    box $P5184, 2
    push $P5183, $P5184
    box $P5185, 117
    push $P5183, $P5185
    box $P5186, 9
    push $P5183, $P5186
    push $P5141, $P5183
    new $P5187, 'ResizablePMCArray'
    box $P5188, 2
    push $P5187, $P5188
    box $P5189, 116
    push $P5187, $P5189
    box $P5190, 10
    push $P5187, $P5190
    push $P5141, $P5187
    new $P5191, 'ResizablePMCArray'
    box $P5192, 1
    push $P5191, $P5192
    box $P5193, 0
    push $P5191, $P5193
    box $P5194, 11
    push $P5191, $P5194
    push $P5141, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 8
    push $P5195, $P5196
    box $P5197, "panic"
    push $P5195, $P5197
    box $P5198, 5
    push $P5195, $P5198
    push $P5141, $P5195
    push $P5001, $P5141
    new $P5199, 'ResizablePMCArray'
    new $P5200, 'ResizablePMCArray'
    push $P5199, $P5200
    new $P5201, 'ResizablePMCArray'
    box $P5202, 0
    push $P5201, $P5202
    box $P5203, 0
    push $P5201, $P5203
    box $P5204, 0
    push $P5201, $P5204
    box $P5205, 0
    push $P5201, $P5205
    box $P5206, 0
    push $P5201, $P5206
    box $P5207, 0
    push $P5201, $P5207
    push $P5199, $P5201
    push $P5001, $P5199
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1346277629.325") :anon :lex :outer("cuid_42_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx157_tgt
    .local int rx157_pos
    .local int rx157_off
    .local int rx157_eos
    .local int rx157_rep
    .local pmc rx157_cur
    .local pmc rx157_curclass
    .local pmc rx157_bstack
    .local pmc rx157_cstack
    (rx157_cur, rx157_tgt, rx157_pos, rx157_curclass, rx157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx157_cur
    length rx157_eos, rx157_tgt
    eq $I19, 1, rx157_restart549
    gt rx157_pos, rx157_eos, rx157_fail550
    repr_get_attr_int $I11, self, rx157_curclass, "$!from"
    ne $I11, -1, rxscan158_done556
    goto rxscan158_scan555
  rxscan158_loop554:
    inc rx157_pos
    gt rx157_pos, rx157_eos, rx157_fail550
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!from", rx157_pos
  rxscan158_scan555:
    nqp_rxmark rx157_bstack, rxscan158_loop554, rx157_pos, 0
  rxscan158_done556:
    nqp_rxmark rx157_bstack, rxquantr159_done558, rx157_pos, 0
  rxquantr159_loop557:
    ge rx157_pos, rx157_eos, rx157_fail550
    substr $S11, rx157_tgt, rx157_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx157_fail550
    inc rx157_pos
    nqp_rxpeek $I19, rx157_bstack, rxquantr159_done558
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr159_done558
    inc rx157_rep
    nqp_rxmark rx157_bstack, rxquantr159_done558, rx157_pos, rx157_rep
    goto rxquantr159_loop557
  rxquantr159_done558:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt160_0560
    nqp_push_label $P11, alt160_1565
    nqp_rxmark rx157_bstack, alt160_end559, -1, 0
    rx157_cur."!alt"(rx157_pos, "alt_nfa__5_1346277631.782", $P11)
    goto rx157_fail550
  alt160_0560:
    add $I11, rx157_pos, 1
    gt $I11, rx157_eos, rx157_fail550
    substr $S10, rx157_tgt, rx157_pos, 1
    ne $S10, ucs4:"=", rx157_fail550
    add rx157_pos, 1
    nqp_rxmark rx157_bstack, rxquantr161_done562, rx157_pos, 0
  rxquantr161_loop561:
    add $I11, rx157_pos, 3
    gt $I11, rx157_eos, rx157_fail550
    substr $S10, rx157_tgt, rx157_pos, 3
    ne $S10, ucs4:"cut", rx157_fail550
    add rx157_pos, 3
    le rx157_pos, 0, rx157_fail550
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, rx157_pos
    if $I11, rx157_fail550
    sub $I11, rx157_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, $I11
    unless $I11, rx157_fail550
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx157_curclass, "$!pos"
    lt $I11, 0, rx157_fail550
    repr_get_attr_int rx157_pos, $P11, rx157_curclass, "$!pos"
    nqp_rxpeek $I19, rx157_bstack, rxquantr161_done562
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr161_done562
    inc rx157_rep
  rxquantr161_done562:
    goto alt160_end559
  alt160_1565:
    ge rx157_pos, rx157_eos, rx157_fail550
    is_cclass $I11, .CCLASS_NEWLINE, rx157_tgt, rx157_pos
    unless $I11, rx157_fail550
    substr $S10, rx157_tgt, rx157_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx157_pos, $I11
    add rx157_pos, 1
    goto alt160_end559
  alt160_end559:
    nqp_rxcommit rx157_bstack, alt160_end559
    rx157_cur."!cursor_pass"(rx157_pos, 'backtrack'=>1)
    .return (rx157_cur)
  rx157_restart549:
    repr_get_attr_obj rx157_cstack, rx157_cur, rx157_curclass, "$!cstack"
  rx157_fail550:
    unless rx157_bstack, rx157_done548
    pop $I19, rx157_bstack
    if_null rx157_cstack, rx157_cstack_done553
    unless rx157_cstack, rx157_cstack_done553
    dec $I19
    set $P11, rx157_cstack[$I19]
  rx157_cstack_done553:
    pop rx157_rep, rx157_bstack
    pop rx157_pos, rx157_bstack
    pop $I19, rx157_bstack
    lt rx157_pos, -1, rx157_done548
    lt rx157_pos, 0, rx157_fail550
    eq $I19, 0, rx157_fail550
    nqp_islist $I20, rx157_cstack
    unless $I20, rx157_jump551
    elements $I18, rx157_bstack
    le $I18, 0, rx157_cut552
    dec $I18
    set $I18, rx157_bstack[$I18]
  rx157_cut552:
    assign rx157_cstack, $I18
  rx157_jump551:
    jump $I19
  rx157_done548:
    rx157_cur."!cursor_fail"()
    .return (rx157_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346277629.325_caps" :subid("cuid_memo_21_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346277629.325_nfa" :subid("cuid_memo_22_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 4
    push $P5010, $P5014
    box $P5015, 4096
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 99
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    box $P5021, 1
    push $P5017, $P5021
    box $P5022, 0
    push $P5017, $P5022
    box $P5023, 0
    push $P5017, $P5023
    push $P5001, $P5017
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 117
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 2
    push $P5028, $P5029
    box $P5030, 116
    push $P5028, $P5030
    box $P5031, 6
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "panic"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346277629.325_alt_nfa__5_1346277631.782" :subid("cuid_memo_23_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 61
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 99
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 0
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 6
    push $P5023, $P5026
    push $P5002, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "panic"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5002, $P5027
    push $P5001, $P5002
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 4
    push $P5033, $P5034
    box $P5035, 4096
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_43_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 692
    .param pmc _lex_param_0 
    .const 'Sub' $P5034 = 'cuid_390_1346277629.325' 
    capture_lex $P5034 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*PACKAGE", $P105 
    .lex "$*GLOBALish", $P106 
    .lex utf8:"$\x{a2}", $P107 
    .lex "$/", $P108 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P106, $P5006
    set self, _lex_param_0
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart575
    gt rx167_pos, rx167_eos, rx167_fail576
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done582
    goto rxscan168_scan581
  rxscan168_loop580:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail576
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan581:
    nqp_rxmark rx167_bstack, rxscan168_loop580, rx167_pos, 0
  rxscan168_done582:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5007, ""
    set $P101, $P5007
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5008, 0
    set $P102, $P5008
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P103, fallback583
    get_hll_global $P5011, "GLOBAL"
    get_who $P5010, $P5011
    set $P5009, $P5010["$MAIN_SUB"]
    unless_null $P5009, fallback584
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5012
  fallback584:
    unless_null $P5009, vivi_169585
    die "Contextual $*MAIN_SUB not found"
    box $P5013, "Contextual $*MAIN_SUB not found"
    set $P5009, $P5013
  vivi_169585:
    set $P103, $P5009
  fallback583:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 697
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback586
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback587
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5018
  fallback587:
    unless_null $P5015, vivi_170588
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_170588:
    set $P5014, $P5015
  fallback586:
    $P5020 = $P5014."push_lexpad"($P108)
    set $P104, $P5020
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P105, fallback589
    get_hll_global $P5023, "GLOBAL"
    get_who $P5022, $P5023
    set $P5021, $P5022["$PACKAGE"]
    unless_null $P5021, fallback590
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5024
  fallback590:
    unless_null $P5021, vivi_171591
    die "Contextual $*PACKAGE not found"
    box $P5025, "Contextual $*PACKAGE not found"
    set $P5021, $P5025
  vivi_171591:
    set $P105, $P5021
  fallback589:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P106, fallback592
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$GLOBALish"]
    unless_null $P5026, fallback593
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5029
  fallback593:
    unless_null $P5026, vivi_172594
    die "Contextual $*GLOBALish not found"
    box $P5030, "Contextual $*GLOBALish not found"
    set $P5026, $P5030
  vivi_172594:
    set $P106, $P5026
  fallback592:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."GLOBALish"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail576
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5031 = $P107."MATCH"()
    set $P108, $P5031
    .const 'Sub' $P5032 = 'cuid_390_1346277629.325' 
    capture_lex $P5032
    $P5033 = $P5032()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail576
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail576
    nqp_rxmark rx167_bstack, rxsubrule176_pass600, -1, 0
  rxsubrule176_pass600:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt177_0602:
    nqp_rxmark rx167_bstack, alt177_1604, rx167_pos, 0
    lt rx167_pos, rx167_eos, rx167_fail576
    goto alt177_end601
  alt177_1604:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail576
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt177_end601:
    rx167_cur."!cursor_pass"(rx167_pos, "comp_unit", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart575:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail576:
    unless rx167_bstack, rx167_done574
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done579
    unless rx167_cstack, rx167_cstack_done579
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done579:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done574
    lt rx167_pos, 0, rx167_fail576
    eq $I19, 0, rx167_fail576
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump577
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut578
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut578:
    assign rx167_cstack, $I18
  rx167_jump577:
    jump $I19
  rx167_done574:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1346277629.325_caps" :subid("cuid_memo_24_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statementlist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1346277629.325_nfa" :subid("cuid_memo_25_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 1
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "GLOBALish"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1346277629.325") :anon :lex :outer("cuid_43_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 703

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback596
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback597
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback597:
    unless_null $P5002, vivi_174598
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_174598:
    set $P5001, $P5002
  fallback596:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_44_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 711
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx180_tgt
    .local int rx180_pos
    .local int rx180_off
    .local int rx180_eos
    .local int rx180_rep
    .local pmc rx180_cur
    .local pmc rx180_curclass
    .local pmc rx180_bstack
    .local pmc rx180_cstack
    (rx180_cur, rx180_tgt, rx180_pos, rx180_curclass, rx180_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx180_cur
    length rx180_eos, rx180_tgt
    eq $I19, 1, rx180_restart608
    gt rx180_pos, rx180_eos, rx180_fail609
    repr_get_attr_int $I11, self, rx180_curclass, "$!from"
    ne $I11, -1, rxscan181_done615
    goto rxscan181_scan614
  rxscan181_loop613:
    inc rx180_pos
    gt rx180_pos, rx180_eos, rx180_fail609
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!from", rx180_pos
  rxscan181_scan614:
    nqp_rxmark rx180_bstack, rxscan181_loop613, rx180_pos, 0
  rxscan181_done615:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt182_0617
    nqp_push_label $P11, alt182_1621
    nqp_rxmark rx180_bstack, alt182_end616, -1, 0
    rx180_cur."!alt"(rx180_pos, "alt_nfa__7_1346277631.884", $P11)
    goto rx180_fail609
  alt182_0617:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    lt rx180_pos, rx180_eos, rx180_fail609
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    goto alt182_end616
  alt182_1621:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxmark rx180_bstack, rxquantr187_done624, rx180_pos, 0
  rxquantr187_loop623:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."statement"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    nqp_rxmark rx180_bstack, rxsubrule188_pass625, -1, 0
  rxsubrule188_pass625:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxpeek $I19, rx180_bstack, rxquantr187_done624
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr187_done624
    inc rx180_rep
    nqp_rxmark rx180_bstack, rxquantr187_done624, rx180_pos, rx180_rep
    goto rxquantr187_loop623
  rxquantr187_done624:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail609
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    goto alt182_end616
  alt182_end616:
    rx180_cur."!cursor_pass"(rx180_pos, "statementlist", 'backtrack'=>1)
    .return (rx180_cur)
  rx180_restart608:
    repr_get_attr_obj rx180_cstack, rx180_cur, rx180_curclass, "$!cstack"
  rx180_fail609:
    unless rx180_bstack, rx180_done607
    pop $I19, rx180_bstack
    if_null rx180_cstack, rx180_cstack_done612
    unless rx180_cstack, rx180_cstack_done612
    dec $I19
    set $P11, rx180_cstack[$I19]
  rx180_cstack_done612:
    pop rx180_rep, rx180_bstack
    pop rx180_pos, rx180_bstack
    pop $I19, rx180_bstack
    lt rx180_pos, -1, rx180_done607
    lt rx180_pos, 0, rx180_fail609
    eq $I19, 0, rx180_fail609
    nqp_islist $I20, rx180_cstack
    unless $I20, rx180_jump610
    elements $I18, rx180_bstack
    le $I18, 0, rx180_cut611
    dec $I18
    set $I18, rx180_bstack[$I18]
  rx180_cut611:
    assign rx180_cstack, $I18
  rx180_jump610:
    jump $I19
  rx180_done607:
    rx180_cur."!cursor_fail"()
    .return (rx180_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1346277629.325_caps" :subid("cuid_memo_26_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1346277629.325_alt_nfa__7_1346277631.884" :subid("cuid_memo_27_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_46_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 716
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_45_1346277629.325' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx192_tgt
    .local int rx192_pos
    .local int rx192_off
    .local int rx192_eos
    .local int rx192_rep
    .local pmc rx192_cur
    .local pmc rx192_curclass
    .local pmc rx192_bstack
    .local pmc rx192_cstack
    (rx192_cur, rx192_tgt, rx192_pos, rx192_curclass, rx192_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx192_cur
    length rx192_eos, rx192_tgt
    eq $I19, 1, rx192_restart631
    gt rx192_pos, rx192_eos, rx192_fail632
    repr_get_attr_int $I11, self, rx192_curclass, "$!from"
    ne $I11, -1, rxscan193_done638
    goto rxscan193_scan637
  rxscan193_loop636:
    inc rx192_pos
    gt rx192_pos, rx192_eos, rx192_fail632
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!from", rx192_pos
  rxscan193_scan637:
    nqp_rxmark rx192_bstack, rxscan193_loop636, rx192_pos, 0
  rxscan193_done638:
    .const 'Sub' $P5001 = 'cuid_45_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    ge $I11, 0, rx192_fail632
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt199_0657
    nqp_push_label $P11, alt199_1659
    nqp_rxmark rx192_bstack, alt199_end656, -1, 0
    rx192_cur."!alt"(rx192_pos, "alt_nfa__9_1346277631.92", $P11)
    goto rx192_fail632
  alt199_0657:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    nqp_rxmark rx192_bstack, rxsubrule200_pass658, -1, 0
  rxsubrule200_pass658:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    goto alt199_end656
  alt199_1659:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    nqp_rxmark rx192_bstack, rxsubrule201_pass660, -1, 0
  rxsubrule201_pass660:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."ws"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxmark rx192_bstack, rxquantr203_done663, rx192_pos, 0
  rxquantr203_loop662:
  alt204_0665:
    nqp_rxmark rx192_bstack, alt204_1666, rx192_pos, 0
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    goto alt204_end664
  alt204_1666:
    nqp_rxmark rx192_bstack, alt204_2672, rx192_pos, 0
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    nqp_rxmark rx192_bstack, rxsubrule205_pass667, -1, 0
  rxsubrule205_pass667:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxmark rx192_bstack, rxquantr206_done669, rx192_pos, 0
  rxquantr206_loop668:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    goto rxsubrule207_pass670
  rxsubrule207_back671:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
  rxsubrule207_pass670:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule207_back671
    push rx192_bstack, $I11
    push rx192_bstack, 0
    push rx192_bstack, rx192_pos
    elements $I11, rx192_cstack
    push rx192_bstack, $I11
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxpeek $I19, rx192_bstack, rxquantr206_done669
    inc $I19
    inc $I19
    set rx192_rep, rx192_bstack[$I19]
    nqp_rxcommit rx192_bstack, rxquantr206_done669
    inc rx192_rep
  rxquantr206_done669:
    goto alt204_end664
  alt204_2672:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail632
    nqp_rxmark rx192_bstack, rxsubrule208_pass673, -1, 0
  rxsubrule208_pass673:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
  alt204_end664:
    nqp_rxpeek $I19, rx192_bstack, rxquantr203_done663
    inc $I19
    inc $I19
    set rx192_rep, rx192_bstack[$I19]
    nqp_rxcommit rx192_bstack, rxquantr203_done663
    inc rx192_rep
  rxquantr203_done663:
    goto alt199_end656
  alt199_end656:
    nqp_rxcommit rx192_bstack, alt199_end656
    rx192_cur."!cursor_pass"(rx192_pos, "statement", 'backtrack'=>1)
    .return (rx192_cur)
  rx192_restart631:
    repr_get_attr_obj rx192_cstack, rx192_cur, rx192_curclass, "$!cstack"
  rx192_fail632:
    unless rx192_bstack, rx192_done630
    pop $I19, rx192_bstack
    if_null rx192_cstack, rx192_cstack_done635
    unless rx192_cstack, rx192_cstack_done635
    dec $I19
    set $P11, rx192_cstack[$I19]
  rx192_cstack_done635:
    pop rx192_rep, rx192_bstack
    pop rx192_pos, rx192_bstack
    pop $I19, rx192_bstack
    lt rx192_pos, -1, rx192_done630
    lt rx192_pos, 0, rx192_fail632
    eq $I19, 0, rx192_fail632
    nqp_islist $I20, rx192_cstack
    unless $I20, rx192_jump633
    elements $I18, rx192_bstack
    le $I18, 0, rx192_cut634
    dec $I18
    set $I18, rx192_bstack[$I18]
  rx192_cut634:
    assign rx192_cstack, $I18
  rx192_jump633:
    jump $I19
  rx192_done630:
    rx192_cur."!cursor_fail"()
    .return (rx192_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1346277629.325_caps" :subid("cuid_memo_28_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_control"], $P5002
    box $P5003, 0
    set $P5001["EXPR"], $P5003
    box $P5004, 2
    set $P5001["statement_mod_cond"], $P5004
    box $P5005, 2
    set $P5001["statement_mod_loop"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1346277629.325_alt_nfa__9_1346277631.92" :subid("cuid_memo_29_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "statement_control"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "EXPR"
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ws"
    push $P5014, $P5016
    box $P5017, 3
    push $P5014, $P5017
    push $P5008, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5008, $P5018
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1346277629.325") :anon :lex :outer("cuid_46_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx194_tgt
    .local int rx194_pos
    .local int rx194_off
    .local int rx194_eos
    .local int rx194_rep
    .local pmc rx194_cur
    .local pmc rx194_curclass
    .local pmc rx194_bstack
    .local pmc rx194_cstack
    (rx194_cur, rx194_tgt, rx194_pos, rx194_curclass, rx194_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx194_cur
    length rx194_eos, rx194_tgt
    eq $I19, 1, rx194_restart641
    gt rx194_pos, rx194_eos, rx194_fail642
    repr_get_attr_int $I11, self, rx194_curclass, "$!from"
    ne $I11, -1, rxscan195_done648
    goto rxscan195_scan647
  rxscan195_loop646:
    inc rx194_pos
    gt rx194_pos, rx194_eos, rx194_fail642
    repr_bind_attr_int rx194_cur, rx194_curclass, "$!from", rx194_pos
  rxscan195_scan647:
    nqp_rxmark rx194_bstack, rxscan195_loop646, rx194_pos, 0
  rxscan195_done648:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt196_0650
    nqp_push_label $P11, alt196_1654
    nqp_rxmark rx194_bstack, alt196_end649, -1, 0
    rx194_cur."!alt"(rx194_pos, "alt_nfa__8_1346277631.895", $P11)
    goto rx194_fail642
  alt196_0650:
  alt197_0652:
    nqp_rxmark rx194_bstack, alt197_1653, rx194_pos, 0
    add $I11, rx194_pos, 1
    gt $I11, rx194_eos, rx194_fail642
    substr $S10, rx194_tgt, rx194_pos, 1
    ne $S10, ucs4:"]", rx194_fail642
    add rx194_pos, 1
    goto alt197_end651
  alt197_1653:
    ge rx194_pos, rx194_eos, rx194_fail642
    substr $S11, rx194_tgt, rx194_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx194_fail642
    inc rx194_pos
  alt197_end651:
    goto alt196_end649
  alt196_1654:
    lt rx194_pos, rx194_eos, rx194_fail642
    goto alt196_end649
  alt196_end649:
    rx194_cur."!cursor_pass"(rx194_pos, 'backtrack'=>1)
    .return (rx194_cur)
  rx194_restart641:
    repr_get_attr_obj rx194_cstack, rx194_cur, rx194_curclass, "$!cstack"
  rx194_fail642:
    unless rx194_bstack, rx194_done640
    pop $I19, rx194_bstack
    if_null rx194_cstack, rx194_cstack_done645
    unless rx194_cstack, rx194_cstack_done645
    dec $I19
    set $P11, rx194_cstack[$I19]
  rx194_cstack_done645:
    pop rx194_rep, rx194_bstack
    pop rx194_pos, rx194_bstack
    pop $I19, rx194_bstack
    lt rx194_pos, -1, rx194_done640
    lt rx194_pos, 0, rx194_fail642
    eq $I19, 0, rx194_fail642
    nqp_islist $I20, rx194_cstack
    unless $I20, rx194_jump643
    elements $I18, rx194_bstack
    le $I18, 0, rx194_cut644
    dec $I18
    set $I18, rx194_bstack[$I18]
  rx194_cut644:
    assign rx194_cstack, $I18
  rx194_jump643:
    jump $I19
  rx194_done640:
    rx194_cur."!cursor_fail"()
    .return (rx194_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346277629.325_caps" :subid("cuid_memo_30_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346277629.325_nfa" :subid("cuid_memo_31_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346277629.325_alt_nfa__8_1346277631.895" :subid("cuid_memo_32_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 1
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_47_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 729
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx209_tgt
    .local int rx209_pos
    .local int rx209_off
    .local int rx209_eos
    .local int rx209_rep
    .local pmc rx209_cur
    .local pmc rx209_curclass
    .local pmc rx209_bstack
    .local pmc rx209_cstack
    (rx209_cur, rx209_tgt, rx209_pos, rx209_curclass, rx209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx209_cur
    length rx209_eos, rx209_tgt
    eq $I19, 1, rx209_restart676
    gt rx209_pos, rx209_eos, rx209_fail677
    repr_get_attr_int $I11, self, rx209_curclass, "$!from"
    ne $I11, -1, rxscan210_done683
    goto rxscan210_scan682
  rxscan210_loop681:
    inc rx209_pos
    gt rx209_pos, rx209_eos, rx209_fail677
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!from", rx209_pos
  rxscan210_scan682:
    nqp_rxmark rx209_bstack, rxscan210_loop681, rx209_pos, 0
  rxscan210_done683:
  alt211_0685:
    nqp_rxmark rx209_bstack, alt211_1686, rx209_pos, 0
    add $I11, rx209_pos, 1
    gt $I11, rx209_eos, rx209_fail677
    substr $S10, rx209_tgt, rx209_pos, 1
    ne $S10, ucs4:";", rx209_fail677
    add rx209_pos, 1
    goto alt211_end684
  alt211_1686:
    nqp_rxmark rx209_bstack, alt211_2687, rx209_pos, 0
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!pos", rx209_pos
    $P11 = rx209_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx209_curclass, "$!pos"
    lt $I11, 0, rx209_fail677
    goto alt211_end684
  alt211_2687:
    nqp_rxmark rx209_bstack, alt211_3688, rx209_pos, 0
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!pos", rx209_pos
    $P11 = rx209_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx209_curclass, "$!pos"
    lt $I11, 0, rx209_fail677
    goto alt211_end684
  alt211_3688:
    lt rx209_pos, rx209_eos, rx209_fail677
  alt211_end684:
    rx209_cur."!cursor_pass"(rx209_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx209_cur)
  rx209_restart676:
    repr_get_attr_obj rx209_cstack, rx209_cur, rx209_curclass, "$!cstack"
  rx209_fail677:
    unless rx209_bstack, rx209_done675
    pop $I19, rx209_bstack
    if_null rx209_cstack, rx209_cstack_done680
    unless rx209_cstack, rx209_cstack_done680
    dec $I19
    set $P11, rx209_cstack[$I19]
  rx209_cstack_done680:
    pop rx209_rep, rx209_bstack
    pop rx209_pos, rx209_bstack
    pop $I19, rx209_bstack
    lt rx209_pos, -1, rx209_done675
    lt rx209_pos, 0, rx209_fail677
    eq $I19, 0, rx209_fail677
    nqp_islist $I20, rx209_cstack
    unless $I20, rx209_jump678
    elements $I18, rx209_bstack
    le $I18, 0, rx209_cut679
    dec $I18
    set $I18, rx209_bstack[$I18]
  rx209_cut679:
    assign rx209_cstack, $I18
  rx209_jump678:
    jump $I19
  rx209_done675:
    rx209_cur."!cursor_fail"()
    .return (rx209_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_47_1346277629.325_caps" :subid("cuid_memo_33_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_48_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 736
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart692
    gt rx213_pos, rx213_eos, rx213_fail693
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done699
    goto rxscan214_scan698
  rxscan214_loop697:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail693
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan698:
    nqp_rxmark rx213_bstack, rxscan214_loop697, rx213_pos, 0
  rxscan214_done699:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail693
    nqp_rxmark rx213_bstack, rxsubrule215_pass700, -1, 0
  rxsubrule215_pass700:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."ws"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail693
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail693
    nqp_rxmark rx213_bstack, rxsubrule217_pass702, -1, 0
  rxsubrule217_pass702:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    rx213_cur."!cursor_pass"(rx213_pos, "xblock", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart692:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail693:
    unless rx213_bstack, rx213_done691
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done696
    unless rx213_cstack, rx213_cstack_done696
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done696:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done691
    lt rx213_pos, 0, rx213_fail693
    eq $I19, 0, rx213_fail693
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump694
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut695
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut695:
    assign rx213_cstack, $I18
  rx213_jump694:
    jump $I19
  rx213_done691:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1346277629.325_caps" :subid("cuid_memo_34_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["pblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1346277629.325_nfa" :subid("cuid_memo_35_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "EXPR"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "pblock"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_49_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 740
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx218_tgt
    .local int rx218_pos
    .local int rx218_off
    .local int rx218_eos
    .local int rx218_rep
    .local pmc rx218_cur
    .local pmc rx218_curclass
    .local pmc rx218_bstack
    .local pmc rx218_cstack
    (rx218_cur, rx218_tgt, rx218_pos, rx218_curclass, rx218_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx218_cur
    length rx218_eos, rx218_tgt
    eq $I19, 1, rx218_restart705
    gt rx218_pos, rx218_eos, rx218_fail706
    repr_get_attr_int $I11, self, rx218_curclass, "$!from"
    ne $I11, -1, rxscan219_done712
    goto rxscan219_scan711
  rxscan219_loop710:
    inc rx218_pos
    gt rx218_pos, rx218_eos, rx218_fail706
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!from", rx218_pos
  rxscan219_scan711:
    nqp_rxmark rx218_bstack, rxscan219_loop710, rx218_pos, 0
  rxscan219_done712:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt220_0714
    nqp_push_label $P11, alt220_1719
    nqp_push_label $P11, alt220_2722
    nqp_rxmark rx218_bstack, alt220_end713, -1, 0
    rx218_cur."!alt"(rx218_pos, "alt_nfa__10_1346277631.971", $P11)
    goto rx218_fail706
  alt220_0714:
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."signature"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    nqp_rxmark rx218_bstack, rxsubrule223_pass717, -1, 0
  rxsubrule223_pass717:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    nqp_rxmark rx218_bstack, rxsubrule224_pass718, -1, 0
  rxsubrule224_pass718:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end713
  alt220_1719:
    ge rx218_pos, rx218_eos, rx218_fail706
    substr $S11, rx218_tgt, rx218_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx218_fail706
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    nqp_rxmark rx218_bstack, rxsubrule226_pass721, -1, 0
  rxsubrule226_pass721:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end713
  alt220_2722:
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail706
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end713
  alt220_end713:
    rx218_cur."!cursor_pass"(rx218_pos, "pblock", 'backtrack'=>1)
    .return (rx218_cur)
  rx218_restart705:
    repr_get_attr_obj rx218_cstack, rx218_cur, rx218_curclass, "$!cstack"
  rx218_fail706:
    unless rx218_bstack, rx218_done704
    pop $I19, rx218_bstack
    if_null rx218_cstack, rx218_cstack_done709
    unless rx218_cstack, rx218_cstack_done709
    dec $I19
    set $P11, rx218_cstack[$I19]
  rx218_cstack_done709:
    pop rx218_rep, rx218_bstack
    pop rx218_pos, rx218_bstack
    pop $I19, rx218_bstack
    lt rx218_pos, -1, rx218_done704
    lt rx218_pos, 0, rx218_fail706
    eq $I19, 0, rx218_fail706
    nqp_islist $I20, rx218_cstack
    unless $I20, rx218_jump707
    elements $I18, rx218_bstack
    le $I18, 0, rx218_cut708
    dec $I18
    set $I18, rx218_bstack[$I18]
  rx218_cut708:
    assign rx218_cstack, $I18
  rx218_jump707:
    jump $I19
  rx218_done704:
    rx218_cur."!cursor_fail"()
    .return (rx218_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346277629.325_caps" :subid("cuid_memo_36_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["signature"], $P5002
    box $P5003, 0
    set $P5001["blockoid"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346277629.325_nfa" :subid("cuid_memo_37_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, "{"
    push $P5003, $P5008
    box $P5009, 5
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "panic"
    push $P5003, $P5011
    box $P5012, 0
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "newpad"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 8
    push $P5017, $P5018
    box $P5019, "signature"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "blockoid"
    push $P5021, $P5023
    box $P5024, 0
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 0
    push $P5025, $P5026
    box $P5027, 0
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346277629.325_alt_nfa__10_1346277631.971" :subid("cuid_memo_38_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "lambda"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "newpad"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 8
    push $P5012, $P5013
    box $P5014, "signature"
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 8
    push $P5016, $P5017
    box $P5018, "blockoid"
    push $P5016, $P5018
    box $P5019, 0
    push $P5016, $P5019
    push $P5002, $P5016
    push $P5001, $P5002
    new $P5020, 'ResizablePMCArray'
    new $P5021, 'ResizablePMCArray'
    push $P5020, $P5021
    new $P5022, 'ResizablePMCArray'
    box $P5023, 6
    push $P5022, $P5023
    box $P5024, "{"
    push $P5022, $P5024
    box $P5025, 2
    push $P5022, $P5025
    push $P5020, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5020, $P5026
    push $P5001, $P5020
    new $P5030, 'ResizablePMCArray'
    new $P5031, 'ResizablePMCArray'
    push $P5030, $P5031
    new $P5032, 'ResizablePMCArray'
    box $P5033, 8
    push $P5032, $P5033
    box $P5034, "panic"
    push $P5032, $P5034
    box $P5035, 0
    push $P5032, $P5035
    push $P5030, $P5032
    push $P5001, $P5030
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_50_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 751
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    (rx228_cur, rx228_tgt, rx228_pos, rx228_curclass, rx228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart726
    gt rx228_pos, rx228_eos, rx228_fail727
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done733
    goto rxscan229_scan732
  rxscan229_loop731:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail727
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan732:
    nqp_rxmark rx228_bstack, rxscan229_loop731, rx228_pos, 0
  rxscan229_done733:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt230_0735
    nqp_push_label $P11, alt230_1736
    nqp_rxmark rx228_bstack, alt230_end734, -1, 0
    rx228_cur."!alt"(rx228_pos, "alt_nfa__11_1346277631.983", $P11)
    goto rx228_fail727
  alt230_0735:
    add $I11, rx228_pos, 2
    gt $I11, rx228_eos, rx228_fail727
    substr $S10, rx228_tgt, rx228_pos, 2
    ne $S10, ucs4:"->", rx228_fail727
    add rx228_pos, 2
    goto alt230_end734
  alt230_1736:
    add $I11, rx228_pos, 3
    gt $I11, rx228_eos, rx228_fail727
    substr $S10, rx228_tgt, rx228_pos, 3
    ne $S10, ucs4:"<->", rx228_fail727
    add rx228_pos, 3
    goto alt230_end734
  alt230_end734:
    rx228_cur."!cursor_pass"(rx228_pos, "lambda", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart726:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail727:
    unless rx228_bstack, rx228_done725
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done730
    unless rx228_cstack, rx228_cstack_done730
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done730:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done725
    lt rx228_pos, 0, rx228_fail727
    eq $I19, 0, rx228_fail727
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump728
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut729
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut729:
    assign rx228_cstack, $I18
  rx228_jump728:
    jump $I19
  rx228_done725:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346277629.325_caps" :subid("cuid_memo_39_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346277629.325_nfa" :subid("cuid_memo_40_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 60
    push $P5003, $P5008
    box $P5009, 3
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 62
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 45
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346277629.325_alt_nfa__11_1346277631.983" :subid("cuid_memo_41_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 45
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 62
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 60
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 45
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 62
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_51_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 753
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_curclass
    .local pmc rx231_bstack
    .local pmc rx231_cstack
    (rx231_cur, rx231_tgt, rx231_pos, rx231_curclass, rx231_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx231_cur
    length rx231_eos, rx231_tgt
    eq $I19, 1, rx231_restart739
    gt rx231_pos, rx231_eos, rx231_fail740
    repr_get_attr_int $I11, self, rx231_curclass, "$!from"
    ne $I11, -1, rxscan232_done746
    goto rxscan232_scan745
  rxscan232_loop744:
    inc rx231_pos
    gt rx231_pos, rx231_eos, rx231_fail740
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!from", rx231_pos
  rxscan232_scan745:
    nqp_rxmark rx231_bstack, rxscan232_loop744, rx231_pos, 0
  rxscan232_done746:
  alt233_0748:
    nqp_rxmark rx231_bstack, alt233_1749, rx231_pos, 0
    ge rx231_pos, rx231_eos, rx231_fail740
    substr $S11, rx231_tgt, rx231_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx231_fail740
    goto alt233_end747
  alt233_1749:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail740
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
  alt233_end747:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail740
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail740
    nqp_rxmark rx231_bstack, rxsubrule236_pass752, -1, 0
  rxsubrule236_pass752:
    rx231_cstack = rx231_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    rx231_cur."!cursor_pass"(rx231_pos, "block", 'backtrack'=>1)
    .return (rx231_cur)
  rx231_restart739:
    repr_get_attr_obj rx231_cstack, rx231_cur, rx231_curclass, "$!cstack"
  rx231_fail740:
    unless rx231_bstack, rx231_done738
    pop $I19, rx231_bstack
    if_null rx231_cstack, rx231_cstack_done743
    unless rx231_cstack, rx231_cstack_done743
    dec $I19
    set $P11, rx231_cstack[$I19]
  rx231_cstack_done743:
    pop rx231_rep, rx231_bstack
    pop rx231_pos, rx231_bstack
    pop $I19, rx231_bstack
    lt rx231_pos, -1, rx231_done738
    lt rx231_pos, 0, rx231_fail740
    eq $I19, 0, rx231_fail740
    nqp_islist $I20, rx231_cstack
    unless $I20, rx231_jump741
    elements $I18, rx231_bstack
    le $I18, 0, rx231_cut742
    dec $I18
    set $I18, rx231_bstack[$I18]
  rx231_cut742:
    assign rx231_cstack, $I18
  rx231_jump741:
    jump $I19
  rx231_done738:
    rx231_cur."!cursor_fail"()
    .return (rx231_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_51_1346277629.325_caps" :subid("cuid_memo_42_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["blockoid"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_52_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    (rx237_cur, rx237_tgt, rx237_pos, rx237_curclass, rx237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart755
    gt rx237_pos, rx237_eos, rx237_fail756
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done762
    goto rxscan238_scan761
  rxscan238_loop760:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail756
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan761:
    nqp_rxmark rx237_bstack, rxscan238_loop760, rx237_pos, 0
  rxscan238_done762:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    store_lex unicode:"$\x{a2}", rx237_cur
    unless_null $P101, fallback763
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback764
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback764:
    unless_null $P5002, vivi_239765
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_239765:
    set $P101, $P5002
  fallback763:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt241_0768:
    nqp_rxmark rx237_bstack, alt241_1770, rx237_pos, 0
    add $I11, rx237_pos, 14
    gt $I11, rx237_eos, rx237_fail756
    substr $S10, rx237_tgt, rx237_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx237_fail756
    add rx237_pos, 14
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    nqp_rxmark rx237_bstack, rxsubrule242_pass769, -1, 0
  rxsubrule242_pass769:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt241_end767
  alt241_1770:
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail756
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:"{", rx237_fail756
    add rx237_pos, 1
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    nqp_rxmark rx237_bstack, rxsubrule243_pass771, -1, 0
  rxsubrule243_pass771:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt244_0773:
    nqp_rxmark rx237_bstack, alt244_1774, rx237_pos, 0
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail756
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:"}", rx237_fail756
    add rx237_pos, 1
    goto alt244_end772
  alt244_1774:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    goto rxsubrule245_pass775
  rxsubrule245_back776:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
  rxsubrule245_pass775:
    rx237_cstack = rx237_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule245_back776
    push rx237_bstack, $I11
    push rx237_bstack, 0
    push rx237_bstack, rx237_pos
    elements $I11, rx237_cstack
    push rx237_bstack, $I11
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt244_end772:
  alt241_end767:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail756
    rx237_cur."!cursor_pass"(rx237_pos, "blockoid", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart755:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail756:
    unless rx237_bstack, rx237_done754
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done759
    unless rx237_cstack, rx237_cstack_done759
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done759:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done754
    lt rx237_pos, 0, rx237_fail756
    eq $I19, 0, rx237_fail756
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump757
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut758
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut758:
    assign rx237_cstack, $I18
  rx237_jump757:
    jump $I19
  rx237_done754:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1346277629.325_caps" :subid("cuid_memo_43_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["you_are_here"], $P5002
    box $P5003, 0
    set $P5001["statementlist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1346277629.325_nfa" :subid("cuid_memo_44_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "finishpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_53_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 769
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx246_tgt
    .local int rx246_pos
    .local int rx246_off
    .local int rx246_eos
    .local int rx246_rep
    .local pmc rx246_cur
    .local pmc rx246_curclass
    .local pmc rx246_bstack
    .local pmc rx246_cstack
    (rx246_cur, rx246_tgt, rx246_pos, rx246_curclass, rx246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx246_cur
    length rx246_eos, rx246_tgt
    eq $I19, 1, rx246_restart779
    gt rx246_pos, rx246_eos, rx246_fail780
    repr_get_attr_int $I11, self, rx246_curclass, "$!from"
    ne $I11, -1, rxscan247_done786
    goto rxscan247_scan785
  rxscan247_loop784:
    inc rx246_pos
    gt rx246_pos, rx246_eos, rx246_fail780
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!from", rx246_pos
  rxscan247_scan785:
    nqp_rxmark rx246_bstack, rxscan247_loop784, rx246_pos, 0
  rxscan247_done786:
    rx246_cur."!cursor_pass"(rx246_pos, "newpad", 'backtrack'=>1)
    .return (rx246_cur)
  rx246_restart779:
    repr_get_attr_obj rx246_cstack, rx246_cur, rx246_curclass, "$!cstack"
  rx246_fail780:
    unless rx246_bstack, rx246_done778
    pop $I19, rx246_bstack
    if_null rx246_cstack, rx246_cstack_done783
    unless rx246_cstack, rx246_cstack_done783
    dec $I19
    set $P11, rx246_cstack[$I19]
  rx246_cstack_done783:
    pop rx246_rep, rx246_bstack
    pop rx246_pos, rx246_bstack
    pop $I19, rx246_bstack
    lt rx246_pos, -1, rx246_done778
    lt rx246_pos, 0, rx246_fail780
    eq $I19, 0, rx246_fail780
    nqp_islist $I20, rx246_cstack
    unless $I20, rx246_jump781
    elements $I18, rx246_bstack
    le $I18, 0, rx246_cut782
    dec $I18
    set $I18, rx246_bstack[$I18]
  rx246_cut782:
    assign rx246_cstack, $I18
  rx246_jump781:
    jump $I19
  rx246_done778:
    rx246_cur."!cursor_fail"()
    .return (rx246_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1346277629.325_caps" :subid("cuid_memo_45_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1346277629.325_nfa" :subid("cuid_memo_46_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_54_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 770
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx249_tgt
    .local int rx249_pos
    .local int rx249_off
    .local int rx249_eos
    .local int rx249_rep
    .local pmc rx249_cur
    .local pmc rx249_curclass
    .local pmc rx249_bstack
    .local pmc rx249_cstack
    (rx249_cur, rx249_tgt, rx249_pos, rx249_curclass, rx249_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx249_cur
    length rx249_eos, rx249_tgt
    eq $I19, 1, rx249_restart790
    gt rx249_pos, rx249_eos, rx249_fail791
    repr_get_attr_int $I11, self, rx249_curclass, "$!from"
    ne $I11, -1, rxscan250_done797
    goto rxscan250_scan796
  rxscan250_loop795:
    inc rx249_pos
    gt rx249_pos, rx249_eos, rx249_fail791
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!from", rx249_pos
  rxscan250_scan796:
    nqp_rxmark rx249_bstack, rxscan250_loop795, rx249_pos, 0
  rxscan250_done797:
    rx249_cur."!cursor_pass"(rx249_pos, "outerctx", 'backtrack'=>1)
    .return (rx249_cur)
  rx249_restart790:
    repr_get_attr_obj rx249_cstack, rx249_cur, rx249_curclass, "$!cstack"
  rx249_fail791:
    unless rx249_bstack, rx249_done789
    pop $I19, rx249_bstack
    if_null rx249_cstack, rx249_cstack_done794
    unless rx249_cstack, rx249_cstack_done794
    dec $I19
    set $P11, rx249_cstack[$I19]
  rx249_cstack_done794:
    pop rx249_rep, rx249_bstack
    pop rx249_pos, rx249_bstack
    pop $I19, rx249_bstack
    lt rx249_pos, -1, rx249_done789
    lt rx249_pos, 0, rx249_fail791
    eq $I19, 0, rx249_fail791
    nqp_islist $I20, rx249_cstack
    unless $I20, rx249_jump792
    elements $I18, rx249_bstack
    le $I18, 0, rx249_cut793
    dec $I18
    set $I18, rx249_bstack[$I18]
  rx249_cut793:
    assign rx249_cstack, $I18
  rx249_jump792:
    jump $I19
  rx249_done789:
    rx249_cur."!cursor_fail"()
    .return (rx249_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1346277629.325_caps" :subid("cuid_memo_47_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1346277629.325_nfa" :subid("cuid_memo_48_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "GLOBALish" :subid("cuid_55_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 771
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx252_tgt
    .local int rx252_pos
    .local int rx252_off
    .local int rx252_eos
    .local int rx252_rep
    .local pmc rx252_cur
    .local pmc rx252_curclass
    .local pmc rx252_bstack
    .local pmc rx252_cstack
    (rx252_cur, rx252_tgt, rx252_pos, rx252_curclass, rx252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx252_cur
    length rx252_eos, rx252_tgt
    eq $I19, 1, rx252_restart801
    gt rx252_pos, rx252_eos, rx252_fail802
    repr_get_attr_int $I11, self, rx252_curclass, "$!from"
    ne $I11, -1, rxscan253_done808
    goto rxscan253_scan807
  rxscan253_loop806:
    inc rx252_pos
    gt rx252_pos, rx252_eos, rx252_fail802
    repr_bind_attr_int rx252_cur, rx252_curclass, "$!from", rx252_pos
  rxscan253_scan807:
    nqp_rxmark rx252_bstack, rxscan253_loop806, rx252_pos, 0
  rxscan253_done808:
    rx252_cur."!cursor_pass"(rx252_pos, "GLOBALish", 'backtrack'=>1)
    .return (rx252_cur)
  rx252_restart801:
    repr_get_attr_obj rx252_cstack, rx252_cur, rx252_curclass, "$!cstack"
  rx252_fail802:
    unless rx252_bstack, rx252_done800
    pop $I19, rx252_bstack
    if_null rx252_cstack, rx252_cstack_done805
    unless rx252_cstack, rx252_cstack_done805
    dec $I19
    set $P11, rx252_cstack[$I19]
  rx252_cstack_done805:
    pop rx252_rep, rx252_bstack
    pop rx252_pos, rx252_bstack
    pop $I19, rx252_bstack
    lt rx252_pos, -1, rx252_done800
    lt rx252_pos, 0, rx252_fail802
    eq $I19, 0, rx252_fail802
    nqp_islist $I20, rx252_cstack
    unless $I20, rx252_jump803
    elements $I18, rx252_bstack
    le $I18, 0, rx252_cut804
    dec $I18
    set $I18, rx252_bstack[$I18]
  rx252_cut804:
    assign rx252_cstack, $I18
  rx252_jump803:
    jump $I19
  rx252_done800:
    rx252_cur."!cursor_fail"()
    .return (rx252_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1346277629.325_caps" :subid("cuid_memo_49_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1346277629.325_nfa" :subid("cuid_memo_50_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_56_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx255_tgt
    .local int rx255_pos
    .local int rx255_off
    .local int rx255_eos
    .local int rx255_rep
    .local pmc rx255_cur
    .local pmc rx255_curclass
    .local pmc rx255_bstack
    .local pmc rx255_cstack
    (rx255_cur, rx255_tgt, rx255_pos, rx255_curclass, rx255_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx255_cur
    length rx255_eos, rx255_tgt
    eq $I19, 1, rx255_restart812
    gt rx255_pos, rx255_eos, rx255_fail813
    repr_get_attr_int $I11, self, rx255_curclass, "$!from"
    ne $I11, -1, rxscan256_done819
    goto rxscan256_scan818
  rxscan256_loop817:
    inc rx255_pos
    gt rx255_pos, rx255_eos, rx255_fail813
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!from", rx255_pos
  rxscan256_scan818:
    nqp_rxmark rx255_bstack, rxscan256_loop817, rx255_pos, 0
  rxscan256_done819:
    rx255_cur."!cursor_pass"(rx255_pos, "finishpad", 'backtrack'=>1)
    .return (rx255_cur)
  rx255_restart812:
    repr_get_attr_obj rx255_cstack, rx255_cur, rx255_curclass, "$!cstack"
  rx255_fail813:
    unless rx255_bstack, rx255_done811
    pop $I19, rx255_bstack
    if_null rx255_cstack, rx255_cstack_done816
    unless rx255_cstack, rx255_cstack_done816
    dec $I19
    set $P11, rx255_cstack[$I19]
  rx255_cstack_done816:
    pop rx255_rep, rx255_bstack
    pop rx255_pos, rx255_bstack
    pop $I19, rx255_bstack
    lt rx255_pos, -1, rx255_done811
    lt rx255_pos, 0, rx255_fail813
    eq $I19, 0, rx255_fail813
    nqp_islist $I20, rx255_cstack
    unless $I20, rx255_jump814
    elements $I18, rx255_bstack
    le $I18, 0, rx255_cut815
    dec $I18
    set $I18, rx255_bstack[$I18]
  rx255_cut815:
    assign rx255_cstack, $I18
  rx255_jump814:
    jump $I19
  rx255_done811:
    rx255_cur."!cursor_fail"()
    .return (rx255_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1346277629.325_caps" :subid("cuid_memo_51_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1346277629.325_nfa" :subid("cuid_memo_52_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_57_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 773
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx258_tgt
    .local int rx258_pos
    .local int rx258_off
    .local int rx258_eos
    .local int rx258_rep
    .local pmc rx258_cur
    .local pmc rx258_curclass
    .local pmc rx258_bstack
    .local pmc rx258_cstack
    (rx258_cur, rx258_tgt, rx258_pos, rx258_curclass, rx258_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx258_cur
    length rx258_eos, rx258_tgt
    eq $I19, 1, rx258_restart823
    gt rx258_pos, rx258_eos, rx258_fail824
    repr_get_attr_int $I11, self, rx258_curclass, "$!from"
    ne $I11, -1, rxscan259_done830
    goto rxscan259_scan829
  rxscan259_loop828:
    inc rx258_pos
    gt rx258_pos, rx258_eos, rx258_fail824
    repr_bind_attr_int rx258_cur, rx258_curclass, "$!from", rx258_pos
  rxscan259_scan829:
    nqp_rxmark rx258_bstack, rxscan259_loop828, rx258_pos, 0
  rxscan259_done830:
    rx258_cur."!cursor_pass"(rx258_pos, "you_are_here", 'backtrack'=>1)
    .return (rx258_cur)
  rx258_restart823:
    repr_get_attr_obj rx258_cstack, rx258_cur, rx258_curclass, "$!cstack"
  rx258_fail824:
    unless rx258_bstack, rx258_done822
    pop $I19, rx258_bstack
    if_null rx258_cstack, rx258_cstack_done827
    unless rx258_cstack, rx258_cstack_done827
    dec $I19
    set $P11, rx258_cstack[$I19]
  rx258_cstack_done827:
    pop rx258_rep, rx258_bstack
    pop rx258_pos, rx258_bstack
    pop $I19, rx258_bstack
    lt rx258_pos, -1, rx258_done822
    lt rx258_pos, 0, rx258_fail824
    eq $I19, 0, rx258_fail824
    nqp_islist $I20, rx258_cstack
    unless $I20, rx258_jump825
    elements $I18, rx258_bstack
    le $I18, 0, rx258_cut826
    dec $I18
    set $I18, rx258_bstack[$I18]
  rx258_cut826:
    assign rx258_cstack, $I18
  rx258_jump825:
    jump $I19
  rx258_done822:
    rx258_cur."!cursor_fail"()
    .return (rx258_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1346277629.325_caps" :subid("cuid_memo_53_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1346277629.325_nfa" :subid("cuid_memo_54_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_58_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 775
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_59_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 777
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart834
    gt rx261_pos, rx261_eos, rx261_fail835
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done841
    goto rxscan262_scan840
  rxscan262_loop839:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail835
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan840:
    nqp_rxmark rx261_bstack, rxscan262_loop839, rx261_pos, 0
  rxscan262_done841:
    ge rx261_pos, rx261_eos, rx261_fail835
    substr $S11, rx261_tgt, rx261_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx261_fail835
    rx261_cur."!cursor_pass"(rx261_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart834:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail835:
    unless rx261_bstack, rx261_done833
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done838
    unless rx261_cstack, rx261_cstack_done838
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done838:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done833
    lt rx261_pos, 0, rx261_fail835
    eq $I19, 0, rx261_fail835
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump836
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut837
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut837:
    assign rx261_cstack, $I18
  rx261_jump836:
    jump $I19
  rx261_done833:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1346277629.325_caps" :subid("cuid_memo_55_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1346277629.325_nfa" :subid("cuid_memo_56_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, ";"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_60_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 778
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx263_tgt
    .local int rx263_pos
    .local int rx263_off
    .local int rx263_eos
    .local int rx263_rep
    .local pmc rx263_cur
    .local pmc rx263_curclass
    .local pmc rx263_bstack
    .local pmc rx263_cstack
    (rx263_cur, rx263_tgt, rx263_pos, rx263_curclass, rx263_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx263_cur
    length rx263_eos, rx263_tgt
    eq $I19, 1, rx263_restart844
    gt rx263_pos, rx263_eos, rx263_fail845
    repr_get_attr_int $I11, self, rx263_curclass, "$!from"
    ne $I11, -1, rxscan264_done851
    goto rxscan264_scan850
  rxscan264_loop849:
    inc rx263_pos
    gt rx263_pos, rx263_eos, rx263_fail845
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!from", rx263_pos
  rxscan264_scan850:
    nqp_rxmark rx263_bstack, rxscan264_loop849, rx263_pos, 0
  rxscan264_done851:
    ge rx263_pos, rx263_eos, rx263_fail845
    substr $S11, rx263_tgt, rx263_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx263_fail845
    rx263_cur."!cursor_pass"(rx263_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx263_cur)
  rx263_restart844:
    repr_get_attr_obj rx263_cstack, rx263_cur, rx263_curclass, "$!cstack"
  rx263_fail845:
    unless rx263_bstack, rx263_done843
    pop $I19, rx263_bstack
    if_null rx263_cstack, rx263_cstack_done848
    unless rx263_cstack, rx263_cstack_done848
    dec $I19
    set $P11, rx263_cstack[$I19]
  rx263_cstack_done848:
    pop rx263_rep, rx263_bstack
    pop rx263_pos, rx263_bstack
    pop $I19, rx263_bstack
    lt rx263_pos, -1, rx263_done843
    lt rx263_pos, 0, rx263_fail845
    eq $I19, 0, rx263_fail845
    nqp_islist $I20, rx263_cstack
    unless $I20, rx263_jump846
    elements $I18, rx263_bstack
    le $I18, 0, rx263_cut847
    dec $I18
    set $I18, rx263_bstack[$I18]
  rx263_cut847:
    assign rx263_cstack, $I18
  rx263_jump846:
    jump $I19
  rx263_done843:
    rx263_cur."!cursor_fail"()
    .return (rx263_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1346277629.325_caps" :subid("cuid_memo_57_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1346277629.325_nfa" :subid("cuid_memo_58_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_61_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 782
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_62_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 784
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx265_tgt
    .local int rx265_pos
    .local int rx265_off
    .local int rx265_eos
    .local int rx265_rep
    .local pmc rx265_cur
    .local pmc rx265_curclass
    .local pmc rx265_bstack
    .local pmc rx265_cstack
    (rx265_cur, rx265_tgt, rx265_pos, rx265_curclass, rx265_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx265_cur
    length rx265_eos, rx265_tgt
    eq $I19, 1, rx265_restart854
    gt rx265_pos, rx265_eos, rx265_fail855
    repr_get_attr_int $I11, self, rx265_curclass, "$!from"
    ne $I11, -1, rxscan266_done861
    goto rxscan266_scan860
  rxscan266_loop859:
    inc rx265_pos
    gt rx265_pos, rx265_eos, rx265_fail855
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!from", rx265_pos
  rxscan266_scan860:
    nqp_rxmark rx265_bstack, rxscan266_loop859, rx265_pos, 0
  rxscan266_done861:
    nqp_rxmark rx265_bstack, rxcap267_fail863, rx265_pos, 0
    add $I11, rx265_pos, 3
    gt $I11, rx265_eos, rx265_fail855
    substr $S10, rx265_tgt, rx265_pos, 3
    ne $S10, ucs4:"use", rx265_fail855
    add rx265_pos, 3
    nqp_rxpeek $I19, rx265_bstack, rxcap267_fail863
    inc $I19
    set $I11, rx265_bstack[$I19]
    $P11 = rx265_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx265_pos)
    rx265_cstack = rx265_cur."!cursor_capture"($P11, "sym")
    goto rxcap267_done862
  rxcap267_fail863:
    goto rx265_fail855
  rxcap267_done862:
    ge rx265_pos, rx265_eos, rx265_fail855
    is_cclass $I11, .CCLASS_WHITESPACE, rx265_tgt, rx265_pos
    unless $I11, rx265_fail855
    add rx265_pos, 1
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."ws"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail855
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."name"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail855
    nqp_rxmark rx265_bstack, rxsubrule269_pass865, -1, 0
  rxsubrule269_pass865:
    rx265_cstack = rx265_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."ws"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail855
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    rx265_cur."!cursor_pass"(rx265_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx265_cur)
  rx265_restart854:
    repr_get_attr_obj rx265_cstack, rx265_cur, rx265_curclass, "$!cstack"
  rx265_fail855:
    unless rx265_bstack, rx265_done853
    pop $I19, rx265_bstack
    if_null rx265_cstack, rx265_cstack_done858
    unless rx265_cstack, rx265_cstack_done858
    dec $I19
    set $P11, rx265_cstack[$I19]
  rx265_cstack_done858:
    pop rx265_rep, rx265_bstack
    pop rx265_pos, rx265_bstack
    pop $I19, rx265_bstack
    lt rx265_pos, -1, rx265_done853
    lt rx265_pos, 0, rx265_fail855
    eq $I19, 0, rx265_fail855
    nqp_islist $I20, rx265_cstack
    unless $I20, rx265_jump856
    elements $I18, rx265_bstack
    le $I18, 0, rx265_cut857
    dec $I18
    set $I18, rx265_bstack[$I18]
  rx265_cut857:
    assign rx265_cstack, $I18
  rx265_jump856:
    jump $I19
  rx265_done853:
    rx265_cur."!cursor_fail"()
    .return (rx265_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1346277629.325_caps" :subid("cuid_memo_59_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1346277629.325_nfa" :subid("cuid_memo_60_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 4
    push $P5015, $P5016
    box $P5017, 32
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_63_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 788
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx271_tgt
    .local int rx271_pos
    .local int rx271_off
    .local int rx271_eos
    .local int rx271_rep
    .local pmc rx271_cur
    .local pmc rx271_curclass
    .local pmc rx271_bstack
    .local pmc rx271_cstack
    (rx271_cur, rx271_tgt, rx271_pos, rx271_curclass, rx271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx271_cur
    length rx271_eos, rx271_tgt
    eq $I19, 1, rx271_restart869
    gt rx271_pos, rx271_eos, rx271_fail870
    repr_get_attr_int $I11, self, rx271_curclass, "$!from"
    ne $I11, -1, rxscan272_done876
    goto rxscan272_scan875
  rxscan272_loop874:
    inc rx271_pos
    gt rx271_pos, rx271_eos, rx271_fail870
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!from", rx271_pos
  rxscan272_scan875:
    nqp_rxmark rx271_bstack, rxscan272_loop874, rx271_pos, 0
  rxscan272_done876:
    nqp_rxmark rx271_bstack, rxcap273_fail878, rx271_pos, 0
    add $I11, rx271_pos, 2
    gt $I11, rx271_eos, rx271_fail870
    substr $S10, rx271_tgt, rx271_pos, 2
    ne $S10, ucs4:"if", rx271_fail870
    add rx271_pos, 2
    nqp_rxpeek $I19, rx271_bstack, rxcap273_fail878
    inc $I19
    set $I11, rx271_bstack[$I19]
    $P11 = rx271_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx271_pos)
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "sym")
    goto rxcap273_done877
  rxcap273_fail878:
    goto rx271_fail870
  rxcap273_done877:
    ge rx271_pos, rx271_eos, rx271_fail870
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail870
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    nqp_rxmark rx271_bstack, rxsubrule275_pass880, -1, 0
  rxsubrule275_pass880:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxmark rx271_bstack, rxquantr277_done883, rx271_pos, 0
  rxquantr277_loop882:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    add $I11, rx271_pos, 5
    gt $I11, rx271_eos, rx271_fail870
    substr $S10, rx271_tgt, rx271_pos, 5
    ne $S10, ucs4:"elsif", rx271_fail870
    add rx271_pos, 5
    ge rx271_pos, rx271_eos, rx271_fail870
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail870
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    nqp_rxmark rx271_bstack, rxsubrule280_pass886, -1, 0
  rxsubrule280_pass886:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxpeek $I19, rx271_bstack, rxquantr277_done883
    inc $I19
    inc $I19
    set rx271_rep, rx271_bstack[$I19]
    nqp_rxcommit rx271_bstack, rxquantr277_done883
    inc rx271_rep
    nqp_rxmark rx271_bstack, rxquantr277_done883, rx271_pos, rx271_rep
    goto rxquantr277_loop882
  rxquantr277_done883:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxmark rx271_bstack, rxquantr283_done890, rx271_pos, 0
  rxquantr283_loop889:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    add $I11, rx271_pos, 4
    gt $I11, rx271_eos, rx271_fail870
    substr $S10, rx271_tgt, rx271_pos, 4
    ne $S10, ucs4:"else", rx271_fail870
    add rx271_pos, 4
    ge rx271_pos, rx271_eos, rx271_fail870
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail870
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    nqp_rxmark rx271_bstack, rxsubrule286_pass893, -1, 0
  rxsubrule286_pass893:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxpeek $I19, rx271_bstack, rxquantr283_done890
    inc $I19
    inc $I19
    set rx271_rep, rx271_bstack[$I19]
    nqp_rxcommit rx271_bstack, rxquantr283_done890
    inc rx271_rep
  rxquantr283_done890:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail870
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    rx271_cur."!cursor_pass"(rx271_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx271_cur)
  rx271_restart869:
    repr_get_attr_obj rx271_cstack, rx271_cur, rx271_curclass, "$!cstack"
  rx271_fail870:
    unless rx271_bstack, rx271_done868
    pop $I19, rx271_bstack
    if_null rx271_cstack, rx271_cstack_done873
    unless rx271_cstack, rx271_cstack_done873
    dec $I19
    set $P11, rx271_cstack[$I19]
  rx271_cstack_done873:
    pop rx271_rep, rx271_bstack
    pop rx271_pos, rx271_bstack
    pop $I19, rx271_bstack
    lt rx271_pos, -1, rx271_done868
    lt rx271_pos, 0, rx271_fail870
    eq $I19, 0, rx271_fail870
    nqp_islist $I20, rx271_cstack
    unless $I20, rx271_jump871
    elements $I18, rx271_bstack
    le $I18, 0, rx271_cut872
    dec $I18
    set $I18, rx271_bstack[$I18]
  rx271_cut872:
    assign rx271_cstack, $I18
  rx271_jump871:
    jump $I19
  rx271_done868:
    rx271_cur."!cursor_fail"()
    .return (rx271_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1346277629.325_caps" :subid("cuid_memo_61_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 2
    set $P5001["xblock"], $P5003
    box $P5004, 2
    set $P5001["else"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1346277629.325_nfa" :subid("cuid_memo_62_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 4
    push $P5011, $P5012
    box $P5013, 32
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_65_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 795
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_64_1346277629.325' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx289_tgt
    .local int rx289_pos
    .local int rx289_off
    .local int rx289_eos
    .local int rx289_rep
    .local pmc rx289_cur
    .local pmc rx289_curclass
    .local pmc rx289_bstack
    .local pmc rx289_cstack
    (rx289_cur, rx289_tgt, rx289_pos, rx289_curclass, rx289_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx289_cur
    length rx289_eos, rx289_tgt
    eq $I19, 1, rx289_restart898
    gt rx289_pos, rx289_eos, rx289_fail899
    repr_get_attr_int $I11, self, rx289_curclass, "$!from"
    ne $I11, -1, rxscan290_done905
    goto rxscan290_scan904
  rxscan290_loop903:
    inc rx289_pos
    gt rx289_pos, rx289_eos, rx289_fail899
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!from", rx289_pos
  rxscan290_scan904:
    nqp_rxmark rx289_bstack, rxscan290_loop903, rx289_pos, 0
  rxscan290_done905:
    nqp_rxmark rx289_bstack, rxcap291_fail907, rx289_pos, 0
    add $I11, rx289_pos, 6
    gt $I11, rx289_eos, rx289_fail899
    substr $S10, rx289_tgt, rx289_pos, 6
    ne $S10, ucs4:"unless", rx289_fail899
    add rx289_pos, 6
    nqp_rxpeek $I19, rx289_bstack, rxcap291_fail907
    inc $I19
    set $I11, rx289_bstack[$I19]
    $P11 = rx289_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx289_pos)
    rx289_cstack = rx289_cur."!cursor_capture"($P11, "sym")
    goto rxcap291_done906
  rxcap291_fail907:
    goto rx289_fail899
  rxcap291_done906:
    ge rx289_pos, rx289_eos, rx289_fail899
    is_cclass $I11, .CCLASS_WHITESPACE, rx289_tgt, rx289_pos
    unless $I11, rx289_fail899
    add rx289_pos, 1
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    nqp_rxmark rx289_bstack, rxsubrule293_pass909, -1, 0
  rxsubrule293_pass909:
    rx289_cstack = rx289_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
  alt295_0912:
    nqp_rxmark rx289_bstack, alt295_1925, rx289_pos, 0
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_64_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    ge $I11, 0, rx289_fail899
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    goto alt295_end911
  alt295_1925:
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
  alt295_end911:
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail899
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    rx289_cur."!cursor_pass"(rx289_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx289_cur)
  rx289_restart898:
    repr_get_attr_obj rx289_cstack, rx289_cur, rx289_curclass, "$!cstack"
  rx289_fail899:
    unless rx289_bstack, rx289_done897
    pop $I19, rx289_bstack
    if_null rx289_cstack, rx289_cstack_done902
    unless rx289_cstack, rx289_cstack_done902
    dec $I19
    set $P11, rx289_cstack[$I19]
  rx289_cstack_done902:
    pop rx289_rep, rx289_bstack
    pop rx289_pos, rx289_bstack
    pop $I19, rx289_bstack
    lt rx289_pos, -1, rx289_done897
    lt rx289_pos, 0, rx289_fail899
    eq $I19, 0, rx289_fail899
    nqp_islist $I20, rx289_cstack
    unless $I20, rx289_jump900
    elements $I18, rx289_bstack
    le $I18, 0, rx289_cut901
    dec $I18
    set $I18, rx289_bstack[$I18]
  rx289_cut901:
    assign rx289_cstack, $I18
  rx289_jump900:
    jump $I19
  rx289_done897:
    rx289_cur."!cursor_fail"()
    .return (rx289_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1346277629.325_caps" :subid("cuid_memo_63_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1346277629.325_nfa" :subid("cuid_memo_64_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_64_1346277629.325") :anon :lex :outer("cuid_65_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx297_tgt
    .local int rx297_pos
    .local int rx297_off
    .local int rx297_eos
    .local int rx297_rep
    .local pmc rx297_cur
    .local pmc rx297_curclass
    .local pmc rx297_bstack
    .local pmc rx297_cstack
    (rx297_cur, rx297_tgt, rx297_pos, rx297_curclass, rx297_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx297_cur
    length rx297_eos, rx297_tgt
    eq $I19, 1, rx297_restart916
    gt rx297_pos, rx297_eos, rx297_fail917
    repr_get_attr_int $I11, self, rx297_curclass, "$!from"
    ne $I11, -1, rxscan298_done923
    goto rxscan298_scan922
  rxscan298_loop921:
    inc rx297_pos
    gt rx297_pos, rx297_eos, rx297_fail917
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!from", rx297_pos
  rxscan298_scan922:
    nqp_rxmark rx297_bstack, rxscan298_loop921, rx297_pos, 0
  rxscan298_done923:
    add $I11, rx297_pos, 4
    gt $I11, rx297_eos, rx297_fail917
    substr $S10, rx297_tgt, rx297_pos, 4
    ne $S10, ucs4:"else", rx297_fail917
    add rx297_pos, 4
    rx297_cur."!cursor_pass"(rx297_pos, 'backtrack'=>1)
    .return (rx297_cur)
  rx297_restart916:
    repr_get_attr_obj rx297_cstack, rx297_cur, rx297_curclass, "$!cstack"
  rx297_fail917:
    unless rx297_bstack, rx297_done915
    pop $I19, rx297_bstack
    if_null rx297_cstack, rx297_cstack_done920
    unless rx297_cstack, rx297_cstack_done920
    dec $I19
    set $P11, rx297_cstack[$I19]
  rx297_cstack_done920:
    pop rx297_rep, rx297_bstack
    pop rx297_pos, rx297_bstack
    pop $I19, rx297_bstack
    lt rx297_pos, -1, rx297_done915
    lt rx297_pos, 0, rx297_fail917
    eq $I19, 0, rx297_fail917
    nqp_islist $I20, rx297_cstack
    unless $I20, rx297_jump918
    elements $I18, rx297_bstack
    le $I18, 0, rx297_cut919
    dec $I18
    set $I18, rx297_bstack[$I18]
  rx297_cut919:
    assign rx297_cstack, $I18
  rx297_jump918:
    jump $I19
  rx297_done915:
    rx297_cur."!cursor_fail"()
    .return (rx297_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1346277629.325_caps" :subid("cuid_memo_65_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1346277629.325_nfa" :subid("cuid_memo_66_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 108
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_66_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 801
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx304_tgt
    .local int rx304_pos
    .local int rx304_off
    .local int rx304_eos
    .local int rx304_rep
    .local pmc rx304_cur
    .local pmc rx304_curclass
    .local pmc rx304_bstack
    .local pmc rx304_cstack
    (rx304_cur, rx304_tgt, rx304_pos, rx304_curclass, rx304_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx304_cur
    length rx304_eos, rx304_tgt
    eq $I19, 1, rx304_restart932
    gt rx304_pos, rx304_eos, rx304_fail933
    repr_get_attr_int $I11, self, rx304_curclass, "$!from"
    ne $I11, -1, rxscan305_done939
    goto rxscan305_scan938
  rxscan305_loop937:
    inc rx304_pos
    gt rx304_pos, rx304_eos, rx304_fail933
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!from", rx304_pos
  rxscan305_scan938:
    nqp_rxmark rx304_bstack, rxscan305_loop937, rx304_pos, 0
  rxscan305_done939:
    nqp_rxmark rx304_bstack, rxcap306_fail941, rx304_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt307_0943
    nqp_push_label $P11, alt307_1944
    nqp_rxmark rx304_bstack, alt307_end942, -1, 0
    rx304_cur."!alt"(rx304_pos, "alt_nfa__12_1346277632.169", $P11)
    goto rx304_fail933
  alt307_0943:
    add $I11, rx304_pos, 5
    gt $I11, rx304_eos, rx304_fail933
    substr $S10, rx304_tgt, rx304_pos, 5
    ne $S10, ucs4:"while", rx304_fail933
    add rx304_pos, 5
    goto alt307_end942
  alt307_1944:
    add $I11, rx304_pos, 5
    gt $I11, rx304_eos, rx304_fail933
    substr $S10, rx304_tgt, rx304_pos, 5
    ne $S10, ucs4:"until", rx304_fail933
    add rx304_pos, 5
    goto alt307_end942
  alt307_end942:
    nqp_rxcommit rx304_bstack, alt307_end942
    nqp_rxpeek $I19, rx304_bstack, rxcap306_fail941
    inc $I19
    set $I11, rx304_bstack[$I19]
    $P11 = rx304_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx304_pos)
    rx304_cstack = rx304_cur."!cursor_capture"($P11, "sym")
    goto rxcap306_done940
  rxcap306_fail941:
    goto rx304_fail933
  rxcap306_done940:
    ge rx304_pos, rx304_eos, rx304_fail933
    is_cclass $I11, .CCLASS_WHITESPACE, rx304_tgt, rx304_pos
    unless $I11, rx304_fail933
    add rx304_pos, 1
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."ws"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail933
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail933
    nqp_rxmark rx304_bstack, rxsubrule309_pass946, -1, 0
  rxsubrule309_pass946:
    rx304_cstack = rx304_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."ws"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail933
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    rx304_cur."!cursor_pass"(rx304_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx304_cur)
  rx304_restart932:
    repr_get_attr_obj rx304_cstack, rx304_cur, rx304_curclass, "$!cstack"
  rx304_fail933:
    unless rx304_bstack, rx304_done931
    pop $I19, rx304_bstack
    if_null rx304_cstack, rx304_cstack_done936
    unless rx304_cstack, rx304_cstack_done936
    dec $I19
    set $P11, rx304_cstack[$I19]
  rx304_cstack_done936:
    pop rx304_rep, rx304_bstack
    pop rx304_pos, rx304_bstack
    pop $I19, rx304_bstack
    lt rx304_pos, -1, rx304_done931
    lt rx304_pos, 0, rx304_fail933
    eq $I19, 0, rx304_fail933
    nqp_islist $I20, rx304_cstack
    unless $I20, rx304_jump934
    elements $I18, rx304_bstack
    le $I18, 0, rx304_cut935
    dec $I18
    set $I18, rx304_bstack[$I18]
  rx304_cut935:
    assign rx304_cstack, $I18
  rx304_jump934:
    jump $I19
  rx304_done931:
    rx304_cur."!cursor_fail"()
    .return (rx304_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346277629.325_caps" :subid("cuid_memo_67_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346277629.325_nfa" :subid("cuid_memo_68_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 119
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 117
    push $P5003, $P5008
    box $P5009, 7
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 104
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 105
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 108
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 101
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 4
    push $P5026, $P5027
    box $P5028, 32
    push $P5026, $P5028
    box $P5029, 11
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 8
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 9
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 10
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 6
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 0
    push $P5046, $P5047
    box $P5048, 0
    push $P5046, $P5048
    box $P5049, 0
    push $P5046, $P5049
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346277629.325_alt_nfa__12_1346277632.169" :subid("cuid_memo_69_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_67_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 806
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx311_tgt
    .local int rx311_pos
    .local int rx311_off
    .local int rx311_eos
    .local int rx311_rep
    .local pmc rx311_cur
    .local pmc rx311_curclass
    .local pmc rx311_bstack
    .local pmc rx311_cstack
    (rx311_cur, rx311_tgt, rx311_pos, rx311_curclass, rx311_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx311_cur
    length rx311_eos, rx311_tgt
    eq $I19, 1, rx311_restart950
    gt rx311_pos, rx311_eos, rx311_fail951
    repr_get_attr_int $I11, self, rx311_curclass, "$!from"
    ne $I11, -1, rxscan312_done957
    goto rxscan312_scan956
  rxscan312_loop955:
    inc rx311_pos
    gt rx311_pos, rx311_eos, rx311_fail951
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!from", rx311_pos
  rxscan312_scan956:
    nqp_rxmark rx311_bstack, rxscan312_loop955, rx311_pos, 0
  rxscan312_done957:
    nqp_rxmark rx311_bstack, rxcap313_fail959, rx311_pos, 0
    add $I11, rx311_pos, 6
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 6
    ne $S10, ucs4:"repeat", rx311_fail951
    add rx311_pos, 6
    nqp_rxpeek $I19, rx311_bstack, rxcap313_fail959
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "sym")
    goto rxcap313_done958
  rxcap313_fail959:
    goto rx311_fail951
  rxcap313_done958:
    ge rx311_pos, rx311_eos, rx311_fail951
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail951
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt315_0962
    nqp_push_label $P11, alt315_1972
    nqp_rxmark rx311_bstack, alt315_end961, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__13_1346277632.203", $P11)
    goto rx311_fail951
  alt315_0962:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    nqp_rxmark rx311_bstack, rxcap317_fail965, rx311_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt318_0967
    nqp_push_label $P11, alt318_1968
    nqp_rxmark rx311_bstack, alt318_end966, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__14_1346277632.203", $P11)
    goto rx311_fail951
  alt318_0967:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"while", rx311_fail951
    add rx311_pos, 5
    goto alt318_end966
  alt318_1968:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"until", rx311_fail951
    add rx311_pos, 5
    goto alt318_end966
  alt318_end966:
    nqp_rxcommit rx311_bstack, alt318_end966
    nqp_rxpeek $I19, rx311_bstack, rxcap317_fail965
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "wu")
    goto rxcap317_done964
  rxcap317_fail965:
    goto rx311_fail951
  rxcap317_done964:
    ge rx311_pos, rx311_eos, rx311_fail951
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail951
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    nqp_rxmark rx311_bstack, rxsubrule320_pass970, -1, 0
  rxsubrule320_pass970:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    goto alt315_end961
  alt315_1972:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    nqp_rxmark rx311_bstack, rxsubrule323_pass974, -1, 0
  rxsubrule323_pass974:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    nqp_rxmark rx311_bstack, rxcap325_fail977, rx311_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt326_0979
    nqp_push_label $P11, alt326_1980
    nqp_rxmark rx311_bstack, alt326_end978, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__15_1346277632.206", $P11)
    goto rx311_fail951
  alt326_0979:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"while", rx311_fail951
    add rx311_pos, 5
    goto alt326_end978
  alt326_1980:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail951
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"until", rx311_fail951
    add rx311_pos, 5
    goto alt326_end978
  alt326_end978:
    nqp_rxcommit rx311_bstack, alt326_end978
    nqp_rxpeek $I19, rx311_bstack, rxcap325_fail977
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "wu")
    goto rxcap325_done976
  rxcap325_fail977:
    goto rx311_fail951
  rxcap325_done976:
    ge rx311_pos, rx311_eos, rx311_fail951
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail951
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    nqp_rxmark rx311_bstack, rxsubrule328_pass982, -1, 0
  rxsubrule328_pass982:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    goto alt315_end961
  alt315_end961:
    nqp_rxcommit rx311_bstack, alt315_end961
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail951
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    rx311_cur."!cursor_pass"(rx311_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx311_cur)
  rx311_restart950:
    repr_get_attr_obj rx311_cstack, rx311_cur, rx311_curclass, "$!cstack"
  rx311_fail951:
    unless rx311_bstack, rx311_done949
    pop $I19, rx311_bstack
    if_null rx311_cstack, rx311_cstack_done954
    unless rx311_cstack, rx311_cstack_done954
    dec $I19
    set $P11, rx311_cstack[$I19]
  rx311_cstack_done954:
    pop rx311_rep, rx311_bstack
    pop rx311_pos, rx311_bstack
    pop $I19, rx311_bstack
    lt rx311_pos, -1, rx311_done949
    lt rx311_pos, 0, rx311_fail951
    eq $I19, 0, rx311_fail951
    nqp_islist $I20, rx311_cstack
    unless $I20, rx311_jump952
    elements $I18, rx311_bstack
    le $I18, 0, rx311_cut953
    dec $I18
    set $I18, rx311_bstack[$I18]
  rx311_cut953:
    assign rx311_cstack, $I18
  rx311_jump952:
    jump $I19
  rx311_done949:
    rx311_cur."!cursor_fail"()
    .return (rx311_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346277629.325_caps" :subid("cuid_memo_70_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["wu"], $P5003
    box $P5004, 0
    set $P5001["xblock"], $P5004
    box $P5005, 0
    set $P5001["pblock"], $P5005
    box $P5006, 0
    set $P5001["EXPR"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346277629.325_nfa" :subid("cuid_memo_71_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 112
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 116
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346277629.325_alt_nfa__14_1346277632.203" :subid("cuid_memo_72_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346277629.325_alt_nfa__15_1346277632.206" :subid("cuid_memo_73_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346277629.325_alt_nfa__13_1346277632.203" :subid("cuid_memo_74_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_68_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx331_tgt
    .local int rx331_pos
    .local int rx331_off
    .local int rx331_eos
    .local int rx331_rep
    .local pmc rx331_cur
    .local pmc rx331_curclass
    .local pmc rx331_bstack
    .local pmc rx331_cstack
    (rx331_cur, rx331_tgt, rx331_pos, rx331_curclass, rx331_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx331_cur
    length rx331_eos, rx331_tgt
    eq $I19, 1, rx331_restart987
    gt rx331_pos, rx331_eos, rx331_fail988
    repr_get_attr_int $I11, self, rx331_curclass, "$!from"
    ne $I11, -1, rxscan332_done994
    goto rxscan332_scan993
  rxscan332_loop992:
    inc rx331_pos
    gt rx331_pos, rx331_eos, rx331_fail988
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!from", rx331_pos
  rxscan332_scan993:
    nqp_rxmark rx331_bstack, rxscan332_loop992, rx331_pos, 0
  rxscan332_done994:
    nqp_rxmark rx331_bstack, rxcap333_fail996, rx331_pos, 0
    add $I11, rx331_pos, 3
    gt $I11, rx331_eos, rx331_fail988
    substr $S10, rx331_tgt, rx331_pos, 3
    ne $S10, ucs4:"for", rx331_fail988
    add rx331_pos, 3
    nqp_rxpeek $I19, rx331_bstack, rxcap333_fail996
    inc $I19
    set $I11, rx331_bstack[$I19]
    $P11 = rx331_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx331_pos)
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "sym")
    goto rxcap333_done995
  rxcap333_fail996:
    goto rx331_fail988
  rxcap333_done995:
    ge rx331_pos, rx331_eos, rx331_fail988
    is_cclass $I11, .CCLASS_WHITESPACE, rx331_tgt, rx331_pos
    unless $I11, rx331_fail988
    add rx331_pos, 1
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."ws"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail988
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail988
    nqp_rxmark rx331_bstack, rxsubrule335_pass998, -1, 0
  rxsubrule335_pass998:
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."ws"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail988
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    rx331_cur."!cursor_pass"(rx331_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx331_cur)
  rx331_restart987:
    repr_get_attr_obj rx331_cstack, rx331_cur, rx331_curclass, "$!cstack"
  rx331_fail988:
    unless rx331_bstack, rx331_done986
    pop $I19, rx331_bstack
    if_null rx331_cstack, rx331_cstack_done991
    unless rx331_cstack, rx331_cstack_done991
    dec $I19
    set $P11, rx331_cstack[$I19]
  rx331_cstack_done991:
    pop rx331_rep, rx331_bstack
    pop rx331_pos, rx331_bstack
    pop $I19, rx331_bstack
    lt rx331_pos, -1, rx331_done986
    lt rx331_pos, 0, rx331_fail988
    eq $I19, 0, rx331_fail988
    nqp_islist $I20, rx331_cstack
    unless $I20, rx331_jump989
    elements $I18, rx331_bstack
    le $I18, 0, rx331_cut990
    dec $I18
    set $I18, rx331_bstack[$I18]
  rx331_cut990:
    assign rx331_cstack, $I18
  rx331_jump989:
    jump $I19
  rx331_done986:
    rx331_cur."!cursor_fail"()
    .return (rx331_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1346277629.325_caps" :subid("cuid_memo_75_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1346277629.325_nfa" :subid("cuid_memo_76_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 102
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 111
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 4
    push $P5015, $P5016
    box $P5017, 32
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_69_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx337_tgt
    .local int rx337_pos
    .local int rx337_off
    .local int rx337_eos
    .local int rx337_rep
    .local pmc rx337_cur
    .local pmc rx337_curclass
    .local pmc rx337_bstack
    .local pmc rx337_cstack
    (rx337_cur, rx337_tgt, rx337_pos, rx337_curclass, rx337_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx337_cur
    length rx337_eos, rx337_tgt
    eq $I19, 1, rx337_restart1002
    gt rx337_pos, rx337_eos, rx337_fail1003
    repr_get_attr_int $I11, self, rx337_curclass, "$!from"
    ne $I11, -1, rxscan338_done1009
    goto rxscan338_scan1008
  rxscan338_loop1007:
    inc rx337_pos
    gt rx337_pos, rx337_eos, rx337_fail1003
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!from", rx337_pos
  rxscan338_scan1008:
    nqp_rxmark rx337_bstack, rxscan338_loop1007, rx337_pos, 0
  rxscan338_done1009:
    nqp_rxmark rx337_bstack, rxcap339_fail1011, rx337_pos, 0
    add $I11, rx337_pos, 5
    gt $I11, rx337_eos, rx337_fail1003
    substr $S10, rx337_tgt, rx337_pos, 5
    ne $S10, ucs4:"CATCH", rx337_fail1003
    add rx337_pos, 5
    nqp_rxpeek $I19, rx337_bstack, rxcap339_fail1011
    inc $I19
    set $I11, rx337_bstack[$I19]
    $P11 = rx337_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx337_pos)
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "sym")
    goto rxcap339_done1010
  rxcap339_fail1011:
    goto rx337_fail1003
  rxcap339_done1010:
    ge rx337_pos, rx337_eos, rx337_fail1003
    is_cclass $I11, .CCLASS_WHITESPACE, rx337_tgt, rx337_pos
    unless $I11, rx337_fail1003
    add rx337_pos, 1
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."ws"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1003
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."block"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1003
    nqp_rxmark rx337_bstack, rxsubrule341_pass1013, -1, 0
  rxsubrule341_pass1013:
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."ws"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail1003
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    rx337_cur."!cursor_pass"(rx337_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx337_cur)
  rx337_restart1002:
    repr_get_attr_obj rx337_cstack, rx337_cur, rx337_curclass, "$!cstack"
  rx337_fail1003:
    unless rx337_bstack, rx337_done1001
    pop $I19, rx337_bstack
    if_null rx337_cstack, rx337_cstack_done1006
    unless rx337_cstack, rx337_cstack_done1006
    dec $I19
    set $P11, rx337_cstack[$I19]
  rx337_cstack_done1006:
    pop rx337_rep, rx337_bstack
    pop rx337_pos, rx337_bstack
    pop $I19, rx337_bstack
    lt rx337_pos, -1, rx337_done1001
    lt rx337_pos, 0, rx337_fail1003
    eq $I19, 0, rx337_fail1003
    nqp_islist $I20, rx337_cstack
    unless $I20, rx337_jump1004
    elements $I18, rx337_bstack
    le $I18, 0, rx337_cut1005
    dec $I18
    set $I18, rx337_bstack[$I18]
  rx337_cut1005:
    assign rx337_cstack, $I18
  rx337_jump1004:
    jump $I19
  rx337_done1001:
    rx337_cur."!cursor_fail"()
    .return (rx337_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1346277629.325_caps" :subid("cuid_memo_77_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1346277629.325_nfa" :subid("cuid_memo_78_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 65
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 84
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 67
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 72
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 32
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_70_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 824
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx343_tgt
    .local int rx343_pos
    .local int rx343_off
    .local int rx343_eos
    .local int rx343_rep
    .local pmc rx343_cur
    .local pmc rx343_curclass
    .local pmc rx343_bstack
    .local pmc rx343_cstack
    (rx343_cur, rx343_tgt, rx343_pos, rx343_curclass, rx343_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx343_cur
    length rx343_eos, rx343_tgt
    eq $I19, 1, rx343_restart1017
    gt rx343_pos, rx343_eos, rx343_fail1018
    repr_get_attr_int $I11, self, rx343_curclass, "$!from"
    ne $I11, -1, rxscan344_done1024
    goto rxscan344_scan1023
  rxscan344_loop1022:
    inc rx343_pos
    gt rx343_pos, rx343_eos, rx343_fail1018
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!from", rx343_pos
  rxscan344_scan1023:
    nqp_rxmark rx343_bstack, rxscan344_loop1022, rx343_pos, 0
  rxscan344_done1024:
    nqp_rxmark rx343_bstack, rxcap345_fail1026, rx343_pos, 0
    add $I11, rx343_pos, 7
    gt $I11, rx343_eos, rx343_fail1018
    substr $S10, rx343_tgt, rx343_pos, 7
    ne $S10, ucs4:"CONTROL", rx343_fail1018
    add rx343_pos, 7
    nqp_rxpeek $I19, rx343_bstack, rxcap345_fail1026
    inc $I19
    set $I11, rx343_bstack[$I19]
    $P11 = rx343_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx343_pos)
    rx343_cstack = rx343_cur."!cursor_capture"($P11, "sym")
    goto rxcap345_done1025
  rxcap345_fail1026:
    goto rx343_fail1018
  rxcap345_done1025:
    ge rx343_pos, rx343_eos, rx343_fail1018
    is_cclass $I11, .CCLASS_WHITESPACE, rx343_tgt, rx343_pos
    unless $I11, rx343_fail1018
    add rx343_pos, 1
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."ws"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1018
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."block"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1018
    nqp_rxmark rx343_bstack, rxsubrule347_pass1028, -1, 0
  rxsubrule347_pass1028:
    rx343_cstack = rx343_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."ws"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1018
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    rx343_cur."!cursor_pass"(rx343_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx343_cur)
  rx343_restart1017:
    repr_get_attr_obj rx343_cstack, rx343_cur, rx343_curclass, "$!cstack"
  rx343_fail1018:
    unless rx343_bstack, rx343_done1016
    pop $I19, rx343_bstack
    if_null rx343_cstack, rx343_cstack_done1021
    unless rx343_cstack, rx343_cstack_done1021
    dec $I19
    set $P11, rx343_cstack[$I19]
  rx343_cstack_done1021:
    pop rx343_rep, rx343_bstack
    pop rx343_pos, rx343_bstack
    pop $I19, rx343_bstack
    lt rx343_pos, -1, rx343_done1016
    lt rx343_pos, 0, rx343_fail1018
    eq $I19, 0, rx343_fail1018
    nqp_islist $I20, rx343_cstack
    unless $I20, rx343_jump1019
    elements $I18, rx343_bstack
    le $I18, 0, rx343_cut1020
    dec $I18
    set $I18, rx343_bstack[$I18]
  rx343_cut1020:
    assign rx343_cstack, $I18
  rx343_jump1019:
    jump $I19
  rx343_done1016:
    rx343_cur."!cursor_fail"()
    .return (rx343_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1346277629.325_caps" :subid("cuid_memo_79_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1346277629.325_nfa" :subid("cuid_memo_80_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 79
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 78
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 79
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 76
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_71_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 829
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_72_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx349_tgt
    .local int rx349_pos
    .local int rx349_off
    .local int rx349_eos
    .local int rx349_rep
    .local pmc rx349_cur
    .local pmc rx349_curclass
    .local pmc rx349_bstack
    .local pmc rx349_cstack
    (rx349_cur, rx349_tgt, rx349_pos, rx349_curclass, rx349_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx349_cur
    length rx349_eos, rx349_tgt
    eq $I19, 1, rx349_restart1032
    gt rx349_pos, rx349_eos, rx349_fail1033
    repr_get_attr_int $I11, self, rx349_curclass, "$!from"
    ne $I11, -1, rxscan350_done1039
    goto rxscan350_scan1038
  rxscan350_loop1037:
    inc rx349_pos
    gt rx349_pos, rx349_eos, rx349_fail1033
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!from", rx349_pos
  rxscan350_scan1038:
    nqp_rxmark rx349_bstack, rxscan350_loop1037, rx349_pos, 0
  rxscan350_done1039:
    nqp_rxmark rx349_bstack, rxcap351_fail1041, rx349_pos, 0
    add $I11, rx349_pos, 5
    gt $I11, rx349_eos, rx349_fail1033
    substr $S10, rx349_tgt, rx349_pos, 5
    ne $S10, ucs4:"BEGIN", rx349_fail1033
    add rx349_pos, 5
    nqp_rxpeek $I19, rx349_bstack, rxcap351_fail1041
    inc $I19
    set $I11, rx349_bstack[$I19]
    $P11 = rx349_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx349_pos)
    rx349_cstack = rx349_cur."!cursor_capture"($P11, "sym")
    goto rxcap351_done1040
  rxcap351_fail1041:
    goto rx349_fail1033
  rxcap351_done1040:
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!pos", rx349_pos
    $P11 = rx349_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx349_curclass, "$!pos"
    lt $I11, 0, rx349_fail1033
    nqp_rxmark rx349_bstack, rxsubrule352_pass1042, -1, 0
  rxsubrule352_pass1042:
    rx349_cstack = rx349_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx349_pos, $P11, rx349_curclass, "$!pos"
    rx349_cur."!cursor_pass"(rx349_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx349_cur)
  rx349_restart1032:
    repr_get_attr_obj rx349_cstack, rx349_cur, rx349_curclass, "$!cstack"
  rx349_fail1033:
    unless rx349_bstack, rx349_done1031
    pop $I19, rx349_bstack
    if_null rx349_cstack, rx349_cstack_done1036
    unless rx349_cstack, rx349_cstack_done1036
    dec $I19
    set $P11, rx349_cstack[$I19]
  rx349_cstack_done1036:
    pop rx349_rep, rx349_bstack
    pop rx349_pos, rx349_bstack
    pop $I19, rx349_bstack
    lt rx349_pos, -1, rx349_done1031
    lt rx349_pos, 0, rx349_fail1033
    eq $I19, 0, rx349_fail1033
    nqp_islist $I20, rx349_cstack
    unless $I20, rx349_jump1034
    elements $I18, rx349_bstack
    le $I18, 0, rx349_cut1035
    dec $I18
    set $I18, rx349_bstack[$I18]
  rx349_cut1035:
    assign rx349_cstack, $I18
  rx349_jump1034:
    jump $I19
  rx349_done1031:
    rx349_cur."!cursor_fail"()
    .return (rx349_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1346277629.325_caps" :subid("cuid_memo_81_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1346277629.325_nfa" :subid("cuid_memo_82_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 66
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 69
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 71
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 78
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "blorst"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_73_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 831
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx353_tgt
    .local int rx353_pos
    .local int rx353_off
    .local int rx353_eos
    .local int rx353_rep
    .local pmc rx353_cur
    .local pmc rx353_curclass
    .local pmc rx353_bstack
    .local pmc rx353_cstack
    (rx353_cur, rx353_tgt, rx353_pos, rx353_curclass, rx353_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx353_cur
    length rx353_eos, rx353_tgt
    eq $I19, 1, rx353_restart1045
    gt rx353_pos, rx353_eos, rx353_fail1046
    repr_get_attr_int $I11, self, rx353_curclass, "$!from"
    ne $I11, -1, rxscan354_done1052
    goto rxscan354_scan1051
  rxscan354_loop1050:
    inc rx353_pos
    gt rx353_pos, rx353_eos, rx353_fail1046
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!from", rx353_pos
  rxscan354_scan1051:
    nqp_rxmark rx353_bstack, rxscan354_loop1050, rx353_pos, 0
  rxscan354_done1052:
    nqp_rxmark rx353_bstack, rxcap355_fail1054, rx353_pos, 0
    add $I11, rx353_pos, 4
    gt $I11, rx353_eos, rx353_fail1046
    substr $S10, rx353_tgt, rx353_pos, 4
    ne $S10, ucs4:"INIT", rx353_fail1046
    add rx353_pos, 4
    nqp_rxpeek $I19, rx353_bstack, rxcap355_fail1054
    inc $I19
    set $I11, rx353_bstack[$I19]
    $P11 = rx353_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx353_pos)
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "sym")
    goto rxcap355_done1053
  rxcap355_fail1054:
    goto rx353_fail1046
  rxcap355_done1053:
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx353_curclass, "$!pos"
    lt $I11, 0, rx353_fail1046
    nqp_rxmark rx353_bstack, rxsubrule356_pass1055, -1, 0
  rxsubrule356_pass1055:
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx353_pos, $P11, rx353_curclass, "$!pos"
    rx353_cur."!cursor_pass"(rx353_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx353_cur)
  rx353_restart1045:
    repr_get_attr_obj rx353_cstack, rx353_cur, rx353_curclass, "$!cstack"
  rx353_fail1046:
    unless rx353_bstack, rx353_done1044
    pop $I19, rx353_bstack
    if_null rx353_cstack, rx353_cstack_done1049
    unless rx353_cstack, rx353_cstack_done1049
    dec $I19
    set $P11, rx353_cstack[$I19]
  rx353_cstack_done1049:
    pop rx353_rep, rx353_bstack
    pop rx353_pos, rx353_bstack
    pop $I19, rx353_bstack
    lt rx353_pos, -1, rx353_done1044
    lt rx353_pos, 0, rx353_fail1046
    eq $I19, 0, rx353_fail1046
    nqp_islist $I20, rx353_cstack
    unless $I20, rx353_jump1047
    elements $I18, rx353_bstack
    le $I18, 0, rx353_cut1048
    dec $I18
    set $I18, rx353_bstack[$I18]
  rx353_cut1048:
    assign rx353_cstack, $I18
  rx353_jump1047:
    jump $I19
  rx353_done1044:
    rx353_cur."!cursor_fail"()
    .return (rx353_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1346277629.325_caps" :subid("cuid_memo_83_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1346277629.325_nfa" :subid("cuid_memo_84_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 73
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 78
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 73
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "blorst"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_74_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 833
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx357_tgt
    .local int rx357_pos
    .local int rx357_off
    .local int rx357_eos
    .local int rx357_rep
    .local pmc rx357_cur
    .local pmc rx357_curclass
    .local pmc rx357_bstack
    .local pmc rx357_cstack
    (rx357_cur, rx357_tgt, rx357_pos, rx357_curclass, rx357_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx357_cur
    length rx357_eos, rx357_tgt
    eq $I19, 1, rx357_restart1058
    gt rx357_pos, rx357_eos, rx357_fail1059
    repr_get_attr_int $I11, self, rx357_curclass, "$!from"
    ne $I11, -1, rxscan358_done1065
    goto rxscan358_scan1064
  rxscan358_loop1063:
    inc rx357_pos
    gt rx357_pos, rx357_eos, rx357_fail1059
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!from", rx357_pos
  rxscan358_scan1064:
    nqp_rxmark rx357_bstack, rxscan358_loop1063, rx357_pos, 0
  rxscan358_done1065:
    nqp_rxmark rx357_bstack, rxcap359_fail1067, rx357_pos, 0
    add $I11, rx357_pos, 3
    gt $I11, rx357_eos, rx357_fail1059
    substr $S10, rx357_tgt, rx357_pos, 3
    ne $S10, ucs4:"try", rx357_fail1059
    add rx357_pos, 3
    nqp_rxpeek $I19, rx357_bstack, rxcap359_fail1067
    inc $I19
    set $I11, rx357_bstack[$I19]
    $P11 = rx357_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx357_pos)
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "sym")
    goto rxcap359_done1066
  rxcap359_fail1067:
    goto rx357_fail1059
  rxcap359_done1066:
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail1059
    nqp_rxmark rx357_bstack, rxsubrule360_pass1068, -1, 0
  rxsubrule360_pass1068:
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx357_pos, $P11, rx357_curclass, "$!pos"
    rx357_cur."!cursor_pass"(rx357_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx357_cur)
  rx357_restart1058:
    repr_get_attr_obj rx357_cstack, rx357_cur, rx357_curclass, "$!cstack"
  rx357_fail1059:
    unless rx357_bstack, rx357_done1057
    pop $I19, rx357_bstack
    if_null rx357_cstack, rx357_cstack_done1062
    unless rx357_cstack, rx357_cstack_done1062
    dec $I19
    set $P11, rx357_cstack[$I19]
  rx357_cstack_done1062:
    pop rx357_rep, rx357_bstack
    pop rx357_pos, rx357_bstack
    pop $I19, rx357_bstack
    lt rx357_pos, -1, rx357_done1057
    lt rx357_pos, 0, rx357_fail1059
    eq $I19, 0, rx357_fail1059
    nqp_islist $I20, rx357_cstack
    unless $I20, rx357_jump1060
    elements $I18, rx357_bstack
    le $I18, 0, rx357_cut1061
    dec $I18
    set $I18, rx357_bstack[$I18]
  rx357_cut1061:
    assign rx357_cstack, $I18
  rx357_jump1060:
    jump $I19
  rx357_done1057:
    rx357_cur."!cursor_fail"()
    .return (rx357_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1346277629.325_caps" :subid("cuid_memo_85_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1346277629.325_nfa" :subid("cuid_memo_86_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 116
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 121
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "blorst"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_75_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 838
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx361_tgt
    .local int rx361_pos
    .local int rx361_off
    .local int rx361_eos
    .local int rx361_rep
    .local pmc rx361_cur
    .local pmc rx361_curclass
    .local pmc rx361_bstack
    .local pmc rx361_cstack
    (rx361_cur, rx361_tgt, rx361_pos, rx361_curclass, rx361_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx361_cur
    length rx361_eos, rx361_tgt
    eq $I19, 1, rx361_restart1071
    gt rx361_pos, rx361_eos, rx361_fail1072
    repr_get_attr_int $I11, self, rx361_curclass, "$!from"
    ne $I11, -1, rxscan362_done1078
    goto rxscan362_scan1077
  rxscan362_loop1076:
    inc rx361_pos
    gt rx361_pos, rx361_eos, rx361_fail1072
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!from", rx361_pos
  rxscan362_scan1077:
    nqp_rxmark rx361_bstack, rxscan362_loop1076, rx361_pos, 0
  rxscan362_done1078:
    ge rx361_pos, rx361_eos, rx361_fail1072
    is_cclass $I11, .CCLASS_WHITESPACE, rx361_tgt, rx361_pos
    unless $I11, rx361_fail1072
    add rx361_pos, 1
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."ws"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1072
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt364_01081
    nqp_push_label $P11, alt364_11083
    nqp_rxmark rx361_bstack, alt364_end1080, -1, 0
    rx361_cur."!alt"(rx361_pos, "alt_nfa__16_1346277632.359", $P11)
    goto rx361_fail1072
  alt364_01081:
    ge rx361_pos, rx361_eos, rx361_fail1072
    substr $S11, rx361_tgt, rx361_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx361_fail1072
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."block"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1072
    nqp_rxmark rx361_bstack, rxsubrule365_pass1082, -1, 0
  rxsubrule365_pass1082:
    rx361_cstack = rx361_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    goto alt364_end1080
  alt364_11083:
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."statement"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1072
    nqp_rxmark rx361_bstack, rxsubrule366_pass1084, -1, 0
  rxsubrule366_pass1084:
    rx361_cstack = rx361_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    goto alt364_end1080
  alt364_end1080:
    nqp_rxcommit rx361_bstack, alt364_end1080
    rx361_cur."!cursor_pass"(rx361_pos, "blorst", 'backtrack'=>1)
    .return (rx361_cur)
  rx361_restart1071:
    repr_get_attr_obj rx361_cstack, rx361_cur, rx361_curclass, "$!cstack"
  rx361_fail1072:
    unless rx361_bstack, rx361_done1070
    pop $I19, rx361_bstack
    if_null rx361_cstack, rx361_cstack_done1075
    unless rx361_cstack, rx361_cstack_done1075
    dec $I19
    set $P11, rx361_cstack[$I19]
  rx361_cstack_done1075:
    pop rx361_rep, rx361_bstack
    pop rx361_pos, rx361_bstack
    pop $I19, rx361_bstack
    lt rx361_pos, -1, rx361_done1070
    lt rx361_pos, 0, rx361_fail1072
    eq $I19, 0, rx361_fail1072
    nqp_islist $I20, rx361_cstack
    unless $I20, rx361_jump1073
    elements $I18, rx361_bstack
    le $I18, 0, rx361_cut1074
    dec $I18
    set $I18, rx361_bstack[$I18]
  rx361_cut1074:
    assign rx361_cstack, $I18
  rx361_jump1073:
    jump $I19
  rx361_done1070:
    rx361_cur."!cursor_fail"()
    .return (rx361_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346277629.325_caps" :subid("cuid_memo_87_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    box $P5003, 0
    set $P5001["statement"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346277629.325_nfa" :subid("cuid_memo_88_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 6
    push $P5011, $P5012
    box $P5013, "{"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 8
    push $P5011, $P5015
    box $P5016, "statement"
    push $P5011, $P5016
    box $P5017, 0
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346277629.325_alt_nfa__16_1346277632.359" :subid("cuid_memo_89_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "{"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "statement"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_76_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 844
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_77_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 846
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx367_tgt
    .local int rx367_pos
    .local int rx367_off
    .local int rx367_eos
    .local int rx367_rep
    .local pmc rx367_cur
    .local pmc rx367_curclass
    .local pmc rx367_bstack
    .local pmc rx367_cstack
    (rx367_cur, rx367_tgt, rx367_pos, rx367_curclass, rx367_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx367_cur
    length rx367_eos, rx367_tgt
    eq $I19, 1, rx367_restart1087
    gt rx367_pos, rx367_eos, rx367_fail1088
    repr_get_attr_int $I11, self, rx367_curclass, "$!from"
    ne $I11, -1, rxscan368_done1094
    goto rxscan368_scan1093
  rxscan368_loop1092:
    inc rx367_pos
    gt rx367_pos, rx367_eos, rx367_fail1088
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!from", rx367_pos
  rxscan368_scan1093:
    nqp_rxmark rx367_bstack, rxscan368_loop1092, rx367_pos, 0
  rxscan368_done1094:
    nqp_rxmark rx367_bstack, rxcap369_fail1096, rx367_pos, 0
    add $I11, rx367_pos, 2
    gt $I11, rx367_eos, rx367_fail1088
    substr $S10, rx367_tgt, rx367_pos, 2
    ne $S10, ucs4:"if", rx367_fail1088
    add rx367_pos, 2
    nqp_rxpeek $I19, rx367_bstack, rxcap369_fail1096
    inc $I19
    set $I11, rx367_bstack[$I19]
    $P11 = rx367_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx367_pos)
    rx367_cstack = rx367_cur."!cursor_capture"($P11, "sym")
    goto rxcap369_done1095
  rxcap369_fail1096:
    goto rx367_fail1088
  rxcap369_done1095:
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."ws"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1088
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1088
    nqp_rxmark rx367_bstack, rxsubrule371_pass1098, -1, 0
  rxsubrule371_pass1098:
    rx367_cstack = rx367_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."ws"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1088
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    rx367_cur."!cursor_pass"(rx367_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx367_cur)
  rx367_restart1087:
    repr_get_attr_obj rx367_cstack, rx367_cur, rx367_curclass, "$!cstack"
  rx367_fail1088:
    unless rx367_bstack, rx367_done1086
    pop $I19, rx367_bstack
    if_null rx367_cstack, rx367_cstack_done1091
    unless rx367_cstack, rx367_cstack_done1091
    dec $I19
    set $P11, rx367_cstack[$I19]
  rx367_cstack_done1091:
    pop rx367_rep, rx367_bstack
    pop rx367_pos, rx367_bstack
    pop $I19, rx367_bstack
    lt rx367_pos, -1, rx367_done1086
    lt rx367_pos, 0, rx367_fail1088
    eq $I19, 0, rx367_fail1088
    nqp_islist $I20, rx367_cstack
    unless $I20, rx367_jump1089
    elements $I18, rx367_bstack
    le $I18, 0, rx367_cut1090
    dec $I18
    set $I18, rx367_bstack[$I18]
  rx367_cut1090:
    assign rx367_cstack, $I18
  rx367_jump1089:
    jump $I19
  rx367_done1086:
    rx367_cur."!cursor_fail"()
    .return (rx367_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1346277629.325_caps" :subid("cuid_memo_90_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1346277629.325_nfa" :subid("cuid_memo_91_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_78_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 847
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx373_tgt
    .local int rx373_pos
    .local int rx373_off
    .local int rx373_eos
    .local int rx373_rep
    .local pmc rx373_cur
    .local pmc rx373_curclass
    .local pmc rx373_bstack
    .local pmc rx373_cstack
    (rx373_cur, rx373_tgt, rx373_pos, rx373_curclass, rx373_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx373_cur
    length rx373_eos, rx373_tgt
    eq $I19, 1, rx373_restart1102
    gt rx373_pos, rx373_eos, rx373_fail1103
    repr_get_attr_int $I11, self, rx373_curclass, "$!from"
    ne $I11, -1, rxscan374_done1109
    goto rxscan374_scan1108
  rxscan374_loop1107:
    inc rx373_pos
    gt rx373_pos, rx373_eos, rx373_fail1103
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!from", rx373_pos
  rxscan374_scan1108:
    nqp_rxmark rx373_bstack, rxscan374_loop1107, rx373_pos, 0
  rxscan374_done1109:
    nqp_rxmark rx373_bstack, rxcap375_fail1111, rx373_pos, 0
    add $I11, rx373_pos, 6
    gt $I11, rx373_eos, rx373_fail1103
    substr $S10, rx373_tgt, rx373_pos, 6
    ne $S10, ucs4:"unless", rx373_fail1103
    add rx373_pos, 6
    nqp_rxpeek $I19, rx373_bstack, rxcap375_fail1111
    inc $I19
    set $I11, rx373_bstack[$I19]
    $P11 = rx373_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx373_pos)
    rx373_cstack = rx373_cur."!cursor_capture"($P11, "sym")
    goto rxcap375_done1110
  rxcap375_fail1111:
    goto rx373_fail1103
  rxcap375_done1110:
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."ws"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1103
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1103
    nqp_rxmark rx373_bstack, rxsubrule377_pass1113, -1, 0
  rxsubrule377_pass1113:
    rx373_cstack = rx373_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."ws"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1103
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    rx373_cur."!cursor_pass"(rx373_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx373_cur)
  rx373_restart1102:
    repr_get_attr_obj rx373_cstack, rx373_cur, rx373_curclass, "$!cstack"
  rx373_fail1103:
    unless rx373_bstack, rx373_done1101
    pop $I19, rx373_bstack
    if_null rx373_cstack, rx373_cstack_done1106
    unless rx373_cstack, rx373_cstack_done1106
    dec $I19
    set $P11, rx373_cstack[$I19]
  rx373_cstack_done1106:
    pop rx373_rep, rx373_bstack
    pop rx373_pos, rx373_bstack
    pop $I19, rx373_bstack
    lt rx373_pos, -1, rx373_done1101
    lt rx373_pos, 0, rx373_fail1103
    eq $I19, 0, rx373_fail1103
    nqp_islist $I20, rx373_cstack
    unless $I20, rx373_jump1104
    elements $I18, rx373_bstack
    le $I18, 0, rx373_cut1105
    dec $I18
    set $I18, rx373_bstack[$I18]
  rx373_cut1105:
    assign rx373_cstack, $I18
  rx373_jump1104:
    jump $I19
  rx373_done1101:
    rx373_cur."!cursor_fail"()
    .return (rx373_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1346277629.325_caps" :subid("cuid_memo_92_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1346277629.325_nfa" :subid("cuid_memo_93_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_79_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 849
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_80_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_curclass
    .local pmc rx379_bstack
    .local pmc rx379_cstack
    (rx379_cur, rx379_tgt, rx379_pos, rx379_curclass, rx379_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx379_cur
    length rx379_eos, rx379_tgt
    eq $I19, 1, rx379_restart1117
    gt rx379_pos, rx379_eos, rx379_fail1118
    repr_get_attr_int $I11, self, rx379_curclass, "$!from"
    ne $I11, -1, rxscan380_done1124
    goto rxscan380_scan1123
  rxscan380_loop1122:
    inc rx379_pos
    gt rx379_pos, rx379_eos, rx379_fail1118
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!from", rx379_pos
  rxscan380_scan1123:
    nqp_rxmark rx379_bstack, rxscan380_loop1122, rx379_pos, 0
  rxscan380_done1124:
    nqp_rxmark rx379_bstack, rxcap381_fail1126, rx379_pos, 0
    add $I11, rx379_pos, 5
    gt $I11, rx379_eos, rx379_fail1118
    substr $S10, rx379_tgt, rx379_pos, 5
    ne $S10, ucs4:"while", rx379_fail1118
    add rx379_pos, 5
    nqp_rxpeek $I19, rx379_bstack, rxcap381_fail1126
    inc $I19
    set $I11, rx379_bstack[$I19]
    $P11 = rx379_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx379_pos)
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "sym")
    goto rxcap381_done1125
  rxcap381_fail1126:
    goto rx379_fail1118
  rxcap381_done1125:
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."ws"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1118
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1118
    nqp_rxmark rx379_bstack, rxsubrule383_pass1128, -1, 0
  rxsubrule383_pass1128:
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."ws"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1118
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    rx379_cur."!cursor_pass"(rx379_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx379_cur)
  rx379_restart1117:
    repr_get_attr_obj rx379_cstack, rx379_cur, rx379_curclass, "$!cstack"
  rx379_fail1118:
    unless rx379_bstack, rx379_done1116
    pop $I19, rx379_bstack
    if_null rx379_cstack, rx379_cstack_done1121
    unless rx379_cstack, rx379_cstack_done1121
    dec $I19
    set $P11, rx379_cstack[$I19]
  rx379_cstack_done1121:
    pop rx379_rep, rx379_bstack
    pop rx379_pos, rx379_bstack
    pop $I19, rx379_bstack
    lt rx379_pos, -1, rx379_done1116
    lt rx379_pos, 0, rx379_fail1118
    eq $I19, 0, rx379_fail1118
    nqp_islist $I20, rx379_cstack
    unless $I20, rx379_jump1119
    elements $I18, rx379_bstack
    le $I18, 0, rx379_cut1120
    dec $I18
    set $I18, rx379_bstack[$I18]
  rx379_cut1120:
    assign rx379_cstack, $I18
  rx379_jump1119:
    jump $I19
  rx379_done1116:
    rx379_cur."!cursor_fail"()
    .return (rx379_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1346277629.325_caps" :subid("cuid_memo_94_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1346277629.325_nfa" :subid("cuid_memo_95_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 119
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 104
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 105
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_81_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx385_tgt
    .local int rx385_pos
    .local int rx385_off
    .local int rx385_eos
    .local int rx385_rep
    .local pmc rx385_cur
    .local pmc rx385_curclass
    .local pmc rx385_bstack
    .local pmc rx385_cstack
    (rx385_cur, rx385_tgt, rx385_pos, rx385_curclass, rx385_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx385_cur
    length rx385_eos, rx385_tgt
    eq $I19, 1, rx385_restart1132
    gt rx385_pos, rx385_eos, rx385_fail1133
    repr_get_attr_int $I11, self, rx385_curclass, "$!from"
    ne $I11, -1, rxscan386_done1139
    goto rxscan386_scan1138
  rxscan386_loop1137:
    inc rx385_pos
    gt rx385_pos, rx385_eos, rx385_fail1133
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!from", rx385_pos
  rxscan386_scan1138:
    nqp_rxmark rx385_bstack, rxscan386_loop1137, rx385_pos, 0
  rxscan386_done1139:
    nqp_rxmark rx385_bstack, rxcap387_fail1141, rx385_pos, 0
    add $I11, rx385_pos, 5
    gt $I11, rx385_eos, rx385_fail1133
    substr $S10, rx385_tgt, rx385_pos, 5
    ne $S10, ucs4:"until", rx385_fail1133
    add rx385_pos, 5
    nqp_rxpeek $I19, rx385_bstack, rxcap387_fail1141
    inc $I19
    set $I11, rx385_bstack[$I19]
    $P11 = rx385_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx385_pos)
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "sym")
    goto rxcap387_done1140
  rxcap387_fail1141:
    goto rx385_fail1133
  rxcap387_done1140:
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."ws"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1133
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1133
    nqp_rxmark rx385_bstack, rxsubrule389_pass1143, -1, 0
  rxsubrule389_pass1143:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."ws"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1133
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    rx385_cur."!cursor_pass"(rx385_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx385_cur)
  rx385_restart1132:
    repr_get_attr_obj rx385_cstack, rx385_cur, rx385_curclass, "$!cstack"
  rx385_fail1133:
    unless rx385_bstack, rx385_done1131
    pop $I19, rx385_bstack
    if_null rx385_cstack, rx385_cstack_done1136
    unless rx385_cstack, rx385_cstack_done1136
    dec $I19
    set $P11, rx385_cstack[$I19]
  rx385_cstack_done1136:
    pop rx385_rep, rx385_bstack
    pop rx385_pos, rx385_bstack
    pop $I19, rx385_bstack
    lt rx385_pos, -1, rx385_done1131
    lt rx385_pos, 0, rx385_fail1133
    eq $I19, 0, rx385_fail1133
    nqp_islist $I20, rx385_cstack
    unless $I20, rx385_jump1134
    elements $I18, rx385_bstack
    le $I18, 0, rx385_cut1135
    dec $I18
    set $I18, rx385_bstack[$I18]
  rx385_cut1135:
    assign rx385_cstack, $I18
  rx385_jump1134:
    jump $I19
  rx385_done1131:
    rx385_cur."!cursor_fail"()
    .return (rx385_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1346277629.325_caps" :subid("cuid_memo_96_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1346277629.325_nfa" :subid("cuid_memo_97_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 105
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_82_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 853
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    (rx391_cur, rx391_tgt, rx391_pos, rx391_curclass, rx391_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart1147
    gt rx391_pos, rx391_eos, rx391_fail1148
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done1154
    goto rxscan392_scan1153
  rxscan392_loop1152:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail1148
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan1153:
    nqp_rxmark rx391_bstack, rxscan392_loop1152, rx391_pos, 0
  rxscan392_done1154:
    nqp_rxmark rx391_bstack, rxcap393_fail1156, rx391_pos, 0
    add $I11, rx391_pos, 3
    gt $I11, rx391_eos, rx391_fail1148
    substr $S10, rx391_tgt, rx391_pos, 3
    ne $S10, ucs4:"for", rx391_fail1148
    add rx391_pos, 3
    nqp_rxpeek $I19, rx391_bstack, rxcap393_fail1156
    inc $I19
    set $I11, rx391_bstack[$I19]
    $P11 = rx391_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx391_pos)
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "sym")
    goto rxcap393_done1155
  rxcap393_fail1156:
    goto rx391_fail1148
  rxcap393_done1155:
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."ws"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1148
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1148
    nqp_rxmark rx391_bstack, rxsubrule395_pass1158, -1, 0
  rxsubrule395_pass1158:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."ws"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1148
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    rx391_cur."!cursor_pass"(rx391_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart1147:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail1148:
    unless rx391_bstack, rx391_done1146
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done1151
    unless rx391_cstack, rx391_cstack_done1151
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done1151:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done1146
    lt rx391_pos, 0, rx391_fail1148
    eq $I19, 0, rx391_fail1148
    nqp_islist $I20, rx391_cstack
    unless $I20, rx391_jump1149
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut1150
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut1150:
    assign rx391_cstack, $I18
  rx391_jump1149:
    jump $I19
  rx391_done1146:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1346277629.325_caps" :subid("cuid_memo_98_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1346277629.325_nfa" :subid("cuid_memo_99_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 102
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 111
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_83_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx397_tgt
    .local int rx397_pos
    .local int rx397_off
    .local int rx397_eos
    .local int rx397_rep
    .local pmc rx397_cur
    .local pmc rx397_curclass
    .local pmc rx397_bstack
    .local pmc rx397_cstack
    (rx397_cur, rx397_tgt, rx397_pos, rx397_curclass, rx397_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx397_cur
    length rx397_eos, rx397_tgt
    eq $I19, 1, rx397_restart1162
    gt rx397_pos, rx397_eos, rx397_fail1163
    repr_get_attr_int $I11, self, rx397_curclass, "$!from"
    ne $I11, -1, rxscan398_done1169
    goto rxscan398_scan1168
  rxscan398_loop1167:
    inc rx397_pos
    gt rx397_pos, rx397_eos, rx397_fail1163
    repr_bind_attr_int rx397_cur, rx397_curclass, "$!from", rx397_pos
  rxscan398_scan1168:
    nqp_rxmark rx397_bstack, rxscan398_loop1167, rx397_pos, 0
  rxscan398_done1169:
    repr_bind_attr_int rx397_cur, rx397_curclass, "$!pos", rx397_pos
    $P11 = rx397_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx397_curclass, "$!pos"
    lt $I11, 0, rx397_fail1163
    nqp_rxmark rx397_bstack, rxsubrule399_pass1170, -1, 0
  rxsubrule399_pass1170:
    rx397_cstack = rx397_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx397_pos, $P11, rx397_curclass, "$!pos"
    rx397_cur."!cursor_pass"(rx397_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx397_cur)
  rx397_restart1162:
    repr_get_attr_obj rx397_cstack, rx397_cur, rx397_curclass, "$!cstack"
  rx397_fail1163:
    unless rx397_bstack, rx397_done1161
    pop $I19, rx397_bstack
    if_null rx397_cstack, rx397_cstack_done1166
    unless rx397_cstack, rx397_cstack_done1166
    dec $I19
    set $P11, rx397_cstack[$I19]
  rx397_cstack_done1166:
    pop rx397_rep, rx397_bstack
    pop rx397_pos, rx397_bstack
    pop $I19, rx397_bstack
    lt rx397_pos, -1, rx397_done1161
    lt rx397_pos, 0, rx397_fail1163
    eq $I19, 0, rx397_fail1163
    nqp_islist $I20, rx397_cstack
    unless $I20, rx397_jump1164
    elements $I18, rx397_bstack
    le $I18, 0, rx397_cut1165
    dec $I18
    set $I18, rx397_bstack[$I18]
  rx397_cut1165:
    assign rx397_cstack, $I18
  rx397_jump1164:
    jump $I19
  rx397_done1161:
    rx397_cur."!cursor_fail"()
    .return (rx397_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1346277629.325_caps" :subid("cuid_memo_100_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["fatarrow"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1346277629.325_nfa" :subid("cuid_memo_101_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "fatarrow"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_84_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 858
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    (rx400_cur, rx400_tgt, rx400_pos, rx400_curclass, rx400_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1173
    gt rx400_pos, rx400_eos, rx400_fail1174
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1180
    goto rxscan401_scan1179
  rxscan401_loop1178:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1174
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1179:
    nqp_rxmark rx400_bstack, rxscan401_loop1178, rx400_pos, 0
  rxscan401_done1180:
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1174
    nqp_rxmark rx400_bstack, rxsubrule402_pass1181, -1, 0
  rxsubrule402_pass1181:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    rx400_cur."!cursor_pass"(rx400_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1173:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1174:
    unless rx400_bstack, rx400_done1172
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1177
    unless rx400_cstack, rx400_cstack_done1177
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1177:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1172
    lt rx400_pos, 0, rx400_fail1174
    eq $I19, 0, rx400_fail1174
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1175
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1176
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1176:
    assign rx400_cstack, $I18
  rx400_jump1175:
    jump $I19
  rx400_done1172:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1346277629.325_caps" :subid("cuid_memo_102_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["colonpair"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1346277629.325_nfa" :subid("cuid_memo_103_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "colonpair"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_85_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx403_tgt
    .local int rx403_pos
    .local int rx403_off
    .local int rx403_eos
    .local int rx403_rep
    .local pmc rx403_cur
    .local pmc rx403_curclass
    .local pmc rx403_bstack
    .local pmc rx403_cstack
    (rx403_cur, rx403_tgt, rx403_pos, rx403_curclass, rx403_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx403_cur
    length rx403_eos, rx403_tgt
    eq $I19, 1, rx403_restart1184
    gt rx403_pos, rx403_eos, rx403_fail1185
    repr_get_attr_int $I11, self, rx403_curclass, "$!from"
    ne $I11, -1, rxscan404_done1191
    goto rxscan404_scan1190
  rxscan404_loop1189:
    inc rx403_pos
    gt rx403_pos, rx403_eos, rx403_fail1185
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!from", rx403_pos
  rxscan404_scan1190:
    nqp_rxmark rx403_bstack, rxscan404_loop1189, rx403_pos, 0
  rxscan404_done1191:
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    $P11 = rx403_cur."variable"()
    repr_get_attr_int $I11, $P11, rx403_curclass, "$!pos"
    lt $I11, 0, rx403_fail1185
    nqp_rxmark rx403_bstack, rxsubrule405_pass1192, -1, 0
  rxsubrule405_pass1192:
    rx403_cstack = rx403_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx403_pos, $P11, rx403_curclass, "$!pos"
    rx403_cur."!cursor_pass"(rx403_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx403_cur)
  rx403_restart1184:
    repr_get_attr_obj rx403_cstack, rx403_cur, rx403_curclass, "$!cstack"
  rx403_fail1185:
    unless rx403_bstack, rx403_done1183
    pop $I19, rx403_bstack
    if_null rx403_cstack, rx403_cstack_done1188
    unless rx403_cstack, rx403_cstack_done1188
    dec $I19
    set $P11, rx403_cstack[$I19]
  rx403_cstack_done1188:
    pop rx403_rep, rx403_bstack
    pop rx403_pos, rx403_bstack
    pop $I19, rx403_bstack
    lt rx403_pos, -1, rx403_done1183
    lt rx403_pos, 0, rx403_fail1185
    eq $I19, 0, rx403_fail1185
    nqp_islist $I20, rx403_cstack
    unless $I20, rx403_jump1186
    elements $I18, rx403_bstack
    le $I18, 0, rx403_cut1187
    dec $I18
    set $I18, rx403_bstack[$I18]
  rx403_cut1187:
    assign rx403_cstack, $I18
  rx403_jump1186:
    jump $I19
  rx403_done1183:
    rx403_cur."!cursor_fail"()
    .return (rx403_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1346277629.325_caps" :subid("cuid_memo_104_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1346277629.325_nfa" :subid("cuid_memo_105_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_86_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 860
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    (rx406_cur, rx406_tgt, rx406_pos, rx406_curclass, rx406_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1195
    gt rx406_pos, rx406_eos, rx406_fail1196
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1202
    goto rxscan407_scan1201
  rxscan407_loop1200:
    inc rx406_pos
    gt rx406_pos, rx406_eos, rx406_fail1196
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1201:
    nqp_rxmark rx406_bstack, rxscan407_loop1200, rx406_pos, 0
  rxscan407_done1202:
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1196
    nqp_rxmark rx406_bstack, rxsubrule408_pass1203, -1, 0
  rxsubrule408_pass1203:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    rx406_cur."!cursor_pass"(rx406_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1195:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1196:
    unless rx406_bstack, rx406_done1194
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1199
    unless rx406_cstack, rx406_cstack_done1199
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1199:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1194
    lt rx406_pos, 0, rx406_fail1196
    eq $I19, 0, rx406_fail1196
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1197
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1198
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1198:
    assign rx406_cstack, $I18
  rx406_jump1197:
    jump $I19
  rx406_done1194:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1346277629.325_caps" :subid("cuid_memo_106_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["package_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1346277629.325_nfa" :subid("cuid_memo_107_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "package_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_87_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx409_tgt
    .local int rx409_pos
    .local int rx409_off
    .local int rx409_eos
    .local int rx409_rep
    .local pmc rx409_cur
    .local pmc rx409_curclass
    .local pmc rx409_bstack
    .local pmc rx409_cstack
    (rx409_cur, rx409_tgt, rx409_pos, rx409_curclass, rx409_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx409_cur
    length rx409_eos, rx409_tgt
    eq $I19, 1, rx409_restart1206
    gt rx409_pos, rx409_eos, rx409_fail1207
    repr_get_attr_int $I11, self, rx409_curclass, "$!from"
    ne $I11, -1, rxscan410_done1213
    goto rxscan410_scan1212
  rxscan410_loop1211:
    inc rx409_pos
    gt rx409_pos, rx409_eos, rx409_fail1207
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!from", rx409_pos
  rxscan410_scan1212:
    nqp_rxmark rx409_bstack, rxscan410_loop1211, rx409_pos, 0
  rxscan410_done1213:
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!pos", rx409_pos
    $P11 = rx409_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx409_curclass, "$!pos"
    lt $I11, 0, rx409_fail1207
    nqp_rxmark rx409_bstack, rxsubrule411_pass1214, -1, 0
  rxsubrule411_pass1214:
    rx409_cstack = rx409_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx409_pos, $P11, rx409_curclass, "$!pos"
    rx409_cur."!cursor_pass"(rx409_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx409_cur)
  rx409_restart1206:
    repr_get_attr_obj rx409_cstack, rx409_cur, rx409_curclass, "$!cstack"
  rx409_fail1207:
    unless rx409_bstack, rx409_done1205
    pop $I19, rx409_bstack
    if_null rx409_cstack, rx409_cstack_done1210
    unless rx409_cstack, rx409_cstack_done1210
    dec $I19
    set $P11, rx409_cstack[$I19]
  rx409_cstack_done1210:
    pop rx409_rep, rx409_bstack
    pop rx409_pos, rx409_bstack
    pop $I19, rx409_bstack
    lt rx409_pos, -1, rx409_done1205
    lt rx409_pos, 0, rx409_fail1207
    eq $I19, 0, rx409_fail1207
    nqp_islist $I20, rx409_cstack
    unless $I20, rx409_jump1208
    elements $I18, rx409_bstack
    le $I18, 0, rx409_cut1209
    dec $I18
    set $I18, rx409_bstack[$I18]
  rx409_cut1209:
    assign rx409_cstack, $I18
  rx409_jump1208:
    jump $I19
  rx409_done1205:
    rx409_cur."!cursor_fail"()
    .return (rx409_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1346277629.325_caps" :subid("cuid_memo_108_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["scope_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1346277629.325_nfa" :subid("cuid_memo_109_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "scope_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_88_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 862
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx412_tgt
    .local int rx412_pos
    .local int rx412_off
    .local int rx412_eos
    .local int rx412_rep
    .local pmc rx412_cur
    .local pmc rx412_curclass
    .local pmc rx412_bstack
    .local pmc rx412_cstack
    (rx412_cur, rx412_tgt, rx412_pos, rx412_curclass, rx412_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx412_cur
    length rx412_eos, rx412_tgt
    eq $I19, 1, rx412_restart1217
    gt rx412_pos, rx412_eos, rx412_fail1218
    repr_get_attr_int $I11, self, rx412_curclass, "$!from"
    ne $I11, -1, rxscan413_done1224
    goto rxscan413_scan1223
  rxscan413_loop1222:
    inc rx412_pos
    gt rx412_pos, rx412_eos, rx412_fail1218
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!from", rx412_pos
  rxscan413_scan1223:
    nqp_rxmark rx412_bstack, rxscan413_loop1222, rx412_pos, 0
  rxscan413_done1224:
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1218
    nqp_rxmark rx412_bstack, rxsubrule414_pass1225, -1, 0
  rxsubrule414_pass1225:
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    rx412_cur."!cursor_pass"(rx412_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx412_cur)
  rx412_restart1217:
    repr_get_attr_obj rx412_cstack, rx412_cur, rx412_curclass, "$!cstack"
  rx412_fail1218:
    unless rx412_bstack, rx412_done1216
    pop $I19, rx412_bstack
    if_null rx412_cstack, rx412_cstack_done1221
    unless rx412_cstack, rx412_cstack_done1221
    dec $I19
    set $P11, rx412_cstack[$I19]
  rx412_cstack_done1221:
    pop rx412_rep, rx412_bstack
    pop rx412_pos, rx412_bstack
    pop $I19, rx412_bstack
    lt rx412_pos, -1, rx412_done1216
    lt rx412_pos, 0, rx412_fail1218
    eq $I19, 0, rx412_fail1218
    nqp_islist $I20, rx412_cstack
    unless $I20, rx412_jump1219
    elements $I18, rx412_bstack
    le $I18, 0, rx412_cut1220
    dec $I18
    set $I18, rx412_bstack[$I18]
  rx412_cut1220:
    assign rx412_cstack, $I18
  rx412_jump1219:
    jump $I19
  rx412_done1216:
    rx412_cur."!cursor_fail"()
    .return (rx412_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1346277629.325_caps" :subid("cuid_memo_110_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["routine_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1346277629.325_nfa" :subid("cuid_memo_111_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "routine_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_91_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 863
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_89_1346277629.325' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_90_1346277629.325' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx415_tgt
    .local int rx415_pos
    .local int rx415_off
    .local int rx415_eos
    .local int rx415_rep
    .local pmc rx415_cur
    .local pmc rx415_curclass
    .local pmc rx415_bstack
    .local pmc rx415_cstack
    (rx415_cur, rx415_tgt, rx415_pos, rx415_curclass, rx415_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx415_cur
    length rx415_eos, rx415_tgt
    eq $I19, 1, rx415_restart1228
    gt rx415_pos, rx415_eos, rx415_fail1229
    repr_get_attr_int $I11, self, rx415_curclass, "$!from"
    ne $I11, -1, rxscan416_done1235
    goto rxscan416_scan1234
  rxscan416_loop1233:
    inc rx415_pos
    gt rx415_pos, rx415_eos, rx415_fail1229
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!from", rx415_pos
  rxscan416_scan1234:
    nqp_rxmark rx415_bstack, rxscan416_loop1233, rx415_pos, 0
  rxscan416_done1235:
    .const 'Sub' $P5001 = 'cuid_89_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    lt $I11, 0, rx415_fail1229
    .const 'Sub' $P5002 = 'cuid_90_1346277629.325' 
    capture_lex $P5002
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    ge $I11, 0, rx415_fail1229
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    lt $I11, 0, rx415_fail1229
    nqp_rxmark rx415_bstack, rxsubrule424_pass1265, -1, 0
  rxsubrule424_pass1265:
    rx415_cstack = rx415_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx415_pos, $P11, rx415_curclass, "$!pos"
    rx415_cur."!cursor_pass"(rx415_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx415_cur)
  rx415_restart1228:
    repr_get_attr_obj rx415_cstack, rx415_cur, rx415_curclass, "$!cstack"
  rx415_fail1229:
    unless rx415_bstack, rx415_done1227
    pop $I19, rx415_bstack
    if_null rx415_cstack, rx415_cstack_done1232
    unless rx415_cstack, rx415_cstack_done1232
    dec $I19
    set $P11, rx415_cstack[$I19]
  rx415_cstack_done1232:
    pop rx415_rep, rx415_bstack
    pop rx415_pos, rx415_bstack
    pop $I19, rx415_bstack
    lt rx415_pos, -1, rx415_done1227
    lt rx415_pos, 0, rx415_fail1229
    eq $I19, 0, rx415_fail1229
    nqp_islist $I20, rx415_cstack
    unless $I20, rx415_jump1230
    elements $I18, rx415_bstack
    le $I18, 0, rx415_cut1231
    dec $I18
    set $I18, rx415_bstack[$I18]
  rx415_cut1231:
    assign rx415_cstack, $I18
  rx415_jump1230:
    jump $I19
  rx415_done1227:
    rx415_cur."!cursor_fail"()
    .return (rx415_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1346277629.325_caps" :subid("cuid_memo_112_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["multi_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1346277629.325_nfa" :subid("cuid_memo_113_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 7
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 11
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 117
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 108
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 116
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 105
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 114
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 111
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 116
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 111
    push $P5045, $P5047
    box $P5048, 2
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 110
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 108
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 121
    push $P5057, $P5059
    box $P5060, 2
    push $P5057, $P5060
    push $P5001, $P5057
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1346277629.325") :anon :lex :outer("cuid_91_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx417_tgt
    .local int rx417_pos
    .local int rx417_off
    .local int rx417_eos
    .local int rx417_rep
    .local pmc rx417_cur
    .local pmc rx417_curclass
    .local pmc rx417_bstack
    .local pmc rx417_cstack
    (rx417_cur, rx417_tgt, rx417_pos, rx417_curclass, rx417_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx417_cur
    length rx417_eos, rx417_tgt
    eq $I19, 1, rx417_restart1238
    gt rx417_pos, rx417_eos, rx417_fail1239
    repr_get_attr_int $I11, self, rx417_curclass, "$!from"
    ne $I11, -1, rxscan418_done1245
    goto rxscan418_scan1244
  rxscan418_loop1243:
    inc rx417_pos
    gt rx417_pos, rx417_eos, rx417_fail1239
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!from", rx417_pos
  rxscan418_scan1244:
    nqp_rxmark rx417_bstack, rxscan418_loop1243, rx417_pos, 0
  rxscan418_done1245:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt419_01247
    nqp_push_label $P11, alt419_11248
    nqp_push_label $P11, alt419_21249
    nqp_rxmark rx417_bstack, alt419_end1246, -1, 0
    rx417_cur."!alt"(rx417_pos, "alt_nfa__17_1346277632.494", $P11)
    goto rx417_fail1239
  alt419_01247:
    add $I11, rx417_pos, 5
    gt $I11, rx417_eos, rx417_fail1239
    substr $S10, rx417_tgt, rx417_pos, 5
    ne $S10, ucs4:"multi", rx417_fail1239
    add rx417_pos, 5
    goto alt419_end1246
  alt419_11248:
    add $I11, rx417_pos, 5
    gt $I11, rx417_eos, rx417_fail1239
    substr $S10, rx417_tgt, rx417_pos, 5
    ne $S10, ucs4:"proto", rx417_fail1239
    add rx417_pos, 5
    goto alt419_end1246
  alt419_21249:
    add $I11, rx417_pos, 4
    gt $I11, rx417_eos, rx417_fail1239
    substr $S10, rx417_tgt, rx417_pos, 4
    ne $S10, ucs4:"only", rx417_fail1239
    add rx417_pos, 4
    goto alt419_end1246
  alt419_end1246:
    rx417_cur."!cursor_pass"(rx417_pos, 'backtrack'=>1)
    .return (rx417_cur)
  rx417_restart1238:
    repr_get_attr_obj rx417_cstack, rx417_cur, rx417_curclass, "$!cstack"
  rx417_fail1239:
    unless rx417_bstack, rx417_done1237
    pop $I19, rx417_bstack
    if_null rx417_cstack, rx417_cstack_done1242
    unless rx417_cstack, rx417_cstack_done1242
    dec $I19
    set $P11, rx417_cstack[$I19]
  rx417_cstack_done1242:
    pop rx417_rep, rx417_bstack
    pop rx417_pos, rx417_bstack
    pop $I19, rx417_bstack
    lt rx417_pos, -1, rx417_done1237
    lt rx417_pos, 0, rx417_fail1239
    eq $I19, 0, rx417_fail1239
    nqp_islist $I20, rx417_cstack
    unless $I20, rx417_jump1240
    elements $I18, rx417_bstack
    le $I18, 0, rx417_cut1241
    dec $I18
    set $I18, rx417_bstack[$I18]
  rx417_cut1241:
    assign rx417_cstack, $I18
  rx417_jump1240:
    jump $I19
  rx417_done1237:
    rx417_cur."!cursor_fail"()
    .return (rx417_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346277629.325_caps" :subid("cuid_memo_114_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346277629.325_nfa" :subid("cuid_memo_115_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 10
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 2
    push $P5013, $P5014
    box $P5015, 117
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 108
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 116
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 105
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 114
    push $P5029, $P5031
    box $P5032, 7
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 111
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 116
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 111
    push $P5041, $P5043
    box $P5044, 0
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 110
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 108
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 121
    push $P5053, $P5055
    box $P5056, 0
    push $P5053, $P5056
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346277629.325_alt_nfa__17_1346277632.494" :subid("cuid_memo_116_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 109
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 117
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 108
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 105
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 112
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 114
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 111
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 111
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 111
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 110
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 121
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1346277629.325") :anon :lex :outer("cuid_91_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    (rx420_cur, rx420_tgt, rx420_pos, rx420_curclass, rx420_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart1252
    gt rx420_pos, rx420_eos, rx420_fail1253
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done1259
    goto rxscan421_scan1258
  rxscan421_loop1257:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail1253
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan1258:
    nqp_rxmark rx420_bstack, rxscan421_loop1257, rx420_pos, 0
  rxscan421_done1259:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1253
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"proto", rx420_fail1253
    add rx420_pos, 5
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    $P11 = rx420_cur."ws"()
    repr_get_attr_int $I11, $P11, rx420_curclass, "$!pos"
    lt $I11, 0, rx420_fail1253
    repr_get_attr_int rx420_pos, $P11, rx420_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt423_01262
    nqp_push_label $P11, alt423_11263
    nqp_push_label $P11, alt423_21264
    nqp_rxmark rx420_bstack, alt423_end1261, -1, 0
    rx420_cur."!alt"(rx420_pos, "alt_nfa__18_1346277632.513", $P11)
    goto rx420_fail1253
  alt423_01262:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1253
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"regex", rx420_fail1253
    add rx420_pos, 5
    goto alt423_end1261
  alt423_11263:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1253
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"token", rx420_fail1253
    add rx420_pos, 5
    goto alt423_end1261
  alt423_21264:
    add $I11, rx420_pos, 4
    gt $I11, rx420_eos, rx420_fail1253
    substr $S10, rx420_tgt, rx420_pos, 4
    ne $S10, ucs4:"rule", rx420_fail1253
    add rx420_pos, 4
    goto alt423_end1261
  alt423_end1261:
    nqp_rxcommit rx420_bstack, alt423_end1261
    rx420_cur."!cursor_pass"(rx420_pos, 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart1252:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail1253:
    unless rx420_bstack, rx420_done1251
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done1256
    unless rx420_cstack, rx420_cstack_done1256
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done1256:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done1251
    lt rx420_pos, 0, rx420_fail1253
    eq $I19, 0, rx420_fail1253
    nqp_islist $I20, rx420_cstack
    unless $I20, rx420_jump1254
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut1255
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut1255:
    assign rx420_cstack, $I18
  rx420_jump1254:
    jump $I19
  rx420_done1251:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346277629.325_caps" :subid("cuid_memo_117_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346277629.325_nfa" :subid("cuid_memo_118_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 114
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    box $P5031, 2
    push $P5027, $P5031
    box $P5032, 116
    push $P5027, $P5032
    box $P5033, 12
    push $P5027, $P5033
    box $P5034, 2
    push $P5027, $P5034
    box $P5035, 114
    push $P5027, $P5035
    box $P5036, 16
    push $P5027, $P5036
    push $P5001, $P5027
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 101
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 103
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 101
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 120
    push $P5049, $P5051
    box $P5052, 0
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 111
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 107
    push $P5057, $P5059
    box $P5060, 14
    push $P5057, $P5060
    push $P5001, $P5057
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 101
    push $P5061, $P5063
    box $P5064, 15
    push $P5061, $P5064
    push $P5001, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 110
    push $P5065, $P5067
    box $P5068, 0
    push $P5065, $P5068
    push $P5001, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 117
    push $P5069, $P5071
    box $P5072, 17
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 108
    push $P5073, $P5075
    box $P5076, 18
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 101
    push $P5077, $P5079
    box $P5080, 0
    push $P5077, $P5080
    push $P5001, $P5077
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346277629.325_alt_nfa__18_1346277632.513" :subid("cuid_memo_119_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_92_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    (rx425_cur, rx425_tgt, rx425_pos, rx425_curclass, rx425_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1268
    gt rx425_pos, rx425_eos, rx425_fail1269
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1275
    goto rxscan426_scan1274
  rxscan426_loop1273:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1269
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1274:
    nqp_rxmark rx425_bstack, rxscan426_loop1273, rx425_pos, 0
  rxscan426_done1275:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1269
    nqp_rxmark rx425_bstack, rxsubrule427_pass1276, -1, 0
  rxsubrule427_pass1276:
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    rx425_cur."!cursor_pass"(rx425_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1268:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1269:
    unless rx425_bstack, rx425_done1267
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1272
    unless rx425_cstack, rx425_cstack_done1272
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1272:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1267
    lt rx425_pos, 0, rx425_fail1269
    eq $I19, 0, rx425_fail1269
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1270
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1271
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1271:
    assign rx425_cstack, $I18
  rx425_jump1270:
    jump $I19
  rx425_done1267:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1346277629.325_caps" :subid("cuid_memo_120_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["regex_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1346277629.325_nfa" :subid("cuid_memo_121_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "regex_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_93_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    (rx428_cur, rx428_tgt, rx428_pos, rx428_curclass, rx428_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1279
    gt rx428_pos, rx428_eos, rx428_fail1280
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1286
    goto rxscan429_scan1285
  rxscan429_loop1284:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1280
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1285:
    nqp_rxmark rx428_bstack, rxscan429_loop1284, rx428_pos, 0
  rxscan429_done1286:
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1280
    nqp_rxmark rx428_bstack, rxsubrule430_pass1287, -1, 0
  rxsubrule430_pass1287:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    rx428_cur."!cursor_pass"(rx428_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1279:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1280:
    unless rx428_bstack, rx428_done1278
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1283
    unless rx428_cstack, rx428_cstack_done1283
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1283:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1278
    lt rx428_pos, 0, rx428_fail1280
    eq $I19, 0, rx428_fail1280
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1281
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1282
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1282:
    assign rx428_cstack, $I18
  rx428_jump1281:
    jump $I19
  rx428_done1278:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1346277629.325_caps" :subid("cuid_memo_122_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_prefix"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1346277629.325_nfa" :subid("cuid_memo_123_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "statement_prefix"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_94_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 870
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    (rx431_cur, rx431_tgt, rx431_pos, rx431_curclass, rx431_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1290
    gt rx431_pos, rx431_eos, rx431_fail1291
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1297
    goto rxscan432_scan1296
  rxscan432_loop1295:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1291
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1296:
    nqp_rxmark rx431_bstack, rxscan432_loop1295, rx431_pos, 0
  rxscan432_done1297:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1291
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1291
    nqp_rxmark rx431_bstack, rxsubrule433_pass1298, -1, 0
  rxsubrule433_pass1298:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1290:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1291:
    unless rx431_bstack, rx431_done1289
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1294
    unless rx431_cstack, rx431_cstack_done1294
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1294:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1289
    lt rx431_pos, 0, rx431_fail1291
    eq $I19, 0, rx431_fail1291
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1292
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1293
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1293:
    assign rx431_cstack, $I18
  rx431_jump1292:
    jump $I19
  rx431_done1289:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1346277629.325_caps" :subid("cuid_memo_124_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1346277629.325_nfa" :subid("cuid_memo_125_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_95_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1301
    gt rx434_pos, rx434_eos, rx434_fail1302
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1308
    goto rxscan435_scan1307
  rxscan435_loop1306:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1302
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1307:
    nqp_rxmark rx434_bstack, rxscan435_loop1306, rx434_pos, 0
  rxscan435_done1308:
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1302
    nqp_rxmark rx434_bstack, rxsubrule436_pass1309, -1, 0
  rxsubrule436_pass1309:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    nqp_rxmark rx434_bstack, rxquantr437_done1311, rx434_pos, 0
  rxquantr437_loop1310:
    ge rx434_pos, rx434_eos, rx434_fail1302
    substr $S11, rx434_tgt, rx434_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx434_fail1302
    inc rx434_pos
    nqp_rxpeek $I19, rx434_bstack, rxquantr437_done1311
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr437_done1311
    inc rx434_rep
    nqp_rxmark rx434_bstack, rxquantr437_done1311, rx434_pos, rx434_rep
    goto rxquantr437_loop1310
  rxquantr437_done1311:
    add $I11, rx434_pos, 2
    gt $I11, rx434_eos, rx434_fail1302
    substr $S10, rx434_tgt, rx434_pos, 2
    ne $S10, ucs4:"=>", rx434_fail1302
    add rx434_pos, 2
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."ws"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1302
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1302
    nqp_rxmark rx434_bstack, rxsubrule439_pass1313, -1, 0
  rxsubrule439_pass1313:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    rx434_cur."!cursor_pass"(rx434_pos, "fatarrow", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1301:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1302:
    unless rx434_bstack, rx434_done1300
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1305
    unless rx434_cstack, rx434_cstack_done1305
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1305:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1300
    lt rx434_pos, 0, rx434_fail1302
    eq $I19, 0, rx434_fail1302
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1303
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1304
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1304:
    assign rx434_cstack, $I18
  rx434_jump1303:
    jump $I19
  rx434_done1300:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1346277629.325_caps" :subid("cuid_memo_126_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["key"], $P5002
    box $P5003, 0
    set $P5001["val"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1346277629.325_nfa" :subid("cuid_memo_127_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "ws"
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "EXPR"
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_96_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 876
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx440_tgt
    .local int rx440_pos
    .local int rx440_off
    .local int rx440_eos
    .local int rx440_rep
    .local pmc rx440_cur
    .local pmc rx440_curclass
    .local pmc rx440_bstack
    .local pmc rx440_cstack
    (rx440_cur, rx440_tgt, rx440_pos, rx440_curclass, rx440_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx440_cur
    length rx440_eos, rx440_tgt
    eq $I19, 1, rx440_restart1316
    gt rx440_pos, rx440_eos, rx440_fail1317
    repr_get_attr_int $I11, self, rx440_curclass, "$!from"
    ne $I11, -1, rxscan441_done1323
    goto rxscan441_scan1322
  rxscan441_loop1321:
    inc rx440_pos
    gt rx440_pos, rx440_eos, rx440_fail1317
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!from", rx440_pos
  rxscan441_scan1322:
    nqp_rxmark rx440_bstack, rxscan441_loop1321, rx440_pos, 0
  rxscan441_done1323:
    add $I11, rx440_pos, 1
    gt $I11, rx440_eos, rx440_fail1317
    substr $S10, rx440_tgt, rx440_pos, 1
    ne $S10, ucs4:":", rx440_fail1317
    add rx440_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt442_01325
    nqp_push_label $P11, alt442_11329
    nqp_push_label $P11, alt442_21335
    nqp_push_label $P11, alt442_31337
    nqp_rxmark rx440_bstack, alt442_end1324, -1, 0
    rx440_cur."!alt"(rx440_pos, "alt_nfa__19_1346277632.588", $P11)
    goto rx440_fail1317
  alt442_01325:
    nqp_rxmark rx440_bstack, rxcap443_fail1327, rx440_pos, 0
    add $I11, rx440_pos, 1
    gt $I11, rx440_eos, rx440_fail1317
    substr $S10, rx440_tgt, rx440_pos, 1
    ne $S10, ucs4:"!", rx440_fail1317
    add rx440_pos, 1
    nqp_rxpeek $I19, rx440_bstack, rxcap443_fail1327
    inc $I19
    set $I11, rx440_bstack[$I19]
    $P11 = rx440_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx440_pos)
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "not")
    goto rxcap443_done1326
  rxcap443_fail1327:
    goto rx440_fail1317
  rxcap443_done1326:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    nqp_rxmark rx440_bstack, rxsubrule444_pass1328, -1, 0
  rxsubrule444_pass1328:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1324
  alt442_11329:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    nqp_rxmark rx440_bstack, rxsubrule445_pass1330, -1, 0
  rxsubrule445_pass1330:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    nqp_rxmark rx440_bstack, rxquantr446_done1332, rx440_pos, 0
  rxquantr446_loop1331:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    goto rxsubrule447_pass1333
  rxsubrule447_back1334:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
  rxsubrule447_pass1333:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule447_back1334
    push rx440_bstack, $I11
    push rx440_bstack, 0
    push rx440_bstack, rx440_pos
    elements $I11, rx440_cstack
    push rx440_bstack, $I11
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    nqp_rxpeek $I19, rx440_bstack, rxquantr446_done1332
    inc $I19
    inc $I19
    set rx440_rep, rx440_bstack[$I19]
    nqp_rxcommit rx440_bstack, rxquantr446_done1332
    inc rx440_rep
  rxquantr446_done1332:
    goto alt442_end1324
  alt442_21335:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    nqp_rxmark rx440_bstack, rxsubrule448_pass1336, -1, 0
  rxsubrule448_pass1336:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1324
  alt442_31337:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."variable"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1317
    nqp_rxmark rx440_bstack, rxsubrule449_pass1338, -1, 0
  rxsubrule449_pass1338:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1324
  alt442_end1324:
    nqp_rxcommit rx440_bstack, alt442_end1324
    rx440_cur."!cursor_pass"(rx440_pos, "colonpair", 'backtrack'=>1)
    .return (rx440_cur)
  rx440_restart1316:
    repr_get_attr_obj rx440_cstack, rx440_cur, rx440_curclass, "$!cstack"
  rx440_fail1317:
    unless rx440_bstack, rx440_done1315
    pop $I19, rx440_bstack
    if_null rx440_cstack, rx440_cstack_done1320
    unless rx440_cstack, rx440_cstack_done1320
    dec $I19
    set $P11, rx440_cstack[$I19]
  rx440_cstack_done1320:
    pop rx440_rep, rx440_bstack
    pop rx440_pos, rx440_bstack
    pop $I19, rx440_bstack
    lt rx440_pos, -1, rx440_done1315
    lt rx440_pos, 0, rx440_fail1317
    eq $I19, 0, rx440_fail1317
    nqp_islist $I20, rx440_cstack
    unless $I20, rx440_jump1318
    elements $I18, rx440_bstack
    le $I18, 0, rx440_cut1319
    dec $I18
    set $I18, rx440_bstack[$I18]
  rx440_cut1319:
    assign rx440_cstack, $I18
  rx440_jump1318:
    jump $I19
  rx440_done1315:
    rx440_cur."!cursor_fail"()
    .return (rx440_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346277629.325_caps" :subid("cuid_memo_128_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["not"], $P5002
    box $P5003, 0
    set $P5001["identifier"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    box $P5005, 0
    set $P5001["variable"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346277629.325_nfa" :subid("cuid_memo_129_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 33
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 8
    push $P5007, $P5011
    box $P5012, "identifier"
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 8
    push $P5007, $P5014
    box $P5015, "circumfix"
    push $P5007, $P5015
    box $P5016, 0
    push $P5007, $P5016
    box $P5017, 8
    push $P5007, $P5017
    box $P5018, "variable"
    push $P5007, $P5018
    box $P5019, 0
    push $P5007, $P5019
    push $P5001, $P5007
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "identifier"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 8
    push $P5024, $P5025
    box $P5026, "circumfix"
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    box $P5028, 1
    push $P5024, $P5028
    box $P5029, 0
    push $P5024, $P5029
    box $P5030, 0
    push $P5024, $P5030
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346277629.325_alt_nfa__19_1346277632.588" :subid("cuid_memo_130_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 33
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "identifier"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "identifier"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "circumfix"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5025, 'ResizablePMCArray'
    new $P5026, 'ResizablePMCArray'
    push $P5025, $P5026
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "circumfix"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5025, $P5027
    push $P5001, $P5025
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 8
    push $P5033, $P5034
    box $P5035, "variable"
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_97_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx450_tgt
    .local int rx450_pos
    .local int rx450_off
    .local int rx450_eos
    .local int rx450_rep
    .local pmc rx450_cur
    .local pmc rx450_curclass
    .local pmc rx450_bstack
    .local pmc rx450_cstack
    (rx450_cur, rx450_tgt, rx450_pos, rx450_curclass, rx450_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx450_cur
    length rx450_eos, rx450_tgt
    eq $I19, 1, rx450_restart1341
    gt rx450_pos, rx450_eos, rx450_fail1342
    repr_get_attr_int $I11, self, rx450_curclass, "$!from"
    ne $I11, -1, rxscan451_done1348
    goto rxscan451_scan1347
  rxscan451_loop1346:
    inc rx450_pos
    gt rx450_pos, rx450_eos, rx450_fail1342
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!from", rx450_pos
  rxscan451_scan1347:
    nqp_rxmark rx450_bstack, rxscan451_loop1346, rx450_pos, 0
  rxscan451_done1348:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt452_01350
    nqp_push_label $P11, alt452_11357
    nqp_push_label $P11, alt452_21360
    nqp_rxmark rx450_bstack, alt452_end1349, -1, 0
    rx450_cur."!alt"(rx450_pos, "alt_nfa__20_1346277632.616", $P11)
    goto rx450_fail1342
  alt452_01350:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    nqp_rxmark rx450_bstack, rxsubrule453_pass1351, -1, 0
  rxsubrule453_pass1351:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    nqp_rxmark rx450_bstack, rxquantr454_done1353, rx450_pos, 0
  rxquantr454_loop1352:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    goto rxsubrule455_pass1354
  rxsubrule455_back1355:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
  rxsubrule455_pass1354:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule455_back1355
    push rx450_bstack, $I11
    push rx450_bstack, 0
    push rx450_bstack, rx450_pos
    elements $I11, rx450_cstack
    push rx450_bstack, $I11
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    nqp_rxpeek $I19, rx450_bstack, rxquantr454_done1353
    inc $I19
    inc $I19
    set rx450_rep, rx450_bstack[$I19]
    nqp_rxcommit rx450_bstack, rxquantr454_done1353
    inc rx450_rep
  rxquantr454_done1353:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."name"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    nqp_rxmark rx450_bstack, rxsubrule456_pass1356, -1, 0
  rxsubrule456_pass1356:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    goto alt452_end1349
  alt452_11357:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    nqp_rxmark rx450_bstack, rxsubrule457_pass1358, -1, 0
  rxsubrule457_pass1358:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    ge rx450_pos, rx450_eos, rx450_fail1342
    substr $S11, rx450_tgt, rx450_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx450_fail1342
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1342
    nqp_rxmark rx450_bstack, rxsubrule458_pass1359, -1, 0
  rxsubrule458_pass1359:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    goto alt452_end1349
  alt452_21360:
    nqp_rxmark rx450_bstack, rxcap459_fail1362, rx450_pos, 0
    add $I11, rx450_pos, 1
    gt $I11, rx450_eos, rx450_fail1342
    substr $S10, rx450_tgt, rx450_pos, 1
    ne $S10, ucs4:"$", rx450_fail1342
    add rx450_pos, 1
    nqp_rxpeek $I19, rx450_bstack, rxcap459_fail1362
    inc $I19
    set $I11, rx450_bstack[$I19]
    $P11 = rx450_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx450_pos)
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    goto rxcap459_done1361
  rxcap459_fail1362:
    goto rx450_fail1342
  rxcap459_done1361:
    nqp_rxmark rx450_bstack, rxcap460_fail1364, rx450_pos, 0
    ge rx450_pos, rx450_eos, rx450_fail1342
    substr $S11, rx450_tgt, rx450_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx450_fail1342
    inc rx450_pos
    nqp_rxpeek $I19, rx450_bstack, rxcap460_fail1364
    inc $I19
    set $I11, rx450_bstack[$I19]
    $P11 = rx450_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx450_pos)
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap460_done1363
  rxcap460_fail1364:
    goto rx450_fail1342
  rxcap460_done1363:
    goto alt452_end1349
  alt452_end1349:
    rx450_cur."!cursor_pass"(rx450_pos, "variable", 'backtrack'=>1)
    .return (rx450_cur)
  rx450_restart1341:
    repr_get_attr_obj rx450_cstack, rx450_cur, rx450_curclass, "$!cstack"
  rx450_fail1342:
    unless rx450_bstack, rx450_done1340
    pop $I19, rx450_bstack
    if_null rx450_cstack, rx450_cstack_done1345
    unless rx450_cstack, rx450_cstack_done1345
    dec $I19
    set $P11, rx450_cstack[$I19]
  rx450_cstack_done1345:
    pop rx450_rep, rx450_bstack
    pop rx450_pos, rx450_bstack
    pop $I19, rx450_bstack
    lt rx450_pos, -1, rx450_done1340
    lt rx450_pos, 0, rx450_fail1342
    eq $I19, 0, rx450_fail1342
    nqp_islist $I20, rx450_cstack
    unless $I20, rx450_jump1343
    elements $I18, rx450_bstack
    le $I18, 0, rx450_cut1344
    dec $I18
    set $I18, rx450_bstack[$I18]
  rx450_cut1344:
    assign rx450_cstack, $I18
  rx450_jump1343:
    jump $I19
  rx450_done1340:
    rx450_cur."!cursor_fail"()
    .return (rx450_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346277629.325_caps" :subid("cuid_memo_131_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["desigilname"], $P5004
    box $P5005, 0
    set $P5001["postcircumfix"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346277629.325_nfa" :subid("cuid_memo_132_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "sigil"
    push $P5003, $P5008
    box $P5009, 4
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 36
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "twigil"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    box $P5017, 1
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 3
    push $P5013, $P5019
    push $P5001, $P5013
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "name"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 6
    push $P5024, $P5025
    box $P5026, "<["
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, "/_!"
    push $P5032, $P5034
    box $P5035, 0
    push $P5032, $P5035
    push $P5001, $P5032
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346277629.325_alt_nfa__20_1346277632.616" :subid("cuid_memo_133_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "sigil"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "twigil"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 3
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "name"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "sigil"
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 6
    push $P5025, $P5026
    box $P5027, "<["
    push $P5025, $P5027
    box $P5028, 3
    push $P5025, $P5028
    push $P5019, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 0
    push $P5029, $P5030
    box $P5031, 0
    push $P5029, $P5031
    box $P5032, 0
    push $P5029, $P5032
    push $P5019, $P5029
    push $P5001, $P5019
    new $P5033, 'ResizablePMCArray'
    new $P5034, 'ResizablePMCArray'
    push $P5033, $P5034
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 36
    push $P5035, $P5037
    box $P5038, 2
    push $P5035, $P5038
    push $P5033, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 6
    push $P5039, $P5040
    box $P5041, "/_!"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5033, $P5039
    push $P5001, $P5033
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_98_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 892
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    (rx461_cur, rx461_tgt, rx461_pos, rx461_curclass, rx461_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1367
    gt rx461_pos, rx461_eos, rx461_fail1368
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1374
    goto rxscan462_scan1373
  rxscan462_loop1372:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1368
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1373:
    nqp_rxmark rx461_bstack, rxscan462_loop1372, rx461_pos, 0
  rxscan462_done1374:
    ge rx461_pos, rx461_eos, rx461_fail1368
    substr $S11, rx461_tgt, rx461_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx461_fail1368
    inc rx461_pos
    rx461_cur."!cursor_pass"(rx461_pos, "sigil", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1367:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1368:
    unless rx461_bstack, rx461_done1366
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1371
    unless rx461_cstack, rx461_cstack_done1371
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1371:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1366
    lt rx461_pos, 0, rx461_fail1368
    eq $I19, 0, rx461_fail1368
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1369
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1370
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1370:
    assign rx461_cstack, $I18
  rx461_jump1369:
    jump $I19
  rx461_done1366:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1346277629.325_caps" :subid("cuid_memo_134_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1346277629.325_nfa" :subid("cuid_memo_135_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@%&"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_99_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx463_tgt
    .local int rx463_pos
    .local int rx463_off
    .local int rx463_eos
    .local int rx463_rep
    .local pmc rx463_cur
    .local pmc rx463_curclass
    .local pmc rx463_bstack
    .local pmc rx463_cstack
    (rx463_cur, rx463_tgt, rx463_pos, rx463_curclass, rx463_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx463_cur
    length rx463_eos, rx463_tgt
    eq $I19, 1, rx463_restart1377
    gt rx463_pos, rx463_eos, rx463_fail1378
    repr_get_attr_int $I11, self, rx463_curclass, "$!from"
    ne $I11, -1, rxscan464_done1384
    goto rxscan464_scan1383
  rxscan464_loop1382:
    inc rx463_pos
    gt rx463_pos, rx463_eos, rx463_fail1378
    repr_bind_attr_int rx463_cur, rx463_curclass, "$!from", rx463_pos
  rxscan464_scan1383:
    nqp_rxmark rx463_bstack, rxscan464_loop1382, rx463_pos, 0
  rxscan464_done1384:
    ge rx463_pos, rx463_eos, rx463_fail1378
    substr $S11, rx463_tgt, rx463_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx463_fail1378
    inc rx463_pos
    rx463_cur."!cursor_pass"(rx463_pos, "twigil", 'backtrack'=>1)
    .return (rx463_cur)
  rx463_restart1377:
    repr_get_attr_obj rx463_cstack, rx463_cur, rx463_curclass, "$!cstack"
  rx463_fail1378:
    unless rx463_bstack, rx463_done1376
    pop $I19, rx463_bstack
    if_null rx463_cstack, rx463_cstack_done1381
    unless rx463_cstack, rx463_cstack_done1381
    dec $I19
    set $P11, rx463_cstack[$I19]
  rx463_cstack_done1381:
    pop rx463_rep, rx463_bstack
    pop rx463_pos, rx463_bstack
    pop $I19, rx463_bstack
    lt rx463_pos, -1, rx463_done1376
    lt rx463_pos, 0, rx463_fail1378
    eq $I19, 0, rx463_fail1378
    nqp_islist $I20, rx463_cstack
    unless $I20, rx463_jump1379
    elements $I18, rx463_bstack
    le $I18, 0, rx463_cut1380
    dec $I18
    set $I18, rx463_bstack[$I18]
  rx463_cut1380:
    assign rx463_cstack, $I18
  rx463_jump1379:
    jump $I19
  rx463_done1376:
    rx463_cur."!cursor_fail"()
    .return (rx463_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1346277629.325_caps" :subid("cuid_memo_136_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1346277629.325_nfa" :subid("cuid_memo_137_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "*!?"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_100_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_101_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx465_tgt
    .local int rx465_pos
    .local int rx465_off
    .local int rx465_eos
    .local int rx465_rep
    .local pmc rx465_cur
    .local pmc rx465_curclass
    .local pmc rx465_bstack
    .local pmc rx465_cstack
    (rx465_cur, rx465_tgt, rx465_pos, rx465_curclass, rx465_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx465_cur
    length rx465_eos, rx465_tgt
    eq $I19, 1, rx465_restart1387
    gt rx465_pos, rx465_eos, rx465_fail1388
    repr_get_attr_int $I11, self, rx465_curclass, "$!from"
    ne $I11, -1, rxscan466_done1394
    goto rxscan466_scan1393
  rxscan466_loop1392:
    inc rx465_pos
    gt rx465_pos, rx465_eos, rx465_fail1388
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!from", rx465_pos
  rxscan466_scan1393:
    nqp_rxmark rx465_bstack, rxscan466_loop1392, rx465_pos, 0
  rxscan466_done1394:
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    store_lex unicode:"$\x{a2}", rx465_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1395
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1396
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback1396:
    unless_null $P5004, vivi_4671397
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4671397:
    set $P5003, $P5004
  fallback1395:
    set $P101, $P5003
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    store_lex unicode:"$\x{a2}", rx465_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx465_bstack, rxcap468_fail1399, rx465_pos, 0
    add $I11, rx465_pos, 6
    gt $I11, rx465_eos, rx465_fail1388
    substr $S10, rx465_tgt, rx465_pos, 6
    ne $S10, ucs4:"module", rx465_fail1388
    add rx465_pos, 6
    nqp_rxpeek $I19, rx465_bstack, rxcap468_fail1399
    inc $I19
    set $I11, rx465_bstack[$I19]
    $P11 = rx465_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx465_pos)
    rx465_cstack = rx465_cur."!cursor_capture"($P11, "sym")
    goto rxcap468_done1398
  rxcap468_fail1399:
    goto rx465_fail1388
  rxcap468_done1398:
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    $P11 = rx465_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx465_curclass, "$!pos"
    lt $I11, 0, rx465_fail1388
    nqp_rxmark rx465_bstack, rxsubrule469_pass1400, -1, 0
  rxsubrule469_pass1400:
    rx465_cstack = rx465_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx465_pos, $P11, rx465_curclass, "$!pos"
    rx465_cur."!cursor_pass"(rx465_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx465_cur)
  rx465_restart1387:
    repr_get_attr_obj rx465_cstack, rx465_cur, rx465_curclass, "$!cstack"
  rx465_fail1388:
    unless rx465_bstack, rx465_done1386
    pop $I19, rx465_bstack
    if_null rx465_cstack, rx465_cstack_done1391
    unless rx465_cstack, rx465_cstack_done1391
    dec $I19
    set $P11, rx465_cstack[$I19]
  rx465_cstack_done1391:
    pop rx465_rep, rx465_bstack
    pop rx465_pos, rx465_bstack
    pop $I19, rx465_bstack
    lt rx465_pos, -1, rx465_done1386
    lt rx465_pos, 0, rx465_fail1388
    eq $I19, 0, rx465_fail1388
    nqp_islist $I20, rx465_cstack
    unless $I20, rx465_jump1389
    elements $I18, rx465_bstack
    le $I18, 0, rx465_cut1390
    dec $I18
    set $I18, rx465_bstack[$I18]
  rx465_cut1390:
    assign rx465_cstack, $I18
  rx465_jump1389:
    jump $I19
  rx465_done1386:
    rx465_cur."!cursor_fail"()
    .return (rx465_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1346277629.325_caps" :subid("cuid_memo_138_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1346277629.325_nfa" :subid("cuid_memo_139_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 109
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 100
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 117
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 108
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_102_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx470_tgt
    .local int rx470_pos
    .local int rx470_off
    .local int rx470_eos
    .local int rx470_rep
    .local pmc rx470_cur
    .local pmc rx470_curclass
    .local pmc rx470_bstack
    .local pmc rx470_cstack
    (rx470_cur, rx470_tgt, rx470_pos, rx470_curclass, rx470_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx470_cur
    length rx470_eos, rx470_tgt
    eq $I19, 1, rx470_restart1403
    gt rx470_pos, rx470_eos, rx470_fail1404
    repr_get_attr_int $I11, self, rx470_curclass, "$!from"
    ne $I11, -1, rxscan471_done1410
    goto rxscan471_scan1409
  rxscan471_loop1408:
    inc rx470_pos
    gt rx470_pos, rx470_eos, rx470_fail1404
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!from", rx470_pos
  rxscan471_scan1409:
    nqp_rxmark rx470_bstack, rxscan471_loop1408, rx470_pos, 0
  rxscan471_done1410:
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    store_lex unicode:"$\x{a2}", rx470_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1411
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1412
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback1412:
    unless_null $P5004, vivi_4721413
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4721413:
    set $P5003, $P5004
  fallback1411:
    set $P101, $P5003
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    store_lex unicode:"$\x{a2}", rx470_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx470_bstack, rxcap473_fail1415, rx470_pos, 0
    add $I11, rx470_pos, 7
    gt $I11, rx470_eos, rx470_fail1404
    substr $S10, rx470_tgt, rx470_pos, 7
    ne $S10, ucs4:"knowhow", rx470_fail1404
    add rx470_pos, 7
    nqp_rxpeek $I19, rx470_bstack, rxcap473_fail1415
    inc $I19
    set $I11, rx470_bstack[$I19]
    $P11 = rx470_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx470_pos)
    rx470_cstack = rx470_cur."!cursor_capture"($P11, "sym")
    goto rxcap473_done1414
  rxcap473_fail1415:
    goto rx470_fail1404
  rxcap473_done1414:
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    $P11 = rx470_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx470_curclass, "$!pos"
    lt $I11, 0, rx470_fail1404
    nqp_rxmark rx470_bstack, rxsubrule474_pass1416, -1, 0
  rxsubrule474_pass1416:
    rx470_cstack = rx470_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx470_pos, $P11, rx470_curclass, "$!pos"
    rx470_cur."!cursor_pass"(rx470_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx470_cur)
  rx470_restart1403:
    repr_get_attr_obj rx470_cstack, rx470_cur, rx470_curclass, "$!cstack"
  rx470_fail1404:
    unless rx470_bstack, rx470_done1402
    pop $I19, rx470_bstack
    if_null rx470_cstack, rx470_cstack_done1407
    unless rx470_cstack, rx470_cstack_done1407
    dec $I19
    set $P11, rx470_cstack[$I19]
  rx470_cstack_done1407:
    pop rx470_rep, rx470_bstack
    pop rx470_pos, rx470_bstack
    pop $I19, rx470_bstack
    lt rx470_pos, -1, rx470_done1402
    lt rx470_pos, 0, rx470_fail1404
    eq $I19, 0, rx470_fail1404
    nqp_islist $I20, rx470_cstack
    unless $I20, rx470_jump1405
    elements $I18, rx470_bstack
    le $I18, 0, rx470_cut1406
    dec $I18
    set $I18, rx470_bstack[$I18]
  rx470_cut1406:
    assign rx470_cstack, $I18
  rx470_jump1405:
    jump $I19
  rx470_done1402:
    rx470_cur."!cursor_fail"()
    .return (rx470_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1346277629.325_caps" :subid("cuid_memo_140_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1346277629.325_nfa" :subid("cuid_memo_141_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 110
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 119
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 104
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 111
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 119
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_103_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 907
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx475_tgt
    .local int rx475_pos
    .local int rx475_off
    .local int rx475_eos
    .local int rx475_rep
    .local pmc rx475_cur
    .local pmc rx475_curclass
    .local pmc rx475_bstack
    .local pmc rx475_cstack
    (rx475_cur, rx475_tgt, rx475_pos, rx475_curclass, rx475_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx475_cur
    length rx475_eos, rx475_tgt
    eq $I19, 1, rx475_restart1419
    gt rx475_pos, rx475_eos, rx475_fail1420
    repr_get_attr_int $I11, self, rx475_curclass, "$!from"
    ne $I11, -1, rxscan476_done1426
    goto rxscan476_scan1425
  rxscan476_loop1424:
    inc rx475_pos
    gt rx475_pos, rx475_eos, rx475_fail1420
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!from", rx475_pos
  rxscan476_scan1425:
    nqp_rxmark rx475_bstack, rxscan476_loop1424, rx475_pos, 0
  rxscan476_done1426:
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    store_lex unicode:"$\x{a2}", rx475_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1427
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1428
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback1428:
    unless_null $P5004, vivi_4771429
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4771429:
    set $P5003, $P5004
  fallback1427:
    set $P101, $P5003
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    store_lex unicode:"$\x{a2}", rx475_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx475_bstack, rxcap478_fail1431, rx475_pos, 0
    add $I11, rx475_pos, 5
    gt $I11, rx475_eos, rx475_fail1420
    substr $S10, rx475_tgt, rx475_pos, 5
    ne $S10, ucs4:"class", rx475_fail1420
    add rx475_pos, 5
    nqp_rxpeek $I19, rx475_bstack, rxcap478_fail1431
    inc $I19
    set $I11, rx475_bstack[$I19]
    $P11 = rx475_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx475_pos)
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "sym")
    goto rxcap478_done1430
  rxcap478_fail1431:
    goto rx475_fail1420
  rxcap478_done1430:
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1420
    nqp_rxmark rx475_bstack, rxsubrule479_pass1432, -1, 0
  rxsubrule479_pass1432:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    rx475_cur."!cursor_pass"(rx475_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx475_cur)
  rx475_restart1419:
    repr_get_attr_obj rx475_cstack, rx475_cur, rx475_curclass, "$!cstack"
  rx475_fail1420:
    unless rx475_bstack, rx475_done1418
    pop $I19, rx475_bstack
    if_null rx475_cstack, rx475_cstack_done1423
    unless rx475_cstack, rx475_cstack_done1423
    dec $I19
    set $P11, rx475_cstack[$I19]
  rx475_cstack_done1423:
    pop rx475_rep, rx475_bstack
    pop rx475_pos, rx475_bstack
    pop $I19, rx475_bstack
    lt rx475_pos, -1, rx475_done1418
    lt rx475_pos, 0, rx475_fail1420
    eq $I19, 0, rx475_fail1420
    nqp_islist $I20, rx475_cstack
    unless $I20, rx475_jump1421
    elements $I18, rx475_bstack
    le $I18, 0, rx475_cut1422
    dec $I18
    set $I18, rx475_bstack[$I18]
  rx475_cut1422:
    assign rx475_cstack, $I18
  rx475_jump1421:
    jump $I19
  rx475_done1418:
    rx475_cur."!cursor_fail"()
    .return (rx475_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1346277629.325_caps" :subid("cuid_memo_142_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1346277629.325_nfa" :subid("cuid_memo_143_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 99
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 115
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "package_def"
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_104_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 912
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1435
    gt rx480_pos, rx480_eos, rx480_fail1436
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1442
    goto rxscan481_scan1441
  rxscan481_loop1440:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1436
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1441:
    nqp_rxmark rx480_bstack, rxscan481_loop1440, rx480_pos, 0
  rxscan481_done1442:
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    store_lex unicode:"$\x{a2}", rx480_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1443
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1444
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback1444:
    unless_null $P5004, vivi_4821445
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4821445:
    set $P5003, $P5004
  fallback1443:
    set $P101, $P5003
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    store_lex unicode:"$\x{a2}", rx480_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx480_bstack, rxcap483_fail1447, rx480_pos, 0
    add $I11, rx480_pos, 7
    gt $I11, rx480_eos, rx480_fail1436
    substr $S10, rx480_tgt, rx480_pos, 7
    ne $S10, ucs4:"grammar", rx480_fail1436
    add rx480_pos, 7
    nqp_rxpeek $I19, rx480_bstack, rxcap483_fail1447
    inc $I19
    set $I11, rx480_bstack[$I19]
    $P11 = rx480_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx480_pos)
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "sym")
    goto rxcap483_done1446
  rxcap483_fail1447:
    goto rx480_fail1436
  rxcap483_done1446:
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    $P11 = rx480_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx480_curclass, "$!pos"
    lt $I11, 0, rx480_fail1436
    nqp_rxmark rx480_bstack, rxsubrule484_pass1448, -1, 0
  rxsubrule484_pass1448:
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx480_pos, $P11, rx480_curclass, "$!pos"
    rx480_cur."!cursor_pass"(rx480_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1435:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1436:
    unless rx480_bstack, rx480_done1434
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1439
    unless rx480_cstack, rx480_cstack_done1439
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1439:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1434
    lt rx480_pos, 0, rx480_fail1436
    eq $I19, 0, rx480_fail1436
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1437
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1438
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1438:
    assign rx480_cstack, $I18
  rx480_jump1437:
    jump $I19
  rx480_done1434:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1346277629.325_caps" :subid("cuid_memo_144_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1346277629.325_nfa" :subid("cuid_memo_145_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 103
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 109
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 109
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 97
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 114
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_105_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 917
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx485_tgt
    .local int rx485_pos
    .local int rx485_off
    .local int rx485_eos
    .local int rx485_rep
    .local pmc rx485_cur
    .local pmc rx485_curclass
    .local pmc rx485_bstack
    .local pmc rx485_cstack
    (rx485_cur, rx485_tgt, rx485_pos, rx485_curclass, rx485_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx485_cur
    length rx485_eos, rx485_tgt
    eq $I19, 1, rx485_restart1451
    gt rx485_pos, rx485_eos, rx485_fail1452
    repr_get_attr_int $I11, self, rx485_curclass, "$!from"
    ne $I11, -1, rxscan486_done1458
    goto rxscan486_scan1457
  rxscan486_loop1456:
    inc rx485_pos
    gt rx485_pos, rx485_eos, rx485_fail1452
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!from", rx485_pos
  rxscan486_scan1457:
    nqp_rxmark rx485_bstack, rxscan486_loop1456, rx485_pos, 0
  rxscan486_done1458:
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    store_lex unicode:"$\x{a2}", rx485_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1459
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1460
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback1460:
    unless_null $P5004, vivi_4871461
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4871461:
    set $P5003, $P5004
  fallback1459:
    set $P101, $P5003
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    store_lex unicode:"$\x{a2}", rx485_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx485_bstack, rxcap488_fail1463, rx485_pos, 0
    add $I11, rx485_pos, 4
    gt $I11, rx485_eos, rx485_fail1452
    substr $S10, rx485_tgt, rx485_pos, 4
    ne $S10, ucs4:"role", rx485_fail1452
    add rx485_pos, 4
    nqp_rxpeek $I19, rx485_bstack, rxcap488_fail1463
    inc $I19
    set $I11, rx485_bstack[$I19]
    $P11 = rx485_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx485_pos)
    rx485_cstack = rx485_cur."!cursor_capture"($P11, "sym")
    goto rxcap488_done1462
  rxcap488_fail1463:
    goto rx485_fail1452
  rxcap488_done1462:
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    $P11 = rx485_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx485_curclass, "$!pos"
    lt $I11, 0, rx485_fail1452
    nqp_rxmark rx485_bstack, rxsubrule489_pass1464, -1, 0
  rxsubrule489_pass1464:
    rx485_cstack = rx485_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx485_pos, $P11, rx485_curclass, "$!pos"
    rx485_cur."!cursor_pass"(rx485_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx485_cur)
  rx485_restart1451:
    repr_get_attr_obj rx485_cstack, rx485_cur, rx485_curclass, "$!cstack"
  rx485_fail1452:
    unless rx485_bstack, rx485_done1450
    pop $I19, rx485_bstack
    if_null rx485_cstack, rx485_cstack_done1455
    unless rx485_cstack, rx485_cstack_done1455
    dec $I19
    set $P11, rx485_cstack[$I19]
  rx485_cstack_done1455:
    pop rx485_rep, rx485_bstack
    pop rx485_pos, rx485_bstack
    pop $I19, rx485_bstack
    lt rx485_pos, -1, rx485_done1450
    lt rx485_pos, 0, rx485_fail1452
    eq $I19, 0, rx485_fail1452
    nqp_islist $I20, rx485_cstack
    unless $I20, rx485_jump1453
    elements $I18, rx485_bstack
    le $I18, 0, rx485_cut1454
    dec $I18
    set $I18, rx485_bstack[$I18]
  rx485_cut1454:
    assign rx485_cstack, $I18
  rx485_jump1453:
    jump $I19
  rx485_done1450:
    rx485_cur."!cursor_fail"()
    .return (rx485_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1346277629.325_caps" :subid("cuid_memo_146_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1346277629.325_nfa" :subid("cuid_memo_147_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 101
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "package_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_106_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 922
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx490_tgt
    .local int rx490_pos
    .local int rx490_off
    .local int rx490_eos
    .local int rx490_rep
    .local pmc rx490_cur
    .local pmc rx490_curclass
    .local pmc rx490_bstack
    .local pmc rx490_cstack
    (rx490_cur, rx490_tgt, rx490_pos, rx490_curclass, rx490_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx490_cur
    length rx490_eos, rx490_tgt
    eq $I19, 1, rx490_restart1467
    gt rx490_pos, rx490_eos, rx490_fail1468
    repr_get_attr_int $I11, self, rx490_curclass, "$!from"
    ne $I11, -1, rxscan491_done1474
    goto rxscan491_scan1473
  rxscan491_loop1472:
    inc rx490_pos
    gt rx490_pos, rx490_eos, rx490_fail1468
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!from", rx490_pos
  rxscan491_scan1473:
    nqp_rxmark rx490_bstack, rxscan491_loop1472, rx490_pos, 0
  rxscan491_done1474:
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    store_lex unicode:"$\x{a2}", rx490_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1475
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1476
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback1476:
    unless_null $P5004, vivi_4921477
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4921477:
    set $P5003, $P5004
  fallback1475:
    set $P101, $P5003
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    store_lex unicode:"$\x{a2}", rx490_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx490_bstack, rxcap493_fail1479, rx490_pos, 0
    add $I11, rx490_pos, 6
    gt $I11, rx490_eos, rx490_fail1468
    substr $S10, rx490_tgt, rx490_pos, 6
    ne $S10, ucs4:"native", rx490_fail1468
    add rx490_pos, 6
    nqp_rxpeek $I19, rx490_bstack, rxcap493_fail1479
    inc $I19
    set $I11, rx490_bstack[$I19]
    $P11 = rx490_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx490_pos)
    rx490_cstack = rx490_cur."!cursor_capture"($P11, "sym")
    goto rxcap493_done1478
  rxcap493_fail1479:
    goto rx490_fail1468
  rxcap493_done1478:
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    $P11 = rx490_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx490_curclass, "$!pos"
    lt $I11, 0, rx490_fail1468
    nqp_rxmark rx490_bstack, rxsubrule494_pass1480, -1, 0
  rxsubrule494_pass1480:
    rx490_cstack = rx490_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx490_pos, $P11, rx490_curclass, "$!pos"
    rx490_cur."!cursor_pass"(rx490_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx490_cur)
  rx490_restart1467:
    repr_get_attr_obj rx490_cstack, rx490_cur, rx490_curclass, "$!cstack"
  rx490_fail1468:
    unless rx490_bstack, rx490_done1466
    pop $I19, rx490_bstack
    if_null rx490_cstack, rx490_cstack_done1471
    unless rx490_cstack, rx490_cstack_done1471
    dec $I19
    set $P11, rx490_cstack[$I19]
  rx490_cstack_done1471:
    pop rx490_rep, rx490_bstack
    pop rx490_pos, rx490_bstack
    pop $I19, rx490_bstack
    lt rx490_pos, -1, rx490_done1466
    lt rx490_pos, 0, rx490_fail1468
    eq $I19, 0, rx490_fail1468
    nqp_islist $I20, rx490_cstack
    unless $I20, rx490_jump1469
    elements $I18, rx490_bstack
    le $I18, 0, rx490_cut1470
    dec $I18
    set $I18, rx490_bstack[$I18]
  rx490_cut1470:
    assign rx490_cstack, $I18
  rx490_jump1469:
    jump $I19
  rx490_done1466:
    rx490_cur."!cursor_fail"()
    .return (rx490_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1346277629.325_caps" :subid("cuid_memo_148_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1346277629.325_nfa" :subid("cuid_memo_149_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 110
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 97
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 118
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_107_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 927
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx495_tgt
    .local int rx495_pos
    .local int rx495_off
    .local int rx495_eos
    .local int rx495_rep
    .local pmc rx495_cur
    .local pmc rx495_curclass
    .local pmc rx495_bstack
    .local pmc rx495_cstack
    (rx495_cur, rx495_tgt, rx495_pos, rx495_curclass, rx495_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx495_cur
    length rx495_eos, rx495_tgt
    eq $I19, 1, rx495_restart1483
    gt rx495_pos, rx495_eos, rx495_fail1484
    repr_get_attr_int $I11, self, rx495_curclass, "$!from"
    ne $I11, -1, rxscan496_done1490
    goto rxscan496_scan1489
  rxscan496_loop1488:
    inc rx495_pos
    gt rx495_pos, rx495_eos, rx495_fail1484
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!from", rx495_pos
  rxscan496_scan1489:
    nqp_rxmark rx495_bstack, rxscan496_loop1488, rx495_pos, 0
  rxscan496_done1490:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1491
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1492
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback1492:
    unless_null $P5004, vivi_4971493
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4971493:
    set $P5003, $P5004
  fallback1491:
    set $P101, $P5003
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx495_bstack, rxcap498_fail1495, rx495_pos, 0
    add $I11, rx495_pos, 4
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 4
    ne $S10, ucs4:"stub", rx495_fail1484
    add rx495_pos, 4
    nqp_rxpeek $I19, rx495_bstack, rxcap498_fail1495
    inc $I19
    set $I11, rx495_bstack[$I19]
    $P11 = rx495_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx495_pos)
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "sym")
    goto rxcap498_done1494
  rxcap498_fail1495:
    goto rx495_fail1484
  rxcap498_done1494:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."name"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    nqp_rxmark rx495_bstack, rxsubrule500_pass1497, -1, 0
  rxsubrule500_pass1497:
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 9
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 9
    ne $S10, ucs4:"metaclass", rx495_fail1484
    add rx495_pos, 9
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."name"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    nqp_rxmark rx495_bstack, rxsubrule503_pass1500, -1, 0
  rxsubrule503_pass1500:
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 1
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 1
    ne $S10, ucs4:"{", rx495_fail1484
    add rx495_pos, 1
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 3
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 3
    ne $S10, ucs4:"...", rx495_fail1484
    add rx495_pos, 3
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 1
    gt $I11, rx495_eos, rx495_fail1484
    substr $S10, rx495_tgt, rx495_pos, 1
    ne $S10, ucs4:"}", rx495_fail1484
    add rx495_pos, 1
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1484
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    rx495_cur."!cursor_pass"(rx495_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx495_cur)
  rx495_restart1483:
    repr_get_attr_obj rx495_cstack, rx495_cur, rx495_curclass, "$!cstack"
  rx495_fail1484:
    unless rx495_bstack, rx495_done1482
    pop $I19, rx495_bstack
    if_null rx495_cstack, rx495_cstack_done1487
    unless rx495_cstack, rx495_cstack_done1487
    dec $I19
    set $P11, rx495_cstack[$I19]
  rx495_cstack_done1487:
    pop rx495_rep, rx495_bstack
    pop rx495_pos, rx495_bstack
    pop $I19, rx495_bstack
    lt rx495_pos, -1, rx495_done1482
    lt rx495_pos, 0, rx495_fail1484
    eq $I19, 0, rx495_fail1484
    nqp_islist $I20, rx495_cstack
    unless $I20, rx495_jump1485
    elements $I18, rx495_bstack
    le $I18, 0, rx495_cut1486
    dec $I18
    set $I18, rx495_bstack[$I18]
  rx495_cut1486:
    assign rx495_cstack, $I18
  rx495_jump1485:
    jump $I19
  rx495_done1482:
    rx495_cur."!cursor_fail"()
    .return (rx495_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1346277629.325_caps" :subid("cuid_memo_150_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    box $P5004, 0
    set $P5001["metaclass"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1346277629.325_nfa" :subid("cuid_memo_151_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 117
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 98
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_108_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_391_1346277629.325' 
    capture_lex $P5010 
    .lex "$*PACKAGE", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx508_tgt
    .local int rx508_pos
    .local int rx508_off
    .local int rx508_eos
    .local int rx508_rep
    .local pmc rx508_cur
    .local pmc rx508_curclass
    .local pmc rx508_bstack
    .local pmc rx508_cstack
    (rx508_cur, rx508_tgt, rx508_pos, rx508_curclass, rx508_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx508_cur
    length rx508_eos, rx508_tgt
    eq $I19, 1, rx508_restart1507
    gt rx508_pos, rx508_eos, rx508_fail1508
    repr_get_attr_int $I11, self, rx508_curclass, "$!from"
    ne $I11, -1, rxscan509_done1514
    goto rxscan509_scan1513
  rxscan509_loop1512:
    inc rx508_pos
    gt rx508_pos, rx508_eos, rx508_fail1508
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!from", rx508_pos
  rxscan509_scan1513:
    nqp_rxmark rx508_bstack, rxscan509_loop1512, rx508_pos, 0
  rxscan509_done1514:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    store_lex unicode:"$\x{a2}", rx508_cur
    unless_null $P101, fallback1516
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$PACKAGE"]
    unless_null $P5002, fallback1517
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback1517:
    unless_null $P5002, vivi_5111518
    die "Contextual $*PACKAGE not found"
    box $P5006, "Contextual $*PACKAGE not found"
    set $P5002, $P5006
  vivi_5111518:
    set $P101, $P5002
  fallback1516:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule513_pass1520, -1, 0
  rxsubrule513_pass1520:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr515_done1523, rx508_pos, 0
  rxquantr515_loop1522:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 2
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 2
    ne $S10, ucs4:"is", rx508_fail1508
    add rx508_pos, 2
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 5
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 5
    ne $S10, ucs4:"repr(", rx508_fail1508
    add rx508_pos, 5
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule519_pass1527, -1, 0
  rxsubrule519_pass1527:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 1
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 1
    ne $S10, ucs4:")", rx508_fail1508
    add rx508_pos, 1
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr515_done1523
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr515_done1523
    inc rx508_rep
  rxquantr515_done1523:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    store_lex unicode:"$\x{a2}", rx508_cur
    $P5007 = $P102."MATCH"()
    set $P103, $P5007
    .const 'Sub' $P5008 = 'cuid_391_1346277629.325' 
    capture_lex $P5008
    $P5009 = $P5008()
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr546_done1614, rx508_pos, 0
  rxquantr546_loop1613:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 2
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 2
    ne $S10, ucs4:"is", rx508_fail1508
    add rx508_pos, 2
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule549_pass1617, -1, 0
  rxsubrule549_pass1617:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr546_done1614
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr546_done1614
    inc rx508_rep
  rxquantr546_done1614:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr552_done1621, rx508_pos, 0
  rxquantr552_loop1620:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 4
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 4
    ne $S10, ucs4:"does", rx508_fail1508
    add rx508_pos, 4
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule555_pass1624, -1, 0
  rxsubrule555_pass1624:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr552_done1621
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr552_done1621
    inc rx508_rep
    nqp_rxmark rx508_bstack, rxquantr552_done1621, rx508_pos, rx508_rep
    goto rxquantr552_loop1620
  rxquantr552_done1621:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
  alt558_01628:
    nqp_rxmark rx508_bstack, alt558_11633, rx508_pos, 0
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 1
    gt $I11, rx508_eos, rx508_fail1508
    substr $S10, rx508_tgt, rx508_pos, 1
    ne $S10, ucs4:";", rx508_fail1508
    add rx508_pos, 1
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."comp_unit"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule561_pass1631, -1, 0
  rxsubrule561_pass1631:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "comp_unit")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    goto alt558_end1627
  alt558_11633:
    nqp_rxmark rx508_bstack, alt558_21638, rx508_pos, 0
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    ge rx508_pos, rx508_eos, rx508_fail1508
    substr $S11, rx508_tgt, rx508_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx508_fail1508
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."block"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    nqp_rxmark rx508_bstack, rxsubrule565_pass1636, -1, 0
  rxsubrule565_pass1636:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    goto alt558_end1627
  alt558_21638:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
  alt558_end1627:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1508
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    rx508_cur."!cursor_pass"(rx508_pos, "package_def", 'backtrack'=>1)
    .return (rx508_cur)
  rx508_restart1507:
    repr_get_attr_obj rx508_cstack, rx508_cur, rx508_curclass, "$!cstack"
  rx508_fail1508:
    unless rx508_bstack, rx508_done1506
    pop $I19, rx508_bstack
    if_null rx508_cstack, rx508_cstack_done1511
    unless rx508_cstack, rx508_cstack_done1511
    dec $I19
    set $P11, rx508_cstack[$I19]
  rx508_cstack_done1511:
    pop rx508_rep, rx508_bstack
    pop rx508_pos, rx508_bstack
    pop $I19, rx508_bstack
    lt rx508_pos, -1, rx508_done1506
    lt rx508_pos, 0, rx508_fail1508
    eq $I19, 0, rx508_fail1508
    nqp_islist $I20, rx508_cstack
    unless $I20, rx508_jump1509
    elements $I18, rx508_bstack
    le $I18, 0, rx508_cut1510
    dec $I18
    set $I18, rx508_bstack[$I18]
  rx508_cut1510:
    assign rx508_cstack, $I18
  rx508_jump1509:
    jump $I19
  rx508_done1506:
    rx508_cur."!cursor_fail"()
    .return (rx508_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_108_1346277629.325_caps" :subid("cuid_memo_152_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["repr"], $P5003
    box $P5004, 2
    set $P5001["parent"], $P5004
    box $P5005, 2
    set $P5001["role"], $P5005
    box $P5006, 0
    set $P5001["comp_unit"], $P5006
    box $P5007, 0
    set $P5001["block"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1346277629.325") :anon :lex :outer("cuid_108_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 941
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1531
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5004
  fallback1531:
    set $S5001, $P5002
    box $P5005, $S5001
    set $P101["name"], $P5005
    find_lex $P5007, "$/"
    set $P5006, $P5007["repr"]
    unless_null $P5006, fallback1534
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5008
  fallback1534:
    set $P5021, $P5006
    unless $P5006 goto if523_end1533 
.annotate 'line', 946
    find_lex $P5014, "$/"
    set $P5013, $P5014["repr"]
    unless_null $P5013, fallback1535
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5015
  fallback1535:
    set $P5012, $P5013[0]
    unless_null $P5012, fallback1536
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback1536:
    set $P5011, $P5012["quote_delimited"]
    unless_null $P5011, fallback1537
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5017
  fallback1537:
    set $P5010, $P5011["quote_atom"]
    unless_null $P5010, fallback1538
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5018
  fallback1538:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback1539
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5019
  fallback1539:
    set $S5002, $P5009
    box $P5020, $S5002
    set $P101["repr"], $P5020
    set $P5021, $P5020
  if523_end1533:
.annotate 'line', 949
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback1540
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback1541
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5026
  fallback1541:
    unless_null $P5023, vivi_5241542
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_5241542:
    set $P5022, $P5023
  fallback1540:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback1543
    get_hll_global $P5032, "GLOBAL"
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback1544
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback1544:
    unless_null $P5030, vivi_5251545
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_5251545:
    set $P5029, $P5030
  fallback1543:
    find_dynamic_lex $P5037, "$*PKGDECL"
    unless_null $P5037, fallback1546
    get_hll_global $P5040, "GLOBAL"
    get_who $P5039, $P5040
    set $P5038, $P5039["$PKGDECL"]
    unless_null $P5038, fallback1547
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5038, $P5041
  fallback1547:
    unless_null $P5038, vivi_5261548
    die "Contextual $*PKGDECL not found"
    box $P5042, "Contextual $*PKGDECL not found"
    set $P5038, $P5042
  vivi_5261548:
    set $P5037, $P5038
  fallback1546:
    set $S5003, $P5037
    set $P5028, $P5029[$S5003]
    unless_null $P5028, fallback1549
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5043
  fallback1549:
    $P5044 = $P5022."pkg_create_mo"($P5028, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5044
    find_dynamic_lex $P5045, "$*SCOPE"
    unless_null $P5045, fallback1554
    get_hll_global $P5048, "GLOBAL"
    get_who $P5047, $P5048
    set $P5046, $P5047["$SCOPE"]
    unless_null $P5046, fallback1555
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5046, $P5049
  fallback1555:
    unless_null $P5046, vivi_5291556
    die "Contextual $*SCOPE not found"
    box $P5050, "Contextual $*SCOPE not found"
    set $P5046, $P5050
  vivi_5291556:
    set $P5045, $P5046
  fallback1554:
    set $S5004, $P5045
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless528_end1553 
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback1557
    get_hll_global $P5054, "GLOBAL"
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback1558
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5052, $P5055
  fallback1558:
    unless_null $P5052, vivi_5301559
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_5301559:
    set $P5051, $P5052
  fallback1557:
    set $S5005, $P5051
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless528_end1553:
    unless $I5003 goto if527_else1550 
.annotate 'line', 952
.annotate 'line', 953
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback1560
    get_hll_global $P5060, "GLOBAL"
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback1561
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5058, $P5061
  fallback1561:
    unless_null $P5058, vivi_5311562
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_5311562:
    set $P5057, $P5058
  fallback1560:
    find_dynamic_lex $P5063, "$*OUTERPACKAGE"
    unless_null $P5063, fallback1563
    get_hll_global $P5066, "GLOBAL"
    get_who $P5065, $P5066
    set $P5064, $P5065["$OUTERPACKAGE"]
    unless_null $P5064, fallback1564
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5064, $P5067
  fallback1564:
    unless_null $P5064, vivi_5321565
    die "Contextual $*OUTERPACKAGE not found"
    box $P5068, "Contextual $*OUTERPACKAGE not found"
    set $P5064, $P5068
  vivi_5321565:
    set $P5063, $P5064
  fallback1563:
    find_lex $P5071, "$/"
    set $P5070, $P5071["name"]
    unless_null $P5070, fallback1566
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5070, $P5072
  fallback1566:
    set $P5069, $P5070["identifier"]
    unless_null $P5069, fallback1567
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5073
  fallback1567:
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback1568
    get_hll_global $P5077, "GLOBAL"
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback1569
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5075, $P5078
  fallback1569:
    unless_null $P5075, vivi_5331570
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_5331570:
    set $P5074, $P5075
  fallback1568:
    $P5080 = $P5057."install_package_symbol"($P5063, $P5069, $P5074)
    find_lex $P5083, "$/"
    set $P5082, $P5083["name"]
    unless_null $P5082, fallback1573
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5082, $P5084
  fallback1573:
    set $P5081, $P5082["identifier"]
    unless_null $P5081, fallback1574
    nqp_get_sc_object $P5085, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5081, $P5085
  fallback1574:
    set $N5001, $P5081
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5114, $I5004
    set $P5113, $P5114
    unless $I5004 goto if534_end1572 
.annotate 'line', 954
.annotate 'line', 955
    find_dynamic_lex $P5086, "$*W"
    unless_null $P5086, fallback1575
    get_hll_global $P5089, "GLOBAL"
    get_who $P5088, $P5089
    set $P5087, $P5088["$W"]
    unless_null $P5087, fallback1576
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5087, $P5090
  fallback1576:
    unless_null $P5087, vivi_5351577
    die "Contextual $*W not found"
    box $P5091, "Contextual $*W not found"
    set $P5087, $P5091
  vivi_5351577:
    set $P5086, $P5087
  fallback1575:
    find_dynamic_lex $P5092, "$*W"
    unless_null $P5092, fallback1578
    get_hll_global $P5095, "GLOBAL"
    get_who $P5094, $P5095
    set $P5093, $P5094["$W"]
    unless_null $P5093, fallback1579
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5093, $P5096
  fallback1579:
    unless_null $P5093, vivi_5361580
    die "Contextual $*W not found"
    box $P5097, "Contextual $*W not found"
    set $P5093, $P5097
  vivi_5361580:
    set $P5092, $P5093
  fallback1578:
    $P5098 = $P5092."cur_lexpad"()
    find_lex $P5102, "$/"
    set $P5101, $P5102["name"]
    unless_null $P5101, fallback1581
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5101, $P5103
  fallback1581:
    set $P5100, $P5101["identifier"]
    unless_null $P5100, fallback1582
    nqp_get_sc_object $P5104, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5100, $P5104
  fallback1582:
    set $P5099, $P5100[0]
    unless_null $P5099, fallback1583
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5099, $P5105
  fallback1583:
    find_dynamic_lex $P5106, "$*PACKAGE"
    unless_null $P5106, fallback1584
    get_hll_global $P5109, "GLOBAL"
    get_who $P5108, $P5109
    set $P5107, $P5108["$PACKAGE"]
    unless_null $P5107, fallback1585
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5107, $P5110
  fallback1585:
    unless_null $P5107, vivi_5371586
    die "Contextual $*PACKAGE not found"
    box $P5111, "Contextual $*PACKAGE not found"
    set $P5107, $P5111
  vivi_5371586:
    set $P5106, $P5107
  fallback1584:
    $P5112 = $P5086."install_lexical_symbol"($P5098, $P5099, $P5106)
    set $P5113, $P5112
  if534_end1572:
    set $P5170, $P5113
    goto if527_end1551
  if527_else1550:
    find_dynamic_lex $P5115, "$*SCOPE"
    unless_null $P5115, fallback1589
    get_hll_global $P5118, "GLOBAL"
    get_who $P5117, $P5118
    set $P5116, $P5117["$SCOPE"]
    unless_null $P5116, fallback1590
    nqp_get_sc_object $P5119, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5116, $P5119
  fallback1590:
    unless_null $P5116, vivi_5391591
    die "Contextual $*SCOPE not found"
    box $P5120, "Contextual $*SCOPE not found"
    set $P5116, $P5120
  vivi_5391591:
    set $P5115, $P5116
  fallback1589:
    set $S5006, $P5115
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if538_else1587 
.annotate 'line', 958
    find_lex $P5123, "$/"
    set $P5122, $P5123["name"]
    unless_null $P5122, fallback1594
    nqp_get_sc_object $P5124, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5122, $P5124
  fallback1594:
    set $P5121, $P5122["identifier"]
    unless_null $P5121, fallback1595
    nqp_get_sc_object $P5125, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5121, $P5125
  fallback1595:
    set $N5003, $P5121
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5132, $I5006
    set $P5131, $P5132
    unless $I5006 goto if540_end1593 
.annotate 'line', 959
.annotate 'line', 960
    find_lex $P5127, "$/"
    set $P5126, $P5127["name"]
    unless_null $P5126, fallback1596
    nqp_get_sc_object $P5128, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5126, $P5128
  fallback1596:
    $P5129 = $P5126."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5131, $P5130
  if540_end1593:
.annotate 'line', 962
    find_dynamic_lex $P5133, "$*W"
    unless_null $P5133, fallback1597
    get_hll_global $P5136, "GLOBAL"
    get_who $P5135, $P5136
    set $P5134, $P5135["$W"]
    unless_null $P5134, fallback1598
    nqp_get_sc_object $P5137, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5134, $P5137
  fallback1598:
    unless_null $P5134, vivi_5411599
    die "Contextual $*W not found"
    box $P5138, "Contextual $*W not found"
    set $P5134, $P5138
  vivi_5411599:
    set $P5133, $P5134
  fallback1597:
    find_dynamic_lex $P5139, "$*W"
    unless_null $P5139, fallback1600
    get_hll_global $P5142, "GLOBAL"
    get_who $P5141, $P5142
    set $P5140, $P5141["$W"]
    unless_null $P5140, fallback1601
    nqp_get_sc_object $P5143, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5140, $P5143
  fallback1601:
    unless_null $P5140, vivi_5421602
    die "Contextual $*W not found"
    box $P5144, "Contextual $*W not found"
    set $P5140, $P5144
  vivi_5421602:
    set $P5139, $P5140
  fallback1600:
    $P5145 = $P5139."cur_lexpad"()
    find_lex $P5149, "$/"
    set $P5148, $P5149["name"]
    unless_null $P5148, fallback1603
    nqp_get_sc_object $P5150, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5148, $P5150
  fallback1603:
    set $P5147, $P5148["identifier"]
    unless_null $P5147, fallback1604
    nqp_get_sc_object $P5151, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5147, $P5151
  fallback1604:
    set $P5146, $P5147[0]
    unless_null $P5146, fallback1605
    nqp_get_sc_object $P5152, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5146, $P5152
  fallback1605:
    find_dynamic_lex $P5153, "$*PACKAGE"
    unless_null $P5153, fallback1606
    get_hll_global $P5156, "GLOBAL"
    get_who $P5155, $P5156
    set $P5154, $P5155["$PACKAGE"]
    unless_null $P5154, fallback1607
    nqp_get_sc_object $P5157, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5154, $P5157
  fallback1607:
    unless_null $P5154, vivi_5431608
    die "Contextual $*PACKAGE not found"
    box $P5158, "Contextual $*PACKAGE not found"
    set $P5154, $P5158
  vivi_5431608:
    set $P5153, $P5154
  fallback1606:
    $P5159 = $P5133."install_lexical_symbol"($P5145, $P5146, $P5153)
    set $P5169, $P5159
    goto if538_end1588
  if538_else1587:
.annotate 'line', 964
.annotate 'line', 965
    find_lex $P5160, "$/"
    $P5161 = $P5160."CURSOR"()
    find_dynamic_lex $P5162, "$*SCOPE"
    unless_null $P5162, fallback1609
    get_hll_global $P5165, "GLOBAL"
    get_who $P5164, $P5165
    set $P5163, $P5164["$SCOPE"]
    unless_null $P5163, fallback1610
    nqp_get_sc_object $P5166, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5163, $P5166
  fallback1610:
    unless_null $P5163, vivi_5441611
    die "Contextual $*SCOPE not found"
    box $P5167, "Contextual $*SCOPE not found"
    set $P5163, $P5167
  vivi_5441611:
    set $P5162, $P5163
  fallback1609:
    set $S5008, $P5162
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5168 = $P5161."panic"($S5007)
    set $P5169, $P5168
  if538_end1588:
    set $P5170, $P5169
  if527_end1551:
    .return ($P5170) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_109_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 978
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_110_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 979
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx571_tgt
    .local int rx571_pos
    .local int rx571_off
    .local int rx571_eos
    .local int rx571_rep
    .local pmc rx571_cur
    .local pmc rx571_curclass
    .local pmc rx571_bstack
    .local pmc rx571_cstack
    (rx571_cur, rx571_tgt, rx571_pos, rx571_curclass, rx571_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx571_cur
    length rx571_eos, rx571_tgt
    eq $I19, 1, rx571_restart1645
    gt rx571_pos, rx571_eos, rx571_fail1646
    repr_get_attr_int $I11, self, rx571_curclass, "$!from"
    ne $I11, -1, rxscan572_done1652
    goto rxscan572_scan1651
  rxscan572_loop1650:
    inc rx571_pos
    gt rx571_pos, rx571_eos, rx571_fail1646
    repr_bind_attr_int rx571_cur, rx571_curclass, "$!from", rx571_pos
  rxscan572_scan1651:
    nqp_rxmark rx571_bstack, rxscan572_loop1650, rx571_pos, 0
  rxscan572_done1652:
    nqp_rxmark rx571_bstack, rxcap573_fail1654, rx571_pos, 0
    add $I11, rx571_pos, 2
    gt $I11, rx571_eos, rx571_fail1646
    substr $S10, rx571_tgt, rx571_pos, 2
    ne $S10, ucs4:"my", rx571_fail1646
    add rx571_pos, 2
    nqp_rxpeek $I19, rx571_bstack, rxcap573_fail1654
    inc $I19
    set $I11, rx571_bstack[$I19]
    $P11 = rx571_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx571_pos)
    rx571_cstack = rx571_cur."!cursor_capture"($P11, "sym")
    goto rxcap573_done1653
  rxcap573_fail1654:
    goto rx571_fail1646
  rxcap573_done1653:
    repr_bind_attr_int rx571_cur, rx571_curclass, "$!pos", rx571_pos
    $P11 = rx571_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx571_curclass, "$!pos"
    lt $I11, 0, rx571_fail1646
    nqp_rxmark rx571_bstack, rxsubrule574_pass1655, -1, 0
  rxsubrule574_pass1655:
    rx571_cstack = rx571_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx571_pos, $P11, rx571_curclass, "$!pos"
    rx571_cur."!cursor_pass"(rx571_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx571_cur)
  rx571_restart1645:
    repr_get_attr_obj rx571_cstack, rx571_cur, rx571_curclass, "$!cstack"
  rx571_fail1646:
    unless rx571_bstack, rx571_done1644
    pop $I19, rx571_bstack
    if_null rx571_cstack, rx571_cstack_done1649
    unless rx571_cstack, rx571_cstack_done1649
    dec $I19
    set $P11, rx571_cstack[$I19]
  rx571_cstack_done1649:
    pop rx571_rep, rx571_bstack
    pop rx571_pos, rx571_bstack
    pop $I19, rx571_bstack
    lt rx571_pos, -1, rx571_done1644
    lt rx571_pos, 0, rx571_fail1646
    eq $I19, 0, rx571_fail1646
    nqp_islist $I20, rx571_cstack
    unless $I20, rx571_jump1647
    elements $I18, rx571_bstack
    le $I18, 0, rx571_cut1648
    dec $I18
    set $I18, rx571_bstack[$I18]
  rx571_cut1648:
    assign rx571_cstack, $I18
  rx571_jump1647:
    jump $I19
  rx571_done1644:
    rx571_cur."!cursor_fail"()
    .return (rx571_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1346277629.325_caps" :subid("cuid_memo_153_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1346277629.325_nfa" :subid("cuid_memo_154_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "scoped"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_111_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 980
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx575_tgt
    .local int rx575_pos
    .local int rx575_off
    .local int rx575_eos
    .local int rx575_rep
    .local pmc rx575_cur
    .local pmc rx575_curclass
    .local pmc rx575_bstack
    .local pmc rx575_cstack
    (rx575_cur, rx575_tgt, rx575_pos, rx575_curclass, rx575_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx575_cur
    length rx575_eos, rx575_tgt
    eq $I19, 1, rx575_restart1658
    gt rx575_pos, rx575_eos, rx575_fail1659
    repr_get_attr_int $I11, self, rx575_curclass, "$!from"
    ne $I11, -1, rxscan576_done1665
    goto rxscan576_scan1664
  rxscan576_loop1663:
    inc rx575_pos
    gt rx575_pos, rx575_eos, rx575_fail1659
    repr_bind_attr_int rx575_cur, rx575_curclass, "$!from", rx575_pos
  rxscan576_scan1664:
    nqp_rxmark rx575_bstack, rxscan576_loop1663, rx575_pos, 0
  rxscan576_done1665:
    nqp_rxmark rx575_bstack, rxcap577_fail1667, rx575_pos, 0
    add $I11, rx575_pos, 3
    gt $I11, rx575_eos, rx575_fail1659
    substr $S10, rx575_tgt, rx575_pos, 3
    ne $S10, ucs4:"our", rx575_fail1659
    add rx575_pos, 3
    nqp_rxpeek $I19, rx575_bstack, rxcap577_fail1667
    inc $I19
    set $I11, rx575_bstack[$I19]
    $P11 = rx575_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx575_pos)
    rx575_cstack = rx575_cur."!cursor_capture"($P11, "sym")
    goto rxcap577_done1666
  rxcap577_fail1667:
    goto rx575_fail1659
  rxcap577_done1666:
    repr_bind_attr_int rx575_cur, rx575_curclass, "$!pos", rx575_pos
    $P11 = rx575_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx575_curclass, "$!pos"
    lt $I11, 0, rx575_fail1659
    nqp_rxmark rx575_bstack, rxsubrule578_pass1668, -1, 0
  rxsubrule578_pass1668:
    rx575_cstack = rx575_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx575_pos, $P11, rx575_curclass, "$!pos"
    rx575_cur."!cursor_pass"(rx575_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx575_cur)
  rx575_restart1658:
    repr_get_attr_obj rx575_cstack, rx575_cur, rx575_curclass, "$!cstack"
  rx575_fail1659:
    unless rx575_bstack, rx575_done1657
    pop $I19, rx575_bstack
    if_null rx575_cstack, rx575_cstack_done1662
    unless rx575_cstack, rx575_cstack_done1662
    dec $I19
    set $P11, rx575_cstack[$I19]
  rx575_cstack_done1662:
    pop rx575_rep, rx575_bstack
    pop rx575_pos, rx575_bstack
    pop $I19, rx575_bstack
    lt rx575_pos, -1, rx575_done1657
    lt rx575_pos, 0, rx575_fail1659
    eq $I19, 0, rx575_fail1659
    nqp_islist $I20, rx575_cstack
    unless $I20, rx575_jump1660
    elements $I18, rx575_bstack
    le $I18, 0, rx575_cut1661
    dec $I18
    set $I18, rx575_bstack[$I18]
  rx575_cut1661:
    assign rx575_cstack, $I18
  rx575_jump1660:
    jump $I19
  rx575_done1657:
    rx575_cur."!cursor_fail"()
    .return (rx575_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1346277629.325_caps" :subid("cuid_memo_155_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1346277629.325_nfa" :subid("cuid_memo_156_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 111
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_112_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 981
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx579_tgt
    .local int rx579_pos
    .local int rx579_off
    .local int rx579_eos
    .local int rx579_rep
    .local pmc rx579_cur
    .local pmc rx579_curclass
    .local pmc rx579_bstack
    .local pmc rx579_cstack
    (rx579_cur, rx579_tgt, rx579_pos, rx579_curclass, rx579_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx579_cur
    length rx579_eos, rx579_tgt
    eq $I19, 1, rx579_restart1671
    gt rx579_pos, rx579_eos, rx579_fail1672
    repr_get_attr_int $I11, self, rx579_curclass, "$!from"
    ne $I11, -1, rxscan580_done1678
    goto rxscan580_scan1677
  rxscan580_loop1676:
    inc rx579_pos
    gt rx579_pos, rx579_eos, rx579_fail1672
    repr_bind_attr_int rx579_cur, rx579_curclass, "$!from", rx579_pos
  rxscan580_scan1677:
    nqp_rxmark rx579_bstack, rxscan580_loop1676, rx579_pos, 0
  rxscan580_done1678:
    nqp_rxmark rx579_bstack, rxcap581_fail1680, rx579_pos, 0
    add $I11, rx579_pos, 3
    gt $I11, rx579_eos, rx579_fail1672
    substr $S10, rx579_tgt, rx579_pos, 3
    ne $S10, ucs4:"has", rx579_fail1672
    add rx579_pos, 3
    nqp_rxpeek $I19, rx579_bstack, rxcap581_fail1680
    inc $I19
    set $I11, rx579_bstack[$I19]
    $P11 = rx579_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx579_pos)
    rx579_cstack = rx579_cur."!cursor_capture"($P11, "sym")
    goto rxcap581_done1679
  rxcap581_fail1680:
    goto rx579_fail1672
  rxcap581_done1679:
    repr_bind_attr_int rx579_cur, rx579_curclass, "$!pos", rx579_pos
    $P11 = rx579_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx579_curclass, "$!pos"
    lt $I11, 0, rx579_fail1672
    nqp_rxmark rx579_bstack, rxsubrule582_pass1681, -1, 0
  rxsubrule582_pass1681:
    rx579_cstack = rx579_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx579_pos, $P11, rx579_curclass, "$!pos"
    rx579_cur."!cursor_pass"(rx579_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx579_cur)
  rx579_restart1671:
    repr_get_attr_obj rx579_cstack, rx579_cur, rx579_curclass, "$!cstack"
  rx579_fail1672:
    unless rx579_bstack, rx579_done1670
    pop $I19, rx579_bstack
    if_null rx579_cstack, rx579_cstack_done1675
    unless rx579_cstack, rx579_cstack_done1675
    dec $I19
    set $P11, rx579_cstack[$I19]
  rx579_cstack_done1675:
    pop rx579_rep, rx579_bstack
    pop rx579_pos, rx579_bstack
    pop $I19, rx579_bstack
    lt rx579_pos, -1, rx579_done1670
    lt rx579_pos, 0, rx579_fail1672
    eq $I19, 0, rx579_fail1672
    nqp_islist $I20, rx579_cstack
    unless $I20, rx579_jump1673
    elements $I18, rx579_bstack
    le $I18, 0, rx579_cut1674
    dec $I18
    set $I18, rx579_bstack[$I18]
  rx579_cut1674:
    assign rx579_cstack, $I18
  rx579_jump1673:
    jump $I19
  rx579_done1670:
    rx579_cur."!cursor_fail"()
    .return (rx579_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1346277629.325_caps" :subid("cuid_memo_157_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1346277629.325_nfa" :subid("cuid_memo_158_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 104
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_113_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 983
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx583_tgt
    .local int rx583_pos
    .local int rx583_off
    .local int rx583_eos
    .local int rx583_rep
    .local pmc rx583_cur
    .local pmc rx583_curclass
    .local pmc rx583_bstack
    .local pmc rx583_cstack
    (rx583_cur, rx583_tgt, rx583_pos, rx583_curclass, rx583_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx583_cur
    length rx583_eos, rx583_tgt
    eq $I19, 1, rx583_restart1684
    gt rx583_pos, rx583_eos, rx583_fail1685
    repr_get_attr_int $I11, self, rx583_curclass, "$!from"
    ne $I11, -1, rxscan584_done1691
    goto rxscan584_scan1690
  rxscan584_loop1689:
    inc rx583_pos
    gt rx583_pos, rx583_eos, rx583_fail1685
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!from", rx583_pos
  rxscan584_scan1690:
    nqp_rxmark rx583_bstack, rxscan584_loop1689, rx583_pos, 0
  rxscan584_done1691:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt585_01693
    nqp_push_label $P11, alt585_11697
    nqp_push_label $P11, alt585_21701
    nqp_rxmark rx583_bstack, alt585_end1692, -1, 0
    rx583_cur."!alt"(rx583_pos, "alt_nfa__21_1346277633.08", $P11)
    goto rx583_fail1685
  alt585_01693:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    nqp_rxmark rx583_bstack, rxsubrule587_pass1695, -1, 0
  rxsubrule587_pass1695:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1692
  alt585_11697:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    nqp_rxmark rx583_bstack, rxsubrule590_pass1699, -1, 0
  rxsubrule590_pass1699:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1692
  alt585_21701:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    nqp_rxmark rx583_bstack, rxsubrule593_pass1703, -1, 0
  rxsubrule593_pass1703:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1685
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1692
  alt585_end1692:
    rx583_cur."!cursor_pass"(rx583_pos, "scoped", 'backtrack'=>1)
    .return (rx583_cur)
  rx583_restart1684:
    repr_get_attr_obj rx583_cstack, rx583_cur, rx583_curclass, "$!cstack"
  rx583_fail1685:
    unless rx583_bstack, rx583_done1683
    pop $I19, rx583_bstack
    if_null rx583_cstack, rx583_cstack_done1688
    unless rx583_cstack, rx583_cstack_done1688
    dec $I19
    set $P11, rx583_cstack[$I19]
  rx583_cstack_done1688:
    pop rx583_rep, rx583_bstack
    pop rx583_pos, rx583_bstack
    pop $I19, rx583_bstack
    lt rx583_pos, -1, rx583_done1683
    lt rx583_pos, 0, rx583_fail1685
    eq $I19, 0, rx583_fail1685
    nqp_islist $I20, rx583_cstack
    unless $I20, rx583_jump1686
    elements $I18, rx583_bstack
    le $I18, 0, rx583_cut1687
    dec $I18
    set $I18, rx583_bstack[$I18]
  rx583_cut1687:
    assign rx583_cstack, $I18
  rx583_jump1686:
    jump $I19
  rx583_done1683:
    rx583_cur."!cursor_fail"()
    .return (rx583_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1346277629.325_caps" :subid("cuid_memo_159_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    box $P5003, 0
    set $P5001["multi_declarator"], $P5003
    box $P5004, 0
    set $P5001["package_declarator"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1346277629.325_alt_nfa__21_1346277633.08" :subid("cuid_memo_160_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    new $P5020, 'ResizablePMCArray'
    new $P5021, 'ResizablePMCArray'
    push $P5020, $P5021
    new $P5022, 'ResizablePMCArray'
    box $P5023, 0
    push $P5022, $P5023
    box $P5024, 0
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    box $P5026, 0
    push $P5022, $P5026
    box $P5027, 0
    push $P5022, $P5027
    box $P5028, 0
    push $P5022, $P5028
    push $P5020, $P5022
    push $P5001, $P5020
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_114_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 989
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_392_1346277629.325' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx595_tgt
    .local int rx595_pos
    .local int rx595_off
    .local int rx595_eos
    .local int rx595_rep
    .local pmc rx595_cur
    .local pmc rx595_curclass
    .local pmc rx595_bstack
    .local pmc rx595_cstack
    (rx595_cur, rx595_tgt, rx595_pos, rx595_curclass, rx595_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx595_cur
    length rx595_eos, rx595_tgt
    eq $I19, 1, rx595_restart1707
    gt rx595_pos, rx595_eos, rx595_fail1708
    repr_get_attr_int $I11, self, rx595_curclass, "$!from"
    ne $I11, -1, rxscan596_done1714
    goto rxscan596_scan1713
  rxscan596_loop1712:
    inc rx595_pos
    gt rx595_pos, rx595_eos, rx595_fail1708
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!from", rx595_pos
  rxscan596_scan1713:
    nqp_rxmark rx595_bstack, rxscan596_loop1712, rx595_pos, 0
  rxscan596_done1714:
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!pos", rx595_pos
    $P11 = rx595_cur."name"()
    repr_get_attr_int $I11, $P11, rx595_curclass, "$!pos"
    lt $I11, 0, rx595_fail1708
    nqp_rxmark rx595_bstack, rxsubrule597_pass1715, -1, 0
  rxsubrule597_pass1715:
    rx595_cstack = rx595_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx595_pos, $P11, rx595_curclass, "$!pos"
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!pos", rx595_pos
    store_lex unicode:"$\x{a2}", rx595_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_392_1346277629.325' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx595_fail1708
    rx595_cur."!cursor_pass"(rx595_pos, "typename", 'backtrack'=>1)
    .return (rx595_cur)
  rx595_restart1707:
    repr_get_attr_obj rx595_cstack, rx595_cur, rx595_curclass, "$!cstack"
  rx595_fail1708:
    unless rx595_bstack, rx595_done1706
    pop $I19, rx595_bstack
    if_null rx595_cstack, rx595_cstack_done1711
    unless rx595_cstack, rx595_cstack_done1711
    dec $I19
    set $P11, rx595_cstack[$I19]
  rx595_cstack_done1711:
    pop rx595_rep, rx595_bstack
    pop rx595_pos, rx595_bstack
    pop $I19, rx595_bstack
    lt rx595_pos, -1, rx595_done1706
    lt rx595_pos, 0, rx595_fail1708
    eq $I19, 0, rx595_fail1708
    nqp_islist $I20, rx595_cstack
    unless $I20, rx595_jump1709
    elements $I18, rx595_bstack
    le $I18, 0, rx595_cut1710
    dec $I18
    set $I18, rx595_bstack[$I18]
  rx595_cut1710:
    assign rx595_cstack, $I18
  rx595_jump1709:
    jump $I19
  rx595_done1706:
    rx595_cur."!cursor_fail"()
    .return (rx595_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1346277629.325_caps" :subid("cuid_memo_161_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1346277629.325_nfa" :subid("cuid_memo_162_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1346277629.325") :anon :lex :outer("cuid_114_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 991

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1716
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1717
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback1717:
    unless_null $P5002, vivi_5981718
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_5981718:
    set $P5001, $P5002
  fallback1716:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1719
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5011
  fallback1719:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1720
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5012
  fallback1720:
    $P5013 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_115_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 994
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx599_tgt
    .local int rx599_pos
    .local int rx599_off
    .local int rx599_eos
    .local int rx599_rep
    .local pmc rx599_cur
    .local pmc rx599_curclass
    .local pmc rx599_bstack
    .local pmc rx599_cstack
    (rx599_cur, rx599_tgt, rx599_pos, rx599_curclass, rx599_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx599_cur
    length rx599_eos, rx599_tgt
    eq $I19, 1, rx599_restart1723
    gt rx599_pos, rx599_eos, rx599_fail1724
    repr_get_attr_int $I11, self, rx599_curclass, "$!from"
    ne $I11, -1, rxscan600_done1730
    goto rxscan600_scan1729
  rxscan600_loop1728:
    inc rx599_pos
    gt rx599_pos, rx599_eos, rx599_fail1724
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!from", rx599_pos
  rxscan600_scan1729:
    nqp_rxmark rx599_bstack, rxscan600_loop1728, rx599_pos, 0
  rxscan600_done1730:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt601_01732
    nqp_push_label $P11, alt601_11734
    nqp_rxmark rx599_bstack, alt601_end1731, -1, 0
    rx599_cur."!alt"(rx599_pos, "alt_nfa__22_1346277633.107", $P11)
    goto rx599_fail1724
  alt601_01732:
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!pos", rx599_pos
    $P11 = rx599_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx599_curclass, "$!pos"
    lt $I11, 0, rx599_fail1724
    nqp_rxmark rx599_bstack, rxsubrule602_pass1733, -1, 0
  rxsubrule602_pass1733:
    rx599_cstack = rx599_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx599_pos, $P11, rx599_curclass, "$!pos"
    goto alt601_end1731
  alt601_11734:
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!pos", rx599_pos
    $P11 = rx599_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx599_curclass, "$!pos"
    lt $I11, 0, rx599_fail1724
    nqp_rxmark rx599_bstack, rxsubrule603_pass1735, -1, 0
  rxsubrule603_pass1735:
    rx599_cstack = rx599_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx599_pos, $P11, rx599_curclass, "$!pos"
    goto alt601_end1731
  alt601_end1731:
    rx599_cur."!cursor_pass"(rx599_pos, "declarator", 'backtrack'=>1)
    .return (rx599_cur)
  rx599_restart1723:
    repr_get_attr_obj rx599_cstack, rx599_cur, rx599_curclass, "$!cstack"
  rx599_fail1724:
    unless rx599_bstack, rx599_done1722
    pop $I19, rx599_bstack
    if_null rx599_cstack, rx599_cstack_done1727
    unless rx599_cstack, rx599_cstack_done1727
    dec $I19
    set $P11, rx599_cstack[$I19]
  rx599_cstack_done1727:
    pop rx599_rep, rx599_bstack
    pop rx599_pos, rx599_bstack
    pop $I19, rx599_bstack
    lt rx599_pos, -1, rx599_done1722
    lt rx599_pos, 0, rx599_fail1724
    eq $I19, 0, rx599_fail1724
    nqp_islist $I20, rx599_cstack
    unless $I20, rx599_jump1725
    elements $I18, rx599_bstack
    le $I18, 0, rx599_cut1726
    dec $I18
    set $I18, rx599_bstack[$I18]
  rx599_cut1726:
    assign rx599_cstack, $I18
  rx599_jump1725:
    jump $I19
  rx599_done1722:
    rx599_cur."!cursor_fail"()
    .return (rx599_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346277629.325_caps" :subid("cuid_memo_163_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable_declarator"], $P5002
    box $P5003, 0
    set $P5001["routine_declarator"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346277629.325_nfa" :subid("cuid_memo_164_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "routine_declarator"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346277629.325_alt_nfa__22_1346277633.107" :subid("cuid_memo_165_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "variable_declarator"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "routine_declarator"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_116_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 999
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_393_1346277629.325' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx604_tgt
    .local int rx604_pos
    .local int rx604_off
    .local int rx604_eos
    .local int rx604_rep
    .local pmc rx604_cur
    .local pmc rx604_curclass
    .local pmc rx604_bstack
    .local pmc rx604_cstack
    (rx604_cur, rx604_tgt, rx604_pos, rx604_curclass, rx604_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx604_cur
    length rx604_eos, rx604_tgt
    eq $I19, 1, rx604_restart1738
    gt rx604_pos, rx604_eos, rx604_fail1739
    repr_get_attr_int $I11, self, rx604_curclass, "$!from"
    ne $I11, -1, rxscan605_done1745
    goto rxscan605_scan1744
  rxscan605_loop1743:
    inc rx604_pos
    gt rx604_pos, rx604_eos, rx604_fail1739
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!from", rx604_pos
  rxscan605_scan1744:
    nqp_rxmark rx604_bstack, rxscan605_loop1743, rx604_pos, 0
  rxscan605_done1745:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxmark rx604_bstack, rxquantr607_done1748, rx604_pos, 0
  rxquantr607_loop1747:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."typename"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    goto rxsubrule608_pass1749
  rxsubrule608_back1750:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
  rxsubrule608_pass1749:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule608_back1750
    push rx604_bstack, $I11
    push rx604_bstack, 0
    push rx604_bstack, rx604_pos
    elements $I11, rx604_cstack
    push rx604_bstack, $I11
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxpeek $I19, rx604_bstack, rxquantr607_done1748
    inc $I19
    inc $I19
    set rx604_rep, rx604_bstack[$I19]
    nqp_rxcommit rx604_bstack, rxquantr607_done1748
    inc rx604_rep
  rxquantr607_done1748:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    store_lex unicode:"$\x{a2}", rx604_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."variable"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    nqp_rxmark rx604_bstack, rxsubrule611_pass1753, -1, 0
  rxsubrule611_pass1753:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    store_lex unicode:"$\x{a2}", rx604_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_393_1346277629.325' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxmark rx604_bstack, rxquantr614_done1757, rx604_pos, 0
  rxquantr614_loop1756:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."trait"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    goto rxsubrule615_pass1758
  rxsubrule615_back1759:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
  rxsubrule615_pass1758:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule615_back1759
    push rx604_bstack, $I11
    push rx604_bstack, 0
    push rx604_bstack, rx604_pos
    elements $I11, rx604_cstack
    push rx604_bstack, $I11
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxpeek $I19, rx604_bstack, rxquantr614_done1757
    inc $I19
    inc $I19
    set rx604_rep, rx604_bstack[$I19]
    nqp_rxcommit rx604_bstack, rxquantr614_done1757
    inc rx604_rep
    nqp_rxmark rx604_bstack, rxquantr614_done1757, rx604_pos, rx604_rep
    goto rxquantr614_loop1756
  rxquantr614_done1757:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1739
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    rx604_cur."!cursor_pass"(rx604_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx604_cur)
  rx604_restart1738:
    repr_get_attr_obj rx604_cstack, rx604_cur, rx604_curclass, "$!cstack"
  rx604_fail1739:
    unless rx604_bstack, rx604_done1737
    pop $I19, rx604_bstack
    if_null rx604_cstack, rx604_cstack_done1742
    unless rx604_cstack, rx604_cstack_done1742
    dec $I19
    set $P11, rx604_cstack[$I19]
  rx604_cstack_done1742:
    pop rx604_rep, rx604_bstack
    pop rx604_pos, rx604_bstack
    pop $I19, rx604_bstack
    lt rx604_pos, -1, rx604_done1737
    lt rx604_pos, 0, rx604_fail1739
    eq $I19, 0, rx604_fail1739
    nqp_islist $I20, rx604_cstack
    unless $I20, rx604_jump1740
    elements $I18, rx604_bstack
    le $I18, 0, rx604_cut1741
    dec $I18
    set $I18, rx604_bstack[$I18]
  rx604_cut1741:
    assign rx604_cstack, $I18
  rx604_jump1740:
    jump $I19
  rx604_done1737:
    rx604_cur."!cursor_fail"()
    .return (rx604_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_116_1346277629.325_caps" :subid("cuid_memo_166_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 0
    set $P5001["variable"], $P5003
    box $P5004, 2
    set $P5001["trait"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1346277629.325") :anon :lex :outer("cuid_116_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1003

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_117_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1007
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_118_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1008
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx617_tgt
    .local int rx617_pos
    .local int rx617_off
    .local int rx617_eos
    .local int rx617_rep
    .local pmc rx617_cur
    .local pmc rx617_curclass
    .local pmc rx617_bstack
    .local pmc rx617_cstack
    (rx617_cur, rx617_tgt, rx617_pos, rx617_curclass, rx617_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx617_cur
    length rx617_eos, rx617_tgt
    eq $I19, 1, rx617_restart1763
    gt rx617_pos, rx617_eos, rx617_fail1764
    repr_get_attr_int $I11, self, rx617_curclass, "$!from"
    ne $I11, -1, rxscan618_done1770
    goto rxscan618_scan1769
  rxscan618_loop1768:
    inc rx617_pos
    gt rx617_pos, rx617_eos, rx617_fail1764
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!from", rx617_pos
  rxscan618_scan1769:
    nqp_rxmark rx617_bstack, rxscan618_loop1768, rx617_pos, 0
  rxscan618_done1770:
    nqp_rxmark rx617_bstack, rxcap619_fail1772, rx617_pos, 0
    add $I11, rx617_pos, 3
    gt $I11, rx617_eos, rx617_fail1764
    substr $S10, rx617_tgt, rx617_pos, 3
    ne $S10, ucs4:"sub", rx617_fail1764
    add rx617_pos, 3
    nqp_rxpeek $I19, rx617_bstack, rxcap619_fail1772
    inc $I19
    set $I11, rx617_bstack[$I19]
    $P11 = rx617_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx617_pos)
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "sym")
    goto rxcap619_done1771
  rxcap619_fail1772:
    goto rx617_fail1764
  rxcap619_done1771:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1764
    nqp_rxmark rx617_bstack, rxsubrule620_pass1773, -1, 0
  rxsubrule620_pass1773:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    rx617_cur."!cursor_pass"(rx617_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx617_cur)
  rx617_restart1763:
    repr_get_attr_obj rx617_cstack, rx617_cur, rx617_curclass, "$!cstack"
  rx617_fail1764:
    unless rx617_bstack, rx617_done1762
    pop $I19, rx617_bstack
    if_null rx617_cstack, rx617_cstack_done1767
    unless rx617_cstack, rx617_cstack_done1767
    dec $I19
    set $P11, rx617_cstack[$I19]
  rx617_cstack_done1767:
    pop rx617_rep, rx617_bstack
    pop rx617_pos, rx617_bstack
    pop $I19, rx617_bstack
    lt rx617_pos, -1, rx617_done1762
    lt rx617_pos, 0, rx617_fail1764
    eq $I19, 0, rx617_fail1764
    nqp_islist $I20, rx617_cstack
    unless $I20, rx617_jump1765
    elements $I18, rx617_bstack
    le $I18, 0, rx617_cut1766
    dec $I18
    set $I18, rx617_bstack[$I18]
  rx617_cut1766:
    assign rx617_cstack, $I18
  rx617_jump1765:
    jump $I19
  rx617_done1762:
    rx617_cur."!cursor_fail"()
    .return (rx617_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1346277629.325_caps" :subid("cuid_memo_167_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["routine_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1346277629.325_nfa" :subid("cuid_memo_168_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 98
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "routine_def"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_119_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1009
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx621_tgt
    .local int rx621_pos
    .local int rx621_off
    .local int rx621_eos
    .local int rx621_rep
    .local pmc rx621_cur
    .local pmc rx621_curclass
    .local pmc rx621_bstack
    .local pmc rx621_cstack
    (rx621_cur, rx621_tgt, rx621_pos, rx621_curclass, rx621_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx621_cur
    length rx621_eos, rx621_tgt
    eq $I19, 1, rx621_restart1776
    gt rx621_pos, rx621_eos, rx621_fail1777
    repr_get_attr_int $I11, self, rx621_curclass, "$!from"
    ne $I11, -1, rxscan622_done1783
    goto rxscan622_scan1782
  rxscan622_loop1781:
    inc rx621_pos
    gt rx621_pos, rx621_eos, rx621_fail1777
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!from", rx621_pos
  rxscan622_scan1782:
    nqp_rxmark rx621_bstack, rxscan622_loop1781, rx621_pos, 0
  rxscan622_done1783:
    nqp_rxmark rx621_bstack, rxcap623_fail1785, rx621_pos, 0
    add $I11, rx621_pos, 6
    gt $I11, rx621_eos, rx621_fail1777
    substr $S10, rx621_tgt, rx621_pos, 6
    ne $S10, ucs4:"method", rx621_fail1777
    add rx621_pos, 6
    nqp_rxpeek $I19, rx621_bstack, rxcap623_fail1785
    inc $I19
    set $I11, rx621_bstack[$I19]
    $P11 = rx621_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx621_pos)
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "sym")
    goto rxcap623_done1784
  rxcap623_fail1785:
    goto rx621_fail1777
  rxcap623_done1784:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1777
    nqp_rxmark rx621_bstack, rxsubrule624_pass1786, -1, 0
  rxsubrule624_pass1786:
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    rx621_cur."!cursor_pass"(rx621_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx621_cur)
  rx621_restart1776:
    repr_get_attr_obj rx621_cstack, rx621_cur, rx621_curclass, "$!cstack"
  rx621_fail1777:
    unless rx621_bstack, rx621_done1775
    pop $I19, rx621_bstack
    if_null rx621_cstack, rx621_cstack_done1780
    unless rx621_cstack, rx621_cstack_done1780
    dec $I19
    set $P11, rx621_cstack[$I19]
  rx621_cstack_done1780:
    pop rx621_rep, rx621_bstack
    pop rx621_pos, rx621_bstack
    pop $I19, rx621_bstack
    lt rx621_pos, -1, rx621_done1775
    lt rx621_pos, 0, rx621_fail1777
    eq $I19, 0, rx621_fail1777
    nqp_islist $I20, rx621_cstack
    unless $I20, rx621_jump1778
    elements $I18, rx621_bstack
    le $I18, 0, rx621_cut1779
    dec $I18
    set $I18, rx621_bstack[$I18]
  rx621_cut1779:
    assign rx621_cstack, $I18
  rx621_jump1778:
    jump $I19
  rx621_done1775:
    rx621_cur."!cursor_fail"()
    .return (rx621_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1346277629.325_caps" :subid("cuid_memo_169_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["method_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1346277629.325_nfa" :subid("cuid_memo_170_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 104
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 100
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "method_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_120_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1011
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx625_tgt
    .local int rx625_pos
    .local int rx625_off
    .local int rx625_eos
    .local int rx625_rep
    .local pmc rx625_cur
    .local pmc rx625_curclass
    .local pmc rx625_bstack
    .local pmc rx625_cstack
    (rx625_cur, rx625_tgt, rx625_pos, rx625_curclass, rx625_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx625_cur
    length rx625_eos, rx625_tgt
    eq $I19, 1, rx625_restart1789
    gt rx625_pos, rx625_eos, rx625_fail1790
    repr_get_attr_int $I11, self, rx625_curclass, "$!from"
    ne $I11, -1, rxscan626_done1796
    goto rxscan626_scan1795
  rxscan626_loop1794:
    inc rx625_pos
    gt rx625_pos, rx625_eos, rx625_fail1790
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!from", rx625_pos
  rxscan626_scan1795:
    nqp_rxmark rx625_bstack, rxscan626_loop1794, rx625_pos, 0
  rxscan626_done1796:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    store_lex unicode:"$\x{a2}", rx625_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxquantr629_done1800, rx625_pos, 0
  rxquantr629_loop1799:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxcap631_fail1803, rx625_pos, 0
    nqp_rxmark rx625_bstack, rxquantr632_done1805, rx625_pos, 0
  rxquantr632_loop1804:
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1790
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:"&", rx625_fail1790
    add rx625_pos, 1
    nqp_rxpeek $I19, rx625_bstack, rxquantr632_done1805
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr632_done1805
    inc rx625_rep
  rxquantr632_done1805:
    nqp_rxpeek $I19, rx625_bstack, rxcap631_fail1803
    inc $I19
    set $I11, rx625_bstack[$I19]
    $P11 = rx625_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx625_pos)
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "sigil")
    goto rxcap631_done1802
  rxcap631_fail1803:
    goto rx625_fail1790
  rxcap631_done1802:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    nqp_rxmark rx625_bstack, rxsubrule633_pass1806, -1, 0
  rxsubrule633_pass1806:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxpeek $I19, rx625_bstack, rxquantr629_done1800
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr629_done1800
    inc rx625_rep
  rxquantr629_done1800:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
  alt638_01812:
    nqp_rxmark rx625_bstack, alt638_11818, rx625_pos, 0
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1790
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:"(", rx625_fail1790
    add rx625_pos, 1
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."signature"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    nqp_rxmark rx625_bstack, rxsubrule641_pass1815, -1, 0
  rxsubrule641_pass1815:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1790
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:")", rx625_fail1790
    add rx625_pos, 1
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt638_end1811
  alt638_11818:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
  alt638_end1811:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxquantr648_done1824, rx625_pos, 0
  rxquantr648_loop1823:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."trait"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    goto rxsubrule649_pass1825
  rxsubrule649_back1826:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
  rxsubrule649_pass1825:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule649_back1826
    push rx625_bstack, $I11
    push rx625_bstack, 0
    push rx625_bstack, rx625_pos
    elements $I11, rx625_cstack
    push rx625_bstack, $I11
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxpeek $I19, rx625_bstack, rxquantr648_done1824
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr648_done1824
    inc rx625_rep
    nqp_rxmark rx625_bstack, rxquantr648_done1824, rx625_pos, rx625_rep
    goto rxquantr648_loop1823
  rxquantr648_done1824:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt651_01829
    nqp_push_label $P11, alt651_11833
    nqp_rxmark rx625_bstack, alt651_end1828, -1, 0
    rx625_cur."!alt"(rx625_pos, "alt_nfa__23_1346277633.195", $P11)
    goto rx625_fail1790
  alt651_01829:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    nqp_rxmark rx625_bstack, rxsubrule653_pass1831, -1, 0
  rxsubrule653_pass1831:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt651_end1828
  alt651_11833:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    nqp_rxmark rx625_bstack, rxsubrule656_pass1835, -1, 0
  rxsubrule656_pass1835:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt651_end1828
  alt651_end1828:
    nqp_rxcommit rx625_bstack, alt651_end1828
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1790
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    rx625_cur."!cursor_pass"(rx625_pos, "routine_def", 'backtrack'=>1)
    .return (rx625_cur)
  rx625_restart1789:
    repr_get_attr_obj rx625_cstack, rx625_cur, rx625_curclass, "$!cstack"
  rx625_fail1790:
    unless rx625_bstack, rx625_done1788
    pop $I19, rx625_bstack
    if_null rx625_cstack, rx625_cstack_done1793
    unless rx625_cstack, rx625_cstack_done1793
    dec $I19
    set $P11, rx625_cstack[$I19]
  rx625_cstack_done1793:
    pop rx625_rep, rx625_bstack
    pop rx625_pos, rx625_bstack
    pop $I19, rx625_bstack
    lt rx625_pos, -1, rx625_done1788
    lt rx625_pos, 0, rx625_fail1790
    eq $I19, 0, rx625_fail1790
    nqp_islist $I20, rx625_cstack
    unless $I20, rx625_jump1791
    elements $I18, rx625_bstack
    le $I18, 0, rx625_cut1792
    dec $I18
    set $I18, rx625_bstack[$I18]
  rx625_cut1792:
    assign rx625_cstack, $I18
  rx625_jump1791:
    jump $I19
  rx625_done1788:
    rx625_cur."!cursor_fail"()
    .return (rx625_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1346277629.325_caps" :subid("cuid_memo_171_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1346277629.325_alt_nfa__23_1346277633.195" :subid("cuid_memo_172_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_121_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1024
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_394_1346277629.325' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx659_tgt
    .local int rx659_pos
    .local int rx659_off
    .local int rx659_eos
    .local int rx659_rep
    .local pmc rx659_cur
    .local pmc rx659_curclass
    .local pmc rx659_bstack
    .local pmc rx659_cstack
    (rx659_cur, rx659_tgt, rx659_pos, rx659_curclass, rx659_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx659_cur
    length rx659_eos, rx659_tgt
    eq $I19, 1, rx659_restart1840
    gt rx659_pos, rx659_eos, rx659_fail1841
    repr_get_attr_int $I11, self, rx659_curclass, "$!from"
    ne $I11, -1, rxscan660_done1847
    goto rxscan660_scan1846
  rxscan660_loop1845:
    inc rx659_pos
    gt rx659_pos, rx659_eos, rx659_fail1841
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!from", rx659_pos
  rxscan660_scan1846:
    nqp_rxmark rx659_bstack, rxscan660_loop1845, rx659_pos, 0
  rxscan660_done1847:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxcap664_fail1852, rx659_pos, 0
    nqp_rxmark rx659_bstack, rxquantr665_done1854, rx659_pos, 0
  rxquantr665_loop1853:
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1841
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:"!", rx659_fail1841
    add rx659_pos, 1
    nqp_rxpeek $I19, rx659_bstack, rxquantr665_done1854
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr665_done1854
    inc rx659_rep
  rxquantr665_done1854:
    nqp_rxpeek $I19, rx659_bstack, rxcap664_fail1852
    inc $I19
    set $I11, rx659_bstack[$I19]
    $P11 = rx659_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx659_pos)
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "private")
    goto rxcap664_done1851
  rxcap664_fail1852:
    goto rx659_fail1841
  rxcap664_done1851:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxquantr667_done1857, rx659_pos, 0
  rxquantr667_loop1856:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    goto rxsubrule668_pass1858
  rxsubrule668_back1859:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
  rxsubrule668_pass1858:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule668_back1859
    push rx659_bstack, $I11
    push rx659_bstack, 0
    push rx659_bstack, rx659_pos
    elements $I11, rx659_cstack
    push rx659_bstack, $I11
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxpeek $I19, rx659_bstack, rxquantr667_done1857
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr667_done1857
    inc rx659_rep
  rxquantr667_done1857:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
  alt672_01864:
    nqp_rxmark rx659_bstack, alt672_11870, rx659_pos, 0
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1841
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:"(", rx659_fail1841
    add rx659_pos, 1
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."signature"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    nqp_rxmark rx659_bstack, rxsubrule675_pass1867, -1, 0
  rxsubrule675_pass1867:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1841
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:")", rx659_fail1841
    add rx659_pos, 1
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt672_end1863
  alt672_11870:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
  alt672_end1863:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_394_1346277629.325' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxquantr683_done1877, rx659_pos, 0
  rxquantr683_loop1876:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."trait"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    goto rxsubrule684_pass1878
  rxsubrule684_back1879:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
  rxsubrule684_pass1878:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule684_back1879
    push rx659_bstack, $I11
    push rx659_bstack, 0
    push rx659_bstack, rx659_pos
    elements $I11, rx659_cstack
    push rx659_bstack, $I11
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxpeek $I19, rx659_bstack, rxquantr683_done1877
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr683_done1877
    inc rx659_rep
    nqp_rxmark rx659_bstack, rxquantr683_done1877, rx659_pos, rx659_rep
    goto rxquantr683_loop1876
  rxquantr683_done1877:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt686_01882
    nqp_push_label $P11, alt686_11886
    nqp_rxmark rx659_bstack, alt686_end1881, -1, 0
    rx659_cur."!alt"(rx659_pos, "alt_nfa__24_1346277633.25", $P11)
    goto rx659_fail1841
  alt686_01882:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    nqp_rxmark rx659_bstack, rxsubrule688_pass1884, -1, 0
  rxsubrule688_pass1884:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt686_end1881
  alt686_11886:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    nqp_rxmark rx659_bstack, rxsubrule691_pass1888, -1, 0
  rxsubrule691_pass1888:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt686_end1881
  alt686_end1881:
    nqp_rxcommit rx659_bstack, alt686_end1881
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1841
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    rx659_cur."!cursor_pass"(rx659_pos, "method_def", 'backtrack'=>1)
    .return (rx659_cur)
  rx659_restart1840:
    repr_get_attr_obj rx659_cstack, rx659_cur, rx659_curclass, "$!cstack"
  rx659_fail1841:
    unless rx659_bstack, rx659_done1839
    pop $I19, rx659_bstack
    if_null rx659_cstack, rx659_cstack_done1844
    unless rx659_cstack, rx659_cstack_done1844
    dec $I19
    set $P11, rx659_cstack[$I19]
  rx659_cstack_done1844:
    pop rx659_rep, rx659_bstack
    pop rx659_pos, rx659_bstack
    pop $I19, rx659_bstack
    lt rx659_pos, -1, rx659_done1839
    lt rx659_pos, 0, rx659_fail1841
    eq $I19, 0, rx659_fail1841
    nqp_islist $I20, rx659_cstack
    unless $I20, rx659_jump1842
    elements $I18, rx659_bstack
    le $I18, 0, rx659_cut1843
    dec $I18
    set $I18, rx659_bstack[$I18]
  rx659_cut1843:
    assign rx659_cstack, $I18
  rx659_jump1842:
    jump $I19
  rx659_done1839:
    rx659_cur."!cursor_fail"()
    .return (rx659_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1346277629.325_caps" :subid("cuid_memo_173_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["private"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1346277629.325_alt_nfa__24_1346277633.25" :subid("cuid_memo_174_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1346277629.325") :anon :lex :outer("cuid_121_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1032

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_122_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1040
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_395_1346277629.325' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx694_tgt
    .local int rx694_pos
    .local int rx694_off
    .local int rx694_eos
    .local int rx694_rep
    .local pmc rx694_cur
    .local pmc rx694_curclass
    .local pmc rx694_bstack
    .local pmc rx694_cstack
    (rx694_cur, rx694_tgt, rx694_pos, rx694_curclass, rx694_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx694_cur
    length rx694_eos, rx694_tgt
    eq $I19, 1, rx694_restart1893
    gt rx694_pos, rx694_eos, rx694_fail1894
    repr_get_attr_int $I11, self, rx694_curclass, "$!from"
    ne $I11, -1, rxscan695_done1900
    goto rxscan695_scan1899
  rxscan695_loop1898:
    inc rx694_pos
    gt rx694_pos, rx694_eos, rx694_fail1894
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!from", rx694_pos
  rxscan695_scan1899:
    nqp_rxmark rx694_bstack, rxscan695_loop1898, rx694_pos, 0
  rxscan695_done1900:
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    store_lex unicode:"$\x{a2}", rx694_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_395_1346277629.325' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx694_fail1894
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1894
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"{", rx694_fail1894
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ws"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1894
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1894
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"*", rx694_fail1894
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ws"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1894
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1894
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"}", rx694_fail1894
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1894
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1894
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    rx694_cur."!cursor_pass"(rx694_pos, "onlystar", 'backtrack'=>1)
    .return (rx694_cur)
  rx694_restart1893:
    repr_get_attr_obj rx694_cstack, rx694_cur, rx694_curclass, "$!cstack"
  rx694_fail1894:
    unless rx694_bstack, rx694_done1892
    pop $I19, rx694_bstack
    if_null rx694_cstack, rx694_cstack_done1897
    unless rx694_cstack, rx694_cstack_done1897
    dec $I19
    set $P11, rx694_cstack[$I19]
  rx694_cstack_done1897:
    pop rx694_rep, rx694_bstack
    pop rx694_pos, rx694_bstack
    pop $I19, rx694_bstack
    lt rx694_pos, -1, rx694_done1892
    lt rx694_pos, 0, rx694_fail1894
    eq $I19, 0, rx694_fail1894
    nqp_islist $I20, rx694_cstack
    unless $I20, rx694_jump1895
    elements $I18, rx694_bstack
    le $I18, 0, rx694_cut1896
    dec $I18
    set $I18, rx694_bstack[$I18]
  rx694_cut1896:
    assign rx694_cstack, $I18
  rx694_jump1895:
    jump $I19
  rx694_done1892:
    rx694_cur."!cursor_fail"()
    .return (rx694_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1346277629.325_caps" :subid("cuid_memo_175_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1346277629.325_nfa" :subid("cuid_memo_176_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 42
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "ws"
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 125
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ENDSTMT"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1346277629.325") :anon :lex :outer("cuid_122_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1041

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback1901
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback1902
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback1902:
    unless_null $P5002, vivi_6961903
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_6961903:
    set $P5001, $P5002
  fallback1901:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_123_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1047
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_124_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1048
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx700_tgt
    .local int rx700_pos
    .local int rx700_off
    .local int rx700_eos
    .local int rx700_rep
    .local pmc rx700_cur
    .local pmc rx700_curclass
    .local pmc rx700_bstack
    .local pmc rx700_cstack
    (rx700_cur, rx700_tgt, rx700_pos, rx700_curclass, rx700_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx700_cur
    length rx700_eos, rx700_tgt
    eq $I19, 1, rx700_restart1909
    gt rx700_pos, rx700_eos, rx700_fail1910
    repr_get_attr_int $I11, self, rx700_curclass, "$!from"
    ne $I11, -1, rxscan701_done1916
    goto rxscan701_scan1915
  rxscan701_loop1914:
    inc rx700_pos
    gt rx700_pos, rx700_eos, rx700_fail1910
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!from", rx700_pos
  rxscan701_scan1915:
    nqp_rxmark rx700_bstack, rxscan701_loop1914, rx700_pos, 0
  rxscan701_done1916:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    store_lex unicode:"$\x{a2}", rx700_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx700_bstack, rxcap702_fail1918, rx700_pos, 0
    add $I11, rx700_pos, 5
    gt $I11, rx700_eos, rx700_fail1910
    substr $S10, rx700_tgt, rx700_pos, 5
    ne $S10, ucs4:"multi", rx700_fail1910
    add rx700_pos, 5
    nqp_rxpeek $I19, rx700_bstack, rxcap702_fail1918
    inc $I19
    set $I11, rx700_bstack[$I19]
    $P11 = rx700_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx700_pos)
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "sym")
    goto rxcap702_done1917
  rxcap702_fail1918:
    goto rx700_fail1910
  rxcap702_done1917:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."ws"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1910
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
  alt704_01921:
    nqp_rxmark rx700_bstack, alt704_11923, rx700_pos, 0
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1910
    nqp_rxmark rx700_bstack, rxsubrule705_pass1922, -1, 0
  rxsubrule705_pass1922:
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
    goto alt704_end1920
  alt704_11923:
    nqp_rxmark rx700_bstack, alt704_21925, rx700_pos, 0
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1910
    nqp_rxmark rx700_bstack, rxsubrule706_pass1924, -1, 0
  rxsubrule706_pass1924:
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
    goto alt704_end1920
  alt704_21925:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1910
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
  alt704_end1920:
    rx700_cur."!cursor_pass"(rx700_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx700_cur)
  rx700_restart1909:
    repr_get_attr_obj rx700_cstack, rx700_cur, rx700_curclass, "$!cstack"
  rx700_fail1910:
    unless rx700_bstack, rx700_done1908
    pop $I19, rx700_bstack
    if_null rx700_cstack, rx700_cstack_done1913
    unless rx700_cstack, rx700_cstack_done1913
    dec $I19
    set $P11, rx700_cstack[$I19]
  rx700_cstack_done1913:
    pop rx700_rep, rx700_bstack
    pop rx700_pos, rx700_bstack
    pop $I19, rx700_bstack
    lt rx700_pos, -1, rx700_done1908
    lt rx700_pos, 0, rx700_fail1910
    eq $I19, 0, rx700_fail1910
    nqp_islist $I20, rx700_cstack
    unless $I20, rx700_jump1911
    elements $I18, rx700_bstack
    le $I18, 0, rx700_cut1912
    dec $I18
    set $I18, rx700_bstack[$I18]
  rx700_cut1912:
    assign rx700_cstack, $I18
  rx700_jump1911:
    jump $I19
  rx700_done1908:
    rx700_cur."!cursor_fail"()
    .return (rx700_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1346277629.325_caps" :subid("cuid_memo_177_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1346277629.325_nfa" :subid("cuid_memo_178_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 117
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_125_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1053
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx708_tgt
    .local int rx708_pos
    .local int rx708_off
    .local int rx708_eos
    .local int rx708_rep
    .local pmc rx708_cur
    .local pmc rx708_curclass
    .local pmc rx708_bstack
    .local pmc rx708_cstack
    (rx708_cur, rx708_tgt, rx708_pos, rx708_curclass, rx708_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx708_cur
    length rx708_eos, rx708_tgt
    eq $I19, 1, rx708_restart1929
    gt rx708_pos, rx708_eos, rx708_fail1930
    repr_get_attr_int $I11, self, rx708_curclass, "$!from"
    ne $I11, -1, rxscan709_done1936
    goto rxscan709_scan1935
  rxscan709_loop1934:
    inc rx708_pos
    gt rx708_pos, rx708_eos, rx708_fail1930
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!from", rx708_pos
  rxscan709_scan1935:
    nqp_rxmark rx708_bstack, rxscan709_loop1934, rx708_pos, 0
  rxscan709_done1936:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    store_lex unicode:"$\x{a2}", rx708_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx708_bstack, rxcap710_fail1938, rx708_pos, 0
    add $I11, rx708_pos, 5
    gt $I11, rx708_eos, rx708_fail1930
    substr $S10, rx708_tgt, rx708_pos, 5
    ne $S10, ucs4:"proto", rx708_fail1930
    add rx708_pos, 5
    nqp_rxpeek $I19, rx708_bstack, rxcap710_fail1938
    inc $I19
    set $I11, rx708_bstack[$I19]
    $P11 = rx708_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx708_pos)
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "sym")
    goto rxcap710_done1937
  rxcap710_fail1938:
    goto rx708_fail1930
  rxcap710_done1937:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."ws"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1930
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
  alt712_01941:
    nqp_rxmark rx708_bstack, alt712_11943, rx708_pos, 0
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1930
    nqp_rxmark rx708_bstack, rxsubrule713_pass1942, -1, 0
  rxsubrule713_pass1942:
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
    goto alt712_end1940
  alt712_11943:
    nqp_rxmark rx708_bstack, alt712_21945, rx708_pos, 0
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1930
    nqp_rxmark rx708_bstack, rxsubrule714_pass1944, -1, 0
  rxsubrule714_pass1944:
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
    goto alt712_end1940
  alt712_21945:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1930
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
  alt712_end1940:
    rx708_cur."!cursor_pass"(rx708_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx708_cur)
  rx708_restart1929:
    repr_get_attr_obj rx708_cstack, rx708_cur, rx708_curclass, "$!cstack"
  rx708_fail1930:
    unless rx708_bstack, rx708_done1928
    pop $I19, rx708_bstack
    if_null rx708_cstack, rx708_cstack_done1933
    unless rx708_cstack, rx708_cstack_done1933
    dec $I19
    set $P11, rx708_cstack[$I19]
  rx708_cstack_done1933:
    pop rx708_rep, rx708_bstack
    pop rx708_pos, rx708_bstack
    pop $I19, rx708_bstack
    lt rx708_pos, -1, rx708_done1928
    lt rx708_pos, 0, rx708_fail1930
    eq $I19, 0, rx708_fail1930
    nqp_islist $I20, rx708_cstack
    unless $I20, rx708_jump1931
    elements $I18, rx708_bstack
    le $I18, 0, rx708_cut1932
    dec $I18
    set $I18, rx708_bstack[$I18]
  rx708_cut1932:
    assign rx708_cstack, $I18
  rx708_jump1931:
    jump $I19
  rx708_done1928:
    rx708_cur."!cursor_fail"()
    .return (rx708_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1346277629.325_caps" :subid("cuid_memo_179_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1346277629.325_nfa" :subid("cuid_memo_180_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 112
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 111
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_126_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1058
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx716_tgt
    .local int rx716_pos
    .local int rx716_off
    .local int rx716_eos
    .local int rx716_rep
    .local pmc rx716_cur
    .local pmc rx716_curclass
    .local pmc rx716_bstack
    .local pmc rx716_cstack
    (rx716_cur, rx716_tgt, rx716_pos, rx716_curclass, rx716_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx716_cur
    length rx716_eos, rx716_tgt
    eq $I19, 1, rx716_restart1949
    gt rx716_pos, rx716_eos, rx716_fail1950
    repr_get_attr_int $I11, self, rx716_curclass, "$!from"
    ne $I11, -1, rxscan717_done1956
    goto rxscan717_scan1955
  rxscan717_loop1954:
    inc rx716_pos
    gt rx716_pos, rx716_eos, rx716_fail1950
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!from", rx716_pos
  rxscan717_scan1955:
    nqp_rxmark rx716_bstack, rxscan717_loop1954, rx716_pos, 0
  rxscan717_done1956:
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    store_lex unicode:"$\x{a2}", rx716_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1950
    nqp_rxmark rx716_bstack, rxsubrule718_pass1957, -1, 0
  rxsubrule718_pass1957:
    rx716_cstack = rx716_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    rx716_cur."!cursor_pass"(rx716_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx716_cur)
  rx716_restart1949:
    repr_get_attr_obj rx716_cstack, rx716_cur, rx716_curclass, "$!cstack"
  rx716_fail1950:
    unless rx716_bstack, rx716_done1948
    pop $I19, rx716_bstack
    if_null rx716_cstack, rx716_cstack_done1953
    unless rx716_cstack, rx716_cstack_done1953
    dec $I19
    set $P11, rx716_cstack[$I19]
  rx716_cstack_done1953:
    pop rx716_rep, rx716_bstack
    pop rx716_pos, rx716_bstack
    pop $I19, rx716_bstack
    lt rx716_pos, -1, rx716_done1948
    lt rx716_pos, 0, rx716_fail1950
    eq $I19, 0, rx716_fail1950
    nqp_islist $I20, rx716_cstack
    unless $I20, rx716_jump1951
    elements $I18, rx716_bstack
    le $I18, 0, rx716_cut1952
    dec $I18
    set $I18, rx716_bstack[$I18]
  rx716_cut1952:
    assign rx716_cstack, $I18
  rx716_jump1951:
    jump $I19
  rx716_done1948:
    rx716_cur."!cursor_fail"()
    .return (rx716_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1346277629.325_caps" :subid("cuid_memo_181_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1346277629.325_nfa" :subid("cuid_memo_182_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "declarator"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_128_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1063
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_396_1346277629.325' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_127_1346277629.325' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx719_tgt
    .local int rx719_pos
    .local int rx719_off
    .local int rx719_eos
    .local int rx719_rep
    .local pmc rx719_cur
    .local pmc rx719_curclass
    .local pmc rx719_bstack
    .local pmc rx719_cstack
    (rx719_cur, rx719_tgt, rx719_pos, rx719_curclass, rx719_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx719_cur
    length rx719_eos, rx719_tgt
    eq $I19, 1, rx719_restart1960
    gt rx719_pos, rx719_eos, rx719_fail1961
    repr_get_attr_int $I11, self, rx719_curclass, "$!from"
    ne $I11, -1, rxscan720_done1967
    goto rxscan720_scan1966
  rxscan720_loop1965:
    inc rx719_pos
    gt rx719_pos, rx719_eos, rx719_fail1961
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!from", rx719_pos
  rxscan720_scan1966:
    nqp_rxmark rx719_bstack, rxscan720_loop1965, rx719_pos, 0
  rxscan720_done1967:
    nqp_rxmark rx719_bstack, rxquantr721_done1969, rx719_pos, 0
  rxquantr721_loop1968:
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    store_lex unicode:"$\x{a2}", rx719_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_396_1346277629.325' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx719_fail1961
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    nqp_rxmark rx719_bstack, rxsubrule724_pass1974, -1, 0
  rxsubrule724_pass1974:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    add $I11, rx719_pos, 1
    gt $I11, rx719_eos, rx719_fail1961
    substr $S10, rx719_tgt, rx719_pos, 1
    ne $S10, ucs4:":", rx719_fail1961
    add rx719_pos, 1
    nqp_rxpeek $I19, rx719_bstack, rxquantr721_done1969
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr721_done1969
    inc rx719_rep
  rxquantr721_done1969:
    nqp_rxmark rx719_bstack, rxquantr726_done1977, rx719_pos, 0
  rxquantr726_loop1976:
    nqp_rxmark rx719_bstack, rxquantr727_done1979, rx719_pos, 0
  rxquantr727_loop1978:
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    nqp_rxmark rx719_bstack, rxsubrule729_pass1981, -1, 0
  rxsubrule729_pass1981:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt731_01984
    nqp_push_label $P11, alt731_11985
    nqp_rxmark rx719_bstack, alt731_end1983, -1, 0
    rx719_cur."!alt"(rx719_pos, "alt_nfa__26_1346277633.388", $P11)
    goto rx719_fail1961
  alt731_01984:
    add $I11, rx719_pos, 1
    gt $I11, rx719_eos, rx719_fail1961
    substr $S10, rx719_tgt, rx719_pos, 1
    ne $S10, ucs4:",", rx719_fail1961
    add rx719_pos, 1
    goto alt731_end1983
  alt731_11985:
    .const 'Sub' $P5004 = 'cuid_127_1346277629.325' 
    capture_lex $P5004
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1961
    nqp_rxmark rx719_bstack, rxsubrule736_pass2001, -1, 0
  rxsubrule736_pass2001:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    goto alt731_end1983
  alt731_end1983:
    nqp_rxcommit rx719_bstack, alt731_end1983
    nqp_rxpeek $I19, rx719_bstack, rxquantr727_done1979
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr727_done1979
    inc rx719_rep
    nqp_rxmark rx719_bstack, rxquantr727_done1979, rx719_pos, rx719_rep
    goto rxquantr727_loop1978
  rxquantr727_done1979:
    nqp_rxpeek $I19, rx719_bstack, rxquantr726_done1977
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr726_done1977
    inc rx719_rep
  rxquantr726_done1977:
    rx719_cur."!cursor_pass"(rx719_pos, "signature", 'backtrack'=>1)
    .return (rx719_cur)
  rx719_restart1960:
    repr_get_attr_obj rx719_cstack, rx719_cur, rx719_curclass, "$!cstack"
  rx719_fail1961:
    unless rx719_bstack, rx719_done1959
    pop $I19, rx719_bstack
    if_null rx719_cstack, rx719_cstack_done1964
    unless rx719_cstack, rx719_cstack_done1964
    dec $I19
    set $P11, rx719_cstack[$I19]
  rx719_cstack_done1964:
    pop rx719_rep, rx719_bstack
    pop rx719_pos, rx719_bstack
    pop $I19, rx719_bstack
    lt rx719_pos, -1, rx719_done1959
    lt rx719_pos, 0, rx719_fail1961
    eq $I19, 0, rx719_fail1961
    nqp_islist $I20, rx719_cstack
    unless $I20, rx719_jump1962
    elements $I18, rx719_bstack
    le $I18, 0, rx719_cut1963
    dec $I18
    set $I18, rx719_bstack[$I18]
  rx719_cut1963:
    assign rx719_cstack, $I18
  rx719_jump1962:
    jump $I19
  rx719_done1959:
    rx719_cur."!cursor_fail"()
    .return (rx719_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346277629.325_caps" :subid("cuid_memo_183_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["invocant"], $P5002
    box $P5003, 2
    set $P5001["parameter"], $P5003
    box $P5004, 2
    set $P5001["before"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346277629.325_nfa" :subid("cuid_memo_184_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "ws"
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "parameter"
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "ws"
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 58
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "ws"
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    box $P5030, 1
    push $P5026, $P5030
    box $P5031, 0
    push $P5026, $P5031
    box $P5032, 0
    push $P5026, $P5032
    box $P5033, 1
    push $P5026, $P5033
    box $P5034, 0
    push $P5026, $P5034
    box $P5035, 0
    push $P5026, $P5035
    push $P5001, $P5026
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "parameter"
    push $P5036, $P5038
    box $P5039, 8
    push $P5036, $P5039
    push $P5001, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 9
    push $P5040, $P5043
    push $P5001, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 2
    push $P5044, $P5045
    box $P5046, 44
    push $P5044, $P5046
    box $P5047, 6
    push $P5044, $P5047
    box $P5048, 4
    push $P5044, $P5048
    box $P5049, 32
    push $P5044, $P5049
    box $P5050, 9
    push $P5044, $P5050
    box $P5051, 1
    push $P5044, $P5051
    box $P5052, 0
    push $P5044, $P5052
    box $P5053, 11
    push $P5044, $P5053
    push $P5001, $P5044
    new $P5054, 'ResizablePMCArray'
    box $P5055, 0
    push $P5054, $P5055
    box $P5056, 0
    push $P5054, $P5056
    box $P5057, 0
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 2
    push $P5058, $P5059
    box $P5060, 41
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 2
    push $P5058, $P5062
    box $P5063, 123
    push $P5058, $P5063
    box $P5064, 10
    push $P5058, $P5064
    push $P5001, $P5058
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346277629.325_alt_nfa__26_1346277633.388" :subid("cuid_memo_185_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 44
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 4
    push $P5010, $P5011
    box $P5012, 32
    push $P5010, $P5012
    box $P5013, 1
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 3
    push $P5010, $P5016
    push $P5008, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 0
    push $P5017, $P5018
    box $P5019, 0
    push $P5017, $P5019
    box $P5020, 0
    push $P5017, $P5020
    push $P5008, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 41
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 123
    push $P5021, $P5026
    box $P5027, 2
    push $P5021, $P5027
    push $P5008, $P5021
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1346277629.325") :anon :lex :outer("cuid_128_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1064

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback1970
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback1971
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback1971:
    unless_null $P5002, vivi_7221972
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7221972:
    set $P5001, $P5002
  fallback1970:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_127_1346277629.325") :anon :lex :outer("cuid_128_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx732_tgt
    .local int rx732_pos
    .local int rx732_off
    .local int rx732_eos
    .local int rx732_rep
    .local pmc rx732_cur
    .local pmc rx732_curclass
    .local pmc rx732_bstack
    .local pmc rx732_cstack
    (rx732_cur, rx732_tgt, rx732_pos, rx732_curclass, rx732_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx732_cur
    length rx732_eos, rx732_tgt
    eq $I19, 1, rx732_restart1988
    gt rx732_pos, rx732_eos, rx732_fail1989
    repr_get_attr_int $I11, self, rx732_curclass, "$!from"
    ne $I11, -1, rxscan733_done1995
    goto rxscan733_scan1994
  rxscan733_loop1993:
    inc rx732_pos
    gt rx732_pos, rx732_eos, rx732_fail1989
    repr_bind_attr_int rx732_cur, rx732_curclass, "$!from", rx732_pos
  rxscan733_scan1994:
    nqp_rxmark rx732_bstack, rxscan733_loop1993, rx732_pos, 0
  rxscan733_done1995:
    nqp_rxmark rx732_bstack, rxquantr734_done1997, rx732_pos, 0
  rxquantr734_loop1996:
    ge rx732_pos, rx732_eos, rx732_fail1989
    is_cclass $I11, .CCLASS_WHITESPACE, rx732_tgt, rx732_pos
    unless $I11, rx732_fail1989
    add rx732_pos, 1
    nqp_rxpeek $I19, rx732_bstack, rxquantr734_done1997
    inc $I19
    inc $I19
    set rx732_rep, rx732_bstack[$I19]
    nqp_rxcommit rx732_bstack, rxquantr734_done1997
    inc rx732_rep
    nqp_rxmark rx732_bstack, rxquantr734_done1997, rx732_pos, rx732_rep
    goto rxquantr734_loop1996
  rxquantr734_done1997:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt735_01999
    nqp_push_label $P11, alt735_12000
    nqp_rxmark rx732_bstack, alt735_end1998, -1, 0
    rx732_cur."!alt"(rx732_pos, "alt_nfa__25_1346277633.377", $P11)
    goto rx732_fail1989
  alt735_01999:
    add $I11, rx732_pos, 1
    gt $I11, rx732_eos, rx732_fail1989
    substr $S10, rx732_tgt, rx732_pos, 1
    ne $S10, ucs4:")", rx732_fail1989
    add rx732_pos, 1
    goto alt735_end1998
  alt735_12000:
    add $I11, rx732_pos, 1
    gt $I11, rx732_eos, rx732_fail1989
    substr $S10, rx732_tgt, rx732_pos, 1
    ne $S10, ucs4:"{", rx732_fail1989
    add rx732_pos, 1
    goto alt735_end1998
  alt735_end1998:
    nqp_rxcommit rx732_bstack, alt735_end1998
    rx732_cur."!cursor_pass"(rx732_pos, 'backtrack'=>1)
    .return (rx732_cur)
  rx732_restart1988:
    repr_get_attr_obj rx732_cstack, rx732_cur, rx732_curclass, "$!cstack"
  rx732_fail1989:
    unless rx732_bstack, rx732_done1987
    pop $I19, rx732_bstack
    if_null rx732_cstack, rx732_cstack_done1992
    unless rx732_cstack, rx732_cstack_done1992
    dec $I19
    set $P11, rx732_cstack[$I19]
  rx732_cstack_done1992:
    pop rx732_rep, rx732_bstack
    pop rx732_pos, rx732_bstack
    pop $I19, rx732_bstack
    lt rx732_pos, -1, rx732_done1987
    lt rx732_pos, 0, rx732_fail1989
    eq $I19, 0, rx732_fail1989
    nqp_islist $I20, rx732_cstack
    unless $I20, rx732_jump1990
    elements $I18, rx732_bstack
    le $I18, 0, rx732_cut1991
    dec $I18
    set $I18, rx732_bstack[$I18]
  rx732_cut1991:
    assign rx732_cstack, $I18
  rx732_jump1990:
    jump $I19
  rx732_done1987:
    rx732_cur."!cursor_fail"()
    .return (rx732_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346277629.325_caps" :subid("cuid_memo_186_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346277629.325_nfa" :subid("cuid_memo_187_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 41
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 2
    push $P5010, $P5014
    box $P5015, 123
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346277629.325_alt_nfa__25_1346277633.377" :subid("cuid_memo_188_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 41
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 123
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_129_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1068
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx737_tgt
    .local int rx737_pos
    .local int rx737_off
    .local int rx737_eos
    .local int rx737_rep
    .local pmc rx737_cur
    .local pmc rx737_curclass
    .local pmc rx737_bstack
    .local pmc rx737_cstack
    (rx737_cur, rx737_tgt, rx737_pos, rx737_curclass, rx737_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx737_cur
    length rx737_eos, rx737_tgt
    eq $I19, 1, rx737_restart2004
    gt rx737_pos, rx737_eos, rx737_fail2005
    repr_get_attr_int $I11, self, rx737_curclass, "$!from"
    ne $I11, -1, rxscan738_done2011
    goto rxscan738_scan2010
  rxscan738_loop2009:
    inc rx737_pos
    gt rx737_pos, rx737_eos, rx737_fail2005
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!from", rx737_pos
  rxscan738_scan2010:
    nqp_rxmark rx737_bstack, rxscan738_loop2009, rx737_pos, 0
  rxscan738_done2011:
    nqp_rxmark rx737_bstack, rxquantr739_done2013, rx737_pos, 0
  rxquantr739_loop2012:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."typename"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    nqp_rxmark rx737_bstack, rxsubrule740_pass2014, -1, 0
  rxsubrule740_pass2014:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxmark rx737_bstack, rxquantr741_done2016, rx737_pos, 0
  rxquantr741_loop2015:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2005
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:":", rx737_fail2005
    add rx737_pos, 1
    nqp_rxmark rx737_bstack, rxcap742_fail2018, rx737_pos, 0
    ge rx737_pos, rx737_eos, rx737_fail2005
    substr $S11, rx737_tgt, rx737_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx737_fail2005
    inc rx737_pos
    nqp_rxpeek $I19, rx737_bstack, rxcap742_fail2018
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "definedness")
    goto rxcap742_done2017
  rxcap742_fail2018:
    goto rx737_fail2005
  rxcap742_done2017:
    nqp_rxpeek $I19, rx737_bstack, rxquantr741_done2016
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr741_done2016
    inc rx737_rep
  rxquantr741_done2016:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."ws"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxpeek $I19, rx737_bstack, rxquantr739_done2013
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr739_done2013
    inc rx737_rep
    nqp_rxmark rx737_bstack, rxquantr739_done2013, rx737_pos, rx737_rep
    goto rxquantr739_loop2012
  rxquantr739_done2013:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt744_02021
    nqp_push_label $P11, alt744_12025
    nqp_rxmark rx737_bstack, alt744_end2020, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__27_1346277633.432", $P11)
    goto rx737_fail2005
  alt744_02021:
    nqp_rxmark rx737_bstack, rxcap745_fail2023, rx737_pos, 0
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2005
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"*", rx737_fail2005
    add rx737_pos, 1
    nqp_rxpeek $I19, rx737_bstack, rxcap745_fail2023
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "quant")
    goto rxcap745_done2022
  rxcap745_fail2023:
    goto rx737_fail2005
  rxcap745_done2022:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    nqp_rxmark rx737_bstack, rxsubrule746_pass2024, -1, 0
  rxsubrule746_pass2024:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt744_end2020
  alt744_12025:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt747_02027
    nqp_push_label $P11, alt747_12029
    nqp_rxmark rx737_bstack, alt747_end2026, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__28_1346277633.433", $P11)
    goto rx737_fail2005
  alt747_02027:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    nqp_rxmark rx737_bstack, rxsubrule748_pass2028, -1, 0
  rxsubrule748_pass2028:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt747_end2026
  alt747_12029:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    nqp_rxmark rx737_bstack, rxsubrule749_pass2030, -1, 0
  rxsubrule749_pass2030:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt747_end2026
  alt747_end2026:
    nqp_rxcommit rx737_bstack, alt747_end2026
    nqp_rxmark rx737_bstack, rxcap750_fail2032, rx737_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt751_02034
    nqp_push_label $P11, alt751_12035
    nqp_push_label $P11, alt751_22036
    nqp_rxmark rx737_bstack, alt751_end2033, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__29_1346277633.434", $P11)
    goto rx737_fail2005
  alt751_02034:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2005
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"?", rx737_fail2005
    add rx737_pos, 1
    goto alt751_end2033
  alt751_12035:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2005
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"!", rx737_fail2005
    add rx737_pos, 1
    goto alt751_end2033
  alt751_22036:
    goto alt751_end2033
  alt751_end2033:
    nqp_rxcommit rx737_bstack, alt751_end2033
    nqp_rxpeek $I19, rx737_bstack, rxcap750_fail2032
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "quant")
    goto rxcap750_done2031
  rxcap750_fail2032:
    goto rx737_fail2005
  rxcap750_done2031:
    goto alt744_end2020
  alt744_end2020:
    nqp_rxcommit rx737_bstack, alt744_end2020
    nqp_rxmark rx737_bstack, rxquantr753_done2039, rx737_pos, 0
  rxquantr753_loop2038:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
    goto rxsubrule754_pass2040
  rxsubrule754_back2041:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2005
  rxsubrule754_pass2040:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule754_back2041
    push rx737_bstack, $I11
    push rx737_bstack, 0
    push rx737_bstack, rx737_pos
    elements $I11, rx737_cstack
    push rx737_bstack, $I11
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxpeek $I19, rx737_bstack, rxquantr753_done2039
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr753_done2039
    inc rx737_rep
  rxquantr753_done2039:
    rx737_cur."!cursor_pass"(rx737_pos, "parameter", 'backtrack'=>1)
    .return (rx737_cur)
  rx737_restart2004:
    repr_get_attr_obj rx737_cstack, rx737_cur, rx737_curclass, "$!cstack"
  rx737_fail2005:
    unless rx737_bstack, rx737_done2003
    pop $I19, rx737_bstack
    if_null rx737_cstack, rx737_cstack_done2008
    unless rx737_cstack, rx737_cstack_done2008
    dec $I19
    set $P11, rx737_cstack[$I19]
  rx737_cstack_done2008:
    pop rx737_rep, rx737_bstack
    pop rx737_pos, rx737_bstack
    pop $I19, rx737_bstack
    lt rx737_pos, -1, rx737_done2003
    lt rx737_pos, 0, rx737_fail2005
    eq $I19, 0, rx737_fail2005
    nqp_islist $I20, rx737_cstack
    unless $I20, rx737_jump2006
    elements $I18, rx737_bstack
    le $I18, 0, rx737_cut2007
    dec $I18
    set $I18, rx737_bstack[$I18]
  rx737_cut2007:
    assign rx737_cstack, $I18
  rx737_jump2006:
    jump $I19
  rx737_done2003:
    rx737_cur."!cursor_fail"()
    .return (rx737_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346277629.325_caps" :subid("cuid_memo_189_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 2
    set $P5001["definedness"], $P5003
    box $P5004, 0
    set $P5001["quant"], $P5004
    box $P5005, 0
    set $P5001["param_var"], $P5005
    box $P5006, 0
    set $P5001["named_param"], $P5006
    box $P5007, 2
    set $P5001["default_value"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346277629.325_nfa" :subid("cuid_memo_190_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "typename"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 5
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 58
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 4
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 6
    push $P5017, $P5018
    box $P5019, "_DU"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "ws"
    push $P5021, $P5023
    box $P5024, 1
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 42
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    box $P5029, 8
    push $P5025, $P5029
    box $P5030, "param_var"
    push $P5025, $P5030
    box $P5031, 8
    push $P5025, $P5031
    box $P5032, 8
    push $P5025, $P5032
    box $P5033, "named_param"
    push $P5025, $P5033
    box $P5034, 8
    push $P5025, $P5034
    push $P5001, $P5025
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "param_var"
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "default_value"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    box $P5043, 1
    push $P5039, $P5043
    box $P5044, 0
    push $P5039, $P5044
    box $P5045, 0
    push $P5039, $P5045
    push $P5001, $P5039
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 63
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    box $P5050, 2
    push $P5046, $P5050
    box $P5051, 33
    push $P5046, $P5051
    box $P5052, 7
    push $P5046, $P5052
    box $P5053, 1
    push $P5046, $P5053
    box $P5054, 0
    push $P5046, $P5054
    box $P5055, 7
    push $P5046, $P5055
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346277629.325_alt_nfa__28_1346277633.433" :subid("cuid_memo_191_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "param_var"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "named_param"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346277629.325_alt_nfa__29_1346277633.434" :subid("cuid_memo_192_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 63
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 33
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    new $P5014, 'ResizablePMCArray'
    new $P5015, 'ResizablePMCArray'
    push $P5014, $P5015
    new $P5016, 'ResizablePMCArray'
    box $P5017, 1
    push $P5016, $P5017
    box $P5018, 0
    push $P5016, $P5018
    box $P5019, 0
    push $P5016, $P5019
    push $P5014, $P5016
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346277629.325_alt_nfa__27_1346277633.432" :subid("cuid_memo_193_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 42
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "param_var"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "param_var"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    box $P5018, 8
    push $P5014, $P5018
    box $P5019, "named_param"
    push $P5014, $P5019
    box $P5020, 2
    push $P5014, $P5020
    push $P5012, $P5014
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 63
    push $P5021, $P5023
    box $P5024, 0
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 33
    push $P5021, $P5026
    box $P5027, 0
    push $P5021, $P5027
    box $P5028, 1
    push $P5021, $P5028
    box $P5029, 0
    push $P5021, $P5029
    box $P5030, 0
    push $P5021, $P5030
    push $P5012, $P5021
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_130_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1077
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx755_tgt
    .local int rx755_pos
    .local int rx755_off
    .local int rx755_eos
    .local int rx755_rep
    .local pmc rx755_cur
    .local pmc rx755_curclass
    .local pmc rx755_bstack
    .local pmc rx755_cstack
    (rx755_cur, rx755_tgt, rx755_pos, rx755_curclass, rx755_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx755_cur
    length rx755_eos, rx755_tgt
    eq $I19, 1, rx755_restart2044
    gt rx755_pos, rx755_eos, rx755_fail2045
    repr_get_attr_int $I11, self, rx755_curclass, "$!from"
    ne $I11, -1, rxscan756_done2051
    goto rxscan756_scan2050
  rxscan756_loop2049:
    inc rx755_pos
    gt rx755_pos, rx755_eos, rx755_fail2045
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!from", rx755_pos
  rxscan756_scan2050:
    nqp_rxmark rx755_bstack, rxscan756_loop2049, rx755_pos, 0
  rxscan756_done2051:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2045
    nqp_rxmark rx755_bstack, rxsubrule757_pass2052, -1, 0
  rxsubrule757_pass2052:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    nqp_rxmark rx755_bstack, rxquantr758_done2054, rx755_pos, 0
  rxquantr758_loop2053:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2045
    goto rxsubrule759_pass2055
  rxsubrule759_back2056:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2045
  rxsubrule759_pass2055:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule759_back2056
    push rx755_bstack, $I11
    push rx755_bstack, 0
    push rx755_bstack, rx755_pos
    elements $I11, rx755_cstack
    push rx755_bstack, $I11
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    nqp_rxpeek $I19, rx755_bstack, rxquantr758_done2054
    inc $I19
    inc $I19
    set rx755_rep, rx755_bstack[$I19]
    nqp_rxcommit rx755_bstack, rxquantr758_done2054
    inc rx755_rep
  rxquantr758_done2054:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt760_02058
    nqp_push_label $P11, alt760_12060
    nqp_rxmark rx755_bstack, alt760_end2057, -1, 0
    rx755_cur."!alt"(rx755_pos, "alt_nfa__30_1346277633.453", $P11)
    goto rx755_fail2045
  alt760_02058:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."ident"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2045
    nqp_rxmark rx755_bstack, rxsubrule761_pass2059, -1, 0
  rxsubrule761_pass2059:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    goto alt760_end2057
  alt760_12060:
    nqp_rxmark rx755_bstack, rxcap762_fail2062, rx755_pos, 0
    ge rx755_pos, rx755_eos, rx755_fail2045
    substr $S11, rx755_tgt, rx755_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx755_fail2045
    inc rx755_pos
    nqp_rxpeek $I19, rx755_bstack, rxcap762_fail2062
    inc $I19
    set $I11, rx755_bstack[$I19]
    $P11 = rx755_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx755_pos)
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "name")
    goto rxcap762_done2061
  rxcap762_fail2062:
    goto rx755_fail2045
  rxcap762_done2061:
    goto alt760_end2057
  alt760_end2057:
    nqp_rxcommit rx755_bstack, alt760_end2057
    rx755_cur."!cursor_pass"(rx755_pos, "param_var", 'backtrack'=>1)
    .return (rx755_cur)
  rx755_restart2044:
    repr_get_attr_obj rx755_cstack, rx755_cur, rx755_curclass, "$!cstack"
  rx755_fail2045:
    unless rx755_bstack, rx755_done2043
    pop $I19, rx755_bstack
    if_null rx755_cstack, rx755_cstack_done2048
    unless rx755_cstack, rx755_cstack_done2048
    dec $I19
    set $P11, rx755_cstack[$I19]
  rx755_cstack_done2048:
    pop rx755_rep, rx755_bstack
    pop rx755_pos, rx755_bstack
    pop $I19, rx755_bstack
    lt rx755_pos, -1, rx755_done2043
    lt rx755_pos, 0, rx755_fail2045
    eq $I19, 0, rx755_fail2045
    nqp_islist $I20, rx755_cstack
    unless $I20, rx755_jump2046
    elements $I18, rx755_bstack
    le $I18, 0, rx755_cut2047
    dec $I18
    set $I18, rx755_bstack[$I18]
  rx755_cut2047:
    assign rx755_cstack, $I18
  rx755_jump2046:
    jump $I19
  rx755_done2043:
    rx755_cur."!cursor_fail"()
    .return (rx755_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346277629.325_caps" :subid("cuid_memo_194_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["name"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346277629.325_nfa" :subid("cuid_memo_195_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "twigil"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ident"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 6
    push $P5014, $P5018
    box $P5019, "/!"
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346277629.325_alt_nfa__30_1346277633.453" :subid("cuid_memo_196_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "ident"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "/!"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_131_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx763_tgt
    .local int rx763_pos
    .local int rx763_off
    .local int rx763_eos
    .local int rx763_rep
    .local pmc rx763_cur
    .local pmc rx763_curclass
    .local pmc rx763_bstack
    .local pmc rx763_cstack
    (rx763_cur, rx763_tgt, rx763_pos, rx763_curclass, rx763_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx763_cur
    length rx763_eos, rx763_tgt
    eq $I19, 1, rx763_restart2065
    gt rx763_pos, rx763_eos, rx763_fail2066
    repr_get_attr_int $I11, self, rx763_curclass, "$!from"
    ne $I11, -1, rxscan764_done2072
    goto rxscan764_scan2071
  rxscan764_loop2070:
    inc rx763_pos
    gt rx763_pos, rx763_eos, rx763_fail2066
    repr_bind_attr_int rx763_cur, rx763_curclass, "$!from", rx763_pos
  rxscan764_scan2071:
    nqp_rxmark rx763_bstack, rxscan764_loop2070, rx763_pos, 0
  rxscan764_done2072:
    add $I11, rx763_pos, 1
    gt $I11, rx763_eos, rx763_fail2066
    substr $S10, rx763_tgt, rx763_pos, 1
    ne $S10, ucs4:":", rx763_fail2066
    add rx763_pos, 1
    repr_bind_attr_int rx763_cur, rx763_curclass, "$!pos", rx763_pos
    $P11 = rx763_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx763_curclass, "$!pos"
    lt $I11, 0, rx763_fail2066
    nqp_rxmark rx763_bstack, rxsubrule765_pass2073, -1, 0
  rxsubrule765_pass2073:
    rx763_cstack = rx763_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx763_pos, $P11, rx763_curclass, "$!pos"
    rx763_cur."!cursor_pass"(rx763_pos, "named_param", 'backtrack'=>1)
    .return (rx763_cur)
  rx763_restart2065:
    repr_get_attr_obj rx763_cstack, rx763_cur, rx763_curclass, "$!cstack"
  rx763_fail2066:
    unless rx763_bstack, rx763_done2064
    pop $I19, rx763_bstack
    if_null rx763_cstack, rx763_cstack_done2069
    unless rx763_cstack, rx763_cstack_done2069
    dec $I19
    set $P11, rx763_cstack[$I19]
  rx763_cstack_done2069:
    pop rx763_rep, rx763_bstack
    pop rx763_pos, rx763_bstack
    pop $I19, rx763_bstack
    lt rx763_pos, -1, rx763_done2064
    lt rx763_pos, 0, rx763_fail2066
    eq $I19, 0, rx763_fail2066
    nqp_islist $I20, rx763_cstack
    unless $I20, rx763_jump2067
    elements $I18, rx763_bstack
    le $I18, 0, rx763_cut2068
    dec $I18
    set $I18, rx763_bstack[$I18]
  rx763_cut2068:
    assign rx763_cstack, $I18
  rx763_jump2067:
    jump $I19
  rx763_done2064:
    rx763_cur."!cursor_fail"()
    .return (rx763_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1346277629.325_caps" :subid("cuid_memo_197_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["param_var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1346277629.325_nfa" :subid("cuid_memo_198_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "param_var"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_132_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx766_tgt
    .local int rx766_pos
    .local int rx766_off
    .local int rx766_eos
    .local int rx766_rep
    .local pmc rx766_cur
    .local pmc rx766_curclass
    .local pmc rx766_bstack
    .local pmc rx766_cstack
    (rx766_cur, rx766_tgt, rx766_pos, rx766_curclass, rx766_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx766_cur
    length rx766_eos, rx766_tgt
    eq $I19, 1, rx766_restart2076
    gt rx766_pos, rx766_eos, rx766_fail2077
    repr_get_attr_int $I11, self, rx766_curclass, "$!from"
    ne $I11, -1, rxscan767_done2083
    goto rxscan767_scan2082
  rxscan767_loop2081:
    inc rx766_pos
    gt rx766_pos, rx766_eos, rx766_fail2077
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!from", rx766_pos
  rxscan767_scan2082:
    nqp_rxmark rx766_bstack, rxscan767_loop2081, rx766_pos, 0
  rxscan767_done2083:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2077
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    add $I11, rx766_pos, 1
    gt $I11, rx766_eos, rx766_fail2077
    substr $S10, rx766_tgt, rx766_pos, 1
    ne $S10, ucs4:"=", rx766_fail2077
    add rx766_pos, 1
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2077
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2077
    nqp_rxmark rx766_bstack, rxsubrule770_pass2086, -1, 0
  rxsubrule770_pass2086:
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2077
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    rx766_cur."!cursor_pass"(rx766_pos, "default_value", 'backtrack'=>1)
    .return (rx766_cur)
  rx766_restart2076:
    repr_get_attr_obj rx766_cstack, rx766_cur, rx766_curclass, "$!cstack"
  rx766_fail2077:
    unless rx766_bstack, rx766_done2075
    pop $I19, rx766_bstack
    if_null rx766_cstack, rx766_cstack_done2080
    unless rx766_cstack, rx766_cstack_done2080
    dec $I19
    set $P11, rx766_cstack[$I19]
  rx766_cstack_done2080:
    pop rx766_rep, rx766_bstack
    pop rx766_pos, rx766_bstack
    pop $I19, rx766_bstack
    lt rx766_pos, -1, rx766_done2075
    lt rx766_pos, 0, rx766_fail2077
    eq $I19, 0, rx766_fail2077
    nqp_islist $I20, rx766_cstack
    unless $I20, rx766_jump2078
    elements $I18, rx766_bstack
    le $I18, 0, rx766_cut2079
    dec $I18
    set $I18, rx766_bstack[$I18]
  rx766_cut2079:
    assign rx766_cstack, $I18
  rx766_jump2078:
    jump $I19
  rx766_done2075:
    rx766_cur."!cursor_fail"()
    .return (rx766_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_132_1346277629.325_caps" :subid("cuid_memo_199_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_133_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1088
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx772_tgt
    .local int rx772_pos
    .local int rx772_off
    .local int rx772_eos
    .local int rx772_rep
    .local pmc rx772_cur
    .local pmc rx772_curclass
    .local pmc rx772_bstack
    .local pmc rx772_cstack
    (rx772_cur, rx772_tgt, rx772_pos, rx772_curclass, rx772_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx772_cur
    length rx772_eos, rx772_tgt
    eq $I19, 1, rx772_restart2090
    gt rx772_pos, rx772_eos, rx772_fail2091
    repr_get_attr_int $I11, self, rx772_curclass, "$!from"
    ne $I11, -1, rxscan773_done2097
    goto rxscan773_scan2096
  rxscan773_loop2095:
    inc rx772_pos
    gt rx772_pos, rx772_eos, rx772_fail2091
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!from", rx772_pos
  rxscan773_scan2096:
    nqp_rxmark rx772_bstack, rxscan773_loop2095, rx772_pos, 0
  rxscan773_done2097:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2091
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2091
    nqp_rxmark rx772_bstack, rxsubrule775_pass2099, -1, 0
  rxsubrule775_pass2099:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2091
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    rx772_cur."!cursor_pass"(rx772_pos, "trait", 'backtrack'=>1)
    .return (rx772_cur)
  rx772_restart2090:
    repr_get_attr_obj rx772_cstack, rx772_cur, rx772_curclass, "$!cstack"
  rx772_fail2091:
    unless rx772_bstack, rx772_done2089
    pop $I19, rx772_bstack
    if_null rx772_cstack, rx772_cstack_done2094
    unless rx772_cstack, rx772_cstack_done2094
    dec $I19
    set $P11, rx772_cstack[$I19]
  rx772_cstack_done2094:
    pop rx772_rep, rx772_bstack
    pop rx772_pos, rx772_bstack
    pop $I19, rx772_bstack
    lt rx772_pos, -1, rx772_done2089
    lt rx772_pos, 0, rx772_fail2091
    eq $I19, 0, rx772_fail2091
    nqp_islist $I20, rx772_cstack
    unless $I20, rx772_jump2092
    elements $I18, rx772_bstack
    le $I18, 0, rx772_cut2093
    dec $I18
    set $I18, rx772_bstack[$I18]
  rx772_cut2093:
    assign rx772_cstack, $I18
  rx772_jump2092:
    jump $I19
  rx772_done2089:
    rx772_cur."!cursor_fail"()
    .return (rx772_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_133_1346277629.325_caps" :subid("cuid_memo_200_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["trait_mod"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_134_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_135_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1091
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx777_tgt
    .local int rx777_pos
    .local int rx777_off
    .local int rx777_eos
    .local int rx777_rep
    .local pmc rx777_cur
    .local pmc rx777_curclass
    .local pmc rx777_bstack
    .local pmc rx777_cstack
    (rx777_cur, rx777_tgt, rx777_pos, rx777_curclass, rx777_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx777_cur
    length rx777_eos, rx777_tgt
    eq $I19, 1, rx777_restart2103
    gt rx777_pos, rx777_eos, rx777_fail2104
    repr_get_attr_int $I11, self, rx777_curclass, "$!from"
    ne $I11, -1, rxscan778_done2110
    goto rxscan778_scan2109
  rxscan778_loop2108:
    inc rx777_pos
    gt rx777_pos, rx777_eos, rx777_fail2104
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!from", rx777_pos
  rxscan778_scan2109:
    nqp_rxmark rx777_bstack, rxscan778_loop2108, rx777_pos, 0
  rxscan778_done2110:
    nqp_rxmark rx777_bstack, rxcap779_fail2112, rx777_pos, 0
    add $I11, rx777_pos, 2
    gt $I11, rx777_eos, rx777_fail2104
    substr $S10, rx777_tgt, rx777_pos, 2
    ne $S10, ucs4:"is", rx777_fail2104
    add rx777_pos, 2
    nqp_rxpeek $I19, rx777_bstack, rxcap779_fail2112
    inc $I19
    set $I11, rx777_bstack[$I19]
    $P11 = rx777_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx777_pos)
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "sym")
    goto rxcap779_done2111
  rxcap779_fail2112:
    goto rx777_fail2104
  rxcap779_done2111:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."ws"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
    nqp_rxmark rx777_bstack, rxsubrule781_pass2114, -1, 0
  rxsubrule781_pass2114:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxmark rx777_bstack, rxquantr782_done2116, rx777_pos, 0
  rxquantr782_loop2115:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
    goto rxsubrule783_pass2117
  rxsubrule783_back2118:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
  rxsubrule783_pass2117:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule783_back2118
    push rx777_bstack, $I11
    push rx777_bstack, 0
    push rx777_bstack, rx777_pos
    elements $I11, rx777_cstack
    push rx777_bstack, $I11
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxpeek $I19, rx777_bstack, rxquantr782_done2116
    inc $I19
    inc $I19
    set rx777_rep, rx777_bstack[$I19]
    nqp_rxcommit rx777_bstack, rxquantr782_done2116
    inc rx777_rep
  rxquantr782_done2116:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."ws"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2104
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    rx777_cur."!cursor_pass"(rx777_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx777_cur)
  rx777_restart2103:
    repr_get_attr_obj rx777_cstack, rx777_cur, rx777_curclass, "$!cstack"
  rx777_fail2104:
    unless rx777_bstack, rx777_done2102
    pop $I19, rx777_bstack
    if_null rx777_cstack, rx777_cstack_done2107
    unless rx777_cstack, rx777_cstack_done2107
    dec $I19
    set $P11, rx777_cstack[$I19]
  rx777_cstack_done2107:
    pop rx777_rep, rx777_bstack
    pop rx777_pos, rx777_bstack
    pop $I19, rx777_bstack
    lt rx777_pos, -1, rx777_done2102
    lt rx777_pos, 0, rx777_fail2104
    eq $I19, 0, rx777_fail2104
    nqp_islist $I20, rx777_cstack
    unless $I20, rx777_jump2105
    elements $I18, rx777_bstack
    le $I18, 0, rx777_cut2106
    dec $I18
    set $I18, rx777_bstack[$I18]
  rx777_cut2106:
    assign rx777_cstack, $I18
  rx777_jump2105:
    jump $I19
  rx777_done2102:
    rx777_cur."!cursor_fail"()
    .return (rx777_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1346277629.325_caps" :subid("cuid_memo_201_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["longname"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1346277629.325_nfa" :subid("cuid_memo_202_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_136_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1093
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_397_1346277629.325' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx785_tgt
    .local int rx785_pos
    .local int rx785_off
    .local int rx785_eos
    .local int rx785_rep
    .local pmc rx785_cur
    .local pmc rx785_curclass
    .local pmc rx785_bstack
    .local pmc rx785_cstack
    (rx785_cur, rx785_tgt, rx785_pos, rx785_curclass, rx785_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx785_cur
    length rx785_eos, rx785_tgt
    eq $I19, 1, rx785_restart2122
    gt rx785_pos, rx785_eos, rx785_fail2123
    repr_get_attr_int $I11, self, rx785_curclass, "$!from"
    ne $I11, -1, rxscan786_done2129
    goto rxscan786_scan2128
  rxscan786_loop2127:
    inc rx785_pos
    gt rx785_pos, rx785_eos, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!from", rx785_pos
  rxscan786_scan2128:
    nqp_rxmark rx785_bstack, rxscan786_loop2127, rx785_pos, 0
  rxscan786_done2129:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt787_02131
    nqp_push_label $P11, alt787_12161
    nqp_rxmark rx785_bstack, alt787_end2130, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__31_1346277633.666", $P11)
    goto rx785_fail2123
  alt787_02131:
    nqp_rxmark rx785_bstack, rxcap788_fail2133, rx785_pos, 0
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"proto", rx785_fail2123
    add rx785_pos, 5
    nqp_rxpeek $I19, rx785_bstack, rxcap788_fail2133
    inc $I19
    set $I11, rx785_bstack[$I19]
    $P11 = rx785_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx785_pos)
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "proto")
    goto rxcap788_done2132
  rxcap788_fail2133:
    goto rx785_fail2123
  rxcap788_done2132:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt790_02136
    nqp_push_label $P11, alt790_12137
    nqp_push_label $P11, alt790_22138
    nqp_rxmark rx785_bstack, alt790_end2135, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__32_1346277633.666", $P11)
    goto rx785_fail2123
  alt790_02136:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"regex", rx785_fail2123
    add rx785_pos, 5
    goto alt790_end2135
  alt790_12137:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"token", rx785_fail2123
    add rx785_pos, 5
    goto alt790_end2135
  alt790_22138:
    add $I11, rx785_pos, 4
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 4
    ne $S10, ucs4:"rule", rx785_fail2123
    add rx785_pos, 4
    goto alt790_end2135
  alt790_end2135:
    nqp_rxcommit rx785_bstack, alt790_end2135
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    nqp_rxmark rx785_bstack, rxsubrule792_pass2140, -1, 0
  rxsubrule792_pass2140:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
  alt794_02143:
    nqp_rxmark rx785_bstack, alt794_12146, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 3
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 3
    ne $S10, ucs4:"{*}", rx785_fail2123
    add rx785_pos, 3
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2142
  alt794_12146:
    nqp_rxmark rx785_bstack, alt794_22151, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"<...>", rx785_fail2123
    add rx785_pos, 5
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2142
  alt794_22151:
    nqp_rxmark rx785_bstack, alt794_32156, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 3
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 3
    ne $S10, ucs4:"<*>", rx785_fail2123
    add rx785_pos, 3
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2142
  alt794_32156:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
  alt794_end2142:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt787_end2130
  alt787_12161:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxmark rx785_bstack, rxcap810_fail2164, rx785_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt811_02166
    nqp_push_label $P11, alt811_12167
    nqp_push_label $P11, alt811_22168
    nqp_rxmark rx785_bstack, alt811_end2165, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__33_1346277633.67", $P11)
    goto rx785_fail2123
  alt811_02166:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"regex", rx785_fail2123
    add rx785_pos, 5
    goto alt811_end2165
  alt811_12167:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"token", rx785_fail2123
    add rx785_pos, 5
    goto alt811_end2165
  alt811_22168:
    add $I11, rx785_pos, 4
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 4
    ne $S10, ucs4:"rule", rx785_fail2123
    add rx785_pos, 4
    goto alt811_end2165
  alt811_end2165:
    nqp_rxcommit rx785_bstack, alt811_end2165
    nqp_rxpeek $I19, rx785_bstack, rxcap810_fail2164
    inc $I19
    set $I11, rx785_bstack[$I19]
    $P11 = rx785_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx785_pos)
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "sym")
    goto rxcap810_done2163
  rxcap810_fail2164:
    goto rx785_fail2123
  rxcap810_done2163:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    nqp_rxmark rx785_bstack, rxsubrule814_pass2171, -1, 0
  rxsubrule814_pass2171:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxmark rx785_bstack, rxquantr818_done2176, rx785_pos, 0
  rxquantr818_loop2175:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"(", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."signature"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    nqp_rxmark rx785_bstack, rxsubrule821_pass2179, -1, 0
  rxsubrule821_pass2179:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:")", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxpeek $I19, rx785_bstack, rxquantr818_done2176
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr818_done2176
    inc rx785_rep
  rxquantr818_done2176:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    store_lex unicode:"$\x{a2}", rx785_cur
    unless_null $P101, fallback2183
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2184
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2184:
    unless_null $P5002, vivi_8252185
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8252185:
    set $P101, $P5002
  fallback2183:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    store_lex unicode:"$\x{a2}", rx785_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_397_1346277629.325' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    nqp_rxmark rx785_bstack, rxsubrule832_pass2203, -1, 0
  rxsubrule832_pass2203:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2123
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2123
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2123
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt787_end2130
  alt787_end2130:
    nqp_rxcommit rx785_bstack, alt787_end2130
    rx785_cur."!cursor_pass"(rx785_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx785_cur)
  rx785_restart2122:
    repr_get_attr_obj rx785_cstack, rx785_cur, rx785_curclass, "$!cstack"
  rx785_fail2123:
    unless rx785_bstack, rx785_done2121
    pop $I19, rx785_bstack
    if_null rx785_cstack, rx785_cstack_done2126
    unless rx785_cstack, rx785_cstack_done2126
    dec $I19
    set $P11, rx785_cstack[$I19]
  rx785_cstack_done2126:
    pop rx785_rep, rx785_bstack
    pop rx785_pos, rx785_bstack
    pop $I19, rx785_bstack
    lt rx785_pos, -1, rx785_done2121
    lt rx785_pos, 0, rx785_fail2123
    eq $I19, 0, rx785_fail2123
    nqp_islist $I20, rx785_cstack
    unless $I20, rx785_jump2124
    elements $I18, rx785_bstack
    le $I18, 0, rx785_cut2125
    dec $I18
    set $I18, rx785_bstack[$I18]
  rx785_cut2125:
    assign rx785_cstack, $I18
  rx785_jump2124:
    jump $I19
  rx785_done2121:
    rx785_cur."!cursor_fail"()
    .return (rx785_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346277629.325_caps" :subid("cuid_memo_203_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["proto"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["sym"], $P5004
    box $P5005, 2
    set $P5001["signature"], $P5005
    box $P5006, 0
    set $P5001["p6regex"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346277629.325_nfa" :subid("cuid_memo_204_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 0
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 114
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 111
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 116
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 111
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346277629.325_alt_nfa__32_1346277633.666" :subid("cuid_memo_205_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346277629.325_alt_nfa__33_1346277633.67" :subid("cuid_memo_206_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346277629.325_alt_nfa__31_1346277633.666" :subid("cuid_memo_207_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 112
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 114
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 111
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 111
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5002, $P5024
    push $P5001, $P5002
    new $P5028, 'ResizablePMCArray'
    new $P5029, 'ResizablePMCArray'
    push $P5028, $P5029
    new $P5030, 'ResizablePMCArray'
    box $P5031, 0
    push $P5030, $P5031
    box $P5032, 0
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    box $P5034, 0
    push $P5030, $P5034
    box $P5035, 0
    push $P5030, $P5035
    box $P5036, 0
    push $P5030, $P5036
    push $P5028, $P5030
    push $P5001, $P5028
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1346277629.325") :anon :lex :outer("cuid_136_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1108

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2187
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2188
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2188:
    unless_null $P5002, vivi_8272189
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8272189:
    set $P5001, $P5002
  fallback2187:
    find_lex $P5010, "$/"
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2190
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5011
  fallback2190:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5012, $I5001
    set $P5001["s"], $P5012
    find_dynamic_lex $P5013, "%*RX"
    unless_null $P5013, fallback2191
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["%RX"]
    unless_null $P5014, fallback2192
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    new $P5019, 'Hash'
    set $P5017["%RX"], $P5019
    set $P5014, $P5019
  fallback2192:
    unless_null $P5014, vivi_8282193
    die "Contextual %*RX not found"
    box $P5020, "Contextual %*RX not found"
    set $P5014, $P5020
  vivi_8282193:
    set $P5013, $P5014
  fallback2191:
    find_lex $P5022, "$/"
    set $P5021, $P5022["sym"]
    unless_null $P5021, fallback2196
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5023
  fallback2196:
    set $S5002, $P5021
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless829_end2195 
    find_lex $P5025, "$/"
    set $P5024, $P5025["sym"]
    unless_null $P5024, fallback2197
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5026
  fallback2197:
    set $S5003, $P5024
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless829_end2195:
    box $P5027, $I5004
    set $P5013["r"], $P5027
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback2198
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["%RX"]
    unless_null $P5029, fallback2199
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5029, $P5034
  fallback2199:
    unless_null $P5029, vivi_8302200
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5029, $P5035
  vivi_8302200:
    set $P5028, $P5029
  fallback2198:
.annotate 'line', 1111
    find_lex $P5037, "$/"
    set $P5036, $P5037["deflongname"]
    unless_null $P5036, fallback2201
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5036, $P5038
  fallback2201:
    $P5039 = $P5036."ast"()
    set $P5028["name"], $P5039
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_137_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1117
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx834_tgt
    .local int rx834_pos
    .local int rx834_off
    .local int rx834_eos
    .local int rx834_rep
    .local pmc rx834_cur
    .local pmc rx834_curclass
    .local pmc rx834_bstack
    .local pmc rx834_cstack
    (rx834_cur, rx834_tgt, rx834_pos, rx834_curclass, rx834_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx834_cur
    length rx834_eos, rx834_tgt
    eq $I19, 1, rx834_restart2207
    gt rx834_pos, rx834_eos, rx834_fail2208
    repr_get_attr_int $I11, self, rx834_curclass, "$!from"
    ne $I11, -1, rxscan835_done2214
    goto rxscan835_scan2213
  rxscan835_loop2212:
    inc rx834_pos
    gt rx834_pos, rx834_eos, rx834_fail2208
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!from", rx834_pos
  rxscan835_scan2213:
    nqp_rxmark rx834_bstack, rxscan835_loop2212, rx834_pos, 0
  rxscan835_done2214:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail2208
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:".", rx834_fail2208
    add rx834_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt836_02216
    nqp_push_label $P11, alt836_12218
    nqp_rxmark rx834_bstack, alt836_end2215, -1, 0
    rx834_cur."!alt"(rx834_pos, "alt_nfa__34_1346277633.715", $P11)
    goto rx834_fail2208
  alt836_02216:
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    nqp_rxmark rx834_bstack, rxsubrule837_pass2217, -1, 0
  rxsubrule837_pass2217:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt836_end2215
  alt836_12218:
    ge rx834_pos, rx834_eos, rx834_fail2208
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx834_fail2208
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."quote"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    nqp_rxmark rx834_bstack, rxsubrule838_pass2219, -1, 0
  rxsubrule838_pass2219:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
  alt839_02221:
    nqp_rxmark rx834_bstack, alt839_12222, rx834_pos, 0
    ge rx834_pos, rx834_eos, rx834_fail2208
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx834_fail2208
    goto alt839_end2220
  alt839_12222:
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
  alt839_end2220:
    goto alt836_end2215
  alt836_end2215:
    nqp_rxcommit rx834_bstack, alt836_end2215
    nqp_rxmark rx834_bstack, rxquantr841_done2225, rx834_pos, 0
  rxquantr841_loop2224:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt842_02227
    nqp_push_label $P11, alt842_12229
    nqp_rxmark rx834_bstack, alt842_end2226, -1, 0
    rx834_cur."!alt"(rx834_pos, "alt_nfa__35_1346277633.716", $P11)
    goto rx834_fail2208
  alt842_02227:
    ge rx834_pos, rx834_eos, rx834_fail2208
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx834_fail2208
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."args"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    nqp_rxmark rx834_bstack, rxsubrule843_pass2228, -1, 0
  rxsubrule843_pass2228:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt842_end2226
  alt842_12229:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail2208
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:":", rx834_fail2208
    add rx834_pos, 1
    ge rx834_pos, rx834_eos, rx834_fail2208
    is_cclass $I11, .CCLASS_WHITESPACE, rx834_tgt, rx834_pos
    unless $I11, rx834_fail2208
    add rx834_pos, 1
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2208
    nqp_rxmark rx834_bstack, rxsubrule844_pass2230, -1, 0
  rxsubrule844_pass2230:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt842_end2226
  alt842_end2226:
    nqp_rxpeek $I19, rx834_bstack, rxquantr841_done2225
    inc $I19
    inc $I19
    set rx834_rep, rx834_bstack[$I19]
    nqp_rxcommit rx834_bstack, rxquantr841_done2225
    inc rx834_rep
  rxquantr841_done2225:
    rx834_cur."!cursor_pass"(rx834_pos, "dotty", 'backtrack'=>1)
    .return (rx834_cur)
  rx834_restart2207:
    repr_get_attr_obj rx834_cstack, rx834_cur, rx834_curclass, "$!cstack"
  rx834_fail2208:
    unless rx834_bstack, rx834_done2206
    pop $I19, rx834_bstack
    if_null rx834_cstack, rx834_cstack_done2211
    unless rx834_cstack, rx834_cstack_done2211
    dec $I19
    set $P11, rx834_cstack[$I19]
  rx834_cstack_done2211:
    pop rx834_rep, rx834_bstack
    pop rx834_pos, rx834_bstack
    pop $I19, rx834_bstack
    lt rx834_pos, -1, rx834_done2206
    lt rx834_pos, 0, rx834_fail2208
    eq $I19, 0, rx834_fail2208
    nqp_islist $I20, rx834_cstack
    unless $I20, rx834_jump2209
    elements $I18, rx834_bstack
    le $I18, 0, rx834_cut2210
    dec $I18
    set $I18, rx834_bstack[$I18]
  rx834_cut2210:
    assign rx834_cstack, $I18
  rx834_jump2209:
    jump $I19
  rx834_done2206:
    rx834_cur."!cursor_fail"()
    .return (rx834_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346277629.325_caps" :subid("cuid_memo_208_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["quote"], $P5004
    box $P5005, 2
    set $P5001["args"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346277629.325_nfa" :subid("cuid_memo_209_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 46
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "deflongname"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 6
    push $P5007, $P5011
    box $P5012, "'\""
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 6
    push $P5014, $P5015
    box $P5016, "("
    push $P5014, $P5016
    box $P5017, 5
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 58
    push $P5014, $P5019
    box $P5020, 6
    push $P5014, $P5020
    box $P5021, 1
    push $P5014, $P5021
    box $P5022, 0
    push $P5014, $P5022
    box $P5023, 0
    push $P5014, $P5023
    push $P5001, $P5014
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 4
    push $P5032, $P5033
    box $P5034, 32
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "arglist"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346277629.325_alt_nfa__34_1346277633.715" :subid("cuid_memo_210_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "deflongname"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "'\""
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5008, $P5014
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346277629.325_alt_nfa__35_1346277633.716" :subid("cuid_memo_211_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "("
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 32
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "arglist"
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_138_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx845_tgt
    .local int rx845_pos
    .local int rx845_off
    .local int rx845_eos
    .local int rx845_rep
    .local pmc rx845_cur
    .local pmc rx845_curclass
    .local pmc rx845_bstack
    .local pmc rx845_cstack
    (rx845_cur, rx845_tgt, rx845_pos, rx845_curclass, rx845_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx845_cur
    length rx845_eos, rx845_tgt
    eq $I19, 1, rx845_restart2233
    gt rx845_pos, rx845_eos, rx845_fail2234
    repr_get_attr_int $I11, self, rx845_curclass, "$!from"
    ne $I11, -1, rxscan846_done2240
    goto rxscan846_scan2239
  rxscan846_loop2238:
    inc rx845_pos
    gt rx845_pos, rx845_eos, rx845_fail2234
    repr_bind_attr_int rx845_cur, rx845_curclass, "$!from", rx845_pos
  rxscan846_scan2239:
    nqp_rxmark rx845_bstack, rxscan846_loop2238, rx845_pos, 0
  rxscan846_done2240:
    nqp_rxmark rx845_bstack, rxcap847_fail2242, rx845_pos, 0
    add $I11, rx845_pos, 4
    gt $I11, rx845_eos, rx845_fail2234
    substr $S10, rx845_tgt, rx845_pos, 4
    ne $S10, ucs4:"self", rx845_fail2234
    add rx845_pos, 4
    nqp_rxpeek $I19, rx845_bstack, rxcap847_fail2242
    inc $I19
    set $I11, rx845_bstack[$I19]
    $P11 = rx845_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx845_pos)
    rx845_cstack = rx845_cur."!cursor_capture"($P11, "sym")
    goto rxcap847_done2241
  rxcap847_fail2242:
    goto rx845_fail2234
  rxcap847_done2241:
    le rx845_pos, 0, rx845_fail2234
    is_cclass $I11, .CCLASS_WORD, rx845_tgt, rx845_pos
    if $I11, rx845_fail2234
    sub $I11, rx845_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx845_tgt, $I11
    unless $I11, rx845_fail2234
    rx845_cur."!cursor_pass"(rx845_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx845_cur)
  rx845_restart2233:
    repr_get_attr_obj rx845_cstack, rx845_cur, rx845_curclass, "$!cstack"
  rx845_fail2234:
    unless rx845_bstack, rx845_done2232
    pop $I19, rx845_bstack
    if_null rx845_cstack, rx845_cstack_done2237
    unless rx845_cstack, rx845_cstack_done2237
    dec $I19
    set $P11, rx845_cstack[$I19]
  rx845_cstack_done2237:
    pop rx845_rep, rx845_bstack
    pop rx845_pos, rx845_bstack
    pop $I19, rx845_bstack
    lt rx845_pos, -1, rx845_done2232
    lt rx845_pos, 0, rx845_fail2234
    eq $I19, 0, rx845_fail2234
    nqp_islist $I20, rx845_cstack
    unless $I20, rx845_jump2235
    elements $I18, rx845_bstack
    le $I18, 0, rx845_cut2236
    dec $I18
    set $I18, rx845_bstack[$I18]
  rx845_cut2236:
    assign rx845_cstack, $I18
  rx845_jump2235:
    jump $I19
  rx845_done2232:
    rx845_cur."!cursor_fail"()
    .return (rx845_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1346277629.325_caps" :subid("cuid_memo_212_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1346277629.325_nfa" :subid("cuid_memo_213_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 102
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_139_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1132
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx849_tgt
    .local int rx849_pos
    .local int rx849_off
    .local int rx849_eos
    .local int rx849_rep
    .local pmc rx849_cur
    .local pmc rx849_curclass
    .local pmc rx849_bstack
    .local pmc rx849_cstack
    (rx849_cur, rx849_tgt, rx849_pos, rx849_curclass, rx849_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx849_cur
    length rx849_eos, rx849_tgt
    eq $I19, 1, rx849_restart2246
    gt rx849_pos, rx849_eos, rx849_fail2247
    repr_get_attr_int $I11, self, rx849_curclass, "$!from"
    ne $I11, -1, rxscan850_done2253
    goto rxscan850_scan2252
  rxscan850_loop2251:
    inc rx849_pos
    gt rx849_pos, rx849_eos, rx849_fail2247
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!from", rx849_pos
  rxscan850_scan2252:
    nqp_rxmark rx849_bstack, rxscan850_loop2251, rx849_pos, 0
  rxscan850_done2253:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2247
    nqp_rxmark rx849_bstack, rxsubrule851_pass2254, -1, 0
  rxsubrule851_pass2254:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    ge rx849_pos, rx849_eos, rx849_fail2247
    substr $S11, rx849_tgt, rx849_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx849_fail2247
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."args"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2247
    nqp_rxmark rx849_bstack, rxsubrule852_pass2255, -1, 0
  rxsubrule852_pass2255:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    rx849_cur."!cursor_pass"(rx849_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx849_cur)
  rx849_restart2246:
    repr_get_attr_obj rx849_cstack, rx849_cur, rx849_curclass, "$!cstack"
  rx849_fail2247:
    unless rx849_bstack, rx849_done2245
    pop $I19, rx849_bstack
    if_null rx849_cstack, rx849_cstack_done2250
    unless rx849_cstack, rx849_cstack_done2250
    dec $I19
    set $P11, rx849_cstack[$I19]
  rx849_cstack_done2250:
    pop rx849_rep, rx849_bstack
    pop rx849_pos, rx849_bstack
    pop $I19, rx849_bstack
    lt rx849_pos, -1, rx849_done2245
    lt rx849_pos, 0, rx849_fail2247
    eq $I19, 0, rx849_fail2247
    nqp_islist $I20, rx849_cstack
    unless $I20, rx849_jump2248
    elements $I18, rx849_bstack
    le $I18, 0, rx849_cut2249
    dec $I18
    set $I18, rx849_bstack[$I18]
  rx849_cut2249:
    assign rx849_cstack, $I18
  rx849_jump2248:
    jump $I19
  rx849_done2245:
    rx849_cur."!cursor_fail"()
    .return (rx849_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1346277629.325_caps" :subid("cuid_memo_214_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["deflongname"], $P5002
    box $P5003, 0
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1346277629.325_nfa" :subid("cuid_memo_215_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "deflongname"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, "("
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_140_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1136
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx853_tgt
    .local int rx853_pos
    .local int rx853_off
    .local int rx853_eos
    .local int rx853_rep
    .local pmc rx853_cur
    .local pmc rx853_curclass
    .local pmc rx853_bstack
    .local pmc rx853_cstack
    (rx853_cur, rx853_tgt, rx853_pos, rx853_curclass, rx853_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx853_cur
    length rx853_eos, rx853_tgt
    eq $I19, 1, rx853_restart2258
    gt rx853_pos, rx853_eos, rx853_fail2259
    repr_get_attr_int $I11, self, rx853_curclass, "$!from"
    ne $I11, -1, rxscan854_done2265
    goto rxscan854_scan2264
  rxscan854_loop2263:
    inc rx853_pos
    gt rx853_pos, rx853_eos, rx853_fail2259
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!from", rx853_pos
  rxscan854_scan2264:
    nqp_rxmark rx853_bstack, rxscan854_loop2263, rx853_pos, 0
  rxscan854_done2265:
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."name"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2259
    nqp_rxmark rx853_bstack, rxsubrule855_pass2266, -1, 0
  rxsubrule855_pass2266:
    rx853_cstack = rx853_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
    nqp_rxmark rx853_bstack, rxquantr856_done2268, rx853_pos, 0
  rxquantr856_loop2267:
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."args"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2259
    goto rxsubrule857_pass2269
  rxsubrule857_back2270:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2259
  rxsubrule857_pass2269:
    rx853_cstack = rx853_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule857_back2270
    push rx853_bstack, $I11
    push rx853_bstack, 0
    push rx853_bstack, rx853_pos
    elements $I11, rx853_cstack
    push rx853_bstack, $I11
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
    nqp_rxpeek $I19, rx853_bstack, rxquantr856_done2268
    inc $I19
    inc $I19
    set rx853_rep, rx853_bstack[$I19]
    nqp_rxcommit rx853_bstack, rxquantr856_done2268
    inc rx853_rep
  rxquantr856_done2268:
    rx853_cur."!cursor_pass"(rx853_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx853_cur)
  rx853_restart2258:
    repr_get_attr_obj rx853_cstack, rx853_cur, rx853_curclass, "$!cstack"
  rx853_fail2259:
    unless rx853_bstack, rx853_done2257
    pop $I19, rx853_bstack
    if_null rx853_cstack, rx853_cstack_done2262
    unless rx853_cstack, rx853_cstack_done2262
    dec $I19
    set $P11, rx853_cstack[$I19]
  rx853_cstack_done2262:
    pop rx853_rep, rx853_bstack
    pop rx853_pos, rx853_bstack
    pop $I19, rx853_bstack
    lt rx853_pos, -1, rx853_done2257
    lt rx853_pos, 0, rx853_fail2259
    eq $I19, 0, rx853_fail2259
    nqp_islist $I20, rx853_cstack
    unless $I20, rx853_jump2260
    elements $I18, rx853_bstack
    le $I18, 0, rx853_cut2261
    dec $I18
    set $I18, rx853_bstack[$I18]
  rx853_cut2261:
    assign rx853_cstack, $I18
  rx853_jump2260:
    jump $I19
  rx853_done2257:
    rx853_cur."!cursor_fail"()
    .return (rx853_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1346277629.325_caps" :subid("cuid_memo_216_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1346277629.325_nfa" :subid("cuid_memo_217_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "args"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_141_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1140
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx858_tgt
    .local int rx858_pos
    .local int rx858_off
    .local int rx858_eos
    .local int rx858_rep
    .local pmc rx858_cur
    .local pmc rx858_curclass
    .local pmc rx858_bstack
    .local pmc rx858_cstack
    (rx858_cur, rx858_tgt, rx858_pos, rx858_curclass, rx858_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx858_cur
    length rx858_eos, rx858_tgt
    eq $I19, 1, rx858_restart2273
    gt rx858_pos, rx858_eos, rx858_fail2274
    repr_get_attr_int $I11, self, rx858_curclass, "$!from"
    ne $I11, -1, rxscan859_done2280
    goto rxscan859_scan2279
  rxscan859_loop2278:
    inc rx858_pos
    gt rx858_pos, rx858_eos, rx858_fail2274
    repr_bind_attr_int rx858_cur, rx858_curclass, "$!from", rx858_pos
  rxscan859_scan2279:
    nqp_rxmark rx858_bstack, rxscan859_loop2278, rx858_pos, 0
  rxscan859_done2280:
    add $I11, rx858_pos, 5
    gt $I11, rx858_eos, rx858_fail2274
    substr $S10, rx858_tgt, rx858_pos, 5
    ne $S10, ucs4:"pir::", rx858_fail2274
    add rx858_pos, 5
    nqp_rxmark rx858_bstack, rxcap860_fail2282, rx858_pos, 0
    nqp_rxmark rx858_bstack, rxquantr861_done2284, -1, 0
  rxquantr861_loop2283:
    ge rx858_pos, rx858_eos, rx858_fail2274
    is_cclass $I11, .CCLASS_WORD, rx858_tgt, rx858_pos
    unless $I11, rx858_fail2274
    add rx858_pos, 1
    nqp_rxpeek $I19, rx858_bstack, rxquantr861_done2284
    inc $I19
    inc $I19
    set rx858_rep, rx858_bstack[$I19]
    nqp_rxcommit rx858_bstack, rxquantr861_done2284
    inc rx858_rep
    nqp_rxmark rx858_bstack, rxquantr861_done2284, rx858_pos, rx858_rep
    goto rxquantr861_loop2283
  rxquantr861_done2284:
    nqp_rxpeek $I19, rx858_bstack, rxcap860_fail2282
    inc $I19
    set $I11, rx858_bstack[$I19]
    $P11 = rx858_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx858_pos)
    rx858_cstack = rx858_cur."!cursor_capture"($P11, "op")
    goto rxcap860_done2281
  rxcap860_fail2282:
    goto rx858_fail2274
  rxcap860_done2281:
    nqp_rxmark rx858_bstack, rxquantr862_done2286, rx858_pos, 0
  rxquantr862_loop2285:
    repr_bind_attr_int rx858_cur, rx858_curclass, "$!pos", rx858_pos
    $P11 = rx858_cur."args"()
    repr_get_attr_int $I11, $P11, rx858_curclass, "$!pos"
    lt $I11, 0, rx858_fail2274
    goto rxsubrule863_pass2287
  rxsubrule863_back2288:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx858_curclass, "$!pos"
    lt $I11, 0, rx858_fail2274
  rxsubrule863_pass2287:
    rx858_cstack = rx858_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule863_back2288
    push rx858_bstack, $I11
    push rx858_bstack, 0
    push rx858_bstack, rx858_pos
    elements $I11, rx858_cstack
    push rx858_bstack, $I11
    repr_get_attr_int rx858_pos, $P11, rx858_curclass, "$!pos"
    nqp_rxpeek $I19, rx858_bstack, rxquantr862_done2286
    inc $I19
    inc $I19
    set rx858_rep, rx858_bstack[$I19]
    nqp_rxcommit rx858_bstack, rxquantr862_done2286
    inc rx858_rep
  rxquantr862_done2286:
    rx858_cur."!cursor_pass"(rx858_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx858_cur)
  rx858_restart2273:
    repr_get_attr_obj rx858_cstack, rx858_cur, rx858_curclass, "$!cstack"
  rx858_fail2274:
    unless rx858_bstack, rx858_done2272
    pop $I19, rx858_bstack
    if_null rx858_cstack, rx858_cstack_done2277
    unless rx858_cstack, rx858_cstack_done2277
    dec $I19
    set $P11, rx858_cstack[$I19]
  rx858_cstack_done2277:
    pop rx858_rep, rx858_bstack
    pop rx858_pos, rx858_bstack
    pop $I19, rx858_bstack
    lt rx858_pos, -1, rx858_done2272
    lt rx858_pos, 0, rx858_fail2274
    eq $I19, 0, rx858_fail2274
    nqp_islist $I20, rx858_cstack
    unless $I20, rx858_jump2275
    elements $I18, rx858_bstack
    le $I18, 0, rx858_cut2276
    dec $I18
    set $I18, rx858_bstack[$I18]
  rx858_cut2276:
    assign rx858_cstack, $I18
  rx858_jump2275:
    jump $I19
  rx858_done2272:
    rx858_cur."!cursor_fail"()
    .return (rx858_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1346277629.325_caps" :subid("cuid_memo_218_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1346277629.325_nfa" :subid("cuid_memo_219_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_142_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1144
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx864_tgt
    .local int rx864_pos
    .local int rx864_off
    .local int rx864_eos
    .local int rx864_rep
    .local pmc rx864_cur
    .local pmc rx864_curclass
    .local pmc rx864_bstack
    .local pmc rx864_cstack
    (rx864_cur, rx864_tgt, rx864_pos, rx864_curclass, rx864_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx864_cur
    length rx864_eos, rx864_tgt
    eq $I19, 1, rx864_restart2291
    gt rx864_pos, rx864_eos, rx864_fail2292
    repr_get_attr_int $I11, self, rx864_curclass, "$!from"
    ne $I11, -1, rxscan865_done2298
    goto rxscan865_scan2297
  rxscan865_loop2296:
    inc rx864_pos
    gt rx864_pos, rx864_eos, rx864_fail2292
    repr_bind_attr_int rx864_cur, rx864_curclass, "$!from", rx864_pos
  rxscan865_scan2297:
    nqp_rxmark rx864_bstack, rxscan865_loop2296, rx864_pos, 0
  rxscan865_done2298:
    add $I11, rx864_pos, 12
    gt $I11, rx864_eos, rx864_fail2292
    substr $S10, rx864_tgt, rx864_pos, 12
    ne $S10, ucs4:"pir::const::", rx864_fail2292
    add rx864_pos, 12
    nqp_rxmark rx864_bstack, rxcap866_fail2300, rx864_pos, 0
    nqp_rxmark rx864_bstack, rxquantr867_done2302, -1, 0
  rxquantr867_loop2301:
    ge rx864_pos, rx864_eos, rx864_fail2292
    is_cclass $I11, .CCLASS_WORD, rx864_tgt, rx864_pos
    unless $I11, rx864_fail2292
    add rx864_pos, 1
    nqp_rxpeek $I19, rx864_bstack, rxquantr867_done2302
    inc $I19
    inc $I19
    set rx864_rep, rx864_bstack[$I19]
    nqp_rxcommit rx864_bstack, rxquantr867_done2302
    inc rx864_rep
    nqp_rxmark rx864_bstack, rxquantr867_done2302, rx864_pos, rx864_rep
    goto rxquantr867_loop2301
  rxquantr867_done2302:
    nqp_rxpeek $I19, rx864_bstack, rxcap866_fail2300
    inc $I19
    set $I11, rx864_bstack[$I19]
    $P11 = rx864_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx864_pos)
    rx864_cstack = rx864_cur."!cursor_capture"($P11, "const")
    goto rxcap866_done2299
  rxcap866_fail2300:
    goto rx864_fail2292
  rxcap866_done2299:
    rx864_cur."!cursor_pass"(rx864_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx864_cur)
  rx864_restart2291:
    repr_get_attr_obj rx864_cstack, rx864_cur, rx864_curclass, "$!cstack"
  rx864_fail2292:
    unless rx864_bstack, rx864_done2290
    pop $I19, rx864_bstack
    if_null rx864_cstack, rx864_cstack_done2295
    unless rx864_cstack, rx864_cstack_done2295
    dec $I19
    set $P11, rx864_cstack[$I19]
  rx864_cstack_done2295:
    pop rx864_rep, rx864_bstack
    pop rx864_pos, rx864_bstack
    pop $I19, rx864_bstack
    lt rx864_pos, -1, rx864_done2290
    lt rx864_pos, 0, rx864_fail2292
    eq $I19, 0, rx864_fail2292
    nqp_islist $I20, rx864_cstack
    unless $I20, rx864_jump2293
    elements $I18, rx864_bstack
    le $I18, 0, rx864_cut2294
    dec $I18
    set $I18, rx864_bstack[$I18]
  rx864_cut2294:
    assign rx864_cstack, $I18
  rx864_jump2293:
    jump $I19
  rx864_done2290:
    rx864_cur."!cursor_fail"()
    .return (rx864_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1346277629.325_caps" :subid("cuid_memo_220_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["const"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1346277629.325_nfa" :subid("cuid_memo_221_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 99
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 111
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 110
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 115
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 116
    push $P5039, $P5041
    box $P5042, 11
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 58
    push $P5043, $P5045
    box $P5046, 12
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 58
    push $P5047, $P5049
    box $P5050, 13
    push $P5047, $P5050
    push $P5001, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 14
    push $P5051, $P5054
    push $P5001, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 4
    push $P5055, $P5056
    box $P5057, 8192
    push $P5055, $P5057
    box $P5058, 15
    push $P5055, $P5058
    push $P5001, $P5055
    new $P5059, 'ResizablePMCArray'
    box $P5060, 1
    push $P5059, $P5060
    box $P5061, 0
    push $P5059, $P5061
    box $P5062, 14
    push $P5059, $P5062
    box $P5063, 1
    push $P5059, $P5063
    box $P5064, 0
    push $P5059, $P5064
    box $P5065, 0
    push $P5059, $P5065
    push $P5001, $P5059
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_143_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1148
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx868_tgt
    .local int rx868_pos
    .local int rx868_off
    .local int rx868_eos
    .local int rx868_rep
    .local pmc rx868_cur
    .local pmc rx868_curclass
    .local pmc rx868_bstack
    .local pmc rx868_cstack
    (rx868_cur, rx868_tgt, rx868_pos, rx868_curclass, rx868_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx868_cur
    length rx868_eos, rx868_tgt
    eq $I19, 1, rx868_restart2305
    gt rx868_pos, rx868_eos, rx868_fail2306
    repr_get_attr_int $I11, self, rx868_curclass, "$!from"
    ne $I11, -1, rxscan869_done2312
    goto rxscan869_scan2311
  rxscan869_loop2310:
    inc rx868_pos
    gt rx868_pos, rx868_eos, rx868_fail2306
    repr_bind_attr_int rx868_cur, rx868_curclass, "$!from", rx868_pos
  rxscan869_scan2311:
    nqp_rxmark rx868_bstack, rxscan869_loop2310, rx868_pos, 0
  rxscan869_done2312:
    add $I11, rx868_pos, 5
    gt $I11, rx868_eos, rx868_fail2306
    substr $S10, rx868_tgt, rx868_pos, 5
    ne $S10, ucs4:"nqp::", rx868_fail2306
    add rx868_pos, 5
    nqp_rxmark rx868_bstack, rxcap870_fail2314, rx868_pos, 0
    nqp_rxmark rx868_bstack, rxquantr871_done2316, -1, 0
  rxquantr871_loop2315:
    ge rx868_pos, rx868_eos, rx868_fail2306
    is_cclass $I11, .CCLASS_WORD, rx868_tgt, rx868_pos
    unless $I11, rx868_fail2306
    add rx868_pos, 1
    nqp_rxpeek $I19, rx868_bstack, rxquantr871_done2316
    inc $I19
    inc $I19
    set rx868_rep, rx868_bstack[$I19]
    nqp_rxcommit rx868_bstack, rxquantr871_done2316
    inc rx868_rep
    nqp_rxmark rx868_bstack, rxquantr871_done2316, rx868_pos, rx868_rep
    goto rxquantr871_loop2315
  rxquantr871_done2316:
    nqp_rxpeek $I19, rx868_bstack, rxcap870_fail2314
    inc $I19
    set $I11, rx868_bstack[$I19]
    $P11 = rx868_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx868_pos)
    rx868_cstack = rx868_cur."!cursor_capture"($P11, "op")
    goto rxcap870_done2313
  rxcap870_fail2314:
    goto rx868_fail2306
  rxcap870_done2313:
    nqp_rxmark rx868_bstack, rxquantr872_done2318, rx868_pos, 0
  rxquantr872_loop2317:
    repr_bind_attr_int rx868_cur, rx868_curclass, "$!pos", rx868_pos
    $P11 = rx868_cur."args"()
    repr_get_attr_int $I11, $P11, rx868_curclass, "$!pos"
    lt $I11, 0, rx868_fail2306
    goto rxsubrule873_pass2319
  rxsubrule873_back2320:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx868_curclass, "$!pos"
    lt $I11, 0, rx868_fail2306
  rxsubrule873_pass2319:
    rx868_cstack = rx868_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule873_back2320
    push rx868_bstack, $I11
    push rx868_bstack, 0
    push rx868_bstack, rx868_pos
    elements $I11, rx868_cstack
    push rx868_bstack, $I11
    repr_get_attr_int rx868_pos, $P11, rx868_curclass, "$!pos"
    nqp_rxpeek $I19, rx868_bstack, rxquantr872_done2318
    inc $I19
    inc $I19
    set rx868_rep, rx868_bstack[$I19]
    nqp_rxcommit rx868_bstack, rxquantr872_done2318
    inc rx868_rep
  rxquantr872_done2318:
    rx868_cur."!cursor_pass"(rx868_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx868_cur)
  rx868_restart2305:
    repr_get_attr_obj rx868_cstack, rx868_cur, rx868_curclass, "$!cstack"
  rx868_fail2306:
    unless rx868_bstack, rx868_done2304
    pop $I19, rx868_bstack
    if_null rx868_cstack, rx868_cstack_done2309
    unless rx868_cstack, rx868_cstack_done2309
    dec $I19
    set $P11, rx868_cstack[$I19]
  rx868_cstack_done2309:
    pop rx868_rep, rx868_bstack
    pop rx868_pos, rx868_bstack
    pop $I19, rx868_bstack
    lt rx868_pos, -1, rx868_done2304
    lt rx868_pos, 0, rx868_fail2306
    eq $I19, 0, rx868_fail2306
    nqp_islist $I20, rx868_cstack
    unless $I20, rx868_jump2307
    elements $I18, rx868_bstack
    le $I18, 0, rx868_cut2308
    dec $I18
    set $I18, rx868_bstack[$I18]
  rx868_cut2308:
    assign rx868_cstack, $I18
  rx868_jump2307:
    jump $I19
  rx868_done2304:
    rx868_cur."!cursor_fail"()
    .return (rx868_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1346277629.325_caps" :subid("cuid_memo_222_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1346277629.325_nfa" :subid("cuid_memo_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 112
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_144_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1152
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_398_1346277629.325' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx874_tgt
    .local int rx874_pos
    .local int rx874_off
    .local int rx874_eos
    .local int rx874_rep
    .local pmc rx874_cur
    .local pmc rx874_curclass
    .local pmc rx874_bstack
    .local pmc rx874_cstack
    (rx874_cur, rx874_tgt, rx874_pos, rx874_curclass, rx874_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx874_cur
    length rx874_eos, rx874_tgt
    eq $I19, 1, rx874_restart2323
    gt rx874_pos, rx874_eos, rx874_fail2324
    repr_get_attr_int $I11, self, rx874_curclass, "$!from"
    ne $I11, -1, rxscan875_done2330
    goto rxscan875_scan2329
  rxscan875_loop2328:
    inc rx874_pos
    gt rx874_pos, rx874_eos, rx874_fail2324
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!from", rx874_pos
  rxscan875_scan2329:
    nqp_rxmark rx874_bstack, rxscan875_loop2328, rx874_pos, 0
  rxscan875_done2330:
    add $I11, rx874_pos, 3
    gt $I11, rx874_eos, rx874_fail2324
    substr $S10, rx874_tgt, rx874_pos, 3
    ne $S10, ucs4:"{*}", rx874_fail2324
    add rx874_pos, 3
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail2324
  alt876_02332:
    nqp_rxmark rx874_bstack, alt876_12336, rx874_pos, 0
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    store_lex unicode:"$\x{a2}", rx874_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_398_1346277629.325' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx874_fail2324
    goto alt876_end2331
  alt876_12336:
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail2324
    repr_get_attr_int rx874_pos, $P11, rx874_curclass, "$!pos"
  alt876_end2331:
    rx874_cur."!cursor_pass"(rx874_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx874_cur)
  rx874_restart2323:
    repr_get_attr_obj rx874_cstack, rx874_cur, rx874_curclass, "$!cstack"
  rx874_fail2324:
    unless rx874_bstack, rx874_done2322
    pop $I19, rx874_bstack
    if_null rx874_cstack, rx874_cstack_done2327
    unless rx874_cstack, rx874_cstack_done2327
    dec $I19
    set $P11, rx874_cstack[$I19]
  rx874_cstack_done2327:
    pop rx874_rep, rx874_bstack
    pop rx874_pos, rx874_bstack
    pop $I19, rx874_bstack
    lt rx874_pos, -1, rx874_done2322
    lt rx874_pos, 0, rx874_fail2324
    eq $I19, 0, rx874_fail2324
    nqp_islist $I20, rx874_cstack
    unless $I20, rx874_jump2325
    elements $I18, rx874_bstack
    le $I18, 0, rx874_cut2326
    dec $I18
    set $I18, rx874_bstack[$I18]
  rx874_cut2326:
    assign rx874_cstack, $I18
  rx874_jump2325:
    jump $I19
  rx874_done2322:
    rx874_cur."!cursor_fail"()
    .return (rx874_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1346277629.325_caps" :subid("cuid_memo_224_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1346277629.325_nfa" :subid("cuid_memo_225_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 125
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ENDSTMT"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1346277629.325") :anon :lex :outer("cuid_144_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1154

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2333
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2334
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback2334:
    unless_null $P5002, vivi_8772335
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_8772335:
    set $P5001, $P5002
  fallback2333:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_145_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1157
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx879_tgt
    .local int rx879_pos
    .local int rx879_off
    .local int rx879_eos
    .local int rx879_rep
    .local pmc rx879_cur
    .local pmc rx879_curclass
    .local pmc rx879_bstack
    .local pmc rx879_cstack
    (rx879_cur, rx879_tgt, rx879_pos, rx879_curclass, rx879_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx879_cur
    length rx879_eos, rx879_tgt
    eq $I19, 1, rx879_restart2340
    gt rx879_pos, rx879_eos, rx879_fail2341
    repr_get_attr_int $I11, self, rx879_curclass, "$!from"
    ne $I11, -1, rxscan880_done2347
    goto rxscan880_scan2346
  rxscan880_loop2345:
    inc rx879_pos
    gt rx879_pos, rx879_eos, rx879_fail2341
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!from", rx879_pos
  rxscan880_scan2346:
    nqp_rxmark rx879_bstack, rxscan880_loop2345, rx879_pos, 0
  rxscan880_done2347:
    add $I11, rx879_pos, 1
    gt $I11, rx879_eos, rx879_fail2341
    substr $S10, rx879_tgt, rx879_pos, 1
    ne $S10, ucs4:"(", rx879_fail2341
    add rx879_pos, 1
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!pos", rx879_pos
    $P11 = rx879_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx879_curclass, "$!pos"
    lt $I11, 0, rx879_fail2341
    nqp_rxmark rx879_bstack, rxsubrule881_pass2348, -1, 0
  rxsubrule881_pass2348:
    rx879_cstack = rx879_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx879_pos, $P11, rx879_curclass, "$!pos"
    add $I11, rx879_pos, 1
    gt $I11, rx879_eos, rx879_fail2341
    substr $S10, rx879_tgt, rx879_pos, 1
    ne $S10, ucs4:")", rx879_fail2341
    add rx879_pos, 1
    rx879_cur."!cursor_pass"(rx879_pos, "args", 'backtrack'=>1)
    .return (rx879_cur)
  rx879_restart2340:
    repr_get_attr_obj rx879_cstack, rx879_cur, rx879_curclass, "$!cstack"
  rx879_fail2341:
    unless rx879_bstack, rx879_done2339
    pop $I19, rx879_bstack
    if_null rx879_cstack, rx879_cstack_done2344
    unless rx879_cstack, rx879_cstack_done2344
    dec $I19
    set $P11, rx879_cstack[$I19]
  rx879_cstack_done2344:
    pop rx879_rep, rx879_bstack
    pop rx879_pos, rx879_bstack
    pop $I19, rx879_bstack
    lt rx879_pos, -1, rx879_done2339
    lt rx879_pos, 0, rx879_fail2341
    eq $I19, 0, rx879_fail2341
    nqp_islist $I20, rx879_cstack
    unless $I20, rx879_jump2342
    elements $I18, rx879_bstack
    le $I18, 0, rx879_cut2343
    dec $I18
    set $I18, rx879_bstack[$I18]
  rx879_cut2343:
    assign rx879_cstack, $I18
  rx879_jump2342:
    jump $I19
  rx879_done2339:
    rx879_cur."!cursor_fail"()
    .return (rx879_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1346277629.325_caps" :subid("cuid_memo_226_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1346277629.325_nfa" :subid("cuid_memo_227_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "arglist"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 41
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_146_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1161
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx882_tgt
    .local int rx882_pos
    .local int rx882_off
    .local int rx882_eos
    .local int rx882_rep
    .local pmc rx882_cur
    .local pmc rx882_curclass
    .local pmc rx882_bstack
    .local pmc rx882_cstack
    (rx882_cur, rx882_tgt, rx882_pos, rx882_curclass, rx882_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx882_cur
    length rx882_eos, rx882_tgt
    eq $I19, 1, rx882_restart2351
    gt rx882_pos, rx882_eos, rx882_fail2352
    repr_get_attr_int $I11, self, rx882_curclass, "$!from"
    ne $I11, -1, rxscan883_done2358
    goto rxscan883_scan2357
  rxscan883_loop2356:
    inc rx882_pos
    gt rx882_pos, rx882_eos, rx882_fail2352
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!from", rx882_pos
  rxscan883_scan2357:
    nqp_rxmark rx882_bstack, rxscan883_loop2356, rx882_pos, 0
  rxscan883_done2358:
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!pos", rx882_pos
    $P11 = rx882_cur."ws"()
    repr_get_attr_int $I11, $P11, rx882_curclass, "$!pos"
    lt $I11, 0, rx882_fail2352
    repr_get_attr_int rx882_pos, $P11, rx882_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt885_02361
    nqp_push_label $P11, alt885_12363
    nqp_rxmark rx882_bstack, alt885_end2360, -1, 0
    rx882_cur."!alt"(rx882_pos, "alt_nfa__36_1346277633.847", $P11)
    goto rx882_fail2352
  alt885_02361:
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!pos", rx882_pos
    $P11 = rx882_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx882_curclass, "$!pos"
    lt $I11, 0, rx882_fail2352
    nqp_rxmark rx882_bstack, rxsubrule886_pass2362, -1, 0
  rxsubrule886_pass2362:
    rx882_cstack = rx882_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx882_pos, $P11, rx882_curclass, "$!pos"
    goto alt885_end2360
  alt885_12363:
    goto alt885_end2360
  alt885_end2360:
    nqp_rxcommit rx882_bstack, alt885_end2360
    rx882_cur."!cursor_pass"(rx882_pos, "arglist", 'backtrack'=>1)
    .return (rx882_cur)
  rx882_restart2351:
    repr_get_attr_obj rx882_cstack, rx882_cur, rx882_curclass, "$!cstack"
  rx882_fail2352:
    unless rx882_bstack, rx882_done2350
    pop $I19, rx882_bstack
    if_null rx882_cstack, rx882_cstack_done2355
    unless rx882_cstack, rx882_cstack_done2355
    dec $I19
    set $P11, rx882_cstack[$I19]
  rx882_cstack_done2355:
    pop rx882_rep, rx882_bstack
    pop rx882_pos, rx882_bstack
    pop $I19, rx882_bstack
    lt rx882_pos, -1, rx882_done2350
    lt rx882_pos, 0, rx882_fail2352
    eq $I19, 0, rx882_fail2352
    nqp_islist $I20, rx882_cstack
    unless $I20, rx882_jump2353
    elements $I18, rx882_bstack
    le $I18, 0, rx882_cut2354
    dec $I18
    set $I18, rx882_bstack[$I18]
  rx882_cut2354:
    assign rx882_cstack, $I18
  rx882_jump2353:
    jump $I19
  rx882_done2350:
    rx882_cur."!cursor_fail"()
    .return (rx882_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346277629.325_caps" :subid("cuid_memo_228_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346277629.325_nfa" :subid("cuid_memo_229_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ws"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "EXPR"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346277629.325_alt_nfa__36_1346277633.847" :subid("cuid_memo_230_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "EXPR"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 1
    push $P5010, $P5011
    box $P5012, 0
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_147_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1170
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx888_tgt
    .local int rx888_pos
    .local int rx888_off
    .local int rx888_eos
    .local int rx888_rep
    .local pmc rx888_cur
    .local pmc rx888_curclass
    .local pmc rx888_bstack
    .local pmc rx888_cstack
    (rx888_cur, rx888_tgt, rx888_pos, rx888_curclass, rx888_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx888_cur
    length rx888_eos, rx888_tgt
    eq $I19, 1, rx888_restart2367
    gt rx888_pos, rx888_eos, rx888_fail2368
    repr_get_attr_int $I11, self, rx888_curclass, "$!from"
    ne $I11, -1, rxscan889_done2374
    goto rxscan889_scan2373
  rxscan889_loop2372:
    inc rx888_pos
    gt rx888_pos, rx888_eos, rx888_fail2368
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!from", rx888_pos
  rxscan889_scan2373:
    nqp_rxmark rx888_bstack, rxscan889_loop2372, rx888_pos, 0
  rxscan889_done2374:
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!pos", rx888_pos
    $P11 = rx888_cur."value"()
    repr_get_attr_int $I11, $P11, rx888_curclass, "$!pos"
    lt $I11, 0, rx888_fail2368
    nqp_rxmark rx888_bstack, rxsubrule890_pass2375, -1, 0
  rxsubrule890_pass2375:
    rx888_cstack = rx888_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx888_pos, $P11, rx888_curclass, "$!pos"
    rx888_cur."!cursor_pass"(rx888_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx888_cur)
  rx888_restart2367:
    repr_get_attr_obj rx888_cstack, rx888_cur, rx888_curclass, "$!cstack"
  rx888_fail2368:
    unless rx888_bstack, rx888_done2366
    pop $I19, rx888_bstack
    if_null rx888_cstack, rx888_cstack_done2371
    unless rx888_cstack, rx888_cstack_done2371
    dec $I19
    set $P11, rx888_cstack[$I19]
  rx888_cstack_done2371:
    pop rx888_rep, rx888_bstack
    pop rx888_pos, rx888_bstack
    pop $I19, rx888_bstack
    lt rx888_pos, -1, rx888_done2366
    lt rx888_pos, 0, rx888_fail2368
    eq $I19, 0, rx888_fail2368
    nqp_islist $I20, rx888_cstack
    unless $I20, rx888_jump2369
    elements $I18, rx888_bstack
    le $I18, 0, rx888_cut2370
    dec $I18
    set $I18, rx888_bstack[$I18]
  rx888_cut2370:
    assign rx888_cstack, $I18
  rx888_jump2369:
    jump $I19
  rx888_done2366:
    rx888_cur."!cursor_fail"()
    .return (rx888_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1346277629.325_caps" :subid("cuid_memo_231_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["value"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1346277629.325_nfa" :subid("cuid_memo_232_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "value"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_148_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx891_tgt
    .local int rx891_pos
    .local int rx891_off
    .local int rx891_eos
    .local int rx891_rep
    .local pmc rx891_cur
    .local pmc rx891_curclass
    .local pmc rx891_bstack
    .local pmc rx891_cstack
    (rx891_cur, rx891_tgt, rx891_pos, rx891_curclass, rx891_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx891_cur
    length rx891_eos, rx891_tgt
    eq $I19, 1, rx891_restart2378
    gt rx891_pos, rx891_eos, rx891_fail2379
    repr_get_attr_int $I11, self, rx891_curclass, "$!from"
    ne $I11, -1, rxscan892_done2385
    goto rxscan892_scan2384
  rxscan892_loop2383:
    inc rx891_pos
    gt rx891_pos, rx891_eos, rx891_fail2379
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!from", rx891_pos
  rxscan892_scan2384:
    nqp_rxmark rx891_bstack, rxscan892_loop2383, rx891_pos, 0
  rxscan892_done2385:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt893_02387
    nqp_push_label $P11, alt893_12389
    nqp_rxmark rx891_bstack, alt893_end2386, -1, 0
    rx891_cur."!alt"(rx891_pos, "alt_nfa__37_1346277633.864", $P11)
    goto rx891_fail2379
  alt893_02387:
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!pos", rx891_pos
    $P11 = rx891_cur."quote"()
    repr_get_attr_int $I11, $P11, rx891_curclass, "$!pos"
    lt $I11, 0, rx891_fail2379
    nqp_rxmark rx891_bstack, rxsubrule894_pass2388, -1, 0
  rxsubrule894_pass2388:
    rx891_cstack = rx891_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx891_pos, $P11, rx891_curclass, "$!pos"
    goto alt893_end2386
  alt893_12389:
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!pos", rx891_pos
    $P11 = rx891_cur."number"()
    repr_get_attr_int $I11, $P11, rx891_curclass, "$!pos"
    lt $I11, 0, rx891_fail2379
    nqp_rxmark rx891_bstack, rxsubrule895_pass2390, -1, 0
  rxsubrule895_pass2390:
    rx891_cstack = rx891_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx891_pos, $P11, rx891_curclass, "$!pos"
    goto alt893_end2386
  alt893_end2386:
    rx891_cur."!cursor_pass"(rx891_pos, "value", 'backtrack'=>1)
    .return (rx891_cur)
  rx891_restart2378:
    repr_get_attr_obj rx891_cstack, rx891_cur, rx891_curclass, "$!cstack"
  rx891_fail2379:
    unless rx891_bstack, rx891_done2377
    pop $I19, rx891_bstack
    if_null rx891_cstack, rx891_cstack_done2382
    unless rx891_cstack, rx891_cstack_done2382
    dec $I19
    set $P11, rx891_cstack[$I19]
  rx891_cstack_done2382:
    pop rx891_rep, rx891_bstack
    pop rx891_pos, rx891_bstack
    pop $I19, rx891_bstack
    lt rx891_pos, -1, rx891_done2377
    lt rx891_pos, 0, rx891_fail2379
    eq $I19, 0, rx891_fail2379
    nqp_islist $I20, rx891_cstack
    unless $I20, rx891_jump2380
    elements $I18, rx891_bstack
    le $I18, 0, rx891_cut2381
    dec $I18
    set $I18, rx891_bstack[$I18]
  rx891_cut2381:
    assign rx891_cstack, $I18
  rx891_jump2380:
    jump $I19
  rx891_done2377:
    rx891_cur."!cursor_fail"()
    .return (rx891_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346277629.325_caps" :subid("cuid_memo_233_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote"], $P5002
    box $P5003, 0
    set $P5001["number"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346277629.325_nfa" :subid("cuid_memo_234_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "quote"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "number"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346277629.325_alt_nfa__37_1346277633.864" :subid("cuid_memo_235_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "quote"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_149_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1177
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx896_tgt
    .local int rx896_pos
    .local int rx896_off
    .local int rx896_eos
    .local int rx896_rep
    .local pmc rx896_cur
    .local pmc rx896_curclass
    .local pmc rx896_bstack
    .local pmc rx896_cstack
    (rx896_cur, rx896_tgt, rx896_pos, rx896_curclass, rx896_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx896_cur
    length rx896_eos, rx896_tgt
    eq $I19, 1, rx896_restart2393
    gt rx896_pos, rx896_eos, rx896_fail2394
    repr_get_attr_int $I11, self, rx896_curclass, "$!from"
    ne $I11, -1, rxscan897_done2400
    goto rxscan897_scan2399
  rxscan897_loop2398:
    inc rx896_pos
    gt rx896_pos, rx896_eos, rx896_fail2394
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!from", rx896_pos
  rxscan897_scan2399:
    nqp_rxmark rx896_bstack, rxscan897_loop2398, rx896_pos, 0
  rxscan897_done2400:
    nqp_rxmark rx896_bstack, rxcap898_fail2402, rx896_pos, 0
    nqp_rxmark rx896_bstack, rxquantr899_done2404, rx896_pos, 0
  rxquantr899_loop2403:
  alt900_02406:
    nqp_rxmark rx896_bstack, alt900_12407, rx896_pos, 0
    add $I11, rx896_pos, 1
    gt $I11, rx896_eos, rx896_fail2394
    substr $S10, rx896_tgt, rx896_pos, 1
    ne $S10, ucs4:"-", rx896_fail2394
    add rx896_pos, 1
    goto alt900_end2405
  alt900_12407:
    ge rx896_pos, rx896_eos, rx896_fail2394
    substr $S11, rx896_tgt, rx896_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx896_fail2394
    inc rx896_pos
  alt900_end2405:
    nqp_rxpeek $I19, rx896_bstack, rxquantr899_done2404
    inc $I19
    inc $I19
    set rx896_rep, rx896_bstack[$I19]
    nqp_rxcommit rx896_bstack, rxquantr899_done2404
    inc rx896_rep
  rxquantr899_done2404:
    nqp_rxpeek $I19, rx896_bstack, rxcap898_fail2402
    inc $I19
    set $I11, rx896_bstack[$I19]
    $P11 = rx896_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx896_pos)
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "sign")
    goto rxcap898_done2401
  rxcap898_fail2402:
    goto rx896_fail2394
  rxcap898_done2401:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt901_02409
    nqp_push_label $P11, alt901_12411
    nqp_rxmark rx896_bstack, alt901_end2408, -1, 0
    rx896_cur."!alt"(rx896_pos, "alt_nfa__38_1346277633.881", $P11)
    goto rx896_fail2394
  alt901_02409:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2394
    nqp_rxmark rx896_bstack, rxsubrule902_pass2410, -1, 0
  rxsubrule902_pass2410:
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
    goto alt901_end2408
  alt901_12411:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."integer"()
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2394
    nqp_rxmark rx896_bstack, rxsubrule903_pass2412, -1, 0
  rxsubrule903_pass2412:
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
    goto alt901_end2408
  alt901_end2408:
    nqp_rxcommit rx896_bstack, alt901_end2408
    rx896_cur."!cursor_pass"(rx896_pos, "number", 'backtrack'=>1)
    .return (rx896_cur)
  rx896_restart2393:
    repr_get_attr_obj rx896_cstack, rx896_cur, rx896_curclass, "$!cstack"
  rx896_fail2394:
    unless rx896_bstack, rx896_done2392
    pop $I19, rx896_bstack
    if_null rx896_cstack, rx896_cstack_done2397
    unless rx896_cstack, rx896_cstack_done2397
    dec $I19
    set $P11, rx896_cstack[$I19]
  rx896_cstack_done2397:
    pop rx896_rep, rx896_bstack
    pop rx896_pos, rx896_bstack
    pop $I19, rx896_bstack
    lt rx896_pos, -1, rx896_done2392
    lt rx896_pos, 0, rx896_fail2394
    eq $I19, 0, rx896_fail2394
    nqp_islist $I20, rx896_cstack
    unless $I20, rx896_jump2395
    elements $I18, rx896_bstack
    le $I18, 0, rx896_cut2396
    dec $I18
    set $I18, rx896_bstack[$I18]
  rx896_cut2396:
    assign rx896_cstack, $I18
  rx896_jump2395:
    jump $I19
  rx896_done2392:
    rx896_cur."!cursor_fail"()
    .return (rx896_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346277629.325_caps" :subid("cuid_memo_236_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sign"], $P5002
    box $P5003, 0
    set $P5001["dec_number"], $P5003
    box $P5004, 0
    set $P5001["integer"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346277629.325_nfa" :subid("cuid_memo_237_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "dec_number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 8
    push $P5010, $P5014
    box $P5015, "integer"
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346277629.325_alt_nfa__38_1346277633.881" :subid("cuid_memo_238_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "dec_number"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "integer"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_150_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_151_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1183
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx904_tgt
    .local int rx904_pos
    .local int rx904_off
    .local int rx904_eos
    .local int rx904_rep
    .local pmc rx904_cur
    .local pmc rx904_curclass
    .local pmc rx904_bstack
    .local pmc rx904_cstack
    (rx904_cur, rx904_tgt, rx904_pos, rx904_curclass, rx904_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx904_cur
    length rx904_eos, rx904_tgt
    eq $I19, 1, rx904_restart2415
    gt rx904_pos, rx904_eos, rx904_fail2416
    repr_get_attr_int $I11, self, rx904_curclass, "$!from"
    ne $I11, -1, rxscan905_done2422
    goto rxscan905_scan2421
  rxscan905_loop2420:
    inc rx904_pos
    gt rx904_pos, rx904_eos, rx904_fail2416
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!from", rx904_pos
  rxscan905_scan2421:
    nqp_rxmark rx904_bstack, rxscan905_loop2420, rx904_pos, 0
  rxscan905_done2422:
    ge rx904_pos, rx904_eos, rx904_fail2416
    substr $S11, rx904_tgt, rx904_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx904_fail2416
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!pos", rx904_pos
    $P11 = rx904_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx904_curclass, "$!pos"
    lt $I11, 0, rx904_fail2416
    nqp_rxmark rx904_bstack, rxsubrule906_pass2423, -1, 0
  rxsubrule906_pass2423:
    rx904_cstack = rx904_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx904_pos, $P11, rx904_curclass, "$!pos"
    rx904_cur."!cursor_pass"(rx904_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx904_cur)
  rx904_restart2415:
    repr_get_attr_obj rx904_cstack, rx904_cur, rx904_curclass, "$!cstack"
  rx904_fail2416:
    unless rx904_bstack, rx904_done2414
    pop $I19, rx904_bstack
    if_null rx904_cstack, rx904_cstack_done2419
    unless rx904_cstack, rx904_cstack_done2419
    dec $I19
    set $P11, rx904_cstack[$I19]
  rx904_cstack_done2419:
    pop rx904_rep, rx904_bstack
    pop rx904_pos, rx904_bstack
    pop $I19, rx904_bstack
    lt rx904_pos, -1, rx904_done2414
    lt rx904_pos, 0, rx904_fail2416
    eq $I19, 0, rx904_fail2416
    nqp_islist $I20, rx904_cstack
    unless $I20, rx904_jump2417
    elements $I18, rx904_bstack
    le $I18, 0, rx904_cut2418
    dec $I18
    set $I18, rx904_bstack[$I18]
  rx904_cut2418:
    assign rx904_cstack, $I18
  rx904_jump2417:
    jump $I19
  rx904_done2414:
    rx904_cur."!cursor_fail"()
    .return (rx904_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1346277629.325_caps" :subid("cuid_memo_239_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1346277629.325_nfa" :subid("cuid_memo_240_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "'"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_152_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1184
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx907_tgt
    .local int rx907_pos
    .local int rx907_off
    .local int rx907_eos
    .local int rx907_rep
    .local pmc rx907_cur
    .local pmc rx907_curclass
    .local pmc rx907_bstack
    .local pmc rx907_cstack
    (rx907_cur, rx907_tgt, rx907_pos, rx907_curclass, rx907_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx907_cur
    length rx907_eos, rx907_tgt
    eq $I19, 1, rx907_restart2426
    gt rx907_pos, rx907_eos, rx907_fail2427
    repr_get_attr_int $I11, self, rx907_curclass, "$!from"
    ne $I11, -1, rxscan908_done2433
    goto rxscan908_scan2432
  rxscan908_loop2431:
    inc rx907_pos
    gt rx907_pos, rx907_eos, rx907_fail2427
    repr_bind_attr_int rx907_cur, rx907_curclass, "$!from", rx907_pos
  rxscan908_scan2432:
    nqp_rxmark rx907_bstack, rxscan908_loop2431, rx907_pos, 0
  rxscan908_done2433:
    ge rx907_pos, rx907_eos, rx907_fail2427
    substr $S11, rx907_tgt, rx907_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx907_fail2427
    repr_bind_attr_int rx907_cur, rx907_curclass, "$!pos", rx907_pos
    $P11 = rx907_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx907_curclass, "$!pos"
    lt $I11, 0, rx907_fail2427
    nqp_rxmark rx907_bstack, rxsubrule909_pass2434, -1, 0
  rxsubrule909_pass2434:
    rx907_cstack = rx907_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx907_pos, $P11, rx907_curclass, "$!pos"
    rx907_cur."!cursor_pass"(rx907_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx907_cur)
  rx907_restart2426:
    repr_get_attr_obj rx907_cstack, rx907_cur, rx907_curclass, "$!cstack"
  rx907_fail2427:
    unless rx907_bstack, rx907_done2425
    pop $I19, rx907_bstack
    if_null rx907_cstack, rx907_cstack_done2430
    unless rx907_cstack, rx907_cstack_done2430
    dec $I19
    set $P11, rx907_cstack[$I19]
  rx907_cstack_done2430:
    pop rx907_rep, rx907_bstack
    pop rx907_pos, rx907_bstack
    pop $I19, rx907_bstack
    lt rx907_pos, -1, rx907_done2425
    lt rx907_pos, 0, rx907_fail2427
    eq $I19, 0, rx907_fail2427
    nqp_islist $I20, rx907_cstack
    unless $I20, rx907_jump2428
    elements $I18, rx907_bstack
    le $I18, 0, rx907_cut2429
    dec $I18
    set $I18, rx907_bstack[$I18]
  rx907_cut2429:
    assign rx907_cstack, $I18
  rx907_jump2428:
    jump $I19
  rx907_done2425:
    rx907_cur."!cursor_fail"()
    .return (rx907_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1346277629.325_caps" :subid("cuid_memo_241_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1346277629.325_nfa" :subid("cuid_memo_242_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "\""
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_153_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1185
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx910_tgt
    .local int rx910_pos
    .local int rx910_off
    .local int rx910_eos
    .local int rx910_rep
    .local pmc rx910_cur
    .local pmc rx910_curclass
    .local pmc rx910_bstack
    .local pmc rx910_cstack
    (rx910_cur, rx910_tgt, rx910_pos, rx910_curclass, rx910_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx910_cur
    length rx910_eos, rx910_tgt
    eq $I19, 1, rx910_restart2437
    gt rx910_pos, rx910_eos, rx910_fail2438
    repr_get_attr_int $I11, self, rx910_curclass, "$!from"
    ne $I11, -1, rxscan911_done2444
    goto rxscan911_scan2443
  rxscan911_loop2442:
    inc rx910_pos
    gt rx910_pos, rx910_eos, rx910_fail2438
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!from", rx910_pos
  rxscan911_scan2443:
    nqp_rxmark rx910_bstack, rxscan911_loop2442, rx910_pos, 0
  rxscan911_done2444:
    nqp_rxmark rx910_bstack, rxcap912_fail2446, rx910_pos, 0
    add $I11, rx910_pos, 1
    gt $I11, rx910_eos, rx910_fail2438
    substr $S10, rx910_tgt, rx910_pos, 1
    ne $S10, ucs4:"q", rx910_fail2438
    add rx910_pos, 1
    nqp_rxpeek $I19, rx910_bstack, rxcap912_fail2446
    inc $I19
    set $I11, rx910_bstack[$I19]
    $P11 = rx910_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx910_pos)
    rx910_cstack = rx910_cur."!cursor_capture"($P11, "sym")
    goto rxcap912_done2445
  rxcap912_fail2446:
    goto rx910_fail2438
  rxcap912_done2445:
    le rx910_pos, 0, rx910_fail2438
    is_cclass $I11, .CCLASS_WORD, rx910_tgt, rx910_pos
    if $I11, rx910_fail2438
    sub $I11, rx910_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx910_tgt, $I11
    unless $I11, rx910_fail2438
    ge rx910_pos, rx910_eos, rx910_fail2438
    substr $S11, rx910_tgt, rx910_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx910_fail2438
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!pos", rx910_pos
    $P11 = rx910_cur."ws"()
    repr_get_attr_int $I11, $P11, rx910_curclass, "$!pos"
    lt $I11, 0, rx910_fail2438
    repr_get_attr_int rx910_pos, $P11, rx910_curclass, "$!pos"
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!pos", rx910_pos
    $P11 = rx910_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx910_curclass, "$!pos"
    lt $I11, 0, rx910_fail2438
    nqp_rxmark rx910_bstack, rxsubrule915_pass2449, -1, 0
  rxsubrule915_pass2449:
    rx910_cstack = rx910_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx910_pos, $P11, rx910_curclass, "$!pos"
    rx910_cur."!cursor_pass"(rx910_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx910_cur)
  rx910_restart2437:
    repr_get_attr_obj rx910_cstack, rx910_cur, rx910_curclass, "$!cstack"
  rx910_fail2438:
    unless rx910_bstack, rx910_done2436
    pop $I19, rx910_bstack
    if_null rx910_cstack, rx910_cstack_done2441
    unless rx910_cstack, rx910_cstack_done2441
    dec $I19
    set $P11, rx910_cstack[$I19]
  rx910_cstack_done2441:
    pop rx910_rep, rx910_bstack
    pop rx910_pos, rx910_bstack
    pop $I19, rx910_bstack
    lt rx910_pos, -1, rx910_done2436
    lt rx910_pos, 0, rx910_fail2438
    eq $I19, 0, rx910_fail2438
    nqp_islist $I20, rx910_cstack
    unless $I20, rx910_jump2439
    elements $I18, rx910_bstack
    le $I18, 0, rx910_cut2440
    dec $I18
    set $I18, rx910_bstack[$I18]
  rx910_cut2440:
    assign rx910_cstack, $I18
  rx910_jump2439:
    jump $I19
  rx910_done2436:
    rx910_cur."!cursor_fail"()
    .return (rx910_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1346277629.325_caps" :subid("cuid_memo_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1346277629.325_nfa" :subid("cuid_memo_244_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_154_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx916_tgt
    .local int rx916_pos
    .local int rx916_off
    .local int rx916_eos
    .local int rx916_rep
    .local pmc rx916_cur
    .local pmc rx916_curclass
    .local pmc rx916_bstack
    .local pmc rx916_cstack
    (rx916_cur, rx916_tgt, rx916_pos, rx916_curclass, rx916_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx916_cur
    length rx916_eos, rx916_tgt
    eq $I19, 1, rx916_restart2452
    gt rx916_pos, rx916_eos, rx916_fail2453
    repr_get_attr_int $I11, self, rx916_curclass, "$!from"
    ne $I11, -1, rxscan917_done2459
    goto rxscan917_scan2458
  rxscan917_loop2457:
    inc rx916_pos
    gt rx916_pos, rx916_eos, rx916_fail2453
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!from", rx916_pos
  rxscan917_scan2458:
    nqp_rxmark rx916_bstack, rxscan917_loop2457, rx916_pos, 0
  rxscan917_done2459:
    nqp_rxmark rx916_bstack, rxcap918_fail2461, rx916_pos, 0
    add $I11, rx916_pos, 2
    gt $I11, rx916_eos, rx916_fail2453
    substr $S10, rx916_tgt, rx916_pos, 2
    ne $S10, ucs4:"qq", rx916_fail2453
    add rx916_pos, 2
    nqp_rxpeek $I19, rx916_bstack, rxcap918_fail2461
    inc $I19
    set $I11, rx916_bstack[$I19]
    $P11 = rx916_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx916_pos)
    rx916_cstack = rx916_cur."!cursor_capture"($P11, "sym")
    goto rxcap918_done2460
  rxcap918_fail2461:
    goto rx916_fail2453
  rxcap918_done2460:
    le rx916_pos, 0, rx916_fail2453
    is_cclass $I11, .CCLASS_WORD, rx916_tgt, rx916_pos
    if $I11, rx916_fail2453
    sub $I11, rx916_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx916_tgt, $I11
    unless $I11, rx916_fail2453
    ge rx916_pos, rx916_eos, rx916_fail2453
    substr $S11, rx916_tgt, rx916_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx916_fail2453
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!pos", rx916_pos
    $P11 = rx916_cur."ws"()
    repr_get_attr_int $I11, $P11, rx916_curclass, "$!pos"
    lt $I11, 0, rx916_fail2453
    repr_get_attr_int rx916_pos, $P11, rx916_curclass, "$!pos"
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!pos", rx916_pos
    $P11 = rx916_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx916_curclass, "$!pos"
    lt $I11, 0, rx916_fail2453
    nqp_rxmark rx916_bstack, rxsubrule921_pass2464, -1, 0
  rxsubrule921_pass2464:
    rx916_cstack = rx916_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx916_pos, $P11, rx916_curclass, "$!pos"
    rx916_cur."!cursor_pass"(rx916_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx916_cur)
  rx916_restart2452:
    repr_get_attr_obj rx916_cstack, rx916_cur, rx916_curclass, "$!cstack"
  rx916_fail2453:
    unless rx916_bstack, rx916_done2451
    pop $I19, rx916_bstack
    if_null rx916_cstack, rx916_cstack_done2456
    unless rx916_cstack, rx916_cstack_done2456
    dec $I19
    set $P11, rx916_cstack[$I19]
  rx916_cstack_done2456:
    pop rx916_rep, rx916_bstack
    pop rx916_pos, rx916_bstack
    pop $I19, rx916_bstack
    lt rx916_pos, -1, rx916_done2451
    lt rx916_pos, 0, rx916_fail2453
    eq $I19, 0, rx916_fail2453
    nqp_islist $I20, rx916_cstack
    unless $I20, rx916_jump2454
    elements $I18, rx916_bstack
    le $I18, 0, rx916_cut2455
    dec $I18
    set $I18, rx916_bstack[$I18]
  rx916_cut2455:
    assign rx916_cstack, $I18
  rx916_jump2454:
    jump $I19
  rx916_done2451:
    rx916_cur."!cursor_fail"()
    .return (rx916_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1346277629.325_caps" :subid("cuid_memo_245_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1346277629.325_nfa" :subid("cuid_memo_246_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 7
    push $P5015, $P5016
    box $P5017, "("
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_155_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx922_tgt
    .local int rx922_pos
    .local int rx922_off
    .local int rx922_eos
    .local int rx922_rep
    .local pmc rx922_cur
    .local pmc rx922_curclass
    .local pmc rx922_bstack
    .local pmc rx922_cstack
    (rx922_cur, rx922_tgt, rx922_pos, rx922_curclass, rx922_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx922_cur
    length rx922_eos, rx922_tgt
    eq $I19, 1, rx922_restart2467
    gt rx922_pos, rx922_eos, rx922_fail2468
    repr_get_attr_int $I11, self, rx922_curclass, "$!from"
    ne $I11, -1, rxscan923_done2474
    goto rxscan923_scan2473
  rxscan923_loop2472:
    inc rx922_pos
    gt rx922_pos, rx922_eos, rx922_fail2468
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!from", rx922_pos
  rxscan923_scan2473:
    nqp_rxmark rx922_bstack, rxscan923_loop2472, rx922_pos, 0
  rxscan923_done2474:
    nqp_rxmark rx922_bstack, rxcap924_fail2476, rx922_pos, 0
    add $I11, rx922_pos, 1
    gt $I11, rx922_eos, rx922_fail2468
    substr $S10, rx922_tgt, rx922_pos, 1
    ne $S10, ucs4:"Q", rx922_fail2468
    add rx922_pos, 1
    nqp_rxpeek $I19, rx922_bstack, rxcap924_fail2476
    inc $I19
    set $I11, rx922_bstack[$I19]
    $P11 = rx922_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx922_pos)
    rx922_cstack = rx922_cur."!cursor_capture"($P11, "sym")
    goto rxcap924_done2475
  rxcap924_fail2476:
    goto rx922_fail2468
  rxcap924_done2475:
    le rx922_pos, 0, rx922_fail2468
    is_cclass $I11, .CCLASS_WORD, rx922_tgt, rx922_pos
    if $I11, rx922_fail2468
    sub $I11, rx922_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx922_tgt, $I11
    unless $I11, rx922_fail2468
    ge rx922_pos, rx922_eos, rx922_fail2468
    substr $S11, rx922_tgt, rx922_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx922_fail2468
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!pos", rx922_pos
    $P11 = rx922_cur."ws"()
    repr_get_attr_int $I11, $P11, rx922_curclass, "$!pos"
    lt $I11, 0, rx922_fail2468
    repr_get_attr_int rx922_pos, $P11, rx922_curclass, "$!pos"
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!pos", rx922_pos
    $P11 = rx922_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx922_curclass, "$!pos"
    lt $I11, 0, rx922_fail2468
    nqp_rxmark rx922_bstack, rxsubrule927_pass2479, -1, 0
  rxsubrule927_pass2479:
    rx922_cstack = rx922_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx922_pos, $P11, rx922_curclass, "$!pos"
    rx922_cur."!cursor_pass"(rx922_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx922_cur)
  rx922_restart2467:
    repr_get_attr_obj rx922_cstack, rx922_cur, rx922_curclass, "$!cstack"
  rx922_fail2468:
    unless rx922_bstack, rx922_done2466
    pop $I19, rx922_bstack
    if_null rx922_cstack, rx922_cstack_done2471
    unless rx922_cstack, rx922_cstack_done2471
    dec $I19
    set $P11, rx922_cstack[$I19]
  rx922_cstack_done2471:
    pop rx922_rep, rx922_bstack
    pop rx922_pos, rx922_bstack
    pop $I19, rx922_bstack
    lt rx922_pos, -1, rx922_done2466
    lt rx922_pos, 0, rx922_fail2468
    eq $I19, 0, rx922_fail2468
    nqp_islist $I20, rx922_cstack
    unless $I20, rx922_jump2469
    elements $I18, rx922_bstack
    le $I18, 0, rx922_cut2470
    dec $I18
    set $I18, rx922_bstack[$I18]
  rx922_cut2470:
    assign rx922_cstack, $I18
  rx922_jump2469:
    jump $I19
  rx922_done2466:
    rx922_cur."!cursor_fail"()
    .return (rx922_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1346277629.325_caps" :subid("cuid_memo_247_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1346277629.325_nfa" :subid("cuid_memo_248_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_156_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx928_tgt
    .local int rx928_pos
    .local int rx928_off
    .local int rx928_eos
    .local int rx928_rep
    .local pmc rx928_cur
    .local pmc rx928_curclass
    .local pmc rx928_bstack
    .local pmc rx928_cstack
    (rx928_cur, rx928_tgt, rx928_pos, rx928_curclass, rx928_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx928_cur
    length rx928_eos, rx928_tgt
    eq $I19, 1, rx928_restart2482
    gt rx928_pos, rx928_eos, rx928_fail2483
    repr_get_attr_int $I11, self, rx928_curclass, "$!from"
    ne $I11, -1, rxscan929_done2489
    goto rxscan929_scan2488
  rxscan929_loop2487:
    inc rx928_pos
    gt rx928_pos, rx928_eos, rx928_fail2483
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!from", rx928_pos
  rxscan929_scan2488:
    nqp_rxmark rx928_bstack, rxscan929_loop2487, rx928_pos, 0
  rxscan929_done2489:
    nqp_rxmark rx928_bstack, rxcap930_fail2491, rx928_pos, 0
    add $I11, rx928_pos, 5
    gt $I11, rx928_eos, rx928_fail2483
    substr $S10, rx928_tgt, rx928_pos, 5
    ne $S10, ucs4:"Q:PIR", rx928_fail2483
    add rx928_pos, 5
    nqp_rxpeek $I19, rx928_bstack, rxcap930_fail2491
    inc $I19
    set $I11, rx928_bstack[$I19]
    $P11 = rx928_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx928_pos)
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "sym")
    goto rxcap930_done2490
  rxcap930_fail2491:
    goto rx928_fail2483
  rxcap930_done2490:
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!pos", rx928_pos
    $P11 = rx928_cur."ws"()
    repr_get_attr_int $I11, $P11, rx928_curclass, "$!pos"
    lt $I11, 0, rx928_fail2483
    repr_get_attr_int rx928_pos, $P11, rx928_curclass, "$!pos"
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!pos", rx928_pos
    $P11 = rx928_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx928_curclass, "$!pos"
    lt $I11, 0, rx928_fail2483
    nqp_rxmark rx928_bstack, rxsubrule932_pass2493, -1, 0
  rxsubrule932_pass2493:
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx928_pos, $P11, rx928_curclass, "$!pos"
    rx928_cur."!cursor_pass"(rx928_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx928_cur)
  rx928_restart2482:
    repr_get_attr_obj rx928_cstack, rx928_cur, rx928_curclass, "$!cstack"
  rx928_fail2483:
    unless rx928_bstack, rx928_done2481
    pop $I19, rx928_bstack
    if_null rx928_cstack, rx928_cstack_done2486
    unless rx928_cstack, rx928_cstack_done2486
    dec $I19
    set $P11, rx928_cstack[$I19]
  rx928_cstack_done2486:
    pop rx928_rep, rx928_bstack
    pop rx928_pos, rx928_bstack
    pop $I19, rx928_bstack
    lt rx928_pos, -1, rx928_done2481
    lt rx928_pos, 0, rx928_fail2483
    eq $I19, 0, rx928_fail2483
    nqp_islist $I20, rx928_cstack
    unless $I20, rx928_jump2484
    elements $I18, rx928_bstack
    le $I18, 0, rx928_cut2485
    dec $I18
    set $I18, rx928_bstack[$I18]
  rx928_cut2485:
    assign rx928_cstack, $I18
  rx928_jump2484:
    jump $I19
  rx928_done2481:
    rx928_cur."!cursor_fail"()
    .return (rx928_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1346277629.325_caps" :subid("cuid_memo_249_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1346277629.325_nfa" :subid("cuid_memo_250_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 80
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "quote_EXPR"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_157_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1189
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx933_tgt
    .local int rx933_pos
    .local int rx933_off
    .local int rx933_eos
    .local int rx933_rep
    .local pmc rx933_cur
    .local pmc rx933_curclass
    .local pmc rx933_bstack
    .local pmc rx933_cstack
    (rx933_cur, rx933_tgt, rx933_pos, rx933_curclass, rx933_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx933_cur
    length rx933_eos, rx933_tgt
    eq $I19, 1, rx933_restart2496
    gt rx933_pos, rx933_eos, rx933_fail2497
    repr_get_attr_int $I11, self, rx933_curclass, "$!from"
    ne $I11, -1, rxscan934_done2503
    goto rxscan934_scan2502
  rxscan934_loop2501:
    inc rx933_pos
    gt rx933_pos, rx933_eos, rx933_fail2497
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!from", rx933_pos
  rxscan934_scan2502:
    nqp_rxmark rx933_bstack, rxscan934_loop2501, rx933_pos, 0
  rxscan934_done2503:
    add $I11, rx933_pos, 1
    gt $I11, rx933_eos, rx933_fail2497
    substr $S10, rx933_tgt, rx933_pos, 1
    ne $S10, ucs4:"/", rx933_fail2497
    add rx933_pos, 1
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    $P11 = rx933_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx933_curclass, "$!pos"
    lt $I11, 0, rx933_fail2497
    repr_get_attr_int rx933_pos, $P11, rx933_curclass, "$!pos"
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    store_lex unicode:"$\x{a2}", rx933_cur
    unless_null $P101, fallback2505
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2506
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2506:
    unless_null $P5002, vivi_9362507
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9362507:
    set $P101, $P5002
  fallback2505:
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    $P11 = rx933_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx933_curclass, "$!pos"
    lt $I11, 0, rx933_fail2497
    nqp_rxmark rx933_bstack, rxsubrule937_pass2508, -1, 0
  rxsubrule937_pass2508:
    rx933_cstack = rx933_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx933_pos, $P11, rx933_curclass, "$!pos"
    add $I11, rx933_pos, 1
    gt $I11, rx933_eos, rx933_fail2497
    substr $S10, rx933_tgt, rx933_pos, 1
    ne $S10, ucs4:"/", rx933_fail2497
    add rx933_pos, 1
    rx933_cur."!cursor_pass"(rx933_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx933_cur)
  rx933_restart2496:
    repr_get_attr_obj rx933_cstack, rx933_cur, rx933_curclass, "$!cstack"
  rx933_fail2497:
    unless rx933_bstack, rx933_done2495
    pop $I19, rx933_bstack
    if_null rx933_cstack, rx933_cstack_done2500
    unless rx933_cstack, rx933_cstack_done2500
    dec $I19
    set $P11, rx933_cstack[$I19]
  rx933_cstack_done2500:
    pop rx933_rep, rx933_bstack
    pop rx933_pos, rx933_bstack
    pop $I19, rx933_bstack
    lt rx933_pos, -1, rx933_done2495
    lt rx933_pos, 0, rx933_fail2497
    eq $I19, 0, rx933_fail2497
    nqp_islist $I20, rx933_cstack
    unless $I20, rx933_jump2498
    elements $I18, rx933_bstack
    le $I18, 0, rx933_cut2499
    dec $I18
    set $I18, rx933_bstack[$I18]
  rx933_cut2499:
    assign rx933_cstack, $I18
  rx933_jump2498:
    jump $I19
  rx933_done2495:
    rx933_cur."!cursor_fail"()
    .return (rx933_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1346277629.325_caps" :subid("cuid_memo_251_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["p6regex"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1346277629.325_nfa" :subid("cuid_memo_252_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "newpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "LANG"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 47
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_158_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx938_tgt
    .local int rx938_pos
    .local int rx938_off
    .local int rx938_eos
    .local int rx938_rep
    .local pmc rx938_cur
    .local pmc rx938_curclass
    .local pmc rx938_bstack
    .local pmc rx938_cstack
    (rx938_cur, rx938_tgt, rx938_pos, rx938_curclass, rx938_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx938_cur
    length rx938_eos, rx938_tgt
    eq $I19, 1, rx938_restart2511
    gt rx938_pos, rx938_eos, rx938_fail2512
    repr_get_attr_int $I11, self, rx938_curclass, "$!from"
    ne $I11, -1, rxscan939_done2518
    goto rxscan939_scan2517
  rxscan939_loop2516:
    inc rx938_pos
    gt rx938_pos, rx938_eos, rx938_fail2512
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!from", rx938_pos
  rxscan939_scan2517:
    nqp_rxmark rx938_bstack, rxscan939_loop2516, rx938_pos, 0
  rxscan939_done2518:
    ge rx938_pos, rx938_eos, rx938_fail2512
    substr $S11, rx938_tgt, rx938_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx938_fail2512
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2512
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."variable"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2512
    nqp_rxmark rx938_bstack, rxsubrule940_pass2519, -1, 0
  rxsubrule940_pass2519:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    rx938_cur."!cursor_pass"(rx938_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx938_cur)
  rx938_restart2511:
    repr_get_attr_obj rx938_cstack, rx938_cur, rx938_curclass, "$!cstack"
  rx938_fail2512:
    unless rx938_bstack, rx938_done2510
    pop $I19, rx938_bstack
    if_null rx938_cstack, rx938_cstack_done2515
    unless rx938_cstack, rx938_cstack_done2515
    dec $I19
    set $P11, rx938_cstack[$I19]
  rx938_cstack_done2515:
    pop rx938_rep, rx938_bstack
    pop rx938_pos, rx938_bstack
    pop $I19, rx938_bstack
    lt rx938_pos, -1, rx938_done2510
    lt rx938_pos, 0, rx938_fail2512
    eq $I19, 0, rx938_fail2512
    nqp_islist $I20, rx938_cstack
    unless $I20, rx938_jump2513
    elements $I18, rx938_bstack
    le $I18, 0, rx938_cut2514
    dec $I18
    set $I18, rx938_bstack[$I18]
  rx938_cut2514:
    assign rx938_cstack, $I18
  rx938_jump2513:
    jump $I19
  rx938_done2510:
    rx938_cur."!cursor_fail"()
    .return (rx938_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1346277629.325_caps" :subid("cuid_memo_253_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1346277629.325_nfa" :subid("cuid_memo_254_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_159_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx941_tgt
    .local int rx941_pos
    .local int rx941_off
    .local int rx941_eos
    .local int rx941_rep
    .local pmc rx941_cur
    .local pmc rx941_curclass
    .local pmc rx941_bstack
    .local pmc rx941_cstack
    (rx941_cur, rx941_tgt, rx941_pos, rx941_curclass, rx941_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx941_cur
    length rx941_eos, rx941_tgt
    eq $I19, 1, rx941_restart2522
    gt rx941_pos, rx941_eos, rx941_fail2523
    repr_get_attr_int $I11, self, rx941_curclass, "$!from"
    ne $I11, -1, rxscan942_done2529
    goto rxscan942_scan2528
  rxscan942_loop2527:
    inc rx941_pos
    gt rx941_pos, rx941_eos, rx941_fail2523
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!from", rx941_pos
  rxscan942_scan2528:
    nqp_rxmark rx941_bstack, rxscan942_loop2527, rx941_pos, 0
  rxscan942_done2529:
    ge rx941_pos, rx941_eos, rx941_fail2523
    substr $S11, rx941_tgt, rx941_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx941_fail2523
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2523
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."block"()
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2523
    nqp_rxmark rx941_bstack, rxsubrule943_pass2530, -1, 0
  rxsubrule943_pass2530:
    rx941_cstack = rx941_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx941_pos, $P11, rx941_curclass, "$!pos"
    rx941_cur."!cursor_pass"(rx941_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx941_cur)
  rx941_restart2522:
    repr_get_attr_obj rx941_cstack, rx941_cur, rx941_curclass, "$!cstack"
  rx941_fail2523:
    unless rx941_bstack, rx941_done2521
    pop $I19, rx941_bstack
    if_null rx941_cstack, rx941_cstack_done2526
    unless rx941_cstack, rx941_cstack_done2526
    dec $I19
    set $P11, rx941_cstack[$I19]
  rx941_cstack_done2526:
    pop rx941_rep, rx941_bstack
    pop rx941_pos, rx941_bstack
    pop $I19, rx941_bstack
    lt rx941_pos, -1, rx941_done2521
    lt rx941_pos, 0, rx941_fail2523
    eq $I19, 0, rx941_fail2523
    nqp_islist $I20, rx941_cstack
    unless $I20, rx941_jump2524
    elements $I18, rx941_bstack
    le $I18, 0, rx941_cut2525
    dec $I18
    set $I18, rx941_bstack[$I18]
  rx941_cut2525:
    assign rx941_cstack, $I18
  rx941_jump2524:
    jump $I19
  rx941_done2521:
    rx941_cur."!cursor_fail"()
    .return (rx941_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1346277629.325_caps" :subid("cuid_memo_255_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1346277629.325_nfa" :subid("cuid_memo_256_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_160_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx944_tgt
    .local int rx944_pos
    .local int rx944_off
    .local int rx944_eos
    .local int rx944_rep
    .local pmc rx944_cur
    .local pmc rx944_curclass
    .local pmc rx944_bstack
    .local pmc rx944_cstack
    (rx944_cur, rx944_tgt, rx944_pos, rx944_curclass, rx944_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx944_cur
    length rx944_eos, rx944_tgt
    eq $I19, 1, rx944_restart2533
    gt rx944_pos, rx944_eos, rx944_fail2534
    repr_get_attr_int $I11, self, rx944_curclass, "$!from"
    ne $I11, -1, rxscan945_done2540
    goto rxscan945_scan2539
  rxscan945_loop2538:
    inc rx944_pos
    gt rx944_pos, rx944_eos, rx944_fail2534
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!from", rx944_pos
  rxscan945_scan2539:
    nqp_rxmark rx944_bstack, rxscan945_loop2538, rx944_pos, 0
  rxscan945_done2540:
    add $I11, rx944_pos, 2
    gt $I11, rx944_eos, rx944_fail2534
    substr $S10, rx944_tgt, rx944_pos, 2
    ne $S10, ucs4:"\\e", rx944_fail2534
    add rx944_pos, 2
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2534
    rx944_cur."!cursor_pass"(rx944_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx944_cur)
  rx944_restart2533:
    repr_get_attr_obj rx944_cstack, rx944_cur, rx944_curclass, "$!cstack"
  rx944_fail2534:
    unless rx944_bstack, rx944_done2532
    pop $I19, rx944_bstack
    if_null rx944_cstack, rx944_cstack_done2537
    unless rx944_cstack, rx944_cstack_done2537
    dec $I19
    set $P11, rx944_cstack[$I19]
  rx944_cstack_done2537:
    pop rx944_rep, rx944_bstack
    pop rx944_pos, rx944_bstack
    pop $I19, rx944_bstack
    lt rx944_pos, -1, rx944_done2532
    lt rx944_pos, 0, rx944_fail2534
    eq $I19, 0, rx944_fail2534
    nqp_islist $I20, rx944_cstack
    unless $I20, rx944_jump2535
    elements $I18, rx944_bstack
    le $I18, 0, rx944_cut2536
    dec $I18
    set $I18, rx944_bstack[$I18]
  rx944_cut2536:
    assign rx944_cstack, $I18
  rx944_jump2535:
    jump $I19
  rx944_done2532:
    rx944_cur."!cursor_fail"()
    .return (rx944_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1346277629.325_caps" :subid("cuid_memo_257_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1346277629.325_nfa" :subid("cuid_memo_258_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 92
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "quotemod_check"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_161_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx946_tgt
    .local int rx946_pos
    .local int rx946_off
    .local int rx946_eos
    .local int rx946_rep
    .local pmc rx946_cur
    .local pmc rx946_curclass
    .local pmc rx946_bstack
    .local pmc rx946_cstack
    (rx946_cur, rx946_tgt, rx946_pos, rx946_curclass, rx946_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx946_cur
    length rx946_eos, rx946_tgt
    eq $I19, 1, rx946_restart2543
    gt rx946_pos, rx946_eos, rx946_fail2544
    repr_get_attr_int $I11, self, rx946_curclass, "$!from"
    ne $I11, -1, rxscan947_done2550
    goto rxscan947_scan2549
  rxscan947_loop2548:
    inc rx946_pos
    gt rx946_pos, rx946_eos, rx946_fail2544
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!from", rx946_pos
  rxscan947_scan2549:
    nqp_rxmark rx946_bstack, rxscan947_loop2548, rx946_pos, 0
  rxscan947_done2550:
    add $I11, rx946_pos, 1
    gt $I11, rx946_eos, rx946_fail2544
    substr $S10, rx946_tgt, rx946_pos, 1
    ne $S10, ucs4:"(", rx946_fail2544
    add rx946_pos, 1
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!pos", rx946_pos
    $P11 = rx946_cur."ws"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2544
    repr_get_attr_int rx946_pos, $P11, rx946_curclass, "$!pos"
    nqp_rxmark rx946_bstack, rxquantr949_done2553, rx946_pos, 0
  rxquantr949_loop2552:
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!pos", rx946_pos
    $P11 = rx946_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2544
    goto rxsubrule950_pass2554
  rxsubrule950_back2555:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2544
  rxsubrule950_pass2554:
    rx946_cstack = rx946_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule950_back2555
    push rx946_bstack, $I11
    push rx946_bstack, 0
    push rx946_bstack, rx946_pos
    elements $I11, rx946_cstack
    push rx946_bstack, $I11
    repr_get_attr_int rx946_pos, $P11, rx946_curclass, "$!pos"
    nqp_rxpeek $I19, rx946_bstack, rxquantr949_done2553
    inc $I19
    inc $I19
    set rx946_rep, rx946_bstack[$I19]
    nqp_rxcommit rx946_bstack, rxquantr949_done2553
    inc rx946_rep
  rxquantr949_done2553:
    add $I11, rx946_pos, 1
    gt $I11, rx946_eos, rx946_fail2544
    substr $S10, rx946_tgt, rx946_pos, 1
    ne $S10, ucs4:")", rx946_fail2544
    add rx946_pos, 1
    rx946_cur."!cursor_pass"(rx946_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx946_cur)
  rx946_restart2543:
    repr_get_attr_obj rx946_cstack, rx946_cur, rx946_curclass, "$!cstack"
  rx946_fail2544:
    unless rx946_bstack, rx946_done2542
    pop $I19, rx946_bstack
    if_null rx946_cstack, rx946_cstack_done2547
    unless rx946_cstack, rx946_cstack_done2547
    dec $I19
    set $P11, rx946_cstack[$I19]
  rx946_cstack_done2547:
    pop rx946_rep, rx946_bstack
    pop rx946_pos, rx946_bstack
    pop $I19, rx946_bstack
    lt rx946_pos, -1, rx946_done2542
    lt rx946_pos, 0, rx946_fail2544
    eq $I19, 0, rx946_fail2544
    nqp_islist $I20, rx946_cstack
    unless $I20, rx946_jump2545
    elements $I18, rx946_bstack
    le $I18, 0, rx946_cut2546
    dec $I18
    set $I18, rx946_bstack[$I18]
  rx946_cut2546:
    assign rx946_cstack, $I18
  rx946_jump2545:
    jump $I19
  rx946_done2542:
    rx946_cur."!cursor_fail"()
    .return (rx946_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1346277629.325_caps" :subid("cuid_memo_259_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1346277629.325_nfa" :subid("cuid_memo_260_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 41
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_162_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx951_tgt
    .local int rx951_pos
    .local int rx951_off
    .local int rx951_eos
    .local int rx951_rep
    .local pmc rx951_cur
    .local pmc rx951_curclass
    .local pmc rx951_bstack
    .local pmc rx951_cstack
    (rx951_cur, rx951_tgt, rx951_pos, rx951_curclass, rx951_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx951_cur
    length rx951_eos, rx951_tgt
    eq $I19, 1, rx951_restart2558
    gt rx951_pos, rx951_eos, rx951_fail2559
    repr_get_attr_int $I11, self, rx951_curclass, "$!from"
    ne $I11, -1, rxscan952_done2565
    goto rxscan952_scan2564
  rxscan952_loop2563:
    inc rx951_pos
    gt rx951_pos, rx951_eos, rx951_fail2559
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!from", rx951_pos
  rxscan952_scan2564:
    nqp_rxmark rx951_bstack, rxscan952_loop2563, rx951_pos, 0
  rxscan952_done2565:
    add $I11, rx951_pos, 1
    gt $I11, rx951_eos, rx951_fail2559
    substr $S10, rx951_tgt, rx951_pos, 1
    ne $S10, ucs4:"[", rx951_fail2559
    add rx951_pos, 1
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."ws"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2559
    repr_get_attr_int rx951_pos, $P11, rx951_curclass, "$!pos"
    nqp_rxmark rx951_bstack, rxquantr954_done2568, rx951_pos, 0
  rxquantr954_loop2567:
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2559
    goto rxsubrule955_pass2569
  rxsubrule955_back2570:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2559
  rxsubrule955_pass2569:
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule955_back2570
    push rx951_bstack, $I11
    push rx951_bstack, 0
    push rx951_bstack, rx951_pos
    elements $I11, rx951_cstack
    push rx951_bstack, $I11
    repr_get_attr_int rx951_pos, $P11, rx951_curclass, "$!pos"
    nqp_rxpeek $I19, rx951_bstack, rxquantr954_done2568
    inc $I19
    inc $I19
    set rx951_rep, rx951_bstack[$I19]
    nqp_rxcommit rx951_bstack, rxquantr954_done2568
    inc rx951_rep
  rxquantr954_done2568:
    add $I11, rx951_pos, 1
    gt $I11, rx951_eos, rx951_fail2559
    substr $S10, rx951_tgt, rx951_pos, 1
    ne $S10, ucs4:"]", rx951_fail2559
    add rx951_pos, 1
    rx951_cur."!cursor_pass"(rx951_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx951_cur)
  rx951_restart2558:
    repr_get_attr_obj rx951_cstack, rx951_cur, rx951_curclass, "$!cstack"
  rx951_fail2559:
    unless rx951_bstack, rx951_done2557
    pop $I19, rx951_bstack
    if_null rx951_cstack, rx951_cstack_done2562
    unless rx951_cstack, rx951_cstack_done2562
    dec $I19
    set $P11, rx951_cstack[$I19]
  rx951_cstack_done2562:
    pop rx951_rep, rx951_bstack
    pop rx951_pos, rx951_bstack
    pop $I19, rx951_bstack
    lt rx951_pos, -1, rx951_done2557
    lt rx951_pos, 0, rx951_fail2559
    eq $I19, 0, rx951_fail2559
    nqp_islist $I20, rx951_cstack
    unless $I20, rx951_jump2560
    elements $I18, rx951_bstack
    le $I18, 0, rx951_cut2561
    dec $I18
    set $I18, rx951_bstack[$I18]
  rx951_cut2561:
    assign rx951_cstack, $I18
  rx951_jump2560:
    jump $I19
  rx951_done2557:
    rx951_cur."!cursor_fail"()
    .return (rx951_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1346277629.325_caps" :subid("cuid_memo_261_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1346277629.325_nfa" :subid("cuid_memo_262_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 93
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_163_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx956_tgt
    .local int rx956_pos
    .local int rx956_off
    .local int rx956_eos
    .local int rx956_rep
    .local pmc rx956_cur
    .local pmc rx956_curclass
    .local pmc rx956_bstack
    .local pmc rx956_cstack
    (rx956_cur, rx956_tgt, rx956_pos, rx956_curclass, rx956_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx956_cur
    length rx956_eos, rx956_tgt
    eq $I19, 1, rx956_restart2573
    gt rx956_pos, rx956_eos, rx956_fail2574
    repr_get_attr_int $I11, self, rx956_curclass, "$!from"
    ne $I11, -1, rxscan957_done2580
    goto rxscan957_scan2579
  rxscan957_loop2578:
    inc rx956_pos
    gt rx956_pos, rx956_eos, rx956_fail2574
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!from", rx956_pos
  rxscan957_scan2579:
    nqp_rxmark rx956_bstack, rxscan957_loop2578, rx956_pos, 0
  rxscan957_done2580:
    ge rx956_pos, rx956_eos, rx956_fail2574
    substr $S11, rx956_tgt, rx956_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx956_fail2574
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!pos", rx956_pos
    $P11 = rx956_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx956_curclass, "$!pos"
    lt $I11, 0, rx956_fail2574
    nqp_rxmark rx956_bstack, rxsubrule958_pass2581, -1, 0
  rxsubrule958_pass2581:
    rx956_cstack = rx956_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx956_pos, $P11, rx956_curclass, "$!pos"
    rx956_cur."!cursor_pass"(rx956_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx956_cur)
  rx956_restart2573:
    repr_get_attr_obj rx956_cstack, rx956_cur, rx956_curclass, "$!cstack"
  rx956_fail2574:
    unless rx956_bstack, rx956_done2572
    pop $I19, rx956_bstack
    if_null rx956_cstack, rx956_cstack_done2577
    unless rx956_cstack, rx956_cstack_done2577
    dec $I19
    set $P11, rx956_cstack[$I19]
  rx956_cstack_done2577:
    pop rx956_rep, rx956_bstack
    pop rx956_pos, rx956_bstack
    pop $I19, rx956_bstack
    lt rx956_pos, -1, rx956_done2572
    lt rx956_pos, 0, rx956_fail2574
    eq $I19, 0, rx956_fail2574
    nqp_islist $I20, rx956_cstack
    unless $I20, rx956_jump2575
    elements $I18, rx956_bstack
    le $I18, 0, rx956_cut2576
    dec $I18
    set $I18, rx956_bstack[$I18]
  rx956_cut2576:
    assign rx956_cstack, $I18
  rx956_jump2575:
    jump $I19
  rx956_done2572:
    rx956_cur."!cursor_fail"()
    .return (rx956_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1346277629.325_caps" :subid("cuid_memo_263_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1346277629.325_nfa" :subid("cuid_memo_264_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_164_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx959_tgt
    .local int rx959_pos
    .local int rx959_off
    .local int rx959_eos
    .local int rx959_rep
    .local pmc rx959_cur
    .local pmc rx959_curclass
    .local pmc rx959_bstack
    .local pmc rx959_cstack
    (rx959_cur, rx959_tgt, rx959_pos, rx959_curclass, rx959_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx959_cur
    length rx959_eos, rx959_tgt
    eq $I19, 1, rx959_restart2584
    gt rx959_pos, rx959_eos, rx959_fail2585
    repr_get_attr_int $I11, self, rx959_curclass, "$!from"
    ne $I11, -1, rxscan960_done2591
    goto rxscan960_scan2590
  rxscan960_loop2589:
    inc rx959_pos
    gt rx959_pos, rx959_eos, rx959_fail2585
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!from", rx959_pos
  rxscan960_scan2590:
    nqp_rxmark rx959_bstack, rxscan960_loop2589, rx959_pos, 0
  rxscan960_done2591:
    ge rx959_pos, rx959_eos, rx959_fail2585
    substr $S11, rx959_tgt, rx959_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx959_fail2585
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2585
    nqp_rxmark rx959_bstack, rxsubrule961_pass2592, -1, 0
  rxsubrule961_pass2592:
    rx959_cstack = rx959_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx959_pos, $P11, rx959_curclass, "$!pos"
    rx959_cur."!cursor_pass"(rx959_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx959_cur)
  rx959_restart2584:
    repr_get_attr_obj rx959_cstack, rx959_cur, rx959_curclass, "$!cstack"
  rx959_fail2585:
    unless rx959_bstack, rx959_done2583
    pop $I19, rx959_bstack
    if_null rx959_cstack, rx959_cstack_done2588
    unless rx959_cstack, rx959_cstack_done2588
    dec $I19
    set $P11, rx959_cstack[$I19]
  rx959_cstack_done2588:
    pop rx959_rep, rx959_bstack
    pop rx959_pos, rx959_bstack
    pop $I19, rx959_bstack
    lt rx959_pos, -1, rx959_done2583
    lt rx959_pos, 0, rx959_fail2585
    eq $I19, 0, rx959_fail2585
    nqp_islist $I20, rx959_cstack
    unless $I20, rx959_jump2586
    elements $I18, rx959_bstack
    le $I18, 0, rx959_cut2587
    dec $I18
    set $I18, rx959_bstack[$I18]
  rx959_cut2587:
    assign rx959_cstack, $I18
  rx959_jump2586:
    jump $I19
  rx959_done2583:
    rx959_cur."!cursor_fail"()
    .return (rx959_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1346277629.325_caps" :subid("cuid_memo_265_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1346277629.325_nfa" :subid("cuid_memo_266_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\x{ab}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_165_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx962_tgt
    .local int rx962_pos
    .local int rx962_off
    .local int rx962_eos
    .local int rx962_rep
    .local pmc rx962_cur
    .local pmc rx962_curclass
    .local pmc rx962_bstack
    .local pmc rx962_cstack
    (rx962_cur, rx962_tgt, rx962_pos, rx962_curclass, rx962_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx962_cur
    length rx962_eos, rx962_tgt
    eq $I19, 1, rx962_restart2595
    gt rx962_pos, rx962_eos, rx962_fail2596
    repr_get_attr_int $I11, self, rx962_curclass, "$!from"
    ne $I11, -1, rxscan963_done2602
    goto rxscan963_scan2601
  rxscan963_loop2600:
    inc rx962_pos
    gt rx962_pos, rx962_eos, rx962_fail2596
    repr_bind_attr_int rx962_cur, rx962_curclass, "$!from", rx962_pos
  rxscan963_scan2601:
    nqp_rxmark rx962_bstack, rxscan963_loop2600, rx962_pos, 0
  rxscan963_done2602:
    ge rx962_pos, rx962_eos, rx962_fail2596
    substr $S11, rx962_tgt, rx962_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx962_fail2596
    repr_bind_attr_int rx962_cur, rx962_curclass, "$!pos", rx962_pos
    $P11 = rx962_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx962_curclass, "$!pos"
    lt $I11, 0, rx962_fail2596
    nqp_rxmark rx962_bstack, rxsubrule964_pass2603, -1, 0
  rxsubrule964_pass2603:
    rx962_cstack = rx962_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx962_pos, $P11, rx962_curclass, "$!pos"
    rx962_cur."!cursor_pass"(rx962_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx962_cur)
  rx962_restart2595:
    repr_get_attr_obj rx962_cstack, rx962_cur, rx962_curclass, "$!cstack"
  rx962_fail2596:
    unless rx962_bstack, rx962_done2594
    pop $I19, rx962_bstack
    if_null rx962_cstack, rx962_cstack_done2599
    unless rx962_cstack, rx962_cstack_done2599
    dec $I19
    set $P11, rx962_cstack[$I19]
  rx962_cstack_done2599:
    pop rx962_rep, rx962_bstack
    pop rx962_pos, rx962_bstack
    pop $I19, rx962_bstack
    lt rx962_pos, -1, rx962_done2594
    lt rx962_pos, 0, rx962_fail2596
    eq $I19, 0, rx962_fail2596
    nqp_islist $I20, rx962_cstack
    unless $I20, rx962_jump2597
    elements $I18, rx962_bstack
    le $I18, 0, rx962_cut2598
    dec $I18
    set $I18, rx962_bstack[$I18]
  rx962_cut2598:
    assign rx962_cstack, $I18
  rx962_jump2597:
    jump $I19
  rx962_done2594:
    rx962_cur."!cursor_fail"()
    .return (rx962_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1346277629.325_caps" :subid("cuid_memo_267_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1346277629.325_nfa" :subid("cuid_memo_268_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_166_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx965_tgt
    .local int rx965_pos
    .local int rx965_off
    .local int rx965_eos
    .local int rx965_rep
    .local pmc rx965_cur
    .local pmc rx965_curclass
    .local pmc rx965_bstack
    .local pmc rx965_cstack
    (rx965_cur, rx965_tgt, rx965_pos, rx965_curclass, rx965_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx965_cur
    length rx965_eos, rx965_tgt
    eq $I19, 1, rx965_restart2606
    gt rx965_pos, rx965_eos, rx965_fail2607
    repr_get_attr_int $I11, self, rx965_curclass, "$!from"
    ne $I11, -1, rxscan966_done2613
    goto rxscan966_scan2612
  rxscan966_loop2611:
    inc rx965_pos
    gt rx965_pos, rx965_eos, rx965_fail2607
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!from", rx965_pos
  rxscan966_scan2612:
    nqp_rxmark rx965_bstack, rxscan966_loop2611, rx965_pos, 0
  rxscan966_done2613:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2607
    nqp_rxmark rx965_bstack, rxsubrule967_pass2614, -1, 0
  rxsubrule967_pass2614:
    rx965_cstack = rx965_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
    add $I11, rx965_pos, 1
    gt $I11, rx965_eos, rx965_fail2607
    substr $S10, rx965_tgt, rx965_pos, 1
    ne $S10, ucs4:"(", rx965_fail2607
    add rx965_pos, 1
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2607
    nqp_rxmark rx965_bstack, rxsubrule968_pass2615, -1, 0
  rxsubrule968_pass2615:
    rx965_cstack = rx965_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
  alt969_02617:
    nqp_rxmark rx965_bstack, alt969_12618, rx965_pos, 0
    add $I11, rx965_pos, 1
    gt $I11, rx965_eos, rx965_fail2607
    substr $S10, rx965_tgt, rx965_pos, 1
    ne $S10, ucs4:")", rx965_fail2607
    add rx965_pos, 1
    goto alt969_end2616
  alt969_12618:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2607
    goto rxsubrule970_pass2619
  rxsubrule970_back2620:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2607
  rxsubrule970_pass2619:
    rx965_cstack = rx965_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule970_back2620
    push rx965_bstack, $I11
    push rx965_bstack, 0
    push rx965_bstack, rx965_pos
    elements $I11, rx965_cstack
    push rx965_bstack, $I11
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
  alt969_end2616:
    rx965_cur."!cursor_pass"(rx965_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx965_cur)
  rx965_restart2606:
    repr_get_attr_obj rx965_cstack, rx965_cur, rx965_curclass, "$!cstack"
  rx965_fail2607:
    unless rx965_bstack, rx965_done2605
    pop $I19, rx965_bstack
    if_null rx965_cstack, rx965_cstack_done2610
    unless rx965_cstack, rx965_cstack_done2610
    dec $I19
    set $P11, rx965_cstack[$I19]
  rx965_cstack_done2610:
    pop rx965_rep, rx965_bstack
    pop rx965_pos, rx965_bstack
    pop $I19, rx965_bstack
    lt rx965_pos, -1, rx965_done2605
    lt rx965_pos, 0, rx965_fail2607
    eq $I19, 0, rx965_fail2607
    nqp_islist $I20, rx965_cstack
    unless $I20, rx965_jump2608
    elements $I18, rx965_bstack
    le $I18, 0, rx965_cut2609
    dec $I18
    set $I18, rx965_bstack[$I18]
  rx965_cut2609:
    assign rx965_cstack, $I18
  rx965_jump2608:
    jump $I19
  rx965_done2605:
    rx965_cur."!cursor_fail"()
    .return (rx965_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1346277629.325_caps" :subid("cuid_memo_269_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 0
    set $P5001["semilist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1346277629.325_nfa" :subid("cuid_memo_270_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 40
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "semilist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_167_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1208
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx971_tgt
    .local int rx971_pos
    .local int rx971_off
    .local int rx971_eos
    .local int rx971_rep
    .local pmc rx971_cur
    .local pmc rx971_curclass
    .local pmc rx971_bstack
    .local pmc rx971_cstack
    (rx971_cur, rx971_tgt, rx971_pos, rx971_curclass, rx971_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx971_cur
    length rx971_eos, rx971_tgt
    eq $I19, 1, rx971_restart2623
    gt rx971_pos, rx971_eos, rx971_fail2624
    repr_get_attr_int $I11, self, rx971_curclass, "$!from"
    ne $I11, -1, rxscan972_done2630
    goto rxscan972_scan2629
  rxscan972_loop2628:
    inc rx971_pos
    gt rx971_pos, rx971_eos, rx971_fail2624
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!from", rx971_pos
  rxscan972_scan2629:
    nqp_rxmark rx971_bstack, rxscan972_loop2628, rx971_pos, 0
  rxscan972_done2630:
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."ws"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2624
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."statement"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2624
    nqp_rxmark rx971_bstack, rxsubrule974_pass2632, -1, 0
  rxsubrule974_pass2632:
    rx971_cstack = rx971_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."ws"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2624
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    rx971_cur."!cursor_pass"(rx971_pos, "semilist", 'backtrack'=>1)
    .return (rx971_cur)
  rx971_restart2623:
    repr_get_attr_obj rx971_cstack, rx971_cur, rx971_curclass, "$!cstack"
  rx971_fail2624:
    unless rx971_bstack, rx971_done2622
    pop $I19, rx971_bstack
    if_null rx971_cstack, rx971_cstack_done2627
    unless rx971_cstack, rx971_cstack_done2627
    dec $I19
    set $P11, rx971_cstack[$I19]
  rx971_cstack_done2627:
    pop rx971_rep, rx971_bstack
    pop rx971_pos, rx971_bstack
    pop $I19, rx971_bstack
    lt rx971_pos, -1, rx971_done2622
    lt rx971_pos, 0, rx971_fail2624
    eq $I19, 0, rx971_fail2624
    nqp_islist $I20, rx971_cstack
    unless $I20, rx971_jump2625
    elements $I18, rx971_bstack
    le $I18, 0, rx971_cut2626
    dec $I18
    set $I18, rx971_bstack[$I18]
  rx971_cut2626:
    assign rx971_cstack, $I18
  rx971_jump2625:
    jump $I19
  rx971_done2622:
    rx971_cur."!cursor_fail"()
    .return (rx971_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_167_1346277629.325_caps" :subid("cuid_memo_271_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_168_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx976_tgt
    .local int rx976_pos
    .local int rx976_off
    .local int rx976_eos
    .local int rx976_rep
    .local pmc rx976_cur
    .local pmc rx976_curclass
    .local pmc rx976_bstack
    .local pmc rx976_cstack
    (rx976_cur, rx976_tgt, rx976_pos, rx976_curclass, rx976_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx976_cur
    length rx976_eos, rx976_tgt
    eq $I19, 1, rx976_restart2636
    gt rx976_pos, rx976_eos, rx976_fail2637
    repr_get_attr_int $I11, self, rx976_curclass, "$!from"
    ne $I11, -1, rxscan977_done2643
    goto rxscan977_scan2642
  rxscan977_loop2641:
    inc rx976_pos
    gt rx976_pos, rx976_eos, rx976_fail2637
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!from", rx976_pos
  rxscan977_scan2642:
    nqp_rxmark rx976_bstack, rxscan977_loop2641, rx976_pos, 0
  rxscan977_done2643:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    ge $I11, 0, rx976_fail2637
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."infix"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2637
    nqp_rxmark rx976_bstack, rxsubrule978_pass2644, -1, 0
  rxsubrule978_pass2644:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    rx976_cur."!cursor_pass"(rx976_pos, "infixish", 'backtrack'=>1)
    .return (rx976_cur)
  rx976_restart2636:
    repr_get_attr_obj rx976_cstack, rx976_cur, rx976_curclass, "$!cstack"
  rx976_fail2637:
    unless rx976_bstack, rx976_done2635
    pop $I19, rx976_bstack
    if_null rx976_cstack, rx976_cstack_done2640
    unless rx976_cstack, rx976_cstack_done2640
    dec $I19
    set $P11, rx976_cstack[$I19]
  rx976_cstack_done2640:
    pop rx976_rep, rx976_bstack
    pop rx976_pos, rx976_bstack
    pop $I19, rx976_bstack
    lt rx976_pos, -1, rx976_done2635
    lt rx976_pos, 0, rx976_fail2637
    eq $I19, 0, rx976_fail2637
    nqp_islist $I20, rx976_cstack
    unless $I20, rx976_jump2638
    elements $I18, rx976_bstack
    le $I18, 0, rx976_cut2639
    dec $I18
    set $I18, rx976_bstack[$I18]
  rx976_cut2639:
    assign rx976_cstack, $I18
  rx976_jump2638:
    jump $I19
  rx976_done2635:
    rx976_cur."!cursor_fail"()
    .return (rx976_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_168_1346277629.325_caps" :subid("cuid_memo_272_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["OPER"], $P5002
    box $P5003, 0
    set $P5001["infix"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_169_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx979_tgt
    .local int rx979_pos
    .local int rx979_off
    .local int rx979_eos
    .local int rx979_rep
    .local pmc rx979_cur
    .local pmc rx979_curclass
    .local pmc rx979_bstack
    .local pmc rx979_cstack
    (rx979_cur, rx979_tgt, rx979_pos, rx979_curclass, rx979_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx979_cur
    length rx979_eos, rx979_tgt
    eq $I19, 1, rx979_restart2647
    gt rx979_pos, rx979_eos, rx979_fail2648
    repr_get_attr_int $I11, self, rx979_curclass, "$!from"
    ne $I11, -1, rxscan980_done2654
    goto rxscan980_scan2653
  rxscan980_loop2652:
    inc rx979_pos
    gt rx979_pos, rx979_eos, rx979_fail2648
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!from", rx979_pos
  rxscan980_scan2653:
    nqp_rxmark rx979_bstack, rxscan980_loop2652, rx979_pos, 0
  rxscan980_done2654:
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2648
    rx979_cur."!cursor_pass"(rx979_pos, "infixstopper", 'backtrack'=>1)
    .return (rx979_cur)
  rx979_restart2647:
    repr_get_attr_obj rx979_cstack, rx979_cur, rx979_curclass, "$!cstack"
  rx979_fail2648:
    unless rx979_bstack, rx979_done2646
    pop $I19, rx979_bstack
    if_null rx979_cstack, rx979_cstack_done2651
    unless rx979_cstack, rx979_cstack_done2651
    dec $I19
    set $P11, rx979_cstack[$I19]
  rx979_cstack_done2651:
    pop rx979_rep, rx979_bstack
    pop rx979_pos, rx979_bstack
    pop $I19, rx979_bstack
    lt rx979_pos, -1, rx979_done2646
    lt rx979_pos, 0, rx979_fail2648
    eq $I19, 0, rx979_fail2648
    nqp_islist $I20, rx979_cstack
    unless $I20, rx979_jump2649
    elements $I18, rx979_bstack
    le $I18, 0, rx979_cut2650
    dec $I18
    set $I18, rx979_bstack[$I18]
  rx979_cut2650:
    assign rx979_cstack, $I18
  rx979_jump2649:
    jump $I19
  rx979_done2646:
    rx979_cur."!cursor_fail"()
    .return (rx979_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1346277629.325_caps" :subid("cuid_memo_273_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1346277629.325_nfa" :subid("cuid_memo_274_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_170_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_curclass
    .local pmc rx981_bstack
    .local pmc rx981_cstack
    (rx981_cur, rx981_tgt, rx981_pos, rx981_curclass, rx981_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx981_cur
    length rx981_eos, rx981_tgt
    eq $I19, 1, rx981_restart2657
    gt rx981_pos, rx981_eos, rx981_fail2658
    repr_get_attr_int $I11, self, rx981_curclass, "$!from"
    ne $I11, -1, rxscan982_done2664
    goto rxscan982_scan2663
  rxscan982_loop2662:
    inc rx981_pos
    gt rx981_pos, rx981_eos, rx981_fail2658
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!from", rx981_pos
  rxscan982_scan2663:
    nqp_rxmark rx981_bstack, rxscan982_loop2662, rx981_pos, 0
  rxscan982_done2664:
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2658
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"[", rx981_fail2658
    add rx981_pos, 1
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."ws"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2658
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2658
    nqp_rxmark rx981_bstack, rxsubrule984_pass2666, -1, 0
  rxsubrule984_pass2666:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2658
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"]", rx981_fail2658
    add rx981_pos, 1
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2658
    nqp_rxmark rx981_bstack, rxsubrule985_pass2667, -1, 0
  rxsubrule985_pass2667:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    rx981_cur."!cursor_pass"(rx981_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx981_cur)
  rx981_restart2657:
    repr_get_attr_obj rx981_cstack, rx981_cur, rx981_curclass, "$!cstack"
  rx981_fail2658:
    unless rx981_bstack, rx981_done2656
    pop $I19, rx981_bstack
    if_null rx981_cstack, rx981_cstack_done2661
    unless rx981_cstack, rx981_cstack_done2661
    dec $I19
    set $P11, rx981_cstack[$I19]
  rx981_cstack_done2661:
    pop rx981_rep, rx981_bstack
    pop rx981_pos, rx981_bstack
    pop $I19, rx981_bstack
    lt rx981_pos, -1, rx981_done2656
    lt rx981_pos, 0, rx981_fail2658
    eq $I19, 0, rx981_fail2658
    nqp_islist $I20, rx981_cstack
    unless $I20, rx981_jump2659
    elements $I18, rx981_bstack
    le $I18, 0, rx981_cut2660
    dec $I18
    set $I18, rx981_bstack[$I18]
  rx981_cut2660:
    assign rx981_cstack, $I18
  rx981_jump2659:
    jump $I19
  rx981_done2656:
    rx981_cur."!cursor_fail"()
    .return (rx981_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1346277629.325_caps" :subid("cuid_memo_275_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1346277629.325_nfa" :subid("cuid_memo_276_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 93
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_171_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx986_tgt
    .local int rx986_pos
    .local int rx986_off
    .local int rx986_eos
    .local int rx986_rep
    .local pmc rx986_cur
    .local pmc rx986_curclass
    .local pmc rx986_bstack
    .local pmc rx986_cstack
    (rx986_cur, rx986_tgt, rx986_pos, rx986_curclass, rx986_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx986_cur
    length rx986_eos, rx986_tgt
    eq $I19, 1, rx986_restart2670
    gt rx986_pos, rx986_eos, rx986_fail2671
    repr_get_attr_int $I11, self, rx986_curclass, "$!from"
    ne $I11, -1, rxscan987_done2677
    goto rxscan987_scan2676
  rxscan987_loop2675:
    inc rx986_pos
    gt rx986_pos, rx986_eos, rx986_fail2671
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!from", rx986_pos
  rxscan987_scan2676:
    nqp_rxmark rx986_bstack, rxscan987_loop2675, rx986_pos, 0
  rxscan987_done2677:
    add $I11, rx986_pos, 1
    gt $I11, rx986_eos, rx986_fail2671
    substr $S10, rx986_tgt, rx986_pos, 1
    ne $S10, ucs4:"{", rx986_fail2671
    add rx986_pos, 1
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."ws"()
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2671
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2671
    nqp_rxmark rx986_bstack, rxsubrule989_pass2679, -1, 0
  rxsubrule989_pass2679:
    rx986_cstack = rx986_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    add $I11, rx986_pos, 1
    gt $I11, rx986_eos, rx986_fail2671
    substr $S10, rx986_tgt, rx986_pos, 1
    ne $S10, ucs4:"}", rx986_fail2671
    add rx986_pos, 1
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2671
    nqp_rxmark rx986_bstack, rxsubrule990_pass2680, -1, 0
  rxsubrule990_pass2680:
    rx986_cstack = rx986_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    rx986_cur."!cursor_pass"(rx986_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx986_cur)
  rx986_restart2670:
    repr_get_attr_obj rx986_cstack, rx986_cur, rx986_curclass, "$!cstack"
  rx986_fail2671:
    unless rx986_bstack, rx986_done2669
    pop $I19, rx986_bstack
    if_null rx986_cstack, rx986_cstack_done2674
    unless rx986_cstack, rx986_cstack_done2674
    dec $I19
    set $P11, rx986_cstack[$I19]
  rx986_cstack_done2674:
    pop rx986_rep, rx986_bstack
    pop rx986_pos, rx986_bstack
    pop $I19, rx986_bstack
    lt rx986_pos, -1, rx986_done2669
    lt rx986_pos, 0, rx986_fail2671
    eq $I19, 0, rx986_fail2671
    nqp_islist $I20, rx986_cstack
    unless $I20, rx986_jump2672
    elements $I18, rx986_bstack
    le $I18, 0, rx986_cut2673
    dec $I18
    set $I18, rx986_bstack[$I18]
  rx986_cut2673:
    assign rx986_cstack, $I18
  rx986_jump2672:
    jump $I19
  rx986_done2669:
    rx986_cur."!cursor_fail"()
    .return (rx986_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1346277629.325_caps" :subid("cuid_memo_277_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1346277629.325_nfa" :subid("cuid_memo_278_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 125
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_172_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx991_tgt
    .local int rx991_pos
    .local int rx991_off
    .local int rx991_eos
    .local int rx991_rep
    .local pmc rx991_cur
    .local pmc rx991_curclass
    .local pmc rx991_bstack
    .local pmc rx991_cstack
    (rx991_cur, rx991_tgt, rx991_pos, rx991_curclass, rx991_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx991_cur
    length rx991_eos, rx991_tgt
    eq $I19, 1, rx991_restart2683
    gt rx991_pos, rx991_eos, rx991_fail2684
    repr_get_attr_int $I11, self, rx991_curclass, "$!from"
    ne $I11, -1, rxscan992_done2690
    goto rxscan992_scan2689
  rxscan992_loop2688:
    inc rx991_pos
    gt rx991_pos, rx991_eos, rx991_fail2684
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!from", rx991_pos
  rxscan992_scan2689:
    nqp_rxmark rx991_bstack, rxscan992_loop2688, rx991_pos, 0
  rxscan992_done2690:
    ge rx991_pos, rx991_eos, rx991_fail2684
    substr $S11, rx991_tgt, rx991_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx991_fail2684
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail2684
    nqp_rxmark rx991_bstack, rxsubrule993_pass2691, -1, 0
  rxsubrule993_pass2691:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail2684
    nqp_rxmark rx991_bstack, rxsubrule994_pass2692, -1, 0
  rxsubrule994_pass2692:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    rx991_cur."!cursor_pass"(rx991_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx991_cur)
  rx991_restart2683:
    repr_get_attr_obj rx991_cstack, rx991_cur, rx991_curclass, "$!cstack"
  rx991_fail2684:
    unless rx991_bstack, rx991_done2682
    pop $I19, rx991_bstack
    if_null rx991_cstack, rx991_cstack_done2687
    unless rx991_cstack, rx991_cstack_done2687
    dec $I19
    set $P11, rx991_cstack[$I19]
  rx991_cstack_done2687:
    pop rx991_rep, rx991_bstack
    pop rx991_pos, rx991_bstack
    pop $I19, rx991_bstack
    lt rx991_pos, -1, rx991_done2682
    lt rx991_pos, 0, rx991_fail2684
    eq $I19, 0, rx991_fail2684
    nqp_islist $I20, rx991_cstack
    unless $I20, rx991_jump2685
    elements $I18, rx991_bstack
    le $I18, 0, rx991_cut2686
    dec $I18
    set $I18, rx991_bstack[$I18]
  rx991_cut2686:
    assign rx991_cstack, $I18
  rx991_jump2685:
    jump $I19
  rx991_done2682:
    rx991_cur."!cursor_fail"()
    .return (rx991_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1346277629.325_caps" :subid("cuid_memo_279_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1346277629.325_nfa" :subid("cuid_memo_280_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_173_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx995_tgt
    .local int rx995_pos
    .local int rx995_off
    .local int rx995_eos
    .local int rx995_rep
    .local pmc rx995_cur
    .local pmc rx995_curclass
    .local pmc rx995_bstack
    .local pmc rx995_cstack
    (rx995_cur, rx995_tgt, rx995_pos, rx995_curclass, rx995_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx995_cur
    length rx995_eos, rx995_tgt
    eq $I19, 1, rx995_restart2695
    gt rx995_pos, rx995_eos, rx995_fail2696
    repr_get_attr_int $I11, self, rx995_curclass, "$!from"
    ne $I11, -1, rxscan996_done2702
    goto rxscan996_scan2701
  rxscan996_loop2700:
    inc rx995_pos
    gt rx995_pos, rx995_eos, rx995_fail2696
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!from", rx995_pos
  rxscan996_scan2701:
    nqp_rxmark rx995_bstack, rxscan996_loop2700, rx995_pos, 0
  rxscan996_done2702:
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2696
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:"(", rx995_fail2696
    add rx995_pos, 1
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."ws"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2696
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2696
    nqp_rxmark rx995_bstack, rxsubrule998_pass2704, -1, 0
  rxsubrule998_pass2704:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2696
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:")", rx995_fail2696
    add rx995_pos, 1
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2696
    nqp_rxmark rx995_bstack, rxsubrule999_pass2705, -1, 0
  rxsubrule999_pass2705:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    rx995_cur."!cursor_pass"(rx995_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx995_cur)
  rx995_restart2695:
    repr_get_attr_obj rx995_cstack, rx995_cur, rx995_curclass, "$!cstack"
  rx995_fail2696:
    unless rx995_bstack, rx995_done2694
    pop $I19, rx995_bstack
    if_null rx995_cstack, rx995_cstack_done2699
    unless rx995_cstack, rx995_cstack_done2699
    dec $I19
    set $P11, rx995_cstack[$I19]
  rx995_cstack_done2699:
    pop rx995_rep, rx995_bstack
    pop rx995_pos, rx995_bstack
    pop $I19, rx995_bstack
    lt rx995_pos, -1, rx995_done2694
    lt rx995_pos, 0, rx995_fail2696
    eq $I19, 0, rx995_fail2696
    nqp_islist $I20, rx995_cstack
    unless $I20, rx995_jump2697
    elements $I18, rx995_bstack
    le $I18, 0, rx995_cut2698
    dec $I18
    set $I18, rx995_bstack[$I18]
  rx995_cut2698:
    assign rx995_cstack, $I18
  rx995_jump2697:
    jump $I19
  rx995_done2694:
    rx995_cur."!cursor_fail"()
    .return (rx995_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1346277629.325_caps" :subid("cuid_memo_281_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1346277629.325_nfa" :subid("cuid_memo_282_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "arglist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 41
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_174_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1000_tgt
    .local int rx1000_pos
    .local int rx1000_off
    .local int rx1000_eos
    .local int rx1000_rep
    .local pmc rx1000_cur
    .local pmc rx1000_curclass
    .local pmc rx1000_bstack
    .local pmc rx1000_cstack
    (rx1000_cur, rx1000_tgt, rx1000_pos, rx1000_curclass, rx1000_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1000_cur
    length rx1000_eos, rx1000_tgt
    eq $I19, 1, rx1000_restart2708
    gt rx1000_pos, rx1000_eos, rx1000_fail2709
    repr_get_attr_int $I11, self, rx1000_curclass, "$!from"
    ne $I11, -1, rxscan1001_done2715
    goto rxscan1001_scan2714
  rxscan1001_loop2713:
    inc rx1000_pos
    gt rx1000_pos, rx1000_eos, rx1000_fail2709
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!from", rx1000_pos
  rxscan1001_scan2714:
    nqp_rxmark rx1000_bstack, rxscan1001_loop2713, rx1000_pos, 0
  rxscan1001_done2715:
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!pos", rx1000_pos
    $P11 = rx1000_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1000_curclass, "$!pos"
    lt $I11, 0, rx1000_fail2709
    nqp_rxmark rx1000_bstack, rxsubrule1002_pass2716, -1, 0
  rxsubrule1002_pass2716:
    rx1000_cstack = rx1000_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1000_pos, $P11, rx1000_curclass, "$!pos"
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!pos", rx1000_pos
    $P11 = rx1000_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1000_curclass, "$!pos"
    lt $I11, 0, rx1000_fail2709
    nqp_rxmark rx1000_bstack, rxsubrule1003_pass2717, -1, 0
  rxsubrule1003_pass2717:
    rx1000_cstack = rx1000_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1000_pos, $P11, rx1000_curclass, "$!pos"
    rx1000_cur."!cursor_pass"(rx1000_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1000_cur)
  rx1000_restart2708:
    repr_get_attr_obj rx1000_cstack, rx1000_cur, rx1000_curclass, "$!cstack"
  rx1000_fail2709:
    unless rx1000_bstack, rx1000_done2707
    pop $I19, rx1000_bstack
    if_null rx1000_cstack, rx1000_cstack_done2712
    unless rx1000_cstack, rx1000_cstack_done2712
    dec $I19
    set $P11, rx1000_cstack[$I19]
  rx1000_cstack_done2712:
    pop rx1000_rep, rx1000_bstack
    pop rx1000_pos, rx1000_bstack
    pop $I19, rx1000_bstack
    lt rx1000_pos, -1, rx1000_done2707
    lt rx1000_pos, 0, rx1000_fail2709
    eq $I19, 0, rx1000_fail2709
    nqp_islist $I20, rx1000_cstack
    unless $I20, rx1000_jump2710
    elements $I18, rx1000_bstack
    le $I18, 0, rx1000_cut2711
    dec $I18
    set $I18, rx1000_bstack[$I18]
  rx1000_cut2711:
    assign rx1000_cstack, $I18
  rx1000_jump2710:
    jump $I19
  rx1000_done2707:
    rx1000_cur."!cursor_fail"()
    .return (rx1000_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1346277629.325_caps" :subid("cuid_memo_283_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["dotty"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1346277629.325_nfa" :subid("cuid_memo_284_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "dotty"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_175_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1004_tgt
    .local int rx1004_pos
    .local int rx1004_off
    .local int rx1004_eos
    .local int rx1004_rep
    .local pmc rx1004_cur
    .local pmc rx1004_curclass
    .local pmc rx1004_bstack
    .local pmc rx1004_cstack
    (rx1004_cur, rx1004_tgt, rx1004_pos, rx1004_curclass, rx1004_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1004_cur
    length rx1004_eos, rx1004_tgt
    eq $I19, 1, rx1004_restart2720
    gt rx1004_pos, rx1004_eos, rx1004_fail2721
    repr_get_attr_int $I11, self, rx1004_curclass, "$!from"
    ne $I11, -1, rxscan1005_done2727
    goto rxscan1005_scan2726
  rxscan1005_loop2725:
    inc rx1004_pos
    gt rx1004_pos, rx1004_eos, rx1004_fail2721
    repr_bind_attr_int rx1004_cur, rx1004_curclass, "$!from", rx1004_pos
  rxscan1005_scan2726:
    nqp_rxmark rx1004_bstack, rxscan1005_loop2725, rx1004_pos, 0
  rxscan1005_done2727:
    nqp_rxmark rx1004_bstack, rxcap1006_fail2729, rx1004_pos, 0
    add $I11, rx1004_pos, 2
    gt $I11, rx1004_eos, rx1004_fail2721
    substr $S10, rx1004_tgt, rx1004_pos, 2
    ne $S10, ucs4:"++", rx1004_fail2721
    add rx1004_pos, 2
    nqp_rxpeek $I19, rx1004_bstack, rxcap1006_fail2729
    inc $I19
    set $I11, rx1004_bstack[$I19]
    $P11 = rx1004_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1004_pos)
    rx1004_cstack = rx1004_cur."!cursor_capture"($P11, "sym")
    goto rxcap1006_done2728
  rxcap1006_fail2729:
    goto rx1004_fail2721
  rxcap1006_done2728:
    repr_bind_attr_int rx1004_cur, rx1004_curclass, "$!pos", rx1004_pos
    $P11 = rx1004_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1004_curclass, "$!pos"
    lt $I11, 0, rx1004_fail2721
    nqp_rxmark rx1004_bstack, rxsubrule1007_pass2730, -1, 0
  rxsubrule1007_pass2730:
    rx1004_cstack = rx1004_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1004_pos, $P11, rx1004_curclass, "$!pos"
    rx1004_cur."!cursor_pass"(rx1004_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1004_cur)
  rx1004_restart2720:
    repr_get_attr_obj rx1004_cstack, rx1004_cur, rx1004_curclass, "$!cstack"
  rx1004_fail2721:
    unless rx1004_bstack, rx1004_done2719
    pop $I19, rx1004_bstack
    if_null rx1004_cstack, rx1004_cstack_done2724
    unless rx1004_cstack, rx1004_cstack_done2724
    dec $I19
    set $P11, rx1004_cstack[$I19]
  rx1004_cstack_done2724:
    pop rx1004_rep, rx1004_bstack
    pop rx1004_pos, rx1004_bstack
    pop $I19, rx1004_bstack
    lt rx1004_pos, -1, rx1004_done2719
    lt rx1004_pos, 0, rx1004_fail2721
    eq $I19, 0, rx1004_fail2721
    nqp_islist $I20, rx1004_cstack
    unless $I20, rx1004_jump2722
    elements $I18, rx1004_bstack
    le $I18, 0, rx1004_cut2723
    dec $I18
    set $I18, rx1004_bstack[$I18]
  rx1004_cut2723:
    assign rx1004_cstack, $I18
  rx1004_jump2722:
    jump $I19
  rx1004_done2719:
    rx1004_cur."!cursor_fail"()
    .return (rx1004_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1346277629.325_caps" :subid("cuid_memo_285_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1346277629.325_nfa" :subid("cuid_memo_286_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_176_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1257
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1008_tgt
    .local int rx1008_pos
    .local int rx1008_off
    .local int rx1008_eos
    .local int rx1008_rep
    .local pmc rx1008_cur
    .local pmc rx1008_curclass
    .local pmc rx1008_bstack
    .local pmc rx1008_cstack
    (rx1008_cur, rx1008_tgt, rx1008_pos, rx1008_curclass, rx1008_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1008_cur
    length rx1008_eos, rx1008_tgt
    eq $I19, 1, rx1008_restart2733
    gt rx1008_pos, rx1008_eos, rx1008_fail2734
    repr_get_attr_int $I11, self, rx1008_curclass, "$!from"
    ne $I11, -1, rxscan1009_done2740
    goto rxscan1009_scan2739
  rxscan1009_loop2738:
    inc rx1008_pos
    gt rx1008_pos, rx1008_eos, rx1008_fail2734
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!from", rx1008_pos
  rxscan1009_scan2739:
    nqp_rxmark rx1008_bstack, rxscan1009_loop2738, rx1008_pos, 0
  rxscan1009_done2740:
    nqp_rxmark rx1008_bstack, rxcap1010_fail2742, rx1008_pos, 0
    add $I11, rx1008_pos, 2
    gt $I11, rx1008_eos, rx1008_fail2734
    substr $S10, rx1008_tgt, rx1008_pos, 2
    ne $S10, ucs4:"--", rx1008_fail2734
    add rx1008_pos, 2
    nqp_rxpeek $I19, rx1008_bstack, rxcap1010_fail2742
    inc $I19
    set $I11, rx1008_bstack[$I19]
    $P11 = rx1008_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1008_pos)
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "sym")
    goto rxcap1010_done2741
  rxcap1010_fail2742:
    goto rx1008_fail2734
  rxcap1010_done2741:
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2734
    nqp_rxmark rx1008_bstack, rxsubrule1011_pass2743, -1, 0
  rxsubrule1011_pass2743:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    rx1008_cur."!cursor_pass"(rx1008_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1008_cur)
  rx1008_restart2733:
    repr_get_attr_obj rx1008_cstack, rx1008_cur, rx1008_curclass, "$!cstack"
  rx1008_fail2734:
    unless rx1008_bstack, rx1008_done2732
    pop $I19, rx1008_bstack
    if_null rx1008_cstack, rx1008_cstack_done2737
    unless rx1008_cstack, rx1008_cstack_done2737
    dec $I19
    set $P11, rx1008_cstack[$I19]
  rx1008_cstack_done2737:
    pop rx1008_rep, rx1008_bstack
    pop rx1008_pos, rx1008_bstack
    pop $I19, rx1008_bstack
    lt rx1008_pos, -1, rx1008_done2732
    lt rx1008_pos, 0, rx1008_fail2734
    eq $I19, 0, rx1008_fail2734
    nqp_islist $I20, rx1008_cstack
    unless $I20, rx1008_jump2735
    elements $I18, rx1008_bstack
    le $I18, 0, rx1008_cut2736
    dec $I18
    set $I18, rx1008_bstack[$I18]
  rx1008_cut2736:
    assign rx1008_cstack, $I18
  rx1008_jump2735:
    jump $I19
  rx1008_done2732:
    rx1008_cur."!cursor_fail"()
    .return (rx1008_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1346277629.325_caps" :subid("cuid_memo_287_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1346277629.325_nfa" :subid("cuid_memo_288_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_177_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1259
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1012_tgt
    .local int rx1012_pos
    .local int rx1012_off
    .local int rx1012_eos
    .local int rx1012_rep
    .local pmc rx1012_cur
    .local pmc rx1012_curclass
    .local pmc rx1012_bstack
    .local pmc rx1012_cstack
    (rx1012_cur, rx1012_tgt, rx1012_pos, rx1012_curclass, rx1012_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1012_cur
    length rx1012_eos, rx1012_tgt
    eq $I19, 1, rx1012_restart2746
    gt rx1012_pos, rx1012_eos, rx1012_fail2747
    repr_get_attr_int $I11, self, rx1012_curclass, "$!from"
    ne $I11, -1, rxscan1013_done2753
    goto rxscan1013_scan2752
  rxscan1013_loop2751:
    inc rx1012_pos
    gt rx1012_pos, rx1012_eos, rx1012_fail2747
    repr_bind_attr_int rx1012_cur, rx1012_curclass, "$!from", rx1012_pos
  rxscan1013_scan2752:
    nqp_rxmark rx1012_bstack, rxscan1013_loop2751, rx1012_pos, 0
  rxscan1013_done2753:
    nqp_rxmark rx1012_bstack, rxcap1014_fail2755, rx1012_pos, 0
    add $I11, rx1012_pos, 2
    gt $I11, rx1012_eos, rx1012_fail2747
    substr $S10, rx1012_tgt, rx1012_pos, 2
    ne $S10, ucs4:"++", rx1012_fail2747
    add rx1012_pos, 2
    nqp_rxpeek $I19, rx1012_bstack, rxcap1014_fail2755
    inc $I19
    set $I11, rx1012_bstack[$I19]
    $P11 = rx1012_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1012_pos)
    rx1012_cstack = rx1012_cur."!cursor_capture"($P11, "sym")
    goto rxcap1014_done2754
  rxcap1014_fail2755:
    goto rx1012_fail2747
  rxcap1014_done2754:
    repr_bind_attr_int rx1012_cur, rx1012_curclass, "$!pos", rx1012_pos
    $P11 = rx1012_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1012_curclass, "$!pos"
    lt $I11, 0, rx1012_fail2747
    nqp_rxmark rx1012_bstack, rxsubrule1015_pass2756, -1, 0
  rxsubrule1015_pass2756:
    rx1012_cstack = rx1012_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1012_pos, $P11, rx1012_curclass, "$!pos"
    rx1012_cur."!cursor_pass"(rx1012_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1012_cur)
  rx1012_restart2746:
    repr_get_attr_obj rx1012_cstack, rx1012_cur, rx1012_curclass, "$!cstack"
  rx1012_fail2747:
    unless rx1012_bstack, rx1012_done2745
    pop $I19, rx1012_bstack
    if_null rx1012_cstack, rx1012_cstack_done2750
    unless rx1012_cstack, rx1012_cstack_done2750
    dec $I19
    set $P11, rx1012_cstack[$I19]
  rx1012_cstack_done2750:
    pop rx1012_rep, rx1012_bstack
    pop rx1012_pos, rx1012_bstack
    pop $I19, rx1012_bstack
    lt rx1012_pos, -1, rx1012_done2745
    lt rx1012_pos, 0, rx1012_fail2747
    eq $I19, 0, rx1012_fail2747
    nqp_islist $I20, rx1012_cstack
    unless $I20, rx1012_jump2748
    elements $I18, rx1012_bstack
    le $I18, 0, rx1012_cut2749
    dec $I18
    set $I18, rx1012_bstack[$I18]
  rx1012_cut2749:
    assign rx1012_cstack, $I18
  rx1012_jump2748:
    jump $I19
  rx1012_done2745:
    rx1012_cur."!cursor_fail"()
    .return (rx1012_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1346277629.325_caps" :subid("cuid_memo_289_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1346277629.325_nfa" :subid("cuid_memo_290_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_178_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1016_tgt
    .local int rx1016_pos
    .local int rx1016_off
    .local int rx1016_eos
    .local int rx1016_rep
    .local pmc rx1016_cur
    .local pmc rx1016_curclass
    .local pmc rx1016_bstack
    .local pmc rx1016_cstack
    (rx1016_cur, rx1016_tgt, rx1016_pos, rx1016_curclass, rx1016_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1016_cur
    length rx1016_eos, rx1016_tgt
    eq $I19, 1, rx1016_restart2759
    gt rx1016_pos, rx1016_eos, rx1016_fail2760
    repr_get_attr_int $I11, self, rx1016_curclass, "$!from"
    ne $I11, -1, rxscan1017_done2766
    goto rxscan1017_scan2765
  rxscan1017_loop2764:
    inc rx1016_pos
    gt rx1016_pos, rx1016_eos, rx1016_fail2760
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!from", rx1016_pos
  rxscan1017_scan2765:
    nqp_rxmark rx1016_bstack, rxscan1017_loop2764, rx1016_pos, 0
  rxscan1017_done2766:
    nqp_rxmark rx1016_bstack, rxcap1018_fail2768, rx1016_pos, 0
    add $I11, rx1016_pos, 2
    gt $I11, rx1016_eos, rx1016_fail2760
    substr $S10, rx1016_tgt, rx1016_pos, 2
    ne $S10, ucs4:"--", rx1016_fail2760
    add rx1016_pos, 2
    nqp_rxpeek $I19, rx1016_bstack, rxcap1018_fail2768
    inc $I19
    set $I11, rx1016_bstack[$I19]
    $P11 = rx1016_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1016_pos)
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "sym")
    goto rxcap1018_done2767
  rxcap1018_fail2768:
    goto rx1016_fail2760
  rxcap1018_done2767:
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!pos", rx1016_pos
    $P11 = rx1016_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1016_curclass, "$!pos"
    lt $I11, 0, rx1016_fail2760
    nqp_rxmark rx1016_bstack, rxsubrule1019_pass2769, -1, 0
  rxsubrule1019_pass2769:
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1016_pos, $P11, rx1016_curclass, "$!pos"
    rx1016_cur."!cursor_pass"(rx1016_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1016_cur)
  rx1016_restart2759:
    repr_get_attr_obj rx1016_cstack, rx1016_cur, rx1016_curclass, "$!cstack"
  rx1016_fail2760:
    unless rx1016_bstack, rx1016_done2758
    pop $I19, rx1016_bstack
    if_null rx1016_cstack, rx1016_cstack_done2763
    unless rx1016_cstack, rx1016_cstack_done2763
    dec $I19
    set $P11, rx1016_cstack[$I19]
  rx1016_cstack_done2763:
    pop rx1016_rep, rx1016_bstack
    pop rx1016_pos, rx1016_bstack
    pop $I19, rx1016_bstack
    lt rx1016_pos, -1, rx1016_done2758
    lt rx1016_pos, 0, rx1016_fail2760
    eq $I19, 0, rx1016_fail2760
    nqp_islist $I20, rx1016_cstack
    unless $I20, rx1016_jump2761
    elements $I18, rx1016_bstack
    le $I18, 0, rx1016_cut2762
    dec $I18
    set $I18, rx1016_bstack[$I18]
  rx1016_cut2762:
    assign rx1016_cstack, $I18
  rx1016_jump2761:
    jump $I19
  rx1016_done2758:
    rx1016_cur."!cursor_fail"()
    .return (rx1016_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1346277629.325_caps" :subid("cuid_memo_291_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1346277629.325_nfa" :subid("cuid_memo_292_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_179_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1262
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1020_tgt
    .local int rx1020_pos
    .local int rx1020_off
    .local int rx1020_eos
    .local int rx1020_rep
    .local pmc rx1020_cur
    .local pmc rx1020_curclass
    .local pmc rx1020_bstack
    .local pmc rx1020_cstack
    (rx1020_cur, rx1020_tgt, rx1020_pos, rx1020_curclass, rx1020_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1020_cur
    length rx1020_eos, rx1020_tgt
    eq $I19, 1, rx1020_restart2772
    gt rx1020_pos, rx1020_eos, rx1020_fail2773
    repr_get_attr_int $I11, self, rx1020_curclass, "$!from"
    ne $I11, -1, rxscan1021_done2779
    goto rxscan1021_scan2778
  rxscan1021_loop2777:
    inc rx1020_pos
    gt rx1020_pos, rx1020_eos, rx1020_fail2773
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!from", rx1020_pos
  rxscan1021_scan2778:
    nqp_rxmark rx1020_bstack, rxscan1021_loop2777, rx1020_pos, 0
  rxscan1021_done2779:
    nqp_rxmark rx1020_bstack, rxcap1022_fail2781, rx1020_pos, 0
    add $I11, rx1020_pos, 2
    gt $I11, rx1020_eos, rx1020_fail2773
    substr $S10, rx1020_tgt, rx1020_pos, 2
    ne $S10, ucs4:"**", rx1020_fail2773
    add rx1020_pos, 2
    nqp_rxpeek $I19, rx1020_bstack, rxcap1022_fail2781
    inc $I19
    set $I11, rx1020_bstack[$I19]
    $P11 = rx1020_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1020_pos)
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "sym")
    goto rxcap1022_done2780
  rxcap1022_fail2781:
    goto rx1020_fail2773
  rxcap1022_done2780:
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2773
    nqp_rxmark rx1020_bstack, rxsubrule1023_pass2782, -1, 0
  rxsubrule1023_pass2782:
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    rx1020_cur."!cursor_pass"(rx1020_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1020_cur)
  rx1020_restart2772:
    repr_get_attr_obj rx1020_cstack, rx1020_cur, rx1020_curclass, "$!cstack"
  rx1020_fail2773:
    unless rx1020_bstack, rx1020_done2771
    pop $I19, rx1020_bstack
    if_null rx1020_cstack, rx1020_cstack_done2776
    unless rx1020_cstack, rx1020_cstack_done2776
    dec $I19
    set $P11, rx1020_cstack[$I19]
  rx1020_cstack_done2776:
    pop rx1020_rep, rx1020_bstack
    pop rx1020_pos, rx1020_bstack
    pop $I19, rx1020_bstack
    lt rx1020_pos, -1, rx1020_done2771
    lt rx1020_pos, 0, rx1020_fail2773
    eq $I19, 0, rx1020_fail2773
    nqp_islist $I20, rx1020_cstack
    unless $I20, rx1020_jump2774
    elements $I18, rx1020_bstack
    le $I18, 0, rx1020_cut2775
    dec $I18
    set $I18, rx1020_bstack[$I18]
  rx1020_cut2775:
    assign rx1020_cstack, $I18
  rx1020_jump2774:
    jump $I19
  rx1020_done2771:
    rx1020_cur."!cursor_fail"()
    .return (rx1020_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1346277629.325_caps" :subid("cuid_memo_293_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1346277629.325_nfa" :subid("cuid_memo_294_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_180_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1264
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1024_tgt
    .local int rx1024_pos
    .local int rx1024_off
    .local int rx1024_eos
    .local int rx1024_rep
    .local pmc rx1024_cur
    .local pmc rx1024_curclass
    .local pmc rx1024_bstack
    .local pmc rx1024_cstack
    (rx1024_cur, rx1024_tgt, rx1024_pos, rx1024_curclass, rx1024_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1024_cur
    length rx1024_eos, rx1024_tgt
    eq $I19, 1, rx1024_restart2785
    gt rx1024_pos, rx1024_eos, rx1024_fail2786
    repr_get_attr_int $I11, self, rx1024_curclass, "$!from"
    ne $I11, -1, rxscan1025_done2792
    goto rxscan1025_scan2791
  rxscan1025_loop2790:
    inc rx1024_pos
    gt rx1024_pos, rx1024_eos, rx1024_fail2786
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!from", rx1024_pos
  rxscan1025_scan2791:
    nqp_rxmark rx1024_bstack, rxscan1025_loop2790, rx1024_pos, 0
  rxscan1025_done2792:
    nqp_rxmark rx1024_bstack, rxcap1026_fail2794, rx1024_pos, 0
    add $I11, rx1024_pos, 1
    gt $I11, rx1024_eos, rx1024_fail2786
    substr $S10, rx1024_tgt, rx1024_pos, 1
    ne $S10, ucs4:"+", rx1024_fail2786
    add rx1024_pos, 1
    nqp_rxpeek $I19, rx1024_bstack, rxcap1026_fail2794
    inc $I19
    set $I11, rx1024_bstack[$I19]
    $P11 = rx1024_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1024_pos)
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "sym")
    goto rxcap1026_done2793
  rxcap1026_fail2794:
    goto rx1024_fail2786
  rxcap1026_done2793:
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    $P11 = rx1024_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1024_curclass, "$!pos"
    lt $I11, 0, rx1024_fail2786
    nqp_rxmark rx1024_bstack, rxsubrule1027_pass2795, -1, 0
  rxsubrule1027_pass2795:
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1024_pos, $P11, rx1024_curclass, "$!pos"
    rx1024_cur."!cursor_pass"(rx1024_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1024_cur)
  rx1024_restart2785:
    repr_get_attr_obj rx1024_cstack, rx1024_cur, rx1024_curclass, "$!cstack"
  rx1024_fail2786:
    unless rx1024_bstack, rx1024_done2784
    pop $I19, rx1024_bstack
    if_null rx1024_cstack, rx1024_cstack_done2789
    unless rx1024_cstack, rx1024_cstack_done2789
    dec $I19
    set $P11, rx1024_cstack[$I19]
  rx1024_cstack_done2789:
    pop rx1024_rep, rx1024_bstack
    pop rx1024_pos, rx1024_bstack
    pop $I19, rx1024_bstack
    lt rx1024_pos, -1, rx1024_done2784
    lt rx1024_pos, 0, rx1024_fail2786
    eq $I19, 0, rx1024_fail2786
    nqp_islist $I20, rx1024_cstack
    unless $I20, rx1024_jump2787
    elements $I18, rx1024_bstack
    le $I18, 0, rx1024_cut2788
    dec $I18
    set $I18, rx1024_bstack[$I18]
  rx1024_cut2788:
    assign rx1024_cstack, $I18
  rx1024_jump2787:
    jump $I19
  rx1024_done2784:
    rx1024_cur."!cursor_fail"()
    .return (rx1024_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1346277629.325_caps" :subid("cuid_memo_295_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1346277629.325_nfa" :subid("cuid_memo_296_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_181_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1265
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1028_tgt
    .local int rx1028_pos
    .local int rx1028_off
    .local int rx1028_eos
    .local int rx1028_rep
    .local pmc rx1028_cur
    .local pmc rx1028_curclass
    .local pmc rx1028_bstack
    .local pmc rx1028_cstack
    (rx1028_cur, rx1028_tgt, rx1028_pos, rx1028_curclass, rx1028_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1028_cur
    length rx1028_eos, rx1028_tgt
    eq $I19, 1, rx1028_restart2798
    gt rx1028_pos, rx1028_eos, rx1028_fail2799
    repr_get_attr_int $I11, self, rx1028_curclass, "$!from"
    ne $I11, -1, rxscan1029_done2805
    goto rxscan1029_scan2804
  rxscan1029_loop2803:
    inc rx1028_pos
    gt rx1028_pos, rx1028_eos, rx1028_fail2799
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!from", rx1028_pos
  rxscan1029_scan2804:
    nqp_rxmark rx1028_bstack, rxscan1029_loop2803, rx1028_pos, 0
  rxscan1029_done2805:
    nqp_rxmark rx1028_bstack, rxcap1030_fail2807, rx1028_pos, 0
    add $I11, rx1028_pos, 1
    gt $I11, rx1028_eos, rx1028_fail2799
    substr $S10, rx1028_tgt, rx1028_pos, 1
    ne $S10, ucs4:"~", rx1028_fail2799
    add rx1028_pos, 1
    nqp_rxpeek $I19, rx1028_bstack, rxcap1030_fail2807
    inc $I19
    set $I11, rx1028_bstack[$I19]
    $P11 = rx1028_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1028_pos)
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "sym")
    goto rxcap1030_done2806
  rxcap1030_fail2807:
    goto rx1028_fail2799
  rxcap1030_done2806:
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!pos", rx1028_pos
    $P11 = rx1028_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1028_curclass, "$!pos"
    lt $I11, 0, rx1028_fail2799
    nqp_rxmark rx1028_bstack, rxsubrule1031_pass2808, -1, 0
  rxsubrule1031_pass2808:
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1028_pos, $P11, rx1028_curclass, "$!pos"
    rx1028_cur."!cursor_pass"(rx1028_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1028_cur)
  rx1028_restart2798:
    repr_get_attr_obj rx1028_cstack, rx1028_cur, rx1028_curclass, "$!cstack"
  rx1028_fail2799:
    unless rx1028_bstack, rx1028_done2797
    pop $I19, rx1028_bstack
    if_null rx1028_cstack, rx1028_cstack_done2802
    unless rx1028_cstack, rx1028_cstack_done2802
    dec $I19
    set $P11, rx1028_cstack[$I19]
  rx1028_cstack_done2802:
    pop rx1028_rep, rx1028_bstack
    pop rx1028_pos, rx1028_bstack
    pop $I19, rx1028_bstack
    lt rx1028_pos, -1, rx1028_done2797
    lt rx1028_pos, 0, rx1028_fail2799
    eq $I19, 0, rx1028_fail2799
    nqp_islist $I20, rx1028_cstack
    unless $I20, rx1028_jump2800
    elements $I18, rx1028_bstack
    le $I18, 0, rx1028_cut2801
    dec $I18
    set $I18, rx1028_bstack[$I18]
  rx1028_cut2801:
    assign rx1028_cstack, $I18
  rx1028_jump2800:
    jump $I19
  rx1028_done2797:
    rx1028_cur."!cursor_fail"()
    .return (rx1028_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1346277629.325_caps" :subid("cuid_memo_297_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1346277629.325_nfa" :subid("cuid_memo_298_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_182_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1266
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1032_tgt
    .local int rx1032_pos
    .local int rx1032_off
    .local int rx1032_eos
    .local int rx1032_rep
    .local pmc rx1032_cur
    .local pmc rx1032_curclass
    .local pmc rx1032_bstack
    .local pmc rx1032_cstack
    (rx1032_cur, rx1032_tgt, rx1032_pos, rx1032_curclass, rx1032_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1032_cur
    length rx1032_eos, rx1032_tgt
    eq $I19, 1, rx1032_restart2811
    gt rx1032_pos, rx1032_eos, rx1032_fail2812
    repr_get_attr_int $I11, self, rx1032_curclass, "$!from"
    ne $I11, -1, rxscan1033_done2818
    goto rxscan1033_scan2817
  rxscan1033_loop2816:
    inc rx1032_pos
    gt rx1032_pos, rx1032_eos, rx1032_fail2812
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!from", rx1032_pos
  rxscan1033_scan2817:
    nqp_rxmark rx1032_bstack, rxscan1033_loop2816, rx1032_pos, 0
  rxscan1033_done2818:
    nqp_rxmark rx1032_bstack, rxcap1034_fail2820, rx1032_pos, 0
    add $I11, rx1032_pos, 1
    gt $I11, rx1032_eos, rx1032_fail2812
    substr $S10, rx1032_tgt, rx1032_pos, 1
    ne $S10, ucs4:"-", rx1032_fail2812
    add rx1032_pos, 1
    nqp_rxpeek $I19, rx1032_bstack, rxcap1034_fail2820
    inc $I19
    set $I11, rx1032_bstack[$I19]
    $P11 = rx1032_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1032_pos)
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "sym")
    goto rxcap1034_done2819
  rxcap1034_fail2820:
    goto rx1032_fail2812
  rxcap1034_done2819:
    ge rx1032_pos, rx1032_eos, rx1032_fail2812
    substr $S11, rx1032_tgt, rx1032_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1032_fail2812
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."number"()
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    ge $I11, 0, rx1032_fail2812
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    lt $I11, 0, rx1032_fail2812
    nqp_rxmark rx1032_bstack, rxsubrule1035_pass2821, -1, 0
  rxsubrule1035_pass2821:
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1032_pos, $P11, rx1032_curclass, "$!pos"
    rx1032_cur."!cursor_pass"(rx1032_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1032_cur)
  rx1032_restart2811:
    repr_get_attr_obj rx1032_cstack, rx1032_cur, rx1032_curclass, "$!cstack"
  rx1032_fail2812:
    unless rx1032_bstack, rx1032_done2810
    pop $I19, rx1032_bstack
    if_null rx1032_cstack, rx1032_cstack_done2815
    unless rx1032_cstack, rx1032_cstack_done2815
    dec $I19
    set $P11, rx1032_cstack[$I19]
  rx1032_cstack_done2815:
    pop rx1032_rep, rx1032_bstack
    pop rx1032_pos, rx1032_bstack
    pop $I19, rx1032_bstack
    lt rx1032_pos, -1, rx1032_done2810
    lt rx1032_pos, 0, rx1032_fail2812
    eq $I19, 0, rx1032_fail2812
    nqp_islist $I20, rx1032_cstack
    unless $I20, rx1032_jump2813
    elements $I18, rx1032_bstack
    le $I18, 0, rx1032_cut2814
    dec $I18
    set $I18, rx1032_bstack[$I18]
  rx1032_cut2814:
    assign rx1032_cstack, $I18
  rx1032_jump2813:
    jump $I19
  rx1032_done2810:
    rx1032_cur."!cursor_fail"()
    .return (rx1032_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1346277629.325_caps" :subid("cuid_memo_299_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1346277629.325_nfa" :subid("cuid_memo_300_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 7
    push $P5007, $P5008
    box $P5009, ">"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_183_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1267
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1036_tgt
    .local int rx1036_pos
    .local int rx1036_off
    .local int rx1036_eos
    .local int rx1036_rep
    .local pmc rx1036_cur
    .local pmc rx1036_curclass
    .local pmc rx1036_bstack
    .local pmc rx1036_cstack
    (rx1036_cur, rx1036_tgt, rx1036_pos, rx1036_curclass, rx1036_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1036_cur
    length rx1036_eos, rx1036_tgt
    eq $I19, 1, rx1036_restart2824
    gt rx1036_pos, rx1036_eos, rx1036_fail2825
    repr_get_attr_int $I11, self, rx1036_curclass, "$!from"
    ne $I11, -1, rxscan1037_done2831
    goto rxscan1037_scan2830
  rxscan1037_loop2829:
    inc rx1036_pos
    gt rx1036_pos, rx1036_eos, rx1036_fail2825
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!from", rx1036_pos
  rxscan1037_scan2830:
    nqp_rxmark rx1036_bstack, rxscan1037_loop2829, rx1036_pos, 0
  rxscan1037_done2831:
    nqp_rxmark rx1036_bstack, rxcap1038_fail2833, rx1036_pos, 0
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2825
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"?", rx1036_fail2825
    add rx1036_pos, 1
    nqp_rxpeek $I19, rx1036_bstack, rxcap1038_fail2833
    inc $I19
    set $I11, rx1036_bstack[$I19]
    $P11 = rx1036_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1036_pos)
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "sym")
    goto rxcap1038_done2832
  rxcap1038_fail2833:
    goto rx1036_fail2825
  rxcap1038_done2832:
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2825
    nqp_rxmark rx1036_bstack, rxsubrule1039_pass2834, -1, 0
  rxsubrule1039_pass2834:
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    rx1036_cur."!cursor_pass"(rx1036_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1036_cur)
  rx1036_restart2824:
    repr_get_attr_obj rx1036_cstack, rx1036_cur, rx1036_curclass, "$!cstack"
  rx1036_fail2825:
    unless rx1036_bstack, rx1036_done2823
    pop $I19, rx1036_bstack
    if_null rx1036_cstack, rx1036_cstack_done2828
    unless rx1036_cstack, rx1036_cstack_done2828
    dec $I19
    set $P11, rx1036_cstack[$I19]
  rx1036_cstack_done2828:
    pop rx1036_rep, rx1036_bstack
    pop rx1036_pos, rx1036_bstack
    pop $I19, rx1036_bstack
    lt rx1036_pos, -1, rx1036_done2823
    lt rx1036_pos, 0, rx1036_fail2825
    eq $I19, 0, rx1036_fail2825
    nqp_islist $I20, rx1036_cstack
    unless $I20, rx1036_jump2826
    elements $I18, rx1036_bstack
    le $I18, 0, rx1036_cut2827
    dec $I18
    set $I18, rx1036_bstack[$I18]
  rx1036_cut2827:
    assign rx1036_cstack, $I18
  rx1036_jump2826:
    jump $I19
  rx1036_done2823:
    rx1036_cur."!cursor_fail"()
    .return (rx1036_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1346277629.325_caps" :subid("cuid_memo_301_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1346277629.325_nfa" :subid("cuid_memo_302_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_184_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1268
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1040_tgt
    .local int rx1040_pos
    .local int rx1040_off
    .local int rx1040_eos
    .local int rx1040_rep
    .local pmc rx1040_cur
    .local pmc rx1040_curclass
    .local pmc rx1040_bstack
    .local pmc rx1040_cstack
    (rx1040_cur, rx1040_tgt, rx1040_pos, rx1040_curclass, rx1040_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1040_cur
    length rx1040_eos, rx1040_tgt
    eq $I19, 1, rx1040_restart2837
    gt rx1040_pos, rx1040_eos, rx1040_fail2838
    repr_get_attr_int $I11, self, rx1040_curclass, "$!from"
    ne $I11, -1, rxscan1041_done2844
    goto rxscan1041_scan2843
  rxscan1041_loop2842:
    inc rx1040_pos
    gt rx1040_pos, rx1040_eos, rx1040_fail2838
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!from", rx1040_pos
  rxscan1041_scan2843:
    nqp_rxmark rx1040_bstack, rxscan1041_loop2842, rx1040_pos, 0
  rxscan1041_done2844:
    nqp_rxmark rx1040_bstack, rxcap1042_fail2846, rx1040_pos, 0
    add $I11, rx1040_pos, 1
    gt $I11, rx1040_eos, rx1040_fail2838
    substr $S10, rx1040_tgt, rx1040_pos, 1
    ne $S10, ucs4:"!", rx1040_fail2838
    add rx1040_pos, 1
    nqp_rxpeek $I19, rx1040_bstack, rxcap1042_fail2846
    inc $I19
    set $I11, rx1040_bstack[$I19]
    $P11 = rx1040_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1040_pos)
    rx1040_cstack = rx1040_cur."!cursor_capture"($P11, "sym")
    goto rxcap1042_done2845
  rxcap1042_fail2846:
    goto rx1040_fail2838
  rxcap1042_done2845:
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!pos", rx1040_pos
    $P11 = rx1040_cur."O"("%symbolic_unary, :op<isfalse>")
    repr_get_attr_int $I11, $P11, rx1040_curclass, "$!pos"
    lt $I11, 0, rx1040_fail2838
    nqp_rxmark rx1040_bstack, rxsubrule1043_pass2847, -1, 0
  rxsubrule1043_pass2847:
    rx1040_cstack = rx1040_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1040_pos, $P11, rx1040_curclass, "$!pos"
    rx1040_cur."!cursor_pass"(rx1040_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1040_cur)
  rx1040_restart2837:
    repr_get_attr_obj rx1040_cstack, rx1040_cur, rx1040_curclass, "$!cstack"
  rx1040_fail2838:
    unless rx1040_bstack, rx1040_done2836
    pop $I19, rx1040_bstack
    if_null rx1040_cstack, rx1040_cstack_done2841
    unless rx1040_cstack, rx1040_cstack_done2841
    dec $I19
    set $P11, rx1040_cstack[$I19]
  rx1040_cstack_done2841:
    pop rx1040_rep, rx1040_bstack
    pop rx1040_pos, rx1040_bstack
    pop $I19, rx1040_bstack
    lt rx1040_pos, -1, rx1040_done2836
    lt rx1040_pos, 0, rx1040_fail2838
    eq $I19, 0, rx1040_fail2838
    nqp_islist $I20, rx1040_cstack
    unless $I20, rx1040_jump2839
    elements $I18, rx1040_bstack
    le $I18, 0, rx1040_cut2840
    dec $I18
    set $I18, rx1040_bstack[$I18]
  rx1040_cut2840:
    assign rx1040_cstack, $I18
  rx1040_jump2839:
    jump $I19
  rx1040_done2836:
    rx1040_cur."!cursor_fail"()
    .return (rx1040_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1346277629.325_caps" :subid("cuid_memo_303_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1346277629.325_nfa" :subid("cuid_memo_304_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_185_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1269
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1044_tgt
    .local int rx1044_pos
    .local int rx1044_off
    .local int rx1044_eos
    .local int rx1044_rep
    .local pmc rx1044_cur
    .local pmc rx1044_curclass
    .local pmc rx1044_bstack
    .local pmc rx1044_cstack
    (rx1044_cur, rx1044_tgt, rx1044_pos, rx1044_curclass, rx1044_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1044_cur
    length rx1044_eos, rx1044_tgt
    eq $I19, 1, rx1044_restart2850
    gt rx1044_pos, rx1044_eos, rx1044_fail2851
    repr_get_attr_int $I11, self, rx1044_curclass, "$!from"
    ne $I11, -1, rxscan1045_done2857
    goto rxscan1045_scan2856
  rxscan1045_loop2855:
    inc rx1044_pos
    gt rx1044_pos, rx1044_eos, rx1044_fail2851
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!from", rx1044_pos
  rxscan1045_scan2856:
    nqp_rxmark rx1044_bstack, rxscan1045_loop2855, rx1044_pos, 0
  rxscan1045_done2857:
    nqp_rxmark rx1044_bstack, rxcap1046_fail2859, rx1044_pos, 0
    add $I11, rx1044_pos, 1
    gt $I11, rx1044_eos, rx1044_fail2851
    substr $S10, rx1044_tgt, rx1044_pos, 1
    ne $S10, ucs4:"|", rx1044_fail2851
    add rx1044_pos, 1
    nqp_rxpeek $I19, rx1044_bstack, rxcap1046_fail2859
    inc $I19
    set $I11, rx1044_bstack[$I19]
    $P11 = rx1044_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1044_pos)
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "sym")
    goto rxcap1046_done2858
  rxcap1046_fail2859:
    goto rx1044_fail2851
  rxcap1046_done2858:
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!pos", rx1044_pos
    $P11 = rx1044_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1044_curclass, "$!pos"
    lt $I11, 0, rx1044_fail2851
    nqp_rxmark rx1044_bstack, rxsubrule1047_pass2860, -1, 0
  rxsubrule1047_pass2860:
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1044_pos, $P11, rx1044_curclass, "$!pos"
    rx1044_cur."!cursor_pass"(rx1044_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1044_cur)
  rx1044_restart2850:
    repr_get_attr_obj rx1044_cstack, rx1044_cur, rx1044_curclass, "$!cstack"
  rx1044_fail2851:
    unless rx1044_bstack, rx1044_done2849
    pop $I19, rx1044_bstack
    if_null rx1044_cstack, rx1044_cstack_done2854
    unless rx1044_cstack, rx1044_cstack_done2854
    dec $I19
    set $P11, rx1044_cstack[$I19]
  rx1044_cstack_done2854:
    pop rx1044_rep, rx1044_bstack
    pop rx1044_pos, rx1044_bstack
    pop $I19, rx1044_bstack
    lt rx1044_pos, -1, rx1044_done2849
    lt rx1044_pos, 0, rx1044_fail2851
    eq $I19, 0, rx1044_fail2851
    nqp_islist $I20, rx1044_cstack
    unless $I20, rx1044_jump2852
    elements $I18, rx1044_bstack
    le $I18, 0, rx1044_cut2853
    dec $I18
    set $I18, rx1044_bstack[$I18]
  rx1044_cut2853:
    assign rx1044_cstack, $I18
  rx1044_jump2852:
    jump $I19
  rx1044_done2849:
    rx1044_cur."!cursor_fail"()
    .return (rx1044_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1346277629.325_caps" :subid("cuid_memo_305_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1346277629.325_nfa" :subid("cuid_memo_306_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_186_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1271
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1048_tgt
    .local int rx1048_pos
    .local int rx1048_off
    .local int rx1048_eos
    .local int rx1048_rep
    .local pmc rx1048_cur
    .local pmc rx1048_curclass
    .local pmc rx1048_bstack
    .local pmc rx1048_cstack
    (rx1048_cur, rx1048_tgt, rx1048_pos, rx1048_curclass, rx1048_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1048_cur
    length rx1048_eos, rx1048_tgt
    eq $I19, 1, rx1048_restart2863
    gt rx1048_pos, rx1048_eos, rx1048_fail2864
    repr_get_attr_int $I11, self, rx1048_curclass, "$!from"
    ne $I11, -1, rxscan1049_done2870
    goto rxscan1049_scan2869
  rxscan1049_loop2868:
    inc rx1048_pos
    gt rx1048_pos, rx1048_eos, rx1048_fail2864
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!from", rx1048_pos
  rxscan1049_scan2869:
    nqp_rxmark rx1048_bstack, rxscan1049_loop2868, rx1048_pos, 0
  rxscan1049_done2870:
    nqp_rxmark rx1048_bstack, rxcap1050_fail2872, rx1048_pos, 0
    add $I11, rx1048_pos, 1
    gt $I11, rx1048_eos, rx1048_fail2864
    substr $S10, rx1048_tgt, rx1048_pos, 1
    ne $S10, ucs4:"*", rx1048_fail2864
    add rx1048_pos, 1
    nqp_rxpeek $I19, rx1048_bstack, rxcap1050_fail2872
    inc $I19
    set $I11, rx1048_bstack[$I19]
    $P11 = rx1048_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1048_pos)
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "sym")
    goto rxcap1050_done2871
  rxcap1050_fail2872:
    goto rx1048_fail2864
  rxcap1050_done2871:
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!pos", rx1048_pos
    $P11 = rx1048_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1048_curclass, "$!pos"
    lt $I11, 0, rx1048_fail2864
    nqp_rxmark rx1048_bstack, rxsubrule1051_pass2873, -1, 0
  rxsubrule1051_pass2873:
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1048_pos, $P11, rx1048_curclass, "$!pos"
    rx1048_cur."!cursor_pass"(rx1048_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1048_cur)
  rx1048_restart2863:
    repr_get_attr_obj rx1048_cstack, rx1048_cur, rx1048_curclass, "$!cstack"
  rx1048_fail2864:
    unless rx1048_bstack, rx1048_done2862
    pop $I19, rx1048_bstack
    if_null rx1048_cstack, rx1048_cstack_done2867
    unless rx1048_cstack, rx1048_cstack_done2867
    dec $I19
    set $P11, rx1048_cstack[$I19]
  rx1048_cstack_done2867:
    pop rx1048_rep, rx1048_bstack
    pop rx1048_pos, rx1048_bstack
    pop $I19, rx1048_bstack
    lt rx1048_pos, -1, rx1048_done2862
    lt rx1048_pos, 0, rx1048_fail2864
    eq $I19, 0, rx1048_fail2864
    nqp_islist $I20, rx1048_cstack
    unless $I20, rx1048_jump2865
    elements $I18, rx1048_bstack
    le $I18, 0, rx1048_cut2866
    dec $I18
    set $I18, rx1048_bstack[$I18]
  rx1048_cut2866:
    assign rx1048_cstack, $I18
  rx1048_jump2865:
    jump $I19
  rx1048_done2862:
    rx1048_cur."!cursor_fail"()
    .return (rx1048_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1346277629.325_caps" :subid("cuid_memo_307_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1346277629.325_nfa" :subid("cuid_memo_308_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_187_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1272
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1052_tgt
    .local int rx1052_pos
    .local int rx1052_off
    .local int rx1052_eos
    .local int rx1052_rep
    .local pmc rx1052_cur
    .local pmc rx1052_curclass
    .local pmc rx1052_bstack
    .local pmc rx1052_cstack
    (rx1052_cur, rx1052_tgt, rx1052_pos, rx1052_curclass, rx1052_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1052_cur
    length rx1052_eos, rx1052_tgt
    eq $I19, 1, rx1052_restart2876
    gt rx1052_pos, rx1052_eos, rx1052_fail2877
    repr_get_attr_int $I11, self, rx1052_curclass, "$!from"
    ne $I11, -1, rxscan1053_done2883
    goto rxscan1053_scan2882
  rxscan1053_loop2881:
    inc rx1052_pos
    gt rx1052_pos, rx1052_eos, rx1052_fail2877
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!from", rx1052_pos
  rxscan1053_scan2882:
    nqp_rxmark rx1052_bstack, rxscan1053_loop2881, rx1052_pos, 0
  rxscan1053_done2883:
    nqp_rxmark rx1052_bstack, rxcap1054_fail2885, rx1052_pos, 0
    add $I11, rx1052_pos, 1
    gt $I11, rx1052_eos, rx1052_fail2877
    substr $S10, rx1052_tgt, rx1052_pos, 1
    ne $S10, ucs4:"/", rx1052_fail2877
    add rx1052_pos, 1
    nqp_rxpeek $I19, rx1052_bstack, rxcap1054_fail2885
    inc $I19
    set $I11, rx1052_bstack[$I19]
    $P11 = rx1052_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1052_pos)
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "sym")
    goto rxcap1054_done2884
  rxcap1054_fail2885:
    goto rx1052_fail2877
  rxcap1054_done2884:
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2877
    nqp_rxmark rx1052_bstack, rxsubrule1055_pass2886, -1, 0
  rxsubrule1055_pass2886:
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
    rx1052_cur."!cursor_pass"(rx1052_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1052_cur)
  rx1052_restart2876:
    repr_get_attr_obj rx1052_cstack, rx1052_cur, rx1052_curclass, "$!cstack"
  rx1052_fail2877:
    unless rx1052_bstack, rx1052_done2875
    pop $I19, rx1052_bstack
    if_null rx1052_cstack, rx1052_cstack_done2880
    unless rx1052_cstack, rx1052_cstack_done2880
    dec $I19
    set $P11, rx1052_cstack[$I19]
  rx1052_cstack_done2880:
    pop rx1052_rep, rx1052_bstack
    pop rx1052_pos, rx1052_bstack
    pop $I19, rx1052_bstack
    lt rx1052_pos, -1, rx1052_done2875
    lt rx1052_pos, 0, rx1052_fail2877
    eq $I19, 0, rx1052_fail2877
    nqp_islist $I20, rx1052_cstack
    unless $I20, rx1052_jump2878
    elements $I18, rx1052_bstack
    le $I18, 0, rx1052_cut2879
    dec $I18
    set $I18, rx1052_bstack[$I18]
  rx1052_cut2879:
    assign rx1052_cstack, $I18
  rx1052_jump2878:
    jump $I19
  rx1052_done2875:
    rx1052_cur."!cursor_fail"()
    .return (rx1052_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1346277629.325_caps" :subid("cuid_memo_309_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1346277629.325_nfa" :subid("cuid_memo_310_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_188_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1056_tgt
    .local int rx1056_pos
    .local int rx1056_off
    .local int rx1056_eos
    .local int rx1056_rep
    .local pmc rx1056_cur
    .local pmc rx1056_curclass
    .local pmc rx1056_bstack
    .local pmc rx1056_cstack
    (rx1056_cur, rx1056_tgt, rx1056_pos, rx1056_curclass, rx1056_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1056_cur
    length rx1056_eos, rx1056_tgt
    eq $I19, 1, rx1056_restart2889
    gt rx1056_pos, rx1056_eos, rx1056_fail2890
    repr_get_attr_int $I11, self, rx1056_curclass, "$!from"
    ne $I11, -1, rxscan1057_done2896
    goto rxscan1057_scan2895
  rxscan1057_loop2894:
    inc rx1056_pos
    gt rx1056_pos, rx1056_eos, rx1056_fail2890
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!from", rx1056_pos
  rxscan1057_scan2895:
    nqp_rxmark rx1056_bstack, rxscan1057_loop2894, rx1056_pos, 0
  rxscan1057_done2896:
    nqp_rxmark rx1056_bstack, rxcap1058_fail2898, rx1056_pos, 0
    add $I11, rx1056_pos, 1
    gt $I11, rx1056_eos, rx1056_fail2890
    substr $S10, rx1056_tgt, rx1056_pos, 1
    ne $S10, ucs4:"%", rx1056_fail2890
    add rx1056_pos, 1
    nqp_rxpeek $I19, rx1056_bstack, rxcap1058_fail2898
    inc $I19
    set $I11, rx1056_bstack[$I19]
    $P11 = rx1056_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1056_pos)
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "sym")
    goto rxcap1058_done2897
  rxcap1058_fail2898:
    goto rx1056_fail2890
  rxcap1058_done2897:
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2890
    nqp_rxmark rx1056_bstack, rxsubrule1059_pass2899, -1, 0
  rxsubrule1059_pass2899:
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    rx1056_cur."!cursor_pass"(rx1056_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1056_cur)
  rx1056_restart2889:
    repr_get_attr_obj rx1056_cstack, rx1056_cur, rx1056_curclass, "$!cstack"
  rx1056_fail2890:
    unless rx1056_bstack, rx1056_done2888
    pop $I19, rx1056_bstack
    if_null rx1056_cstack, rx1056_cstack_done2893
    unless rx1056_cstack, rx1056_cstack_done2893
    dec $I19
    set $P11, rx1056_cstack[$I19]
  rx1056_cstack_done2893:
    pop rx1056_rep, rx1056_bstack
    pop rx1056_pos, rx1056_bstack
    pop $I19, rx1056_bstack
    lt rx1056_pos, -1, rx1056_done2888
    lt rx1056_pos, 0, rx1056_fail2890
    eq $I19, 0, rx1056_fail2890
    nqp_islist $I20, rx1056_cstack
    unless $I20, rx1056_jump2891
    elements $I18, rx1056_bstack
    le $I18, 0, rx1056_cut2892
    dec $I18
    set $I18, rx1056_bstack[$I18]
  rx1056_cut2892:
    assign rx1056_cstack, $I18
  rx1056_jump2891:
    jump $I19
  rx1056_done2888:
    rx1056_cur."!cursor_fail"()
    .return (rx1056_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1346277629.325_caps" :subid("cuid_memo_311_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1346277629.325_nfa" :subid("cuid_memo_312_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 37
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_189_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1060_tgt
    .local int rx1060_pos
    .local int rx1060_off
    .local int rx1060_eos
    .local int rx1060_rep
    .local pmc rx1060_cur
    .local pmc rx1060_curclass
    .local pmc rx1060_bstack
    .local pmc rx1060_cstack
    (rx1060_cur, rx1060_tgt, rx1060_pos, rx1060_curclass, rx1060_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1060_cur
    length rx1060_eos, rx1060_tgt
    eq $I19, 1, rx1060_restart2902
    gt rx1060_pos, rx1060_eos, rx1060_fail2903
    repr_get_attr_int $I11, self, rx1060_curclass, "$!from"
    ne $I11, -1, rxscan1061_done2909
    goto rxscan1061_scan2908
  rxscan1061_loop2907:
    inc rx1060_pos
    gt rx1060_pos, rx1060_eos, rx1060_fail2903
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!from", rx1060_pos
  rxscan1061_scan2908:
    nqp_rxmark rx1060_bstack, rxscan1061_loop2907, rx1060_pos, 0
  rxscan1061_done2909:
    nqp_rxmark rx1060_bstack, rxcap1062_fail2911, rx1060_pos, 0
    add $I11, rx1060_pos, 2
    gt $I11, rx1060_eos, rx1060_fail2903
    substr $S10, rx1060_tgt, rx1060_pos, 2
    ne $S10, ucs4:"+&", rx1060_fail2903
    add rx1060_pos, 2
    nqp_rxpeek $I19, rx1060_bstack, rxcap1062_fail2911
    inc $I19
    set $I11, rx1060_bstack[$I19]
    $P11 = rx1060_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1060_pos)
    rx1060_cstack = rx1060_cur."!cursor_capture"($P11, "sym")
    goto rxcap1062_done2910
  rxcap1062_fail2911:
    goto rx1060_fail2903
  rxcap1062_done2910:
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!pos", rx1060_pos
    $P11 = rx1060_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1060_curclass, "$!pos"
    lt $I11, 0, rx1060_fail2903
    nqp_rxmark rx1060_bstack, rxsubrule1063_pass2912, -1, 0
  rxsubrule1063_pass2912:
    rx1060_cstack = rx1060_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1060_pos, $P11, rx1060_curclass, "$!pos"
    rx1060_cur."!cursor_pass"(rx1060_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1060_cur)
  rx1060_restart2902:
    repr_get_attr_obj rx1060_cstack, rx1060_cur, rx1060_curclass, "$!cstack"
  rx1060_fail2903:
    unless rx1060_bstack, rx1060_done2901
    pop $I19, rx1060_bstack
    if_null rx1060_cstack, rx1060_cstack_done2906
    unless rx1060_cstack, rx1060_cstack_done2906
    dec $I19
    set $P11, rx1060_cstack[$I19]
  rx1060_cstack_done2906:
    pop rx1060_rep, rx1060_bstack
    pop rx1060_pos, rx1060_bstack
    pop $I19, rx1060_bstack
    lt rx1060_pos, -1, rx1060_done2901
    lt rx1060_pos, 0, rx1060_fail2903
    eq $I19, 0, rx1060_fail2903
    nqp_islist $I20, rx1060_cstack
    unless $I20, rx1060_jump2904
    elements $I18, rx1060_bstack
    le $I18, 0, rx1060_cut2905
    dec $I18
    set $I18, rx1060_bstack[$I18]
  rx1060_cut2905:
    assign rx1060_cstack, $I18
  rx1060_jump2904:
    jump $I19
  rx1060_done2901:
    rx1060_cur."!cursor_fail"()
    .return (rx1060_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1346277629.325_caps" :subid("cuid_memo_313_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1346277629.325_nfa" :subid("cuid_memo_314_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_190_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart2915
    gt rx1064_pos, rx1064_eos, rx1064_fail2916
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done2922
    goto rxscan1065_scan2921
  rxscan1065_loop2920:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail2916
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan2921:
    nqp_rxmark rx1064_bstack, rxscan1065_loop2920, rx1064_pos, 0
  rxscan1065_done2922:
    nqp_rxmark rx1064_bstack, rxcap1066_fail2924, rx1064_pos, 0
    add $I11, rx1064_pos, 1
    gt $I11, rx1064_eos, rx1064_fail2916
    substr $S10, rx1064_tgt, rx1064_pos, 1
    ne $S10, ucs4:"+", rx1064_fail2916
    add rx1064_pos, 1
    nqp_rxpeek $I19, rx1064_bstack, rxcap1066_fail2924
    inc $I19
    set $I11, rx1064_bstack[$I19]
    $P11 = rx1064_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1064_pos)
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "sym")
    goto rxcap1066_done2923
  rxcap1066_fail2924:
    goto rx1064_fail2916
  rxcap1066_done2923:
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2916
    nqp_rxmark rx1064_bstack, rxsubrule1067_pass2925, -1, 0
  rxsubrule1067_pass2925:
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1064_pos, $P11, rx1064_curclass, "$!pos"
    rx1064_cur."!cursor_pass"(rx1064_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart2915:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail2916:
    unless rx1064_bstack, rx1064_done2914
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done2919
    unless rx1064_cstack, rx1064_cstack_done2919
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done2919:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done2914
    lt rx1064_pos, 0, rx1064_fail2916
    eq $I19, 0, rx1064_fail2916
    nqp_islist $I20, rx1064_cstack
    unless $I20, rx1064_jump2917
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut2918
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut2918:
    assign rx1064_cstack, $I18
  rx1064_jump2917:
    jump $I19
  rx1064_done2914:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1346277629.325_caps" :subid("cuid_memo_315_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1346277629.325_nfa" :subid("cuid_memo_316_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_191_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1277
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1068_tgt
    .local int rx1068_pos
    .local int rx1068_off
    .local int rx1068_eos
    .local int rx1068_rep
    .local pmc rx1068_cur
    .local pmc rx1068_curclass
    .local pmc rx1068_bstack
    .local pmc rx1068_cstack
    (rx1068_cur, rx1068_tgt, rx1068_pos, rx1068_curclass, rx1068_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1068_cur
    length rx1068_eos, rx1068_tgt
    eq $I19, 1, rx1068_restart2928
    gt rx1068_pos, rx1068_eos, rx1068_fail2929
    repr_get_attr_int $I11, self, rx1068_curclass, "$!from"
    ne $I11, -1, rxscan1069_done2935
    goto rxscan1069_scan2934
  rxscan1069_loop2933:
    inc rx1068_pos
    gt rx1068_pos, rx1068_eos, rx1068_fail2929
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!from", rx1068_pos
  rxscan1069_scan2934:
    nqp_rxmark rx1068_bstack, rxscan1069_loop2933, rx1068_pos, 0
  rxscan1069_done2935:
    nqp_rxmark rx1068_bstack, rxcap1070_fail2937, rx1068_pos, 0
    add $I11, rx1068_pos, 1
    gt $I11, rx1068_eos, rx1068_fail2929
    substr $S10, rx1068_tgt, rx1068_pos, 1
    ne $S10, ucs4:"-", rx1068_fail2929
    add rx1068_pos, 1
    nqp_rxpeek $I19, rx1068_bstack, rxcap1070_fail2937
    inc $I19
    set $I11, rx1068_bstack[$I19]
    $P11 = rx1068_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1068_pos)
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "sym")
    goto rxcap1070_done2936
  rxcap1070_fail2937:
    goto rx1068_fail2929
  rxcap1070_done2936:
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!pos", rx1068_pos
    $P11 = rx1068_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1068_curclass, "$!pos"
    lt $I11, 0, rx1068_fail2929
    nqp_rxmark rx1068_bstack, rxsubrule1071_pass2938, -1, 0
  rxsubrule1071_pass2938:
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1068_pos, $P11, rx1068_curclass, "$!pos"
    rx1068_cur."!cursor_pass"(rx1068_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1068_cur)
  rx1068_restart2928:
    repr_get_attr_obj rx1068_cstack, rx1068_cur, rx1068_curclass, "$!cstack"
  rx1068_fail2929:
    unless rx1068_bstack, rx1068_done2927
    pop $I19, rx1068_bstack
    if_null rx1068_cstack, rx1068_cstack_done2932
    unless rx1068_cstack, rx1068_cstack_done2932
    dec $I19
    set $P11, rx1068_cstack[$I19]
  rx1068_cstack_done2932:
    pop rx1068_rep, rx1068_bstack
    pop rx1068_pos, rx1068_bstack
    pop $I19, rx1068_bstack
    lt rx1068_pos, -1, rx1068_done2927
    lt rx1068_pos, 0, rx1068_fail2929
    eq $I19, 0, rx1068_fail2929
    nqp_islist $I20, rx1068_cstack
    unless $I20, rx1068_jump2930
    elements $I18, rx1068_bstack
    le $I18, 0, rx1068_cut2931
    dec $I18
    set $I18, rx1068_bstack[$I18]
  rx1068_cut2931:
    assign rx1068_cstack, $I18
  rx1068_jump2930:
    jump $I19
  rx1068_done2927:
    rx1068_cur."!cursor_fail"()
    .return (rx1068_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1346277629.325_caps" :subid("cuid_memo_317_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1346277629.325_nfa" :subid("cuid_memo_318_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_192_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1072_tgt
    .local int rx1072_pos
    .local int rx1072_off
    .local int rx1072_eos
    .local int rx1072_rep
    .local pmc rx1072_cur
    .local pmc rx1072_curclass
    .local pmc rx1072_bstack
    .local pmc rx1072_cstack
    (rx1072_cur, rx1072_tgt, rx1072_pos, rx1072_curclass, rx1072_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1072_cur
    length rx1072_eos, rx1072_tgt
    eq $I19, 1, rx1072_restart2941
    gt rx1072_pos, rx1072_eos, rx1072_fail2942
    repr_get_attr_int $I11, self, rx1072_curclass, "$!from"
    ne $I11, -1, rxscan1073_done2948
    goto rxscan1073_scan2947
  rxscan1073_loop2946:
    inc rx1072_pos
    gt rx1072_pos, rx1072_eos, rx1072_fail2942
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!from", rx1072_pos
  rxscan1073_scan2947:
    nqp_rxmark rx1072_bstack, rxscan1073_loop2946, rx1072_pos, 0
  rxscan1073_done2948:
    nqp_rxmark rx1072_bstack, rxcap1074_fail2950, rx1072_pos, 0
    add $I11, rx1072_pos, 2
    gt $I11, rx1072_eos, rx1072_fail2942
    substr $S10, rx1072_tgt, rx1072_pos, 2
    ne $S10, ucs4:"+|", rx1072_fail2942
    add rx1072_pos, 2
    nqp_rxpeek $I19, rx1072_bstack, rxcap1074_fail2950
    inc $I19
    set $I11, rx1072_bstack[$I19]
    $P11 = rx1072_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1072_pos)
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "sym")
    goto rxcap1074_done2949
  rxcap1074_fail2950:
    goto rx1072_fail2942
  rxcap1074_done2949:
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail2942
    nqp_rxmark rx1072_bstack, rxsubrule1075_pass2951, -1, 0
  rxsubrule1075_pass2951:
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    rx1072_cur."!cursor_pass"(rx1072_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1072_cur)
  rx1072_restart2941:
    repr_get_attr_obj rx1072_cstack, rx1072_cur, rx1072_curclass, "$!cstack"
  rx1072_fail2942:
    unless rx1072_bstack, rx1072_done2940
    pop $I19, rx1072_bstack
    if_null rx1072_cstack, rx1072_cstack_done2945
    unless rx1072_cstack, rx1072_cstack_done2945
    dec $I19
    set $P11, rx1072_cstack[$I19]
  rx1072_cstack_done2945:
    pop rx1072_rep, rx1072_bstack
    pop rx1072_pos, rx1072_bstack
    pop $I19, rx1072_bstack
    lt rx1072_pos, -1, rx1072_done2940
    lt rx1072_pos, 0, rx1072_fail2942
    eq $I19, 0, rx1072_fail2942
    nqp_islist $I20, rx1072_cstack
    unless $I20, rx1072_jump2943
    elements $I18, rx1072_bstack
    le $I18, 0, rx1072_cut2944
    dec $I18
    set $I18, rx1072_bstack[$I18]
  rx1072_cut2944:
    assign rx1072_cstack, $I18
  rx1072_jump2943:
    jump $I19
  rx1072_done2940:
    rx1072_cur."!cursor_fail"()
    .return (rx1072_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1346277629.325_caps" :subid("cuid_memo_319_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1346277629.325_nfa" :subid("cuid_memo_320_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_193_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1279
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart2954
    gt rx1076_pos, rx1076_eos, rx1076_fail2955
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done2961
    goto rxscan1077_scan2960
  rxscan1077_loop2959:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail2955
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan2960:
    nqp_rxmark rx1076_bstack, rxscan1077_loop2959, rx1076_pos, 0
  rxscan1077_done2961:
    nqp_rxmark rx1076_bstack, rxcap1078_fail2963, rx1076_pos, 0
    add $I11, rx1076_pos, 2
    gt $I11, rx1076_eos, rx1076_fail2955
    substr $S10, rx1076_tgt, rx1076_pos, 2
    ne $S10, ucs4:"+^", rx1076_fail2955
    add rx1076_pos, 2
    nqp_rxpeek $I19, rx1076_bstack, rxcap1078_fail2963
    inc $I19
    set $I11, rx1076_bstack[$I19]
    $P11 = rx1076_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1076_pos)
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "sym")
    goto rxcap1078_done2962
  rxcap1078_fail2963:
    goto rx1076_fail2955
  rxcap1078_done2962:
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2955
    nqp_rxmark rx1076_bstack, rxsubrule1079_pass2964, -1, 0
  rxsubrule1079_pass2964:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    rx1076_cur."!cursor_pass"(rx1076_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart2954:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail2955:
    unless rx1076_bstack, rx1076_done2953
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done2958
    unless rx1076_cstack, rx1076_cstack_done2958
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done2958:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done2953
    lt rx1076_pos, 0, rx1076_fail2955
    eq $I19, 0, rx1076_fail2955
    nqp_islist $I20, rx1076_cstack
    unless $I20, rx1076_jump2956
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut2957
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut2957:
    assign rx1076_cstack, $I18
  rx1076_jump2956:
    jump $I19
  rx1076_done2953:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1346277629.325_caps" :subid("cuid_memo_321_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1346277629.325_nfa" :subid("cuid_memo_322_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 94
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_194_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1080_tgt
    .local int rx1080_pos
    .local int rx1080_off
    .local int rx1080_eos
    .local int rx1080_rep
    .local pmc rx1080_cur
    .local pmc rx1080_curclass
    .local pmc rx1080_bstack
    .local pmc rx1080_cstack
    (rx1080_cur, rx1080_tgt, rx1080_pos, rx1080_curclass, rx1080_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1080_cur
    length rx1080_eos, rx1080_tgt
    eq $I19, 1, rx1080_restart2967
    gt rx1080_pos, rx1080_eos, rx1080_fail2968
    repr_get_attr_int $I11, self, rx1080_curclass, "$!from"
    ne $I11, -1, rxscan1081_done2974
    goto rxscan1081_scan2973
  rxscan1081_loop2972:
    inc rx1080_pos
    gt rx1080_pos, rx1080_eos, rx1080_fail2968
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!from", rx1080_pos
  rxscan1081_scan2973:
    nqp_rxmark rx1080_bstack, rxscan1081_loop2972, rx1080_pos, 0
  rxscan1081_done2974:
    nqp_rxmark rx1080_bstack, rxcap1082_fail2976, rx1080_pos, 0
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2968
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:"~", rx1080_fail2968
    add rx1080_pos, 1
    nqp_rxpeek $I19, rx1080_bstack, rxcap1082_fail2976
    inc $I19
    set $I11, rx1080_bstack[$I19]
    $P11 = rx1080_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1080_pos)
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "sym")
    goto rxcap1082_done2975
  rxcap1082_fail2976:
    goto rx1080_fail2968
  rxcap1082_done2975:
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2968
    nqp_rxmark rx1080_bstack, rxsubrule1083_pass2977, -1, 0
  rxsubrule1083_pass2977:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    rx1080_cur."!cursor_pass"(rx1080_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1080_cur)
  rx1080_restart2967:
    repr_get_attr_obj rx1080_cstack, rx1080_cur, rx1080_curclass, "$!cstack"
  rx1080_fail2968:
    unless rx1080_bstack, rx1080_done2966
    pop $I19, rx1080_bstack
    if_null rx1080_cstack, rx1080_cstack_done2971
    unless rx1080_cstack, rx1080_cstack_done2971
    dec $I19
    set $P11, rx1080_cstack[$I19]
  rx1080_cstack_done2971:
    pop rx1080_rep, rx1080_bstack
    pop rx1080_pos, rx1080_bstack
    pop $I19, rx1080_bstack
    lt rx1080_pos, -1, rx1080_done2966
    lt rx1080_pos, 0, rx1080_fail2968
    eq $I19, 0, rx1080_fail2968
    nqp_islist $I20, rx1080_cstack
    unless $I20, rx1080_jump2969
    elements $I18, rx1080_bstack
    le $I18, 0, rx1080_cut2970
    dec $I18
    set $I18, rx1080_bstack[$I18]
  rx1080_cut2970:
    assign rx1080_cstack, $I18
  rx1080_jump2969:
    jump $I19
  rx1080_done2966:
    rx1080_cur."!cursor_fail"()
    .return (rx1080_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1346277629.325_caps" :subid("cuid_memo_323_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1346277629.325_nfa" :subid("cuid_memo_324_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_195_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1283
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1084_tgt
    .local int rx1084_pos
    .local int rx1084_off
    .local int rx1084_eos
    .local int rx1084_rep
    .local pmc rx1084_cur
    .local pmc rx1084_curclass
    .local pmc rx1084_bstack
    .local pmc rx1084_cstack
    (rx1084_cur, rx1084_tgt, rx1084_pos, rx1084_curclass, rx1084_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1084_cur
    length rx1084_eos, rx1084_tgt
    eq $I19, 1, rx1084_restart2980
    gt rx1084_pos, rx1084_eos, rx1084_fail2981
    repr_get_attr_int $I11, self, rx1084_curclass, "$!from"
    ne $I11, -1, rxscan1085_done2987
    goto rxscan1085_scan2986
  rxscan1085_loop2985:
    inc rx1084_pos
    gt rx1084_pos, rx1084_eos, rx1084_fail2981
    repr_bind_attr_int rx1084_cur, rx1084_curclass, "$!from", rx1084_pos
  rxscan1085_scan2986:
    nqp_rxmark rx1084_bstack, rxscan1085_loop2985, rx1084_pos, 0
  rxscan1085_done2987:
    nqp_rxmark rx1084_bstack, rxcap1086_fail2989, rx1084_pos, 0
    add $I11, rx1084_pos, 2
    gt $I11, rx1084_eos, rx1084_fail2981
    substr $S10, rx1084_tgt, rx1084_pos, 2
    ne $S10, ucs4:"==", rx1084_fail2981
    add rx1084_pos, 2
    nqp_rxpeek $I19, rx1084_bstack, rxcap1086_fail2989
    inc $I19
    set $I11, rx1084_bstack[$I19]
    $P11 = rx1084_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1084_pos)
    rx1084_cstack = rx1084_cur."!cursor_capture"($P11, "sym")
    goto rxcap1086_done2988
  rxcap1086_fail2989:
    goto rx1084_fail2981
  rxcap1086_done2988:
    repr_bind_attr_int rx1084_cur, rx1084_curclass, "$!pos", rx1084_pos
    $P11 = rx1084_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1084_curclass, "$!pos"
    lt $I11, 0, rx1084_fail2981
    nqp_rxmark rx1084_bstack, rxsubrule1087_pass2990, -1, 0
  rxsubrule1087_pass2990:
    rx1084_cstack = rx1084_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1084_pos, $P11, rx1084_curclass, "$!pos"
    rx1084_cur."!cursor_pass"(rx1084_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1084_cur)
  rx1084_restart2980:
    repr_get_attr_obj rx1084_cstack, rx1084_cur, rx1084_curclass, "$!cstack"
  rx1084_fail2981:
    unless rx1084_bstack, rx1084_done2979
    pop $I19, rx1084_bstack
    if_null rx1084_cstack, rx1084_cstack_done2984
    unless rx1084_cstack, rx1084_cstack_done2984
    dec $I19
    set $P11, rx1084_cstack[$I19]
  rx1084_cstack_done2984:
    pop rx1084_rep, rx1084_bstack
    pop rx1084_pos, rx1084_bstack
    pop $I19, rx1084_bstack
    lt rx1084_pos, -1, rx1084_done2979
    lt rx1084_pos, 0, rx1084_fail2981
    eq $I19, 0, rx1084_fail2981
    nqp_islist $I20, rx1084_cstack
    unless $I20, rx1084_jump2982
    elements $I18, rx1084_bstack
    le $I18, 0, rx1084_cut2983
    dec $I18
    set $I18, rx1084_bstack[$I18]
  rx1084_cut2983:
    assign rx1084_cstack, $I18
  rx1084_jump2982:
    jump $I19
  rx1084_done2979:
    rx1084_cur."!cursor_fail"()
    .return (rx1084_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1346277629.325_caps" :subid("cuid_memo_325_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1346277629.325_nfa" :subid("cuid_memo_326_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_196_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1284
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1088_tgt
    .local int rx1088_pos
    .local int rx1088_off
    .local int rx1088_eos
    .local int rx1088_rep
    .local pmc rx1088_cur
    .local pmc rx1088_curclass
    .local pmc rx1088_bstack
    .local pmc rx1088_cstack
    (rx1088_cur, rx1088_tgt, rx1088_pos, rx1088_curclass, rx1088_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1088_cur
    length rx1088_eos, rx1088_tgt
    eq $I19, 1, rx1088_restart2993
    gt rx1088_pos, rx1088_eos, rx1088_fail2994
    repr_get_attr_int $I11, self, rx1088_curclass, "$!from"
    ne $I11, -1, rxscan1089_done3000
    goto rxscan1089_scan2999
  rxscan1089_loop2998:
    inc rx1088_pos
    gt rx1088_pos, rx1088_eos, rx1088_fail2994
    repr_bind_attr_int rx1088_cur, rx1088_curclass, "$!from", rx1088_pos
  rxscan1089_scan2999:
    nqp_rxmark rx1088_bstack, rxscan1089_loop2998, rx1088_pos, 0
  rxscan1089_done3000:
    nqp_rxmark rx1088_bstack, rxcap1090_fail3002, rx1088_pos, 0
    add $I11, rx1088_pos, 2
    gt $I11, rx1088_eos, rx1088_fail2994
    substr $S10, rx1088_tgt, rx1088_pos, 2
    ne $S10, ucs4:"!=", rx1088_fail2994
    add rx1088_pos, 2
    nqp_rxpeek $I19, rx1088_bstack, rxcap1090_fail3002
    inc $I19
    set $I11, rx1088_bstack[$I19]
    $P11 = rx1088_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1088_pos)
    rx1088_cstack = rx1088_cur."!cursor_capture"($P11, "sym")
    goto rxcap1090_done3001
  rxcap1090_fail3002:
    goto rx1088_fail2994
  rxcap1090_done3001:
    repr_bind_attr_int rx1088_cur, rx1088_curclass, "$!pos", rx1088_pos
    $P11 = rx1088_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1088_curclass, "$!pos"
    lt $I11, 0, rx1088_fail2994
    nqp_rxmark rx1088_bstack, rxsubrule1091_pass3003, -1, 0
  rxsubrule1091_pass3003:
    rx1088_cstack = rx1088_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1088_pos, $P11, rx1088_curclass, "$!pos"
    rx1088_cur."!cursor_pass"(rx1088_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1088_cur)
  rx1088_restart2993:
    repr_get_attr_obj rx1088_cstack, rx1088_cur, rx1088_curclass, "$!cstack"
  rx1088_fail2994:
    unless rx1088_bstack, rx1088_done2992
    pop $I19, rx1088_bstack
    if_null rx1088_cstack, rx1088_cstack_done2997
    unless rx1088_cstack, rx1088_cstack_done2997
    dec $I19
    set $P11, rx1088_cstack[$I19]
  rx1088_cstack_done2997:
    pop rx1088_rep, rx1088_bstack
    pop rx1088_pos, rx1088_bstack
    pop $I19, rx1088_bstack
    lt rx1088_pos, -1, rx1088_done2992
    lt rx1088_pos, 0, rx1088_fail2994
    eq $I19, 0, rx1088_fail2994
    nqp_islist $I20, rx1088_cstack
    unless $I20, rx1088_jump2995
    elements $I18, rx1088_bstack
    le $I18, 0, rx1088_cut2996
    dec $I18
    set $I18, rx1088_bstack[$I18]
  rx1088_cut2996:
    assign rx1088_cstack, $I18
  rx1088_jump2995:
    jump $I19
  rx1088_done2992:
    rx1088_cur."!cursor_fail"()
    .return (rx1088_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1346277629.325_caps" :subid("cuid_memo_327_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1346277629.325_nfa" :subid("cuid_memo_328_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_197_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1092_tgt
    .local int rx1092_pos
    .local int rx1092_off
    .local int rx1092_eos
    .local int rx1092_rep
    .local pmc rx1092_cur
    .local pmc rx1092_curclass
    .local pmc rx1092_bstack
    .local pmc rx1092_cstack
    (rx1092_cur, rx1092_tgt, rx1092_pos, rx1092_curclass, rx1092_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1092_cur
    length rx1092_eos, rx1092_tgt
    eq $I19, 1, rx1092_restart3006
    gt rx1092_pos, rx1092_eos, rx1092_fail3007
    repr_get_attr_int $I11, self, rx1092_curclass, "$!from"
    ne $I11, -1, rxscan1093_done3013
    goto rxscan1093_scan3012
  rxscan1093_loop3011:
    inc rx1092_pos
    gt rx1092_pos, rx1092_eos, rx1092_fail3007
    repr_bind_attr_int rx1092_cur, rx1092_curclass, "$!from", rx1092_pos
  rxscan1093_scan3012:
    nqp_rxmark rx1092_bstack, rxscan1093_loop3011, rx1092_pos, 0
  rxscan1093_done3013:
    nqp_rxmark rx1092_bstack, rxcap1094_fail3015, rx1092_pos, 0
    add $I11, rx1092_pos, 2
    gt $I11, rx1092_eos, rx1092_fail3007
    substr $S10, rx1092_tgt, rx1092_pos, 2
    ne $S10, ucs4:"<=", rx1092_fail3007
    add rx1092_pos, 2
    nqp_rxpeek $I19, rx1092_bstack, rxcap1094_fail3015
    inc $I19
    set $I11, rx1092_bstack[$I19]
    $P11 = rx1092_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1092_pos)
    rx1092_cstack = rx1092_cur."!cursor_capture"($P11, "sym")
    goto rxcap1094_done3014
  rxcap1094_fail3015:
    goto rx1092_fail3007
  rxcap1094_done3014:
    repr_bind_attr_int rx1092_cur, rx1092_curclass, "$!pos", rx1092_pos
    $P11 = rx1092_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1092_curclass, "$!pos"
    lt $I11, 0, rx1092_fail3007
    nqp_rxmark rx1092_bstack, rxsubrule1095_pass3016, -1, 0
  rxsubrule1095_pass3016:
    rx1092_cstack = rx1092_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1092_pos, $P11, rx1092_curclass, "$!pos"
    rx1092_cur."!cursor_pass"(rx1092_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1092_cur)
  rx1092_restart3006:
    repr_get_attr_obj rx1092_cstack, rx1092_cur, rx1092_curclass, "$!cstack"
  rx1092_fail3007:
    unless rx1092_bstack, rx1092_done3005
    pop $I19, rx1092_bstack
    if_null rx1092_cstack, rx1092_cstack_done3010
    unless rx1092_cstack, rx1092_cstack_done3010
    dec $I19
    set $P11, rx1092_cstack[$I19]
  rx1092_cstack_done3010:
    pop rx1092_rep, rx1092_bstack
    pop rx1092_pos, rx1092_bstack
    pop $I19, rx1092_bstack
    lt rx1092_pos, -1, rx1092_done3005
    lt rx1092_pos, 0, rx1092_fail3007
    eq $I19, 0, rx1092_fail3007
    nqp_islist $I20, rx1092_cstack
    unless $I20, rx1092_jump3008
    elements $I18, rx1092_bstack
    le $I18, 0, rx1092_cut3009
    dec $I18
    set $I18, rx1092_bstack[$I18]
  rx1092_cut3009:
    assign rx1092_cstack, $I18
  rx1092_jump3008:
    jump $I19
  rx1092_done3005:
    rx1092_cur."!cursor_fail"()
    .return (rx1092_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1346277629.325_caps" :subid("cuid_memo_329_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1346277629.325_nfa" :subid("cuid_memo_330_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_198_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1096_tgt
    .local int rx1096_pos
    .local int rx1096_off
    .local int rx1096_eos
    .local int rx1096_rep
    .local pmc rx1096_cur
    .local pmc rx1096_curclass
    .local pmc rx1096_bstack
    .local pmc rx1096_cstack
    (rx1096_cur, rx1096_tgt, rx1096_pos, rx1096_curclass, rx1096_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1096_cur
    length rx1096_eos, rx1096_tgt
    eq $I19, 1, rx1096_restart3019
    gt rx1096_pos, rx1096_eos, rx1096_fail3020
    repr_get_attr_int $I11, self, rx1096_curclass, "$!from"
    ne $I11, -1, rxscan1097_done3026
    goto rxscan1097_scan3025
  rxscan1097_loop3024:
    inc rx1096_pos
    gt rx1096_pos, rx1096_eos, rx1096_fail3020
    repr_bind_attr_int rx1096_cur, rx1096_curclass, "$!from", rx1096_pos
  rxscan1097_scan3025:
    nqp_rxmark rx1096_bstack, rxscan1097_loop3024, rx1096_pos, 0
  rxscan1097_done3026:
    nqp_rxmark rx1096_bstack, rxcap1098_fail3028, rx1096_pos, 0
    add $I11, rx1096_pos, 2
    gt $I11, rx1096_eos, rx1096_fail3020
    substr $S10, rx1096_tgt, rx1096_pos, 2
    ne $S10, ucs4:">=", rx1096_fail3020
    add rx1096_pos, 2
    nqp_rxpeek $I19, rx1096_bstack, rxcap1098_fail3028
    inc $I19
    set $I11, rx1096_bstack[$I19]
    $P11 = rx1096_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1096_pos)
    rx1096_cstack = rx1096_cur."!cursor_capture"($P11, "sym")
    goto rxcap1098_done3027
  rxcap1098_fail3028:
    goto rx1096_fail3020
  rxcap1098_done3027:
    repr_bind_attr_int rx1096_cur, rx1096_curclass, "$!pos", rx1096_pos
    $P11 = rx1096_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1096_curclass, "$!pos"
    lt $I11, 0, rx1096_fail3020
    nqp_rxmark rx1096_bstack, rxsubrule1099_pass3029, -1, 0
  rxsubrule1099_pass3029:
    rx1096_cstack = rx1096_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1096_pos, $P11, rx1096_curclass, "$!pos"
    rx1096_cur."!cursor_pass"(rx1096_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1096_cur)
  rx1096_restart3019:
    repr_get_attr_obj rx1096_cstack, rx1096_cur, rx1096_curclass, "$!cstack"
  rx1096_fail3020:
    unless rx1096_bstack, rx1096_done3018
    pop $I19, rx1096_bstack
    if_null rx1096_cstack, rx1096_cstack_done3023
    unless rx1096_cstack, rx1096_cstack_done3023
    dec $I19
    set $P11, rx1096_cstack[$I19]
  rx1096_cstack_done3023:
    pop rx1096_rep, rx1096_bstack
    pop rx1096_pos, rx1096_bstack
    pop $I19, rx1096_bstack
    lt rx1096_pos, -1, rx1096_done3018
    lt rx1096_pos, 0, rx1096_fail3020
    eq $I19, 0, rx1096_fail3020
    nqp_islist $I20, rx1096_cstack
    unless $I20, rx1096_jump3021
    elements $I18, rx1096_bstack
    le $I18, 0, rx1096_cut3022
    dec $I18
    set $I18, rx1096_bstack[$I18]
  rx1096_cut3022:
    assign rx1096_cstack, $I18
  rx1096_jump3021:
    jump $I19
  rx1096_done3018:
    rx1096_cur."!cursor_fail"()
    .return (rx1096_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1346277629.325_caps" :subid("cuid_memo_331_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1346277629.325_nfa" :subid("cuid_memo_332_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_199_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1287
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1100_tgt
    .local int rx1100_pos
    .local int rx1100_off
    .local int rx1100_eos
    .local int rx1100_rep
    .local pmc rx1100_cur
    .local pmc rx1100_curclass
    .local pmc rx1100_bstack
    .local pmc rx1100_cstack
    (rx1100_cur, rx1100_tgt, rx1100_pos, rx1100_curclass, rx1100_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1100_cur
    length rx1100_eos, rx1100_tgt
    eq $I19, 1, rx1100_restart3032
    gt rx1100_pos, rx1100_eos, rx1100_fail3033
    repr_get_attr_int $I11, self, rx1100_curclass, "$!from"
    ne $I11, -1, rxscan1101_done3039
    goto rxscan1101_scan3038
  rxscan1101_loop3037:
    inc rx1100_pos
    gt rx1100_pos, rx1100_eos, rx1100_fail3033
    repr_bind_attr_int rx1100_cur, rx1100_curclass, "$!from", rx1100_pos
  rxscan1101_scan3038:
    nqp_rxmark rx1100_bstack, rxscan1101_loop3037, rx1100_pos, 0
  rxscan1101_done3039:
    nqp_rxmark rx1100_bstack, rxcap1102_fail3041, rx1100_pos, 0
    add $I11, rx1100_pos, 1
    gt $I11, rx1100_eos, rx1100_fail3033
    substr $S10, rx1100_tgt, rx1100_pos, 1
    ne $S10, ucs4:"<", rx1100_fail3033
    add rx1100_pos, 1
    nqp_rxpeek $I19, rx1100_bstack, rxcap1102_fail3041
    inc $I19
    set $I11, rx1100_bstack[$I19]
    $P11 = rx1100_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1100_pos)
    rx1100_cstack = rx1100_cur."!cursor_capture"($P11, "sym")
    goto rxcap1102_done3040
  rxcap1102_fail3041:
    goto rx1100_fail3033
  rxcap1102_done3040:
    repr_bind_attr_int rx1100_cur, rx1100_curclass, "$!pos", rx1100_pos
    $P11 = rx1100_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1100_curclass, "$!pos"
    lt $I11, 0, rx1100_fail3033
    nqp_rxmark rx1100_bstack, rxsubrule1103_pass3042, -1, 0
  rxsubrule1103_pass3042:
    rx1100_cstack = rx1100_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1100_pos, $P11, rx1100_curclass, "$!pos"
    rx1100_cur."!cursor_pass"(rx1100_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1100_cur)
  rx1100_restart3032:
    repr_get_attr_obj rx1100_cstack, rx1100_cur, rx1100_curclass, "$!cstack"
  rx1100_fail3033:
    unless rx1100_bstack, rx1100_done3031
    pop $I19, rx1100_bstack
    if_null rx1100_cstack, rx1100_cstack_done3036
    unless rx1100_cstack, rx1100_cstack_done3036
    dec $I19
    set $P11, rx1100_cstack[$I19]
  rx1100_cstack_done3036:
    pop rx1100_rep, rx1100_bstack
    pop rx1100_pos, rx1100_bstack
    pop $I19, rx1100_bstack
    lt rx1100_pos, -1, rx1100_done3031
    lt rx1100_pos, 0, rx1100_fail3033
    eq $I19, 0, rx1100_fail3033
    nqp_islist $I20, rx1100_cstack
    unless $I20, rx1100_jump3034
    elements $I18, rx1100_bstack
    le $I18, 0, rx1100_cut3035
    dec $I18
    set $I18, rx1100_bstack[$I18]
  rx1100_cut3035:
    assign rx1100_cstack, $I18
  rx1100_jump3034:
    jump $I19
  rx1100_done3031:
    rx1100_cur."!cursor_fail"()
    .return (rx1100_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1346277629.325_caps" :subid("cuid_memo_333_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1346277629.325_nfa" :subid("cuid_memo_334_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_200_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1104_tgt
    .local int rx1104_pos
    .local int rx1104_off
    .local int rx1104_eos
    .local int rx1104_rep
    .local pmc rx1104_cur
    .local pmc rx1104_curclass
    .local pmc rx1104_bstack
    .local pmc rx1104_cstack
    (rx1104_cur, rx1104_tgt, rx1104_pos, rx1104_curclass, rx1104_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1104_cur
    length rx1104_eos, rx1104_tgt
    eq $I19, 1, rx1104_restart3045
    gt rx1104_pos, rx1104_eos, rx1104_fail3046
    repr_get_attr_int $I11, self, rx1104_curclass, "$!from"
    ne $I11, -1, rxscan1105_done3052
    goto rxscan1105_scan3051
  rxscan1105_loop3050:
    inc rx1104_pos
    gt rx1104_pos, rx1104_eos, rx1104_fail3046
    repr_bind_attr_int rx1104_cur, rx1104_curclass, "$!from", rx1104_pos
  rxscan1105_scan3051:
    nqp_rxmark rx1104_bstack, rxscan1105_loop3050, rx1104_pos, 0
  rxscan1105_done3052:
    nqp_rxmark rx1104_bstack, rxcap1106_fail3054, rx1104_pos, 0
    add $I11, rx1104_pos, 1
    gt $I11, rx1104_eos, rx1104_fail3046
    substr $S10, rx1104_tgt, rx1104_pos, 1
    ne $S10, ucs4:">", rx1104_fail3046
    add rx1104_pos, 1
    nqp_rxpeek $I19, rx1104_bstack, rxcap1106_fail3054
    inc $I19
    set $I11, rx1104_bstack[$I19]
    $P11 = rx1104_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1104_pos)
    rx1104_cstack = rx1104_cur."!cursor_capture"($P11, "sym")
    goto rxcap1106_done3053
  rxcap1106_fail3054:
    goto rx1104_fail3046
  rxcap1106_done3053:
    repr_bind_attr_int rx1104_cur, rx1104_curclass, "$!pos", rx1104_pos
    $P11 = rx1104_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1104_curclass, "$!pos"
    lt $I11, 0, rx1104_fail3046
    nqp_rxmark rx1104_bstack, rxsubrule1107_pass3055, -1, 0
  rxsubrule1107_pass3055:
    rx1104_cstack = rx1104_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1104_pos, $P11, rx1104_curclass, "$!pos"
    rx1104_cur."!cursor_pass"(rx1104_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1104_cur)
  rx1104_restart3045:
    repr_get_attr_obj rx1104_cstack, rx1104_cur, rx1104_curclass, "$!cstack"
  rx1104_fail3046:
    unless rx1104_bstack, rx1104_done3044
    pop $I19, rx1104_bstack
    if_null rx1104_cstack, rx1104_cstack_done3049
    unless rx1104_cstack, rx1104_cstack_done3049
    dec $I19
    set $P11, rx1104_cstack[$I19]
  rx1104_cstack_done3049:
    pop rx1104_rep, rx1104_bstack
    pop rx1104_pos, rx1104_bstack
    pop $I19, rx1104_bstack
    lt rx1104_pos, -1, rx1104_done3044
    lt rx1104_pos, 0, rx1104_fail3046
    eq $I19, 0, rx1104_fail3046
    nqp_islist $I20, rx1104_cstack
    unless $I20, rx1104_jump3047
    elements $I18, rx1104_bstack
    le $I18, 0, rx1104_cut3048
    dec $I18
    set $I18, rx1104_bstack[$I18]
  rx1104_cut3048:
    assign rx1104_cstack, $I18
  rx1104_jump3047:
    jump $I19
  rx1104_done3044:
    rx1104_cur."!cursor_fail"()
    .return (rx1104_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1346277629.325_caps" :subid("cuid_memo_335_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1346277629.325_nfa" :subid("cuid_memo_336_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_201_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1108_tgt
    .local int rx1108_pos
    .local int rx1108_off
    .local int rx1108_eos
    .local int rx1108_rep
    .local pmc rx1108_cur
    .local pmc rx1108_curclass
    .local pmc rx1108_bstack
    .local pmc rx1108_cstack
    (rx1108_cur, rx1108_tgt, rx1108_pos, rx1108_curclass, rx1108_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1108_cur
    length rx1108_eos, rx1108_tgt
    eq $I19, 1, rx1108_restart3058
    gt rx1108_pos, rx1108_eos, rx1108_fail3059
    repr_get_attr_int $I11, self, rx1108_curclass, "$!from"
    ne $I11, -1, rxscan1109_done3065
    goto rxscan1109_scan3064
  rxscan1109_loop3063:
    inc rx1108_pos
    gt rx1108_pos, rx1108_eos, rx1108_fail3059
    repr_bind_attr_int rx1108_cur, rx1108_curclass, "$!from", rx1108_pos
  rxscan1109_scan3064:
    nqp_rxmark rx1108_bstack, rxscan1109_loop3063, rx1108_pos, 0
  rxscan1109_done3065:
    nqp_rxmark rx1108_bstack, rxcap1110_fail3067, rx1108_pos, 0
    add $I11, rx1108_pos, 2
    gt $I11, rx1108_eos, rx1108_fail3059
    substr $S10, rx1108_tgt, rx1108_pos, 2
    ne $S10, ucs4:"eq", rx1108_fail3059
    add rx1108_pos, 2
    nqp_rxpeek $I19, rx1108_bstack, rxcap1110_fail3067
    inc $I19
    set $I11, rx1108_bstack[$I19]
    $P11 = rx1108_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1108_pos)
    rx1108_cstack = rx1108_cur."!cursor_capture"($P11, "sym")
    goto rxcap1110_done3066
  rxcap1110_fail3067:
    goto rx1108_fail3059
  rxcap1110_done3066:
    repr_bind_attr_int rx1108_cur, rx1108_curclass, "$!pos", rx1108_pos
    $P11 = rx1108_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1108_curclass, "$!pos"
    lt $I11, 0, rx1108_fail3059
    nqp_rxmark rx1108_bstack, rxsubrule1111_pass3068, -1, 0
  rxsubrule1111_pass3068:
    rx1108_cstack = rx1108_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1108_pos, $P11, rx1108_curclass, "$!pos"
    rx1108_cur."!cursor_pass"(rx1108_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1108_cur)
  rx1108_restart3058:
    repr_get_attr_obj rx1108_cstack, rx1108_cur, rx1108_curclass, "$!cstack"
  rx1108_fail3059:
    unless rx1108_bstack, rx1108_done3057
    pop $I19, rx1108_bstack
    if_null rx1108_cstack, rx1108_cstack_done3062
    unless rx1108_cstack, rx1108_cstack_done3062
    dec $I19
    set $P11, rx1108_cstack[$I19]
  rx1108_cstack_done3062:
    pop rx1108_rep, rx1108_bstack
    pop rx1108_pos, rx1108_bstack
    pop $I19, rx1108_bstack
    lt rx1108_pos, -1, rx1108_done3057
    lt rx1108_pos, 0, rx1108_fail3059
    eq $I19, 0, rx1108_fail3059
    nqp_islist $I20, rx1108_cstack
    unless $I20, rx1108_jump3060
    elements $I18, rx1108_bstack
    le $I18, 0, rx1108_cut3061
    dec $I18
    set $I18, rx1108_bstack[$I18]
  rx1108_cut3061:
    assign rx1108_cstack, $I18
  rx1108_jump3060:
    jump $I19
  rx1108_done3057:
    rx1108_cur."!cursor_fail"()
    .return (rx1108_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1346277629.325_caps" :subid("cuid_memo_337_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1346277629.325_nfa" :subid("cuid_memo_338_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_202_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1112_tgt
    .local int rx1112_pos
    .local int rx1112_off
    .local int rx1112_eos
    .local int rx1112_rep
    .local pmc rx1112_cur
    .local pmc rx1112_curclass
    .local pmc rx1112_bstack
    .local pmc rx1112_cstack
    (rx1112_cur, rx1112_tgt, rx1112_pos, rx1112_curclass, rx1112_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1112_cur
    length rx1112_eos, rx1112_tgt
    eq $I19, 1, rx1112_restart3071
    gt rx1112_pos, rx1112_eos, rx1112_fail3072
    repr_get_attr_int $I11, self, rx1112_curclass, "$!from"
    ne $I11, -1, rxscan1113_done3078
    goto rxscan1113_scan3077
  rxscan1113_loop3076:
    inc rx1112_pos
    gt rx1112_pos, rx1112_eos, rx1112_fail3072
    repr_bind_attr_int rx1112_cur, rx1112_curclass, "$!from", rx1112_pos
  rxscan1113_scan3077:
    nqp_rxmark rx1112_bstack, rxscan1113_loop3076, rx1112_pos, 0
  rxscan1113_done3078:
    nqp_rxmark rx1112_bstack, rxcap1114_fail3080, rx1112_pos, 0
    add $I11, rx1112_pos, 2
    gt $I11, rx1112_eos, rx1112_fail3072
    substr $S10, rx1112_tgt, rx1112_pos, 2
    ne $S10, ucs4:"ne", rx1112_fail3072
    add rx1112_pos, 2
    nqp_rxpeek $I19, rx1112_bstack, rxcap1114_fail3080
    inc $I19
    set $I11, rx1112_bstack[$I19]
    $P11 = rx1112_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1112_pos)
    rx1112_cstack = rx1112_cur."!cursor_capture"($P11, "sym")
    goto rxcap1114_done3079
  rxcap1114_fail3080:
    goto rx1112_fail3072
  rxcap1114_done3079:
    repr_bind_attr_int rx1112_cur, rx1112_curclass, "$!pos", rx1112_pos
    $P11 = rx1112_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1112_curclass, "$!pos"
    lt $I11, 0, rx1112_fail3072
    nqp_rxmark rx1112_bstack, rxsubrule1115_pass3081, -1, 0
  rxsubrule1115_pass3081:
    rx1112_cstack = rx1112_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1112_pos, $P11, rx1112_curclass, "$!pos"
    rx1112_cur."!cursor_pass"(rx1112_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1112_cur)
  rx1112_restart3071:
    repr_get_attr_obj rx1112_cstack, rx1112_cur, rx1112_curclass, "$!cstack"
  rx1112_fail3072:
    unless rx1112_bstack, rx1112_done3070
    pop $I19, rx1112_bstack
    if_null rx1112_cstack, rx1112_cstack_done3075
    unless rx1112_cstack, rx1112_cstack_done3075
    dec $I19
    set $P11, rx1112_cstack[$I19]
  rx1112_cstack_done3075:
    pop rx1112_rep, rx1112_bstack
    pop rx1112_pos, rx1112_bstack
    pop $I19, rx1112_bstack
    lt rx1112_pos, -1, rx1112_done3070
    lt rx1112_pos, 0, rx1112_fail3072
    eq $I19, 0, rx1112_fail3072
    nqp_islist $I20, rx1112_cstack
    unless $I20, rx1112_jump3073
    elements $I18, rx1112_bstack
    le $I18, 0, rx1112_cut3074
    dec $I18
    set $I18, rx1112_bstack[$I18]
  rx1112_cut3074:
    assign rx1112_cstack, $I18
  rx1112_jump3073:
    jump $I19
  rx1112_done3070:
    rx1112_cur."!cursor_fail"()
    .return (rx1112_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1346277629.325_caps" :subid("cuid_memo_339_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1346277629.325_nfa" :subid("cuid_memo_340_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_203_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1116_tgt
    .local int rx1116_pos
    .local int rx1116_off
    .local int rx1116_eos
    .local int rx1116_rep
    .local pmc rx1116_cur
    .local pmc rx1116_curclass
    .local pmc rx1116_bstack
    .local pmc rx1116_cstack
    (rx1116_cur, rx1116_tgt, rx1116_pos, rx1116_curclass, rx1116_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1116_cur
    length rx1116_eos, rx1116_tgt
    eq $I19, 1, rx1116_restart3084
    gt rx1116_pos, rx1116_eos, rx1116_fail3085
    repr_get_attr_int $I11, self, rx1116_curclass, "$!from"
    ne $I11, -1, rxscan1117_done3091
    goto rxscan1117_scan3090
  rxscan1117_loop3089:
    inc rx1116_pos
    gt rx1116_pos, rx1116_eos, rx1116_fail3085
    repr_bind_attr_int rx1116_cur, rx1116_curclass, "$!from", rx1116_pos
  rxscan1117_scan3090:
    nqp_rxmark rx1116_bstack, rxscan1117_loop3089, rx1116_pos, 0
  rxscan1117_done3091:
    nqp_rxmark rx1116_bstack, rxcap1118_fail3093, rx1116_pos, 0
    add $I11, rx1116_pos, 2
    gt $I11, rx1116_eos, rx1116_fail3085
    substr $S10, rx1116_tgt, rx1116_pos, 2
    ne $S10, ucs4:"le", rx1116_fail3085
    add rx1116_pos, 2
    nqp_rxpeek $I19, rx1116_bstack, rxcap1118_fail3093
    inc $I19
    set $I11, rx1116_bstack[$I19]
    $P11 = rx1116_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1116_pos)
    rx1116_cstack = rx1116_cur."!cursor_capture"($P11, "sym")
    goto rxcap1118_done3092
  rxcap1118_fail3093:
    goto rx1116_fail3085
  rxcap1118_done3092:
    repr_bind_attr_int rx1116_cur, rx1116_curclass, "$!pos", rx1116_pos
    $P11 = rx1116_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1116_curclass, "$!pos"
    lt $I11, 0, rx1116_fail3085
    nqp_rxmark rx1116_bstack, rxsubrule1119_pass3094, -1, 0
  rxsubrule1119_pass3094:
    rx1116_cstack = rx1116_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1116_pos, $P11, rx1116_curclass, "$!pos"
    rx1116_cur."!cursor_pass"(rx1116_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1116_cur)
  rx1116_restart3084:
    repr_get_attr_obj rx1116_cstack, rx1116_cur, rx1116_curclass, "$!cstack"
  rx1116_fail3085:
    unless rx1116_bstack, rx1116_done3083
    pop $I19, rx1116_bstack
    if_null rx1116_cstack, rx1116_cstack_done3088
    unless rx1116_cstack, rx1116_cstack_done3088
    dec $I19
    set $P11, rx1116_cstack[$I19]
  rx1116_cstack_done3088:
    pop rx1116_rep, rx1116_bstack
    pop rx1116_pos, rx1116_bstack
    pop $I19, rx1116_bstack
    lt rx1116_pos, -1, rx1116_done3083
    lt rx1116_pos, 0, rx1116_fail3085
    eq $I19, 0, rx1116_fail3085
    nqp_islist $I20, rx1116_cstack
    unless $I20, rx1116_jump3086
    elements $I18, rx1116_bstack
    le $I18, 0, rx1116_cut3087
    dec $I18
    set $I18, rx1116_bstack[$I18]
  rx1116_cut3087:
    assign rx1116_cstack, $I18
  rx1116_jump3086:
    jump $I19
  rx1116_done3083:
    rx1116_cur."!cursor_fail"()
    .return (rx1116_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1346277629.325_caps" :subid("cuid_memo_341_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1346277629.325_nfa" :subid("cuid_memo_342_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_204_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1120_tgt
    .local int rx1120_pos
    .local int rx1120_off
    .local int rx1120_eos
    .local int rx1120_rep
    .local pmc rx1120_cur
    .local pmc rx1120_curclass
    .local pmc rx1120_bstack
    .local pmc rx1120_cstack
    (rx1120_cur, rx1120_tgt, rx1120_pos, rx1120_curclass, rx1120_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1120_cur
    length rx1120_eos, rx1120_tgt
    eq $I19, 1, rx1120_restart3097
    gt rx1120_pos, rx1120_eos, rx1120_fail3098
    repr_get_attr_int $I11, self, rx1120_curclass, "$!from"
    ne $I11, -1, rxscan1121_done3104
    goto rxscan1121_scan3103
  rxscan1121_loop3102:
    inc rx1120_pos
    gt rx1120_pos, rx1120_eos, rx1120_fail3098
    repr_bind_attr_int rx1120_cur, rx1120_curclass, "$!from", rx1120_pos
  rxscan1121_scan3103:
    nqp_rxmark rx1120_bstack, rxscan1121_loop3102, rx1120_pos, 0
  rxscan1121_done3104:
    nqp_rxmark rx1120_bstack, rxcap1122_fail3106, rx1120_pos, 0
    add $I11, rx1120_pos, 2
    gt $I11, rx1120_eos, rx1120_fail3098
    substr $S10, rx1120_tgt, rx1120_pos, 2
    ne $S10, ucs4:"ge", rx1120_fail3098
    add rx1120_pos, 2
    nqp_rxpeek $I19, rx1120_bstack, rxcap1122_fail3106
    inc $I19
    set $I11, rx1120_bstack[$I19]
    $P11 = rx1120_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1120_pos)
    rx1120_cstack = rx1120_cur."!cursor_capture"($P11, "sym")
    goto rxcap1122_done3105
  rxcap1122_fail3106:
    goto rx1120_fail3098
  rxcap1122_done3105:
    repr_bind_attr_int rx1120_cur, rx1120_curclass, "$!pos", rx1120_pos
    $P11 = rx1120_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1120_curclass, "$!pos"
    lt $I11, 0, rx1120_fail3098
    nqp_rxmark rx1120_bstack, rxsubrule1123_pass3107, -1, 0
  rxsubrule1123_pass3107:
    rx1120_cstack = rx1120_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1120_pos, $P11, rx1120_curclass, "$!pos"
    rx1120_cur."!cursor_pass"(rx1120_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1120_cur)
  rx1120_restart3097:
    repr_get_attr_obj rx1120_cstack, rx1120_cur, rx1120_curclass, "$!cstack"
  rx1120_fail3098:
    unless rx1120_bstack, rx1120_done3096
    pop $I19, rx1120_bstack
    if_null rx1120_cstack, rx1120_cstack_done3101
    unless rx1120_cstack, rx1120_cstack_done3101
    dec $I19
    set $P11, rx1120_cstack[$I19]
  rx1120_cstack_done3101:
    pop rx1120_rep, rx1120_bstack
    pop rx1120_pos, rx1120_bstack
    pop $I19, rx1120_bstack
    lt rx1120_pos, -1, rx1120_done3096
    lt rx1120_pos, 0, rx1120_fail3098
    eq $I19, 0, rx1120_fail3098
    nqp_islist $I20, rx1120_cstack
    unless $I20, rx1120_jump3099
    elements $I18, rx1120_bstack
    le $I18, 0, rx1120_cut3100
    dec $I18
    set $I18, rx1120_bstack[$I18]
  rx1120_cut3100:
    assign rx1120_cstack, $I18
  rx1120_jump3099:
    jump $I19
  rx1120_done3096:
    rx1120_cur."!cursor_fail"()
    .return (rx1120_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1346277629.325_caps" :subid("cuid_memo_343_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1346277629.325_nfa" :subid("cuid_memo_344_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_205_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1124_tgt
    .local int rx1124_pos
    .local int rx1124_off
    .local int rx1124_eos
    .local int rx1124_rep
    .local pmc rx1124_cur
    .local pmc rx1124_curclass
    .local pmc rx1124_bstack
    .local pmc rx1124_cstack
    (rx1124_cur, rx1124_tgt, rx1124_pos, rx1124_curclass, rx1124_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1124_cur
    length rx1124_eos, rx1124_tgt
    eq $I19, 1, rx1124_restart3110
    gt rx1124_pos, rx1124_eos, rx1124_fail3111
    repr_get_attr_int $I11, self, rx1124_curclass, "$!from"
    ne $I11, -1, rxscan1125_done3117
    goto rxscan1125_scan3116
  rxscan1125_loop3115:
    inc rx1124_pos
    gt rx1124_pos, rx1124_eos, rx1124_fail3111
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!from", rx1124_pos
  rxscan1125_scan3116:
    nqp_rxmark rx1124_bstack, rxscan1125_loop3115, rx1124_pos, 0
  rxscan1125_done3117:
    nqp_rxmark rx1124_bstack, rxcap1126_fail3119, rx1124_pos, 0
    add $I11, rx1124_pos, 2
    gt $I11, rx1124_eos, rx1124_fail3111
    substr $S10, rx1124_tgt, rx1124_pos, 2
    ne $S10, ucs4:"lt", rx1124_fail3111
    add rx1124_pos, 2
    nqp_rxpeek $I19, rx1124_bstack, rxcap1126_fail3119
    inc $I19
    set $I11, rx1124_bstack[$I19]
    $P11 = rx1124_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1124_pos)
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "sym")
    goto rxcap1126_done3118
  rxcap1126_fail3119:
    goto rx1124_fail3111
  rxcap1126_done3118:
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail3111
    nqp_rxmark rx1124_bstack, rxsubrule1127_pass3120, -1, 0
  rxsubrule1127_pass3120:
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
    rx1124_cur."!cursor_pass"(rx1124_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1124_cur)
  rx1124_restart3110:
    repr_get_attr_obj rx1124_cstack, rx1124_cur, rx1124_curclass, "$!cstack"
  rx1124_fail3111:
    unless rx1124_bstack, rx1124_done3109
    pop $I19, rx1124_bstack
    if_null rx1124_cstack, rx1124_cstack_done3114
    unless rx1124_cstack, rx1124_cstack_done3114
    dec $I19
    set $P11, rx1124_cstack[$I19]
  rx1124_cstack_done3114:
    pop rx1124_rep, rx1124_bstack
    pop rx1124_pos, rx1124_bstack
    pop $I19, rx1124_bstack
    lt rx1124_pos, -1, rx1124_done3109
    lt rx1124_pos, 0, rx1124_fail3111
    eq $I19, 0, rx1124_fail3111
    nqp_islist $I20, rx1124_cstack
    unless $I20, rx1124_jump3112
    elements $I18, rx1124_bstack
    le $I18, 0, rx1124_cut3113
    dec $I18
    set $I18, rx1124_bstack[$I18]
  rx1124_cut3113:
    assign rx1124_cstack, $I18
  rx1124_jump3112:
    jump $I19
  rx1124_done3109:
    rx1124_cur."!cursor_fail"()
    .return (rx1124_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1346277629.325_caps" :subid("cuid_memo_345_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1346277629.325_nfa" :subid("cuid_memo_346_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_206_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1128_tgt
    .local int rx1128_pos
    .local int rx1128_off
    .local int rx1128_eos
    .local int rx1128_rep
    .local pmc rx1128_cur
    .local pmc rx1128_curclass
    .local pmc rx1128_bstack
    .local pmc rx1128_cstack
    (rx1128_cur, rx1128_tgt, rx1128_pos, rx1128_curclass, rx1128_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1128_cur
    length rx1128_eos, rx1128_tgt
    eq $I19, 1, rx1128_restart3123
    gt rx1128_pos, rx1128_eos, rx1128_fail3124
    repr_get_attr_int $I11, self, rx1128_curclass, "$!from"
    ne $I11, -1, rxscan1129_done3130
    goto rxscan1129_scan3129
  rxscan1129_loop3128:
    inc rx1128_pos
    gt rx1128_pos, rx1128_eos, rx1128_fail3124
    repr_bind_attr_int rx1128_cur, rx1128_curclass, "$!from", rx1128_pos
  rxscan1129_scan3129:
    nqp_rxmark rx1128_bstack, rxscan1129_loop3128, rx1128_pos, 0
  rxscan1129_done3130:
    nqp_rxmark rx1128_bstack, rxcap1130_fail3132, rx1128_pos, 0
    add $I11, rx1128_pos, 2
    gt $I11, rx1128_eos, rx1128_fail3124
    substr $S10, rx1128_tgt, rx1128_pos, 2
    ne $S10, ucs4:"gt", rx1128_fail3124
    add rx1128_pos, 2
    nqp_rxpeek $I19, rx1128_bstack, rxcap1130_fail3132
    inc $I19
    set $I11, rx1128_bstack[$I19]
    $P11 = rx1128_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1128_pos)
    rx1128_cstack = rx1128_cur."!cursor_capture"($P11, "sym")
    goto rxcap1130_done3131
  rxcap1130_fail3132:
    goto rx1128_fail3124
  rxcap1130_done3131:
    repr_bind_attr_int rx1128_cur, rx1128_curclass, "$!pos", rx1128_pos
    $P11 = rx1128_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1128_curclass, "$!pos"
    lt $I11, 0, rx1128_fail3124
    nqp_rxmark rx1128_bstack, rxsubrule1131_pass3133, -1, 0
  rxsubrule1131_pass3133:
    rx1128_cstack = rx1128_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1128_pos, $P11, rx1128_curclass, "$!pos"
    rx1128_cur."!cursor_pass"(rx1128_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1128_cur)
  rx1128_restart3123:
    repr_get_attr_obj rx1128_cstack, rx1128_cur, rx1128_curclass, "$!cstack"
  rx1128_fail3124:
    unless rx1128_bstack, rx1128_done3122
    pop $I19, rx1128_bstack
    if_null rx1128_cstack, rx1128_cstack_done3127
    unless rx1128_cstack, rx1128_cstack_done3127
    dec $I19
    set $P11, rx1128_cstack[$I19]
  rx1128_cstack_done3127:
    pop rx1128_rep, rx1128_bstack
    pop rx1128_pos, rx1128_bstack
    pop $I19, rx1128_bstack
    lt rx1128_pos, -1, rx1128_done3122
    lt rx1128_pos, 0, rx1128_fail3124
    eq $I19, 0, rx1128_fail3124
    nqp_islist $I20, rx1128_cstack
    unless $I20, rx1128_jump3125
    elements $I18, rx1128_bstack
    le $I18, 0, rx1128_cut3126
    dec $I18
    set $I18, rx1128_bstack[$I18]
  rx1128_cut3126:
    assign rx1128_cstack, $I18
  rx1128_jump3125:
    jump $I19
  rx1128_done3122:
    rx1128_cur."!cursor_fail"()
    .return (rx1128_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1346277629.325_caps" :subid("cuid_memo_347_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1346277629.325_nfa" :subid("cuid_memo_348_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_207_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1132_tgt
    .local int rx1132_pos
    .local int rx1132_off
    .local int rx1132_eos
    .local int rx1132_rep
    .local pmc rx1132_cur
    .local pmc rx1132_curclass
    .local pmc rx1132_bstack
    .local pmc rx1132_cstack
    (rx1132_cur, rx1132_tgt, rx1132_pos, rx1132_curclass, rx1132_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1132_cur
    length rx1132_eos, rx1132_tgt
    eq $I19, 1, rx1132_restart3136
    gt rx1132_pos, rx1132_eos, rx1132_fail3137
    repr_get_attr_int $I11, self, rx1132_curclass, "$!from"
    ne $I11, -1, rxscan1133_done3143
    goto rxscan1133_scan3142
  rxscan1133_loop3141:
    inc rx1132_pos
    gt rx1132_pos, rx1132_eos, rx1132_fail3137
    repr_bind_attr_int rx1132_cur, rx1132_curclass, "$!from", rx1132_pos
  rxscan1133_scan3142:
    nqp_rxmark rx1132_bstack, rxscan1133_loop3141, rx1132_pos, 0
  rxscan1133_done3143:
    nqp_rxmark rx1132_bstack, rxcap1134_fail3145, rx1132_pos, 0
    add $I11, rx1132_pos, 3
    gt $I11, rx1132_eos, rx1132_fail3137
    substr $S10, rx1132_tgt, rx1132_pos, 3
    ne $S10, ucs4:"=:=", rx1132_fail3137
    add rx1132_pos, 3
    nqp_rxpeek $I19, rx1132_bstack, rxcap1134_fail3145
    inc $I19
    set $I11, rx1132_bstack[$I19]
    $P11 = rx1132_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1132_pos)
    rx1132_cstack = rx1132_cur."!cursor_capture"($P11, "sym")
    goto rxcap1134_done3144
  rxcap1134_fail3145:
    goto rx1132_fail3137
  rxcap1134_done3144:
    repr_bind_attr_int rx1132_cur, rx1132_curclass, "$!pos", rx1132_pos
    $P11 = rx1132_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1132_curclass, "$!pos"
    lt $I11, 0, rx1132_fail3137
    nqp_rxmark rx1132_bstack, rxsubrule1135_pass3146, -1, 0
  rxsubrule1135_pass3146:
    rx1132_cstack = rx1132_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1132_pos, $P11, rx1132_curclass, "$!pos"
    rx1132_cur."!cursor_pass"(rx1132_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1132_cur)
  rx1132_restart3136:
    repr_get_attr_obj rx1132_cstack, rx1132_cur, rx1132_curclass, "$!cstack"
  rx1132_fail3137:
    unless rx1132_bstack, rx1132_done3135
    pop $I19, rx1132_bstack
    if_null rx1132_cstack, rx1132_cstack_done3140
    unless rx1132_cstack, rx1132_cstack_done3140
    dec $I19
    set $P11, rx1132_cstack[$I19]
  rx1132_cstack_done3140:
    pop rx1132_rep, rx1132_bstack
    pop rx1132_pos, rx1132_bstack
    pop $I19, rx1132_bstack
    lt rx1132_pos, -1, rx1132_done3135
    lt rx1132_pos, 0, rx1132_fail3137
    eq $I19, 0, rx1132_fail3137
    nqp_islist $I20, rx1132_cstack
    unless $I20, rx1132_jump3138
    elements $I18, rx1132_bstack
    le $I18, 0, rx1132_cut3139
    dec $I18
    set $I18, rx1132_bstack[$I18]
  rx1132_cut3139:
    assign rx1132_cstack, $I18
  rx1132_jump3138:
    jump $I19
  rx1132_done3135:
    rx1132_cur."!cursor_fail"()
    .return (rx1132_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1346277629.325_caps" :subid("cuid_memo_349_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1346277629.325_nfa" :subid("cuid_memo_350_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_208_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1136_tgt
    .local int rx1136_pos
    .local int rx1136_off
    .local int rx1136_eos
    .local int rx1136_rep
    .local pmc rx1136_cur
    .local pmc rx1136_curclass
    .local pmc rx1136_bstack
    .local pmc rx1136_cstack
    (rx1136_cur, rx1136_tgt, rx1136_pos, rx1136_curclass, rx1136_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1136_cur
    length rx1136_eos, rx1136_tgt
    eq $I19, 1, rx1136_restart3149
    gt rx1136_pos, rx1136_eos, rx1136_fail3150
    repr_get_attr_int $I11, self, rx1136_curclass, "$!from"
    ne $I11, -1, rxscan1137_done3156
    goto rxscan1137_scan3155
  rxscan1137_loop3154:
    inc rx1136_pos
    gt rx1136_pos, rx1136_eos, rx1136_fail3150
    repr_bind_attr_int rx1136_cur, rx1136_curclass, "$!from", rx1136_pos
  rxscan1137_scan3155:
    nqp_rxmark rx1136_bstack, rxscan1137_loop3154, rx1136_pos, 0
  rxscan1137_done3156:
    nqp_rxmark rx1136_bstack, rxcap1138_fail3158, rx1136_pos, 0
    add $I11, rx1136_pos, 2
    gt $I11, rx1136_eos, rx1136_fail3150
    substr $S10, rx1136_tgt, rx1136_pos, 2
    ne $S10, ucs4:"~~", rx1136_fail3150
    add rx1136_pos, 2
    nqp_rxpeek $I19, rx1136_bstack, rxcap1138_fail3158
    inc $I19
    set $I11, rx1136_bstack[$I19]
    $P11 = rx1136_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1136_pos)
    rx1136_cstack = rx1136_cur."!cursor_capture"($P11, "sym")
    goto rxcap1138_done3157
  rxcap1138_fail3158:
    goto rx1136_fail3150
  rxcap1138_done3157:
    repr_bind_attr_int rx1136_cur, rx1136_curclass, "$!pos", rx1136_pos
    $P11 = rx1136_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1136_curclass, "$!pos"
    lt $I11, 0, rx1136_fail3150
    nqp_rxmark rx1136_bstack, rxsubrule1139_pass3159, -1, 0
  rxsubrule1139_pass3159:
    rx1136_cstack = rx1136_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1136_pos, $P11, rx1136_curclass, "$!pos"
    rx1136_cur."!cursor_pass"(rx1136_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1136_cur)
  rx1136_restart3149:
    repr_get_attr_obj rx1136_cstack, rx1136_cur, rx1136_curclass, "$!cstack"
  rx1136_fail3150:
    unless rx1136_bstack, rx1136_done3148
    pop $I19, rx1136_bstack
    if_null rx1136_cstack, rx1136_cstack_done3153
    unless rx1136_cstack, rx1136_cstack_done3153
    dec $I19
    set $P11, rx1136_cstack[$I19]
  rx1136_cstack_done3153:
    pop rx1136_rep, rx1136_bstack
    pop rx1136_pos, rx1136_bstack
    pop $I19, rx1136_bstack
    lt rx1136_pos, -1, rx1136_done3148
    lt rx1136_pos, 0, rx1136_fail3150
    eq $I19, 0, rx1136_fail3150
    nqp_islist $I20, rx1136_cstack
    unless $I20, rx1136_jump3151
    elements $I18, rx1136_bstack
    le $I18, 0, rx1136_cut3152
    dec $I18
    set $I18, rx1136_bstack[$I18]
  rx1136_cut3152:
    assign rx1136_cstack, $I18
  rx1136_jump3151:
    jump $I19
  rx1136_done3148:
    rx1136_cur."!cursor_fail"()
    .return (rx1136_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1346277629.325_caps" :subid("cuid_memo_351_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1346277629.325_nfa" :subid("cuid_memo_352_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 126
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_209_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1140_tgt
    .local int rx1140_pos
    .local int rx1140_off
    .local int rx1140_eos
    .local int rx1140_rep
    .local pmc rx1140_cur
    .local pmc rx1140_curclass
    .local pmc rx1140_bstack
    .local pmc rx1140_cstack
    (rx1140_cur, rx1140_tgt, rx1140_pos, rx1140_curclass, rx1140_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1140_cur
    length rx1140_eos, rx1140_tgt
    eq $I19, 1, rx1140_restart3162
    gt rx1140_pos, rx1140_eos, rx1140_fail3163
    repr_get_attr_int $I11, self, rx1140_curclass, "$!from"
    ne $I11, -1, rxscan1141_done3169
    goto rxscan1141_scan3168
  rxscan1141_loop3167:
    inc rx1140_pos
    gt rx1140_pos, rx1140_eos, rx1140_fail3163
    repr_bind_attr_int rx1140_cur, rx1140_curclass, "$!from", rx1140_pos
  rxscan1141_scan3168:
    nqp_rxmark rx1140_bstack, rxscan1141_loop3167, rx1140_pos, 0
  rxscan1141_done3169:
    nqp_rxmark rx1140_bstack, rxcap1142_fail3171, rx1140_pos, 0
    add $I11, rx1140_pos, 2
    gt $I11, rx1140_eos, rx1140_fail3163
    substr $S10, rx1140_tgt, rx1140_pos, 2
    ne $S10, ucs4:"&&", rx1140_fail3163
    add rx1140_pos, 2
    nqp_rxpeek $I19, rx1140_bstack, rxcap1142_fail3171
    inc $I19
    set $I11, rx1140_bstack[$I19]
    $P11 = rx1140_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1140_pos)
    rx1140_cstack = rx1140_cur."!cursor_capture"($P11, "sym")
    goto rxcap1142_done3170
  rxcap1142_fail3171:
    goto rx1140_fail3163
  rxcap1142_done3170:
    repr_bind_attr_int rx1140_cur, rx1140_curclass, "$!pos", rx1140_pos
    $P11 = rx1140_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1140_curclass, "$!pos"
    lt $I11, 0, rx1140_fail3163
    nqp_rxmark rx1140_bstack, rxsubrule1143_pass3172, -1, 0
  rxsubrule1143_pass3172:
    rx1140_cstack = rx1140_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1140_pos, $P11, rx1140_curclass, "$!pos"
    rx1140_cur."!cursor_pass"(rx1140_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1140_cur)
  rx1140_restart3162:
    repr_get_attr_obj rx1140_cstack, rx1140_cur, rx1140_curclass, "$!cstack"
  rx1140_fail3163:
    unless rx1140_bstack, rx1140_done3161
    pop $I19, rx1140_bstack
    if_null rx1140_cstack, rx1140_cstack_done3166
    unless rx1140_cstack, rx1140_cstack_done3166
    dec $I19
    set $P11, rx1140_cstack[$I19]
  rx1140_cstack_done3166:
    pop rx1140_rep, rx1140_bstack
    pop rx1140_pos, rx1140_bstack
    pop $I19, rx1140_bstack
    lt rx1140_pos, -1, rx1140_done3161
    lt rx1140_pos, 0, rx1140_fail3163
    eq $I19, 0, rx1140_fail3163
    nqp_islist $I20, rx1140_cstack
    unless $I20, rx1140_jump3164
    elements $I18, rx1140_bstack
    le $I18, 0, rx1140_cut3165
    dec $I18
    set $I18, rx1140_bstack[$I18]
  rx1140_cut3165:
    assign rx1140_cstack, $I18
  rx1140_jump3164:
    jump $I19
  rx1140_done3161:
    rx1140_cur."!cursor_fail"()
    .return (rx1140_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1346277629.325_caps" :subid("cuid_memo_353_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1346277629.325_nfa" :subid("cuid_memo_354_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 38
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_210_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1300
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1144_tgt
    .local int rx1144_pos
    .local int rx1144_off
    .local int rx1144_eos
    .local int rx1144_rep
    .local pmc rx1144_cur
    .local pmc rx1144_curclass
    .local pmc rx1144_bstack
    .local pmc rx1144_cstack
    (rx1144_cur, rx1144_tgt, rx1144_pos, rx1144_curclass, rx1144_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1144_cur
    length rx1144_eos, rx1144_tgt
    eq $I19, 1, rx1144_restart3175
    gt rx1144_pos, rx1144_eos, rx1144_fail3176
    repr_get_attr_int $I11, self, rx1144_curclass, "$!from"
    ne $I11, -1, rxscan1145_done3182
    goto rxscan1145_scan3181
  rxscan1145_loop3180:
    inc rx1144_pos
    gt rx1144_pos, rx1144_eos, rx1144_fail3176
    repr_bind_attr_int rx1144_cur, rx1144_curclass, "$!from", rx1144_pos
  rxscan1145_scan3181:
    nqp_rxmark rx1144_bstack, rxscan1145_loop3180, rx1144_pos, 0
  rxscan1145_done3182:
    nqp_rxmark rx1144_bstack, rxcap1146_fail3184, rx1144_pos, 0
    add $I11, rx1144_pos, 2
    gt $I11, rx1144_eos, rx1144_fail3176
    substr $S10, rx1144_tgt, rx1144_pos, 2
    ne $S10, ucs4:"||", rx1144_fail3176
    add rx1144_pos, 2
    nqp_rxpeek $I19, rx1144_bstack, rxcap1146_fail3184
    inc $I19
    set $I11, rx1144_bstack[$I19]
    $P11 = rx1144_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1144_pos)
    rx1144_cstack = rx1144_cur."!cursor_capture"($P11, "sym")
    goto rxcap1146_done3183
  rxcap1146_fail3184:
    goto rx1144_fail3176
  rxcap1146_done3183:
    repr_bind_attr_int rx1144_cur, rx1144_curclass, "$!pos", rx1144_pos
    $P11 = rx1144_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1144_curclass, "$!pos"
    lt $I11, 0, rx1144_fail3176
    nqp_rxmark rx1144_bstack, rxsubrule1147_pass3185, -1, 0
  rxsubrule1147_pass3185:
    rx1144_cstack = rx1144_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1144_pos, $P11, rx1144_curclass, "$!pos"
    rx1144_cur."!cursor_pass"(rx1144_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1144_cur)
  rx1144_restart3175:
    repr_get_attr_obj rx1144_cstack, rx1144_cur, rx1144_curclass, "$!cstack"
  rx1144_fail3176:
    unless rx1144_bstack, rx1144_done3174
    pop $I19, rx1144_bstack
    if_null rx1144_cstack, rx1144_cstack_done3179
    unless rx1144_cstack, rx1144_cstack_done3179
    dec $I19
    set $P11, rx1144_cstack[$I19]
  rx1144_cstack_done3179:
    pop rx1144_rep, rx1144_bstack
    pop rx1144_pos, rx1144_bstack
    pop $I19, rx1144_bstack
    lt rx1144_pos, -1, rx1144_done3174
    lt rx1144_pos, 0, rx1144_fail3176
    eq $I19, 0, rx1144_fail3176
    nqp_islist $I20, rx1144_cstack
    unless $I20, rx1144_jump3177
    elements $I18, rx1144_bstack
    le $I18, 0, rx1144_cut3178
    dec $I18
    set $I18, rx1144_bstack[$I18]
  rx1144_cut3178:
    assign rx1144_cstack, $I18
  rx1144_jump3177:
    jump $I19
  rx1144_done3174:
    rx1144_cur."!cursor_fail"()
    .return (rx1144_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1346277629.325_caps" :subid("cuid_memo_355_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1346277629.325_nfa" :subid("cuid_memo_356_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_211_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1148_tgt
    .local int rx1148_pos
    .local int rx1148_off
    .local int rx1148_eos
    .local int rx1148_rep
    .local pmc rx1148_cur
    .local pmc rx1148_curclass
    .local pmc rx1148_bstack
    .local pmc rx1148_cstack
    (rx1148_cur, rx1148_tgt, rx1148_pos, rx1148_curclass, rx1148_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1148_cur
    length rx1148_eos, rx1148_tgt
    eq $I19, 1, rx1148_restart3188
    gt rx1148_pos, rx1148_eos, rx1148_fail3189
    repr_get_attr_int $I11, self, rx1148_curclass, "$!from"
    ne $I11, -1, rxscan1149_done3195
    goto rxscan1149_scan3194
  rxscan1149_loop3193:
    inc rx1148_pos
    gt rx1148_pos, rx1148_eos, rx1148_fail3189
    repr_bind_attr_int rx1148_cur, rx1148_curclass, "$!from", rx1148_pos
  rxscan1149_scan3194:
    nqp_rxmark rx1148_bstack, rxscan1149_loop3193, rx1148_pos, 0
  rxscan1149_done3195:
    nqp_rxmark rx1148_bstack, rxcap1150_fail3197, rx1148_pos, 0
    add $I11, rx1148_pos, 2
    gt $I11, rx1148_eos, rx1148_fail3189
    substr $S10, rx1148_tgt, rx1148_pos, 2
    ne $S10, ucs4:"//", rx1148_fail3189
    add rx1148_pos, 2
    nqp_rxpeek $I19, rx1148_bstack, rxcap1150_fail3197
    inc $I19
    set $I11, rx1148_bstack[$I19]
    $P11 = rx1148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1148_pos)
    rx1148_cstack = rx1148_cur."!cursor_capture"($P11, "sym")
    goto rxcap1150_done3196
  rxcap1150_fail3197:
    goto rx1148_fail3189
  rxcap1150_done3196:
    repr_bind_attr_int rx1148_cur, rx1148_curclass, "$!pos", rx1148_pos
    $P11 = rx1148_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1148_curclass, "$!pos"
    lt $I11, 0, rx1148_fail3189
    nqp_rxmark rx1148_bstack, rxsubrule1151_pass3198, -1, 0
  rxsubrule1151_pass3198:
    rx1148_cstack = rx1148_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1148_pos, $P11, rx1148_curclass, "$!pos"
    rx1148_cur."!cursor_pass"(rx1148_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1148_cur)
  rx1148_restart3188:
    repr_get_attr_obj rx1148_cstack, rx1148_cur, rx1148_curclass, "$!cstack"
  rx1148_fail3189:
    unless rx1148_bstack, rx1148_done3187
    pop $I19, rx1148_bstack
    if_null rx1148_cstack, rx1148_cstack_done3192
    unless rx1148_cstack, rx1148_cstack_done3192
    dec $I19
    set $P11, rx1148_cstack[$I19]
  rx1148_cstack_done3192:
    pop rx1148_rep, rx1148_bstack
    pop rx1148_pos, rx1148_bstack
    pop $I19, rx1148_bstack
    lt rx1148_pos, -1, rx1148_done3187
    lt rx1148_pos, 0, rx1148_fail3189
    eq $I19, 0, rx1148_fail3189
    nqp_islist $I20, rx1148_cstack
    unless $I20, rx1148_jump3190
    elements $I18, rx1148_bstack
    le $I18, 0, rx1148_cut3191
    dec $I18
    set $I18, rx1148_bstack[$I18]
  rx1148_cut3191:
    assign rx1148_cstack, $I18
  rx1148_jump3190:
    jump $I19
  rx1148_done3187:
    rx1148_cur."!cursor_fail"()
    .return (rx1148_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1346277629.325_caps" :subid("cuid_memo_357_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1346277629.325_nfa" :subid("cuid_memo_358_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 47
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_212_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1152_tgt
    .local int rx1152_pos
    .local int rx1152_off
    .local int rx1152_eos
    .local int rx1152_rep
    .local pmc rx1152_cur
    .local pmc rx1152_curclass
    .local pmc rx1152_bstack
    .local pmc rx1152_cstack
    (rx1152_cur, rx1152_tgt, rx1152_pos, rx1152_curclass, rx1152_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1152_cur
    length rx1152_eos, rx1152_tgt
    eq $I19, 1, rx1152_restart3201
    gt rx1152_pos, rx1152_eos, rx1152_fail3202
    repr_get_attr_int $I11, self, rx1152_curclass, "$!from"
    ne $I11, -1, rxscan1153_done3208
    goto rxscan1153_scan3207
  rxscan1153_loop3206:
    inc rx1152_pos
    gt rx1152_pos, rx1152_eos, rx1152_fail3202
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!from", rx1152_pos
  rxscan1153_scan3207:
    nqp_rxmark rx1152_bstack, rxscan1153_loop3206, rx1152_pos, 0
  rxscan1153_done3208:
    add $I11, rx1152_pos, 2
    gt $I11, rx1152_eos, rx1152_fail3202
    substr $S10, rx1152_tgt, rx1152_pos, 2
    ne $S10, ucs4:"??", rx1152_fail3202
    add rx1152_pos, 2
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3202
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3202
    nqp_rxmark rx1152_bstack, rxsubrule1155_pass3210, -1, 0
  rxsubrule1155_pass3210:
    rx1152_cstack = rx1152_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    add $I11, rx1152_pos, 2
    gt $I11, rx1152_eos, rx1152_fail3202
    substr $S10, rx1152_tgt, rx1152_pos, 2
    ne $S10, ucs4:"!!", rx1152_fail3202
    add rx1152_pos, 2
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3202
    nqp_rxmark rx1152_bstack, rxsubrule1156_pass3211, -1, 0
  rxsubrule1156_pass3211:
    rx1152_cstack = rx1152_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    rx1152_cur."!cursor_pass"(rx1152_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1152_cur)
  rx1152_restart3201:
    repr_get_attr_obj rx1152_cstack, rx1152_cur, rx1152_curclass, "$!cstack"
  rx1152_fail3202:
    unless rx1152_bstack, rx1152_done3200
    pop $I19, rx1152_bstack
    if_null rx1152_cstack, rx1152_cstack_done3205
    unless rx1152_cstack, rx1152_cstack_done3205
    dec $I19
    set $P11, rx1152_cstack[$I19]
  rx1152_cstack_done3205:
    pop rx1152_rep, rx1152_bstack
    pop rx1152_pos, rx1152_bstack
    pop $I19, rx1152_bstack
    lt rx1152_pos, -1, rx1152_done3200
    lt rx1152_pos, 0, rx1152_fail3202
    eq $I19, 0, rx1152_fail3202
    nqp_islist $I20, rx1152_cstack
    unless $I20, rx1152_jump3203
    elements $I18, rx1152_bstack
    le $I18, 0, rx1152_cut3204
    dec $I18
    set $I18, rx1152_bstack[$I18]
  rx1152_cut3204:
    assign rx1152_cstack, $I18
  rx1152_jump3203:
    jump $I19
  rx1152_done3200:
    rx1152_cur."!cursor_fail"()
    .return (rx1152_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1346277629.325_caps" :subid("cuid_memo_359_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1346277629.325_nfa" :subid("cuid_memo_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 63
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "EXPR"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 33
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 33
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "O"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_213_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1157_tgt
    .local int rx1157_pos
    .local int rx1157_off
    .local int rx1157_eos
    .local int rx1157_rep
    .local pmc rx1157_cur
    .local pmc rx1157_curclass
    .local pmc rx1157_bstack
    .local pmc rx1157_cstack
    (rx1157_cur, rx1157_tgt, rx1157_pos, rx1157_curclass, rx1157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1157_cur
    length rx1157_eos, rx1157_tgt
    eq $I19, 1, rx1157_restart3214
    gt rx1157_pos, rx1157_eos, rx1157_fail3215
    repr_get_attr_int $I11, self, rx1157_curclass, "$!from"
    ne $I11, -1, rxscan1158_done3221
    goto rxscan1158_scan3220
  rxscan1158_loop3219:
    inc rx1157_pos
    gt rx1157_pos, rx1157_eos, rx1157_fail3215
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!from", rx1157_pos
  rxscan1158_scan3220:
    nqp_rxmark rx1157_bstack, rxscan1158_loop3219, rx1157_pos, 0
  rxscan1158_done3221:
    nqp_rxmark rx1157_bstack, rxcap1159_fail3223, rx1157_pos, 0
    add $I11, rx1157_pos, 1
    gt $I11, rx1157_eos, rx1157_fail3215
    substr $S10, rx1157_tgt, rx1157_pos, 1
    ne $S10, ucs4:"=", rx1157_fail3215
    add rx1157_pos, 1
    nqp_rxpeek $I19, rx1157_bstack, rxcap1159_fail3223
    inc $I19
    set $I11, rx1157_bstack[$I19]
    $P11 = rx1157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1157_pos)
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "sym")
    goto rxcap1159_done3222
  rxcap1159_fail3223:
    goto rx1157_fail3215
  rxcap1159_done3222:
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1157_curclass, "$!pos"
    lt $I11, 0, rx1157_fail3215
    repr_get_attr_int rx1157_pos, $P11, rx1157_curclass, "$!pos"
    rx1157_cur."!cursor_pass"(rx1157_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1157_cur)
  rx1157_restart3214:
    repr_get_attr_obj rx1157_cstack, rx1157_cur, rx1157_curclass, "$!cstack"
  rx1157_fail3215:
    unless rx1157_bstack, rx1157_done3213
    pop $I19, rx1157_bstack
    if_null rx1157_cstack, rx1157_cstack_done3218
    unless rx1157_cstack, rx1157_cstack_done3218
    dec $I19
    set $P11, rx1157_cstack[$I19]
  rx1157_cstack_done3218:
    pop rx1157_rep, rx1157_bstack
    pop rx1157_pos, rx1157_bstack
    pop $I19, rx1157_bstack
    lt rx1157_pos, -1, rx1157_done3213
    lt rx1157_pos, 0, rx1157_fail3215
    eq $I19, 0, rx1157_fail3215
    nqp_islist $I20, rx1157_cstack
    unless $I20, rx1157_jump3216
    elements $I18, rx1157_bstack
    le $I18, 0, rx1157_cut3217
    dec $I18
    set $I18, rx1157_bstack[$I18]
  rx1157_cut3217:
    assign rx1157_cstack, $I18
  rx1157_jump3216:
    jump $I19
  rx1157_done3213:
    rx1157_cur."!cursor_fail"()
    .return (rx1157_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1346277629.325_caps" :subid("cuid_memo_361_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1346277629.325_nfa" :subid("cuid_memo_362_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "panic"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_214_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_curclass
    .local pmc rx1161_bstack
    .local pmc rx1161_cstack
    (rx1161_cur, rx1161_tgt, rx1161_pos, rx1161_curclass, rx1161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1161_cur
    length rx1161_eos, rx1161_tgt
    eq $I19, 1, rx1161_restart3227
    gt rx1161_pos, rx1161_eos, rx1161_fail3228
    repr_get_attr_int $I11, self, rx1161_curclass, "$!from"
    ne $I11, -1, rxscan1162_done3234
    goto rxscan1162_scan3233
  rxscan1162_loop3232:
    inc rx1161_pos
    gt rx1161_pos, rx1161_eos, rx1161_fail3228
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!from", rx1161_pos
  rxscan1162_scan3233:
    nqp_rxmark rx1161_bstack, rxscan1162_loop3232, rx1161_pos, 0
  rxscan1162_done3234:
    nqp_rxmark rx1161_bstack, rxcap1163_fail3236, rx1161_pos, 0
    add $I11, rx1161_pos, 2
    gt $I11, rx1161_eos, rx1161_fail3228
    substr $S10, rx1161_tgt, rx1161_pos, 2
    ne $S10, ucs4:":=", rx1161_fail3228
    add rx1161_pos, 2
    nqp_rxpeek $I19, rx1161_bstack, rxcap1163_fail3236
    inc $I19
    set $I11, rx1161_bstack[$I19]
    $P11 = rx1161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1161_pos)
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "sym")
    goto rxcap1163_done3235
  rxcap1163_fail3236:
    goto rx1161_fail3228
  rxcap1163_done3235:
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1161_curclass, "$!pos"
    lt $I11, 0, rx1161_fail3228
    nqp_rxmark rx1161_bstack, rxsubrule1164_pass3237, -1, 0
  rxsubrule1164_pass3237:
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1161_pos, $P11, rx1161_curclass, "$!pos"
    rx1161_cur."!cursor_pass"(rx1161_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1161_cur)
  rx1161_restart3227:
    repr_get_attr_obj rx1161_cstack, rx1161_cur, rx1161_curclass, "$!cstack"
  rx1161_fail3228:
    unless rx1161_bstack, rx1161_done3226
    pop $I19, rx1161_bstack
    if_null rx1161_cstack, rx1161_cstack_done3231
    unless rx1161_cstack, rx1161_cstack_done3231
    dec $I19
    set $P11, rx1161_cstack[$I19]
  rx1161_cstack_done3231:
    pop rx1161_rep, rx1161_bstack
    pop rx1161_pos, rx1161_bstack
    pop $I19, rx1161_bstack
    lt rx1161_pos, -1, rx1161_done3226
    lt rx1161_pos, 0, rx1161_fail3228
    eq $I19, 0, rx1161_fail3228
    nqp_islist $I20, rx1161_cstack
    unless $I20, rx1161_jump3229
    elements $I18, rx1161_bstack
    le $I18, 0, rx1161_cut3230
    dec $I18
    set $I18, rx1161_bstack[$I18]
  rx1161_cut3230:
    assign rx1161_cstack, $I18
  rx1161_jump3229:
    jump $I19
  rx1161_done3226:
    rx1161_cur."!cursor_fail"()
    .return (rx1161_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1346277629.325_caps" :subid("cuid_memo_363_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1346277629.325_nfa" :subid("cuid_memo_364_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_215_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1165_tgt
    .local int rx1165_pos
    .local int rx1165_off
    .local int rx1165_eos
    .local int rx1165_rep
    .local pmc rx1165_cur
    .local pmc rx1165_curclass
    .local pmc rx1165_bstack
    .local pmc rx1165_cstack
    (rx1165_cur, rx1165_tgt, rx1165_pos, rx1165_curclass, rx1165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1165_cur
    length rx1165_eos, rx1165_tgt
    eq $I19, 1, rx1165_restart3240
    gt rx1165_pos, rx1165_eos, rx1165_fail3241
    repr_get_attr_int $I11, self, rx1165_curclass, "$!from"
    ne $I11, -1, rxscan1166_done3247
    goto rxscan1166_scan3246
  rxscan1166_loop3245:
    inc rx1165_pos
    gt rx1165_pos, rx1165_eos, rx1165_fail3241
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!from", rx1165_pos
  rxscan1166_scan3246:
    nqp_rxmark rx1165_bstack, rxscan1166_loop3245, rx1165_pos, 0
  rxscan1166_done3247:
    nqp_rxmark rx1165_bstack, rxcap1167_fail3249, rx1165_pos, 0
    add $I11, rx1165_pos, 3
    gt $I11, rx1165_eos, rx1165_fail3241
    substr $S10, rx1165_tgt, rx1165_pos, 3
    ne $S10, ucs4:"::=", rx1165_fail3241
    add rx1165_pos, 3
    nqp_rxpeek $I19, rx1165_bstack, rxcap1167_fail3249
    inc $I19
    set $I11, rx1165_bstack[$I19]
    $P11 = rx1165_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1165_pos)
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "sym")
    goto rxcap1167_done3248
  rxcap1167_fail3249:
    goto rx1165_fail3241
  rxcap1167_done3248:
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1165_curclass, "$!pos"
    lt $I11, 0, rx1165_fail3241
    nqp_rxmark rx1165_bstack, rxsubrule1168_pass3250, -1, 0
  rxsubrule1168_pass3250:
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1165_pos, $P11, rx1165_curclass, "$!pos"
    rx1165_cur."!cursor_pass"(rx1165_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1165_cur)
  rx1165_restart3240:
    repr_get_attr_obj rx1165_cstack, rx1165_cur, rx1165_curclass, "$!cstack"
  rx1165_fail3241:
    unless rx1165_bstack, rx1165_done3239
    pop $I19, rx1165_bstack
    if_null rx1165_cstack, rx1165_cstack_done3244
    unless rx1165_cstack, rx1165_cstack_done3244
    dec $I19
    set $P11, rx1165_cstack[$I19]
  rx1165_cstack_done3244:
    pop rx1165_rep, rx1165_bstack
    pop rx1165_pos, rx1165_bstack
    pop $I19, rx1165_bstack
    lt rx1165_pos, -1, rx1165_done3239
    lt rx1165_pos, 0, rx1165_fail3241
    eq $I19, 0, rx1165_fail3241
    nqp_islist $I20, rx1165_cstack
    unless $I20, rx1165_jump3242
    elements $I18, rx1165_bstack
    le $I18, 0, rx1165_cut3243
    dec $I18
    set $I18, rx1165_bstack[$I18]
  rx1165_cut3243:
    assign rx1165_cstack, $I18
  rx1165_jump3242:
    jump $I19
  rx1165_done3239:
    rx1165_cur."!cursor_fail"()
    .return (rx1165_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1346277629.325_caps" :subid("cuid_memo_365_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1346277629.325_nfa" :subid("cuid_memo_366_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_216_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_curclass
    .local pmc rx1169_bstack
    .local pmc rx1169_cstack
    (rx1169_cur, rx1169_tgt, rx1169_pos, rx1169_curclass, rx1169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1169_cur
    length rx1169_eos, rx1169_tgt
    eq $I19, 1, rx1169_restart3253
    gt rx1169_pos, rx1169_eos, rx1169_fail3254
    repr_get_attr_int $I11, self, rx1169_curclass, "$!from"
    ne $I11, -1, rxscan1170_done3260
    goto rxscan1170_scan3259
  rxscan1170_loop3258:
    inc rx1169_pos
    gt rx1169_pos, rx1169_eos, rx1169_fail3254
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!from", rx1169_pos
  rxscan1170_scan3259:
    nqp_rxmark rx1169_bstack, rxscan1170_loop3258, rx1169_pos, 0
  rxscan1170_done3260:
    nqp_rxmark rx1169_bstack, rxcap1171_fail3262, rx1169_pos, 0
    add $I11, rx1169_pos, 1
    gt $I11, rx1169_eos, rx1169_fail3254
    substr $S10, rx1169_tgt, rx1169_pos, 1
    ne $S10, ucs4:",", rx1169_fail3254
    add rx1169_pos, 1
    nqp_rxpeek $I19, rx1169_bstack, rxcap1171_fail3262
    inc $I19
    set $I11, rx1169_bstack[$I19]
    $P11 = rx1169_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1169_pos)
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "sym")
    goto rxcap1171_done3261
  rxcap1171_fail3262:
    goto rx1169_fail3254
  rxcap1171_done3261:
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1169_curclass, "$!pos"
    lt $I11, 0, rx1169_fail3254
    nqp_rxmark rx1169_bstack, rxsubrule1172_pass3263, -1, 0
  rxsubrule1172_pass3263:
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1169_pos, $P11, rx1169_curclass, "$!pos"
    rx1169_cur."!cursor_pass"(rx1169_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1169_cur)
  rx1169_restart3253:
    repr_get_attr_obj rx1169_cstack, rx1169_cur, rx1169_curclass, "$!cstack"
  rx1169_fail3254:
    unless rx1169_bstack, rx1169_done3252
    pop $I19, rx1169_bstack
    if_null rx1169_cstack, rx1169_cstack_done3257
    unless rx1169_cstack, rx1169_cstack_done3257
    dec $I19
    set $P11, rx1169_cstack[$I19]
  rx1169_cstack_done3257:
    pop rx1169_rep, rx1169_bstack
    pop rx1169_pos, rx1169_bstack
    pop $I19, rx1169_bstack
    lt rx1169_pos, -1, rx1169_done3252
    lt rx1169_pos, 0, rx1169_fail3254
    eq $I19, 0, rx1169_fail3254
    nqp_islist $I20, rx1169_cstack
    unless $I20, rx1169_jump3255
    elements $I18, rx1169_bstack
    le $I18, 0, rx1169_cut3256
    dec $I18
    set $I18, rx1169_bstack[$I18]
  rx1169_cut3256:
    assign rx1169_cstack, $I18
  rx1169_jump3255:
    jump $I19
  rx1169_done3252:
    rx1169_cur."!cursor_fail"()
    .return (rx1169_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1346277629.325_caps" :subid("cuid_memo_367_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1346277629.325_nfa" :subid("cuid_memo_368_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 44
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_217_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_399_1346277629.325' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1173_tgt
    .local int rx1173_pos
    .local int rx1173_off
    .local int rx1173_eos
    .local int rx1173_rep
    .local pmc rx1173_cur
    .local pmc rx1173_curclass
    .local pmc rx1173_bstack
    .local pmc rx1173_cstack
    (rx1173_cur, rx1173_tgt, rx1173_pos, rx1173_curclass, rx1173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1173_cur
    length rx1173_eos, rx1173_tgt
    eq $I19, 1, rx1173_restart3266
    gt rx1173_pos, rx1173_eos, rx1173_fail3267
    repr_get_attr_int $I11, self, rx1173_curclass, "$!from"
    ne $I11, -1, rxscan1174_done3273
    goto rxscan1174_scan3272
  rxscan1174_loop3271:
    inc rx1173_pos
    gt rx1173_pos, rx1173_eos, rx1173_fail3267
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!from", rx1173_pos
  rxscan1174_scan3272:
    nqp_rxmark rx1173_bstack, rxscan1174_loop3271, rx1173_pos, 0
  rxscan1174_done3273:
    nqp_rxmark rx1173_bstack, rxcap1175_fail3275, rx1173_pos, 0
    add $I11, rx1173_pos, 6
    gt $I11, rx1173_eos, rx1173_fail3267
    substr $S10, rx1173_tgt, rx1173_pos, 6
    ne $S10, ucs4:"return", rx1173_fail3267
    add rx1173_pos, 6
    nqp_rxpeek $I19, rx1173_bstack, rxcap1175_fail3275
    inc $I19
    set $I11, rx1173_bstack[$I19]
    $P11 = rx1173_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1173_pos)
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "sym")
    goto rxcap1175_done3274
  rxcap1175_fail3275:
    goto rx1173_fail3267
  rxcap1175_done3274:
    ge rx1173_pos, rx1173_eos, rx1173_fail3267
    is_cclass $I11, .CCLASS_WHITESPACE, rx1173_tgt, rx1173_pos
    unless $I11, rx1173_fail3267
    add rx1173_pos, 1
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1173_curclass, "$!pos"
    lt $I11, 0, rx1173_fail3267
    nqp_rxmark rx1173_bstack, rxsubrule1176_pass3276, -1, 0
  rxsubrule1176_pass3276:
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1173_pos, $P11, rx1173_curclass, "$!pos"
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    store_lex unicode:"$\x{a2}", rx1173_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_399_1346277629.325' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1173_cur."!cursor_pass"(rx1173_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1173_cur)
  rx1173_restart3266:
    repr_get_attr_obj rx1173_cstack, rx1173_cur, rx1173_curclass, "$!cstack"
  rx1173_fail3267:
    unless rx1173_bstack, rx1173_done3265
    pop $I19, rx1173_bstack
    if_null rx1173_cstack, rx1173_cstack_done3270
    unless rx1173_cstack, rx1173_cstack_done3270
    dec $I19
    set $P11, rx1173_cstack[$I19]
  rx1173_cstack_done3270:
    pop rx1173_rep, rx1173_bstack
    pop rx1173_pos, rx1173_bstack
    pop $I19, rx1173_bstack
    lt rx1173_pos, -1, rx1173_done3265
    lt rx1173_pos, 0, rx1173_fail3267
    eq $I19, 0, rx1173_fail3267
    nqp_islist $I20, rx1173_cstack
    unless $I20, rx1173_jump3268
    elements $I18, rx1173_bstack
    le $I18, 0, rx1173_cut3269
    dec $I18
    set $I18, rx1173_bstack[$I18]
  rx1173_cut3269:
    assign rx1173_cstack, $I18
  rx1173_jump3268:
    jump $I19
  rx1173_done3265:
    rx1173_cur."!cursor_fail"()
    .return (rx1173_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1346277629.325_caps" :subid("cuid_memo_369_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1346277629.325_nfa" :subid("cuid_memo_370_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 114
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 110
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "O"
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1346277629.325") :anon :lex :outer("cuid_217_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_218_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_curclass
    .local pmc rx1177_bstack
    .local pmc rx1177_cstack
    (rx1177_cur, rx1177_tgt, rx1177_pos, rx1177_curclass, rx1177_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1177_cur
    length rx1177_eos, rx1177_tgt
    eq $I19, 1, rx1177_restart3279
    gt rx1177_pos, rx1177_eos, rx1177_fail3280
    repr_get_attr_int $I11, self, rx1177_curclass, "$!from"
    ne $I11, -1, rxscan1178_done3286
    goto rxscan1178_scan3285
  rxscan1178_loop3284:
    inc rx1177_pos
    gt rx1177_pos, rx1177_eos, rx1177_fail3280
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!from", rx1177_pos
  rxscan1178_scan3285:
    nqp_rxmark rx1177_bstack, rxscan1178_loop3284, rx1177_pos, 0
  rxscan1178_done3286:
    nqp_rxmark rx1177_bstack, rxcap1179_fail3288, rx1177_pos, 0
    add $I11, rx1177_pos, 4
    gt $I11, rx1177_eos, rx1177_fail3280
    substr $S10, rx1177_tgt, rx1177_pos, 4
    ne $S10, ucs4:"make", rx1177_fail3280
    add rx1177_pos, 4
    nqp_rxpeek $I19, rx1177_bstack, rxcap1179_fail3288
    inc $I19
    set $I11, rx1177_bstack[$I19]
    $P11 = rx1177_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1177_pos)
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "sym")
    goto rxcap1179_done3287
  rxcap1179_fail3288:
    goto rx1177_fail3280
  rxcap1179_done3287:
    ge rx1177_pos, rx1177_eos, rx1177_fail3280
    is_cclass $I11, .CCLASS_WHITESPACE, rx1177_tgt, rx1177_pos
    unless $I11, rx1177_fail3280
    add rx1177_pos, 1
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1177_curclass, "$!pos"
    lt $I11, 0, rx1177_fail3280
    nqp_rxmark rx1177_bstack, rxsubrule1180_pass3289, -1, 0
  rxsubrule1180_pass3289:
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1177_pos, $P11, rx1177_curclass, "$!pos"
    rx1177_cur."!cursor_pass"(rx1177_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1177_cur)
  rx1177_restart3279:
    repr_get_attr_obj rx1177_cstack, rx1177_cur, rx1177_curclass, "$!cstack"
  rx1177_fail3280:
    unless rx1177_bstack, rx1177_done3278
    pop $I19, rx1177_bstack
    if_null rx1177_cstack, rx1177_cstack_done3283
    unless rx1177_cstack, rx1177_cstack_done3283
    dec $I19
    set $P11, rx1177_cstack[$I19]
  rx1177_cstack_done3283:
    pop rx1177_rep, rx1177_bstack
    pop rx1177_pos, rx1177_bstack
    pop $I19, rx1177_bstack
    lt rx1177_pos, -1, rx1177_done3278
    lt rx1177_pos, 0, rx1177_fail3280
    eq $I19, 0, rx1177_fail3280
    nqp_islist $I20, rx1177_cstack
    unless $I20, rx1177_jump3281
    elements $I18, rx1177_bstack
    le $I18, 0, rx1177_cut3282
    dec $I18
    set $I18, rx1177_bstack[$I18]
  rx1177_cut3282:
    assign rx1177_cstack, $I18
  rx1177_jump3281:
    jump $I19
  rx1177_done3278:
    rx1177_cur."!cursor_fail"()
    .return (rx1177_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1346277629.325_caps" :subid("cuid_memo_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1346277629.325_nfa" :subid("cuid_memo_372_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "O"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_219_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_curclass
    .local pmc rx1181_bstack
    .local pmc rx1181_cstack
    (rx1181_cur, rx1181_tgt, rx1181_pos, rx1181_curclass, rx1181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1181_cur
    length rx1181_eos, rx1181_tgt
    eq $I19, 1, rx1181_restart3292
    gt rx1181_pos, rx1181_eos, rx1181_fail3293
    repr_get_attr_int $I11, self, rx1181_curclass, "$!from"
    ne $I11, -1, rxscan1182_done3299
    goto rxscan1182_scan3298
  rxscan1182_loop3297:
    inc rx1181_pos
    gt rx1181_pos, rx1181_eos, rx1181_fail3293
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!from", rx1181_pos
  rxscan1182_scan3298:
    nqp_rxmark rx1181_bstack, rxscan1182_loop3297, rx1181_pos, 0
  rxscan1182_done3299:
    nqp_rxmark rx1181_bstack, rxcap1183_fail3301, rx1181_pos, 0
    add $I11, rx1181_pos, 4
    gt $I11, rx1181_eos, rx1181_fail3293
    substr $S10, rx1181_tgt, rx1181_pos, 4
    ne $S10, ucs4:"last", rx1181_fail3293
    add rx1181_pos, 4
    nqp_rxpeek $I19, rx1181_bstack, rxcap1183_fail3301
    inc $I19
    set $I11, rx1181_bstack[$I19]
    $P11 = rx1181_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1181_pos)
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "sym")
    goto rxcap1183_done3300
  rxcap1183_fail3301:
    goto rx1181_fail3293
  rxcap1183_done3300:
    rx1181_cur."!cursor_pass"(rx1181_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1181_cur)
  rx1181_restart3292:
    repr_get_attr_obj rx1181_cstack, rx1181_cur, rx1181_curclass, "$!cstack"
  rx1181_fail3293:
    unless rx1181_bstack, rx1181_done3291
    pop $I19, rx1181_bstack
    if_null rx1181_cstack, rx1181_cstack_done3296
    unless rx1181_cstack, rx1181_cstack_done3296
    dec $I19
    set $P11, rx1181_cstack[$I19]
  rx1181_cstack_done3296:
    pop rx1181_rep, rx1181_bstack
    pop rx1181_pos, rx1181_bstack
    pop $I19, rx1181_bstack
    lt rx1181_pos, -1, rx1181_done3291
    lt rx1181_pos, 0, rx1181_fail3293
    eq $I19, 0, rx1181_fail3293
    nqp_islist $I20, rx1181_cstack
    unless $I20, rx1181_jump3294
    elements $I18, rx1181_bstack
    le $I18, 0, rx1181_cut3295
    dec $I18
    set $I18, rx1181_bstack[$I18]
  rx1181_cut3295:
    assign rx1181_cstack, $I18
  rx1181_jump3294:
    jump $I19
  rx1181_done3291:
    rx1181_cur."!cursor_fail"()
    .return (rx1181_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1346277629.325_caps" :subid("cuid_memo_373_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1346277629.325_nfa" :subid("cuid_memo_374_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_220_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1184_tgt
    .local int rx1184_pos
    .local int rx1184_off
    .local int rx1184_eos
    .local int rx1184_rep
    .local pmc rx1184_cur
    .local pmc rx1184_curclass
    .local pmc rx1184_bstack
    .local pmc rx1184_cstack
    (rx1184_cur, rx1184_tgt, rx1184_pos, rx1184_curclass, rx1184_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1184_cur
    length rx1184_eos, rx1184_tgt
    eq $I19, 1, rx1184_restart3304
    gt rx1184_pos, rx1184_eos, rx1184_fail3305
    repr_get_attr_int $I11, self, rx1184_curclass, "$!from"
    ne $I11, -1, rxscan1185_done3311
    goto rxscan1185_scan3310
  rxscan1185_loop3309:
    inc rx1184_pos
    gt rx1184_pos, rx1184_eos, rx1184_fail3305
    repr_bind_attr_int rx1184_cur, rx1184_curclass, "$!from", rx1184_pos
  rxscan1185_scan3310:
    nqp_rxmark rx1184_bstack, rxscan1185_loop3309, rx1184_pos, 0
  rxscan1185_done3311:
    nqp_rxmark rx1184_bstack, rxcap1186_fail3313, rx1184_pos, 0
    add $I11, rx1184_pos, 4
    gt $I11, rx1184_eos, rx1184_fail3305
    substr $S10, rx1184_tgt, rx1184_pos, 4
    ne $S10, ucs4:"next", rx1184_fail3305
    add rx1184_pos, 4
    nqp_rxpeek $I19, rx1184_bstack, rxcap1186_fail3313
    inc $I19
    set $I11, rx1184_bstack[$I19]
    $P11 = rx1184_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1184_pos)
    rx1184_cstack = rx1184_cur."!cursor_capture"($P11, "sym")
    goto rxcap1186_done3312
  rxcap1186_fail3313:
    goto rx1184_fail3305
  rxcap1186_done3312:
    rx1184_cur."!cursor_pass"(rx1184_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1184_cur)
  rx1184_restart3304:
    repr_get_attr_obj rx1184_cstack, rx1184_cur, rx1184_curclass, "$!cstack"
  rx1184_fail3305:
    unless rx1184_bstack, rx1184_done3303
    pop $I19, rx1184_bstack
    if_null rx1184_cstack, rx1184_cstack_done3308
    unless rx1184_cstack, rx1184_cstack_done3308
    dec $I19
    set $P11, rx1184_cstack[$I19]
  rx1184_cstack_done3308:
    pop rx1184_rep, rx1184_bstack
    pop rx1184_pos, rx1184_bstack
    pop $I19, rx1184_bstack
    lt rx1184_pos, -1, rx1184_done3303
    lt rx1184_pos, 0, rx1184_fail3305
    eq $I19, 0, rx1184_fail3305
    nqp_islist $I20, rx1184_cstack
    unless $I20, rx1184_jump3306
    elements $I18, rx1184_bstack
    le $I18, 0, rx1184_cut3307
    dec $I18
    set $I18, rx1184_bstack[$I18]
  rx1184_cut3307:
    assign rx1184_cstack, $I18
  rx1184_jump3306:
    jump $I19
  rx1184_done3303:
    rx1184_cur."!cursor_fail"()
    .return (rx1184_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1346277629.325_caps" :subid("cuid_memo_375_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1346277629.325_nfa" :subid("cuid_memo_376_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 120
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_221_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1187_tgt
    .local int rx1187_pos
    .local int rx1187_off
    .local int rx1187_eos
    .local int rx1187_rep
    .local pmc rx1187_cur
    .local pmc rx1187_curclass
    .local pmc rx1187_bstack
    .local pmc rx1187_cstack
    (rx1187_cur, rx1187_tgt, rx1187_pos, rx1187_curclass, rx1187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1187_cur
    length rx1187_eos, rx1187_tgt
    eq $I19, 1, rx1187_restart3316
    gt rx1187_pos, rx1187_eos, rx1187_fail3317
    repr_get_attr_int $I11, self, rx1187_curclass, "$!from"
    ne $I11, -1, rxscan1188_done3323
    goto rxscan1188_scan3322
  rxscan1188_loop3321:
    inc rx1187_pos
    gt rx1187_pos, rx1187_eos, rx1187_fail3317
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!from", rx1187_pos
  rxscan1188_scan3322:
    nqp_rxmark rx1187_bstack, rxscan1188_loop3321, rx1187_pos, 0
  rxscan1188_done3323:
    nqp_rxmark rx1187_bstack, rxcap1189_fail3325, rx1187_pos, 0
    add $I11, rx1187_pos, 4
    gt $I11, rx1187_eos, rx1187_fail3317
    substr $S10, rx1187_tgt, rx1187_pos, 4
    ne $S10, ucs4:"redo", rx1187_fail3317
    add rx1187_pos, 4
    nqp_rxpeek $I19, rx1187_bstack, rxcap1189_fail3325
    inc $I19
    set $I11, rx1187_bstack[$I19]
    $P11 = rx1187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1187_pos)
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "sym")
    goto rxcap1189_done3324
  rxcap1189_fail3325:
    goto rx1187_fail3317
  rxcap1189_done3324:
    rx1187_cur."!cursor_pass"(rx1187_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1187_cur)
  rx1187_restart3316:
    repr_get_attr_obj rx1187_cstack, rx1187_cur, rx1187_curclass, "$!cstack"
  rx1187_fail3317:
    unless rx1187_bstack, rx1187_done3315
    pop $I19, rx1187_bstack
    if_null rx1187_cstack, rx1187_cstack_done3320
    unless rx1187_cstack, rx1187_cstack_done3320
    dec $I19
    set $P11, rx1187_cstack[$I19]
  rx1187_cstack_done3320:
    pop rx1187_rep, rx1187_bstack
    pop rx1187_pos, rx1187_bstack
    pop $I19, rx1187_bstack
    lt rx1187_pos, -1, rx1187_done3315
    lt rx1187_pos, 0, rx1187_fail3317
    eq $I19, 0, rx1187_fail3317
    nqp_islist $I20, rx1187_cstack
    unless $I20, rx1187_jump3318
    elements $I18, rx1187_bstack
    le $I18, 0, rx1187_cut3319
    dec $I18
    set $I18, rx1187_bstack[$I18]
  rx1187_cut3319:
    assign rx1187_cstack, $I18
  rx1187_jump3318:
    jump $I19
  rx1187_done3315:
    rx1187_cur."!cursor_fail"()
    .return (rx1187_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1346277629.325_caps" :subid("cuid_memo_377_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1346277629.325_nfa" :subid("cuid_memo_378_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 100
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_222_1346277629.325") :anon :lex :outer("cuid_223_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3326
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback3326:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3327
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback3327:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .const 'Sub' $P5012 = 'cuid_225_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_226_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_228_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_229_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_232_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_235_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_237_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_239_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_240_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_241_1346277629.325' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_242_1346277629.325' 
    capture_lex $P5012 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1346277629.325' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_226_1346277629.325' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1346277629.325' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_229_1346277629.325' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_232_1346277629.325' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_235_1346277629.325' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_237_1346277629.325' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_239_1346277629.325' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_240_1346277629.325' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_241_1346277629.325' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_242_1346277629.325' 
    capture_lex $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_225_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_224_1346277629.325' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1190_tgt
    .local int rx1190_pos
    .local int rx1190_off
    .local int rx1190_eos
    .local int rx1190_rep
    .local pmc rx1190_cur
    .local pmc rx1190_curclass
    .local pmc rx1190_bstack
    .local pmc rx1190_cstack
    (rx1190_cur, rx1190_tgt, rx1190_pos, rx1190_curclass, rx1190_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1190_cur
    length rx1190_eos, rx1190_tgt
    eq $I19, 1, rx1190_restart3330
    gt rx1190_pos, rx1190_eos, rx1190_fail3331
    repr_get_attr_int $I11, self, rx1190_curclass, "$!from"
    ne $I11, -1, rxscan1191_done3337
    goto rxscan1191_scan3336
  rxscan1191_loop3335:
    inc rx1190_pos
    gt rx1190_pos, rx1190_eos, rx1190_fail3331
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!from", rx1190_pos
  rxscan1191_scan3336:
    nqp_rxmark rx1190_bstack, rxscan1191_loop3335, rx1190_pos, 0
  rxscan1191_done3337:
    add $I11, rx1190_pos, 1
    gt $I11, rx1190_eos, rx1190_fail3331
    substr $S10, rx1190_tgt, rx1190_pos, 1
    ne $S10, ucs4:":", rx1190_fail3331
    add rx1190_pos, 1
    .const 'Sub' $P5001 = 'cuid_224_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3331
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3331
    nqp_rxmark rx1190_bstack, rxsubrule1194_pass3348, -1, 0
  rxsubrule1194_pass3348:
    rx1190_cstack = rx1190_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1190_pos, $P11, rx1190_curclass, "$!pos"
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3331
    repr_get_attr_int rx1190_pos, $P11, rx1190_curclass, "$!pos"
    add $I11, rx1190_pos, 1
    gt $I11, rx1190_eos, rx1190_fail3331
    substr $S10, rx1190_tgt, rx1190_pos, 1
    ne $S10, ucs4:";", rx1190_fail3331
    add rx1190_pos, 1
    rx1190_cur."!cursor_pass"(rx1190_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1190_cur)
  rx1190_restart3330:
    repr_get_attr_obj rx1190_cstack, rx1190_cur, rx1190_curclass, "$!cstack"
  rx1190_fail3331:
    unless rx1190_bstack, rx1190_done3329
    pop $I19, rx1190_bstack
    if_null rx1190_cstack, rx1190_cstack_done3334
    unless rx1190_cstack, rx1190_cstack_done3334
    dec $I19
    set $P11, rx1190_cstack[$I19]
  rx1190_cstack_done3334:
    pop rx1190_rep, rx1190_bstack
    pop rx1190_pos, rx1190_bstack
    pop $I19, rx1190_bstack
    lt rx1190_pos, -1, rx1190_done3329
    lt rx1190_pos, 0, rx1190_fail3331
    eq $I19, 0, rx1190_fail3331
    nqp_islist $I20, rx1190_cstack
    unless $I20, rx1190_jump3332
    elements $I18, rx1190_bstack
    le $I18, 0, rx1190_cut3333
    dec $I18
    set $I18, rx1190_bstack[$I18]
  rx1190_cut3333:
    assign rx1190_cstack, $I18
  rx1190_jump3332:
    jump $I19
  rx1190_done3329:
    rx1190_cur."!cursor_fail"()
    .return (rx1190_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1346277629.325_caps" :subid("cuid_memo_379_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1346277629.325_nfa" :subid("cuid_memo_380_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 4
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 121
    push $P5015, $P5017
    box $P5018, 3
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1346277629.325") :anon :lex :outer("cuid_225_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1192_tgt
    .local int rx1192_pos
    .local int rx1192_off
    .local int rx1192_eos
    .local int rx1192_rep
    .local pmc rx1192_cur
    .local pmc rx1192_curclass
    .local pmc rx1192_bstack
    .local pmc rx1192_cstack
    (rx1192_cur, rx1192_tgt, rx1192_pos, rx1192_curclass, rx1192_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1192_cur
    length rx1192_eos, rx1192_tgt
    eq $I19, 1, rx1192_restart3340
    gt rx1192_pos, rx1192_eos, rx1192_fail3341
    repr_get_attr_int $I11, self, rx1192_curclass, "$!from"
    ne $I11, -1, rxscan1193_done3347
    goto rxscan1193_scan3346
  rxscan1193_loop3345:
    inc rx1192_pos
    gt rx1192_pos, rx1192_eos, rx1192_fail3341
    repr_bind_attr_int rx1192_cur, rx1192_curclass, "$!from", rx1192_pos
  rxscan1193_scan3346:
    nqp_rxmark rx1192_bstack, rxscan1193_loop3345, rx1192_pos, 0
  rxscan1193_done3347:
    add $I11, rx1192_pos, 2
    gt $I11, rx1192_eos, rx1192_fail3341
    substr $S10, rx1192_tgt, rx1192_pos, 2
    ne $S10, ucs4:"my", rx1192_fail3341
    add rx1192_pos, 2
    rx1192_cur."!cursor_pass"(rx1192_pos, 'backtrack'=>1)
    .return (rx1192_cur)
  rx1192_restart3340:
    repr_get_attr_obj rx1192_cstack, rx1192_cur, rx1192_curclass, "$!cstack"
  rx1192_fail3341:
    unless rx1192_bstack, rx1192_done3339
    pop $I19, rx1192_bstack
    if_null rx1192_cstack, rx1192_cstack_done3344
    unless rx1192_cstack, rx1192_cstack_done3344
    dec $I19
    set $P11, rx1192_cstack[$I19]
  rx1192_cstack_done3344:
    pop rx1192_rep, rx1192_bstack
    pop rx1192_pos, rx1192_bstack
    pop $I19, rx1192_bstack
    lt rx1192_pos, -1, rx1192_done3339
    lt rx1192_pos, 0, rx1192_fail3341
    eq $I19, 0, rx1192_fail3341
    nqp_islist $I20, rx1192_cstack
    unless $I20, rx1192_jump3342
    elements $I18, rx1192_bstack
    le $I18, 0, rx1192_cut3343
    dec $I18
    set $I18, rx1192_bstack[$I18]
  rx1192_cut3343:
    assign rx1192_cstack, $I18
  rx1192_jump3342:
    jump $I19
  rx1192_done3339:
    rx1192_cur."!cursor_fail"()
    .return (rx1192_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1346277629.325_caps" :subid("cuid_memo_381_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1346277629.325_nfa" :subid("cuid_memo_382_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_226_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1196_tgt
    .local int rx1196_pos
    .local int rx1196_off
    .local int rx1196_eos
    .local int rx1196_rep
    .local pmc rx1196_cur
    .local pmc rx1196_curclass
    .local pmc rx1196_bstack
    .local pmc rx1196_cstack
    (rx1196_cur, rx1196_tgt, rx1196_pos, rx1196_curclass, rx1196_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1196_cur
    length rx1196_eos, rx1196_tgt
    eq $I19, 1, rx1196_restart3352
    gt rx1196_pos, rx1196_eos, rx1196_fail3353
    repr_get_attr_int $I11, self, rx1196_curclass, "$!from"
    ne $I11, -1, rxscan1197_done3359
    goto rxscan1197_scan3358
  rxscan1197_loop3357:
    inc rx1196_pos
    gt rx1196_pos, rx1196_eos, rx1196_fail3353
    repr_bind_attr_int rx1196_cur, rx1196_curclass, "$!from", rx1196_pos
  rxscan1197_scan3358:
    nqp_rxmark rx1196_bstack, rxscan1197_loop3357, rx1196_pos, 0
  rxscan1197_done3359:
    ge rx1196_pos, rx1196_eos, rx1196_fail3353
    substr $S11, rx1196_tgt, rx1196_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1196_fail3353
    repr_bind_attr_int rx1196_cur, rx1196_curclass, "$!pos", rx1196_pos
    $P11 = rx1196_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1196_curclass, "$!pos"
    lt $I11, 0, rx1196_fail3353
    nqp_rxmark rx1196_bstack, rxsubrule1198_pass3360, -1, 0
  rxsubrule1198_pass3360:
    rx1196_cstack = rx1196_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1196_pos, $P11, rx1196_curclass, "$!pos"
    rx1196_cur."!cursor_pass"(rx1196_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1196_cur)
  rx1196_restart3352:
    repr_get_attr_obj rx1196_cstack, rx1196_cur, rx1196_curclass, "$!cstack"
  rx1196_fail3353:
    unless rx1196_bstack, rx1196_done3351
    pop $I19, rx1196_bstack
    if_null rx1196_cstack, rx1196_cstack_done3356
    unless rx1196_cstack, rx1196_cstack_done3356
    dec $I19
    set $P11, rx1196_cstack[$I19]
  rx1196_cstack_done3356:
    pop rx1196_rep, rx1196_bstack
    pop rx1196_pos, rx1196_bstack
    pop $I19, rx1196_bstack
    lt rx1196_pos, -1, rx1196_done3351
    lt rx1196_pos, 0, rx1196_fail3353
    eq $I19, 0, rx1196_fail3353
    nqp_islist $I20, rx1196_cstack
    unless $I20, rx1196_jump3354
    elements $I18, rx1196_bstack
    le $I18, 0, rx1196_cut3355
    dec $I18
    set $I18, rx1196_bstack[$I18]
  rx1196_cut3355:
    assign rx1196_cstack, $I18
  rx1196_jump3354:
    jump $I19
  rx1196_done3351:
    rx1196_cur."!cursor_fail"()
    .return (rx1196_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1346277629.325_caps" :subid("cuid_memo_383_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1346277629.325_nfa" :subid("cuid_memo_384_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_228_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1346277629.325' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1199_tgt
    .local int rx1199_pos
    .local int rx1199_off
    .local int rx1199_eos
    .local int rx1199_rep
    .local pmc rx1199_cur
    .local pmc rx1199_curclass
    .local pmc rx1199_bstack
    .local pmc rx1199_cstack
    (rx1199_cur, rx1199_tgt, rx1199_pos, rx1199_curclass, rx1199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1199_cur
    length rx1199_eos, rx1199_tgt
    eq $I19, 1, rx1199_restart3363
    gt rx1199_pos, rx1199_eos, rx1199_fail3364
    repr_get_attr_int $I11, self, rx1199_curclass, "$!from"
    ne $I11, -1, rxscan1200_done3370
    goto rxscan1200_scan3369
  rxscan1200_loop3368:
    inc rx1199_pos
    gt rx1199_pos, rx1199_eos, rx1199_fail3364
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!from", rx1199_pos
  rxscan1200_scan3369:
    nqp_rxmark rx1199_bstack, rxscan1200_loop3368, rx1199_pos, 0
  rxscan1200_done3370:
    .const 'Sub' $P5001 = 'cuid_227_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3364
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3364
    nqp_rxmark rx1199_bstack, rxsubrule1204_pass3384, -1, 0
  rxsubrule1204_pass3384:
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1199_pos, $P11, rx1199_curclass, "$!pos"
    rx1199_cur."!cursor_pass"(rx1199_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1199_cur)
  rx1199_restart3363:
    repr_get_attr_obj rx1199_cstack, rx1199_cur, rx1199_curclass, "$!cstack"
  rx1199_fail3364:
    unless rx1199_bstack, rx1199_done3362
    pop $I19, rx1199_bstack
    if_null rx1199_cstack, rx1199_cstack_done3367
    unless rx1199_cstack, rx1199_cstack_done3367
    dec $I19
    set $P11, rx1199_cstack[$I19]
  rx1199_cstack_done3367:
    pop rx1199_rep, rx1199_bstack
    pop rx1199_pos, rx1199_bstack
    pop $I19, rx1199_bstack
    lt rx1199_pos, -1, rx1199_done3362
    lt rx1199_pos, 0, rx1199_fail3364
    eq $I19, 0, rx1199_fail3364
    nqp_islist $I20, rx1199_cstack
    unless $I20, rx1199_jump3365
    elements $I18, rx1199_bstack
    le $I18, 0, rx1199_cut3366
    dec $I18
    set $I18, rx1199_bstack[$I18]
  rx1199_cut3366:
    assign rx1199_cstack, $I18
  rx1199_jump3365:
    jump $I19
  rx1199_done3362:
    rx1199_cur."!cursor_fail"()
    .return (rx1199_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1346277629.325_caps" :subid("cuid_memo_385_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1346277629.325_nfa" :subid("cuid_memo_386_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 5
    push $P5011, $P5012
    box $P5013, 8192
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 4
    push $P5011, $P5015
    box $P5016, 8192
    push $P5011, $P5016
    box $P5017, 2
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 8192
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1346277629.325") :anon :lex :outer("cuid_228_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_curclass
    .local pmc rx1201_bstack
    .local pmc rx1201_cstack
    (rx1201_cur, rx1201_tgt, rx1201_pos, rx1201_curclass, rx1201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1201_cur
    length rx1201_eos, rx1201_tgt
    eq $I19, 1, rx1201_restart3373
    gt rx1201_pos, rx1201_eos, rx1201_fail3374
    repr_get_attr_int $I11, self, rx1201_curclass, "$!from"
    ne $I11, -1, rxscan1202_done3380
    goto rxscan1202_scan3379
  rxscan1202_loop3378:
    inc rx1201_pos
    gt rx1201_pos, rx1201_eos, rx1201_fail3374
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!from", rx1201_pos
  rxscan1202_scan3379:
    nqp_rxmark rx1201_bstack, rxscan1202_loop3378, rx1201_pos, 0
  rxscan1202_done3380:
    ge rx1201_pos, rx1201_eos, rx1201_fail3374
    substr $S11, rx1201_tgt, rx1201_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1201_fail3374
    inc rx1201_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1203_03382
    nqp_push_label $P11, alt1203_13383
    nqp_rxmark rx1201_bstack, alt1203_end3381, -1, 0
    rx1201_cur."!alt"(rx1201_pos, "alt_nfa__39_1346277635.147", $P11)
    goto rx1201_fail3374
  alt1203_03382:
    ge rx1201_pos, rx1201_eos, rx1201_fail3374
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    if $I11, rx1201_fail3374
    add rx1201_pos, 1
    ge rx1201_pos, rx1201_eos, rx1201_fail3374
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    unless $I11, rx1201_fail3374
    add rx1201_pos, 1
    goto alt1203_end3381
  alt1203_13383:
    ge rx1201_pos, rx1201_eos, rx1201_fail3374
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    unless $I11, rx1201_fail3374
    add rx1201_pos, 1
    goto alt1203_end3381
  alt1203_end3381:
    nqp_rxcommit rx1201_bstack, alt1203_end3381
    rx1201_cur."!cursor_pass"(rx1201_pos, 'backtrack'=>1)
    .return (rx1201_cur)
  rx1201_restart3373:
    repr_get_attr_obj rx1201_cstack, rx1201_cur, rx1201_curclass, "$!cstack"
  rx1201_fail3374:
    unless rx1201_bstack, rx1201_done3372
    pop $I19, rx1201_bstack
    if_null rx1201_cstack, rx1201_cstack_done3377
    unless rx1201_cstack, rx1201_cstack_done3377
    dec $I19
    set $P11, rx1201_cstack[$I19]
  rx1201_cstack_done3377:
    pop rx1201_rep, rx1201_bstack
    pop rx1201_pos, rx1201_bstack
    pop $I19, rx1201_bstack
    lt rx1201_pos, -1, rx1201_done3372
    lt rx1201_pos, 0, rx1201_fail3374
    eq $I19, 0, rx1201_fail3374
    nqp_islist $I20, rx1201_cstack
    unless $I20, rx1201_jump3375
    elements $I18, rx1201_bstack
    le $I18, 0, rx1201_cut3376
    dec $I18
    set $I18, rx1201_bstack[$I18]
  rx1201_cut3376:
    assign rx1201_cstack, $I18
  rx1201_jump3375:
    jump $I19
  rx1201_done3372:
    rx1201_cur."!cursor_fail"()
    .return (rx1201_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346277629.325_caps" :subid("cuid_memo_387_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346277629.325_nfa" :subid("cuid_memo_388_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 5
    push $P5007, $P5008
    box $P5009, 8192
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 4
    push $P5007, $P5011
    box $P5012, 8192
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346277629.325_alt_nfa__39_1346277635.147" :subid("cuid_memo_389_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 5
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 4
    push $P5008, $P5009
    box $P5010, 8192
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_229_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1205_tgt
    .local int rx1205_pos
    .local int rx1205_off
    .local int rx1205_eos
    .local int rx1205_rep
    .local pmc rx1205_cur
    .local pmc rx1205_curclass
    .local pmc rx1205_bstack
    .local pmc rx1205_cstack
    (rx1205_cur, rx1205_tgt, rx1205_pos, rx1205_curclass, rx1205_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1205_cur
    length rx1205_eos, rx1205_tgt
    eq $I19, 1, rx1205_restart3387
    gt rx1205_pos, rx1205_eos, rx1205_fail3388
    repr_get_attr_int $I11, self, rx1205_curclass, "$!from"
    ne $I11, -1, rxscan1206_done3394
    goto rxscan1206_scan3393
  rxscan1206_loop3392:
    inc rx1205_pos
    gt rx1205_pos, rx1205_eos, rx1205_fail3388
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!from", rx1205_pos
  rxscan1206_scan3393:
    nqp_rxmark rx1205_bstack, rxscan1206_loop3392, rx1205_pos, 0
  rxscan1206_done3394:
    ge rx1205_pos, rx1205_eos, rx1205_fail3388
    substr $S11, rx1205_tgt, rx1205_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1205_fail3388
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1205_curclass, "$!pos"
    lt $I11, 0, rx1205_fail3388
    nqp_rxmark rx1205_bstack, rxsubrule1207_pass3395, -1, 0
  rxsubrule1207_pass3395:
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1205_pos, $P11, rx1205_curclass, "$!pos"
    rx1205_cur."!cursor_pass"(rx1205_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1205_cur)
  rx1205_restart3387:
    repr_get_attr_obj rx1205_cstack, rx1205_cur, rx1205_curclass, "$!cstack"
  rx1205_fail3388:
    unless rx1205_bstack, rx1205_done3386
    pop $I19, rx1205_bstack
    if_null rx1205_cstack, rx1205_cstack_done3391
    unless rx1205_cstack, rx1205_cstack_done3391
    dec $I19
    set $P11, rx1205_cstack[$I19]
  rx1205_cstack_done3391:
    pop rx1205_rep, rx1205_bstack
    pop rx1205_pos, rx1205_bstack
    pop $I19, rx1205_bstack
    lt rx1205_pos, -1, rx1205_done3386
    lt rx1205_pos, 0, rx1205_fail3388
    eq $I19, 0, rx1205_fail3388
    nqp_islist $I20, rx1205_cstack
    unless $I20, rx1205_jump3389
    elements $I18, rx1205_bstack
    le $I18, 0, rx1205_cut3390
    dec $I18
    set $I18, rx1205_bstack[$I18]
  rx1205_cut3390:
    assign rx1205_cstack, $I18
  rx1205_jump3389:
    jump $I19
  rx1205_done3386:
    rx1205_cur."!cursor_fail"()
    .return (rx1205_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1346277629.325_caps" :subid("cuid_memo_390_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1346277629.325_nfa" :subid("cuid_memo_391_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_230_1346277629.325' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_231_1346277629.325' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1208_tgt
    .local int rx1208_pos
    .local int rx1208_off
    .local int rx1208_eos
    .local int rx1208_rep
    .local pmc rx1208_cur
    .local pmc rx1208_curclass
    .local pmc rx1208_bstack
    .local pmc rx1208_cstack
    (rx1208_cur, rx1208_tgt, rx1208_pos, rx1208_curclass, rx1208_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1208_cur
    length rx1208_eos, rx1208_tgt
    eq $I19, 1, rx1208_restart3398
    gt rx1208_pos, rx1208_eos, rx1208_fail3399
    repr_get_attr_int $I11, self, rx1208_curclass, "$!from"
    ne $I11, -1, rxscan1209_done3405
    goto rxscan1209_scan3404
  rxscan1209_loop3403:
    inc rx1208_pos
    gt rx1208_pos, rx1208_eos, rx1208_fail3399
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!from", rx1208_pos
  rxscan1209_scan3404:
    nqp_rxmark rx1208_bstack, rxscan1209_loop3403, rx1208_pos, 0
  rxscan1209_done3405:
    add $I11, rx1208_pos, 1
    gt $I11, rx1208_eos, rx1208_fail3399
    substr $S10, rx1208_tgt, rx1208_pos, 1
    ne $S10, ucs4:"?", rx1208_fail3399
    add rx1208_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1210_03407
    nqp_push_label $P11, alt1210_13418
    nqp_rxmark rx1208_bstack, alt1210_end3406, -1, 0
    rx1208_cur."!alt"(rx1208_pos, "alt_nfa__40_1346277635.189", $P11)
    goto rx1208_fail3399
  alt1210_03407:
    .const 'Sub' $P5001 = 'cuid_230_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    lt $I11, 0, rx1208_fail3399
    goto alt1210_end3406
  alt1210_13418:
    .const 'Sub' $P5002 = 'cuid_231_1346277629.325' 
    capture_lex $P5002
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    ge $I11, 0, rx1208_fail3399
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    lt $I11, 0, rx1208_fail3399
    nqp_rxmark rx1208_bstack, rxsubrule1215_pass3429, -1, 0
  rxsubrule1215_pass3429:
    rx1208_cstack = rx1208_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1208_pos, $P11, rx1208_curclass, "$!pos"
    goto alt1210_end3406
  alt1210_end3406:
    nqp_rxcommit rx1208_bstack, alt1210_end3406
    rx1208_cur."!cursor_pass"(rx1208_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1208_cur)
  rx1208_restart3398:
    repr_get_attr_obj rx1208_cstack, rx1208_cur, rx1208_curclass, "$!cstack"
  rx1208_fail3399:
    unless rx1208_bstack, rx1208_done3397
    pop $I19, rx1208_bstack
    if_null rx1208_cstack, rx1208_cstack_done3402
    unless rx1208_cstack, rx1208_cstack_done3402
    dec $I19
    set $P11, rx1208_cstack[$I19]
  rx1208_cstack_done3402:
    pop rx1208_rep, rx1208_bstack
    pop rx1208_pos, rx1208_bstack
    pop $I19, rx1208_bstack
    lt rx1208_pos, -1, rx1208_done3397
    lt rx1208_pos, 0, rx1208_fail3399
    eq $I19, 0, rx1208_fail3399
    nqp_islist $I20, rx1208_cstack
    unless $I20, rx1208_jump3400
    elements $I18, rx1208_bstack
    le $I18, 0, rx1208_cut3401
    dec $I18
    set $I18, rx1208_bstack[$I18]
  rx1208_cut3401:
    assign rx1208_cstack, $I18
  rx1208_jump3400:
    jump $I19
  rx1208_done3397:
    rx1208_cur."!cursor_fail"()
    .return (rx1208_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346277629.325_caps" :subid("cuid_memo_392_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346277629.325_nfa" :subid("cuid_memo_393_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346277629.325_alt_nfa__40_1346277635.189" :subid("cuid_memo_394_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1346277629.325") :anon :lex :outer("cuid_232_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1211_tgt
    .local int rx1211_pos
    .local int rx1211_off
    .local int rx1211_eos
    .local int rx1211_rep
    .local pmc rx1211_cur
    .local pmc rx1211_curclass
    .local pmc rx1211_bstack
    .local pmc rx1211_cstack
    (rx1211_cur, rx1211_tgt, rx1211_pos, rx1211_curclass, rx1211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1211_cur
    length rx1211_eos, rx1211_tgt
    eq $I19, 1, rx1211_restart3410
    gt rx1211_pos, rx1211_eos, rx1211_fail3411
    repr_get_attr_int $I11, self, rx1211_curclass, "$!from"
    ne $I11, -1, rxscan1212_done3417
    goto rxscan1212_scan3416
  rxscan1212_loop3415:
    inc rx1211_pos
    gt rx1211_pos, rx1211_eos, rx1211_fail3411
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!from", rx1211_pos
  rxscan1212_scan3416:
    nqp_rxmark rx1211_bstack, rxscan1212_loop3415, rx1211_pos, 0
  rxscan1212_done3417:
    add $I11, rx1211_pos, 1
    gt $I11, rx1211_eos, rx1211_fail3411
    substr $S10, rx1211_tgt, rx1211_pos, 1
    ne $S10, ucs4:">", rx1211_fail3411
    add rx1211_pos, 1
    rx1211_cur."!cursor_pass"(rx1211_pos, 'backtrack'=>1)
    .return (rx1211_cur)
  rx1211_restart3410:
    repr_get_attr_obj rx1211_cstack, rx1211_cur, rx1211_curclass, "$!cstack"
  rx1211_fail3411:
    unless rx1211_bstack, rx1211_done3409
    pop $I19, rx1211_bstack
    if_null rx1211_cstack, rx1211_cstack_done3414
    unless rx1211_cstack, rx1211_cstack_done3414
    dec $I19
    set $P11, rx1211_cstack[$I19]
  rx1211_cstack_done3414:
    pop rx1211_rep, rx1211_bstack
    pop rx1211_pos, rx1211_bstack
    pop $I19, rx1211_bstack
    lt rx1211_pos, -1, rx1211_done3409
    lt rx1211_pos, 0, rx1211_fail3411
    eq $I19, 0, rx1211_fail3411
    nqp_islist $I20, rx1211_cstack
    unless $I20, rx1211_jump3412
    elements $I18, rx1211_bstack
    le $I18, 0, rx1211_cut3413
    dec $I18
    set $I18, rx1211_bstack[$I18]
  rx1211_cut3413:
    assign rx1211_cstack, $I18
  rx1211_jump3412:
    jump $I19
  rx1211_done3409:
    rx1211_cur."!cursor_fail"()
    .return (rx1211_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1346277629.325_caps" :subid("cuid_memo_395_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1346277629.325_nfa" :subid("cuid_memo_396_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1346277629.325") :anon :lex :outer("cuid_232_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1213_tgt
    .local int rx1213_pos
    .local int rx1213_off
    .local int rx1213_eos
    .local int rx1213_rep
    .local pmc rx1213_cur
    .local pmc rx1213_curclass
    .local pmc rx1213_bstack
    .local pmc rx1213_cstack
    (rx1213_cur, rx1213_tgt, rx1213_pos, rx1213_curclass, rx1213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1213_cur
    length rx1213_eos, rx1213_tgt
    eq $I19, 1, rx1213_restart3421
    gt rx1213_pos, rx1213_eos, rx1213_fail3422
    repr_get_attr_int $I11, self, rx1213_curclass, "$!from"
    ne $I11, -1, rxscan1214_done3428
    goto rxscan1214_scan3427
  rxscan1214_loop3426:
    inc rx1213_pos
    gt rx1213_pos, rx1213_eos, rx1213_fail3422
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!from", rx1213_pos
  rxscan1214_scan3427:
    nqp_rxmark rx1213_bstack, rxscan1214_loop3426, rx1213_pos, 0
  rxscan1214_done3428:
    add $I11, rx1213_pos, 1
    gt $I11, rx1213_eos, rx1213_fail3422
    substr $S10, rx1213_tgt, rx1213_pos, 1
    ne $S10, ucs4:"{", rx1213_fail3422
    add rx1213_pos, 1
    rx1213_cur."!cursor_pass"(rx1213_pos, 'backtrack'=>1)
    .return (rx1213_cur)
  rx1213_restart3421:
    repr_get_attr_obj rx1213_cstack, rx1213_cur, rx1213_curclass, "$!cstack"
  rx1213_fail3422:
    unless rx1213_bstack, rx1213_done3420
    pop $I19, rx1213_bstack
    if_null rx1213_cstack, rx1213_cstack_done3425
    unless rx1213_cstack, rx1213_cstack_done3425
    dec $I19
    set $P11, rx1213_cstack[$I19]
  rx1213_cstack_done3425:
    pop rx1213_rep, rx1213_bstack
    pop rx1213_pos, rx1213_bstack
    pop $I19, rx1213_bstack
    lt rx1213_pos, -1, rx1213_done3420
    lt rx1213_pos, 0, rx1213_fail3422
    eq $I19, 0, rx1213_fail3422
    nqp_islist $I20, rx1213_cstack
    unless $I20, rx1213_jump3423
    elements $I18, rx1213_bstack
    le $I18, 0, rx1213_cut3424
    dec $I18
    set $I18, rx1213_bstack[$I18]
  rx1213_cut3424:
    assign rx1213_cstack, $I18
  rx1213_jump3423:
    jump $I19
  rx1213_done3420:
    rx1213_cur."!cursor_fail"()
    .return (rx1213_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1346277629.325_caps" :subid("cuid_memo_397_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1346277629.325_nfa" :subid("cuid_memo_398_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1346277629.325' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1346277629.325' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1216_tgt
    .local int rx1216_pos
    .local int rx1216_off
    .local int rx1216_eos
    .local int rx1216_rep
    .local pmc rx1216_cur
    .local pmc rx1216_curclass
    .local pmc rx1216_bstack
    .local pmc rx1216_cstack
    (rx1216_cur, rx1216_tgt, rx1216_pos, rx1216_curclass, rx1216_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1216_cur
    length rx1216_eos, rx1216_tgt
    eq $I19, 1, rx1216_restart3432
    gt rx1216_pos, rx1216_eos, rx1216_fail3433
    repr_get_attr_int $I11, self, rx1216_curclass, "$!from"
    ne $I11, -1, rxscan1217_done3439
    goto rxscan1217_scan3438
  rxscan1217_loop3437:
    inc rx1216_pos
    gt rx1216_pos, rx1216_eos, rx1216_fail3433
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!from", rx1216_pos
  rxscan1217_scan3438:
    nqp_rxmark rx1216_bstack, rxscan1217_loop3437, rx1216_pos, 0
  rxscan1217_done3439:
    add $I11, rx1216_pos, 1
    gt $I11, rx1216_eos, rx1216_fail3433
    substr $S10, rx1216_tgt, rx1216_pos, 1
    ne $S10, ucs4:"!", rx1216_fail3433
    add rx1216_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1218_03441
    nqp_push_label $P11, alt1218_13452
    nqp_rxmark rx1216_bstack, alt1218_end3440, -1, 0
    rx1216_cur."!alt"(rx1216_pos, "alt_nfa__41_1346277635.212", $P11)
    goto rx1216_fail3433
  alt1218_03441:
    .const 'Sub' $P5001 = 'cuid_233_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    lt $I11, 0, rx1216_fail3433
    goto alt1218_end3440
  alt1218_13452:
    .const 'Sub' $P5002 = 'cuid_234_1346277629.325' 
    capture_lex $P5002
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    ge $I11, 0, rx1216_fail3433
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    lt $I11, 0, rx1216_fail3433
    nqp_rxmark rx1216_bstack, rxsubrule1223_pass3463, -1, 0
  rxsubrule1223_pass3463:
    rx1216_cstack = rx1216_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1216_pos, $P11, rx1216_curclass, "$!pos"
    goto alt1218_end3440
  alt1218_end3440:
    nqp_rxcommit rx1216_bstack, alt1218_end3440
    rx1216_cur."!cursor_pass"(rx1216_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1216_cur)
  rx1216_restart3432:
    repr_get_attr_obj rx1216_cstack, rx1216_cur, rx1216_curclass, "$!cstack"
  rx1216_fail3433:
    unless rx1216_bstack, rx1216_done3431
    pop $I19, rx1216_bstack
    if_null rx1216_cstack, rx1216_cstack_done3436
    unless rx1216_cstack, rx1216_cstack_done3436
    dec $I19
    set $P11, rx1216_cstack[$I19]
  rx1216_cstack_done3436:
    pop rx1216_rep, rx1216_bstack
    pop rx1216_pos, rx1216_bstack
    pop $I19, rx1216_bstack
    lt rx1216_pos, -1, rx1216_done3431
    lt rx1216_pos, 0, rx1216_fail3433
    eq $I19, 0, rx1216_fail3433
    nqp_islist $I20, rx1216_cstack
    unless $I20, rx1216_jump3434
    elements $I18, rx1216_bstack
    le $I18, 0, rx1216_cut3435
    dec $I18
    set $I18, rx1216_bstack[$I18]
  rx1216_cut3435:
    assign rx1216_cstack, $I18
  rx1216_jump3434:
    jump $I19
  rx1216_done3431:
    rx1216_cur."!cursor_fail"()
    .return (rx1216_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346277629.325_caps" :subid("cuid_memo_399_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346277629.325_nfa" :subid("cuid_memo_400_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346277629.325_alt_nfa__41_1346277635.212" :subid("cuid_memo_401_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1346277629.325") :anon :lex :outer("cuid_235_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1219_tgt
    .local int rx1219_pos
    .local int rx1219_off
    .local int rx1219_eos
    .local int rx1219_rep
    .local pmc rx1219_cur
    .local pmc rx1219_curclass
    .local pmc rx1219_bstack
    .local pmc rx1219_cstack
    (rx1219_cur, rx1219_tgt, rx1219_pos, rx1219_curclass, rx1219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1219_cur
    length rx1219_eos, rx1219_tgt
    eq $I19, 1, rx1219_restart3444
    gt rx1219_pos, rx1219_eos, rx1219_fail3445
    repr_get_attr_int $I11, self, rx1219_curclass, "$!from"
    ne $I11, -1, rxscan1220_done3451
    goto rxscan1220_scan3450
  rxscan1220_loop3449:
    inc rx1219_pos
    gt rx1219_pos, rx1219_eos, rx1219_fail3445
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!from", rx1219_pos
  rxscan1220_scan3450:
    nqp_rxmark rx1219_bstack, rxscan1220_loop3449, rx1219_pos, 0
  rxscan1220_done3451:
    add $I11, rx1219_pos, 1
    gt $I11, rx1219_eos, rx1219_fail3445
    substr $S10, rx1219_tgt, rx1219_pos, 1
    ne $S10, ucs4:">", rx1219_fail3445
    add rx1219_pos, 1
    rx1219_cur."!cursor_pass"(rx1219_pos, 'backtrack'=>1)
    .return (rx1219_cur)
  rx1219_restart3444:
    repr_get_attr_obj rx1219_cstack, rx1219_cur, rx1219_curclass, "$!cstack"
  rx1219_fail3445:
    unless rx1219_bstack, rx1219_done3443
    pop $I19, rx1219_bstack
    if_null rx1219_cstack, rx1219_cstack_done3448
    unless rx1219_cstack, rx1219_cstack_done3448
    dec $I19
    set $P11, rx1219_cstack[$I19]
  rx1219_cstack_done3448:
    pop rx1219_rep, rx1219_bstack
    pop rx1219_pos, rx1219_bstack
    pop $I19, rx1219_bstack
    lt rx1219_pos, -1, rx1219_done3443
    lt rx1219_pos, 0, rx1219_fail3445
    eq $I19, 0, rx1219_fail3445
    nqp_islist $I20, rx1219_cstack
    unless $I20, rx1219_jump3446
    elements $I18, rx1219_bstack
    le $I18, 0, rx1219_cut3447
    dec $I18
    set $I18, rx1219_bstack[$I18]
  rx1219_cut3447:
    assign rx1219_cstack, $I18
  rx1219_jump3446:
    jump $I19
  rx1219_done3443:
    rx1219_cur."!cursor_fail"()
    .return (rx1219_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1346277629.325_caps" :subid("cuid_memo_402_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1346277629.325_nfa" :subid("cuid_memo_403_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1346277629.325") :anon :lex :outer("cuid_235_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3455
    gt rx1221_pos, rx1221_eos, rx1221_fail3456
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3462
    goto rxscan1222_scan3461
  rxscan1222_loop3460:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3456
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3461:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3460, rx1221_pos, 0
  rxscan1222_done3462:
    add $I11, rx1221_pos, 1
    gt $I11, rx1221_eos, rx1221_fail3456
    substr $S10, rx1221_tgt, rx1221_pos, 1
    ne $S10, ucs4:"{", rx1221_fail3456
    add rx1221_pos, 1
    rx1221_cur."!cursor_pass"(rx1221_pos, 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3455:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3456:
    unless rx1221_bstack, rx1221_done3454
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3459
    unless rx1221_cstack, rx1221_cstack_done3459
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3459:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3454
    lt rx1221_pos, 0, rx1221_fail3456
    eq $I19, 0, rx1221_fail3456
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3457
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3458
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3458:
    assign rx1221_cstack, $I18
  rx1221_jump3457:
    jump $I19
  rx1221_done3454:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1346277629.325_caps" :subid("cuid_memo_404_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1346277629.325_nfa" :subid("cuid_memo_405_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_237_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_236_1346277629.325' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1224_tgt
    .local int rx1224_pos
    .local int rx1224_off
    .local int rx1224_eos
    .local int rx1224_rep
    .local pmc rx1224_cur
    .local pmc rx1224_curclass
    .local pmc rx1224_bstack
    .local pmc rx1224_cstack
    (rx1224_cur, rx1224_tgt, rx1224_pos, rx1224_curclass, rx1224_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1224_cur
    length rx1224_eos, rx1224_tgt
    eq $I19, 1, rx1224_restart3466
    gt rx1224_pos, rx1224_eos, rx1224_fail3467
    repr_get_attr_int $I11, self, rx1224_curclass, "$!from"
    ne $I11, -1, rxscan1225_done3473
    goto rxscan1225_scan3472
  rxscan1225_loop3471:
    inc rx1224_pos
    gt rx1224_pos, rx1224_eos, rx1224_fail3467
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!from", rx1224_pos
  rxscan1225_scan3472:
    nqp_rxmark rx1224_bstack, rxscan1225_loop3471, rx1224_pos, 0
  rxscan1225_done3473:
    nqp_rxmark rx1224_bstack, rxcap1226_fail3475, rx1224_pos, 0
    ge rx1224_pos, rx1224_eos, rx1224_fail3467
    substr $S11, rx1224_tgt, rx1224_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1224_fail3467
    inc rx1224_pos
    .const 'Sub' $P5001 = 'cuid_236_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!pos", rx1224_pos
    $P11 = rx1224_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1224_curclass, "$!pos"
    lt $I11, 0, rx1224_fail3467
    nqp_rxpeek $I19, rx1224_bstack, rxcap1226_fail3475
    inc $I19
    set $I11, rx1224_bstack[$I19]
    $P11 = rx1224_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1224_pos)
    rx1224_cstack = rx1224_cur."!cursor_capture"($P11, "zw")
    goto rxcap1226_done3474
  rxcap1226_fail3475:
    goto rx1224_fail3467
  rxcap1226_done3474:
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!pos", rx1224_pos
    $P11 = rx1224_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1224_curclass, "$!pos"
    lt $I11, 0, rx1224_fail3467
    nqp_rxmark rx1224_bstack, rxsubrule1229_pass3486, -1, 0
  rxsubrule1229_pass3486:
    rx1224_cstack = rx1224_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1224_pos, $P11, rx1224_curclass, "$!pos"
    rx1224_cur."!cursor_pass"(rx1224_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1224_cur)
  rx1224_restart3466:
    repr_get_attr_obj rx1224_cstack, rx1224_cur, rx1224_curclass, "$!cstack"
  rx1224_fail3467:
    unless rx1224_bstack, rx1224_done3465
    pop $I19, rx1224_bstack
    if_null rx1224_cstack, rx1224_cstack_done3470
    unless rx1224_cstack, rx1224_cstack_done3470
    dec $I19
    set $P11, rx1224_cstack[$I19]
  rx1224_cstack_done3470:
    pop rx1224_rep, rx1224_bstack
    pop rx1224_pos, rx1224_bstack
    pop $I19, rx1224_bstack
    lt rx1224_pos, -1, rx1224_done3465
    lt rx1224_pos, 0, rx1224_fail3467
    eq $I19, 0, rx1224_fail3467
    nqp_islist $I20, rx1224_cstack
    unless $I20, rx1224_jump3468
    elements $I18, rx1224_bstack
    le $I18, 0, rx1224_cut3469
    dec $I18
    set $I18, rx1224_bstack[$I18]
  rx1224_cut3469:
    assign rx1224_cstack, $I18
  rx1224_jump3468:
    jump $I19
  rx1224_done3465:
    rx1224_cur."!cursor_fail"()
    .return (rx1224_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1346277629.325_caps" :subid("cuid_memo_406_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["zw"], $P5002
    box $P5003, 0
    set $P5001["codeblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1346277629.325_nfa" :subid("cuid_memo_407_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "?!"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1346277629.325") :anon :lex :outer("cuid_237_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1227_tgt
    .local int rx1227_pos
    .local int rx1227_off
    .local int rx1227_eos
    .local int rx1227_rep
    .local pmc rx1227_cur
    .local pmc rx1227_curclass
    .local pmc rx1227_bstack
    .local pmc rx1227_cstack
    (rx1227_cur, rx1227_tgt, rx1227_pos, rx1227_curclass, rx1227_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1227_cur
    length rx1227_eos, rx1227_tgt
    eq $I19, 1, rx1227_restart3478
    gt rx1227_pos, rx1227_eos, rx1227_fail3479
    repr_get_attr_int $I11, self, rx1227_curclass, "$!from"
    ne $I11, -1, rxscan1228_done3485
    goto rxscan1228_scan3484
  rxscan1228_loop3483:
    inc rx1227_pos
    gt rx1227_pos, rx1227_eos, rx1227_fail3479
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!from", rx1227_pos
  rxscan1228_scan3484:
    nqp_rxmark rx1227_bstack, rxscan1228_loop3483, rx1227_pos, 0
  rxscan1228_done3485:
    add $I11, rx1227_pos, 1
    gt $I11, rx1227_eos, rx1227_fail3479
    substr $S10, rx1227_tgt, rx1227_pos, 1
    ne $S10, ucs4:"{", rx1227_fail3479
    add rx1227_pos, 1
    rx1227_cur."!cursor_pass"(rx1227_pos, 'backtrack'=>1)
    .return (rx1227_cur)
  rx1227_restart3478:
    repr_get_attr_obj rx1227_cstack, rx1227_cur, rx1227_curclass, "$!cstack"
  rx1227_fail3479:
    unless rx1227_bstack, rx1227_done3477
    pop $I19, rx1227_bstack
    if_null rx1227_cstack, rx1227_cstack_done3482
    unless rx1227_cstack, rx1227_cstack_done3482
    dec $I19
    set $P11, rx1227_cstack[$I19]
  rx1227_cstack_done3482:
    pop rx1227_rep, rx1227_bstack
    pop rx1227_pos, rx1227_bstack
    pop $I19, rx1227_bstack
    lt rx1227_pos, -1, rx1227_done3477
    lt rx1227_pos, 0, rx1227_fail3479
    eq $I19, 0, rx1227_fail3479
    nqp_islist $I20, rx1227_cstack
    unless $I20, rx1227_jump3480
    elements $I18, rx1227_bstack
    le $I18, 0, rx1227_cut3481
    dec $I18
    set $I18, rx1227_bstack[$I18]
  rx1227_cut3481:
    assign rx1227_cstack, $I18
  rx1227_jump3480:
    jump $I19
  rx1227_done3477:
    rx1227_cur."!cursor_fail"()
    .return (rx1227_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1346277629.325_caps" :subid("cuid_memo_408_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1346277629.325_nfa" :subid("cuid_memo_409_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_239_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_238_1346277629.325' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1230_tgt
    .local int rx1230_pos
    .local int rx1230_off
    .local int rx1230_eos
    .local int rx1230_rep
    .local pmc rx1230_cur
    .local pmc rx1230_curclass
    .local pmc rx1230_bstack
    .local pmc rx1230_cstack
    (rx1230_cur, rx1230_tgt, rx1230_pos, rx1230_curclass, rx1230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1230_cur
    length rx1230_eos, rx1230_tgt
    eq $I19, 1, rx1230_restart3489
    gt rx1230_pos, rx1230_eos, rx1230_fail3490
    repr_get_attr_int $I11, self, rx1230_curclass, "$!from"
    ne $I11, -1, rxscan1231_done3496
    goto rxscan1231_scan3495
  rxscan1231_loop3494:
    inc rx1230_pos
    gt rx1230_pos, rx1230_eos, rx1230_fail3490
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!from", rx1230_pos
  rxscan1231_scan3495:
    nqp_rxmark rx1230_bstack, rxscan1231_loop3494, rx1230_pos, 0
  rxscan1231_done3496:
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1232_pass3497, -1, 0
  rxsubrule1232_pass3497:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    nqp_rxmark rx1230_bstack, rxquantr1233_done3499, rx1230_pos, 0
  rxquantr1233_loop3498:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1234_03501
    nqp_push_label $P11, alt1234_13512
    nqp_push_label $P11, alt1234_23514
    nqp_push_label $P11, alt1234_33516
    nqp_push_label $P11, alt1234_43518
    nqp_rxmark rx1230_bstack, alt1234_end3500, -1, 0
    rx1230_cur."!alt"(rx1230_pos, "alt_nfa__42_1346277635.27", $P11)
    goto rx1230_fail3490
  alt1234_03501:
    .const 'Sub' $P5001 = 'cuid_238_1346277629.325' 
    capture_lex $P5001
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    goto alt1234_end3500
  alt1234_13512:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3490
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:"=", rx1230_fail3490
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1237_pass3513, -1, 0
  rxsubrule1237_pass3513:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3500
  alt1234_23514:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3490
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:":", rx1230_fail3490
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1238_pass3515, -1, 0
  rxsubrule1238_pass3515:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3500
  alt1234_33516:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3490
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:"(", rx1230_fail3490
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1239_pass3517, -1, 0
  rxsubrule1239_pass3517:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3490
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:")", rx1230_fail3490
    add rx1230_pos, 1
    goto alt1234_end3500
  alt1234_43518:
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3490
    nqp_rxmark rx1230_bstack, rxsubrule1241_pass3520, -1, 0
  rxsubrule1241_pass3520:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3500
  alt1234_end3500:
    nqp_rxpeek $I19, rx1230_bstack, rxquantr1233_done3499
    inc $I19
    inc $I19
    set rx1230_rep, rx1230_bstack[$I19]
    nqp_rxcommit rx1230_bstack, rxquantr1233_done3499
    inc rx1230_rep
  rxquantr1233_done3499:
    rx1230_cur."!cursor_pass"(rx1230_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1230_cur)
  rx1230_restart3489:
    repr_get_attr_obj rx1230_cstack, rx1230_cur, rx1230_curclass, "$!cstack"
  rx1230_fail3490:
    unless rx1230_bstack, rx1230_done3488
    pop $I19, rx1230_bstack
    if_null rx1230_cstack, rx1230_cstack_done3493
    unless rx1230_cstack, rx1230_cstack_done3493
    dec $I19
    set $P11, rx1230_cstack[$I19]
  rx1230_cstack_done3493:
    pop rx1230_rep, rx1230_bstack
    pop rx1230_pos, rx1230_bstack
    pop $I19, rx1230_bstack
    lt rx1230_pos, -1, rx1230_done3488
    lt rx1230_pos, 0, rx1230_fail3490
    eq $I19, 0, rx1230_fail3490
    nqp_islist $I20, rx1230_cstack
    unless $I20, rx1230_jump3491
    elements $I18, rx1230_bstack
    le $I18, 0, rx1230_cut3492
    dec $I18
    set $I18, rx1230_bstack[$I18]
  rx1230_cut3492:
    assign rx1230_cstack, $I18
  rx1230_jump3491:
    jump $I19
  rx1230_done3488:
    rx1230_cur."!cursor_fail"()
    .return (rx1230_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346277629.325_caps" :subid("cuid_memo_410_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 2
    set $P5001["assertion"], $P5003
    box $P5004, 2
    set $P5001["arglist"], $P5004
    box $P5005, 2
    set $P5001["nibbler"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346277629.325_nfa" :subid("cuid_memo_411_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 61
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 2
    push $P5007, $P5014
    box $P5015, 58
    push $P5007, $P5015
    box $P5016, 5
    push $P5007, $P5016
    box $P5017, 2
    push $P5007, $P5017
    box $P5018, 40
    push $P5007, $P5018
    box $P5019, 6
    push $P5007, $P5019
    box $P5020, 8
    push $P5007, $P5020
    box $P5021, "normspace"
    push $P5007, $P5021
    box $P5022, 8
    push $P5007, $P5022
    box $P5023, 1
    push $P5007, $P5023
    box $P5024, 0
    push $P5007, $P5024
    box $P5025, 0
    push $P5007, $P5025
    push $P5001, $P5007
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 8
    push $P5030, $P5031
    box $P5032, "assertion"
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 8
    push $P5034, $P5035
    box $P5036, "arglist"
    push $P5034, $P5036
    box $P5037, 0
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 8
    push $P5046, $P5047
    box $P5048, "nibbler"
    push $P5046, $P5048
    box $P5049, 0
    push $P5046, $P5049
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346277629.325_alt_nfa__42_1346277635.27" :subid("cuid_memo_412_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "assertion"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5022, 'ResizablePMCArray'
    new $P5023, 'ResizablePMCArray'
    push $P5022, $P5023
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 58
    push $P5024, $P5026
    box $P5027, 2
    push $P5024, $P5027
    push $P5022, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 8
    push $P5028, $P5029
    box $P5030, "arglist"
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5022, $P5028
    push $P5001, $P5022
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 40
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 3
    push $P5038, $P5041
    push $P5032, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5032, $P5042
    push $P5001, $P5032
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 8
    push $P5048, $P5049
    box $P5050, "normspace"
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 8
    push $P5052, $P5053
    box $P5054, "nibbler"
    push $P5052, $P5054
    box $P5055, 0
    push $P5052, $P5055
    push $P5046, $P5052
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1346277629.325") :anon :lex :outer("cuid_239_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1235_tgt
    .local int rx1235_pos
    .local int rx1235_off
    .local int rx1235_eos
    .local int rx1235_rep
    .local pmc rx1235_cur
    .local pmc rx1235_curclass
    .local pmc rx1235_bstack
    .local pmc rx1235_cstack
    (rx1235_cur, rx1235_tgt, rx1235_pos, rx1235_curclass, rx1235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1235_cur
    length rx1235_eos, rx1235_tgt
    eq $I19, 1, rx1235_restart3504
    gt rx1235_pos, rx1235_eos, rx1235_fail3505
    repr_get_attr_int $I11, self, rx1235_curclass, "$!from"
    ne $I11, -1, rxscan1236_done3511
    goto rxscan1236_scan3510
  rxscan1236_loop3509:
    inc rx1235_pos
    gt rx1235_pos, rx1235_eos, rx1235_fail3505
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!from", rx1235_pos
  rxscan1236_scan3510:
    nqp_rxmark rx1235_bstack, rxscan1236_loop3509, rx1235_pos, 0
  rxscan1236_done3511:
    add $I11, rx1235_pos, 1
    gt $I11, rx1235_eos, rx1235_fail3505
    substr $S10, rx1235_tgt, rx1235_pos, 1
    ne $S10, ucs4:">", rx1235_fail3505
    add rx1235_pos, 1
    rx1235_cur."!cursor_pass"(rx1235_pos, 'backtrack'=>1)
    .return (rx1235_cur)
  rx1235_restart3504:
    repr_get_attr_obj rx1235_cstack, rx1235_cur, rx1235_curclass, "$!cstack"
  rx1235_fail3505:
    unless rx1235_bstack, rx1235_done3503
    pop $I19, rx1235_bstack
    if_null rx1235_cstack, rx1235_cstack_done3508
    unless rx1235_cstack, rx1235_cstack_done3508
    dec $I19
    set $P11, rx1235_cstack[$I19]
  rx1235_cstack_done3508:
    pop rx1235_rep, rx1235_bstack
    pop rx1235_pos, rx1235_bstack
    pop $I19, rx1235_bstack
    lt rx1235_pos, -1, rx1235_done3503
    lt rx1235_pos, 0, rx1235_fail3505
    eq $I19, 0, rx1235_fail3505
    nqp_islist $I20, rx1235_cstack
    unless $I20, rx1235_jump3506
    elements $I18, rx1235_bstack
    le $I18, 0, rx1235_cut3507
    dec $I18
    set $I18, rx1235_bstack[$I18]
  rx1235_cut3507:
    assign rx1235_cstack, $I18
  rx1235_jump3506:
    jump $I19
  rx1235_done3503:
    rx1235_cur."!cursor_fail"()
    .return (rx1235_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1346277629.325_caps" :subid("cuid_memo_413_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1346277629.325_nfa" :subid("cuid_memo_414_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_240_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_curclass
    .local pmc rx1242_bstack
    .local pmc rx1242_cstack
    (rx1242_cur, rx1242_tgt, rx1242_pos, rx1242_curclass, rx1242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1242_cur
    length rx1242_eos, rx1242_tgt
    eq $I19, 1, rx1242_restart3523
    gt rx1242_pos, rx1242_eos, rx1242_fail3524
    repr_get_attr_int $I11, self, rx1242_curclass, "$!from"
    ne $I11, -1, rxscan1243_done3530
    goto rxscan1243_scan3529
  rxscan1243_loop3528:
    inc rx1242_pos
    gt rx1242_pos, rx1242_eos, rx1242_fail3524
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!from", rx1242_pos
  rxscan1243_scan3529:
    nqp_rxmark rx1242_bstack, rxscan1243_loop3528, rx1242_pos, 0
  rxscan1243_done3530:
    ge rx1242_pos, rx1242_eos, rx1242_fail3524
    substr $S11, rx1242_tgt, rx1242_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1242_fail3524
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1242_curclass, "$!pos"
    lt $I11, 0, rx1242_fail3524
    nqp_rxmark rx1242_bstack, rxsubrule1244_pass3531, -1, 0
  rxsubrule1244_pass3531:
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1242_pos, $P11, rx1242_curclass, "$!pos"
    rx1242_cur."!cursor_pass"(rx1242_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1242_cur)
  rx1242_restart3523:
    repr_get_attr_obj rx1242_cstack, rx1242_cur, rx1242_curclass, "$!cstack"
  rx1242_fail3524:
    unless rx1242_bstack, rx1242_done3522
    pop $I19, rx1242_bstack
    if_null rx1242_cstack, rx1242_cstack_done3527
    unless rx1242_cstack, rx1242_cstack_done3527
    dec $I19
    set $P11, rx1242_cstack[$I19]
  rx1242_cstack_done3527:
    pop rx1242_rep, rx1242_bstack
    pop rx1242_pos, rx1242_bstack
    pop $I19, rx1242_bstack
    lt rx1242_pos, -1, rx1242_done3522
    lt rx1242_pos, 0, rx1242_fail3524
    eq $I19, 0, rx1242_fail3524
    nqp_islist $I20, rx1242_cstack
    unless $I20, rx1242_jump3525
    elements $I18, rx1242_bstack
    le $I18, 0, rx1242_cut3526
    dec $I18
    set $I18, rx1242_bstack[$I18]
  rx1242_cut3526:
    assign rx1242_cstack, $I18
  rx1242_jump3525:
    jump $I19
  rx1242_done3522:
    rx1242_cur."!cursor_fail"()
    .return (rx1242_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1346277629.325_caps" :subid("cuid_memo_415_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1346277629.325_nfa" :subid("cuid_memo_416_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_241_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1245_tgt
    .local int rx1245_pos
    .local int rx1245_off
    .local int rx1245_eos
    .local int rx1245_rep
    .local pmc rx1245_cur
    .local pmc rx1245_curclass
    .local pmc rx1245_bstack
    .local pmc rx1245_cstack
    (rx1245_cur, rx1245_tgt, rx1245_pos, rx1245_curclass, rx1245_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1245_cur
    length rx1245_eos, rx1245_tgt
    eq $I19, 1, rx1245_restart3534
    gt rx1245_pos, rx1245_eos, rx1245_fail3535
    repr_get_attr_int $I11, self, rx1245_curclass, "$!from"
    ne $I11, -1, rxscan1246_done3541
    goto rxscan1246_scan3540
  rxscan1246_loop3539:
    inc rx1245_pos
    gt rx1245_pos, rx1245_eos, rx1245_fail3535
    repr_bind_attr_int rx1245_cur, rx1245_curclass, "$!from", rx1245_pos
  rxscan1246_scan3540:
    nqp_rxmark rx1245_bstack, rxscan1246_loop3539, rx1245_pos, 0
  rxscan1246_done3541:
    repr_bind_attr_int rx1245_cur, rx1245_curclass, "$!pos", rx1245_pos
    $P11 = rx1245_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1245_curclass, "$!pos"
    lt $I11, 0, rx1245_fail3535
    nqp_rxmark rx1245_bstack, rxsubrule1247_pass3542, -1, 0
  rxsubrule1247_pass3542:
    rx1245_cstack = rx1245_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1245_pos, $P11, rx1245_curclass, "$!pos"
    rx1245_cur."!cursor_pass"(rx1245_pos, "codeblock", 'backtrack'=>1)
    .return (rx1245_cur)
  rx1245_restart3534:
    repr_get_attr_obj rx1245_cstack, rx1245_cur, rx1245_curclass, "$!cstack"
  rx1245_fail3535:
    unless rx1245_bstack, rx1245_done3533
    pop $I19, rx1245_bstack
    if_null rx1245_cstack, rx1245_cstack_done3538
    unless rx1245_cstack, rx1245_cstack_done3538
    dec $I19
    set $P11, rx1245_cstack[$I19]
  rx1245_cstack_done3538:
    pop rx1245_rep, rx1245_bstack
    pop rx1245_pos, rx1245_bstack
    pop $I19, rx1245_bstack
    lt rx1245_pos, -1, rx1245_done3533
    lt rx1245_pos, 0, rx1245_fail3535
    eq $I19, 0, rx1245_fail3535
    nqp_islist $I20, rx1245_cstack
    unless $I20, rx1245_jump3536
    elements $I18, rx1245_bstack
    le $I18, 0, rx1245_cut3537
    dec $I18
    set $I18, rx1245_bstack[$I18]
  rx1245_cut3537:
    assign rx1245_cstack, $I18
  rx1245_jump3536:
    jump $I19
  rx1245_done3533:
    rx1245_cur."!cursor_fail"()
    .return (rx1245_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1346277629.325_caps" :subid("cuid_memo_417_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1346277629.325_nfa" :subid("cuid_memo_418_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_242_1346277629.325") :anon :lex :outer("cuid_243_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1248_tgt
    .local int rx1248_pos
    .local int rx1248_off
    .local int rx1248_eos
    .local int rx1248_rep
    .local pmc rx1248_cur
    .local pmc rx1248_curclass
    .local pmc rx1248_bstack
    .local pmc rx1248_cstack
    (rx1248_cur, rx1248_tgt, rx1248_pos, rx1248_curclass, rx1248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1248_cur
    length rx1248_eos, rx1248_tgt
    eq $I19, 1, rx1248_restart3545
    gt rx1248_pos, rx1248_eos, rx1248_fail3546
    repr_get_attr_int $I11, self, rx1248_curclass, "$!from"
    ne $I11, -1, rxscan1249_done3552
    goto rxscan1249_scan3551
  rxscan1249_loop3550:
    inc rx1248_pos
    gt rx1248_pos, rx1248_eos, rx1248_fail3546
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!from", rx1248_pos
  rxscan1249_scan3551:
    nqp_rxmark rx1248_bstack, rxscan1249_loop3550, rx1248_pos, 0
  rxscan1249_done3552:
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!pos", rx1248_pos
    $P11 = rx1248_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1248_curclass, "$!pos"
    lt $I11, 0, rx1248_fail3546
    nqp_rxmark rx1248_bstack, rxsubrule1250_pass3553, -1, 0
  rxsubrule1250_pass3553:
    rx1248_cstack = rx1248_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1248_pos, $P11, rx1248_curclass, "$!pos"
    rx1248_cur."!cursor_pass"(rx1248_pos, "arg", 'backtrack'=>1)
    .return (rx1248_cur)
  rx1248_restart3545:
    repr_get_attr_obj rx1248_cstack, rx1248_cur, rx1248_curclass, "$!cstack"
  rx1248_fail3546:
    unless rx1248_bstack, rx1248_done3544
    pop $I19, rx1248_bstack
    if_null rx1248_cstack, rx1248_cstack_done3549
    unless rx1248_cstack, rx1248_cstack_done3549
    dec $I19
    set $P11, rx1248_cstack[$I19]
  rx1248_cstack_done3549:
    pop rx1248_rep, rx1248_bstack
    pop rx1248_pos, rx1248_bstack
    pop $I19, rx1248_bstack
    lt rx1248_pos, -1, rx1248_done3544
    lt rx1248_pos, 0, rx1248_fail3546
    eq $I19, 0, rx1248_fail3546
    nqp_islist $I20, rx1248_cstack
    unless $I20, rx1248_jump3547
    elements $I18, rx1248_bstack
    le $I18, 0, rx1248_cut3548
    dec $I18
    set $I18, rx1248_bstack[$I18]
  rx1248_cut3548:
    assign rx1248_cstack, $I18
  rx1248_jump3547:
    jump $I19
  rx1248_done3544:
    rx1248_cur."!cursor_fail"()
    .return (rx1248_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1346277629.325_caps" :subid("cuid_memo_419_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1346277629.325_nfa" :subid("cuid_memo_420_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1385
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3555
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback3555:
    set $P101, $P5002
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3558
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5008
  fallback3558:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1251_end3557 
.annotate 'line', 1387
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1251_end3557:
.annotate 'line', 1390
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3559
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback3559:
.annotate 'line', 1393
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3560
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback3560:
.annotate 'line', 1396
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3561
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5026
  fallback3561:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "add_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1400
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3562
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback3562:
    set $P101, $P5002
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3565
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5008
  fallback3565:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1252_end3564 
.annotate 'line', 1402
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1252_end3564:
.annotate 'line', 1405
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3566
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback3566:
.annotate 'line', 1408
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3567
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback3567:
.annotate 'line', 1411
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3568
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5026
  fallback3568:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "sub_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1415
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3569
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback3569:
    set $P101, $P5003
.annotate 'line', 1417
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3570
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5009
  fallback3570:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3573
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback3573:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1253_end3572 
.annotate 'line', 1418
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1253_end3572:
.annotate 'line', 1421
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3574
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5023
  fallback3574:
.annotate 'line', 1423
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3575
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5028
  fallback3575:
.annotate 'line', 1425
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3576
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5033
  fallback3576:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1428
    get_hll_global $P5039, "GLOBAL"
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3577
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5036, $P5040
  fallback3577:
.annotate 'line', 1431
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3578
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5045
  fallback3578:
.annotate 'line', 1433
    get_hll_global $P5049, "GLOBAL"
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3579
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5046, $P5050
  fallback3579:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1434
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3580
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5052, $P5056
  fallback3580:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1439
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3581
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback3581:
    set $P101, $P5003
.annotate 'line', 1441
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3582
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5009
  fallback3582:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3585
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback3585:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1254_end3584 
.annotate 'line', 1442
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1254_end3584:
.annotate 'line', 1445
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3586
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5023
  fallback3586:
.annotate 'line', 1447
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3587
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5028
  fallback3587:
.annotate 'line', 1449
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3588
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5033
  fallback3588:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1452
    get_hll_global $P5039, "GLOBAL"
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3589
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5036, $P5040
  fallback3589:
.annotate 'line', 1455
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3590
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5045
  fallback3590:
.annotate 'line', 1457
    get_hll_global $P5049, "GLOBAL"
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3591
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5046, $P5050
  fallback3591:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1458
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3592
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5052, $P5056
  fallback3592:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "sub_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1463
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1464
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3593
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback3593:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1467
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1468
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3594
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback3594:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1471
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1472
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3595
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3595:
.annotate 'line', 1474
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3596
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback3596:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3597
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5012
  fallback3597:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1475
    get_hll_global $P5017, "GLOBAL"
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3598
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5018
  fallback3598:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3599
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5020
  fallback3599:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_360_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1480
    .const 'Sub' $P5127 = 'cuid_407_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_410_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_413_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_416_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_418_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_419_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_420_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_422_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_423_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_428_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_244_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_245_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_246_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_247_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_248_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_249_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_250_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_251_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_252_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_253_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_254_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_255_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_256_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_257_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_258_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_259_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_260_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_261_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_262_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_263_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_264_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_265_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_266_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_267_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_268_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_269_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_270_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_271_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_272_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_273_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_274_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_275_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_276_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_277_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_278_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_279_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_280_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_281_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_282_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_283_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_284_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_285_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_286_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_287_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_288_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_289_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_290_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_291_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_292_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_293_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_294_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_295_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_296_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_297_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_298_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_299_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_300_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_301_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_302_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_303_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_304_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_305_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_306_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_307_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_308_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_309_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_310_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_311_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_312_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_313_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_314_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_315_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_316_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_317_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_318_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_319_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_320_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_321_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_322_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_323_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_324_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_325_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_326_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_327_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_328_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_329_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_330_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_331_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_332_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_333_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_334_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_335_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_336_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_337_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_338_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_339_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_340_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_341_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_342_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_343_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_344_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_345_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_346_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_347_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_348_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_349_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_350_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_351_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_352_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_353_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_354_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_355_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_356_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_357_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_358_1346277629.325' 
    capture_lex $P5127 
    .const 'Sub' $P5127 = 'cuid_359_1346277629.325' 
    capture_lex $P5127 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&colonpair_str", $P104 
    .lex "&import_HOW_exports", $P105 
    .lex "&set_block_handler", $P106 
    .lex "&only_star_block", $P107 
    .lex "&attach_multi_signature", $P108 
    .lex "&wrap_return_handler", $P109 
    .lex "&lexical_package_lookup", $P110 
    .lex "$?PACKAGE", $P111 
    .lex "$?CLASS", $P112 
    .const 'Sub' $P5001 = 'cuid_407_1346277629.325' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_410_1346277629.325' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_413_1346277629.325' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_416_1346277629.325' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_418_1346277629.325' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_419_1346277629.325' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_420_1346277629.325' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_422_1346277629.325' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_423_1346277629.325' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_428_1346277629.325' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_244_1346277629.325' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_245_1346277629.325' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_246_1346277629.325' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_247_1346277629.325' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_248_1346277629.325' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_249_1346277629.325' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_250_1346277629.325' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_251_1346277629.325' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_252_1346277629.325' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_253_1346277629.325' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_254_1346277629.325' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_255_1346277629.325' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_256_1346277629.325' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_257_1346277629.325' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_258_1346277629.325' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_259_1346277629.325' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_260_1346277629.325' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_261_1346277629.325' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_262_1346277629.325' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_263_1346277629.325' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_264_1346277629.325' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_265_1346277629.325' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_266_1346277629.325' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_267_1346277629.325' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_268_1346277629.325' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_269_1346277629.325' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_270_1346277629.325' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_271_1346277629.325' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_272_1346277629.325' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_273_1346277629.325' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_274_1346277629.325' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_275_1346277629.325' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_276_1346277629.325' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_277_1346277629.325' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_278_1346277629.325' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_279_1346277629.325' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_280_1346277629.325' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_281_1346277629.325' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_282_1346277629.325' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_283_1346277629.325' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_284_1346277629.325' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_285_1346277629.325' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_286_1346277629.325' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_287_1346277629.325' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_288_1346277629.325' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_289_1346277629.325' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_290_1346277629.325' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_291_1346277629.325' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_292_1346277629.325' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_293_1346277629.325' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_294_1346277629.325' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_295_1346277629.325' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_296_1346277629.325' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_297_1346277629.325' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_298_1346277629.325' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_299_1346277629.325' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_300_1346277629.325' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_301_1346277629.325' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_302_1346277629.325' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_303_1346277629.325' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_304_1346277629.325' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_305_1346277629.325' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_306_1346277629.325' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_307_1346277629.325' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_308_1346277629.325' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_309_1346277629.325' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_310_1346277629.325' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_311_1346277629.325' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_312_1346277629.325' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_313_1346277629.325' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_314_1346277629.325' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_315_1346277629.325' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_316_1346277629.325' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_317_1346277629.325' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_318_1346277629.325' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_319_1346277629.325' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_320_1346277629.325' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_321_1346277629.325' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_322_1346277629.325' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_323_1346277629.325' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_324_1346277629.325' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_325_1346277629.325' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_326_1346277629.325' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_327_1346277629.325' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_328_1346277629.325' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_329_1346277629.325' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_330_1346277629.325' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_331_1346277629.325' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_332_1346277629.325' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_333_1346277629.325' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_334_1346277629.325' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_335_1346277629.325' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_336_1346277629.325' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_337_1346277629.325' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_338_1346277629.325' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_339_1346277629.325' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_340_1346277629.325' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_341_1346277629.325' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_342_1346277629.325' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_343_1346277629.325' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_344_1346277629.325' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_345_1346277629.325' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_346_1346277629.325' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_347_1346277629.325' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_348_1346277629.325' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_349_1346277629.325' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_350_1346277629.325' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_351_1346277629.325' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_352_1346277629.325' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_353_1346277629.325' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_354_1346277629.325' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_355_1346277629.325' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_356_1346277629.325' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_357_1346277629.325' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_358_1346277629.325' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_359_1346277629.325' 
    capture_lex $P5126
    .return ($P110) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_407_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1481
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1482
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3600
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback3600:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_410_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1486
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_409_1346277629.325' 
    capture_lex $P5006 
    .lex "$block", _lex_param_0 
.annotate 'line', 1487
    $P5001 = _lex_param_0."blocktype"("immediate")
.annotate 'line', 1488
    $P5002 = _lex_param_0."symtable"()
    set $P5005, $P5002
    if $P5002 goto unless1255_end3602 
    .const 'Sub' $P5003 = 'cuid_409_1346277629.325' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5005, $P5004
  unless1255_end3602:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1346277629.325") :anon :lex :outer("cuid_410_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1488
    .const 'Sub' $P5018 = 'cuid_408_1346277629.325' 
    capture_lex $P5018 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1489
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3603
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback3603:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1490
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
    new $P5016, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5016, for_handlers3604
    push_eh $P5016
  for_next3605:
    unless $P5012, for_done3607
    shift $P5017, $P5012
  for_redo3606:
    .const 'Sub' $P5015 = 'cuid_408_1346277629.325' 
    capture_lex $P5015
    $P5010 = $P5015($P5017)
    goto for_next3605
  for_handlers3604:
    .get_results ($P5016)
    pop_upto_eh $P5016
    getattribute $P5016, $P5016, 'type'
    eq $P5016, .CONTROL_LOOP_NEXT, for_next3605
    eq $P5016, .CONTROL_LOOP_REDO, for_redo3606
  for_done3607:
    pop_eh 
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1346277629.325") :anon :lex :outer("cuid_409_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1490
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_413_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1496
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_412_1346277629.325' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1256_else3608 
.annotate 'line', 1497
.annotate 'line', 1498
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3610
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3610:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1256_end3609
  if1256_else3608:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1257_else3611 
.annotate 'line', 1500
.annotate 'line', 1501
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3613
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback3613:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1257_end3612
  if1257_else3611:
    .const 'Sub' $P5013 = 'cuid_412_1346277629.325' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1257_end3612:
    set $P5016, $P5015
  if1256_end3609:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1346277629.325") :anon :lex :outer("cuid_413_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1503
    .const 'Sub' $P5022 = 'cuid_411_1346277629.325' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_12623622
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1505
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_12603619
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1506
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3614
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback3614:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3615
    get_hll_global $P5010, "GLOBAL"
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3616
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5011
  fallback3616:
    unless_null $P5008, vivi_12583617
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_12583617:
    set $P5007, $P5008
  fallback3615:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_12593618
  catch_handler_12603619:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_411_1346277629.325' 
    capture_lex $P10001
    $P10002 = $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10003
    goto skip_handler_12593618
  skip_handler_12593618:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_12613621
  catch_handler_12623622:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_12613621
  skip_handler_12613621:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1346277629.325") :anon :lex :outer("cuid_412_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1507
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3620
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3620:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_416_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1523
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_415_1346277629.325' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3625
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3625:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1263_else3623 
    .const 'Sub' $P5006 = 'cuid_415_1346277629.325' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1263_end3624
  if1263_else3623:
.annotate 'line', 1528
.annotate 'line', 1529
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1263_end3624:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1346277629.325") :anon :lex :outer("cuid_416_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1524
    .const 'Sub' $P5010 = 'cuid_414_1346277629.325' 
    capture_lex $P5010 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1526
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
    new $P5008, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5008, for_handlers3626
    push_eh $P5008
  for_next3627:
    unless $P5004, for_done3629
    shift $P5009, $P5004
  for_redo3628:
    .const 'Sub' $P5007 = 'cuid_414_1346277629.325' 
    capture_lex $P5007
    $P5002 = $P5007($P5009)
    goto for_next3627
  for_handlers3626:
    .get_results ($P5008)
    pop_upto_eh $P5008
    getattribute $P5008, $P5008, 'type'
    eq $P5008, .CONTROL_LOOP_NEXT, for_next3627
    eq $P5008, .CONTROL_LOOP_REDO, for_redo3628
  for_done3629:
    pop_eh 
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1346277629.325") :anon :lex :outer("cuid_415_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1526
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_418_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1733
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_417_1346277629.325' 
    capture_lex $P5012 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1264_end3631 
.annotate 'line', 1735
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3632
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback3632:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
    new $P5008, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5008, for_handlers3636
    push_eh $P5008
  for_next3637:
    unless $P5003, for_done3639
    shift $P5009, $P5003
  for_redo3638:
    .const 'Sub' $P5007 = 'cuid_417_1346277629.325' 
    capture_lex $P5007
    $P5001 = $P5007($P5009)
    goto for_next3637
  for_handlers3636:
    .get_results ($P5008)
    pop_upto_eh $P5008
    getattribute $P5008, $P5008, 'type'
    eq $P5008, .CONTROL_LOOP_NEXT, for_next3637
    eq $P5008, .CONTROL_LOOP_REDO, for_redo3638
  for_done3639:
    pop_eh 
    set $P5010, $P5001
  if1264_end3631:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1346277629.325") :anon :lex :outer("cuid_418_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1736
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3633
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3634
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3634:
    unless_null $P5002, vivi_12653635
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_12653635:
    set $P5001, $P5002
  fallback3633:
.annotate 'line', 1737
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_419_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1863
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3642
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3643
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3643:
    unless_null $P5002, vivi_12673644
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_12673644:
    set $P5001, $P5002
  fallback3642:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1266_end3641 
.annotate 'line', 1864
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
    set $P5010, $P5009
  if1266_end3641:
.annotate 'line', 1867
    $P5012 = _lex_param_1."arity"()
    set $P5042, $P5012
    if $P5012 goto unless1268_end3646 
.annotate 'line', 1868
.annotate 'line', 1869
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback3647
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5017
  fallback3647:
.annotate 'line', 1870
    get_hll_global $P5021, "GLOBAL"
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback3648
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5022
  fallback3648:
    $P5023 = $P5018."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1871
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3649
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5028
  fallback3649:
    $P5029 = $P5024."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5030 = $P5013."new"($P5023, $P5029, "bind" :named("op"))
    $P5031 = _lex_param_1."unshift"($P5030)
.annotate 'line', 1874
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback3650
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5032, $P5036
  fallback3650:
    $P5037 = $P5032."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5038 = _lex_param_1."unshift"($P5037)
.annotate 'line', 1875
    $P5039 = _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1876
    $P5040 = _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1877
    $P5041 = _lex_param_1."arity"(1)
    set $P5042, $P5041
  unless1268_end3646:
.annotate 'line', 1879
    $P5043 = _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5044, "%*HANDLERS"
    unless_null $P5044, fallback3651
    get_hll_global $P5047, "GLOBAL"
    get_who $P5046, $P5047
    set $P5045, $P5046["%HANDLERS"]
    unless_null $P5045, fallback3652
    get_hll_global $P5049, "GLOBAL"
    get_who $P5048, $P5049
    new $P5050, 'Hash'
    set $P5048["%HANDLERS"], $P5050
    set $P5045, $P5050
  fallback3652:
    unless_null $P5045, vivi_12693653
    die "Contextual %*HANDLERS not found"
    box $P5051, "Contextual %*HANDLERS not found"
    set $P5045, $P5051
  vivi_12693653:
    set $P5044, $P5045
  fallback3651:
    set $S5005, _lex_param_2
.annotate 'line', 1880
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Stmts"]
    unless_null $P5052, fallback3654
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5052, $P5056
  fallback3654:
.annotate 'line', 1881
    get_hll_global $P5060, "GLOBAL"
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback3655
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5057, $P5061
  fallback3655:
.annotate 'line', 1883
    get_hll_global $P5065, "GLOBAL"
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["Op"]
    unless_null $P5062, fallback3656
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5062, $P5066
  fallback3656:
    $P5067 = $P5062."new"("exception" :named("op"))
    $P5068 = $P5057."new"(_lex_param_1, $P5067, "call" :named("op"))
.annotate 'line', 1885
    get_hll_global $P5072, "GLOBAL"
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["Op"]
    unless_null $P5069, fallback3657
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5073
  fallback3657:
.annotate 'line', 1887
    get_hll_global $P5077, "GLOBAL"
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["Op"]
    unless_null $P5074, fallback3658
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5074, $P5078
  fallback3658:
    $P5079 = $P5074."new"("exception" :named("op"))
.annotate 'line', 1888
    get_hll_global $P5083, "GLOBAL"
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["SVal"]
    unless_null $P5080, fallback3659
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5080, $P5084
  fallback3659:
    $P5085 = $P5080."new"("handled" :named("value"))
.annotate 'line', 1889
    get_hll_global $P5089, "GLOBAL"
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["IVal"]
    unless_null $P5086, fallback3660
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5086, $P5090
  fallback3660:
    $P5091 = $P5086."new"(1 :named("value"))
    $P5092 = $P5069."new"($P5079, $P5085, $P5091, "bindkey_i" :named("op"))
.annotate 'line', 1891
    $P5093 = "&default_for"("$")
    $P5094 = $P5052."new"($P5068, $P5092, $P5093)
    set $P5044[$S5005], $P5094
    .return ($P5094) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_420_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2449
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2450
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3661
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3662
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback3662:
    unless_null $P5003, vivi_12703663
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_12703663:
    set $P5002, $P5003
  fallback3661:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2451
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3664
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5013
  fallback3664:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P5015 = $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_422_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2455
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_421_1346277629.325' 
    capture_lex $P5021 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3665
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5009
  fallback3665:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
    new $P5012, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5012, for_handlers3681
    push_eh $P5012
  for_next3682:
    unless $P5007, for_done3684
    shift $P5013, $P5007
  for_redo3683:
    .const 'Sub' $P5011 = 'cuid_421_1346277629.325' 
    capture_lex $P5011
    $P5005 = $P5011($P5013)
    goto for_next3682
  for_handlers3681:
    .get_results ($P5012)
    pop_upto_eh $P5012
    getattribute $P5012, $P5012, 'type'
    eq $P5012, .CONTROL_LOOP_NEXT, for_next3682
    eq $P5012, .CONTROL_LOOP_REDO, for_redo3683
  for_done3684:
    pop_eh 
.annotate 'line', 2468
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback3685
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback3686
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5018
  fallback3686:
    unless_null $P5015, vivi_12773687
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_12773687:
    set $P5014, $P5015
  fallback3685:
    $P5020 = $P5014."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1346277629.325") :anon :lex :outer("cuid_422_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2458
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3670
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3670:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1272_end3669 
.annotate 'line', 2459
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1272_end3669:
    box $P5022, $I5003
    set $P5021, $P5022
    unless $I5003 goto if1271_end3667 
.annotate 'line', 2460
    find_lex $P5007, "$types"
    $P5008 = _lex_param_0."returns"()
    get_id $I5005, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    get_id $I5006, $P5009
    iseq $I5004, $I5005, $I5006
    set $I5008, $I5004
    if $I5004 goto unless1274_end3674 
.annotate 'line', 2461
    $P5010 = _lex_param_0."returns"()
    isa $I5007, $P5010, "Undef"
    set $I5008, $I5007
  unless1274_end3674:
    unless $I5008 goto if1273_else3671 
    null $P5011
    set $P5013, $P5011
    goto if1273_end3672
  if1273_else3671:
.annotate 'line', 2463
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1273_end3672:
    $P5014 = $P5007."push"($P5013)
.annotate 'line', 2464
    find_lex $P5015, "$definednesses"
    set $P5016, _lex_param_0["definedness"]
    unless_null $P5016, fallback3677
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5017
  fallback3677:
    set $S5002, $P5016
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1275_else3675 
    set $I5012, 1
    goto if1275_end3676
  if1275_else3675:
    set $P5018, _lex_param_0["definedness"]
    unless_null $P5018, fallback3680
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5019
  fallback3680:
    set $S5003, $P5018
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1276_else3678 
    set $I5011, 2
    goto if1276_end3679
  if1276_else3678:
    set $I5011, 0
  if1276_end3679:
    set $I5012, $I5011
  if1275_end3676:
    $P5020 = $P5015."push"($I5012)
    set $P5021, $P5020
  if1271_end3667:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_423_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2471
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2472
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3688
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3688:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_428_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2962
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5076 = 'cuid_426_1346277629.325' 
    capture_lex $P5076 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3689
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    box $P5006, $I5001
    set $P5005, $P5006
    unless $I5001 goto if1278_end3692 
.annotate 'line', 2964
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
    set $P5005, $P5004
  if1278_end3692:
.annotate 'line', 2968
    $P5007 = _lex_param_0."pop"()
    set $P101, $P5007
.annotate 'line', 2969
    get_hll_global $P5011, "GLOBAL"
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["VarWithFallback"]
    unless_null $P5008, fallback3693
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5012
  fallback3693:
.annotate 'line', 2971
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3694
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5017
  fallback3694:
    set $S5001, $P101
    $P5018 = $P5013."new"($S5001 :named("value"))
    $P5019 = $P5008."new"($P5018, "associative" :named("scope"))
    set $P102, $P5019
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1279_else3695 
.annotate 'line', 2976
.annotate 'line', 2977
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3697
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5024
  fallback3697:
.annotate 'line', 2979
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Var"]
    unless_null $P5025, fallback3698
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5029
  fallback3698:
    $P5030 = $P5025."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5031 = $P5020."new"($P5030, "who" :named("op"))
    $P5032 = $P102."unshift"($P5031)
.annotate 'line', 2981
    get_hll_global $P5036, "GLOBAL"
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback3699
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5037
  fallback3699:
.annotate 'line', 2983
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback3700
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5038, $P5042
  fallback3700:
.annotate 'line', 2985
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback3701
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5043, $P5047
  fallback3701:
.annotate 'line', 2987
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["VM"]
    unless_null $P5048, fallback3702
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5048, $P5052
  fallback3702:
.annotate 'line', 2988
    get_hll_global $P5056, "GLOBAL"
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback3703
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5053, $P5057
  fallback3703:
    $P5058 = $P5053."new"("GLOBAL" :named("value"))
    $P5059 = $P5048."new"($P5058, "get_hll_global Ps" :named("pirop"))
    $P5060 = $P5043."new"($P5059, "who" :named("op"))
.annotate 'line', 2990
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["SVal"]
    unless_null $P5061, fallback3704
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5061, $P5065
  fallback3704:
    set $S5002, $P101
    $P5066 = $P5061."new"($S5002 :named("value"))
    $P5067 = $P5038."new"($P5060, $P5066, "atkey" :named("op"))
.annotate 'line', 2992
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5068 = "&default_for"($S5003)
    $P5069 = $P5033."new"($P5067, $P5068, "ifnull" :named("op"))
    $P5070 = $P102."fallback"($P5069)
    set $P5073, $P5070
    goto if1279_end3696
  if1279_else3695:
    .const 'Sub' $P5071 = 'cuid_426_1346277629.325' 
    capture_lex $P5071
    $P5072 = $P5071()
    set $P5073, $P5072
  if1279_end3696:
    find_lex $P5074, "RETURN"
    $P5075 = $P5074($P102)
    goto lexotic_3690
  lexotic_3689:
    .get_results ($P5075)
  lexotic_3690:
    .return ($P5075) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_426_1346277629.325") :anon :lex :outer("cuid_428_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2998
    .const 'Sub' $P5071 = 'cuid_425_1346277629.325' 
    capture_lex $P5071 
    .const 'Sub' $P5071 = 'cuid_427_1346277629.325' 
    capture_lex $P5071 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 3000
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3707
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3708
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback3708:
    unless_null $P5004, vivi_12813709
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_12813709:
    set $P5003, $P5004
  fallback3707:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3710
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5011
  fallback3710:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1280_else3705 
    .const 'Sub' $P5013 = 'cuid_425_1346277629.325' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5027, $P5014
    goto if1280_end3706
  if1280_else3705:
.annotate 'line', 3009
.annotate 'line', 3010
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["VM"]
    unless_null $P5015, fallback3718
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5019
  fallback3718:
.annotate 'line', 3011
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["SVal"]
    unless_null $P5020, fallback3719
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5024
  fallback3719:
    $P5025 = $P5020."new"("GLOBAL" :named("value"))
    $P5026 = $P5015."new"($P5025, "get_hll_global Ps" :named("pirop"))
    set $P101, $P5026
    set $P5027, $P101
  if1280_end3706:
    find_lex $P5029, "@name"
    set $P5028, $P5029[0]
    unless_null $P5028, fallback3722
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5030
  fallback3722:
    set $S5001, $P5028
    iseq $I5001, $S5001, "GLOBAL"
    box $P5034, $I5001
    set $P5033, $P5034
    unless $I5001 goto if1285_end3721 
.annotate 'line', 3013
.annotate 'line', 3014
    find_lex $P5031, "@name"
    $P5032 = $P5031."shift"()
    set $P5033, $P5032
  if1285_end3721:
    find_lex $P5038, "@name"
    set $P5035, $P5038
    iter $P5037, $P5038
    new $P5040, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5040, for_handlers3725
    push_eh $P5040
  for_next3726:
    unless $P5037, for_done3728
    shift $P5041, $P5037
  for_redo3727:
    .const 'Sub' $P5039 = 'cuid_427_1346277629.325' 
    capture_lex $P5039
    $P5035 = $P5039($P5041)
    goto for_next3726
  for_handlers3725:
    .get_results ($P5040)
    pop_upto_eh $P5040
    getattribute $P5040, $P5040, 'type'
    eq $P5040, .CONTROL_LOOP_NEXT, for_next3726
    eq $P5040, .CONTROL_LOOP_REDO, for_redo3727
  for_done3728:
    pop_eh 
.annotate 'line', 3021
    find_lex $P5042, "$lookup"
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback3729
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5043, $P5047
  fallback3729:
    $P5048 = $P5043."new"($P101, "who" :named("op"))
    $P5049 = $P5042."unshift"($P5048)
    find_lex $P5050, "$final_name"
    set $S5003, $P5050
    substr $S5002, $S5003, 0, 1
    box $P5051, $S5002
    set $P102, $P5051
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1287_end3733 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1287_end3733:
    unless $I5004 goto if1286_else3730 
.annotate 'line', 3023
.annotate 'line', 3024
    find_lex $P5052, "$lookup"
    get_hll_global $P5056, "GLOBAL"
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["Op"]
    unless_null $P5053, fallback3734
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5053, $P5057
  fallback3734:
    find_lex $P5059, "$lookup"
    set $P5058, $P5059[0]
    unless_null $P5058, fallback3735
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5058, $P5060
  fallback3735:
    find_lex $P5062, "$lookup"
    set $P5061, $P5062[1]
    unless_null $P5061, fallback3736
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5061, $P5063
  fallback3736:
.annotate 'line', 3028
    $P5064 = "&default_for"($P102)
    $P5065 = $P5053."new"($P5058, $P5061, $P5064, "bindkey" :named("op"))
    $P5066 = $P5052."fallback"($P5065)
    set $P5070, $P5066
    goto if1286_end3731
  if1286_else3730:
.annotate 'line', 3031
.annotate 'line', 3032
    find_lex $P5067, "$lookup"
    $P5068 = "&default_for"($P102)
    $P5069 = $P5067."fallback"($P5068)
    set $P5070, $P5069
  if1286_end3731:
    .return ($P5070) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1346277629.325") :anon :lex :outer("cuid_426_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3001
    .const 'Sub' $P5021 = 'cuid_424_1346277629.325' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_12843716
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3002
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3003
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3711
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5008
  fallback3711:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3712
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3713
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5013
  fallback3713:
    unless_null $P5010, vivi_12823714
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_12823714:
    set $P5009, $P5010
  fallback3712:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_12833715
  catch_handler_12843716:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_424_1346277629.325' 
    capture_lex $P10001
    $P10002 = $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10003
    goto skip_handler_12833715
  skip_handler_12833715:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1346277629.325") :anon :lex :outer("cuid_425_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3004
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3005
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3717
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3717:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_427_1346277629.325") :anon :lex :outer("cuid_426_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3016
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3017
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3723
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3723:
    find_lex $P5006, "$path"
.annotate 'line', 3019
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3724
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback3724:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_244_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1513
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3737
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback3737:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_245_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1515
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1516
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3740
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback3740:
    unless $P5001 goto if1288_else3738 
    set $P5003, _lex_param_1["identifier"]
    unless_null $P5003, fallback3741
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback3741:
    set $S5006, $P5003
    concat $S5005, $S5006, ":"
.annotate 'line', 1517
    set $P5006, _lex_param_1["colonpair"]
    unless_null $P5006, fallback3742
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback3742:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback3743
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5008
  fallback3743:
    $P5009 = $P5005."ast"()
    $P5010 = $P5009."named"()
    set $S5007, $P5010
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1518
    set $P5012, _lex_param_1["colonpair"]
    unless_null $P5012, fallback3744
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5013
  fallback3744:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback3745
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5014
  fallback3745:
    $P5015 = $P5011."ast"()
    $P5016 = "&colonpair_str"($P5015)
    set $S5008, $P5016
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1288_end3739
  if1288_else3738:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1288_end3739:
    $P5017 = _lex_param_1."!make"($S5010)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_246_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1533
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$global_install", $P103 
    .lex "$main_tasks", $P104 
    .lex "$compunit", $P105 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P105, $P5005
.annotate 'line', 1534
    set $P5006, _lex_param_1["statementlist"]
    unless_null $P5006, fallback3746
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback3746:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 1535
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3747
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3748
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5013
  fallback3748:
    unless_null $P5010, vivi_12893749
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_12893749:
    set $P5009, $P5010
  fallback3747:
    $P5015 = $P5009."pop_lexpad"()
    set $P102, $P5015
.annotate 'line', 1540
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback3750
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5020
  fallback3750:
.annotate 'line', 1542
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["SVal"]
    unless_null $P5021, fallback3751
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5025
  fallback3751:
    $P5026 = $P5021."new"("GLOBAL" :named("value"))
.annotate 'line', 1543
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback3752
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5027, $P5031
  fallback3752:
    find_dynamic_lex $P5032, "$*PACKAGE"
    unless_null $P5032, fallback3753
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$PACKAGE"]
    unless_null $P5033, fallback3754
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5036
  fallback3754:
    unless_null $P5033, vivi_12903755
    die "Contextual $*PACKAGE not found"
    box $P5037, "Contextual $*PACKAGE not found"
    set $P5033, $P5037
  vivi_12903755:
    set $P5032, $P5033
  fallback3753:
    $P5038 = $P5027."new"($P5032 :named("value"))
    $P5039 = $P5016."new"($P5026, $P5038, "set_hll_global vsP" :named("pirop"))
    set $P103, $P5039
.annotate 'line', 1545
    find_dynamic_lex $P5040, "$*W"
    unless_null $P5040, fallback3756
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["$W"]
    unless_null $P5041, fallback3757
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5044
  fallback3757:
    unless_null $P5041, vivi_12913758
    die "Contextual $*W not found"
    box $P5045, "Contextual $*W not found"
    set $P5041, $P5045
  vivi_12913758:
    set $P5040, $P5041
  fallback3756:
    $P5046 = $P5040."add_fixup_task"($P103 :named("deserialize_past"), $P103 :named("fixup_past"))
    find_dynamic_lex $P5047, "$*HAS_YOU_ARE_HERE"
    unless_null $P5047, fallback3761
    get_hll_global $P5050, "GLOBAL"
    get_who $P5049, $P5050
    set $P5048, $P5049["$HAS_YOU_ARE_HERE"]
    unless_null $P5048, fallback3762
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5048, $P5051
  fallback3762:
    unless_null $P5048, vivi_12933763
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5052, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5048, $P5052
  vivi_12933763:
    set $P5047, $P5048
  fallback3761:
    set $P5056, $P5047
    if $P5047 goto unless1292_end3760 
.annotate 'line', 1550
.annotate 'line', 1551
    nqp_decontainerize $P5053, _lex_param_0
    $P5054 = $P5053."CTXSAVE"()
    $P5055 = $P102."push"($P5054)
    set $P5056, $P5055
  unless1292_end3760:
.annotate 'line', 1558
    get_hll_global $P5060, "GLOBAL"
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback3764
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5057, $P5061
  fallback3764:
    $P5062 = $P5057."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P5063 = $P102."unshift"($P5062)
.annotate 'line', 1559
    get_hll_global $P5067, "GLOBAL"
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Stmts"]
    unless_null $P5064, fallback3765
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5064, $P5068
  fallback3765:
.annotate 'line', 1560
    get_hll_global $P5072, "GLOBAL"
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["VM"]
    unless_null $P5069, fallback3766
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5073
  fallback3766:
.annotate 'line', 1562
    get_hll_global $P5077, "GLOBAL"
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["SVal"]
    unless_null $P5074, fallback3767
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5074, $P5078
  fallback3767:
    $P5079 = $P5074."new"("ModuleLoader.pbc" :named("value"))
    $P5080 = $P5069."new"($P5079, "load_bytecode vs" :named("pirop"))
.annotate 'line', 1564
    get_hll_global $P5084, "GLOBAL"
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Op"]
    unless_null $P5081, fallback3768
    nqp_get_sc_object $P5085, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5081, $P5085
  fallback3768:
.annotate 'line', 1566
    get_hll_global $P5089, "GLOBAL"
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["VM"]
    unless_null $P5086, fallback3769
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5086, $P5090
  fallback3769:
.annotate 'line', 1568
    get_hll_global $P5094, "GLOBAL"
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["SVal"]
    unless_null $P5091, fallback3770
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5091, $P5095
  fallback3770:
    $P5096 = $P5091."new"("ModuleLoader" :named("value"))
    $P5097 = $P5086."new"($P5096, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 1570
    get_hll_global $P5101, "GLOBAL"
    nqp_get_package_through_who $P5100, $P5101, "QAST"
    get_who $P5099, $P5100
    set $P5098, $P5099["Op"]
    unless_null $P5098, fallback3771
    nqp_get_sc_object $P5102, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5098, $P5102
  fallback3771:
.annotate 'line', 1572
    get_hll_global $P5106, "GLOBAL"
    nqp_get_package_through_who $P5105, $P5106, "QAST"
    get_who $P5104, $P5105
    set $P5103, $P5104["VM"]
    unless_null $P5103, fallback3772
    nqp_get_sc_object $P5107, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5103, $P5107
  fallback3772:
    $P5108 = $P5103."new"("getinterp P" :named("pirop"))
.annotate 'line', 1573
    get_hll_global $P5112, "GLOBAL"
    nqp_get_package_through_who $P5111, $P5112, "QAST"
    get_who $P5110, $P5111
    set $P5109, $P5110["SVal"]
    unless_null $P5109, fallback3773
    nqp_get_sc_object $P5113, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5109, $P5113
  fallback3773:
    $P5114 = $P5109."new"("context" :named("value"))
    $P5115 = $P5098."new"($P5108, $P5114, "atkey" :named("op"))
    $P5116 = $P5081."new"($P5097, $P5115, "callmethod" :named("op"), "set_mainline_module" :named("name"))
    $P5117 = $P5064."new"($P5080, $P5116)
    set $P104, $P5117
    find_dynamic_lex $P5118, "$*MAIN_SUB"
    unless_null $P5118, fallback3776
    get_hll_global $P5121, "GLOBAL"
    get_who $P5120, $P5121
    set $P5119, $P5120["$MAIN_SUB"]
    unless_null $P5119, fallback3777
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5119, $P5122
  fallback3777:
    unless_null $P5119, vivi_12953778
    die "Contextual $*MAIN_SUB not found"
    box $P5123, "Contextual $*MAIN_SUB not found"
    set $P5119, $P5123
  vivi_12953778:
    set $P5118, $P5119
  fallback3776:
    set $P5149, $P5118
    unless $P5118 goto if1294_end3775 
.annotate 'line', 1577
.annotate 'line', 1578
    get_hll_global $P5127, "GLOBAL"
    nqp_get_package_through_who $P5126, $P5127, "QAST"
    get_who $P5125, $P5126
    set $P5124, $P5125["Op"]
    unless_null $P5124, fallback3779
    nqp_get_sc_object $P5128, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5124, $P5128
  fallback3779:
.annotate 'line', 1579
    get_hll_global $P5132, "GLOBAL"
    nqp_get_package_through_who $P5131, $P5132, "QAST"
    get_who $P5130, $P5131
    set $P5129, $P5130["BVal"]
    unless_null $P5129, fallback3780
    nqp_get_sc_object $P5133, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5129, $P5133
  fallback3780:
    find_dynamic_lex $P5134, "$*MAIN_SUB"
    unless_null $P5134, fallback3781
    get_hll_global $P5137, "GLOBAL"
    get_who $P5136, $P5137
    set $P5135, $P5136["$MAIN_SUB"]
    unless_null $P5135, fallback3782
    nqp_get_sc_object $P5138, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5135, $P5138
  fallback3782:
    unless_null $P5135, vivi_12963783
    die "Contextual $*MAIN_SUB not found"
    box $P5139, "Contextual $*MAIN_SUB not found"
    set $P5135, $P5139
  vivi_12963783:
    set $P5134, $P5135
  fallback3781:
    $P5140 = $P5129."new"($P5134 :named("value"))
.annotate 'line', 1580
    get_hll_global $P5144, "GLOBAL"
    nqp_get_package_through_who $P5143, $P5144, "QAST"
    get_who $P5142, $P5143
    set $P5141, $P5142["Var"]
    unless_null $P5141, fallback3784
    nqp_get_sc_object $P5145, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5141, $P5145
  fallback3784:
    $P5146 = $P5141."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5147 = $P5124."new"($P5140, $P5146, "call" :named("op"))
    $P5148 = $P104."push"($P5147)
    set $P5149, $P5148
  if1294_end3775:
.annotate 'line', 1583
    get_hll_global $P5153, "GLOBAL"
    nqp_get_package_through_who $P5152, $P5153, "QAST"
    get_who $P5151, $P5152
    set $P5150, $P5151["Op"]
    unless_null $P5150, fallback3785
    nqp_get_sc_object $P5154, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5150, $P5154
  fallback3785:
.annotate 'line', 1585
    get_hll_global $P5158, "GLOBAL"
    nqp_get_package_through_who $P5157, $P5158, "QAST"
    get_who $P5156, $P5157
    set $P5155, $P5156["Var"]
    unless_null $P5155, fallback3786
    nqp_get_sc_object $P5159, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5155, $P5159
  fallback3786:
    $P5160 = $P5155."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    $P5161 = $P5150."new"($P5160, $P104, "if" :named("op"))
    $P5162 = $P101."push"($P5161)
.annotate 'line', 1590
    $P5163 = $P102."push"($P101)
.annotate 'line', 1593
    find_dynamic_lex $P5164, "$*W"
    unless_null $P5164, fallback3787
    get_hll_global $P5167, "GLOBAL"
    get_who $P5166, $P5167
    set $P5165, $P5166["$W"]
    unless_null $P5165, fallback3788
    nqp_get_sc_object $P5168, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5165, $P5168
  fallback3788:
    unless_null $P5165, vivi_12973789
    die "Contextual $*W not found"
    box $P5169, "Contextual $*W not found"
    set $P5165, $P5169
  vivi_12973789:
    set $P5164, $P5165
  fallback3787:
    $P5170 = $P5164."libs"()
    $P5171 = $P102."push"($P5170)
.annotate 'line', 1596
    get_hll_global $P5175, "GLOBAL"
    nqp_get_package_through_who $P5174, $P5175, "QAST"
    get_who $P5173, $P5174
    set $P5172, $P5173["CompUnit"]
    unless_null $P5172, fallback3790
    nqp_get_sc_object $P5176, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5172, $P5176
  fallback3790:
.annotate 'line', 1600
    find_dynamic_lex $P5177, "$*W"
    unless_null $P5177, fallback3791
    get_hll_global $P5180, "GLOBAL"
    get_who $P5179, $P5180
    set $P5178, $P5179["$W"]
    unless_null $P5178, fallback3792
    nqp_get_sc_object $P5181, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5178, $P5181
  fallback3792:
    unless_null $P5178, vivi_12983793
    die "Contextual $*W not found"
    box $P5182, "Contextual $*W not found"
    set $P5178, $P5182
  vivi_12983793:
    set $P5177, $P5178
  fallback3791:
    $P5183 = $P5177."sc"()
.annotate 'line', 1601
    find_dynamic_lex $P5184, "$*W"
    unless_null $P5184, fallback3794
    get_hll_global $P5187, "GLOBAL"
    get_who $P5186, $P5187
    set $P5185, $P5186["$W"]
    unless_null $P5185, fallback3795
    nqp_get_sc_object $P5188, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5185, $P5188
  fallback3795:
    unless_null $P5185, vivi_12993796
    die "Contextual $*W not found"
    box $P5189, "Contextual $*W not found"
    set $P5185, $P5189
  vivi_12993796:
    set $P5184, $P5185
  fallback3794:
    $P5190 = $P5184."code_ref_blocks"()
.annotate 'line', 1602
    find_dynamic_lex $P5191, "$*W"
    unless_null $P5191, fallback3797
    get_hll_global $P5194, "GLOBAL"
    get_who $P5193, $P5194
    set $P5192, $P5193["$W"]
    unless_null $P5192, fallback3798
    nqp_get_sc_object $P5195, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5192, $P5195
  fallback3798:
    unless_null $P5192, vivi_13003799
    die "Contextual $*W not found"
    box $P5196, "Contextual $*W not found"
    set $P5192, $P5196
  vivi_13003799:
    set $P5191, $P5192
  fallback3797:
    $P5197 = $P5191."is_precompilation_mode"()
.annotate 'line', 1603
    find_dynamic_lex $P5198, "$*W"
    unless_null $P5198, fallback3800
    get_hll_global $P5201, "GLOBAL"
    get_who $P5200, $P5201
    set $P5199, $P5200["$W"]
    unless_null $P5199, fallback3801
    nqp_get_sc_object $P5202, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5199, $P5202
  fallback3801:
    unless_null $P5199, vivi_13013802
    die "Contextual $*W not found"
    box $P5203, "Contextual $*W not found"
    set $P5199, $P5203
  vivi_13013802:
    set $P5198, $P5199
  fallback3800:
    $P5204 = $P5198."load_dependency_tasks"()
.annotate 'line', 1604
    find_dynamic_lex $P5205, "$*W"
    unless_null $P5205, fallback3803
    get_hll_global $P5208, "GLOBAL"
    get_who $P5207, $P5208
    set $P5206, $P5207["$W"]
    unless_null $P5206, fallback3804
    nqp_get_sc_object $P5209, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5206, $P5209
  fallback3804:
    unless_null $P5206, vivi_13023805
    die "Contextual $*W not found"
    box $P5210, "Contextual $*W not found"
    set $P5206, $P5210
  vivi_13023805:
    set $P5205, $P5206
  fallback3803:
    $P5211 = $P5205."fixup_tasks"()
.annotate 'line', 1609
    get_hll_global $P5215, "GLOBAL"
    nqp_get_package_through_who $P5214, $P5215, "QAST"
    get_who $P5213, $P5214
    set $P5212, $P5213["Op"]
    unless_null $P5212, fallback3806
    nqp_get_sc_object $P5216, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5212, $P5216
  fallback3806:
.annotate 'line', 1611
    get_hll_global $P5220, "GLOBAL"
    nqp_get_package_through_who $P5219, $P5220, "QAST"
    get_who $P5218, $P5219
    set $P5217, $P5218["BVal"]
    unless_null $P5217, fallback3807
    nqp_get_sc_object $P5221, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5217, $P5221
  fallback3807:
    $P5222 = $P5217."new"($P102 :named("value"))
    $P5223 = $P5212."new"($P5222, "call" :named("op"))
    $P5224 = $P5172."new"($P102, "nqp" :named("hll"), $P5183 :named("sc"), $P5190 :named("code_ref_blocks"), $P5197 :named("compilation_mode"), $P5204 :named("pre_deserialize"), $P5211 :named("post_deserialize"), $P5223 :named("load"))
    set $P105, $P5224
.annotate 'line', 1619
    $P5225 = _lex_param_1."!make"($P105)
    .return ($P5225) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_247_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1622
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_429_1346277629.325' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1623
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3808
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback3808:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback3811
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5009
  fallback3811:
    unless $P5008 goto if1303_else3809 
.annotate 'line', 1624
    set $P5013, _lex_param_1["statement"]
    unless_null $P5013, fallback3812
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5014
  fallback3812:
    set $P5010, $P5013
    iter $P5012, $P5013
    new $P5016, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5016, for_handlers3825
    push_eh $P5016
  for_next3826:
    unless $P5012, for_done3828
    shift $P5017, $P5012
  for_redo3827:
    .const 'Sub' $P5015 = 'cuid_429_1346277629.325' 
    capture_lex $P5015
    $P5010 = $P5015($P5017)
    goto for_next3826
  for_handlers3825:
    .get_results ($P5016)
    pop_upto_eh $P5016
    getattribute $P5016, $P5016, 'type'
    eq $P5016, .CONTROL_LOOP_NEXT, for_next3826
    eq $P5016, .CONTROL_LOOP_REDO, for_redo3827
  for_done3828:
    pop_eh 
    set $P5020, $P5010
    goto if1303_end3810
  if1303_else3809:
.annotate 'line', 1633
.annotate 'line', 1634
    $P5018 = "&default_for"("$")
    $P5019 = $P101."push"($P5018)
    set $P5020, $P5019
  if1303_end3810:
.annotate 'line', 1636
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1346277629.325") :anon :lex :outer("cuid_247_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1625
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1626
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback3815
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback3815:
    defined $I5001, $P5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if1304_end3814 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback3816
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback3816:
    set $P101, $P5005
    set $P5007, $P101
  if1304_end3814:
    set $P5009, $P101["bareblock"]
    unless_null $P5009, fallback3819
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback3819:
    set $P5014, $P5009
    unless $P5009 goto if1305_end3818 
.annotate 'line', 1628
    set $P5011, $P101[0]
    unless_null $P5011, fallback3820
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5012
  fallback3820:
    $P5013 = "&block_immediate"($P5011)
    set $P101, $P5013
    set $P5014, $P101
  if1305_end3818:
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Node"]
    unless_null $P5015, fallback3823
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5019
  fallback3823:
    type_check $I5002, $P101, $P5015
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto if1306_end3822 
.annotate 'line', 1629
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback3824
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5024
  fallback3824:
    $P5025 = $P5020."new"($P101)
    set $P101, $P5025
    set $P5026, $P101
  if1306_end3822:
.annotate 'line', 1630
    find_lex $P5028, "$past"
    $P5029 = $P5028."push"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_248_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1639
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_3 :opt_flag 
    .const 'Sub' $P5016 = 'cuid_430_1346277629.325' 
    capture_lex $P5016 
    if haz_param_3, default3859
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set _lex_param_2, $P5015
  default3859:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback3831
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback3831:
    unless $P5002 goto if1307_else3829 
    .const 'Sub' $P5004 = 'cuid_430_1346277629.325' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5013, $P5005
    goto if1307_end3830
  if1307_else3829:
    set $P5006, _lex_param_1["statement_control"]
    unless_null $P5006, fallback3857
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback3857:
    unless $P5006 goto if1311_else3855 
.annotate 'line', 1662
    set $P5008, _lex_param_1["statement_control"]
    unless_null $P5008, fallback3858
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5009
  fallback3858:
    $P5010 = $P5008."ast"()
    set $P101, $P5010
    set $P5012, $P101
    goto if1311_end3856
  if1311_else3855:
.annotate 'line', 1663
    box $P5011, 0
    set $P101, $P5011
    set $P5012, $P101
  if1311_end3856:
    set $P5013, $P5012
  if1307_end3830:
.annotate 'line', 1664
    $P5014 = _lex_param_1."!make"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_430_1346277629.325") :anon :lex :outer("cuid_248_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1641
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    find_lex $P5005, "$/"
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback3832
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5006
  fallback3832:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback3833
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5007
  fallback3833:
    set $P101, $P5003
    find_lex $P5010, "$/"
    set $P5009, $P5010["statement_mod_loop"]
    unless_null $P5009, fallback3834
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5011
  fallback3834:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback3835
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5012
  fallback3835:
    set $P102, $P5008
.annotate 'line', 1644
    find_lex $P5014, "$/"
    set $P5013, $P5014["EXPR"]
    unless_null $P5013, fallback3836
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5015
  fallback3836:
    $P5016 = $P5013."ast"()
    store_lex "$past", $P5016
    set $P5030, $P101
    unless $P101 goto if1308_end3838 
.annotate 'line', 1645
.annotate 'line', 1646
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3839
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback3839:
    set $P5022, $P101["cond"]
    unless_null $P5022, fallback3840
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5023
  fallback3840:
    $P5024 = $P5022."ast"()
    find_lex $P5025, "$past"
    set $P5026, $P101["sym"]
    unless_null $P5026, fallback3841
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5027
  fallback3841:
    set $S5001, $P5026
    find_lex $P5028, "$/"
    $P5029 = $P5017."new"($P5024, $P5025, $S5001 :named("op"), $P5028 :named("node"))
    store_lex "$past", $P5029
    set $P5030, $P5029
  if1308_end3838:
    set $P5077, $P102
    unless $P102 goto if1309_end3843 
.annotate 'line', 1648
    set $P5031, $P102["sym"]
    unless_null $P5031, fallback3846
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5031, $P5032
  fallback3846:
    set $S5002, $P5031
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1310_else3844 
.annotate 'line', 1649
.annotate 'line', 1650
    get_hll_global $P5036, "GLOBAL"
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Block"]
    unless_null $P5033, fallback3847
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5037
  fallback3847:
.annotate 'line', 1651
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback3848
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5038, $P5042
  fallback3848:
    $P5043 = $P5038."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5044, "$past"
    $P5045 = $P5033."new"($P5043, $P5044, "immediate" :named("blocktype"))
    store_lex "$past", $P5045
.annotate 'line', 1653
    find_lex $P5046, "$past"
    $P5047 = $P5046."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1654
    find_lex $P5048, "$past"
    $P5049 = $P5048."arity"(1)
.annotate 'line', 1655
    get_hll_global $P5053, "GLOBAL"
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback3849
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5050, $P5054
  fallback3849:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback3850
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5055, $P5056
  fallback3850:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback3851
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5059, $P5060
  fallback3851:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1310_end3845
  if1310_else3844:
.annotate 'line', 1657
.annotate 'line', 1658
    get_hll_global $P5066, "GLOBAL"
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback3852
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5063, $P5067
  fallback3852:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback3853
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5068, $P5069
  fallback3853:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback3854
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5072, $P5073
  fallback3854:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1310_end3845:
    set $P5077, $P5076
  if1309_end3843:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_249_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1667
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1668
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3860
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback3860:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback3861
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback3861:
    $P5008 = $P5006."ast"()
    set $P5009, _lex_param_1["pblock"]
    unless_null $P5009, fallback3862
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback3862:
    $P5011 = $P5009."ast"()
    $P5012 = $P5001."new"($P5008, $P5011, "if" :named("op"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_250_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1671
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1672
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3863
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback3863:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_251_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1675
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1676
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3864
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback3864:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_252_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1679
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_432_1346277629.325' 
    capture_lex $P5028 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1680
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3865
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3866
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback3866:
    unless_null $P5003, vivi_13123867
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13123867:
    set $P5002, $P5003
  fallback3865:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback3870
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback3870:
    unless $P5009 goto if1313_else3868 
    .const 'Sub' $P5011 = 'cuid_432_1346277629.325' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5027, $P5012
    goto if1313_end3869
  if1313_else3868:
.annotate 'line', 1695
    find_dynamic_lex $P5013, "$*HAS_YOU_ARE_HERE"
    unless_null $P5013, fallback3895
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$HAS_YOU_ARE_HERE"]
    unless_null $P5014, fallback3896
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5017
  fallback3896:
    unless_null $P5014, vivi_13213897
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5018, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5014, $P5018
  vivi_13213897:
    set $P5013, $P5014
  fallback3895:
    set $P5021, $P5013
    unless $P5013 goto if1320_end3894 
.annotate 'line', 1696
.annotate 'line', 1697
    $P5019 = _lex_param_1."CURSOR"()
    $P5020 = $P5019."panic"("{YOU_ARE_HERE} may only appear once in a setting")
    set $P5021, $P5020
  if1320_end3894:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1700
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback3898
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5024
  fallback3898:
    $P5025 = $P5023."ast"()
    $P5026 = _lex_param_1."!make"($P5025)
    set $P5027, $P5026
  if1313_end3869:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_432_1346277629.325") :anon :lex :outer("cuid_252_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1681
    .const 'Sub' $P5061 = 'cuid_431_1346277629.325' 
    capture_lex $P5061 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1682
    find_lex $P5003, "$/"
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback3871
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5004
  fallback3871:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    find_dynamic_lex $P5006, "%*HANDLERS"
    unless_null $P5006, fallback3874
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    set $P5007, $P5008["%HANDLERS"]
    unless_null $P5007, fallback3875
    get_hll_global $P5011, "GLOBAL"
    get_who $P5010, $P5011
    new $P5012, 'Hash'
    set $P5010["%HANDLERS"], $P5012
    set $P5007, $P5012
  fallback3875:
    unless_null $P5007, vivi_13153876
    die "Contextual %*HANDLERS not found"
    box $P5013, "Contextual %*HANDLERS not found"
    set $P5007, $P5013
  vivi_13153876:
    set $P5006, $P5007
  fallback3874:
    set $P5034, $P5006
    unless $P5006 goto if1314_end3873 
.annotate 'line', 1683
.annotate 'line', 1684
    get_hll_global $P5017, "GLOBAL"
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3877
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5018
  fallback3877:
    $P5019 = $P5014."new"($P101, "handle" :named("op"))
    set $P101, $P5019
    find_dynamic_lex $P5023, "%*HANDLERS"
    unless_null $P5023, fallback3878
    get_hll_global $P5026, "GLOBAL"
    get_who $P5025, $P5026
    set $P5024, $P5025["%HANDLERS"]
    unless_null $P5024, fallback3879
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    new $P5029, 'Hash'
    set $P5027["%HANDLERS"], $P5029
    set $P5024, $P5029
  fallback3879:
    unless_null $P5024, vivi_13163880
    die "Contextual %*HANDLERS not found"
    box $P5030, "Contextual %*HANDLERS not found"
    set $P5024, $P5030
  vivi_13163880:
    set $P5023, $P5024
  fallback3878:
    set $P5020, $P5023
    iter $P5022, $P5023
    new $P5032, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5032, for_handlers3881
    push_eh $P5032
  for_next3882:
    unless $P5022, for_done3884
    shift $P5033, $P5022
  for_redo3883:
    .const 'Sub' $P5031 = 'cuid_431_1346277629.325' 
    capture_lex $P5031
    $P5020 = $P5031($P5033)
    goto for_next3882
  for_handlers3881:
    .get_results ($P5032)
    pop_upto_eh $P5032
    getattribute $P5032, $P5032, 'type'
    eq $P5032, .CONTROL_LOOP_NEXT, for_next3882
    eq $P5032, .CONTROL_LOOP_REDO, for_redo3883
  for_done3884:
    pop_eh 
    set $P5034, $P5020
  if1314_end3873:
.annotate 'line', 1690
    find_lex $P5035, "$BLOCK"
    $P5036 = $P5035."push"($P101)
.annotate 'line', 1691
    find_lex $P5037, "$BLOCK"
    find_lex $P5038, "$/"
    $P5039 = $P5037."node"($P5038)
    find_dynamic_lex $P5040, "%*HANDLERS"
    unless_null $P5040, fallback3887
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["%HANDLERS"]
    unless_null $P5041, fallback3888
    get_hll_global $P5045, "GLOBAL"
    get_who $P5044, $P5045
    new $P5046, 'Hash'
    set $P5044["%HANDLERS"], $P5046
    set $P5041, $P5046
  fallback3888:
    unless_null $P5041, vivi_13183889
    die "Contextual %*HANDLERS not found"
    box $P5047, "Contextual %*HANDLERS not found"
    set $P5041, $P5047
  vivi_13183889:
    set $P5040, $P5041
  fallback3887:
    set $P5057, $P5040
    unless $P5040 goto if1317_end3886 
    find_lex $P5048, "$BLOCK"
    find_dynamic_lex $P5049, "%*HANDLERS"
    unless_null $P5049, fallback3890
    get_hll_global $P5052, "GLOBAL"
    get_who $P5051, $P5052
    set $P5050, $P5051["%HANDLERS"]
    unless_null $P5050, fallback3891
    get_hll_global $P5054, "GLOBAL"
    get_who $P5053, $P5054
    new $P5055, 'Hash'
    set $P5053["%HANDLERS"], $P5055
    set $P5050, $P5055
  fallback3891:
    unless_null $P5050, vivi_13193892
    die "Contextual %*HANDLERS not found"
    box $P5056, "Contextual %*HANDLERS not found"
    set $P5050, $P5056
  vivi_13193892:
    set $P5049, $P5050
  fallback3890:
    set $P5048["handlers"], $P5049
    set $P5057, $P5049
  if1317_end3886:
.annotate 'line', 1693
    find_dynamic_lex $P5058, "$/"
    find_lex $P5059, "$BLOCK"
    $P5060 = $P5058."!make"($P5059)
    .return ($P5060) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1346277629.325") :anon :lex :outer("cuid_432_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1685
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1686
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5003 = $P5001."push"($P5002)
.annotate 'line', 1687
    find_lex $P5004, "$past"
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5004."push"($P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_253_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1704
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1705
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3899
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback3900
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback3900:
    unless_null $P5002, vivi_13223901
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13223901:
    set $P5001, $P5002
  fallback3899:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_254_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1708
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_433_1346277629.325' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback3904
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback3905
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback3905:
    unless_null $P5004, vivi_13243906
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_13243906:
    set $P5003, $P5004
  fallback3904:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback3907
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5011
  fallback3907:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback3908
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5012
  fallback3908:
    defined $I5001, $P5001
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless1323_end3903 
    .const 'Sub' $P5013 = 'cuid_433_1346277629.325' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless1323_end3903:
.annotate 'line', 1730
    nqp_decontainerize $P5017, _lex_param_0
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback3964
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback3965
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5022
  fallback3965:
    unless_null $P5019, vivi_13413966
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_13413966:
    set $P5018, $P5019
  fallback3964:
    $P5024 = $P5018."cur_lexpad"()
    $P5025 = $P5017."SET_BLOCK_OUTER_CTX"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_433_1346277629.325") :anon :lex :outer("cuid_254_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1709
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1712
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3909
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3910
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback3910:
    unless_null $P5003, vivi_13253911
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13253911:
    set $P5002, $P5003
  fallback3909:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback3913
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback3914
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback3914:
    unless_null $P5012, vivi_13263915
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_13263915:
    set $P5011, $P5012
  fallback3913:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback3916
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5019
  fallback3916:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback3917
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5020
  fallback3917:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor3912
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor3912:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback3920
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback3921
    get_hll_global $P5030, "GLOBAL"
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback3921:
    unless_null $P5026, vivi_13283922
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_13283922:
    set $P5025, $P5026
  fallback3920:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback3923
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5033
  fallback3923:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback3924
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5034
  fallback3924:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5115, $I5002
    set $P5114, $P5115
    if $I5002 goto unless1327_end3919 
.annotate 'line', 1717
.annotate 'line', 1718
    $P5035 = "&import_HOW_exports"($P101)
    find_dynamic_lex $P5038, "%*COMPILING"
    unless_null $P5038, fallback3927
    get_hll_global $P5041, "GLOBAL"
    get_who $P5040, $P5041
    set $P5039, $P5040["%COMPILING"]
    unless_null $P5039, fallback3928
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    new $P5044, 'Hash'
    set $P5042["%COMPILING"], $P5044
    set $P5039, $P5044
  fallback3928:
    unless_null $P5039, vivi_13303929
    die "Contextual %*COMPILING not found"
    box $P5045, "Contextual %*COMPILING not found"
    set $P5039, $P5045
  vivi_13303929:
    set $P5038, $P5039
  fallback3927:
    set $P5037, $P5038["%?OPTIONS"]
    unless_null $P5037, fallback3930
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5046
  fallback3930:
    set $P5036, $P5037["old-regex-lib"]
    unless_null $P5036, fallback3931
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5036, $P5047
  fallback3931:
    set $P5061, $P5036
    unless $P5036 goto if1329_end3926 
.annotate 'line', 1719
.annotate 'line', 1720
    find_dynamic_lex $P5048, "$*W"
    unless_null $P5048, fallback3932
    get_hll_global $P5051, "GLOBAL"
    get_who $P5050, $P5051
    set $P5049, $P5050["$W"]
    unless_null $P5049, fallback3933
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5052
  fallback3933:
    unless_null $P5049, vivi_13313934
    die "Contextual $*W not found"
    box $P5053, "Contextual $*W not found"
    set $P5049, $P5053
  vivi_13313934:
    set $P5048, $P5049
  fallback3932:
    find_dynamic_lex $P5054, "$*GLOBALish"
    unless_null $P5054, fallback3935
    get_hll_global $P5057, "GLOBAL"
    get_who $P5056, $P5057
    set $P5055, $P5056["$GLOBALish"]
    unless_null $P5055, fallback3936
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5055, $P5058
  fallback3936:
    unless_null $P5055, vivi_13323937
    die "Contextual $*GLOBALish not found"
    box $P5059, "Contextual $*GLOBALish not found"
    set $P5055, $P5059
  vivi_13323937:
    set $P5054, $P5055
  fallback3935:
    $P5060 = $P5048."load_module"("NQPRegex", $P5054)
    set $P5061, $P5060
  if1329_end3926:
    find_dynamic_lex $P5064, "%*COMPILING"
    unless_null $P5064, fallback3940
    get_hll_global $P5067, "GLOBAL"
    get_who $P5066, $P5067
    set $P5065, $P5066["%COMPILING"]
    unless_null $P5065, fallback3941
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    new $P5070, 'Hash'
    set $P5068["%COMPILING"], $P5070
    set $P5065, $P5070
  fallback3941:
    unless_null $P5065, vivi_13343942
    die "Contextual %*COMPILING not found"
    box $P5071, "Contextual %*COMPILING not found"
    set $P5065, $P5071
  vivi_13343942:
    set $P5064, $P5065
  fallback3940:
    set $P5063, $P5064["%?OPTIONS"]
    unless_null $P5063, fallback3943
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5063, $P5072
  fallback3943:
    set $P5062, $P5063["no-regex-lib"]
    unless_null $P5062, fallback3944
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5062, $P5073
  fallback3944:
    set $P5113, $P5062
    if $P5062 goto unless1333_end3939 
.annotate 'line', 1722
.annotate 'line', 1723
    find_dynamic_lex $P5074, "$*W"
    unless_null $P5074, fallback3945
    get_hll_global $P5077, "GLOBAL"
    get_who $P5076, $P5077
    set $P5075, $P5076["$W"]
    unless_null $P5075, fallback3946
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5075, $P5078
  fallback3946:
    unless_null $P5075, vivi_13353947
    die "Contextual $*W not found"
    box $P5079, "Contextual $*W not found"
    set $P5075, $P5079
  vivi_13353947:
    set $P5074, $P5075
  fallback3945:
    find_dynamic_lex $P5080, "$*GLOBALish"
    unless_null $P5080, fallback3948
    get_hll_global $P5083, "GLOBAL"
    get_who $P5082, $P5083
    set $P5081, $P5082["$GLOBALish"]
    unless_null $P5081, fallback3949
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5081, $P5084
  fallback3949:
    unless_null $P5081, vivi_13363950
    die "Contextual $*GLOBALish not found"
    box $P5085, "Contextual $*GLOBALish not found"
    set $P5081, $P5085
  vivi_13363950:
    set $P5080, $P5081
  fallback3948:
    $P5086 = $P5074."load_module"("QRegex", $P5080)
    find_dynamic_lex $P5089, "%*COMPILING"
    unless_null $P5089, fallback3953
    get_hll_global $P5092, "GLOBAL"
    get_who $P5091, $P5092
    set $P5090, $P5091["%COMPILING"]
    unless_null $P5090, fallback3954
    get_hll_global $P5094, "GLOBAL"
    get_who $P5093, $P5094
    new $P5095, 'Hash'
    set $P5093["%COMPILING"], $P5095
    set $P5090, $P5095
  fallback3954:
    unless_null $P5090, vivi_13383955
    die "Contextual %*COMPILING not found"
    box $P5096, "Contextual %*COMPILING not found"
    set $P5090, $P5096
  vivi_13383955:
    set $P5089, $P5090
  fallback3953:
    set $P5088, $P5089["%?OPTIONS"]
    unless_null $P5088, fallback3956
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5088, $P5097
  fallback3956:
    set $P5087, $P5088["old-regex-lib"]
    unless_null $P5087, fallback3957
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5087, $P5098
  fallback3957:
    set $P5112, $P5087
    if $P5087 goto unless1337_end3952 
.annotate 'line', 1724
.annotate 'line', 1725
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback3958
    get_hll_global $P5102, "GLOBAL"
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback3959
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5100, $P5103
  fallback3959:
    unless_null $P5100, vivi_13393960
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_13393960:
    set $P5099, $P5100
  fallback3958:
    find_dynamic_lex $P5105, "$*GLOBALish"
    unless_null $P5105, fallback3961
    get_hll_global $P5108, "GLOBAL"
    get_who $P5107, $P5108
    set $P5106, $P5107["$GLOBALish"]
    unless_null $P5106, fallback3962
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5106, $P5109
  fallback3962:
    unless_null $P5106, vivi_13403963
    die "Contextual $*GLOBALish not found"
    box $P5110, "Contextual $*GLOBALish not found"
    set $P5106, $P5110
  vivi_13403963:
    set $P5105, $P5106
  fallback3961:
    $P5111 = $P5099."load_module"("NQPP6QRegex", $P5105)
    set $P5112, $P5111
  unless1337_end3952:
    set $P5113, $P5112
  unless1333_end3939:
    set $P5114, $P5113
  unless1327_end3919:
    .return ($P5114) 
.end
.HLL "nqp"
.namespace []
.sub "GLOBALish" :subid("cuid_255_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1742
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1746
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3967
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback3968
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback3968:
    unless_null $P5002, vivi_13423969
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13423969:
    set $P5001, $P5002
  fallback3967:
    find_dynamic_lex $P5008, "%*HOW"
    unless_null $P5008, fallback3970
    get_hll_global $P5011, "GLOBAL"
    get_who $P5010, $P5011
    set $P5009, $P5010["%HOW"]
    unless_null $P5009, fallback3971
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    new $P5014, 'Hash'
    set $P5012["%HOW"], $P5014
    set $P5009, $P5014
  fallback3971:
    unless_null $P5009, vivi_13433972
    die "Contextual %*HOW not found"
    box $P5015, "Contextual %*HOW not found"
    set $P5009, $P5015
  vivi_13433972:
    set $P5008, $P5009
  fallback3970:
    set $P5007, $P5008["knowhow"]
    unless_null $P5007, fallback3973
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5016
  fallback3973:
    $P5017 = $P5001."pkg_create_mo"($P5007, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P5017
.annotate 'line', 1747
    find_dynamic_lex $P5019, "$*GLOBALish"
    unless_null $P5019, fallback3974
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$GLOBALish"]
    unless_null $P5020, fallback3975
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5023
  fallback3975:
    unless_null $P5020, vivi_13443976
    die "Contextual $*GLOBALish not found"
    box $P5024, "Contextual $*GLOBALish not found"
    set $P5020, $P5024
  vivi_13443976:
    set $P5019, $P5020
  fallback3974:
    get_how $P5018, $P5019
    find_dynamic_lex $P5025, "$*GLOBALish"
    unless_null $P5025, fallback3977
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$GLOBALish"]
    unless_null $P5026, fallback3978
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5029
  fallback3978:
    unless_null $P5026, vivi_13453979
    die "Contextual $*GLOBALish not found"
    box $P5030, "Contextual $*GLOBALish not found"
    set $P5026, $P5030
  vivi_13453979:
    set $P5025, $P5026
  fallback3977:
    $P5031 = $P5018."compose"($P5025)
.annotate 'line', 1748
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback3980
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback3981
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5036
  fallback3981:
    unless_null $P5033, vivi_13463982
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_13463982:
    set $P5032, $P5033
  fallback3980:
    find_dynamic_lex $P5038, "$*W"
    unless_null $P5038, fallback3983
    get_hll_global $P5041, "GLOBAL"
    get_who $P5040, $P5041
    set $P5039, $P5040["$W"]
    unless_null $P5039, fallback3984
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5039, $P5042
  fallback3984:
    unless_null $P5039, vivi_13473985
    die "Contextual $*W not found"
    box $P5043, "Contextual $*W not found"
    set $P5039, $P5043
  vivi_13473985:
    set $P5038, $P5039
  fallback3983:
    $P5044 = $P5038."cur_lexpad"()
    find_dynamic_lex $P5045, "$*GLOBALish"
    unless_null $P5045, fallback3986
    get_hll_global $P5048, "GLOBAL"
    get_who $P5047, $P5048
    set $P5046, $P5047["$GLOBALish"]
    unless_null $P5046, fallback3987
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5046, $P5049
  fallback3987:
    unless_null $P5046, vivi_13483988
    die "Contextual $*GLOBALish not found"
    box $P5050, "Contextual $*GLOBALish not found"
    set $P5046, $P5050
  vivi_13483988:
    set $P5045, $P5046
  fallback3986:
    $P5051 = $P5032."install_lexical_symbol"($P5044, "GLOBALish", $P5045)
    find_dynamic_lex $P5052, "$*GLOBALish"
    unless_null $P5052, fallback3989
    get_hll_global $P5055, "GLOBAL"
    get_who $P5054, $P5055
    set $P5053, $P5054["$GLOBALish"]
    unless_null $P5053, fallback3990
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5053, $P5056
  fallback3990:
    unless_null $P5053, vivi_13493991
    die "Contextual $*GLOBALish not found"
    box $P5057, "Contextual $*GLOBALish not found"
    set $P5053, $P5057
  vivi_13493991:
    set $P5052, $P5053
  fallback3989:
    store_dynamic_lex "$*PACKAGE", $P5052
.annotate 'line', 1752
    find_dynamic_lex $P5058, "$*W"
    unless_null $P5058, fallback3992
    get_hll_global $P5061, "GLOBAL"
    get_who $P5060, $P5061
    set $P5059, $P5060["$W"]
    unless_null $P5059, fallback3993
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5059, $P5062
  fallback3993:
    unless_null $P5059, vivi_13503994
    die "Contextual $*W not found"
    box $P5063, "Contextual $*W not found"
    set $P5059, $P5063
  vivi_13503994:
    set $P5058, $P5059
  fallback3992:
    find_dynamic_lex $P5064, "$*W"
    unless_null $P5064, fallback3995
    get_hll_global $P5067, "GLOBAL"
    get_who $P5066, $P5067
    set $P5065, $P5066["$W"]
    unless_null $P5065, fallback3996
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5065, $P5068
  fallback3996:
    unless_null $P5065, vivi_13513997
    die "Contextual $*W not found"
    box $P5069, "Contextual $*W not found"
    set $P5065, $P5069
  vivi_13513997:
    set $P5064, $P5065
  fallback3995:
    $P5070 = $P5064."cur_lexpad"()
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback3998
    get_hll_global $P5074, "GLOBAL"
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback3999
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5072, $P5075
  fallback3999:
    unless_null $P5072, vivi_13524000
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_13524000:
    set $P5071, $P5072
  fallback3998:
    $P5077 = $P5058."install_lexical_symbol"($P5070, "$?PACKAGE", $P5071)
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_256_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1755
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1756
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "CTXSAVE" :subid("cuid_257_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1760
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 1761
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Stmts"]
    unless_null $P5001, fallback4001
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback4001:
.annotate 'line', 1762
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback4002
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback4002:
.annotate 'line', 1764
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback4003
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback4003:
    $P5016 = $P5011."new"("ctxsave" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 1765
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback4004
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback4004:
    $P5022 = $P5017."new"("$*CTXSAVE" :named("name"), "contextual" :named("scope"))
    $P5023 = $P5006."new"($P5016, $P5022, "bind" :named("op"))
.annotate 'line', 1767
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback4005
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5028
  fallback4005:
.annotate 'line', 1769
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Op"]
    unless_null $P5029, fallback4006
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5033
  fallback4006:
.annotate 'line', 1771
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Var"]
    unless_null $P5034, fallback4007
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5034, $P5038
  fallback4007:
    $P5039 = $P5034."new"("ctxsave" :named("name"), "local" :named("scope"))
    $P5040 = $P5029."new"($P5039, "isnull" :named("op"))
.annotate 'line', 1773
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback4008
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5045
  fallback4008:
.annotate 'line', 1775
    get_hll_global $P5049, "GLOBAL"
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["VM"]
    unless_null $P5046, fallback4009
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5046, $P5050
  fallback4009:
.annotate 'line', 1777
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback4010
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5051, $P5055
  fallback4010:
    $P5056 = $P5051."new"("ctxsave" :named("name"), "local" :named("scope"))
.annotate 'line', 1778
    get_hll_global $P5060, "GLOBAL"
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["SVal"]
    unless_null $P5057, fallback4011
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5057, $P5061
  fallback4011:
    $P5062 = $P5057."new"("ctxsave" :named("value"))
    $P5063 = $P5046."new"($P5056, $P5062, "can IPs" :named("pirop"))
.annotate 'line', 1780
    get_hll_global $P5067, "GLOBAL"
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Op"]
    unless_null $P5064, fallback4012
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5064, $P5068
  fallback4012:
.annotate 'line', 1782
    get_hll_global $P5072, "GLOBAL"
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["Var"]
    unless_null $P5069, fallback4013
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5073
  fallback4013:
    $P5074 = $P5069."new"("ctxsave" :named("name"), "local" :named("scope"))
    $P5075 = $P5064."new"($P5074, "callmethod" :named("op"), "ctxsave" :named("name"))
    $P5076 = $P5041."new"($P5063, $P5075, "if" :named("op"))
    $P5077 = $P5024."new"($P5040, $P5076, "unless" :named("op"))
    $P5078 = $P5001."new"($P5023, $P5077)
    .return ($P5078) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_258_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1788
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1789
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4014
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4015
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback4015:
    unless_null $P5003, vivi_13534016
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13534016:
    set $P5002, $P5003
  fallback4014:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4017
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5009
  fallback4017:
    set $S5001, $P5008
    find_dynamic_lex $P5010, "$*GLOBALish"
    unless_null $P5010, fallback4018
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["$GLOBALish"]
    unless_null $P5011, fallback4019
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5014
  fallback4019:
    unless_null $P5011, vivi_13544020
    die "Contextual $*GLOBALish not found"
    box $P5015, "Contextual $*GLOBALish not found"
    set $P5011, $P5015
  vivi_13544020:
    set $P5010, $P5011
  fallback4018:
    $P5016 = $P5002."load_module"($S5001, $P5010)
    set $P101, $P5016
    defined $I5001, $P101
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if1355_end4022 
.annotate 'line', 1790
.annotate 'line', 1791
    $P5017 = "&import_HOW_exports"($P101)
    set $P5018, $P5017
  if1355_end4022:
.annotate 'line', 1793
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback4023
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5024
  fallback4023:
    $P5025 = $P5020."new"()
    $P5026 = _lex_param_1."!make"($P5025)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_259_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1796
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_434_1346277629.325' 
    capture_lex $P5028 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4024
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4024:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5005, $N5001
    set $P101, $P5005
.annotate 'line', 1798
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4025
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4025:
    set $I5001, $P101
    set $P5006, $P5007[$I5001]
    unless_null $P5006, fallback4026
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5009
  fallback4026:
    $P5010 = $P5006."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    set $P102, $P5011
    set $P5012, _lex_param_1["else"]
    unless_null $P5012, fallback4029
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5013
  fallback4029:
    set $P5021, $P5012
    unless $P5012 goto if1356_end4028 
.annotate 'line', 1799
.annotate 'line', 1800
    set $P5015, _lex_param_1["else"]
    unless_null $P5015, fallback4030
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5016
  fallback4030:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback4031
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5017
  fallback4031:
    $P5018 = $P5014."ast"()
    $P5019 = "&block_immediate"($P5018)
    $P5020 = $P102."push"($P5019)
    set $P5021, $P5020
  if1356_end4028:
    new $P5025, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5025, while1357_handlers4035
    push_eh $P5025
  while1357_test4032:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5026, $I5002
    set $P5024, $P5026
    unless $I5002 goto while1357_done4036 
  while1357_redo4034:
    .const 'Sub' $P5022 = 'cuid_434_1346277629.325' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while1357_test4032 
  while1357_handlers4035:
    .get_results ($P5025)
    pop_upto_eh $P5025
    getattribute $P5025, $P5025, 'type'
    eq $P5025, .CONTROL_LOOP_NEXT, while1357_test4032
    eq $P5025, .CONTROL_LOOP_REDO, while1357_redo4034
  while1357_done4036:
    pop_eh 
.annotate 'line', 1809
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1346277629.325") :anon :lex :outer("cuid_259_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1803
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1806
    find_lex $P5005, "$/"
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4037
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5006
  fallback4037:
    find_lex $P5007, "$count"
    set $I5001, $P5007
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4038
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5008
  fallback4038:
    $P5009 = $P5003."ast"()
    $P5010 = "&xblock_immediate"($P5009)
    store_lex "$past", $P5010
.annotate 'line', 1807
    find_lex $P5011, "$past"
    $P5012 = $P5011."push"($P101)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_260_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1812
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1813
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4039
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4039:
    $P5004 = $P5002."ast"()
    $P5005 = "&xblock_immediate"($P5004)
    set $P101, $P5005
.annotate 'line', 1814
    $P5006 = $P101."op"("unless")
.annotate 'line', 1815
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_261_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1818
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1819
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4040
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4040:
    $P5004 = $P5002."ast"()
    $P5005 = "&xblock_immediate"($P5004)
    set $P101, $P5005
.annotate 'line', 1820
    set $P5006, _lex_param_1["sym"]
    unless_null $P5006, fallback4041
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4041:
    set $S5001, $P5006
    $P5008 = $P101."op"($S5001)
.annotate 'line', 1821
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_262_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1824
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4042
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4042:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5005, $S5001
    set $P101, $P5005
    set $P5006, _lex_param_1["xblock"]
    unless_null $P5006, fallback4045
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4045:
    unless $P5006 goto if1358_else4043 
.annotate 'line', 1827
.annotate 'line', 1828
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4046
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5009
  fallback4046:
    $P5010 = $P5008."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    set $P102, $P5011
.annotate 'line', 1829
    $P5012 = $P102."op"($P101)
    set $P5026, $P5012
    goto if1358_end4044
  if1358_else4043:
.annotate 'line', 1831
.annotate 'line', 1832
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback4047
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5017
  fallback4047:
    set $P5018, _lex_param_1["EXPR"]
    unless_null $P5018, fallback4048
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5019
  fallback4048:
    $P5020 = $P5018."ast"()
    set $P5021, _lex_param_1["pblock"]
    unless_null $P5021, fallback4049
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5022
  fallback4049:
    $P5023 = $P5021."ast"()
    $P5024 = "&block_immediate"($P5023)
    $P5025 = $P5013."new"($P5020, $P5024, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5025
    set $P5026, $P102
  if1358_end4044:
.annotate 'line', 1835
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_263_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1838
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 1839
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4050
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4050:
    $P5005 = $P5003."ast"()
    set $P101, $P5005
.annotate 'line', 1840
    $P5006 = $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4051
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4051:
    set $P102, $P5007
.annotate 'line', 1842
    $P5009 = $P102."arity"()
    set $P5021, $P5009
    if $P5009 goto unless1359_end4053 
.annotate 'line', 1843
    set $P5010, $P102[0]
    unless_null $P5010, fallback4054
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4054:
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4055
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback4055:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5018 = $P5010."push"($P5017)
.annotate 'line', 1844
    $P5019 = $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1845
    $P5020 = $P102."arity"(1)
    set $P5021, $P5020
  unless1359_end4053:
.annotate 'line', 1847
    $P5022 = $P102."blocktype"("immediate")
.annotate 'line', 1848
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_264_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1851
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1852
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4056
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4056:
    $P5004 = $P5002."ast"()
    set $P101, $P5004
.annotate 'line', 1853
    $P5005 = "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1854
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_265_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1857
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1858
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4057
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4057:
    $P5004 = $P5002."ast"()
    set $P101, $P5004
.annotate 'line', 1859
    $P5005 = "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1860
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_266_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1894
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1895
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4058
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4059
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback4059:
    unless_null $P5002, vivi_13604060
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13604060:
    set $P5001, $P5002
  fallback4058:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4061
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4061:
    $P5009 = $P5007."ast"()
    $P5010 = $P5001."run_begin_block"($P5009)
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_267_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1898
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1899
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4062
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4063
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback4063:
    unless_null $P5002, vivi_13614064
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13614064:
    set $P5001, $P5002
  fallback4062:
    $P5007 = $P5001."cur_lexpad"()
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4065
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5009
  fallback4065:
    $P5010 = $P5008."ast"()
    $P5011 = $P5007."push"($P5010)
.annotate 'line', 1900
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4066
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback4066:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_268_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1903
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4067
    .lex "RETURN", $P102
.annotate 'line', 1904
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4069
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4069:
    $P5004 = $P5002."ast"()
    set $P101, $P5004
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Block"]
    unless_null $P5005, fallback4072
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5009
  fallback4072:
    type_check $I5001, $P101, $P5005
    box $P5022, $I5001
    set $P5021, $P5022
    unless $I5001 goto if1362_end4071 
.annotate 'line', 1905
    set $P5010, $P101["handlers"]
    unless_null $P5010, fallback4077
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4077:
    set $P5014, $P5010
    unless $P5010 goto if1364_end4076 
    set $P5012, $P101["handlers"]
    unless_null $P5012, fallback4078
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5013
  fallback4078:
    exists $I5002, $P5012["CATCH"]
    box $P5015, $I5002
    set $P5014, $P5015
  if1364_end4076:
    unless $P5014 goto if1363_else4073 
.annotate 'line', 1906
.annotate 'line', 1907
    $P5016 = _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1363_end4074
  if1363_else4073:
.annotate 'line', 1910
.annotate 'line', 1911
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1363_end4074:
    set $P5021, $P5020
  if1362_end4071:
.annotate 'line', 1914
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback4079
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5027
  fallback4079:
.annotate 'line', 1918
    get_hll_global $P5031, "GLOBAL"
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Stmts"]
    unless_null $P5028, fallback4080
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5032
  fallback4080:
.annotate 'line', 1919
    get_hll_global $P5036, "GLOBAL"
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback4081
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5037
  fallback4081:
.annotate 'line', 1921
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback4082
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5038, $P5042
  fallback4082:
    $P5043 = $P5038."new"("exception" :named("op"))
.annotate 'line', 1922
    get_hll_global $P5047, "GLOBAL"
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["SVal"]
    unless_null $P5044, fallback4083
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5044, $P5048
  fallback4083:
    $P5049 = $P5044."new"("handled" :named("value"))
.annotate 'line', 1923
    get_hll_global $P5053, "GLOBAL"
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback4084
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5050, $P5054
  fallback4084:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5033."new"($P5043, $P5049, $P5055, "bindkey_i" :named("op"))
.annotate 'line', 1925
    $P5057 = "&default_for"("$")
    $P5058 = $P5028."new"($P5056, $P5057)
    $P5059 = $P5023."new"($P101, "CATCH", $P5058, "handle" :named("op"))
    $P5060 = _lex_param_1."!make"($P5059)
    goto lexotic_4068
  lexotic_4067:
    .get_results ($P5060)
  lexotic_4068:
    .return ($P5060) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_269_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1930
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4087
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4087:
    unless $P5001 goto if1365_else4085 
.annotate 'line', 1931
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback4088
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4088:
    $P5005 = $P5003."ast"()
    $P5006 = "&block_immediate"($P5005)
    set $P5010, $P5006
    goto if1365_end4086
  if1365_else4085:
.annotate 'line', 1932
    set $P5007, _lex_param_1["statement"]
    unless_null $P5007, fallback4089
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4089:
    $P5009 = $P5007."ast"()
    set $P5010, $P5009
  if1365_end4086:
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_270_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4090
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4090:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_271_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1938
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4091
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4091:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_272_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1940
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4092
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4092:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_273_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1941
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4093
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4093:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "EXPR" :subid("cuid_274_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1945
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5027 = 'cuid_435_1346277629.325' 
    capture_lex $P5027 
    .const 'Sub' $P5027 = 'cuid_436_1346277629.325' 
    capture_lex $P5027 
    if haz_param_4, default4126
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set _lex_param_2, $P5026
  default4126:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4094
    .lex "RETURN", $P102
    set $P5004, _lex_param_2
    if _lex_param_2 goto unless1366_end4097 
.annotate 'line', 1946
    find_lex $P5002, "RETURN"
    $P5003 = $P5002(0)
    set $P5004, $P5003
  unless1366_end4097:
.annotate 'line', 1947
    $P5006 = _lex_param_1."ast"()
    set $P5005, $P5006
    defined $I5001, $P5005
    if $I5001, defor4098
    set $P5007, _lex_param_1["OPER"]
    unless_null $P5007, fallback4099
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4099:
    $P5009 = $P5007."ast"()
    set $P5005, $P5009
  defor4098:
    set $P101, $P5005
    set $P5012, $P101
    if $P101 goto unless1367_end4101 
    .const 'Sub' $P5010 = 'cuid_435_1346277629.325' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5012, $P5011
  unless1367_end4101:
    set $S5001, _lex_param_2
    iseq $I5002, $S5001, "POSTFIX"
    unless $I5002 goto if1371_else4117 
.annotate 'line', 1960
.annotate 'line', 1961
    set $P5013, _lex_param_1[0]
    unless_null $P5013, fallback4119
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5014
  fallback4119:
    $P5015 = $P5013."ast"()
    $P5016 = $P101."unshift"($P5015)
    set $P5024, $P5016
    goto if1371_end4118
  if1371_else4117:
.annotate 'line', 1963
.annotate 'line', 1964
    $P5020 = _lex_param_1."list"()
    set $P5017, $P5020
    iter $P5019, $P5020
    new $P5022, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5022, for_handlers4122
    push_eh $P5022
  for_next4123:
    unless $P5019, for_done4125
    shift $P5023, $P5019
  for_redo4124:
    .const 'Sub' $P5021 = 'cuid_436_1346277629.325' 
    capture_lex $P5021
    $P5017 = $P5021($P5023)
    goto for_next4123
  for_handlers4122:
    .get_results ($P5022)
    pop_upto_eh $P5022
    getattribute $P5022, $P5022, 'type'
    eq $P5022, .CONTROL_LOOP_NEXT, for_next4123
    eq $P5022, .CONTROL_LOOP_REDO, for_redo4124
  for_done4125:
    pop_eh 
    set $P5024, $P5017
  if1371_end4118:
.annotate 'line', 1966
    $P5025 = _lex_param_1."!make"($P101)
    goto lexotic_4095
  lexotic_4094:
    .get_results ($P5025)
  lexotic_4095:
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1346277629.325") :anon :lex :outer("cuid_274_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1948
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1949
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4102
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback4102:
    find_lex $P5007, "$/"
    $P5008 = $P5002."new"($P5007 :named("node"))
    store_lex "$past", $P5008
    find_lex $P5012, "$/"
    set $P5011, $P5012["OPER"]
    unless_null $P5011, fallback4105
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5013
  fallback4105:
    set $P5010, $P5011["O"]
    unless_null $P5010, fallback4106
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5014
  fallback4106:
    set $P5009, $P5010["op"]
    unless_null $P5009, fallback4107
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5015
  fallback4107:
    set $P5025, $P5009
    unless $P5009 goto if1368_end4104 
.annotate 'line', 1950
.annotate 'line', 1951
    find_lex $P5016, "$past"
    find_lex $P5020, "$/"
    set $P5019, $P5020["OPER"]
    unless_null $P5019, fallback4108
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5021
  fallback4108:
    set $P5018, $P5019["O"]
    unless_null $P5018, fallback4109
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5022
  fallback4109:
    set $P5017, $P5018["op"]
    unless_null $P5017, fallback4110
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5023
  fallback4110:
    set $S5001, $P5017
    $P5024 = $P5016."op"($S5001)
    set $P5025, $P5024
  if1368_end4104:
    find_lex $P5026, "$key"
    set $S5002, $P5026
    iseq $I5001, $S5002, "LIST"
    box $P5029, $I5001
    set $P5028, $P5029
    unless $I5001 goto if1369_end4112 
.annotate 'line', 1953
    box $P5027, "infix"
    store_lex "$key", $P5027
    set $P5028, $P5027
  if1369_end4112:
    find_lex $P5030, "$key"
    set $S5007, $P5030
    downcase $S5006, $S5007
    concat $S5005, $S5006, ":<"
    find_lex $P5033, "$/"
    set $P5032, $P5033["OPER"]
    unless_null $P5032, fallback4113
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5032, $P5034
  fallback4113:
    set $P5031, $P5032["sym"]
    unless_null $P5031, fallback4114
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5031, $P5035
  fallback4114:
    set $S5008, $P5031
    concat $S5004, $S5005, $S5008
    concat $S5003, $S5004, ">"
    box $P5036, $S5003
    set $P101, $P5036
.annotate 'line', 1955
    find_lex $P5037, "$past"
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5038 = $P5037."name"($S5009)
.annotate 'line', 1956
    find_lex $P5039, "$past"
    $P5040 = $P5039."op"()
    set $P5043, $P5040
    if $P5040 goto unless1370_end4116 
.annotate 'line', 1957
    find_lex $P5041, "$past"
    $P5042 = $P5041."op"("call")
    set $P5043, $P5042
  unless1370_end4116:
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1346277629.325") :anon :lex :outer("cuid_274_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1964
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    $P5001 = _lex_param_0."ast"()
    defined $I5001, $P5001
    box $P5006, $I5001
    set $P5005, $P5006
    unless $I5001 goto if1372_end4121 
    find_lex $P5002, "$past"
    $P5003 = _lex_param_0."ast"()
    $P5004 = $P5002."push"($P5003)
    set $P5005, $P5004
  if1372_end4121:
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_275_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1971
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4127
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4127:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_276_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1972
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4128
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4128:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_277_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1973
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4129
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4129:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_278_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1974
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4130
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4130:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_279_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1975
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4131
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4131:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_280_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4132
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4132:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_281_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1977
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4133
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4133:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_282_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1978
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4134
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4134:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_283_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1979
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1980
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4135
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback4135:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4136
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4136:
    $P5008 = $P5006."ast"()
    $P5009 = $P5001."new"($P5008, "takeclosure" :named("op"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_284_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1983
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 1984
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4137
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4137:
    $P5004 = $P5002."ast"()
    set $P101, $P5004
.annotate 'line', 1985
    set $P5005, _lex_param_1["key"]
    unless_null $P5005, fallback4138
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback4138:
    $P5007 = $P5005."Str"()
    $P5008 = $P101."named"($P5007)
.annotate 'line', 1986
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_285_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1989
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_437_1346277629.325' 
    capture_lex $P5018 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4141
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4141:
    unless $P5001 goto if1373_else4139 
.annotate 'line', 1990
.annotate 'line', 1991
    set $P5003, _lex_param_1["variable"]
    unless_null $P5003, fallback4142
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4142:
    $P5005 = $P5003."ast"()
    set $P5007, _lex_param_1["variable"]
    unless_null $P5007, fallback4143
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4143:
    set $P5006, $P5007["desigilname"]
    unless_null $P5006, fallback4144
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5009
  fallback4144:
    set $S5001, $P5006
    $P5010 = $P5005."named"($S5001)
.annotate 'line', 1992
    set $P5011, _lex_param_1["variable"]
    unless_null $P5011, fallback4145
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5012
  fallback4145:
    $P5013 = $P5011."ast"()
    $P5014 = _lex_param_1."!make"($P5013)
    set $P5017, $P5014
    goto if1373_end4140
  if1373_else4139:
    .const 'Sub' $P5015 = 'cuid_437_1346277629.325' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if1373_end4140:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1346277629.325") :anon :lex :outer("cuid_285_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1993
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    find_lex $P5003, "$/"
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4148
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5004
  fallback4148:
    unless $P5002 goto if1374_else4146 
.annotate 'line', 1995
    find_lex $P5007, "$/"
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback4149
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5008
  fallback4149:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback4150
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5009
  fallback4150:
    $P5010 = $P5005."ast"()
    set $P5020, $P5010
    goto if1374_end4147
  if1374_else4146:
.annotate 'line', 1996
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["IVal"]
    unless_null $P5011, fallback4151
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback4151:
    find_lex $P5017, "$/"
    set $P5016, $P5017["not"]
    unless_null $P5016, fallback4152
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5018
  fallback4152:
    isfalse $I5001, $P5016
    $P5019 = $P5011."new"($I5001 :named("value"))
    set $P5020, $P5019
  if1374_end4147:
    set $P101, $P5020
.annotate 'line', 1997
    find_lex $P5022, "$/"
    set $P5021, $P5022["identifier"]
    unless_null $P5021, fallback4153
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5023
  fallback4153:
    set $S5001, $P5021
    $P5024 = $P101."named"($S5001)
.annotate 'line', 1998
    find_dynamic_lex $P5025, "$/"
    $P5026 = $P5025."!make"($P101)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_286_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2002
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_439_1346277629.325' 
    capture_lex $P5018 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4156
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4156:
    unless $P5002 goto if1375_else4154 
.annotate 'line', 2004
.annotate 'line', 2005
    set $P5004, _lex_param_1["postcircumfix"]
    unless_null $P5004, fallback4157
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback4157:
    $P5006 = $P5004."ast"()
    set $P101, $P5006
.annotate 'line', 2006
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Var"]
    unless_null $P5007, fallback4158
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback4158:
    $P5012 = $P5007."new"("$/" :named("name"), "lexical" :named("scope"))
    $P5013 = $P101."unshift"($P5012)
    set $P5016, $P5013
    goto if1375_end4155
  if1375_else4154:
    .const 'Sub' $P5014 = 'cuid_439_1346277629.325' 
    capture_lex $P5014
    $P5015 = $P5014()
    set $P5016, $P5015
  if1375_end4155:
.annotate 'line', 2074
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1346277629.325") :anon :lex :outer("cuid_286_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2008
    .const 'Sub' $P5060 = 'cuid_438_1346277629.325' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_442_1346277629.325' 
    capture_lex $P5060 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2009
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4159
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback4159:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1376_else4160 
.annotate 'line', 2010
    find_lex $P5010, "$/"
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4164
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5011
  fallback4164:
    set $P5015, $P5009
    unless $P5009 goto if1377_end4163 
.annotate 'line', 2011
.annotate 'line', 2012
    find_lex $P5012, "$/"
    $P5013 = $P5012."CURSOR"()
    $P5014 = $P5013."panic"("Twigil not allowed on multi-part name")
    set $P5015, $P5014
  if1377_end4163:
.annotate 'line', 2014
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5059, $P5017
    goto if1376_end4161
  if1376_else4160:
    find_lex $P5020, "$/"
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4167
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5021
  fallback4167:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4168
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5022
  fallback4168:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1378_else4165 
    .const 'Sub' $P5023 = 'cuid_438_1346277629.325' 
    capture_lex $P5023
    $P5024 = $P5023()
    set $P5058, $P5024
    goto if1378_end4166
  if1378_else4165:
    find_lex $P5027, "$/"
    set $P5026, $P5027["twigil"]
    unless_null $P5026, fallback4177
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5028
  fallback4177:
    set $P5025, $P5026[0]
    unless_null $P5025, fallback4178
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5029
  fallback4178:
    set $S5003, $P5025
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1379_else4175 
    .const 'Sub' $P5030 = 'cuid_442_1346277629.325' 
    capture_lex $P5030
    $P5031 = $P5030()
    set $P5057, $P5031
    goto if1379_end4176
  if1379_else4175:
.annotate 'line', 2066
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback4218
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback4219
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5036
  fallback4219:
    unless_null $P5033, vivi_13924220
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_13924220:
    set $P5032, $P5033
  fallback4218:
    set $P5038, $P101[0]
    unless_null $P5038, fallback4221
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5038, $P5039
  fallback4221:
    set $S5004, $P5038
    $P5040 = $P5032."is_package"($S5004)
    unless $P5040 goto if1391_else4216 
.annotate 'line', 2067
    find_lex $P5041, "$/"
    $P5042 = "&lexical_package_lookup"($P101, $P5041)
    store_lex "$past", $P5042
.annotate 'line', 2068
    find_lex $P5043, "$past"
    find_lex $P5045, "$/"
    set $P5044, $P5045["sigil"]
    unless_null $P5044, fallback4222
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5044, $P5046
  fallback4222:
    $P5047 = "&default_for"($P5044)
    $P5048 = $P5043."fallback"($P5047)
    set $P5056, $P5048
    goto if1391_end4217
  if1391_else4216:
.annotate 'line', 2070
.annotate 'line', 2071
    get_hll_global $P5052, "GLOBAL"
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback4223
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5053
  fallback4223:
    $P5054 = $P101."pop"()
    set $S5005, $P5054
    $P5055 = $P5049."new"($S5005 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5055
    set $P5056, $P5055
  if1391_end4217:
    set $P5057, $P5056
  if1379_end4176:
    set $P5058, $P5057
  if1378_end4166:
    set $P5059, $P5058
  if1376_end4161:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1346277629.325") :anon :lex :outer("cuid_439_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2016
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2017
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4169
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback4169:
.annotate 'line', 2019
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4170
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5011
  fallback4170:
    set $S5002, $P5009
    find_lex $P5013, "$/"
    set $P5012, $P5013["desigilname"]
    unless_null $P5012, fallback4171
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5014
  fallback4171:
    set $S5003, $P5012
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    push $P5007, $P5015
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P5007, $P5016)
.annotate 'line', 2020
    get_hll_global $P5021, "GLOBAL"
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback4172
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5022
  fallback4172:
.annotate 'line', 2022
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["SVal"]
    unless_null $P5023, fallback4173
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5027
  fallback4173:
    find_lex $P5028, "$/"
    set $S5006, $P5028
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5029 = $P5023."new"($S5004 :named("value"))
    $P5030 = $P5018."new"($P5029, "die_s" :named("op"))
    $P5031 = $P5002."new"($P5017, $P5030, "ifnull" :named("op"))
    set $P101, $P5031
.annotate 'line', 2024
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["VarWithFallback"]
    unless_null $P5032, fallback4174
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5032, $P5036
  fallback4174:
.annotate 'line', 2025
    find_lex $P5037, "@name"
    $P5038 = $P5037."pop"()
    set $S5007, $P5038
    $P5039 = $P5032."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5039
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1346277629.325") :anon :lex :outer("cuid_439_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2029
    .const 'Sub' $P5065 = 'cuid_441_1346277629.325' 
    capture_lex $P5065 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 2031
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4181
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4182
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5010
  fallback4182:
    unless_null $P5007, vivi_13814183
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_13814183:
    set $P5006, $P5007
  fallback4181:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1380_else4179 
.annotate 'line', 2033
.annotate 'line', 2034
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4184
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback4184:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2035
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4185
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4186
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5022
  fallback4186:
    unless_null $P5019, vivi_13824187
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_13824187:
    set $P5018, $P5019
  fallback4185:
    $P5024 = $P102."set_compile_time_value"($P5018)
    set $P5037, $P5024
    goto if1380_end4180
  if1380_else4179:
.annotate 'line', 2037
.annotate 'line', 2038
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4188
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5029
  fallback4188:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4189
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4190
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5031, $P5034
  fallback4190:
    unless_null $P5031, vivi_13834191
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_13834191:
    set $P5030, $P5031
  fallback4189:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
    set $P5037, $P102
  if1380_end4180:
.annotate 'line', 2040
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback4192
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5038, $P5042
  fallback4192:
.annotate 'line', 2042
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["VM"]
    unless_null $P5043, fallback4193
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5043, $P5047
  fallback4193:
.annotate 'line', 2043
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Var"]
    unless_null $P5048, fallback4194
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5048, $P5052
  fallback4194:
    $P5053 = $P5048."new"("self" :named("name"), "lexical" :named("scope"))
    $P5054 = $P5043."new"($P5053, "nqp_decontainerize PP" :named("pirop"))
    $P5055 = $P5038."new"($P5054, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5055
    find_dynamic_lex $P5056, "$*IN_DECL"
    unless_null $P5056, fallback4197
    get_hll_global $P5059, "GLOBAL"
    get_who $P5058, $P5059
    set $P5057, $P5058["$IN_DECL"]
    unless_null $P5057, fallback4198
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5057, $P5060
  fallback4198:
    unless_null $P5057, vivi_13854199
    die "Contextual $*IN_DECL not found"
    box $P5061, "Contextual $*IN_DECL not found"
    set $P5057, $P5061
  vivi_13854199:
    set $P5056, $P5057
  fallback4197:
    set $P5064, $P5056
    if $P5056 goto unless1384_end4196 
    .const 'Sub' $P5062 = 'cuid_441_1346277629.325' 
    capture_lex $P5062
    $P5063 = $P5062()
    set $P5064, $P5063
  unless1384_end4196:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1346277629.325") :anon :lex :outer("cuid_442_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2048
    .const 'Sub' $P5032 = 'cuid_440_1346277629.325' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2050
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4200
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4201
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5010
  fallback4201:
    unless_null $P5007, vivi_13864202
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_13864202:
    set $P5006, $P5007
  fallback4200:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4203
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4204
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5016
  fallback4204:
    unless_null $P5013, vivi_13874205
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_13874205:
    set $P5012, $P5013
  fallback4203:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4208
    push_eh $P5020
  for_next4209:
    unless $P5004, for_done4211
    shift $P5021, $P5004
  for_redo4210:
    .const 'Sub' $P5019 = 'cuid_440_1346277629.325' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4209
  for_handlers4208:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4209
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4210
  for_done4211:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1389_else4212 
.annotate 'line', 2056
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1390_end4215 
.annotate 'line', 2057
.annotate 'line', 2058
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1390_end4215:
    set $P5031, $P5025
    goto if1389_end4213
  if1389_else4212:
.annotate 'line', 2061
.annotate 'line', 2062
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1389_end4213:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1346277629.325") :anon :lex :outer("cuid_441_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2050
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2051
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1388_end4207 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1388_end4207:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_287_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2077
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4224
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4224:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_288_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2078
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4225
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4225:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_289_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2079
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4226
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4226:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_290_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2080
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4227
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4227:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_291_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2081
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4228
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4228:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_292_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2082
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4229
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4229:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_293_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2084
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 2087
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4230
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4231
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback4231:
    unless_null $P5004, vivi_13934232
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13934232:
    set $P5003, $P5004
  fallback4230:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4233
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4233:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4234
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5012
  fallback4234:
    $P5013 = $P5003."find_sym"($P5009)
    set $P101, $P5013
.annotate 'line', 2088
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback4235
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback4236
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5018
  fallback4236:
    unless_null $P5015, vivi_13944237
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_13944237:
    set $P5014, $P5015
  fallback4235:
    set $P5020, _lex_param_1["name"]
    unless_null $P5020, fallback4238
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5021
  fallback4238:
    set $S5001, $P5020
    $P5022 = $P5014."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5022
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4243
    get_hll_global $P5026, "GLOBAL"
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4244
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5027
  fallback4244:
    unless_null $P5024, vivi_13974245
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_13974245:
    set $P5023, $P5024
  fallback4243:
    set $S5002, $P5023
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1396_end4242 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4246
    get_hll_global $P5032, "GLOBAL"
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4247
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5033
  fallback4247:
    unless_null $P5030, vivi_13984248
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_13984248:
    set $P5029, $P5030
  fallback4246:
    set $S5003, $P5029
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1396_end4242:
    unless $I5003 goto if1395_else4239 
.annotate 'line', 2091
.annotate 'line', 2092
    find_dynamic_lex $P5035, "$*W"
    unless_null $P5035, fallback4249
    get_hll_global $P5038, "GLOBAL"
    get_who $P5037, $P5038
    set $P5036, $P5037["$W"]
    unless_null $P5036, fallback4250
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5036, $P5039
  fallback4250:
    unless_null $P5036, vivi_13994251
    die "Contextual $*W not found"
    box $P5040, "Contextual $*W not found"
    set $P5036, $P5040
  vivi_13994251:
    set $P5035, $P5036
  fallback4249:
    find_dynamic_lex $P5041, "$*OUTERPACKAGE"
    unless_null $P5041, fallback4252
    get_hll_global $P5044, "GLOBAL"
    get_who $P5043, $P5044
    set $P5042, $P5043["$OUTERPACKAGE"]
    unless_null $P5042, fallback4253
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5042, $P5045
  fallback4253:
    unless_null $P5042, vivi_14004254
    die "Contextual $*OUTERPACKAGE not found"
    box $P5046, "Contextual $*OUTERPACKAGE not found"
    set $P5042, $P5046
  vivi_14004254:
    set $P5041, $P5042
  fallback4252:
    set $P5048, _lex_param_1["name"]
    unless_null $P5048, fallback4255
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5048, $P5049
  fallback4255:
    set $P5047, $P5048["identifier"]
    unless_null $P5047, fallback4256
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5047, $P5050
  fallback4256:
    $P5051 = $P5035."install_package_symbol"($P5041, $P5047, $P102)
    set $P5053, _lex_param_1["name"]
    unless_null $P5053, fallback4259
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5053, $P5054
  fallback4259:
    set $P5052, $P5053["identifier"]
    unless_null $P5052, fallback4260
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5052, $P5055
  fallback4260:
    set $N5001, $P5052
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5077, $I5004
    set $P5076, $P5077
    unless $I5004 goto if1401_end4258 
.annotate 'line', 2093
.annotate 'line', 2094
    find_dynamic_lex $P5056, "$*W"
    unless_null $P5056, fallback4261
    get_hll_global $P5059, "GLOBAL"
    get_who $P5058, $P5059
    set $P5057, $P5058["$W"]
    unless_null $P5057, fallback4262
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5057, $P5060
  fallback4262:
    unless_null $P5057, vivi_14024263
    die "Contextual $*W not found"
    box $P5061, "Contextual $*W not found"
    set $P5057, $P5061
  vivi_14024263:
    set $P5056, $P5057
  fallback4261:
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback4264
    get_hll_global $P5065, "GLOBAL"
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback4265
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5063, $P5066
  fallback4265:
    unless_null $P5063, vivi_14034266
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_14034266:
    set $P5062, $P5063
  fallback4264:
    $P5068 = $P5062."cur_lexpad"()
    set $P5071, _lex_param_1["name"]
    unless_null $P5071, fallback4267
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5071, $P5072
  fallback4267:
    set $P5070, $P5071["identifier"]
    unless_null $P5070, fallback4268
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5070, $P5073
  fallback4268:
    set $P5069, $P5070[0]
    unless_null $P5069, fallback4269
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5074
  fallback4269:
    $P5075 = $P5056."install_lexical_symbol"($P5068, $P5069, $P102)
    set $P5076, $P5075
  if1401_end4258:
    set $P5123, $P5076
    goto if1395_end4240
  if1395_else4239:
    find_dynamic_lex $P5078, "$*SCOPE"
    unless_null $P5078, fallback4272
    get_hll_global $P5081, "GLOBAL"
    get_who $P5080, $P5081
    set $P5079, $P5080["$SCOPE"]
    unless_null $P5079, fallback4273
    nqp_get_sc_object $P5082, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5079, $P5082
  fallback4273:
    unless_null $P5079, vivi_14054274
    die "Contextual $*SCOPE not found"
    box $P5083, "Contextual $*SCOPE not found"
    set $P5079, $P5083
  vivi_14054274:
    set $P5078, $P5079
  fallback4272:
    set $S5004, $P5078
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1404_else4270 
.annotate 'line', 2097
    set $P5085, _lex_param_1["name"]
    unless_null $P5085, fallback4277
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5085, $P5086
  fallback4277:
    set $P5084, $P5085["identifier"]
    unless_null $P5084, fallback4278
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5084, $P5087
  fallback4278:
    set $N5003, $P5084
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5093, $I5006
    set $P5092, $P5093
    unless $I5006 goto if1406_end4276 
.annotate 'line', 2098
.annotate 'line', 2099
    set $P5088, _lex_param_1["name"]
    unless_null $P5088, fallback4279
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5088, $P5089
  fallback4279:
    $P5090 = $P5088."CURSOR"()
    $P5091 = $P5090."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5092, $P5091
  if1406_end4276:
.annotate 'line', 2101
    find_dynamic_lex $P5094, "$*W"
    unless_null $P5094, fallback4280
    get_hll_global $P5097, "GLOBAL"
    get_who $P5096, $P5097
    set $P5095, $P5096["$W"]
    unless_null $P5095, fallback4281
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5095, $P5098
  fallback4281:
    unless_null $P5095, vivi_14074282
    die "Contextual $*W not found"
    box $P5099, "Contextual $*W not found"
    set $P5095, $P5099
  vivi_14074282:
    set $P5094, $P5095
  fallback4280:
    find_dynamic_lex $P5100, "$*W"
    unless_null $P5100, fallback4283
    get_hll_global $P5103, "GLOBAL"
    get_who $P5102, $P5103
    set $P5101, $P5102["$W"]
    unless_null $P5101, fallback4284
    nqp_get_sc_object $P5104, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5101, $P5104
  fallback4284:
    unless_null $P5101, vivi_14084285
    die "Contextual $*W not found"
    box $P5105, "Contextual $*W not found"
    set $P5101, $P5105
  vivi_14084285:
    set $P5100, $P5101
  fallback4283:
    $P5106 = $P5100."cur_lexpad"()
    set $P5109, _lex_param_1["name"]
    unless_null $P5109, fallback4286
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5109, $P5110
  fallback4286:
    set $P5108, $P5109["identifier"]
    unless_null $P5108, fallback4287
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5108, $P5111
  fallback4287:
    set $P5107, $P5108[0]
    unless_null $P5107, fallback4288
    nqp_get_sc_object $P5112, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5107, $P5112
  fallback4288:
    $P5113 = $P5094."install_lexical_symbol"($P5106, $P5107, $P102)
    set $P5122, $P5113
    goto if1404_end4271
  if1404_else4270:
.annotate 'line', 2103
.annotate 'line', 2104
    $P5114 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5115, "$*SCOPE"
    unless_null $P5115, fallback4289
    get_hll_global $P5118, "GLOBAL"
    get_who $P5117, $P5118
    set $P5116, $P5117["$SCOPE"]
    unless_null $P5116, fallback4290
    nqp_get_sc_object $P5119, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5116, $P5119
  fallback4290:
    unless_null $P5116, vivi_14094291
    die "Contextual $*SCOPE not found"
    box $P5120, "Contextual $*SCOPE not found"
    set $P5116, $P5120
  vivi_14094291:
    set $P5115, $P5116
  fallback4289:
    set $S5006, $P5115
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5121 = $P5114."panic"($S5005)
    set $P5122, $P5121
  if1404_end4271:
    set $P5123, $P5122
  if1395_end4240:
.annotate 'line', 2107
    get_hll_global $P5127, "GLOBAL"
    nqp_get_package_through_who $P5126, $P5127, "QAST"
    get_who $P5125, $P5126
    set $P5124, $P5125["Stmts"]
    unless_null $P5124, fallback4292
    nqp_get_sc_object $P5128, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5124, $P5128
  fallback4292:
    $P5129 = $P5124."new"()
    $P5130 = _lex_param_1."!make"($P5129)
    .return ($P5130) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_294_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2110
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5150 = 'cuid_443_1346277629.325' 
    capture_lex $P5150 
    .const 'Sub' $P5150 = 'cuid_444_1346277629.325' 
    capture_lex $P5150 
    .const 'Sub' $P5150 = 'cuid_445_1346277629.325' 
    capture_lex $P5150 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4293
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4293:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4294
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5009
  fallback4294:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2113
    $P5010 = $P101."pop"()
    set $S5001, $P5010
    box $P5011, $S5001
    set $P102, $P5011
    find_dynamic_lex $P5013, "%*HOW"
    unless_null $P5013, fallback4295
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["%HOW"]
    unless_null $P5014, fallback4296
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    new $P5019, 'Hash'
    set $P5017["%HOW"], $P5019
    set $P5014, $P5019
  fallback4296:
    unless_null $P5014, vivi_14104297
    die "Contextual %*HOW not found"
    box $P5020, "Contextual %*HOW not found"
    set $P5014, $P5020
  vivi_14104297:
    set $P5013, $P5014
  fallback4295:
    find_dynamic_lex $P5021, "$*PKGDECL"
    unless_null $P5021, fallback4298
    get_hll_global $P5024, "GLOBAL"
    get_who $P5023, $P5024
    set $P5022, $P5023["$PKGDECL"]
    unless_null $P5022, fallback4299
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5025
  fallback4299:
    unless_null $P5022, vivi_14114300
    die "Contextual $*PKGDECL not found"
    box $P5026, "Contextual $*PKGDECL not found"
    set $P5022, $P5026
  vivi_14114300:
    set $P5021, $P5022
  fallback4298:
    set $S5002, $P5021
    set $P5012, $P5013[$S5002]
    unless_null $P5012, fallback4301
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5027
  fallback4301:
    set $P103, $P5012
    set $P5028, _lex_param_1["block"]
    unless_null $P5028, fallback4304
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5029
  fallback4304:
    unless $P5028 goto if1412_else4302 
.annotate 'line', 2117
    set $P5030, _lex_param_1["block"]
    unless_null $P5030, fallback4305
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5031
  fallback4305:
    $P5032 = $P5030."ast"()
    set $P5036, $P5032
    goto if1412_end4303
  if1412_else4302:
    set $P5033, _lex_param_1["comp_unit"]
    unless_null $P5033, fallback4306
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5034
  fallback4306:
    $P5035 = $P5033."ast"()
    set $P5036, $P5035
  if1412_end4303:
    set $P104, $P5036
    can $I5001, $P103, "parametric"
    box $P5039, $I5001
    set $P5038, $P5039
    unless $I5001 goto if1414_end4310 
.annotate 'line', 2123
    $P5037 = $P103."parametric"($P103)
    set $P5038, $P5037
  if1414_end4310:
    unless $P5038 goto if1413_else4307 
.annotate 'line', 2124
    $P5040 = $P104."blocktype"("declaration")
.annotate 'line', 2125
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback4311
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5045
  fallback4311:
    $P5046 = $P5041."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5047 = $P104."unshift"($P5046)
.annotate 'line', 2127
    $P5048 = $P104."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2128
    find_dynamic_lex $P5049, "$*W"
    unless_null $P5049, fallback4312
    get_hll_global $P5052, "GLOBAL"
    get_who $P5051, $P5052
    set $P5050, $P5051["$W"]
    unless_null $P5050, fallback4313
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5050, $P5053
  fallback4313:
    unless_null $P5050, vivi_14154314
    die "Contextual $*W not found"
    box $P5054, "Contextual $*W not found"
    set $P5050, $P5054
  vivi_14154314:
    set $P5049, $P5050
  fallback4312:
    find_dynamic_lex $P5055, "$*PACKAGE"
    unless_null $P5055, fallback4315
    get_hll_global $P5058, "GLOBAL"
    get_who $P5057, $P5058
    set $P5056, $P5057["$PACKAGE"]
    unless_null $P5056, fallback4316
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5056, $P5059
  fallback4316:
    unless_null $P5056, vivi_14164317
    die "Contextual $*PACKAGE not found"
    box $P5060, "Contextual $*PACKAGE not found"
    set $P5056, $P5060
  vivi_14164317:
    set $P5055, $P5056
  fallback4315:
    $P5061 = $P5049."pkg_set_body_block"($P5055, $P104)
.annotate 'line', 2129
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback4318
    get_hll_global $P5065, "GLOBAL"
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback4319
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5063, $P5066
  fallback4319:
    unless_null $P5063, vivi_14174320
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_14174320:
    set $P5062, $P5063
  fallback4318:
    find_dynamic_lex $P5068, "$*PACKAGE"
    unless_null $P5068, fallback4321
    get_hll_global $P5071, "GLOBAL"
    get_who $P5070, $P5071
    set $P5069, $P5070["$PACKAGE"]
    unless_null $P5069, fallback4322
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5072
  fallback4322:
    unless_null $P5069, vivi_14184323
    die "Contextual $*PACKAGE not found"
    box $P5073, "Contextual $*PACKAGE not found"
    set $P5069, $P5073
  vivi_14184323:
    set $P5068, $P5069
  fallback4321:
    $P5074 = $P5062."install_lexical_symbol"($P104, "$?PACKAGE", $P5068)
.annotate 'line', 2130
    find_dynamic_lex $P5075, "$*W"
    unless_null $P5075, fallback4324
    get_hll_global $P5078, "GLOBAL"
    get_who $P5077, $P5078
    set $P5076, $P5077["$W"]
    unless_null $P5076, fallback4325
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5076, $P5079
  fallback4325:
    unless_null $P5076, vivi_14194326
    die "Contextual $*W not found"
    box $P5080, "Contextual $*W not found"
    set $P5076, $P5080
  vivi_14194326:
    set $P5075, $P5076
  fallback4324:
    find_dynamic_lex $P5081, "$*PACKAGE"
    unless_null $P5081, fallback4327
    get_hll_global $P5084, "GLOBAL"
    get_who $P5083, $P5084
    set $P5082, $P5083["$PACKAGE"]
    unless_null $P5082, fallback4328
    nqp_get_sc_object $P5085, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5082, $P5085
  fallback4328:
    unless_null $P5082, vivi_14204329
    die "Contextual $*PACKAGE not found"
    box $P5086, "Contextual $*PACKAGE not found"
    set $P5082, $P5086
  vivi_14204329:
    set $P5081, $P5082
  fallback4327:
    $P5087 = $P5075."install_lexical_symbol"($P104, "$?ROLE", $P5081)
    set $P5115, $P5087
    goto if1413_end4308
  if1413_else4307:
.annotate 'line', 2132
.annotate 'line', 2133
    $P5088 = $P104."blocktype"("immediate")
.annotate 'line', 2134
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback4330
    get_hll_global $P5092, "GLOBAL"
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback4331
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5090, $P5093
  fallback4331:
    unless_null $P5090, vivi_14214332
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_14214332:
    set $P5089, $P5090
  fallback4330:
    find_dynamic_lex $P5095, "$*PACKAGE"
    unless_null $P5095, fallback4333
    get_hll_global $P5098, "GLOBAL"
    get_who $P5097, $P5098
    set $P5096, $P5097["$PACKAGE"]
    unless_null $P5096, fallback4334
    nqp_get_sc_object $P5099, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5096, $P5099
  fallback4334:
    unless_null $P5096, vivi_14224335
    die "Contextual $*PACKAGE not found"
    box $P5100, "Contextual $*PACKAGE not found"
    set $P5096, $P5100
  vivi_14224335:
    set $P5095, $P5096
  fallback4333:
    $P5101 = $P5089."install_lexical_symbol"($P104, "$?PACKAGE", $P5095)
.annotate 'line', 2135
    find_dynamic_lex $P5102, "$*W"
    unless_null $P5102, fallback4336
    get_hll_global $P5105, "GLOBAL"
    get_who $P5104, $P5105
    set $P5103, $P5104["$W"]
    unless_null $P5103, fallback4337
    nqp_get_sc_object $P5106, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5103, $P5106
  fallback4337:
    unless_null $P5103, vivi_14234338
    die "Contextual $*W not found"
    box $P5107, "Contextual $*W not found"
    set $P5103, $P5107
  vivi_14234338:
    set $P5102, $P5103
  fallback4336:
    find_dynamic_lex $P5108, "$*PACKAGE"
    unless_null $P5108, fallback4339
    get_hll_global $P5111, "GLOBAL"
    get_who $P5110, $P5111
    set $P5109, $P5110["$PACKAGE"]
    unless_null $P5109, fallback4340
    nqp_get_sc_object $P5112, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5109, $P5112
  fallback4340:
    unless_null $P5109, vivi_14244341
    die "Contextual $*PACKAGE not found"
    box $P5113, "Contextual $*PACKAGE not found"
    set $P5109, $P5113
  vivi_14244341:
    set $P5108, $P5109
  fallback4339:
    $P5114 = $P5102."install_lexical_symbol"($P104, "$?CLASS", $P5108)
    set $P5115, $P5114
  if1413_end4308:
    set $P5116, _lex_param_1["parent"]
    unless_null $P5116, fallback4344
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5116, $P5117
  fallback4344:
    unless $P5116 goto if1425_else4342 
    .const 'Sub' $P5118 = 'cuid_443_1346277629.325' 
    capture_lex $P5118
    $P5119 = $P5118()
    set $P5124, $P5119
    goto if1425_end4343
  if1425_else4342:
    can $I5002, $P103, "set_default_parent"
    box $P5123, $I5002
    set $P5122, $P5123
    unless $I5002 goto if1432_end4364 
    .const 'Sub' $P5120 = 'cuid_444_1346277629.325' 
    capture_lex $P5120
    $P5121 = $P5120()
    set $P5122, $P5121
  if1432_end4364:
    set $P5124, $P5122
  if1425_end4343:
    set $P5125, _lex_param_1["role"]
    unless_null $P5125, fallback4381
    nqp_get_sc_object $P5126, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5125, $P5126
  fallback4381:
    set $P5135, $P5125
    unless $P5125 goto if1438_end4380 
.annotate 'line', 2160
    set $P5130, _lex_param_1["role"]
    unless_null $P5130, fallback4382
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5130, $P5131
  fallback4382:
    set $P5127, $P5130
    iter $P5129, $P5130
    new $P5133, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5133, for_handlers4397
    push_eh $P5133
  for_next4398:
    unless $P5129, for_done4400
    shift $P5134, $P5129
  for_redo4399:
    .const 'Sub' $P5132 = 'cuid_445_1346277629.325' 
    capture_lex $P5132
    $P5127 = $P5132($P5134)
    goto for_next4398
  for_handlers4397:
    .get_results ($P5133)
    pop_upto_eh $P5133
    getattribute $P5133, $P5133, 'type'
    eq $P5133, .CONTROL_LOOP_NEXT, for_next4398
    eq $P5133, .CONTROL_LOOP_REDO, for_redo4399
  for_done4400:
    pop_eh 
    set $P5135, $P5127
  if1438_end4380:
.annotate 'line', 2178
    find_dynamic_lex $P5136, "$*W"
    unless_null $P5136, fallback4401
    get_hll_global $P5139, "GLOBAL"
    get_who $P5138, $P5139
    set $P5137, $P5138["$W"]
    unless_null $P5137, fallback4402
    nqp_get_sc_object $P5140, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5137, $P5140
  fallback4402:
    unless_null $P5137, vivi_14454403
    die "Contextual $*W not found"
    box $P5141, "Contextual $*W not found"
    set $P5137, $P5141
  vivi_14454403:
    set $P5136, $P5137
  fallback4401:
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4404
    get_hll_global $P5145, "GLOBAL"
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4405
    nqp_get_sc_object $P5146, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5143, $P5146
  fallback4405:
    unless_null $P5143, vivi_14464406
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_14464406:
    set $P5142, $P5143
  fallback4404:
    $P5148 = $P5136."pkg_compose"($P5142)
.annotate 'line', 2180
    $P5149 = _lex_param_1."!make"($P104)
    .return ($P5149) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1346277629.325") :anon :lex :outer("cuid_294_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2139
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_14284352
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 2142
.annotate 'line', 2143
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4345
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4346
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback4346:
    unless_null $P5004, vivi_14264347
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14264347:
    set $P5003, $P5004
  fallback4345:
    find_lex $P5013, "$/"
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4348
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5014
  fallback4348:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4349
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback4349:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4350
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5016
  fallback4350:
    clone $P5009, $P5010
    $P5017 = $P5003."find_sym"($P5009)
    set $P101, $P5017
    box $P5018, 1
    set $P102, $P5018
    set $P5020, $P102
    pop_eh 
    goto skip_handler_14274351
  catch_handler_14284352:
    .get_results ($P5019) 
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10001
    goto skip_handler_14274351
  skip_handler_14274351:
    unless $P102 goto if1429_else4353 
.annotate 'line', 2146
.annotate 'line', 2147
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4355
    get_hll_global $P5024, "GLOBAL"
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4356
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5025
  fallback4356:
    unless_null $P5022, vivi_14304357
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14304357:
    set $P5021, $P5022
  fallback4355:
    find_dynamic_lex $P5027, "$*PACKAGE"
    unless_null $P5027, fallback4358
    get_hll_global $P5030, "GLOBAL"
    get_who $P5029, $P5030
    set $P5028, $P5029["$PACKAGE"]
    unless_null $P5028, fallback4359
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5031
  fallback4359:
    unless_null $P5028, vivi_14314360
    die "Contextual $*PACKAGE not found"
    box $P5032, "Contextual $*PACKAGE not found"
    set $P5028, $P5032
  vivi_14314360:
    set $P5027, $P5028
  fallback4358:
    $P5033 = $P5021."pkg_add_parent_or_role"($P5027, "add_parent", $P101)
    set $P5042, $P5033
    goto if1429_end4354
  if1429_else4353:
.annotate 'line', 2149
.annotate 'line', 2150
    find_lex $P5034, "$/"
    $P5035 = $P5034."CURSOR"()
    find_lex $P5038, "$/"
    set $P5037, $P5038["parent"]
    unless_null $P5037, fallback4361
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5039
  fallback4361:
    set $P5036, $P5037[0]
    unless_null $P5036, fallback4362
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5036, $P5040
  fallback4362:
    set $S5003, $P5036
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5041 = $P5035."panic"($S5001)
    set $P5042, $P5041
  if1429_end4354:
    .return ($P5042) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1346277629.325") :anon :lex :outer("cuid_294_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2153
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4367
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4368
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback4368:
    unless_null $P5003, vivi_14344369
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_14344369:
    set $P5002, $P5003
  fallback4367:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1433_else4365 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1433_end4366
  if1433_else4365:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1433_end4366:
    set $P101, $P5012
.annotate 'line', 2155
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4370
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4371
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5017
  fallback4371:
    unless_null $P5014, vivi_14354372
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_14354372:
    set $P5013, $P5014
  fallback4370:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4373
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4374
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5023
  fallback4374:
    unless_null $P5020, vivi_14364375
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_14364375:
    set $P5019, $P5020
  fallback4373:
.annotate 'line', 2156
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4376
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4377
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5029
  fallback4377:
    unless_null $P5026, vivi_14374378
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_14374378:
    set $P5025, $P5026
  fallback4376:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1346277629.325") :anon :lex :outer("cuid_294_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2161
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_14414388
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2164
.annotate 'line', 2165
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4383
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4384
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback4384:
    unless_null $P5004, vivi_14394385
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14394385:
    set $P5003, $P5004
  fallback4383:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4386
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4386:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_14404387
  catch_handler_14414388:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_14404387
  skip_handler_14404387:
    unless $P102 goto if1442_else4389 
.annotate 'line', 2168
.annotate 'line', 2169
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4391
    get_hll_global $P5019, "GLOBAL"
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4392
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5020
  fallback4392:
    unless_null $P5017, vivi_14434393
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14434393:
    set $P5016, $P5017
  fallback4391:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4394
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4395
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5026
  fallback4395:
    unless_null $P5023, vivi_14444396
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_14444396:
    set $P5022, $P5023
  fallback4394:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1442_end4390
  if1442_else4389:
.annotate 'line', 2171
.annotate 'line', 2172
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1442_end4390:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_295_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2183
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4407
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4407:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_296_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2184
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4408
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4408:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_297_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2185
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4409
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4409:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_298_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2187
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2188
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4412
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4412:
    unless $P5001 goto if1447_else4410 
    set $P5003, _lex_param_1["declarator"]
    unless_null $P5003, fallback4413
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4413:
    $P5005 = $P5003."ast"()
    set $P5015, $P5005
    goto if1447_end4411
  if1447_else4410:
    set $P5006, _lex_param_1["multi_declarator"]
    unless_null $P5006, fallback4416
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4416:
    unless $P5006 goto if1448_else4414 
.annotate 'line', 2189
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4417
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5009
  fallback4417:
    $P5010 = $P5008."ast"()
    set $P5014, $P5010
    goto if1448_end4415
  if1448_else4414:
.annotate 'line', 2190
    set $P5011, _lex_param_1["package_declarator"]
    unless_null $P5011, fallback4418
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5012
  fallback4418:
    $P5013 = $P5011."ast"()
    set $P5014, $P5013
  if1448_end4415:
    set $P5015, $P5014
  if1447_end4411:
    $P5016 = _lex_param_1."!make"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_299_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2193
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2194
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4421
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4421:
    unless $P5001 goto if1449_else4419 
.annotate 'line', 2195
    set $P5003, _lex_param_1["routine_declarator"]
    unless_null $P5003, fallback4422
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4422:
    $P5005 = $P5003."ast"()
    set $P5009, $P5005
    goto if1449_end4420
  if1449_else4419:
.annotate 'line', 2196
    set $P5006, _lex_param_1["variable_declarator"]
    unless_null $P5006, fallback4423
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4423:
    $P5008 = $P5006."ast"()
    set $P5009, $P5008
  if1449_end4420:
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_300_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2199
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4426
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4426:
    unless $P5001 goto if1450_else4424 
    set $P5003, _lex_param_1["declarator"]
    unless_null $P5003, fallback4427
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4427:
    $P5005 = $P5003."ast"()
    set $P5009, $P5005
    goto if1450_end4425
  if1450_else4424:
    set $P5006, _lex_param_1["routine_def"]
    unless_null $P5006, fallback4428
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4428:
    $P5008 = $P5006."ast"()
    set $P5009, $P5008
  if1450_end4425:
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_301_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2200
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4431
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4431:
    unless $P5001 goto if1451_else4429 
    set $P5003, _lex_param_1["declarator"]
    unless_null $P5003, fallback4432
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4432:
    $P5005 = $P5003."ast"()
    set $P5009, $P5005
    goto if1451_end4430
  if1451_else4429:
    set $P5006, _lex_param_1["routine_def"]
    unless_null $P5006, fallback4433
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4433:
    $P5008 = $P5006."ast"()
    set $P5009, $P5008
  if1451_end4430:
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_302_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2201
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4434
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4434:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_303_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2204
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5076 = 'cuid_446_1346277629.325' 
    capture_lex $P5076 
    .const 'Sub' $P5076 = 'cuid_447_1346277629.325' 
    capture_lex $P5076 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
.annotate 'line', 2205
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4435
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback4435:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4436
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback4436:
    set $P5008, $P5009["sigil"]
    unless_null $P5008, fallback4437
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5011
  fallback4437:
    set $P102, $P5008
.annotate 'line', 2207
    $P5012 = $P101."name"()
    set $P103, $P5012
.annotate 'line', 2208
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4438
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4439
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5017
  fallback4439:
    unless_null $P5014, vivi_14524440
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_14524440:
    set $P5013, $P5014
  fallback4438:
    $P5019 = $P5013."cur_lexpad"()
    set $P104, $P5019
    set $P5021, $P103
    unless $P103 goto if1454_end4444 
.annotate 'line', 2209
    $P5020 = $P104."symbol"($P103)
    set $P5021, $P5020
  if1454_end4444:
    set $P5024, $P5021
    unless $P5021 goto if1453_end4442 
.annotate 'line', 2210
    $P5022 = _lex_param_1."CURSOR"()
    $P5023 = $P5022."panic"("Redeclaration of symbol ", $P103)
    set $P5024, $P5023
  if1453_end4442:
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4447
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4448
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5029
  fallback4448:
    unless_null $P5026, vivi_14564449
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14564449:
    set $P5025, $P5026
  fallback4447:
    set $S5001, $P5025
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1455_else4445 
    .const 'Sub' $P5031 = 'cuid_446_1346277629.325' 
    capture_lex $P5031
    $P5032 = $P5031()
    set $P5063, $P5032
    goto if1455_end4446
  if1455_else4445:
    find_dynamic_lex $P5033, "$*SCOPE"
    unless_null $P5033, fallback4498
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    set $P5034, $P5035["$SCOPE"]
    unless_null $P5034, fallback4499
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5034, $P5037
  fallback4499:
    unless_null $P5034, vivi_14744500
    die "Contextual $*SCOPE not found"
    box $P5038, "Contextual $*SCOPE not found"
    set $P5034, $P5038
  vivi_14744500:
    set $P5033, $P5034
  fallback4498:
    set $S5002, $P5033
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1473_else4496 
.annotate 'line', 2240
    set $P5039, _lex_param_1["variable"]
    unless_null $P5039, fallback4501
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5039, $P5040
  fallback4501:
    set $S5003, $P5039
    box $P5041, $S5003
    set $P103, $P5041
.annotate 'line', 2245
    new $P5042, 'ResizablePMCArray'
    push $P5042, $P103
    $P5043 = "&lexical_package_lookup"($P5042, _lex_param_1)
    set $P101, $P5043
.annotate 'line', 2246
    $P5044 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5062, $P5044
    goto if1473_end4497
  if1473_else4496:
.annotate 'line', 2248
.annotate 'line', 2249
    set $P5045, $P104[0]
    unless_null $P5045, fallback4502
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5045, $P5046
  fallback4502:
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Op"]
    unless_null $P5047, fallback4503
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5047, $P5051
  fallback4503:
.annotate 'line', 2251
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Var"]
    unless_null $P5052, fallback4504
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5052, $P5056
  fallback4504:
    $P5057 = $P5052."new"($P103 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2252
    $P5058 = "&default_for"($P102)
    $P5059 = $P5047."new"($P5057, $P5058, "bind" :named("op"), _lex_param_1 :named("node"))
    $P5060 = $P5045."push"($P5059)
.annotate 'line', 2254
    $P5061 = $P104."symbol"($P103, "lexical" :named("scope"))
    set $P5062, $P5061
  if1473_end4497:
    set $P5063, $P5062
  if1455_end4446:
    set $P5064, _lex_param_1["trait"]
    unless_null $P5064, fallback4507
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5064, $P5065
  fallback4507:
    set $P5074, $P5064
    unless $P5064 goto if1475_end4506 
.annotate 'line', 2258
    set $P5069, _lex_param_1["trait"]
    unless_null $P5069, fallback4508
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5070
  fallback4508:
    set $P5066, $P5069
    iter $P5068, $P5069
    new $P5072, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5072, for_handlers4509
    push_eh $P5072
  for_next4510:
    unless $P5068, for_done4512
    shift $P5073, $P5068
  for_redo4511:
    .const 'Sub' $P5071 = 'cuid_447_1346277629.325' 
    capture_lex $P5071
    $P5066 = $P5071($P5073)
    goto for_next4510
  for_handlers4509:
    .get_results ($P5072)
    pop_upto_eh $P5072
    getattribute $P5072, $P5072, 'type'
    eq $P5072, .CONTROL_LOOP_NEXT, for_next4510
    eq $P5072, .CONTROL_LOOP_REDO, for_redo4511
  for_done4512:
    pop_eh 
    set $P5074, $P5066
  if1475_end4506:
.annotate 'line', 2262
    $P5075 = _lex_param_1."!make"($P101)
    .return ($P5075) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1346277629.325") :anon :lex :outer("cuid_303_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2212
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4452
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4453
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4453:
    unless_null $P5004, vivi_14584454
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_14584454:
    set $P5003, $P5004
  fallback4452:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4455
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4456
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5015
  fallback4456:
    unless_null $P5012, vivi_14594457
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_14594457:
    set $P5011, $P5012
  fallback4455:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    box $P5027, $I5001
    set $P5026, $P5027
    if $I5001 goto unless1457_end4451 
.annotate 'line', 2214
.annotate 'line', 2215
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4458
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4459
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5023
  fallback4459:
    unless_null $P5020, vivi_14604460
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_14604460:
    set $P5019, $P5020
  fallback4458:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
    set $P5026, $P5025
  unless1457_end4451:
    find_lex $P5028, "$name"
    set $P101["name"], $P5028
    find_lex $P5030, "$/"
    set $P5029, $P5030["typename"]
    unless_null $P5029, fallback4463
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5031
  fallback4463:
    set $P5046, $P5029
    unless $P5029 goto if1461_end4462 
.annotate 'line', 2222
.annotate 'line', 2223
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback4464
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback4465
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5036
  fallback4465:
    unless_null $P5033, vivi_14624466
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_14624466:
    set $P5032, $P5033
  fallback4464:
    new $P5038, 'ResizablePMCArray'
    find_lex $P5041, "$/"
    set $P5040, $P5041["typename"]
    unless_null $P5040, fallback4467
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5040, $P5042
  fallback4467:
    set $P5039, $P5040[0]
    unless_null $P5039, fallback4468
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5039, $P5043
  fallback4468:
    set $S5005, $P5039
    box $P5044, $S5005
    push $P5038, $P5044
    $P5045 = $P5032."find_sym"($P5038)
    set $P102["type"], $P5045
    set $P5046, $P5045
  if1461_end4462:
    find_lex $P5047, "$sigil"
    set $S5006, $P5047
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1464_end4472 
    find_lex $P5048, "$sigil"
    set $S5007, $P5048
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1464_end4472:
    box $P5067, $I5004
    set $P5066, $P5067
    unless $I5004 goto if1463_end4470 
.annotate 'line', 2225
    find_lex $P5050, "$/"
    set $P5049, $P5050["typename"]
    unless_null $P5049, fallback4475
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5051
  fallback4475:
    unless $P5049 goto if1465_else4473 
.annotate 'line', 2226
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4476
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5052, $P5053
  fallback4476:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1465_end4474
  if1465_else4473:
.annotate 'line', 2229
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_14684481
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2230
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4477
    get_hll_global $P5057, "GLOBAL"
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4478
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5055, $P5058
  fallback4478:
    unless_null $P5055, vivi_14664479
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_14664479:
    set $P5054, $P5055
  fallback4477:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_14674480
  catch_handler_14684481:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_14674480
  skip_handler_14674480:
    set $P5065, $P5064
  if1465_end4474:
    set $P5066, $P5065
  if1463_end4470:
.annotate 'line', 2235
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback4482
    get_hll_global $P5071, "GLOBAL"
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback4483
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5072
  fallback4483:
    unless_null $P5069, vivi_14694484
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_14694484:
    set $P5068, $P5069
  fallback4482:
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4485
    get_hll_global $P5077, "GLOBAL"
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4486
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5075, $P5078
  fallback4486:
    unless_null $P5075, vivi_14704487
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_14704487:
    set $P5074, $P5075
  fallback4485:
    find_dynamic_lex $P5081, "%*HOW"
    unless_null $P5081, fallback4488
    get_hll_global $P5084, "GLOBAL"
    get_who $P5083, $P5084
    set $P5082, $P5083["%HOW"]
    unless_null $P5082, fallback4489
    get_hll_global $P5086, "GLOBAL"
    get_who $P5085, $P5086
    new $P5087, 'Hash'
    set $P5085["%HOW"], $P5087
    set $P5082, $P5087
  fallback4489:
    unless_null $P5082, vivi_14714490
    die "Contextual %*HOW not found"
    box $P5088, "Contextual %*HOW not found"
    set $P5082, $P5088
  vivi_14714490:
    set $P5081, $P5082
  fallback4488:
    find_dynamic_lex $P5089, "$*PKGDECL"
    unless_null $P5089, fallback4491
    get_hll_global $P5092, "GLOBAL"
    get_who $P5091, $P5092
    set $P5090, $P5091["$PKGDECL"]
    unless_null $P5090, fallback4492
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5090, $P5093
  fallback4492:
    unless_null $P5090, vivi_14724493
    die "Contextual $*PKGDECL not found"
    box $P5094, "Contextual $*PKGDECL not found"
    set $P5090, $P5094
  vivi_14724493:
    set $P5089, $P5090
  fallback4491:
    set $S5009, $P5089
    concat $S5008, $S5009, "-attr"
    set $P5080, $P5081[$S5008]
    unless_null $P5080, fallback4494
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5080, $P5095
  fallback4494:
    $P5096 = $P5068."pkg_add_attribute"($P5074, $P5080, $P101, $P102)
.annotate 'line', 2238
    get_hll_global $P5100, "GLOBAL"
    nqp_get_package_through_who $P5099, $P5100, "QAST"
    get_who $P5098, $P5099
    set $P5097, $P5098["Stmts"]
    unless_null $P5097, fallback4495
    nqp_get_sc_object $P5101, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5097, $P5101
  fallback4495:
    $P5102 = $P5097."new"()
    store_lex "$past", $P5102
    .return ($P5102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1346277629.325") :anon :lex :outer("cuid_303_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2259
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_304_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2265
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4513
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4513:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_305_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2266
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4514
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4514:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_306_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2268
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_451_1346277629.325' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_454_1346277629.325' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4517
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback4517:
    unless $P5004 goto if1476_else4515 
.annotate 'line', 2272
.annotate 'line', 2273
    $P5006 = "&only_star_block"()
    set $P101, $P5006
    set $P5021, $P101
    goto if1476_end4516
  if1476_else4515:
.annotate 'line', 2275
.annotate 'line', 2276
    set $P5007, _lex_param_1["blockoid"]
    unless_null $P5007, fallback4518
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4518:
    $P5009 = $P5007."ast"()
    set $P101, $P5009
.annotate 'line', 2277
    $P5010 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5011, "$*RETURN_USED"
    unless_null $P5011, fallback4521
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["$RETURN_USED"]
    unless_null $P5012, fallback4522
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5015
  fallback4522:
    unless_null $P5012, vivi_14784523
    die "Contextual $*RETURN_USED not found"
    box $P5016, "Contextual $*RETURN_USED not found"
    set $P5012, $P5016
  vivi_14784523:
    set $P5011, $P5012
  fallback4521:
    set $P5020, $P5011
    unless $P5011 goto if1477_end4520 
.annotate 'line', 2278
.annotate 'line', 2279
    set $P5017, $P101[1]
    unless_null $P5017, fallback4524
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5018
  fallback4524:
    $P5019 = "&wrap_return_handler"($P5017)
    set $P101[1], $P5019
    set $P5020, $P5019
  if1477_end4520:
    set $P5021, $P5020
  if1476_end4516:
    set $P102, $P101
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4527
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5023
  fallback4527:
    unless $P5022 goto if1479_else4525 
    .const 'Sub' $P5024 = 'cuid_451_1346277629.325' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5041, $P5025
    goto if1479_end4526
  if1479_else4525:
.annotate 'line', 2376
.annotate 'line', 2377
    find_dynamic_lex $P5026, "$*W"
    unless_null $P5026, fallback4638
    get_hll_global $P5029, "GLOBAL"
    get_who $P5028, $P5029
    set $P5027, $P5028["$W"]
    unless_null $P5027, fallback4639
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5027, $P5030
  fallback4639:
    unless_null $P5027, vivi_15144640
    die "Contextual $*W not found"
    box $P5031, "Contextual $*W not found"
    set $P5027, $P5031
  vivi_15144640:
    set $P5026, $P5027
  fallback4638:
    $P5032 = $P5026."is_precompilation_mode"()
    set $P5040, $P5032
    unless $P5032 goto if1513_end4637 
.annotate 'line', 2378
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4641
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4642
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5034, $P5037
  fallback4642:
    unless_null $P5034, vivi_15154643
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_15154643:
    set $P5033, $P5034
  fallback4641:
    $P5039 = $P5033."create_code"($P101, "<anon>", 0)
    set $P5040, $P5039
  if1513_end4637:
    set $P5041, $P5040
  if1479_end4526:
.annotate 'line', 2382
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback4644
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5042, $P5046
  fallback4644:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2385
    $P5048 = _lex_param_1."!make"($P103)
    set $P5049, _lex_param_1["trait"]
    unless_null $P5049, fallback4647
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5050
  fallback4647:
    set $P5059, $P5049
    unless $P5049 goto if1516_end4646 
.annotate 'line', 2388
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback4648
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5054, $P5055
  fallback4648:
    set $P5051, $P5054
    iter $P5053, $P5054
    new $P5057, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5057, for_handlers4649
    push_eh $P5057
  for_next4650:
    unless $P5053, for_done4652
    shift $P5058, $P5053
  for_redo4651:
    .const 'Sub' $P5056 = 'cuid_454_1346277629.325' 
    capture_lex $P5056
    $P5051 = $P5056($P5058)
    goto for_next4650
  for_handlers4649:
    .get_results ($P5057)
    pop_upto_eh $P5057
    getattribute $P5057, $P5057, 'type'
    eq $P5057, .CONTROL_LOOP_NEXT, for_next4650
    eq $P5057, .CONTROL_LOOP_REDO, for_redo4651
  for_done4652:
    pop_eh 
    set $P5059, $P5051
  if1516_end4646:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1346277629.325") :anon :lex :outer("cuid_306_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2284
    .const 'Sub' $P5079 = 'cuid_450_1346277629.325' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_452_1346277629.325' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_453_1346277629.325' 
    capture_lex $P5079 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    find_lex $P5004, "$/"
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4528
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5005
  fallback4528:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4529
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback4529:
    set $S5002, $P5002
.annotate 'line', 2285
    find_lex $P5009, "$/"
    set $P5008, $P5009["deflongname"]
    unless_null $P5008, fallback4530
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5010
  fallback4530:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback4531
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback4531:
    $P5012 = $P5007."ast"()
    set $S5003, $P5012
    concat $S5001, $S5002, $S5003
    box $P5013, $S5001
    set $P101, $P5013
.annotate 'line', 2286
    find_lex $P5014, "$past"
    $P5015 = $P5014."name"($P101)
    find_dynamic_lex $P5016, "$*SCOPE"
    unless_null $P5016, fallback4538
    get_hll_global $P5019, "GLOBAL"
    get_who $P5018, $P5019
    set $P5017, $P5018["$SCOPE"]
    unless_null $P5017, fallback4539
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5020
  fallback4539:
    unless_null $P5017, vivi_14834540
    die "Contextual $*SCOPE not found"
    box $P5021, "Contextual $*SCOPE not found"
    set $P5017, $P5021
  vivi_14834540:
    set $P5016, $P5017
  fallback4538:
    set $S5004, $P5016
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1482_end4537 
    find_dynamic_lex $P5022, "$*SCOPE"
    unless_null $P5022, fallback4541
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$SCOPE"]
    unless_null $P5023, fallback4542
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5026
  fallback4542:
    unless_null $P5023, vivi_14844543
    die "Contextual $*SCOPE not found"
    box $P5027, "Contextual $*SCOPE not found"
    set $P5023, $P5027
  vivi_14844543:
    set $P5022, $P5023
  fallback4541:
    set $S5005, $P5022
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1482_end4537:
    set $I5005, $I5003
    if $I5003 goto unless1481_end4535 
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback4544
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback4545
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5032
  fallback4545:
    unless_null $P5029, vivi_14854546
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_14854546:
    set $P5028, $P5029
  fallback4544:
    set $S5006, $P5028
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1481_end4535:
    unless $I5005 goto if1480_else4532 
.annotate 'line', 2287
    find_dynamic_lex $P5034, "$*MULTINESS"
    unless_null $P5034, fallback4549
    get_hll_global $P5037, "GLOBAL"
    get_who $P5036, $P5037
    set $P5035, $P5036["$MULTINESS"]
    unless_null $P5035, fallback4550
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5035, $P5038
  fallback4550:
    unless_null $P5035, vivi_14874551
    die "Contextual $*MULTINESS not found"
    box $P5039, "Contextual $*MULTINESS not found"
    set $P5035, $P5039
  vivi_14874551:
    set $P5034, $P5035
  fallback4549:
    set $S5007, $P5034
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1486_else4547 
    .const 'Sub' $P5040 = 'cuid_450_1346277629.325' 
    capture_lex $P5040
    $P5041 = $P5040()
    set $P5053, $P5041
    goto if1486_end4548
  if1486_else4547:
    find_dynamic_lex $P5042, "$*MULTINESS"
    unless_null $P5042, fallback4588
    get_hll_global $P5045, "GLOBAL"
    get_who $P5044, $P5045
    set $P5043, $P5044["$MULTINESS"]
    unless_null $P5043, fallback4589
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5043, $P5046
  fallback4589:
    unless_null $P5043, vivi_14994590
    die "Contextual $*MULTINESS not found"
    box $P5047, "Contextual $*MULTINESS not found"
    set $P5043, $P5047
  vivi_14994590:
    set $P5042, $P5043
  fallback4588:
    set $S5008, $P5042
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1498_else4586 
    .const 'Sub' $P5048 = 'cuid_452_1346277629.325' 
    capture_lex $P5048
    $P5049 = $P5048()
    set $P5052, $P5049
    goto if1498_end4587
  if1498_else4586:
    .const 'Sub' $P5050 = 'cuid_453_1346277629.325' 
    capture_lex $P5050
    $P5051 = $P5050()
    set $P5052, $P5051
  if1498_end4587:
    set $P5053, $P5052
  if1486_end4548:
.annotate 'line', 2365
    get_hll_global $P5057, "GLOBAL"
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback4625
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5054, $P5058
  fallback4625:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    set $P5069, $P5059
    goto if1480_end4533
  if1480_else4532:
.annotate 'line', 2367
.annotate 'line', 2368
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback4626
    get_hll_global $P5065, "GLOBAL"
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback4627
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5063, $P5066
  fallback4627:
    unless_null $P5063, vivi_15094628
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_15094628:
    set $P5062, $P5063
  fallback4626:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
    set $P5069, $P5068
  if1480_end4533:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1511_end4632 
    find_dynamic_lex $P5070, "$*MULTINESS"
    unless_null $P5070, fallback4633
    get_hll_global $P5073, "GLOBAL"
    get_who $P5072, $P5073
    set $P5071, $P5072["$MULTINESS"]
    unless_null $P5071, fallback4634
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5071, $P5074
  fallback4634:
    unless_null $P5071, vivi_15124635
    die "Contextual $*MULTINESS not found"
    box $P5075, "Contextual $*MULTINESS not found"
    set $P5071, $P5075
  vivi_15124635:
    set $P5070, $P5071
  fallback4633:
    set $S5014, $P5070
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1511_end4632:
    box $P5078, $I5010
    set $P5077, $P5078
    unless $I5010 goto if1510_end4630 
.annotate 'line', 2372
    find_lex $P5076, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5076
    set $P5077, $P5076
  if1510_end4630:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1346277629.325") :anon :lex :outer("cuid_451_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2288
    .const 'Sub' $P5053 = 'cuid_449_1346277629.325' 
    capture_lex $P5053 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4554
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4555
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5009
  fallback4555:
    unless_null $P5006, vivi_14894556
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_14894556:
    set $P5005, $P5006
  fallback4554:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    box $P5013, $I5001
    set $P5012, $P5013
    unless $I5001 goto if1488_end4553 
.annotate 'line', 2290
    box $P5011, "a multi can not be our-scoped"
    die $P5011
    set $P5012, $P5011
  if1488_end4553:
.annotate 'line', 2292
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback4557
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback4558
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5018
  fallback4558:
    unless_null $P5015, vivi_14904559
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_14904559:
    set $P5014, $P5015
  fallback4557:
    $P5020 = $P5014."cur_lexpad"()
    find_lex $P5021, "$name"
    set $S5003, $P5021
    concat $S5002, "&", $S5003
    $P5022 = $P5020."symbol"($S5002)
    set $P102, $P5022
    set $P5023, $P102["proto"]
    unless_null $P5023, fallback4562
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5024
  fallback4562:
    unless $P5023 goto if1491_else4560 
.annotate 'line', 2293
    set $P5025, $P102["value"]
    unless_null $P5025, fallback4563
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5026
  fallback4563:
    set $P101, $P5025
    set $P5029, $P101
    goto if1491_end4561
  if1491_else4560:
    .const 'Sub' $P5027 = 'cuid_449_1346277629.325' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5029, $P5028
  if1491_end4561:
.annotate 'line', 2322
    find_dynamic_lex $P5030, "$*W"
    unless_null $P5030, fallback4579
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$W"]
    unless_null $P5031, fallback4580
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5031, $P5034
  fallback4580:
    unless_null $P5031, vivi_14964581
    die "Contextual $*W not found"
    box $P5035, "Contextual $*W not found"
    set $P5031, $P5035
  vivi_14964581:
    set $P5030, $P5031
  fallback4579:
    find_lex $P5036, "$past"
    find_lex $P5037, "$name"
    $P5038 = $P5030."create_code"($P5036, $P5037, 0)
    set $P103, $P5038
.annotate 'line', 2323
    find_lex $P5039, "$past"
    $P5040 = "&attach_multi_signature"($P103, $P5039)
.annotate 'line', 2326
    $P5041 = $P101."add_dispatchee"($P103)
.annotate 'line', 2329
    find_dynamic_lex $P5042, "$*W"
    unless_null $P5042, fallback4582
    get_hll_global $P5045, "GLOBAL"
    get_who $P5044, $P5045
    set $P5043, $P5044["$W"]
    unless_null $P5043, fallback4583
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5043, $P5046
  fallback4583:
    unless_null $P5043, vivi_14974584
    die "Contextual $*W not found"
    box $P5047, "Contextual $*W not found"
    set $P5043, $P5047
  vivi_14974584:
    set $P5042, $P5043
  fallback4582:
    $P5048 = $P5042."cur_lexpad"()
    set $P104, $P5048
.annotate 'line', 2330
    set $P5049, $P104[0]
    unless_null $P5049, fallback4585
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5050
  fallback4585:
    find_lex $P5051, "$past"
    $P5052 = $P5049."push"($P5051)
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1346277629.325") :anon :lex :outer("cuid_450_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2298
    .const 'Sub' $P5020 = 'cuid_448_1346277629.325' 
    capture_lex $P5020 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2301
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4564
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4565
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5009
  fallback4565:
    unless_null $P5006, vivi_14924566
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_14924566:
    set $P5005, $P5006
  fallback4564:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
    new $P5013, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5013, for_handlers4573
    push_eh $P5013
  for_next4574:
    unless $P5004, for_done4576
    shift $P5014, $P5004
  for_redo4575:
    .const 'Sub' $P5012 = 'cuid_448_1346277629.325' 
    capture_lex $P5012
    $P5002 = $P5012($P5014)
    goto for_next4574
  for_handlers4573:
    .get_results ($P5013)
    pop_upto_eh $P5013
    getattribute $P5013, $P5013, 'type'
    eq $P5013, .CONTROL_LOOP_NEXT, for_next4574
    eq $P5013, .CONTROL_LOOP_REDO, for_redo4575
  for_done4576:
    pop_eh 
    set $P5018, $P101
    if $P101 goto unless1495_end4578 
.annotate 'line', 2313
.annotate 'line', 2314
    find_lex $P5015, "$/"
    $P5016 = $P5015."CURSOR"()
    $P5017 = $P5016."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
    set $P5018, $P5017
  unless1495_end4578:
    box $P5019, "Dispatcher derivation NYI"
    die $P5019
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1346277629.325") :anon :lex :outer("cuid_449_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2301
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2302
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4569
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback4569:
    unless $P5004 goto if1493_else4567 
.annotate 'line', 2303
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4570
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4570:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1493_end4568
  if1493_else4567:
    set $P5012, $P101
    unless $P101 goto if1494_end4572 
.annotate 'line', 2307
.annotate 'line', 2308
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1494_end4572:
    set $P5013, $P5012
  if1493_end4568:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1346277629.325") :anon :lex :outer("cuid_451_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2332
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4593
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4594
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback4594:
    unless_null $P5004, vivi_15014595
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_15014595:
    set $P5003, $P5004
  fallback4593:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1500_end4592 
.annotate 'line', 2336
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
    set $P5010, $P5009
  if1500_end4592:
.annotate 'line', 2337
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4596
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4597
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5016
  fallback4597:
    unless_null $P5013, vivi_15024598
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_15024598:
    set $P5012, $P5013
  fallback4596:
    find_lex $P5018, "$past"
    find_lex $P5019, "$name"
    $P5020 = $P5012."create_code"($P5018, $P5019, 1)
    set $P101, $P5020
.annotate 'line', 2338
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4599
    get_hll_global $P5024, "GLOBAL"
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4600
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5025
  fallback4600:
    unless_null $P5022, vivi_15034601
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_15034601:
    set $P5021, $P5022
  fallback4599:
    $P5027 = $P5021."cur_lexpad"()
    set $P102, $P5027
.annotate 'line', 2339
    set $P5028, $P102[0]
    unless_null $P5028, fallback4602
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5029
  fallback4602:
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback4603
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5034
  fallback4603:
.annotate 'line', 2341
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Var"]
    unless_null $P5035, fallback4604
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5035, $P5039
  fallback4604:
    find_lex $P5040, "$name"
    set $S5003, $P5040
    concat $S5002, "&", $S5003
    $P5041 = $P5035."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5042, "$past"
    $P5043 = $P5030."new"($P5041, $P5042, "bind" :named("op"))
    $P5044 = $P5028."push"($P5043)
.annotate 'line', 2344
    find_lex $P5045, "$name"
    set $S5005, $P5045
    concat $S5004, "&", $S5005
    $P5046 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1346277629.325") :anon :lex :outer("cuid_451_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2346
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2347
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4605
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4606
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback4606:
    unless_null $P5003, vivi_15044607
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15044607:
    set $P5002, $P5003
  fallback4605:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2348
    set $P5009, $P101[0]
    unless_null $P5009, fallback4608
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback4608:
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4609
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback4609:
.annotate 'line', 2350
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4610
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5020
  fallback4610:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5025 = $P5009."push"($P5024)
.annotate 'line', 2353
    find_lex $P5026, "$name"
    set $S5004, $P5026
    concat $S5003, "&", $S5004
    $P5027 = $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback4613
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback4614
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5032
  fallback4614:
    unless_null $P5029, vivi_15064615
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_15064615:
    set $P5028, $P5029
  fallback4613:
    set $S5005, $P5028
    iseq $I5001, $S5005, "our"
    box $P5070, $I5001
    set $P5069, $P5070
    unless $I5001 goto if1505_end4612 
.annotate 'line', 2354
.annotate 'line', 2357
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4616
    get_hll_global $P5037, "GLOBAL"
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4617
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5035, $P5038
  fallback4617:
    unless_null $P5035, vivi_15074618
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_15074618:
    set $P5034, $P5035
  fallback4616:
    find_dynamic_lex $P5040, "$*PACKAGE"
    unless_null $P5040, fallback4619
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["$PACKAGE"]
    unless_null $P5041, fallback4620
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5044
  fallback4620:
    unless_null $P5041, vivi_15084621
    die "Contextual $*PACKAGE not found"
    box $P5045, "Contextual $*PACKAGE not found"
    set $P5041, $P5045
  vivi_15084621:
    set $P5040, $P5041
  fallback4619:
    find_lex $P5046, "$name"
    find_lex $P5047, "$past"
    $P5048 = $P5034."install_package_routine"($P5040, $P5046, $P5047)
.annotate 'line', 2358
    set $P5049, $P101[0]
    unless_null $P5049, fallback4622
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5050
  fallback4622:
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Op"]
    unless_null $P5051, fallback4623
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5051, $P5055
  fallback4623:
.annotate 'line', 2360
    new $P5056, 'ResizablePMCArray'
    find_lex $P5057, "$name"
    push $P5056, $P5057
    find_lex $P5058, "$/"
    $P5059 = "&lexical_package_lookup"($P5056, $P5058)
.annotate 'line', 2361
    get_hll_global $P5063, "GLOBAL"
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["Var"]
    unless_null $P5060, fallback4624
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5060, $P5064
  fallback4624:
    find_lex $P5065, "$name"
    set $S5007, $P5065
    concat $S5006, "&", $S5007
    $P5066 = $P5060."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5067 = $P5051."new"($P5059, $P5066, "bind" :named("op"))
    $P5068 = $P5049."push"($P5067)
    set $P5069, $P5068
  if1505_end4612:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1346277629.325") :anon :lex :outer("cuid_306_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2389
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_307_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2394
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5065 = 'cuid_455_1346277629.325' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_456_1346277629.325' 
    capture_lex $P5065 
    .lex "$past", $P101 
    .lex "$lexpast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $P5003, _lex_param_1["onlystar"]
    unless_null $P5003, fallback4655
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4655:
    unless $P5003 goto if1517_else4653 
.annotate 'line', 2398
.annotate 'line', 2399
    $P5005 = "&only_star_block"()
    set $P101, $P5005
    set $P5020, $P101
    goto if1517_end4654
  if1517_else4653:
.annotate 'line', 2401
.annotate 'line', 2402
    set $P5006, _lex_param_1["blockoid"]
    unless_null $P5006, fallback4656
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4656:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 2403
    $P5009 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5010, "$*RETURN_USED"
    unless_null $P5010, fallback4659
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["$RETURN_USED"]
    unless_null $P5011, fallback4660
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5014
  fallback4660:
    unless_null $P5011, vivi_15194661
    die "Contextual $*RETURN_USED not found"
    box $P5015, "Contextual $*RETURN_USED not found"
    set $P5011, $P5015
  vivi_15194661:
    set $P5010, $P5011
  fallback4659:
    set $P5019, $P5010
    unless $P5010 goto if1518_end4658 
.annotate 'line', 2404
.annotate 'line', 2405
    set $P5016, $P101[1]
    unless_null $P5016, fallback4662
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5017
  fallback4662:
    $P5018 = "&wrap_return_handler"($P5016)
    set $P101[1], $P5018
    set $P5019, $P5018
  if1518_end4658:
    set $P5020, $P5019
  if1517_end4654:
    set $P5021, $P101["signature_has_invocant"]
    unless_null $P5021, fallback4665
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5022
  fallback4665:
    set $P5038, $P5021
    if $P5021 goto unless1520_end4664 
.annotate 'line', 2410
.annotate 'line', 2411
    set $P5023, $P101[0]
    unless_null $P5023, fallback4666
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5024
  fallback4666:
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Var"]
    unless_null $P5025, fallback4667
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5029
  fallback4667:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4668
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4669
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5031, $P5034
  fallback4669:
    unless_null $P5031, vivi_15214670
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_15214670:
    set $P5030, $P5031
  fallback4668:
    $P5036 = $P5025."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5030 :named("returns"))
    $P5037 = $P5023."unshift"($P5036)
    set $P5038, $P5037
  unless1520_end4664:
.annotate 'line', 2416
    $P5039 = $P101."symbol"("self", "lexical" :named("scope"))
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback4673
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5040, $P5041
  fallback4673:
    set $P5044, $P5040
    unless $P5040 goto if1522_end4672 
    .const 'Sub' $P5042 = 'cuid_455_1346277629.325' 
    capture_lex $P5042
    $P5043 = $P5042()
    set $P5044, $P5043
  if1522_end4672:
.annotate 'line', 2439
    get_hll_global $P5048, "GLOBAL"
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Op"]
    unless_null $P5045, fallback4710
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5045, $P5049
  fallback4710:
    $P5050 = $P5045."new"($P101, "takeclosure" :named("op"))
    set $P102, $P5050
    set $P102["sink"], $P101
    set $P102["block_past"], $P101
    set $P5051, $P101["code_obj"]
    unless_null $P5051, fallback4711
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5051, $P5052
  fallback4711:
    set $P102["code_obj"], $P5051
.annotate 'line', 2443
    $P5053 = _lex_param_1."!make"($P102)
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback4714
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5054, $P5055
  fallback4714:
    set $P5064, $P5054
    unless $P5054 goto if1535_end4713 
.annotate 'line', 2444
    set $P5059, _lex_param_1["trait"]
    unless_null $P5059, fallback4715
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5059, $P5060
  fallback4715:
    set $P5056, $P5059
    iter $P5058, $P5059
    new $P5062, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5062, for_handlers4716
    push_eh $P5062
  for_next4717:
    unless $P5058, for_done4719
    shift $P5063, $P5058
  for_redo4718:
    .const 'Sub' $P5061 = 'cuid_456_1346277629.325' 
    capture_lex $P5061
    $P5056 = $P5061($P5063)
    goto for_next4717
  for_handlers4716:
    .get_results ($P5062)
    pop_upto_eh $P5062
    getattribute $P5062, $P5062, 'type'
    eq $P5062, .CONTROL_LOOP_NEXT, for_next4717
    eq $P5062, .CONTROL_LOOP_REDO, for_redo4718
  for_done4719:
    pop_eh 
    set $P5064, $P5056
  if1535_end4713:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1346277629.325") :anon :lex :outer("cuid_307_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2419
    .lex "$name", $P101 
    .lex "$meta_meth", $P102 
    .lex "$is_dispatcher", $P103 
    .lex "$code", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
    find_lex $P5006, "$/"
    set $P5005, $P5006["private"]
    unless_null $P5005, fallback4674
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5007
  fallback4674:
    set $S5002, $P5005
.annotate 'line', 2421
    find_lex $P5010, "$/"
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4675
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5011
  fallback4675:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4676
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5012
  fallback4676:
    $P5013 = $P5008."ast"()
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5014, $S5001
    set $P101, $P5014
.annotate 'line', 2422
    find_lex $P5015, "$past"
    $P5016 = $P5015."name"($P101)
    find_dynamic_lex $P5017, "$*MULTINESS"
    unless_null $P5017, fallback4679
    get_hll_global $P5020, "GLOBAL"
    get_who $P5019, $P5020
    set $P5018, $P5019["$MULTINESS"]
    unless_null $P5018, fallback4680
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5021
  fallback4680:
    unless_null $P5018, vivi_15244681
    die "Contextual $*MULTINESS not found"
    box $P5022, "Contextual $*MULTINESS not found"
    set $P5018, $P5022
  vivi_15244681:
    set $P5017, $P5018
  fallback4679:
    set $S5004, $P5017
    iseq $I5001, $S5004, "multi"
    unless $I5001 goto if1523_else4677 
    set $S5005, "add_multi_method"
    goto if1523_end4678
  if1523_else4677:
    set $S5005, "add_method"
  if1523_end4678:
    box $P5023, $S5005
    set $P102, $P5023
    find_dynamic_lex $P5024, "$*MULTINESS"
    unless_null $P5024, fallback4682
    get_hll_global $P5027, "GLOBAL"
    get_who $P5026, $P5027
    set $P5025, $P5026["$MULTINESS"]
    unless_null $P5025, fallback4683
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5028
  fallback4683:
    unless_null $P5025, vivi_15254684
    die "Contextual $*MULTINESS not found"
    box $P5029, "Contextual $*MULTINESS not found"
    set $P5025, $P5029
  vivi_15254684:
    set $P5024, $P5025
  fallback4682:
    set $S5006, $P5024
    iseq $I5002, $S5006, "proto"
    box $P5030, $I5002
    set $P103, $P5030
.annotate 'line', 2427
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4685
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4686
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5032, $P5035
  fallback4686:
    unless_null $P5032, vivi_15264687
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15264687:
    set $P5031, $P5032
  fallback4685:
    find_lex $P5037, "$past"
    $P5038 = $P5031."create_code"($P5037, $P101, $P103)
    set $P104, $P5038
    find_dynamic_lex $P5039, "$*MULTINESS"
    unless_null $P5039, fallback4690
    get_hll_global $P5042, "GLOBAL"
    get_who $P5041, $P5042
    set $P5040, $P5041["$MULTINESS"]
    unless_null $P5040, fallback4691
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5040, $P5043
  fallback4691:
    unless_null $P5040, vivi_15284692
    die "Contextual $*MULTINESS not found"
    box $P5044, "Contextual $*MULTINESS not found"
    set $P5040, $P5044
  vivi_15284692:
    set $P5039, $P5040
  fallback4690:
    set $S5007, $P5039
    iseq $I5003, $S5007, "multi"
    box $P5048, $I5003
    set $P5047, $P5048
    unless $I5003 goto if1527_end4689 
.annotate 'line', 2428
    find_lex $P5045, "$past"
    $P5046 = "&attach_multi_signature"($P104, $P5045)
    set $P5047, $P5046
  if1527_end4689:
.annotate 'line', 2429
    find_dynamic_lex $P5049, "$*W"
    unless_null $P5049, fallback4693
    get_hll_global $P5052, "GLOBAL"
    get_who $P5051, $P5052
    set $P5050, $P5051["$W"]
    unless_null $P5050, fallback4694
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5050, $P5053
  fallback4694:
    unless_null $P5050, vivi_15294695
    die "Contextual $*W not found"
    box $P5054, "Contextual $*W not found"
    set $P5050, $P5054
  vivi_15294695:
    set $P5049, $P5050
  fallback4693:
    find_dynamic_lex $P5055, "$*PACKAGE"
    unless_null $P5055, fallback4696
    get_hll_global $P5058, "GLOBAL"
    get_who $P5057, $P5058
    set $P5056, $P5057["$PACKAGE"]
    unless_null $P5056, fallback4697
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5056, $P5059
  fallback4697:
    unless_null $P5056, vivi_15304698
    die "Contextual $*PACKAGE not found"
    box $P5060, "Contextual $*PACKAGE not found"
    set $P5056, $P5060
  vivi_15304698:
    set $P5055, $P5056
  fallback4696:
    $P5061 = $P5049."pkg_add_method"($P5055, $P102, $P101, $P104)
    find_lex $P5062, "$past"
    set $P5062["code_obj"], $P104
    find_dynamic_lex $P5063, "$*SCOPE"
    unless_null $P5063, fallback4701
    get_hll_global $P5066, "GLOBAL"
    get_who $P5065, $P5066
    set $P5064, $P5065["$SCOPE"]
    unless_null $P5064, fallback4702
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5064, $P5067
  fallback4702:
    unless_null $P5064, vivi_15324703
    die "Contextual $*SCOPE not found"
    box $P5068, "Contextual $*SCOPE not found"
    set $P5064, $P5068
  vivi_15324703:
    set $P5063, $P5064
  fallback4701:
    set $S5008, $P5063
    iseq $I5004, $S5008, "our"
    box $P5084, $I5004
    set $P5083, $P5084
    unless $I5004 goto if1531_end4700 
.annotate 'line', 2433
.annotate 'line', 2434
    find_dynamic_lex $P5069, "$*W"
    unless_null $P5069, fallback4704
    get_hll_global $P5072, "GLOBAL"
    get_who $P5071, $P5072
    set $P5070, $P5071["$W"]
    unless_null $P5070, fallback4705
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5070, $P5073
  fallback4705:
    unless_null $P5070, vivi_15334706
    die "Contextual $*W not found"
    box $P5074, "Contextual $*W not found"
    set $P5070, $P5074
  vivi_15334706:
    set $P5069, $P5070
  fallback4704:
    find_dynamic_lex $P5075, "$*PACKAGE"
    unless_null $P5075, fallback4707
    get_hll_global $P5078, "GLOBAL"
    get_who $P5077, $P5078
    set $P5076, $P5077["$PACKAGE"]
    unless_null $P5076, fallback4708
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5076, $P5079
  fallback4708:
    unless_null $P5076, vivi_15344709
    die "Contextual $*PACKAGE not found"
    box $P5080, "Contextual $*PACKAGE not found"
    set $P5076, $P5080
  vivi_15344709:
    set $P5075, $P5076
  fallback4707:
    find_lex $P5081, "$past"
    $P5082 = $P5069."install_package_routine"($P5075, $P101, $P5081)
    set $P5083, $P5082
  if1531_end4700:
    .return ($P5083) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1346277629.325") :anon :lex :outer("cuid_307_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2445
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_308_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2478
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_457_1346277629.325' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_458_1346277629.325' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 2479
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4720
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4721
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback4721:
    unless_null $P5004, vivi_15364722
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15364722:
    set $P5003, $P5004
  fallback4720:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback4723
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4723:
    set $P102, $P5010
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback4726
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5013
  fallback4726:
    set $P5016, $P5012
    unless $P5012 goto if1537_end4725 
    .const 'Sub' $P5014 = 'cuid_457_1346277629.325' 
    capture_lex $P5014
    $P5015 = $P5014()
    set $P5016, $P5015
  if1537_end4725:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback4732
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5021
  fallback4732:
    set $P5017, $P5020
    iter $P5019, $P5020
    new $P5023, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5023, for_handlers4733
    push_eh $P5023
  for_next4734:
    unless $P5019, for_done4736
    shift $P5024, $P5019
  for_redo4735:
    .const 'Sub' $P5022 = 'cuid_458_1346277629.325' 
    capture_lex $P5022
    $P5017 = $P5022($P5024)
    goto for_next4734
  for_handlers4733:
    .get_results ($P5023)
    pop_upto_eh $P5023
    getattribute $P5023, $P5023, 'type'
    eq $P5023, .CONTROL_LOOP_NEXT, for_next4734
    eq $P5023, .CONTROL_LOOP_REDO, for_redo4735
  for_done4736:
    pop_eh 
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1346277629.325") :anon :lex :outer("cuid_308_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2481
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2482
    find_lex $P5004, "$/"
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback4727
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5005
  fallback4727:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4728
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback4728:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
.annotate 'line', 2483
    find_lex $P5008, "$BLOCKINIT"
    $P5009 = $P5008."push"($P101)
.annotate 'line', 2484
    find_lex $P5010, "$BLOCKINIT"
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4729
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback4729:
.annotate 'line', 2486
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4730
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5020
  fallback4730:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2487
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback4731
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5026
  fallback4731:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5030 = $P5010."push"($P5029)
    find_lex $P5031, "$BLOCK"
    box $P5032, 1
    set $P5031["signature_has_invocant"], $P5032
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1346277629.325") :anon :lex :outer("cuid_308_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2491
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_309_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2494
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback4737
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4737:
    set $P101, $P5003
    set $P5005, _lex_param_1["named_param"]
    unless_null $P5005, fallback4740
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback4740:
    unless $P5005 goto if1538_else4738 
.annotate 'line', 2497
.annotate 'line', 2498
    set $P5007, _lex_param_1["named_param"]
    unless_null $P5007, fallback4741
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4741:
    $P5009 = $P5007."ast"()
    set $P102, $P5009
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if1539_end4743 
.annotate 'line', 2499
.annotate 'line', 2500
    set $P5012, _lex_param_1["named_param"]
    unless_null $P5012, fallback4744
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5013
  fallback4744:
    set $P5011, $P5012["param_var"]
    unless_null $P5011, fallback4745
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5014
  fallback4745:
    set $P5010, $P5011["sigil"]
    unless_null $P5010, fallback4746
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5015
  fallback4746:
    $P5016 = "&default_for"($P5010)
    $P5017 = $P102."default"($P5016)
    set $P5018, $P5017
  if1539_end4743:
    set $P5038, $P5018
    goto if1538_end4739
  if1538_else4738:
.annotate 'line', 2503
.annotate 'line', 2504
    set $P5020, _lex_param_1["param_var"]
    unless_null $P5020, fallback4747
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5021
  fallback4747:
    $P5022 = $P5020."ast"()
    set $P102, $P5022
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1540_else4748 
.annotate 'line', 2505
.annotate 'line', 2506
    $P5023 = $P102."slurpy"(1)
.annotate 'line', 2507
    set $P5025, _lex_param_1["param_var"]
    unless_null $P5025, fallback4750
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5026
  fallback4750:
    set $P5024, $P5025["sigil"]
    unless_null $P5024, fallback4751
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5027
  fallback4751:
    set $S5003, $P5024
    iseq $I5003, $S5003, "%"
    $P5028 = $P102."named"($I5003)
    set $P5037, $P5028
    goto if1540_end4749
  if1540_else4748:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5036, $I5004
    set $P5035, $P5036
    unless $I5004 goto if1541_end4753 
.annotate 'line', 2509
.annotate 'line', 2510
    set $P5030, _lex_param_1["param_var"]
    unless_null $P5030, fallback4754
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5031
  fallback4754:
    set $P5029, $P5030["sigil"]
    unless_null $P5029, fallback4755
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5032
  fallback4755:
    $P5033 = "&default_for"($P5029)
    $P5034 = $P102."default"($P5033)
    set $P5035, $P5034
  if1541_end4753:
    set $P5037, $P5035
  if1540_end4749:
    set $P5038, $P5037
  if1538_end4739:
    set $P5039, _lex_param_1["default_value"]
    unless_null $P5039, fallback4758
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5039, $P5040
  fallback4758:
    set $P5057, $P5039
    unless $P5039 goto if1542_end4757 
.annotate 'line', 2513
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    box $P5044, $I5005
    set $P5043, $P5044
    unless $I5005 goto if1543_end4760 
.annotate 'line', 2514
.annotate 'line', 2515
    $P5041 = _lex_param_1."CURSOR"()
    $P5042 = $P5041."panic"("Can't put default on slurpy parameter")
    set $P5043, $P5042
  if1543_end4760:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    box $P5048, $I5006
    set $P5047, $P5048
    unless $I5006 goto if1544_end4762 
.annotate 'line', 2517
.annotate 'line', 2518
    $P5045 = _lex_param_1."CURSOR"()
    $P5046 = $P5045."panic"("Can't put default on required parameter")
    set $P5047, $P5046
  if1544_end4762:
.annotate 'line', 2520
    set $P5051, _lex_param_1["default_value"]
    unless_null $P5051, fallback4763
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5051, $P5052
  fallback4763:
    set $P5050, $P5051[0]
    unless_null $P5050, fallback4764
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5050, $P5053
  fallback4764:
    set $P5049, $P5050["EXPR"]
    unless_null $P5049, fallback4765
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5054
  fallback4765:
    $P5055 = $P5049."ast"()
    $P5056 = $P102."default"($P5055)
    set $P5057, $P5056
  if1542_end4757:
.annotate 'line', 2522
    $P5058 = $P102."default"()
    set $P5075, $P5058
    if $P5058 goto unless1545_end4767 
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4768
    get_hll_global $P5062, "GLOBAL"
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4769
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5060, $P5063
  fallback4769:
    unless_null $P5060, vivi_15464770
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_15464770:
    set $P5059, $P5060
  fallback4768:
    $P5065 = $P5059."cur_lexpad"()
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4771
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4772
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5067, $P5070
  fallback4772:
    unless_null $P5067, vivi_15474773
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15474773:
    set $P5066, $P5067
  fallback4771:
    $P5072 = $P5066."cur_lexpad"()
    $P5073 = $P5072."arity"()
    set $N5002, $P5073
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5074 = $P5065."arity"($N5001)
    set $P5075, $P5074
  unless1545_end4767:
    set $P5076, _lex_param_1["typename"]
    unless_null $P5076, fallback4776
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5076, $P5077
  fallback4776:
    set $P5085, $P5076
    unless $P5076 goto if1548_end4775 
.annotate 'line', 2525
.annotate 'line', 2526
    set $P5079, _lex_param_1["typename"]
    unless_null $P5079, fallback4777
    nqp_get_sc_object $P5080, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5079, $P5080
  fallback4777:
    set $P5078, $P5079[0]
    unless_null $P5078, fallback4778
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5078, $P5081
  fallback4778:
    $P5082 = $P5078."ast"()
    $P5083 = $P5082."value"()
    $P5084 = $P102."returns"($P5083)
    set $P5085, $P5084
  if1548_end4775:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback4781
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5086, $P5087
  fallback4781:
    set $P5093, $P5086
    unless $P5086 goto if1549_end4780 
.annotate 'line', 2530
    set $P5089, _lex_param_1["definedness"]
    unless_null $P5089, fallback4782
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5089, $P5090
  fallback4782:
    set $P5088, $P5089[0]
    unless_null $P5088, fallback4783
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5088, $P5091
  fallback4783:
    set $S5007, $P5088
    box $P5092, $S5007
    set $P102["definedness"], $P5092
    set $P5093, $P5092
  if1549_end4780:
.annotate 'line', 2534
    $P5094 = _lex_param_1."!make"($P102)
    .return ($P5094) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_310_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2537
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2539
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback4784
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5008
  fallback4784:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2541
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4785
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4786
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5014
  fallback4786:
    unless_null $P5011, vivi_15504787
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_15504787:
    set $P5010, $P5011
  fallback4785:
    $P5016 = $P5010."cur_lexpad"()
    $P5017 = $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2542
    $P5018 = _lex_param_1."!make"($P102)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_311_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2545
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2546
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback4788
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4788:
    $P5004 = $P5002."ast"()
    set $P101, $P5004
.annotate 'line', 2547
    set $P5006, _lex_param_1["param_var"]
    unless_null $P5006, fallback4789
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4789:
    set $P5005, $P5006["name"]
    unless_null $P5005, fallback4790
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5008
  fallback4790:
    set $S5001, $P5005
    $P5009 = $P101."named"($S5001)
.annotate 'line', 2548
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_312_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2551
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_459_1346277629.325' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 2555
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback4791
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5007
  fallback4791:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_15534797
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_459_1346277629.325' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_15524796
  catch_handler_15534797:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_15524796
  skip_handler_15524796:
    set $P5016, $P102
    if $P102 goto unless1554_end4799 
.annotate 'line', 2562
.annotate 'line', 2563
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1554_end4799:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1346277629.325") :anon :lex :outer("cuid_312_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2557
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2558
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4792
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4793
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback4793:
    unless_null $P5003, vivi_15514794
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15514794:
    set $P5002, $P5003
  fallback4792:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2559
    find_dynamic_lex $P5010, "$/"
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback4795
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback4795:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5017 = $P5010."!make"($P5016)
    box $P5018, 1
    store_lex "$found", $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_313_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2567
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2568
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback4800
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4800:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_314_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2571
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5015 = 'cuid_461_1346277629.325' 
    capture_lex $P5015 
    .const 'Sub' $P5015 = 'cuid_463_1346277629.325' 
    capture_lex $P5015 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback4803
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4803:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1555_else4801 
    .const 'Sub' $P5003 = 'cuid_461_1346277629.325' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5014, $P5004
    goto if1555_end4802
  if1555_else4801:
    set $P5005, _lex_param_1["longname"]
    unless_null $P5005, fallback4826
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback4826:
    set $S5002, $P5005
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1561_else4824 
    .const 'Sub' $P5007 = 'cuid_463_1346277629.325' 
    capture_lex $P5007
    $P5008 = $P5007()
    set $P5013, $P5008
    goto if1561_end4825
  if1561_else4824:
.annotate 'line', 2597
.annotate 'line', 2598
    $P5009 = _lex_param_1."CURSOR"()
    set $P5010, _lex_param_1["longname"]
    unless_null $P5010, fallback4839
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4839:
    set $S5005, $P5010
    concat $S5004, "Trait '", $S5005
    concat $S5003, $S5004, "' not implemented"
    $P5012 = $P5009."panic"($S5003)
    set $P5013, $P5012
  if1561_end4825:
    set $P5014, $P5013
  if1555_end4802:
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1346277629.325") :anon :lex :outer("cuid_314_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2572
    .const 'Sub' $P5039 = 'cuid_460_1346277629.325' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P104, $P5004
.annotate 'line', 2574
    find_lex $P5007, "$/"
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback4804
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5008
  fallback4804:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback4805
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5009
  fallback4805:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
.annotate 'line', 2576
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback4808
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback4808:
    $P5016 = $P5011."ACCEPTS"($P101)
    set $P5020, $P5016
    if $P5016 goto unless1556_end4807 
.annotate 'line', 2575
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable' requires constant scalar argument")
    set $P5020, $P5019
  unless1556_end4807:
.annotate 'line', 2577
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4809
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4810
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5026
  fallback4810:
    unless_null $P5023, vivi_15574811
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15574811:
    set $P5022, $P5023
  fallback4809:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback4812
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback4813
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5032
  fallback4813:
    unless_null $P5029, vivi_15584814
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_15584814:
    set $P5028, $P5029
  fallback4812:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2580
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_460_1346277629.325' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1346277629.325") :anon :lex :outer("cuid_461_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2580
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2581
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4815
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4816
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback4816:
    unless_null $P5002, vivi_15594817
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15594817:
    set $P5001, $P5002
  fallback4815:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2582
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback4819
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5012
  fallback4819:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor4818
.annotate 'line', 2583
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4820
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4821
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5017
  fallback4821:
    unless_null $P5014, vivi_15604822
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15604822:
    set $P5013, $P5014
  fallback4820:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback4823
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5021
  fallback4823:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor4818:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1346277629.325") :anon :lex :outer("cuid_314_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2586
    .const 'Sub' $P5031 = 'cuid_462_1346277629.325' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
.annotate 'line', 2588
    find_lex $P5006, "$/"
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback4827
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5007
  fallback4827:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback4828
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5008
  fallback4828:
    $P5009 = $P5004."ast"()
    set $P101, $P5009
.annotate 'line', 2590
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["SVal"]
    unless_null $P5010, fallback4831
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5014
  fallback4831:
    $P5015 = $P5010."ACCEPTS"($P101)
    set $P5019, $P5015
    if $P5015 goto unless1562_end4830 
.annotate 'line', 2589
    find_lex $P5016, "$/"
    $P5017 = $P5016."CURSOR"()
    $P5018 = $P5017."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
    set $P5019, $P5018
  unless1562_end4830:
.annotate 'line', 2591
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback4832
    get_hll_global $P5024, "GLOBAL"
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback4833
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5025
  fallback4833:
    unless_null $P5022, vivi_15634834
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_15634834:
    set $P5021, $P5022
  fallback4832:
    set $P103, $P5021
.annotate 'line', 2593
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_462_1346277629.325' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1346277629.325") :anon :lex :outer("cuid_463_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2593
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2594
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4835
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4836
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback4836:
    unless_null $P5002, vivi_15644837
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15644837:
    set $P5001, $P5002
  fallback4835:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback4838
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback4838:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_315_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2602
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5051 = 'cuid_464_1346277629.325' 
    capture_lex $P5051 
    .const 'Sub' $P5051 = 'cuid_465_1346277629.325' 
    capture_lex $P5051 
    if haz_param_5, default4897
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set _lex_param_2, $P5050
  default4897:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 2603
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback4840
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4840:
    $P5005 = $P5003."ast"()
    set $S5001, $P5005
    box $P5006, $S5001
    set $P101, $P5006
    set $P5007, _lex_param_1["proto"]
    unless_null $P5007, fallback4843
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4843:
    unless $P5007 goto if1565_else4841 
.annotate 'line', 2605
.annotate 'line', 2607
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Stmts"]
    unless_null $P5009, fallback4844
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5013
  fallback4844:
.annotate 'line', 2608
    get_hll_global $P5017, "GLOBAL"
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Block"]
    unless_null $P5014, fallback4845
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5018
  fallback4845:
.annotate 'line', 2610
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback4846
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5023
  fallback4846:
.annotate 'line', 2611
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback4847
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5028
  fallback4847:
    $P5029 = $P5024."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2612
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback4848
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5034
  fallback4848:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5019."new"($P5029, $P5035, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5037 = $P5014."new"($P5036, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    $P5038 = $P5009."new"($P5037)
    set $P102, $P5038
    $P5042 = $P102."list"()
    set $P5039, $P5042
    iter $P5041, $P5042
    new $P5044, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5044, for_handlers4858
    push_eh $P5044
  for_next4859:
    unless $P5041, for_done4861
    shift $P5045, $P5041
  for_redo4860:
    .const 'Sub' $P5043 = 'cuid_464_1346277629.325' 
    capture_lex $P5043
    $P5039 = $P5043($P5045)
    goto for_next4859
  for_handlers4858:
    .get_results ($P5044)
    pop_upto_eh $P5044
    getattribute $P5044, $P5044, 'type'
    eq $P5044, .CONTROL_LOOP_NEXT, for_next4859
    eq $P5044, .CONTROL_LOOP_REDO, for_redo4860
  for_done4861:
    pop_eh 
    set $P5048, $P5039
    goto if1565_end4842
  if1565_else4841:
    .const 'Sub' $P5046 = 'cuid_465_1346277629.325' 
    capture_lex $P5046
    $P5047 = $P5046()
    set $P5048, $P5047
  if1565_end4842:
.annotate 'line', 2650
    $P5049 = _lex_param_1."!make"($P102)
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1346277629.325") :anon :lex :outer("cuid_315_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2620
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2621
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4849
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4850
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5005
  fallback4850:
    unless_null $P5002, vivi_15664851
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15664851:
    set $P5001, $P5002
  fallback4849:
    find_dynamic_lex $P5007, "$*PACKAGE"
    unless_null $P5007, fallback4852
    get_hll_global $P5010, "GLOBAL"
    get_who $P5009, $P5010
    set $P5008, $P5009["$PACKAGE"]
    unless_null $P5008, fallback4853
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5011
  fallback4853:
    unless_null $P5008, vivi_15674854
    die "Contextual $*PACKAGE not found"
    box $P5012, "Contextual $*PACKAGE not found"
    set $P5008, $P5012
  vivi_15674854:
    set $P5007, $P5008
  fallback4852:
    $P5013 = _lex_param_0."name"()
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback4855
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback4856
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5018
  fallback4856:
    unless_null $P5015, vivi_15684857
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_15684857:
    set $P5014, $P5015
  fallback4855:
    $P5020 = _lex_param_0."name"()
    $P5021 = $P5014."create_code"(_lex_param_0, $P5020, 0)
    $P5022 = $P5001."pkg_add_method"($P5007, "add_method", $P5013, $P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1346277629.325") :anon :lex :outer("cuid_315_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2624
    .lex "$block", $P101 
    .lex "$regex", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 2625
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4862
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4863
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback4863:
    unless_null $P5004, vivi_15694864
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15694864:
    set $P5003, $P5004
  fallback4862:
    $P5009 = $P5003."pop_lexpad"()
    set $P101, $P5009
.annotate 'line', 2626
    set $P5010, $P101[0]
    unless_null $P5010, fallback4865
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4865:
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4866
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback4866:
    $P5017 = $P5012."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5018 = $P5010."unshift"($P5017)
.annotate 'line', 2627
    set $P5019, $P101[0]
    unless_null $P5019, fallback4867
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5019, $P5020
  fallback4867:
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4868
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5025
  fallback4868:
.annotate 'line', 2629
    get_hll_global $P5029, "GLOBAL"
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4869
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5030
  fallback4869:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2630
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback4870
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5032, $P5036
  fallback4870:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5039 = $P5019."push"($P5038)
.annotate 'line', 2631
    set $P5040, $P101[0]
    unless_null $P5040, fallback4871
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5040, $P5041
  fallback4871:
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Var"]
    unless_null $P5042, fallback4872
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5042, $P5046
  fallback4872:
    $P5047 = $P5042."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5048 = $P5040."push"($P5047)
.annotate 'line', 2632
    set $P5049, $P101[0]
    unless_null $P5049, fallback4873
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5050
  fallback4873:
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback4874
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5051, $P5055
  fallback4874:
    $P5056 = $P5051."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5057 = $P5049."push"($P5056)
.annotate 'line', 2633
    $P5058 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2634
    $P5059 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2635
    find_lex $P5068, "$/"
    set $P5067, $P5068["p6regex"]
    unless_null $P5067, fallback4876
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5067, $P5069
  fallback4876:
    $P5070 = $P5067."ast"()
    get_hll_global $P5065, "GLOBAL"
    nqp_get_package_through_who $P5064, $P5065, "QRegex"
    nqp_get_package_through_who $P5063, $P5064, "P6Regex"
    nqp_get_package_through_who $P5062, $P5063, "Actions"
    get_who $P5061, $P5062
    set $P5060, $P5061["qbuildsub"]
    unless_null $P5060, fallback4875
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5060, $P5066
  fallback4875:
    $P5071 = $P5060($P5070, $P101)
    set $P102, $P5071
.annotate 'line', 2636
    find_lex $P5072, "$name"
    $P5073 = $P102."name"($P5072)
    find_dynamic_lex $P5074, "$*PKGDECL"
    unless_null $P5074, fallback4881
    get_hll_global $P5077, "GLOBAL"
    get_who $P5076, $P5077
    set $P5075, $P5076["$PKGDECL"]
    unless_null $P5075, fallback4882
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5075, $P5078
  fallback4882:
    unless_null $P5075, vivi_15724883
    die "Contextual $*PKGDECL not found"
    box $P5079, "Contextual $*PKGDECL not found"
    set $P5075, $P5079
  vivi_15724883:
    set $P5074, $P5075
  fallback4881:
    set $P5087, $P5074
    unless $P5074 goto if1571_end4880 
    find_dynamic_lex $P5081, "$*PACKAGE"
    unless_null $P5081, fallback4884
    get_hll_global $P5084, "GLOBAL"
    get_who $P5083, $P5084
    set $P5082, $P5083["$PACKAGE"]
    unless_null $P5082, fallback4885
    nqp_get_sc_object $P5085, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5082, $P5085
  fallback4885:
    unless_null $P5082, vivi_15734886
    die "Contextual $*PACKAGE not found"
    box $P5086, "Contextual $*PACKAGE not found"
    set $P5082, $P5086
  vivi_15734886:
    set $P5081, $P5082
  fallback4884:
    get_how $P5080, $P5081
    can $I5001, $P5080, "add_method"
    box $P5088, $I5001
    set $P5087, $P5088
  if1571_end4880:
    set $P5111, $P5087
    unless $P5087 goto if1570_end4878 
.annotate 'line', 2638
.annotate 'line', 2640
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback4887
    get_hll_global $P5092, "GLOBAL"
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback4888
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5090, $P5093
  fallback4888:
    unless_null $P5090, vivi_15744889
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_15744889:
    set $P5089, $P5090
  fallback4887:
    find_dynamic_lex $P5095, "$*PACKAGE"
    unless_null $P5095, fallback4890
    get_hll_global $P5098, "GLOBAL"
    get_who $P5097, $P5098
    set $P5096, $P5097["$PACKAGE"]
    unless_null $P5096, fallback4891
    nqp_get_sc_object $P5099, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5096, $P5099
  fallback4891:
    unless_null $P5096, vivi_15754892
    die "Contextual $*PACKAGE not found"
    box $P5100, "Contextual $*PACKAGE not found"
    set $P5096, $P5100
  vivi_15754892:
    set $P5095, $P5096
  fallback4890:
    find_lex $P5101, "$name"
    find_dynamic_lex $P5102, "$*W"
    unless_null $P5102, fallback4893
    get_hll_global $P5105, "GLOBAL"
    get_who $P5104, $P5105
    set $P5103, $P5104["$W"]
    unless_null $P5103, fallback4894
    nqp_get_sc_object $P5106, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5103, $P5106
  fallback4894:
    unless_null $P5103, vivi_15764895
    die "Contextual $*W not found"
    box $P5107, "Contextual $*W not found"
    set $P5103, $P5107
  vivi_15764895:
    set $P5102, $P5103
  fallback4893:
    find_lex $P5108, "$name"
    $P5109 = $P5102."create_code"($P102, $P5108, 0)
    $P5110 = $P5089."pkg_add_method"($P5095, "add_method", $P5101, $P5109)
    set $P5111, $P5110
  if1570_end4878:
.annotate 'line', 2644
    get_hll_global $P5115, "GLOBAL"
    nqp_get_package_through_who $P5114, $P5115, "QAST"
    get_who $P5113, $P5114
    set $P5112, $P5113["Op"]
    unless_null $P5112, fallback4896
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5112, $P5116
  fallback4896:
.annotate 'line', 2646
    new $P5117, 'ResizablePMCArray'
    box $P5118, "NQPRegexMethod"
    push $P5117, $P5118
    find_lex $P5119, "$/"
    $P5120 = "&lexical_package_lookup"($P5117, $P5119)
    $P5121 = $P5112."new"($P5120, $P102, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5121
    find_lex $P5122, "$past"
    set $P5122["sink"], $P102
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_316_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2654
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback4900
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4900:
    unless $P5002 goto if1577_else4898 
.annotate 'line', 2655
    set $P5005, _lex_param_1["args"]
    unless_null $P5005, fallback4901
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback4901:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback4902
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback4902:
    $P5008 = $P5004."ast"()
    set $P5015, $P5008
    goto if1577_end4899
  if1577_else4898:
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback4903
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5013
  fallback4903:
    $P5014 = $P5009."new"(_lex_param_1 :named("node"))
    set $P5015, $P5014
  if1577_end4899:
    set $P101, $P5015
    set $P5016, _lex_param_1["quote"]
    unless_null $P5016, fallback4906
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5017
  fallback4906:
    unless $P5016 goto if1578_else4904 
.annotate 'line', 2656
.annotate 'line', 2657
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback4907
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5019
  fallback4907:
    $P5020 = $P5018."ast"()
    $P5021 = $P101."unshift"($P5020)
.annotate 'line', 2658
    $P5022 = $P101."op"("callmethod")
    set $P5043, $P5022
    goto if1578_end4905
  if1578_else4904:
    set $P5023, _lex_param_1["longname"]
    unless_null $P5023, fallback4910
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5024
  fallback4910:
    set $S5001, $P5023
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1579_else4908 
.annotate 'line', 2660
.annotate 'line', 2661
    $P5025 = $P101."op"("how")
    set $P5042, $P5025
    goto if1579_end4909
  if1579_else4908:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback4913
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5026, $P5027
  fallback4913:
    set $S5002, $P5026
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1580_else4911 
.annotate 'line', 2663
.annotate 'line', 2664
    $P5028 = $P101."op"("what")
    set $P5041, $P5028
    goto if1580_end4912
  if1580_else4911:
    set $P5029, _lex_param_1["longname"]
    unless_null $P5029, fallback4916
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5030
  fallback4916:
    set $S5003, $P5029
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1581_else4914 
.annotate 'line', 2666
.annotate 'line', 2667
    $P5031 = $P101."op"("who")
    set $P5040, $P5031
    goto if1581_end4915
  if1581_else4914:
    set $P5032, _lex_param_1["longname"]
    unless_null $P5032, fallback4919
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5032, $P5033
  fallback4919:
    set $S5004, $P5032
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1582_else4917 
.annotate 'line', 2669
.annotate 'line', 2670
    $P5034 = $P101."op"("reprname")
    set $P5039, $P5034
    goto if1582_end4918
  if1582_else4917:
.annotate 'line', 2672
.annotate 'line', 2673
    set $P5035, _lex_param_1["longname"]
    unless_null $P5035, fallback4920
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5035, $P5036
  fallback4920:
    set $S5005, $P5035
    $P5037 = $P101."name"($S5005)
.annotate 'line', 2674
    $P5038 = $P101."op"("callmethod")
    set $P5039, $P5038
  if1582_end4918:
    set $P5040, $P5039
  if1581_end4915:
    set $P5041, $P5040
  if1580_end4912:
    set $P5042, $P5041
  if1579_end4909:
    set $P5043, $P5042
  if1578_end4905:
.annotate 'line', 2676
    $P5044 = _lex_param_1."!make"($P101)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_317_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2681
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2682
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback4921
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback4921:
.annotate 'line', 2683
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback4922
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback4922:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "nqp_decontainerize PP" :named("pirop"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_318_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2686
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2687
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback4923
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback4923:
    $P5004 = $P5002."ast"()
    set $P101, $P5004
.annotate 'line', 2688
    set $P5005, _lex_param_1["deflongname"]
    unless_null $P5005, fallback4924
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback4924:
    set $S5002, $P5005
    concat $S5001, "&", $S5002
    $P5007 = $P101."name"($S5001)
.annotate 'line', 2689
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_319_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2692
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5047 = 'cuid_466_1346277629.325' 
    capture_lex $P5047 
    .const 'Sub' $P5047 = 'cuid_467_1346277629.325' 
    capture_lex $P5047 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 2695
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4927
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4928
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback4928:
    unless_null $P5004, vivi_15844929
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15844929:
    set $P5003, $P5004
  fallback4927:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback4930
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback4930:
    set $S5001, $P5009
    $P5011 = $P5003."is_lexical"($S5001)
    unless $P5011 goto if1583_else4925 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_15894941
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2696
    new $P5030, 'ExceptionHandler'
    set_label $P5030, catch_handler_15874937
    $P5030.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5030
.annotate 'line', 2697
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback4931
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback4931:
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4932
    get_hll_global $P5020, "GLOBAL"
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4933
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5021
  fallback4933:
    unless_null $P5018, vivi_15854934
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_15854934:
    set $P5017, $P5018
  fallback4932:
    new $P5023, 'ResizablePMCArray'
    set $P5024, _lex_param_1["name"]
    unless_null $P5024, fallback4935
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5025
  fallback4935:
    set $S5002, $P5024
    box $P5026, $S5002
    push $P5023, $P5026
    $P5027 = $P5017."find_sym"($P5023)
    $P5028 = $P5012."new"($P5027 :named("value"))
    set $P101, $P5028
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5031, $P5029
    pop_eh 
    goto skip_handler_15864936
  catch_handler_15874937:
    .get_results ($P5030) 
    .const 'Sub' $P10001 = 'cuid_466_1346277629.325' 
    capture_lex $P10001
    $P10002 = $P10001($P5030)
    set $I10001, 1
    set $P5030["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5030
    pop_upto_eh $P5030
    pop_eh 
    set $P5031, $P10003
    goto skip_handler_15864936
  skip_handler_15864936:
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_15884940
  catch_handler_15894941:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_15884940
  skip_handler_15884940:
    set $P5036, $P5033
    goto if1583_end4926
  if1583_else4925:
    .const 'Sub' $P5034 = 'cuid_467_1346277629.325' 
    capture_lex $P5034
    $P5035 = $P5034()
    set $P5036, $P5035
  if1583_end4926:
    set $P102, $P101
    set $P5037, _lex_param_1["args"]
    unless_null $P5037, fallback4946
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5038
  fallback4946:
    set $P5045, $P5037
    unless $P5037 goto if1590_end4945 
.annotate 'line', 2710
.annotate 'line', 2711
    set $P5040, _lex_param_1["args"]
    unless_null $P5040, fallback4947
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5040, $P5041
  fallback4947:
    set $P5039, $P5040[0]
    unless_null $P5039, fallback4948
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5039, $P5042
  fallback4948:
    $P5043 = $P5039."ast"()
    set $P102, $P5043
.annotate 'line', 2712
    $P5044 = $P102."unshift"($P101)
    set $P5045, $P5044
  if1590_end4945:
.annotate 'line', 2714
    $P5046 = _lex_param_1."!make"($P102)
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1346277629.325") :anon :lex :outer("cuid_319_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2698
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2699
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback4938
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback4938:
    find_lex $P5007, "$/"
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback4939
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5008
  fallback4939:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5009
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1346277629.325") :anon :lex :outer("cuid_319_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2703
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback4942
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5006
  fallback4942:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback4943
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5007
  fallback4943:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2705
    find_lex $P5008, "$/"
    $P5009 = "&lexical_package_lookup"($P101, $P5008)
    store_lex "$var", $P5009
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_320_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2717
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback4951
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback4951:
    unless $P5003 goto if1591_else4949 
.annotate 'line', 2718
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback4952
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4952:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback4953
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5008
  fallback4953:
    $P5009 = $P5005."ast"()
    $P5010 = $P5009."list"()
    set $P5012, $P5010
    goto if1591_end4950
  if1591_else4949:
    new $P5011, 'ResizablePMCArray'
    set $P5012, $P5011
  if1591_end4950:
    set $P101, $P5012
    set $P5013, _lex_param_1["op"]
    unless_null $P5013, fallback4954
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5014
  fallback4954:
    set $S5001, $P5013
    box $P5015, $S5001
    set $P102, $P5015
    set $S5003, $P102
    split $P5016, "__", $S5003
    join $S5002, " ", $P5016
    box $P5017, $S5002
    set $P102, $P5017
.annotate 'line', 2721
    get_hll_global $P5021, "GLOBAL"
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["VM"]
    unless_null $P5018, fallback4955
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5022
  fallback4955:
    $P5023 = $P5018."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5024 = _lex_param_1."!make"($P5023)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_321_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2724
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2725
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback4956
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback4956:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback4957
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback4957:
    set $S5001, $P5006
    $P5008 = $P5001."new"($S5001 :named("pirconst"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_322_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2728
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback4958
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback4958:
    set $S5001, $P5004
    box $P5006, $S5001
    set $P101, $P5006
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback4961
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback4961:
    unless $P5007 goto if1592_else4959 
.annotate 'line', 2730
    set $P5010, _lex_param_1["args"]
    unless_null $P5010, fallback4962
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4962:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4963
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5012
  fallback4963:
    $P5013 = $P5009."ast"()
    $P5014 = $P5013."list"()
    set $P5016, $P5014
    goto if1592_end4960
  if1592_else4959:
    new $P5015, 'ResizablePMCArray'
    set $P5016, $P5015
  if1592_end4960:
    set $P102, $P5016
.annotate 'line', 2731
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback4964
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback4964:
    $P5022 = $P5017."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5022
.annotate 'line', 2732
    $P5023 = _lex_param_1."!make"($P103)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_323_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2735
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2736
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4965
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback4965:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_324_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2739
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback4966
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback4966:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_325_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2741
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5056 = 'cuid_469_1346277629.325' 
    capture_lex $P5056 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
.annotate 'line', 2742
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback4967
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5008
  fallback4967:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback4970
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5010, $P5011
  fallback4970:
    set $P5014, $P5010
    unless $P5010 goto if1593_end4969 
    .const 'Sub' $P5012 = 'cuid_469_1346277629.325' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5014, $P5013
  if1593_end4969:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2751
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
    new $P5053, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5053, while1597_handlers4986
    push_eh $P5053
  while1597_test4983:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5054, $I5001
    set $P5052, $P5054
    unless $I5001 goto while1597_done4987 
  while1597_redo4985:
.annotate 'line', 2752
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback4992
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5019
  fallback4992:
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4993
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5024
  fallback4993:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1599_end4991 
.annotate 'line', 2753
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback4994
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5026
  fallback4994:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1599_end4991:
    box $P5051, $I5006
    set $P5050, $P5051
    unless $I5006 goto if1598_end4989 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback4995
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5029, $P5030
  fallback4995:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback4996
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5031
  fallback4996:
    set $P101[$I5007], $P5028
.annotate 'line', 2755
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback4997
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5032, $P5033
  fallback4997:
    $P5034 = $P5032."flat"(1)
    set $I5011, $P102
    set $P5035, $P101[$I5011]
    unless_null $P5035, fallback5002
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5035, $P5036
  fallback5002:
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback5003
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5041
  fallback5003:
    type_check $I5010, $P5035, $P5037
    set $I5014, $I5010
    unless $I5010 goto if1601_end5001 
.annotate 'line', 2757
    set $I5013, $P102
    set $P5042, $P101[$I5013]
    unless_null $P5042, fallback5004
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5042, $P5043
  fallback5004:
    $P5044 = $P5042."name"()
    set $S5003, $P5044
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1601_end5001:
    box $P5049, $I5014
    set $P5048, $P5049
    unless $I5014 goto if1600_end4999 
.annotate 'line', 2756
    set $I5015, $P102
    set $P5045, $P101[$I5015]
    unless_null $P5045, fallback5005
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5045, $P5046
  fallback5005:
    $P5047 = $P5045."named"(1)
    set $P5048, $P5047
  if1600_end4999:
    set $P5050, $P5048
  if1598_end4989:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5052, $N5004
    set $P102, $P5052
    set $P5052, tmp_2
    goto while1597_test4983 
  while1597_handlers4986:
    .get_results ($P5053)
    pop_upto_eh $P5053
    getattribute $P5053, $P5053, 'type'
    eq $P5053, .CONTROL_LOOP_NEXT, while1597_test4983
    eq $P5053, .CONTROL_LOOP_REDO, while1597_redo4985
  while1597_done4987:
    pop_eh 
.annotate 'line', 2761
    $P5055 = _lex_param_1."!make"($P101)
    .return ($P5055) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1346277629.325") :anon :lex :outer("cuid_325_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2743
    .const 'Sub' $P5023 = 'cuid_468_1346277629.325' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2744
    find_lex $P5003, "$/"
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback4971
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5004
  fallback4971:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback4978
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback4978:
    type_check $I5001, $P101, $P5006
    set $I5003, $I5001
    unless $I5001 goto if1596_end4977 
.annotate 'line', 2745
    $P5011 = $P101."name"()
    set $S5001, $P5011
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1596_end4977:
    set $I5005, $I5003
    unless $I5003 goto if1595_end4975 
    $P5012 = $P101."named"()
    isfalse $I5004, $P5012
    set $I5005, $I5004
  if1595_end4975:
    unless $I5005 goto if1594_else4972 
.annotate 'line', 2746
    $P5016 = $P101."list"()
    set $P5013, $P5016
    iter $P5015, $P5016
    new $P5018, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5018, for_handlers4979
    push_eh $P5018
  for_next4980:
    unless $P5015, for_done4982
    shift $P5019, $P5015
  for_redo4981:
    .const 'Sub' $P5017 = 'cuid_468_1346277629.325' 
    capture_lex $P5017
    $P5013 = $P5017($P5019)
    goto for_next4980
  for_handlers4979:
    .get_results ($P5018)
    pop_upto_eh $P5018
    getattribute $P5018, $P5018, 'type'
    eq $P5018, .CONTROL_LOOP_NEXT, for_next4980
    eq $P5018, .CONTROL_LOOP_REDO, for_redo4981
  for_done4982:
    pop_eh 
    set $P5022, $P5013
    goto if1594_end4973
  if1594_else4972:
.annotate 'line', 2748
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1594_end4973:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1346277629.325") :anon :lex :outer("cuid_469_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2746
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_326_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2764
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5006
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5006:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_327_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2766
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5007
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5007:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_328_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2768
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2769
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5010
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5010:
    unless $P5001 goto if1602_else5008 
.annotate 'line', 2770
    set $P5004, _lex_param_1["EXPR"]
    unless_null $P5004, fallback5011
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback5011:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback5012
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback5012:
    $P5007 = $P5003."ast"()
    set $P5014, $P5007
    goto if1602_end5009
  if1602_else5008:
.annotate 'line', 2771
    get_hll_global $P5011, "GLOBAL"
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Op"]
    unless_null $P5008, fallback5013
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5012
  fallback5013:
    $P5013 = $P5008."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5014, $P5013
  if1602_end5009:
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_329_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2774
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5016
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback5016:
    unless $P5002 goto if1603_else5014 
.annotate 'line', 2776
.annotate 'line', 2777
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5017
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5006
  fallback5017:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5018
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5007
  fallback5018:
    $P5008 = $P5004."ast"()
    set $P101, $P5008
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5023
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5013
  fallback5023:
    type_check $I5001, $P101, $P5009
    set $I5003, $I5001
    unless $I5001 goto if1605_end5022 
.annotate 'line', 2778
    $P5014 = $P101."name"()
    set $S5001, $P5014
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1605_end5022:
    box $P5022, $I5003
    set $P5021, $P5022
    if $I5003 goto unless1604_end5020 
.annotate 'line', 2779
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback5024
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5019
  fallback5024:
    $P5020 = $P5015."new"($P101, "list" :named("op"))
    set $P101, $P5020
    set $P5021, $P101
  unless1604_end5020:
    set $P5029, $P5021
    goto if1603_end5015
  if1603_else5014:
.annotate 'line', 2782
.annotate 'line', 2783
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5025
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5027
  fallback5025:
    $P5028 = $P5023."new"("list" :named("op"))
    set $P101, $P5028
    set $P5029, $P101
  if1603_end5015:
.annotate 'line', 2785
    $P5030 = $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2786
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_330_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2789
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5026
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5026:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_331_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2790
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5027
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5027:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_332_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2792
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_470_1346277629.325' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5030
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback5030:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5031
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5006
  fallback5031:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5032
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5007
  fallback5032:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5033
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5008
  fallback5033:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1606_else5028 
    .const 'Sub' $P5009 = 'cuid_470_1346277629.325' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5024, $P5010
    goto if1606_end5029
  if1606_else5028:
    set $P5013, _lex_param_1["pblock"]
    unless_null $P5013, fallback5038
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5014
  fallback5038:
    set $P5012, $P5013["blockoid"]
    unless_null $P5012, fallback5039
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5015
  fallback5039:
    set $P5011, $P5012["you_are_here"]
    unless_null $P5011, fallback5040
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5016
  fallback5040:
    unless $P5011 goto if1607_else5036 
.annotate 'line', 2798
.annotate 'line', 2799
    set $P5017, _lex_param_1["pblock"]
    unless_null $P5017, fallback5041
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5018
  fallback5041:
    $P5019 = $P5017."ast"()
    $P5020 = _lex_param_1."!make"($P5019)
    set $P5023, $P5020
    goto if1607_end5037
  if1607_else5036:
.annotate 'line', 2801
.annotate 'line', 2802
    $P5021 = "&default_for"("%")
    $P5022 = _lex_param_1."!make"($P5021)
    set $P5023, $P5022
  if1607_end5037:
    set $P5024, $P5023
  if1606_end5029:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1346277629.325") :anon :lex :outer("cuid_332_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2793
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2794
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5034
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback5034:
    find_lex $P5008, "$/"
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5035
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5009
  fallback5035:
    $P5010 = $P5007."ast"()
    $P5011 = $P5002."new"($P5010, "takeclosure" :named("op"))
    set $P101, $P5011
    box $P5012, 1
    set $P101["bareblock"], $P5012
.annotate 'line', 2796
    find_dynamic_lex $P5013, "$/"
    $P5014 = $P5013."!make"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_333_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2806
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5044
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback5044:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1608_else5042 
    set $S5004, "list"
    goto if1608_end5043
  if1608_else5042:
    set $P5004, _lex_param_1["sigil"]
    unless_null $P5004, fallback5047
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback5047:
    set $S5002, $P5004
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1609_else5045 
    set $S5003, "hash"
    goto if1609_end5046
  if1609_else5045:
    set $S5003, "item"
  if1609_end5046:
    set $S5004, $S5003
  if1608_end5043:
    box $P5006, $S5004
    set $P101, $P5006
.annotate 'line', 2810
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5048
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback5048:
    set $P5012, _lex_param_1["semilist"]
    unless_null $P5012, fallback5049
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5013
  fallback5049:
    $P5014 = $P5012."ast"()
    $P5015 = $P5007."new"($P5014, "callmethod" :named("op"), $P101 :named("name"))
    $P5016 = _lex_param_1."!make"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_334_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2813
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5050
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5050:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_335_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2815
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2816
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5051
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5051:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5052
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5052:
    $P5008 = $P5006."ast"()
    $P5009 = "&default_for"("$")
    $P5010 = $P5001."new"($P5008, "positional" :named("scope"), $P5009 :named("fallback"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_336_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2819
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2820
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5053
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5053:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5054
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5054:
    $P5008 = $P5006."ast"()
    $P5009 = "&default_for"("$")
    $P5010 = $P5001."new"($P5008, "associative" :named("scope"), $P5009 :named("fallback"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_337_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2823
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2824
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5055
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5055:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5056
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5056:
    $P5008 = $P5006."ast"()
    $P5009 = "&default_for"("$")
    $P5010 = $P5001."new"($P5008, "associative" :named("scope"), $P5009 :named("fallback"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_338_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2827
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2828
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5057
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5057:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_339_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2831
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2832
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5060
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5060:
    unless $P5001 goto if1610_else5058 
    set $P5003, _lex_param_1["quote"]
    unless_null $P5003, fallback5061
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback5061:
    $P5005 = $P5003."ast"()
    set $P5009, $P5005
    goto if1610_end5059
  if1610_else5058:
    set $P5006, _lex_param_1["number"]
    unless_null $P5006, fallback5062
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5062:
    $P5008 = $P5006."ast"()
    set $P5009, $P5008
  if1610_end5059:
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_340_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2835
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5065
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback5065:
    unless $P5002 goto if1611_else5063 
.annotate 'line', 2836
    set $P5004, _lex_param_1["dec_number"]
    unless_null $P5004, fallback5066
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5004, $P5005
  fallback5066:
    $P5006 = $P5004."ast"()
    set $P5010, $P5006
    goto if1611_end5064
  if1611_else5063:
    set $P5007, _lex_param_1["integer"]
    unless_null $P5007, fallback5067
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5008
  fallback5067:
    $P5009 = $P5007."ast"()
    set $P5010, $P5009
  if1611_end5064:
    set $P101, $P5010
    set $P5011, _lex_param_1["sign"]
    unless_null $P5011, fallback5070
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5012
  fallback5070:
    set $S5001, $P5011
    iseq $I5001, $S5001, "-"
    box $P5015, $I5001
    set $P5014, $P5015
    unless $I5001 goto if1612_end5069 
.annotate 'line', 2837
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5013, $N5001
    set $P101, $P5013
    set $P5014, $P101
  if1612_end5069:
.annotate 'line', 2838
    set $P5016, _lex_param_1["dec_number"]
    unless_null $P5016, fallback5073
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5016, $P5017
  fallback5073:
    unless $P5016 goto if1613_else5071 
.annotate 'line', 2839
    get_hll_global $P5021, "GLOBAL"
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["NVal"]
    unless_null $P5018, fallback5074
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5018, $P5022
  fallback5074:
    $P5023 = $P5018."new"($P101 :named("value"))
    set $P5030, $P5023
    goto if1613_end5072
  if1613_else5071:
.annotate 'line', 2840
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["IVal"]
    unless_null $P5024, fallback5075
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5024, $P5028
  fallback5075:
    $P5029 = $P5024."new"($P101 :named("value"))
    set $P5030, $P5029
  if1613_end5072:
    $P5031 = _lex_param_1."!make"($P5030)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "quote_EXPR" :subid("cuid_341_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2843
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5027 = 'cuid_472_1346277629.325' 
    capture_lex $P5027 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2844
    set $P5002, _lex_param_1["quote_delimited"]
    unless_null $P5002, fallback5076
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback5076:
    $P5004 = $P5002."ast"()
    set $P101, $P5004
    find_dynamic_lex $P5006, "%*QUOTEMOD"
    unless_null $P5006, fallback5079
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    set $P5007, $P5008["%QUOTEMOD"]
    unless_null $P5007, fallback5080
    get_hll_global $P5011, "GLOBAL"
    get_who $P5010, $P5011
    new $P5012, 'Hash'
    set $P5010["%QUOTEMOD"], $P5012
    set $P5007, $P5012
  fallback5080:
    unless_null $P5007, vivi_16155081
    die "Contextual %*QUOTEMOD not found"
    box $P5013, "Contextual %*QUOTEMOD not found"
    set $P5007, $P5013
  vivi_16155081:
    set $P5006, $P5007
  fallback5079:
    set $P5005, $P5006["w"]
    unless_null $P5005, fallback5082
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5014
  fallback5082:
    set $P5025, $P5005
    unless $P5005 goto if1614_end5078 
.annotate 'line', 2845
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["SVal"]
    unless_null $P5015, fallback5085
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5019
  fallback5085:
    type_check $I5001, $P101, $P5015
    unless $I5001 goto if1616_else5083 
    .const 'Sub' $P5020 = 'cuid_472_1346277629.325' 
    capture_lex $P5020
    $P5021 = $P5020()
    set $P5024, $P5021
    goto if1616_end5084
  if1616_else5083:
.annotate 'line', 2856
.annotate 'line', 2857
    $P5022 = _lex_param_1."CURSOR"()
    $P5023 = $P5022."panic"("Can't form :w list from non-constant strings (yet)")
    set $P5024, $P5023
  if1616_end5084:
    set $P5025, $P5024
  if1614_end5078:
.annotate 'line', 2860
    $P5026 = _lex_param_1."!make"($P101)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1346277629.325") :anon :lex :outer("cuid_341_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2846
    .const 'Sub' $P5034 = 'cuid_471_1346277629.325' 
    capture_lex $P5034 
    .lex "@words", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2847
    find_lex $P5008, "$/"
    find_lex $P5009, "$past"
    $P5010 = $P5009."value"()
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    nqp_get_package_through_who $P5004, $P5005, "Grammar"
    get_who $P5003, $P5004
    set $P5002, $P5003["split_words"]
    unless_null $P5002, fallback5086
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5007
  fallback5086:
    $P5011 = $P5002($P5008, $P5010)
    set $P101, $P5011
    set $N5001, $P101
    set $N5002, 1
    isne $I5001, $N5001, $N5002
    unless $I5001 goto if1617_else5087 
.annotate 'line', 2848
.annotate 'line', 2849
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5089
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback5089:
    find_lex $P5017, "$/"
    $P5018 = $P5012."new"("list" :named("op"), $P5017 :named("node"))
    store_lex "$past", $P5018
    set $P5019, $P101
    iter $P5021, $P101
    new $P5023, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5023, for_handlers5091
    push_eh $P5023
  for_next5092:
    unless $P5021, for_done5094
    shift $P5024, $P5021
  for_redo5093:
    .const 'Sub' $P5022 = 'cuid_471_1346277629.325' 
    capture_lex $P5022
    $P5019 = $P5022($P5024)
    goto for_next5092
  for_handlers5091:
    .get_results ($P5023)
    pop_upto_eh $P5023
    getattribute $P5023, $P5023, 'type'
    eq $P5023, .CONTROL_LOOP_NEXT, for_next5092
    eq $P5023, .CONTROL_LOOP_REDO, for_redo5093
  for_done5094:
    pop_eh 
    set $P5033, $P5019
    goto if1617_end5088
  if1617_else5087:
.annotate 'line', 2852
.annotate 'line', 2853
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback5095
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5029
  fallback5095:
    set $P5030, $P101[0]
    unless_null $P5030, fallback5096
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5031
  fallback5096:
    set $S5001, $P5030
    $P5032 = $P5025."new"($S5001 :named("value"))
    store_lex "$past", $P5032
    set $P5033, $P5032
  if1617_end5088:
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1346277629.325") :anon :lex :outer("cuid_472_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2850
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["SVal"]
    unless_null $P5002, fallback5090
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5006
  fallback5090:
    $P5007 = $P5002."new"(_lex_param_0 :named("value"))
    $P5008 = $P5001."push"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "quote_delimited" :subid("cuid_342_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2863
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_473_1346277629.325' 
    capture_lex $P5040 
    .lex "@parts", $P101 
    .lex "$lastlit", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
    box $P5004, ""
    set $P102, $P5004
    set $P5008, _lex_param_1["quote_atom"]
    unless_null $P5008, fallback5097
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5009
  fallback5097:
    set $P5005, $P5008
    iter $P5007, $P5008
    new $P5011, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5011, for_handlers5111
    push_eh $P5011
  for_next5112:
    unless $P5007, for_done5114
    shift $P5012, $P5007
  for_redo5113:
    .const 'Sub' $P5010 = 'cuid_473_1346277629.325' 
    capture_lex $P5010
    $P5005 = $P5010($P5012)
    goto for_next5112
  for_handlers5111:
    .get_results ($P5011)
    pop_upto_eh $P5011
    getattribute $P5011, $P5011, 'type'
    eq $P5011, .CONTROL_LOOP_NEXT, for_next5112
    eq $P5011, .CONTROL_LOOP_REDO, for_redo5113
  for_done5114:
    pop_eh 
    set $S5001, $P102
    isgt $I5001, $S5001, ""
    box $P5021, $I5001
    set $P5020, $P5021
    unless $I5001 goto if1622_end5116 
.annotate 'line', 2884
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback5117
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5017
  fallback5117:
    $P5018 = $P5013."new"($P102 :named("value"))
    $P5019 = $P101."push"($P5018)
    set $P5020, $P5019
  if1622_end5116:
    unless $P101 goto if1623_else5118 
.annotate 'line', 2885
    $P5022 = $P101."shift"()
    set $P5029, $P5022
    goto if1623_end5119
  if1623_else5118:
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["SVal"]
    unless_null $P5023, fallback5120
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5027
  fallback5120:
    $P5028 = $P5023."new"("" :named("value"))
    set $P5029, $P5028
  if1623_end5119:
    set $P103, $P5029
    new $P5038, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5038, while1624_handlers5124
    push_eh $P5038
  while1624_test5121:
    set $P5037, $P101
    unless $P101 goto while1624_done5125 
  while1624_redo5123:
.annotate 'line', 2886
.annotate 'line', 2887
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback5126
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5030, $P5034
  fallback5126:
    $P5035 = $P101."shift"()
    $P5036 = $P5030."new"($P103, $P5035, "concat" :named("op"))
    set $P103, $P5036
    set $P5037, $P103
    goto while1624_test5121 
  while1624_handlers5124:
    .get_results ($P5038)
    pop_upto_eh $P5038
    getattribute $P5038, $P5038, 'type'
    eq $P5038, .CONTROL_LOOP_NEXT, while1624_test5121
    eq $P5038, .CONTROL_LOOP_REDO, while1624_redo5123
  while1624_done5125:
    pop_eh 
.annotate 'line', 2889
    $P5039 = _lex_param_1."!make"($P103)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1346277629.325") :anon :lex :outer("cuid_342_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2866
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 2867
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Node"]
    unless_null $P5003, fallback5100
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5007
  fallback5100:
    type_check $I5002, $P101, $P5003
    box $P5008, $I5002
    isfalse $I5001, $P5008
    unless $I5001 goto if1618_else5098 
.annotate 'line', 2868
    find_lex $P5009, "$lastlit"
    set $S5002, $P5009
    set $S5003, $P101
    concat $S5001, $S5002, $S5003
    box $P5010, $S5001
    store_lex "$lastlit", $P5010
    set $P5047, $P5010
    goto if1618_end5099
  if1618_else5098:
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5103
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback5103:
    type_check $I5003, $P101, $P5011
    unless $I5003 goto if1619_else5101 
.annotate 'line', 2871
    find_lex $P5016, "$lastlit"
    set $S5005, $P5016
.annotate 'line', 2872
    $P5017 = $P101."value"()
    set $S5006, $P5017
    concat $S5004, $S5005, $S5006
    box $P5018, $S5004
    store_lex "$lastlit", $P5018
    set $P5046, $P5018
    goto if1619_end5102
  if1619_else5101:
.annotate 'line', 2874
    find_lex $P5019, "$lastlit"
    set $S5007, $P5019
    isgt $I5004, $S5007, ""
    box $P5030, $I5004
    set $P5029, $P5030
    unless $I5004 goto if1620_end5105 
.annotate 'line', 2875
.annotate 'line', 2876
    find_lex $P5020, "@parts"
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["SVal"]
    unless_null $P5021, fallback5106
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5021, $P5025
  fallback5106:
    find_lex $P5026, "$lastlit"
    $P5027 = $P5021."new"($P5026 :named("value"))
    $P5028 = $P5020."push"($P5027)
    set $P5029, $P5028
  if1620_end5105:
.annotate 'line', 2878
    find_lex $P5031, "@parts"
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Node"]
    unless_null $P5032, fallback5109
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5032, $P5036
  fallback5109:
    type_check $I5005, $P101, $P5032
    unless $I5005 goto if1621_else5107 
    set $P5043, $P101
    goto if1621_end5108
  if1621_else5107:
.annotate 'line', 2880
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["SVal"]
    unless_null $P5037, fallback5110
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5037, $P5041
  fallback5110:
    $P5042 = $P5037."new"($P101 :named("value"))
    set $P5043, $P5042
  if1621_end5108:
    $P5044 = $P5031."push"($P5043)
    box $P5045, ""
    store_lex "$lastlit", $P5045
    set $P5046, $P5045
  if1619_end5102:
    set $P5047, $P5046
  if1618_end5099:
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_343_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2892
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5127
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5127:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_344_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2893
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5128
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5128:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_345_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2894
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5129
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5129:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_346_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2895
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5130
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5130:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_347_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2896
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5131
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5131:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_348_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2897
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2898
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5132
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5132:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5133
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5133:
    $P5008 = $P5006."ast"()
    $P5009 = $P5008."value"()
    $P5010 = $P5001."new"($P5009 :named("pir"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_349_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2901
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P103, $P5003
.annotate 'line', 2902
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5134
    get_hll_global $P5007, "GLOBAL"
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5135
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5008
  fallback5135:
    unless_null $P5005, vivi_16255136
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16255136:
    set $P5004, $P5005
  fallback5134:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2903
    set $P5011, $P101[0]
    unless_null $P5011, fallback5137
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5012
  fallback5137:
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5138
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5013, $P5017
  fallback5138:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 2904
    set $P5020, $P101[0]
    unless_null $P5020, fallback5139
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5021
  fallback5139:
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback5140
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5026
  fallback5140:
.annotate 'line', 2906
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback5141
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5027, $P5031
  fallback5141:
    $P5032 = $P5027."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2907
    get_hll_global $P5036, "GLOBAL"
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback5142
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5033, $P5037
  fallback5142:
    $P5038 = $P5033."new"("self" :named("name"), "lexical" :named("scope"))
    $P5039 = $P5022."new"($P5032, $P5038, "bind" :named("op"))
    $P5040 = $P5020."push"($P5039)
.annotate 'line', 2908
    set $P5041, $P101[0]
    unless_null $P5041, fallback5143
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5042
  fallback5143:
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback5144
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5043, $P5047
  fallback5144:
    $P5048 = $P5043."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5049 = $P5041."push"($P5048)
.annotate 'line', 2909
    set $P5050, $P101[0]
    unless_null $P5050, fallback5145
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5050, $P5051
  fallback5145:
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Var"]
    unless_null $P5052, fallback5146
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5052, $P5056
  fallback5146:
    $P5057 = $P5052."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5058 = $P5050."push"($P5057)
.annotate 'line', 2910
    $P5059 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2911
    $P5060 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2913
    set $P5068, _lex_param_1["p6regex"]
    unless_null $P5068, fallback5148
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5068, $P5069
  fallback5148:
    $P5070 = $P5068."ast"()
    get_hll_global $P5066, "GLOBAL"
    nqp_get_package_through_who $P5065, $P5066, "QRegex"
    nqp_get_package_through_who $P5064, $P5065, "P6Regex"
    nqp_get_package_through_who $P5063, $P5064, "Actions"
    get_who $P5062, $P5063
    set $P5061, $P5062["qbuildsub"]
    unless_null $P5061, fallback5147
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5061, $P5067
  fallback5147:
    $P5071 = $P5061($P5070, $P101)
    set $P102, $P5071
.annotate 'line', 2914
    get_hll_global $P5075, "GLOBAL"
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["Op"]
    unless_null $P5072, fallback5149
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5072, $P5076
  fallback5149:
.annotate 'line', 2916
    new $P5077, 'ResizablePMCArray'
    box $P5078, "NQPRegex"
    push $P5077, $P5078
    $P5079 = "&lexical_package_lookup"($P5077, _lex_param_1)
    $P5080 = $P5072."new"($P5079, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5080
    set $P103["sink"], $P102
.annotate 'line', 2921
    $P5081 = _lex_param_1."!make"($P103)
    .return ($P5081) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_350_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2924
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5150
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5150:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_351_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2925
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2926
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5151
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5151:
.annotate 'line', 2927
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5152
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5152:
    $P5008 = $P5006."ast"()
    $P5009 = "&block_immediate"($P5008)
    $P5010 = $P5001."new"($P5009, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_352_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2930
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_353_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2934
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5153
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5153:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_354_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2936
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2937
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5154
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5154:
.annotate 'line', 2939
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5155
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback5155:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_355_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2943
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2944
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5156
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5156:
.annotate 'line', 2945
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5157
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback5157:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_356_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2952
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5158
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5158:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_357_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2953
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5159
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5159:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_358_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2954
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5160
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5160:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_359_1346277629.325") :anon :lex :outer("cuid_360_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2956
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2957
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5161
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5161:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3040
    .const 'Sub' $P5011 = 'cuid_361_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_362_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_363_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_364_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_365_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_366_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_367_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_368_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_369_1346277629.325' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_370_1346277629.325' 
    capture_lex $P5011 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_361_1346277629.325' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_362_1346277629.325' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_363_1346277629.325' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_364_1346277629.325' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_365_1346277629.325' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_366_1346277629.325' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_367_1346277629.325' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_368_1346277629.325' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_369_1346277629.325' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_370_1346277629.325' 
    capture_lex $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_361_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3042
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
.annotate 'line', 3043
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5162
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5002, $P5003
  fallback5162:
    $P5004 = $P5002."ast"()
    set $P101, $P5004
.annotate 'line', 3044
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Regex"]
    unless_null $P5005, fallback5163
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5005, $P5009
  fallback5163:
    $P5010 = $P5005."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_362_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3048
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3049
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5164
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5164:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5165
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5165:
    $P5008 = $P5006."ast"()
    $P5009 = $P5001."new"($P5008, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_363_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3053
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3054
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5166
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5166:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5167
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback5167:
.annotate 'line', 3055
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5168
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback5168:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3056
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5169
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5018
  fallback5169:
    $P5019 = $P5017."ast"()
    $P5020 = $P5006."new"($P5016, $P5019)
    $P5021 = $P5001."new"($P5020, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5022 = _lex_param_1."!make"($P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_364_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3060
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3061
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5170
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5170:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5171
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback5171:
.annotate 'line', 3062
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5172
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback5172:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3063
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5173
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5018
  fallback5173:
    $P5019 = $P5017."ast"()
    $P5020 = $P5006."new"($P5016, $P5019)
    $P5021 = $P5001."new"($P5020, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5022 = _lex_param_1."!make"($P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_365_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3067
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3068
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5174
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5174:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5175
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5175:
    $P5008 = $P5006."ast"()
    set $P5009, _lex_param_1["zw"]
    unless_null $P5009, fallback5176
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback5176:
    set $S5001, $P5009
    iseq $I5001, $S5001, "!"
    $P5011 = $P5001."new"($P5008, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_366_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3073
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3074
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5177
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5005
  fallback5177:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5178
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5010
  fallback5178:
.annotate 'line', 3075
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5179
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5011, $P5015
  fallback5179:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3076
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5180
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5018
  fallback5180:
    $P5019 = $P5017."ast"()
    $P5020 = $P5006."new"($P5016, $P5019)
    $P5021 = $P5001."new"($P5020, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5022 = _lex_param_1."!make"($P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_367_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3080
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 3081
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5181
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback5181:
    $P5005 = $P5003."ast"()
    set $P101, $P5005
.annotate 'line', 3082
    $P5006 = $P101."blocktype"("immediate")
.annotate 'line', 3084
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5182
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5007, $P5011
  fallback5182:
.annotate 'line', 3085
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5183
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5012, $P5016
  fallback5183:
.annotate 'line', 3087
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5184
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback5184:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3088
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5185
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5023, $P5027
  fallback5185:
.annotate 'line', 3089
    get_hll_global $P5031, "GLOBAL"
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5186
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5028, $P5032
  fallback5186:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3096
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_368_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3100
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
.annotate 'line', 3101
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Node"]
    unless_null $P5003, fallback5187
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5007
  fallback5187:
.annotate 'line', 3102
    set $P5015, _lex_param_1["nibbler"]
    unless_null $P5015, fallback5189
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5015, $P5016
  fallback5189:
    $P5017 = $P5015."ast"()
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QRegex"
    nqp_get_package_through_who $P5011, $P5012, "P6Regex"
    nqp_get_package_through_who $P5010, $P5011, "Actions"
    get_who $P5009, $P5010
    set $P5008, $P5009["qbuildsub"]
    unless_null $P5008, fallback5188
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5014
  fallback5188:
    $P5018 = $P5008($P5017, 1 :named("anon"), 1 :named("addself"))
    $P5019 = $P5003."new"($P5018)
    set $P101, $P5019
.annotate 'line', 3103
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5190
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5020, $P5024
  fallback5190:
    set $P5025, _lex_param_1["nibbler"]
    unless_null $P5025, fallback5191
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5025, $P5026
  fallback5191:
    $P5027 = $P5025."ast"()
    $P5028 = $P5020."new"($P101, $P5027, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5028
.annotate 'line', 3105
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_369_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3108
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_474_1346277629.325' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_475_1346277629.325' 
    capture_lex $P5091 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5192
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5004
  fallback5192:
    set $S5001, $P5003
    box $P5005, $S5001
    set $P101, $P5005
    set $P5006, _lex_param_1["assertion"]
    unless_null $P5006, fallback5195
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5006, $P5007
  fallback5195:
    unless $P5006 goto if1626_else5193 
.annotate 'line', 3111
.annotate 'line', 3112
    set $P5009, _lex_param_1["assertion"]
    unless_null $P5009, fallback5196
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5009, $P5010
  fallback5196:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback5197
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5008, $P5011
  fallback5197:
    $P5012 = $P5008."ast"()
    set $P102, $P5012
.annotate 'line', 3113
    nqp_decontainerize $P5013, _lex_param_0
    $P5014 = $P5013."subrule_alias"($P102, $P101)
    set $P5089, $P5014
    goto if1626_end5194
  if1626_else5193:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1627_else5198 
    .const 'Sub' $P5015 = 'cuid_474_1346277629.325' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5088, $P5016
    goto if1627_end5199
  if1627_else5198:
.annotate 'line', 3123
.annotate 'line', 3124
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Regex"]
    unless_null $P5017, fallback5216
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5017, $P5021
  fallback5216:
.annotate 'line', 3126
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Node"]
    unless_null $P5022, fallback5217
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5022, $P5026
  fallback5217:
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["SVal"]
    unless_null $P5027, fallback5218
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5027, $P5031
  fallback5218:
    $P5032 = $P5027."new"($P101 :named("value"))
    $P5033 = $P5022."new"($P5032)
    $P5034 = $P5017."new"($P5033, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5034
    set $P5035, _lex_param_1["arglist"]
    unless_null $P5035, fallback5221
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5035, $P5036
  fallback5221:
    unless $P5035 goto if1632_else5219 
.annotate 'line', 3127
.annotate 'line', 3128
    set $P5041, _lex_param_1["arglist"]
    unless_null $P5041, fallback5222
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5041, $P5042
  fallback5222:
    set $P5040, $P5041[0]
    unless_null $P5040, fallback5223
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5040, $P5043
  fallback5223:
    $P5044 = $P5040."ast"()
    $P5045 = $P5044."list"()
    set $P5037, $P5045
    iter $P5039, $P5045
    new $P5047, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5047, for_handlers5225
    push_eh $P5047
  for_next5226:
    unless $P5039, for_done5228
    shift $P5048, $P5039
  for_redo5227:
    .const 'Sub' $P5046 = 'cuid_475_1346277629.325' 
    capture_lex $P5046
    $P5037 = $P5046($P5048)
    goto for_next5226
  for_handlers5225:
    .get_results ($P5047)
    pop_upto_eh $P5047
    getattribute $P5047, $P5047, 'type'
    eq $P5047, .CONTROL_LOOP_NEXT, for_next5226
    eq $P5047, .CONTROL_LOOP_REDO, for_redo5227
  for_done5228:
    pop_eh 
    set $P5087, $P5037
    goto if1632_end5220
  if1632_else5219:
    set $P5049, _lex_param_1["nibbler"]
    unless_null $P5049, fallback5231
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5049, $P5050
  fallback5231:
    set $P5086, $P5049
    unless $P5049 goto if1633_end5230 
.annotate 'line', 3130
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1634_else5232 
.annotate 'line', 3132
    set $P5051, $P102[0]
    unless_null $P5051, fallback5234
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5051, $P5052
  fallback5234:
    nqp_decontainerize $P5060, _lex_param_0
    set $P5062, _lex_param_1["nibbler"]
    unless_null $P5062, fallback5236
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5062, $P5063
  fallback5236:
    set $P5061, $P5062[0]
    unless_null $P5061, fallback5237
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5061, $P5064
  fallback5237:
    $P5065 = $P5061."ast"()
    $P5066 = $P5060."flip_ast"($P5065)
    get_hll_global $P5058, "GLOBAL"
    nqp_get_package_through_who $P5057, $P5058, "QRegex"
    nqp_get_package_through_who $P5056, $P5057, "P6Regex"
    nqp_get_package_through_who $P5055, $P5056, "Actions"
    get_who $P5054, $P5055
    set $P5053, $P5054["qbuildsub"]
    unless_null $P5053, fallback5235
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5053, $P5059
  fallback5235:
    $P5067 = $P5053($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5051."push"($P5067)
    set $P5085, $P5068
    goto if1634_end5233
  if1634_else5232:
.annotate 'line', 3133
    set $P5069, $P102[0]
    unless_null $P5069, fallback5238
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5069, $P5070
  fallback5238:
    set $P5079, _lex_param_1["nibbler"]
    unless_null $P5079, fallback5240
    nqp_get_sc_object $P5080, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5079, $P5080
  fallback5240:
    set $P5078, $P5079[0]
    unless_null $P5078, fallback5241
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5078, $P5081
  fallback5241:
    $P5082 = $P5078."ast"()
    get_hll_global $P5076, "GLOBAL"
    nqp_get_package_through_who $P5075, $P5076, "QRegex"
    nqp_get_package_through_who $P5074, $P5075, "P6Regex"
    nqp_get_package_through_who $P5073, $P5074, "Actions"
    get_who $P5072, $P5073
    set $P5071, $P5072["qbuildsub"]
    unless_null $P5071, fallback5239
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5071, $P5077
  fallback5239:
    $P5083 = $P5071($P5082, 1 :named("anon"), 1 :named("addself"))
    $P5084 = $P5069."push"($P5083)
    set $P5085, $P5084
  if1634_end5233:
    set $P5086, $P5085
  if1633_end5230:
    set $P5087, $P5086
  if1632_end5220:
    set $P5088, $P5087
  if1627_end5199:
    set $P5089, $P5088
  if1626_end5194:
.annotate 'line', 3136
    $P5090 = _lex_param_1."!make"($P102)
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1346277629.325") :anon :lex :outer("cuid_369_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3115
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5200
    get_hll_global $P5007, "GLOBAL"
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5201
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5201:
    unless_null $P5005, vivi_16285202
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_16285202:
    set $P5004, $P5005
  fallback5200:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5203
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5003, $P5012
  fallback5203:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1629_end5205 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5206
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5207
    get_hll_global $P5020, "GLOBAL"
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5207:
    unless_null $P5016, vivi_16305208
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_16305208:
    set $P5015, $P5016
  fallback5206:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5209
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5014, $P5023
  fallback5209:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
    set $P5025, $P101
  if1629_end5205:
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback5210
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["%RX"]
    unless_null $P5029, fallback5211
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5029, $P5034
  fallback5211:
    unless_null $P5029, vivi_16315212
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5029, $P5035
  vivi_16315212:
    set $P5028, $P5029
  fallback5210:
    set $P5027, $P5028["name"]
    unless_null $P5027, fallback5213
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5027, $P5036
  fallback5213:
    set $S5005, $P5027
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5037, $S5003
    set $P102, $P5037
.annotate 'line', 3120
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Regex"]
    unless_null $P5038, fallback5214
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5038, $P5042
  fallback5214:
    find_lex $P5043, "$/"
.annotate 'line', 3121
    get_hll_global $P5047, "GLOBAL"
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Regex"]
    unless_null $P5044, fallback5215
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5044, $P5048
  fallback5215:
    find_lex $P5049, "$/"
    $P5050 = $P5044."new"($P102, "literal" :named("rxtype"), $P5049 :named("node"))
    $P5051 = $P5038."new"($P5050, "sym" :named("name"), "subcapture" :named("rxtype"), $P5043 :named("node"))
    store_lex "$qast", $P5051
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1346277629.325") :anon :lex :outer("cuid_369_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3128
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5224
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5003
  fallback5224:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_370_1346277629.325") :anon :lex :outer("cuid_371_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3139
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3140
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5242
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    set $P5001, $P5002
  fallback5242:
    $P5003 = $P5001."ast"()
    $P5004 = _lex_param_1."!make"($P5003)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1346277629.325") :anon :lex :outer("cuid_1_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3145
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649", 7
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1346277629.325") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_476_1346277629.325' 
    capture_lex $P5001 
    .local pmc cur_sc 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1346277629.325" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizableStringArray'
    null $S5001
    push $P5003, $S5001
    push $P5003, "P6opaque"
    push $P5003, "QAST"
    push $P5003, "QRegex"
    push $P5003, "NQPCursorRole"
    push $P5003, "C93A2896AF049E45B5F868F2B78F46945E34D3FC-1346277585.638"
    push $P5003, "src\\stage2\\QRegex.nqp"
    push $P5003, "NQPMatch"
    push $P5003, "NQPCursor"
    push $P5003, "NQPRegexMethod"
    push $P5003, "NQPRegex"
    push $P5003, "HLL"
    push $P5003, "PIRT"
    push $P5003, "PAST"
    push $P5003, "__PAST_CORE_SC__"
    push $P5003, "NQP"
    push $P5003, "CREATE"
    push $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346277580.649"
    push $P5003, "src\\stage2\\NQPCORE.setting"
    push $P5003, "bless"
    push $P5003, "BUILDALL"
    push $P5003, "new"
    push $P5003, "Str"
    push $P5003, "Numeric"
    push $P5003, "Int"
    push $P5003, "at_pos"
    push $P5003, "at_key"
    push $P5003, "defined"
    push $P5003, "ACCEPTS"
    push $P5003, "isa"
    push $P5003, "__dump"
    push $P5003, "BUILD"
    push $P5003, "slot_for_object"
    push $P5003, "2BB67A389134BBAD0A6C35350CCD1D56BE456969-1346277591.613"
    push $P5003, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5003, "get_slot_past_for_object"
    push $P5003, "get_slot_past_for_code_ref_at"
    push $P5003, "set_slot_past"
    push $P5003, "set_cur_sc"
    push $P5003, "add_object_to_cur_sc_past"
    push $P5003, "add_object"
    push $P5003, "add_root_code_ref"
    push $P5003, "update_root_code_ref"
    push $P5003, "is_precompilation_mode"
    push $P5003, "add_load_dependency_task"
    push $P5003, "add_fixup_task"
    push $P5003, "get_ref"
    push $P5003, "sc"
    push $P5003, "handle"
    push $P5003, "code_ref_blocks"
    push $P5003, "load_dependency_tasks"
    push $P5003, "fixup_tasks"
    push $P5003, "serialize_and_produce_deserialization_past"
    push $P5003, "push_lexpad"
    push $P5003, "pop_lexpad"
    push $P5003, "cur_lexpad"
    push $P5003, "get_legacy_block_list"
    push $P5003, "load_setting"
    push $P5003, "load_module"
    push $P5003, "install_package_symbol"
    push $P5003, "install_lexical_symbol"
    push $P5003, "install_package_routine"
    push $P5003, "create_code"
    push $P5003, "pkg_create_mo"
    push $P5003, "pkg_add_attribute"
    push $P5003, "pkg_add_method"
    push $P5003, "set_routine_signature"
    push $P5003, "pkg_set_body_block"
    push $P5003, "pkg_add_parent_or_role"
    push $P5003, "pkg_add_parrot_vtable_handler_mapping"
    push $P5003, "pkg_compose"
    push $P5003, "run_begin_block"
    push $P5003, "libs"
    push $P5003, "add_initializations"
    push $P5003, "is_lexical"
    push $P5003, "is_package"
    push $P5003, "is_scope"
    push $P5003, "known_sym"
    push $P5003, "find_sym"
    push $P5003, "$!sc"
    push $P5003, "$!handle"
    push $P5003, "$!precomp_mode"
    push $P5003, "$!num_code_refs"
    push $P5003, "$!code_ref_blocks"
    push $P5003, "@!load_dependency_tasks"
    push $P5003, "@!fixup_tasks"
    push $P5003, "%!addr_to_slot"
    push $P5003, "@!BLOCKS"
    push $P5003, "%!code_objects_to_fix_up"
    push $P5003, "%!code_object_fixup_list"
    push $P5003, "%!code_stub_sc_idx"
    push $P5003, "MATCH"
    push $P5003, "Bool"
    push $P5003, "parse"
    push $P5003, "!INTERPOLATE"
    push $P5003, "!INTERPOLATE_REGEX"
    push $P5003, "target"
    push $P5003, "from"
    push $P5003, "pos"
    push $P5003, "CAPHASH"
    push $P5003, "!cursor_init"
    push $P5003, "!cursor_start"
    push $P5003, "!cursor_start_subcapture"
    push $P5003, "!cursor_capture"
    push $P5003, "!cursor_push_cstack"
    push $P5003, "!cursor_pass"
    push $P5003, "!cursor_fail"
    push $P5003, "!cursor_next"
    push $P5003, "!cursor_more"
    push $P5003, "!reduce"
    push $P5003, "!reduce_with_match"
    push $P5003, "!protoregex"
    push $P5003, "!protoregex_nfa"
    push $P5003, "!protoregex_table"
    push $P5003, "!alt"
    push $P5003, "!alt_nfa"
    push $P5003, "!BACKREF"
    push $P5003, "!LITERAL"
    push $P5003, "at"
    push $P5003, "before"
    push $P5003, "after"
    push $P5003, "ws"
    push $P5003, "ww"
    push $P5003, "wb"
    push $P5003, "ident"
    push $P5003, "alpha"
    push $P5003, "alnum"
    push $P5003, "upper"
    push $P5003, "lower"
    push $P5003, "digit"
    push $P5003, "xdigit"
    push $P5003, "space"
    push $P5003, "blank"
    push $P5003, "cntrl"
    push $P5003, "punct"
    push $P5003, "FAILGOAL"
    push $P5003, "termish"
    push $P5003, "term"
    push $P5003, "infix"
    push $P5003, "prefix"
    push $P5003, "postfix"
    push $P5003, "circumfix"
    push $P5003, "postcircumfix"
    push $P5003, "term:sym<circumfix>"
    push $P5003, "infixish"
    push $P5003, "prefixish"
    push $P5003, "postfixish"
    push $P5003, "nullterm"
    push $P5003, "nullterm_alt"
    push $P5003, "nulltermish"
    push $P5003, "quote_delimited"
    push $P5003, "quote_atom"
    push $P5003, "decint"
    push $P5003, "decints"
    push $P5003, "hexint"
    push $P5003, "hexints"
    push $P5003, "octint"
    push $P5003, "octints"
    push $P5003, "binint"
    push $P5003, "binints"
    push $P5003, "integer"
    push $P5003, "dec_number"
    push $P5003, "escale"
    push $P5003, "quote_escape"
    push $P5003, "quote_escape:sym<backslash>"
    push $P5003, "quote_escape:sym<stopper>"
    push $P5003, "quote_escape:sym<bs>"
    push $P5003, "quote_escape:sym<nl>"
    push $P5003, "quote_escape:sym<cr>"
    push $P5003, "quote_escape:sym<tab>"
    push $P5003, "quote_escape:sym<ff>"
    push $P5003, "quote_escape:sym<esc>"
    push $P5003, "quote_escape:sym<hex>"
    push $P5003, "quote_escape:sym<oct>"
    push $P5003, "quote_escape:sym<chr>"
    push $P5003, "quote_escape:sym<0>"
    push $P5003, "quote_escape:sym<misc>"
    push $P5003, "charname"
    push $P5003, "charnames"
    push $P5003, "charspec"
    push $P5003, "O"
    push $P5003, "panic"
    push $P5003, "peek_delimiters"
    push $P5003, "quote_EXPR"
    push $P5003, "quotemod_check"
    push $P5003, "starter"
    push $P5003, "stopper"
    push $P5003, "split_words"
    push $P5003, "EXPR"
    push $P5003, "EXPR_reduce"
    push $P5003, "ternary"
    push $P5003, "MARKER"
    push $P5003, "MARKED"
    push $P5003, "LANG"
    push $P5003, "TOP"
    push $P5003, "identifier"
    push $P5003, "name"
    push $P5003, "deflongname"
    push $P5003, "ENDSTMT"
    push $P5003, "unv"
    push $P5003, "pod_comment"
    push $P5003, "comp_unit"
    push $P5003, "statementlist"
    push $P5003, "statement"
    push $P5003, "eat_terminator"
    push $P5003, "xblock"
    push $P5003, "pblock"
    push $P5003, "lambda"
    push $P5003, "block"
    push $P5003, "blockoid"
    push $P5003, "newpad"
    push $P5003, "outerctx"
    push $P5003, "GLOBALish"
    push $P5003, "finishpad"
    push $P5003, "you_are_here"
    push $P5003, "terminator"
    push $P5003, "terminator:sym<;>"
    push $P5003, "terminator:sym<}>"
    push $P5003, "statement_control"
    push $P5003, "statement_control:sym<use>"
    push $P5003, "statement_control:sym<if>"
    push $P5003, "statement_control:sym<unless>"
    push $P5003, "statement_control:sym<while>"
    push $P5003, "statement_control:sym<repeat>"
    push $P5003, "statement_control:sym<for>"
    push $P5003, "statement_control:sym<CATCH>"
    push $P5003, "statement_control:sym<CONTROL>"
    push $P5003, "statement_prefix"
    push $P5003, "statement_prefix:sym<BEGIN>"
    push $P5003, "statement_prefix:sym<INIT>"
    push $P5003, "statement_prefix:sym<try>"
    push $P5003, "blorst"
    push $P5003, "statement_mod_cond"
    push $P5003, "statement_mod_cond:sym<if>"
    push $P5003, "statement_mod_cond:sym<unless>"
    push $P5003, "statement_mod_loop"
    push $P5003, "statement_mod_loop:sym<while>"
    push $P5003, "statement_mod_loop:sym<until>"
    push $P5003, "statement_mod_loop:sym<for>"
    push $P5003, "term:sym<fatarrow>"
    push $P5003, "term:sym<colonpair>"
    push $P5003, "term:sym<variable>"
    push $P5003, "term:sym<package_declarator>"
    push $P5003, "term:sym<scope_declarator>"
    push $P5003, "term:sym<routine_declarator>"
    push $P5003, "term:sym<multi_declarator>"
    push $P5003, "term:sym<regex_declarator>"
    push $P5003, "term:sym<statement_prefix>"
    push $P5003, "term:sym<lambda>"
    push $P5003, "fatarrow"
    push $P5003, "colonpair"
    push $P5003, "variable"
    push $P5003, "sigil"
    push $P5003, "twigil"
    push $P5003, "package_declarator"
    push $P5003, "package_declarator:sym<module>"
    push $P5003, "package_declarator:sym<knowhow>"
    push $P5003, "package_declarator:sym<class>"
    push $P5003, "package_declarator:sym<grammar>"
    push $P5003, "package_declarator:sym<role>"
    push $P5003, "package_declarator:sym<native>"
    push $P5003, "package_declarator:sym<stub>"
    push $P5003, "package_def"
    push $P5003, "scope_declarator"
    push $P5003, "scope_declarator:sym<my>"
    push $P5003, "scope_declarator:sym<our>"
    push $P5003, "scope_declarator:sym<has>"
    push $P5003, "scoped"
    push $P5003, "typename"
    push $P5003, "declarator"
    push $P5003, "variable_declarator"
    push $P5003, "routine_declarator"
    push $P5003, "routine_declarator:sym<sub>"
    push $P5003, "routine_declarator:sym<method>"
    push $P5003, "routine_def"
    push $P5003, "method_def"
    push $P5003, "onlystar"
    push $P5003, "multi_declarator"
    push $P5003, "multi_declarator:sym<multi>"
    push $P5003, "multi_declarator:sym<proto>"
    push $P5003, "multi_declarator:sym<null>"
    push $P5003, "signature"
    push $P5003, "parameter"
    push $P5003, "param_var"
    push $P5003, "named_param"
    push $P5003, "default_value"
    push $P5003, "trait"
    push $P5003, "trait_mod"
    push $P5003, "trait_mod:sym<is>"
    push $P5003, "regex_declarator"
    push $P5003, "dotty"
    push $P5003, "term:sym<self>"
    push $P5003, "term:sym<identifier>"
    push $P5003, "term:sym<name>"
    push $P5003, "term:sym<pir::op>"
    push $P5003, "term:sym<pir::const>"
    push $P5003, "term:sym<nqp::op>"
    push $P5003, "term:sym<onlystar>"
    push $P5003, "args"
    push $P5003, "arglist"
    push $P5003, "term:sym<value>"
    push $P5003, "value"
    push $P5003, "number"
    push $P5003, "quote"
    push $P5003, "quote:sym<apos>"
    push $P5003, "quote:sym<dblq>"
    push $P5003, "quote:sym<q>"
    push $P5003, "quote:sym<qq>"
    push $P5003, "quote:sym<Q>"
    push $P5003, "quote:sym<Q:PIR>"
    push $P5003, "quote:sym</ />"
    push $P5003, "quote_escape:sym<$>"
    push $P5003, "quote_escape:sym<{ }>"
    push $P5003, "circumfix:sym<( )>"
    push $P5003, "circumfix:sym<[ ]>"
    push $P5003, "circumfix:sym<ang>"
    push $P5003, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5003, "circumfix:sym<{ }>"
    push $P5003, "circumfix:sym<sigil>"
    push $P5003, "semilist"
    push $P5003, "infixstopper"
    push $P5003, "postcircumfix:sym<[ ]>"
    push $P5003, "postcircumfix:sym<{ }>"
    push $P5003, "postcircumfix:sym<ang>"
    push $P5003, "postcircumfix:sym<( )>"
    push $P5003, "postfix:sym<.>"
    push $P5003, "prefix:sym<++>"
    push $P5003, "prefix:sym<-->"
    push $P5003, "postfix:sym<++>"
    push $P5003, "postfix:sym<-->"
    push $P5003, "infix:sym<**>"
    push $P5003, "prefix:sym<+>"
    push $P5003, "prefix:sym<~>"
    push $P5003, "prefix:sym<->"
    push $P5003, "prefix:sym<?>"
    push $P5003, "prefix:sym<!>"
    push $P5003, "prefix:sym<|>"
    push $P5003, "infix:sym<*>"
    push $P5003, "infix:sym</>"
    push $P5003, "infix:sym<%>"
    push $P5003, "infix:sym<+&>"
    push $P5003, "infix:sym<+>"
    push $P5003, "infix:sym<->"
    push $P5003, "infix:sym<+|>"
    push $P5003, "infix:sym<+^>"
    push $P5003, "infix:sym<~>"
    push $P5003, "infix:sym<==>"
    push $P5003, "infix:sym<!=>"
    push $P5003, "infix:sym<<=>"
    push $P5003, "infix:sym<>=>"
    push $P5003, "infix:sym<<>"
    push $P5003, "infix:sym<>>"
    push $P5003, "infix:sym<eq>"
    push $P5003, "infix:sym<ne>"
    push $P5003, "infix:sym<le>"
    push $P5003, "infix:sym<ge>"
    push $P5003, "infix:sym<lt>"
    push $P5003, "infix:sym<gt>"
    push $P5003, "infix:sym<=:=>"
    push $P5003, "infix:sym<~~>"
    push $P5003, "infix:sym<&&>"
    push $P5003, "infix:sym<||>"
    push $P5003, "infix:sym<//>"
    push $P5003, "infix:sym<?? !!>"
    push $P5003, "infix:sym<=>"
    push $P5003, "infix:sym<:=>"
    push $P5003, "infix:sym<::=>"
    push $P5003, "infix:sym<,>"
    push $P5003, "prefix:sym<return>"
    push $P5003, "prefix:sym<make>"
    push $P5003, "term:sym<last>"
    push $P5003, "term:sym<next>"
    push $P5003, "term:sym<redo>"
    push $P5003, "smartmatch"
    push $P5003, "$!orig"
    push $P5003, "$!target"
    push $P5003, "$!from"
    push $P5003, "$!pos"
    push $P5003, "$!match"
    push $P5003, "$!name"
    push $P5003, "$!bstack"
    push $P5003, "$!cstack"
    push $P5003, "$!regexsub"
    push $P5003, "$!restart"
    push $P5003, "CFB984DF95ACEC0885E1D037E3123D5A32471909-1346277621.81"
    push $P5003, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5003, "obs"
    push $P5003, "normspace"
    push $P5003, "arg"
    push $P5003, "nibbler"
    push $P5003, "termaltseq"
    push $P5003, "termconjseq"
    push $P5003, "termalt"
    push $P5003, "termconj"
    push $P5003, "quantified_atom"
    push $P5003, "separator"
    push $P5003, "atom"
    push $P5003, "quantifier"
    push $P5003, "quantifier:sym<*>"
    push $P5003, "quantifier:sym<+>"
    push $P5003, "quantifier:sym<?>"
    push $P5003, "quantifier:sym<{N,M}>"
    push $P5003, "quantifier:sym<**>"
    push $P5003, "backmod"
    push $P5003, "metachar"
    push $P5003, "metachar:sym<ws>"
    push $P5003, "metachar:sym<[ ]>"
    push $P5003, "metachar:sym<( )>"
    push $P5003, "metachar:sym<'>"
    push $P5003, "metachar:sym<\">"
    push $P5003, "metachar:sym<.>"
    push $P5003, "metachar:sym<^>"
    push $P5003, "metachar:sym<^^>"
    push $P5003, "metachar:sym<$>"
    push $P5003, "metachar:sym<$$>"
    push $P5003, "metachar:sym<:::>"
    push $P5003, "metachar:sym<::>"
    push $P5003, "metachar:sym<lwb>"
    push $P5003, "metachar:sym<rwb>"
    push $P5003, "metachar:sym<from>"
    push $P5003, "metachar:sym<to>"
    push $P5003, "metachar:sym<bs>"
    push $P5003, "metachar:sym<mod>"
    push $P5003, "metachar:sym<quantifier>"
    push $P5003, "metachar:sym<~>"
    push $P5003, "metachar:sym<{*}>"
    push $P5003, "metachar:sym<assert>"
    push $P5003, "metachar:sym<var>"
    push $P5003, "metachar:sym<PIR>"
    push $P5003, "backslash"
    push $P5003, "backslash:sym<s>"
    push $P5003, "backslash:sym<b>"
    push $P5003, "backslash:sym<e>"
    push $P5003, "backslash:sym<f>"
    push $P5003, "backslash:sym<h>"
    push $P5003, "backslash:sym<r>"
    push $P5003, "backslash:sym<t>"
    push $P5003, "backslash:sym<v>"
    push $P5003, "backslash:sym<o>"
    push $P5003, "backslash:sym<x>"
    push $P5003, "backslash:sym<c>"
    push $P5003, "backslash:sym<A>"
    push $P5003, "backslash:sym<z>"
    push $P5003, "backslash:sym<Z>"
    push $P5003, "backslash:sym<Q>"
    push $P5003, "backslash:sym<unrec>"
    push $P5003, "backslash:sym<misc>"
    push $P5003, "assertion"
    push $P5003, "assertion:sym<?>"
    push $P5003, "assertion:sym<!>"
    push $P5003, "assertion:sym<|>"
    push $P5003, "assertion:sym<method>"
    push $P5003, "assertion:sym<name>"
    push $P5003, "assertion:sym<[>"
    push $P5003, "cclass_elem"
    push $P5003, "mod_internal"
    push $P5003, "mod_ident"
    push $P5003, "mod_ident:sym<ignorecase>"
    push $P5003, "mod_ident:sym<ratchet>"
    push $P5003, "mod_ident:sym<sigspace>"
    push $P5003, "metachar:sym<:my>"
    push $P5003, "metachar:sym<{ }>"
    push $P5003, "metachar:sym<nqpvar>"
    push $P5003, "assertion:sym<{ }>"
    push $P5003, "assertion:sym<?{ }>"
    push $P5003, "assertion:sym<var>"
    push $P5003, "codeblock"
    push $P5003, "ints_to_string"
    push $P5003, "CTXSAVE"
    push $P5003, "SET_BLOCK_OUTER_CTX"
    push $P5003, "subrule_alias"
    push $P5003, "flip_ast"
    push $P5003, "get_exports"
    push $P5003, "get_module"
    push $P5003, "language"
    push $P5003, "compiler"
    push $P5003, "config"
    push $P5003, "autoprint"
    push $P5003, "interactive"
    push $P5003, "eval"
    push $P5003, "ctxsave"
    push $P5003, "stages"
    push $P5003, "parsegrammar"
    push $P5003, "parseactions"
    push $P5003, "interactive_banner"
    push $P5003, "interactive_prompt"
    push $P5003, "compiler_progname"
    push $P5003, "commandline_options"
    push $P5003, "command_line"
    push $P5003, "command_eval"
    push $P5003, "process_args"
    push $P5003, "evalfiles"
    push $P5003, "compile"
    push $P5003, "start"
    push $P5003, "past"
    push $P5003, "post"
    push $P5003, "pirbegin"
    push $P5003, "pir"
    push $P5003, "evalpmc"
    push $P5003, "dumper"
    push $P5003, "usage"
    push $P5003, "version"
    push $P5003, "show-config"
    push $P5003, "verbose-config"
    push $P5003, "vmstat"
    push $P5003, "nqpevent"
    push $P5003, "removestage"
    push $P5003, "addstage"
    push $P5003, "parse_name"
    push $P5003, "lineof"
    push $P5003, "user-progname"
    push $P5003, "cli-options"
    push $P5003, "cli-arguments"
    push $P5003, "@!stages"
    push $P5003, "$!parsegrammar"
    push $P5003, "$!parseactions"
    push $P5003, "@!cmdoptions"
    push $P5003, "$!usage"
    push $P5003, "$!compiler_progname"
    push $P5003, "$!language"
    push $P5003, "%!config"
    push $P5003, "$!user_progname"
    push $P5003, "@!cli-arguments"
    push $P5003, "%!cli-options"
    push $P5003, "__6MODEL_CORE__"
    push $P5003, "737799CC9C4B888950184E8D92A500CE7A5E08DA-1346277574.503"
    push $P5003, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5003, "NQP::World"
    push $P5003, "NQP::Grammar"
    push $P5003, "orig"
    push $P5003, "match"
    push $P5003, "bstack"
    push $P5003, "cstack"
    push $P5003, "regexsub"
    push $P5003, "restart"
    push $P5003, "NQP::Regex"
    push $P5003, "NQP::Actions"
    push $P5003, "NQP::RegexActions"
    push $P5003, "NQP::Compiler"
    push $P5003, "CompileTimeValue"
    push $P5003, "AA49D86054CDC686E34A37C6F89EC4059A76B342-1346277582.704"
    push $P5003, "src\\stage2\\QASTNode.nqp"
    push $P5003, "SpecialArg"
    push $P5003, "Node"
    push $P5003, "Regex"
    push $P5003, "IVal"
    push $P5003, "NVal"
    push $P5003, "SVal"
    push $P5003, "BVal"
    push $P5003, "WVal"
    push $P5003, "Want"
    push $P5003, "Var"
    push $P5003, "VarWithFallback"
    push $P5003, "Op"
    push $P5003, "VM"
    push $P5003, "Stmts"
    push $P5003, "Stmt"
    push $P5003, "Block"
    push $P5003, "BlockMemo"
    push $P5003, "Unquote"
    push $P5003, "CompUnit"
    push $P5003, "InlinePlaceholder"
    push $P5003, "Operations"
    push $P5003, "41C17C7E374A7792284F461955403B04C8234C59-1346277601.013"
    push $P5003, "src\\stage2\\QAST.nqp"
    push $P5003, "Compiler"
    push $P5003, "NFA"
    push $P5003, "P6Regex"
    push $P5003, "Grammar"
    push $P5003, "Actions"
    push $P5003, "CommandLine"
    push $P5003, "World"
    push $P5003, "CallResult"
    push $P5003, "Sub"
    push $P5003, "Ops"
    push $P5003, "Label"
    push $P5003, "RegexActions"
    .const 'Sub' $P5004 = 'cuid_476_1346277629.325' 
    capture_lex $P5004
    $P5005 = $P5004()
    nqp_deserialize_sc "", cur_sc, $P5003, $P5005
    .const "LexInfo" $P5001 = "cuid_1_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 0
    $P5003 = $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 0
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 2
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 3
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 31
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_32_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_32_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_32_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 1
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_32_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_33_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 215
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_223_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 32
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_223_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_223_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 32
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_223_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 227
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_243_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 216
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_243_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_243_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 216
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_243_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_244_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_245_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_357_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 344
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_360_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 228
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_360_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_360_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 228
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_360_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_361_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_367_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_368_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_369_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_370_1346277629.325" 
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 355
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_371_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 345
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_371_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_371_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 345
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_371_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 356
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_372_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1346277629.325"
    nqp_get_sc_object $P5002, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 356
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_372_1346277629.325"
    $P5005 = $P5004."finish_static_lexpad"()
    nqp_get_sc_object $P5001, "CB61E3C1B5363E6B68D06D3585E13122270E9BD7-1346277629.363", 0
    set_hll_global "GLOBAL", $P5001
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1346277629.325") :anon :lex :outer("cuid_477_1346277629.325")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_367_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_368_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_369_1346277629.325" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_370_1346277629.325" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1346277629.325") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_1_1346277629.325" 
    $P5002 = $P5001()
    .return ($P5002) 
.end